
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b264  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b0  0801b328  0801b328  0001c328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c5d8  0801c5d8  0001e3c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c5d8  0801c5d8  0001d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c5e0  0801c5e0  0001e3c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c5e0  0801c5e0  0001d5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c5e4  0801c5e4  0001d5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c8  20000000  0801c5e8  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d58  200003c8  0801c9b0  0001e3c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20004120  0801c9b0  0001f120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001e3c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c735  00000000  00000000  0001e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000820f  00000000  00000000  0004ab25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002560  00000000  00000000  00052d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c62  00000000  00000000  00055298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021244  00000000  00000000  00056efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b14d  00000000  00000000  0007813e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6c2  00000000  00000000  000b328b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015094d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009990  00000000  00000000  00150990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c8 	.word	0x200003c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801b30c 	.word	0x0801b30c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003cc 	.word	0x200003cc
 8000104:	0801b30c 	.word	0x0801b30c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801bec8 	.word	0x0801bec8
 8000d08:	0801bf08 	.word	0x0801bf08
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801bf44 	.word	0x0801bf44
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003560:	f007 ff02 	bl	800b368 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003564:	2316      	movs	r3, #22
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e015      	b.n	800359a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2416      	movs	r4, #22
 8003574:	193b      	adds	r3, r7, r4
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2000      	movs	r0, #0
 8003582:	f007 ff59 	bl	800b438 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800358e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003590:	193b      	adds	r3, r7, r4
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	3201      	adds	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	2316      	movs	r3, #22
 800359c:	18fa      	adds	r2, r7, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e2      	bcc.n	800356e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80035a8:	f007 ff0c 	bl	800b3c4 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	200003e4 	.word	0x200003e4

080035bc <WriteUint8ArrayEepromSafe>:

uint32_t WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	0019      	movs	r1, r3
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ffb0 	bl	800354c <WriteUint8ArrayEeprom>
    }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e010      	b.n	8003630 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800360e:	2016      	movs	r0, #22
 8003610:	183b      	adds	r3, r7, r0
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	0019      	movs	r1, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	3201      	adds	r2, #1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2316      	movs	r3, #22
 8003632:	18fa      	adds	r2, r7, r3
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e7      	bcc.n	800360e <ReadUint8ArrayEEprom+0x18>
    }
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003656:	f007 fe87 	bl	800b368 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800365a:	230e      	movs	r3, #14
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e00c      	b.n	800367e <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003664:	240e      	movs	r4, #14
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f007 feb6 	bl	800b3e0 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003674:	193b      	adds	r3, r7, r4
 8003676:	193a      	adds	r2, r7, r4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	3204      	adds	r2, #4
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	230e      	movs	r3, #14
 8003680:	18fa      	adds	r2, r7, r3
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3eb      	bcc.n	8003664 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800368c:	f007 fe9a 	bl	800b3c4 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b005      	add	sp, #20
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800369c:	f002 f800 	bl	80056a0 <ReadBatteryVoltage>
 80036a0:	1c02      	adds	r2, r0, #0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <setCharges+0x20>)
 80036a4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80036a6:	f002 f85d 	bl	8005764 <ReadSolarVoltage>
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <setCharges+0x24>)
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	2000050c 	.word	0x2000050c
 80036bc:	20000510 	.word	0x20000510

080036c0 <ESP_GetHT>:

void ESP_GetHT(float temp, float humid){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <ESP_GetHT+0x20>)
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036d0:	4b04      	ldr	r3, [pc, #16]	@ (80036e4 <ESP_GetHT+0x24>)
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b002      	add	sp, #8
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	20000504 	.word	0x20000504
 80036e4:	20000508 	.word	0x20000508

080036e8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	1dbb      	adds	r3, r7, #6
 80036f4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036f6:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <setMeasurement+0x2c>)
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <setMeasurement+0x30>)
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <setMeasurement+0x34>)
 8003704:	1dba      	adds	r2, r7, #6
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	801a      	strh	r2, [r3, #0]
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	20000504 	.word	0x20000504
 8003718:	20000508 	.word	0x20000508
 800371c:	20000514 	.word	0x20000514

08003720 <setMic>:
void setMic(float dB){
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003728:	4b03      	ldr	r3, [pc, #12]	@ (8003738 <setMic+0x18>)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	20000518 	.word	0x20000518

0800373c <SetConfigMode>:

void SetConfigMode(){
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003740:	4b02      	ldr	r3, [pc, #8]	@ (800374c <SetConfigMode+0x10>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
}
 8003746:	46c0      	nop			@ (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200004f2 	.word	0x200004f2

08003750 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003754:	f006 fdd4 	bl	800a300 <HAL_GetUIDw0>
 8003758:	0002      	movs	r2, r0
 800375a:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <ESP_GetUID+0x28>)
 800375c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800375e:	f006 fdd9 	bl	800a314 <HAL_GetUIDw1>
 8003762:	0002      	movs	r2, r0
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <ESP_GetUID+0x28>)
 8003766:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003768:	f006 fdde 	bl	800a328 <HAL_GetUIDw2>
 800376c:	0002      	movs	r2, r0
 800376e:	4b02      	ldr	r3, [pc, #8]	@ (8003778 <ESP_GetUID+0x28>)
 8003770:	609a      	str	r2, [r3, #8]
}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200004f8 	.word	0x200004f8

0800377c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <ESP_Init+0x20>)
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800378a:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <ESP_Init+0x24>)
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003790:	f7ff ffde 	bl	8003750 <ESP_GetUID>
}
 8003794:	46c0      	nop			@ (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200003e8 	.word	0x200003e8
 80037a0:	20000021 	.word	0x20000021

080037a4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80037a4:	b5b0      	push	{r4, r5, r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	000a      	movs	r2, r1
 80037ae:	1cbb      	adds	r3, r7, #2
 80037b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80037b2:	4b0e      	ldr	r3, [pc, #56]	@ (80037ec <ESP_Send+0x48>)
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	250f      	movs	r5, #15
 80037b8:	197c      	adds	r4, r7, r5
 80037ba:	1cbb      	adds	r3, r7, #2
 80037bc:	881a      	ldrh	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0019      	movs	r1, r3
 80037c2:	f00e f989 	bl	8011ad8 <HAL_UART_Transmit_DMA>
 80037c6:	0003      	movs	r3, r0
 80037c8:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037ca:	197b      	adds	r3, r7, r5
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80037d2:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <ESP_Send+0x4c>)
 80037d4:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <ESP_Send+0x50>)
 80037d6:	0019      	movs	r1, r3
 80037d8:	2003      	movs	r0, #3
 80037da:	f006 f9dd 	bl	8009b98 <CreateLine>
    return false;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <ESP_Send+0x40>
  }
  return true;
 80037e2:	2301      	movs	r3, #1
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bdb0      	pop	{r4, r5, r7, pc}
 80037ec:	200003e8 	.word	0x200003e8
 80037f0:	0801b328 	.word	0x0801b328
 80037f4:	0801b348 	.word	0x0801b348

080037f8 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	000a      	movs	r2, r1
 8003802:	1cfb      	adds	r3, r7, #3
 8003804:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <ESP_Receive+0x58>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 800380c:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <ESP_Receive+0x5c>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	1cfb      	adds	r3, r7, #3
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b29a      	uxth	r2, r3
 8003816:	250f      	movs	r5, #15
 8003818:	197c      	adds	r4, r7, r5
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0019      	movs	r1, r3
 800381e:	f00e f9eb 	bl	8011bf8 <HAL_UART_Receive_DMA>
 8003822:	0003      	movs	r3, r0
 8003824:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003826:	197b      	adds	r3, r7, r5
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 800382e:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <ESP_Receive+0x60>)
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <ESP_Receive+0x64>)
 8003832:	0019      	movs	r1, r3
 8003834:	2003      	movs	r0, #3
 8003836:	f006 f9af 	bl	8009b98 <CreateLine>
    RxComplete = true;
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <ESP_Receive+0x58>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
    return false;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <ESP_Receive+0x4e>
  }
  return true;
 8003844:	2301      	movs	r3, #1
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bdb0      	pop	{r4, r5, r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	200003ec 	.word	0x200003ec
 8003854:	200003e8 	.word	0x200003e8
 8003858:	0801b34c 	.word	0x0801b34c
 800385c:	0801b348 	.word	0x0801b348

08003860 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003868:	4b08      	ldr	r3, [pc, #32]	@ (800388c <HAL_UART_RxCpltCallback+0x2c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d108      	bne.n	8003884 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 8003872:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <HAL_UART_RxCpltCallback+0x30>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003878:	4a06      	ldr	r2, [pc, #24]	@ (8003894 <HAL_UART_RxCpltCallback+0x34>)
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <HAL_UART_RxCpltCallback+0x38>)
 800387c:	0019      	movs	r1, r3
 800387e:	2003      	movs	r0, #3
 8003880:	f006 f98a 	bl	8009b98 <CreateLine>
  }
}
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}
 800388c:	200003e8 	.word	0x200003e8
 8003890:	200003ec 	.word	0x200003ec
 8003894:	0801b36c 	.word	0x0801b36c
 8003898:	0801b348 	.word	0x0801b348

0800389c <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80038a4:	4b07      	ldr	r3, [pc, #28]	@ (80038c4 <HAL_UART_ErrorCallback+0x28>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d105      	bne.n	80038ba <HAL_UART_ErrorCallback+0x1e>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("An error has ocurred");
 80038ae:	4a06      	ldr	r2, [pc, #24]	@ (80038c8 <HAL_UART_ErrorCallback+0x2c>)
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_UART_ErrorCallback+0x30>)
 80038b2:	0019      	movs	r1, r3
 80038b4:	2003      	movs	r0, #3
 80038b6:	f006 f96f 	bl	8009b98 <CreateLine>
  }
}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200003e8 	.word	0x200003e8
 80038c8:	0801b378 	.word	0x0801b378
 80038cc:	0801b348 	.word	0x0801b348

080038d0 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e010      	b.n	8003902 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	001a      	movs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1898      	adds	r0, r3, r2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	001a      	movs	r2, r3
 80038f4:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <uint8ArrayToString+0x44>)
 80038f6:	0019      	movs	r1, r3
 80038f8:	f014 fd6a 	bl	80183d0 <siprintf>
  for (int i = 0; i < 12; i++)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b0b      	cmp	r3, #11
 8003906:	ddeb      	ble.n	80038e0 <uint8ArrayToString+0x10>
  }
}
 8003908:	46c0      	nop			@ (mov r8, r8)
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b004      	add	sp, #16
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	0801b390 	.word	0x0801b390

08003918 <CreateMessage>:
uint16_t CreateMessage(){
 8003918:	b5b0      	push	{r4, r5, r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af04      	add	r7, sp, #16
  uint16_t messageLength = 0;
 800391e:	1dbb      	adds	r3, r7, #6
 8003920:	2200      	movs	r2, #0
 8003922:	801a      	strh	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003924:	4b98      	ldr	r3, [pc, #608]	@ (8003b88 <CreateMessage+0x270>)
 8003926:	4899      	ldr	r0, [pc, #612]	@ (8003b8c <CreateMessage+0x274>)
 8003928:	220c      	movs	r2, #12
 800392a:	0019      	movs	r1, r3
 800392c:	f7ff fe63 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003930:	4b97      	ldr	r3, [pc, #604]	@ (8003b90 <CreateMessage+0x278>)
 8003932:	4898      	ldr	r0, [pc, #608]	@ (8003b94 <CreateMessage+0x27c>)
 8003934:	220c      	movs	r2, #12
 8003936:	0019      	movs	r1, r3
 8003938:	f7ff fe5d 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 800393c:	4b96      	ldr	r3, [pc, #600]	@ (8003b98 <CreateMessage+0x280>)
 800393e:	4897      	ldr	r0, [pc, #604]	@ (8003b9c <CreateMessage+0x284>)
 8003940:	220c      	movs	r2, #12
 8003942:	0019      	movs	r1, r3
 8003944:	f7ff fe57 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003948:	4b95      	ldr	r3, [pc, #596]	@ (8003ba0 <CreateMessage+0x288>)
 800394a:	4896      	ldr	r0, [pc, #600]	@ (8003ba4 <CreateMessage+0x28c>)
 800394c:	220c      	movs	r2, #12
 800394e:	0019      	movs	r1, r3
 8003950:	f7ff fe51 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003954:	4b94      	ldr	r3, [pc, #592]	@ (8003ba8 <CreateMessage+0x290>)
 8003956:	4895      	ldr	r0, [pc, #596]	@ (8003bac <CreateMessage+0x294>)
 8003958:	220c      	movs	r2, #12
 800395a:	0019      	movs	r1, r3
 800395c:	f7ff fe4b 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003960:	4b93      	ldr	r3, [pc, #588]	@ (8003bb0 <CreateMessage+0x298>)
 8003962:	4894      	ldr	r0, [pc, #592]	@ (8003bb4 <CreateMessage+0x29c>)
 8003964:	220c      	movs	r2, #12
 8003966:	0019      	movs	r1, r3
 8003968:	f7ff fe45 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800396c:	4b92      	ldr	r3, [pc, #584]	@ (8003bb8 <CreateMessage+0x2a0>)
 800396e:	4893      	ldr	r0, [pc, #588]	@ (8003bbc <CreateMessage+0x2a4>)
 8003970:	221e      	movs	r2, #30
 8003972:	0019      	movs	r1, r3
 8003974:	f7ff fe3f 	bl	80035f6 <ReadUint8ArrayEEprom>
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003978:	f7ff fe8e 	bl	8003698 <setCharges>
//  sprintf(messagePart5, "\"name\":\"battery\", \"id\": \"%lu\", \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%3.2f", uid[2], (char*)nameConfig, Buffer, batteryCharge);
//  messageLength += strlen(messagePart5);
//  messageLength += 20;
//  return(messageLength);

  memset(message, 0, sizeof(message));
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	00da      	lsls	r2, r3, #3
 8003980:	4b8f      	ldr	r3, [pc, #572]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003982:	2100      	movs	r1, #0
 8003984:	0018      	movs	r0, r3
 8003986:	f014 fdc7 	bl	8018518 <memset>
  uint16_t index = 0;
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	2200      	movs	r2, #0
 800398e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	4b8a      	ldr	r3, [pc, #552]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003996:	18d3      	adds	r3, r2, r3
 8003998:	4a8a      	ldr	r2, [pc, #552]	@ (8003bc4 <CreateMessage+0x2ac>)
 800399a:	0011      	movs	r1, r2
 800399c:	0018      	movs	r0, r3
 800399e:	f014 fd17 	bl	80183d0 <siprintf>
  index = strlen(message);
 80039a2:	4b87      	ldr	r3, [pc, #540]	@ (8003bc0 <CreateMessage+0x2a8>)
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fc fbaf 	bl	8000108 <strlen>
 80039aa:	0002      	movs	r2, r0
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 80039b0:	4a75      	ldr	r2, [pc, #468]	@ (8003b88 <CreateMessage+0x270>)
 80039b2:	4b85      	ldr	r3, [pc, #532]	@ (8003bc8 <CreateMessage+0x2b0>)
 80039b4:	0011      	movs	r1, r2
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7ff ff8a 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	881a      	ldrh	r2, [r3, #0]
 80039c0:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc0 <CreateMessage+0x2a8>)
 80039c2:	18d4      	adds	r4, r2, r3
 80039c4:	4b81      	ldr	r3, [pc, #516]	@ (8003bcc <CreateMessage+0x2b4>)
 80039c6:	689d      	ldr	r5, [r3, #8]
 80039c8:	4b81      	ldr	r3, [pc, #516]	@ (8003bd0 <CreateMessage+0x2b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1c18      	adds	r0, r3, #0
 80039ce:	f7ff fcc7 	bl	8003360 <__aeabi_f2d>
 80039d2:	0002      	movs	r2, r0
 80039d4:	000b      	movs	r3, r1
 80039d6:	4878      	ldr	r0, [pc, #480]	@ (8003bb8 <CreateMessage+0x2a0>)
 80039d8:	497e      	ldr	r1, [pc, #504]	@ (8003bd4 <CreateMessage+0x2bc>)
 80039da:	9202      	str	r2, [sp, #8]
 80039dc:	9303      	str	r3, [sp, #12]
 80039de:	4b7a      	ldr	r3, [pc, #488]	@ (8003bc8 <CreateMessage+0x2b0>)
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	0003      	movs	r3, r0
 80039e4:	002a      	movs	r2, r5
 80039e6:	0020      	movs	r0, r4
 80039e8:	f014 fcf2 	bl	80183d0 <siprintf>
  index = strlen(message);
 80039ec:	4b74      	ldr	r3, [pc, #464]	@ (8003bc0 <CreateMessage+0x2a8>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fc fb8a 	bl	8000108 <strlen>
 80039f4:	0002      	movs	r2, r0
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 80039fa:	4a65      	ldr	r2, [pc, #404]	@ (8003b90 <CreateMessage+0x278>)
 80039fc:	4b72      	ldr	r3, [pc, #456]	@ (8003bc8 <CreateMessage+0x2b0>)
 80039fe:	0011      	movs	r1, r2
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff ff65 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003a0c:	18d4      	adds	r4, r2, r3
 8003a0e:	4b6f      	ldr	r3, [pc, #444]	@ (8003bcc <CreateMessage+0x2b4>)
 8003a10:	689d      	ldr	r5, [r3, #8]
 8003a12:	4b71      	ldr	r3, [pc, #452]	@ (8003bd8 <CreateMessage+0x2c0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	1c18      	adds	r0, r3, #0
 8003a18:	f7ff fca2 	bl	8003360 <__aeabi_f2d>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	000b      	movs	r3, r1
 8003a20:	4865      	ldr	r0, [pc, #404]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003a22:	496e      	ldr	r1, [pc, #440]	@ (8003bdc <CreateMessage+0x2c4>)
 8003a24:	9202      	str	r2, [sp, #8]
 8003a26:	9303      	str	r3, [sp, #12]
 8003a28:	4b67      	ldr	r3, [pc, #412]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	002a      	movs	r2, r5
 8003a30:	0020      	movs	r0, r4
 8003a32:	f014 fccd 	bl	80183d0 <siprintf>
  index = strlen(message);
 8003a36:	4b62      	ldr	r3, [pc, #392]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fc fb65 	bl	8000108 <strlen>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003a44:	4a54      	ldr	r2, [pc, #336]	@ (8003b98 <CreateMessage+0x280>)
 8003a46:	4b60      	ldr	r3, [pc, #384]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7ff ff40 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	881a      	ldrh	r2, [r3, #0]
 8003a54:	4b5a      	ldr	r3, [pc, #360]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003a56:	18d4      	adds	r4, r2, r3
 8003a58:	4b5c      	ldr	r3, [pc, #368]	@ (8003bcc <CreateMessage+0x2b4>)
 8003a5a:	689d      	ldr	r5, [r3, #8]
 8003a5c:	4b60      	ldr	r3, [pc, #384]	@ (8003be0 <CreateMessage+0x2c8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	1c18      	adds	r0, r3, #0
 8003a62:	f7ff fc7d 	bl	8003360 <__aeabi_f2d>
 8003a66:	0002      	movs	r2, r0
 8003a68:	000b      	movs	r3, r1
 8003a6a:	4853      	ldr	r0, [pc, #332]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003a6c:	495d      	ldr	r1, [pc, #372]	@ (8003be4 <CreateMessage+0x2cc>)
 8003a6e:	9202      	str	r2, [sp, #8]
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	4b55      	ldr	r3, [pc, #340]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	0003      	movs	r3, r0
 8003a78:	002a      	movs	r2, r5
 8003a7a:	0020      	movs	r0, r4
 8003a7c:	f014 fca8 	bl	80183d0 <siprintf>
  index = strlen(message);
 8003a80:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003a82:	0018      	movs	r0, r3
 8003a84:	f7fc fb40 	bl	8000108 <strlen>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003a8e:	4a44      	ldr	r2, [pc, #272]	@ (8003ba0 <CreateMessage+0x288>)
 8003a90:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003a92:	0011      	movs	r1, r2
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7ff ff1b 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003a9a:	1d3b      	adds	r3, r7, #4
 8003a9c:	881a      	ldrh	r2, [r3, #0]
 8003a9e:	4b48      	ldr	r3, [pc, #288]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003aa0:	18d0      	adds	r0, r2, r3
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <CreateMessage+0x2b4>)
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	4b50      	ldr	r3, [pc, #320]	@ (8003be8 <CreateMessage+0x2d0>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	4c43      	ldr	r4, [pc, #268]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003aac:	494f      	ldr	r1, [pc, #316]	@ (8003bec <CreateMessage+0x2d4>)
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	4b45      	ldr	r3, [pc, #276]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	0023      	movs	r3, r4
 8003ab6:	f014 fc8b 	bl	80183d0 <siprintf>
  index = strlen(message);
 8003aba:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003abc:	0018      	movs	r0, r3
 8003abe:	f7fc fb23 	bl	8000108 <strlen>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, batteryConfig);
 8003ac8:	4a37      	ldr	r2, [pc, #220]	@ (8003ba8 <CreateMessage+0x290>)
 8003aca:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003acc:	0011      	movs	r1, r2
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f7ff fefe 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	4b39      	ldr	r3, [pc, #228]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003ada:	18d4      	adds	r4, r2, r3
 8003adc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <CreateMessage+0x2b4>)
 8003ade:	689d      	ldr	r5, [r3, #8]
 8003ae0:	4b43      	ldr	r3, [pc, #268]	@ (8003bf0 <CreateMessage+0x2d8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1c18      	adds	r0, r3, #0
 8003ae6:	f7ff fc3b 	bl	8003360 <__aeabi_f2d>
 8003aea:	0002      	movs	r2, r0
 8003aec:	000b      	movs	r3, r1
 8003aee:	4832      	ldr	r0, [pc, #200]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003af0:	4940      	ldr	r1, [pc, #256]	@ (8003bf4 <CreateMessage+0x2dc>)
 8003af2:	9202      	str	r2, [sp, #8]
 8003af4:	9303      	str	r3, [sp, #12]
 8003af6:	4b34      	ldr	r3, [pc, #208]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	0003      	movs	r3, r0
 8003afc:	002a      	movs	r2, r5
 8003afe:	0020      	movs	r0, r4
 8003b00:	f014 fc66 	bl	80183d0 <siprintf>
  index = strlen(message);
 8003b04:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b06:	0018      	movs	r0, r3
 8003b08:	f7fc fafe 	bl	8000108 <strlen>
 8003b0c:	0002      	movs	r2, r0
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, solarConfig);
 8003b12:	4a27      	ldr	r2, [pc, #156]	@ (8003bb0 <CreateMessage+0x298>)
 8003b14:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003b16:	0011      	movs	r1, r2
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff fed9 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	4b27      	ldr	r3, [pc, #156]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b24:	18d4      	adds	r4, r2, r3
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <CreateMessage+0x2b4>)
 8003b28:	689d      	ldr	r5, [r3, #8]
 8003b2a:	4b33      	ldr	r3, [pc, #204]	@ (8003bf8 <CreateMessage+0x2e0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	1c18      	adds	r0, r3, #0
 8003b30:	f7ff fc16 	bl	8003360 <__aeabi_f2d>
 8003b34:	0002      	movs	r2, r0
 8003b36:	000b      	movs	r3, r1
 8003b38:	481f      	ldr	r0, [pc, #124]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003b3a:	4930      	ldr	r1, [pc, #192]	@ (8003bfc <CreateMessage+0x2e4>)
 8003b3c:	9202      	str	r2, [sp, #8]
 8003b3e:	9303      	str	r3, [sp, #12]
 8003b40:	4b21      	ldr	r3, [pc, #132]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	0003      	movs	r3, r0
 8003b46:	002a      	movs	r2, r5
 8003b48:	0020      	movs	r0, r4
 8003b4a:	f014 fc41 	bl	80183d0 <siprintf>
  index = strlen(message);
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7fc fad9 	bl	8000108 <strlen>
 8003b56:	0002      	movs	r2, r0
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	801a      	strh	r2, [r3, #0]

  index = sprintf(&message[index], "]");
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b62:	18d3      	adds	r3, r2, r3
 8003b64:	4a26      	ldr	r2, [pc, #152]	@ (8003c00 <CreateMessage+0x2e8>)
 8003b66:	0011      	movs	r1, r2
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f014 fc31 	bl	80183d0 <siprintf>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fc fac6 	bl	8000108 <strlen>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	b29b      	uxth	r3, r3
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}
 8003b88:	20000b38 	.word	0x20000b38
 8003b8c:	0808000c 	.word	0x0808000c
 8003b90:	20000b44 	.word	0x20000b44
 8003b94:	08080018 	.word	0x08080018
 8003b98:	20000b50 	.word	0x20000b50
 8003b9c:	08080048 	.word	0x08080048
 8003ba0:	20000b5c 	.word	0x20000b5c
 8003ba4:	08080030 	.word	0x08080030
 8003ba8:	20000b68 	.word	0x20000b68
 8003bac:	0808006c 	.word	0x0808006c
 8003bb0:	20000b74 	.word	0x20000b74
 8003bb4:	08080078 	.word	0x08080078
 8003bb8:	20000b80 	.word	0x20000b80
 8003bbc:	08080090 	.word	0x08080090
 8003bc0:	2000051c 	.word	0x2000051c
 8003bc4:	0801b398 	.word	0x0801b398
 8003bc8:	20000ba0 	.word	0x20000ba0
 8003bcc:	200004f8 	.word	0x200004f8
 8003bd0:	20000504 	.word	0x20000504
 8003bd4:	0801b39c 	.word	0x0801b39c
 8003bd8:	20000508 	.word	0x20000508
 8003bdc:	0801b3f0 	.word	0x0801b3f0
 8003be0:	20000518 	.word	0x20000518
 8003be4:	0801b448 	.word	0x0801b448
 8003be8:	20000514 	.word	0x20000514
 8003bec:	0801b4a0 	.word	0x0801b4a0
 8003bf0:	2000050c 	.word	0x2000050c
 8003bf4:	0801b4f4 	.word	0x0801b4f4
 8003bf8:	20000510 	.word	0x20000510
 8003bfc:	0801b554 	.word	0x0801b554
 8003c00:	0801b5b0 	.word	0x0801b5b0

08003c04 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <SetCommandBuffer+0x24>)
 8003c14:	0018      	movs	r0, r3
 8003c16:	f014 fc95 	bl	8018544 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003c1a:	4b04      	ldr	r3, [pc, #16]	@ (8003c2c <SetCommandBuffer+0x28>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
}
 8003c20:	46c0      	nop			@ (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000930 	.word	0x20000930
 8003c2c:	20000b30 	.word	0x20000b30

08003c30 <StartProg>:
void StartProg(){
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003c34:	2064      	movs	r0, #100	@ 0x64
 8003c36:	f006 fb3f 	bl	800a2b8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003c3a:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <StartProg+0x60>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2101      	movs	r1, #1
 8003c40:	0018      	movs	r0, r3
 8003c42:	f007 fece 	bl	800b9e2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003c46:	2064      	movs	r0, #100	@ 0x64
 8003c48:	f006 fb36 	bl	800a2b8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003c4c:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <StartProg+0x60>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2102      	movs	r1, #2
 8003c52:	0018      	movs	r0, r3
 8003c54:	f007 fec5 	bl	800b9e2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003c58:	23fa      	movs	r3, #250	@ 0xfa
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f006 fb2b 	bl	800a2b8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003c62:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <StartProg+0x60>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	2101      	movs	r1, #1
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f007 feba 	bl	800b9e2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003c6e:	23fa      	movs	r3, #250	@ 0xfa
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	0018      	movs	r0, r3
 8003c74:	f006 fb20 	bl	800a2b8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <StartProg+0x60>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f007 feaf 	bl	800b9e2 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003c84:	2028      	movs	r0, #40	@ 0x28
 8003c86:	f006 fb17 	bl	800a2b8 <HAL_Delay>
}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	50001c00 	.word	0x50001c00

08003c94 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c96:	46c6      	mov	lr, r8
 8003c98:	b500      	push	{lr}
 8003c9a:	b09a      	sub	sp, #104	@ 0x68
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	61f8      	str	r0, [r7, #28]
 8003ca0:	0008      	movs	r0, r1
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	261a      	movs	r6, #26
 8003ca6:	19bb      	adds	r3, r7, r6
 8003ca8:	1c02      	adds	r2, r0, #0
 8003caa:	801a      	strh	r2, [r3, #0]
 8003cac:	2319      	movs	r3, #25
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	1c0a      	adds	r2, r1, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	466b      	mov	r3, sp
 8003cb6:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003cb8:	19bb      	adds	r3, r7, r6
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	1e5a      	subs	r2, r3, #1
 8003cc0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	60ba      	str	r2, [r7, #8]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	60fa      	str	r2, [r7, #12]
 8003cca:	68b8      	ldr	r0, [r7, #8]
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	0002      	movs	r2, r0
 8003cd0:	0f52      	lsrs	r2, r2, #29
 8003cd2:	000e      	movs	r6, r1
 8003cd4:	00f6      	lsls	r6, r6, #3
 8003cd6:	617e      	str	r6, [r7, #20]
 8003cd8:	697e      	ldr	r6, [r7, #20]
 8003cda:	4316      	orrs	r6, r2
 8003cdc:	617e      	str	r6, [r7, #20]
 8003cde:	0002      	movs	r2, r0
 8003ce0:	00d2      	lsls	r2, r2, #3
 8003ce2:	613a      	str	r2, [r7, #16]
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	603a      	str	r2, [r7, #0]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	0f52      	lsrs	r2, r2, #29
 8003cf4:	000e      	movs	r6, r1
 8003cf6:	00f5      	lsls	r5, r6, #3
 8003cf8:	4315      	orrs	r5, r2
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	00d4      	lsls	r4, r2, #3
 8003cfe:	3307      	adds	r3, #7
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	466a      	mov	r2, sp
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	469d      	mov	sp, r3
 8003d0a:	466b      	mov	r3, sp
 8003d0c:	3300      	adds	r3, #0
 8003d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003d10:	234f      	movs	r3, #79	@ 0x4f
 8003d12:	2118      	movs	r1, #24
 8003d14:	185b      	adds	r3, r3, r1
 8003d16:	19db      	adds	r3, r3, r7
 8003d18:	2203      	movs	r2, #3
 8003d1a:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003d1c:	234c      	movs	r3, #76	@ 0x4c
 8003d1e:	185b      	adds	r3, r3, r1
 8003d20:	19db      	adds	r3, r3, r7
 8003d22:	2200      	movs	r2, #0
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	e013      	b.n	8003d50 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003d28:	204c      	movs	r0, #76	@ 0x4c
 8003d2a:	2418      	movs	r4, #24
 8003d2c:	1903      	adds	r3, r0, r4
 8003d2e:	19db      	adds	r3, r3, r7
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	18d2      	adds	r2, r2, r3
 8003d36:	1903      	adds	r3, r0, r4
 8003d38:	19db      	adds	r3, r3, r7
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	7811      	ldrb	r1, [r2, #0]
 8003d3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d40:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003d42:	1903      	adds	r3, r0, r4
 8003d44:	19db      	adds	r3, r3, r7
 8003d46:	881a      	ldrh	r2, [r3, #0]
 8003d48:	1903      	adds	r3, r0, r4
 8003d4a:	19db      	adds	r3, r3, r7
 8003d4c:	3201      	adds	r2, #1
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	234c      	movs	r3, #76	@ 0x4c
 8003d52:	2018      	movs	r0, #24
 8003d54:	181b      	adds	r3, r3, r0
 8003d56:	19da      	adds	r2, r3, r7
 8003d58:	211a      	movs	r1, #26
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	8812      	ldrh	r2, [r2, #0]
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3e1      	bcc.n	8003d28 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003d6e:	233f      	movs	r3, #63	@ 0x3f
 8003d70:	0006      	movs	r6, r0
 8003d72:	199b      	adds	r3, r3, r6
 8003d74:	19db      	adds	r3, r3, r7
 8003d76:	224e      	movs	r2, #78	@ 0x4e
 8003d78:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  char * ParsePoint4;
  const char OK[] = AT_RESPONSE_OK;
 8003d7a:	252c      	movs	r5, #44	@ 0x2c
 8003d7c:	19ab      	adds	r3, r5, r6
 8003d7e:	19db      	adds	r3, r3, r7
 8003d80:	4a6b      	ldr	r2, [pc, #428]	@ (8003f30 <ParseBuffer+0x29c>)
 8003d82:	8811      	ldrh	r1, [r2, #0]
 8003d84:	8019      	strh	r1, [r3, #0]
 8003d86:	7892      	ldrb	r2, [r2, #2]
 8003d88:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003d8a:	2324      	movs	r3, #36	@ 0x24
 8003d8c:	199b      	adds	r3, r3, r6
 8003d8e:	19db      	adds	r3, r3, r7
 8003d90:	4a68      	ldr	r2, [pc, #416]	@ (8003f34 <ParseBuffer+0x2a0>)
 8003d92:	6811      	ldr	r1, [r2, #0]
 8003d94:	6019      	str	r1, [r3, #0]
 8003d96:	8892      	ldrh	r2, [r2, #4]
 8003d98:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003d9a:	231c      	movs	r3, #28
 8003d9c:	199b      	adds	r3, r3, r6
 8003d9e:	19db      	adds	r3, r3, r7
 8003da0:	4a65      	ldr	r2, [pc, #404]	@ (8003f38 <ParseBuffer+0x2a4>)
 8003da2:	6811      	ldr	r1, [r2, #0]
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	8892      	ldrh	r2, [r2, #4]
 8003da8:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003daa:	2318      	movs	r3, #24
 8003dac:	199b      	adds	r3, r3, r6
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	223e      	movs	r2, #62	@ 0x3e
 8003db2:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003db4:	2308      	movs	r3, #8
 8003db6:	199b      	adds	r3, r3, r6
 8003db8:	19db      	adds	r3, r3, r7
 8003dba:	4a60      	ldr	r2, [pc, #384]	@ (8003f3c <ParseBuffer+0x2a8>)
 8003dbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003dbe:	c313      	stmia	r3!, {r0, r1, r4}
 8003dc0:	8811      	ldrh	r1, [r2, #0]
 8003dc2:	8019      	strh	r1, [r3, #0]
 8003dc4:	7892      	ldrb	r2, [r2, #2]
 8003dc6:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003dc8:	2319      	movs	r3, #25
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003dd2:	19ab      	adds	r3, r5, r6
 8003dd4:	19da      	adds	r2, r3, r7
 8003dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dd8:	0011      	movs	r1, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f014 fbc6 	bl	801856c <strstr>
 8003de0:	0003      	movs	r3, r0
 8003de2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003de4:	2319      	movs	r3, #25
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10a      	bne.n	8003e04 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003dee:	231c      	movs	r3, #28
 8003df0:	2218      	movs	r2, #24
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	19da      	adds	r2, r3, r7
 8003df6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003df8:	0011      	movs	r1, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f014 fbb6 	bl	801856c <strstr>
 8003e00:	0003      	movs	r3, r0
 8003e02:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003e04:	2319      	movs	r3, #25
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d10a      	bne.n	8003e24 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003e0e:	2318      	movs	r3, #24
 8003e10:	2218      	movs	r2, #24
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	19da      	adds	r2, r3, r7
 8003e16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e18:	0011      	movs	r1, r2
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f014 fba6 	bl	801856c <strstr>
 8003e20:	0003      	movs	r3, r0
 8003e22:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003e24:	2324      	movs	r3, #36	@ 0x24
 8003e26:	2418      	movs	r4, #24
 8003e28:	191b      	adds	r3, r3, r4
 8003e2a:	19da      	adds	r2, r3, r7
 8003e2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e2e:	0011      	movs	r1, r2
 8003e30:	0018      	movs	r0, r3
 8003e32:	f014 fb9b 	bl	801856c <strstr>
 8003e36:	0003      	movs	r3, r0
 8003e38:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	191b      	adds	r3, r3, r4
 8003e3e:	19da      	adds	r2, r3, r7
 8003e40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f014 fb91 	bl	801856c <strstr>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8003e4e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f40 <ParseBuffer+0x2ac>)
 8003e50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e52:	0011      	movs	r1, r2
 8003e54:	0018      	movs	r0, r3
 8003e56:	f014 fb89 	bl	801856c <strstr>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if(len > 1 ){
 8003e5e:	231a      	movs	r3, #26
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d957      	bls.n	8003f18 <ParseBuffer+0x284>
    TestChar = *ParsePoint;
 8003e68:	213f      	movs	r1, #63	@ 0x3f
 8003e6a:	190b      	adds	r3, r1, r4
 8003e6c:	19db      	adds	r3, r3, r7
 8003e6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003e74:	190b      	adds	r3, r1, r4
 8003e76:	19db      	adds	r3, r3, r7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003e7c:	d104      	bne.n	8003e88 <ParseBuffer+0x1f4>
      status = RECEIVE_STATUS_OK;
 8003e7e:	234f      	movs	r3, #79	@ 0x4f
 8003e80:	191b      	adds	r3, r3, r4
 8003e82:	19db      	adds	r3, r3, r7
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003e88:	233f      	movs	r3, #63	@ 0x3f
 8003e8a:	2218      	movs	r2, #24
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b72      	cmp	r3, #114	@ 0x72
 8003e94:	d104      	bne.n	8003ea0 <ParseBuffer+0x20c>
      status = RECEIVE_STATUS_READY;
 8003e96:	234f      	movs	r3, #79	@ 0x4f
 8003e98:	189b      	adds	r3, r3, r2
 8003e9a:	19db      	adds	r3, r3, r7
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003ea0:	233f      	movs	r3, #63	@ 0x3f
 8003ea2:	2218      	movs	r2, #24
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	19db      	adds	r3, r3, r7
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b3e      	cmp	r3, #62	@ 0x3e
 8003eac:	d104      	bne.n	8003eb8 <ParseBuffer+0x224>
      status = RECEIVE_STATUS_START;
 8003eae:	234f      	movs	r3, #79	@ 0x4f
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	19db      	adds	r3, r3, r7
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003eb8:	213f      	movs	r1, #63	@ 0x3f
 8003eba:	2018      	movs	r0, #24
 8003ebc:	180b      	adds	r3, r1, r0
 8003ebe:	19db      	adds	r3, r3, r7
 8003ec0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ec2:	7812      	ldrb	r2, [r2, #0]
 8003ec4:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	188b      	adds	r3, r1, r2
 8003eca:	19db      	adds	r3, r3, r7
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b45      	cmp	r3, #69	@ 0x45
 8003ed0:	d104      	bne.n	8003edc <ParseBuffer+0x248>
      status = RECEIVE_STATUS_ERROR;
 8003ed2:	234f      	movs	r3, #79	@ 0x4f
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003edc:	213f      	movs	r1, #63	@ 0x3f
 8003ede:	2018      	movs	r0, #24
 8003ee0:	180b      	adds	r3, r1, r0
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003eea:	180b      	adds	r3, r1, r0
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b57      	cmp	r3, #87	@ 0x57
 8003ef2:	d102      	bne.n	8003efa <ParseBuffer+0x266>
      ConnectionMade = true;
 8003ef4:	4b13      	ldr	r3, [pc, #76]	@ (8003f44 <ParseBuffer+0x2b0>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint4;
 8003efa:	213f      	movs	r1, #63	@ 0x3f
 8003efc:	2018      	movs	r0, #24
 8003efe:	180b      	adds	r3, r1, r0
 8003f00:	19db      	adds	r3, r3, r7
 8003f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f04:	7812      	ldrb	r2, [r2, #0]
 8003f06:	701a      	strb	r2, [r3, #0]
    if(TestChar == '2'){
 8003f08:	180b      	adds	r3, r1, r0
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b32      	cmp	r3, #50	@ 0x32
 8003f10:	d102      	bne.n	8003f18 <ParseBuffer+0x284>
      beurs = true;
 8003f12:	4b0d      	ldr	r3, [pc, #52]	@ (8003f48 <ParseBuffer+0x2b4>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003f18:	234f      	movs	r3, #79	@ 0x4f
 8003f1a:	2218      	movs	r2, #24
 8003f1c:	189b      	adds	r3, r3, r2
 8003f1e:	19db      	adds	r3, r3, r7
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	46c5      	mov	sp, r8

}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b01a      	add	sp, #104	@ 0x68
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	46b8      	mov	r8, r7
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f30:	0801b5b4 	.word	0x0801b5b4
 8003f34:	0801b5b8 	.word	0x0801b5b8
 8003f38:	0801b5c0 	.word	0x0801b5c0
 8003f3c:	0801b5c8 	.word	0x0801b5c8
 8003f40:	0801bf84 	.word	0x0801bf84
 8003f44:	200004f3 	.word	0x200004f3
 8003f48:	200004f5 	.word	0x200004f5

08003f4c <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <PollAwake+0x3c>)
 8003f54:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff fe53 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7fc f8d1 	bl	8000108 <strlen>
 8003f66:	0003      	movs	r3, r0
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff fc18 	bl	80037a4 <ESP_Send>
 8003f74:	1e03      	subs	r3, r0, #0
 8003f76:	d001      	beq.n	8003f7c <PollAwake+0x30>
    return true;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <PollAwake+0x32>
  }
  else{
    return false;
 8003f7c:	2300      	movs	r3, #0
  }
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b002      	add	sp, #8
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	0801b5d8 	.word	0x0801b5d8

08003f8c <RFPower>:
bool RFPower(){
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003f92:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc8 <RFPower+0x3c>)
 8003f94:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff fe33 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7fc f8b1 	bl	8000108 <strlen>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0011      	movs	r1, r2
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7ff fbf8 	bl	80037a4 <ESP_Send>
 8003fb4:	1e03      	subs	r3, r0, #0
 8003fb6:	d001      	beq.n	8003fbc <RFPower+0x30>
    return true;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <RFPower+0x32>
  }
  else{
    return false;
 8003fbc:	2300      	movs	r3, #0
  }
}
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	0801b5e0 	.word	0x0801b5e0

08003fcc <CheckRFPower>:
bool CheckRFPower(){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <CheckRFPower+0x3c>)
 8003fd4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fe13 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7fc f891 	bl	8000108 <strlen>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7ff fbd8 	bl	80037a4 <ESP_Send>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <CheckRFPower+0x30>
    return true;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <CheckRFPower+0x32>
  }
  else{
    return false;
 8003ffc:	2300      	movs	r3, #0
  }
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b002      	add	sp, #8
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	0801b5f0 	.word	0x0801b5f0

0800400c <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <ATRestore+0x3c>)
 8004014:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff fdf3 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f7fc f871 	bl	8000108 <strlen>
 8004026:	0003      	movs	r3, r0
 8004028:	b29a      	uxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0011      	movs	r1, r2
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff fbb8 	bl	80037a4 <ESP_Send>
 8004034:	1e03      	subs	r3, r0, #0
 8004036:	d001      	beq.n	800403c <ATRestore+0x30>
    return true;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <ATRestore+0x32>
  }
  else{
    return false;
 800403c:	2300      	movs	r3, #0
  }
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b002      	add	sp, #8
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	0801b600 	.word	0x0801b600

0800404c <CWINIT>:
bool CWINIT(){
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <CWINIT+0x3c>)
 8004054:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f7ff fdd3 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0018      	movs	r0, r3
 8004062:	f7fc f851 	bl	8000108 <strlen>
 8004066:	0003      	movs	r3, r0
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0011      	movs	r1, r2
 800406e:	0018      	movs	r0, r3
 8004070:	f7ff fb98 	bl	80037a4 <ESP_Send>
 8004074:	1e03      	subs	r3, r0, #0
 8004076:	d001      	beq.n	800407c <CWINIT+0x30>
    return true;
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <CWINIT+0x32>
  }
  else{
    return false;
 800407c:	2300      	movs	r3, #0
  }
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b002      	add	sp, #8
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			@ (mov r8, r8)
 8004088:	0801b610 	.word	0x0801b610

0800408c <CWMODE1>:
bool CWMODE1(){
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004092:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <CWMODE1+0x3c>)
 8004094:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff fdb3 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7fc f831 	bl	8000108 <strlen>
 80040a6:	0003      	movs	r3, r0
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7ff fb78 	bl	80037a4 <ESP_Send>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <CWMODE1+0x30>
    return true;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <CWMODE1+0x32>
  }
  else{
    return false;
 80040bc:	2300      	movs	r3, #0
  }
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b002      	add	sp, #8
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	0801b620 	.word	0x0801b620

080040cc <CWMODE2>:
bool CWMODE2(){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <CWMODE2+0x3c>)
 80040d4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff fd93 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fc f811 	bl	8000108 <strlen>
 80040e6:	0003      	movs	r3, r0
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0011      	movs	r1, r2
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7ff fb58 	bl	80037a4 <ESP_Send>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d001      	beq.n	80040fc <CWMODE2+0x30>
    return true;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <CWMODE2+0x32>
  }
  else{
    return false;
 80040fc:	2300      	movs	r3, #0
  }
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b002      	add	sp, #8
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	0801b630 	.word	0x0801b630

0800410c <CWAUTOCONN>:
bool CWAUTOCONN(){
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004112:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <CWAUTOCONN+0x3c>)
 8004114:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	0018      	movs	r0, r3
 800411a:	f7ff fd73 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0018      	movs	r0, r3
 8004122:	f7fb fff1 	bl	8000108 <strlen>
 8004126:	0003      	movs	r3, r0
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	0011      	movs	r1, r2
 800412e:	0018      	movs	r0, r3
 8004130:	f7ff fb38 	bl	80037a4 <ESP_Send>
 8004134:	1e03      	subs	r3, r0, #0
 8004136:	d001      	beq.n	800413c <CWAUTOCONN+0x30>
    return true;
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <CWAUTOCONN+0x32>
  }
  else{
    return false;
 800413c:	2300      	movs	r3, #0
  }
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b002      	add	sp, #8
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	0801b640 	.word	0x0801b640

0800414c <CWJAP>:
bool CWJAP(){
 800414c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414e:	46c6      	mov	lr, r8
 8004150:	b500      	push	{lr}
 8004152:	b0a2      	sub	sp, #136	@ 0x88
 8004154:	af00      	add	r7, sp, #0
 8004156:	466b      	mov	r3, sp
 8004158:	4698      	mov	r8, r3
  beursTest = true;
 800415a:	4b3b      	ldr	r3, [pc, #236]	@ (8004248 <CWJAP+0xfc>)
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004160:	2618      	movs	r6, #24
 8004162:	19bb      	adds	r3, r7, r6
 8004164:	2264      	movs	r2, #100	@ 0x64
 8004166:	2100      	movs	r1, #0
 8004168:	0018      	movs	r0, r3
 800416a:	f014 f9d5 	bl	8018518 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800416e:	4b37      	ldr	r3, [pc, #220]	@ (800424c <CWJAP+0x100>)
 8004170:	4a37      	ldr	r2, [pc, #220]	@ (8004250 <CWJAP+0x104>)
 8004172:	4938      	ldr	r1, [pc, #224]	@ (8004254 <CWJAP+0x108>)
 8004174:	19b8      	adds	r0, r7, r6
 8004176:	f014 f92b 	bl	80183d0 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800417a:	19bb      	adds	r3, r7, r6
 800417c:	0018      	movs	r0, r3
 800417e:	f7fb ffc3 	bl	8000108 <strlen>
 8004182:	0002      	movs	r2, r0
 8004184:	216f      	movs	r1, #111	@ 0x6f
 8004186:	0030      	movs	r0, r6
 8004188:	180b      	adds	r3, r1, r0
 800418a:	19db      	adds	r3, r3, r7
 800418c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800418e:	180b      	adds	r3, r1, r0
 8004190:	19db      	adds	r3, r3, r7
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	2180      	movs	r1, #128	@ 0x80
 800419a:	1879      	adds	r1, r7, r1
 800419c:	600a      	str	r2, [r1, #0]
 800419e:	001a      	movs	r2, r3
 80041a0:	60ba      	str	r2, [r7, #8]
 80041a2:	2200      	movs	r2, #0
 80041a4:	60fa      	str	r2, [r7, #12]
 80041a6:	68b8      	ldr	r0, [r7, #8]
 80041a8:	68f9      	ldr	r1, [r7, #12]
 80041aa:	0002      	movs	r2, r0
 80041ac:	0f52      	lsrs	r2, r2, #29
 80041ae:	000e      	movs	r6, r1
 80041b0:	00f6      	lsls	r6, r6, #3
 80041b2:	617e      	str	r6, [r7, #20]
 80041b4:	697e      	ldr	r6, [r7, #20]
 80041b6:	4316      	orrs	r6, r2
 80041b8:	617e      	str	r6, [r7, #20]
 80041ba:	0002      	movs	r2, r0
 80041bc:	00d2      	lsls	r2, r2, #3
 80041be:	613a      	str	r2, [r7, #16]
 80041c0:	001a      	movs	r2, r3
 80041c2:	603a      	str	r2, [r7, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	6838      	ldr	r0, [r7, #0]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	0002      	movs	r2, r0
 80041ce:	0f52      	lsrs	r2, r2, #29
 80041d0:	000e      	movs	r6, r1
 80041d2:	00f5      	lsls	r5, r6, #3
 80041d4:	4315      	orrs	r5, r2
 80041d6:	0002      	movs	r2, r0
 80041d8:	00d4      	lsls	r4, r2, #3
 80041da:	3307      	adds	r3, #7
 80041dc:	08db      	lsrs	r3, r3, #3
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	466a      	mov	r2, sp
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	469d      	mov	sp, r3
 80041e6:	466b      	mov	r3, sp
 80041e8:	3300      	adds	r3, #0
 80041ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80041ec:	246f      	movs	r4, #111	@ 0x6f
 80041ee:	2518      	movs	r5, #24
 80041f0:	1963      	adds	r3, r4, r5
 80041f2:	19db      	adds	r3, r3, r7
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	3301      	adds	r3, #1
 80041f8:	001a      	movs	r2, r3
 80041fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041fc:	2100      	movs	r1, #0
 80041fe:	0018      	movs	r0, r3
 8004200:	f014 f98a 	bl	8018518 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004204:	1963      	adds	r3, r4, r5
 8004206:	19db      	adds	r3, r3, r7
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	1979      	adds	r1, r7, r5
 800420c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800420e:	0018      	movs	r0, r3
 8004210:	f014 f998 	bl	8018544 <strncpy>
  SetCommandBuffer(atCommand);
 8004214:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004216:	0018      	movs	r0, r3
 8004218:	f7ff fcf4 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800421c:	1963      	adds	r3, r4, r5
 800421e:	19db      	adds	r3, r3, r7
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b29a      	uxth	r2, r3
 8004224:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004226:	0011      	movs	r1, r2
 8004228:	0018      	movs	r0, r3
 800422a:	f7ff fabb 	bl	80037a4 <ESP_Send>
 800422e:	1e03      	subs	r3, r0, #0
 8004230:	d001      	beq.n	8004236 <CWJAP+0xea>
    return true;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <CWJAP+0xec>
  }
  else{
    return false;
 8004236:	2300      	movs	r3, #0
 8004238:	46c5      	mov	sp, r8
  }
}
 800423a:	0018      	movs	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	b022      	add	sp, #136	@ 0x88
 8004240:	bc80      	pop	{r7}
 8004242:	46b8      	mov	r8, r7
 8004244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	200004f4 	.word	0x200004f4
 800424c:	0801bf90 	.word	0x0801bf90
 8004250:	0801bf84 	.word	0x0801bf84
 8004254:	0801b654 	.word	0x0801b654

08004258 <CWMODE3>:
bool CWMODE3(){
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <CWMODE3+0x3c>)
 8004260:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0018      	movs	r0, r3
 8004266:	f7ff fccd 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	0018      	movs	r0, r3
 800426e:	f7fb ff4b 	bl	8000108 <strlen>
 8004272:	0003      	movs	r3, r0
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0011      	movs	r1, r2
 800427a:	0018      	movs	r0, r3
 800427c:	f7ff fa92 	bl	80037a4 <ESP_Send>
 8004280:	1e03      	subs	r3, r0, #0
 8004282:	d001      	beq.n	8004288 <CWMODE3+0x30>
    return true;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <CWMODE3+0x32>
  }
  else{
    return false;
 8004288:	2300      	movs	r3, #0
  }
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b002      	add	sp, #8
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	0801b66c 	.word	0x0801b66c

08004298 <CWSTATE>:
bool CWSTATE(){
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <CWSTATE+0x3c>)
 80042a0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff fcad 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7fb ff2b 	bl	8000108 <strlen>
 80042b2:	0003      	movs	r3, r0
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0011      	movs	r1, r2
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7ff fa72 	bl	80037a4 <ESP_Send>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <CWSTATE+0x30>
    return true;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <CWSTATE+0x32>
  }
  else{
    return false;
 80042c8:	2300      	movs	r3, #0
  }
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b002      	add	sp, #8
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			@ (mov r8, r8)
 80042d4:	0801b67c 	.word	0x0801b67c

080042d8 <CWSAP>:
bool CWSAP(){
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <CWSAP+0x3c>)
 80042e0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff fc8d 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7fb ff0b 	bl	8000108 <strlen>
 80042f2:	0003      	movs	r3, r0
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0011      	movs	r1, r2
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7ff fa52 	bl	80037a4 <ESP_Send>
 8004300:	1e03      	subs	r3, r0, #0
 8004302:	d001      	beq.n	8004308 <CWSAP+0x30>
    return true;
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <CWSAP+0x32>
  }
  else{
    return false;
 8004308:	2300      	movs	r3, #0
  }
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	0801b68c 	.word	0x0801b68c

08004318 <CIPMUX>:
bool CIPMUX(){
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <CIPMUX+0x3c>)
 8004320:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff fc6d 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0018      	movs	r0, r3
 800432e:	f7fb feeb 	bl	8000108 <strlen>
 8004332:	0003      	movs	r3, r0
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0011      	movs	r1, r2
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff fa32 	bl	80037a4 <ESP_Send>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <CIPMUX+0x30>
    return true;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <CIPMUX+0x32>
  }
  else{
    return false;
 8004348:	2300      	movs	r3, #0
  }
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	0801b6b0 	.word	0x0801b6b0

08004358 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <WEBSERVER+0x3c>)
 8004360:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff fc4d 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	f7fb fecb 	bl	8000108 <strlen>
 8004372:	0003      	movs	r3, r0
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0011      	movs	r1, r2
 800437a:	0018      	movs	r0, r3
 800437c:	f7ff fa12 	bl	80037a4 <ESP_Send>
 8004380:	1e03      	subs	r3, r0, #0
 8004382:	d001      	beq.n	8004388 <WEBSERVER+0x30>
    return true;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <WEBSERVER+0x32>
  }
  else{
    return false;
 8004388:	2300      	movs	r3, #0
  }
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b002      	add	sp, #8
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			@ (mov r8, r8)
 8004394:	0801b6c0 	.word	0x0801b6c0

08004398 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b0c5      	sub	sp, #276	@ 0x114
 800439c:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800439e:	2380      	movs	r3, #128	@ 0x80
 80043a0:	005a      	lsls	r2, r3, #1
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	2100      	movs	r1, #0
 80043a6:	0018      	movs	r0, r3
 80043a8:	f014 f8b6 	bl	8018518 <memset>
  uint16_t length = CreateMessage();
 80043ac:	1dfc      	adds	r4, r7, #7
 80043ae:	34ff      	adds	r4, #255	@ 0xff
 80043b0:	f7ff fab2 	bl	8003918 <CreateMessage>
 80043b4:	0003      	movs	r3, r0
 80043b6:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80043b8:	4b20      	ldr	r3, [pc, #128]	@ (800443c <HTTPCPOST+0xa4>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HTTPCPOST+0x3a>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80043c0:	1dfb      	adds	r3, r7, #7
 80043c2:	33ff      	adds	r3, #255	@ 0xff
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <HTTPCPOST+0xa8>)
 80043c8:	491e      	ldr	r1, [pc, #120]	@ (8004444 <HTTPCPOST+0xac>)
 80043ca:	1d38      	adds	r0, r7, #4
 80043cc:	f014 f800 	bl	80183d0 <siprintf>
 80043d0:	e016      	b.n	8004400 <HTTPCPOST+0x68>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80043d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004448 <HTTPCPOST+0xb0>)
 80043d4:	481d      	ldr	r0, [pc, #116]	@ (800444c <HTTPCPOST+0xb4>)
 80043d6:	220c      	movs	r2, #12
 80043d8:	0019      	movs	r1, r3
 80043da:	f7ff f90c 	bl	80035f6 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80043de:	4a1a      	ldr	r2, [pc, #104]	@ (8004448 <HTTPCPOST+0xb0>)
 80043e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <HTTPCPOST+0xb8>)
 80043e2:	0011      	movs	r1, r2
 80043e4:	0018      	movs	r0, r3
 80043e6:	f7ff fa73 	bl	80038d0 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80043ea:	1dfb      	adds	r3, r7, #7
 80043ec:	33ff      	adds	r3, #255	@ 0xff
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	4c17      	ldr	r4, [pc, #92]	@ (8004450 <HTTPCPOST+0xb8>)
 80043f2:	4a18      	ldr	r2, [pc, #96]	@ (8004454 <HTTPCPOST+0xbc>)
 80043f4:	4918      	ldr	r1, [pc, #96]	@ (8004458 <HTTPCPOST+0xc0>)
 80043f6:	1d38      	adds	r0, r7, #4
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	0023      	movs	r3, r4
 80043fc:	f013 ffe8 	bl	80183d0 <siprintf>
  }
    uint16_t len = strlen(atCommandBuff);
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	0018      	movs	r0, r3
 8004404:	f7fb fe80 	bl	8000108 <strlen>
 8004408:	0002      	movs	r2, r0
 800440a:	1d7b      	adds	r3, r7, #5
 800440c:	33ff      	adds	r3, #255	@ 0xff
 800440e:	801a      	strh	r2, [r3, #0]
  //char atCommand[len+1];
  //strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 8004410:	1d3b      	adds	r3, r7, #4
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff fbf6 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004418:	1d7b      	adds	r3, r7, #5
 800441a:	33ff      	adds	r3, #255	@ 0xff
 800441c:	881a      	ldrh	r2, [r3, #0]
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	0011      	movs	r1, r2
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff f9be 	bl	80037a4 <ESP_Send>
 8004428:	1e03      	subs	r3, r0, #0
 800442a:	d001      	beq.n	8004430 <HTTPCPOST+0x98>
    return true;
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HTTPCPOST+0x9a>
  }
  else{
    return false;
 8004430:	2300      	movs	r3, #0
  }
}
 8004432:	0018      	movs	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	b043      	add	sp, #268	@ 0x10c
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	200004f5 	.word	0x200004f5
 8004440:	0801bfa8 	.word	0x0801bfa8
 8004444:	0801b6d8 	.word	0x0801b6d8
 8004448:	20000bbc 	.word	0x20000bbc
 800444c:	08080000 	.word	0x08080000
 8004450:	20000bc8 	.word	0x20000bc8
 8004454:	0801bfe4 	.word	0x0801bfe4
 8004458:	0801b710 	.word	0x0801b710

0800445c <SENDDATA>:
bool SENDDATA(){
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	4c14      	ldr	r4, [pc, #80]	@ (80044b0 <SENDDATA+0x54>)
 8004460:	44a5      	add	sp, r4
 8004462:	af00      	add	r7, sp, #0
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 8004464:	23a4      	movs	r3, #164	@ 0xa4
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	1d3b      	adds	r3, r7, #4
 800446a:	2100      	movs	r1, #0
 800446c:	0018      	movs	r0, r3
 800446e:	f014 f853 	bl	8018518 <memset>
  //sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
  uint16_t len = strlen(message);
 8004472:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <SENDDATA+0x58>)
 8004474:	0018      	movs	r0, r3
 8004476:	f7fb fe47 	bl	8000108 <strlen>
 800447a:	0002      	movs	r2, r0
 800447c:	4c0e      	ldr	r4, [pc, #56]	@ (80044b8 <SENDDATA+0x5c>)
 800447e:	193b      	adds	r3, r7, r4
 8004480:	801a      	strh	r2, [r3, #0]
  //char atCommand[len+1];
  //memset(atCommand, '\0', len+1);
  //1strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	0018      	movs	r0, r3
 8004486:	f7ff fbbd 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)message, len)) {
 800448a:	193b      	adds	r3, r7, r4
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <SENDDATA+0x58>)
 8004490:	0011      	movs	r1, r2
 8004492:	0018      	movs	r0, r3
 8004494:	f7ff f986 	bl	80037a4 <ESP_Send>
 8004498:	1e03      	subs	r3, r0, #0
 800449a:	d001      	beq.n	80044a0 <SENDDATA+0x44>
    return true;
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <SENDDATA+0x46>
  }
  else{
    return false;
 80044a0:	2300      	movs	r3, #0
  }
}
 80044a2:	0018      	movs	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	23a7      	movs	r3, #167	@ 0xa7
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	449d      	add	sp, r3
 80044ac:	bd90      	pop	{r4, r7, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	fffffd64 	.word	0xfffffd64
 80044b4:	2000051c 	.word	0x2000051c
 80044b8:	00000296 	.word	0x00000296

080044bc <SLEEP>:
bool SLEEP(){
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80044c2:	4b0d      	ldr	r3, [pc, #52]	@ (80044f8 <SLEEP+0x3c>)
 80044c4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f7ff fb9b 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7fb fe19 	bl	8000108 <strlen>
 80044d6:	0003      	movs	r3, r0
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0011      	movs	r1, r2
 80044de:	0018      	movs	r0, r3
 80044e0:	f7ff f960 	bl	80037a4 <ESP_Send>
 80044e4:	1e03      	subs	r3, r0, #0
 80044e6:	d001      	beq.n	80044ec <SLEEP+0x30>
    return true;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <SLEEP+0x32>
  }
  else{
    return false;
 80044ec:	2300      	movs	r3, #0
  }
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	0801b750 	.word	0x0801b750

080044fc <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 80044fc:	b5b0      	push	{r4, r5, r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	0002      	movs	r2, r0
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004508:	4b50      	ldr	r3, [pc, #320]	@ (800464c <DMA_ProcessBuffer+0x150>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	210e      	movs	r1, #14
 8004512:	187b      	adds	r3, r7, r1
 8004514:	43d2      	mvns	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004518:	200f      	movs	r0, #15
 800451a:	183b      	adds	r3, r7, r0
 800451c:	2203      	movs	r2, #3
 800451e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 8004520:	4b4b      	ldr	r3, [pc, #300]	@ (8004650 <DMA_ProcessBuffer+0x154>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	187a      	adds	r2, r7, r1
 8004528:	7812      	ldrb	r2, [r2, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d130      	bne.n	8004590 <DMA_ProcessBuffer+0x94>
      if(retry >4){
 800452e:	4b49      	ldr	r3, [pc, #292]	@ (8004654 <DMA_ProcessBuffer+0x158>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b04      	cmp	r3, #4
 8004534:	d91a      	bls.n	800456c <DMA_ProcessBuffer+0x70>
        retry = 0;
 8004536:	4b47      	ldr	r3, [pc, #284]	@ (8004654 <DMA_ProcessBuffer+0x158>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 800453c:	4b46      	ldr	r3, [pc, #280]	@ (8004658 <DMA_ProcessBuffer+0x15c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <DMA_ProcessBuffer+0x56>
 8004544:	4b45      	ldr	r3, [pc, #276]	@ (800465c <DMA_ProcessBuffer+0x160>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 800454c:	183b      	adds	r3, r7, r0
 800454e:	2207      	movs	r2, #7
 8004550:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004552:	4b41      	ldr	r3, [pc, #260]	@ (8004658 <DMA_ProcessBuffer+0x15c>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b08      	cmp	r3, #8
 8004558:	d103      	bne.n	8004562 <DMA_ProcessBuffer+0x66>
          EspState = ESP_STATE_MODE_SELECT;
 800455a:	4b41      	ldr	r3, [pc, #260]	@ (8004660 <DMA_ProcessBuffer+0x164>)
 800455c:	220b      	movs	r2, #11
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e016      	b.n	8004590 <DMA_ProcessBuffer+0x94>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004562:	230f      	movs	r3, #15
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	2206      	movs	r2, #6
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	e011      	b.n	8004590 <DMA_ProcessBuffer+0x94>
        }
      }
     else{
       retry ++;
 800456c:	4b39      	ldr	r3, [pc, #228]	@ (8004654 <DMA_ProcessBuffer+0x158>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	b2da      	uxtb	r2, r3
 8004574:	4b37      	ldr	r3, [pc, #220]	@ (8004654 <DMA_ProcessBuffer+0x158>)
 8004576:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004578:	f005 fe94 	bl	800a2a4 <HAL_GetTick>
 800457c:	0003      	movs	r3, r0
 800457e:	33f5      	adds	r3, #245	@ 0xf5
 8004580:	33ff      	adds	r3, #255	@ 0xff
 8004582:	001a      	movs	r2, r3
 8004584:	4b37      	ldr	r3, [pc, #220]	@ (8004664 <DMA_ProcessBuffer+0x168>)
 8004586:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004588:	230f      	movs	r3, #15
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	2204      	movs	r2, #4
 800458e:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004590:	4b2f      	ldr	r3, [pc, #188]	@ (8004650 <DMA_ProcessBuffer+0x154>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	210e      	movs	r1, #14
 8004598:	187a      	adds	r2, r7, r1
 800459a:	7812      	ldrb	r2, [r2, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d048      	beq.n	8004632 <DMA_ProcessBuffer+0x136>
      retry = 0;
 80045a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004654 <DMA_ProcessBuffer+0x158>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 80045a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004650 <DMA_ProcessBuffer+0x154>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	187a      	adds	r2, r7, r1
 80045ae:	7812      	ldrb	r2, [r2, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d917      	bls.n	80045e4 <DMA_ProcessBuffer+0xe8>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 80045b4:	4b26      	ldr	r3, [pc, #152]	@ (8004650 <DMA_ProcessBuffer+0x154>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	001a      	movs	r2, r3
 80045bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004668 <DMA_ProcessBuffer+0x16c>)
 80045be:	18d0      	adds	r0, r2, r3
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4a22      	ldr	r2, [pc, #136]	@ (8004650 <DMA_ProcessBuffer+0x154>)
 80045c8:	7812      	ldrb	r2, [r2, #0]
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	b299      	uxth	r1, r3
 80045d0:	230f      	movs	r3, #15
 80045d2:	18fc      	adds	r4, r7, r3
 80045d4:	1dfb      	adds	r3, r7, #7
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	001a      	movs	r2, r3
 80045da:	f7ff fb5b 	bl	8003c94 <ParseBuffer>
 80045de:	0003      	movs	r3, r0
 80045e0:	7023      	strb	r3, [r4, #0]
 80045e2:	e026      	b.n	8004632 <DMA_ProcessBuffer+0x136>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80045e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004650 <DMA_ProcessBuffer+0x154>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	001a      	movs	r2, r3
 80045ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004668 <DMA_ProcessBuffer+0x16c>)
 80045ee:	18d0      	adds	r0, r2, r3
 80045f0:	4b17      	ldr	r3, [pc, #92]	@ (8004650 <DMA_ProcessBuffer+0x154>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	001a      	movs	r2, r3
 80045f8:	23ff      	movs	r3, #255	@ 0xff
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	b299      	uxth	r1, r3
 80045fe:	250f      	movs	r5, #15
 8004600:	197c      	adds	r4, r7, r5
 8004602:	1dfb      	adds	r3, r7, #7
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	001a      	movs	r2, r3
 8004608:	f7ff fb44 	bl	8003c94 <ParseBuffer>
 800460c:	0003      	movs	r3, r0
 800460e:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 8004610:	220e      	movs	r2, #14
 8004612:	18bb      	adds	r3, r7, r2
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <DMA_ProcessBuffer+0x136>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 800461a:	18bb      	adds	r3, r7, r2
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b299      	uxth	r1, r3
 8004620:	197c      	adds	r4, r7, r5
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <DMA_ProcessBuffer+0x16c>)
 8004628:	0018      	movs	r0, r3
 800462a:	f7ff fb33 	bl	8003c94 <ParseBuffer>
 800462e:	0003      	movs	r3, r0
 8004630:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 8004632:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <DMA_ProcessBuffer+0x154>)
 8004634:	220e      	movs	r2, #14
 8004636:	18ba      	adds	r2, r7, r2
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	701a      	strb	r2, [r3, #0]
    return status;
 800463c:	230f      	movs	r3, #15
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	781b      	ldrb	r3, [r3, #0]
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b004      	add	sp, #16
 8004648:	bdb0      	pop	{r4, r5, r7, pc}
 800464a:	46c0      	nop			@ (mov r8, r8)
 800464c:	20002c70 	.word	0x20002c70
 8004650:	20000927 	.word	0x20000927
 8004654:	2000092c 	.word	0x2000092c
 8004658:	20000b32 	.word	0x20000b32
 800465c:	20000000 	.word	0x20000000
 8004660:	20000021 	.word	0x20000021
 8004664:	20000928 	.word	0x20000928
 8004668:	200003f0 	.word	0x200003f0

0800466c <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	0002      	movs	r2, r0
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	1dbb      	adds	r3, r7, #6
 800467a:	1c0a      	adds	r2, r1, #0
 800467c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800467e:	210f      	movs	r1, #15
 8004680:	187b      	adds	r3, r7, r1
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004686:	1dbb      	adds	r3, r7, #6
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d105      	bne.n	800469a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800468e:	187b      	adds	r3, r7, r1
 8004690:	1dfa      	adds	r2, r7, #7
 8004692:	7812      	ldrb	r2, [r2, #0]
 8004694:	4251      	negs	r1, r2
 8004696:	414a      	adcs	r2, r1
 8004698:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d107      	bne.n	80046b2 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 80046a2:	230f      	movs	r3, #15
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	1dfa      	adds	r2, r7, #7
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	3a02      	subs	r2, #2
 80046ac:	4251      	negs	r1, r2
 80046ae:	414a      	adcs	r2, r1
 80046b0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80046b2:	1dbb      	adds	r3, r7, #6
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d107      	bne.n	80046ca <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80046ba:	230f      	movs	r3, #15
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	1dfa      	adds	r2, r7, #7
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	3a05      	subs	r2, #5
 80046c4:	4251      	negs	r1, r2
 80046c6:	414a      	adcs	r2, r1
 80046c8:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80046ca:	230f      	movs	r3, #15
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	781b      	ldrb	r3, [r3, #0]
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b004      	add	sp, #16
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <AT_Send>:

bool AT_Send(AT_Commands state){
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	0002      	movs	r2, r0
 80046e0:	1dfb      	adds	r3, r7, #7
 80046e2:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80046e4:	230f      	movs	r3, #15
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
  switch (state){
 80046ec:	1dfb      	adds	r3, r7, #7
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d900      	bls.n	80046f6 <AT_Send+0x1e>
 80046f4:	e15f      	b.n	80049b6 <AT_Send+0x2de>
 80046f6:	009a      	lsls	r2, r3, #2
 80046f8:	4bb2      	ldr	r3, [pc, #712]	@ (80049c4 <AT_Send+0x2ec>)
 80046fa:	18d3      	adds	r3, r2, r3
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004700:	4bb1      	ldr	r3, [pc, #708]	@ (80049c8 <AT_Send+0x2f0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	0018      	movs	r0, r3
 8004706:	f005 f9f1 	bl	8009aec <TimestampIsReached>
 800470a:	1e03      	subs	r3, r0, #0
 800470c:	d100      	bne.n	8004710 <AT_Send+0x38>
 800470e:	e151      	b.n	80049b4 <AT_Send+0x2dc>
    ATCommandSend = PollAwake();
 8004710:	230f      	movs	r3, #15
 8004712:	18fc      	adds	r4, r7, r3
 8004714:	f7ff fc1a 	bl	8003f4c <PollAwake>
 8004718:	0003      	movs	r3, r0
 800471a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800471c:	f005 fdc2 	bl	800a2a4 <HAL_GetTick>
 8004720:	0003      	movs	r3, r0
 8004722:	3332      	adds	r3, #50	@ 0x32
 8004724:	001a      	movs	r2, r3
 8004726:	4ba8      	ldr	r3, [pc, #672]	@ (80049c8 <AT_Send+0x2f0>)
 8004728:	601a      	str	r2, [r3, #0]
  }
  break;
 800472a:	e143      	b.n	80049b4 <AT_Send+0x2dc>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 800472c:	4aa7      	ldr	r2, [pc, #668]	@ (80049cc <AT_Send+0x2f4>)
 800472e:	4ba8      	ldr	r3, [pc, #672]	@ (80049d0 <AT_Send+0x2f8>)
 8004730:	0019      	movs	r1, r3
 8004732:	2003      	movs	r0, #3
 8004734:	f005 fa30 	bl	8009b98 <CreateLine>
    ATCommandSend = RFPower();
 8004738:	230f      	movs	r3, #15
 800473a:	18fc      	adds	r4, r7, r3
 800473c:	f7ff fc26 	bl	8003f8c <RFPower>
 8004740:	0003      	movs	r3, r0
 8004742:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004744:	f005 fdae 	bl	800a2a4 <HAL_GetTick>
 8004748:	0003      	movs	r3, r0
 800474a:	330a      	adds	r3, #10
 800474c:	001a      	movs	r2, r3
 800474e:	4b9e      	ldr	r3, [pc, #632]	@ (80049c8 <AT_Send+0x2f0>)
 8004750:	601a      	str	r2, [r3, #0]
    break;
 8004752:	e130      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004754:	4a9f      	ldr	r2, [pc, #636]	@ (80049d4 <AT_Send+0x2fc>)
 8004756:	4b9e      	ldr	r3, [pc, #632]	@ (80049d0 <AT_Send+0x2f8>)
 8004758:	0019      	movs	r1, r3
 800475a:	2003      	movs	r0, #3
 800475c:	f005 fa1c 	bl	8009b98 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004760:	230f      	movs	r3, #15
 8004762:	18fc      	adds	r4, r7, r3
 8004764:	f7ff fc32 	bl	8003fcc <CheckRFPower>
 8004768:	0003      	movs	r3, r0
 800476a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800476c:	f005 fd9a 	bl	800a2a4 <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	330a      	adds	r3, #10
 8004774:	001a      	movs	r2, r3
 8004776:	4b94      	ldr	r3, [pc, #592]	@ (80049c8 <AT_Send+0x2f0>)
 8004778:	601a      	str	r2, [r3, #0]
    break;
 800477a:	e11c      	b.n	80049b6 <AT_Send+0x2de>

  case AT_RESTORE:
    Debug("Restoring ESP");
 800477c:	4a96      	ldr	r2, [pc, #600]	@ (80049d8 <AT_Send+0x300>)
 800477e:	4b94      	ldr	r3, [pc, #592]	@ (80049d0 <AT_Send+0x2f8>)
 8004780:	0019      	movs	r1, r3
 8004782:	2003      	movs	r0, #3
 8004784:	f005 fa08 	bl	8009b98 <CreateLine>
    ATCommandSend = ATRestore();
 8004788:	230f      	movs	r3, #15
 800478a:	18fc      	adds	r4, r7, r3
 800478c:	f7ff fc3e 	bl	800400c <ATRestore>
 8004790:	0003      	movs	r3, r0
 8004792:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004794:	f005 fd86 	bl	800a2a4 <HAL_GetTick>
 8004798:	0003      	movs	r3, r0
 800479a:	3332      	adds	r3, #50	@ 0x32
 800479c:	001a      	movs	r2, r3
 800479e:	4b8a      	ldr	r3, [pc, #552]	@ (80049c8 <AT_Send+0x2f0>)
 80047a0:	601a      	str	r2, [r3, #0]
    break;
 80047a2:	e108      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80047a4:	4a8d      	ldr	r2, [pc, #564]	@ (80049dc <AT_Send+0x304>)
 80047a6:	4b8a      	ldr	r3, [pc, #552]	@ (80049d0 <AT_Send+0x2f8>)
 80047a8:	0019      	movs	r1, r3
 80047aa:	2003      	movs	r0, #3
 80047ac:	f005 f9f4 	bl	8009b98 <CreateLine>
    ATCommandSend = CWINIT();
 80047b0:	230f      	movs	r3, #15
 80047b2:	18fc      	adds	r4, r7, r3
 80047b4:	f7ff fc4a 	bl	800404c <CWINIT>
 80047b8:	0003      	movs	r3, r0
 80047ba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80047bc:	f005 fd72 	bl	800a2a4 <HAL_GetTick>
 80047c0:	0003      	movs	r3, r0
 80047c2:	33f5      	adds	r3, #245	@ 0xf5
 80047c4:	33ff      	adds	r3, #255	@ 0xff
 80047c6:	001a      	movs	r2, r3
 80047c8:	4b7f      	ldr	r3, [pc, #508]	@ (80049c8 <AT_Send+0x2f0>)
 80047ca:	601a      	str	r2, [r3, #0]
    break;
 80047cc:	e0f3      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 80047ce:	4a84      	ldr	r2, [pc, #528]	@ (80049e0 <AT_Send+0x308>)
 80047d0:	4b7f      	ldr	r3, [pc, #508]	@ (80049d0 <AT_Send+0x2f8>)
 80047d2:	0019      	movs	r1, r3
 80047d4:	2003      	movs	r0, #3
 80047d6:	f005 f9df 	bl	8009b98 <CreateLine>
    ATCommandSend = CWSTATE();
 80047da:	230f      	movs	r3, #15
 80047dc:	18fc      	adds	r4, r7, r3
 80047de:	f7ff fd5b 	bl	8004298 <CWSTATE>
 80047e2:	0003      	movs	r3, r0
 80047e4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80047e6:	f005 fd5d 	bl	800a2a4 <HAL_GetTick>
 80047ea:	0003      	movs	r3, r0
 80047ec:	33f5      	adds	r3, #245	@ 0xf5
 80047ee:	33ff      	adds	r3, #255	@ 0xff
 80047f0:	001a      	movs	r2, r3
 80047f2:	4b75      	ldr	r3, [pc, #468]	@ (80049c8 <AT_Send+0x2f0>)
 80047f4:	601a      	str	r2, [r3, #0]
    break;
 80047f6:	e0de      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80047f8:	4a7a      	ldr	r2, [pc, #488]	@ (80049e4 <AT_Send+0x30c>)
 80047fa:	4b75      	ldr	r3, [pc, #468]	@ (80049d0 <AT_Send+0x2f8>)
 80047fc:	0019      	movs	r1, r3
 80047fe:	2003      	movs	r0, #3
 8004800:	f005 f9ca 	bl	8009b98 <CreateLine>
    ATCommandSend = CWMODE1();
 8004804:	230f      	movs	r3, #15
 8004806:	18fc      	adds	r4, r7, r3
 8004808:	f7ff fc40 	bl	800408c <CWMODE1>
 800480c:	0003      	movs	r3, r0
 800480e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004810:	f005 fd48 	bl	800a2a4 <HAL_GetTick>
 8004814:	0003      	movs	r3, r0
 8004816:	330a      	adds	r3, #10
 8004818:	001a      	movs	r2, r3
 800481a:	4b6b      	ldr	r3, [pc, #428]	@ (80049c8 <AT_Send+0x2f0>)
 800481c:	601a      	str	r2, [r3, #0]
    break;
 800481e:	e0ca      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004820:	4a70      	ldr	r2, [pc, #448]	@ (80049e4 <AT_Send+0x30c>)
 8004822:	4b6b      	ldr	r3, [pc, #428]	@ (80049d0 <AT_Send+0x2f8>)
 8004824:	0019      	movs	r1, r3
 8004826:	2003      	movs	r0, #3
 8004828:	f005 f9b6 	bl	8009b98 <CreateLine>
    ATCommandSend = CWMODE2();
 800482c:	230f      	movs	r3, #15
 800482e:	18fc      	adds	r4, r7, r3
 8004830:	f7ff fc4c 	bl	80040cc <CWMODE2>
 8004834:	0003      	movs	r3, r0
 8004836:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004838:	f005 fd34 	bl	800a2a4 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	330a      	adds	r3, #10
 8004840:	001a      	movs	r2, r3
 8004842:	4b61      	ldr	r3, [pc, #388]	@ (80049c8 <AT_Send+0x2f0>)
 8004844:	601a      	str	r2, [r3, #0]
    break;
 8004846:	e0b6      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004848:	4a67      	ldr	r2, [pc, #412]	@ (80049e8 <AT_Send+0x310>)
 800484a:	4b61      	ldr	r3, [pc, #388]	@ (80049d0 <AT_Send+0x2f8>)
 800484c:	0019      	movs	r1, r3
 800484e:	2003      	movs	r0, #3
 8004850:	f005 f9a2 	bl	8009b98 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004854:	230f      	movs	r3, #15
 8004856:	18fc      	adds	r4, r7, r3
 8004858:	f7ff fc58 	bl	800410c <CWAUTOCONN>
 800485c:	0003      	movs	r3, r0
 800485e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004860:	f005 fd20 	bl	800a2a4 <HAL_GetTick>
 8004864:	0003      	movs	r3, r0
 8004866:	330a      	adds	r3, #10
 8004868:	001a      	movs	r2, r3
 800486a:	4b57      	ldr	r3, [pc, #348]	@ (80049c8 <AT_Send+0x2f0>)
 800486c:	601a      	str	r2, [r3, #0]
    break;
 800486e:	e0a2      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004870:	4a5e      	ldr	r2, [pc, #376]	@ (80049ec <AT_Send+0x314>)
 8004872:	4b57      	ldr	r3, [pc, #348]	@ (80049d0 <AT_Send+0x2f8>)
 8004874:	0019      	movs	r1, r3
 8004876:	2003      	movs	r0, #3
 8004878:	f005 f98e 	bl	8009b98 <CreateLine>
    ATCommandSend = CWJAP();
 800487c:	230f      	movs	r3, #15
 800487e:	18fc      	adds	r4, r7, r3
 8004880:	f7ff fc64 	bl	800414c <CWJAP>
 8004884:	0003      	movs	r3, r0
 8004886:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004888:	f005 fd0c 	bl	800a2a4 <HAL_GetTick>
 800488c:	0003      	movs	r3, r0
 800488e:	3332      	adds	r3, #50	@ 0x32
 8004890:	001a      	movs	r2, r3
 8004892:	4b4d      	ldr	r3, [pc, #308]	@ (80049c8 <AT_Send+0x2f0>)
 8004894:	601a      	str	r2, [r3, #0]
    break;
 8004896:	e08e      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004898:	4a55      	ldr	r2, [pc, #340]	@ (80049f0 <AT_Send+0x318>)
 800489a:	4b4d      	ldr	r3, [pc, #308]	@ (80049d0 <AT_Send+0x2f8>)
 800489c:	0019      	movs	r1, r3
 800489e:	2003      	movs	r0, #3
 80048a0:	f005 f97a 	bl	8009b98 <CreateLine>
    ATCommandSend = CWMODE3();
 80048a4:	230f      	movs	r3, #15
 80048a6:	18fc      	adds	r4, r7, r3
 80048a8:	f7ff fcd6 	bl	8004258 <CWMODE3>
 80048ac:	0003      	movs	r3, r0
 80048ae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80048b0:	f005 fcf8 	bl	800a2a4 <HAL_GetTick>
 80048b4:	0003      	movs	r3, r0
 80048b6:	330a      	adds	r3, #10
 80048b8:	001a      	movs	r2, r3
 80048ba:	4b43      	ldr	r3, [pc, #268]	@ (80049c8 <AT_Send+0x2f0>)
 80048bc:	601a      	str	r2, [r3, #0]
    break;
 80048be:	e07a      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80048c0:	4a4c      	ldr	r2, [pc, #304]	@ (80049f4 <AT_Send+0x31c>)
 80048c2:	4b43      	ldr	r3, [pc, #268]	@ (80049d0 <AT_Send+0x2f8>)
 80048c4:	0019      	movs	r1, r3
 80048c6:	2003      	movs	r0, #3
 80048c8:	f005 f966 	bl	8009b98 <CreateLine>
    ATCommandSend = CWSAP();
 80048cc:	230f      	movs	r3, #15
 80048ce:	18fc      	adds	r4, r7, r3
 80048d0:	f7ff fd02 	bl	80042d8 <CWSAP>
 80048d4:	0003      	movs	r3, r0
 80048d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80048d8:	f005 fce4 	bl	800a2a4 <HAL_GetTick>
 80048dc:	0003      	movs	r3, r0
 80048de:	330a      	adds	r3, #10
 80048e0:	001a      	movs	r2, r3
 80048e2:	4b39      	ldr	r3, [pc, #228]	@ (80049c8 <AT_Send+0x2f0>)
 80048e4:	601a      	str	r2, [r3, #0]
    break;
 80048e6:	e066      	b.n	80049b6 <AT_Send+0x2de>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 80048e8:	4a43      	ldr	r2, [pc, #268]	@ (80049f8 <AT_Send+0x320>)
 80048ea:	4b39      	ldr	r3, [pc, #228]	@ (80049d0 <AT_Send+0x2f8>)
 80048ec:	0019      	movs	r1, r3
 80048ee:	2003      	movs	r0, #3
 80048f0:	f005 f952 	bl	8009b98 <CreateLine>
    ATCommandSend = CIPMUX();
 80048f4:	230f      	movs	r3, #15
 80048f6:	18fc      	adds	r4, r7, r3
 80048f8:	f7ff fd0e 	bl	8004318 <CIPMUX>
 80048fc:	0003      	movs	r3, r0
 80048fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004900:	f005 fcd0 	bl	800a2a4 <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	330a      	adds	r3, #10
 8004908:	001a      	movs	r2, r3
 800490a:	4b2f      	ldr	r3, [pc, #188]	@ (80049c8 <AT_Send+0x2f0>)
 800490c:	601a      	str	r2, [r3, #0]
    break;
 800490e:	e052      	b.n	80049b6 <AT_Send+0x2de>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 8004910:	4a37      	ldr	r2, [pc, #220]	@ (80049f0 <AT_Send+0x318>)
 8004912:	4b2f      	ldr	r3, [pc, #188]	@ (80049d0 <AT_Send+0x2f8>)
 8004914:	0019      	movs	r1, r3
 8004916:	2003      	movs	r0, #3
 8004918:	f005 f93e 	bl	8009b98 <CreateLine>
    ATCommandSend = WEBSERVER();
 800491c:	230f      	movs	r3, #15
 800491e:	18fc      	adds	r4, r7, r3
 8004920:	f7ff fd1a 	bl	8004358 <WEBSERVER>
 8004924:	0003      	movs	r3, r0
 8004926:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004928:	f005 fcbc 	bl	800a2a4 <HAL_GetTick>
 800492c:	0003      	movs	r3, r0
 800492e:	330a      	adds	r3, #10
 8004930:	001a      	movs	r2, r3
 8004932:	4b25      	ldr	r3, [pc, #148]	@ (80049c8 <AT_Send+0x2f0>)
 8004934:	601a      	str	r2, [r3, #0]
    break;
 8004936:	e03e      	b.n	80049b6 <AT_Send+0x2de>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 8004938:	4a2d      	ldr	r2, [pc, #180]	@ (80049f0 <AT_Send+0x318>)
 800493a:	4b25      	ldr	r3, [pc, #148]	@ (80049d0 <AT_Send+0x2f8>)
 800493c:	0019      	movs	r1, r3
 800493e:	2003      	movs	r0, #3
 8004940:	f005 f92a 	bl	8009b98 <CreateLine>
    ATCommandSend = HTTPCPOST();
 8004944:	230f      	movs	r3, #15
 8004946:	18fc      	adds	r4, r7, r3
 8004948:	f7ff fd26 	bl	8004398 <HTTPCPOST>
 800494c:	0003      	movs	r3, r0
 800494e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004950:	f005 fca8 	bl	800a2a4 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	33f5      	adds	r3, #245	@ 0xf5
 8004958:	33ff      	adds	r3, #255	@ 0xff
 800495a:	001a      	movs	r2, r3
 800495c:	4b1a      	ldr	r3, [pc, #104]	@ (80049c8 <AT_Send+0x2f0>)
 800495e:	601a      	str	r2, [r3, #0]
    break;
 8004960:	e029      	b.n	80049b6 <AT_Send+0x2de>

  case AT_SENDDATA:
    Debug("Send the data");
 8004962:	4a26      	ldr	r2, [pc, #152]	@ (80049fc <AT_Send+0x324>)
 8004964:	4b1a      	ldr	r3, [pc, #104]	@ (80049d0 <AT_Send+0x2f8>)
 8004966:	0019      	movs	r1, r3
 8004968:	2003      	movs	r0, #3
 800496a:	f005 f915 	bl	8009b98 <CreateLine>
    ATCommandSend = SENDDATA();
 800496e:	230f      	movs	r3, #15
 8004970:	18fc      	adds	r4, r7, r3
 8004972:	f7ff fd73 	bl	800445c <SENDDATA>
 8004976:	0003      	movs	r3, r0
 8004978:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800497a:	f005 fc93 	bl	800a2a4 <HAL_GetTick>
 800497e:	0003      	movs	r3, r0
 8004980:	33f5      	adds	r3, #245	@ 0xf5
 8004982:	33ff      	adds	r3, #255	@ 0xff
 8004984:	001a      	movs	r2, r3
 8004986:	4b10      	ldr	r3, [pc, #64]	@ (80049c8 <AT_Send+0x2f0>)
 8004988:	601a      	str	r2, [r3, #0]
    break;
 800498a:	e014      	b.n	80049b6 <AT_Send+0x2de>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800498c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a00 <AT_Send+0x328>)
 800498e:	4b10      	ldr	r3, [pc, #64]	@ (80049d0 <AT_Send+0x2f8>)
 8004990:	0019      	movs	r1, r3
 8004992:	2003      	movs	r0, #3
 8004994:	f005 f900 	bl	8009b98 <CreateLine>
    ATCommandSend = SLEEP();
 8004998:	230f      	movs	r3, #15
 800499a:	18fc      	adds	r4, r7, r3
 800499c:	f7ff fd8e 	bl	80044bc <SLEEP>
 80049a0:	0003      	movs	r3, r0
 80049a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80049a4:	f005 fc7e 	bl	800a2a4 <HAL_GetTick>
 80049a8:	0003      	movs	r3, r0
 80049aa:	330a      	adds	r3, #10
 80049ac:	001a      	movs	r2, r3
 80049ae:	4b06      	ldr	r3, [pc, #24]	@ (80049c8 <AT_Send+0x2f0>)
 80049b0:	601a      	str	r2, [r3, #0]
    break;
 80049b2:	e000      	b.n	80049b6 <AT_Send+0x2de>
  break;
 80049b4:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80049b6:	230f      	movs	r3, #15
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	781b      	ldrb	r3, [r3, #0]
}
 80049bc:	0018      	movs	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	b005      	add	sp, #20
 80049c2:	bd90      	pop	{r4, r7, pc}
 80049c4:	0801c00c 	.word	0x0801c00c
 80049c8:	20000928 	.word	0x20000928
 80049cc:	0801b760 	.word	0x0801b760
 80049d0:	0801b348 	.word	0x0801b348
 80049d4:	0801b774 	.word	0x0801b774
 80049d8:	0801b788 	.word	0x0801b788
 80049dc:	0801b798 	.word	0x0801b798
 80049e0:	0801b7ac 	.word	0x0801b7ac
 80049e4:	0801b7c4 	.word	0x0801b7c4
 80049e8:	0801b7dc 	.word	0x0801b7dc
 80049ec:	0801b7f4 	.word	0x0801b7f4
 80049f0:	0801b808 	.word	0x0801b808
 80049f4:	0801b824 	.word	0x0801b824
 80049f8:	0801b840 	.word	0x0801b840
 80049fc:	0801b864 	.word	0x0801b864
 8004a00:	0801b874 	.word	0x0801b874

08004a04 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004a0a:	1dfb      	adds	r3, r7, #7
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004a10:	4b79      	ldr	r3, [pc, #484]	@ (8004bf8 <ESP_WakeTest+0x1f4>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	d900      	bls.n	8004a1a <ESP_WakeTest+0x16>
 8004a18:	e0d4      	b.n	8004bc4 <ESP_WakeTest+0x1c0>
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	4b77      	ldr	r3, [pc, #476]	@ (8004bfc <ESP_WakeTest+0x1f8>)
 8004a1e:	18d3      	adds	r3, r2, r3
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004a24:	4b76      	ldr	r3, [pc, #472]	@ (8004c00 <ESP_WakeTest+0x1fc>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	4053      	eors	r3, r2
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d036      	beq.n	8004aa0 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	4873      	ldr	r0, [pc, #460]	@ (8004c04 <ESP_WakeTest+0x200>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	f006 ffd1 	bl	800b9e2 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004a40:	2032      	movs	r0, #50	@ 0x32
 8004a42:	f005 fc39 	bl	800a2b8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004a46:	2380      	movs	r3, #128	@ 0x80
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	486e      	ldr	r0, [pc, #440]	@ (8004c04 <ESP_WakeTest+0x200>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	0019      	movs	r1, r3
 8004a50:	f006 ffc7 	bl	800b9e2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004a54:	200a      	movs	r0, #10
 8004a56:	f005 fc2f 	bl	800a2b8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004a5a:	4b6b      	ldr	r3, [pc, #428]	@ (8004c08 <ESP_WakeTest+0x204>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2101      	movs	r1, #1
 8004a60:	0018      	movs	r0, r3
 8004a62:	f006 ffbe 	bl	800b9e2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004a66:	200a      	movs	r0, #10
 8004a68:	f005 fc26 	bl	800a2b8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004a6c:	4b66      	ldr	r3, [pc, #408]	@ (8004c08 <ESP_WakeTest+0x204>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	2102      	movs	r1, #2
 8004a72:	0018      	movs	r0, r3
 8004a74:	f006 ffb5 	bl	800b9e2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004a78:	200a      	movs	r0, #10
 8004a7a:	f005 fc1d 	bl	800a2b8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004a7e:	4b62      	ldr	r3, [pc, #392]	@ (8004c08 <ESP_WakeTest+0x204>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	2101      	movs	r1, #1
 8004a84:	0018      	movs	r0, r3
 8004a86:	f006 ffac 	bl	800b9e2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004a8a:	f005 fc0b 	bl	800a2a4 <HAL_GetTick>
 8004a8e:	0003      	movs	r3, r0
 8004a90:	22af      	movs	r2, #175	@ 0xaf
 8004a92:	0092      	lsls	r2, r2, #2
 8004a94:	189a      	adds	r2, r3, r2
 8004a96:	4b5d      	ldr	r3, [pc, #372]	@ (8004c0c <ESP_WakeTest+0x208>)
 8004a98:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004a9a:	4b59      	ldr	r3, [pc, #356]	@ (8004c00 <ESP_WakeTest+0x1fc>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c10 <ESP_WakeTest+0x20c>)
 8004aa2:	21ff      	movs	r1, #255	@ 0xff
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7fe fea7 	bl	80037f8 <ESP_Receive>
 8004aaa:	1e03      	subs	r3, r0, #0
 8004aac:	d100      	bne.n	8004ab0 <ESP_WakeTest+0xac>
 8004aae:	e099      	b.n	8004be4 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 8004ab0:	4b51      	ldr	r3, [pc, #324]	@ (8004bf8 <ESP_WakeTest+0x1f4>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ab6:	e095      	b.n	8004be4 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004ab8:	4b54      	ldr	r3, [pc, #336]	@ (8004c0c <ESP_WakeTest+0x208>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f005 f815 	bl	8009aec <TimestampIsReached>
 8004ac2:	1e03      	subs	r3, r0, #0
 8004ac4:	d100      	bne.n	8004ac8 <ESP_WakeTest+0xc4>
 8004ac6:	e08f      	b.n	8004be8 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004ac8:	4b52      	ldr	r3, [pc, #328]	@ (8004c14 <ESP_WakeTest+0x210>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	1dfc      	adds	r4, r7, #7
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7ff fe02 	bl	80046d8 <AT_Send>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004ad8:	1dfb      	adds	r3, r7, #7
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d100      	bne.n	8004ae2 <ESP_WakeTest+0xde>
 8004ae0:	e082      	b.n	8004be8 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 8004ae2:	4b45      	ldr	r3, [pc, #276]	@ (8004bf8 <ESP_WakeTest+0x1f4>)
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004ae8:	e07e      	b.n	8004be8 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004aea:	4b48      	ldr	r3, [pc, #288]	@ (8004c0c <ESP_WakeTest+0x208>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	0018      	movs	r0, r3
 8004af0:	f004 fffc 	bl	8009aec <TimestampIsReached>
 8004af4:	1e03      	subs	r3, r0, #0
 8004af6:	d100      	bne.n	8004afa <ESP_WakeTest+0xf6>
 8004af8:	e078      	b.n	8004bec <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004afa:	4b47      	ldr	r3, [pc, #284]	@ (8004c18 <ESP_WakeTest+0x214>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7ff fcfc 	bl	80044fc <DMA_ProcessBuffer>
 8004b04:	0003      	movs	r3, r0
 8004b06:	001a      	movs	r2, r3
 8004b08:	4b44      	ldr	r3, [pc, #272]	@ (8004c1c <ESP_WakeTest+0x218>)
 8004b0a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004b0c:	4b43      	ldr	r3, [pc, #268]	@ (8004c1c <ESP_WakeTest+0x218>)
 8004b0e:	781a      	ldrb	r2, [r3, #0]
 8004b10:	4b41      	ldr	r3, [pc, #260]	@ (8004c18 <ESP_WakeTest+0x214>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	1dbc      	adds	r4, r7, #6
 8004b16:	0019      	movs	r1, r3
 8004b18:	0010      	movs	r0, r2
 8004b1a:	f7ff fda7 	bl	800466c <ATCompare>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004b22:	4b3e      	ldr	r3, [pc, #248]	@ (8004c1c <ESP_WakeTest+0x218>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d102      	bne.n	8004b30 <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 8004b2a:	4b33      	ldr	r3, [pc, #204]	@ (8004bf8 <ESP_WakeTest+0x1f4>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004b30:	4b3a      	ldr	r3, [pc, #232]	@ (8004c1c <ESP_WakeTest+0x218>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b07      	cmp	r3, #7
 8004b36:	d104      	bne.n	8004b42 <ESP_WakeTest+0x13e>
          StartProg();
 8004b38:	f7ff f87a 	bl	8003c30 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bf8 <ESP_WakeTest+0x1f4>)
 8004b3e:	2205      	movs	r2, #5
 8004b40:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004b42:	4b36      	ldr	r3, [pc, #216]	@ (8004c1c <ESP_WakeTest+0x218>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d109      	bne.n	8004b5e <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004b4a:	f005 fbab 	bl	800a2a4 <HAL_GetTick>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	3332      	adds	r3, #50	@ 0x32
 8004b52:	001a      	movs	r2, r3
 8004b54:	4b2d      	ldr	r3, [pc, #180]	@ (8004c0c <ESP_WakeTest+0x208>)
 8004b56:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004b58:	4b27      	ldr	r3, [pc, #156]	@ (8004bf8 <ESP_WakeTest+0x1f4>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004b5e:	1dbb      	adds	r3, r7, #6
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d042      	beq.n	8004bec <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004b66:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <ESP_WakeTest+0x1f4>)
 8004b68:	2203      	movs	r2, #3
 8004b6a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004b6c:	e03e      	b.n	8004bec <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c20 <ESP_WakeTest+0x21c>)
 8004b70:	22fa      	movs	r2, #250	@ 0xfa
 8004b72:	0112      	lsls	r2, r2, #4
 8004b74:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004b76:	4b2a      	ldr	r3, [pc, #168]	@ (8004c20 <ESP_WakeTest+0x21c>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004b7c:	4b28      	ldr	r3, [pc, #160]	@ (8004c20 <ESP_WakeTest+0x21c>)
 8004b7e:	22fa      	movs	r2, #250	@ 0xfa
 8004b80:	0112      	lsls	r2, r2, #4
 8004b82:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004b84:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf8 <ESP_WakeTest+0x1f4>)
 8004b86:	2204      	movs	r2, #4
 8004b88:	701a      	strb	r2, [r3, #0]

      break;
 8004b8a:	e030      	b.n	8004bee <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004b8c:	4b25      	ldr	r3, [pc, #148]	@ (8004c24 <ESP_WakeTest+0x220>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004b92:	4b1b      	ldr	r3, [pc, #108]	@ (8004c00 <ESP_WakeTest+0x1fc>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004b98:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <ESP_WakeTest+0x204>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f006 ff1f 	bl	800b9e2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004ba4:	2380      	movs	r3, #128	@ 0x80
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	4816      	ldr	r0, [pc, #88]	@ (8004c04 <ESP_WakeTest+0x200>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	0019      	movs	r1, r3
 8004bae:	f006 ff18 	bl	800b9e2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004bb2:	4b15      	ldr	r3, [pc, #84]	@ (8004c08 <ESP_WakeTest+0x204>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f006 ff12 	bl	800b9e2 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004bbe:	f002 f8bf 	bl	8006d40 <SetESPMeasurementDone>
      break;
 8004bc2:	e014      	b.n	8004bee <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <ESP_WakeTest+0x1f4>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
      break;
 8004bca:	e010      	b.n	8004bee <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004bcc:	4b14      	ldr	r3, [pc, #80]	@ (8004c20 <ESP_WakeTest+0x21c>)
 8004bce:	22fa      	movs	r2, #250	@ 0xfa
 8004bd0:	0112      	lsls	r2, r2, #4
 8004bd2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004bd4:	4b12      	ldr	r3, [pc, #72]	@ (8004c20 <ESP_WakeTest+0x21c>)
 8004bd6:	22fa      	movs	r2, #250	@ 0xfa
 8004bd8:	0112      	lsls	r2, r2, #4
 8004bda:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004bdc:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <ESP_WakeTest+0x21c>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004be2:	e004      	b.n	8004bee <ESP_WakeTest+0x1ea>
      break;
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	e002      	b.n	8004bee <ESP_WakeTest+0x1ea>
      break;
 8004be8:	46c0      	nop			@ (mov r8, r8)
 8004bea:	e000      	b.n	8004bee <ESP_WakeTest+0x1ea>
      break;
 8004bec:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b003      	add	sp, #12
 8004bf4:	bd90      	pop	{r4, r7, pc}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	20000b34 	.word	0x20000b34
 8004bfc:	0801c050 	.word	0x0801c050
 8004c00:	200004ef 	.word	0x200004ef
 8004c04:	50000800 	.word	0x50000800
 8004c08:	50001c00 	.word	0x50001c00
 8004c0c:	20000928 	.word	0x20000928
 8004c10:	200003f0 	.word	0x200003f0
 8004c14:	20000b32 	.word	0x20000b32
 8004c18:	20000b31 	.word	0x20000b31
 8004c1c:	20000022 	.word	0x20000022
 8004c20:	40000400 	.word	0x40000400
 8004c24:	20000000 	.word	0x20000000

08004c28 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004c2e:	1dfb      	adds	r3, r7, #7
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004c34:	4bc2      	ldr	r3, [pc, #776]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b0e      	cmp	r3, #14
 8004c3a:	d900      	bls.n	8004c3e <ESP_Upkeep+0x16>
 8004c3c:	e266      	b.n	800510c <ESP_Upkeep+0x4e4>
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	4bc0      	ldr	r3, [pc, #768]	@ (8004f44 <ESP_Upkeep+0x31c>)
 8004c42:	18d3      	adds	r3, r2, r3
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004c48:	4bbd      	ldr	r3, [pc, #756]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
      break;
 8004c4e:	e274      	b.n	800513a <ESP_Upkeep+0x512>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004c50:	4bbd      	ldr	r3, [pc, #756]	@ (8004f48 <ESP_Upkeep+0x320>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2201      	movs	r2, #1
 8004c56:	4053      	eors	r3, r2
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d036      	beq.n	8004ccc <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004c5e:	2380      	movs	r3, #128	@ 0x80
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	48ba      	ldr	r0, [pc, #744]	@ (8004f4c <ESP_Upkeep+0x324>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	0019      	movs	r1, r3
 8004c68:	f006 febb 	bl	800b9e2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	f005 fb23 	bl	800a2b8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004c72:	2380      	movs	r3, #128	@ 0x80
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	48b5      	ldr	r0, [pc, #724]	@ (8004f4c <ESP_Upkeep+0x324>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	f006 feb1 	bl	800b9e2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004c80:	2001      	movs	r0, #1
 8004c82:	f005 fb19 	bl	800a2b8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004c86:	4bb2      	ldr	r3, [pc, #712]	@ (8004f50 <ESP_Upkeep+0x328>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f006 fea8 	bl	800b9e2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004c92:	2001      	movs	r0, #1
 8004c94:	f005 fb10 	bl	800a2b8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004c98:	4bad      	ldr	r3, [pc, #692]	@ (8004f50 <ESP_Upkeep+0x328>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f006 fe9f 	bl	800b9e2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f005 fb07 	bl	800a2b8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004caa:	4ba9      	ldr	r3, [pc, #676]	@ (8004f50 <ESP_Upkeep+0x328>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	2101      	movs	r1, #1
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f006 fe96 	bl	800b9e2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004cb6:	f005 faf5 	bl	800a2a4 <HAL_GetTick>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	22af      	movs	r2, #175	@ 0xaf
 8004cbe:	0092      	lsls	r2, r2, #2
 8004cc0:	189a      	adds	r2, r3, r2
 8004cc2:	4ba4      	ldr	r3, [pc, #656]	@ (8004f54 <ESP_Upkeep+0x32c>)
 8004cc4:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004cc6:	4ba0      	ldr	r3, [pc, #640]	@ (8004f48 <ESP_Upkeep+0x320>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004ccc:	4ba2      	ldr	r3, [pc, #648]	@ (8004f58 <ESP_Upkeep+0x330>)
 8004cce:	21ff      	movs	r1, #255	@ 0xff
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7fe fd91 	bl	80037f8 <ESP_Receive>
 8004cd6:	1e03      	subs	r3, r0, #0
 8004cd8:	d100      	bne.n	8004cdc <ESP_Upkeep+0xb4>
 8004cda:	e223      	b.n	8005124 <ESP_Upkeep+0x4fc>
        EspState = ESP_STATE_MODE_SELECT;
 8004cdc:	4b98      	ldr	r3, [pc, #608]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004cde:	220b      	movs	r2, #11
 8004ce0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ce2:	e21f      	b.n	8005124 <ESP_Upkeep+0x4fc>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004ce4:	4b9d      	ldr	r3, [pc, #628]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004ce6:	2209      	movs	r2, #9
 8004ce8:	2111      	movs	r1, #17
 8004cea:	0018      	movs	r0, r3
 8004cec:	f013 fc14 	bl	8018518 <memset>
      if(!InitIsDone || WifiReset){
 8004cf0:	4b9b      	ldr	r3, [pc, #620]	@ (8004f60 <ESP_Upkeep+0x338>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	4053      	eors	r3, r2
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <ESP_Upkeep+0xde>
 8004cfe:	4b99      	ldr	r3, [pc, #612]	@ (8004f64 <ESP_Upkeep+0x33c>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01a      	beq.n	8004d3c <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 7);
 8004d06:	4b95      	ldr	r3, [pc, #596]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004d08:	4a97      	ldr	r2, [pc, #604]	@ (8004f68 <ESP_Upkeep+0x340>)
 8004d0a:	6811      	ldr	r1, [r2, #0]
 8004d0c:	6019      	str	r1, [r3, #0]
 8004d0e:	8891      	ldrh	r1, [r2, #4]
 8004d10:	8099      	strh	r1, [r3, #4]
 8004d12:	7992      	ldrb	r2, [r2, #6]
 8004d14:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8004d16:	4b8a      	ldr	r3, [pc, #552]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004d18:	2204      	movs	r2, #4
 8004d1a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004d1c:	4b93      	ldr	r3, [pc, #588]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004d22:	4b93      	ldr	r3, [pc, #588]	@ (8004f70 <ESP_Upkeep+0x348>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004d28:	4b90      	ldr	r3, [pc, #576]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004d30:	5c9a      	ldrb	r2, [r3, r2]
 8004d32:	4b90      	ldr	r3, [pc, #576]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004d34:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d36:	4b90      	ldr	r3, [pc, #576]	@ (8004f78 <ESP_Upkeep+0x350>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004d3c:	4b88      	ldr	r3, [pc, #544]	@ (8004f60 <ESP_Upkeep+0x338>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01f      	beq.n	8004d84 <ESP_Upkeep+0x15c>
 8004d44:	4b8d      	ldr	r3, [pc, #564]	@ (8004f7c <ESP_Upkeep+0x354>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4053      	eors	r3, r2
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d018      	beq.n	8004d84 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004d52:	4b82      	ldr	r3, [pc, #520]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004d54:	4a8a      	ldr	r2, [pc, #552]	@ (8004f80 <ESP_Upkeep+0x358>)
 8004d56:	6811      	ldr	r1, [r2, #0]
 8004d58:	6019      	str	r1, [r3, #0]
 8004d5a:	8892      	ldrh	r2, [r2, #4]
 8004d5c:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004d5e:	4b78      	ldr	r3, [pc, #480]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004d60:	2204      	movs	r2, #4
 8004d62:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004d64:	4b81      	ldr	r3, [pc, #516]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004d6a:	4b81      	ldr	r3, [pc, #516]	@ (8004f70 <ESP_Upkeep+0x348>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004d70:	4b7e      	ldr	r3, [pc, #504]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	001a      	movs	r2, r3
 8004d76:	4b79      	ldr	r3, [pc, #484]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004d78:	5c9a      	ldrb	r2, [r3, r2]
 8004d7a:	4b7e      	ldr	r3, [pc, #504]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004d7c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d7e:	4b7e      	ldr	r3, [pc, #504]	@ (8004f78 <ESP_Upkeep+0x350>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8004d84:	4b76      	ldr	r3, [pc, #472]	@ (8004f60 <ESP_Upkeep+0x338>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d021      	beq.n	8004dd0 <ESP_Upkeep+0x1a8>
 8004d8c:	4b7b      	ldr	r3, [pc, #492]	@ (8004f7c <ESP_Upkeep+0x354>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01d      	beq.n	8004dd0 <ESP_Upkeep+0x1a8>
 8004d94:	4b7b      	ldr	r3, [pc, #492]	@ (8004f84 <ESP_Upkeep+0x35c>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	4053      	eors	r3, r2
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d016      	beq.n	8004dd0 <ESP_Upkeep+0x1a8>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8004da2:	4b79      	ldr	r3, [pc, #484]	@ (8004f88 <ESP_Upkeep+0x360>)
 8004da4:	881a      	ldrh	r2, [r3, #0]
 8004da6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004da8:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8004daa:	4b65      	ldr	r3, [pc, #404]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004dac:	2204      	movs	r2, #4
 8004dae:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004db0:	4b6e      	ldr	r3, [pc, #440]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8004db6:	4b6e      	ldr	r3, [pc, #440]	@ (8004f70 <ESP_Upkeep+0x348>)
 8004db8:	2204      	movs	r2, #4
 8004dba:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	001a      	movs	r2, r3
 8004dc2:	4b66      	ldr	r3, [pc, #408]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004dc4:	5c9a      	ldrb	r2, [r3, r2]
 8004dc6:	4b6b      	ldr	r3, [pc, #428]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004dc8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004dca:	4b6b      	ldr	r3, [pc, #428]	@ (8004f78 <ESP_Upkeep+0x350>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest){
 8004dd0:	4b63      	ldr	r3, [pc, #396]	@ (8004f60 <ESP_Upkeep+0x338>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d022      	beq.n	8004e1e <ESP_Upkeep+0x1f6>
 8004dd8:	4b68      	ldr	r3, [pc, #416]	@ (8004f7c <ESP_Upkeep+0x354>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01e      	beq.n	8004e1e <ESP_Upkeep+0x1f6>
 8004de0:	4b68      	ldr	r3, [pc, #416]	@ (8004f84 <ESP_Upkeep+0x35c>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01a      	beq.n	8004e1e <ESP_Upkeep+0x1f6>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004de8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004dea:	4a68      	ldr	r2, [pc, #416]	@ (8004f8c <ESP_Upkeep+0x364>)
 8004dec:	8811      	ldrh	r1, [r2, #0]
 8004dee:	8019      	strh	r1, [r3, #0]
 8004df0:	7892      	ldrb	r2, [r2, #2]
 8004df2:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004df4:	4b52      	ldr	r3, [pc, #328]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004df6:	2204      	movs	r2, #4
 8004df8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004dfa:	4b5c      	ldr	r3, [pc, #368]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004e00:	4b5b      	ldr	r3, [pc, #364]	@ (8004f70 <ESP_Upkeep+0x348>)
 8004e02:	2202      	movs	r2, #2
 8004e04:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004e06:	f004 f89d 	bl	8008f44 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004e0a:	4b58      	ldr	r3, [pc, #352]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	001a      	movs	r2, r3
 8004e10:	4b52      	ldr	r3, [pc, #328]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004e12:	5c9a      	ldrb	r2, [r3, r2]
 8004e14:	4b57      	ldr	r3, [pc, #348]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004e16:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004e18:	4b57      	ldr	r3, [pc, #348]	@ (8004f78 <ESP_Upkeep+0x350>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8004f90 <ESP_Upkeep+0x368>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d100      	bne.n	8004e28 <ESP_Upkeep+0x200>
 8004e26:	e17f      	b.n	8005128 <ESP_Upkeep+0x500>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8004e28:	4b4c      	ldr	r3, [pc, #304]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004e2a:	4a5a      	ldr	r2, [pc, #360]	@ (8004f94 <ESP_Upkeep+0x36c>)
 8004e2c:	6811      	ldr	r1, [r2, #0]
 8004e2e:	6019      	str	r1, [r3, #0]
 8004e30:	7912      	ldrb	r2, [r2, #4]
 8004e32:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004e34:	4b42      	ldr	r3, [pc, #264]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004e36:	2204      	movs	r2, #4
 8004e38:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8004e40:	4b4b      	ldr	r3, [pc, #300]	@ (8004f70 <ESP_Upkeep+0x348>)
 8004e42:	2203      	movs	r2, #3
 8004e44:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004e46:	f004 f87d 	bl	8008f44 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004e4a:	4b48      	ldr	r3, [pc, #288]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	001a      	movs	r2, r3
 8004e50:	4b42      	ldr	r3, [pc, #264]	@ (8004f5c <ESP_Upkeep+0x334>)
 8004e52:	5c9a      	ldrb	r2, [r3, r2]
 8004e54:	4b47      	ldr	r3, [pc, #284]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004e56:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004e58:	4b47      	ldr	r3, [pc, #284]	@ (8004f78 <ESP_Upkeep+0x350>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004e5e:	e163      	b.n	8005128 <ESP_Upkeep+0x500>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004e60:	4b44      	ldr	r3, [pc, #272]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	1dfc      	adds	r4, r7, #7
 8004e66:	0018      	movs	r0, r3
 8004e68:	f7ff fc36 	bl	80046d8 <AT_Send>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004e70:	1dfb      	adds	r3, r7, #7
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d100      	bne.n	8004e7a <ESP_Upkeep+0x252>
 8004e78:	e158      	b.n	800512c <ESP_Upkeep+0x504>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004e7a:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004e80:	e154      	b.n	800512c <ESP_Upkeep+0x504>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004e82:	4b34      	ldr	r3, [pc, #208]	@ (8004f54 <ESP_Upkeep+0x32c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f004 fe30 	bl	8009aec <TimestampIsReached>
 8004e8c:	1e03      	subs	r3, r0, #0
 8004e8e:	d100      	bne.n	8004e92 <ESP_Upkeep+0x26a>
 8004e90:	e14e      	b.n	8005130 <ESP_Upkeep+0x508>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004e92:	4b39      	ldr	r3, [pc, #228]	@ (8004f78 <ESP_Upkeep+0x350>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	0018      	movs	r0, r3
 8004e98:	f7ff fb30 	bl	80044fc <DMA_ProcessBuffer>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	001a      	movs	r2, r3
 8004ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8004f98 <ESP_Upkeep+0x370>)
 8004ea2:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8004f98 <ESP_Upkeep+0x370>)
 8004ea6:	781a      	ldrb	r2, [r3, #0]
 8004ea8:	4b33      	ldr	r3, [pc, #204]	@ (8004f78 <ESP_Upkeep+0x350>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	1dbc      	adds	r4, r7, #6
 8004eae:	0019      	movs	r1, r3
 8004eb0:	0010      	movs	r0, r2
 8004eb2:	f7ff fbdb 	bl	800466c <ATCompare>
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004eba:	4b37      	ldr	r3, [pc, #220]	@ (8004f98 <ESP_Upkeep+0x370>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10f      	bne.n	8004ee2 <ESP_Upkeep+0x2ba>
          if(ATCommand == AT_SENDDATA){
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b0f      	cmp	r3, #15
 8004ec8:	d108      	bne.n	8004edc <ESP_Upkeep+0x2b4>
            ATCommand = AT_HTTPCPOST;
 8004eca:	4b2a      	ldr	r3, [pc, #168]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004ecc:	220e      	movs	r2, #14
 8004ece:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004ed0:	4b29      	ldr	r3, [pc, #164]	@ (8004f78 <ESP_Upkeep+0x350>)
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8004ed6:	4b25      	ldr	r3, [pc, #148]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8004edc:	4b18      	ldr	r3, [pc, #96]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004ede:	2204      	movs	r2, #4
 8004ee0:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f98 <ESP_Upkeep+0x370>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d106      	bne.n	8004ef8 <ESP_Upkeep+0x2d0>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004eea:	f005 f9db 	bl	800a2a4 <HAL_GetTick>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	330a      	adds	r3, #10
 8004ef2:	001a      	movs	r2, r3
 8004ef4:	4b17      	ldr	r3, [pc, #92]	@ (8004f54 <ESP_Upkeep+0x32c>)
 8004ef6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004ef8:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <ESP_Upkeep+0x370>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b06      	cmp	r3, #6
 8004efe:	d116      	bne.n	8004f2e <ESP_Upkeep+0x306>
          if(ATCommand != AT_SENDDATA){
 8004f00:	4b1c      	ldr	r3, [pc, #112]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b0f      	cmp	r3, #15
 8004f06:	d003      	beq.n	8004f10 <ESP_Upkeep+0x2e8>
            EspState = ESP_STATE_SEND;
 8004f08:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e00e      	b.n	8004f2e <ESP_Upkeep+0x306>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004f10:	4b18      	ldr	r3, [pc, #96]	@ (8004f74 <ESP_Upkeep+0x34c>)
 8004f12:	220e      	movs	r2, #14
 8004f14:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004f16:	4b15      	ldr	r3, [pc, #84]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	4b13      	ldr	r3, [pc, #76]	@ (8004f6c <ESP_Upkeep+0x344>)
 8004f20:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004f22:	4b15      	ldr	r3, [pc, #84]	@ (8004f78 <ESP_Upkeep+0x350>)
 8004f24:	2202      	movs	r2, #2
 8004f26:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004f28:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004f2e:	1dbb      	adds	r3, r7, #6
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d100      	bne.n	8004f38 <ESP_Upkeep+0x310>
 8004f36:	e0fb      	b.n	8005130 <ESP_Upkeep+0x508>
          EspState = ESP_STATE_NEXT_AT;
 8004f38:	4b01      	ldr	r3, [pc, #4]	@ (8004f40 <ESP_Upkeep+0x318>)
 8004f3a:	2205      	movs	r2, #5
 8004f3c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004f3e:	e0f7      	b.n	8005130 <ESP_Upkeep+0x508>
 8004f40:	20000021 	.word	0x20000021
 8004f44:	0801c068 	.word	0x0801c068
 8004f48:	200004ef 	.word	0x200004ef
 8004f4c:	50000800 	.word	0x50000800
 8004f50:	50001c00 	.word	0x50001c00
 8004f54:	20000928 	.word	0x20000928
 8004f58:	200003f0 	.word	0x200003f0
 8004f5c:	2000091c 	.word	0x2000091c
 8004f60:	200004f0 	.word	0x200004f0
 8004f64:	200004f1 	.word	0x200004f1
 8004f68:	20000004 	.word	0x20000004
 8004f6c:	20000926 	.word	0x20000926
 8004f70:	20000b33 	.word	0x20000b33
 8004f74:	20000b32 	.word	0x20000b32
 8004f78:	20000b31 	.word	0x20000b31
 8004f7c:	200004f3 	.word	0x200004f3
 8004f80:	20000014 	.word	0x20000014
 8004f84:	200004f4 	.word	0x200004f4
 8004f88:	20000010 	.word	0x20000010
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	200004f2 	.word	0x200004f2
 8004f94:	2000001c 	.word	0x2000001c
 8004f98:	20000023 	.word	0x20000023

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8005148 <ESP_Upkeep+0x520>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	4b68      	ldr	r3, [pc, #416]	@ (8005148 <ESP_Upkeep+0x520>)
 8004fa6:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004fa8:	4b67      	ldr	r3, [pc, #412]	@ (8005148 <ESP_Upkeep+0x520>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	001a      	movs	r2, r3
 8004fae:	4b67      	ldr	r3, [pc, #412]	@ (800514c <ESP_Upkeep+0x524>)
 8004fb0:	5c9a      	ldrb	r2, [r3, r2]
 8004fb2:	4b67      	ldr	r3, [pc, #412]	@ (8005150 <ESP_Upkeep+0x528>)
 8004fb4:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004fb6:	4b66      	ldr	r3, [pc, #408]	@ (8005150 <ESP_Upkeep+0x528>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d102      	bne.n	8004fc4 <ESP_Upkeep+0x39c>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004fbe:	4b65      	ldr	r3, [pc, #404]	@ (8005154 <ESP_Upkeep+0x52c>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004fc4:	4b62      	ldr	r3, [pc, #392]	@ (8005150 <ESP_Upkeep+0x528>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b0e      	cmp	r3, #14
 8004fca:	d102      	bne.n	8004fd2 <ESP_Upkeep+0x3aa>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004fcc:	4b61      	ldr	r3, [pc, #388]	@ (8005154 <ESP_Upkeep+0x52c>)
 8004fce:	2202      	movs	r2, #2
 8004fd0:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005150 <ESP_Upkeep+0x528>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b0e      	cmp	r3, #14
 8004fd8:	d006      	beq.n	8004fe8 <ESP_Upkeep+0x3c0>
 8004fda:	4b5d      	ldr	r3, [pc, #372]	@ (8005150 <ESP_Upkeep+0x528>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d002      	beq.n	8004fe8 <ESP_Upkeep+0x3c0>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8005154 <ESP_Upkeep+0x52c>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8005158 <ESP_Upkeep+0x530>)
 8004fea:	2204      	movs	r2, #4
 8004fec:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004fee:	4b58      	ldr	r3, [pc, #352]	@ (8005150 <ESP_Upkeep+0x528>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b11      	cmp	r3, #17
 8004ff4:	d000      	beq.n	8004ff8 <ESP_Upkeep+0x3d0>
 8004ff6:	e09d      	b.n	8005134 <ESP_Upkeep+0x50c>
        if(Mode == AT_MODE_SEND){
 8004ff8:	4b58      	ldr	r3, [pc, #352]	@ (800515c <ESP_Upkeep+0x534>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d10c      	bne.n	800501a <ESP_Upkeep+0x3f2>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8005000:	f005 f950 	bl	800a2a4 <HAL_GetTick>
 8005004:	0003      	movs	r3, r0
 8005006:	4a56      	ldr	r2, [pc, #344]	@ (8005160 <ESP_Upkeep+0x538>)
 8005008:	189a      	adds	r2, r3, r2
 800500a:	4b56      	ldr	r3, [pc, #344]	@ (8005164 <ESP_Upkeep+0x53c>)
 800500c:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 800500e:	f003 ffb1 	bl	8008f74 <ResetESPIndicator>
          EspState = ESP_STATE_DEINIT;
 8005012:	4b51      	ldr	r3, [pc, #324]	@ (8005158 <ESP_Upkeep+0x530>)
 8005014:	220d      	movs	r2, #13
 8005016:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005018:	e08c      	b.n	8005134 <ESP_Upkeep+0x50c>
          EspState = ESP_STATE_RESET;
 800501a:	4b4f      	ldr	r3, [pc, #316]	@ (8005158 <ESP_Upkeep+0x530>)
 800501c:	2209      	movs	r2, #9
 800501e:	701a      	strb	r2, [r3, #0]
    break;
 8005020:	e088      	b.n	8005134 <ESP_Upkeep+0x50c>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005022:	4b51      	ldr	r3, [pc, #324]	@ (8005168 <ESP_Upkeep+0x540>)
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005028:	4b50      	ldr	r3, [pc, #320]	@ (800516c <ESP_Upkeep+0x544>)
 800502a:	2200      	movs	r2, #0
 800502c:	2101      	movs	r1, #1
 800502e:	0018      	movs	r0, r3
 8005030:	f006 fcd7 	bl	800b9e2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005034:	2001      	movs	r0, #1
 8005036:	f005 f93f 	bl	800a2b8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800503a:	2380      	movs	r3, #128	@ 0x80
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	484c      	ldr	r0, [pc, #304]	@ (8005170 <ESP_Upkeep+0x548>)
 8005040:	2200      	movs	r2, #0
 8005042:	0019      	movs	r1, r3
 8005044:	f006 fccd 	bl	800b9e2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005048:	2001      	movs	r0, #1
 800504a:	f005 f935 	bl	800a2b8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800504e:	4b47      	ldr	r3, [pc, #284]	@ (800516c <ESP_Upkeep+0x544>)
 8005050:	2200      	movs	r2, #0
 8005052:	2102      	movs	r1, #2
 8005054:	0018      	movs	r0, r3
 8005056:	f006 fcc4 	bl	800b9e2 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 800505a:	4b3f      	ldr	r3, [pc, #252]	@ (8005158 <ESP_Upkeep+0x530>)
 800505c:	2209      	movs	r2, #9
 800505e:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005060:	2001      	movs	r0, #1
 8005062:	f005 f929 	bl	800a2b8 <HAL_Delay>
      break;
 8005066:	e068      	b.n	800513a <ESP_Upkeep+0x512>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005068:	4b3e      	ldr	r3, [pc, #248]	@ (8005164 <ESP_Upkeep+0x53c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	0018      	movs	r0, r3
 800506e:	f004 fd3d 	bl	8009aec <TimestampIsReached>
 8005072:	1e03      	subs	r3, r0, #0
 8005074:	d103      	bne.n	800507e <ESP_Upkeep+0x456>
 8005076:	4b3f      	ldr	r3, [pc, #252]	@ (8005174 <ESP_Upkeep+0x54c>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d05c      	beq.n	8005138 <ESP_Upkeep+0x510>
        if(Mode == AT_MODE_INIT){
 800507e:	4b37      	ldr	r3, [pc, #220]	@ (800515c <ESP_Upkeep+0x534>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d105      	bne.n	8005092 <ESP_Upkeep+0x46a>
          InitIsDone = true;
 8005086:	4b3c      	ldr	r3, [pc, #240]	@ (8005178 <ESP_Upkeep+0x550>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800508c:	4b32      	ldr	r3, [pc, #200]	@ (8005158 <ESP_Upkeep+0x530>)
 800508e:	220b      	movs	r2, #11
 8005090:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005092:	4b32      	ldr	r3, [pc, #200]	@ (800515c <ESP_Upkeep+0x534>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d108      	bne.n	80050ac <ESP_Upkeep+0x484>
          ConnectionMade = true;
 800509a:	4b38      	ldr	r3, [pc, #224]	@ (800517c <ESP_Upkeep+0x554>)
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
          beurs = true;
 80050a0:	4b37      	ldr	r3, [pc, #220]	@ (8005180 <ESP_Upkeep+0x558>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80050a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005158 <ESP_Upkeep+0x530>)
 80050a8:	220b      	movs	r2, #11
 80050aa:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 80050ac:	4b2b      	ldr	r3, [pc, #172]	@ (800515c <ESP_Upkeep+0x534>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d102      	bne.n	80050ba <ESP_Upkeep+0x492>
          EspState = ESP_STATE_INIT;
 80050b4:	4b28      	ldr	r3, [pc, #160]	@ (8005158 <ESP_Upkeep+0x530>)
 80050b6:	2202      	movs	r2, #2
 80050b8:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 80050ba:	4b28      	ldr	r3, [pc, #160]	@ (800515c <ESP_Upkeep+0x534>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d102      	bne.n	80050c8 <ESP_Upkeep+0x4a0>
          EspState = ESP_STATE_CONFIG;
 80050c2:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <ESP_Upkeep+0x530>)
 80050c4:	220e      	movs	r2, #14
 80050c6:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 80050c8:	4b24      	ldr	r3, [pc, #144]	@ (800515c <ESP_Upkeep+0x534>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d133      	bne.n	8005138 <ESP_Upkeep+0x510>
          EspState = ESP_STATE_MODE_SELECT;
 80050d0:	4b21      	ldr	r3, [pc, #132]	@ (8005158 <ESP_Upkeep+0x530>)
 80050d2:	220b      	movs	r2, #11
 80050d4:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 80050d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005184 <ESP_Upkeep+0x55c>)
 80050d8:	2201      	movs	r2, #1
 80050da:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 80050dc:	e02c      	b.n	8005138 <ESP_Upkeep+0x510>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 80050de:	4a2a      	ldr	r2, [pc, #168]	@ (8005188 <ESP_Upkeep+0x560>)
 80050e0:	4b2a      	ldr	r3, [pc, #168]	@ (800518c <ESP_Upkeep+0x564>)
 80050e2:	0019      	movs	r1, r3
 80050e4:	2003      	movs	r0, #3
 80050e6:	f004 fd57 	bl	8009b98 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 80050ea:	f011 ff75 	bl	8016fd8 <GetUsbRxPointer>
 80050ee:	0003      	movs	r3, r0
 80050f0:	0018      	movs	r0, r3
 80050f2:	f000 f8c3 	bl	800527c <Process_PC_Config>

      break;
 80050f6:	e020      	b.n	800513a <ESP_Upkeep+0x512>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80050f8:	4a25      	ldr	r2, [pc, #148]	@ (8005190 <ESP_Upkeep+0x568>)
 80050fa:	4b24      	ldr	r3, [pc, #144]	@ (800518c <ESP_Upkeep+0x564>)
 80050fc:	0019      	movs	r1, r3
 80050fe:	2003      	movs	r0, #3
 8005100:	f004 fd4a 	bl	8009b98 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005104:	4b14      	ldr	r3, [pc, #80]	@ (8005158 <ESP_Upkeep+0x530>)
 8005106:	2202      	movs	r2, #2
 8005108:	701a      	strb	r2, [r3, #0]
      break;
 800510a:	e016      	b.n	800513a <ESP_Upkeep+0x512>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 800510c:	4a21      	ldr	r2, [pc, #132]	@ (8005194 <ESP_Upkeep+0x56c>)
 800510e:	4b1f      	ldr	r3, [pc, #124]	@ (800518c <ESP_Upkeep+0x564>)
 8005110:	0019      	movs	r1, r3
 8005112:	2003      	movs	r0, #3
 8005114:	f004 fd40 	bl	8009b98 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005118:	4b0f      	ldr	r3, [pc, #60]	@ (8005158 <ESP_Upkeep+0x530>)
 800511a:	2207      	movs	r2, #7
 800511c:	701a      	strb	r2, [r3, #0]
      break;
 800511e:	e00c      	b.n	800513a <ESP_Upkeep+0x512>
      break;
 8005120:	46c0      	nop			@ (mov r8, r8)
 8005122:	e00a      	b.n	800513a <ESP_Upkeep+0x512>
      break;
 8005124:	46c0      	nop			@ (mov r8, r8)
 8005126:	e008      	b.n	800513a <ESP_Upkeep+0x512>
    break;
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	e006      	b.n	800513a <ESP_Upkeep+0x512>
         break;
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	e004      	b.n	800513a <ESP_Upkeep+0x512>
      break;
 8005130:	46c0      	nop			@ (mov r8, r8)
 8005132:	e002      	b.n	800513a <ESP_Upkeep+0x512>
    break;
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	e000      	b.n	800513a <ESP_Upkeep+0x512>
      break;
 8005138:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 800513a:	4b07      	ldr	r3, [pc, #28]	@ (8005158 <ESP_Upkeep+0x530>)
 800513c:	781b      	ldrb	r3, [r3, #0]
}
 800513e:	0018      	movs	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	b003      	add	sp, #12
 8005144:	bd90      	pop	{r4, r7, pc}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	20000926 	.word	0x20000926
 800514c:	2000091c 	.word	0x2000091c
 8005150:	20000b32 	.word	0x20000b32
 8005154:	20000b31 	.word	0x20000b31
 8005158:	20000021 	.word	0x20000021
 800515c:	20000b33 	.word	0x20000b33
 8005160:	000493e0 	.word	0x000493e0
 8005164:	20000928 	.word	0x20000928
 8005168:	200004ef 	.word	0x200004ef
 800516c:	50001c00 	.word	0x50001c00
 8005170:	50000800 	.word	0x50000800
 8005174:	200004f2 	.word	0x200004f2
 8005178:	200004f0 	.word	0x200004f0
 800517c:	200004f3 	.word	0x200004f3
 8005180:	200004f5 	.word	0x200004f5
 8005184:	200004f4 	.word	0x200004f4
 8005188:	0801b898 	.word	0x0801b898
 800518c:	0801b348 	.word	0x0801b348
 8005190:	0801b8b0 	.word	0x0801b8b0
 8005194:	0801b8c4 	.word	0x0801b8c4

08005198 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80051a0:	4b09      	ldr	r3, [pc, #36]	@ (80051c8 <I2CSensors_Init+0x30>)
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 80051a6:	4a09      	ldr	r2, [pc, #36]	@ (80051cc <I2CSensors_Init+0x34>)
 80051a8:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <I2CSensors_Init+0x38>)
 80051aa:	0011      	movs	r1, r2
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 fe7f 	bl	8005eb0 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 80051b2:	4a06      	ldr	r2, [pc, #24]	@ (80051cc <I2CSensors_Init+0x34>)
 80051b4:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <I2CSensors_Init+0x38>)
 80051b6:	0011      	movs	r1, r2
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 fce9 	bl	8005b90 <Gas_Init>
}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b002      	add	sp, #8
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	20000be4 	.word	0x20000be4
 80051cc:	08005229 	.word	0x08005229
 80051d0:	080051d5 	.word	0x080051d5

080051d4 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80051d4:	b5b0      	push	{r4, r5, r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6039      	str	r1, [r7, #0]
 80051dc:	0011      	movs	r1, r2
 80051de:	1dfb      	adds	r3, r7, #7
 80051e0:	1c02      	adds	r2, r0, #0
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	1dbb      	adds	r3, r7, #6
 80051e6:	1c0a      	adds	r2, r1, #0
 80051e8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80051ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005224 <ReadI2C+0x50>)
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	1dfb      	adds	r3, r7, #7
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	18db      	adds	r3, r3, r3
 80051f6:	b299      	uxth	r1, r3
 80051f8:	1dbb      	adds	r3, r7, #6
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	250f      	movs	r5, #15
 8005200:	197c      	adds	r4, r7, r5
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	f006 fda6 	bl	800bd54 <HAL_I2C_Master_Receive_DMA>
 8005208:	0003      	movs	r3, r0
 800520a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800520c:	197b      	adds	r3, r7, r5
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <ReadI2C+0x44>
        return false;
 8005214:	2300      	movs	r3, #0
 8005216:	e000      	b.n	800521a <ReadI2C+0x46>
    }
    return true;
 8005218:	2301      	movs	r3, #1
}
 800521a:	0018      	movs	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	b004      	add	sp, #16
 8005220:	bdb0      	pop	{r4, r5, r7, pc}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	20000be4 	.word	0x20000be4

08005228 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005228:	b5b0      	push	{r4, r5, r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6039      	str	r1, [r7, #0]
 8005230:	0011      	movs	r1, r2
 8005232:	1dfb      	adds	r3, r7, #7
 8005234:	1c02      	adds	r2, r0, #0
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	1dbb      	adds	r3, r7, #6
 800523a:	1c0a      	adds	r2, r1, #0
 800523c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800523e:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <WriteI2C+0x50>)
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	1dfb      	adds	r3, r7, #7
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	18db      	adds	r3, r3, r3
 800524a:	b299      	uxth	r1, r3
 800524c:	1dbb      	adds	r3, r7, #6
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	250f      	movs	r5, #15
 8005254:	197c      	adds	r4, r7, r5
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	f006 fc76 	bl	800bb48 <HAL_I2C_Master_Transmit_DMA>
 800525c:	0003      	movs	r3, r0
 800525e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005260:	197b      	adds	r3, r7, r5
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <WriteI2C+0x44>
        return false;
 8005268:	2300      	movs	r3, #0
 800526a:	e000      	b.n	800526e <WriteI2C+0x46>
    }
    return true;
 800526c:	2301      	movs	r3, #1
}
 800526e:	0018      	movs	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	b004      	add	sp, #16
 8005274:	bdb0      	pop	{r4, r5, r7, pc}
 8005276:	46c0      	nop			@ (mov r8, r8)
 8005278:	20000be4 	.word	0x20000be4

0800527c <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b0c3      	sub	sp, #268	@ 0x10c
 8005280:	af3e      	add	r7, sp, #248	@ 0xf8
 8005282:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005284:	f011 fec8 	bl	8017018 <GetUsbRxDataSize>
 8005288:	0003      	movs	r3, r0
 800528a:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b05      	cmp	r3, #5
 8005290:	d971      	bls.n	8005376 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2123      	movs	r1, #35	@ 0x23
 8005296:	0018      	movs	r0, r3
 8005298:	f013 f946 	bl	8018528 <strchr>
 800529c:	0003      	movs	r3, r0
 800529e:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d065      	beq.n	8005372 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	785a      	ldrb	r2, [r3, #1]
 80052aa:	4b34      	ldr	r3, [pc, #208]	@ (800537c <Process_PC_Config+0x100>)
 80052ac:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	789a      	ldrb	r2, [r3, #2]
 80052b2:	4b32      	ldr	r3, [pc, #200]	@ (800537c <Process_PC_Config+0x100>)
 80052b4:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80052b6:	4b31      	ldr	r3, [pc, #196]	@ (800537c <Process_PC_Config+0x100>)
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	3305      	adds	r3, #5
 80052bc:	001a      	movs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d351      	bcc.n	8005368 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	1cd9      	adds	r1, r3, #3
 80052c8:	4b2c      	ldr	r3, [pc, #176]	@ (800537c <Process_PC_Config+0x100>)
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	001a      	movs	r2, r3
 80052ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005380 <Process_PC_Config+0x104>)
 80052d0:	0018      	movs	r0, r3
 80052d2:	f013 f9eb 	bl	80186ac <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80052d6:	4b29      	ldr	r3, [pc, #164]	@ (800537c <Process_PC_Config+0x100>)
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	3303      	adds	r3, #3
 80052dc:	001a      	movs	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	b21a      	sxth	r2, r3
 80052e8:	4b24      	ldr	r3, [pc, #144]	@ (800537c <Process_PC_Config+0x100>)
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	3304      	adds	r3, #4
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	18cb      	adds	r3, r1, r3
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	b21b      	sxth	r3, r3
 80052f6:	4313      	orrs	r3, r2
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	b299      	uxth	r1, r3
 80052fc:	4a1f      	ldr	r2, [pc, #124]	@ (800537c <Process_PC_Config+0x100>)
 80052fe:	2381      	movs	r3, #129	@ 0x81
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005304:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <Process_PC_Config+0x100>)
 8005306:	2381      	movs	r3, #129	@ 0x81
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	5ad4      	ldrh	r4, [r2, r3]
 800530c:	4b1b      	ldr	r3, [pc, #108]	@ (800537c <Process_PC_Config+0x100>)
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	3303      	adds	r3, #3
 8005312:	b29a      	uxth	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f000 f975 	bl	8005608 <CRC16_ARC>
 800531e:	0003      	movs	r3, r0
 8005320:	429c      	cmp	r4, r3
 8005322:	d007      	beq.n	8005334 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005324:	4b15      	ldr	r3, [pc, #84]	@ (800537c <Process_PC_Config+0x100>)
 8005326:	785a      	ldrb	r2, [r3, #1]
 8005328:	4b15      	ldr	r3, [pc, #84]	@ (8005380 <Process_PC_Config+0x104>)
 800532a:	0019      	movs	r1, r3
 800532c:	2001      	movs	r0, #1
 800532e:	f000 f919 	bl	8005564 <Create_Message>
 8005332:	e016      	b.n	8005362 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005334:	4c11      	ldr	r4, [pc, #68]	@ (800537c <Process_PC_Config+0x100>)
 8005336:	466b      	mov	r3, sp
 8005338:	0018      	movs	r0, r3
 800533a:	0023      	movs	r3, r4
 800533c:	3310      	adds	r3, #16
 800533e:	22f4      	movs	r2, #244	@ 0xf4
 8005340:	0019      	movs	r1, r3
 8005342:	f013 f9b3 	bl	80186ac <memcpy>
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	6861      	ldr	r1, [r4, #4]
 800534a:	68a2      	ldr	r2, [r4, #8]
 800534c:	68e3      	ldr	r3, [r4, #12]
 800534e:	f000 f819 	bl	8005384 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <Process_PC_Config+0x100>)
 8005354:	7818      	ldrb	r0, [r3, #0]
 8005356:	4b09      	ldr	r3, [pc, #36]	@ (800537c <Process_PC_Config+0x100>)
 8005358:	785a      	ldrb	r2, [r3, #1]
 800535a:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <Process_PC_Config+0x104>)
 800535c:	0019      	movs	r1, r3
 800535e:	f000 f901 	bl	8005564 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005362:	f011 fe41 	bl	8016fe8 <ResetUsbRxDataSize>
                return;
 8005366:	e006      	b.n	8005376 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	0018      	movs	r0, r3
 800536c:	f011 fe5e 	bl	801702c <GetUsbRxNextChunk>
 8005370:	e001      	b.n	8005376 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005372:	f011 fe39 	bl	8016fe8 <ResetUsbRxDataSize>
        }
    }
}
 8005376:	46bd      	mov	sp, r7
 8005378:	b005      	add	sp, #20
 800537a:	bd90      	pop	{r4, r7, pc}
 800537c:	20000be8 	.word	0x20000be8
 8005380:	20000bea 	.word	0x20000bea

08005384 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005384:	b084      	sub	sp, #16
 8005386:	b5b0      	push	{r4, r5, r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	2518      	movs	r5, #24
 800538e:	197c      	adds	r4, r7, r5
 8005390:	6020      	str	r0, [r4, #0]
 8005392:	6061      	str	r1, [r4, #4]
 8005394:	60a2      	str	r2, [r4, #8]
 8005396:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005398:	197b      	adds	r3, r7, r5
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2bfe      	cmp	r3, #254	@ 0xfe
 800539e:	d100      	bne.n	80053a2 <ProcessCmd+0x1e>
 80053a0:	e09c      	b.n	80054dc <ProcessCmd+0x158>
 80053a2:	dd00      	ble.n	80053a6 <ProcessCmd+0x22>
 80053a4:	e0bc      	b.n	8005520 <ProcessCmd+0x19c>
 80053a6:	2b0c      	cmp	r3, #12
 80053a8:	dc0a      	bgt.n	80053c0 <ProcessCmd+0x3c>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da00      	bge.n	80053b0 <ProcessCmd+0x2c>
 80053ae:	e0b7      	b.n	8005520 <ProcessCmd+0x19c>
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d900      	bls.n	80053b6 <ProcessCmd+0x32>
 80053b4:	e0b4      	b.n	8005520 <ProcessCmd+0x19c>
 80053b6:	009a      	lsls	r2, r3, #2
 80053b8:	4b5d      	ldr	r3, [pc, #372]	@ (8005530 <ProcessCmd+0x1ac>)
 80053ba:	18d3      	adds	r3, r2, r3
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	469f      	mov	pc, r3
 80053c0:	2bfd      	cmp	r3, #253	@ 0xfd
 80053c2:	d100      	bne.n	80053c6 <ProcessCmd+0x42>
 80053c4:	e084      	b.n	80054d0 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 80053c6:	e0ab      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80053c8:	2118      	movs	r1, #24
 80053ca:	187b      	adds	r3, r7, r1
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	001a      	movs	r2, r3
 80053d0:	187b      	adds	r3, r7, r1
 80053d2:	1c99      	adds	r1, r3, #2
 80053d4:	4857      	ldr	r0, [pc, #348]	@ (8005534 <ProcessCmd+0x1b0>)
 80053d6:	230c      	movs	r3, #12
 80053d8:	f7fe f8f0 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80053dc:	e0a0      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80053de:	2118      	movs	r1, #24
 80053e0:	187b      	adds	r3, r7, r1
 80053e2:	785b      	ldrb	r3, [r3, #1]
 80053e4:	001a      	movs	r2, r3
 80053e6:	187b      	adds	r3, r7, r1
 80053e8:	1c99      	adds	r1, r3, #2
 80053ea:	4853      	ldr	r0, [pc, #332]	@ (8005538 <ProcessCmd+0x1b4>)
 80053ec:	230c      	movs	r3, #12
 80053ee:	f7fe f8e5 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80053f2:	e095      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80053f4:	2118      	movs	r1, #24
 80053f6:	187b      	adds	r3, r7, r1
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	001a      	movs	r2, r3
 80053fc:	187b      	adds	r3, r7, r1
 80053fe:	1c99      	adds	r1, r3, #2
 8005400:	484e      	ldr	r0, [pc, #312]	@ (800553c <ProcessCmd+0x1b8>)
 8005402:	230c      	movs	r3, #12
 8005404:	f7fe f8da 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005408:	e08a      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800540a:	2118      	movs	r1, #24
 800540c:	187b      	adds	r3, r7, r1
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	001a      	movs	r2, r3
 8005412:	187b      	adds	r3, r7, r1
 8005414:	1c99      	adds	r1, r3, #2
 8005416:	484a      	ldr	r0, [pc, #296]	@ (8005540 <ProcessCmd+0x1bc>)
 8005418:	230c      	movs	r3, #12
 800541a:	f7fe f8cf 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800541e:	e07f      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005420:	2118      	movs	r1, #24
 8005422:	187b      	adds	r3, r7, r1
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	001a      	movs	r2, r3
 8005428:	187b      	adds	r3, r7, r1
 800542a:	1c99      	adds	r1, r3, #2
 800542c:	4845      	ldr	r0, [pc, #276]	@ (8005544 <ProcessCmd+0x1c0>)
 800542e:	230c      	movs	r3, #12
 8005430:	f7fe f8c4 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005434:	e074      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005436:	2118      	movs	r1, #24
 8005438:	187b      	adds	r3, r7, r1
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	001a      	movs	r2, r3
 800543e:	187b      	adds	r3, r7, r1
 8005440:	1c99      	adds	r1, r3, #2
 8005442:	4841      	ldr	r0, [pc, #260]	@ (8005548 <ProcessCmd+0x1c4>)
 8005444:	230c      	movs	r3, #12
 8005446:	f7fe f8b9 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800544a:	e069      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800544c:	2118      	movs	r1, #24
 800544e:	187b      	adds	r3, r7, r1
 8005450:	785b      	ldrb	r3, [r3, #1]
 8005452:	001a      	movs	r2, r3
 8005454:	187b      	adds	r3, r7, r1
 8005456:	1c99      	adds	r1, r3, #2
 8005458:	483c      	ldr	r0, [pc, #240]	@ (800554c <ProcessCmd+0x1c8>)
 800545a:	230c      	movs	r3, #12
 800545c:	f7fe f8ae 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005460:	e05e      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005462:	2118      	movs	r1, #24
 8005464:	187b      	adds	r3, r7, r1
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	001a      	movs	r2, r3
 800546a:	187b      	adds	r3, r7, r1
 800546c:	1c99      	adds	r1, r3, #2
 800546e:	4838      	ldr	r0, [pc, #224]	@ (8005550 <ProcessCmd+0x1cc>)
 8005470:	231e      	movs	r3, #30
 8005472:	f7fe f8a3 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005476:	e053      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005478:	2118      	movs	r1, #24
 800547a:	187b      	adds	r3, r7, r1
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	001a      	movs	r2, r3
 8005480:	187b      	adds	r3, r7, r1
 8005482:	1c99      	adds	r1, r3, #2
 8005484:	4833      	ldr	r0, [pc, #204]	@ (8005554 <ProcessCmd+0x1d0>)
 8005486:	230c      	movs	r3, #12
 8005488:	f7fe f898 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800548c:	e048      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800548e:	2118      	movs	r1, #24
 8005490:	187b      	adds	r3, r7, r1
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	001a      	movs	r2, r3
 8005496:	187b      	adds	r3, r7, r1
 8005498:	1c99      	adds	r1, r3, #2
 800549a:	482f      	ldr	r0, [pc, #188]	@ (8005558 <ProcessCmd+0x1d4>)
 800549c:	230c      	movs	r3, #12
 800549e:	f7fe f88d 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054a2:	e03d      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054a4:	2118      	movs	r1, #24
 80054a6:	187b      	adds	r3, r7, r1
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	001a      	movs	r2, r3
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	1c99      	adds	r1, r3, #2
 80054b0:	482a      	ldr	r0, [pc, #168]	@ (800555c <ProcessCmd+0x1d8>)
 80054b2:	230c      	movs	r3, #12
 80054b4:	f7fe f882 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054b8:	e032      	b.n	8005520 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80054ba:	2118      	movs	r1, #24
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	785b      	ldrb	r3, [r3, #1]
 80054c0:	001a      	movs	r2, r3
 80054c2:	187b      	adds	r3, r7, r1
 80054c4:	1c99      	adds	r1, r3, #2
 80054c6:	4826      	ldr	r0, [pc, #152]	@ (8005560 <ProcessCmd+0x1dc>)
 80054c8:	230c      	movs	r3, #12
 80054ca:	f7fe f877 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80054ce:	e027      	b.n	8005520 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80054d0:	4b18      	ldr	r3, [pc, #96]	@ (8005534 <ProcessCmd+0x1b0>)
 80054d2:	21ba      	movs	r1, #186	@ 0xba
 80054d4:	0018      	movs	r0, r3
 80054d6:	f7fe f8b7 	bl	8003648 <ClearEEprom>
        break;
 80054da:	e021      	b.n	8005520 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80054dc:	2118      	movs	r1, #24
 80054de:	187b      	adds	r3, r7, r1
 80054e0:	789b      	ldrb	r3, [r3, #2]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	b21a      	sxth	r2, r3
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	78db      	ldrb	r3, [r3, #3]
 80054ea:	b21b      	sxth	r3, r3
 80054ec:	4313      	orrs	r3, r2
 80054ee:	b21a      	sxth	r2, r3
 80054f0:	1dbb      	adds	r3, r7, #6
 80054f2:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80054f4:	1dbb      	adds	r3, r7, #6
 80054f6:	881a      	ldrh	r2, [r3, #0]
 80054f8:	23c0      	movs	r3, #192	@ 0xc0
 80054fa:	015b      	lsls	r3, r3, #5
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d207      	bcs.n	8005510 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005500:	1dbb      	adds	r3, r7, #6
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	4a0b      	ldr	r2, [pc, #44]	@ (8005534 <ProcessCmd+0x1b0>)
 8005506:	0019      	movs	r1, r3
 8005508:	0010      	movs	r0, r2
 800550a:	f7fe f89d 	bl	8003648 <ClearEEprom>
            break;
 800550e:	e006      	b.n	800551e <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005510:	23c0      	movs	r3, #192	@ 0xc0
 8005512:	015b      	lsls	r3, r3, #5
 8005514:	4a07      	ldr	r2, [pc, #28]	@ (8005534 <ProcessCmd+0x1b0>)
 8005516:	0019      	movs	r1, r3
 8005518:	0010      	movs	r0, r2
 800551a:	f7fe f895 	bl	8003648 <ClearEEprom>
            break;
 800551e:	46c0      	nop			@ (mov r8, r8)
}
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bcb0      	pop	{r4, r5, r7}
 8005528:	bc08      	pop	{r3}
 800552a:	b004      	add	sp, #16
 800552c:	4718      	bx	r3
 800552e:	46c0      	nop			@ (mov r8, r8)
 8005530:	0801c0a4 	.word	0x0801c0a4
 8005534:	08080000 	.word	0x08080000
 8005538:	0808000c 	.word	0x0808000c
 800553c:	08080018 	.word	0x08080018
 8005540:	08080024 	.word	0x08080024
 8005544:	08080030 	.word	0x08080030
 8005548:	0808003c 	.word	0x0808003c
 800554c:	08080048 	.word	0x08080048
 8005550:	08080090 	.word	0x08080090
 8005554:	08080078 	.word	0x08080078
 8005558:	0808006c 	.word	0x0808006c
 800555c:	08080060 	.word	0x08080060
 8005560:	08080054 	.word	0x08080054

08005564 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6039      	str	r1, [r7, #0]
 800556c:	0011      	movs	r1, r2
 800556e:	1dfb      	adds	r3, r7, #7
 8005570:	1c02      	adds	r2, r0, #0
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	1dbb      	adds	r3, r7, #6
 8005576:	1c0a      	adds	r2, r1, #0
 8005578:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 800557a:	2223      	movs	r2, #35	@ 0x23
 800557c:	4b20      	ldr	r3, [pc, #128]	@ (8005600 <Create_Message+0x9c>)
 800557e:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005580:	4b1f      	ldr	r3, [pc, #124]	@ (8005600 <Create_Message+0x9c>)
 8005582:	1dfa      	adds	r2, r7, #7
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005588:	4b1d      	ldr	r3, [pc, #116]	@ (8005600 <Create_Message+0x9c>)
 800558a:	1dba      	adds	r2, r7, #6
 800558c:	7812      	ldrb	r2, [r2, #0]
 800558e:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005590:	1dbb      	adds	r3, r7, #6
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	6839      	ldr	r1, [r7, #0]
 8005596:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <Create_Message+0xa0>)
 8005598:	0018      	movs	r0, r3
 800559a:	f013 f887 	bl	80186ac <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800559e:	1dbb      	adds	r3, r7, #6
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	250e      	movs	r5, #14
 80055a6:	197b      	adds	r3, r7, r5
 80055a8:	3203      	adds	r2, #3
 80055aa:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80055ac:	260c      	movs	r6, #12
 80055ae:	19bc      	adds	r4, r7, r6
 80055b0:	197b      	adds	r3, r7, r5
 80055b2:	881a      	ldrh	r2, [r3, #0]
 80055b4:	4b12      	ldr	r3, [pc, #72]	@ (8005600 <Create_Message+0x9c>)
 80055b6:	0011      	movs	r1, r2
 80055b8:	0018      	movs	r0, r3
 80055ba:	f000 f825 	bl	8005608 <CRC16_ARC>
 80055be:	0003      	movs	r3, r0
 80055c0:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80055c2:	0030      	movs	r0, r6
 80055c4:	183b      	adds	r3, r7, r0
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	0a1b      	lsrs	r3, r3, #8
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	197b      	adds	r3, r7, r5
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b2d1      	uxtb	r1, r2
 80055d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005600 <Create_Message+0x9c>)
 80055d4:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80055d6:	197b      	adds	r3, r7, r5
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	183a      	adds	r2, r7, r0
 80055de:	8812      	ldrh	r2, [r2, #0]
 80055e0:	b2d1      	uxtb	r1, r2
 80055e2:	4a07      	ldr	r2, [pc, #28]	@ (8005600 <Create_Message+0x9c>)
 80055e4:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80055e6:	197b      	adds	r3, r7, r5
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	3302      	adds	r3, #2
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	4b04      	ldr	r3, [pc, #16]	@ (8005600 <Create_Message+0x9c>)
 80055f0:	0011      	movs	r1, r2
 80055f2:	0018      	movs	r0, r3
 80055f4:	f011 fcb6 	bl	8016f64 <CDC_Transmit_FS>
}
 80055f8:	46c0      	nop			@ (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b005      	add	sp, #20
 80055fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005600:	20000cec 	.word	0x20000cec
 8005604:	20000cef 	.word	0x20000cef

08005608 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	000a      	movs	r2, r1
 8005612:	1cbb      	adds	r3, r7, #2
 8005614:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005616:	2316      	movs	r3, #22
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	2200      	movs	r2, #0
 800561c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e02e      	b.n	8005682 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	18d3      	adds	r3, r2, r3
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	0019      	movs	r1, r3
 800562e:	2216      	movs	r2, #22
 8005630:	18bb      	adds	r3, r7, r2
 8005632:	18ba      	adds	r2, r7, r2
 8005634:	8812      	ldrh	r2, [r2, #0]
 8005636:	404a      	eors	r2, r1
 8005638:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	e01a      	b.n	8005676 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005640:	2116      	movs	r1, #22
 8005642:	187b      	adds	r3, r7, r1
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	2201      	movs	r2, #1
 8005648:	4013      	ands	r3, r2
 800564a:	d00b      	beq.n	8005664 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 800564c:	187b      	adds	r3, r7, r1
 800564e:	187a      	adds	r2, r7, r1
 8005650:	8812      	ldrh	r2, [r2, #0]
 8005652:	0852      	lsrs	r2, r2, #1
 8005654:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005656:	187b      	adds	r3, r7, r1
 8005658:	187a      	adds	r2, r7, r1
 800565a:	8812      	ldrh	r2, [r2, #0]
 800565c:	490f      	ldr	r1, [pc, #60]	@ (800569c <CRC16_ARC+0x94>)
 800565e:	404a      	eors	r2, r1
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	e005      	b.n	8005670 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005664:	2216      	movs	r2, #22
 8005666:	18bb      	adds	r3, r7, r2
 8005668:	18ba      	adds	r2, r7, r2
 800566a:	8812      	ldrh	r2, [r2, #0]
 800566c:	0852      	lsrs	r2, r2, #1
 800566e:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3301      	adds	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b07      	cmp	r3, #7
 800567a:	dde1      	ble.n	8005640 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	3301      	adds	r3, #1
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	1cbb      	adds	r3, r7, #2
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	dbcb      	blt.n	8005624 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 800568c:	2316      	movs	r3, #22
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	881b      	ldrh	r3, [r3, #0]
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	b006      	add	sp, #24
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			@ (mov r8, r8)
 800569c:	ffffa001 	.word	0xffffa001

080056a0 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 80056a4:	4b26      	ldr	r3, [pc, #152]	@ (8005740 <ReadBatteryVoltage+0xa0>)
 80056a6:	4a27      	ldr	r2, [pc, #156]	@ (8005744 <ReadBatteryVoltage+0xa4>)
 80056a8:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80056aa:	4b25      	ldr	r3, [pc, #148]	@ (8005740 <ReadBatteryVoltage+0xa0>)
 80056ac:	2280      	movs	r2, #128	@ 0x80
 80056ae:	0152      	lsls	r2, r2, #5
 80056b0:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80056b2:	4a23      	ldr	r2, [pc, #140]	@ (8005740 <ReadBatteryVoltage+0xa0>)
 80056b4:	4b24      	ldr	r3, [pc, #144]	@ (8005748 <ReadBatteryVoltage+0xa8>)
 80056b6:	0011      	movs	r1, r2
 80056b8:	0018      	movs	r0, r3
 80056ba:	f005 f8af 	bl	800a81c <HAL_ADC_ConfigChannel>
 80056be:	1e03      	subs	r3, r0, #0
 80056c0:	d001      	beq.n	80056c6 <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 80056c2:	f000 ffc5 	bl	8006650 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 80056c6:	4b20      	ldr	r3, [pc, #128]	@ (8005748 <ReadBatteryVoltage+0xa8>)
 80056c8:	0018      	movs	r0, r3
 80056ca:	f004 ffab 	bl	800a624 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 80056ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005748 <ReadBatteryVoltage+0xa8>)
 80056d0:	2101      	movs	r1, #1
 80056d2:	0018      	movs	r0, r3
 80056d4:	f004 fffa 	bl	800a6cc <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 80056d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <ReadBatteryVoltage+0xa8>)
 80056da:	0018      	movs	r0, r3
 80056dc:	f005 f892 	bl	800a804 <HAL_ADC_GetValue>
 80056e0:	0002      	movs	r2, r0
 80056e2:	4b1a      	ldr	r3, [pc, #104]	@ (800574c <ReadBatteryVoltage+0xac>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4353      	muls	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4919      	ldr	r1, [pc, #100]	@ (8005750 <ReadBatteryVoltage+0xb0>)
 80056ec:	0018      	movs	r0, r3
 80056ee:	f7fa fd27 	bl	8000140 <__udivsi3>
 80056f2:	0003      	movs	r3, r0
 80056f4:	001a      	movs	r2, r3
 80056f6:	4b17      	ldr	r3, [pc, #92]	@ (8005754 <ReadBatteryVoltage+0xb4>)
 80056f8:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 80056fa:	4b16      	ldr	r3, [pc, #88]	@ (8005754 <ReadBatteryVoltage+0xb4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	0018      	movs	r0, r3
 8005700:	f7fb ff30 	bl	8001564 <__aeabi_ui2f>
 8005704:	1c03      	adds	r3, r0, #0
 8005706:	4914      	ldr	r1, [pc, #80]	@ (8005758 <ReadBatteryVoltage+0xb8>)
 8005708:	1c18      	adds	r0, r3, #0
 800570a:	f7fb f9e1 	bl	8000ad0 <__aeabi_fdiv>
 800570e:	1c03      	adds	r3, r0, #0
 8005710:	1c1a      	adds	r2, r3, #0
 8005712:	4b12      	ldr	r3, [pc, #72]	@ (800575c <ReadBatteryVoltage+0xbc>)
 8005714:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005716:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <ReadBatteryVoltage+0xa0>)
 8005718:	4a0a      	ldr	r2, [pc, #40]	@ (8005744 <ReadBatteryVoltage+0xa4>)
 800571a:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 800571c:	4b08      	ldr	r3, [pc, #32]	@ (8005740 <ReadBatteryVoltage+0xa0>)
 800571e:	4a10      	ldr	r2, [pc, #64]	@ (8005760 <ReadBatteryVoltage+0xc0>)
 8005720:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005722:	4a07      	ldr	r2, [pc, #28]	@ (8005740 <ReadBatteryVoltage+0xa0>)
 8005724:	4b08      	ldr	r3, [pc, #32]	@ (8005748 <ReadBatteryVoltage+0xa8>)
 8005726:	0011      	movs	r1, r2
 8005728:	0018      	movs	r0, r3
 800572a:	f005 f877 	bl	800a81c <HAL_ADC_ConfigChannel>
 800572e:	1e03      	subs	r3, r0, #0
 8005730:	d001      	beq.n	8005736 <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 8005732:	f000 ff8d 	bl	8006650 <Error_Handler>
   }
   return trueValue;
 8005736:	4b09      	ldr	r3, [pc, #36]	@ (800575c <ReadBatteryVoltage+0xbc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 }
 800573a:	1c18      	adds	r0, r3, #0
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000df4 	.word	0x20000df4
 8005744:	38004000 	.word	0x38004000
 8005748:	20000e14 	.word	0x20000e14
 800574c:	20000024 	.word	0x20000024
 8005750:	00000fff 	.word	0x00000fff
 8005754:	20000dfc 	.word	0x20000dfc
 8005758:	447a0000 	.word	0x447a0000
 800575c:	20000e00 	.word	0x20000e00
 8005760:	00001001 	.word	0x00001001

08005764 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005768:	4b27      	ldr	r3, [pc, #156]	@ (8005808 <ReadSolarVoltage+0xa4>)
 800576a:	4a28      	ldr	r2, [pc, #160]	@ (800580c <ReadSolarVoltage+0xa8>)
 800576c:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800576e:	4b26      	ldr	r3, [pc, #152]	@ (8005808 <ReadSolarVoltage+0xa4>)
 8005770:	2280      	movs	r2, #128	@ 0x80
 8005772:	0152      	lsls	r2, r2, #5
 8005774:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005776:	4a24      	ldr	r2, [pc, #144]	@ (8005808 <ReadSolarVoltage+0xa4>)
 8005778:	4b25      	ldr	r3, [pc, #148]	@ (8005810 <ReadSolarVoltage+0xac>)
 800577a:	0011      	movs	r1, r2
 800577c:	0018      	movs	r0, r3
 800577e:	f005 f84d 	bl	800a81c <HAL_ADC_ConfigChannel>
 8005782:	1e03      	subs	r3, r0, #0
 8005784:	d001      	beq.n	800578a <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005786:	f000 ff63 	bl	8006650 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 800578a:	4b21      	ldr	r3, [pc, #132]	@ (8005810 <ReadSolarVoltage+0xac>)
 800578c:	0018      	movs	r0, r3
 800578e:	f004 ff49 	bl	800a624 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005792:	4b1f      	ldr	r3, [pc, #124]	@ (8005810 <ReadSolarVoltage+0xac>)
 8005794:	2101      	movs	r1, #1
 8005796:	0018      	movs	r0, r3
 8005798:	f004 ff98 	bl	800a6cc <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 800579c:	4b1c      	ldr	r3, [pc, #112]	@ (8005810 <ReadSolarVoltage+0xac>)
 800579e:	0018      	movs	r0, r3
 80057a0:	f005 f830 	bl	800a804 <HAL_ADC_GetValue>
 80057a4:	0002      	movs	r2, r0
 80057a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005814 <ReadSolarVoltage+0xb0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	435a      	muls	r2, r3
 80057ac:	0013      	movs	r3, r2
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	189b      	adds	r3, r3, r2
 80057b2:	4919      	ldr	r1, [pc, #100]	@ (8005818 <ReadSolarVoltage+0xb4>)
 80057b4:	0018      	movs	r0, r3
 80057b6:	f7fa fcc3 	bl	8000140 <__udivsi3>
 80057ba:	0003      	movs	r3, r0
 80057bc:	001a      	movs	r2, r3
 80057be:	4b17      	ldr	r3, [pc, #92]	@ (800581c <ReadSolarVoltage+0xb8>)
 80057c0:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 80057c2:	4b16      	ldr	r3, [pc, #88]	@ (800581c <ReadSolarVoltage+0xb8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	0018      	movs	r0, r3
 80057c8:	f7fb fecc 	bl	8001564 <__aeabi_ui2f>
 80057cc:	1c03      	adds	r3, r0, #0
 80057ce:	4914      	ldr	r1, [pc, #80]	@ (8005820 <ReadSolarVoltage+0xbc>)
 80057d0:	1c18      	adds	r0, r3, #0
 80057d2:	f7fb f97d 	bl	8000ad0 <__aeabi_fdiv>
 80057d6:	1c03      	adds	r3, r0, #0
 80057d8:	1c1a      	adds	r2, r3, #0
 80057da:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <ReadSolarVoltage+0xc0>)
 80057dc:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 80057de:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <ReadSolarVoltage+0xa4>)
 80057e0:	4a0a      	ldr	r2, [pc, #40]	@ (800580c <ReadSolarVoltage+0xa8>)
 80057e2:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80057e4:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <ReadSolarVoltage+0xa4>)
 80057e6:	4a10      	ldr	r2, [pc, #64]	@ (8005828 <ReadSolarVoltage+0xc4>)
 80057e8:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80057ea:	4a07      	ldr	r2, [pc, #28]	@ (8005808 <ReadSolarVoltage+0xa4>)
 80057ec:	4b08      	ldr	r3, [pc, #32]	@ (8005810 <ReadSolarVoltage+0xac>)
 80057ee:	0011      	movs	r1, r2
 80057f0:	0018      	movs	r0, r3
 80057f2:	f005 f813 	bl	800a81c <HAL_ADC_ConfigChannel>
 80057f6:	1e03      	subs	r3, r0, #0
 80057f8:	d001      	beq.n	80057fe <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 80057fa:	f000 ff29 	bl	8006650 <Error_Handler>
   }
   return trueValue;
 80057fe:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <ReadSolarVoltage+0xc0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 }
 8005802:	1c18      	adds	r0, r3, #0
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20000df4 	.word	0x20000df4
 800580c:	3c008000 	.word	0x3c008000
 8005810:	20000e14 	.word	0x20000e14
 8005814:	20000024 	.word	0x20000024
 8005818:	00000fff 	.word	0x00000fff
 800581c:	20000e04 	.word	0x20000e04
 8005820:	447a0000 	.word	0x447a0000
 8005824:	20000e08 	.word	0x20000e08
 8005828:	00001001 	.word	0x00001001

0800582c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005830:	23a0      	movs	r3, #160	@ 0xa0
 8005832:	05db      	lsls	r3, r3, #23
 8005834:	2180      	movs	r1, #128	@ 0x80
 8005836:	0018      	movs	r0, r3
 8005838:	f006 f8b6 	bl	800b9a8 <HAL_GPIO_ReadPin>
 800583c:	0003      	movs	r3, r0
 800583e:	1e5a      	subs	r2, r3, #1
 8005840:	4193      	sbcs	r3, r2
 8005842:	b2db      	uxtb	r3, r3
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800584a:	b580      	push	{r7, lr}
 800584c:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800584e:	2380      	movs	r3, #128	@ 0x80
 8005850:	021a      	lsls	r2, r3, #8
 8005852:	23a0      	movs	r3, #160	@ 0xa0
 8005854:	05db      	lsls	r3, r3, #23
 8005856:	0011      	movs	r1, r2
 8005858:	0018      	movs	r0, r3
 800585a:	f006 f8a5 	bl	800b9a8 <HAL_GPIO_ReadPin>
 800585e:	0003      	movs	r3, r0
 8005860:	1e5a      	subs	r2, r3, #1
 8005862:	4193      	sbcs	r3, r2
 8005864:	b2db      	uxtb	r3, r3
}
 8005866:	0018      	movs	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005870:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <UserButton_Pressed+0x1c>)
 8005872:	2104      	movs	r1, #4
 8005874:	0018      	movs	r0, r3
 8005876:	f006 f897 	bl	800b9a8 <HAL_GPIO_ReadPin>
 800587a:	0003      	movs	r3, r0
 800587c:	425a      	negs	r2, r3
 800587e:	4153      	adcs	r3, r2
 8005880:	b2db      	uxtb	r3, r3
}
 8005882:	0018      	movs	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	50000c00 	.word	0x50000c00

0800588c <RTC_SetTime>:
static Clock RealTime = {.Hours = 0, .Minutes = 0, .Seconds = 0};
static Clock NextAction = {.Hours = 0, .Minutes = 0, .Seconds = 0};
RTC_HandleTypeDef* RealTime_Handle = NULL;

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b089      	sub	sp, #36	@ 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	000c      	movs	r4, r1
 8005896:	0010      	movs	r0, r2
 8005898:	0019      	movs	r1, r3
 800589a:	1cfb      	adds	r3, r7, #3
 800589c:	1c22      	adds	r2, r4, #0
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	1cbb      	adds	r3, r7, #2
 80058a2:	1c02      	adds	r2, r0, #0
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	1c7b      	adds	r3, r7, #1
 80058a8:	1c0a      	adds	r2, r1, #0
 80058aa:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 80058ac:	240c      	movs	r4, #12
 80058ae:	193b      	adds	r3, r7, r4
 80058b0:	0018      	movs	r0, r3
 80058b2:	2314      	movs	r3, #20
 80058b4:	001a      	movs	r2, r3
 80058b6:	2100      	movs	r1, #0
 80058b8:	f012 fe2e 	bl	8018518 <memset>

    sTime.Hours = hours;
 80058bc:	0021      	movs	r1, r4
 80058be:	187b      	adds	r3, r7, r1
 80058c0:	1cfa      	adds	r2, r7, #3
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 80058c6:	187b      	adds	r3, r7, r1
 80058c8:	1cba      	adds	r2, r7, #2
 80058ca:	7812      	ldrb	r2, [r2, #0]
 80058cc:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 80058ce:	187b      	adds	r3, r7, r1
 80058d0:	1c7a      	adds	r2, r7, #1
 80058d2:	7812      	ldrb	r2, [r2, #0]
 80058d4:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 80058d6:	187b      	adds	r3, r7, r1
 80058d8:	2200      	movs	r2, #0
 80058da:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80058dc:	187b      	adds	r3, r7, r1
 80058de:	2200      	movs	r2, #0
 80058e0:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80058e2:	187b      	adds	r3, r7, r1
 80058e4:	2200      	movs	r2, #0
 80058e6:	611a      	str	r2, [r3, #16]
    

    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80058e8:	1879      	adds	r1, r7, r1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	0018      	movs	r0, r3
 80058f0:	f00b fa42 	bl	8010d78 <HAL_RTC_SetTime>
        // Foutafhandeling
    }
}
 80058f4:	46c0      	nop			@ (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b009      	add	sp, #36	@ 0x24
 80058fa:	bd90      	pop	{r4, r7, pc}

080058fc <InitClock>:

void InitClock(RTC_HandleTypeDef *hrtc){
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  RealTime_Handle = hrtc;
 8005904:	4b08      	ldr	r3, [pc, #32]	@ (8005928 <InitClock+0x2c>)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime_Handle, RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 800590a:	4b07      	ldr	r3, [pc, #28]	@ (8005928 <InitClock+0x2c>)
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	4b07      	ldr	r3, [pc, #28]	@ (800592c <InitClock+0x30>)
 8005910:	7819      	ldrb	r1, [r3, #0]
 8005912:	4b06      	ldr	r3, [pc, #24]	@ (800592c <InitClock+0x30>)
 8005914:	785a      	ldrb	r2, [r3, #1]
 8005916:	4b05      	ldr	r3, [pc, #20]	@ (800592c <InitClock+0x30>)
 8005918:	789b      	ldrb	r3, [r3, #2]
 800591a:	f7ff ffb7 	bl	800588c <RTC_SetTime>
}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	b002      	add	sp, #8
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	20000e10 	.word	0x20000e10
 800592c:	20000e0c 	.word	0x20000e0c

08005930 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005936:	003b      	movs	r3, r7
 8005938:	0018      	movs	r0, r3
 800593a:	2308      	movs	r3, #8
 800593c:	001a      	movs	r2, r3
 800593e:	2100      	movs	r1, #0
 8005940:	f012 fdea 	bl	8018518 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005944:	4b30      	ldr	r3, [pc, #192]	@ (8005a08 <MX_ADC_Init+0xd8>)
 8005946:	4a31      	ldr	r2, [pc, #196]	@ (8005a0c <MX_ADC_Init+0xdc>)
 8005948:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800594a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a08 <MX_ADC_Init+0xd8>)
 800594c:	2200      	movs	r2, #0
 800594e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8005950:	4b2d      	ldr	r3, [pc, #180]	@ (8005a08 <MX_ADC_Init+0xd8>)
 8005952:	22c0      	movs	r2, #192	@ 0xc0
 8005954:	0612      	lsls	r2, r2, #24
 8005956:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005958:	4b2b      	ldr	r3, [pc, #172]	@ (8005a08 <MX_ADC_Init+0xd8>)
 800595a:	2200      	movs	r2, #0
 800595c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800595e:	4b2a      	ldr	r3, [pc, #168]	@ (8005a08 <MX_ADC_Init+0xd8>)
 8005960:	2200      	movs	r2, #0
 8005962:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005964:	4b28      	ldr	r3, [pc, #160]	@ (8005a08 <MX_ADC_Init+0xd8>)
 8005966:	2201      	movs	r2, #1
 8005968:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800596a:	4b27      	ldr	r3, [pc, #156]	@ (8005a08 <MX_ADC_Init+0xd8>)
 800596c:	2200      	movs	r2, #0
 800596e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005970:	4b25      	ldr	r3, [pc, #148]	@ (8005a08 <MX_ADC_Init+0xd8>)
 8005972:	2220      	movs	r2, #32
 8005974:	2100      	movs	r1, #0
 8005976:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8005978:	4b23      	ldr	r3, [pc, #140]	@ (8005a08 <MX_ADC_Init+0xd8>)
 800597a:	2221      	movs	r2, #33	@ 0x21
 800597c:	2101      	movs	r1, #1
 800597e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005980:	4b21      	ldr	r3, [pc, #132]	@ (8005a08 <MX_ADC_Init+0xd8>)
 8005982:	2200      	movs	r2, #0
 8005984:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005986:	4b20      	ldr	r3, [pc, #128]	@ (8005a08 <MX_ADC_Init+0xd8>)
 8005988:	22c2      	movs	r2, #194	@ 0xc2
 800598a:	32ff      	adds	r2, #255	@ 0xff
 800598c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800598e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a08 <MX_ADC_Init+0xd8>)
 8005990:	222c      	movs	r2, #44	@ 0x2c
 8005992:	2100      	movs	r1, #0
 8005994:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005996:	4b1c      	ldr	r3, [pc, #112]	@ (8005a08 <MX_ADC_Init+0xd8>)
 8005998:	2204      	movs	r2, #4
 800599a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800599c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a08 <MX_ADC_Init+0xd8>)
 800599e:	2200      	movs	r2, #0
 80059a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80059a2:	4b19      	ldr	r3, [pc, #100]	@ (8005a08 <MX_ADC_Init+0xd8>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80059a8:	4b17      	ldr	r3, [pc, #92]	@ (8005a08 <MX_ADC_Init+0xd8>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80059ae:	4b16      	ldr	r3, [pc, #88]	@ (8005a08 <MX_ADC_Init+0xd8>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80059b4:	4b14      	ldr	r3, [pc, #80]	@ (8005a08 <MX_ADC_Init+0xd8>)
 80059b6:	0018      	movs	r0, r3
 80059b8:	f004 fcc0 	bl	800a33c <HAL_ADC_Init>
 80059bc:	1e03      	subs	r3, r0, #0
 80059be:	d001      	beq.n	80059c4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80059c0:	f000 fe46 	bl	8006650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80059c4:	003b      	movs	r3, r7
 80059c6:	4a12      	ldr	r2, [pc, #72]	@ (8005a10 <MX_ADC_Init+0xe0>)
 80059c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80059ca:	003b      	movs	r3, r7
 80059cc:	2280      	movs	r2, #128	@ 0x80
 80059ce:	0152      	lsls	r2, r2, #5
 80059d0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80059d2:	003a      	movs	r2, r7
 80059d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a08 <MX_ADC_Init+0xd8>)
 80059d6:	0011      	movs	r1, r2
 80059d8:	0018      	movs	r0, r3
 80059da:	f004 ff1f 	bl	800a81c <HAL_ADC_ConfigChannel>
 80059de:	1e03      	subs	r3, r0, #0
 80059e0:	d001      	beq.n	80059e6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80059e2:	f000 fe35 	bl	8006650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80059e6:	003b      	movs	r3, r7
 80059e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005a14 <MX_ADC_Init+0xe4>)
 80059ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80059ec:	003a      	movs	r2, r7
 80059ee:	4b06      	ldr	r3, [pc, #24]	@ (8005a08 <MX_ADC_Init+0xd8>)
 80059f0:	0011      	movs	r1, r2
 80059f2:	0018      	movs	r0, r3
 80059f4:	f004 ff12 	bl	800a81c <HAL_ADC_ConfigChannel>
 80059f8:	1e03      	subs	r3, r0, #0
 80059fa:	d001      	beq.n	8005a00 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80059fc:	f000 fe28 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005a00:	46c0      	nop			@ (mov r8, r8)
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b002      	add	sp, #8
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000e14 	.word	0x20000e14
 8005a0c:	40012400 	.word	0x40012400
 8005a10:	38004000 	.word	0x38004000
 8005a14:	3c008000 	.word	0x3c008000

08005a18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b089      	sub	sp, #36	@ 0x24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a20:	240c      	movs	r4, #12
 8005a22:	193b      	adds	r3, r7, r4
 8005a24:	0018      	movs	r0, r3
 8005a26:	2314      	movs	r3, #20
 8005a28:	001a      	movs	r2, r3
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	f012 fd74 	bl	8018518 <memset>
  if(adcHandle->Instance==ADC1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a14      	ldr	r2, [pc, #80]	@ (8005a88 <HAL_ADC_MspInit+0x70>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d121      	bne.n	8005a7e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a3a:	4b14      	ldr	r3, [pc, #80]	@ (8005a8c <HAL_ADC_MspInit+0x74>)
 8005a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a3e:	4b13      	ldr	r3, [pc, #76]	@ (8005a8c <HAL_ADC_MspInit+0x74>)
 8005a40:	2180      	movs	r1, #128	@ 0x80
 8005a42:	0089      	lsls	r1, r1, #2
 8005a44:	430a      	orrs	r2, r1
 8005a46:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a48:	4b10      	ldr	r3, [pc, #64]	@ (8005a8c <HAL_ADC_MspInit+0x74>)
 8005a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <HAL_ADC_MspInit+0x74>)
 8005a4e:	2104      	movs	r1, #4
 8005a50:	430a      	orrs	r2, r1
 8005a52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005a54:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <HAL_ADC_MspInit+0x74>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	2204      	movs	r2, #4
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005a60:	193b      	adds	r3, r7, r4
 8005a62:	2230      	movs	r2, #48	@ 0x30
 8005a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a66:	193b      	adds	r3, r7, r4
 8005a68:	2203      	movs	r2, #3
 8005a6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6c:	193b      	adds	r3, r7, r4
 8005a6e:	2200      	movs	r2, #0
 8005a70:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a72:	193b      	adds	r3, r7, r4
 8005a74:	4a06      	ldr	r2, [pc, #24]	@ (8005a90 <HAL_ADC_MspInit+0x78>)
 8005a76:	0019      	movs	r1, r3
 8005a78:	0010      	movs	r0, r2
 8005a7a:	f005 fd35 	bl	800b4e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005a7e:	46c0      	nop			@ (mov r8, r8)
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b009      	add	sp, #36	@ 0x24
 8005a84:	bd90      	pop	{r4, r7, pc}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	40012400 	.word	0x40012400
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	50000800 	.word	0x50000800

08005a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a9a:	4b10      	ldr	r3, [pc, #64]	@ (8005adc <MX_DMA_Init+0x48>)
 8005a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005adc <MX_DMA_Init+0x48>)
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005adc <MX_DMA_Init+0x48>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4013      	ands	r3, r2
 8005aae:	607b      	str	r3, [r7, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	200a      	movs	r0, #10
 8005ab8:	f005 f86a 	bl	800ab90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005abc:	200a      	movs	r0, #10
 8005abe:	f005 f87c 	bl	800abba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2103      	movs	r1, #3
 8005ac6:	200b      	movs	r0, #11
 8005ac8:	f005 f862 	bl	800ab90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005acc:	200b      	movs	r0, #11
 8005ace:	f005 f874 	bl	800abba <HAL_NVIC_EnableIRQ>

}
 8005ad2:	46c0      	nop			@ (mov r8, r8)
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b002      	add	sp, #8
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	40021000 	.word	0x40021000

08005ae0 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8005aee:	4b0c      	ldr	r3, [pc, #48]	@ (8005b20 <Gadget_Init+0x40>)
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	f001 f8d7 	bl	8006ca4 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f000 fe1b 	bl	8006738 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fd fe39 	bl	800377c <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005b0a:	4a06      	ldr	r2, [pc, #24]	@ (8005b24 <Gadget_Init+0x44>)
 8005b0c:	4b06      	ldr	r3, [pc, #24]	@ (8005b28 <Gadget_Init+0x48>)
 8005b0e:	0019      	movs	r1, r3
 8005b10:	2003      	movs	r0, #3
 8005b12:	f004 f841 	bl	8009b98 <CreateLine>
}
 8005b16:	46c0      	nop			@ (mov r8, r8)
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	b004      	add	sp, #16
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	20000028 	.word	0x20000028
 8005b24:	0801b8dc 	.word	0x0801b8dc
 8005b28:	0801b8f0 	.word	0x0801b8f0

08005b2c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  Meas_Test();
 8005b30:	f000 ff38 	bl	80069a4 <Meas_Test>
}
 8005b34:	46c0      	nop			@ (mov r8, r8)
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <UpkeepGadget>:

bool UpkeepGadget() {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8005b42:	f001 f81f 	bl	8006b84 <Meas_Upkeep>
 8005b46:	0003      	movs	r3, r0
 8005b48:	001a      	movs	r2, r3
 8005b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b88 <UpkeepGadget+0x4c>)
 8005b4c:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8005b4e:	f000 ffcb 	bl	8006ae8 <Mic_Upkeep>
 8005b52:	0003      	movs	r3, r0
 8005b54:	001a      	movs	r2, r3
 8005b56:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <UpkeepGadget+0x50>)
 8005b58:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <UpkeepGadget+0x4c>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d103      	bne.n	8005b6a <UpkeepGadget+0x2e>
 8005b62:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <UpkeepGadget+0x50>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d001      	beq.n	8005b6e <UpkeepGadget+0x32>
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	e000      	b.n	8005b70 <UpkeepGadget+0x34>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	1dfb      	adds	r3, r7, #7
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	781a      	ldrb	r2, [r3, #0]
 8005b76:	2101      	movs	r1, #1
 8005b78:	400a      	ands	r2, r1
 8005b7a:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8005b7c:	1dfb      	adds	r3, r7, #7
 8005b7e:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005b80:	0018      	movs	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b002      	add	sp, #8
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000e70 	.word	0x20000e70
 8005b8c:	20000e71 	.word	0x20000e71

08005b90 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	0011      	movs	r1, r2
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f002 fbe7 	bl	8008374 <SGP_Init>
}
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b002      	add	sp, #8
 8005bac:	bd80      	pop	{r7, pc}

08005bae <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8005bb2:	f002 fbf9 	bl	80083a8 <SGP_StartMeasurement>
}
 8005bb6:	46c0      	nop			@ (mov r8, r8)
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f002 fc5e 	bl	8008488 <SGP_GetMeasurementValues>
 8005bcc:	0003      	movs	r3, r0
}
 8005bce:	0018      	movs	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b002      	add	sp, #8
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8005bda:	f002 fe6b 	bl	80088b4 <SGP_DeviceConnected>
 8005bde:	0003      	movs	r3, r0
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b08b      	sub	sp, #44	@ 0x2c
 8005bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bee:	2414      	movs	r4, #20
 8005bf0:	193b      	adds	r3, r7, r4
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	2314      	movs	r3, #20
 8005bf6:	001a      	movs	r2, r3
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	f012 fc8d 	bl	8018518 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c02:	4b7b      	ldr	r3, [pc, #492]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c04:	2104      	movs	r1, #4
 8005c06:	430a      	orrs	r2, r1
 8005c08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c0a:	4b79      	ldr	r3, [pc, #484]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	2204      	movs	r2, #4
 8005c10:	4013      	ands	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005c16:	4b76      	ldr	r3, [pc, #472]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1a:	4b75      	ldr	r3, [pc, #468]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c1c:	2180      	movs	r1, #128	@ 0x80
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c22:	4b73      	ldr	r3, [pc, #460]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c26:	2280      	movs	r2, #128	@ 0x80
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c2e:	4b70      	ldr	r3, [pc, #448]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c32:	4b6f      	ldr	r3, [pc, #444]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c34:	2101      	movs	r1, #1
 8005c36:	430a      	orrs	r2, r1
 8005c38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3e:	2201      	movs	r2, #1
 8005c40:	4013      	ands	r3, r2
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c46:	4b6a      	ldr	r3, [pc, #424]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4a:	4b69      	ldr	r3, [pc, #420]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c52:	4b67      	ldr	r3, [pc, #412]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c56:	2202      	movs	r2, #2
 8005c58:	4013      	ands	r3, r2
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c5e:	4b64      	ldr	r3, [pc, #400]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c62:	4b63      	ldr	r3, [pc, #396]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c64:	2108      	movs	r1, #8
 8005c66:	430a      	orrs	r2, r1
 8005c68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c6a:	4b61      	ldr	r3, [pc, #388]	@ (8005df0 <MX_GPIO_Init+0x208>)
 8005c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6e:	2208      	movs	r2, #8
 8005c70:	4013      	ands	r3, r2
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005c76:	4b5f      	ldr	r3, [pc, #380]	@ (8005df4 <MX_GPIO_Init+0x20c>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f005 feb0 	bl	800b9e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005c82:	4b5c      	ldr	r3, [pc, #368]	@ (8005df4 <MX_GPIO_Init+0x20c>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	2102      	movs	r1, #2
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f005 feaa 	bl	800b9e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005c8e:	495a      	ldr	r1, [pc, #360]	@ (8005df8 <MX_GPIO_Init+0x210>)
 8005c90:	4b5a      	ldr	r3, [pc, #360]	@ (8005dfc <MX_GPIO_Init+0x214>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	0018      	movs	r0, r3
 8005c96:	f005 fea4 	bl	800b9e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005c9a:	2380      	movs	r3, #128	@ 0x80
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	4858      	ldr	r0, [pc, #352]	@ (8005e00 <MX_GPIO_Init+0x218>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	0019      	movs	r1, r3
 8005ca4:	f005 fe9d 	bl	800b9e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8005ca8:	2380      	movs	r3, #128	@ 0x80
 8005caa:	015b      	lsls	r3, r3, #5
 8005cac:	4854      	ldr	r0, [pc, #336]	@ (8005e00 <MX_GPIO_Init+0x218>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	f005 fe96 	bl	800b9e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8005cb6:	193b      	adds	r3, r7, r4
 8005cb8:	4a52      	ldr	r2, [pc, #328]	@ (8005e04 <MX_GPIO_Init+0x21c>)
 8005cba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cbc:	193b      	adds	r3, r7, r4
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc2:	193b      	adds	r3, r7, r4
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cc8:	193b      	adds	r3, r7, r4
 8005cca:	4a4d      	ldr	r2, [pc, #308]	@ (8005e00 <MX_GPIO_Init+0x218>)
 8005ccc:	0019      	movs	r1, r3
 8005cce:	0010      	movs	r0, r2
 8005cd0:	f005 fc0a 	bl	800b4e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8005cd4:	193b      	adds	r3, r7, r4
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cda:	193b      	adds	r3, r7, r4
 8005cdc:	2201      	movs	r2, #1
 8005cde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce0:	193b      	adds	r3, r7, r4
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ce6:	193b      	adds	r3, r7, r4
 8005ce8:	2200      	movs	r2, #0
 8005cea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005cec:	193b      	adds	r3, r7, r4
 8005cee:	4a41      	ldr	r2, [pc, #260]	@ (8005df4 <MX_GPIO_Init+0x20c>)
 8005cf0:	0019      	movs	r1, r3
 8005cf2:	0010      	movs	r0, r2
 8005cf4:	f005 fbf8 	bl	800b4e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005cf8:	193b      	adds	r3, r7, r4
 8005cfa:	2270      	movs	r2, #112	@ 0x70
 8005cfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cfe:	193b      	adds	r3, r7, r4
 8005d00:	2203      	movs	r2, #3
 8005d02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d04:	193b      	adds	r3, r7, r4
 8005d06:	2200      	movs	r2, #0
 8005d08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d0a:	193a      	adds	r2, r7, r4
 8005d0c:	23a0      	movs	r3, #160	@ 0xa0
 8005d0e:	05db      	lsls	r3, r3, #23
 8005d10:	0011      	movs	r1, r2
 8005d12:	0018      	movs	r0, r3
 8005d14:	f005 fbe8 	bl	800b4e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8005d18:	193b      	adds	r3, r7, r4
 8005d1a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e08 <MX_GPIO_Init+0x220>)
 8005d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d1e:	193b      	adds	r3, r7, r4
 8005d20:	2200      	movs	r2, #0
 8005d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d24:	193b      	adds	r3, r7, r4
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d2a:	193a      	adds	r2, r7, r4
 8005d2c:	23a0      	movs	r3, #160	@ 0xa0
 8005d2e:	05db      	lsls	r3, r3, #23
 8005d30:	0011      	movs	r1, r2
 8005d32:	0018      	movs	r0, r3
 8005d34:	f005 fbd8 	bl	800b4e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005d38:	193b      	adds	r3, r7, r4
 8005d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8005df8 <MX_GPIO_Init+0x210>)
 8005d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d3e:	193b      	adds	r3, r7, r4
 8005d40:	2201      	movs	r2, #1
 8005d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d44:	193b      	adds	r3, r7, r4
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d4a:	193b      	adds	r3, r7, r4
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d50:	193b      	adds	r3, r7, r4
 8005d52:	4a2a      	ldr	r2, [pc, #168]	@ (8005dfc <MX_GPIO_Init+0x214>)
 8005d54:	0019      	movs	r1, r3
 8005d56:	0010      	movs	r0, r2
 8005d58:	f005 fbc6 	bl	800b4e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005d5c:	193b      	adds	r3, r7, r4
 8005d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8005e0c <MX_GPIO_Init+0x224>)
 8005d60:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d62:	193b      	adds	r3, r7, r4
 8005d64:	2203      	movs	r2, #3
 8005d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d68:	193b      	adds	r3, r7, r4
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d6e:	193b      	adds	r3, r7, r4
 8005d70:	4a22      	ldr	r2, [pc, #136]	@ (8005dfc <MX_GPIO_Init+0x214>)
 8005d72:	0019      	movs	r1, r3
 8005d74:	0010      	movs	r0, r2
 8005d76:	f005 fbb7 	bl	800b4e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005d7a:	0021      	movs	r1, r4
 8005d7c:	187b      	adds	r3, r7, r1
 8005d7e:	2280      	movs	r2, #128	@ 0x80
 8005d80:	0092      	lsls	r2, r2, #2
 8005d82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d84:	000c      	movs	r4, r1
 8005d86:	193b      	adds	r3, r7, r4
 8005d88:	2200      	movs	r2, #0
 8005d8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d8c:	193b      	adds	r3, r7, r4
 8005d8e:	2200      	movs	r2, #0
 8005d90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8005d92:	193b      	adds	r3, r7, r4
 8005d94:	4a1a      	ldr	r2, [pc, #104]	@ (8005e00 <MX_GPIO_Init+0x218>)
 8005d96:	0019      	movs	r1, r3
 8005d98:	0010      	movs	r0, r2
 8005d9a:	f005 fba5 	bl	800b4e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005d9e:	0021      	movs	r1, r4
 8005da0:	187b      	adds	r3, r7, r1
 8005da2:	22c0      	movs	r2, #192	@ 0xc0
 8005da4:	0152      	lsls	r2, r2, #5
 8005da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005da8:	000c      	movs	r4, r1
 8005daa:	193b      	adds	r3, r7, r4
 8005dac:	2201      	movs	r2, #1
 8005dae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db0:	193b      	adds	r3, r7, r4
 8005db2:	2200      	movs	r2, #0
 8005db4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005db6:	193b      	adds	r3, r7, r4
 8005db8:	2200      	movs	r2, #0
 8005dba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dbc:	193b      	adds	r3, r7, r4
 8005dbe:	4a10      	ldr	r2, [pc, #64]	@ (8005e00 <MX_GPIO_Init+0x218>)
 8005dc0:	0019      	movs	r1, r3
 8005dc2:	0010      	movs	r0, r2
 8005dc4:	f005 fb90 	bl	800b4e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005dc8:	0021      	movs	r1, r4
 8005dca:	187b      	adds	r3, r7, r1
 8005dcc:	2204      	movs	r2, #4
 8005dce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dd0:	187b      	adds	r3, r7, r1
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005dd6:	187b      	adds	r3, r7, r1
 8005dd8:	2201      	movs	r2, #1
 8005dda:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005ddc:	187b      	adds	r3, r7, r1
 8005dde:	4a0c      	ldr	r2, [pc, #48]	@ (8005e10 <MX_GPIO_Init+0x228>)
 8005de0:	0019      	movs	r1, r3
 8005de2:	0010      	movs	r0, r2
 8005de4:	f005 fb80 	bl	800b4e8 <HAL_GPIO_Init>

}
 8005de8:	46c0      	nop			@ (mov r8, r8)
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b00b      	add	sp, #44	@ 0x2c
 8005dee:	bd90      	pop	{r4, r7, pc}
 8005df0:	40021000 	.word	0x40021000
 8005df4:	50001c00 	.word	0x50001c00
 8005df8:	00000301 	.word	0x00000301
 8005dfc:	50000400 	.word	0x50000400
 8005e00:	50000800 	.word	0x50000800
 8005e04:	0000200c 	.word	0x0000200c
 8005e08:	00008180 	.word	0x00008180
 8005e0c:	0000403e 	.word	0x0000403e
 8005e10:	50000c00 	.word	0x50000c00

08005e14 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2100      	movs	r1, #0
 8005e22:	0018      	movs	r0, r3
 8005e24:	f00b f9f8 	bl	8011218 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2108      	movs	r1, #8
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f00b f9f3 	bl	8011218 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	210c      	movs	r1, #12
 8005e36:	0018      	movs	r0, r3
 8005e38:	f00b f9ee 	bl	8011218 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8005e3c:	2380      	movs	r3, #128	@ 0x80
 8005e3e:	05db      	lsls	r3, r3, #23
 8005e40:	22fa      	movs	r2, #250	@ 0xfa
 8005e42:	0112      	lsls	r2, r2, #4
 8005e44:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8005e46:	2380      	movs	r3, #128	@ 0x80
 8005e48:	05db      	lsls	r3, r3, #23
 8005e4a:	22fa      	movs	r2, #250	@ 0xfa
 8005e4c:	0112      	lsls	r2, r2, #4
 8005e4e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	05db      	lsls	r3, r3, #23
 8005e54:	22fa      	movs	r2, #250	@ 0xfa
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005e5a:	2380      	movs	r3, #128	@ 0x80
 8005e5c:	05db      	lsls	r3, r3, #23
 8005e5e:	22fa      	movs	r2, #250	@ 0xfa
 8005e60:	0112      	lsls	r2, r2, #4
 8005e62:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2100      	movs	r1, #0
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f00b f9d5 	bl	8011218 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2104      	movs	r1, #4
 8005e72:	0018      	movs	r0, r3
 8005e74:	f00b f9d0 	bl	8011218 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2108      	movs	r1, #8
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f00b f9cb 	bl	8011218 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8005e82:	4b0a      	ldr	r3, [pc, #40]	@ (8005eac <GPIO_InitPWMLEDs+0x98>)
 8005e84:	22fa      	movs	r2, #250	@ 0xfa
 8005e86:	0112      	lsls	r2, r2, #4
 8005e88:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005e8a:	4b08      	ldr	r3, [pc, #32]	@ (8005eac <GPIO_InitPWMLEDs+0x98>)
 8005e8c:	22fa      	movs	r2, #250	@ 0xfa
 8005e8e:	0112      	lsls	r2, r2, #4
 8005e90:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005e92:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <GPIO_InitPWMLEDs+0x98>)
 8005e94:	22fa      	movs	r2, #250	@ 0xfa
 8005e96:	0112      	lsls	r2, r2, #4
 8005e98:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005e9a:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <GPIO_InitPWMLEDs+0x98>)
 8005e9c:	22fa      	movs	r2, #250	@ 0xfa
 8005e9e:	0112      	lsls	r2, r2, #4
 8005ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005ea2:	46c0      	nop			@ (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b002      	add	sp, #8
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	40000400 	.word	0x40000400

08005eb0 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	0011      	movs	r1, r2
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f003 ffaf 	bl	8009e24 <HIDS_Init>
}
 8005ec6:	46c0      	nop			@ (mov r8, r8)
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b002      	add	sp, #8
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005ed2:	f003 ffc9 	bl	8009e68 <HIDS_StartMeasurement>
}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	0011      	movs	r1, r2
 8005eec:	0018      	movs	r0, r3
 8005eee:	f004 f897 	bl	800a020 <HIDS_GetMeasurementValues>
 8005ef2:	0003      	movs	r3, r0
}
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005f00:	f004 f832 	bl	8009f68 <HIDS_DeviceConnected>
 8005f04:	0003      	movs	r3, r0
}
 8005f06:	0018      	movs	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f10:	4b1b      	ldr	r3, [pc, #108]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f12:	4a1c      	ldr	r2, [pc, #112]	@ (8005f84 <MX_I2C1_Init+0x78>)
 8005f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005f16:	4b1a      	ldr	r3, [pc, #104]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f18:	4a1b      	ldr	r2, [pc, #108]	@ (8005f88 <MX_I2C1_Init+0x7c>)
 8005f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005f1c:	4b18      	ldr	r3, [pc, #96]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f22:	4b17      	ldr	r3, [pc, #92]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f28:	4b15      	ldr	r3, [pc, #84]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005f2e:	4b14      	ldr	r3, [pc, #80]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005f34:	4b12      	ldr	r3, [pc, #72]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f3a:	4b11      	ldr	r3, [pc, #68]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f40:	4b0f      	ldr	r3, [pc, #60]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005f46:	4b0e      	ldr	r3, [pc, #56]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f005 fd67 	bl	800ba1c <HAL_I2C_Init>
 8005f4e:	1e03      	subs	r3, r0, #0
 8005f50:	d001      	beq.n	8005f56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005f52:	f000 fb7d 	bl	8006650 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005f56:	4b0a      	ldr	r3, [pc, #40]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f58:	2100      	movs	r1, #0
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f007 fcd6 	bl	800d90c <HAL_I2CEx_ConfigAnalogFilter>
 8005f60:	1e03      	subs	r3, r0, #0
 8005f62:	d001      	beq.n	8005f68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005f64:	f000 fb74 	bl	8006650 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005f68:	4b05      	ldr	r3, [pc, #20]	@ (8005f80 <MX_I2C1_Init+0x74>)
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f007 fd19 	bl	800d9a4 <HAL_I2CEx_ConfigDigitalFilter>
 8005f72:	1e03      	subs	r3, r0, #0
 8005f74:	d001      	beq.n	8005f7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005f76:	f000 fb6b 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20000e74 	.word	0x20000e74
 8005f84:	40005400 	.word	0x40005400
 8005f88:	00503d58 	.word	0x00503d58

08005f8c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005f90:	4b1b      	ldr	r3, [pc, #108]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005f92:	4a1c      	ldr	r2, [pc, #112]	@ (8006004 <MX_I2C2_Init+0x78>)
 8005f94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005f96:	4b1a      	ldr	r3, [pc, #104]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005f98:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <MX_I2C2_Init+0x7c>)
 8005f9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005f9c:	4b18      	ldr	r3, [pc, #96]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fa2:	4b17      	ldr	r3, [pc, #92]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005fa8:	4b15      	ldr	r3, [pc, #84]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005fae:	4b14      	ldr	r3, [pc, #80]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005fb4:	4b12      	ldr	r3, [pc, #72]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fba:	4b11      	ldr	r3, [pc, #68]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f005 fd27 	bl	800ba1c <HAL_I2C_Init>
 8005fce:	1e03      	subs	r3, r0, #0
 8005fd0:	d001      	beq.n	8005fd6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005fd2:	f000 fb3d 	bl	8006650 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005fd8:	2100      	movs	r1, #0
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f007 fc96 	bl	800d90c <HAL_I2CEx_ConfigAnalogFilter>
 8005fe0:	1e03      	subs	r3, r0, #0
 8005fe2:	d001      	beq.n	8005fe8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005fe4:	f000 fb34 	bl	8006650 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005fe8:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <MX_I2C2_Init+0x74>)
 8005fea:	2100      	movs	r1, #0
 8005fec:	0018      	movs	r0, r3
 8005fee:	f007 fcd9 	bl	800d9a4 <HAL_I2CEx_ConfigDigitalFilter>
 8005ff2:	1e03      	subs	r3, r0, #0
 8005ff4:	d001      	beq.n	8005ffa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005ff6:	f000 fb2b 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000ec8 	.word	0x20000ec8
 8006004:	40005800 	.word	0x40005800
 8006008:	00503d58 	.word	0x00503d58

0800600c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800600c:	b590      	push	{r4, r7, lr}
 800600e:	b08b      	sub	sp, #44	@ 0x2c
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006014:	2414      	movs	r4, #20
 8006016:	193b      	adds	r3, r7, r4
 8006018:	0018      	movs	r0, r3
 800601a:	2314      	movs	r3, #20
 800601c:	001a      	movs	r2, r3
 800601e:	2100      	movs	r1, #0
 8006020:	f012 fa7a 	bl	8018518 <memset>
  if(i2cHandle->Instance==I2C1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a5d      	ldr	r2, [pc, #372]	@ (80061a0 <HAL_I2C_MspInit+0x194>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d000      	beq.n	8006030 <HAL_I2C_MspInit+0x24>
 800602e:	e083      	b.n	8006138 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006030:	4b5c      	ldr	r3, [pc, #368]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 8006032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006034:	4b5b      	ldr	r3, [pc, #364]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 8006036:	2102      	movs	r1, #2
 8006038:	430a      	orrs	r2, r1
 800603a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800603c:	4b59      	ldr	r3, [pc, #356]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	2202      	movs	r2, #2
 8006042:	4013      	ands	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006048:	0021      	movs	r1, r4
 800604a:	187b      	adds	r3, r7, r1
 800604c:	22c0      	movs	r2, #192	@ 0xc0
 800604e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006050:	187b      	adds	r3, r7, r1
 8006052:	2212      	movs	r2, #18
 8006054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006056:	187b      	adds	r3, r7, r1
 8006058:	2200      	movs	r2, #0
 800605a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800605c:	187b      	adds	r3, r7, r1
 800605e:	2203      	movs	r2, #3
 8006060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006062:	187b      	adds	r3, r7, r1
 8006064:	2201      	movs	r2, #1
 8006066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006068:	187b      	adds	r3, r7, r1
 800606a:	4a4f      	ldr	r2, [pc, #316]	@ (80061a8 <HAL_I2C_MspInit+0x19c>)
 800606c:	0019      	movs	r1, r3
 800606e:	0010      	movs	r0, r2
 8006070:	f005 fa3a 	bl	800b4e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006074:	4b4b      	ldr	r3, [pc, #300]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 8006076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006078:	4b4a      	ldr	r3, [pc, #296]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 800607a:	2180      	movs	r1, #128	@ 0x80
 800607c:	0389      	lsls	r1, r1, #14
 800607e:	430a      	orrs	r2, r1
 8006080:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006082:	4b4a      	ldr	r3, [pc, #296]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 8006084:	4a4a      	ldr	r2, [pc, #296]	@ (80061b0 <HAL_I2C_MspInit+0x1a4>)
 8006086:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006088:	4b48      	ldr	r3, [pc, #288]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 800608a:	2206      	movs	r2, #6
 800608c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800608e:	4b47      	ldr	r3, [pc, #284]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 8006090:	2200      	movs	r2, #0
 8006092:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006094:	4b45      	ldr	r3, [pc, #276]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 8006096:	2200      	movs	r2, #0
 8006098:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800609a:	4b44      	ldr	r3, [pc, #272]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 800609c:	2280      	movs	r2, #128	@ 0x80
 800609e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060a0:	4b42      	ldr	r3, [pc, #264]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060a6:	4b41      	ldr	r3, [pc, #260]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80060ac:	4b3f      	ldr	r3, [pc, #252]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80060b2:	4b3e      	ldr	r3, [pc, #248]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80060b8:	4b3c      	ldr	r3, [pc, #240]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 80060ba:	0018      	movs	r0, r3
 80060bc:	f004 fd9a 	bl	800abf4 <HAL_DMA_Init>
 80060c0:	1e03      	subs	r3, r0, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80060c4:	f000 fac4 	bl	8006650 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a38      	ldr	r2, [pc, #224]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 80060cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80060ce:	4b37      	ldr	r3, [pc, #220]	@ (80061ac <HAL_I2C_MspInit+0x1a0>)
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80060d4:	4b37      	ldr	r3, [pc, #220]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 80060d6:	4a38      	ldr	r2, [pc, #224]	@ (80061b8 <HAL_I2C_MspInit+0x1ac>)
 80060d8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80060da:	4b36      	ldr	r3, [pc, #216]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 80060dc:	2206      	movs	r2, #6
 80060de:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060e0:	4b34      	ldr	r3, [pc, #208]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 80060e2:	2210      	movs	r2, #16
 80060e4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060e6:	4b33      	ldr	r3, [pc, #204]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060ec:	4b31      	ldr	r3, [pc, #196]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 80060ee:	2280      	movs	r2, #128	@ 0x80
 80060f0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060f2:	4b30      	ldr	r3, [pc, #192]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060f8:	4b2e      	ldr	r3, [pc, #184]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80060fe:	4b2d      	ldr	r3, [pc, #180]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 8006100:	2200      	movs	r2, #0
 8006102:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006104:	4b2b      	ldr	r3, [pc, #172]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 8006106:	2200      	movs	r2, #0
 8006108:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800610a:	4b2a      	ldr	r3, [pc, #168]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 800610c:	0018      	movs	r0, r3
 800610e:	f004 fd71 	bl	800abf4 <HAL_DMA_Init>
 8006112:	1e03      	subs	r3, r0, #0
 8006114:	d001      	beq.n	800611a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006116:	f000 fa9b 	bl	8006650 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a25      	ldr	r2, [pc, #148]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 800611e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006120:	4b24      	ldr	r3, [pc, #144]	@ (80061b4 <HAL_I2C_MspInit+0x1a8>)
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006126:	2200      	movs	r2, #0
 8006128:	2100      	movs	r1, #0
 800612a:	2017      	movs	r0, #23
 800612c:	f004 fd30 	bl	800ab90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006130:	2017      	movs	r0, #23
 8006132:	f004 fd42 	bl	800abba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006136:	e02e      	b.n	8006196 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1f      	ldr	r2, [pc, #124]	@ (80061bc <HAL_I2C_MspInit+0x1b0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d129      	bne.n	8006196 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006142:	4b18      	ldr	r3, [pc, #96]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 8006144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006146:	4b17      	ldr	r3, [pc, #92]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 8006148:	2102      	movs	r1, #2
 800614a:	430a      	orrs	r2, r1
 800614c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800614e:	4b15      	ldr	r3, [pc, #84]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	2202      	movs	r2, #2
 8006154:	4013      	ands	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800615a:	2114      	movs	r1, #20
 800615c:	187b      	adds	r3, r7, r1
 800615e:	22c0      	movs	r2, #192	@ 0xc0
 8006160:	0112      	lsls	r2, r2, #4
 8006162:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006164:	187b      	adds	r3, r7, r1
 8006166:	2212      	movs	r2, #18
 8006168:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616a:	187b      	adds	r3, r7, r1
 800616c:	2200      	movs	r2, #0
 800616e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006170:	187b      	adds	r3, r7, r1
 8006172:	2203      	movs	r2, #3
 8006174:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006176:	187b      	adds	r3, r7, r1
 8006178:	2206      	movs	r2, #6
 800617a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800617c:	187b      	adds	r3, r7, r1
 800617e:	4a0a      	ldr	r2, [pc, #40]	@ (80061a8 <HAL_I2C_MspInit+0x19c>)
 8006180:	0019      	movs	r1, r3
 8006182:	0010      	movs	r0, r2
 8006184:	f005 f9b0 	bl	800b4e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 800618a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800618c:	4b05      	ldr	r3, [pc, #20]	@ (80061a4 <HAL_I2C_MspInit+0x198>)
 800618e:	2180      	movs	r1, #128	@ 0x80
 8006190:	03c9      	lsls	r1, r1, #15
 8006192:	430a      	orrs	r2, r1
 8006194:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	46bd      	mov	sp, r7
 800619a:	b00b      	add	sp, #44	@ 0x2c
 800619c:	bd90      	pop	{r4, r7, pc}
 800619e:	46c0      	nop			@ (mov r8, r8)
 80061a0:	40005400 	.word	0x40005400
 80061a4:	40021000 	.word	0x40021000
 80061a8:	50000400 	.word	0x50000400
 80061ac:	20000f1c 	.word	0x20000f1c
 80061b0:	40020030 	.word	0x40020030
 80061b4:	20000f64 	.word	0x20000f64
 80061b8:	4002001c 	.word	0x4002001c
 80061bc:	40005800 	.word	0x40005800

080061c0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80061c4:	4b10      	ldr	r3, [pc, #64]	@ (8006208 <MX_I2S2_Init+0x48>)
 80061c6:	4a11      	ldr	r2, [pc, #68]	@ (800620c <MX_I2S2_Init+0x4c>)
 80061c8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80061ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006208 <MX_I2S2_Init+0x48>)
 80061cc:	22c0      	movs	r2, #192	@ 0xc0
 80061ce:	0092      	lsls	r2, r2, #2
 80061d0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80061d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006208 <MX_I2S2_Init+0x48>)
 80061d4:	2210      	movs	r2, #16
 80061d6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 80061d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006208 <MX_I2S2_Init+0x48>)
 80061da:	2205      	movs	r2, #5
 80061dc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80061de:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <MX_I2S2_Init+0x48>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80061e4:	4b08      	ldr	r3, [pc, #32]	@ (8006208 <MX_I2S2_Init+0x48>)
 80061e6:	22fa      	movs	r2, #250	@ 0xfa
 80061e8:	0152      	lsls	r2, r2, #5
 80061ea:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 80061ec:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <MX_I2S2_Init+0x48>)
 80061ee:	2208      	movs	r2, #8
 80061f0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80061f2:	4b05      	ldr	r3, [pc, #20]	@ (8006208 <MX_I2S2_Init+0x48>)
 80061f4:	0018      	movs	r0, r3
 80061f6:	f007 fc21 	bl	800da3c <HAL_I2S_Init>
 80061fa:	1e03      	subs	r3, r0, #0
 80061fc:	d001      	beq.n	8006202 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80061fe:	f000 fa27 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000fac 	.word	0x20000fac
 800620c:	40003800 	.word	0x40003800

08006210 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b089      	sub	sp, #36	@ 0x24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006218:	240c      	movs	r4, #12
 800621a:	193b      	adds	r3, r7, r4
 800621c:	0018      	movs	r0, r3
 800621e:	2314      	movs	r3, #20
 8006220:	001a      	movs	r2, r3
 8006222:	2100      	movs	r1, #0
 8006224:	f012 f978 	bl	8018518 <memset>
  if(i2sHandle->Instance==SPI2)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2d      	ldr	r2, [pc, #180]	@ (80062e4 <HAL_I2S_MspInit+0xd4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d154      	bne.n	80062dc <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006232:	4b2d      	ldr	r3, [pc, #180]	@ (80062e8 <HAL_I2S_MspInit+0xd8>)
 8006234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006236:	4b2c      	ldr	r3, [pc, #176]	@ (80062e8 <HAL_I2S_MspInit+0xd8>)
 8006238:	2180      	movs	r1, #128	@ 0x80
 800623a:	01c9      	lsls	r1, r1, #7
 800623c:	430a      	orrs	r2, r1
 800623e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006240:	4b29      	ldr	r3, [pc, #164]	@ (80062e8 <HAL_I2S_MspInit+0xd8>)
 8006242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006244:	4b28      	ldr	r3, [pc, #160]	@ (80062e8 <HAL_I2S_MspInit+0xd8>)
 8006246:	2102      	movs	r1, #2
 8006248:	430a      	orrs	r2, r1
 800624a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800624c:	4b26      	ldr	r3, [pc, #152]	@ (80062e8 <HAL_I2S_MspInit+0xd8>)
 800624e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006250:	2202      	movs	r2, #2
 8006252:	4013      	ands	r3, r2
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006258:	193b      	adds	r3, r7, r4
 800625a:	22b0      	movs	r2, #176	@ 0xb0
 800625c:	0212      	lsls	r2, r2, #8
 800625e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006260:	0021      	movs	r1, r4
 8006262:	187b      	adds	r3, r7, r1
 8006264:	2202      	movs	r2, #2
 8006266:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006268:	187b      	adds	r3, r7, r1
 800626a:	2200      	movs	r2, #0
 800626c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800626e:	187b      	adds	r3, r7, r1
 8006270:	2200      	movs	r2, #0
 8006272:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006274:	187b      	adds	r3, r7, r1
 8006276:	2200      	movs	r2, #0
 8006278:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800627a:	187b      	adds	r3, r7, r1
 800627c:	4a1b      	ldr	r2, [pc, #108]	@ (80062ec <HAL_I2S_MspInit+0xdc>)
 800627e:	0019      	movs	r1, r3
 8006280:	0010      	movs	r0, r2
 8006282:	f005 f931 	bl	800b4e8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006286:	4b1a      	ldr	r3, [pc, #104]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 8006288:	4a1a      	ldr	r2, [pc, #104]	@ (80062f4 <HAL_I2S_MspInit+0xe4>)
 800628a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800628c:	4b18      	ldr	r3, [pc, #96]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 800628e:	2202      	movs	r2, #2
 8006290:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006292:	4b17      	ldr	r3, [pc, #92]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 8006294:	2200      	movs	r2, #0
 8006296:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006298:	4b15      	ldr	r3, [pc, #84]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 800629a:	2200      	movs	r2, #0
 800629c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800629e:	4b14      	ldr	r3, [pc, #80]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 80062a0:	2280      	movs	r2, #128	@ 0x80
 80062a2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80062a4:	4b12      	ldr	r3, [pc, #72]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 80062a6:	2280      	movs	r2, #128	@ 0x80
 80062a8:	0052      	lsls	r2, r2, #1
 80062aa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80062ac:	4b10      	ldr	r3, [pc, #64]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 80062ae:	2280      	movs	r2, #128	@ 0x80
 80062b0:	00d2      	lsls	r2, r2, #3
 80062b2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80062b4:	4b0e      	ldr	r3, [pc, #56]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 80062b6:	2220      	movs	r2, #32
 80062b8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062ba:	4b0d      	ldr	r3, [pc, #52]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 80062bc:	2200      	movs	r2, #0
 80062be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80062c0:	4b0b      	ldr	r3, [pc, #44]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 80062c2:	0018      	movs	r0, r3
 80062c4:	f004 fc96 	bl	800abf4 <HAL_DMA_Init>
 80062c8:	1e03      	subs	r3, r0, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 80062cc:	f000 f9c0 	bl	8006650 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a07      	ldr	r2, [pc, #28]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 80062d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80062d6:	4b06      	ldr	r3, [pc, #24]	@ (80062f0 <HAL_I2S_MspInit+0xe0>)
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80062dc:	46c0      	nop			@ (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b009      	add	sp, #36	@ 0x24
 80062e2:	bd90      	pop	{r4, r7, pc}
 80062e4:	40003800 	.word	0x40003800
 80062e8:	40021000 	.word	0x40021000
 80062ec:	50000400 	.word	0x50000400
 80062f0:	20000fe8 	.word	0x20000fe8
 80062f4:	40020044 	.word	0x40020044

080062f8 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a0c      	ldr	r2, [pc, #48]	@ (8006338 <HAL_I2S_MspDeInit+0x40>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d111      	bne.n	800632e <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800630a:	4b0c      	ldr	r3, [pc, #48]	@ (800633c <HAL_I2S_MspDeInit+0x44>)
 800630c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800630e:	4b0b      	ldr	r3, [pc, #44]	@ (800633c <HAL_I2S_MspDeInit+0x44>)
 8006310:	490b      	ldr	r1, [pc, #44]	@ (8006340 <HAL_I2S_MspDeInit+0x48>)
 8006312:	400a      	ands	r2, r1
 8006314:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8006316:	23b0      	movs	r3, #176	@ 0xb0
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	4a0a      	ldr	r2, [pc, #40]	@ (8006344 <HAL_I2S_MspDeInit+0x4c>)
 800631c:	0019      	movs	r1, r3
 800631e:	0010      	movs	r0, r2
 8006320:	f005 fa60 	bl	800b7e4 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006328:	0018      	movs	r0, r3
 800632a:	f004 fcdb 	bl	800ace4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	46bd      	mov	sp, r7
 8006332:	b002      	add	sp, #8
 8006334:	bd80      	pop	{r7, pc}
 8006336:	46c0      	nop			@ (mov r8, r8)
 8006338:	40003800 	.word	0x40003800
 800633c:	40021000 	.word	0x40021000
 8006340:	ffffbfff 	.word	0xffffbfff
 8006344:	50000400 	.word	0x50000400

08006348 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
  testDone = true;
 800634c:	4b1e      	ldr	r3, [pc, #120]	@ (80063c8 <SetTestDone+0x80>)
 800634e:	2201      	movs	r2, #1
 8006350:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 8006352:	23fa      	movs	r3, #250	@ 0xfa
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	0018      	movs	r0, r3
 8006358:	f003 ffae 	bl	800a2b8 <HAL_Delay>
  SetDBLED(false, false, true);
 800635c:	2201      	movs	r2, #1
 800635e:	2100      	movs	r1, #0
 8006360:	2000      	movs	r0, #0
 8006362:	f002 fd15 	bl	8008d90 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8006366:	4a19      	ldr	r2, [pc, #100]	@ (80063cc <SetTestDone+0x84>)
 8006368:	23fa      	movs	r3, #250	@ 0xfa
 800636a:	0119      	lsls	r1, r3, #4
 800636c:	23fa      	movs	r3, #250	@ 0xfa
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	0018      	movs	r0, r3
 8006372:	f002 fcd9 	bl	8008d28 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8006376:	4a15      	ldr	r2, [pc, #84]	@ (80063cc <SetTestDone+0x84>)
 8006378:	23fa      	movs	r3, #250	@ 0xfa
 800637a:	0119      	lsls	r1, r3, #4
 800637c:	23fa      	movs	r3, #250	@ 0xfa
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	0018      	movs	r0, r3
 8006382:	f002 fd4f 	bl	8008e24 <SetVocLED>
  HAL_Delay(1000);
 8006386:	23fa      	movs	r3, #250	@ 0xfa
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	0018      	movs	r0, r3
 800638c:	f003 ff94 	bl	800a2b8 <HAL_Delay>
  SetDBLED(false, false, false);
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	2000      	movs	r0, #0
 8006396:	f002 fcfb 	bl	8008d90 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 800639a:	23fa      	movs	r3, #250	@ 0xfa
 800639c:	011a      	lsls	r2, r3, #4
 800639e:	23fa      	movs	r3, #250	@ 0xfa
 80063a0:	0119      	lsls	r1, r3, #4
 80063a2:	23fa      	movs	r3, #250	@ 0xfa
 80063a4:	011b      	lsls	r3, r3, #4
 80063a6:	0018      	movs	r0, r3
 80063a8:	f002 fcbe 	bl	8008d28 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 80063ac:	23fa      	movs	r3, #250	@ 0xfa
 80063ae:	011a      	lsls	r2, r3, #4
 80063b0:	23fa      	movs	r3, #250	@ 0xfa
 80063b2:	0119      	lsls	r1, r3, #4
 80063b4:	23fa      	movs	r3, #250	@ 0xfa
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	0018      	movs	r0, r3
 80063ba:	f002 fd33 	bl	8008e24 <SetVocLED>
  InitDone();
 80063be:	f002 fc5d 	bl	8008c7c <InitDone>
}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	20001030 	.word	0x20001030
 80063cc:	00000bb8 	.word	0x00000bb8

080063d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063d4:	f003 ff00 	bl	800a1d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80063d8:	f000 f8b4 	bl	8006544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80063dc:	f7ff fc04 	bl	8005be8 <MX_GPIO_Init>
  MX_DMA_Init();
 80063e0:	f7ff fb58 	bl	8005a94 <MX_DMA_Init>
  MX_I2C1_Init();
 80063e4:	f7ff fd92 	bl	8005f0c <MX_I2C1_Init>
  MX_I2S2_Init();
 80063e8:	f7ff feea 	bl	80061c0 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80063ec:	f003 f9ea 	bl	80097c4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80063f0:	f7ff fdcc 	bl	8005f8c <MX_I2C2_Init>
  MX_TIM2_Init();
 80063f4:	f003 f832 	bl	800945c <MX_TIM2_Init>
  MX_TIM3_Init();
 80063f8:	f003 f8a4 	bl	8009544 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80063fc:	f003 fa16 	bl	800982c <MX_USART4_UART_Init>
  MX_ADC_Init();
 8006400:	f7ff fa96 	bl	8005930 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8006404:	f010 fd0e 	bl	8016e24 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8006408:	f001 f842 	bl	8007490 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800640c:	f003 f9a4 	bl	8009758 <MX_LPUART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8006410:	4a3c      	ldr	r2, [pc, #240]	@ (8006504 <main+0x134>)
 8006412:	4b3d      	ldr	r3, [pc, #244]	@ (8006508 <main+0x138>)
 8006414:	0011      	movs	r1, r2
 8006416:	0018      	movs	r0, r3
 8006418:	f7ff fcfc 	bl	8005e14 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 800641c:	f7ff fa26 	bl	800586c <UserButton_Pressed>
 8006420:	1e03      	subs	r3, r0, #0
 8006422:	d004      	beq.n	800642e <main+0x5e>
    EnableESPProg();
 8006424:	f010 fdce 	bl	8016fc4 <EnableESPProg>
    ESP_Programming = true;
 8006428:	4b38      	ldr	r3, [pc, #224]	@ (800650c <main+0x13c>)
 800642a:	2201      	movs	r2, #1
 800642c:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 800642e:	2003      	movs	r0, #3
 8006430:	f003 fc14 	bl	8009c5c <SetVerboseLevel>
  BinaryReleaseInfo();
 8006434:	f003 fc2a 	bl	8009c8c <BinaryReleaseInfo>
  InitClock(&hrtc);
 8006438:	4b35      	ldr	r3, [pc, #212]	@ (8006510 <main+0x140>)
 800643a:	0018      	movs	r0, r3
 800643c:	f7ff fa5e 	bl	80058fc <InitClock>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8006440:	4b34      	ldr	r3, [pc, #208]	@ (8006514 <main+0x144>)
 8006442:	4a35      	ldr	r2, [pc, #212]	@ (8006518 <main+0x148>)
 8006444:	4935      	ldr	r1, [pc, #212]	@ (800651c <main+0x14c>)
 8006446:	4836      	ldr	r0, [pc, #216]	@ (8006520 <main+0x150>)
 8006448:	f7ff fb4a 	bl	8005ae0 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 800644c:	4b35      	ldr	r3, [pc, #212]	@ (8006524 <main+0x154>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d019      	beq.n	8006488 <main+0xb8>
 8006454:	4b2d      	ldr	r3, [pc, #180]	@ (800650c <main+0x13c>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2201      	movs	r2, #1
 800645a:	4053      	eors	r3, r2
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d012      	beq.n	8006488 <main+0xb8>
 8006462:	4b31      	ldr	r3, [pc, #196]	@ (8006528 <main+0x158>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2201      	movs	r2, #1
 8006468:	4053      	eors	r3, r2
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <main+0xb8>
      MeasurementBusy = UpkeepGadget();
 8006470:	f7ff fb64 	bl	8005b3c <UpkeepGadget>
 8006474:	0003      	movs	r3, r0
 8006476:	001a      	movs	r2, r3
 8006478:	4b2c      	ldr	r3, [pc, #176]	@ (800652c <main+0x15c>)
 800647a:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 800647c:	f7fe fbd4 	bl	8004c28 <ESP_Upkeep>
 8006480:	0003      	movs	r3, r0
 8006482:	001a      	movs	r2, r3
 8006484:	4b2a      	ldr	r3, [pc, #168]	@ (8006530 <main+0x160>)
 8006486:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8006488:	4b26      	ldr	r3, [pc, #152]	@ (8006524 <main+0x154>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2201      	movs	r2, #1
 800648e:	4053      	eors	r3, r2
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00f      	beq.n	80064b6 <main+0xe6>
 8006496:	4b1d      	ldr	r3, [pc, #116]	@ (800650c <main+0x13c>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2201      	movs	r2, #1
 800649c:	4053      	eors	r3, r2
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <main+0xe6>
 80064a4:	4b20      	ldr	r3, [pc, #128]	@ (8006528 <main+0x158>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2201      	movs	r2, #1
 80064aa:	4053      	eors	r3, r2
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <main+0xe6>
      Gadget_Test();
 80064b2:	f7ff fb3b 	bl	8005b2c <Gadget_Test>
    }
    Status_Upkeep();
 80064b6:	f002 fe87 	bl	80091c8 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 80064ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006534 <main+0x164>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	0018      	movs	r0, r3
 80064c0:	f003 fb14 	bl	8009aec <TimestampIsReached>
 80064c4:	1e03      	subs	r3, r0, #0
 80064c6:	d00c      	beq.n	80064e2 <main+0x112>
      charge = Battery_Upkeep();
 80064c8:	f002 fe85 	bl	80091d6 <Battery_Upkeep>
 80064cc:	0003      	movs	r3, r0
 80064ce:	001a      	movs	r2, r3
 80064d0:	4b19      	ldr	r3, [pc, #100]	@ (8006538 <main+0x168>)
 80064d2:	701a      	strb	r2, [r3, #0]
      batteryReadTimer = HAL_GetTick + 60000;
 80064d4:	4b19      	ldr	r3, [pc, #100]	@ (800653c <main+0x16c>)
 80064d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006540 <main+0x170>)
 80064d8:	4694      	mov	ip, r2
 80064da:	4463      	add	r3, ip
 80064dc:	001a      	movs	r2, r3
 80064de:	4b15      	ldr	r3, [pc, #84]	@ (8006534 <main+0x164>)
 80064e0:	601a      	str	r2, [r3, #0]
      //GoToSleep(2);
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 80064e2:	4b15      	ldr	r3, [pc, #84]	@ (8006538 <main+0x168>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d107      	bne.n	80064fa <main+0x12a>
 80064ea:	4b11      	ldr	r3, [pc, #68]	@ (8006530 <main+0x160>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d103      	bne.n	80064fa <main+0x12a>
      batteryEmpty = true;
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <main+0x158>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	e002      	b.n	8006500 <main+0x130>
    }
    else{
      batteryEmpty = false;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006528 <main+0x158>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 8006500:	e7a4      	b.n	800644c <main+0x7c>
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	20002a08 	.word	0x20002a08
 8006508:	200029c8 	.word	0x200029c8
 800650c:	20001031 	.word	0x20001031
 8006510:	200028d0 	.word	0x200028d0
 8006514:	20000e14 	.word	0x20000e14
 8006518:	20002bb8 	.word	0x20002bb8
 800651c:	20000fac 	.word	0x20000fac
 8006520:	20000e74 	.word	0x20000e74
 8006524:	20001030 	.word	0x20001030
 8006528:	20001032 	.word	0x20001032
 800652c:	20001033 	.word	0x20001033
 8006530:	20001039 	.word	0x20001039
 8006534:	20001034 	.word	0x20001034
 8006538:	20001038 	.word	0x20001038
 800653c:	0800a2a5 	.word	0x0800a2a5
 8006540:	0000ea60 	.word	0x0000ea60

08006544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b09d      	sub	sp, #116	@ 0x74
 8006548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800654a:	2438      	movs	r4, #56	@ 0x38
 800654c:	193b      	adds	r3, r7, r4
 800654e:	0018      	movs	r0, r3
 8006550:	2338      	movs	r3, #56	@ 0x38
 8006552:	001a      	movs	r2, r3
 8006554:	2100      	movs	r1, #0
 8006556:	f011 ffdf 	bl	8018518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800655a:	2324      	movs	r3, #36	@ 0x24
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	0018      	movs	r0, r3
 8006560:	2314      	movs	r3, #20
 8006562:	001a      	movs	r2, r3
 8006564:	2100      	movs	r1, #0
 8006566:	f011 ffd7 	bl	8018518 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800656a:	003b      	movs	r3, r7
 800656c:	0018      	movs	r0, r3
 800656e:	2324      	movs	r3, #36	@ 0x24
 8006570:	001a      	movs	r2, r3
 8006572:	2100      	movs	r1, #0
 8006574:	f011 ffd0 	bl	8018518 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006578:	4b32      	ldr	r3, [pc, #200]	@ (8006644 <SystemClock_Config+0x100>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a32      	ldr	r2, [pc, #200]	@ (8006648 <SystemClock_Config+0x104>)
 800657e:	401a      	ands	r2, r3
 8006580:	4b30      	ldr	r3, [pc, #192]	@ (8006644 <SystemClock_Config+0x100>)
 8006582:	2180      	movs	r1, #128	@ 0x80
 8006584:	0109      	lsls	r1, r1, #4
 8006586:	430a      	orrs	r2, r1
 8006588:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800658a:	f009 fbf7 	bl	800fd7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800658e:	4b2f      	ldr	r3, [pc, #188]	@ (800664c <SystemClock_Config+0x108>)
 8006590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006592:	4b2e      	ldr	r3, [pc, #184]	@ (800664c <SystemClock_Config+0x108>)
 8006594:	492c      	ldr	r1, [pc, #176]	@ (8006648 <SystemClock_Config+0x104>)
 8006596:	400a      	ands	r2, r1
 8006598:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800659a:	193b      	adds	r3, r7, r4
 800659c:	2226      	movs	r2, #38	@ 0x26
 800659e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80065a0:	193b      	adds	r3, r7, r4
 80065a2:	2280      	movs	r2, #128	@ 0x80
 80065a4:	0052      	lsls	r2, r2, #1
 80065a6:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80065a8:	0021      	movs	r1, r4
 80065aa:	187b      	adds	r3, r7, r1
 80065ac:	2201      	movs	r2, #1
 80065ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80065b0:	187b      	adds	r3, r7, r1
 80065b2:	2210      	movs	r2, #16
 80065b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80065b6:	187b      	adds	r3, r7, r1
 80065b8:	2201      	movs	r2, #1
 80065ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80065bc:	187b      	adds	r3, r7, r1
 80065be:	2200      	movs	r2, #0
 80065c0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80065c2:	187b      	adds	r3, r7, r1
 80065c4:	0018      	movs	r0, r3
 80065c6:	f009 fbe7 	bl	800fd98 <HAL_RCC_OscConfig>
 80065ca:	1e03      	subs	r3, r0, #0
 80065cc:	d001      	beq.n	80065d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80065ce:	f000 f83f 	bl	8006650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80065d2:	2124      	movs	r1, #36	@ 0x24
 80065d4:	187b      	adds	r3, r7, r1
 80065d6:	220f      	movs	r2, #15
 80065d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80065da:	187b      	adds	r3, r7, r1
 80065dc:	2201      	movs	r2, #1
 80065de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80065e0:	187b      	adds	r3, r7, r1
 80065e2:	2200      	movs	r2, #0
 80065e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80065e6:	187b      	adds	r3, r7, r1
 80065e8:	2200      	movs	r2, #0
 80065ea:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	2200      	movs	r2, #0
 80065f0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80065f2:	187b      	adds	r3, r7, r1
 80065f4:	2100      	movs	r1, #0
 80065f6:	0018      	movs	r0, r3
 80065f8:	f009 ffa2 	bl	8010540 <HAL_RCC_ClockConfig>
 80065fc:	1e03      	subs	r3, r0, #0
 80065fe:	d001      	beq.n	8006604 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006600:	f000 f826 	bl	8006650 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8006604:	003b      	movs	r3, r7
 8006606:	226d      	movs	r2, #109	@ 0x6d
 8006608:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800660a:	003b      	movs	r3, r7
 800660c:	2200      	movs	r2, #0
 800660e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006610:	003b      	movs	r3, r7
 8006612:	2200      	movs	r2, #0
 8006614:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006616:	003b      	movs	r3, r7
 8006618:	2200      	movs	r2, #0
 800661a:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800661c:	003b      	movs	r3, r7
 800661e:	2280      	movs	r2, #128	@ 0x80
 8006620:	0252      	lsls	r2, r2, #9
 8006622:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006624:	003b      	movs	r3, r7
 8006626:	2280      	movs	r2, #128	@ 0x80
 8006628:	04d2      	lsls	r2, r2, #19
 800662a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800662c:	003b      	movs	r3, r7
 800662e:	0018      	movs	r0, r3
 8006630:	f00a f9aa 	bl	8010988 <HAL_RCCEx_PeriphCLKConfig>
 8006634:	1e03      	subs	r3, r0, #0
 8006636:	d001      	beq.n	800663c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8006638:	f000 f80a 	bl	8006650 <Error_Handler>
  }
}
 800663c:	46c0      	nop			@ (mov r8, r8)
 800663e:	46bd      	mov	sp, r7
 8006640:	b01d      	add	sp, #116	@ 0x74
 8006642:	bd90      	pop	{r4, r7, pc}
 8006644:	40007000 	.word	0x40007000
 8006648:	ffffe7ff 	.word	0xffffe7ff
 800664c:	40021000 	.word	0x40021000

08006650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006654:	b672      	cpsid	i
}
 8006656:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006658:	46c0      	nop			@ (mov r8, r8)
 800665a:	e7fd      	b.n	8006658 <Error_Handler+0x8>

0800665c <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8006660:	f7ff fc35 	bl	8005ece <HT_StartMeasurement>
}
 8006664:	46c0      	nop			@ (mov r8, r8)
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8006670:	4a04      	ldr	r2, [pc, #16]	@ (8006684 <HT_IsMeasurementDoneWrapper+0x18>)
 8006672:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <HT_IsMeasurementDoneWrapper+0x1c>)
 8006674:	0011      	movs	r1, r2
 8006676:	0018      	movs	r0, r3
 8006678:	f7ff fc30 	bl	8005edc <HT_GetMeasurementValues>
 800667c:	0003      	movs	r3, r0
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20001040 	.word	0x20001040
 8006688:	2000103c 	.word	0x2000103c

0800668c <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8006690:	f7ff fa8d 	bl	8005bae <Gas_StartMeasurement>
}
 8006694:	46c0      	nop			@ (mov r8, r8)
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 80066a0:	4b03      	ldr	r3, [pc, #12]	@ (80066b0 <VOC_IsMeasurementDoneWrapper+0x14>)
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7ff fa8a 	bl	8005bbc <Gas_GetMeasurementValues>
 80066a8:	0003      	movs	r3, r0
}
 80066aa:	0018      	movs	r0, r3
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20001044 	.word	0x20001044

080066b4 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
}
 80066b8:	46c0      	nop			@ (mov r8, r8)
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 80066be:	b580      	push	{r7, lr}
 80066c0:	af00      	add	r7, sp, #0
  return true;
 80066c2:	2301      	movs	r3, #1
}
 80066c4:	0018      	movs	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 80066ca:	b580      	push	{r7, lr}
 80066cc:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 80066ce:	23fa      	movs	r3, #250	@ 0xfa
 80066d0:	015b      	lsls	r3, r3, #5
 80066d2:	2180      	movs	r1, #128	@ 0x80
 80066d4:	0018      	movs	r0, r3
 80066d6:	f000 fba3 	bl	8006e20 <MIC_Start>
}
 80066da:	46c0      	nop			@ (mov r8, r8)
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 80066e4:	f000 fdfe 	bl	80072e4 <MIC_MeasurementDone>
 80066e8:	0003      	movs	r3, r0
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <Meas_TestStart>:
void Meas_TestStart(){
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 80066f4:	f7ff ffe9 	bl	80066ca <MIC_StartMeasurementWrapper>
}
 80066f8:	46c0      	nop			@ (mov r8, r8)
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 80066fe:	b580      	push	{r7, lr}
 8006700:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8006702:	f000 fe0f 	bl	8007324 <MIC_TestMeasurementDone>
 8006706:	0003      	movs	r3, r0
}
 8006708:	0018      	movs	r0, r3
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <testInit>:
void testInit(){
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8006714:	4b07      	ldr	r3, [pc, #28]	@ (8006734 <testInit+0x24>)
 8006716:	2200      	movs	r2, #0
 8006718:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 800671a:	4b06      	ldr	r3, [pc, #24]	@ (8006734 <testInit+0x24>)
 800671c:	2200      	movs	r2, #0
 800671e:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8006720:	4b04      	ldr	r3, [pc, #16]	@ (8006734 <testInit+0x24>)
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8006726:	4b03      	ldr	r3, [pc, #12]	@ (8006734 <testInit+0x24>)
 8006728:	2200      	movs	r2, #0
 800672a:	705a      	strb	r2, [r3, #1]
}
 800672c:	46c0      	nop			@ (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	46c0      	nop			@ (mov r8, r8)
 8006734:	20001080 	.word	0x20001080

08006738 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8006738:	b5b0      	push	{r4, r5, r7, lr}
 800673a:	b092      	sub	sp, #72	@ 0x48
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8006744:	4b6f      	ldr	r3, [pc, #444]	@ (8006904 <Meas_Init+0x1cc>)
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
  testInit();
 800674a:	f7ff ffe1 	bl	8006710 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 800674e:	4b6e      	ldr	r3, [pc, #440]	@ (8006908 <Meas_Init+0x1d0>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d103      	bne.n	800675e <Meas_Init+0x26>
 8006756:	4b6c      	ldr	r3, [pc, #432]	@ (8006908 <Meas_Init+0x1d0>)
 8006758:	785b      	ldrb	r3, [r3, #1]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d068      	beq.n	8006830 <Meas_Init+0xf8>
    I2CSensors_Init(sensorI2C);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	0018      	movs	r0, r3
 8006762:	f7fe fd19 	bl	8005198 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8006766:	f7ff fbc9 	bl	8005efc <HT_DeviceConnected>
 800676a:	0003      	movs	r3, r0
 800676c:	001a      	movs	r2, r3
 800676e:	2301      	movs	r3, #1
 8006770:	4053      	eors	r3, r2
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00c      	beq.n	8006792 <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 8006778:	4a64      	ldr	r2, [pc, #400]	@ (800690c <Meas_Init+0x1d4>)
 800677a:	4b65      	ldr	r3, [pc, #404]	@ (8006910 <Meas_Init+0x1d8>)
 800677c:	0019      	movs	r1, r3
 800677e:	2001      	movs	r0, #1
 8006780:	f003 fa0a 	bl	8009b98 <CreateLine>
       MeasTest.HT_Tested = false;
 8006784:	4b63      	ldr	r3, [pc, #396]	@ (8006914 <Meas_Init+0x1dc>)
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 800678a:	4b5f      	ldr	r3, [pc, #380]	@ (8006908 <Meas_Init+0x1d0>)
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	e008      	b.n	80067a4 <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8006792:	4b60      	ldr	r3, [pc, #384]	@ (8006914 <Meas_Init+0x1dc>)
 8006794:	2201      	movs	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8006798:	4a5f      	ldr	r2, [pc, #380]	@ (8006918 <Meas_Init+0x1e0>)
 800679a:	4b60      	ldr	r3, [pc, #384]	@ (800691c <Meas_Init+0x1e4>)
 800679c:	0019      	movs	r1, r3
 800679e:	2003      	movs	r0, #3
 80067a0:	f003 f9fa 	bl	8009b98 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 80067a4:	f7ff fa17 	bl	8005bd6 <Gas_DeviceConnected>
 80067a8:	0003      	movs	r3, r0
 80067aa:	001a      	movs	r2, r3
 80067ac:	2301      	movs	r3, #1
 80067ae:	4053      	eors	r3, r2
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 80067b6:	4b57      	ldr	r3, [pc, #348]	@ (8006914 <Meas_Init+0x1dc>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 80067bc:	4a58      	ldr	r2, [pc, #352]	@ (8006920 <Meas_Init+0x1e8>)
 80067be:	4b54      	ldr	r3, [pc, #336]	@ (8006910 <Meas_Init+0x1d8>)
 80067c0:	0019      	movs	r1, r3
 80067c2:	2001      	movs	r0, #1
 80067c4:	f003 f9e8 	bl	8009b98 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 80067c8:	4b4f      	ldr	r3, [pc, #316]	@ (8006908 <Meas_Init+0x1d0>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	705a      	strb	r2, [r3, #1]
 80067ce:	e008      	b.n	80067e2 <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 80067d0:	4b50      	ldr	r3, [pc, #320]	@ (8006914 <Meas_Init+0x1dc>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 80067d6:	4a53      	ldr	r2, [pc, #332]	@ (8006924 <Meas_Init+0x1ec>)
 80067d8:	4b50      	ldr	r3, [pc, #320]	@ (800691c <Meas_Init+0x1e4>)
 80067da:	0019      	movs	r1, r3
 80067dc:	2003      	movs	r0, #3
 80067de:	f003 f9db 	bl	8009b98 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 80067e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006914 <Meas_Init+0x1dc>)
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d009      	beq.n	80067fe <Meas_Init+0xc6>
 80067ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006914 <Meas_Init+0x1dc>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <Meas_Init+0xc6>
      SetDBLED(false, true, false);
 80067f2:	2200      	movs	r2, #0
 80067f4:	2101      	movs	r1, #1
 80067f6:	2000      	movs	r0, #0
 80067f8:	f002 faca 	bl	8008d90 <SetDBLED>
 80067fc:	e018      	b.n	8006830 <Meas_Init+0xf8>
    }
    else{
      SetDBLED(true, false, false);
 80067fe:	2200      	movs	r2, #0
 8006800:	2100      	movs	r1, #0
 8006802:	2001      	movs	r0, #1
 8006804:	f002 fac4 	bl	8008d90 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006808:	4b47      	ldr	r3, [pc, #284]	@ (8006928 <Meas_Init+0x1f0>)
 800680a:	2200      	movs	r2, #0
 800680c:	2101      	movs	r1, #1
 800680e:	0018      	movs	r0, r3
 8006810:	f005 f8e7 	bl	800b9e2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006814:	2380      	movs	r3, #128	@ 0x80
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	4843      	ldr	r0, [pc, #268]	@ (8006928 <Meas_Init+0x1f0>)
 800681a:	2201      	movs	r2, #1
 800681c:	0019      	movs	r1, r3
 800681e:	f005 f8e0 	bl	800b9e2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006822:	2380      	movs	r3, #128	@ 0x80
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4840      	ldr	r0, [pc, #256]	@ (8006928 <Meas_Init+0x1f0>)
 8006828:	2201      	movs	r2, #1
 800682a:	0019      	movs	r1, r3
 800682c:	f005 f8d9 	bl	800b9e2 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8006830:	4b35      	ldr	r3, [pc, #212]	@ (8006908 <Meas_Init+0x1d0>)
 8006832:	78db      	ldrb	r3, [r3, #3]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <Meas_Init+0x10c>
    MIC_Init(micI2s);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	0018      	movs	r0, r3
 800683c:	f000 fa8a 	bl	8006d54 <MIC_Init>
    Meas_TestStart();
 8006840:	f7ff ff56 	bl	80066f0 <Meas_TestStart>
  }
  uint8_t offset = 0;
 8006844:	2547      	movs	r5, #71	@ 0x47
 8006846:	197b      	adds	r3, r7, r5
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 800684c:	197b      	adds	r3, r7, r5
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	197a      	adds	r2, r7, r5
 8006852:	1c59      	adds	r1, r3, #1
 8006854:	7011      	strb	r1, [r2, #0]
 8006856:	4a2c      	ldr	r2, [pc, #176]	@ (8006908 <Meas_Init+0x1d0>)
 8006858:	7814      	ldrb	r4, [r2, #0]
 800685a:	4a34      	ldr	r2, [pc, #208]	@ (800692c <Meas_Init+0x1f4>)
 800685c:	0119      	lsls	r1, r3, #4
 800685e:	4834      	ldr	r0, [pc, #208]	@ (8006930 <Meas_Init+0x1f8>)
 8006860:	5088      	str	r0, [r1, r2]
 8006862:	4932      	ldr	r1, [pc, #200]	@ (800692c <Meas_Init+0x1f4>)
 8006864:	011a      	lsls	r2, r3, #4
 8006866:	188a      	adds	r2, r1, r2
 8006868:	3204      	adds	r2, #4
 800686a:	4932      	ldr	r1, [pc, #200]	@ (8006934 <Meas_Init+0x1fc>)
 800686c:	6011      	str	r1, [r2, #0]
 800686e:	492f      	ldr	r1, [pc, #188]	@ (800692c <Meas_Init+0x1f4>)
 8006870:	011a      	lsls	r2, r3, #4
 8006872:	188a      	adds	r2, r1, r2
 8006874:	3208      	adds	r2, #8
 8006876:	4930      	ldr	r1, [pc, #192]	@ (8006938 <Meas_Init+0x200>)
 8006878:	6011      	str	r1, [r2, #0]
 800687a:	4a2c      	ldr	r2, [pc, #176]	@ (800692c <Meas_Init+0x1f4>)
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	18d3      	adds	r3, r2, r3
 8006880:	330c      	adds	r3, #12
 8006882:	1c22      	adds	r2, r4, #0
 8006884:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8006886:	197b      	adds	r3, r7, r5
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	197a      	adds	r2, r7, r5
 800688c:	1c59      	adds	r1, r3, #1
 800688e:	7011      	strb	r1, [r2, #0]
 8006890:	4a1d      	ldr	r2, [pc, #116]	@ (8006908 <Meas_Init+0x1d0>)
 8006892:	7854      	ldrb	r4, [r2, #1]
 8006894:	4a25      	ldr	r2, [pc, #148]	@ (800692c <Meas_Init+0x1f4>)
 8006896:	0119      	lsls	r1, r3, #4
 8006898:	4828      	ldr	r0, [pc, #160]	@ (800693c <Meas_Init+0x204>)
 800689a:	5088      	str	r0, [r1, r2]
 800689c:	4923      	ldr	r1, [pc, #140]	@ (800692c <Meas_Init+0x1f4>)
 800689e:	011a      	lsls	r2, r3, #4
 80068a0:	188a      	adds	r2, r1, r2
 80068a2:	3204      	adds	r2, #4
 80068a4:	4926      	ldr	r1, [pc, #152]	@ (8006940 <Meas_Init+0x208>)
 80068a6:	6011      	str	r1, [r2, #0]
 80068a8:	4920      	ldr	r1, [pc, #128]	@ (800692c <Meas_Init+0x1f4>)
 80068aa:	011a      	lsls	r2, r3, #4
 80068ac:	188a      	adds	r2, r1, r2
 80068ae:	3208      	adds	r2, #8
 80068b0:	4924      	ldr	r1, [pc, #144]	@ (8006944 <Meas_Init+0x20c>)
 80068b2:	6011      	str	r1, [r2, #0]
 80068b4:	4a1d      	ldr	r2, [pc, #116]	@ (800692c <Meas_Init+0x1f4>)
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	18d3      	adds	r3, r2, r3
 80068ba:	330c      	adds	r3, #12
 80068bc:	1c22      	adds	r2, r4, #0
 80068be:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 80068c0:	197b      	adds	r3, r7, r5
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	197a      	adds	r2, r7, r5
 80068c6:	1c59      	adds	r1, r3, #1
 80068c8:	7011      	strb	r1, [r2, #0]
 80068ca:	4a0f      	ldr	r2, [pc, #60]	@ (8006908 <Meas_Init+0x1d0>)
 80068cc:	7894      	ldrb	r4, [r2, #2]
 80068ce:	4a17      	ldr	r2, [pc, #92]	@ (800692c <Meas_Init+0x1f4>)
 80068d0:	0119      	lsls	r1, r3, #4
 80068d2:	481d      	ldr	r0, [pc, #116]	@ (8006948 <Meas_Init+0x210>)
 80068d4:	5088      	str	r0, [r1, r2]
 80068d6:	4915      	ldr	r1, [pc, #84]	@ (800692c <Meas_Init+0x1f4>)
 80068d8:	011a      	lsls	r2, r3, #4
 80068da:	188a      	adds	r2, r1, r2
 80068dc:	3204      	adds	r2, #4
 80068de:	491b      	ldr	r1, [pc, #108]	@ (800694c <Meas_Init+0x214>)
 80068e0:	6011      	str	r1, [r2, #0]
 80068e2:	4912      	ldr	r1, [pc, #72]	@ (800692c <Meas_Init+0x1f4>)
 80068e4:	011a      	lsls	r2, r3, #4
 80068e6:	188a      	adds	r2, r1, r2
 80068e8:	3208      	adds	r2, #8
 80068ea:	4919      	ldr	r1, [pc, #100]	@ (8006950 <Meas_Init+0x218>)
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	4a0f      	ldr	r2, [pc, #60]	@ (800692c <Meas_Init+0x1f4>)
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	18d3      	adds	r3, r2, r3
 80068f4:	330c      	adds	r3, #12
 80068f6:	1c22      	adds	r2, r4, #0
 80068f8:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b012      	add	sp, #72	@ 0x48
 8006900:	bdb0      	pop	{r4, r5, r7, pc}
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	20001084 	.word	0x20001084
 8006908:	2000107c 	.word	0x2000107c
 800690c:	0801b8f4 	.word	0x0801b8f4
 8006910:	0801b924 	.word	0x0801b924
 8006914:	20001080 	.word	0x20001080
 8006918:	0801b928 	.word	0x0801b928
 800691c:	0801b954 	.word	0x0801b954
 8006920:	0801b958 	.word	0x0801b958
 8006924:	0801b974 	.word	0x0801b974
 8006928:	50000400 	.word	0x50000400
 800692c:	2000104c 	.word	0x2000104c
 8006930:	0800665d 	.word	0x0800665d
 8006934:	0800666d 	.word	0x0800666d
 8006938:	20001048 	.word	0x20001048
 800693c:	0800668d 	.word	0x0800668d
 8006940:	0800669d 	.word	0x0800669d
 8006944:	20001049 	.word	0x20001049
 8006948:	080066b5 	.word	0x080066b5
 800694c:	080066bf 	.word	0x080066bf
 8006950:	2000104a 	.word	0x2000104a

08006954 <StartMeasurements>:

void StartMeasurements(void) {
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006958:	4b10      	ldr	r3, [pc, #64]	@ (800699c <StartMeasurements+0x48>)
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	e015      	b.n	800698c <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006960:	4b0e      	ldr	r3, [pc, #56]	@ (800699c <StartMeasurements+0x48>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	4a0e      	ldr	r2, [pc, #56]	@ (80069a0 <StartMeasurements+0x4c>)
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	18d3      	adds	r3, r2, r3
 800696a:	330c      	adds	r3, #12
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d006      	beq.n	8006980 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8006972:	4b0a      	ldr	r3, [pc, #40]	@ (800699c <StartMeasurements+0x48>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	001a      	movs	r2, r3
 8006978:	4b09      	ldr	r3, [pc, #36]	@ (80069a0 <StartMeasurements+0x4c>)
 800697a:	0112      	lsls	r2, r2, #4
 800697c:	58d3      	ldr	r3, [r2, r3]
 800697e:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006980:	4b06      	ldr	r3, [pc, #24]	@ (800699c <StartMeasurements+0x48>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	b2da      	uxtb	r2, r3
 8006988:	4b04      	ldr	r3, [pc, #16]	@ (800699c <StartMeasurements+0x48>)
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	4b03      	ldr	r3, [pc, #12]	@ (800699c <StartMeasurements+0x48>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d9e5      	bls.n	8006960 <StartMeasurements+0xc>
    }
  }
}
 8006994:	46c0      	nop			@ (mov r8, r8)
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	20001086 	.word	0x20001086
 80069a0:	2000104c 	.word	0x2000104c

080069a4 <Meas_Test>:

void Meas_Test(){
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 80069a8:	4b21      	ldr	r3, [pc, #132]	@ (8006a30 <Meas_Test+0x8c>)
 80069aa:	78db      	ldrb	r3, [r3, #3]
 80069ac:	2201      	movs	r2, #1
 80069ae:	4053      	eors	r3, r2
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <Meas_Test+0x16>
    ESP_WakeTest();
 80069b6:	f7fe f825 	bl	8004a04 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 80069ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006a30 <Meas_Test+0x8c>)
 80069bc:	789b      	ldrb	r3, [r3, #2]
 80069be:	2201      	movs	r2, #1
 80069c0:	4053      	eors	r3, r2
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d017      	beq.n	80069f8 <Meas_Test+0x54>
    if(MIC_IsTestMeasurementDoneWrapper()){
 80069c8:	f7ff fe99 	bl	80066fe <MIC_IsTestMeasurementDoneWrapper>
 80069cc:	1e03      	subs	r3, r0, #0
 80069ce:	d00b      	beq.n	80069e8 <Meas_Test+0x44>
      MeasTest.MIC_Tested = true;
 80069d0:	4b17      	ldr	r3, [pc, #92]	@ (8006a30 <Meas_Test+0x8c>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	709a      	strb	r2, [r3, #2]
      SetStatusLED(4000, 3000, 4000);
 80069d6:	23fa      	movs	r3, #250	@ 0xfa
 80069d8:	011a      	lsls	r2, r3, #4
 80069da:	4916      	ldr	r1, [pc, #88]	@ (8006a34 <Meas_Test+0x90>)
 80069dc:	23fa      	movs	r3, #250	@ 0xfa
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	0018      	movs	r0, r3
 80069e2:	f002 f9a1 	bl	8008d28 <SetStatusLED>
 80069e6:	e007      	b.n	80069f8 <Meas_Test+0x54>
    }
    else{
      SetStatusLED(3000, 4000, 4000);
 80069e8:	23fa      	movs	r3, #250	@ 0xfa
 80069ea:	011a      	lsls	r2, r3, #4
 80069ec:	23fa      	movs	r3, #250	@ 0xfa
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	4810      	ldr	r0, [pc, #64]	@ (8006a34 <Meas_Test+0x90>)
 80069f2:	0019      	movs	r1, r3
 80069f4:	f002 f998 	bl	8008d28 <SetStatusLED>
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 80069f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006a30 <Meas_Test+0x8c>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d013      	beq.n	8006a28 <Meas_Test+0x84>
 8006a00:	4b0b      	ldr	r3, [pc, #44]	@ (8006a30 <Meas_Test+0x8c>)
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00f      	beq.n	8006a28 <Meas_Test+0x84>
 8006a08:	4b09      	ldr	r3, [pc, #36]	@ (8006a30 <Meas_Test+0x8c>)
 8006a0a:	78db      	ldrb	r3, [r3, #3]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <Meas_Test+0x84>
 8006a10:	4b07      	ldr	r3, [pc, #28]	@ (8006a30 <Meas_Test+0x8c>)
 8006a12:	789b      	ldrb	r3, [r3, #2]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d007      	beq.n	8006a28 <Meas_Test+0x84>
    Debug("Test completed");
 8006a18:	4a07      	ldr	r2, [pc, #28]	@ (8006a38 <Meas_Test+0x94>)
 8006a1a:	4b08      	ldr	r3, [pc, #32]	@ (8006a3c <Meas_Test+0x98>)
 8006a1c:	0019      	movs	r1, r3
 8006a1e:	2003      	movs	r0, #3
 8006a20:	f003 f8ba 	bl	8009b98 <CreateLine>
    SetTestDone();
 8006a24:	f7ff fc90 	bl	8006348 <SetTestDone>
  }
}
 8006a28:	46c0      	nop			@ (mov r8, r8)
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			@ (mov r8, r8)
 8006a30:	20001080 	.word	0x20001080
 8006a34:	00000bb8 	.word	0x00000bb8
 8006a38:	0801b98c 	.word	0x0801b98c
 8006a3c:	0801b954 	.word	0x0801b954

08006a40 <ResetMeasurements>:
void ResetMeasurements(void) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8006a44:	4b0b      	ldr	r3, [pc, #44]	@ (8006a74 <ResetMeasurements+0x34>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <ResetMeasurements+0x34>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006a50:	4b08      	ldr	r3, [pc, #32]	@ (8006a74 <ResetMeasurements+0x34>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8006a56:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <ResetMeasurements+0x34>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <ResetMeasurements+0x34>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8006a62:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <ResetMeasurements+0x34>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8006a68:	4b02      	ldr	r3, [pc, #8]	@ (8006a74 <ResetMeasurements+0x34>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	73da      	strb	r2, [r3, #15]
}
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	2000103c 	.word	0x2000103c

08006a78 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006a7c:	4b18      	ldr	r3, [pc, #96]	@ (8006ae0 <MeasurementsCompleted+0x68>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	e024      	b.n	8006ace <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006a84:	4b16      	ldr	r3, [pc, #88]	@ (8006ae0 <MeasurementsCompleted+0x68>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	4a16      	ldr	r2, [pc, #88]	@ (8006ae4 <MeasurementsCompleted+0x6c>)
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	18d3      	adds	r3, r2, r3
 8006a8e:	330c      	adds	r3, #12
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d015      	beq.n	8006ac2 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8006a96:	4b12      	ldr	r3, [pc, #72]	@ (8006ae0 <MeasurementsCompleted+0x68>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	4a12      	ldr	r2, [pc, #72]	@ (8006ae4 <MeasurementsCompleted+0x6c>)
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	18d3      	adds	r3, r2, r3
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4798      	blx	r3
 8006aa6:	1e03      	subs	r3, r0, #0
 8006aa8:	d009      	beq.n	8006abe <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae0 <MeasurementsCompleted+0x68>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	4a0d      	ldr	r2, [pc, #52]	@ (8006ae4 <MeasurementsCompleted+0x6c>)
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	18d3      	adds	r3, r2, r3
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e001      	b.n	8006ac2 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e00a      	b.n	8006ad8 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006ac2:	4b07      	ldr	r3, [pc, #28]	@ (8006ae0 <MeasurementsCompleted+0x68>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	4b05      	ldr	r3, [pc, #20]	@ (8006ae0 <MeasurementsCompleted+0x68>)
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	4b04      	ldr	r3, [pc, #16]	@ (8006ae0 <MeasurementsCompleted+0x68>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d9d6      	bls.n	8006a84 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8006ad6:	2301      	movs	r3, #1
}
 8006ad8:	0018      	movs	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	46c0      	nop			@ (mov r8, r8)
 8006ae0:	20001086 	.word	0x20001086
 8006ae4:	2000104c 	.word	0x2000104c

08006ae8 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  switch(MicState){
 8006aec:	4b21      	ldr	r3, [pc, #132]	@ (8006b74 <Mic_Upkeep+0x8c>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d022      	beq.n	8006b3a <Mic_Upkeep+0x52>
 8006af4:	dc2c      	bgt.n	8006b50 <Mic_Upkeep+0x68>
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d00f      	beq.n	8006b1a <Mic_Upkeep+0x32>
 8006afa:	dc29      	bgt.n	8006b50 <Mic_Upkeep+0x68>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <Mic_Upkeep+0x1e>
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d004      	beq.n	8006b0e <Mic_Upkeep+0x26>
 8006b04:	e024      	b.n	8006b50 <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 8006b06:	4b1b      	ldr	r3, [pc, #108]	@ (8006b74 <Mic_Upkeep+0x8c>)
 8006b08:	2201      	movs	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
    break;
 8006b0c:	e02d      	b.n	8006b6a <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 8006b0e:	f7ff fddc 	bl	80066ca <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8006b12:	4b18      	ldr	r3, [pc, #96]	@ (8006b74 <Mic_Upkeep+0x8c>)
 8006b14:	2202      	movs	r2, #2
 8006b16:	701a      	strb	r2, [r3, #0]
    break;
 8006b18:	e027      	b.n	8006b6a <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 8006b1a:	f7ff fde1 	bl	80066e0 <MIC_IsMeasurementDoneWrapper>
 8006b1e:	1e03      	subs	r3, r0, #0
 8006b20:	d020      	beq.n	8006b64 <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 8006b22:	4b14      	ldr	r3, [pc, #80]	@ (8006b74 <Mic_Upkeep+0x8c>)
 8006b24:	2203      	movs	r2, #3
 8006b26:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 8006b28:	f003 fbbc 	bl	800a2a4 <HAL_GetTick>
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	22fa      	movs	r2, #250	@ 0xfa
 8006b30:	0092      	lsls	r2, r2, #2
 8006b32:	189a      	adds	r2, r3, r2
 8006b34:	4b10      	ldr	r3, [pc, #64]	@ (8006b78 <Mic_Upkeep+0x90>)
 8006b36:	601a      	str	r2, [r3, #0]
    }
    break;
 8006b38:	e014      	b.n	8006b64 <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8006b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b78 <Mic_Upkeep+0x90>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f002 ffd4 	bl	8009aec <TimestampIsReached>
 8006b44:	1e03      	subs	r3, r0, #0
 8006b46:	d00f      	beq.n	8006b68 <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 8006b48:	4b0a      	ldr	r3, [pc, #40]	@ (8006b74 <Mic_Upkeep+0x8c>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006b4e:	e00b      	b.n	8006b68 <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006b50:	4a0a      	ldr	r2, [pc, #40]	@ (8006b7c <Mic_Upkeep+0x94>)
 8006b52:	4b0b      	ldr	r3, [pc, #44]	@ (8006b80 <Mic_Upkeep+0x98>)
 8006b54:	0019      	movs	r1, r3
 8006b56:	2003      	movs	r0, #3
 8006b58:	f003 f81e 	bl	8009b98 <CreateLine>
    MicState = MIC_STATE_INIT;
 8006b5c:	4b05      	ldr	r3, [pc, #20]	@ (8006b74 <Mic_Upkeep+0x8c>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]
    break;
 8006b62:	e002      	b.n	8006b6a <Mic_Upkeep+0x82>
    break;
 8006b64:	46c0      	nop			@ (mov r8, r8)
 8006b66:	e000      	b.n	8006b6a <Mic_Upkeep+0x82>
    break;
 8006b68:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8006b6a:	4b02      	ldr	r3, [pc, #8]	@ (8006b74 <Mic_Upkeep+0x8c>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20001085 	.word	0x20001085
 8006b78:	2000108c 	.word	0x2000108c
 8006b7c:	0801b99c 	.word	0x0801b99c
 8006b80:	0801b954 	.word	0x0801b954

08006b84 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8006b84:	b5b0      	push	{r4, r5, r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8006b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c7c <Meas_Upkeep+0xf8>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b06      	cmp	r3, #6
 8006b90:	d868      	bhi.n	8006c64 <Meas_Upkeep+0xe0>
 8006b92:	009a      	lsls	r2, r3, #2
 8006b94:	4b3a      	ldr	r3, [pc, #232]	@ (8006c80 <Meas_Upkeep+0xfc>)
 8006b96:	18d3      	adds	r3, r2, r3
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8006b9c:	4a39      	ldr	r2, [pc, #228]	@ (8006c84 <Meas_Upkeep+0x100>)
 8006b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c88 <Meas_Upkeep+0x104>)
 8006ba0:	0019      	movs	r1, r3
 8006ba2:	2003      	movs	r0, #3
 8006ba4:	f002 fff8 	bl	8009b98 <CreateLine>
    break;
 8006ba8:	e063      	b.n	8006c72 <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8006baa:	f7ff ff49 	bl	8006a40 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8006bae:	4b33      	ldr	r3, [pc, #204]	@ (8006c7c <Meas_Upkeep+0xf8>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	701a      	strb	r2, [r3, #0]
    break;
 8006bb4:	e05d      	b.n	8006c72 <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8006bb6:	f7ff fecd 	bl	8006954 <StartMeasurements>
    SetMeasurementIndicator();
 8006bba:	f002 f967 	bl	8008e8c <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8006bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8006c7c <Meas_Upkeep+0xf8>)
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	701a      	strb	r2, [r3, #0]
   break;
 8006bc4:	e055      	b.n	8006c72 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8006bc6:	f7ff ff57 	bl	8006a78 <MeasurementsCompleted>
 8006bca:	1e03      	subs	r3, r0, #0
 8006bcc:	d04e      	beq.n	8006c6c <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8006bce:	4b2b      	ldr	r3, [pc, #172]	@ (8006c7c <Meas_Upkeep+0xf8>)
 8006bd0:	2203      	movs	r2, #3
 8006bd2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006bd4:	e04a      	b.n	8006c6c <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8006bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8006c8c <Meas_Upkeep+0x108>)
 8006bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006c88 <Meas_Upkeep+0x104>)
 8006bda:	0019      	movs	r1, r3
 8006bdc:	2003      	movs	r0, #3
 8006bde:	f002 ffdb 	bl	8009b98 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8006be2:	4b2b      	ldr	r3, [pc, #172]	@ (8006c90 <Meas_Upkeep+0x10c>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	4a2b      	ldr	r2, [pc, #172]	@ (8006c94 <Meas_Upkeep+0x110>)
 8006be8:	4927      	ldr	r1, [pc, #156]	@ (8006c88 <Meas_Upkeep+0x104>)
 8006bea:	2003      	movs	r0, #3
 8006bec:	f002 ffd4 	bl	8009b98 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8006bf0:	4b27      	ldr	r3, [pc, #156]	@ (8006c90 <Meas_Upkeep+0x10c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	1c18      	adds	r0, r3, #0
 8006bf6:	f7fc fbb3 	bl	8003360 <__aeabi_f2d>
 8006bfa:	0004      	movs	r4, r0
 8006bfc:	000d      	movs	r5, r1
 8006bfe:	4b24      	ldr	r3, [pc, #144]	@ (8006c90 <Meas_Upkeep+0x10c>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	1c18      	adds	r0, r3, #0
 8006c04:	f7fc fbac 	bl	8003360 <__aeabi_f2d>
 8006c08:	0002      	movs	r2, r0
 8006c0a:	000b      	movs	r3, r1
 8006c0c:	4822      	ldr	r0, [pc, #136]	@ (8006c98 <Meas_Upkeep+0x114>)
 8006c0e:	491e      	ldr	r1, [pc, #120]	@ (8006c88 <Meas_Upkeep+0x104>)
 8006c10:	9202      	str	r2, [sp, #8]
 8006c12:	9303      	str	r3, [sp, #12]
 8006c14:	9400      	str	r4, [sp, #0]
 8006c16:	9501      	str	r5, [sp, #4]
 8006c18:	0002      	movs	r2, r0
 8006c1a:	2003      	movs	r0, #3
 8006c1c:	f002 ffbc 	bl	8009b98 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006c20:	4b1b      	ldr	r3, [pc, #108]	@ (8006c90 <Meas_Upkeep+0x10c>)
 8006c22:	6858      	ldr	r0, [r3, #4]
 8006c24:	4b1a      	ldr	r3, [pc, #104]	@ (8006c90 <Meas_Upkeep+0x10c>)
 8006c26:	6819      	ldr	r1, [r3, #0]
 8006c28:	4b19      	ldr	r3, [pc, #100]	@ (8006c90 <Meas_Upkeep+0x10c>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	001a      	movs	r2, r3
 8006c30:	f7fc fd5a 	bl	80036e8 <setMeasurement>
    ResetMeasurementIndicator();
 8006c34:	f002 f942 	bl	8008ebc <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8006c38:	f003 fb34 	bl	800a2a4 <HAL_GetTick>
 8006c3c:	0003      	movs	r3, r0
 8006c3e:	4a17      	ldr	r2, [pc, #92]	@ (8006c9c <Meas_Upkeep+0x118>)
 8006c40:	189a      	adds	r2, r3, r2
 8006c42:	4b17      	ldr	r3, [pc, #92]	@ (8006ca0 <Meas_Upkeep+0x11c>)
 8006c44:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8006c46:	4b0d      	ldr	r3, [pc, #52]	@ (8006c7c <Meas_Upkeep+0xf8>)
 8006c48:	2206      	movs	r2, #6
 8006c4a:	701a      	strb	r2, [r3, #0]
    break;
 8006c4c:	e011      	b.n	8006c72 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8006c4e:	4b14      	ldr	r3, [pc, #80]	@ (8006ca0 <Meas_Upkeep+0x11c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f002 ff4a 	bl	8009aec <TimestampIsReached>
 8006c58:	1e03      	subs	r3, r0, #0
 8006c5a:	d009      	beq.n	8006c70 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8006c5c:	4b07      	ldr	r3, [pc, #28]	@ (8006c7c <Meas_Upkeep+0xf8>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
    }

    break;
 8006c62:	e005      	b.n	8006c70 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006c64:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <Meas_Upkeep+0xf8>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
    break;
 8006c6a:	e002      	b.n	8006c72 <Meas_Upkeep+0xee>
    break;
 8006c6c:	46c0      	nop			@ (mov r8, r8)
 8006c6e:	e000      	b.n	8006c72 <Meas_Upkeep+0xee>
    break;
 8006c70:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8006c72:	4b02      	ldr	r3, [pc, #8]	@ (8006c7c <Meas_Upkeep+0xf8>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
}
 8006c76:	0018      	movs	r0, r3
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c7c:	20001084 	.word	0x20001084
 8006c80:	0801c0d8 	.word	0x0801c0d8
 8006c84:	0801b9bc 	.word	0x0801b9bc
 8006c88:	0801b954 	.word	0x0801b954
 8006c8c:	0801b9dc 	.word	0x0801b9dc
 8006c90:	2000103c 	.word	0x2000103c
 8006c94:	0801b9f0 	.word	0x0801b9f0
 8006c98:	0801ba08 	.word	0x0801ba08
 8006c9c:	00002710 	.word	0x00002710
 8006ca0:	20001088 	.word	0x20001088

08006ca4 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006ca4:	b590      	push	{r4, r7, lr}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	1d3b      	adds	r3, r7, #4
 8006cac:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8006cae:	240f      	movs	r4, #15
 8006cb0:	193b      	adds	r3, r7, r4
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8006cb6:	4b20      	ldr	r3, [pc, #128]	@ (8006d38 <Meas_SetEnabledSensors+0x94>)
 8006cb8:	1d3a      	adds	r2, r7, #4
 8006cba:	6812      	ldr	r2, [r2, #0]
 8006cbc:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8006cbe:	193b      	adds	r3, r7, r4
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	193a      	adds	r2, r7, r4
 8006cc4:	1c59      	adds	r1, r3, #1
 8006cc6:	7011      	strb	r1, [r2, #0]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	1d3b      	adds	r3, r7, #4
 8006ccc:	7819      	ldrb	r1, [r3, #0]
 8006cce:	4a1b      	ldr	r2, [pc, #108]	@ (8006d3c <Meas_SetEnabledSensors+0x98>)
 8006cd0:	0103      	lsls	r3, r0, #4
 8006cd2:	18d3      	adds	r3, r2, r3
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	1c0a      	adds	r2, r1, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8006cda:	193b      	adds	r3, r7, r4
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	193a      	adds	r2, r7, r4
 8006ce0:	1c59      	adds	r1, r3, #1
 8006ce2:	7011      	strb	r1, [r2, #0]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	1d3b      	adds	r3, r7, #4
 8006ce8:	7859      	ldrb	r1, [r3, #1]
 8006cea:	4a14      	ldr	r2, [pc, #80]	@ (8006d3c <Meas_SetEnabledSensors+0x98>)
 8006cec:	0103      	lsls	r3, r0, #4
 8006cee:	18d3      	adds	r3, r2, r3
 8006cf0:	330c      	adds	r3, #12
 8006cf2:	1c0a      	adds	r2, r1, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8006cf6:	193b      	adds	r3, r7, r4
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	193a      	adds	r2, r7, r4
 8006cfc:	1c59      	adds	r1, r3, #1
 8006cfe:	7011      	strb	r1, [r2, #0]
 8006d00:	0018      	movs	r0, r3
 8006d02:	1d3b      	adds	r3, r7, #4
 8006d04:	7899      	ldrb	r1, [r3, #2]
 8006d06:	4a0d      	ldr	r2, [pc, #52]	@ (8006d3c <Meas_SetEnabledSensors+0x98>)
 8006d08:	0103      	lsls	r3, r0, #4
 8006d0a:	18d3      	adds	r3, r2, r3
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	1c0a      	adds	r2, r1, #0
 8006d10:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8006d12:	193b      	adds	r3, r7, r4
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	193a      	adds	r2, r7, r4
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	7011      	strb	r1, [r2, #0]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	1d3b      	adds	r3, r7, #4
 8006d20:	78d9      	ldrb	r1, [r3, #3]
 8006d22:	4a06      	ldr	r2, [pc, #24]	@ (8006d3c <Meas_SetEnabledSensors+0x98>)
 8006d24:	0103      	lsls	r3, r0, #4
 8006d26:	18d3      	adds	r3, r2, r3
 8006d28:	330c      	adds	r3, #12
 8006d2a:	1c0a      	adds	r2, r1, #0
 8006d2c:	701a      	strb	r2, [r3, #0]
}
 8006d2e:	46c0      	nop			@ (mov r8, r8)
 8006d30:	46bd      	mov	sp, r7
 8006d32:	b005      	add	sp, #20
 8006d34:	bd90      	pop	{r4, r7, pc}
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	2000107c 	.word	0x2000107c
 8006d3c:	2000104c 	.word	0x2000104c

08006d40 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8006d40:	b580      	push	{r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006d44:	4b02      	ldr	r3, [pc, #8]	@ (8006d50 <SetESPMeasurementDone+0x10>)
 8006d46:	2201      	movs	r2, #1
 8006d48:	70da      	strb	r2, [r3, #3]
}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20001080 	.word	0x20001080

08006d54 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	4b03      	ldr	r3, [pc, #12]	@ (8006d6c <MIC_Init+0x18>)
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	46c0      	nop			@ (mov r8, r8)
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b002      	add	sp, #8
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	46c0      	nop			@ (mov r8, r8)
 8006d6c:	20001090 	.word	0x20001090

08006d70 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006d78:	4b0c      	ldr	r3, [pc, #48]	@ (8006dac <UpdateSampleRate+0x3c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d00e      	beq.n	8006da2 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006d84:	4b09      	ldr	r3, [pc, #36]	@ (8006dac <UpdateSampleRate+0x3c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f006 ff49 	bl	800dc20 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006d8e:	4b07      	ldr	r3, [pc, #28]	@ (8006dac <UpdateSampleRate+0x3c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006d96:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <UpdateSampleRate+0x3c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f006 fe4e 	bl	800da3c <HAL_I2S_Init>
 8006da0:	e000      	b.n	8006da4 <UpdateSampleRate+0x34>
    return;
 8006da2:	46c0      	nop			@ (mov r8, r8)
}
 8006da4:	46bd      	mov	sp, r7
 8006da6:	b002      	add	sp, #8
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	20001090 	.word	0x20001090

08006db0 <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006db8:	4b18      	ldr	r3, [pc, #96]	@ (8006e1c <ConvertAudio+0x6c>)
 8006dba:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	5e9b      	ldrsh	r3, [r3, r2]
 8006dca:	025b      	lsls	r3, r3, #9
 8006dcc:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	5e9b      	ldrsh	r3, [r3, r2]
 8006dd6:	11db      	asrs	r3, r3, #7
 8006dd8:	05db      	lsls	r3, r3, #23
 8006dda:	0ddb      	lsrs	r3, r3, #23
 8006ddc:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	4013      	ands	r3, r2
 8006dee:	d004      	beq.n	8006dfa <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	22ff      	movs	r2, #255	@ 0xff
 8006df4:	0612      	lsls	r2, r2, #24
 8006df6:	4313      	orrs	r3, r2
 8006df8:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006dfe:	68b8      	ldr	r0, [r7, #8]
 8006e00:	f7fa fb64 	bl	80014cc <__aeabi_i2f>
 8006e04:	1c03      	adds	r3, r0, #0
 8006e06:	69b9      	ldr	r1, [r7, #24]
 8006e08:	1c18      	adds	r0, r3, #0
 8006e0a:	f7f9 fe61 	bl	8000ad0 <__aeabi_fdiv>
 8006e0e:	1c03      	adds	r3, r0, #0
 8006e10:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006e12:	697b      	ldr	r3, [r7, #20]
}
 8006e14:	1c18      	adds	r0, r3, #0
 8006e16:	46bd      	mov	sp, r7
 8006e18:	b008      	add	sp, #32
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	4afffffe 	.word	0x4afffffe

08006e20 <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006e20:	b5b0      	push	{r4, r5, r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	000a      	movs	r2, r1
 8006e2a:	1cbb      	adds	r3, r7, #2
 8006e2c:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8006e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8006eac <MIC_Start+0x8c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d106      	bne.n	8006e44 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006e36:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb0 <MIC_Start+0x90>)
 8006e38:	4b1e      	ldr	r3, [pc, #120]	@ (8006eb4 <MIC_Start+0x94>)
 8006e3a:	0019      	movs	r1, r3
 8006e3c:	2001      	movs	r0, #1
 8006e3e:	f002 feab 	bl	8009b98 <CreateLine>
    return;
 8006e42:	e02f      	b.n	8006ea4 <MIC_Start+0x84>
  }
  SetMICIndicator();
 8006e44:	f002 f850 	bl	8008ee8 <SetMICIndicator>
  Debug("In mic start");
 8006e48:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb8 <MIC_Start+0x98>)
 8006e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8006ebc <MIC_Start+0x9c>)
 8006e4c:	0019      	movs	r1, r3
 8006e4e:	2003      	movs	r0, #3
 8006e50:	f002 fea2 	bl	8009b98 <CreateLine>
  UpdateSampleRate(sampleRate);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7ff ff8a 	bl	8006d70 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006e5c:	4b18      	ldr	r3, [pc, #96]	@ (8006ec0 <MIC_Start+0xa0>)
 8006e5e:	1cba      	adds	r2, r7, #2
 8006e60:	8812      	ldrh	r2, [r2, #0]
 8006e62:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006e64:	f003 fa1e 	bl	800a2a4 <HAL_GetTick>
 8006e68:	0003      	movs	r3, r0
 8006e6a:	3314      	adds	r3, #20
 8006e6c:	001a      	movs	r2, r3
 8006e6e:	4b15      	ldr	r3, [pc, #84]	@ (8006ec4 <MIC_Start+0xa4>)
 8006e70:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006e72:	4b15      	ldr	r3, [pc, #84]	@ (8006ec8 <MIC_Start+0xa8>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006e78:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <MIC_Start+0xac>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006eac <MIC_Start+0x8c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	250f      	movs	r5, #15
 8006e84:	197c      	adds	r4, r7, r5
 8006e86:	2280      	movs	r2, #128	@ 0x80
 8006e88:	00d2      	lsls	r2, r2, #3
 8006e8a:	4911      	ldr	r1, [pc, #68]	@ (8006ed0 <MIC_Start+0xb0>)
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	f006 fef3 	bl	800dc78 <HAL_I2S_Receive_DMA>
 8006e92:	0003      	movs	r3, r0
 8006e94:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006e96:	197b      	adds	r3, r7, r5
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8006ed4 <MIC_Start+0xb4>)
 8006e9c:	490e      	ldr	r1, [pc, #56]	@ (8006ed8 <MIC_Start+0xb8>)
 8006e9e:	2002      	movs	r0, #2
 8006ea0:	f002 fe7a 	bl	8009b98 <CreateLine>
}
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	b004      	add	sp, #16
 8006ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8006eaa:	46c0      	nop			@ (mov r8, r8)
 8006eac:	20001090 	.word	0x20001090
 8006eb0:	0801ba3c 	.word	0x0801ba3c
 8006eb4:	0801ba5c 	.word	0x0801ba5c
 8006eb8:	0801ba60 	.word	0x0801ba60
 8006ebc:	0801ba70 	.word	0x0801ba70
 8006ec0:	2000002c 	.word	0x2000002c
 8006ec4:	20002094 	.word	0x20002094
 8006ec8:	20002098 	.word	0x20002098
 8006ecc:	20002099 	.word	0x20002099
 8006ed0:	20001094 	.word	0x20001094
 8006ed4:	0801ba74 	.word	0x0801ba74
 8006ed8:	0801ba80 	.word	0x0801ba80

08006edc <MinimalValue>:

float MinimalValue(uint16_t length){
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	0002      	movs	r2, r0
 8006ee4:	1dbb      	adds	r3, r7, #6
 8006ee6:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006ee8:	23fe      	movs	r3, #254	@ 0xfe
 8006eea:	059b      	lsls	r3, r3, #22
 8006eec:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006eee:	230a      	movs	r3, #10
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	e01c      	b.n	8006f32 <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006ef8:	240a      	movs	r4, #10
 8006efa:	193b      	adds	r3, r7, r4
 8006efc:	2200      	movs	r2, #0
 8006efe:	5e9a      	ldrsh	r2, [r3, r2]
 8006f00:	4b12      	ldr	r3, [pc, #72]	@ (8006f4c <MinimalValue+0x70>)
 8006f02:	0092      	lsls	r2, r2, #2
 8006f04:	58d3      	ldr	r3, [r2, r3]
 8006f06:	1c19      	adds	r1, r3, #0
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7f9 faf3 	bl	80004f4 <__aeabi_fcmpgt>
 8006f0e:	1e03      	subs	r3, r0, #0
 8006f10:	d006      	beq.n	8006f20 <MinimalValue+0x44>
      MinVal = sample[i];
 8006f12:	193b      	adds	r3, r7, r4
 8006f14:	2200      	movs	r2, #0
 8006f16:	5e9a      	ldrsh	r2, [r3, r2]
 8006f18:	4b0c      	ldr	r3, [pc, #48]	@ (8006f4c <MinimalValue+0x70>)
 8006f1a:	0092      	lsls	r2, r2, #2
 8006f1c:	58d3      	ldr	r3, [r2, r3]
 8006f1e:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006f20:	210a      	movs	r1, #10
 8006f22:	187b      	adds	r3, r7, r1
 8006f24:	2200      	movs	r2, #0
 8006f26:	5e9b      	ldrsh	r3, [r3, r2]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	187b      	adds	r3, r7, r1
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	230a      	movs	r3, #10
 8006f34:	18fb      	adds	r3, r7, r3
 8006f36:	2200      	movs	r2, #0
 8006f38:	5e9a      	ldrsh	r2, [r3, r2]
 8006f3a:	1dbb      	adds	r3, r7, #6
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	dbda      	blt.n	8006ef8 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 8006f42:	68fb      	ldr	r3, [r7, #12]
}
 8006f44:	1c18      	adds	r0, r3, #0
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b005      	add	sp, #20
 8006f4a:	bd90      	pop	{r4, r7, pc}
 8006f4c:	200020d0 	.word	0x200020d0

08006f50 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006f50:	b590      	push	{r4, r7, lr}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	0002      	movs	r2, r0
 8006f58:	1dbb      	adds	r3, r7, #6
 8006f5a:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006f5c:	4b18      	ldr	r3, [pc, #96]	@ (8006fc0 <MaximalValue+0x70>)
 8006f5e:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006f60:	230a      	movs	r3, #10
 8006f62:	18fb      	adds	r3, r7, r3
 8006f64:	2200      	movs	r2, #0
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	e01c      	b.n	8006fa4 <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006f6a:	240a      	movs	r4, #10
 8006f6c:	193b      	adds	r3, r7, r4
 8006f6e:	2200      	movs	r2, #0
 8006f70:	5e9a      	ldrsh	r2, [r3, r2]
 8006f72:	4b14      	ldr	r3, [pc, #80]	@ (8006fc4 <MaximalValue+0x74>)
 8006f74:	0092      	lsls	r2, r2, #2
 8006f76:	58d3      	ldr	r3, [r2, r3]
 8006f78:	1c19      	adds	r1, r3, #0
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7f9 faa6 	bl	80004cc <__aeabi_fcmplt>
 8006f80:	1e03      	subs	r3, r0, #0
 8006f82:	d006      	beq.n	8006f92 <MaximalValue+0x42>
      MaxVal = sample[i];
 8006f84:	193b      	adds	r3, r7, r4
 8006f86:	2200      	movs	r2, #0
 8006f88:	5e9a      	ldrsh	r2, [r3, r2]
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc4 <MaximalValue+0x74>)
 8006f8c:	0092      	lsls	r2, r2, #2
 8006f8e:	58d3      	ldr	r3, [r2, r3]
 8006f90:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006f92:	210a      	movs	r1, #10
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	2200      	movs	r2, #0
 8006f98:	5e9b      	ldrsh	r3, [r3, r2]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	187b      	adds	r3, r7, r1
 8006fa2:	801a      	strh	r2, [r3, #0]
 8006fa4:	230a      	movs	r3, #10
 8006fa6:	18fb      	adds	r3, r7, r3
 8006fa8:	2200      	movs	r2, #0
 8006faa:	5e9a      	ldrsh	r2, [r3, r2]
 8006fac:	1dbb      	adds	r3, r7, #6
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	dbda      	blt.n	8006f6a <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
}
 8006fb6:	1c18      	adds	r0, r3, #0
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	b005      	add	sp, #20
 8006fbc:	bd90      	pop	{r4, r7, pc}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	bf800000 	.word	0xbf800000
 8006fc4:	200020d0 	.word	0x200020d0

08006fc8 <MIC_Check>:
bool MIC_Check(void) {
 8006fc8:	b5b0      	push	{r4, r5, r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006fce:	4a25      	ldr	r2, [pc, #148]	@ (8007064 <MIC_Check+0x9c>)
 8006fd0:	4b25      	ldr	r3, [pc, #148]	@ (8007068 <MIC_Check+0xa0>)
 8006fd2:	0019      	movs	r1, r3
 8006fd4:	2002      	movs	r0, #2
 8006fd6:	f002 fddf 	bl	8009b98 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006fda:	230e      	movs	r3, #14
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	2200      	movs	r2, #0
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	e016      	b.n	8007012 <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006fe4:	210e      	movs	r1, #14
 8006fe6:	187b      	adds	r3, r7, r1
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	3302      	adds	r3, #2
 8006fee:	005a      	lsls	r2, r3, #1
 8006ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800706c <MIC_Check+0xa4>)
 8006ff2:	18d2      	adds	r2, r2, r3
 8006ff4:	000d      	movs	r5, r1
 8006ff6:	187b      	adds	r3, r7, r1
 8006ff8:	881c      	ldrh	r4, [r3, #0]
 8006ffa:	0010      	movs	r0, r2
 8006ffc:	f7ff fed8 	bl	8006db0 <ConvertAudio>
 8007000:	1c01      	adds	r1, r0, #0
 8007002:	4b1b      	ldr	r3, [pc, #108]	@ (8007070 <MIC_Check+0xa8>)
 8007004:	00a2      	lsls	r2, r4, #2
 8007006:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8007008:	197b      	adds	r3, r7, r5
 800700a:	197a      	adds	r2, r7, r5
 800700c:	8812      	ldrh	r2, [r2, #0]
 800700e:	3201      	adds	r2, #1
 8007010:	801a      	strh	r2, [r3, #0]
 8007012:	230e      	movs	r3, #14
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	881a      	ldrh	r2, [r3, #0]
 8007018:	2380      	movs	r3, #128	@ 0x80
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	429a      	cmp	r2, r3
 800701e:	d3e1      	bcc.n	8006fe4 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8007020:	2380      	movs	r3, #128	@ 0x80
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	0018      	movs	r0, r3
 8007026:	f7ff ff93 	bl	8006f50 <MaximalValue>
 800702a:	1c03      	adds	r3, r0, #0
 800702c:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 800702e:	2380      	movs	r3, #128	@ 0x80
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	0018      	movs	r0, r3
 8007034:	f7ff ff52 	bl	8006edc <MinimalValue>
 8007038:	1c03      	adds	r3, r0, #0
 800703a:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 800703c:	2100      	movs	r1, #0
 800703e:	68b8      	ldr	r0, [r7, #8]
 8007040:	f7f9 fa58 	bl	80004f4 <__aeabi_fcmpgt>
 8007044:	1e03      	subs	r3, r0, #0
 8007046:	d105      	bne.n	8007054 <MIC_Check+0x8c>
 8007048:	2100      	movs	r1, #0
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7f9 fa3e 	bl	80004cc <__aeabi_fcmplt>
 8007050:	1e03      	subs	r3, r0, #0
 8007052:	d001      	beq.n	8007058 <MIC_Check+0x90>
    return(true);
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <MIC_Check+0x92>
  }
  return(false);
 8007058:	2300      	movs	r3, #0
}
 800705a:	0018      	movs	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	b004      	add	sp, #16
 8007060:	bdb0      	pop	{r4, r5, r7, pc}
 8007062:	46c0      	nop			@ (mov r8, r8)
 8007064:	0801ba84 	.word	0x0801ba84
 8007068:	0801ba80 	.word	0x0801ba80
 800706c:	20001094 	.word	0x20001094
 8007070:	200020d0 	.word	0x200020d0

08007074 <MIC_Print>:
void MIC_Print(void) {
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
  Info("New samples");
 800707a:	4a8a      	ldr	r2, [pc, #552]	@ (80072a4 <MIC_Print+0x230>)
 800707c:	4b8a      	ldr	r3, [pc, #552]	@ (80072a8 <MIC_Print+0x234>)
 800707e:	0019      	movs	r1, r3
 8007080:	2002      	movs	r0, #2
 8007082:	f002 fd89 	bl	8009b98 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8007086:	1dbb      	adds	r3, r7, #6
 8007088:	2200      	movs	r2, #0
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	e014      	b.n	80070b8 <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 800708e:	1dbb      	adds	r3, r7, #6
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	3302      	adds	r3, #2
 8007096:	005a      	lsls	r2, r3, #1
 8007098:	4b84      	ldr	r3, [pc, #528]	@ (80072ac <MIC_Print+0x238>)
 800709a:	18d2      	adds	r2, r2, r3
 800709c:	1dbb      	adds	r3, r7, #6
 800709e:	881c      	ldrh	r4, [r3, #0]
 80070a0:	0010      	movs	r0, r2
 80070a2:	f7ff fe85 	bl	8006db0 <ConvertAudio>
 80070a6:	1c01      	adds	r1, r0, #0
 80070a8:	4b81      	ldr	r3, [pc, #516]	@ (80072b0 <MIC_Print+0x23c>)
 80070aa:	00a2      	lsls	r2, r4, #2
 80070ac:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80070ae:	1dbb      	adds	r3, r7, #6
 80070b0:	1dba      	adds	r2, r7, #6
 80070b2:	8812      	ldrh	r2, [r2, #0]
 80070b4:	3201      	adds	r2, #1
 80070b6:	801a      	strh	r2, [r3, #0]
 80070b8:	1dbb      	adds	r3, r7, #6
 80070ba:	881a      	ldrh	r2, [r3, #0]
 80070bc:	2380      	movs	r3, #128	@ 0x80
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d3e4      	bcc.n	800708e <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 80070c4:	f000 f976 	bl	80073b4 <MIC_GetDB>
 80070c8:	1c02      	adds	r2, r0, #0
 80070ca:	4b7a      	ldr	r3, [pc, #488]	@ (80072b4 <MIC_Print+0x240>)
 80070cc:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 80070ce:	4b7a      	ldr	r3, [pc, #488]	@ (80072b8 <MIC_Print+0x244>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	d80e      	bhi.n	80070f4 <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 80070d6:	4b78      	ldr	r3, [pc, #480]	@ (80072b8 <MIC_Print+0x244>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	001a      	movs	r2, r3
 80070dc:	4b75      	ldr	r3, [pc, #468]	@ (80072b4 <MIC_Print+0x240>)
 80070de:	6819      	ldr	r1, [r3, #0]
 80070e0:	4b76      	ldr	r3, [pc, #472]	@ (80072bc <MIC_Print+0x248>)
 80070e2:	0092      	lsls	r2, r2, #2
 80070e4:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80070e6:	4b74      	ldr	r3, [pc, #464]	@ (80072b8 <MIC_Print+0x244>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4b72      	ldr	r3, [pc, #456]	@ (80072b8 <MIC_Print+0x244>)
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e013      	b.n	800711c <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 80070f4:	4b70      	ldr	r3, [pc, #448]	@ (80072b8 <MIC_Print+0x244>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 80070fa:	4b6f      	ldr	r3, [pc, #444]	@ (80072b8 <MIC_Print+0x244>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	001a      	movs	r2, r3
 8007100:	4b6c      	ldr	r3, [pc, #432]	@ (80072b4 <MIC_Print+0x240>)
 8007102:	6819      	ldr	r1, [r3, #0]
 8007104:	4b6d      	ldr	r3, [pc, #436]	@ (80072bc <MIC_Print+0x248>)
 8007106:	0092      	lsls	r2, r2, #2
 8007108:	50d1      	str	r1, [r2, r3]
    counter += 1;
 800710a:	4b6b      	ldr	r3, [pc, #428]	@ (80072b8 <MIC_Print+0x244>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	3301      	adds	r3, #1
 8007110:	b2da      	uxtb	r2, r3
 8007112:	4b69      	ldr	r3, [pc, #420]	@ (80072b8 <MIC_Print+0x244>)
 8007114:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8007116:	4b6a      	ldr	r3, [pc, #424]	@ (80072c0 <MIC_Print+0x24c>)
 8007118:	2201      	movs	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 800711c:	4b68      	ldr	r3, [pc, #416]	@ (80072c0 <MIC_Print+0x24c>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2201      	movs	r2, #1
 8007122:	4053      	eors	r3, r2
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <MIC_Print+0xc2>
    setMic(dBc);
 800712a:	4b62      	ldr	r3, [pc, #392]	@ (80072b4 <MIC_Print+0x240>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	1c18      	adds	r0, r3, #0
 8007130:	f7fc faf6 	bl	8003720 <setMic>
 8007134:	e02d      	b.n	8007192 <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 8007136:	4b63      	ldr	r3, [pc, #396]	@ (80072c4 <MIC_Print+0x250>)
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 800713c:	1d7b      	adds	r3, r7, #5
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e013      	b.n	800716c <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 8007144:	1d7b      	adds	r3, r7, #5
 8007146:	781a      	ldrb	r2, [r3, #0]
 8007148:	4b5c      	ldr	r3, [pc, #368]	@ (80072bc <MIC_Print+0x248>)
 800714a:	0092      	lsls	r2, r2, #2
 800714c:	58d2      	ldr	r2, [r2, r3]
 800714e:	4b5d      	ldr	r3, [pc, #372]	@ (80072c4 <MIC_Print+0x250>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	1c19      	adds	r1, r3, #0
 8007154:	1c10      	adds	r0, r2, #0
 8007156:	f7f9 fb31 	bl	80007bc <__aeabi_fadd>
 800715a:	1c03      	adds	r3, r0, #0
 800715c:	1c1a      	adds	r2, r3, #0
 800715e:	4b59      	ldr	r3, [pc, #356]	@ (80072c4 <MIC_Print+0x250>)
 8007160:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8007162:	1d7b      	adds	r3, r7, #5
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	1d7b      	adds	r3, r7, #5
 8007168:	3201      	adds	r2, #1
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	1d7b      	adds	r3, r7, #5
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b09      	cmp	r3, #9
 8007172:	d9e7      	bls.n	8007144 <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 8007174:	4b53      	ldr	r3, [pc, #332]	@ (80072c4 <MIC_Print+0x250>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4953      	ldr	r1, [pc, #332]	@ (80072c8 <MIC_Print+0x254>)
 800717a:	1c18      	adds	r0, r3, #0
 800717c:	f7f9 fca8 	bl	8000ad0 <__aeabi_fdiv>
 8007180:	1c03      	adds	r3, r0, #0
 8007182:	1c1a      	adds	r2, r3, #0
 8007184:	4b4f      	ldr	r3, [pc, #316]	@ (80072c4 <MIC_Print+0x250>)
 8007186:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 8007188:	4b4e      	ldr	r3, [pc, #312]	@ (80072c4 <MIC_Print+0x250>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	1c18      	adds	r0, r3, #0
 800718e:	f7fc fac7 	bl	8003720 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8007192:	4b48      	ldr	r3, [pc, #288]	@ (80072b4 <MIC_Print+0x240>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	494d      	ldr	r1, [pc, #308]	@ (80072cc <MIC_Print+0x258>)
 8007198:	1c18      	adds	r0, r3, #0
 800719a:	f7f9 f9ab 	bl	80004f4 <__aeabi_fcmpgt>
 800719e:	1e03      	subs	r3, r0, #0
 80071a0:	d004      	beq.n	80071ac <MIC_Print+0x138>
    SetDBLED(true, true, true);
 80071a2:	2201      	movs	r2, #1
 80071a4:	2101      	movs	r1, #1
 80071a6:	2001      	movs	r0, #1
 80071a8:	f001 fdf2 	bl	8008d90 <SetDBLED>
  }
  if(dBc < 85 && dBc >= 80){ //red
 80071ac:	4b41      	ldr	r3, [pc, #260]	@ (80072b4 <MIC_Print+0x240>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4946      	ldr	r1, [pc, #280]	@ (80072cc <MIC_Print+0x258>)
 80071b2:	1c18      	adds	r0, r3, #0
 80071b4:	f7f9 f98a 	bl	80004cc <__aeabi_fcmplt>
 80071b8:	1e03      	subs	r3, r0, #0
 80071ba:	d00c      	beq.n	80071d6 <MIC_Print+0x162>
 80071bc:	4b3d      	ldr	r3, [pc, #244]	@ (80072b4 <MIC_Print+0x240>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4943      	ldr	r1, [pc, #268]	@ (80072d0 <MIC_Print+0x25c>)
 80071c2:	1c18      	adds	r0, r3, #0
 80071c4:	f7f9 f9a0 	bl	8000508 <__aeabi_fcmpge>
 80071c8:	1e03      	subs	r3, r0, #0
 80071ca:	d004      	beq.n	80071d6 <MIC_Print+0x162>
    SetDBLED(true, false, false);
 80071cc:	2200      	movs	r2, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	2001      	movs	r0, #1
 80071d2:	f001 fddd 	bl	8008d90 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 75){//purple
 80071d6:	4b37      	ldr	r3, [pc, #220]	@ (80072b4 <MIC_Print+0x240>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	493d      	ldr	r1, [pc, #244]	@ (80072d0 <MIC_Print+0x25c>)
 80071dc:	1c18      	adds	r0, r3, #0
 80071de:	f7f9 f975 	bl	80004cc <__aeabi_fcmplt>
 80071e2:	1e03      	subs	r3, r0, #0
 80071e4:	d00c      	beq.n	8007200 <MIC_Print+0x18c>
 80071e6:	4b33      	ldr	r3, [pc, #204]	@ (80072b4 <MIC_Print+0x240>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	493a      	ldr	r1, [pc, #232]	@ (80072d4 <MIC_Print+0x260>)
 80071ec:	1c18      	adds	r0, r3, #0
 80071ee:	f7f9 f98b 	bl	8000508 <__aeabi_fcmpge>
 80071f2:	1e03      	subs	r3, r0, #0
 80071f4:	d004      	beq.n	8007200 <MIC_Print+0x18c>
    SetDBLED(true, false, true);
 80071f6:	2201      	movs	r2, #1
 80071f8:	2100      	movs	r1, #0
 80071fa:	2001      	movs	r0, #1
 80071fc:	f001 fdc8 	bl	8008d90 <SetDBLED>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 8007200:	4b2c      	ldr	r3, [pc, #176]	@ (80072b4 <MIC_Print+0x240>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4933      	ldr	r1, [pc, #204]	@ (80072d4 <MIC_Print+0x260>)
 8007206:	1c18      	adds	r0, r3, #0
 8007208:	f7f9 f960 	bl	80004cc <__aeabi_fcmplt>
 800720c:	1e03      	subs	r3, r0, #0
 800720e:	d00c      	beq.n	800722a <MIC_Print+0x1b6>
 8007210:	4b28      	ldr	r3, [pc, #160]	@ (80072b4 <MIC_Print+0x240>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4930      	ldr	r1, [pc, #192]	@ (80072d8 <MIC_Print+0x264>)
 8007216:	1c18      	adds	r0, r3, #0
 8007218:	f7f9 f976 	bl	8000508 <__aeabi_fcmpge>
 800721c:	1e03      	subs	r3, r0, #0
 800721e:	d004      	beq.n	800722a <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 8007220:	2200      	movs	r2, #0
 8007222:	2101      	movs	r1, #1
 8007224:	2001      	movs	r0, #1
 8007226:	f001 fdb3 	bl	8008d90 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 65){//Green
 800722a:	4b22      	ldr	r3, [pc, #136]	@ (80072b4 <MIC_Print+0x240>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	492a      	ldr	r1, [pc, #168]	@ (80072d8 <MIC_Print+0x264>)
 8007230:	1c18      	adds	r0, r3, #0
 8007232:	f7f9 f94b 	bl	80004cc <__aeabi_fcmplt>
 8007236:	1e03      	subs	r3, r0, #0
 8007238:	d00c      	beq.n	8007254 <MIC_Print+0x1e0>
 800723a:	4b1e      	ldr	r3, [pc, #120]	@ (80072b4 <MIC_Print+0x240>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4927      	ldr	r1, [pc, #156]	@ (80072dc <MIC_Print+0x268>)
 8007240:	1c18      	adds	r0, r3, #0
 8007242:	f7f9 f961 	bl	8000508 <__aeabi_fcmpge>
 8007246:	1e03      	subs	r3, r0, #0
 8007248:	d004      	beq.n	8007254 <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 800724a:	2200      	movs	r2, #0
 800724c:	2101      	movs	r1, #1
 800724e:	2000      	movs	r0, #0
 8007250:	f001 fd9e 	bl	8008d90 <SetDBLED>
  }
  if(dBc < 65 && dBc >= 60){//blue
 8007254:	4b17      	ldr	r3, [pc, #92]	@ (80072b4 <MIC_Print+0x240>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4920      	ldr	r1, [pc, #128]	@ (80072dc <MIC_Print+0x268>)
 800725a:	1c18      	adds	r0, r3, #0
 800725c:	f7f9 f936 	bl	80004cc <__aeabi_fcmplt>
 8007260:	1e03      	subs	r3, r0, #0
 8007262:	d00c      	beq.n	800727e <MIC_Print+0x20a>
 8007264:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <MIC_Print+0x240>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	491d      	ldr	r1, [pc, #116]	@ (80072e0 <MIC_Print+0x26c>)
 800726a:	1c18      	adds	r0, r3, #0
 800726c:	f7f9 f94c 	bl	8000508 <__aeabi_fcmpge>
 8007270:	1e03      	subs	r3, r0, #0
 8007272:	d004      	beq.n	800727e <MIC_Print+0x20a>
    SetDBLED(false, false, true);
 8007274:	2201      	movs	r2, #1
 8007276:	2100      	movs	r1, #0
 8007278:	2000      	movs	r0, #0
 800727a:	f001 fd89 	bl	8008d90 <SetDBLED>
  }
  if(dBc < 60){//light blue
 800727e:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <MIC_Print+0x240>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4917      	ldr	r1, [pc, #92]	@ (80072e0 <MIC_Print+0x26c>)
 8007284:	1c18      	adds	r0, r3, #0
 8007286:	f7f9 f921 	bl	80004cc <__aeabi_fcmplt>
 800728a:	1e03      	subs	r3, r0, #0
 800728c:	d100      	bne.n	8007290 <MIC_Print+0x21c>
    SetDBLED(false, true, true);
  }


  //FFT();
}
 800728e:	e004      	b.n	800729a <MIC_Print+0x226>
    SetDBLED(false, true, true);
 8007290:	2201      	movs	r2, #1
 8007292:	2101      	movs	r1, #1
 8007294:	2000      	movs	r0, #0
 8007296:	f001 fd7b 	bl	8008d90 <SetDBLED>
}
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	b003      	add	sp, #12
 80072a0:	bd90      	pop	{r4, r7, pc}
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	0801ba84 	.word	0x0801ba84
 80072a8:	0801ba80 	.word	0x0801ba80
 80072ac:	20001094 	.word	0x20001094
 80072b0:	200020d0 	.word	0x200020d0
 80072b4:	2000209c 	.word	0x2000209c
 80072b8:	200020cc 	.word	0x200020cc
 80072bc:	200020a0 	.word	0x200020a0
 80072c0:	200020cd 	.word	0x200020cd
 80072c4:	200020c8 	.word	0x200020c8
 80072c8:	41200000 	.word	0x41200000
 80072cc:	42aa0000 	.word	0x42aa0000
 80072d0:	42a00000 	.word	0x42a00000
 80072d4:	42960000 	.word	0x42960000
 80072d8:	428c0000 	.word	0x428c0000
 80072dc:	42820000 	.word	0x42820000
 80072e0:	42700000 	.word	0x42700000

080072e4 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  if(DataReady) {
 80072e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007314 <MIC_MeasurementDone+0x30>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00c      	beq.n	800730c <MIC_MeasurementDone+0x28>
    MIC_Print();
 80072f2:	f7ff febf 	bl	8007074 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 80072f6:	4b08      	ldr	r3, [pc, #32]	@ (8007318 <MIC_MeasurementDone+0x34>)
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	4a08      	ldr	r2, [pc, #32]	@ (800731c <MIC_MeasurementDone+0x38>)
 80072fc:	4908      	ldr	r1, [pc, #32]	@ (8007320 <MIC_MeasurementDone+0x3c>)
 80072fe:	2003      	movs	r0, #3
 8007300:	f002 fc4a 	bl	8009b98 <CreateLine>
    ResetMICIndicator();
 8007304:	f001 fe08 	bl	8008f18 <ResetMICIndicator>
    return true;
 8007308:	2301      	movs	r3, #1
 800730a:	e000      	b.n	800730e <MIC_MeasurementDone+0x2a>
  }
  return false;
 800730c:	2300      	movs	r3, #0
}
 800730e:	0018      	movs	r0, r3
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20002099 	.word	0x20002099
 8007318:	2000002c 	.word	0x2000002c
 800731c:	0801ba90 	.word	0x0801ba90
 8007320:	0801ba70 	.word	0x0801ba70

08007324 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 800732a:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <MIC_TestMeasurementDone+0x30>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <MIC_TestMeasurementDone+0x24>
    Check = MIC_Check();
 8007334:	1dfc      	adds	r4, r7, #7
 8007336:	f7ff fe47 	bl	8006fc8 <MIC_Check>
 800733a:	0003      	movs	r3, r0
 800733c:	7023      	strb	r3, [r4, #0]
    ResetMICIndicator();
 800733e:	f001 fdeb 	bl	8008f18 <ResetMICIndicator>
    return Check;
 8007342:	1dfb      	adds	r3, r7, #7
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	e000      	b.n	800734a <MIC_TestMeasurementDone+0x26>
  }
  return false;
 8007348:	2300      	movs	r3, #0
}
 800734a:	0018      	movs	r0, r3
 800734c:	46bd      	mov	sp, r7
 800734e:	b003      	add	sp, #12
 8007350:	bd90      	pop	{r4, r7, pc}
 8007352:	46c0      	nop			@ (mov r8, r8)
 8007354:	20002099 	.word	0x20002099

08007358 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8007360:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <HAL_I2S_RxCpltCallback+0x4c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d118      	bne.n	800739c <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 800736a:	4b0f      	ldr	r3, [pc, #60]	@ (80073a8 <HAL_I2S_RxCpltCallback+0x50>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8007374:	4b0b      	ldr	r3, [pc, #44]	@ (80073a4 <HAL_I2S_RxCpltCallback+0x4c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	0018      	movs	r0, r3
 800737a:	f006 fd3f 	bl	800ddfc <HAL_I2S_DMAStop>
    DataReady = true;
 800737e:	4b0b      	ldr	r3, [pc, #44]	@ (80073ac <HAL_I2S_RxCpltCallback+0x54>)
 8007380:	2201      	movs	r2, #1
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	e00b      	b.n	800739e <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 8007386:	4b0a      	ldr	r3, [pc, #40]	@ (80073b0 <HAL_I2S_RxCpltCallback+0x58>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	0018      	movs	r0, r3
 800738c:	f002 fbae 	bl	8009aec <TimestampIsReached>
 8007390:	1e03      	subs	r3, r0, #0
 8007392:	d004      	beq.n	800739e <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8007394:	4b04      	ldr	r3, [pc, #16]	@ (80073a8 <HAL_I2S_RxCpltCallback+0x50>)
 8007396:	2201      	movs	r2, #1
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	e000      	b.n	800739e <HAL_I2S_RxCpltCallback+0x46>
    return;
 800739c:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 800739e:	46bd      	mov	sp, r7
 80073a0:	b002      	add	sp, #8
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20001090 	.word	0x20001090
 80073a8:	20002098 	.word	0x20002098
 80073ac:	20002099 	.word	0x20002099
 80073b0:	20002094 	.word	0x20002094

080073b4 <MIC_GetDB>:

float MIC_GetDB(void) {
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 80073be:	2300      	movs	r3, #0
 80073c0:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80073c2:	230a      	movs	r3, #10
 80073c4:	18fb      	adds	r3, r7, r3
 80073c6:	2280      	movs	r2, #128	@ 0x80
 80073c8:	0052      	lsls	r2, r2, #1
 80073ca:	801a      	strh	r2, [r3, #0]
 80073cc:	e019      	b.n	8007402 <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 80073ce:	240a      	movs	r4, #10
 80073d0:	193b      	adds	r3, r7, r4
 80073d2:	881a      	ldrh	r2, [r3, #0]
 80073d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007484 <MIC_GetDB+0xd0>)
 80073d6:	0092      	lsls	r2, r2, #2
 80073d8:	58d0      	ldr	r0, [r2, r3]
 80073da:	193b      	adds	r3, r7, r4
 80073dc:	881a      	ldrh	r2, [r3, #0]
 80073de:	4b29      	ldr	r3, [pc, #164]	@ (8007484 <MIC_GetDB+0xd0>)
 80073e0:	0092      	lsls	r2, r2, #2
 80073e2:	58d3      	ldr	r3, [r2, r3]
 80073e4:	1c19      	adds	r1, r3, #0
 80073e6:	f7f9 fd59 	bl	8000e9c <__aeabi_fmul>
 80073ea:	1c03      	adds	r3, r0, #0
 80073ec:	1c19      	adds	r1, r3, #0
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7f9 f9e4 	bl	80007bc <__aeabi_fadd>
 80073f4:	1c03      	adds	r3, r0, #0
 80073f6:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80073f8:	193b      	adds	r3, r7, r4
 80073fa:	881a      	ldrh	r2, [r3, #0]
 80073fc:	193b      	adds	r3, r7, r4
 80073fe:	3201      	adds	r2, #1
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	230a      	movs	r3, #10
 8007404:	18fb      	adds	r3, r7, r3
 8007406:	881a      	ldrh	r2, [r3, #0]
 8007408:	2380      	movs	r3, #128	@ 0x80
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	429a      	cmp	r2, r3
 800740e:	d3de      	bcc.n	80073ce <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 8007410:	2187      	movs	r1, #135	@ 0x87
 8007412:	05c9      	lsls	r1, r1, #23
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7f9 fb5b 	bl	8000ad0 <__aeabi_fdiv>
 800741a:	1c03      	adds	r3, r0, #0
 800741c:	1c18      	adds	r0, r3, #0
 800741e:	f7fb ff9f 	bl	8003360 <__aeabi_f2d>
 8007422:	0002      	movs	r2, r0
 8007424:	000b      	movs	r3, r1
 8007426:	0010      	movs	r0, r2
 8007428:	0019      	movs	r1, r3
 800742a:	f013 fa57 	bl	801a8dc <sqrt>
 800742e:	0002      	movs	r2, r0
 8007430:	000b      	movs	r3, r1
 8007432:	0010      	movs	r0, r2
 8007434:	0019      	movs	r1, r3
 8007436:	f7fb ffdb 	bl	80033f0 <__aeabi_d2f>
 800743a:	1c03      	adds	r3, r0, #0
 800743c:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 800743e:	6838      	ldr	r0, [r7, #0]
 8007440:	f7fb ff8e 	bl	8003360 <__aeabi_f2d>
 8007444:	0002      	movs	r2, r0
 8007446:	000b      	movs	r3, r1
 8007448:	0010      	movs	r0, r2
 800744a:	0019      	movs	r1, r3
 800744c:	f013 fa10 	bl	801a870 <log10>
 8007450:	2200      	movs	r2, #0
 8007452:	4b0d      	ldr	r3, [pc, #52]	@ (8007488 <MIC_GetDB+0xd4>)
 8007454:	f7fb f870 	bl	8002538 <__aeabi_dmul>
 8007458:	0002      	movs	r2, r0
 800745a:	000b      	movs	r3, r1
 800745c:	0010      	movs	r0, r2
 800745e:	0019      	movs	r1, r3
 8007460:	2200      	movs	r2, #0
 8007462:	4b0a      	ldr	r3, [pc, #40]	@ (800748c <MIC_GetDB+0xd8>)
 8007464:	f7fa f8c0 	bl	80015e8 <__aeabi_dadd>
 8007468:	0002      	movs	r2, r0
 800746a:	000b      	movs	r3, r1
 800746c:	0010      	movs	r0, r2
 800746e:	0019      	movs	r1, r3
 8007470:	f7fb ffbe 	bl	80033f0 <__aeabi_d2f>
 8007474:	1c03      	adds	r3, r0, #0
 8007476:	607b      	str	r3, [r7, #4]

    return dBValue;
 8007478:	687b      	ldr	r3, [r7, #4]
}
 800747a:	1c18      	adds	r0, r3, #0
 800747c:	46bd      	mov	sp, r7
 800747e:	b005      	add	sp, #20
 8007480:	bd90      	pop	{r4, r7, pc}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	200020d0 	.word	0x200020d0
 8007488:	40340000 	.word	0x40340000
 800748c:	405e0000 	.word	0x405e0000

08007490 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007494:	4b16      	ldr	r3, [pc, #88]	@ (80074f0 <MX_RTC_Init+0x60>)
 8007496:	4a17      	ldr	r2, [pc, #92]	@ (80074f4 <MX_RTC_Init+0x64>)
 8007498:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800749a:	4b15      	ldr	r3, [pc, #84]	@ (80074f0 <MX_RTC_Init+0x60>)
 800749c:	2200      	movs	r2, #0
 800749e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80074a0:	4b13      	ldr	r3, [pc, #76]	@ (80074f0 <MX_RTC_Init+0x60>)
 80074a2:	227f      	movs	r2, #127	@ 0x7f
 80074a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80074a6:	4b12      	ldr	r3, [pc, #72]	@ (80074f0 <MX_RTC_Init+0x60>)
 80074a8:	22ff      	movs	r2, #255	@ 0xff
 80074aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80074ac:	4b10      	ldr	r3, [pc, #64]	@ (80074f0 <MX_RTC_Init+0x60>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80074b2:	4b0f      	ldr	r3, [pc, #60]	@ (80074f0 <MX_RTC_Init+0x60>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80074b8:	4b0d      	ldr	r3, [pc, #52]	@ (80074f0 <MX_RTC_Init+0x60>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80074be:	4b0c      	ldr	r3, [pc, #48]	@ (80074f0 <MX_RTC_Init+0x60>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80074c4:	4b0a      	ldr	r3, [pc, #40]	@ (80074f0 <MX_RTC_Init+0x60>)
 80074c6:	0018      	movs	r0, r3
 80074c8:	f009 fbba 	bl	8010c40 <HAL_RTC_Init>
 80074cc:	1e03      	subs	r3, r0, #0
 80074ce:	d001      	beq.n	80074d4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80074d0:	f7ff f8be 	bl	8006650 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80074d4:	4b06      	ldr	r3, [pc, #24]	@ (80074f0 <MX_RTC_Init+0x60>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	2100      	movs	r1, #0
 80074da:	0018      	movs	r0, r3
 80074dc:	f009 fdae 	bl	801103c <HAL_RTCEx_SetWakeUpTimer>
 80074e0:	1e03      	subs	r3, r0, #0
 80074e2:	d001      	beq.n	80074e8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80074e4:	f7ff f8b4 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80074e8:	46c0      	nop			@ (mov r8, r8)
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	46c0      	nop			@ (mov r8, r8)
 80074f0:	200028d0 	.word	0x200028d0
 80074f4:	40002800 	.word	0x40002800

080074f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a06      	ldr	r2, [pc, #24]	@ (8007520 <HAL_RTC_MspInit+0x28>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d106      	bne.n	8007518 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800750a:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_RTC_MspInit+0x2c>)
 800750c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800750e:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <HAL_RTC_MspInit+0x2c>)
 8007510:	2180      	movs	r1, #128	@ 0x80
 8007512:	02c9      	lsls	r1, r1, #11
 8007514:	430a      	orrs	r2, r1
 8007516:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007518:	46c0      	nop			@ (mov r8, r8)
 800751a:	46bd      	mov	sp, r7
 800751c:	b002      	add	sp, #8
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40002800 	.word	0x40002800
 8007524:	40021000 	.word	0x40021000

08007528 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d113      	bne.n	800756e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	22fe      	movs	r2, #254	@ 0xfe
 800754a:	0592      	lsls	r2, r2, #22
 800754c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4a1a      	ldr	r2, [pc, #104]	@ (80075bc <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8007552:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4a1a      	ldr	r2, [pc, #104]	@ (80075c0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8007558:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a19      	ldr	r2, [pc, #100]	@ (80075c4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800755e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4a19      	ldr	r2, [pc, #100]	@ (80075c8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8007564:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4a18      	ldr	r2, [pc, #96]	@ (80075cc <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800756a:	61da      	str	r2, [r3, #28]
 800756c:	e011      	b.n	8007592 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a17      	ldr	r2, [pc, #92]	@ (80075d0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8007572:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a17      	ldr	r2, [pc, #92]	@ (80075d4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8007578:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4a16      	ldr	r2, [pc, #88]	@ (80075d8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800757e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a16      	ldr	r2, [pc, #88]	@ (80075dc <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8007584:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a15      	ldr	r2, [pc, #84]	@ (80075e0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800758a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4a15      	ldr	r2, [pc, #84]	@ (80075e4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8007590:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4a14      	ldr	r2, [pc, #80]	@ (80075e8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8007596:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a14      	ldr	r2, [pc, #80]	@ (80075ec <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800759c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4a12      	ldr	r2, [pc, #72]	@ (80075ec <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80075a2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4a12      	ldr	r2, [pc, #72]	@ (80075f0 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80075a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	0018      	movs	r0, r3
 80075ae:	f000 f831 	bl	8007614 <GasIndexAlgorithm_reset>
}
 80075b2:	46c0      	nop			@ (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b004      	add	sp, #16
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	46c0      	nop			@ (mov r8, r8)
 80075bc:	00002710 	.word	0x00002710
 80075c0:	44340000 	.word	0x44340000
 80075c4:	46859800 	.word	0x46859800
 80075c8:	46a05000 	.word	0x46a05000
 80075cc:	41f00000 	.word	0x41f00000
 80075d0:	42c80000 	.word	0x42c80000
 80075d4:	00004e20 	.word	0x00004e20
 80075d8:	43340000 	.word	0x43340000
 80075dc:	4528c000 	.word	0x4528c000
 80075e0:	45a32000 	.word	0x45a32000
 80075e4:	43aa0000 	.word	0x43aa0000
 80075e8:	43660000 	.word	0x43660000
 80075ec:	41400000 	.word	0x41400000
 80075f0:	42480000 	.word	0x42480000

080075f4 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80075fe:	22fe      	movs	r2, #254	@ 0xfe
 8007600:	0592      	lsls	r2, r2, #22
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	0018      	movs	r0, r3
 8007608:	f7ff ff8e 	bl	8007528 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800760c:	46c0      	nop			@ (mov r8, r8)
 800760e:	46bd      	mov	sp, r7
 8007610:	b002      	add	sp, #8
 8007612:	bd80      	pop	{r7, pc}

08007614 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	0018      	movs	r0, r3
 8007632:	f000 f805 	bl	8007640 <GasIndexAlgorithm__init_instances>
}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	46bd      	mov	sp, r7
 800763a:	b002      	add	sp, #8
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	0018      	movs	r0, r3
 800764c:	f000 f8e8 	bl	8007820 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	0018      	movs	r0, r3
 8007654:	f000 f9a6 	bl	80079a4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007658:	1c04      	adds	r4, r0, #0
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	0018      	movs	r0, r3
 800765e:	f000 f9ab 	bl	80079b8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007662:	1c02      	adds	r2, r0, #0
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	1c21      	adds	r1, r4, #0
 8007668:	0018      	movs	r0, r3
 800766a:	f000 fc3b 	bl	8007ee4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d107      	bne.n	8007686 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8007676:	23fe      	movs	r3, #254	@ 0xfe
 8007678:	059b      	lsls	r3, r3, #22
 800767a:	4a0a      	ldr	r2, [pc, #40]	@ (80076a4 <GasIndexAlgorithm__init_instances+0x64>)
 800767c:	490a      	ldr	r1, [pc, #40]	@ (80076a8 <GasIndexAlgorithm__init_instances+0x68>)
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fc86 	bl	8007f90 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8007684:	e005      	b.n	8007692 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8007686:	4b09      	ldr	r3, [pc, #36]	@ (80076ac <GasIndexAlgorithm__init_instances+0x6c>)
 8007688:	4a09      	ldr	r2, [pc, #36]	@ (80076b0 <GasIndexAlgorithm__init_instances+0x70>)
 800768a:	490a      	ldr	r1, [pc, #40]	@ (80076b4 <GasIndexAlgorithm__init_instances+0x74>)
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fc7f 	bl	8007f90 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	0018      	movs	r0, r3
 8007696:	f000 fd35 	bl	8008104 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800769a:	46c0      	nop			@ (mov r8, r8)
 800769c:	46bd      	mov	sp, r7
 800769e:	b003      	add	sp, #12
 80076a0:	bd90      	pop	{r4, r7, pc}
 80076a2:	46c0      	nop			@ (mov r8, r8)
 80076a4:	bc257a78 	.word	0xbc257a78
 80076a8:	44198000 	.word	0x44198000
 80076ac:	42c80000 	.word	0x42c80000
 80076b0:	bbd4fdf4 	.word	0xbbd4fdf4
 80076b4:	43550000 	.word	0x43550000

080076b8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80076b8:	b590      	push	{r4, r7, lr}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c8:	4952      	ldr	r1, [pc, #328]	@ (8007814 <GasIndexAlgorithm_process+0x15c>)
 80076ca:	1c18      	adds	r0, r3, #0
 80076cc:	f7f8 ff08 	bl	80004e0 <__aeabi_fcmple>
 80076d0:	1e03      	subs	r3, r0, #0
 80076d2:	d00c      	beq.n	80076ee <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	1c19      	adds	r1, r3, #0
 80076de:	1c10      	adds	r0, r2, #0
 80076e0:	f7f9 f86c 	bl	80007bc <__aeabi_fadd>
 80076e4:	1c03      	adds	r3, r0, #0
 80076e6:	1c1a      	adds	r2, r3, #0
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80076ec:	e080      	b.n	80077f0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	dd25      	ble.n	8007740 <GasIndexAlgorithm_process+0x88>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4a48      	ldr	r2, [pc, #288]	@ (8007818 <GasIndexAlgorithm_process+0x160>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	dc21      	bgt.n	8007740 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	429a      	cmp	r2, r3
 8007704:	dc04      	bgt.n	8007710 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	3301      	adds	r3, #1
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	e00d      	b.n	800772c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	4a41      	ldr	r2, [pc, #260]	@ (800781c <GasIndexAlgorithm_process+0x164>)
 8007716:	4694      	mov	ip, r2
 8007718:	4463      	add	r3, ip
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	429a      	cmp	r2, r3
 800771e:	dd05      	ble.n	800772c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4a3d      	ldr	r2, [pc, #244]	@ (800781c <GasIndexAlgorithm_process+0x164>)
 8007726:	4694      	mov	ip, r2
 8007728:	4463      	add	r3, ip
 800772a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	0018      	movs	r0, r3
 8007736:	f7f9 fec9 	bl	80014cc <__aeabi_i2f>
 800773a:	1c02      	adds	r2, r0, #0
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	0018      	movs	r0, r3
 800774c:	f000 f945 	bl	80079da <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8007750:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8007752:	d014      	beq.n	800777e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	1c11      	adds	r1, r2, #0
 800775c:	0018      	movs	r0, r3
 800775e:	f000 fbd1 	bl	8007f04 <GasIndexAlgorithm__mox_model__process>
 8007762:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	1c11      	adds	r1, r2, #0
 8007770:	0018      	movs	r0, r3
 8007772:	f000 fc25 	bl	8007fc0 <GasIndexAlgorithm__sigmoid_scaled__process>
 8007776:	1c02      	adds	r2, r0, #0
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	639a      	str	r2, [r3, #56]	@ 0x38
 800777c:	e003      	b.n	8007786 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	1c11      	adds	r1, r2, #0
 800778e:	0018      	movs	r0, r3
 8007790:	f000 fcec 	bl	800816c <GasIndexAlgorithm__adaptive_lowpass__process>
 8007794:	1c02      	adds	r2, r0, #0
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	21fc      	movs	r1, #252	@ 0xfc
 80077a0:	0589      	lsls	r1, r1, #22
 80077a2:	1c18      	adds	r0, r3, #0
 80077a4:	f7f8 fe92 	bl	80004cc <__aeabi_fcmplt>
 80077a8:	1e03      	subs	r3, r0, #0
 80077aa:	d003      	beq.n	80077b4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	22fc      	movs	r2, #252	@ 0xfc
 80077b0:	0592      	lsls	r2, r2, #22
 80077b2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b8:	2100      	movs	r1, #0
 80077ba:	1c18      	adds	r0, r3, #0
 80077bc:	f7f8 fe9a 	bl	80004f4 <__aeabi_fcmpgt>
 80077c0:	1e03      	subs	r3, r0, #0
 80077c2:	d015      	beq.n	80077f0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	1c11      	adds	r1, r2, #0
 80077cc:	0018      	movs	r0, r3
 80077ce:	f000 fa4f 	bl	8007c70 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	0018      	movs	r0, r3
 80077d6:	f000 f8e5 	bl	80079a4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80077da:	1c04      	adds	r4, r0, #0
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	0018      	movs	r0, r3
 80077e0:	f000 f8ea 	bl	80079b8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80077e4:	1c02      	adds	r2, r0, #0
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1c21      	adds	r1, r4, #0
 80077ea:	0018      	movs	r0, r3
 80077ec:	f000 fb7a 	bl	8007ee4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f4:	21fc      	movs	r1, #252	@ 0xfc
 80077f6:	0589      	lsls	r1, r1, #22
 80077f8:	1c18      	adds	r0, r3, #0
 80077fa:	f7f8 ffdf 	bl	80007bc <__aeabi_fadd>
 80077fe:	1c03      	adds	r3, r0, #0
 8007800:	1c18      	adds	r0, r3, #0
 8007802:	f7f9 fe43 	bl	800148c <__aeabi_f2iz>
 8007806:	0002      	movs	r2, r0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	601a      	str	r2, [r3, #0]
    return;
 800780c:	46c0      	nop			@ (mov r8, r8)
}
 800780e:	46bd      	mov	sp, r7
 8007810:	b005      	add	sp, #20
 8007812:	bd90      	pop	{r4, r7, pc}
 8007814:	42340000 	.word	0x42340000
 8007818:	0000fde7 	.word	0x0000fde7
 800781c:	00007fff 	.word	0x00007fff

08007820 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007820:	b5b0      	push	{r4, r5, r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	223c      	movs	r2, #60	@ 0x3c
 800782c:	2100      	movs	r1, #0
 800782e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4952      	ldr	r1, [pc, #328]	@ (8007994 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800784a:	1c18      	adds	r0, r3, #0
 800784c:	f7f9 f940 	bl	8000ad0 <__aeabi_fdiv>
 8007850:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007852:	2188      	movs	r1, #136	@ 0x88
 8007854:	05c9      	lsls	r1, r1, #23
 8007856:	1c18      	adds	r0, r3, #0
 8007858:	f7f9 fb20 	bl	8000e9c <__aeabi_fmul>
 800785c:	1c03      	adds	r3, r0, #0
 800785e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	494a      	ldr	r1, [pc, #296]	@ (8007994 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800786a:	1c18      	adds	r0, r3, #0
 800786c:	f7f9 f930 	bl	8000ad0 <__aeabi_fdiv>
 8007870:	1c03      	adds	r3, r0, #0
 8007872:	1c19      	adds	r1, r3, #0
 8007874:	1c20      	adds	r0, r4, #0
 8007876:	f7f8 ffa1 	bl	80007bc <__aeabi_fadd>
 800787a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800787c:	1c19      	adds	r1, r3, #0
 800787e:	1c28      	adds	r0, r5, #0
 8007880:	f7f9 f926 	bl	8000ad0 <__aeabi_fdiv>
 8007884:	1c03      	adds	r3, r0, #0
 8007886:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4940      	ldr	r1, [pc, #256]	@ (8007994 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007892:	1c18      	adds	r0, r3, #0
 8007894:	f7f9 f91c 	bl	8000ad0 <__aeabi_fdiv>
 8007898:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800789a:	2185      	movs	r1, #133	@ 0x85
 800789c:	05c9      	lsls	r1, r1, #23
 800789e:	1c18      	adds	r0, r3, #0
 80078a0:	f7f9 fafc 	bl	8000e9c <__aeabi_fmul>
 80078a4:	1c03      	adds	r3, r0, #0
 80078a6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4938      	ldr	r1, [pc, #224]	@ (8007994 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80078b2:	1c18      	adds	r0, r3, #0
 80078b4:	f7f9 f90c 	bl	8000ad0 <__aeabi_fdiv>
 80078b8:	1c03      	adds	r3, r0, #0
 80078ba:	1c19      	adds	r1, r3, #0
 80078bc:	1c20      	adds	r0, r4, #0
 80078be:	f7f8 ff7d 	bl	80007bc <__aeabi_fadd>
 80078c2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80078c4:	1c19      	adds	r1, r3, #0
 80078c6:	1c28      	adds	r0, r5, #0
 80078c8:	f7f9 f902 	bl	8000ad0 <__aeabi_fdiv>
 80078cc:	1c03      	adds	r3, r0, #0
 80078ce:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d118      	bne.n	800790e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80078e0:	2188      	movs	r1, #136	@ 0x88
 80078e2:	05c9      	lsls	r1, r1, #23
 80078e4:	1c18      	adds	r0, r3, #0
 80078e6:	f7f9 fad9 	bl	8000e9c <__aeabi_fmul>
 80078ea:	1c03      	adds	r3, r0, #0
 80078ec:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 80078f2:	4929      	ldr	r1, [pc, #164]	@ (8007998 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 80078f4:	1c18      	adds	r0, r3, #0
 80078f6:	f7f8 ff61 	bl	80007bc <__aeabi_fadd>
 80078fa:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80078fc:	1c19      	adds	r1, r3, #0
 80078fe:	1c20      	adds	r0, r4, #0
 8007900:	f7f9 f8e6 	bl	8000ad0 <__aeabi_fdiv>
 8007904:	1c03      	adds	r3, r0, #0
 8007906:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	655a      	str	r2, [r3, #84]	@ 0x54
 800790c:	e017      	b.n	800793e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007912:	2188      	movs	r1, #136	@ 0x88
 8007914:	05c9      	lsls	r1, r1, #23
 8007916:	1c18      	adds	r0, r3, #0
 8007918:	f7f9 fac0 	bl	8000e9c <__aeabi_fmul>
 800791c:	1c03      	adds	r3, r0, #0
 800791e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8007924:	491d      	ldr	r1, [pc, #116]	@ (800799c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8007926:	1c18      	adds	r0, r3, #0
 8007928:	f7f8 ff48 	bl	80007bc <__aeabi_fadd>
 800792c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800792e:	1c19      	adds	r1, r3, #0
 8007930:	1c20      	adds	r0, r4, #0
 8007932:	f7f9 f8cd 	bl	8000ad0 <__aeabi_fdiv>
 8007936:	1c03      	adds	r3, r0, #0
 8007938:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007942:	2185      	movs	r1, #133	@ 0x85
 8007944:	05c9      	lsls	r1, r1, #23
 8007946:	1c18      	adds	r0, r3, #0
 8007948:	f7f9 faa8 	bl	8000e9c <__aeabi_fmul>
 800794c:	1c03      	adds	r3, r0, #0
 800794e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	4912      	ldr	r1, [pc, #72]	@ (80079a0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8007956:	1c18      	adds	r0, r3, #0
 8007958:	f7f8 ff30 	bl	80007bc <__aeabi_fadd>
 800795c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800795e:	1c19      	adds	r1, r3, #0
 8007960:	1c20      	adds	r0, r4, #0
 8007962:	f7f9 f8b5 	bl	8000ad0 <__aeabi_fdiv>
 8007966:	1c03      	adds	r3, r0, #0
 8007968:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800798c:	46c0      	nop			@ (mov r8, r8)
 800798e:	46bd      	mov	sp, r7
 8007990:	b002      	add	sp, #8
 8007992:	bdb0      	pop	{r4, r5, r7, pc}
 8007994:	45610000 	.word	0x45610000
 8007998:	44960000 	.word	0x44960000
 800799c:	41a00000 	.word	0x41a00000
 80079a0:	451c4000 	.word	0x451c4000

080079a4 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 80079b0:	1c18      	adds	r0, r3, #0
 80079b2:	46bd      	mov	sp, r7
 80079b4:	b002      	add	sp, #8
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 80079c8:	1c19      	adds	r1, r3, #0
 80079ca:	1c10      	adds	r0, r2, #0
 80079cc:	f7f8 fef6 	bl	80007bc <__aeabi_fadd>
 80079d0:	1c03      	adds	r3, r0, #0
}
 80079d2:	1c18      	adds	r0, r3, #0
 80079d4:	46bd      	mov	sp, r7
 80079d6:	b002      	add	sp, #8
 80079d8:	bd80      	pop	{r7, pc}

080079da <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	223c      	movs	r2, #60	@ 0x3c
 80079e6:	5c9b      	ldrb	r3, [r3, r2]
}
 80079e8:	0018      	movs	r0, r3
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b002      	add	sp, #8
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 80079f0:	b5b0      	push	{r4, r5, r7, lr}
 80079f2:	b08c      	sub	sp, #48	@ 0x30
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80079fc:	1c19      	adds	r1, r3, #0
 80079fe:	4895      	ldr	r0, [pc, #596]	@ (8007c54 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8007a00:	f7f9 fb8a 	bl	8001118 <__aeabi_fsub>
 8007a04:	1c03      	adds	r3, r0, #0
 8007a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a0c:	1c19      	adds	r1, r3, #0
 8007a0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a10:	f7f8 fd70 	bl	80004f4 <__aeabi_fcmpgt>
 8007a14:	1e03      	subs	r3, r0, #0
 8007a16:	d00b      	beq.n	8007a30 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8007a20:	1c19      	adds	r1, r3, #0
 8007a22:	1c10      	adds	r0, r2, #0
 8007a24:	f7f8 feca 	bl	80007bc <__aeabi_fadd>
 8007a28:	1c03      	adds	r3, r0, #0
 8007a2a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a34:	1c19      	adds	r1, r3, #0
 8007a36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a38:	f7f8 fd5c 	bl	80004f4 <__aeabi_fcmpgt>
 8007a3c:	1e03      	subs	r3, r0, #0
 8007a3e:	d00b      	beq.n	8007a58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8007a48:	1c19      	adds	r1, r3, #0
 8007a4a:	1c10      	adds	r0, r2, #0
 8007a4c:	f7f8 feb6 	bl	80007bc <__aeabi_fadd>
 8007a50:	1c03      	adds	r3, r0, #0
 8007a52:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6959      	ldr	r1, [r3, #20]
 8007a5c:	4a7e      	ldr	r2, [pc, #504]	@ (8007c58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 f9f1 	bl	8007e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	1c11      	adds	r1, r2, #0
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f000 f9fa 	bl	8007e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007a74:	1c03      	adds	r3, r0, #0
 8007a76:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007a84:	1c19      	adds	r1, r3, #0
 8007a86:	1c10      	adds	r0, r2, #0
 8007a88:	f7f9 fb46 	bl	8001118 <__aeabi_fsub>
 8007a8c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a90:	1c18      	adds	r0, r3, #0
 8007a92:	f7f9 fa03 	bl	8000e9c <__aeabi_fmul>
 8007a96:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007a98:	1c19      	adds	r1, r3, #0
 8007a9a:	1c20      	adds	r0, r4, #0
 8007a9c:	f7f8 fe8e 	bl	80007bc <__aeabi_fadd>
 8007aa0:	1c03      	adds	r3, r0, #0
 8007aa2:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007aac:	1c19      	adds	r1, r3, #0
 8007aae:	486b      	ldr	r0, [pc, #428]	@ (8007c5c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007ab0:	f7f9 fb32 	bl	8001118 <__aeabi_fsub>
 8007ab4:	1c03      	adds	r3, r0, #0
 8007ab6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	1c11      	adds	r1, r2, #0
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f000 f9d1 	bl	8007e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007ac6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007ac8:	1c19      	adds	r1, r3, #0
 8007aca:	1c28      	adds	r0, r5, #0
 8007acc:	f7f9 f9e6 	bl	8000e9c <__aeabi_fmul>
 8007ad0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8007ad2:	1c19      	adds	r1, r3, #0
 8007ad4:	1c20      	adds	r0, r4, #0
 8007ad6:	f7f8 fe71 	bl	80007bc <__aeabi_fadd>
 8007ada:	1c03      	adds	r3, r0, #0
 8007adc:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007ade:	4a60      	ldr	r2, [pc, #384]	@ (8007c60 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007ae0:	6a39      	ldr	r1, [r7, #32]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f000 f9af 	bl	8007e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	1c11      	adds	r1, r2, #0
 8007af2:	0018      	movs	r0, r3
 8007af4:	f000 f9b8 	bl	8007e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007af8:	1c03      	adds	r3, r0, #0
 8007afa:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007afe:	69f8      	ldr	r0, [r7, #28]
 8007b00:	f7f9 f9cc 	bl	8000e9c <__aeabi_fmul>
 8007b04:	1c03      	adds	r3, r0, #0
 8007b06:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6999      	ldr	r1, [r3, #24]
 8007b10:	4a51      	ldr	r2, [pc, #324]	@ (8007c58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	0018      	movs	r0, r3
 8007b16:	f000 f997 	bl	8007e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	1c11      	adds	r1, r2, #0
 8007b22:	0018      	movs	r0, r3
 8007b24:	f000 f9a0 	bl	8007e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007b28:	1c03      	adds	r3, r0, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007b38:	1c19      	adds	r1, r3, #0
 8007b3a:	1c10      	adds	r0, r2, #0
 8007b3c:	f7f9 faec 	bl	8001118 <__aeabi_fsub>
 8007b40:	1c03      	adds	r3, r0, #0
 8007b42:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8007b44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b46:	69b8      	ldr	r0, [r7, #24]
 8007b48:	f7f9 fae6 	bl	8001118 <__aeabi_fsub>
 8007b4c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007b4e:	1c19      	adds	r1, r3, #0
 8007b50:	1c28      	adds	r0, r5, #0
 8007b52:	f7f9 f9a3 	bl	8000e9c <__aeabi_fmul>
 8007b56:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007b58:	1c19      	adds	r1, r3, #0
 8007b5a:	1c20      	adds	r0, r4, #0
 8007b5c:	f7f8 fe2e 	bl	80007bc <__aeabi_fadd>
 8007b60:	1c03      	adds	r3, r0, #0
 8007b62:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007b6c:	1c19      	adds	r1, r3, #0
 8007b6e:	483b      	ldr	r0, [pc, #236]	@ (8007c5c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007b70:	f7f9 fad2 	bl	8001118 <__aeabi_fsub>
 8007b74:	1c03      	adds	r3, r0, #0
 8007b76:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	1c11      	adds	r1, r2, #0
 8007b80:	0018      	movs	r0, r3
 8007b82:	f000 f971 	bl	8007e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007b86:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007b88:	1c19      	adds	r1, r3, #0
 8007b8a:	1c28      	adds	r0, r5, #0
 8007b8c:	f7f9 f986 	bl	8000e9c <__aeabi_fmul>
 8007b90:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8007b92:	1c19      	adds	r1, r3, #0
 8007b94:	1c20      	adds	r0, r4, #0
 8007b96:	f7f8 fe11 	bl	80007bc <__aeabi_fadd>
 8007b9a:	1c03      	adds	r3, r0, #0
 8007b9c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007b9e:	4a30      	ldr	r2, [pc, #192]	@ (8007c60 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007ba0:	6939      	ldr	r1, [r7, #16]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f000 f94f 	bl	8007e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	1c11      	adds	r1, r2, #0
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f000 f958 	bl	8007e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007bb8:	1c03      	adds	r3, r0, #0
 8007bba:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007bbc:	6979      	ldr	r1, [r7, #20]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7f9 f96c 	bl	8000e9c <__aeabi_fmul>
 8007bc4:	1c03      	adds	r3, r0, #0
 8007bc6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	4923      	ldr	r1, [pc, #140]	@ (8007c64 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007bd6:	1c18      	adds	r0, r3, #0
 8007bd8:	f7f8 ff7a 	bl	8000ad0 <__aeabi_fdiv>
 8007bdc:	1c03      	adds	r3, r0, #0
 8007bde:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007be0:	69f9      	ldr	r1, [r7, #28]
 8007be2:	20fe      	movs	r0, #254	@ 0xfe
 8007be4:	0580      	lsls	r0, r0, #22
 8007be6:	f7f9 fa97 	bl	8001118 <__aeabi_fsub>
 8007bea:	1c03      	adds	r3, r0, #0
 8007bec:	491e      	ldr	r1, [pc, #120]	@ (8007c68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007bee:	1c18      	adds	r0, r3, #0
 8007bf0:	f7f9 f954 	bl	8000e9c <__aeabi_fmul>
 8007bf4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007bf6:	491d      	ldr	r1, [pc, #116]	@ (8007c6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007bf8:	1c18      	adds	r0, r3, #0
 8007bfa:	f7f9 fa8d 	bl	8001118 <__aeabi_fsub>
 8007bfe:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007c00:	1c19      	adds	r1, r3, #0
 8007c02:	1c28      	adds	r0, r5, #0
 8007c04:	f7f9 f94a 	bl	8000e9c <__aeabi_fmul>
 8007c08:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007c0a:	1c19      	adds	r1, r3, #0
 8007c0c:	1c20      	adds	r0, r4, #0
 8007c0e:	f7f8 fdd5 	bl	80007bc <__aeabi_fadd>
 8007c12:	1c03      	adds	r3, r0, #0
 8007c14:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c1e:	2100      	movs	r1, #0
 8007c20:	1c18      	adds	r0, r3, #0
 8007c22:	f7f8 fc53 	bl	80004cc <__aeabi_fcmplt>
 8007c26:	1e03      	subs	r3, r0, #0
 8007c28:	d002      	beq.n	8007c30 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007c38:	1c19      	adds	r1, r3, #0
 8007c3a:	1c10      	adds	r0, r2, #0
 8007c3c:	f7f8 fc5a 	bl	80004f4 <__aeabi_fcmpgt>
 8007c40:	1e03      	subs	r3, r0, #0
 8007c42:	d100      	bne.n	8007c46 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007c44:	e002      	b.n	8007c4c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007c4c:	46c0      	nop			@ (mov r8, r8)
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	b00c      	add	sp, #48	@ 0x30
 8007c52:	bdb0      	pop	{r4, r5, r7, pc}
 8007c54:	46fffe00 	.word	0x46fffe00
 8007c58:	3c23d70a 	.word	0x3c23d70a
 8007c5c:	43ff0000 	.word	0x43ff0000
 8007c60:	3db851ec 	.word	0x3db851ec
 8007c64:	42700000 	.word	0x42700000
 8007c68:	3fa66666 	.word	0x3fa66666
 8007c6c:	3e99999a 	.word	0x3e99999a

08007c70 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	223c      	movs	r2, #60	@ 0x3c
 8007c7e:	5c9b      	ldrb	r3, [r3, r2]
 8007c80:	2201      	movs	r2, #1
 8007c82:	4053      	eors	r3, r2
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	223c      	movs	r2, #60	@ 0x3c
 8007c8e:	2101      	movs	r1, #1
 8007c90:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8007c9e:	e0c8      	b.n	8007e32 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca4:	4965      	ldr	r1, [pc, #404]	@ (8007e3c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007ca6:	1c18      	adds	r0, r3, #0
 8007ca8:	f7f8 fc2e 	bl	8000508 <__aeabi_fcmpge>
 8007cac:	1e03      	subs	r3, r0, #0
 8007cae:	d107      	bne.n	8007cc0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007cb4:	4962      	ldr	r1, [pc, #392]	@ (8007e40 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007cb6:	1c18      	adds	r0, r3, #0
 8007cb8:	f7f8 fc12 	bl	80004e0 <__aeabi_fcmple>
 8007cbc:	1e03      	subs	r3, r0, #0
 8007cbe:	d00e      	beq.n	8007cde <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007cc8:	1c19      	adds	r1, r3, #0
 8007cca:	1c10      	adds	r0, r2, #0
 8007ccc:	f7f8 fd76 	bl	80007bc <__aeabi_fadd>
 8007cd0:	1c03      	adds	r3, r0, #0
 8007cd2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce2:	1c19      	adds	r1, r3, #0
 8007ce4:	6838      	ldr	r0, [r7, #0]
 8007ce6:	f7f9 fa17 	bl	8001118 <__aeabi_fsub>
 8007cea:	1c03      	adds	r3, r0, #0
 8007cec:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f7ff fe7d 	bl	80079f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfa:	1c19      	adds	r1, r3, #0
 8007cfc:	6838      	ldr	r0, [r7, #0]
 8007cfe:	f7f9 fa0b 	bl	8001118 <__aeabi_fsub>
 8007d02:	1c03      	adds	r3, r0, #0
 8007d04:	2185      	movs	r1, #133	@ 0x85
 8007d06:	05c9      	lsls	r1, r1, #23
 8007d08:	1c18      	adds	r0, r3, #0
 8007d0a:	f7f8 fee1 	bl	8000ad0 <__aeabi_fdiv>
 8007d0e:	1c03      	adds	r3, r0, #0
 8007d10:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007d12:	2100      	movs	r1, #0
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7f8 fbd9 	bl	80004cc <__aeabi_fcmplt>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d008      	beq.n	8007d30 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d22:	68f9      	ldr	r1, [r7, #12]
 8007d24:	1c18      	adds	r0, r3, #0
 8007d26:	f7f9 f9f7 	bl	8001118 <__aeabi_fsub>
 8007d2a:	1c03      	adds	r3, r0, #0
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	e007      	b.n	8007d40 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d34:	1c19      	adds	r1, r3, #0
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7f8 fd40 	bl	80007bc <__aeabi_fadd>
 8007d3c:	1c03      	adds	r3, r0, #0
 8007d3e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007d40:	23fe      	movs	r3, #254	@ 0xfe
 8007d42:	059b      	lsls	r3, r3, #22
 8007d44:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007d46:	493f      	ldr	r1, [pc, #252]	@ (8007e44 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007d48:	6978      	ldr	r0, [r7, #20]
 8007d4a:	f7f8 fbd3 	bl	80004f4 <__aeabi_fcmpgt>
 8007d4e:	1e03      	subs	r3, r0, #0
 8007d50:	d010      	beq.n	8007d74 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007d52:	493c      	ldr	r1, [pc, #240]	@ (8007e44 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007d54:	6978      	ldr	r0, [r7, #20]
 8007d56:	f7f8 febb 	bl	8000ad0 <__aeabi_fdiv>
 8007d5a:	1c03      	adds	r3, r0, #0
 8007d5c:	1c1c      	adds	r4, r3, #0
 8007d5e:	4939      	ldr	r1, [pc, #228]	@ (8007e44 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007d60:	6978      	ldr	r0, [r7, #20]
 8007d62:	f7f8 feb5 	bl	8000ad0 <__aeabi_fdiv>
 8007d66:	1c03      	adds	r3, r0, #0
 8007d68:	1c19      	adds	r1, r3, #0
 8007d6a:	1c20      	adds	r0, r4, #0
 8007d6c:	f7f9 f896 	bl	8000e9c <__aeabi_fmul>
 8007d70:	1c03      	adds	r3, r0, #0
 8007d72:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007d78:	1c19      	adds	r1, r3, #0
 8007d7a:	2085      	movs	r0, #133	@ 0x85
 8007d7c:	05c0      	lsls	r0, r0, #23
 8007d7e:	f7f9 f9cb 	bl	8001118 <__aeabi_fsub>
 8007d82:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007d84:	6939      	ldr	r1, [r7, #16]
 8007d86:	1c18      	adds	r0, r3, #0
 8007d88:	f7f9 f888 	bl	8000e9c <__aeabi_fmul>
 8007d8c:	1c03      	adds	r3, r0, #0
 8007d8e:	1c18      	adds	r0, r3, #0
 8007d90:	f012 fdf2 	bl	801a978 <sqrtf>
 8007d94:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007d9e:	2185      	movs	r1, #133	@ 0x85
 8007da0:	05c9      	lsls	r1, r1, #23
 8007da2:	6938      	ldr	r0, [r7, #16]
 8007da4:	f7f9 f87a 	bl	8000e9c <__aeabi_fmul>
 8007da8:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007daa:	1c19      	adds	r1, r3, #0
 8007dac:	1c28      	adds	r0, r5, #0
 8007dae:	f7f8 fe8f 	bl	8000ad0 <__aeabi_fdiv>
 8007db2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007db4:	1c19      	adds	r1, r3, #0
 8007db6:	1c20      	adds	r0, r4, #0
 8007db8:	f7f9 f870 	bl	8000e9c <__aeabi_fmul>
 8007dbc:	1c03      	adds	r3, r0, #0
 8007dbe:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc4:	68f9      	ldr	r1, [r7, #12]
 8007dc6:	1c18      	adds	r0, r3, #0
 8007dc8:	f7f9 f868 	bl	8000e9c <__aeabi_fmul>
 8007dcc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007dce:	6939      	ldr	r1, [r7, #16]
 8007dd0:	1c18      	adds	r0, r3, #0
 8007dd2:	f7f8 fe7d 	bl	8000ad0 <__aeabi_fdiv>
 8007dd6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007dd8:	68f9      	ldr	r1, [r7, #12]
 8007dda:	1c18      	adds	r0, r3, #0
 8007ddc:	f7f9 f85e 	bl	8000e9c <__aeabi_fmul>
 8007de0:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007de2:	1c19      	adds	r1, r3, #0
 8007de4:	1c20      	adds	r0, r4, #0
 8007de6:	f7f8 fce9 	bl	80007bc <__aeabi_fadd>
 8007dea:	1c03      	adds	r3, r0, #0
 8007dec:	1c18      	adds	r0, r3, #0
 8007dee:	f012 fdc3 	bl	801a978 <sqrtf>
 8007df2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007df4:	1c19      	adds	r1, r3, #0
 8007df6:	1c30      	adds	r0, r6, #0
 8007df8:	f7f9 f850 	bl	8000e9c <__aeabi_fmul>
 8007dfc:	1c03      	adds	r3, r0, #0
 8007dfe:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0c:	68f9      	ldr	r1, [r7, #12]
 8007e0e:	1c18      	adds	r0, r3, #0
 8007e10:	f7f9 f844 	bl	8000e9c <__aeabi_fmul>
 8007e14:	1c03      	adds	r3, r0, #0
 8007e16:	2182      	movs	r1, #130	@ 0x82
 8007e18:	05c9      	lsls	r1, r1, #23
 8007e1a:	1c18      	adds	r0, r3, #0
 8007e1c:	f7f8 fe58 	bl	8000ad0 <__aeabi_fdiv>
 8007e20:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007e22:	1c19      	adds	r1, r3, #0
 8007e24:	1c20      	adds	r0, r4, #0
 8007e26:	f7f8 fcc9 	bl	80007bc <__aeabi_fadd>
 8007e2a:	1c03      	adds	r3, r0, #0
 8007e2c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007e32:	46c0      	nop			@ (mov r8, r8)
 8007e34:	46bd      	mov	sp, r7
 8007e36:	b007      	add	sp, #28
 8007e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e3a:	46c0      	nop			@ (mov r8, r8)
 8007e3c:	42c80000 	.word	0x42c80000
 8007e40:	c2c80000 	.word	0xc2c80000
 8007e44:	44b40000 	.word	0x44b40000

08007e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e60:	46c0      	nop			@ (mov r8, r8)
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b004      	add	sp, #16
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e7a:	1c19      	adds	r1, r3, #0
 8007e7c:	6838      	ldr	r0, [r7, #0]
 8007e7e:	f7f9 f94b 	bl	8001118 <__aeabi_fsub>
 8007e82:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007e84:	1c19      	adds	r1, r3, #0
 8007e86:	1c20      	adds	r0, r4, #0
 8007e88:	f7f9 f808 	bl	8000e9c <__aeabi_fmul>
 8007e8c:	1c03      	adds	r3, r0, #0
 8007e8e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007e90:	4912      	ldr	r1, [pc, #72]	@ (8007edc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7f8 fb1a 	bl	80004cc <__aeabi_fcmplt>
 8007e98:	1e03      	subs	r3, r0, #0
 8007e9a:	d002      	beq.n	8007ea2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007e9c:	23fe      	movs	r3, #254	@ 0xfe
 8007e9e:	059b      	lsls	r3, r3, #22
 8007ea0:	e018      	b.n	8007ed4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007ea2:	490f      	ldr	r1, [pc, #60]	@ (8007ee0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7f8 fb25 	bl	80004f4 <__aeabi_fcmpgt>
 8007eaa:	1e03      	subs	r3, r0, #0
 8007eac:	d001      	beq.n	8007eb2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e010      	b.n	8007ed4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1c18      	adds	r0, r3, #0
 8007eb6:	f012 fd37 	bl	801a928 <expf>
 8007eba:	1c03      	adds	r3, r0, #0
 8007ebc:	21fe      	movs	r1, #254	@ 0xfe
 8007ebe:	0589      	lsls	r1, r1, #22
 8007ec0:	1c18      	adds	r0, r3, #0
 8007ec2:	f7f8 fc7b 	bl	80007bc <__aeabi_fadd>
 8007ec6:	1c03      	adds	r3, r0, #0
 8007ec8:	1c19      	adds	r1, r3, #0
 8007eca:	20fe      	movs	r0, #254	@ 0xfe
 8007ecc:	0580      	lsls	r0, r0, #22
 8007ece:	f7f8 fdff 	bl	8000ad0 <__aeabi_fdiv>
 8007ed2:	1c03      	adds	r3, r0, #0
    }
}
 8007ed4:	1c18      	adds	r0, r3, #0
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	b005      	add	sp, #20
 8007eda:	bd90      	pop	{r4, r7, pc}
 8007edc:	c2480000 	.word	0xc2480000
 8007ee0:	42480000 	.word	0x42480000

08007ee4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007efc:	46c0      	nop			@ (mov r8, r8)
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b004      	add	sp, #16
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d114      	bne.n	8007f40 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f1a:	1c19      	adds	r1, r3, #0
 8007f1c:	6838      	ldr	r0, [r7, #0]
 8007f1e:	f7f9 f8fb 	bl	8001118 <__aeabi_fsub>
 8007f22:	1c03      	adds	r3, r0, #0
 8007f24:	4918      	ldr	r1, [pc, #96]	@ (8007f88 <GasIndexAlgorithm__mox_model__process+0x84>)
 8007f26:	1c18      	adds	r0, r3, #0
 8007f28:	f7f8 fdd2 	bl	8000ad0 <__aeabi_fdiv>
 8007f2c:	1c03      	adds	r3, r0, #0
 8007f2e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007f34:	1c19      	adds	r1, r3, #0
 8007f36:	1c10      	adds	r0, r2, #0
 8007f38:	f7f8 ffb0 	bl	8000e9c <__aeabi_fmul>
 8007f3c:	1c03      	adds	r3, r0, #0
 8007f3e:	e01f      	b.n	8007f80 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f44:	1c19      	adds	r1, r3, #0
 8007f46:	6838      	ldr	r0, [r7, #0]
 8007f48:	f7f9 f8e6 	bl	8001118 <__aeabi_fsub>
 8007f4c:	1c03      	adds	r3, r0, #0
 8007f4e:	1c1a      	adds	r2, r3, #0
 8007f50:	2380      	movs	r3, #128	@ 0x80
 8007f52:	061b      	lsls	r3, r3, #24
 8007f54:	4053      	eors	r3, r2
 8007f56:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f5c:	490b      	ldr	r1, [pc, #44]	@ (8007f8c <GasIndexAlgorithm__mox_model__process+0x88>)
 8007f5e:	1c18      	adds	r0, r3, #0
 8007f60:	f7f8 fc2c 	bl	80007bc <__aeabi_fadd>
 8007f64:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007f66:	1c19      	adds	r1, r3, #0
 8007f68:	1c20      	adds	r0, r4, #0
 8007f6a:	f7f8 fdb1 	bl	8000ad0 <__aeabi_fdiv>
 8007f6e:	1c03      	adds	r3, r0, #0
 8007f70:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007f76:	1c19      	adds	r1, r3, #0
 8007f78:	1c10      	adds	r0, r2, #0
 8007f7a:	f7f8 ff8f 	bl	8000e9c <__aeabi_fmul>
 8007f7e:	1c03      	adds	r3, r0, #0
    }
}
 8007f80:	1c18      	adds	r0, r3, #0
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b003      	add	sp, #12
 8007f86:	bd90      	pop	{r4, r7, pc}
 8007f88:	44fa0000 	.word	0x44fa0000
 8007f8c:	435c0000 	.word	0x435c0000

08007f90 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2180      	movs	r1, #128	@ 0x80
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2184      	movs	r1, #132	@ 0x84
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2188      	movs	r1, #136	@ 0x88
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	505a      	str	r2, [r3, r1]
}
 8007fb6:	46c0      	nop			@ (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b004      	add	sp, #16
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2280      	movs	r2, #128	@ 0x80
 8007fce:	589c      	ldr	r4, [r3, r2]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2284      	movs	r2, #132	@ 0x84
 8007fd4:	589b      	ldr	r3, [r3, r2]
 8007fd6:	1c19      	adds	r1, r3, #0
 8007fd8:	6838      	ldr	r0, [r7, #0]
 8007fda:	f7f9 f89d 	bl	8001118 <__aeabi_fsub>
 8007fde:	1c03      	adds	r3, r0, #0
 8007fe0:	1c19      	adds	r1, r3, #0
 8007fe2:	1c20      	adds	r0, r4, #0
 8007fe4:	f7f8 ff5a 	bl	8000e9c <__aeabi_fmul>
 8007fe8:	1c03      	adds	r3, r0, #0
 8007fea:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007fec:	4940      	ldr	r1, [pc, #256]	@ (80080f0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007fee:	68b8      	ldr	r0, [r7, #8]
 8007ff0:	f7f8 fa6c 	bl	80004cc <__aeabi_fcmplt>
 8007ff4:	1e03      	subs	r3, r0, #0
 8007ff6:	d001      	beq.n	8007ffc <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80080f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007ffa:	e075      	b.n	80080e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007ffc:	493e      	ldr	r1, [pc, #248]	@ (80080f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007ffe:	68b8      	ldr	r0, [r7, #8]
 8008000:	f7f8 fa78 	bl	80004f4 <__aeabi_fcmpgt>
 8008004:	1e03      	subs	r3, r0, #0
 8008006:	d001      	beq.n	800800c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8008008:	2300      	movs	r3, #0
 800800a:	e06d      	b.n	80080e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800800c:	2100      	movs	r1, #0
 800800e:	6838      	ldr	r0, [r7, #0]
 8008010:	f7f8 fa7a 	bl	8000508 <__aeabi_fcmpge>
 8008014:	1e03      	subs	r3, r0, #0
 8008016:	d047      	beq.n	80080a8 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2288      	movs	r2, #136	@ 0x88
 800801c:	589b      	ldr	r3, [r3, r2]
 800801e:	21fe      	movs	r1, #254	@ 0xfe
 8008020:	0589      	lsls	r1, r1, #22
 8008022:	1c18      	adds	r0, r3, #0
 8008024:	f7f8 fa4c 	bl	80004c0 <__aeabi_fcmpeq>
 8008028:	1e03      	subs	r3, r0, #0
 800802a:	d00e      	beq.n	800804a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	1c19      	adds	r1, r3, #0
 8008032:	20fe      	movs	r0, #254	@ 0xfe
 8008034:	0580      	lsls	r0, r0, #22
 8008036:	f7f9 f86f 	bl	8001118 <__aeabi_fsub>
 800803a:	1c03      	adds	r3, r0, #0
 800803c:	492f      	ldr	r1, [pc, #188]	@ (80080fc <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800803e:	1c18      	adds	r0, r3, #0
 8008040:	f7f8 ff2c 	bl	8000e9c <__aeabi_fmul>
 8008044:	1c03      	adds	r3, r0, #0
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	e012      	b.n	8008070 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	492c      	ldr	r1, [pc, #176]	@ (8008100 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8008050:	1c18      	adds	r0, r3, #0
 8008052:	f7f8 ff23 	bl	8000e9c <__aeabi_fmul>
 8008056:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8008058:	1c19      	adds	r1, r3, #0
 800805a:	4826      	ldr	r0, [pc, #152]	@ (80080f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800805c:	f7f9 f85c 	bl	8001118 <__aeabi_fsub>
 8008060:	1c03      	adds	r3, r0, #0
 8008062:	2181      	movs	r1, #129	@ 0x81
 8008064:	05c9      	lsls	r1, r1, #23
 8008066:	1c18      	adds	r0, r3, #0
 8008068:	f7f8 fd32 	bl	8000ad0 <__aeabi_fdiv>
 800806c:	1c03      	adds	r3, r0, #0
 800806e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8008070:	4920      	ldr	r1, [pc, #128]	@ (80080f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f7f8 fba2 	bl	80007bc <__aeabi_fadd>
 8008078:	1c03      	adds	r3, r0, #0
 800807a:	1c1c      	adds	r4, r3, #0
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	1c18      	adds	r0, r3, #0
 8008080:	f012 fc52 	bl	801a928 <expf>
 8008084:	1c03      	adds	r3, r0, #0
 8008086:	21fe      	movs	r1, #254	@ 0xfe
 8008088:	0589      	lsls	r1, r1, #22
 800808a:	1c18      	adds	r0, r3, #0
 800808c:	f7f8 fb96 	bl	80007bc <__aeabi_fadd>
 8008090:	1c03      	adds	r3, r0, #0
 8008092:	1c19      	adds	r1, r3, #0
 8008094:	1c20      	adds	r0, r4, #0
 8008096:	f7f8 fd1b 	bl	8000ad0 <__aeabi_fdiv>
 800809a:	1c03      	adds	r3, r0, #0
 800809c:	68f9      	ldr	r1, [r7, #12]
 800809e:	1c18      	adds	r0, r3, #0
 80080a0:	f7f9 f83a 	bl	8001118 <__aeabi_fsub>
 80080a4:	1c03      	adds	r3, r0, #0
 80080a6:	e01f      	b.n	80080e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2188      	movs	r1, #136	@ 0x88
 80080b0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 80080b2:	1c19      	adds	r1, r3, #0
 80080b4:	1c10      	adds	r0, r2, #0
 80080b6:	f7f8 fd0b 	bl	8000ad0 <__aeabi_fdiv>
 80080ba:	1c03      	adds	r3, r0, #0
 80080bc:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	1c18      	adds	r0, r3, #0
 80080c2:	f012 fc31 	bl	801a928 <expf>
 80080c6:	1c03      	adds	r3, r0, #0
 80080c8:	21fe      	movs	r1, #254	@ 0xfe
 80080ca:	0589      	lsls	r1, r1, #22
 80080cc:	1c18      	adds	r0, r3, #0
 80080ce:	f7f8 fb75 	bl	80007bc <__aeabi_fadd>
 80080d2:	1c03      	adds	r3, r0, #0
 80080d4:	1c19      	adds	r1, r3, #0
 80080d6:	4807      	ldr	r0, [pc, #28]	@ (80080f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80080d8:	f7f8 fcfa 	bl	8000ad0 <__aeabi_fdiv>
 80080dc:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80080de:	1c19      	adds	r1, r3, #0
 80080e0:	1c20      	adds	r0, r4, #0
 80080e2:	f7f8 fedb 	bl	8000e9c <__aeabi_fmul>
 80080e6:	1c03      	adds	r3, r0, #0
        }
    }
}
 80080e8:	1c18      	adds	r0, r3, #0
 80080ea:	46bd      	mov	sp, r7
 80080ec:	b005      	add	sp, #20
 80080ee:	bd90      	pop	{r4, r7, pc}
 80080f0:	c2480000 	.word	0xc2480000
 80080f4:	43fa0000 	.word	0x43fa0000
 80080f8:	42480000 	.word	0x42480000
 80080fc:	3f8041ab 	.word	0x3f8041ab
 8008100:	40a00000 	.word	0x40a00000

08008104 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008104:	b590      	push	{r4, r7, lr}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	4913      	ldr	r1, [pc, #76]	@ (8008164 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8008116:	1c18      	adds	r0, r3, #0
 8008118:	f7f8 fb50 	bl	80007bc <__aeabi_fadd>
 800811c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800811e:	1c19      	adds	r1, r3, #0
 8008120:	1c20      	adds	r0, r4, #0
 8008122:	f7f8 fcd5 	bl	8000ad0 <__aeabi_fdiv>
 8008126:	1c03      	adds	r3, r0, #0
 8008128:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	228c      	movs	r2, #140	@ 0x8c
 800812e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	490b      	ldr	r1, [pc, #44]	@ (8008168 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800813a:	1c18      	adds	r0, r3, #0
 800813c:	f7f8 fb3e 	bl	80007bc <__aeabi_fadd>
 8008140:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008142:	1c19      	adds	r1, r3, #0
 8008144:	1c20      	adds	r0, r4, #0
 8008146:	f7f8 fcc3 	bl	8000ad0 <__aeabi_fdiv>
 800814a:	1c03      	adds	r3, r0, #0
 800814c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2290      	movs	r2, #144	@ 0x90
 8008152:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2294      	movs	r2, #148	@ 0x94
 8008158:	2100      	movs	r1, #0
 800815a:	5499      	strb	r1, [r3, r2]
}
 800815c:	46c0      	nop			@ (mov r8, r8)
 800815e:	46bd      	mov	sp, r7
 8008160:	b003      	add	sp, #12
 8008162:	bd90      	pop	{r4, r7, pc}
 8008164:	41a00000 	.word	0x41a00000
 8008168:	43fa0000 	.word	0x43fa0000

0800816c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800816c:	b590      	push	{r4, r7, lr}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2294      	movs	r2, #148	@ 0x94
 800817a:	5c9b      	ldrb	r3, [r3, r2]
 800817c:	2201      	movs	r2, #1
 800817e:	4053      	eors	r3, r2
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00f      	beq.n	80081a6 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2198      	movs	r1, #152	@ 0x98
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	219c      	movs	r1, #156	@ 0x9c
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	21a0      	movs	r1, #160	@ 0xa0
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2294      	movs	r2, #148	@ 0x94
 80081a2:	2101      	movs	r1, #1
 80081a4:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	228c      	movs	r2, #140	@ 0x8c
 80081aa:	589b      	ldr	r3, [r3, r2]
 80081ac:	1c19      	adds	r1, r3, #0
 80081ae:	20fe      	movs	r0, #254	@ 0xfe
 80081b0:	0580      	lsls	r0, r0, #22
 80081b2:	f7f8 ffb1 	bl	8001118 <__aeabi_fsub>
 80081b6:	1c03      	adds	r3, r0, #0
 80081b8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2298      	movs	r2, #152	@ 0x98
 80081be:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80081c0:	1c19      	adds	r1, r3, #0
 80081c2:	f7f8 fe6b 	bl	8000e9c <__aeabi_fmul>
 80081c6:	1c03      	adds	r3, r0, #0
 80081c8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	228c      	movs	r2, #140	@ 0x8c
 80081ce:	589b      	ldr	r3, [r3, r2]
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	1c18      	adds	r0, r3, #0
 80081d4:	f7f8 fe62 	bl	8000e9c <__aeabi_fmul>
 80081d8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 80081da:	1c19      	adds	r1, r3, #0
 80081dc:	1c20      	adds	r0, r4, #0
 80081de:	f7f8 faed 	bl	80007bc <__aeabi_fadd>
 80081e2:	1c03      	adds	r3, r0, #0
 80081e4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2298      	movs	r2, #152	@ 0x98
 80081ea:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2290      	movs	r2, #144	@ 0x90
 80081f0:	589b      	ldr	r3, [r3, r2]
 80081f2:	1c19      	adds	r1, r3, #0
 80081f4:	20fe      	movs	r0, #254	@ 0xfe
 80081f6:	0580      	lsls	r0, r0, #22
 80081f8:	f7f8 ff8e 	bl	8001118 <__aeabi_fsub>
 80081fc:	1c03      	adds	r3, r0, #0
 80081fe:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	229c      	movs	r2, #156	@ 0x9c
 8008204:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008206:	1c19      	adds	r1, r3, #0
 8008208:	f7f8 fe48 	bl	8000e9c <__aeabi_fmul>
 800820c:	1c03      	adds	r3, r0, #0
 800820e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2290      	movs	r2, #144	@ 0x90
 8008214:	589b      	ldr	r3, [r3, r2]
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	1c18      	adds	r0, r3, #0
 800821a:	f7f8 fe3f 	bl	8000e9c <__aeabi_fmul>
 800821e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8008220:	1c19      	adds	r1, r3, #0
 8008222:	1c20      	adds	r0, r4, #0
 8008224:	f7f8 faca 	bl	80007bc <__aeabi_fadd>
 8008228:	1c03      	adds	r3, r0, #0
 800822a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	229c      	movs	r2, #156	@ 0x9c
 8008230:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2298      	movs	r2, #152	@ 0x98
 8008236:	589a      	ldr	r2, [r3, r2]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	219c      	movs	r1, #156	@ 0x9c
 800823c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800823e:	1c19      	adds	r1, r3, #0
 8008240:	1c10      	adds	r0, r2, #0
 8008242:	f7f8 ff69 	bl	8001118 <__aeabi_fsub>
 8008246:	1c03      	adds	r3, r0, #0
 8008248:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800824a:	2100      	movs	r1, #0
 800824c:	6978      	ldr	r0, [r7, #20]
 800824e:	f7f8 f93d 	bl	80004cc <__aeabi_fcmplt>
 8008252:	1e03      	subs	r3, r0, #0
 8008254:	d004      	beq.n	8008260 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2280      	movs	r2, #128	@ 0x80
 800825a:	0612      	lsls	r2, r2, #24
 800825c:	4053      	eors	r3, r2
 800825e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008260:	4923      	ldr	r1, [pc, #140]	@ (80082f0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8008262:	6978      	ldr	r0, [r7, #20]
 8008264:	f7f8 fe1a 	bl	8000e9c <__aeabi_fmul>
 8008268:	1c03      	adds	r3, r0, #0
 800826a:	1c18      	adds	r0, r3, #0
 800826c:	f012 fb5c 	bl	801a928 <expf>
 8008270:	1c03      	adds	r3, r0, #0
 8008272:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008274:	491f      	ldr	r1, [pc, #124]	@ (80082f4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8008276:	6938      	ldr	r0, [r7, #16]
 8008278:	f7f8 fe10 	bl	8000e9c <__aeabi_fmul>
 800827c:	1c03      	adds	r3, r0, #0
 800827e:	491e      	ldr	r1, [pc, #120]	@ (80082f8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008280:	1c18      	adds	r0, r3, #0
 8008282:	f7f8 fa9b 	bl	80007bc <__aeabi_fadd>
 8008286:	1c03      	adds	r3, r0, #0
 8008288:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685c      	ldr	r4, [r3, #4]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	1c18      	adds	r0, r3, #0
 8008296:	f7f8 fa91 	bl	80007bc <__aeabi_fadd>
 800829a:	1c03      	adds	r3, r0, #0
 800829c:	1c19      	adds	r1, r3, #0
 800829e:	1c20      	adds	r0, r4, #0
 80082a0:	f7f8 fc16 	bl	8000ad0 <__aeabi_fdiv>
 80082a4:	1c03      	adds	r3, r0, #0
 80082a6:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 80082a8:	68b9      	ldr	r1, [r7, #8]
 80082aa:	20fe      	movs	r0, #254	@ 0xfe
 80082ac:	0580      	lsls	r0, r0, #22
 80082ae:	f7f8 ff33 	bl	8001118 <__aeabi_fsub>
 80082b2:	1c03      	adds	r3, r0, #0
 80082b4:	1c18      	adds	r0, r3, #0
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	22a0      	movs	r2, #160	@ 0xa0
 80082ba:	589b      	ldr	r3, [r3, r2]
 80082bc:	1c19      	adds	r1, r3, #0
 80082be:	f7f8 fded 	bl	8000e9c <__aeabi_fmul>
 80082c2:	1c03      	adds	r3, r0, #0
 80082c4:	1c1c      	adds	r4, r3, #0
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	68b8      	ldr	r0, [r7, #8]
 80082ca:	f7f8 fde7 	bl	8000e9c <__aeabi_fmul>
 80082ce:	1c03      	adds	r3, r0, #0
 80082d0:	1c19      	adds	r1, r3, #0
 80082d2:	1c20      	adds	r0, r4, #0
 80082d4:	f7f8 fa72 	bl	80007bc <__aeabi_fadd>
 80082d8:	1c03      	adds	r3, r0, #0
 80082da:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	22a0      	movs	r2, #160	@ 0xa0
 80082e0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	22a0      	movs	r2, #160	@ 0xa0
 80082e6:	589b      	ldr	r3, [r3, r2]
}
 80082e8:	1c18      	adds	r0, r3, #0
 80082ea:	46bd      	mov	sp, r7
 80082ec:	b007      	add	sp, #28
 80082ee:	bd90      	pop	{r4, r7, pc}
 80082f0:	be4ccccd 	.word	0xbe4ccccd
 80082f4:	43f00000 	.word	0x43f00000
 80082f8:	41a00000 	.word	0x41a00000

080082fc <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80082fc:	b590      	push	{r4, r7, lr}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6039      	str	r1, [r7, #0]
 8008304:	0011      	movs	r1, r2
 8008306:	1dfb      	adds	r3, r7, #7
 8008308:	1c02      	adds	r2, r0, #0
 800830a:	701a      	strb	r2, [r3, #0]
 800830c:	1dbb      	adds	r3, r7, #6
 800830e:	1c0a      	adds	r2, r1, #0
 8008310:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008312:	4b08      	ldr	r3, [pc, #32]	@ (8008334 <ReadRegister+0x38>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d008      	beq.n	800832c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800831a:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <ReadRegister+0x38>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	1dba      	adds	r2, r7, #6
 8008320:	7814      	ldrb	r4, [r2, #0]
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	1dfa      	adds	r2, r7, #7
 8008326:	7810      	ldrb	r0, [r2, #0]
 8008328:	0022      	movs	r2, r4
 800832a:	4798      	blx	r3
  }
}
 800832c:	46c0      	nop			@ (mov r8, r8)
 800832e:	46bd      	mov	sp, r7
 8008330:	b003      	add	sp, #12
 8008332:	bd90      	pop	{r4, r7, pc}
 8008334:	200028f4 	.word	0x200028f4

08008338 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008338:	b590      	push	{r4, r7, lr}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6039      	str	r1, [r7, #0]
 8008340:	0011      	movs	r1, r2
 8008342:	1dfb      	adds	r3, r7, #7
 8008344:	1c02      	adds	r2, r0, #0
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	1dbb      	adds	r3, r7, #6
 800834a:	1c0a      	adds	r2, r1, #0
 800834c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800834e:	4b08      	ldr	r3, [pc, #32]	@ (8008370 <WriteRegister+0x38>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d008      	beq.n	8008368 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008356:	4b06      	ldr	r3, [pc, #24]	@ (8008370 <WriteRegister+0x38>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	1dba      	adds	r2, r7, #6
 800835c:	7814      	ldrb	r4, [r2, #0]
 800835e:	6839      	ldr	r1, [r7, #0]
 8008360:	1dfa      	adds	r2, r7, #7
 8008362:	7810      	ldrb	r0, [r2, #0]
 8008364:	0022      	movs	r2, r4
 8008366:	4798      	blx	r3
  }
}
 8008368:	46c0      	nop			@ (mov r8, r8)
 800836a:	46bd      	mov	sp, r7
 800836c:	b003      	add	sp, #12
 800836e:	bd90      	pop	{r4, r7, pc}
 8008370:	200028f8 	.word	0x200028f8

08008374 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800837e:	4b07      	ldr	r3, [pc, #28]	@ (800839c <SGP_Init+0x28>)
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008384:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <SGP_Init+0x2c>)
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800838a:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <SGP_Init+0x30>)
 800838c:	2100      	movs	r1, #0
 800838e:	0018      	movs	r0, r3
 8008390:	f7ff f930 	bl	80075f4 <GasIndexAlgorithm_init>
}
 8008394:	46c0      	nop			@ (mov r8, r8)
 8008396:	46bd      	mov	sp, r7
 8008398:	b002      	add	sp, #8
 800839a:	bd80      	pop	{r7, pc}
 800839c:	200028f4 	.word	0x200028f4
 80083a0:	200028f8 	.word	0x200028f8
 80083a4:	20002908 	.word	0x20002908

080083a8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80083ac:	4b13      	ldr	r3, [pc, #76]	@ (80083fc <SGP_StartMeasurement+0x54>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00d      	beq.n	80083d0 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80083b4:	4b12      	ldr	r3, [pc, #72]	@ (8008400 <SGP_StartMeasurement+0x58>)
 80083b6:	2208      	movs	r2, #8
 80083b8:	0019      	movs	r1, r3
 80083ba:	2059      	movs	r0, #89	@ 0x59
 80083bc:	f7ff ffbc 	bl	8008338 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80083c0:	f001 fc5c 	bl	8009c7c <GetCurrentHalTicks>
 80083c4:	0003      	movs	r3, r0
 80083c6:	331e      	adds	r3, #30
 80083c8:	001a      	movs	r2, r3
 80083ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008404 <SGP_StartMeasurement+0x5c>)
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	e00c      	b.n	80083ea <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80083d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008408 <SGP_StartMeasurement+0x60>)
 80083d2:	2208      	movs	r2, #8
 80083d4:	0019      	movs	r1, r3
 80083d6:	2059      	movs	r0, #89	@ 0x59
 80083d8:	f7ff ffae 	bl	8008338 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80083dc:	f001 fc4e 	bl	8009c7c <GetCurrentHalTicks>
 80083e0:	0003      	movs	r3, r0
 80083e2:	33aa      	adds	r3, #170	@ 0xaa
 80083e4:	001a      	movs	r2, r3
 80083e6:	4b09      	ldr	r3, [pc, #36]	@ (800840c <SGP_StartMeasurement+0x64>)
 80083e8:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80083ea:	4b09      	ldr	r3, [pc, #36]	@ (8008410 <SGP_StartMeasurement+0x68>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 80083f0:	4b08      	ldr	r3, [pc, #32]	@ (8008414 <SGP_StartMeasurement+0x6c>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	701a      	strb	r2, [r3, #0]
}
 80083f6:	46c0      	nop			@ (mov r8, r8)
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	200029b0 	.word	0x200029b0
 8008400:	20000040 	.word	0x20000040
 8008404:	20000054 	.word	0x20000054
 8008408:	20000038 	.word	0x20000038
 800840c:	2000004c 	.word	0x2000004c
 8008410:	20002906 	.word	0x20002906
 8008414:	20002907 	.word	0x20002907

08008418 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
 800841c:	4b04      	ldr	r3, [pc, #16]	@ (8008430 <SGP_HeatedUp+0x18>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	0018      	movs	r0, r3
 8008422:	f001 fb63 	bl	8009aec <TimestampIsReached>
 8008426:	0003      	movs	r3, r0
 8008428:	0018      	movs	r0, r3
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			@ (mov r8, r8)
 8008430:	2000004c 	.word	0x2000004c

08008434 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8008438:	4b04      	ldr	r3, [pc, #16]	@ (800844c <SGP_MeasurementReady+0x18>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	0018      	movs	r0, r3
 800843e:	f001 fb55 	bl	8009aec <TimestampIsReached>
 8008442:	0003      	movs	r3, r0
}
 8008444:	0018      	movs	r0, r3
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	46c0      	nop			@ (mov r8, r8)
 800844c:	20000054 	.word	0x20000054

08008450 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8008454:	4b04      	ldr	r3, [pc, #16]	@ (8008468 <SGP_MeasurementDone+0x18>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	0018      	movs	r0, r3
 800845a:	f001 fb47 	bl	8009aec <TimestampIsReached>
 800845e:	0003      	movs	r3, r0
}
 8008460:	0018      	movs	r0, r3
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	46c0      	nop			@ (mov r8, r8)
 8008468:	20000050 	.word	0x20000050

0800846c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008470:	4b04      	ldr	r3, [pc, #16]	@ (8008484 <SGP_TurnHeaterOff+0x18>)
 8008472:	2202      	movs	r2, #2
 8008474:	0019      	movs	r1, r3
 8008476:	2059      	movs	r0, #89	@ 0x59
 8008478:	f7ff ff5e 	bl	8008338 <WriteRegister>
}
 800847c:	46c0      	nop			@ (mov r8, r8)
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	46c0      	nop			@ (mov r8, r8)
 8008484:	20000030 	.word	0x20000030

08008488 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8008488:	b5b0      	push	{r4, r5, r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af02      	add	r7, sp, #8
 800848e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008490:	f7ff ffc2 	bl	8008418 <SGP_HeatedUp>
 8008494:	1e03      	subs	r3, r0, #0
 8008496:	d038      	beq.n	800850a <SGP_GetMeasurementValues+0x82>
 8008498:	4bd5      	ldr	r3, [pc, #852]	@ (80087f0 <SGP_GetMeasurementValues+0x368>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2201      	movs	r2, #1
 800849e:	4053      	eors	r3, r2
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d031      	beq.n	800850a <SGP_GetMeasurementValues+0x82>
 80084a6:	4bd3      	ldr	r3, [pc, #844]	@ (80087f4 <SGP_GetMeasurementValues+0x36c>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2201      	movs	r2, #1
 80084ac:	4053      	eors	r3, r2
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d02a      	beq.n	800850a <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80084b4:	4ad0      	ldr	r2, [pc, #832]	@ (80087f8 <SGP_GetMeasurementValues+0x370>)
 80084b6:	4bd1      	ldr	r3, [pc, #836]	@ (80087fc <SGP_GetMeasurementValues+0x374>)
 80084b8:	0019      	movs	r1, r3
 80084ba:	2003      	movs	r0, #3
 80084bc:	f001 fb6c 	bl	8009b98 <CreateLine>
    HeatUpIsDone = true;
 80084c0:	4bcb      	ldr	r3, [pc, #812]	@ (80087f0 <SGP_GetMeasurementValues+0x368>)
 80084c2:	2201      	movs	r2, #1
 80084c4:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80084c6:	4bce      	ldr	r3, [pc, #824]	@ (8008800 <SGP_GetMeasurementValues+0x378>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00d      	beq.n	80084ea <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80084ce:	4bcd      	ldr	r3, [pc, #820]	@ (8008804 <SGP_GetMeasurementValues+0x37c>)
 80084d0:	2208      	movs	r2, #8
 80084d2:	0019      	movs	r1, r3
 80084d4:	2059      	movs	r0, #89	@ 0x59
 80084d6:	f7ff ff2f 	bl	8008338 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80084da:	f001 fbcf 	bl	8009c7c <GetCurrentHalTicks>
 80084de:	0003      	movs	r3, r0
 80084e0:	331e      	adds	r3, #30
 80084e2:	001a      	movs	r2, r3
 80084e4:	4bc8      	ldr	r3, [pc, #800]	@ (8008808 <SGP_GetMeasurementValues+0x380>)
 80084e6:	601a      	str	r2, [r3, #0]
 80084e8:	e00c      	b.n	8008504 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80084ea:	4bc8      	ldr	r3, [pc, #800]	@ (800880c <SGP_GetMeasurementValues+0x384>)
 80084ec:	2208      	movs	r2, #8
 80084ee:	0019      	movs	r1, r3
 80084f0:	2059      	movs	r0, #89	@ 0x59
 80084f2:	f7ff ff21 	bl	8008338 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80084f6:	f001 fbc1 	bl	8009c7c <GetCurrentHalTicks>
 80084fa:	0003      	movs	r3, r0
 80084fc:	331e      	adds	r3, #30
 80084fe:	001a      	movs	r2, r3
 8008500:	4bc1      	ldr	r3, [pc, #772]	@ (8008808 <SGP_GetMeasurementValues+0x380>)
 8008502:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8008504:	4bbb      	ldr	r3, [pc, #748]	@ (80087f4 <SGP_GetMeasurementValues+0x36c>)
 8008506:	2201      	movs	r2, #1
 8008508:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800850a:	4bb9      	ldr	r3, [pc, #740]	@ (80087f0 <SGP_GetMeasurementValues+0x368>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d100      	bne.n	8008514 <SGP_GetMeasurementValues+0x8c>
 8008512:	e1a9      	b.n	8008868 <SGP_GetMeasurementValues+0x3e0>
 8008514:	f7ff ff8e 	bl	8008434 <SGP_MeasurementReady>
 8008518:	1e03      	subs	r3, r0, #0
 800851a:	d100      	bne.n	800851e <SGP_GetMeasurementValues+0x96>
 800851c:	e1a4      	b.n	8008868 <SGP_GetMeasurementValues+0x3e0>
 800851e:	4bbc      	ldr	r3, [pc, #752]	@ (8008810 <SGP_GetMeasurementValues+0x388>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2201      	movs	r2, #1
 8008524:	4053      	eors	r3, r2
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d100      	bne.n	800852e <SGP_GetMeasurementValues+0xa6>
 800852c:	e19c      	b.n	8008868 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800852e:	4bb9      	ldr	r3, [pc, #740]	@ (8008814 <SGP_GetMeasurementValues+0x38c>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	4ab8      	ldr	r2, [pc, #736]	@ (8008818 <SGP_GetMeasurementValues+0x390>)
 8008536:	49b1      	ldr	r1, [pc, #708]	@ (80087fc <SGP_GetMeasurementValues+0x374>)
 8008538:	2003      	movs	r0, #3
 800853a:	f001 fb2d 	bl	8009b98 <CreateLine>
    MeasurementIsReady = true;
 800853e:	4bb4      	ldr	r3, [pc, #720]	@ (8008810 <SGP_GetMeasurementValues+0x388>)
 8008540:	2201      	movs	r2, #1
 8008542:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8008544:	4bb5      	ldr	r3, [pc, #724]	@ (800881c <SGP_GetMeasurementValues+0x394>)
 8008546:	2203      	movs	r2, #3
 8008548:	0019      	movs	r1, r3
 800854a:	2059      	movs	r0, #89	@ 0x59
 800854c:	f7ff fed6 	bl	80082fc <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8008550:	4bb2      	ldr	r3, [pc, #712]	@ (800881c <SGP_GetMeasurementValues+0x394>)
 8008552:	2203      	movs	r2, #3
 8008554:	2103      	movs	r1, #3
 8008556:	0018      	movs	r0, r3
 8008558:	f000 f9ec 	bl	8008934 <CheckCRC>
 800855c:	0003      	movs	r3, r0
 800855e:	001a      	movs	r2, r3
 8008560:	2301      	movs	r3, #1
 8008562:	4053      	eors	r3, r2
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d02a      	beq.n	80085c0 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800856a:	4aad      	ldr	r2, [pc, #692]	@ (8008820 <SGP_GetMeasurementValues+0x398>)
 800856c:	4bad      	ldr	r3, [pc, #692]	@ (8008824 <SGP_GetMeasurementValues+0x39c>)
 800856e:	0019      	movs	r1, r3
 8008570:	2001      	movs	r0, #1
 8008572:	f001 fb11 	bl	8009b98 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8008576:	4aac      	ldr	r2, [pc, #688]	@ (8008828 <SGP_GetMeasurementValues+0x3a0>)
 8008578:	4bac      	ldr	r3, [pc, #688]	@ (800882c <SGP_GetMeasurementValues+0x3a4>)
 800857a:	0019      	movs	r1, r3
 800857c:	2002      	movs	r0, #2
 800857e:	f001 fb0b 	bl	8009b98 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008582:	230f      	movs	r3, #15
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	e012      	b.n	80085b2 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800858c:	240f      	movs	r4, #15
 800858e:	193b      	adds	r3, r7, r4
 8008590:	7818      	ldrb	r0, [r3, #0]
 8008592:	193b      	adds	r3, r7, r4
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	4aa1      	ldr	r2, [pc, #644]	@ (800881c <SGP_GetMeasurementValues+0x394>)
 8008598:	5cd3      	ldrb	r3, [r2, r3]
 800859a:	4aa5      	ldr	r2, [pc, #660]	@ (8008830 <SGP_GetMeasurementValues+0x3a8>)
 800859c:	4997      	ldr	r1, [pc, #604]	@ (80087fc <SGP_GetMeasurementValues+0x374>)
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	0003      	movs	r3, r0
 80085a2:	2003      	movs	r0, #3
 80085a4:	f001 faf8 	bl	8009b98 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80085a8:	193b      	adds	r3, r7, r4
 80085aa:	781a      	ldrb	r2, [r3, #0]
 80085ac:	193b      	adds	r3, r7, r4
 80085ae:	3201      	adds	r2, #1
 80085b0:	701a      	strb	r2, [r3, #0]
 80085b2:	230f      	movs	r3, #15
 80085b4:	18fb      	adds	r3, r7, r3
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d9e7      	bls.n	800858c <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80085bc:	2300      	movs	r3, #0
 80085be:	e16b      	b.n	8008898 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80085c0:	f001 fb5c 	bl	8009c7c <GetCurrentHalTicks>
 80085c4:	0003      	movs	r3, r0
 80085c6:	22fa      	movs	r2, #250	@ 0xfa
 80085c8:	0092      	lsls	r2, r2, #2
 80085ca:	189a      	adds	r2, r3, r2
 80085cc:	4b99      	ldr	r3, [pc, #612]	@ (8008834 <SGP_GetMeasurementValues+0x3ac>)
 80085ce:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80085d0:	f7ff ff4c 	bl	800846c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80085d4:	4b8f      	ldr	r3, [pc, #572]	@ (8008814 <SGP_GetMeasurementValues+0x38c>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	3301      	adds	r3, #1
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	4b8d      	ldr	r3, [pc, #564]	@ (8008814 <SGP_GetMeasurementValues+0x38c>)
 80085de:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80085e0:	4b8c      	ldr	r3, [pc, #560]	@ (8008814 <SGP_GetMeasurementValues+0x38c>)
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	4b94      	ldr	r3, [pc, #592]	@ (8008838 <SGP_GetMeasurementValues+0x3b0>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d200      	bcs.n	80085ee <SGP_GetMeasurementValues+0x166>
 80085ec:	e13c      	b.n	8008868 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80085ee:	4b8b      	ldr	r3, [pc, #556]	@ (800881c <SGP_GetMeasurementValues+0x394>)
 80085f0:	785b      	ldrb	r3, [r3, #1]
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	b21a      	sxth	r2, r3
 80085f6:	4b89      	ldr	r3, [pc, #548]	@ (800881c <SGP_GetMeasurementValues+0x394>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	b21b      	sxth	r3, r3
 80085fc:	4313      	orrs	r3, r2
 80085fe:	b21a      	sxth	r2, r3
 8008600:	240c      	movs	r4, #12
 8008602:	193b      	adds	r3, r7, r4
 8008604:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8008606:	193b      	adds	r3, r7, r4
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	4a8c      	ldr	r2, [pc, #560]	@ (800883c <SGP_GetMeasurementValues+0x3b4>)
 800860c:	497b      	ldr	r1, [pc, #492]	@ (80087fc <SGP_GetMeasurementValues+0x374>)
 800860e:	2003      	movs	r0, #3
 8008610:	f001 fac2 	bl	8009b98 <CreateLine>
      int32_t tempVocIndex = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8008618:	193b      	adds	r3, r7, r4
 800861a:	8819      	ldrh	r1, [r3, #0]
 800861c:	2308      	movs	r3, #8
 800861e:	18fa      	adds	r2, r7, r3
 8008620:	4b87      	ldr	r3, [pc, #540]	@ (8008840 <SGP_GetMeasurementValues+0x3b8>)
 8008622:	0018      	movs	r0, r3
 8008624:	f7ff f848 	bl	80076b8 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4a86      	ldr	r2, [pc, #536]	@ (8008844 <SGP_GetMeasurementValues+0x3bc>)
 800862c:	4973      	ldr	r1, [pc, #460]	@ (80087fc <SGP_GetMeasurementValues+0x374>)
 800862e:	2003      	movs	r0, #3
 8008630:	f001 fab2 	bl	8009b98 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	dd5a      	ble.n	80086f8 <SGP_GetMeasurementValues+0x270>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b64      	cmp	r3, #100	@ 0x64
 8008648:	dc56      	bgt.n	80086f8 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	0018      	movs	r0, r3
 8008650:	f7fa fe34 	bl	80032bc <__aeabi_i2d>
 8008654:	2200      	movs	r2, #0
 8008656:	4b7c      	ldr	r3, [pc, #496]	@ (8008848 <SGP_GetMeasurementValues+0x3c0>)
 8008658:	f7f9 fb2a 	bl	8001cb0 <__aeabi_ddiv>
 800865c:	0002      	movs	r2, r0
 800865e:	000b      	movs	r3, r1
 8008660:	2000      	movs	r0, #0
 8008662:	497a      	ldr	r1, [pc, #488]	@ (800884c <SGP_GetMeasurementValues+0x3c4>)
 8008664:	f7fa fa30 	bl	8002ac8 <__aeabi_dsub>
 8008668:	0002      	movs	r2, r0
 800866a:	000b      	movs	r3, r1
 800866c:	0014      	movs	r4, r2
 800866e:	001d      	movs	r5, r3
 8008670:	4b77      	ldr	r3, [pc, #476]	@ (8008850 <SGP_GetMeasurementValues+0x3c8>)
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	0018      	movs	r0, r3
 8008676:	f7fa fe21 	bl	80032bc <__aeabi_i2d>
 800867a:	0002      	movs	r2, r0
 800867c:	000b      	movs	r3, r1
 800867e:	0020      	movs	r0, r4
 8008680:	0029      	movs	r1, r5
 8008682:	f7f9 ff59 	bl	8002538 <__aeabi_dmul>
 8008686:	0002      	movs	r2, r0
 8008688:	000b      	movs	r3, r1
 800868a:	0010      	movs	r0, r2
 800868c:	0019      	movs	r1, r3
 800868e:	f7f7 ffab 	bl	80005e8 <__aeabi_d2uiz>
 8008692:	0003      	movs	r3, r0
 8008694:	b29a      	uxth	r2, r3
 8008696:	4b6f      	ldr	r3, [pc, #444]	@ (8008854 <SGP_GetMeasurementValues+0x3cc>)
 8008698:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	0018      	movs	r0, r3
 80086a0:	f7fa fe0c 	bl	80032bc <__aeabi_i2d>
 80086a4:	2200      	movs	r2, #0
 80086a6:	4b68      	ldr	r3, [pc, #416]	@ (8008848 <SGP_GetMeasurementValues+0x3c0>)
 80086a8:	f7f9 fb02 	bl	8001cb0 <__aeabi_ddiv>
 80086ac:	0002      	movs	r2, r0
 80086ae:	000b      	movs	r3, r1
 80086b0:	0014      	movs	r4, r2
 80086b2:	001d      	movs	r5, r3
 80086b4:	4b66      	ldr	r3, [pc, #408]	@ (8008850 <SGP_GetMeasurementValues+0x3c8>)
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	0018      	movs	r0, r3
 80086ba:	f7fa fdff 	bl	80032bc <__aeabi_i2d>
 80086be:	0002      	movs	r2, r0
 80086c0:	000b      	movs	r3, r1
 80086c2:	0020      	movs	r0, r4
 80086c4:	0029      	movs	r1, r5
 80086c6:	f7f9 ff37 	bl	8002538 <__aeabi_dmul>
 80086ca:	0002      	movs	r2, r0
 80086cc:	000b      	movs	r3, r1
 80086ce:	0010      	movs	r0, r2
 80086d0:	0019      	movs	r1, r3
 80086d2:	f7f7 ff89 	bl	80005e8 <__aeabi_d2uiz>
 80086d6:	0003      	movs	r3, r0
 80086d8:	b29a      	uxth	r2, r3
 80086da:	4b5f      	ldr	r3, [pc, #380]	@ (8008858 <SGP_GetMeasurementValues+0x3d0>)
 80086dc:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 80086de:	4b5c      	ldr	r3, [pc, #368]	@ (8008850 <SGP_GetMeasurementValues+0x3c8>)
 80086e0:	881a      	ldrh	r2, [r3, #0]
 80086e2:	4b5e      	ldr	r3, [pc, #376]	@ (800885c <SGP_GetMeasurementValues+0x3d4>)
 80086e4:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 80086e6:	4b5d      	ldr	r3, [pc, #372]	@ (800885c <SGP_GetMeasurementValues+0x3d4>)
 80086e8:	8818      	ldrh	r0, [r3, #0]
 80086ea:	4b5a      	ldr	r3, [pc, #360]	@ (8008854 <SGP_GetMeasurementValues+0x3cc>)
 80086ec:	8819      	ldrh	r1, [r3, #0]
 80086ee:	4b5a      	ldr	r3, [pc, #360]	@ (8008858 <SGP_GetMeasurementValues+0x3d0>)
 80086f0:	881b      	ldrh	r3, [r3, #0]
 80086f2:	001a      	movs	r2, r3
 80086f4:	f000 fb96 	bl	8008e24 <SetVocLED>
      }
      if(*vocIndex > 100){
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b64      	cmp	r3, #100	@ 0x64
 80086fe:	dd66      	ble.n	80087ce <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	0018      	movs	r0, r3
 8008706:	f7fa fdd9 	bl	80032bc <__aeabi_i2d>
 800870a:	2200      	movs	r2, #0
 800870c:	4b4e      	ldr	r3, [pc, #312]	@ (8008848 <SGP_GetMeasurementValues+0x3c0>)
 800870e:	f7fa f9db 	bl	8002ac8 <__aeabi_dsub>
 8008712:	0002      	movs	r2, r0
 8008714:	000b      	movs	r3, r1
 8008716:	0010      	movs	r0, r2
 8008718:	0019      	movs	r1, r3
 800871a:	2200      	movs	r2, #0
 800871c:	4b50      	ldr	r3, [pc, #320]	@ (8008860 <SGP_GetMeasurementValues+0x3d8>)
 800871e:	f7f9 fac7 	bl	8001cb0 <__aeabi_ddiv>
 8008722:	0002      	movs	r2, r0
 8008724:	000b      	movs	r3, r1
 8008726:	0014      	movs	r4, r2
 8008728:	001d      	movs	r5, r3
 800872a:	4b49      	ldr	r3, [pc, #292]	@ (8008850 <SGP_GetMeasurementValues+0x3c8>)
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	0018      	movs	r0, r3
 8008730:	f7fa fdc4 	bl	80032bc <__aeabi_i2d>
 8008734:	0002      	movs	r2, r0
 8008736:	000b      	movs	r3, r1
 8008738:	0020      	movs	r0, r4
 800873a:	0029      	movs	r1, r5
 800873c:	f7f9 fefc 	bl	8002538 <__aeabi_dmul>
 8008740:	0002      	movs	r2, r0
 8008742:	000b      	movs	r3, r1
 8008744:	0010      	movs	r0, r2
 8008746:	0019      	movs	r1, r3
 8008748:	f7f7 ff4e 	bl	80005e8 <__aeabi_d2uiz>
 800874c:	0003      	movs	r3, r0
 800874e:	b29a      	uxth	r2, r3
 8008750:	4b40      	ldr	r3, [pc, #256]	@ (8008854 <SGP_GetMeasurementValues+0x3cc>)
 8008752:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	0018      	movs	r0, r3
 800875a:	f7fa fdaf 	bl	80032bc <__aeabi_i2d>
 800875e:	2200      	movs	r2, #0
 8008760:	4b39      	ldr	r3, [pc, #228]	@ (8008848 <SGP_GetMeasurementValues+0x3c0>)
 8008762:	f7fa f9b1 	bl	8002ac8 <__aeabi_dsub>
 8008766:	0002      	movs	r2, r0
 8008768:	000b      	movs	r3, r1
 800876a:	0010      	movs	r0, r2
 800876c:	0019      	movs	r1, r3
 800876e:	2200      	movs	r2, #0
 8008770:	4b3b      	ldr	r3, [pc, #236]	@ (8008860 <SGP_GetMeasurementValues+0x3d8>)
 8008772:	f7f9 fa9d 	bl	8001cb0 <__aeabi_ddiv>
 8008776:	0002      	movs	r2, r0
 8008778:	000b      	movs	r3, r1
 800877a:	2000      	movs	r0, #0
 800877c:	4933      	ldr	r1, [pc, #204]	@ (800884c <SGP_GetMeasurementValues+0x3c4>)
 800877e:	f7fa f9a3 	bl	8002ac8 <__aeabi_dsub>
 8008782:	0002      	movs	r2, r0
 8008784:	000b      	movs	r3, r1
 8008786:	0014      	movs	r4, r2
 8008788:	001d      	movs	r5, r3
 800878a:	4b31      	ldr	r3, [pc, #196]	@ (8008850 <SGP_GetMeasurementValues+0x3c8>)
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	0018      	movs	r0, r3
 8008790:	f7fa fd94 	bl	80032bc <__aeabi_i2d>
 8008794:	0002      	movs	r2, r0
 8008796:	000b      	movs	r3, r1
 8008798:	0020      	movs	r0, r4
 800879a:	0029      	movs	r1, r5
 800879c:	f7f9 fecc 	bl	8002538 <__aeabi_dmul>
 80087a0:	0002      	movs	r2, r0
 80087a2:	000b      	movs	r3, r1
 80087a4:	0010      	movs	r0, r2
 80087a6:	0019      	movs	r1, r3
 80087a8:	f7f7 ff1e 	bl	80005e8 <__aeabi_d2uiz>
 80087ac:	0003      	movs	r3, r0
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	4b2a      	ldr	r3, [pc, #168]	@ (800885c <SGP_GetMeasurementValues+0x3d4>)
 80087b2:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 80087b4:	4b26      	ldr	r3, [pc, #152]	@ (8008850 <SGP_GetMeasurementValues+0x3c8>)
 80087b6:	881a      	ldrh	r2, [r3, #0]
 80087b8:	4b27      	ldr	r3, [pc, #156]	@ (8008858 <SGP_GetMeasurementValues+0x3d0>)
 80087ba:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 80087bc:	4b27      	ldr	r3, [pc, #156]	@ (800885c <SGP_GetMeasurementValues+0x3d4>)
 80087be:	8818      	ldrh	r0, [r3, #0]
 80087c0:	4b24      	ldr	r3, [pc, #144]	@ (8008854 <SGP_GetMeasurementValues+0x3cc>)
 80087c2:	8819      	ldrh	r1, [r3, #0]
 80087c4:	4b24      	ldr	r3, [pc, #144]	@ (8008858 <SGP_GetMeasurementValues+0x3d0>)
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	001a      	movs	r2, r3
 80087ca:	f000 fb2b 	bl	8008e24 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 80087ce:	4b11      	ldr	r3, [pc, #68]	@ (8008814 <SGP_GetMeasurementValues+0x38c>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 80087d4:	4a23      	ldr	r2, [pc, #140]	@ (8008864 <SGP_GetMeasurementValues+0x3dc>)
 80087d6:	4b09      	ldr	r3, [pc, #36]	@ (80087fc <SGP_GetMeasurementValues+0x374>)
 80087d8:	0019      	movs	r1, r3
 80087da:	2003      	movs	r0, #3
 80087dc:	f001 f9dc 	bl	8009b98 <CreateLine>
      HT_MeasurementReceived = false;
 80087e0:	4b07      	ldr	r3, [pc, #28]	@ (8008800 <SGP_GetMeasurementValues+0x378>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80087e6:	4b03      	ldr	r3, [pc, #12]	@ (80087f4 <SGP_GetMeasurementValues+0x36c>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e053      	b.n	8008898 <SGP_GetMeasurementValues+0x410>
 80087f0:	20002906 	.word	0x20002906
 80087f4:	200029b1 	.word	0x200029b1
 80087f8:	0801babc 	.word	0x0801babc
 80087fc:	0801bae8 	.word	0x0801bae8
 8008800:	200029b0 	.word	0x200029b0
 8008804:	20000040 	.word	0x20000040
 8008808:	20000054 	.word	0x20000054
 800880c:	20000038 	.word	0x20000038
 8008810:	20002907 	.word	0x20002907
 8008814:	20002905 	.word	0x20002905
 8008818:	0801baec 	.word	0x0801baec
 800881c:	200028fc 	.word	0x200028fc
 8008820:	0801bb1c 	.word	0x0801bb1c
 8008824:	0801bb40 	.word	0x0801bb40
 8008828:	0801bb44 	.word	0x0801bb44
 800882c:	0801bb64 	.word	0x0801bb64
 8008830:	0801bb68 	.word	0x0801bb68
 8008834:	20000050 	.word	0x20000050
 8008838:	20000048 	.word	0x20000048
 800883c:	0801bb88 	.word	0x0801bb88
 8008840:	20002908 	.word	0x20002908
 8008844:	0801bb9c 	.word	0x0801bb9c
 8008848:	40590000 	.word	0x40590000
 800884c:	3ff00000 	.word	0x3ff00000
 8008850:	20000058 	.word	0x20000058
 8008854:	200029b6 	.word	0x200029b6
 8008858:	200029b4 	.word	0x200029b4
 800885c:	200029b2 	.word	0x200029b2
 8008860:	40790000 	.word	0x40790000
 8008864:	0801bbb0 	.word	0x0801bbb0
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8008868:	f7ff fdf2 	bl	8008450 <SGP_MeasurementDone>
 800886c:	1e03      	subs	r3, r0, #0
 800886e:	d012      	beq.n	8008896 <SGP_GetMeasurementValues+0x40e>
 8008870:	4b0b      	ldr	r3, [pc, #44]	@ (80088a0 <SGP_GetMeasurementValues+0x418>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00e      	beq.n	8008896 <SGP_GetMeasurementValues+0x40e>
 8008878:	4b0a      	ldr	r3, [pc, #40]	@ (80088a4 <SGP_GetMeasurementValues+0x41c>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8008880:	4a09      	ldr	r2, [pc, #36]	@ (80088a8 <SGP_GetMeasurementValues+0x420>)
 8008882:	4b0a      	ldr	r3, [pc, #40]	@ (80088ac <SGP_GetMeasurementValues+0x424>)
 8008884:	0019      	movs	r1, r3
 8008886:	2003      	movs	r0, #3
 8008888:	f001 f986 	bl	8009b98 <CreateLine>
    SGP_StartMeasurement();
 800888c:	f7ff fd8c 	bl	80083a8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8008890:	4b07      	ldr	r3, [pc, #28]	@ (80088b0 <SGP_GetMeasurementValues+0x428>)
 8008892:	2200      	movs	r2, #0
 8008894:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8008896:	2300      	movs	r3, #0
}
 8008898:	0018      	movs	r0, r3
 800889a:	46bd      	mov	sp, r7
 800889c:	b004      	add	sp, #16
 800889e:	bdb0      	pop	{r4, r5, r7, pc}
 80088a0:	20002906 	.word	0x20002906
 80088a4:	20002907 	.word	0x20002907
 80088a8:	0801bbd4 	.word	0x0801bbd4
 80088ac:	0801bae8 	.word	0x0801bae8
 80088b0:	200029b1 	.word	0x200029b1

080088b4 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80088ba:	4b1a      	ldr	r3, [pc, #104]	@ (8008924 <SGP_DeviceConnected+0x70>)
 80088bc:	2202      	movs	r2, #2
 80088be:	0019      	movs	r1, r3
 80088c0:	2059      	movs	r0, #89	@ 0x59
 80088c2:	f7ff fd39 	bl	8008338 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80088c6:	2001      	movs	r0, #1
 80088c8:	f001 fcf6 	bl	800a2b8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80088cc:	4b16      	ldr	r3, [pc, #88]	@ (8008928 <SGP_DeviceConnected+0x74>)
 80088ce:	2209      	movs	r2, #9
 80088d0:	0019      	movs	r1, r3
 80088d2:	2059      	movs	r0, #89	@ 0x59
 80088d4:	f7ff fd12 	bl	80082fc <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80088d8:	1dfb      	adds	r3, r7, #7
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	e011      	b.n	8008904 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80088e0:	1dfb      	adds	r3, r7, #7
 80088e2:	7818      	ldrb	r0, [r3, #0]
 80088e4:	1dfb      	adds	r3, r7, #7
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	4a0f      	ldr	r2, [pc, #60]	@ (8008928 <SGP_DeviceConnected+0x74>)
 80088ea:	5cd3      	ldrb	r3, [r2, r3]
 80088ec:	4a0f      	ldr	r2, [pc, #60]	@ (800892c <SGP_DeviceConnected+0x78>)
 80088ee:	4910      	ldr	r1, [pc, #64]	@ (8008930 <SGP_DeviceConnected+0x7c>)
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	0003      	movs	r3, r0
 80088f4:	2002      	movs	r0, #2
 80088f6:	f001 f94f 	bl	8009b98 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80088fa:	1dfb      	adds	r3, r7, #7
 80088fc:	781a      	ldrb	r2, [r3, #0]
 80088fe:	1dfb      	adds	r3, r7, #7
 8008900:	3201      	adds	r2, #1
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	1dfb      	adds	r3, r7, #7
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b08      	cmp	r3, #8
 800890a:	d9e9      	bls.n	80088e0 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800890c:	4b06      	ldr	r3, [pc, #24]	@ (8008928 <SGP_DeviceConnected+0x74>)
 800890e:	2203      	movs	r2, #3
 8008910:	2109      	movs	r1, #9
 8008912:	0018      	movs	r0, r3
 8008914:	f000 f80e 	bl	8008934 <CheckCRC>
 8008918:	0003      	movs	r3, r0
}
 800891a:	0018      	movs	r0, r3
 800891c:	46bd      	mov	sp, r7
 800891e:	b002      	add	sp, #8
 8008920:	bd80      	pop	{r7, pc}
 8008922:	46c0      	nop			@ (mov r8, r8)
 8008924:	20000034 	.word	0x20000034
 8008928:	200028fc 	.word	0x200028fc
 800892c:	0801bbf4 	.word	0x0801bbf4
 8008930:	0801bb64 	.word	0x0801bb64

08008934 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8008934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008936:	b08f      	sub	sp, #60	@ 0x3c
 8008938:	af00      	add	r7, sp, #0
 800893a:	6278      	str	r0, [r7, #36]	@ 0x24
 800893c:	0008      	movs	r0, r1
 800893e:	0011      	movs	r1, r2
 8008940:	2323      	movs	r3, #35	@ 0x23
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	1c02      	adds	r2, r0, #0
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	2322      	movs	r3, #34	@ 0x22
 800894a:	18fb      	adds	r3, r7, r3
 800894c:	1c0a      	adds	r2, r1, #0
 800894e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008950:	2317      	movs	r3, #23
 8008952:	2220      	movs	r2, #32
 8008954:	189b      	adds	r3, r3, r2
 8008956:	19db      	adds	r3, r3, r7
 8008958:	2200      	movs	r2, #0
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e09f      	b.n	8008a9e <CheckCRC+0x16a>
 800895e:	466b      	mov	r3, sp
 8008960:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8008962:	2322      	movs	r3, #34	@ 0x22
 8008964:	18fb      	adds	r3, r7, r3
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	001a      	movs	r2, r3
 800896a:	3a01      	subs	r2, #1
 800896c:	633a      	str	r2, [r7, #48]	@ 0x30
 800896e:	60bb      	str	r3, [r7, #8]
 8008970:	2200      	movs	r2, #0
 8008972:	60fa      	str	r2, [r7, #12]
 8008974:	68b8      	ldr	r0, [r7, #8]
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	0002      	movs	r2, r0
 800897a:	0f52      	lsrs	r2, r2, #29
 800897c:	000c      	movs	r4, r1
 800897e:	00e4      	lsls	r4, r4, #3
 8008980:	61fc      	str	r4, [r7, #28]
 8008982:	69fc      	ldr	r4, [r7, #28]
 8008984:	4314      	orrs	r4, r2
 8008986:	61fc      	str	r4, [r7, #28]
 8008988:	0002      	movs	r2, r0
 800898a:	00d2      	lsls	r2, r2, #3
 800898c:	61ba      	str	r2, [r7, #24]
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	2200      	movs	r2, #0
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	6838      	ldr	r0, [r7, #0]
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	0002      	movs	r2, r0
 800899a:	0f52      	lsrs	r2, r2, #29
 800899c:	000c      	movs	r4, r1
 800899e:	00e4      	lsls	r4, r4, #3
 80089a0:	617c      	str	r4, [r7, #20]
 80089a2:	697c      	ldr	r4, [r7, #20]
 80089a4:	4314      	orrs	r4, r2
 80089a6:	617c      	str	r4, [r7, #20]
 80089a8:	0002      	movs	r2, r0
 80089aa:	00d2      	lsls	r2, r2, #3
 80089ac:	613a      	str	r2, [r7, #16]
 80089ae:	3307      	adds	r3, #7
 80089b0:	08db      	lsrs	r3, r3, #3
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	466a      	mov	r2, sp
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	469d      	mov	sp, r3
 80089ba:	466b      	mov	r3, sp
 80089bc:	3300      	adds	r3, #0
 80089be:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80089c0:	2316      	movs	r3, #22
 80089c2:	2220      	movs	r2, #32
 80089c4:	189b      	adds	r3, r3, r2
 80089c6:	19db      	adds	r3, r3, r7
 80089c8:	2200      	movs	r2, #0
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	e01e      	b.n	8008a0c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80089ce:	2317      	movs	r3, #23
 80089d0:	2220      	movs	r2, #32
 80089d2:	189b      	adds	r3, r3, r2
 80089d4:	19db      	adds	r3, r3, r7
 80089d6:	781a      	ldrb	r2, [r3, #0]
 80089d8:	2116      	movs	r1, #22
 80089da:	2320      	movs	r3, #32
 80089dc:	18cb      	adds	r3, r1, r3
 80089de:	19db      	adds	r3, r3, r7
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	18d3      	adds	r3, r2, r3
 80089e4:	001a      	movs	r2, r3
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	189a      	adds	r2, r3, r2
 80089ea:	0008      	movs	r0, r1
 80089ec:	2320      	movs	r3, #32
 80089ee:	18cb      	adds	r3, r1, r3
 80089f0:	19db      	adds	r3, r3, r7
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	7811      	ldrb	r1, [r2, #0]
 80089f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089f8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80089fa:	2320      	movs	r3, #32
 80089fc:	18c3      	adds	r3, r0, r3
 80089fe:	19db      	adds	r3, r3, r7
 8008a00:	781a      	ldrb	r2, [r3, #0]
 8008a02:	2320      	movs	r3, #32
 8008a04:	18c3      	adds	r3, r0, r3
 8008a06:	19db      	adds	r3, r3, r7
 8008a08:	3201      	adds	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	2316      	movs	r3, #22
 8008a0e:	2220      	movs	r2, #32
 8008a10:	189b      	adds	r3, r3, r2
 8008a12:	19da      	adds	r2, r3, r7
 8008a14:	2322      	movs	r3, #34	@ 0x22
 8008a16:	18fb      	adds	r3, r7, r3
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d3d6      	bcc.n	80089ce <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8008a20:	2417      	movs	r4, #23
 8008a22:	2320      	movs	r3, #32
 8008a24:	18e3      	adds	r3, r4, r3
 8008a26:	19db      	adds	r3, r3, r7
 8008a28:	781a      	ldrb	r2, [r3, #0]
 8008a2a:	2322      	movs	r3, #34	@ 0x22
 8008a2c:	18fb      	adds	r3, r7, r3
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	18d3      	adds	r3, r2, r3
 8008a32:	3b01      	subs	r3, #1
 8008a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a36:	18d2      	adds	r2, r2, r3
 8008a38:	250b      	movs	r5, #11
 8008a3a:	2320      	movs	r3, #32
 8008a3c:	18eb      	adds	r3, r5, r3
 8008a3e:	19db      	adds	r3, r3, r7
 8008a40:	7812      	ldrb	r2, [r2, #0]
 8008a42:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8008a44:	2322      	movs	r3, #34	@ 0x22
 8008a46:	18fb      	adds	r3, r7, r3
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a50:	0011      	movs	r1, r2
 8008a52:	0018      	movs	r0, r3
 8008a54:	f000 f838 	bl	8008ac8 <CalculateCRC>
 8008a58:	0003      	movs	r3, r0
 8008a5a:	001a      	movs	r2, r3
 8008a5c:	2320      	movs	r3, #32
 8008a5e:	18eb      	adds	r3, r5, r3
 8008a60:	19db      	adds	r3, r3, r7
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00c      	beq.n	8008a82 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008a68:	2320      	movs	r3, #32
 8008a6a:	18e3      	adds	r3, r4, r3
 8008a6c:	19db      	adds	r3, r3, r7
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	3301      	adds	r3, #1
 8008a72:	4a13      	ldr	r2, [pc, #76]	@ (8008ac0 <CheckCRC+0x18c>)
 8008a74:	4913      	ldr	r1, [pc, #76]	@ (8008ac4 <CheckCRC+0x190>)
 8008a76:	2001      	movs	r0, #1
 8008a78:	f001 f88e 	bl	8009b98 <CreateLine>
      return false;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	46b5      	mov	sp, r6
 8008a80:	e019      	b.n	8008ab6 <CheckCRC+0x182>
 8008a82:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008a84:	2217      	movs	r2, #23
 8008a86:	2320      	movs	r3, #32
 8008a88:	18d3      	adds	r3, r2, r3
 8008a8a:	19db      	adds	r3, r3, r7
 8008a8c:	2120      	movs	r1, #32
 8008a8e:	1852      	adds	r2, r2, r1
 8008a90:	19d1      	adds	r1, r2, r7
 8008a92:	2222      	movs	r2, #34	@ 0x22
 8008a94:	18ba      	adds	r2, r7, r2
 8008a96:	7809      	ldrb	r1, [r1, #0]
 8008a98:	7812      	ldrb	r2, [r2, #0]
 8008a9a:	188a      	adds	r2, r1, r2
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	2317      	movs	r3, #23
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	189b      	adds	r3, r3, r2
 8008aa4:	19da      	adds	r2, r3, r7
 8008aa6:	2323      	movs	r3, #35	@ 0x23
 8008aa8:	18fb      	adds	r3, r7, r3
 8008aaa:	7812      	ldrb	r2, [r2, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d200      	bcs.n	8008ab4 <CheckCRC+0x180>
 8008ab2:	e754      	b.n	800895e <CheckCRC+0x2a>
    }
  }
  return true;
 8008ab4:	2301      	movs	r3, #1
}
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	b00f      	add	sp, #60	@ 0x3c
 8008abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008abe:	46c0      	nop			@ (mov r8, r8)
 8008ac0:	0801bc14 	.word	0x0801bc14
 8008ac4:	0801bb40 	.word	0x0801bb40

08008ac8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	000a      	movs	r2, r1
 8008ad2:	1cfb      	adds	r3, r7, #3
 8008ad4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008ad6:	230f      	movs	r3, #15
 8008ad8:	18fb      	adds	r3, r7, r3
 8008ada:	22ff      	movs	r2, #255	@ 0xff
 8008adc:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008ade:	230e      	movs	r3, #14
 8008ae0:	18fb      	adds	r3, r7, r3
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e037      	b.n	8008b58 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008ae8:	230e      	movs	r3, #14
 8008aea:	18fb      	adds	r3, r7, r3
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	18d3      	adds	r3, r2, r3
 8008af2:	7819      	ldrb	r1, [r3, #0]
 8008af4:	220f      	movs	r2, #15
 8008af6:	18bb      	adds	r3, r7, r2
 8008af8:	18ba      	adds	r2, r7, r2
 8008afa:	7812      	ldrb	r2, [r2, #0]
 8008afc:	404a      	eors	r2, r1
 8008afe:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008b00:	230d      	movs	r3, #13
 8008b02:	18fb      	adds	r3, r7, r3
 8008b04:	2200      	movs	r2, #0
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	e01b      	b.n	8008b42 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8008b0a:	210f      	movs	r1, #15
 8008b0c:	187b      	adds	r3, r7, r1
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	b25b      	sxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da09      	bge.n	8008b2a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8008b16:	187b      	adds	r3, r7, r1
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	b25b      	sxtb	r3, r3
 8008b1e:	2231      	movs	r2, #49	@ 0x31
 8008b20:	4053      	eors	r3, r2
 8008b22:	b25a      	sxtb	r2, r3
 8008b24:	187b      	adds	r3, r7, r1
 8008b26:	701a      	strb	r2, [r3, #0]
 8008b28:	e005      	b.n	8008b36 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8008b2a:	230f      	movs	r3, #15
 8008b2c:	18fa      	adds	r2, r7, r3
 8008b2e:	18fb      	adds	r3, r7, r3
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	18db      	adds	r3, r3, r3
 8008b34:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008b36:	210d      	movs	r1, #13
 8008b38:	187b      	adds	r3, r7, r1
 8008b3a:	781a      	ldrb	r2, [r3, #0]
 8008b3c:	187b      	adds	r3, r7, r1
 8008b3e:	3201      	adds	r2, #1
 8008b40:	701a      	strb	r2, [r3, #0]
 8008b42:	230d      	movs	r3, #13
 8008b44:	18fb      	adds	r3, r7, r3
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b07      	cmp	r3, #7
 8008b4a:	d9de      	bls.n	8008b0a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008b4c:	210e      	movs	r1, #14
 8008b4e:	187b      	adds	r3, r7, r1
 8008b50:	781a      	ldrb	r2, [r3, #0]
 8008b52:	187b      	adds	r3, r7, r1
 8008b54:	3201      	adds	r2, #1
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	230e      	movs	r3, #14
 8008b5a:	18fa      	adds	r2, r7, r3
 8008b5c:	1cfb      	adds	r3, r7, #3
 8008b5e:	7812      	ldrb	r2, [r2, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d3c0      	bcc.n	8008ae8 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008b66:	230f      	movs	r3, #15
 8008b68:	18fb      	adds	r3, r7, r3
 8008b6a:	781b      	ldrb	r3, [r3, #0]
}
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b004      	add	sp, #16
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4936      	ldr	r1, [pc, #216]	@ (8008c5c <SGP_GetHT+0xe8>)
 8008b84:	1c18      	adds	r0, r3, #0
 8008b86:	f7f7 fe19 	bl	80007bc <__aeabi_fadd>
 8008b8a:	1c03      	adds	r3, r0, #0
 8008b8c:	4934      	ldr	r1, [pc, #208]	@ (8008c60 <SGP_GetHT+0xec>)
 8008b8e:	1c18      	adds	r0, r3, #0
 8008b90:	f7f7 ff9e 	bl	8000ad0 <__aeabi_fdiv>
 8008b94:	1c03      	adds	r3, r0, #0
 8008b96:	4933      	ldr	r1, [pc, #204]	@ (8008c64 <SGP_GetHT+0xf0>)
 8008b98:	1c18      	adds	r0, r3, #0
 8008b9a:	f7f8 f97f 	bl	8000e9c <__aeabi_fmul>
 8008b9e:	1c03      	adds	r3, r0, #0
 8008ba0:	1c18      	adds	r0, r3, #0
 8008ba2:	f7f7 fd09 	bl	80005b8 <__aeabi_f2uiz>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	4b2f      	ldr	r3, [pc, #188]	@ (8008c68 <SGP_GetHT+0xf4>)
 8008bac:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	492e      	ldr	r1, [pc, #184]	@ (8008c6c <SGP_GetHT+0xf8>)
 8008bb4:	1c18      	adds	r0, r3, #0
 8008bb6:	f7f7 ff8b 	bl	8000ad0 <__aeabi_fdiv>
 8008bba:	1c03      	adds	r3, r0, #0
 8008bbc:	4929      	ldr	r1, [pc, #164]	@ (8008c64 <SGP_GetHT+0xf0>)
 8008bbe:	1c18      	adds	r0, r3, #0
 8008bc0:	f7f8 f96c 	bl	8000e9c <__aeabi_fmul>
 8008bc4:	1c03      	adds	r3, r0, #0
 8008bc6:	1c18      	adds	r0, r3, #0
 8008bc8:	f7f7 fcf6 	bl	80005b8 <__aeabi_f2uiz>
 8008bcc:	0003      	movs	r3, r0
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	4b27      	ldr	r3, [pc, #156]	@ (8008c70 <SGP_GetHT+0xfc>)
 8008bd2:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008bd4:	4b26      	ldr	r3, [pc, #152]	@ (8008c70 <SGP_GetHT+0xfc>)
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4b25      	ldr	r3, [pc, #148]	@ (8008c74 <SGP_GetHT+0x100>)
 8008be0:	709a      	strb	r2, [r3, #2]
 8008be2:	4b24      	ldr	r3, [pc, #144]	@ (8008c74 <SGP_GetHT+0x100>)
 8008be4:	789a      	ldrb	r2, [r3, #2]
 8008be6:	210c      	movs	r1, #12
 8008be8:	187b      	adds	r3, r7, r1
 8008bea:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008bec:	4b20      	ldr	r3, [pc, #128]	@ (8008c70 <SGP_GetHT+0xfc>)
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	4b20      	ldr	r3, [pc, #128]	@ (8008c74 <SGP_GetHT+0x100>)
 8008bf4:	70da      	strb	r2, [r3, #3]
 8008bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8008c74 <SGP_GetHT+0x100>)
 8008bf8:	78da      	ldrb	r2, [r3, #3]
 8008bfa:	187b      	adds	r3, r7, r1
 8008bfc:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8008bfe:	187b      	adds	r3, r7, r1
 8008c00:	2102      	movs	r1, #2
 8008c02:	0018      	movs	r0, r3
 8008c04:	f7ff ff60 	bl	8008ac8 <CalculateCRC>
 8008c08:	0003      	movs	r3, r0
 8008c0a:	001a      	movs	r2, r3
 8008c0c:	4b19      	ldr	r3, [pc, #100]	@ (8008c74 <SGP_GetHT+0x100>)
 8008c0e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008c10:	4b15      	ldr	r3, [pc, #84]	@ (8008c68 <SGP_GetHT+0xf4>)
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	0a1b      	lsrs	r3, r3, #8
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	4b16      	ldr	r3, [pc, #88]	@ (8008c74 <SGP_GetHT+0x100>)
 8008c1c:	715a      	strb	r2, [r3, #5]
 8008c1e:	4b15      	ldr	r3, [pc, #84]	@ (8008c74 <SGP_GetHT+0x100>)
 8008c20:	795a      	ldrb	r2, [r3, #5]
 8008c22:	2108      	movs	r1, #8
 8008c24:	187b      	adds	r3, r7, r1
 8008c26:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008c28:	4b0f      	ldr	r3, [pc, #60]	@ (8008c68 <SGP_GetHT+0xf4>)
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	4b11      	ldr	r3, [pc, #68]	@ (8008c74 <SGP_GetHT+0x100>)
 8008c30:	719a      	strb	r2, [r3, #6]
 8008c32:	4b10      	ldr	r3, [pc, #64]	@ (8008c74 <SGP_GetHT+0x100>)
 8008c34:	799a      	ldrb	r2, [r3, #6]
 8008c36:	187b      	adds	r3, r7, r1
 8008c38:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f7ff ff42 	bl	8008ac8 <CalculateCRC>
 8008c44:	0003      	movs	r3, r0
 8008c46:	001a      	movs	r2, r3
 8008c48:	4b0a      	ldr	r3, [pc, #40]	@ (8008c74 <SGP_GetHT+0x100>)
 8008c4a:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c78 <SGP_GetHT+0x104>)
 8008c4e:	2201      	movs	r2, #1
 8008c50:	701a      	strb	r2, [r3, #0]
}
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	46bd      	mov	sp, r7
 8008c56:	b004      	add	sp, #16
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	46c0      	nop			@ (mov r8, r8)
 8008c5c:	42340000 	.word	0x42340000
 8008c60:	432f0000 	.word	0x432f0000
 8008c64:	477fff00 	.word	0x477fff00
 8008c68:	200029ae 	.word	0x200029ae
 8008c6c:	42c80000 	.word	0x42c80000
 8008c70:	200029ac 	.word	0x200029ac
 8008c74:	20000040 	.word	0x20000040
 8008c78:	200029b0 	.word	0x200029b0

08008c7c <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  init = false;
 8008c80:	4b02      	ldr	r3, [pc, #8]	@ (8008c8c <InitDone+0x10>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	701a      	strb	r2, [r3, #0]
}
 8008c86:	46c0      	nop			@ (mov r8, r8)
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	2000005a 	.word	0x2000005a

08008c90 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 8008c96:	f7fc fd03 	bl	80056a0 <ReadBatteryVoltage>
 8008c9a:	1c03      	adds	r3, r0, #0
 8008c9c:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 8008c9e:	491f      	ldr	r1, [pc, #124]	@ (8008d1c <batteryChargeCheck+0x8c>)
 8008ca0:	6838      	ldr	r0, [r7, #0]
 8008ca2:	f7f7 fc13 	bl	80004cc <__aeabi_fcmplt>
 8008ca6:	1e03      	subs	r3, r0, #0
 8008ca8:	d002      	beq.n	8008cb0 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 8008caa:	1dfb      	adds	r3, r7, #7
 8008cac:	2200      	movs	r2, #0
 8008cae:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 8008cb0:	6838      	ldr	r0, [r7, #0]
 8008cb2:	f7fa fb55 	bl	8003360 <__aeabi_f2d>
 8008cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8008d20 <batteryChargeCheck+0x90>)
 8008cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d24 <batteryChargeCheck+0x94>)
 8008cba:	f7f7 fbcd 	bl	8000458 <__aeabi_dcmplt>
 8008cbe:	1e03      	subs	r3, r0, #0
 8008cc0:	d008      	beq.n	8008cd4 <batteryChargeCheck+0x44>
 8008cc2:	4916      	ldr	r1, [pc, #88]	@ (8008d1c <batteryChargeCheck+0x8c>)
 8008cc4:	6838      	ldr	r0, [r7, #0]
 8008cc6:	f7f7 fc1f 	bl	8000508 <__aeabi_fcmpge>
 8008cca:	1e03      	subs	r3, r0, #0
 8008ccc:	d002      	beq.n	8008cd4 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 8008cce:	1dfb      	adds	r3, r7, #7
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8008cd4:	2181      	movs	r1, #129	@ 0x81
 8008cd6:	05c9      	lsls	r1, r1, #23
 8008cd8:	6838      	ldr	r0, [r7, #0]
 8008cda:	f7f7 fbf7 	bl	80004cc <__aeabi_fcmplt>
 8008cde:	1e03      	subs	r3, r0, #0
 8008ce0:	d00b      	beq.n	8008cfa <batteryChargeCheck+0x6a>
 8008ce2:	6838      	ldr	r0, [r7, #0]
 8008ce4:	f7fa fb3c 	bl	8003360 <__aeabi_f2d>
 8008ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8008d20 <batteryChargeCheck+0x90>)
 8008cea:	4b0e      	ldr	r3, [pc, #56]	@ (8008d24 <batteryChargeCheck+0x94>)
 8008cec:	f7f7 fbd2 	bl	8000494 <__aeabi_dcmpge>
 8008cf0:	1e03      	subs	r3, r0, #0
 8008cf2:	d002      	beq.n	8008cfa <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8008cf4:	1dfb      	adds	r3, r7, #7
 8008cf6:	2203      	movs	r2, #3
 8008cf8:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8008cfa:	2181      	movs	r1, #129	@ 0x81
 8008cfc:	05c9      	lsls	r1, r1, #23
 8008cfe:	6838      	ldr	r0, [r7, #0]
 8008d00:	f7f7 fc02 	bl	8000508 <__aeabi_fcmpge>
 8008d04:	1e03      	subs	r3, r0, #0
 8008d06:	d002      	beq.n	8008d0e <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8008d08:	1dfb      	adds	r3, r7, #7
 8008d0a:	2204      	movs	r2, #4
 8008d0c:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8008d0e:	1dfb      	adds	r3, r7, #7
 8008d10:	781b      	ldrb	r3, [r3, #0]
}
 8008d12:	0018      	movs	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	b002      	add	sp, #8
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	46c0      	nop			@ (mov r8, r8)
 8008d1c:	40600000 	.word	0x40600000
 8008d20:	9999999a 	.word	0x9999999a
 8008d24:	400d9999 	.word	0x400d9999

08008d28 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	0004      	movs	r4, r0
 8008d30:	0008      	movs	r0, r1
 8008d32:	0011      	movs	r1, r2
 8008d34:	1dbb      	adds	r3, r7, #6
 8008d36:	1c22      	adds	r2, r4, #0
 8008d38:	801a      	strh	r2, [r3, #0]
 8008d3a:	1d3b      	adds	r3, r7, #4
 8008d3c:	1c02      	adds	r2, r0, #0
 8008d3e:	801a      	strh	r2, [r3, #0]
 8008d40:	1cbb      	adds	r3, r7, #2
 8008d42:	1c0a      	adds	r2, r1, #0
 8008d44:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8008d46:	4b0f      	ldr	r3, [pc, #60]	@ (8008d84 <SetStatusLED+0x5c>)
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <SetStatusLED+0x36>
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d88 <SetStatusLED+0x60>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d103      	bne.n	8008d5e <SetStatusLED+0x36>
 8008d56:	4b0d      	ldr	r3, [pc, #52]	@ (8008d8c <SetStatusLED+0x64>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00e      	beq.n	8008d7c <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8008d5e:	2380      	movs	r3, #128	@ 0x80
 8008d60:	05db      	lsls	r3, r3, #23
 8008d62:	1dba      	adds	r2, r7, #6
 8008d64:	8812      	ldrh	r2, [r2, #0]
 8008d66:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8008d68:	2380      	movs	r3, #128	@ 0x80
 8008d6a:	05db      	lsls	r3, r3, #23
 8008d6c:	1d3a      	adds	r2, r7, #4
 8008d6e:	8812      	ldrh	r2, [r2, #0]
 8008d70:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8008d72:	2380      	movs	r3, #128	@ 0x80
 8008d74:	05db      	lsls	r3, r3, #23
 8008d76:	1cba      	adds	r2, r7, #2
 8008d78:	8812      	ldrh	r2, [r2, #0]
 8008d7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008d7c:	46c0      	nop			@ (mov r8, r8)
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	b003      	add	sp, #12
 8008d82:	bd90      	pop	{r4, r7, pc}
 8008d84:	200029b9 	.word	0x200029b9
 8008d88:	2000005a 	.word	0x2000005a
 8008d8c:	200029ba 	.word	0x200029ba

08008d90 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8008d90:	b590      	push	{r4, r7, lr}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	0004      	movs	r4, r0
 8008d98:	0008      	movs	r0, r1
 8008d9a:	0011      	movs	r1, r2
 8008d9c:	1dfb      	adds	r3, r7, #7
 8008d9e:	1c22      	adds	r2, r4, #0
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	1dbb      	adds	r3, r7, #6
 8008da4:	1c02      	adds	r2, r0, #0
 8008da6:	701a      	strb	r2, [r3, #0]
 8008da8:	1d7b      	adds	r3, r7, #5
 8008daa:	1c0a      	adds	r2, r1, #0
 8008dac:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8008dae:	4b19      	ldr	r3, [pc, #100]	@ (8008e14 <SetDBLED+0x84>)
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d107      	bne.n	8008dc6 <SetDBLED+0x36>
 8008db6:	4b18      	ldr	r3, [pc, #96]	@ (8008e18 <SetDBLED+0x88>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d103      	bne.n	8008dc6 <SetDBLED+0x36>
 8008dbe:	4b17      	ldr	r3, [pc, #92]	@ (8008e1c <SetDBLED+0x8c>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d022      	beq.n	8008e0c <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8008dc6:	1dfb      	adds	r3, r7, #7
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	4053      	eors	r3, r2
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	001a      	movs	r2, r3
 8008dd2:	4b13      	ldr	r3, [pc, #76]	@ (8008e20 <SetDBLED+0x90>)
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	f002 fe03 	bl	800b9e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8008ddc:	1dbb      	adds	r3, r7, #6
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2201      	movs	r2, #1
 8008de2:	4053      	eors	r3, r2
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	001a      	movs	r2, r3
 8008de8:	2380      	movs	r3, #128	@ 0x80
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	480c      	ldr	r0, [pc, #48]	@ (8008e20 <SetDBLED+0x90>)
 8008dee:	0019      	movs	r1, r3
 8008df0:	f002 fdf7 	bl	800b9e2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8008df4:	1d7b      	adds	r3, r7, #5
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	4053      	eors	r3, r2
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	001a      	movs	r2, r3
 8008e00:	2380      	movs	r3, #128	@ 0x80
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4806      	ldr	r0, [pc, #24]	@ (8008e20 <SetDBLED+0x90>)
 8008e06:	0019      	movs	r1, r3
 8008e08:	f002 fdeb 	bl	800b9e2 <HAL_GPIO_WritePin>
  }
}
 8008e0c:	46c0      	nop			@ (mov r8, r8)
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	b003      	add	sp, #12
 8008e12:	bd90      	pop	{r4, r7, pc}
 8008e14:	200029b9 	.word	0x200029b9
 8008e18:	2000005a 	.word	0x2000005a
 8008e1c:	200029ba 	.word	0x200029ba
 8008e20:	50000400 	.word	0x50000400

08008e24 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8008e24:	b590      	push	{r4, r7, lr}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	0004      	movs	r4, r0
 8008e2c:	0008      	movs	r0, r1
 8008e2e:	0011      	movs	r1, r2
 8008e30:	1dbb      	adds	r3, r7, #6
 8008e32:	1c22      	adds	r2, r4, #0
 8008e34:	801a      	strh	r2, [r3, #0]
 8008e36:	1d3b      	adds	r3, r7, #4
 8008e38:	1c02      	adds	r2, r0, #0
 8008e3a:	801a      	strh	r2, [r3, #0]
 8008e3c:	1cbb      	adds	r3, r7, #2
 8008e3e:	1c0a      	adds	r2, r1, #0
 8008e40:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8008e42:	4b0e      	ldr	r3, [pc, #56]	@ (8008e7c <SetVocLED+0x58>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d107      	bne.n	8008e5a <SetVocLED+0x36>
 8008e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e80 <SetVocLED+0x5c>)
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d103      	bne.n	8008e5a <SetVocLED+0x36>
 8008e52:	4b0c      	ldr	r3, [pc, #48]	@ (8008e84 <SetVocLED+0x60>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00b      	beq.n	8008e72 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8008e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e88 <SetVocLED+0x64>)
 8008e5c:	1dba      	adds	r2, r7, #6
 8008e5e:	8812      	ldrh	r2, [r2, #0]
 8008e60:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8008e62:	4b09      	ldr	r3, [pc, #36]	@ (8008e88 <SetVocLED+0x64>)
 8008e64:	1d3a      	adds	r2, r7, #4
 8008e66:	8812      	ldrh	r2, [r2, #0]
 8008e68:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8008e6a:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <SetVocLED+0x64>)
 8008e6c:	1cba      	adds	r2, r7, #2
 8008e6e:	8812      	ldrh	r2, [r2, #0]
 8008e70:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008e72:	46c0      	nop			@ (mov r8, r8)
 8008e74:	46bd      	mov	sp, r7
 8008e76:	b003      	add	sp, #12
 8008e78:	bd90      	pop	{r4, r7, pc}
 8008e7a:	46c0      	nop			@ (mov r8, r8)
 8008e7c:	200029b9 	.word	0x200029b9
 8008e80:	2000005a 	.word	0x2000005a
 8008e84:	200029ba 	.word	0x200029ba
 8008e88:	40000400 	.word	0x40000400

08008e8c <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008e90:	4b07      	ldr	r3, [pc, #28]	@ (8008eb0 <SetMeasurementIndicator+0x24>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d103      	bne.n	8008ea0 <SetMeasurementIndicator+0x14>
 8008e98:	4b06      	ldr	r3, [pc, #24]	@ (8008eb4 <SetMeasurementIndicator+0x28>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = 3000;
 8008ea0:	2380      	movs	r3, #128	@ 0x80
 8008ea2:	05db      	lsls	r3, r3, #23
 8008ea4:	4a04      	ldr	r2, [pc, #16]	@ (8008eb8 <SetMeasurementIndicator+0x2c>)
 8008ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008ea8:	46c0      	nop			@ (mov r8, r8)
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	46c0      	nop			@ (mov r8, r8)
 8008eb0:	200029b9 	.word	0x200029b9
 8008eb4:	200029ba 	.word	0x200029ba
 8008eb8:	00000bb8 	.word	0x00000bb8

08008ebc <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008ec0:	4b07      	ldr	r3, [pc, #28]	@ (8008ee0 <ResetMeasurementIndicator+0x24>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d103      	bne.n	8008ed0 <ResetMeasurementIndicator+0x14>
 8008ec8:	4b06      	ldr	r3, [pc, #24]	@ (8008ee4 <ResetMeasurementIndicator+0x28>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = 4000;
 8008ed0:	2380      	movs	r3, #128	@ 0x80
 8008ed2:	05db      	lsls	r3, r3, #23
 8008ed4:	22fa      	movs	r2, #250	@ 0xfa
 8008ed6:	0112      	lsls	r2, r2, #4
 8008ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008eda:	46c0      	nop			@ (mov r8, r8)
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	200029b9 	.word	0x200029b9
 8008ee4:	200029ba 	.word	0x200029ba

08008ee8 <SetMICIndicator>:
void SetMICIndicator(){
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008eec:	4b07      	ldr	r3, [pc, #28]	@ (8008f0c <SetMICIndicator+0x24>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d103      	bne.n	8008efc <SetMICIndicator+0x14>
 8008ef4:	4b06      	ldr	r3, [pc, #24]	@ (8008f10 <SetMICIndicator+0x28>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = 3000;
 8008efc:	2380      	movs	r3, #128	@ 0x80
 8008efe:	05db      	lsls	r3, r3, #23
 8008f00:	4a04      	ldr	r2, [pc, #16]	@ (8008f14 <SetMICIndicator+0x2c>)
 8008f02:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008f04:	46c0      	nop			@ (mov r8, r8)
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	46c0      	nop			@ (mov r8, r8)
 8008f0c:	200029b9 	.word	0x200029b9
 8008f10:	200029ba 	.word	0x200029ba
 8008f14:	00000bb8 	.word	0x00000bb8

08008f18 <ResetMICIndicator>:
void ResetMICIndicator(){
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f1c:	4b07      	ldr	r3, [pc, #28]	@ (8008f3c <ResetMICIndicator+0x24>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d103      	bne.n	8008f2c <ResetMICIndicator+0x14>
 8008f24:	4b06      	ldr	r3, [pc, #24]	@ (8008f40 <ResetMICIndicator+0x28>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = 4000;
 8008f2c:	2380      	movs	r3, #128	@ 0x80
 8008f2e:	05db      	lsls	r3, r3, #23
 8008f30:	22fa      	movs	r2, #250	@ 0xfa
 8008f32:	0112      	lsls	r2, r2, #4
 8008f34:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008f36:	46c0      	nop			@ (mov r8, r8)
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	200029b9 	.word	0x200029b9
 8008f40:	200029ba 	.word	0x200029ba

08008f44 <SetESPIndicator>:
void SetESPIndicator(){
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f48:	4b07      	ldr	r3, [pc, #28]	@ (8008f68 <SetESPIndicator+0x24>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d103      	bne.n	8008f58 <SetESPIndicator+0x14>
 8008f50:	4b06      	ldr	r3, [pc, #24]	@ (8008f6c <SetESPIndicator+0x28>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = 3000;
 8008f58:	2380      	movs	r3, #128	@ 0x80
 8008f5a:	05db      	lsls	r3, r3, #23
 8008f5c:	4a04      	ldr	r2, [pc, #16]	@ (8008f70 <SetESPIndicator+0x2c>)
 8008f5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008f60:	46c0      	nop			@ (mov r8, r8)
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	46c0      	nop			@ (mov r8, r8)
 8008f68:	200029b9 	.word	0x200029b9
 8008f6c:	200029ba 	.word	0x200029ba
 8008f70:	00000bb8 	.word	0x00000bb8

08008f74 <ResetESPIndicator>:
void ResetESPIndicator(){
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f78:	4b07      	ldr	r3, [pc, #28]	@ (8008f98 <ResetESPIndicator+0x24>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d103      	bne.n	8008f88 <ResetESPIndicator+0x14>
 8008f80:	4b06      	ldr	r3, [pc, #24]	@ (8008f9c <ResetESPIndicator+0x28>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = 4000;
 8008f88:	2380      	movs	r3, #128	@ 0x80
 8008f8a:	05db      	lsls	r3, r3, #23
 8008f8c:	22fa      	movs	r2, #250	@ 0xfa
 8008f8e:	0112      	lsls	r2, r2, #4
 8008f90:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008f92:	46c0      	nop			@ (mov r8, r8)
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	200029b9 	.word	0x200029b9
 8008f9c:	200029ba 	.word	0x200029ba

08008fa0 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  SetStatusLED(4000,4000,4000);
 8008fa4:	23fa      	movs	r3, #250	@ 0xfa
 8008fa6:	011a      	lsls	r2, r3, #4
 8008fa8:	23fa      	movs	r3, #250	@ 0xfa
 8008faa:	0119      	lsls	r1, r3, #4
 8008fac:	23fa      	movs	r3, #250	@ 0xfa
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f7ff feb9 	bl	8008d28 <SetStatusLED>
  SetDBLED(false,false,false);
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2100      	movs	r1, #0
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f7ff fee8 	bl	8008d90 <SetDBLED>
  SetVocLED(4000,4000,4000);
 8008fc0:	23fa      	movs	r3, #250	@ 0xfa
 8008fc2:	011a      	lsls	r2, r3, #4
 8008fc4:	23fa      	movs	r3, #250	@ 0xfa
 8008fc6:	0119      	lsls	r1, r3, #4
 8008fc8:	23fa      	movs	r3, #250	@ 0xfa
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	0018      	movs	r0, r3
 8008fce:	f7ff ff29 	bl	8008e24 <SetVocLED>
return;
 8008fd2:	46c0      	nop			@ (mov r8, r8)
}
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <powerCheck>:

Battery_Status powerCheck(){
 8008fd8:	b590      	push	{r4, r7, lr}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
  PowerStamp = HAL_GetTick() + 10000;
 8008fde:	f001 f961 	bl	800a2a4 <HAL_GetTick>
 8008fe2:	0003      	movs	r3, r0
 8008fe4:	4a16      	ldr	r2, [pc, #88]	@ (8009040 <powerCheck+0x68>)
 8008fe6:	189a      	adds	r2, r3, r2
 8008fe8:	4b16      	ldr	r3, [pc, #88]	@ (8009044 <powerCheck+0x6c>)
 8008fea:	601a      	str	r2, [r3, #0]
  Battery_Status status;
  if(Check_USB_PowerOn()){
 8008fec:	f7fc fc1e 	bl	800582c <Check_USB_PowerOn>
 8008ff0:	1e03      	subs	r3, r0, #0
 8008ff2:	d006      	beq.n	8009002 <powerCheck+0x2a>
    status = USB_PLUGGED_IN;
 8008ff4:	1dfb      	adds	r3, r7, #7
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	701a      	strb	r2, [r3, #0]
    usbPluggedIn = true;
 8008ffa:	4b13      	ldr	r3, [pc, #76]	@ (8009048 <powerCheck+0x70>)
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	701a      	strb	r2, [r3, #0]
 8009000:	e017      	b.n	8009032 <powerCheck+0x5a>
  }
  else{
    status = batteryChargeCheck();
 8009002:	1dfc      	adds	r4, r7, #7
 8009004:	f7ff fe44 	bl	8008c90 <batteryChargeCheck>
 8009008:	0003      	movs	r3, r0
 800900a:	7023      	strb	r3, [r4, #0]
    if(!userToggle && !init){
 800900c:	4b0f      	ldr	r3, [pc, #60]	@ (800904c <powerCheck+0x74>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2201      	movs	r2, #1
 8009012:	4053      	eors	r3, r2
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d008      	beq.n	800902c <powerCheck+0x54>
 800901a:	4b0d      	ldr	r3, [pc, #52]	@ (8009050 <powerCheck+0x78>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2201      	movs	r2, #1
 8009020:	4053      	eors	r3, r2
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <powerCheck+0x54>
      SetLEDsOff();
 8009028:	f7ff ffba 	bl	8008fa0 <SetLEDsOff>
    }
    usbPluggedIn = false;
 800902c:	4b06      	ldr	r3, [pc, #24]	@ (8009048 <powerCheck+0x70>)
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]

  }
  return status;
 8009032:	1dfb      	adds	r3, r7, #7
 8009034:	781b      	ldrb	r3, [r3, #0]
}
 8009036:	0018      	movs	r0, r3
 8009038:	46bd      	mov	sp, r7
 800903a:	b003      	add	sp, #12
 800903c:	bd90      	pop	{r4, r7, pc}
 800903e:	46c0      	nop			@ (mov r8, r8)
 8009040:	00002710 	.word	0x00002710
 8009044:	200029c0 	.word	0x200029c0
 8009048:	200029b9 	.word	0x200029b9
 800904c:	200029ba 	.word	0x200029ba
 8009050:	2000005a 	.word	0x2000005a

08009054 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	0002      	movs	r2, r0
 800905c:	1dfb      	adds	r3, r7, #7
 800905e:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8009060:	1dfb      	adds	r3, r7, #7
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d105      	bne.n	8009074 <powerDisplay+0x20>
    Debug("LEDS are okay");
 8009068:	4a18      	ldr	r2, [pc, #96]	@ (80090cc <powerDisplay+0x78>)
 800906a:	4b19      	ldr	r3, [pc, #100]	@ (80090d0 <powerDisplay+0x7c>)
 800906c:	0019      	movs	r1, r3
 800906e:	2003      	movs	r0, #3
 8009070:	f000 fd92 	bl	8009b98 <CreateLine>

  }
  if(status == BATTERY_FULL){
 8009074:	1dfb      	adds	r3, r7, #7
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b04      	cmp	r3, #4
 800907a:	d105      	bne.n	8009088 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800907c:	4a15      	ldr	r2, [pc, #84]	@ (80090d4 <powerDisplay+0x80>)
 800907e:	4b14      	ldr	r3, [pc, #80]	@ (80090d0 <powerDisplay+0x7c>)
 8009080:	0019      	movs	r1, r3
 8009082:	2003      	movs	r0, #3
 8009084:	f000 fd88 	bl	8009b98 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8009088:	1dfb      	adds	r3, r7, #7
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b03      	cmp	r3, #3
 800908e:	d105      	bne.n	800909c <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8009090:	4a11      	ldr	r2, [pc, #68]	@ (80090d8 <powerDisplay+0x84>)
 8009092:	4b0f      	ldr	r3, [pc, #60]	@ (80090d0 <powerDisplay+0x7c>)
 8009094:	0019      	movs	r1, r3
 8009096:	2003      	movs	r0, #3
 8009098:	f000 fd7e 	bl	8009b98 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800909c:	1dfb      	adds	r3, r7, #7
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d105      	bne.n	80090b0 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 80090a4:	4a0d      	ldr	r2, [pc, #52]	@ (80090dc <powerDisplay+0x88>)
 80090a6:	4b0a      	ldr	r3, [pc, #40]	@ (80090d0 <powerDisplay+0x7c>)
 80090a8:	0019      	movs	r1, r3
 80090aa:	2003      	movs	r0, #3
 80090ac:	f000 fd74 	bl	8009b98 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 80090b0:	1dfb      	adds	r3, r7, #7
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d105      	bne.n	80090c4 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 80090b8:	4a09      	ldr	r2, [pc, #36]	@ (80090e0 <powerDisplay+0x8c>)
 80090ba:	4b05      	ldr	r3, [pc, #20]	@ (80090d0 <powerDisplay+0x7c>)
 80090bc:	0019      	movs	r1, r3
 80090be:	2003      	movs	r0, #3
 80090c0:	f000 fd6a 	bl	8009b98 <CreateLine>
  }
}
 80090c4:	46c0      	nop			@ (mov r8, r8)
 80090c6:	46bd      	mov	sp, r7
 80090c8:	b002      	add	sp, #8
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	0801bcbc 	.word	0x0801bcbc
 80090d0:	0801bccc 	.word	0x0801bccc
 80090d4:	0801bcd0 	.word	0x0801bcd0
 80090d8:	0801bce8 	.word	0x0801bce8
 80090dc:	0801bd08 	.word	0x0801bd08
 80090e0:	0801bd20 	.word	0x0801bd20

080090e4 <configCheck>:

void configCheck(){
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 80090e8:	f7fc fbaf 	bl	800584a <BootButton_Pressed>
 80090ec:	1e03      	subs	r3, r0, #0
 80090ee:	d007      	beq.n	8009100 <configCheck+0x1c>
 80090f0:	f7fc fbbc 	bl	800586c <UserButton_Pressed>
 80090f4:	1e03      	subs	r3, r0, #0
 80090f6:	d003      	beq.n	8009100 <configCheck+0x1c>
    configSet = true;
 80090f8:	4b2f      	ldr	r3, [pc, #188]	@ (80091b8 <configCheck+0xd4>)
 80090fa:	2201      	movs	r2, #1
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	e00a      	b.n	8009116 <configCheck+0x32>
  }
  else{
    configSet = false;
 8009100:	4b2d      	ldr	r3, [pc, #180]	@ (80091b8 <configCheck+0xd4>)
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8009106:	f001 f8cd 	bl	800a2a4 <HAL_GetTick>
 800910a:	0003      	movs	r3, r0
 800910c:	22fa      	movs	r2, #250	@ 0xfa
 800910e:	00d2      	lsls	r2, r2, #3
 8009110:	189a      	adds	r2, r3, r2
 8009112:	4b2a      	ldr	r3, [pc, #168]	@ (80091bc <configCheck+0xd8>)
 8009114:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8009116:	4b28      	ldr	r3, [pc, #160]	@ (80091b8 <configCheck+0xd4>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00d      	beq.n	800913a <configCheck+0x56>
 800911e:	4b27      	ldr	r3, [pc, #156]	@ (80091bc <configCheck+0xd8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	0018      	movs	r0, r3
 8009124:	f000 fce2 	bl	8009aec <TimestampIsReached>
 8009128:	1e03      	subs	r3, r0, #0
 800912a:	d006      	beq.n	800913a <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800912c:	f7fa fb06 	bl	800373c <SetConfigMode>
    SetDBLED(true, true, true);
 8009130:	2201      	movs	r2, #1
 8009132:	2101      	movs	r1, #1
 8009134:	2001      	movs	r0, #1
 8009136:	f7ff fe2b 	bl	8008d90 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800913a:	f7fc fb86 	bl	800584a <BootButton_Pressed>
 800913e:	0003      	movs	r3, r0
 8009140:	001a      	movs	r2, r3
 8009142:	2301      	movs	r3, #1
 8009144:	4053      	eors	r3, r2
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01d      	beq.n	8009188 <configCheck+0xa4>
 800914c:	f7fc fb8e 	bl	800586c <UserButton_Pressed>
 8009150:	1e03      	subs	r3, r0, #0
 8009152:	d019      	beq.n	8009188 <configCheck+0xa4>
 8009154:	4b1a      	ldr	r3, [pc, #104]	@ (80091c0 <configCheck+0xdc>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2201      	movs	r2, #1
 800915a:	4053      	eors	r3, r2
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d012      	beq.n	8009188 <configCheck+0xa4>
    SetLEDsOff();
 8009162:	f7ff ff1d 	bl	8008fa0 <SetLEDsOff>
    userToggle = !userToggle;
 8009166:	4b17      	ldr	r3, [pc, #92]	@ (80091c4 <configCheck+0xe0>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	1e5a      	subs	r2, r3, #1
 800916c:	4193      	sbcs	r3, r2
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2201      	movs	r2, #1
 8009172:	4053      	eors	r3, r2
 8009174:	b2db      	uxtb	r3, r3
 8009176:	1c1a      	adds	r2, r3, #0
 8009178:	2301      	movs	r3, #1
 800917a:	4013      	ands	r3, r2
 800917c:	b2da      	uxtb	r2, r3
 800917e:	4b11      	ldr	r3, [pc, #68]	@ (80091c4 <configCheck+0xe0>)
 8009180:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 8009182:	4b0f      	ldr	r3, [pc, #60]	@ (80091c0 <configCheck+0xdc>)
 8009184:	2201      	movs	r2, #1
 8009186:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8009188:	f7fc fb5f 	bl	800584a <BootButton_Pressed>
 800918c:	0003      	movs	r3, r0
 800918e:	001a      	movs	r2, r3
 8009190:	2301      	movs	r3, #1
 8009192:	4053      	eors	r3, r2
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <configCheck+0xce>
 800919a:	f7fc fb67 	bl	800586c <UserButton_Pressed>
 800919e:	0003      	movs	r3, r0
 80091a0:	001a      	movs	r2, r3
 80091a2:	2301      	movs	r3, #1
 80091a4:	4053      	eors	r3, r2
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <configCheck+0xce>
    buttonHeld = false;
 80091ac:	4b04      	ldr	r3, [pc, #16]	@ (80091c0 <configCheck+0xdc>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
  }
}
 80091b2:	46c0      	nop			@ (mov r8, r8)
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	200029b8 	.word	0x200029b8
 80091bc:	200029bc 	.word	0x200029bc
 80091c0:	200029bb 	.word	0x200029bb
 80091c4:	200029ba 	.word	0x200029ba

080091c8 <Status_Upkeep>:
  RTC_SetWakeUpTimer(&hrtc, sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
  configCheck();
 80091cc:	f7ff ff8a 	bl	80090e4 <configCheck>
}
 80091d0:	46c0      	nop			@ (mov r8, r8)
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 80091d6:	b590      	push	{r4, r7, lr}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 80091dc:	1dfc      	adds	r4, r7, #7
 80091de:	f7ff fefb 	bl	8008fd8 <powerCheck>
 80091e2:	0003      	movs	r3, r0
 80091e4:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);
 80091e6:	1dfb      	adds	r3, r7, #7
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	0018      	movs	r0, r3
 80091ec:	f7ff ff32 	bl	8009054 <powerDisplay>
  return status;
 80091f0:	1dfb      	adds	r3, r7, #7
 80091f2:	781b      	ldrb	r3, [r3, #0]

}
 80091f4:	0018      	movs	r0, r3
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b003      	add	sp, #12
 80091fa:	bd90      	pop	{r4, r7, pc}

080091fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009200:	4b07      	ldr	r3, [pc, #28]	@ (8009220 <HAL_MspInit+0x24>)
 8009202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009204:	4b06      	ldr	r3, [pc, #24]	@ (8009220 <HAL_MspInit+0x24>)
 8009206:	2101      	movs	r1, #1
 8009208:	430a      	orrs	r2, r1
 800920a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800920c:	4b04      	ldr	r3, [pc, #16]	@ (8009220 <HAL_MspInit+0x24>)
 800920e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009210:	4b03      	ldr	r3, [pc, #12]	@ (8009220 <HAL_MspInit+0x24>)
 8009212:	2180      	movs	r1, #128	@ 0x80
 8009214:	0549      	lsls	r1, r1, #21
 8009216:	430a      	orrs	r2, r1
 8009218:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40021000 	.word	0x40021000

08009224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009228:	46c0      	nop			@ (mov r8, r8)
 800922a:	e7fd      	b.n	8009228 <NMI_Handler+0x4>

0800922c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009230:	46c0      	nop			@ (mov r8, r8)
 8009232:	e7fd      	b.n	8009230 <HardFault_Handler+0x4>

08009234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8009238:	46c0      	nop			@ (mov r8, r8)
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009242:	46c0      	nop			@ (mov r8, r8)
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800924c:	f001 f818 	bl	800a280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009250:	46c0      	nop			@ (mov r8, r8)
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800925c:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800925e:	0018      	movs	r0, r3
 8009260:	f001 fe8b 	bl	800af7a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8009264:	4b04      	ldr	r3, [pc, #16]	@ (8009278 <DMA1_Channel2_3_IRQHandler+0x20>)
 8009266:	0018      	movs	r0, r3
 8009268:	f001 fe87 	bl	800af7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800926c:	46c0      	nop			@ (mov r8, r8)
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	46c0      	nop			@ (mov r8, r8)
 8009274:	20000f64 	.word	0x20000f64
 8009278:	20000f1c 	.word	0x20000f1c

0800927c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8009280:	4b07      	ldr	r3, [pc, #28]	@ (80092a0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8009282:	0018      	movs	r0, r3
 8009284:	f001 fe79 	bl	800af7a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8009288:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800928a:	0018      	movs	r0, r3
 800928c:	f001 fe75 	bl	800af7a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8009290:	4b05      	ldr	r3, [pc, #20]	@ (80092a8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8009292:	0018      	movs	r0, r3
 8009294:	f001 fe71 	bl	800af7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8009298:	46c0      	nop			@ (mov r8, r8)
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	46c0      	nop			@ (mov r8, r8)
 80092a0:	20000fe8 	.word	0x20000fe8
 80092a4:	20002c70 	.word	0x20002c70
 80092a8:	20002cb8 	.word	0x20002cb8

080092ac <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80092b0:	4b03      	ldr	r3, [pc, #12]	@ (80092c0 <USART4_5_IRQHandler+0x14>)
 80092b2:	0018      	movs	r0, r3
 80092b4:	f008 fcfe 	bl	8011cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80092b8:	46c0      	nop			@ (mov r8, r8)
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	46c0      	nop			@ (mov r8, r8)
 80092c0:	20002bb8 	.word	0x20002bb8

080092c4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80092c8:	4b09      	ldr	r3, [pc, #36]	@ (80092f0 <I2C1_IRQHandler+0x2c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	699a      	ldr	r2, [r3, #24]
 80092ce:	23e0      	movs	r3, #224	@ 0xe0
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	4013      	ands	r3, r2
 80092d4:	d004      	beq.n	80092e0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80092d6:	4b06      	ldr	r3, [pc, #24]	@ (80092f0 <I2C1_IRQHandler+0x2c>)
 80092d8:	0018      	movs	r0, r3
 80092da:	f002 fe5b 	bl	800bf94 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80092de:	e003      	b.n	80092e8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80092e0:	4b03      	ldr	r3, [pc, #12]	@ (80092f0 <I2C1_IRQHandler+0x2c>)
 80092e2:	0018      	movs	r0, r3
 80092e4:	f002 fe3c 	bl	800bf60 <HAL_I2C_EV_IRQHandler>
}
 80092e8:	46c0      	nop			@ (mov r8, r8)
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	46c0      	nop			@ (mov r8, r8)
 80092f0:	20000e74 	.word	0x20000e74

080092f4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80092f8:	4b03      	ldr	r3, [pc, #12]	@ (8009308 <USB_IRQHandler+0x14>)
 80092fa:	0018      	movs	r0, r3
 80092fc:	f005 f812 	bl	800e324 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8009300:	46c0      	nop			@ (mov r8, r8)
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	46c0      	nop			@ (mov r8, r8)
 8009308:	20003ac0 	.word	0x20003ac0

0800930c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
  return 1;
 8009310:	2301      	movs	r3, #1
}
 8009312:	0018      	movs	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <_kill>:

int _kill(int pid, int sig)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009322:	f00f f98b 	bl	801863c <__errno>
 8009326:	0003      	movs	r3, r0
 8009328:	2216      	movs	r2, #22
 800932a:	601a      	str	r2, [r3, #0]
  return -1;
 800932c:	2301      	movs	r3, #1
 800932e:	425b      	negs	r3, r3
}
 8009330:	0018      	movs	r0, r3
 8009332:	46bd      	mov	sp, r7
 8009334:	b002      	add	sp, #8
 8009336:	bd80      	pop	{r7, pc}

08009338 <_exit>:

void _exit (int status)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009340:	2301      	movs	r3, #1
 8009342:	425a      	negs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	0011      	movs	r1, r2
 8009348:	0018      	movs	r0, r3
 800934a:	f7ff ffe5 	bl	8009318 <_kill>
  while (1) {}    /* Make sure we hang here */
 800934e:	46c0      	nop			@ (mov r8, r8)
 8009350:	e7fd      	b.n	800934e <_exit+0x16>

08009352 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800935e:	2300      	movs	r3, #0
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	e00a      	b.n	800937a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009364:	e000      	b.n	8009368 <_read+0x16>
 8009366:	bf00      	nop
 8009368:	0001      	movs	r1, r0
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	60ba      	str	r2, [r7, #8]
 8009370:	b2ca      	uxtb	r2, r1
 8009372:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	3301      	adds	r3, #1
 8009378:	617b      	str	r3, [r7, #20]
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	dbf0      	blt.n	8009364 <_read+0x12>
  }

  return len;
 8009382:	687b      	ldr	r3, [r7, #4]
}
 8009384:	0018      	movs	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	b006      	add	sp, #24
 800938a:	bd80      	pop	{r7, pc}

0800938c <_close>:
  }
  return len;
}

int _close(int file)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009394:	2301      	movs	r3, #1
 8009396:	425b      	negs	r3, r3
}
 8009398:	0018      	movs	r0, r3
 800939a:	46bd      	mov	sp, r7
 800939c:	b002      	add	sp, #8
 800939e:	bd80      	pop	{r7, pc}

080093a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2280      	movs	r2, #128	@ 0x80
 80093ae:	0192      	lsls	r2, r2, #6
 80093b0:	605a      	str	r2, [r3, #4]
  return 0;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	0018      	movs	r0, r3
 80093b6:	46bd      	mov	sp, r7
 80093b8:	b002      	add	sp, #8
 80093ba:	bd80      	pop	{r7, pc}

080093bc <_isatty>:

int _isatty(int file)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80093c4:	2301      	movs	r3, #1
}
 80093c6:	0018      	movs	r0, r3
 80093c8:	46bd      	mov	sp, r7
 80093ca:	b002      	add	sp, #8
 80093cc:	bd80      	pop	{r7, pc}

080093ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	0018      	movs	r0, r3
 80093de:	46bd      	mov	sp, r7
 80093e0:	b004      	add	sp, #16
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80093ec:	4a14      	ldr	r2, [pc, #80]	@ (8009440 <_sbrk+0x5c>)
 80093ee:	4b15      	ldr	r3, [pc, #84]	@ (8009444 <_sbrk+0x60>)
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80093f8:	4b13      	ldr	r3, [pc, #76]	@ (8009448 <_sbrk+0x64>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d102      	bne.n	8009406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009400:	4b11      	ldr	r3, [pc, #68]	@ (8009448 <_sbrk+0x64>)
 8009402:	4a12      	ldr	r2, [pc, #72]	@ (800944c <_sbrk+0x68>)
 8009404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009406:	4b10      	ldr	r3, [pc, #64]	@ (8009448 <_sbrk+0x64>)
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	18d3      	adds	r3, r2, r3
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	429a      	cmp	r2, r3
 8009412:	d207      	bcs.n	8009424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009414:	f00f f912 	bl	801863c <__errno>
 8009418:	0003      	movs	r3, r0
 800941a:	220c      	movs	r2, #12
 800941c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800941e:	2301      	movs	r3, #1
 8009420:	425b      	negs	r3, r3
 8009422:	e009      	b.n	8009438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009424:	4b08      	ldr	r3, [pc, #32]	@ (8009448 <_sbrk+0x64>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800942a:	4b07      	ldr	r3, [pc, #28]	@ (8009448 <_sbrk+0x64>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	18d2      	adds	r2, r2, r3
 8009432:	4b05      	ldr	r3, [pc, #20]	@ (8009448 <_sbrk+0x64>)
 8009434:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8009436:	68fb      	ldr	r3, [r7, #12]
}
 8009438:	0018      	movs	r0, r3
 800943a:	46bd      	mov	sp, r7
 800943c:	b006      	add	sp, #24
 800943e:	bd80      	pop	{r7, pc}
 8009440:	20005000 	.word	0x20005000
 8009444:	00000400 	.word	0x00000400
 8009448:	200029c4 	.word	0x200029c4
 800944c:	20004120 	.word	0x20004120

08009450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009454:	46c0      	nop			@ (mov r8, r8)
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
	...

0800945c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009462:	2310      	movs	r3, #16
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	0018      	movs	r0, r3
 8009468:	2308      	movs	r3, #8
 800946a:	001a      	movs	r2, r3
 800946c:	2100      	movs	r1, #0
 800946e:	f00f f853 	bl	8018518 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009472:	003b      	movs	r3, r7
 8009474:	0018      	movs	r0, r3
 8009476:	2310      	movs	r3, #16
 8009478:	001a      	movs	r2, r3
 800947a:	2100      	movs	r1, #0
 800947c:	f00f f84c 	bl	8018518 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009480:	4b2e      	ldr	r3, [pc, #184]	@ (800953c <MX_TIM2_Init+0xe0>)
 8009482:	2280      	movs	r2, #128	@ 0x80
 8009484:	05d2      	lsls	r2, r2, #23
 8009486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009488:	4b2c      	ldr	r3, [pc, #176]	@ (800953c <MX_TIM2_Init+0xe0>)
 800948a:	2200      	movs	r2, #0
 800948c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800948e:	4b2b      	ldr	r3, [pc, #172]	@ (800953c <MX_TIM2_Init+0xe0>)
 8009490:	2200      	movs	r2, #0
 8009492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8009494:	4b29      	ldr	r3, [pc, #164]	@ (800953c <MX_TIM2_Init+0xe0>)
 8009496:	4a2a      	ldr	r2, [pc, #168]	@ (8009540 <MX_TIM2_Init+0xe4>)
 8009498:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800949a:	4b28      	ldr	r3, [pc, #160]	@ (800953c <MX_TIM2_Init+0xe0>)
 800949c:	2200      	movs	r2, #0
 800949e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094a0:	4b26      	ldr	r3, [pc, #152]	@ (800953c <MX_TIM2_Init+0xe0>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80094a6:	4b25      	ldr	r3, [pc, #148]	@ (800953c <MX_TIM2_Init+0xe0>)
 80094a8:	0018      	movs	r0, r3
 80094aa:	f007 fe75 	bl	8011198 <HAL_TIM_PWM_Init>
 80094ae:	1e03      	subs	r3, r0, #0
 80094b0:	d001      	beq.n	80094b6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80094b2:	f7fd f8cd 	bl	8006650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80094b6:	2110      	movs	r1, #16
 80094b8:	187b      	adds	r3, r7, r1
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80094be:	187b      	adds	r3, r7, r1
 80094c0:	2200      	movs	r2, #0
 80094c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80094c4:	187a      	adds	r2, r7, r1
 80094c6:	4b1d      	ldr	r3, [pc, #116]	@ (800953c <MX_TIM2_Init+0xe0>)
 80094c8:	0011      	movs	r1, r2
 80094ca:	0018      	movs	r0, r3
 80094cc:	f008 f982 	bl	80117d4 <HAL_TIMEx_MasterConfigSynchronization>
 80094d0:	1e03      	subs	r3, r0, #0
 80094d2:	d001      	beq.n	80094d8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80094d4:	f7fd f8bc 	bl	8006650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094d8:	003b      	movs	r3, r7
 80094da:	2260      	movs	r2, #96	@ 0x60
 80094dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80094de:	003b      	movs	r3, r7
 80094e0:	2200      	movs	r2, #0
 80094e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80094e4:	003b      	movs	r3, r7
 80094e6:	2200      	movs	r2, #0
 80094e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094ea:	003b      	movs	r3, r7
 80094ec:	2200      	movs	r2, #0
 80094ee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80094f0:	0039      	movs	r1, r7
 80094f2:	4b12      	ldr	r3, [pc, #72]	@ (800953c <MX_TIM2_Init+0xe0>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	0018      	movs	r0, r3
 80094f8:	f007 ff20 	bl	801133c <HAL_TIM_PWM_ConfigChannel>
 80094fc:	1e03      	subs	r3, r0, #0
 80094fe:	d001      	beq.n	8009504 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8009500:	f7fd f8a6 	bl	8006650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009504:	0039      	movs	r1, r7
 8009506:	4b0d      	ldr	r3, [pc, #52]	@ (800953c <MX_TIM2_Init+0xe0>)
 8009508:	2208      	movs	r2, #8
 800950a:	0018      	movs	r0, r3
 800950c:	f007 ff16 	bl	801133c <HAL_TIM_PWM_ConfigChannel>
 8009510:	1e03      	subs	r3, r0, #0
 8009512:	d001      	beq.n	8009518 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8009514:	f7fd f89c 	bl	8006650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009518:	0039      	movs	r1, r7
 800951a:	4b08      	ldr	r3, [pc, #32]	@ (800953c <MX_TIM2_Init+0xe0>)
 800951c:	220c      	movs	r2, #12
 800951e:	0018      	movs	r0, r3
 8009520:	f007 ff0c 	bl	801133c <HAL_TIM_PWM_ConfigChannel>
 8009524:	1e03      	subs	r3, r0, #0
 8009526:	d001      	beq.n	800952c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8009528:	f7fd f892 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800952c:	4b03      	ldr	r3, [pc, #12]	@ (800953c <MX_TIM2_Init+0xe0>)
 800952e:	0018      	movs	r0, r3
 8009530:	f000 f8aa 	bl	8009688 <HAL_TIM_MspPostInit>

}
 8009534:	46c0      	nop			@ (mov r8, r8)
 8009536:	46bd      	mov	sp, r7
 8009538:	b006      	add	sp, #24
 800953a:	bd80      	pop	{r7, pc}
 800953c:	200029c8 	.word	0x200029c8
 8009540:	0000ffff 	.word	0x0000ffff

08009544 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800954a:	2310      	movs	r3, #16
 800954c:	18fb      	adds	r3, r7, r3
 800954e:	0018      	movs	r0, r3
 8009550:	2308      	movs	r3, #8
 8009552:	001a      	movs	r2, r3
 8009554:	2100      	movs	r1, #0
 8009556:	f00e ffdf 	bl	8018518 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800955a:	003b      	movs	r3, r7
 800955c:	0018      	movs	r0, r3
 800955e:	2310      	movs	r3, #16
 8009560:	001a      	movs	r2, r3
 8009562:	2100      	movs	r1, #0
 8009564:	f00e ffd8 	bl	8018518 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009568:	4b32      	ldr	r3, [pc, #200]	@ (8009634 <MX_TIM3_Init+0xf0>)
 800956a:	4a33      	ldr	r2, [pc, #204]	@ (8009638 <MX_TIM3_Init+0xf4>)
 800956c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800956e:	4b31      	ldr	r3, [pc, #196]	@ (8009634 <MX_TIM3_Init+0xf0>)
 8009570:	2200      	movs	r2, #0
 8009572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009574:	4b2f      	ldr	r3, [pc, #188]	@ (8009634 <MX_TIM3_Init+0xf0>)
 8009576:	2200      	movs	r2, #0
 8009578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800957a:	4b2e      	ldr	r3, [pc, #184]	@ (8009634 <MX_TIM3_Init+0xf0>)
 800957c:	4a2f      	ldr	r2, [pc, #188]	@ (800963c <MX_TIM3_Init+0xf8>)
 800957e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009580:	4b2c      	ldr	r3, [pc, #176]	@ (8009634 <MX_TIM3_Init+0xf0>)
 8009582:	2200      	movs	r2, #0
 8009584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009586:	4b2b      	ldr	r3, [pc, #172]	@ (8009634 <MX_TIM3_Init+0xf0>)
 8009588:	2200      	movs	r2, #0
 800958a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800958c:	4b29      	ldr	r3, [pc, #164]	@ (8009634 <MX_TIM3_Init+0xf0>)
 800958e:	0018      	movs	r0, r3
 8009590:	f007 fe02 	bl	8011198 <HAL_TIM_PWM_Init>
 8009594:	1e03      	subs	r3, r0, #0
 8009596:	d001      	beq.n	800959c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8009598:	f7fd f85a 	bl	8006650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800959c:	2110      	movs	r1, #16
 800959e:	187b      	adds	r3, r7, r1
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095a4:	187b      	adds	r3, r7, r1
 80095a6:	2200      	movs	r2, #0
 80095a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80095aa:	187a      	adds	r2, r7, r1
 80095ac:	4b21      	ldr	r3, [pc, #132]	@ (8009634 <MX_TIM3_Init+0xf0>)
 80095ae:	0011      	movs	r1, r2
 80095b0:	0018      	movs	r0, r3
 80095b2:	f008 f90f 	bl	80117d4 <HAL_TIMEx_MasterConfigSynchronization>
 80095b6:	1e03      	subs	r3, r0, #0
 80095b8:	d001      	beq.n	80095be <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80095ba:	f7fd f849 	bl	8006650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095be:	003b      	movs	r3, r7
 80095c0:	2260      	movs	r2, #96	@ 0x60
 80095c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80095c4:	003b      	movs	r3, r7
 80095c6:	2200      	movs	r2, #0
 80095c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095ca:	003b      	movs	r3, r7
 80095cc:	2200      	movs	r2, #0
 80095ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095d0:	003b      	movs	r3, r7
 80095d2:	2200      	movs	r2, #0
 80095d4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095d6:	0039      	movs	r1, r7
 80095d8:	4b16      	ldr	r3, [pc, #88]	@ (8009634 <MX_TIM3_Init+0xf0>)
 80095da:	2200      	movs	r2, #0
 80095dc:	0018      	movs	r0, r3
 80095de:	f007 fead 	bl	801133c <HAL_TIM_PWM_ConfigChannel>
 80095e2:	1e03      	subs	r3, r0, #0
 80095e4:	d001      	beq.n	80095ea <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80095e6:	f7fd f833 	bl	8006650 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80095ea:	4b12      	ldr	r3, [pc, #72]	@ (8009634 <MX_TIM3_Init+0xf0>)
 80095ec:	2104      	movs	r1, #4
 80095ee:	0018      	movs	r0, r3
 80095f0:	f008 f94e 	bl	8011890 <HAL_TIMEx_RemapConfig>
 80095f4:	1e03      	subs	r3, r0, #0
 80095f6:	d001      	beq.n	80095fc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80095f8:	f7fd f82a 	bl	8006650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80095fc:	0039      	movs	r1, r7
 80095fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009634 <MX_TIM3_Init+0xf0>)
 8009600:	2204      	movs	r2, #4
 8009602:	0018      	movs	r0, r3
 8009604:	f007 fe9a 	bl	801133c <HAL_TIM_PWM_ConfigChannel>
 8009608:	1e03      	subs	r3, r0, #0
 800960a:	d001      	beq.n	8009610 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800960c:	f7fd f820 	bl	8006650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009610:	0039      	movs	r1, r7
 8009612:	4b08      	ldr	r3, [pc, #32]	@ (8009634 <MX_TIM3_Init+0xf0>)
 8009614:	2208      	movs	r2, #8
 8009616:	0018      	movs	r0, r3
 8009618:	f007 fe90 	bl	801133c <HAL_TIM_PWM_ConfigChannel>
 800961c:	1e03      	subs	r3, r0, #0
 800961e:	d001      	beq.n	8009624 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8009620:	f7fd f816 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009624:	4b03      	ldr	r3, [pc, #12]	@ (8009634 <MX_TIM3_Init+0xf0>)
 8009626:	0018      	movs	r0, r3
 8009628:	f000 f82e 	bl	8009688 <HAL_TIM_MspPostInit>

}
 800962c:	46c0      	nop			@ (mov r8, r8)
 800962e:	46bd      	mov	sp, r7
 8009630:	b006      	add	sp, #24
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20002a08 	.word	0x20002a08
 8009638:	40000400 	.word	0x40000400
 800963c:	0000ffff 	.word	0x0000ffff

08009640 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	2380      	movs	r3, #128	@ 0x80
 800964e:	05db      	lsls	r3, r3, #23
 8009650:	429a      	cmp	r2, r3
 8009652:	d106      	bne.n	8009662 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009654:	4b0a      	ldr	r3, [pc, #40]	@ (8009680 <HAL_TIM_PWM_MspInit+0x40>)
 8009656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009658:	4b09      	ldr	r3, [pc, #36]	@ (8009680 <HAL_TIM_PWM_MspInit+0x40>)
 800965a:	2101      	movs	r1, #1
 800965c:	430a      	orrs	r2, r1
 800965e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8009660:	e00a      	b.n	8009678 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a07      	ldr	r2, [pc, #28]	@ (8009684 <HAL_TIM_PWM_MspInit+0x44>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d105      	bne.n	8009678 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800966c:	4b04      	ldr	r3, [pc, #16]	@ (8009680 <HAL_TIM_PWM_MspInit+0x40>)
 800966e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009670:	4b03      	ldr	r3, [pc, #12]	@ (8009680 <HAL_TIM_PWM_MspInit+0x40>)
 8009672:	2102      	movs	r1, #2
 8009674:	430a      	orrs	r2, r1
 8009676:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009678:	46c0      	nop			@ (mov r8, r8)
 800967a:	46bd      	mov	sp, r7
 800967c:	b002      	add	sp, #8
 800967e:	bd80      	pop	{r7, pc}
 8009680:	40021000 	.word	0x40021000
 8009684:	40000400 	.word	0x40000400

08009688 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009688:	b590      	push	{r4, r7, lr}
 800968a:	b08b      	sub	sp, #44	@ 0x2c
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009690:	2414      	movs	r4, #20
 8009692:	193b      	adds	r3, r7, r4
 8009694:	0018      	movs	r0, r3
 8009696:	2314      	movs	r3, #20
 8009698:	001a      	movs	r2, r3
 800969a:	2100      	movs	r1, #0
 800969c:	f00e ff3c 	bl	8018518 <memset>
  if(timHandle->Instance==TIM2)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	2380      	movs	r3, #128	@ 0x80
 80096a6:	05db      	lsls	r3, r3, #23
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d123      	bne.n	80096f4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096ac:	4b27      	ldr	r3, [pc, #156]	@ (800974c <HAL_TIM_MspPostInit+0xc4>)
 80096ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b0:	4b26      	ldr	r3, [pc, #152]	@ (800974c <HAL_TIM_MspPostInit+0xc4>)
 80096b2:	2101      	movs	r1, #1
 80096b4:	430a      	orrs	r2, r1
 80096b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80096b8:	4b24      	ldr	r3, [pc, #144]	@ (800974c <HAL_TIM_MspPostInit+0xc4>)
 80096ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096bc:	2201      	movs	r2, #1
 80096be:	4013      	ands	r3, r2
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80096c4:	0021      	movs	r1, r4
 80096c6:	187b      	adds	r3, r7, r1
 80096c8:	220d      	movs	r2, #13
 80096ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096cc:	187b      	adds	r3, r7, r1
 80096ce:	2202      	movs	r2, #2
 80096d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096d2:	187b      	adds	r3, r7, r1
 80096d4:	2200      	movs	r2, #0
 80096d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096d8:	187b      	adds	r3, r7, r1
 80096da:	2200      	movs	r2, #0
 80096dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80096de:	187b      	adds	r3, r7, r1
 80096e0:	2202      	movs	r2, #2
 80096e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096e4:	187a      	adds	r2, r7, r1
 80096e6:	23a0      	movs	r3, #160	@ 0xa0
 80096e8:	05db      	lsls	r3, r3, #23
 80096ea:	0011      	movs	r1, r2
 80096ec:	0018      	movs	r0, r3
 80096ee:	f001 fefb 	bl	800b4e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80096f2:	e027      	b.n	8009744 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a15      	ldr	r2, [pc, #84]	@ (8009750 <HAL_TIM_MspPostInit+0xc8>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d122      	bne.n	8009744 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80096fe:	4b13      	ldr	r3, [pc, #76]	@ (800974c <HAL_TIM_MspPostInit+0xc4>)
 8009700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009702:	4b12      	ldr	r3, [pc, #72]	@ (800974c <HAL_TIM_MspPostInit+0xc4>)
 8009704:	2104      	movs	r1, #4
 8009706:	430a      	orrs	r2, r1
 8009708:	62da      	str	r2, [r3, #44]	@ 0x2c
 800970a:	4b10      	ldr	r3, [pc, #64]	@ (800974c <HAL_TIM_MspPostInit+0xc4>)
 800970c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970e:	2204      	movs	r2, #4
 8009710:	4013      	ands	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8009716:	2114      	movs	r1, #20
 8009718:	187b      	adds	r3, r7, r1
 800971a:	22e0      	movs	r2, #224	@ 0xe0
 800971c:	0052      	lsls	r2, r2, #1
 800971e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009720:	187b      	adds	r3, r7, r1
 8009722:	2202      	movs	r2, #2
 8009724:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009726:	187b      	adds	r3, r7, r1
 8009728:	2200      	movs	r2, #0
 800972a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800972c:	187b      	adds	r3, r7, r1
 800972e:	2200      	movs	r2, #0
 8009730:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009732:	187b      	adds	r3, r7, r1
 8009734:	2202      	movs	r2, #2
 8009736:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009738:	187b      	adds	r3, r7, r1
 800973a:	4a06      	ldr	r2, [pc, #24]	@ (8009754 <HAL_TIM_MspPostInit+0xcc>)
 800973c:	0019      	movs	r1, r3
 800973e:	0010      	movs	r0, r2
 8009740:	f001 fed2 	bl	800b4e8 <HAL_GPIO_Init>
}
 8009744:	46c0      	nop			@ (mov r8, r8)
 8009746:	46bd      	mov	sp, r7
 8009748:	b00b      	add	sp, #44	@ 0x2c
 800974a:	bd90      	pop	{r4, r7, pc}
 800974c:	40021000 	.word	0x40021000
 8009750:	40000400 	.word	0x40000400
 8009754:	50000800 	.word	0x50000800

08009758 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800975c:	4b17      	ldr	r3, [pc, #92]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 800975e:	4a18      	ldr	r2, [pc, #96]	@ (80097c0 <MX_LPUART1_UART_Init+0x68>)
 8009760:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8009762:	4b16      	ldr	r3, [pc, #88]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 8009764:	22e1      	movs	r2, #225	@ 0xe1
 8009766:	0252      	lsls	r2, r2, #9
 8009768:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800976a:	4b14      	ldr	r3, [pc, #80]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 800976c:	2200      	movs	r2, #0
 800976e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009770:	4b12      	ldr	r3, [pc, #72]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 8009772:	2200      	movs	r2, #0
 8009774:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009776:	4b11      	ldr	r3, [pc, #68]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 8009778:	2200      	movs	r2, #0
 800977a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800977c:	4b0f      	ldr	r3, [pc, #60]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 800977e:	220c      	movs	r2, #12
 8009780:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009782:	4b0e      	ldr	r3, [pc, #56]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 8009784:	2200      	movs	r2, #0
 8009786:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009788:	4b0c      	ldr	r3, [pc, #48]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 800978a:	2200      	movs	r2, #0
 800978c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800978e:	4b0b      	ldr	r3, [pc, #44]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 8009790:	2218      	movs	r2, #24
 8009792:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8009794:	4b09      	ldr	r3, [pc, #36]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 8009796:	2280      	movs	r2, #128	@ 0x80
 8009798:	0212      	lsls	r2, r2, #8
 800979a:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800979c:	4b07      	ldr	r3, [pc, #28]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 800979e:	2280      	movs	r2, #128	@ 0x80
 80097a0:	0152      	lsls	r2, r2, #5
 80097a2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80097a4:	4b05      	ldr	r3, [pc, #20]	@ (80097bc <MX_LPUART1_UART_Init+0x64>)
 80097a6:	0018      	movs	r0, r3
 80097a8:	f008 f890 	bl	80118cc <HAL_UART_Init>
 80097ac:	1e03      	subs	r3, r0, #0
 80097ae:	d001      	beq.n	80097b4 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 80097b0:	f7fc ff4e 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80097b4:	46c0      	nop			@ (mov r8, r8)
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	46c0      	nop			@ (mov r8, r8)
 80097bc:	20002a48 	.word	0x20002a48
 80097c0:	40004800 	.word	0x40004800

080097c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80097c8:	4b16      	ldr	r3, [pc, #88]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 80097ca:	4a17      	ldr	r2, [pc, #92]	@ (8009828 <MX_USART1_UART_Init+0x64>)
 80097cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80097ce:	4b15      	ldr	r3, [pc, #84]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 80097d0:	22e1      	movs	r2, #225	@ 0xe1
 80097d2:	0252      	lsls	r2, r2, #9
 80097d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80097d6:	4b13      	ldr	r3, [pc, #76]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 80097d8:	2200      	movs	r2, #0
 80097da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80097dc:	4b11      	ldr	r3, [pc, #68]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 80097de:	2200      	movs	r2, #0
 80097e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80097e2:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80097e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 80097ea:	220c      	movs	r2, #12
 80097ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80097f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80097fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8009800:	4b08      	ldr	r3, [pc, #32]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 8009802:	2208      	movs	r2, #8
 8009804:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8009806:	4b07      	ldr	r3, [pc, #28]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 8009808:	2280      	movs	r2, #128	@ 0x80
 800980a:	0212      	lsls	r2, r2, #8
 800980c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800980e:	4b05      	ldr	r3, [pc, #20]	@ (8009824 <MX_USART1_UART_Init+0x60>)
 8009810:	0018      	movs	r0, r3
 8009812:	f008 f85b 	bl	80118cc <HAL_UART_Init>
 8009816:	1e03      	subs	r3, r0, #0
 8009818:	d001      	beq.n	800981e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800981a:	f7fc ff19 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800981e:	46c0      	nop			@ (mov r8, r8)
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	20002b00 	.word	0x20002b00
 8009828:	40013800 	.word	0x40013800

0800982c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8009830:	4b14      	ldr	r3, [pc, #80]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 8009832:	4a15      	ldr	r2, [pc, #84]	@ (8009888 <MX_USART4_UART_Init+0x5c>)
 8009834:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8009836:	4b13      	ldr	r3, [pc, #76]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 8009838:	22e1      	movs	r2, #225	@ 0xe1
 800983a:	0252      	lsls	r2, r2, #9
 800983c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800983e:	4b11      	ldr	r3, [pc, #68]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 8009840:	2200      	movs	r2, #0
 8009842:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009844:	4b0f      	ldr	r3, [pc, #60]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 8009846:	2200      	movs	r2, #0
 8009848:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800984a:	4b0e      	ldr	r3, [pc, #56]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 800984c:	2200      	movs	r2, #0
 800984e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009850:	4b0c      	ldr	r3, [pc, #48]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 8009852:	220c      	movs	r2, #12
 8009854:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009856:	4b0b      	ldr	r3, [pc, #44]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 8009858:	2200      	movs	r2, #0
 800985a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800985c:	4b09      	ldr	r3, [pc, #36]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 800985e:	2200      	movs	r2, #0
 8009860:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009862:	4b08      	ldr	r3, [pc, #32]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 8009864:	2200      	movs	r2, #0
 8009866:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009868:	4b06      	ldr	r3, [pc, #24]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 800986a:	2200      	movs	r2, #0
 800986c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800986e:	4b05      	ldr	r3, [pc, #20]	@ (8009884 <MX_USART4_UART_Init+0x58>)
 8009870:	0018      	movs	r0, r3
 8009872:	f008 f82b 	bl	80118cc <HAL_UART_Init>
 8009876:	1e03      	subs	r3, r0, #0
 8009878:	d001      	beq.n	800987e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800987a:	f7fc fee9 	bl	8006650 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800987e:	46c0      	nop			@ (mov r8, r8)
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20002bb8 	.word	0x20002bb8
 8009888:	40004c00 	.word	0x40004c00

0800988c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800988c:	b590      	push	{r4, r7, lr}
 800988e:	b08d      	sub	sp, #52	@ 0x34
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009894:	241c      	movs	r4, #28
 8009896:	193b      	adds	r3, r7, r4
 8009898:	0018      	movs	r0, r3
 800989a:	2314      	movs	r3, #20
 800989c:	001a      	movs	r2, r3
 800989e:	2100      	movs	r1, #0
 80098a0:	f00e fe3a 	bl	8018518 <memset>
  if(uartHandle->Instance==LPUART1)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a87      	ldr	r2, [pc, #540]	@ (8009ac8 <HAL_UART_MspInit+0x23c>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d129      	bne.n	8009902 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80098ae:	4b87      	ldr	r3, [pc, #540]	@ (8009acc <HAL_UART_MspInit+0x240>)
 80098b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098b2:	4b86      	ldr	r3, [pc, #536]	@ (8009acc <HAL_UART_MspInit+0x240>)
 80098b4:	2180      	movs	r1, #128	@ 0x80
 80098b6:	02c9      	lsls	r1, r1, #11
 80098b8:	430a      	orrs	r2, r1
 80098ba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098bc:	4b83      	ldr	r3, [pc, #524]	@ (8009acc <HAL_UART_MspInit+0x240>)
 80098be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c0:	4b82      	ldr	r3, [pc, #520]	@ (8009acc <HAL_UART_MspInit+0x240>)
 80098c2:	2104      	movs	r1, #4
 80098c4:	430a      	orrs	r2, r1
 80098c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80098c8:	4b80      	ldr	r3, [pc, #512]	@ (8009acc <HAL_UART_MspInit+0x240>)
 80098ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098cc:	2204      	movs	r2, #4
 80098ce:	4013      	ands	r3, r2
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80098d4:	0021      	movs	r1, r4
 80098d6:	187b      	adds	r3, r7, r1
 80098d8:	2203      	movs	r2, #3
 80098da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098dc:	187b      	adds	r3, r7, r1
 80098de:	2202      	movs	r2, #2
 80098e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098e2:	187b      	adds	r3, r7, r1
 80098e4:	2200      	movs	r2, #0
 80098e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098e8:	187b      	adds	r3, r7, r1
 80098ea:	2203      	movs	r2, #3
 80098ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80098ee:	187b      	adds	r3, r7, r1
 80098f0:	2206      	movs	r2, #6
 80098f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098f4:	187b      	adds	r3, r7, r1
 80098f6:	4a76      	ldr	r2, [pc, #472]	@ (8009ad0 <HAL_UART_MspInit+0x244>)
 80098f8:	0019      	movs	r1, r3
 80098fa:	0010      	movs	r0, r2
 80098fc:	f001 fdf4 	bl	800b4e8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8009900:	e0dd      	b.n	8009abe <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a73      	ldr	r2, [pc, #460]	@ (8009ad4 <HAL_UART_MspInit+0x248>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d12b      	bne.n	8009964 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800990c:	4b6f      	ldr	r3, [pc, #444]	@ (8009acc <HAL_UART_MspInit+0x240>)
 800990e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009910:	4b6e      	ldr	r3, [pc, #440]	@ (8009acc <HAL_UART_MspInit+0x240>)
 8009912:	2180      	movs	r1, #128	@ 0x80
 8009914:	01c9      	lsls	r1, r1, #7
 8009916:	430a      	orrs	r2, r1
 8009918:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800991a:	4b6c      	ldr	r3, [pc, #432]	@ (8009acc <HAL_UART_MspInit+0x240>)
 800991c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800991e:	4b6b      	ldr	r3, [pc, #428]	@ (8009acc <HAL_UART_MspInit+0x240>)
 8009920:	2101      	movs	r1, #1
 8009922:	430a      	orrs	r2, r1
 8009924:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009926:	4b69      	ldr	r3, [pc, #420]	@ (8009acc <HAL_UART_MspInit+0x240>)
 8009928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992a:	2201      	movs	r2, #1
 800992c:	4013      	ands	r3, r2
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009932:	211c      	movs	r1, #28
 8009934:	187b      	adds	r3, r7, r1
 8009936:	22c0      	movs	r2, #192	@ 0xc0
 8009938:	00d2      	lsls	r2, r2, #3
 800993a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800993c:	187b      	adds	r3, r7, r1
 800993e:	2202      	movs	r2, #2
 8009940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009942:	187b      	adds	r3, r7, r1
 8009944:	2200      	movs	r2, #0
 8009946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009948:	187b      	adds	r3, r7, r1
 800994a:	2203      	movs	r2, #3
 800994c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800994e:	187b      	adds	r3, r7, r1
 8009950:	2204      	movs	r2, #4
 8009952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009954:	187a      	adds	r2, r7, r1
 8009956:	23a0      	movs	r3, #160	@ 0xa0
 8009958:	05db      	lsls	r3, r3, #23
 800995a:	0011      	movs	r1, r2
 800995c:	0018      	movs	r0, r3
 800995e:	f001 fdc3 	bl	800b4e8 <HAL_GPIO_Init>
}
 8009962:	e0ac      	b.n	8009abe <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a5b      	ldr	r2, [pc, #364]	@ (8009ad8 <HAL_UART_MspInit+0x24c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d000      	beq.n	8009970 <HAL_UART_MspInit+0xe4>
 800996e:	e0a6      	b.n	8009abe <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 8009970:	4b56      	ldr	r3, [pc, #344]	@ (8009acc <HAL_UART_MspInit+0x240>)
 8009972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009974:	4b55      	ldr	r3, [pc, #340]	@ (8009acc <HAL_UART_MspInit+0x240>)
 8009976:	2180      	movs	r1, #128	@ 0x80
 8009978:	0309      	lsls	r1, r1, #12
 800997a:	430a      	orrs	r2, r1
 800997c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800997e:	4b53      	ldr	r3, [pc, #332]	@ (8009acc <HAL_UART_MspInit+0x240>)
 8009980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009982:	4b52      	ldr	r3, [pc, #328]	@ (8009acc <HAL_UART_MspInit+0x240>)
 8009984:	2101      	movs	r1, #1
 8009986:	430a      	orrs	r2, r1
 8009988:	62da      	str	r2, [r3, #44]	@ 0x2c
 800998a:	4b50      	ldr	r3, [pc, #320]	@ (8009acc <HAL_UART_MspInit+0x240>)
 800998c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998e:	2201      	movs	r2, #1
 8009990:	4013      	ands	r3, r2
 8009992:	613b      	str	r3, [r7, #16]
 8009994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009996:	4b4d      	ldr	r3, [pc, #308]	@ (8009acc <HAL_UART_MspInit+0x240>)
 8009998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800999a:	4b4c      	ldr	r3, [pc, #304]	@ (8009acc <HAL_UART_MspInit+0x240>)
 800999c:	2104      	movs	r1, #4
 800999e:	430a      	orrs	r2, r1
 80099a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80099a2:	4b4a      	ldr	r3, [pc, #296]	@ (8009acc <HAL_UART_MspInit+0x240>)
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	2204      	movs	r2, #4
 80099a8:	4013      	ands	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80099ae:	241c      	movs	r4, #28
 80099b0:	193b      	adds	r3, r7, r4
 80099b2:	2202      	movs	r2, #2
 80099b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099b6:	193b      	adds	r3, r7, r4
 80099b8:	2202      	movs	r2, #2
 80099ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099bc:	193b      	adds	r3, r7, r4
 80099be:	2200      	movs	r2, #0
 80099c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099c2:	193b      	adds	r3, r7, r4
 80099c4:	2203      	movs	r2, #3
 80099c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80099c8:	193b      	adds	r3, r7, r4
 80099ca:	2206      	movs	r2, #6
 80099cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099ce:	193a      	adds	r2, r7, r4
 80099d0:	23a0      	movs	r3, #160	@ 0xa0
 80099d2:	05db      	lsls	r3, r3, #23
 80099d4:	0011      	movs	r1, r2
 80099d6:	0018      	movs	r0, r3
 80099d8:	f001 fd86 	bl	800b4e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80099dc:	0021      	movs	r1, r4
 80099de:	187b      	adds	r3, r7, r1
 80099e0:	2280      	movs	r2, #128	@ 0x80
 80099e2:	00d2      	lsls	r2, r2, #3
 80099e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099e6:	187b      	adds	r3, r7, r1
 80099e8:	2202      	movs	r2, #2
 80099ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ec:	187b      	adds	r3, r7, r1
 80099ee:	2200      	movs	r2, #0
 80099f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099f2:	187b      	adds	r3, r7, r1
 80099f4:	2203      	movs	r2, #3
 80099f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80099f8:	187b      	adds	r3, r7, r1
 80099fa:	2206      	movs	r2, #6
 80099fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80099fe:	187b      	adds	r3, r7, r1
 8009a00:	4a33      	ldr	r2, [pc, #204]	@ (8009ad0 <HAL_UART_MspInit+0x244>)
 8009a02:	0019      	movs	r1, r3
 8009a04:	0010      	movs	r0, r2
 8009a06:	f001 fd6f 	bl	800b4e8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8009a0a:	4b34      	ldr	r3, [pc, #208]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a0c:	4a34      	ldr	r2, [pc, #208]	@ (8009ae0 <HAL_UART_MspInit+0x254>)
 8009a0e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8009a10:	4b32      	ldr	r3, [pc, #200]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a12:	220c      	movs	r2, #12
 8009a14:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009a16:	4b31      	ldr	r3, [pc, #196]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009a22:	4b2e      	ldr	r3, [pc, #184]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a24:	2280      	movs	r2, #128	@ 0x80
 8009a26:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a28:	4b2c      	ldr	r3, [pc, #176]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8009a34:	4b29      	ldr	r3, [pc, #164]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a36:	2220      	movs	r2, #32
 8009a38:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009a3a:	4b28      	ldr	r3, [pc, #160]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8009a40:	4b26      	ldr	r3, [pc, #152]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a42:	0018      	movs	r0, r3
 8009a44:	f001 f8d6 	bl	800abf4 <HAL_DMA_Init>
 8009a48:	1e03      	subs	r3, r0, #0
 8009a4a:	d001      	beq.n	8009a50 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8009a4c:	f7fc fe00 	bl	8006650 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a22      	ldr	r2, [pc, #136]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a54:	675a      	str	r2, [r3, #116]	@ 0x74
 8009a56:	4b21      	ldr	r3, [pc, #132]	@ (8009adc <HAL_UART_MspInit+0x250>)
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8009a5c:	4b21      	ldr	r3, [pc, #132]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a5e:	4a22      	ldr	r2, [pc, #136]	@ (8009ae8 <HAL_UART_MspInit+0x25c>)
 8009a60:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8009a62:	4b20      	ldr	r3, [pc, #128]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a64:	220c      	movs	r2, #12
 8009a66:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009a68:	4b1e      	ldr	r3, [pc, #120]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a6a:	2210      	movs	r2, #16
 8009a6c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a74:	4b1b      	ldr	r3, [pc, #108]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a76:	2280      	movs	r2, #128	@ 0x80
 8009a78:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a80:	4b18      	ldr	r3, [pc, #96]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8009a86:	4b17      	ldr	r3, [pc, #92]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009a8c:	4b15      	ldr	r3, [pc, #84]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8009a92:	4b14      	ldr	r3, [pc, #80]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009a94:	0018      	movs	r0, r3
 8009a96:	f001 f8ad 	bl	800abf4 <HAL_DMA_Init>
 8009a9a:	1e03      	subs	r3, r0, #0
 8009a9c:	d001      	beq.n	8009aa2 <HAL_UART_MspInit+0x216>
      Error_Handler();
 8009a9e:	f7fc fdd7 	bl	8006650 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009aa6:	671a      	str	r2, [r3, #112]	@ 0x70
 8009aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ae4 <HAL_UART_MspInit+0x258>)
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	200e      	movs	r0, #14
 8009ab4:	f001 f86c 	bl	800ab90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8009ab8:	200e      	movs	r0, #14
 8009aba:	f001 f87e 	bl	800abba <HAL_NVIC_EnableIRQ>
}
 8009abe:	46c0      	nop			@ (mov r8, r8)
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	b00d      	add	sp, #52	@ 0x34
 8009ac4:	bd90      	pop	{r4, r7, pc}
 8009ac6:	46c0      	nop			@ (mov r8, r8)
 8009ac8:	40004800 	.word	0x40004800
 8009acc:	40021000 	.word	0x40021000
 8009ad0:	50000800 	.word	0x50000800
 8009ad4:	40013800 	.word	0x40013800
 8009ad8:	40004c00 	.word	0x40004c00
 8009adc:	20002c70 	.word	0x20002c70
 8009ae0:	4002006c 	.word	0x4002006c
 8009ae4:	20002cb8 	.word	0x20002cb8
 8009ae8:	40020080 	.word	0x40020080

08009aec <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 50

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8009af4:	f000 fbd6 	bl	800a2a4 <HAL_GetTick>
 8009af8:	0003      	movs	r3, r0
 8009afa:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8009afc:	4b1c      	ldr	r3, [pc, #112]	@ (8009b70 <TimestampIsReached+0x84>)
 8009afe:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d307      	bcc.n	8009b18 <TimestampIsReached+0x2c>
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d901      	bls.n	8009b18 <TimestampIsReached+0x2c>
 8009b14:	2201      	movs	r2, #1
 8009b16:	e000      	b.n	8009b1a <TimestampIsReached+0x2e>
 8009b18:	2200      	movs	r2, #0
 8009b1a:	230f      	movs	r3, #15
 8009b1c:	18fb      	adds	r3, r7, r3
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	781a      	ldrb	r2, [r3, #0]
 8009b22:	2101      	movs	r1, #1
 8009b24:	400a      	ands	r2, r1
 8009b26:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d207      	bcs.n	8009b40 <TimestampIsReached+0x54>
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d201      	bcs.n	8009b40 <TimestampIsReached+0x54>
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	e000      	b.n	8009b42 <TimestampIsReached+0x56>
 8009b40:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8009b42:	200e      	movs	r0, #14
 8009b44:	183b      	adds	r3, r7, r0
 8009b46:	701a      	strb	r2, [r3, #0]
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	400a      	ands	r2, r1
 8009b4e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8009b50:	230f      	movs	r3, #15
 8009b52:	18fb      	adds	r3, r7, r3
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d103      	bne.n	8009b62 <TimestampIsReached+0x76>
 8009b5a:	183b      	adds	r3, r7, r0
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e000      	b.n	8009b68 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	0018      	movs	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	b006      	add	sp, #24
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	7fffffff 	.word	0x7fffffff

08009b74 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8009b7c:	f000 fb92 	bl	800a2a4 <HAL_GetTick>
 8009b80:	0002      	movs	r2, r0
 8009b82:	4904      	ldr	r1, [pc, #16]	@ (8009b94 <AddTimestamp+0x20>)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	0018      	movs	r0, r3
 8009b88:	f00e fc22 	bl	80183d0 <siprintf>
}
 8009b8c:	46c0      	nop			@ (mov r8, r8)
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	b002      	add	sp, #8
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	0801bd44 	.word	0x0801bd44

08009b98 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8009b98:	b40c      	push	{r2, r3}
 8009b9a:	b590      	push	{r4, r7, lr}
 8009b9c:	b093      	sub	sp, #76	@ 0x4c
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	0002      	movs	r2, r0
 8009ba2:	6039      	str	r1, [r7, #0]
 8009ba4:	1dfb      	adds	r3, r7, #7
 8009ba6:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8009ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8009c28 <CreateLine+0x90>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	1dfa      	adds	r2, r7, #7
 8009bae:	7812      	ldrb	r2, [r2, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d832      	bhi.n	8009c1a <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	491d      	ldr	r1, [pc, #116]	@ (8009c2c <CreateLine+0x94>)
 8009bb8:	2410      	movs	r4, #16
 8009bba:	193b      	adds	r3, r7, r4
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	f00e fc07 	bl	80183d0 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8009bc2:	4b19      	ldr	r3, [pc, #100]	@ (8009c28 <CreateLine+0x90>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d909      	bls.n	8009bde <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8009bca:	193b      	adds	r3, r7, r4
 8009bcc:	0018      	movs	r0, r3
 8009bce:	f7f6 fa9b 	bl	8000108 <strlen>
 8009bd2:	0002      	movs	r2, r0
 8009bd4:	193b      	adds	r3, r7, r4
 8009bd6:	189b      	adds	r3, r3, r2
 8009bd8:	0018      	movs	r0, r3
 8009bda:	f7ff ffcb 	bl	8009b74 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8009bde:	2410      	movs	r4, #16
 8009be0:	193b      	adds	r3, r7, r4
 8009be2:	0018      	movs	r0, r3
 8009be4:	f7f6 fa90 	bl	8000108 <strlen>
 8009be8:	0003      	movs	r3, r0
 8009bea:	647b      	str	r3, [r7, #68]	@ 0x44

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8009bec:	2354      	movs	r3, #84	@ 0x54
 8009bee:	2208      	movs	r2, #8
 8009bf0:	189b      	adds	r3, r3, r2
 8009bf2:	19db      	adds	r3, r3, r7
 8009bf4:	60fb      	str	r3, [r7, #12]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8009bf6:	193a      	adds	r2, r7, r4
 8009bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bfa:	18d0      	adds	r0, r2, r3
 8009bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bfe:	2232      	movs	r2, #50	@ 0x32
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	0019      	movs	r1, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c08:	f00e fc7a 	bl	8018500 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8009c0c:	193a      	adds	r2, r7, r4
 8009c0e:	4b08      	ldr	r3, [pc, #32]	@ (8009c30 <CreateLine+0x98>)
 8009c10:	0011      	movs	r1, r2
 8009c12:	0018      	movs	r0, r3
 8009c14:	f00e fbcc 	bl	80183b0 <iprintf>
 8009c18:	e000      	b.n	8009c1c <CreateLine+0x84>
    return;
 8009c1a:	46c0      	nop			@ (mov r8, r8)
}
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	b013      	add	sp, #76	@ 0x4c
 8009c20:	bc90      	pop	{r4, r7}
 8009c22:	bc08      	pop	{r3}
 8009c24:	b002      	add	sp, #8
 8009c26:	4718      	bx	r3
 8009c28:	20000060 	.word	0x20000060
 8009c2c:	0801bd50 	.word	0x0801bd50
 8009c30:	0801bd54 	.word	0x0801bd54

08009c34 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	4804      	ldr	r0, [pc, #16]	@ (8009c58 <_write+0x24>)
 8009c48:	2364      	movs	r3, #100	@ 0x64
 8009c4a:	f007 fea5 	bl	8011998 <HAL_UART_Transmit>
  return count;
 8009c4e:	687b      	ldr	r3, [r7, #4]
}
 8009c50:	0018      	movs	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b004      	add	sp, #16
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20002b00 	.word	0x20002b00

08009c5c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	0002      	movs	r2, r0
 8009c64:	1dfb      	adds	r3, r7, #7
 8009c66:	701a      	strb	r2, [r3, #0]
 8009c68:	4b03      	ldr	r3, [pc, #12]	@ (8009c78 <SetVerboseLevel+0x1c>)
 8009c6a:	1dfa      	adds	r2, r7, #7
 8009c6c:	7812      	ldrb	r2, [r2, #0]
 8009c6e:	701a      	strb	r2, [r3, #0]
 8009c70:	46c0      	nop			@ (mov r8, r8)
 8009c72:	46bd      	mov	sp, r7
 8009c74:	b002      	add	sp, #8
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000060 	.word	0x20000060

08009c7c <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009c80:	f000 fb10 	bl	800a2a4 <HAL_GetTick>
 8009c84:	0003      	movs	r3, r0
}
 8009c86:	0018      	movs	r0, r3
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8009c92:	4a0f      	ldr	r2, [pc, #60]	@ (8009cd0 <BinaryReleaseInfo+0x44>)
 8009c94:	4b0f      	ldr	r3, [pc, #60]	@ (8009cd4 <BinaryReleaseInfo+0x48>)
 8009c96:	0019      	movs	r1, r3
 8009c98:	2002      	movs	r0, #2
 8009c9a:	f7ff ff7d 	bl	8009b98 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8009c9e:	480e      	ldr	r0, [pc, #56]	@ (8009cd8 <BinaryReleaseInfo+0x4c>)
 8009ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8009cdc <BinaryReleaseInfo+0x50>)
 8009ca2:	490c      	ldr	r1, [pc, #48]	@ (8009cd4 <BinaryReleaseInfo+0x48>)
 8009ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce0 <BinaryReleaseInfo+0x54>)
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	0003      	movs	r3, r0
 8009caa:	2002      	movs	r0, #2
 8009cac:	f7ff ff74 	bl	8009b98 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8009cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8009ce4 <BinaryReleaseInfo+0x58>)
 8009cb2:	4b08      	ldr	r3, [pc, #32]	@ (8009cd4 <BinaryReleaseInfo+0x48>)
 8009cb4:	0019      	movs	r1, r3
 8009cb6:	2002      	movs	r0, #2
 8009cb8:	f7ff ff6e 	bl	8009b98 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce8 <BinaryReleaseInfo+0x5c>)
 8009cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8009cec <BinaryReleaseInfo+0x60>)
 8009cc0:	4904      	ldr	r1, [pc, #16]	@ (8009cd4 <BinaryReleaseInfo+0x48>)
 8009cc2:	2002      	movs	r0, #2
 8009cc4:	f7ff ff68 	bl	8009b98 <CreateLine>
}
 8009cc8:	46c0      	nop			@ (mov r8, r8)
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	46c0      	nop			@ (mov r8, r8)
 8009cd0:	0801bd5c 	.word	0x0801bd5c
 8009cd4:	0801bd88 	.word	0x0801bd88
 8009cd8:	0801bd8c 	.word	0x0801bd8c
 8009cdc:	0801bd98 	.word	0x0801bd98
 8009ce0:	0801bdac 	.word	0x0801bdac
 8009ce4:	0801bdb8 	.word	0x0801bdb8
 8009ce8:	0801bdc4 	.word	0x0801bdc4
 8009cec:	0801bdcc 	.word	0x0801bdcc

08009cf0 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009cf0:	b590      	push	{r4, r7, lr}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6039      	str	r1, [r7, #0]
 8009cf8:	0011      	movs	r1, r2
 8009cfa:	1dfb      	adds	r3, r7, #7
 8009cfc:	1c02      	adds	r2, r0, #0
 8009cfe:	701a      	strb	r2, [r3, #0]
 8009d00:	1dbb      	adds	r3, r7, #6
 8009d02:	1c0a      	adds	r2, r1, #0
 8009d04:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8009d06:	4b0a      	ldr	r3, [pc, #40]	@ (8009d30 <ReadRegister+0x40>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8009d0e:	4b08      	ldr	r3, [pc, #32]	@ (8009d30 <ReadRegister+0x40>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	1dba      	adds	r2, r7, #6
 8009d14:	7814      	ldrb	r4, [r2, #0]
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	1dfa      	adds	r2, r7, #7
 8009d1a:	7810      	ldrb	r0, [r2, #0]
 8009d1c:	0022      	movs	r2, r4
 8009d1e:	4798      	blx	r3
 8009d20:	0003      	movs	r3, r0
 8009d22:	e000      	b.n	8009d26 <ReadRegister+0x36>
	}
	return false;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	0018      	movs	r0, r3
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	b003      	add	sp, #12
 8009d2c:	bd90      	pop	{r4, r7, pc}
 8009d2e:	46c0      	nop			@ (mov r8, r8)
 8009d30:	20002d00 	.word	0x20002d00

08009d34 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6039      	str	r1, [r7, #0]
 8009d3c:	0011      	movs	r1, r2
 8009d3e:	1dfb      	adds	r3, r7, #7
 8009d40:	1c02      	adds	r2, r0, #0
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	1dbb      	adds	r3, r7, #6
 8009d46:	1c0a      	adds	r2, r1, #0
 8009d48:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d74 <WriteRegister+0x40>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8009d52:	4b08      	ldr	r3, [pc, #32]	@ (8009d74 <WriteRegister+0x40>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	1dba      	adds	r2, r7, #6
 8009d58:	7814      	ldrb	r4, [r2, #0]
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	1dfa      	adds	r2, r7, #7
 8009d5e:	7810      	ldrb	r0, [r2, #0]
 8009d60:	0022      	movs	r2, r4
 8009d62:	4798      	blx	r3
 8009d64:	0003      	movs	r3, r0
 8009d66:	e000      	b.n	8009d6a <WriteRegister+0x36>
  }
  return false;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	b003      	add	sp, #12
 8009d70:	bd90      	pop	{r4, r7, pc}
 8009d72:	46c0      	nop			@ (mov r8, r8)
 8009d74:	20002d04 	.word	0x20002d04

08009d78 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	000a      	movs	r2, r1
 8009d82:	1cfb      	adds	r3, r7, #3
 8009d84:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8009d86:	230f      	movs	r3, #15
 8009d88:	18fb      	adds	r3, r7, r3
 8009d8a:	22ff      	movs	r2, #255	@ 0xff
 8009d8c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009d8e:	230e      	movs	r3, #14
 8009d90:	18fb      	adds	r3, r7, r3
 8009d92:	2200      	movs	r2, #0
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	e037      	b.n	8009e08 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009d98:	230e      	movs	r3, #14
 8009d9a:	18fb      	adds	r3, r7, r3
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	18d3      	adds	r3, r2, r3
 8009da2:	7819      	ldrb	r1, [r3, #0]
 8009da4:	220f      	movs	r2, #15
 8009da6:	18bb      	adds	r3, r7, r2
 8009da8:	18ba      	adds	r2, r7, r2
 8009daa:	7812      	ldrb	r2, [r2, #0]
 8009dac:	404a      	eors	r2, r1
 8009dae:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009db0:	230d      	movs	r3, #13
 8009db2:	18fb      	adds	r3, r7, r3
 8009db4:	2200      	movs	r2, #0
 8009db6:	701a      	strb	r2, [r3, #0]
 8009db8:	e01b      	b.n	8009df2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8009dba:	210f      	movs	r1, #15
 8009dbc:	187b      	adds	r3, r7, r1
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	b25b      	sxtb	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	da09      	bge.n	8009dda <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8009dc6:	187b      	adds	r3, r7, r1
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	005b      	lsls	r3, r3, #1
 8009dcc:	b25b      	sxtb	r3, r3
 8009dce:	2231      	movs	r2, #49	@ 0x31
 8009dd0:	4053      	eors	r3, r2
 8009dd2:	b25a      	sxtb	r2, r3
 8009dd4:	187b      	adds	r3, r7, r1
 8009dd6:	701a      	strb	r2, [r3, #0]
 8009dd8:	e005      	b.n	8009de6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8009dda:	230f      	movs	r3, #15
 8009ddc:	18fa      	adds	r2, r7, r3
 8009dde:	18fb      	adds	r3, r7, r3
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	18db      	adds	r3, r3, r3
 8009de4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009de6:	210d      	movs	r1, #13
 8009de8:	187b      	adds	r3, r7, r1
 8009dea:	781a      	ldrb	r2, [r3, #0]
 8009dec:	187b      	adds	r3, r7, r1
 8009dee:	3201      	adds	r2, #1
 8009df0:	701a      	strb	r2, [r3, #0]
 8009df2:	230d      	movs	r3, #13
 8009df4:	18fb      	adds	r3, r7, r3
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b07      	cmp	r3, #7
 8009dfa:	d9de      	bls.n	8009dba <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009dfc:	210e      	movs	r1, #14
 8009dfe:	187b      	adds	r3, r7, r1
 8009e00:	781a      	ldrb	r2, [r3, #0]
 8009e02:	187b      	adds	r3, r7, r1
 8009e04:	3201      	adds	r2, #1
 8009e06:	701a      	strb	r2, [r3, #0]
 8009e08:	230e      	movs	r3, #14
 8009e0a:	18fa      	adds	r2, r7, r3
 8009e0c:	1cfb      	adds	r3, r7, #3
 8009e0e:	7812      	ldrb	r2, [r2, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d3c0      	bcc.n	8009d98 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8009e16:	230f      	movs	r3, #15
 8009e18:	18fb      	adds	r3, r7, r3
 8009e1a:	781b      	ldrb	r3, [r3, #0]
}
 8009e1c:	0018      	movs	r0, r3
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	b004      	add	sp, #16
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8009e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e58 <HIDS_Init+0x34>)
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8009e34:	4b09      	ldr	r3, [pc, #36]	@ (8009e5c <HIDS_Init+0x38>)
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8009e3a:	4b09      	ldr	r3, [pc, #36]	@ (8009e60 <HIDS_Init+0x3c>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	0018      	movs	r0, r3
 8009e40:	f000 f8d0 	bl	8009fe4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8009e44:	4b07      	ldr	r3, [pc, #28]	@ (8009e64 <HIDS_Init+0x40>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f000 f82b 	bl	8009ea4 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8009e4e:	46c0      	nop			@ (mov r8, r8)
 8009e50:	46bd      	mov	sp, r7
 8009e52:	b002      	add	sp, #8
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	46c0      	nop			@ (mov r8, r8)
 8009e58:	20002d00 	.word	0x20002d00
 8009e5c:	20002d04 	.word	0x20002d04
 8009e60:	20000062 	.word	0x20000062
 8009e64:	20000061 	.word	0x20000061

08009e68 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8009e6c:	f7ff ff06 	bl	8009c7c <GetCurrentHalTicks>
 8009e70:	0002      	movs	r2, r0
 8009e72:	4b08      	ldr	r3, [pc, #32]	@ (8009e94 <HIDS_StartMeasurement+0x2c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	18d2      	adds	r2, r2, r3
 8009e78:	4b07      	ldr	r3, [pc, #28]	@ (8009e98 <HIDS_StartMeasurement+0x30>)
 8009e7a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8009e7c:	4b07      	ldr	r3, [pc, #28]	@ (8009e9c <HIDS_StartMeasurement+0x34>)
 8009e7e:	2201      	movs	r2, #1
 8009e80:	0019      	movs	r1, r3
 8009e82:	2044      	movs	r0, #68	@ 0x44
 8009e84:	f7ff ff56 	bl	8009d34 <WriteRegister>
  MeasurementDone = false;
 8009e88:	4b05      	ldr	r3, [pc, #20]	@ (8009ea0 <HIDS_StartMeasurement+0x38>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	701a      	strb	r2, [r3, #0]
}
 8009e8e:	46c0      	nop			@ (mov r8, r8)
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	20000068 	.word	0x20000068
 8009e98:	20000064 	.word	0x20000064
 8009e9c:	20000062 	.word	0x20000062
 8009ea0:	20002d16 	.word	0x20002d16

08009ea4 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	0002      	movs	r2, r0
 8009eac:	1dfb      	adds	r3, r7, #7
 8009eae:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8009eb0:	4b03      	ldr	r3, [pc, #12]	@ (8009ec0 <HIDS_SetHeaterMode+0x1c>)
 8009eb2:	1dfa      	adds	r2, r7, #7
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	701a      	strb	r2, [r3, #0]
}
 8009eb8:	46c0      	nop			@ (mov r8, r8)
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	b002      	add	sp, #8
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20000061 	.word	0x20000061

08009ec4 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8009ec4:	b590      	push	{r4, r7, lr}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	781a      	ldrb	r2, [r3, #0]
 8009ed0:	210c      	movs	r1, #12
 8009ed2:	187b      	adds	r3, r7, r1
 8009ed4:	701a      	strb	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	785a      	ldrb	r2, [r3, #1]
 8009eda:	187b      	adds	r3, r7, r1
 8009edc:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8009ede:	240f      	movs	r4, #15
 8009ee0:	193b      	adds	r3, r7, r4
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	7892      	ldrb	r2, [r2, #2]
 8009ee6:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8009ee8:	187b      	adds	r3, r7, r1
 8009eea:	2102      	movs	r1, #2
 8009eec:	0018      	movs	r0, r3
 8009eee:	f7ff ff43 	bl	8009d78 <CalculateCRC>
 8009ef2:	0003      	movs	r3, r0
 8009ef4:	001a      	movs	r2, r3
 8009ef6:	193b      	adds	r3, r7, r4
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d007      	beq.n	8009f0e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8009efe:	4a17      	ldr	r2, [pc, #92]	@ (8009f5c <CheckCRC+0x98>)
 8009f00:	4b17      	ldr	r3, [pc, #92]	@ (8009f60 <CheckCRC+0x9c>)
 8009f02:	0019      	movs	r1, r3
 8009f04:	2001      	movs	r0, #1
 8009f06:	f7ff fe47 	bl	8009b98 <CreateLine>
		return false;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e021      	b.n	8009f52 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	78da      	ldrb	r2, [r3, #3]
 8009f12:	2108      	movs	r1, #8
 8009f14:	187b      	adds	r3, r7, r1
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	791a      	ldrb	r2, [r3, #4]
 8009f1c:	187b      	adds	r3, r7, r1
 8009f1e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8009f20:	240e      	movs	r4, #14
 8009f22:	193b      	adds	r3, r7, r4
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	7952      	ldrb	r2, [r2, #5]
 8009f28:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8009f2a:	187b      	adds	r3, r7, r1
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	0018      	movs	r0, r3
 8009f30:	f7ff ff22 	bl	8009d78 <CalculateCRC>
 8009f34:	0003      	movs	r3, r0
 8009f36:	001a      	movs	r2, r3
 8009f38:	193b      	adds	r3, r7, r4
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d007      	beq.n	8009f50 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8009f40:	4a08      	ldr	r2, [pc, #32]	@ (8009f64 <CheckCRC+0xa0>)
 8009f42:	4b07      	ldr	r3, [pc, #28]	@ (8009f60 <CheckCRC+0x9c>)
 8009f44:	0019      	movs	r1, r3
 8009f46:	2001      	movs	r0, #1
 8009f48:	f7ff fe26 	bl	8009b98 <CreateLine>
		return false;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e000      	b.n	8009f52 <CheckCRC+0x8e>
	}
	return true;
 8009f50:	2301      	movs	r3, #1
}
 8009f52:	0018      	movs	r0, r3
 8009f54:	46bd      	mov	sp, r7
 8009f56:	b005      	add	sp, #20
 8009f58:	bd90      	pop	{r4, r7, pc}
 8009f5a:	46c0      	nop			@ (mov r8, r8)
 8009f5c:	0801be08 	.word	0x0801be08
 8009f60:	0801be30 	.word	0x0801be30
 8009f64:	0801be34 	.word	0x0801be34

08009f68 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8009f6e:	1dbb      	adds	r3, r7, #6
 8009f70:	2289      	movs	r2, #137	@ 0x89
 8009f72:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8009f74:	1dbb      	adds	r3, r7, #6
 8009f76:	2201      	movs	r2, #1
 8009f78:	0019      	movs	r1, r3
 8009f7a:	2044      	movs	r0, #68	@ 0x44
 8009f7c:	f7ff feda 	bl	8009d34 <WriteRegister>
	HAL_Delay(30);
 8009f80:	201e      	movs	r0, #30
 8009f82:	f000 f999 	bl	800a2b8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8009f86:	4b14      	ldr	r3, [pc, #80]	@ (8009fd8 <HIDS_DeviceConnected+0x70>)
 8009f88:	2206      	movs	r2, #6
 8009f8a:	0019      	movs	r1, r3
 8009f8c:	2044      	movs	r0, #68	@ 0x44
 8009f8e:	f7ff feaf 	bl	8009cf0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009f92:	1dfb      	adds	r3, r7, #7
 8009f94:	2200      	movs	r2, #0
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	e011      	b.n	8009fbe <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8009f9a:	1dfb      	adds	r3, r7, #7
 8009f9c:	7818      	ldrb	r0, [r3, #0]
 8009f9e:	1dfb      	adds	r3, r7, #7
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8009fd8 <HIDS_DeviceConnected+0x70>)
 8009fa4:	5cd3      	ldrb	r3, [r2, r3]
 8009fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8009fdc <HIDS_DeviceConnected+0x74>)
 8009fa8:	490d      	ldr	r1, [pc, #52]	@ (8009fe0 <HIDS_DeviceConnected+0x78>)
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	0003      	movs	r3, r0
 8009fae:	2002      	movs	r0, #2
 8009fb0:	f7ff fdf2 	bl	8009b98 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009fb4:	1dfb      	adds	r3, r7, #7
 8009fb6:	781a      	ldrb	r2, [r3, #0]
 8009fb8:	1dfb      	adds	r3, r7, #7
 8009fba:	3201      	adds	r2, #1
 8009fbc:	701a      	strb	r2, [r3, #0]
 8009fbe:	1dfb      	adds	r3, r7, #7
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b05      	cmp	r3, #5
 8009fc4:	d9e9      	bls.n	8009f9a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8009fc6:	4b04      	ldr	r3, [pc, #16]	@ (8009fd8 <HIDS_DeviceConnected+0x70>)
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f7ff ff7b 	bl	8009ec4 <CheckCRC>
 8009fce:	0003      	movs	r3, r0
}
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	b002      	add	sp, #8
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20002d08 	.word	0x20002d08
 8009fdc:	0801be60 	.word	0x0801be60
 8009fe0:	0801be04 	.word	0x0801be04

08009fe4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	0002      	movs	r2, r0
 8009fec:	1dfb      	adds	r3, r7, #7
 8009fee:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8009ff0:	4b03      	ldr	r3, [pc, #12]	@ (800a000 <HIDS_SetMeasurementMode+0x1c>)
 8009ff2:	1dfa      	adds	r2, r7, #7
 8009ff4:	7812      	ldrb	r2, [r2, #0]
 8009ff6:	701a      	strb	r2, [r3, #0]
}
 8009ff8:	46c0      	nop			@ (mov r8, r8)
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	b002      	add	sp, #8
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20000062 	.word	0x20000062

0800a004 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800a008:	4b04      	ldr	r3, [pc, #16]	@ (800a01c <HIDS_MeasurementReady+0x18>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	0018      	movs	r0, r3
 800a00e:	f7ff fd6d 	bl	8009aec <TimestampIsReached>
 800a012:	0003      	movs	r3, r0
}
 800a014:	0018      	movs	r0, r3
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	46c0      	nop			@ (mov r8, r8)
 800a01c:	20000064 	.word	0x20000064

0800a020 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800a020:	b590      	push	{r4, r7, lr}
 800a022:	b089      	sub	sp, #36	@ 0x24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800a02a:	4b4e      	ldr	r3, [pc, #312]	@ (800a164 <HIDS_GetMeasurementValues+0x144>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <HIDS_GetMeasurementValues+0x16>
 800a032:	2301      	movs	r3, #1
 800a034:	e091      	b.n	800a15a <HIDS_GetMeasurementValues+0x13a>
  if(!HIDS_MeasurementReady()) return false;
 800a036:	f7ff ffe5 	bl	800a004 <HIDS_MeasurementReady>
 800a03a:	0003      	movs	r3, r0
 800a03c:	001a      	movs	r2, r3
 800a03e:	2301      	movs	r3, #1
 800a040:	4053      	eors	r3, r2
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <HIDS_GetMeasurementValues+0x2c>
 800a048:	2300      	movs	r3, #0
 800a04a:	e086      	b.n	800a15a <HIDS_GetMeasurementValues+0x13a>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 800a04c:	4b46      	ldr	r3, [pc, #280]	@ (800a168 <HIDS_GetMeasurementValues+0x148>)
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	4b46      	ldr	r3, [pc, #280]	@ (800a16c <HIDS_GetMeasurementValues+0x14c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	0019      	movs	r1, r3
 800a056:	0010      	movs	r0, r2
 800a058:	f7f6 f872 	bl	8000140 <__udivsi3>
 800a05c:	0003      	movs	r3, r0
 800a05e:	61bb      	str	r3, [r7, #24]
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800a060:	2317      	movs	r3, #23
 800a062:	18fc      	adds	r4, r7, r3
 800a064:	4b42      	ldr	r3, [pc, #264]	@ (800a170 <HIDS_GetMeasurementValues+0x150>)
 800a066:	2206      	movs	r2, #6
 800a068:	0019      	movs	r1, r3
 800a06a:	2044      	movs	r0, #68	@ 0x44
 800a06c:	f7ff fe40 	bl	8009cf0 <ReadRegister>
 800a070:	0003      	movs	r3, r0
 800a072:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800a074:	4b3e      	ldr	r3, [pc, #248]	@ (800a170 <HIDS_GetMeasurementValues+0x150>)
 800a076:	0018      	movs	r0, r3
 800a078:	f7ff ff24 	bl	8009ec4 <CheckCRC>
 800a07c:	0003      	movs	r3, r0
 800a07e:	001a      	movs	r2, r3
 800a080:	2301      	movs	r3, #1
 800a082:	4053      	eors	r3, r2
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d011      	beq.n	800a0ae <HIDS_GetMeasurementValues+0x8e>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800a08a:	231f      	movs	r3, #31
 800a08c:	18fb      	adds	r3, r7, r3
 800a08e:	2200      	movs	r2, #0
 800a090:	701a      	strb	r2, [r3, #0]
 800a092:	e005      	b.n	800a0a0 <HIDS_GetMeasurementValues+0x80>
 800a094:	211f      	movs	r1, #31
 800a096:	187b      	adds	r3, r7, r1
 800a098:	781a      	ldrb	r2, [r3, #0]
 800a09a:	187b      	adds	r3, r7, r1
 800a09c:	3201      	adds	r2, #1
 800a09e:	701a      	strb	r2, [r3, #0]
 800a0a0:	231f      	movs	r3, #31
 800a0a2:	18fb      	adds	r3, r7, r3
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2b05      	cmp	r3, #5
 800a0a8:	d9f4      	bls.n	800a094 <HIDS_GetMeasurementValues+0x74>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	e055      	b.n	800a15a <HIDS_GetMeasurementValues+0x13a>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800a0ae:	4b30      	ldr	r3, [pc, #192]	@ (800a170 <HIDS_GetMeasurementValues+0x150>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	4a2e      	ldr	r2, [pc, #184]	@ (800a170 <HIDS_GetMeasurementValues+0x150>)
 800a0b6:	7852      	ldrb	r2, [r2, #1]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	22af      	movs	r2, #175	@ 0xaf
 800a0bc:	4353      	muls	r3, r2
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f7f9 f8fc 	bl	80032bc <__aeabi_i2d>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	4b2b      	ldr	r3, [pc, #172]	@ (800a174 <HIDS_GetMeasurementValues+0x154>)
 800a0c8:	f7f7 fdf2 	bl	8001cb0 <__aeabi_ddiv>
 800a0cc:	0002      	movs	r2, r0
 800a0ce:	000b      	movs	r3, r1
 800a0d0:	0010      	movs	r0, r2
 800a0d2:	0019      	movs	r1, r3
 800a0d4:	f7f9 f98c 	bl	80033f0 <__aeabi_d2f>
 800a0d8:	1c03      	adds	r3, r0, #0
 800a0da:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800a0dc:	4926      	ldr	r1, [pc, #152]	@ (800a178 <HIDS_GetMeasurementValues+0x158>)
 800a0de:	6938      	ldr	r0, [r7, #16]
 800a0e0:	f7f7 f81a 	bl	8001118 <__aeabi_fsub>
 800a0e4:	1c03      	adds	r3, r0, #0
 800a0e6:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800a0e8:	4b21      	ldr	r3, [pc, #132]	@ (800a170 <HIDS_GetMeasurementValues+0x150>)
 800a0ea:	78db      	ldrb	r3, [r3, #3]
 800a0ec:	021b      	lsls	r3, r3, #8
 800a0ee:	4a20      	ldr	r2, [pc, #128]	@ (800a170 <HIDS_GetMeasurementValues+0x150>)
 800a0f0:	7912      	ldrb	r2, [r2, #4]
 800a0f2:	431a      	orrs	r2, r3
 800a0f4:	0013      	movs	r3, r2
 800a0f6:	015b      	lsls	r3, r3, #5
 800a0f8:	1a9b      	subs	r3, r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	189b      	adds	r3, r3, r2
 800a0fe:	0018      	movs	r0, r3
 800a100:	f7f9 f8dc 	bl	80032bc <__aeabi_i2d>
 800a104:	2200      	movs	r2, #0
 800a106:	4b1b      	ldr	r3, [pc, #108]	@ (800a174 <HIDS_GetMeasurementValues+0x154>)
 800a108:	f7f7 fdd2 	bl	8001cb0 <__aeabi_ddiv>
 800a10c:	0002      	movs	r2, r0
 800a10e:	000b      	movs	r3, r1
 800a110:	0010      	movs	r0, r2
 800a112:	0019      	movs	r1, r3
 800a114:	f7f9 f96c 	bl	80033f0 <__aeabi_d2f>
 800a118:	1c03      	adds	r3, r0, #0
 800a11a:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800a11c:	4917      	ldr	r1, [pc, #92]	@ (800a17c <HIDS_GetMeasurementValues+0x15c>)
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7f6 fffa 	bl	8001118 <__aeabi_fsub>
 800a124:	1c03      	adds	r3, r0, #0
 800a126:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	0011      	movs	r1, r2
 800a13a:	0018      	movs	r0, r3
 800a13c:	f7fe fd1a 	bl	8008b74 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	1c11      	adds	r1, r2, #0
 800a146:	1c18      	adds	r0, r3, #0
 800a148:	f7f9 faba 	bl	80036c0 <ESP_GetHT>

   measurements = 0;
 800a14c:	4b0c      	ldr	r3, [pc, #48]	@ (800a180 <HIDS_GetMeasurementValues+0x160>)
 800a14e:	2200      	movs	r2, #0
 800a150:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800a152:	4b04      	ldr	r3, [pc, #16]	@ (800a164 <HIDS_GetMeasurementValues+0x144>)
 800a154:	2201      	movs	r2, #1
 800a156:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800a158:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800a15a:	0018      	movs	r0, r3
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b009      	add	sp, #36	@ 0x24
 800a160:	bd90      	pop	{r4, r7, pc}
 800a162:	46c0      	nop			@ (mov r8, r8)
 800a164:	20002d16 	.word	0x20002d16
 800a168:	2000006c 	.word	0x2000006c
 800a16c:	20000068 	.word	0x20000068
 800a170:	20002d10 	.word	0x20002d10
 800a174:	40efffe0 	.word	0x40efffe0
 800a178:	42340000 	.word	0x42340000
 800a17c:	40c00000 	.word	0x40c00000
 800a180:	20002d18 	.word	0x20002d18

0800a184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800a184:	480d      	ldr	r0, [pc, #52]	@ (800a1bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800a186:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800a188:	f7ff f962 	bl	8009450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a18c:	480c      	ldr	r0, [pc, #48]	@ (800a1c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800a18e:	490d      	ldr	r1, [pc, #52]	@ (800a1c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a190:	4a0d      	ldr	r2, [pc, #52]	@ (800a1c8 <LoopForever+0xe>)
  movs r3, #0
 800a192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a194:	e002      	b.n	800a19c <LoopCopyDataInit>

0800a196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a19a:	3304      	adds	r3, #4

0800a19c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a19c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a19e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a1a0:	d3f9      	bcc.n	800a196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a1a2:	4a0a      	ldr	r2, [pc, #40]	@ (800a1cc <LoopForever+0x12>)
  ldr r4, =_ebss
 800a1a4:	4c0a      	ldr	r4, [pc, #40]	@ (800a1d0 <LoopForever+0x16>)
  movs r3, #0
 800a1a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a1a8:	e001      	b.n	800a1ae <LoopFillZerobss>

0800a1aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a1aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a1ac:	3204      	adds	r2, #4

0800a1ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a1ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a1b0:	d3fb      	bcc.n	800a1aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a1b2:	f00e fa49 	bl	8018648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a1b6:	f7fc f90b 	bl	80063d0 <main>

0800a1ba <LoopForever>:

LoopForever:
    b LoopForever
 800a1ba:	e7fe      	b.n	800a1ba <LoopForever>
   ldr   r0, =_estack
 800a1bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800a1c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a1c4:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 800a1c8:	0801c5e8 	.word	0x0801c5e8
  ldr r2, =_sbss
 800a1cc:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 800a1d0:	20004120 	.word	0x20004120

0800a1d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a1d4:	e7fe      	b.n	800a1d4 <ADC1_COMP_IRQHandler>
	...

0800a1d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a1de:	1dfb      	adds	r3, r7, #7
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a214 <HAL_Init+0x3c>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a214 <HAL_Init+0x3c>)
 800a1ea:	2140      	movs	r1, #64	@ 0x40
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a1f0:	2003      	movs	r0, #3
 800a1f2:	f000 f811 	bl	800a218 <HAL_InitTick>
 800a1f6:	1e03      	subs	r3, r0, #0
 800a1f8:	d003      	beq.n	800a202 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800a1fa:	1dfb      	adds	r3, r7, #7
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	701a      	strb	r2, [r3, #0]
 800a200:	e001      	b.n	800a206 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a202:	f7fe fffb 	bl	80091fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a206:	1dfb      	adds	r3, r7, #7
 800a208:	781b      	ldrb	r3, [r3, #0]
}
 800a20a:	0018      	movs	r0, r3
 800a20c:	46bd      	mov	sp, r7
 800a20e:	b002      	add	sp, #8
 800a210:	bd80      	pop	{r7, pc}
 800a212:	46c0      	nop			@ (mov r8, r8)
 800a214:	40022000 	.word	0x40022000

0800a218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a218:	b590      	push	{r4, r7, lr}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a220:	4b14      	ldr	r3, [pc, #80]	@ (800a274 <HAL_InitTick+0x5c>)
 800a222:	681c      	ldr	r4, [r3, #0]
 800a224:	4b14      	ldr	r3, [pc, #80]	@ (800a278 <HAL_InitTick+0x60>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	0019      	movs	r1, r3
 800a22a:	23fa      	movs	r3, #250	@ 0xfa
 800a22c:	0098      	lsls	r0, r3, #2
 800a22e:	f7f5 ff87 	bl	8000140 <__udivsi3>
 800a232:	0003      	movs	r3, r0
 800a234:	0019      	movs	r1, r3
 800a236:	0020      	movs	r0, r4
 800a238:	f7f5 ff82 	bl	8000140 <__udivsi3>
 800a23c:	0003      	movs	r3, r0
 800a23e:	0018      	movs	r0, r3
 800a240:	f000 fccb 	bl	800abda <HAL_SYSTICK_Config>
 800a244:	1e03      	subs	r3, r0, #0
 800a246:	d001      	beq.n	800a24c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e00f      	b.n	800a26c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b03      	cmp	r3, #3
 800a250:	d80b      	bhi.n	800a26a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	2301      	movs	r3, #1
 800a256:	425b      	negs	r3, r3
 800a258:	2200      	movs	r2, #0
 800a25a:	0018      	movs	r0, r3
 800a25c:	f000 fc98 	bl	800ab90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a260:	4b06      	ldr	r3, [pc, #24]	@ (800a27c <HAL_InitTick+0x64>)
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	e000      	b.n	800a26c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
}
 800a26c:	0018      	movs	r0, r3
 800a26e:	46bd      	mov	sp, r7
 800a270:	b003      	add	sp, #12
 800a272:	bd90      	pop	{r4, r7, pc}
 800a274:	2000005c 	.word	0x2000005c
 800a278:	20000074 	.word	0x20000074
 800a27c:	20000070 	.word	0x20000070

0800a280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a284:	4b05      	ldr	r3, [pc, #20]	@ (800a29c <HAL_IncTick+0x1c>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	001a      	movs	r2, r3
 800a28a:	4b05      	ldr	r3, [pc, #20]	@ (800a2a0 <HAL_IncTick+0x20>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	18d2      	adds	r2, r2, r3
 800a290:	4b03      	ldr	r3, [pc, #12]	@ (800a2a0 <HAL_IncTick+0x20>)
 800a292:	601a      	str	r2, [r3, #0]
}
 800a294:	46c0      	nop			@ (mov r8, r8)
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	46c0      	nop			@ (mov r8, r8)
 800a29c:	20000074 	.word	0x20000074
 800a2a0:	20002d1c 	.word	0x20002d1c

0800a2a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  return uwTick;
 800a2a8:	4b02      	ldr	r3, [pc, #8]	@ (800a2b4 <HAL_GetTick+0x10>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
}
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	46c0      	nop			@ (mov r8, r8)
 800a2b4:	20002d1c 	.word	0x20002d1c

0800a2b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a2c0:	f7ff fff0 	bl	800a2a4 <HAL_GetTick>
 800a2c4:	0003      	movs	r3, r0
 800a2c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	d005      	beq.n	800a2de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a2fc <HAL_Delay+0x44>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	001a      	movs	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	189b      	adds	r3, r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a2de:	46c0      	nop			@ (mov r8, r8)
 800a2e0:	f7ff ffe0 	bl	800a2a4 <HAL_GetTick>
 800a2e4:	0002      	movs	r2, r0
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d8f7      	bhi.n	800a2e0 <HAL_Delay+0x28>
  {
  }
}
 800a2f0:	46c0      	nop			@ (mov r8, r8)
 800a2f2:	46c0      	nop			@ (mov r8, r8)
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	b004      	add	sp, #16
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	46c0      	nop			@ (mov r8, r8)
 800a2fc:	20000074 	.word	0x20000074

0800a300 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800a304:	4b02      	ldr	r3, [pc, #8]	@ (800a310 <HAL_GetUIDw0+0x10>)
 800a306:	681b      	ldr	r3, [r3, #0]
}
 800a308:	0018      	movs	r0, r3
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	46c0      	nop			@ (mov r8, r8)
 800a310:	1ff80050 	.word	0x1ff80050

0800a314 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800a318:	4b02      	ldr	r3, [pc, #8]	@ (800a324 <HAL_GetUIDw1+0x10>)
 800a31a:	681b      	ldr	r3, [r3, #0]
}
 800a31c:	0018      	movs	r0, r3
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	46c0      	nop			@ (mov r8, r8)
 800a324:	1ff80054 	.word	0x1ff80054

0800a328 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800a32c:	4b02      	ldr	r3, [pc, #8]	@ (800a338 <HAL_GetUIDw2+0x10>)
 800a32e:	681b      	ldr	r3, [r3, #0]
}
 800a330:	0018      	movs	r0, r3
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	46c0      	nop			@ (mov r8, r8)
 800a338:	1ff80064 	.word	0x1ff80064

0800a33c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e159      	b.n	800a602 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2250      	movs	r2, #80	@ 0x50
 800a360:	2100      	movs	r1, #0
 800a362:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	0018      	movs	r0, r3
 800a368:	f7fb fb56 	bl	8005a18 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a370:	2210      	movs	r2, #16
 800a372:	4013      	ands	r3, r2
 800a374:	2b10      	cmp	r3, #16
 800a376:	d005      	beq.n	800a384 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	2204      	movs	r2, #4
 800a380:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800a382:	d00b      	beq.n	800a39c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a388:	2210      	movs	r2, #16
 800a38a:	431a      	orrs	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2250      	movs	r2, #80	@ 0x50
 800a394:	2100      	movs	r1, #0
 800a396:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e132      	b.n	800a602 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3a0:	4a9a      	ldr	r2, [pc, #616]	@ (800a60c <HAL_ADC_Init+0x2d0>)
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	2203      	movs	r2, #3
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d108      	bne.n	800a3cc <HAL_ADC_Init+0x90>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d101      	bne.n	800a3cc <HAL_ADC_Init+0x90>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e000      	b.n	800a3ce <HAL_ADC_Init+0x92>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d149      	bne.n	800a466 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	23c0      	movs	r3, #192	@ 0xc0
 800a3d8:	061b      	lsls	r3, r3, #24
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d00b      	beq.n	800a3f6 <HAL_ADC_Init+0xba>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	2380      	movs	r3, #128	@ 0x80
 800a3e4:	05db      	lsls	r3, r3, #23
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d005      	beq.n	800a3f6 <HAL_ADC_Init+0xba>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	2380      	movs	r3, #128	@ 0x80
 800a3f0:	061b      	lsls	r3, r3, #24
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d111      	bne.n	800a41a <HAL_ADC_Init+0xde>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	0092      	lsls	r2, r2, #2
 800a402:	0892      	lsrs	r2, r2, #2
 800a404:	611a      	str	r2, [r3, #16]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6919      	ldr	r1, [r3, #16]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	430a      	orrs	r2, r1
 800a416:	611a      	str	r2, [r3, #16]
 800a418:	e014      	b.n	800a444 <HAL_ADC_Init+0x108>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	691a      	ldr	r2, [r3, #16]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	0092      	lsls	r2, r2, #2
 800a426:	0892      	lsrs	r2, r2, #2
 800a428:	611a      	str	r2, [r3, #16]
 800a42a:	4b79      	ldr	r3, [pc, #484]	@ (800a610 <HAL_ADC_Init+0x2d4>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	4b78      	ldr	r3, [pc, #480]	@ (800a610 <HAL_ADC_Init+0x2d4>)
 800a430:	4978      	ldr	r1, [pc, #480]	@ (800a614 <HAL_ADC_Init+0x2d8>)
 800a432:	400a      	ands	r2, r1
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	4b76      	ldr	r3, [pc, #472]	@ (800a610 <HAL_ADC_Init+0x2d4>)
 800a438:	6819      	ldr	r1, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	4b74      	ldr	r3, [pc, #464]	@ (800a610 <HAL_ADC_Init+0x2d4>)
 800a440:	430a      	orrs	r2, r1
 800a442:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68da      	ldr	r2, [r3, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2118      	movs	r1, #24
 800a450:	438a      	bics	r2, r1
 800a452:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68d9      	ldr	r1, [r3, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800a466:	4b6a      	ldr	r3, [pc, #424]	@ (800a610 <HAL_ADC_Init+0x2d4>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	4b69      	ldr	r3, [pc, #420]	@ (800a610 <HAL_ADC_Init+0x2d4>)
 800a46c:	496a      	ldr	r1, [pc, #424]	@ (800a618 <HAL_ADC_Init+0x2dc>)
 800a46e:	400a      	ands	r2, r1
 800a470:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800a472:	4b67      	ldr	r3, [pc, #412]	@ (800a610 <HAL_ADC_Init+0x2d4>)
 800a474:	6819      	ldr	r1, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a47a:	065a      	lsls	r2, r3, #25
 800a47c:	4b64      	ldr	r3, [pc, #400]	@ (800a610 <HAL_ADC_Init+0x2d4>)
 800a47e:	430a      	orrs	r2, r1
 800a480:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689a      	ldr	r2, [r3, #8]
 800a488:	2380      	movs	r3, #128	@ 0x80
 800a48a:	055b      	lsls	r3, r3, #21
 800a48c:	4013      	ands	r3, r2
 800a48e:	d108      	bne.n	800a4a2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689a      	ldr	r2, [r3, #8]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2180      	movs	r1, #128	@ 0x80
 800a49c:	0549      	lsls	r1, r1, #21
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	68da      	ldr	r2, [r3, #12]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	495b      	ldr	r1, [pc, #364]	@ (800a61c <HAL_ADC_Init+0x2e0>)
 800a4ae:	400a      	ands	r2, r1
 800a4b0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68d9      	ldr	r1, [r3, #12]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d101      	bne.n	800a4c8 <HAL_ADC_Init+0x18c>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	e000      	b.n	800a4ca <HAL_ADC_Init+0x18e>
 800a4c8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a4ca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2020      	movs	r0, #32
 800a4d0:	5c1b      	ldrb	r3, [r3, r0]
 800a4d2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a4d4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	202c      	movs	r0, #44	@ 0x2c
 800a4da:	5c1b      	ldrb	r3, [r3, r0]
 800a4dc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a4de:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a4e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800a4ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a4f4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a502:	23c2      	movs	r3, #194	@ 0xc2
 800a504:	33ff      	adds	r3, #255	@ 0xff
 800a506:	429a      	cmp	r2, r3
 800a508:	d00b      	beq.n	800a522 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68d9      	ldr	r1, [r3, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a518:	431a      	orrs	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2221      	movs	r2, #33	@ 0x21
 800a526:	5c9b      	ldrb	r3, [r3, r2]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d11a      	bne.n	800a562 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2220      	movs	r2, #32
 800a530:	5c9b      	ldrb	r3, [r3, r2]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d109      	bne.n	800a54a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68da      	ldr	r2, [r3, #12]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2180      	movs	r1, #128	@ 0x80
 800a542:	0249      	lsls	r1, r1, #9
 800a544:	430a      	orrs	r2, r1
 800a546:	60da      	str	r2, [r3, #12]
 800a548:	e00b      	b.n	800a562 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54e:	2220      	movs	r2, #32
 800a550:	431a      	orrs	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a55a:	2201      	movs	r2, #1
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a566:	2b01      	cmp	r3, #1
 800a568:	d11f      	bne.n	800a5aa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	691a      	ldr	r2, [r3, #16]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	492a      	ldr	r1, [pc, #168]	@ (800a620 <HAL_ADC_Init+0x2e4>)
 800a576:	400a      	ands	r2, r1
 800a578:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	6919      	ldr	r1, [r3, #16]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a588:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800a58e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	691a      	ldr	r2, [r3, #16]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	611a      	str	r2, [r3, #16]
 800a5a8:	e00e      	b.n	800a5c8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d107      	bne.n	800a5c8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	691a      	ldr	r2, [r3, #16]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	438a      	bics	r2, r1
 800a5c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	695a      	ldr	r2, [r3, #20]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2107      	movs	r1, #7
 800a5d4:	438a      	bics	r2, r1
 800a5d6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6959      	ldr	r1, [r3, #20]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f4:	2203      	movs	r2, #3
 800a5f6:	4393      	bics	r3, r2
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	431a      	orrs	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	0018      	movs	r0, r3
 800a604:	46bd      	mov	sp, r7
 800a606:	b002      	add	sp, #8
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	46c0      	nop			@ (mov r8, r8)
 800a60c:	fffffefd 	.word	0xfffffefd
 800a610:	40012708 	.word	0x40012708
 800a614:	ffc3ffff 	.word	0xffc3ffff
 800a618:	fdffffff 	.word	0xfdffffff
 800a61c:	fffe0219 	.word	0xfffe0219
 800a620:	fffffc03 	.word	0xfffffc03

0800a624 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a624:	b590      	push	{r4, r7, lr}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a62c:	230f      	movs	r3, #15
 800a62e:	18fb      	adds	r3, r7, r3
 800a630:	2200      	movs	r2, #0
 800a632:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	2204      	movs	r2, #4
 800a63c:	4013      	ands	r3, r2
 800a63e:	d138      	bne.n	800a6b2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2250      	movs	r2, #80	@ 0x50
 800a644:	5c9b      	ldrb	r3, [r3, r2]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <HAL_ADC_Start+0x2a>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e038      	b.n	800a6c0 <HAL_ADC_Start+0x9c>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2250      	movs	r2, #80	@ 0x50
 800a652:	2101      	movs	r1, #1
 800a654:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d007      	beq.n	800a66e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800a65e:	230f      	movs	r3, #15
 800a660:	18fc      	adds	r4, r7, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	0018      	movs	r0, r3
 800a666:	f000 f95f 	bl	800a928 <ADC_Enable>
 800a66a:	0003      	movs	r3, r0
 800a66c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a66e:	230f      	movs	r3, #15
 800a670:	18fb      	adds	r3, r7, r3
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d120      	bne.n	800a6ba <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a67c:	4a12      	ldr	r2, [pc, #72]	@ (800a6c8 <HAL_ADC_Start+0xa4>)
 800a67e:	4013      	ands	r3, r2
 800a680:	2280      	movs	r2, #128	@ 0x80
 800a682:	0052      	lsls	r2, r2, #1
 800a684:	431a      	orrs	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2250      	movs	r2, #80	@ 0x50
 800a694:	2100      	movs	r1, #0
 800a696:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	221c      	movs	r2, #28
 800a69e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2104      	movs	r1, #4
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	609a      	str	r2, [r3, #8]
 800a6b0:	e003      	b.n	800a6ba <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a6b2:	230f      	movs	r3, #15
 800a6b4:	18fb      	adds	r3, r7, r3
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a6ba:	230f      	movs	r3, #15
 800a6bc:	18fb      	adds	r3, r7, r3
 800a6be:	781b      	ldrb	r3, [r3, #0]
}
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	b005      	add	sp, #20
 800a6c6:	bd90      	pop	{r4, r7, pc}
 800a6c8:	fffff0fe 	.word	0xfffff0fe

0800a6cc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	2b08      	cmp	r3, #8
 800a6e4:	d102      	bne.n	800a6ec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800a6e6:	2308      	movs	r3, #8
 800a6e8:	60fb      	str	r3, [r7, #12]
 800a6ea:	e014      	b.n	800a716 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d10b      	bne.n	800a712 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6fe:	2220      	movs	r2, #32
 800a700:	431a      	orrs	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2250      	movs	r2, #80	@ 0x50
 800a70a:	2100      	movs	r1, #0
 800a70c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e072      	b.n	800a7f8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800a712:	230c      	movs	r3, #12
 800a714:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a716:	f7ff fdc5 	bl	800a2a4 <HAL_GetTick>
 800a71a:	0003      	movs	r3, r0
 800a71c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a71e:	e01f      	b.n	800a760 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	3301      	adds	r3, #1
 800a724:	d01c      	beq.n	800a760 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d007      	beq.n	800a73c <HAL_ADC_PollForConversion+0x70>
 800a72c:	f7ff fdba 	bl	800a2a4 <HAL_GetTick>
 800a730:	0002      	movs	r2, r0
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d211      	bcs.n	800a760 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	4013      	ands	r3, r2
 800a746:	d10b      	bne.n	800a760 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a74c:	2204      	movs	r2, #4
 800a74e:	431a      	orrs	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2250      	movs	r2, #80	@ 0x50
 800a758:	2100      	movs	r1, #0
 800a75a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e04b      	b.n	800a7f8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4013      	ands	r3, r2
 800a76a:	d0d9      	beq.n	800a720 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a770:	2280      	movs	r2, #128	@ 0x80
 800a772:	0092      	lsls	r2, r2, #2
 800a774:	431a      	orrs	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68da      	ldr	r2, [r3, #12]
 800a780:	23c0      	movs	r3, #192	@ 0xc0
 800a782:	011b      	lsls	r3, r3, #4
 800a784:	4013      	ands	r3, r2
 800a786:	d12e      	bne.n	800a7e6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2220      	movs	r2, #32
 800a78c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d129      	bne.n	800a7e6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2208      	movs	r2, #8
 800a79a:	4013      	ands	r3, r2
 800a79c:	2b08      	cmp	r3, #8
 800a79e:	d122      	bne.n	800a7e6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	2204      	movs	r2, #4
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	d110      	bne.n	800a7ce <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	210c      	movs	r1, #12
 800a7b8:	438a      	bics	r2, r1
 800a7ba:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7c0:	4a0f      	ldr	r2, [pc, #60]	@ (800a800 <HAL_ADC_PollForConversion+0x134>)
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	431a      	orrs	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	655a      	str	r2, [r3, #84]	@ 0x54
 800a7cc:	e00b      	b.n	800a7e6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7de:	2201      	movs	r2, #1
 800a7e0:	431a      	orrs	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d103      	bne.n	800a7f6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	220c      	movs	r2, #12
 800a7f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	b004      	add	sp, #16
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	fffffefe 	.word	0xfffffefe

0800a804 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a812:	0018      	movs	r0, r3
 800a814:	46bd      	mov	sp, r7
 800a816:	b002      	add	sp, #8
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2250      	movs	r2, #80	@ 0x50
 800a82a:	5c9b      	ldrb	r3, [r3, r2]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_ADC_ConfigChannel+0x18>
 800a830:	2302      	movs	r3, #2
 800a832:	e06c      	b.n	800a90e <HAL_ADC_ConfigChannel+0xf2>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2250      	movs	r2, #80	@ 0x50
 800a838:	2101      	movs	r1, #1
 800a83a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	2204      	movs	r2, #4
 800a844:	4013      	ands	r3, r2
 800a846:	d00b      	beq.n	800a860 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84c:	2220      	movs	r2, #32
 800a84e:	431a      	orrs	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2250      	movs	r2, #80	@ 0x50
 800a858:	2100      	movs	r1, #0
 800a85a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e056      	b.n	800a90e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	4a2c      	ldr	r2, [pc, #176]	@ (800a918 <HAL_ADC_ConfigChannel+0xfc>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d028      	beq.n	800a8bc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	035b      	lsls	r3, r3, #13
 800a876:	0b5a      	lsrs	r2, r3, #13
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	430a      	orrs	r2, r1
 800a87e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	2380      	movs	r3, #128	@ 0x80
 800a886:	02db      	lsls	r3, r3, #11
 800a888:	4013      	ands	r3, r2
 800a88a:	d009      	beq.n	800a8a0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800a88c:	4b23      	ldr	r3, [pc, #140]	@ (800a91c <HAL_ADC_ConfigChannel+0x100>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	4b22      	ldr	r3, [pc, #136]	@ (800a91c <HAL_ADC_ConfigChannel+0x100>)
 800a892:	2180      	movs	r1, #128	@ 0x80
 800a894:	0409      	lsls	r1, r1, #16
 800a896:	430a      	orrs	r2, r1
 800a898:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800a89a:	200a      	movs	r0, #10
 800a89c:	f000 f8ac 	bl	800a9f8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	2380      	movs	r3, #128	@ 0x80
 800a8a6:	029b      	lsls	r3, r3, #10
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	d02b      	beq.n	800a904 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800a8ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a91c <HAL_ADC_ConfigChannel+0x100>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	4b1a      	ldr	r3, [pc, #104]	@ (800a91c <HAL_ADC_ConfigChannel+0x100>)
 800a8b2:	2180      	movs	r1, #128	@ 0x80
 800a8b4:	03c9      	lsls	r1, r1, #15
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	e023      	b.n	800a904 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	035b      	lsls	r3, r3, #13
 800a8c8:	0b5b      	lsrs	r3, r3, #13
 800a8ca:	43d9      	mvns	r1, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	400a      	ands	r2, r1
 800a8d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	2380      	movs	r3, #128	@ 0x80
 800a8da:	02db      	lsls	r3, r3, #11
 800a8dc:	4013      	ands	r3, r2
 800a8de:	d005      	beq.n	800a8ec <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800a8e0:	4b0e      	ldr	r3, [pc, #56]	@ (800a91c <HAL_ADC_ConfigChannel+0x100>)
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a91c <HAL_ADC_ConfigChannel+0x100>)
 800a8e6:	490e      	ldr	r1, [pc, #56]	@ (800a920 <HAL_ADC_ConfigChannel+0x104>)
 800a8e8:	400a      	ands	r2, r1
 800a8ea:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	2380      	movs	r3, #128	@ 0x80
 800a8f2:	029b      	lsls	r3, r3, #10
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	d005      	beq.n	800a904 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800a8f8:	4b08      	ldr	r3, [pc, #32]	@ (800a91c <HAL_ADC_ConfigChannel+0x100>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	4b07      	ldr	r3, [pc, #28]	@ (800a91c <HAL_ADC_ConfigChannel+0x100>)
 800a8fe:	4909      	ldr	r1, [pc, #36]	@ (800a924 <HAL_ADC_ConfigChannel+0x108>)
 800a900:	400a      	ands	r2, r1
 800a902:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2250      	movs	r2, #80	@ 0x50
 800a908:	2100      	movs	r1, #0
 800a90a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	0018      	movs	r0, r3
 800a910:	46bd      	mov	sp, r7
 800a912:	b002      	add	sp, #8
 800a914:	bd80      	pop	{r7, pc}
 800a916:	46c0      	nop			@ (mov r8, r8)
 800a918:	00001001 	.word	0x00001001
 800a91c:	40012708 	.word	0x40012708
 800a920:	ff7fffff 	.word	0xff7fffff
 800a924:	ffbfffff 	.word	0xffbfffff

0800a928 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	2203      	movs	r2, #3
 800a93c:	4013      	ands	r3, r2
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d108      	bne.n	800a954 <ADC_Enable+0x2c>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2201      	movs	r2, #1
 800a94a:	4013      	ands	r3, r2
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d101      	bne.n	800a954 <ADC_Enable+0x2c>
 800a950:	2301      	movs	r3, #1
 800a952:	e000      	b.n	800a956 <ADC_Enable+0x2e>
 800a954:	2300      	movs	r3, #0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d146      	bne.n	800a9e8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	4a24      	ldr	r2, [pc, #144]	@ (800a9f4 <ADC_Enable+0xcc>)
 800a962:	4013      	ands	r3, r2
 800a964:	d00d      	beq.n	800a982 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a96a:	2210      	movs	r2, #16
 800a96c:	431a      	orrs	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a976:	2201      	movs	r2, #1
 800a978:	431a      	orrs	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	e033      	b.n	800a9ea <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689a      	ldr	r2, [r3, #8]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2101      	movs	r1, #1
 800a98e:	430a      	orrs	r2, r1
 800a990:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800a992:	2001      	movs	r0, #1
 800a994:	f000 f830 	bl	800a9f8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800a998:	f7ff fc84 	bl	800a2a4 <HAL_GetTick>
 800a99c:	0003      	movs	r3, r0
 800a99e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a9a0:	e01b      	b.n	800a9da <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a9a2:	f7ff fc7f 	bl	800a2a4 <HAL_GetTick>
 800a9a6:	0002      	movs	r2, r0
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	2b0a      	cmp	r3, #10
 800a9ae:	d914      	bls.n	800a9da <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d00d      	beq.n	800a9da <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9c2:	2210      	movs	r2, #16
 800a9c4:	431a      	orrs	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e007      	b.n	800a9ea <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d1dc      	bne.n	800a9a2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b004      	add	sp, #16
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	80000017 	.word	0x80000017

0800a9f8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800aa00:	4b0b      	ldr	r3, [pc, #44]	@ (800aa30 <ADC_DelayMicroSecond+0x38>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	490b      	ldr	r1, [pc, #44]	@ (800aa34 <ADC_DelayMicroSecond+0x3c>)
 800aa06:	0018      	movs	r0, r3
 800aa08:	f7f5 fb9a 	bl	8000140 <__udivsi3>
 800aa0c:	0003      	movs	r3, r0
 800aa0e:	001a      	movs	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4353      	muls	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800aa16:	e002      	b.n	800aa1e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1f9      	bne.n	800aa18 <ADC_DelayMicroSecond+0x20>
  }
}
 800aa24:	46c0      	nop			@ (mov r8, r8)
 800aa26:	46c0      	nop			@ (mov r8, r8)
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	b004      	add	sp, #16
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	46c0      	nop			@ (mov r8, r8)
 800aa30:	2000005c 	.word	0x2000005c
 800aa34:	000f4240 	.word	0x000f4240

0800aa38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	0002      	movs	r2, r0
 800aa40:	1dfb      	adds	r3, r7, #7
 800aa42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aa44:	1dfb      	adds	r3, r7, #7
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa4a:	d809      	bhi.n	800aa60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aa4c:	1dfb      	adds	r3, r7, #7
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	001a      	movs	r2, r3
 800aa52:	231f      	movs	r3, #31
 800aa54:	401a      	ands	r2, r3
 800aa56:	4b04      	ldr	r3, [pc, #16]	@ (800aa68 <__NVIC_EnableIRQ+0x30>)
 800aa58:	2101      	movs	r1, #1
 800aa5a:	4091      	lsls	r1, r2
 800aa5c:	000a      	movs	r2, r1
 800aa5e:	601a      	str	r2, [r3, #0]
  }
}
 800aa60:	46c0      	nop			@ (mov r8, r8)
 800aa62:	46bd      	mov	sp, r7
 800aa64:	b002      	add	sp, #8
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	e000e100 	.word	0xe000e100

0800aa6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aa6c:	b590      	push	{r4, r7, lr}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	0002      	movs	r2, r0
 800aa74:	6039      	str	r1, [r7, #0]
 800aa76:	1dfb      	adds	r3, r7, #7
 800aa78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aa7a:	1dfb      	adds	r3, r7, #7
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa80:	d828      	bhi.n	800aad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aa82:	4a2f      	ldr	r2, [pc, #188]	@ (800ab40 <__NVIC_SetPriority+0xd4>)
 800aa84:	1dfb      	adds	r3, r7, #7
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	b25b      	sxtb	r3, r3
 800aa8a:	089b      	lsrs	r3, r3, #2
 800aa8c:	33c0      	adds	r3, #192	@ 0xc0
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	589b      	ldr	r3, [r3, r2]
 800aa92:	1dfa      	adds	r2, r7, #7
 800aa94:	7812      	ldrb	r2, [r2, #0]
 800aa96:	0011      	movs	r1, r2
 800aa98:	2203      	movs	r2, #3
 800aa9a:	400a      	ands	r2, r1
 800aa9c:	00d2      	lsls	r2, r2, #3
 800aa9e:	21ff      	movs	r1, #255	@ 0xff
 800aaa0:	4091      	lsls	r1, r2
 800aaa2:	000a      	movs	r2, r1
 800aaa4:	43d2      	mvns	r2, r2
 800aaa6:	401a      	ands	r2, r3
 800aaa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	019b      	lsls	r3, r3, #6
 800aaae:	22ff      	movs	r2, #255	@ 0xff
 800aab0:	401a      	ands	r2, r3
 800aab2:	1dfb      	adds	r3, r7, #7
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	0018      	movs	r0, r3
 800aab8:	2303      	movs	r3, #3
 800aaba:	4003      	ands	r3, r0
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aac0:	481f      	ldr	r0, [pc, #124]	@ (800ab40 <__NVIC_SetPriority+0xd4>)
 800aac2:	1dfb      	adds	r3, r7, #7
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	b25b      	sxtb	r3, r3
 800aac8:	089b      	lsrs	r3, r3, #2
 800aaca:	430a      	orrs	r2, r1
 800aacc:	33c0      	adds	r3, #192	@ 0xc0
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800aad2:	e031      	b.n	800ab38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aad4:	4a1b      	ldr	r2, [pc, #108]	@ (800ab44 <__NVIC_SetPriority+0xd8>)
 800aad6:	1dfb      	adds	r3, r7, #7
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	0019      	movs	r1, r3
 800aadc:	230f      	movs	r3, #15
 800aade:	400b      	ands	r3, r1
 800aae0:	3b08      	subs	r3, #8
 800aae2:	089b      	lsrs	r3, r3, #2
 800aae4:	3306      	adds	r3, #6
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	18d3      	adds	r3, r2, r3
 800aaea:	3304      	adds	r3, #4
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	1dfa      	adds	r2, r7, #7
 800aaf0:	7812      	ldrb	r2, [r2, #0]
 800aaf2:	0011      	movs	r1, r2
 800aaf4:	2203      	movs	r2, #3
 800aaf6:	400a      	ands	r2, r1
 800aaf8:	00d2      	lsls	r2, r2, #3
 800aafa:	21ff      	movs	r1, #255	@ 0xff
 800aafc:	4091      	lsls	r1, r2
 800aafe:	000a      	movs	r2, r1
 800ab00:	43d2      	mvns	r2, r2
 800ab02:	401a      	ands	r2, r3
 800ab04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	019b      	lsls	r3, r3, #6
 800ab0a:	22ff      	movs	r2, #255	@ 0xff
 800ab0c:	401a      	ands	r2, r3
 800ab0e:	1dfb      	adds	r3, r7, #7
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	0018      	movs	r0, r3
 800ab14:	2303      	movs	r3, #3
 800ab16:	4003      	ands	r3, r0
 800ab18:	00db      	lsls	r3, r3, #3
 800ab1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab1c:	4809      	ldr	r0, [pc, #36]	@ (800ab44 <__NVIC_SetPriority+0xd8>)
 800ab1e:	1dfb      	adds	r3, r7, #7
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	001c      	movs	r4, r3
 800ab24:	230f      	movs	r3, #15
 800ab26:	4023      	ands	r3, r4
 800ab28:	3b08      	subs	r3, #8
 800ab2a:	089b      	lsrs	r3, r3, #2
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	3306      	adds	r3, #6
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	18c3      	adds	r3, r0, r3
 800ab34:	3304      	adds	r3, #4
 800ab36:	601a      	str	r2, [r3, #0]
}
 800ab38:	46c0      	nop			@ (mov r8, r8)
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	b003      	add	sp, #12
 800ab3e:	bd90      	pop	{r4, r7, pc}
 800ab40:	e000e100 	.word	0xe000e100
 800ab44:	e000ed00 	.word	0xe000ed00

0800ab48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	1e5a      	subs	r2, r3, #1
 800ab54:	2380      	movs	r3, #128	@ 0x80
 800ab56:	045b      	lsls	r3, r3, #17
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d301      	bcc.n	800ab60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e010      	b.n	800ab82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ab60:	4b0a      	ldr	r3, [pc, #40]	@ (800ab8c <SysTick_Config+0x44>)
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	3a01      	subs	r2, #1
 800ab66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ab68:	2301      	movs	r3, #1
 800ab6a:	425b      	negs	r3, r3
 800ab6c:	2103      	movs	r1, #3
 800ab6e:	0018      	movs	r0, r3
 800ab70:	f7ff ff7c 	bl	800aa6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ab74:	4b05      	ldr	r3, [pc, #20]	@ (800ab8c <SysTick_Config+0x44>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ab7a:	4b04      	ldr	r3, [pc, #16]	@ (800ab8c <SysTick_Config+0x44>)
 800ab7c:	2207      	movs	r2, #7
 800ab7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	0018      	movs	r0, r3
 800ab84:	46bd      	mov	sp, r7
 800ab86:	b002      	add	sp, #8
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	46c0      	nop			@ (mov r8, r8)
 800ab8c:	e000e010 	.word	0xe000e010

0800ab90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60b9      	str	r1, [r7, #8]
 800ab98:	607a      	str	r2, [r7, #4]
 800ab9a:	210f      	movs	r1, #15
 800ab9c:	187b      	adds	r3, r7, r1
 800ab9e:	1c02      	adds	r2, r0, #0
 800aba0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	187b      	adds	r3, r7, r1
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	b25b      	sxtb	r3, r3
 800abaa:	0011      	movs	r1, r2
 800abac:	0018      	movs	r0, r3
 800abae:	f7ff ff5d 	bl	800aa6c <__NVIC_SetPriority>
}
 800abb2:	46c0      	nop			@ (mov r8, r8)
 800abb4:	46bd      	mov	sp, r7
 800abb6:	b004      	add	sp, #16
 800abb8:	bd80      	pop	{r7, pc}

0800abba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b082      	sub	sp, #8
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	0002      	movs	r2, r0
 800abc2:	1dfb      	adds	r3, r7, #7
 800abc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800abc6:	1dfb      	adds	r3, r7, #7
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	b25b      	sxtb	r3, r3
 800abcc:	0018      	movs	r0, r3
 800abce:	f7ff ff33 	bl	800aa38 <__NVIC_EnableIRQ>
}
 800abd2:	46c0      	nop			@ (mov r8, r8)
 800abd4:	46bd      	mov	sp, r7
 800abd6:	b002      	add	sp, #8
 800abd8:	bd80      	pop	{r7, pc}

0800abda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	0018      	movs	r0, r3
 800abe6:	f7ff ffaf 	bl	800ab48 <SysTick_Config>
 800abea:	0003      	movs	r3, r0
}
 800abec:	0018      	movs	r0, r3
 800abee:	46bd      	mov	sp, r7
 800abf0:	b002      	add	sp, #8
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e061      	b.n	800acca <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a32      	ldr	r2, [pc, #200]	@ (800acd4 <HAL_DMA_Init+0xe0>)
 800ac0c:	4694      	mov	ip, r2
 800ac0e:	4463      	add	r3, ip
 800ac10:	2114      	movs	r1, #20
 800ac12:	0018      	movs	r0, r3
 800ac14:	f7f5 fa94 	bl	8000140 <__udivsi3>
 800ac18:	0003      	movs	r3, r0
 800ac1a:	009a      	lsls	r2, r3, #2
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a2d      	ldr	r2, [pc, #180]	@ (800acd8 <HAL_DMA_Init+0xe4>)
 800ac24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2225      	movs	r2, #37	@ 0x25
 800ac2a:	2102      	movs	r1, #2
 800ac2c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4a28      	ldr	r2, [pc, #160]	@ (800acdc <HAL_DMA_Init+0xe8>)
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ac46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ac52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ac5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689a      	ldr	r2, [r3, #8]
 800ac78:	2380      	movs	r3, #128	@ 0x80
 800ac7a:	01db      	lsls	r3, r3, #7
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d018      	beq.n	800acb2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ac80:	4b17      	ldr	r3, [pc, #92]	@ (800ace0 <HAL_DMA_Init+0xec>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac88:	211c      	movs	r1, #28
 800ac8a:	400b      	ands	r3, r1
 800ac8c:	210f      	movs	r1, #15
 800ac8e:	4099      	lsls	r1, r3
 800ac90:	000b      	movs	r3, r1
 800ac92:	43d9      	mvns	r1, r3
 800ac94:	4b12      	ldr	r3, [pc, #72]	@ (800ace0 <HAL_DMA_Init+0xec>)
 800ac96:	400a      	ands	r2, r1
 800ac98:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ac9a:	4b11      	ldr	r3, [pc, #68]	@ (800ace0 <HAL_DMA_Init+0xec>)
 800ac9c:	6819      	ldr	r1, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aca6:	201c      	movs	r0, #28
 800aca8:	4003      	ands	r3, r0
 800acaa:	409a      	lsls	r2, r3
 800acac:	4b0c      	ldr	r3, [pc, #48]	@ (800ace0 <HAL_DMA_Init+0xec>)
 800acae:	430a      	orrs	r2, r1
 800acb0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2225      	movs	r2, #37	@ 0x25
 800acbc:	2101      	movs	r1, #1
 800acbe:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2224      	movs	r2, #36	@ 0x24
 800acc4:	2100      	movs	r1, #0
 800acc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	0018      	movs	r0, r3
 800accc:	46bd      	mov	sp, r7
 800acce:	b004      	add	sp, #16
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	46c0      	nop			@ (mov r8, r8)
 800acd4:	bffdfff8 	.word	0xbffdfff8
 800acd8:	40020000 	.word	0x40020000
 800acdc:	ffff800f 	.word	0xffff800f
 800ace0:	400200a8 	.word	0x400200a8

0800ace4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e04a      	b.n	800ad8c <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2101      	movs	r1, #1
 800ad02:	438a      	bics	r2, r1
 800ad04:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a22      	ldr	r2, [pc, #136]	@ (800ad94 <HAL_DMA_DeInit+0xb0>)
 800ad0c:	4694      	mov	ip, r2
 800ad0e:	4463      	add	r3, ip
 800ad10:	2114      	movs	r1, #20
 800ad12:	0018      	movs	r0, r3
 800ad14:	f7f5 fa14 	bl	8000140 <__udivsi3>
 800ad18:	0003      	movs	r3, r0
 800ad1a:	009a      	lsls	r2, r3, #2
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a1d      	ldr	r2, [pc, #116]	@ (800ad98 <HAL_DMA_DeInit+0xb4>)
 800ad24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad32:	221c      	movs	r2, #28
 800ad34:	401a      	ands	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	4091      	lsls	r1, r2
 800ad3e:	000a      	movs	r2, r1
 800ad40:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ad42:	4b16      	ldr	r3, [pc, #88]	@ (800ad9c <HAL_DMA_DeInit+0xb8>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad4a:	211c      	movs	r1, #28
 800ad4c:	400b      	ands	r3, r1
 800ad4e:	210f      	movs	r1, #15
 800ad50:	4099      	lsls	r1, r3
 800ad52:	000b      	movs	r3, r1
 800ad54:	43d9      	mvns	r1, r3
 800ad56:	4b11      	ldr	r3, [pc, #68]	@ (800ad9c <HAL_DMA_DeInit+0xb8>)
 800ad58:	400a      	ands	r2, r1
 800ad5a:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2225      	movs	r2, #37	@ 0x25
 800ad7e:	2100      	movs	r1, #0
 800ad80:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2224      	movs	r2, #36	@ 0x24
 800ad86:	2100      	movs	r1, #0
 800ad88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	b002      	add	sp, #8
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	bffdfff8 	.word	0xbffdfff8
 800ad98:	40020000 	.word	0x40020000
 800ad9c:	400200a8 	.word	0x400200a8

0800ada0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
 800adac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adae:	2317      	movs	r3, #23
 800adb0:	18fb      	adds	r3, r7, r3
 800adb2:	2200      	movs	r2, #0
 800adb4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2224      	movs	r2, #36	@ 0x24
 800adba:	5c9b      	ldrb	r3, [r3, r2]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d101      	bne.n	800adc4 <HAL_DMA_Start_IT+0x24>
 800adc0:	2302      	movs	r3, #2
 800adc2:	e04f      	b.n	800ae64 <HAL_DMA_Start_IT+0xc4>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2224      	movs	r2, #36	@ 0x24
 800adc8:	2101      	movs	r1, #1
 800adca:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2225      	movs	r2, #37	@ 0x25
 800add0:	5c9b      	ldrb	r3, [r3, r2]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	2b01      	cmp	r3, #1
 800add6:	d13a      	bne.n	800ae4e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2225      	movs	r2, #37	@ 0x25
 800addc:	2102      	movs	r1, #2
 800adde:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2101      	movs	r1, #1
 800adf2:	438a      	bics	r2, r1
 800adf4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	68b9      	ldr	r1, [r7, #8]
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 f976 	bl	800b0ee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d008      	beq.n	800ae1c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	210e      	movs	r1, #14
 800ae16:	430a      	orrs	r2, r1
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	e00f      	b.n	800ae3c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2104      	movs	r1, #4
 800ae28:	438a      	bics	r2, r1
 800ae2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	210a      	movs	r1, #10
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2101      	movs	r1, #1
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	601a      	str	r2, [r3, #0]
 800ae4c:	e007      	b.n	800ae5e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2224      	movs	r2, #36	@ 0x24
 800ae52:	2100      	movs	r1, #0
 800ae54:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800ae56:	2317      	movs	r3, #23
 800ae58:	18fb      	adds	r3, r7, r3
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ae5e:	2317      	movs	r3, #23
 800ae60:	18fb      	adds	r3, r7, r3
 800ae62:	781b      	ldrb	r3, [r3, #0]
}
 800ae64:	0018      	movs	r0, r3
 800ae66:	46bd      	mov	sp, r7
 800ae68:	b006      	add	sp, #24
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae74:	230f      	movs	r3, #15
 800ae76:	18fb      	adds	r3, r7, r3
 800ae78:	2200      	movs	r2, #0
 800ae7a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2225      	movs	r2, #37	@ 0x25
 800ae80:	5c9b      	ldrb	r3, [r3, r2]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d008      	beq.n	800ae9a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2204      	movs	r2, #4
 800ae8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2224      	movs	r2, #36	@ 0x24
 800ae92:	2100      	movs	r1, #0
 800ae94:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e024      	b.n	800aee4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	210e      	movs	r1, #14
 800aea6:	438a      	bics	r2, r1
 800aea8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	438a      	bics	r2, r1
 800aeb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aebe:	221c      	movs	r2, #28
 800aec0:	401a      	ands	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec6:	2101      	movs	r1, #1
 800aec8:	4091      	lsls	r1, r2
 800aeca:	000a      	movs	r2, r1
 800aecc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2225      	movs	r2, #37	@ 0x25
 800aed2:	2101      	movs	r1, #1
 800aed4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2224      	movs	r2, #36	@ 0x24
 800aeda:	2100      	movs	r1, #0
 800aedc:	5499      	strb	r1, [r3, r2]

    return status;
 800aede:	230f      	movs	r3, #15
 800aee0:	18fb      	adds	r3, r7, r3
 800aee2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aee4:	0018      	movs	r0, r3
 800aee6:	46bd      	mov	sp, r7
 800aee8:	b004      	add	sp, #16
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aef4:	210f      	movs	r1, #15
 800aef6:	187b      	adds	r3, r7, r1
 800aef8:	2200      	movs	r2, #0
 800aefa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2225      	movs	r2, #37	@ 0x25
 800af00:	5c9b      	ldrb	r3, [r3, r2]
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b02      	cmp	r3, #2
 800af06:	d006      	beq.n	800af16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2204      	movs	r2, #4
 800af0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800af0e:	187b      	adds	r3, r7, r1
 800af10:	2201      	movs	r2, #1
 800af12:	701a      	strb	r2, [r3, #0]
 800af14:	e02a      	b.n	800af6c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	210e      	movs	r1, #14
 800af22:	438a      	bics	r2, r1
 800af24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2101      	movs	r1, #1
 800af32:	438a      	bics	r2, r1
 800af34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af3a:	221c      	movs	r2, #28
 800af3c:	401a      	ands	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af42:	2101      	movs	r1, #1
 800af44:	4091      	lsls	r1, r2
 800af46:	000a      	movs	r2, r1
 800af48:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2225      	movs	r2, #37	@ 0x25
 800af4e:	2101      	movs	r1, #1
 800af50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2224      	movs	r2, #36	@ 0x24
 800af56:	2100      	movs	r1, #0
 800af58:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d004      	beq.n	800af6c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	0010      	movs	r0, r2
 800af6a:	4798      	blx	r3
    }
  }
  return status;
 800af6c:	230f      	movs	r3, #15
 800af6e:	18fb      	adds	r3, r7, r3
 800af70:	781b      	ldrb	r3, [r3, #0]
}
 800af72:	0018      	movs	r0, r3
 800af74:	46bd      	mov	sp, r7
 800af76:	b004      	add	sp, #16
 800af78:	bd80      	pop	{r7, pc}

0800af7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b084      	sub	sp, #16
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af96:	221c      	movs	r2, #28
 800af98:	4013      	ands	r3, r2
 800af9a:	2204      	movs	r2, #4
 800af9c:	409a      	lsls	r2, r3
 800af9e:	0013      	movs	r3, r2
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	4013      	ands	r3, r2
 800afa4:	d026      	beq.n	800aff4 <HAL_DMA_IRQHandler+0x7a>
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2204      	movs	r2, #4
 800afaa:	4013      	ands	r3, r2
 800afac:	d022      	beq.n	800aff4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2220      	movs	r2, #32
 800afb6:	4013      	ands	r3, r2
 800afb8:	d107      	bne.n	800afca <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2104      	movs	r1, #4
 800afc6:	438a      	bics	r2, r1
 800afc8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afce:	221c      	movs	r2, #28
 800afd0:	401a      	ands	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd6:	2104      	movs	r1, #4
 800afd8:	4091      	lsls	r1, r2
 800afda:	000a      	movs	r2, r1
 800afdc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d100      	bne.n	800afe8 <HAL_DMA_IRQHandler+0x6e>
 800afe6:	e071      	b.n	800b0cc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	0010      	movs	r0, r2
 800aff0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800aff2:	e06b      	b.n	800b0cc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aff8:	221c      	movs	r2, #28
 800affa:	4013      	ands	r3, r2
 800affc:	2202      	movs	r2, #2
 800affe:	409a      	lsls	r2, r3
 800b000:	0013      	movs	r3, r2
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4013      	ands	r3, r2
 800b006:	d02d      	beq.n	800b064 <HAL_DMA_IRQHandler+0xea>
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2202      	movs	r2, #2
 800b00c:	4013      	ands	r3, r2
 800b00e:	d029      	beq.n	800b064 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2220      	movs	r2, #32
 800b018:	4013      	ands	r3, r2
 800b01a:	d10b      	bne.n	800b034 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	210a      	movs	r1, #10
 800b028:	438a      	bics	r2, r1
 800b02a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2225      	movs	r2, #37	@ 0x25
 800b030:	2101      	movs	r1, #1
 800b032:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b038:	221c      	movs	r2, #28
 800b03a:	401a      	ands	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b040:	2102      	movs	r1, #2
 800b042:	4091      	lsls	r1, r2
 800b044:	000a      	movs	r2, r1
 800b046:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2224      	movs	r2, #36	@ 0x24
 800b04c:	2100      	movs	r1, #0
 800b04e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b054:	2b00      	cmp	r3, #0
 800b056:	d039      	beq.n	800b0cc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	0010      	movs	r0, r2
 800b060:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800b062:	e033      	b.n	800b0cc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b068:	221c      	movs	r2, #28
 800b06a:	4013      	ands	r3, r2
 800b06c:	2208      	movs	r2, #8
 800b06e:	409a      	lsls	r2, r3
 800b070:	0013      	movs	r3, r2
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	4013      	ands	r3, r2
 800b076:	d02a      	beq.n	800b0ce <HAL_DMA_IRQHandler+0x154>
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2208      	movs	r2, #8
 800b07c:	4013      	ands	r3, r2
 800b07e:	d026      	beq.n	800b0ce <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	210e      	movs	r1, #14
 800b08c:	438a      	bics	r2, r1
 800b08e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b094:	221c      	movs	r2, #28
 800b096:	401a      	ands	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b09c:	2101      	movs	r1, #1
 800b09e:	4091      	lsls	r1, r2
 800b0a0:	000a      	movs	r2, r1
 800b0a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2225      	movs	r2, #37	@ 0x25
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2224      	movs	r2, #36	@ 0x24
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d005      	beq.n	800b0ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	0010      	movs	r0, r2
 800b0ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b0cc:	46c0      	nop			@ (mov r8, r8)
 800b0ce:	46c0      	nop			@ (mov r8, r8)
}
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	b004      	add	sp, #16
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2225      	movs	r2, #37	@ 0x25
 800b0e2:	5c9b      	ldrb	r3, [r3, r2]
 800b0e4:	b2db      	uxtb	r3, r3
}
 800b0e6:	0018      	movs	r0, r3
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	b002      	add	sp, #8
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	607a      	str	r2, [r7, #4]
 800b0fa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b100:	221c      	movs	r2, #28
 800b102:	401a      	ands	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b108:	2101      	movs	r1, #1
 800b10a:	4091      	lsls	r1, r2
 800b10c:	000a      	movs	r2, r1
 800b10e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	683a      	ldr	r2, [r7, #0]
 800b116:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	2b10      	cmp	r3, #16
 800b11e:	d108      	bne.n	800b132 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b130:	e007      	b.n	800b142 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	60da      	str	r2, [r3, #12]
}
 800b142:	46c0      	nop			@ (mov r8, r8)
 800b144:	46bd      	mov	sp, r7
 800b146:	b004      	add	sp, #16
 800b148:	bd80      	pop	{r7, pc}
	...

0800b14c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800b154:	f7ff f8a6 	bl	800a2a4 <HAL_GetTick>
 800b158:	0003      	movs	r3, r0
 800b15a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b15c:	e00f      	b.n	800b17e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3301      	adds	r3, #1
 800b162:	d00c      	beq.n	800b17e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d007      	beq.n	800b17a <FLASH_WaitForLastOperation+0x2e>
 800b16a:	f7ff f89b 	bl	800a2a4 <HAL_GetTick>
 800b16e:	0002      	movs	r2, r0
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	429a      	cmp	r2, r3
 800b178:	d201      	bcs.n	800b17e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e052      	b.n	800b224 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b17e:	4b2b      	ldr	r3, [pc, #172]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	2201      	movs	r2, #1
 800b184:	4013      	ands	r3, r2
 800b186:	2b01      	cmp	r3, #1
 800b188:	d0e9      	beq.n	800b15e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b18a:	4b28      	ldr	r3, [pc, #160]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b18c:	699b      	ldr	r3, [r3, #24]
 800b18e:	2202      	movs	r2, #2
 800b190:	4013      	ands	r3, r2
 800b192:	2b02      	cmp	r3, #2
 800b194:	d102      	bne.n	800b19c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b196:	4b25      	ldr	r3, [pc, #148]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b198:	2202      	movs	r2, #2
 800b19a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b19c:	4b23      	ldr	r3, [pc, #140]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b19e:	699a      	ldr	r2, [r3, #24]
 800b1a0:	2380      	movs	r3, #128	@ 0x80
 800b1a2:	005b      	lsls	r3, r3, #1
 800b1a4:	401a      	ands	r2, r3
 800b1a6:	2380      	movs	r3, #128	@ 0x80
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d035      	beq.n	800b21a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b1ae:	4b1f      	ldr	r3, [pc, #124]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b1b0:	699a      	ldr	r2, [r3, #24]
 800b1b2:	2380      	movs	r3, #128	@ 0x80
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b1b8:	2380      	movs	r3, #128	@ 0x80
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d02c      	beq.n	800b21a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b1c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b1c2:	699a      	ldr	r2, [r3, #24]
 800b1c4:	2380      	movs	r3, #128	@ 0x80
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b1ca:	2380      	movs	r3, #128	@ 0x80
 800b1cc:	00db      	lsls	r3, r3, #3
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d023      	beq.n	800b21a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b1d2:	4b16      	ldr	r3, [pc, #88]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b1d4:	699a      	ldr	r2, [r3, #24]
 800b1d6:	2380      	movs	r3, #128	@ 0x80
 800b1d8:	011b      	lsls	r3, r3, #4
 800b1da:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b1dc:	2380      	movs	r3, #128	@ 0x80
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d01a      	beq.n	800b21a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b1e4:	4b11      	ldr	r3, [pc, #68]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b1e6:	699a      	ldr	r2, [r3, #24]
 800b1e8:	2380      	movs	r3, #128	@ 0x80
 800b1ea:	019b      	lsls	r3, r3, #6
 800b1ec:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b1ee:	2380      	movs	r3, #128	@ 0x80
 800b1f0:	019b      	lsls	r3, r3, #6
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d011      	beq.n	800b21a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b1f8:	699a      	ldr	r2, [r3, #24]
 800b1fa:	2380      	movs	r3, #128	@ 0x80
 800b1fc:	029b      	lsls	r3, r3, #10
 800b1fe:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b200:	2380      	movs	r3, #128	@ 0x80
 800b202:	029b      	lsls	r3, r3, #10
 800b204:	429a      	cmp	r2, r3
 800b206:	d008      	beq.n	800b21a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800b208:	4b08      	ldr	r3, [pc, #32]	@ (800b22c <FLASH_WaitForLastOperation+0xe0>)
 800b20a:	699a      	ldr	r2, [r3, #24]
 800b20c:	2380      	movs	r3, #128	@ 0x80
 800b20e:	025b      	lsls	r3, r3, #9
 800b210:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b212:	2380      	movs	r3, #128	@ 0x80
 800b214:	025b      	lsls	r3, r3, #9
 800b216:	429a      	cmp	r2, r3
 800b218:	d103      	bne.n	800b222 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800b21a:	f000 f809 	bl	800b230 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e000      	b.n	800b224 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	0018      	movs	r0, r3
 800b226:	46bd      	mov	sp, r7
 800b228:	b004      	add	sp, #16
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	40022000 	.word	0x40022000

0800b230 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800b23a:	4b49      	ldr	r3, [pc, #292]	@ (800b360 <FLASH_SetErrorCode+0x130>)
 800b23c:	699a      	ldr	r2, [r3, #24]
 800b23e:	2380      	movs	r3, #128	@ 0x80
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	401a      	ands	r2, r3
 800b244:	2380      	movs	r3, #128	@ 0x80
 800b246:	005b      	lsls	r3, r3, #1
 800b248:	429a      	cmp	r2, r3
 800b24a:	d10a      	bne.n	800b262 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b24c:	4b45      	ldr	r3, [pc, #276]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b24e:	695b      	ldr	r3, [r3, #20]
 800b250:	2202      	movs	r2, #2
 800b252:	431a      	orrs	r2, r3
 800b254:	4b43      	ldr	r3, [pc, #268]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b256:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2280      	movs	r2, #128	@ 0x80
 800b25c:	0052      	lsls	r2, r2, #1
 800b25e:	4313      	orrs	r3, r2
 800b260:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800b262:	4b3f      	ldr	r3, [pc, #252]	@ (800b360 <FLASH_SetErrorCode+0x130>)
 800b264:	699a      	ldr	r2, [r3, #24]
 800b266:	2380      	movs	r3, #128	@ 0x80
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	401a      	ands	r2, r3
 800b26c:	2380      	movs	r3, #128	@ 0x80
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	429a      	cmp	r2, r3
 800b272:	d10a      	bne.n	800b28a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b274:	4b3b      	ldr	r3, [pc, #236]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	2201      	movs	r2, #1
 800b27a:	431a      	orrs	r2, r3
 800b27c:	4b39      	ldr	r3, [pc, #228]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b27e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2280      	movs	r2, #128	@ 0x80
 800b284:	0092      	lsls	r2, r2, #2
 800b286:	4313      	orrs	r3, r2
 800b288:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800b28a:	4b35      	ldr	r3, [pc, #212]	@ (800b360 <FLASH_SetErrorCode+0x130>)
 800b28c:	699a      	ldr	r2, [r3, #24]
 800b28e:	2380      	movs	r3, #128	@ 0x80
 800b290:	00db      	lsls	r3, r3, #3
 800b292:	401a      	ands	r2, r3
 800b294:	2380      	movs	r3, #128	@ 0x80
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	429a      	cmp	r2, r3
 800b29a:	d10a      	bne.n	800b2b2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800b29c:	4b31      	ldr	r3, [pc, #196]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	431a      	orrs	r2, r3
 800b2a4:	4b2f      	ldr	r3, [pc, #188]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b2a6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2280      	movs	r2, #128	@ 0x80
 800b2ac:	00d2      	lsls	r2, r2, #3
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800b2b2:	4b2b      	ldr	r3, [pc, #172]	@ (800b360 <FLASH_SetErrorCode+0x130>)
 800b2b4:	699a      	ldr	r2, [r3, #24]
 800b2b6:	2380      	movs	r3, #128	@ 0x80
 800b2b8:	011b      	lsls	r3, r3, #4
 800b2ba:	401a      	ands	r2, r3
 800b2bc:	2380      	movs	r3, #128	@ 0x80
 800b2be:	011b      	lsls	r3, r3, #4
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d10a      	bne.n	800b2da <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800b2c4:	4b27      	ldr	r3, [pc, #156]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	2204      	movs	r2, #4
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	4b25      	ldr	r3, [pc, #148]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b2ce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2280      	movs	r2, #128	@ 0x80
 800b2d4:	0112      	lsls	r2, r2, #4
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800b2da:	4b21      	ldr	r3, [pc, #132]	@ (800b360 <FLASH_SetErrorCode+0x130>)
 800b2dc:	699a      	ldr	r2, [r3, #24]
 800b2de:	2380      	movs	r3, #128	@ 0x80
 800b2e0:	019b      	lsls	r3, r3, #6
 800b2e2:	401a      	ands	r2, r3
 800b2e4:	2380      	movs	r3, #128	@ 0x80
 800b2e6:	019b      	lsls	r3, r3, #6
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d10a      	bne.n	800b302 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800b2ec:	4b1d      	ldr	r3, [pc, #116]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	2210      	movs	r2, #16
 800b2f2:	431a      	orrs	r2, r3
 800b2f4:	4b1b      	ldr	r3, [pc, #108]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b2f6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2280      	movs	r2, #128	@ 0x80
 800b2fc:	0192      	lsls	r2, r2, #6
 800b2fe:	4313      	orrs	r3, r2
 800b300:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800b302:	4b17      	ldr	r3, [pc, #92]	@ (800b360 <FLASH_SetErrorCode+0x130>)
 800b304:	699a      	ldr	r2, [r3, #24]
 800b306:	2380      	movs	r3, #128	@ 0x80
 800b308:	029b      	lsls	r3, r3, #10
 800b30a:	401a      	ands	r2, r3
 800b30c:	2380      	movs	r3, #128	@ 0x80
 800b30e:	029b      	lsls	r3, r3, #10
 800b310:	429a      	cmp	r2, r3
 800b312:	d109      	bne.n	800b328 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800b314:	4b13      	ldr	r3, [pc, #76]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	2220      	movs	r2, #32
 800b31a:	431a      	orrs	r2, r3
 800b31c:	4b11      	ldr	r3, [pc, #68]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b31e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2220      	movs	r2, #32
 800b324:	4313      	orrs	r3, r2
 800b326:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800b328:	4b0d      	ldr	r3, [pc, #52]	@ (800b360 <FLASH_SetErrorCode+0x130>)
 800b32a:	699a      	ldr	r2, [r3, #24]
 800b32c:	2380      	movs	r3, #128	@ 0x80
 800b32e:	025b      	lsls	r3, r3, #9
 800b330:	401a      	ands	r2, r3
 800b332:	2380      	movs	r3, #128	@ 0x80
 800b334:	025b      	lsls	r3, r3, #9
 800b336:	429a      	cmp	r2, r3
 800b338:	d10a      	bne.n	800b350 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800b33a:	4b0a      	ldr	r3, [pc, #40]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	2240      	movs	r2, #64	@ 0x40
 800b340:	431a      	orrs	r2, r3
 800b342:	4b08      	ldr	r3, [pc, #32]	@ (800b364 <FLASH_SetErrorCode+0x134>)
 800b344:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2280      	movs	r2, #128	@ 0x80
 800b34a:	0252      	lsls	r2, r2, #9
 800b34c:	4313      	orrs	r3, r2
 800b34e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b350:	4b03      	ldr	r3, [pc, #12]	@ (800b360 <FLASH_SetErrorCode+0x130>)
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	619a      	str	r2, [r3, #24]
}  
 800b356:	46c0      	nop			@ (mov r8, r8)
 800b358:	46bd      	mov	sp, r7
 800b35a:	b002      	add	sp, #8
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	46c0      	nop			@ (mov r8, r8)
 800b360:	40022000 	.word	0x40022000
 800b364:	20002d20 	.word	0x20002d20

0800b368 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b36e:	4b12      	ldr	r3, [pc, #72]	@ (800b3b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	4013      	ands	r3, r2
 800b376:	d019      	beq.n	800b3ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b378:	f3ef 8310 	mrs	r3, PRIMASK
 800b37c:	607b      	str	r3, [r7, #4]
  return(result);
 800b37e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800b380:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b382:	b672      	cpsid	i
}
 800b384:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800b386:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b388:	4a0c      	ldr	r2, [pc, #48]	@ (800b3bc <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800b38a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800b38c:	4b0a      	ldr	r3, [pc, #40]	@ (800b3b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b38e:	4a0c      	ldr	r2, [pc, #48]	@ (800b3c0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800b390:	60da      	str	r2, [r3, #12]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	f383 8810 	msr	PRIMASK, r3
}
 800b39c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b39e:	4b06      	ldr	r3, [pc, #24]	@ (800b3b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	d001      	beq.n	800b3ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e000      	b.n	800b3ae <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	0018      	movs	r0, r3
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	b004      	add	sp, #16
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	46c0      	nop			@ (mov r8, r8)
 800b3b8:	40022000 	.word	0x40022000
 800b3bc:	89abcdef 	.word	0x89abcdef
 800b3c0:	02030405 	.word	0x02030405

0800b3c4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800b3c8:	4b04      	ldr	r3, [pc, #16]	@ (800b3dc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	4b03      	ldr	r3, [pc, #12]	@ (800b3dc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	0018      	movs	r0, r3
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	40022000 	.word	0x40022000

0800b3e0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800b3e0:	b5b0      	push	{r4, r5, r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3e8:	250f      	movs	r5, #15
 800b3ea:	197b      	adds	r3, r7, r5
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b3f0:	197c      	adds	r4, r7, r5
 800b3f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b430 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	f7ff fea9 	bl	800b14c <FLASH_WaitForLastOperation>
 800b3fa:	0003      	movs	r3, r0
 800b3fc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b3fe:	0029      	movs	r1, r5
 800b400:	187b      	adds	r3, r7, r1
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10c      	bne.n	800b422 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b408:	4b0a      	ldr	r3, [pc, #40]	@ (800b434 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b414:	187c      	adds	r4, r7, r1
 800b416:	4b06      	ldr	r3, [pc, #24]	@ (800b430 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b418:	0018      	movs	r0, r3
 800b41a:	f7ff fe97 	bl	800b14c <FLASH_WaitForLastOperation>
 800b41e:	0003      	movs	r3, r0
 800b420:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800b422:	230f      	movs	r3, #15
 800b424:	18fb      	adds	r3, r7, r3
 800b426:	781b      	ldrb	r3, [r3, #0]
}  
 800b428:	0018      	movs	r0, r3
 800b42a:	46bd      	mov	sp, r7
 800b42c:	b004      	add	sp, #16
 800b42e:	bdb0      	pop	{r4, r5, r7, pc}
 800b430:	0000c350 	.word	0x0000c350
 800b434:	20002d20 	.word	0x20002d20

0800b438 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800b438:	b5b0      	push	{r4, r5, r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b444:	2317      	movs	r3, #23
 800b446:	18fb      	adds	r3, r7, r3
 800b448:	2201      	movs	r2, #1
 800b44a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b44c:	4b24      	ldr	r3, [pc, #144]	@ (800b4e0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b44e:	7c1b      	ldrb	r3, [r3, #16]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d101      	bne.n	800b458 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800b454:	2302      	movs	r3, #2
 800b456:	e03e      	b.n	800b4d6 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800b458:	4b21      	ldr	r3, [pc, #132]	@ (800b4e0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b45a:	2201      	movs	r2, #1
 800b45c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b45e:	2517      	movs	r5, #23
 800b460:	197c      	adds	r4, r7, r5
 800b462:	4b20      	ldr	r3, [pc, #128]	@ (800b4e4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b464:	0018      	movs	r0, r3
 800b466:	f7ff fe71 	bl	800b14c <FLASH_WaitForLastOperation>
 800b46a:	0003      	movs	r3, r0
 800b46c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b46e:	197b      	adds	r3, r7, r5
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d129      	bne.n	800b4ca <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b476:	4b1a      	ldr	r3, [pc, #104]	@ (800b4e0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b478:	2200      	movs	r2, #0
 800b47a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d103      	bne.n	800b48a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	e013      	b.n	800b4b2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d104      	bne.n	800b49a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	b292      	uxth	r2, r2
 800b496:	801a      	strh	r2, [r3, #0]
 800b498:	e00b      	b.n	800b4b2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d104      	bne.n	800b4aa <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	b2d2      	uxtb	r2, r2
 800b4a6:	701a      	strb	r2, [r3, #0]
 800b4a8:	e003      	b.n	800b4b2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800b4aa:	2317      	movs	r3, #23
 800b4ac:	18fb      	adds	r3, r7, r3
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b4b2:	2217      	movs	r2, #23
 800b4b4:	18bb      	adds	r3, r7, r2
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d106      	bne.n	800b4ca <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b4bc:	18bc      	adds	r4, r7, r2
 800b4be:	4b09      	ldr	r3, [pc, #36]	@ (800b4e4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b4c0:	0018      	movs	r0, r3
 800b4c2:	f7ff fe43 	bl	800b14c <FLASH_WaitForLastOperation>
 800b4c6:	0003      	movs	r3, r0
 800b4c8:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b4ca:	4b05      	ldr	r3, [pc, #20]	@ (800b4e0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	741a      	strb	r2, [r3, #16]

  return status;
 800b4d0:	2317      	movs	r3, #23
 800b4d2:	18fb      	adds	r3, r7, r3
 800b4d4:	781b      	ldrb	r3, [r3, #0]
}
 800b4d6:	0018      	movs	r0, r3
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	b006      	add	sp, #24
 800b4dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b4de:	46c0      	nop			@ (mov r8, r8)
 800b4e0:	20002d20 	.word	0x20002d20
 800b4e4:	0000c350 	.word	0x0000c350

0800b4e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800b4fe:	e155      	b.n	800b7ac <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2101      	movs	r1, #1
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	4091      	lsls	r1, r2
 800b50a:	000a      	movs	r2, r1
 800b50c:	4013      	ands	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d100      	bne.n	800b518 <HAL_GPIO_Init+0x30>
 800b516:	e146      	b.n	800b7a6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	2203      	movs	r2, #3
 800b51e:	4013      	ands	r3, r2
 800b520:	2b01      	cmp	r3, #1
 800b522:	d005      	beq.n	800b530 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	2203      	movs	r2, #3
 800b52a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d130      	bne.n	800b592 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	2203      	movs	r2, #3
 800b53c:	409a      	lsls	r2, r3
 800b53e:	0013      	movs	r3, r2
 800b540:	43da      	mvns	r2, r3
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	4013      	ands	r3, r2
 800b546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	68da      	ldr	r2, [r3, #12]
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	005b      	lsls	r3, r3, #1
 800b550:	409a      	lsls	r2, r3
 800b552:	0013      	movs	r3, r2
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	4313      	orrs	r3, r2
 800b558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	693a      	ldr	r2, [r7, #16]
 800b55e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b566:	2201      	movs	r2, #1
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	409a      	lsls	r2, r3
 800b56c:	0013      	movs	r3, r2
 800b56e:	43da      	mvns	r2, r3
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	4013      	ands	r3, r2
 800b574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	091b      	lsrs	r3, r3, #4
 800b57c:	2201      	movs	r2, #1
 800b57e:	401a      	ands	r2, r3
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	409a      	lsls	r2, r3
 800b584:	0013      	movs	r3, r2
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	4313      	orrs	r3, r2
 800b58a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	693a      	ldr	r2, [r7, #16]
 800b590:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	2203      	movs	r2, #3
 800b598:	4013      	ands	r3, r2
 800b59a:	2b03      	cmp	r3, #3
 800b59c:	d017      	beq.n	800b5ce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	2203      	movs	r2, #3
 800b5aa:	409a      	lsls	r2, r3
 800b5ac:	0013      	movs	r3, r2
 800b5ae:	43da      	mvns	r2, r3
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	4013      	ands	r3, r2
 800b5b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	689a      	ldr	r2, [r3, #8]
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	005b      	lsls	r3, r3, #1
 800b5be:	409a      	lsls	r2, r3
 800b5c0:	0013      	movs	r3, r2
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d123      	bne.n	800b622 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	08da      	lsrs	r2, r3, #3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3208      	adds	r2, #8
 800b5e2:	0092      	lsls	r2, r2, #2
 800b5e4:	58d3      	ldr	r3, [r2, r3]
 800b5e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	2207      	movs	r2, #7
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	220f      	movs	r2, #15
 800b5f2:	409a      	lsls	r2, r3
 800b5f4:	0013      	movs	r3, r2
 800b5f6:	43da      	mvns	r2, r3
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	691a      	ldr	r2, [r3, #16]
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2107      	movs	r1, #7
 800b606:	400b      	ands	r3, r1
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	409a      	lsls	r2, r3
 800b60c:	0013      	movs	r3, r2
 800b60e:	693a      	ldr	r2, [r7, #16]
 800b610:	4313      	orrs	r3, r2
 800b612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	08da      	lsrs	r2, r3, #3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	3208      	adds	r2, #8
 800b61c:	0092      	lsls	r2, r2, #2
 800b61e:	6939      	ldr	r1, [r7, #16]
 800b620:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	2203      	movs	r2, #3
 800b62e:	409a      	lsls	r2, r3
 800b630:	0013      	movs	r3, r2
 800b632:	43da      	mvns	r2, r3
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	4013      	ands	r3, r2
 800b638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	2203      	movs	r2, #3
 800b640:	401a      	ands	r2, r3
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	409a      	lsls	r2, r3
 800b648:	0013      	movs	r3, r2
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	23c0      	movs	r3, #192	@ 0xc0
 800b65c:	029b      	lsls	r3, r3, #10
 800b65e:	4013      	ands	r3, r2
 800b660:	d100      	bne.n	800b664 <HAL_GPIO_Init+0x17c>
 800b662:	e0a0      	b.n	800b7a6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b664:	4b57      	ldr	r3, [pc, #348]	@ (800b7c4 <HAL_GPIO_Init+0x2dc>)
 800b666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b668:	4b56      	ldr	r3, [pc, #344]	@ (800b7c4 <HAL_GPIO_Init+0x2dc>)
 800b66a:	2101      	movs	r1, #1
 800b66c:	430a      	orrs	r2, r1
 800b66e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800b670:	4a55      	ldr	r2, [pc, #340]	@ (800b7c8 <HAL_GPIO_Init+0x2e0>)
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	089b      	lsrs	r3, r3, #2
 800b676:	3302      	adds	r3, #2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	589b      	ldr	r3, [r3, r2]
 800b67c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2203      	movs	r2, #3
 800b682:	4013      	ands	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	220f      	movs	r2, #15
 800b688:	409a      	lsls	r2, r3
 800b68a:	0013      	movs	r3, r2
 800b68c:	43da      	mvns	r2, r3
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	4013      	ands	r3, r2
 800b692:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	23a0      	movs	r3, #160	@ 0xa0
 800b698:	05db      	lsls	r3, r3, #23
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d01f      	beq.n	800b6de <HAL_GPIO_Init+0x1f6>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a4a      	ldr	r2, [pc, #296]	@ (800b7cc <HAL_GPIO_Init+0x2e4>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d019      	beq.n	800b6da <HAL_GPIO_Init+0x1f2>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a49      	ldr	r2, [pc, #292]	@ (800b7d0 <HAL_GPIO_Init+0x2e8>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d013      	beq.n	800b6d6 <HAL_GPIO_Init+0x1ee>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a48      	ldr	r2, [pc, #288]	@ (800b7d4 <HAL_GPIO_Init+0x2ec>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d00d      	beq.n	800b6d2 <HAL_GPIO_Init+0x1ea>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a47      	ldr	r2, [pc, #284]	@ (800b7d8 <HAL_GPIO_Init+0x2f0>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d007      	beq.n	800b6ce <HAL_GPIO_Init+0x1e6>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a46      	ldr	r2, [pc, #280]	@ (800b7dc <HAL_GPIO_Init+0x2f4>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d101      	bne.n	800b6ca <HAL_GPIO_Init+0x1e2>
 800b6c6:	2305      	movs	r3, #5
 800b6c8:	e00a      	b.n	800b6e0 <HAL_GPIO_Init+0x1f8>
 800b6ca:	2306      	movs	r3, #6
 800b6cc:	e008      	b.n	800b6e0 <HAL_GPIO_Init+0x1f8>
 800b6ce:	2304      	movs	r3, #4
 800b6d0:	e006      	b.n	800b6e0 <HAL_GPIO_Init+0x1f8>
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e004      	b.n	800b6e0 <HAL_GPIO_Init+0x1f8>
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	e002      	b.n	800b6e0 <HAL_GPIO_Init+0x1f8>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e000      	b.n	800b6e0 <HAL_GPIO_Init+0x1f8>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	2103      	movs	r1, #3
 800b6e4:	400a      	ands	r2, r1
 800b6e6:	0092      	lsls	r2, r2, #2
 800b6e8:	4093      	lsls	r3, r2
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b6f0:	4935      	ldr	r1, [pc, #212]	@ (800b7c8 <HAL_GPIO_Init+0x2e0>)
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	089b      	lsrs	r3, r3, #2
 800b6f6:	3302      	adds	r3, #2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b6fe:	4b38      	ldr	r3, [pc, #224]	@ (800b7e0 <HAL_GPIO_Init+0x2f8>)
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	43da      	mvns	r2, r3
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	4013      	ands	r3, r2
 800b70c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	2380      	movs	r3, #128	@ 0x80
 800b714:	035b      	lsls	r3, r3, #13
 800b716:	4013      	ands	r3, r2
 800b718:	d003      	beq.n	800b722 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800b71a:	693a      	ldr	r2, [r7, #16]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	4313      	orrs	r3, r2
 800b720:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b722:	4b2f      	ldr	r3, [pc, #188]	@ (800b7e0 <HAL_GPIO_Init+0x2f8>)
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b728:	4b2d      	ldr	r3, [pc, #180]	@ (800b7e0 <HAL_GPIO_Init+0x2f8>)
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	43da      	mvns	r2, r3
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	4013      	ands	r3, r2
 800b736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	2380      	movs	r3, #128	@ 0x80
 800b73e:	039b      	lsls	r3, r3, #14
 800b740:	4013      	ands	r3, r2
 800b742:	d003      	beq.n	800b74c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b744:	693a      	ldr	r2, [r7, #16]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	4313      	orrs	r3, r2
 800b74a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b74c:	4b24      	ldr	r3, [pc, #144]	@ (800b7e0 <HAL_GPIO_Init+0x2f8>)
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800b752:	4b23      	ldr	r3, [pc, #140]	@ (800b7e0 <HAL_GPIO_Init+0x2f8>)
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	43da      	mvns	r2, r3
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	4013      	ands	r3, r2
 800b760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	2380      	movs	r3, #128	@ 0x80
 800b768:	029b      	lsls	r3, r3, #10
 800b76a:	4013      	ands	r3, r2
 800b76c:	d003      	beq.n	800b776 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4313      	orrs	r3, r2
 800b774:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b776:	4b1a      	ldr	r3, [pc, #104]	@ (800b7e0 <HAL_GPIO_Init+0x2f8>)
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b77c:	4b18      	ldr	r3, [pc, #96]	@ (800b7e0 <HAL_GPIO_Init+0x2f8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	43da      	mvns	r2, r3
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	4013      	ands	r3, r2
 800b78a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	2380      	movs	r3, #128	@ 0x80
 800b792:	025b      	lsls	r3, r3, #9
 800b794:	4013      	ands	r3, r2
 800b796:	d003      	beq.n	800b7a0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b7a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e0 <HAL_GPIO_Init+0x2f8>)
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	40da      	lsrs	r2, r3
 800b7b4:	1e13      	subs	r3, r2, #0
 800b7b6:	d000      	beq.n	800b7ba <HAL_GPIO_Init+0x2d2>
 800b7b8:	e6a2      	b.n	800b500 <HAL_GPIO_Init+0x18>
  }
}
 800b7ba:	46c0      	nop			@ (mov r8, r8)
 800b7bc:	46c0      	nop			@ (mov r8, r8)
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	b006      	add	sp, #24
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	40021000 	.word	0x40021000
 800b7c8:	40010000 	.word	0x40010000
 800b7cc:	50000400 	.word	0x50000400
 800b7d0:	50000800 	.word	0x50000800
 800b7d4:	50000c00 	.word	0x50000c00
 800b7d8:	50001000 	.word	0x50001000
 800b7dc:	50001c00 	.word	0x50001c00
 800b7e0:	40010400 	.word	0x40010400

0800b7e4 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b7fa:	e0bc      	b.n	800b976 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	409a      	lsls	r2, r3
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	4013      	ands	r3, r2
 800b806:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d100      	bne.n	800b810 <HAL_GPIO_DeInit+0x2c>
 800b80e:	e0af      	b.n	800b970 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800b810:	4a5e      	ldr	r2, [pc, #376]	@ (800b98c <HAL_GPIO_DeInit+0x1a8>)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	089b      	lsrs	r3, r3, #2
 800b816:	3302      	adds	r3, #2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	589b      	ldr	r3, [r3, r2]
 800b81c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2203      	movs	r2, #3
 800b822:	4013      	ands	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	220f      	movs	r2, #15
 800b828:	409a      	lsls	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	4013      	ands	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	23a0      	movs	r3, #160	@ 0xa0
 800b834:	05db      	lsls	r3, r3, #23
 800b836:	429a      	cmp	r2, r3
 800b838:	d01f      	beq.n	800b87a <HAL_GPIO_DeInit+0x96>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a54      	ldr	r2, [pc, #336]	@ (800b990 <HAL_GPIO_DeInit+0x1ac>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d019      	beq.n	800b876 <HAL_GPIO_DeInit+0x92>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	4a53      	ldr	r2, [pc, #332]	@ (800b994 <HAL_GPIO_DeInit+0x1b0>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d013      	beq.n	800b872 <HAL_GPIO_DeInit+0x8e>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a52      	ldr	r2, [pc, #328]	@ (800b998 <HAL_GPIO_DeInit+0x1b4>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d00d      	beq.n	800b86e <HAL_GPIO_DeInit+0x8a>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a51      	ldr	r2, [pc, #324]	@ (800b99c <HAL_GPIO_DeInit+0x1b8>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d007      	beq.n	800b86a <HAL_GPIO_DeInit+0x86>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a50      	ldr	r2, [pc, #320]	@ (800b9a0 <HAL_GPIO_DeInit+0x1bc>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d101      	bne.n	800b866 <HAL_GPIO_DeInit+0x82>
 800b862:	2305      	movs	r3, #5
 800b864:	e00a      	b.n	800b87c <HAL_GPIO_DeInit+0x98>
 800b866:	2306      	movs	r3, #6
 800b868:	e008      	b.n	800b87c <HAL_GPIO_DeInit+0x98>
 800b86a:	2304      	movs	r3, #4
 800b86c:	e006      	b.n	800b87c <HAL_GPIO_DeInit+0x98>
 800b86e:	2303      	movs	r3, #3
 800b870:	e004      	b.n	800b87c <HAL_GPIO_DeInit+0x98>
 800b872:	2302      	movs	r3, #2
 800b874:	e002      	b.n	800b87c <HAL_GPIO_DeInit+0x98>
 800b876:	2301      	movs	r3, #1
 800b878:	e000      	b.n	800b87c <HAL_GPIO_DeInit+0x98>
 800b87a:	2300      	movs	r3, #0
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	2103      	movs	r1, #3
 800b880:	400a      	ands	r2, r1
 800b882:	0092      	lsls	r2, r2, #2
 800b884:	4093      	lsls	r3, r2
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d132      	bne.n	800b8f2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b88c:	4b45      	ldr	r3, [pc, #276]	@ (800b9a4 <HAL_GPIO_DeInit+0x1c0>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	43d9      	mvns	r1, r3
 800b894:	4b43      	ldr	r3, [pc, #268]	@ (800b9a4 <HAL_GPIO_DeInit+0x1c0>)
 800b896:	400a      	ands	r2, r1
 800b898:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b89a:	4b42      	ldr	r3, [pc, #264]	@ (800b9a4 <HAL_GPIO_DeInit+0x1c0>)
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	43d9      	mvns	r1, r3
 800b8a2:	4b40      	ldr	r3, [pc, #256]	@ (800b9a4 <HAL_GPIO_DeInit+0x1c0>)
 800b8a4:	400a      	ands	r2, r1
 800b8a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b8a8:	4b3e      	ldr	r3, [pc, #248]	@ (800b9a4 <HAL_GPIO_DeInit+0x1c0>)
 800b8aa:	68da      	ldr	r2, [r3, #12]
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	43d9      	mvns	r1, r3
 800b8b0:	4b3c      	ldr	r3, [pc, #240]	@ (800b9a4 <HAL_GPIO_DeInit+0x1c0>)
 800b8b2:	400a      	ands	r2, r1
 800b8b4:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b8b6:	4b3b      	ldr	r3, [pc, #236]	@ (800b9a4 <HAL_GPIO_DeInit+0x1c0>)
 800b8b8:	689a      	ldr	r2, [r3, #8]
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	43d9      	mvns	r1, r3
 800b8be:	4b39      	ldr	r3, [pc, #228]	@ (800b9a4 <HAL_GPIO_DeInit+0x1c0>)
 800b8c0:	400a      	ands	r2, r1
 800b8c2:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	220f      	movs	r2, #15
 800b8ce:	409a      	lsls	r2, r3
 800b8d0:	0013      	movs	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b8d4:	4a2d      	ldr	r2, [pc, #180]	@ (800b98c <HAL_GPIO_DeInit+0x1a8>)
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	089b      	lsrs	r3, r3, #2
 800b8da:	3302      	adds	r3, #2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	589a      	ldr	r2, [r3, r2]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	43d9      	mvns	r1, r3
 800b8e4:	4829      	ldr	r0, [pc, #164]	@ (800b98c <HAL_GPIO_DeInit+0x1a8>)
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	089b      	lsrs	r3, r3, #2
 800b8ea:	400a      	ands	r2, r1
 800b8ec:	3302      	adds	r3, #2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	005b      	lsls	r3, r3, #1
 800b8fa:	2103      	movs	r1, #3
 800b8fc:	4099      	lsls	r1, r3
 800b8fe:	000b      	movs	r3, r1
 800b900:	431a      	orrs	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	08da      	lsrs	r2, r3, #3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	3208      	adds	r2, #8
 800b90e:	0092      	lsls	r2, r2, #2
 800b910:	58d3      	ldr	r3, [r2, r3]
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	2107      	movs	r1, #7
 800b916:	400a      	ands	r2, r1
 800b918:	0092      	lsls	r2, r2, #2
 800b91a:	210f      	movs	r1, #15
 800b91c:	4091      	lsls	r1, r2
 800b91e:	000a      	movs	r2, r1
 800b920:	43d1      	mvns	r1, r2
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	08d2      	lsrs	r2, r2, #3
 800b926:	4019      	ands	r1, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	3208      	adds	r2, #8
 800b92c:	0092      	lsls	r2, r2, #2
 800b92e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	0052      	lsls	r2, r2, #1
 800b938:	2103      	movs	r1, #3
 800b93a:	4091      	lsls	r1, r2
 800b93c:	000a      	movs	r2, r1
 800b93e:	43d2      	mvns	r2, r2
 800b940:	401a      	ands	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	2101      	movs	r1, #1
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	4091      	lsls	r1, r2
 800b950:	000a      	movs	r2, r1
 800b952:	43d2      	mvns	r2, r2
 800b954:	401a      	ands	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	0052      	lsls	r2, r2, #1
 800b962:	2103      	movs	r1, #3
 800b964:	4091      	lsls	r1, r2
 800b966:	000a      	movs	r2, r1
 800b968:	43d2      	mvns	r2, r2
 800b96a:	401a      	ands	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	609a      	str	r2, [r3, #8]
    }
    position++;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	3301      	adds	r3, #1
 800b974:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	40da      	lsrs	r2, r3
 800b97c:	1e13      	subs	r3, r2, #0
 800b97e:	d000      	beq.n	800b982 <HAL_GPIO_DeInit+0x19e>
 800b980:	e73c      	b.n	800b7fc <HAL_GPIO_DeInit+0x18>
  }
}
 800b982:	46c0      	nop			@ (mov r8, r8)
 800b984:	46c0      	nop			@ (mov r8, r8)
 800b986:	46bd      	mov	sp, r7
 800b988:	b006      	add	sp, #24
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	40010000 	.word	0x40010000
 800b990:	50000400 	.word	0x50000400
 800b994:	50000800 	.word	0x50000800
 800b998:	50000c00 	.word	0x50000c00
 800b99c:	50001000 	.word	0x50001000
 800b9a0:	50001c00 	.word	0x50001c00
 800b9a4:	40010400 	.word	0x40010400

0800b9a8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	000a      	movs	r2, r1
 800b9b2:	1cbb      	adds	r3, r7, #2
 800b9b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	1cba      	adds	r2, r7, #2
 800b9bc:	8812      	ldrh	r2, [r2, #0]
 800b9be:	4013      	ands	r3, r2
 800b9c0:	d004      	beq.n	800b9cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b9c2:	230f      	movs	r3, #15
 800b9c4:	18fb      	adds	r3, r7, r3
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	701a      	strb	r2, [r3, #0]
 800b9ca:	e003      	b.n	800b9d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b9cc:	230f      	movs	r3, #15
 800b9ce:	18fb      	adds	r3, r7, r3
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b9d4:	230f      	movs	r3, #15
 800b9d6:	18fb      	adds	r3, r7, r3
 800b9d8:	781b      	ldrb	r3, [r3, #0]
}
 800b9da:	0018      	movs	r0, r3
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	b004      	add	sp, #16
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	0008      	movs	r0, r1
 800b9ec:	0011      	movs	r1, r2
 800b9ee:	1cbb      	adds	r3, r7, #2
 800b9f0:	1c02      	adds	r2, r0, #0
 800b9f2:	801a      	strh	r2, [r3, #0]
 800b9f4:	1c7b      	adds	r3, r7, #1
 800b9f6:	1c0a      	adds	r2, r1, #0
 800b9f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b9fa:	1c7b      	adds	r3, r7, #1
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d004      	beq.n	800ba0c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ba02:	1cbb      	adds	r3, r7, #2
 800ba04:	881a      	ldrh	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800ba0a:	e003      	b.n	800ba14 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800ba0c:	1cbb      	adds	r3, r7, #2
 800ba0e:	881a      	ldrh	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ba14:	46c0      	nop			@ (mov r8, r8)
 800ba16:	46bd      	mov	sp, r7
 800ba18:	b002      	add	sp, #8
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d101      	bne.n	800ba2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e082      	b.n	800bb34 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2241      	movs	r2, #65	@ 0x41
 800ba32:	5c9b      	ldrb	r3, [r3, r2]
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d107      	bne.n	800ba4a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2240      	movs	r2, #64	@ 0x40
 800ba3e:	2100      	movs	r1, #0
 800ba40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	0018      	movs	r0, r3
 800ba46:	f7fa fae1 	bl	800600c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2241      	movs	r2, #65	@ 0x41
 800ba4e:	2124      	movs	r1, #36	@ 0x24
 800ba50:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	438a      	bics	r2, r1
 800ba60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4934      	ldr	r1, [pc, #208]	@ (800bb3c <HAL_I2C_Init+0x120>)
 800ba6c:	400a      	ands	r2, r1
 800ba6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	689a      	ldr	r2, [r3, #8]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4931      	ldr	r1, [pc, #196]	@ (800bb40 <HAL_I2C_Init+0x124>)
 800ba7c:	400a      	ands	r2, r1
 800ba7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d108      	bne.n	800ba9a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2180      	movs	r1, #128	@ 0x80
 800ba92:	0209      	lsls	r1, r1, #8
 800ba94:	430a      	orrs	r2, r1
 800ba96:	609a      	str	r2, [r3, #8]
 800ba98:	e007      	b.n	800baaa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	689a      	ldr	r2, [r3, #8]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2184      	movs	r1, #132	@ 0x84
 800baa4:	0209      	lsls	r1, r1, #8
 800baa6:	430a      	orrs	r2, r1
 800baa8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d104      	bne.n	800babc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2280      	movs	r2, #128	@ 0x80
 800bab8:	0112      	lsls	r2, r2, #4
 800baba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685a      	ldr	r2, [r3, #4]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	491f      	ldr	r1, [pc, #124]	@ (800bb44 <HAL_I2C_Init+0x128>)
 800bac8:	430a      	orrs	r2, r1
 800baca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68da      	ldr	r2, [r3, #12]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	491a      	ldr	r1, [pc, #104]	@ (800bb40 <HAL_I2C_Init+0x124>)
 800bad8:	400a      	ands	r2, r1
 800bada:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	691a      	ldr	r2, [r3, #16]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	695b      	ldr	r3, [r3, #20]
 800bae4:	431a      	orrs	r2, r3
 800bae6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	69d9      	ldr	r1, [r3, #28]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a1a      	ldr	r2, [r3, #32]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	430a      	orrs	r2, r1
 800bb04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2101      	movs	r1, #1
 800bb12:	430a      	orrs	r2, r1
 800bb14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2241      	movs	r2, #65	@ 0x41
 800bb20:	2120      	movs	r1, #32
 800bb22:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2242      	movs	r2, #66	@ 0x42
 800bb2e:	2100      	movs	r1, #0
 800bb30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	0018      	movs	r0, r3
 800bb36:	46bd      	mov	sp, r7
 800bb38:	b002      	add	sp, #8
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	f0ffffff 	.word	0xf0ffffff
 800bb40:	ffff7fff 	.word	0xffff7fff
 800bb44:	02008000 	.word	0x02008000

0800bb48 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800bb48:	b5b0      	push	{r4, r5, r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	0008      	movs	r0, r1
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	0019      	movs	r1, r3
 800bb56:	230a      	movs	r3, #10
 800bb58:	18fb      	adds	r3, r7, r3
 800bb5a:	1c02      	adds	r2, r0, #0
 800bb5c:	801a      	strh	r2, [r3, #0]
 800bb5e:	2308      	movs	r3, #8
 800bb60:	18fb      	adds	r3, r7, r3
 800bb62:	1c0a      	adds	r2, r1, #0
 800bb64:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2241      	movs	r2, #65	@ 0x41
 800bb6a:	5c9b      	ldrb	r3, [r3, r2]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b20      	cmp	r3, #32
 800bb70:	d000      	beq.n	800bb74 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800bb72:	e0dd      	b.n	800bd30 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	699a      	ldr	r2, [r3, #24]
 800bb7a:	2380      	movs	r3, #128	@ 0x80
 800bb7c:	021b      	lsls	r3, r3, #8
 800bb7e:	401a      	ands	r2, r3
 800bb80:	2380      	movs	r3, #128	@ 0x80
 800bb82:	021b      	lsls	r3, r3, #8
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d101      	bne.n	800bb8c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e0d2      	b.n	800bd32 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2240      	movs	r2, #64	@ 0x40
 800bb90:	5c9b      	ldrb	r3, [r3, r2]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d101      	bne.n	800bb9a <HAL_I2C_Master_Transmit_DMA+0x52>
 800bb96:	2302      	movs	r3, #2
 800bb98:	e0cb      	b.n	800bd32 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2240      	movs	r2, #64	@ 0x40
 800bb9e:	2101      	movs	r1, #1
 800bba0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2241      	movs	r2, #65	@ 0x41
 800bba6:	2121      	movs	r1, #33	@ 0x21
 800bba8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2242      	movs	r2, #66	@ 0x42
 800bbae:	2110      	movs	r1, #16
 800bbb0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2208      	movs	r2, #8
 800bbc2:	18ba      	adds	r2, r7, r2
 800bbc4:	8812      	ldrh	r2, [r2, #0]
 800bbc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4a5c      	ldr	r2, [pc, #368]	@ (800bd3c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800bbcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4a5b      	ldr	r2, [pc, #364]	@ (800bd40 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800bbd2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	2bff      	cmp	r3, #255	@ 0xff
 800bbdc:	d906      	bls.n	800bbec <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	22ff      	movs	r2, #255	@ 0xff
 800bbe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800bbe4:	2380      	movs	r3, #128	@ 0x80
 800bbe6:	045b      	lsls	r3, r3, #17
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	e007      	b.n	800bbfc <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bbf6:	2380      	movs	r3, #128	@ 0x80
 800bbf8:	049b      	lsls	r3, r3, #18
 800bbfa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d100      	bne.n	800bc06 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800bc04:	e078      	b.n	800bcf8 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d023      	beq.n	800bc56 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc12:	4a4c      	ldr	r2, [pc, #304]	@ (800bd44 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800bc14:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc1a:	4a4b      	ldr	r2, [pc, #300]	@ (800bd48 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800bc1c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc22:	2200      	movs	r2, #0
 800bc24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	3328      	adds	r3, #40	@ 0x28
 800bc3a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800bc40:	2513      	movs	r5, #19
 800bc42:	197c      	adds	r4, r7, r5
 800bc44:	f7ff f8ac 	bl	800ada0 <HAL_DMA_Start_IT>
 800bc48:	0003      	movs	r3, r0
 800bc4a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bc4c:	197b      	adds	r3, r7, r5
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d13d      	bne.n	800bcd0 <HAL_I2C_Master_Transmit_DMA+0x188>
 800bc54:	e013      	b.n	800bc7e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2241      	movs	r2, #65	@ 0x41
 800bc5a:	2120      	movs	r1, #32
 800bc5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2242      	movs	r2, #66	@ 0x42
 800bc62:	2100      	movs	r1, #0
 800bc64:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc6a:	2280      	movs	r2, #128	@ 0x80
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2240      	movs	r2, #64	@ 0x40
 800bc76:	2100      	movs	r1, #0
 800bc78:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e059      	b.n	800bd32 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	697c      	ldr	r4, [r7, #20]
 800bc86:	230a      	movs	r3, #10
 800bc88:	18fb      	adds	r3, r7, r3
 800bc8a:	8819      	ldrh	r1, [r3, #0]
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	4b2f      	ldr	r3, [pc, #188]	@ (800bd4c <HAL_I2C_Master_Transmit_DMA+0x204>)
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	0023      	movs	r3, r4
 800bc94:	f001 fd0e 	bl	800d6b4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2240      	movs	r2, #64	@ 0x40
 800bcae:	2100      	movs	r1, #0
 800bcb0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2110      	movs	r1, #16
 800bcb6:	0018      	movs	r0, r3
 800bcb8:	f001 fd36 	bl	800d728 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2180      	movs	r1, #128	@ 0x80
 800bcc8:	01c9      	lsls	r1, r1, #7
 800bcca:	430a      	orrs	r2, r1
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e02d      	b.n	800bd2c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2241      	movs	r2, #65	@ 0x41
 800bcd4:	2120      	movs	r1, #32
 800bcd6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2242      	movs	r2, #66	@ 0x42
 800bcdc:	2100      	movs	r1, #0
 800bcde:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bce4:	2210      	movs	r2, #16
 800bce6:	431a      	orrs	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2240      	movs	r2, #64	@ 0x40
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e01c      	b.n	800bd32 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4a15      	ldr	r2, [pc, #84]	@ (800bd50 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800bcfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	2380      	movs	r3, #128	@ 0x80
 800bd06:	049c      	lsls	r4, r3, #18
 800bd08:	230a      	movs	r3, #10
 800bd0a:	18fb      	adds	r3, r7, r3
 800bd0c:	8819      	ldrh	r1, [r3, #0]
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	4b0e      	ldr	r3, [pc, #56]	@ (800bd4c <HAL_I2C_Master_Transmit_DMA+0x204>)
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	0023      	movs	r3, r4
 800bd16:	f001 fccd 	bl	800d6b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2240      	movs	r2, #64	@ 0x40
 800bd1e:	2100      	movs	r1, #0
 800bd20:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2101      	movs	r1, #1
 800bd26:	0018      	movs	r0, r3
 800bd28:	f001 fcfe 	bl	800d728 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	e000      	b.n	800bd32 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bd30:	2302      	movs	r3, #2
  }
}
 800bd32:	0018      	movs	r0, r3
 800bd34:	46bd      	mov	sp, r7
 800bd36:	b006      	add	sp, #24
 800bd38:	bdb0      	pop	{r4, r5, r7, pc}
 800bd3a:	46c0      	nop			@ (mov r8, r8)
 800bd3c:	ffff0000 	.word	0xffff0000
 800bd40:	0800c54d 	.word	0x0800c54d
 800bd44:	0800d505 	.word	0x0800d505
 800bd48:	0800d645 	.word	0x0800d645
 800bd4c:	80002000 	.word	0x80002000
 800bd50:	0800c0f9 	.word	0x0800c0f9

0800bd54 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800bd54:	b5b0      	push	{r4, r5, r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af02      	add	r7, sp, #8
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	0008      	movs	r0, r1
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	0019      	movs	r1, r3
 800bd62:	230a      	movs	r3, #10
 800bd64:	18fb      	adds	r3, r7, r3
 800bd66:	1c02      	adds	r2, r0, #0
 800bd68:	801a      	strh	r2, [r3, #0]
 800bd6a:	2308      	movs	r3, #8
 800bd6c:	18fb      	adds	r3, r7, r3
 800bd6e:	1c0a      	adds	r2, r1, #0
 800bd70:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2241      	movs	r2, #65	@ 0x41
 800bd76:	5c9b      	ldrb	r3, [r3, r2]
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b20      	cmp	r3, #32
 800bd7c:	d000      	beq.n	800bd80 <HAL_I2C_Master_Receive_DMA+0x2c>
 800bd7e:	e0dd      	b.n	800bf3c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	699a      	ldr	r2, [r3, #24]
 800bd86:	2380      	movs	r3, #128	@ 0x80
 800bd88:	021b      	lsls	r3, r3, #8
 800bd8a:	401a      	ands	r2, r3
 800bd8c:	2380      	movs	r3, #128	@ 0x80
 800bd8e:	021b      	lsls	r3, r3, #8
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d101      	bne.n	800bd98 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800bd94:	2302      	movs	r3, #2
 800bd96:	e0d2      	b.n	800bf3e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2240      	movs	r2, #64	@ 0x40
 800bd9c:	5c9b      	ldrb	r3, [r3, r2]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d101      	bne.n	800bda6 <HAL_I2C_Master_Receive_DMA+0x52>
 800bda2:	2302      	movs	r3, #2
 800bda4:	e0cb      	b.n	800bf3e <HAL_I2C_Master_Receive_DMA+0x1ea>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2240      	movs	r2, #64	@ 0x40
 800bdaa:	2101      	movs	r1, #1
 800bdac:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2241      	movs	r2, #65	@ 0x41
 800bdb2:	2122      	movs	r1, #34	@ 0x22
 800bdb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2242      	movs	r2, #66	@ 0x42
 800bdba:	2110      	movs	r1, #16
 800bdbc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2208      	movs	r2, #8
 800bdce:	18ba      	adds	r2, r7, r2
 800bdd0:	8812      	ldrh	r2, [r2, #0]
 800bdd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4a5c      	ldr	r2, [pc, #368]	@ (800bf48 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800bdd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	4a5b      	ldr	r2, [pc, #364]	@ (800bf4c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800bdde:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	2bff      	cmp	r3, #255	@ 0xff
 800bde8:	d906      	bls.n	800bdf8 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	22ff      	movs	r2, #255	@ 0xff
 800bdee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800bdf0:	2380      	movs	r3, #128	@ 0x80
 800bdf2:	045b      	lsls	r3, r3, #17
 800bdf4:	617b      	str	r3, [r7, #20]
 800bdf6:	e007      	b.n	800be08 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800be02:	2380      	movs	r3, #128	@ 0x80
 800be04:	049b      	lsls	r3, r3, #18
 800be06:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d100      	bne.n	800be12 <HAL_I2C_Master_Receive_DMA+0xbe>
 800be10:	e078      	b.n	800bf04 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d023      	beq.n	800be62 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be1e:	4a4c      	ldr	r2, [pc, #304]	@ (800bf50 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800be20:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be26:	4a4b      	ldr	r2, [pc, #300]	@ (800bf54 <HAL_I2C_Master_Receive_DMA+0x200>)
 800be28:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be2e:	2200      	movs	r2, #0
 800be30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be36:	2200      	movs	r2, #0
 800be38:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3324      	adds	r3, #36	@ 0x24
 800be44:	0019      	movs	r1, r3
 800be46:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800be4c:	2513      	movs	r5, #19
 800be4e:	197c      	adds	r4, r7, r5
 800be50:	f7fe ffa6 	bl	800ada0 <HAL_DMA_Start_IT>
 800be54:	0003      	movs	r3, r0
 800be56:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800be58:	197b      	adds	r3, r7, r5
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d13d      	bne.n	800bedc <HAL_I2C_Master_Receive_DMA+0x188>
 800be60:	e013      	b.n	800be8a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2241      	movs	r2, #65	@ 0x41
 800be66:	2120      	movs	r1, #32
 800be68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2242      	movs	r2, #66	@ 0x42
 800be6e:	2100      	movs	r1, #0
 800be70:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be76:	2280      	movs	r2, #128	@ 0x80
 800be78:	431a      	orrs	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2240      	movs	r2, #64	@ 0x40
 800be82:	2100      	movs	r1, #0
 800be84:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e059      	b.n	800bf3e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	697c      	ldr	r4, [r7, #20]
 800be92:	230a      	movs	r3, #10
 800be94:	18fb      	adds	r3, r7, r3
 800be96:	8819      	ldrh	r1, [r3, #0]
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	4b2f      	ldr	r3, [pc, #188]	@ (800bf58 <HAL_I2C_Master_Receive_DMA+0x204>)
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	0023      	movs	r3, r4
 800bea0:	f001 fc08 	bl	800d6b4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2240      	movs	r2, #64	@ 0x40
 800beba:	2100      	movs	r1, #0
 800bebc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2110      	movs	r1, #16
 800bec2:	0018      	movs	r0, r3
 800bec4:	f001 fc30 	bl	800d728 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2180      	movs	r1, #128	@ 0x80
 800bed4:	0209      	lsls	r1, r1, #8
 800bed6:	430a      	orrs	r2, r1
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	e02d      	b.n	800bf38 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2241      	movs	r2, #65	@ 0x41
 800bee0:	2120      	movs	r1, #32
 800bee2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2242      	movs	r2, #66	@ 0x42
 800bee8:	2100      	movs	r1, #0
 800beea:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bef0:	2210      	movs	r2, #16
 800bef2:	431a      	orrs	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2240      	movs	r2, #64	@ 0x40
 800befc:	2100      	movs	r1, #0
 800befe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e01c      	b.n	800bf3e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	4a15      	ldr	r2, [pc, #84]	@ (800bf5c <HAL_I2C_Master_Receive_DMA+0x208>)
 800bf08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	2380      	movs	r3, #128	@ 0x80
 800bf12:	049c      	lsls	r4, r3, #18
 800bf14:	230a      	movs	r3, #10
 800bf16:	18fb      	adds	r3, r7, r3
 800bf18:	8819      	ldrh	r1, [r3, #0]
 800bf1a:	68f8      	ldr	r0, [r7, #12]
 800bf1c:	4b0e      	ldr	r3, [pc, #56]	@ (800bf58 <HAL_I2C_Master_Receive_DMA+0x204>)
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	0023      	movs	r3, r4
 800bf22:	f001 fbc7 	bl	800d6b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2240      	movs	r2, #64	@ 0x40
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2101      	movs	r1, #1
 800bf32:	0018      	movs	r0, r3
 800bf34:	f001 fbf8 	bl	800d728 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e000      	b.n	800bf3e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bf3c:	2302      	movs	r3, #2
  }
}
 800bf3e:	0018      	movs	r0, r3
 800bf40:	46bd      	mov	sp, r7
 800bf42:	b006      	add	sp, #24
 800bf44:	bdb0      	pop	{r4, r5, r7, pc}
 800bf46:	46c0      	nop			@ (mov r8, r8)
 800bf48:	ffff0000 	.word	0xffff0000
 800bf4c:	0800c54d 	.word	0x0800c54d
 800bf50:	0800d5a5 	.word	0x0800d5a5
 800bf54:	0800d645 	.word	0x0800d645
 800bf58:	80002400 	.word	0x80002400
 800bf5c:	0800c0f9 	.word	0x0800c0f9

0800bf60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d005      	beq.n	800bf8c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	68f9      	ldr	r1, [r7, #12]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	4798      	blx	r3
  }
}
 800bf8c:	46c0      	nop			@ (mov r8, r8)
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	b004      	add	sp, #16
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bfac:	697a      	ldr	r2, [r7, #20]
 800bfae:	2380      	movs	r3, #128	@ 0x80
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	4013      	ands	r3, r2
 800bfb4:	d00e      	beq.n	800bfd4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	2280      	movs	r2, #128	@ 0x80
 800bfba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bfbc:	d00a      	beq.n	800bfd4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	431a      	orrs	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2280      	movs	r2, #128	@ 0x80
 800bfd0:	0052      	lsls	r2, r2, #1
 800bfd2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	2380      	movs	r3, #128	@ 0x80
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	4013      	ands	r3, r2
 800bfdc:	d00e      	beq.n	800bffc <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	2280      	movs	r2, #128	@ 0x80
 800bfe2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bfe4:	d00a      	beq.n	800bffc <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfea:	2208      	movs	r2, #8
 800bfec:	431a      	orrs	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2280      	movs	r2, #128	@ 0x80
 800bff8:	00d2      	lsls	r2, r2, #3
 800bffa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bffc:	697a      	ldr	r2, [r7, #20]
 800bffe:	2380      	movs	r3, #128	@ 0x80
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4013      	ands	r3, r2
 800c004:	d00e      	beq.n	800c024 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2280      	movs	r2, #128	@ 0x80
 800c00a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c00c:	d00a      	beq.n	800c024 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c012:	2202      	movs	r2, #2
 800c014:	431a      	orrs	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2280      	movs	r2, #128	@ 0x80
 800c020:	0092      	lsls	r2, r2, #2
 800c022:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c028:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	220b      	movs	r2, #11
 800c02e:	4013      	ands	r3, r2
 800c030:	d005      	beq.n	800c03e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	0011      	movs	r1, r2
 800c038:	0018      	movs	r0, r3
 800c03a:	f001 f915 	bl	800d268 <I2C_ITError>
  }
}
 800c03e:	46c0      	nop			@ (mov r8, r8)
 800c040:	46bd      	mov	sp, r7
 800c042:	b006      	add	sp, #24
 800c044:	bd80      	pop	{r7, pc}

0800c046 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b082      	sub	sp, #8
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c04e:	46c0      	nop			@ (mov r8, r8)
 800c050:	46bd      	mov	sp, r7
 800c052:	b002      	add	sp, #8
 800c054:	bd80      	pop	{r7, pc}

0800c056 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c05e:	46c0      	nop			@ (mov r8, r8)
 800c060:	46bd      	mov	sp, r7
 800c062:	b002      	add	sp, #8
 800c064:	bd80      	pop	{r7, pc}

0800c066 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c06e:	46c0      	nop			@ (mov r8, r8)
 800c070:	46bd      	mov	sp, r7
 800c072:	b002      	add	sp, #8
 800c074:	bd80      	pop	{r7, pc}

0800c076 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b082      	sub	sp, #8
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c07e:	46c0      	nop			@ (mov r8, r8)
 800c080:	46bd      	mov	sp, r7
 800c082:	b002      	add	sp, #8
 800c084:	bd80      	pop	{r7, pc}

0800c086 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	0008      	movs	r0, r1
 800c090:	0011      	movs	r1, r2
 800c092:	1cfb      	adds	r3, r7, #3
 800c094:	1c02      	adds	r2, r0, #0
 800c096:	701a      	strb	r2, [r3, #0]
 800c098:	003b      	movs	r3, r7
 800c09a:	1c0a      	adds	r2, r1, #0
 800c09c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c09e:	46c0      	nop			@ (mov r8, r8)
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	b002      	add	sp, #8
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c0ae:	46c0      	nop			@ (mov r8, r8)
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	b002      	add	sp, #8
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c0be:	46c0      	nop			@ (mov r8, r8)
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	b002      	add	sp, #8
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c0ce:	46c0      	nop			@ (mov r8, r8)
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	b002      	add	sp, #8
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b082      	sub	sp, #8
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c0de:	46c0      	nop			@ (mov r8, r8)
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	b002      	add	sp, #8
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b082      	sub	sp, #8
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c0ee:	46c0      	nop			@ (mov r8, r8)
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	b002      	add	sp, #8
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c0f8:	b590      	push	{r4, r7, lr}
 800c0fa:	b089      	sub	sp, #36	@ 0x24
 800c0fc:	af02      	add	r7, sp, #8
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2240      	movs	r2, #64	@ 0x40
 800c10c:	5c9b      	ldrb	r3, [r3, r2]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d101      	bne.n	800c116 <I2C_Master_ISR_IT+0x1e>
 800c112:	2302      	movs	r3, #2
 800c114:	e113      	b.n	800c33e <I2C_Master_ISR_IT+0x246>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2240      	movs	r2, #64	@ 0x40
 800c11a:	2101      	movs	r1, #1
 800c11c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	2210      	movs	r2, #16
 800c122:	4013      	ands	r3, r2
 800c124:	d012      	beq.n	800c14c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2210      	movs	r2, #16
 800c12a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c12c:	d00e      	beq.n	800c14c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2210      	movs	r2, #16
 800c134:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c13a:	2204      	movs	r2, #4
 800c13c:	431a      	orrs	r2, r3
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	0018      	movs	r0, r3
 800c146:	f001 f9ba 	bl	800d4be <I2C_Flush_TXDR>
 800c14a:	e0e5      	b.n	800c318 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	2204      	movs	r2, #4
 800c150:	4013      	ands	r3, r2
 800c152:	d021      	beq.n	800c198 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2204      	movs	r2, #4
 800c158:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c15a:	d01d      	beq.n	800c198 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	2204      	movs	r2, #4
 800c160:	4393      	bics	r3, r2
 800c162:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c16e:	b2d2      	uxtb	r2, r2
 800c170:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c176:	1c5a      	adds	r2, r3, #1
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c180:	3b01      	subs	r3, #1
 800c182:	b29a      	uxth	r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	3b01      	subs	r3, #1
 800c190:	b29a      	uxth	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c196:	e0bf      	b.n	800c318 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	2202      	movs	r2, #2
 800c19c:	4013      	ands	r3, r2
 800c19e:	d01c      	beq.n	800c1da <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c1a6:	d018      	beq.n	800c1da <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ac:	781a      	ldrb	r2, [r3, #0]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1b8:	1c5a      	adds	r2, r3, #1
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c1d8:	e09e      	b.n	800c318 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2280      	movs	r2, #128	@ 0x80
 800c1de:	4013      	ands	r3, r2
 800c1e0:	d100      	bne.n	800c1e4 <I2C_Master_ISR_IT+0xec>
 800c1e2:	e069      	b.n	800c2b8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2240      	movs	r2, #64	@ 0x40
 800c1e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c1ea:	d065      	beq.n	800c2b8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d04a      	beq.n	800c28c <I2C_Master_ISR_IT+0x194>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d146      	bne.n	800c28c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	b29a      	uxth	r2, r3
 800c206:	2112      	movs	r1, #18
 800c208:	187b      	adds	r3, r7, r1
 800c20a:	0592      	lsls	r2, r2, #22
 800c20c:	0d92      	lsrs	r2, r2, #22
 800c20e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c214:	b29b      	uxth	r3, r3
 800c216:	2bff      	cmp	r3, #255	@ 0xff
 800c218:	d910      	bls.n	800c23c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	22ff      	movs	r2, #255	@ 0xff
 800c21e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c224:	b2da      	uxtb	r2, r3
 800c226:	2380      	movs	r3, #128	@ 0x80
 800c228:	045c      	lsls	r4, r3, #17
 800c22a:	187b      	adds	r3, r7, r1
 800c22c:	8819      	ldrh	r1, [r3, #0]
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	2300      	movs	r3, #0
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	0023      	movs	r3, r4
 800c236:	f001 fa3d 	bl	800d6b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c23a:	e03c      	b.n	800c2b6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c240:	b29a      	uxth	r2, r3
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c24a:	4a3f      	ldr	r2, [pc, #252]	@ (800c348 <I2C_Master_ISR_IT+0x250>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d00e      	beq.n	800c26e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c254:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c25a:	2312      	movs	r3, #18
 800c25c:	18fb      	adds	r3, r7, r3
 800c25e:	8819      	ldrh	r1, [r3, #0]
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	2300      	movs	r3, #0
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	0023      	movs	r3, r4
 800c268:	f001 fa24 	bl	800d6b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c26c:	e023      	b.n	800c2b6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c272:	b2da      	uxtb	r2, r3
 800c274:	2380      	movs	r3, #128	@ 0x80
 800c276:	049c      	lsls	r4, r3, #18
 800c278:	2312      	movs	r3, #18
 800c27a:	18fb      	adds	r3, r7, r3
 800c27c:	8819      	ldrh	r1, [r3, #0]
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	2300      	movs	r3, #0
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	0023      	movs	r3, r4
 800c286:	f001 fa15 	bl	800d6b4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c28a:	e014      	b.n	800c2b6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	685a      	ldr	r2, [r3, #4]
 800c292:	2380      	movs	r3, #128	@ 0x80
 800c294:	049b      	lsls	r3, r3, #18
 800c296:	401a      	ands	r2, r3
 800c298:	2380      	movs	r3, #128	@ 0x80
 800c29a:	049b      	lsls	r3, r3, #18
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d004      	beq.n	800c2aa <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	0018      	movs	r0, r3
 800c2a4:	f000 fcf4 	bl	800cc90 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2a8:	e036      	b.n	800c318 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2140      	movs	r1, #64	@ 0x40
 800c2ae:	0018      	movs	r0, r3
 800c2b0:	f000 ffda 	bl	800d268 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2b4:	e030      	b.n	800c318 <I2C_Master_ISR_IT+0x220>
 800c2b6:	e02f      	b.n	800c318 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	2240      	movs	r2, #64	@ 0x40
 800c2bc:	4013      	ands	r3, r2
 800c2be:	d02b      	beq.n	800c318 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2240      	movs	r2, #64	@ 0x40
 800c2c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c2c6:	d027      	beq.n	800c318 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d11d      	bne.n	800c30e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	2380      	movs	r3, #128	@ 0x80
 800c2da:	049b      	lsls	r3, r3, #18
 800c2dc:	401a      	ands	r2, r3
 800c2de:	2380      	movs	r3, #128	@ 0x80
 800c2e0:	049b      	lsls	r3, r3, #18
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d018      	beq.n	800c318 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ea:	4a17      	ldr	r2, [pc, #92]	@ (800c348 <I2C_Master_ISR_IT+0x250>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d109      	bne.n	800c304 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	685a      	ldr	r2, [r3, #4]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2180      	movs	r1, #128	@ 0x80
 800c2fc:	01c9      	lsls	r1, r1, #7
 800c2fe:	430a      	orrs	r2, r1
 800c300:	605a      	str	r2, [r3, #4]
 800c302:	e009      	b.n	800c318 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	0018      	movs	r0, r3
 800c308:	f000 fcc2 	bl	800cc90 <I2C_ITMasterSeqCplt>
 800c30c:	e004      	b.n	800c318 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2140      	movs	r1, #64	@ 0x40
 800c312:	0018      	movs	r0, r3
 800c314:	f000 ffa8 	bl	800d268 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	2220      	movs	r2, #32
 800c31c:	4013      	ands	r3, r2
 800c31e:	d009      	beq.n	800c334 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2220      	movs	r2, #32
 800c324:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c326:	d005      	beq.n	800c334 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	0011      	movs	r1, r2
 800c32e:	0018      	movs	r0, r3
 800c330:	f000 fd54 	bl	800cddc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2240      	movs	r2, #64	@ 0x40
 800c338:	2100      	movs	r1, #0
 800c33a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	0018      	movs	r0, r3
 800c340:	46bd      	mov	sp, r7
 800c342:	b007      	add	sp, #28
 800c344:	bd90      	pop	{r4, r7, pc}
 800c346:	46c0      	nop			@ (mov r8, r8)
 800c348:	ffff0000 	.word	0xffff0000

0800c34c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2240      	movs	r2, #64	@ 0x40
 800c366:	5c9b      	ldrb	r3, [r3, r2]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d101      	bne.n	800c370 <I2C_Slave_ISR_IT+0x24>
 800c36c:	2302      	movs	r3, #2
 800c36e:	e0e6      	b.n	800c53e <I2C_Slave_ISR_IT+0x1f2>
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2240      	movs	r2, #64	@ 0x40
 800c374:	2101      	movs	r1, #1
 800c376:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	2220      	movs	r2, #32
 800c37c:	4013      	ands	r3, r2
 800c37e:	d009      	beq.n	800c394 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2220      	movs	r2, #32
 800c384:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c386:	d005      	beq.n	800c394 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	0011      	movs	r1, r2
 800c38e:	0018      	movs	r0, r3
 800c390:	f000 fdf2 	bl	800cf78 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	2210      	movs	r2, #16
 800c398:	4013      	ands	r3, r2
 800c39a:	d052      	beq.n	800c442 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2210      	movs	r2, #16
 800c3a0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c3a2:	d04e      	beq.n	800c442 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d12d      	bne.n	800c40a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2241      	movs	r2, #65	@ 0x41
 800c3b2:	5c9b      	ldrb	r3, [r3, r2]
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b28      	cmp	r3, #40	@ 0x28
 800c3b8:	d10b      	bne.n	800c3d2 <I2C_Slave_ISR_IT+0x86>
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	2380      	movs	r3, #128	@ 0x80
 800c3be:	049b      	lsls	r3, r3, #18
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d106      	bne.n	800c3d2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	0011      	movs	r1, r2
 800c3ca:	0018      	movs	r0, r3
 800c3cc:	f000 fef4 	bl	800d1b8 <I2C_ITListenCplt>
 800c3d0:	e036      	b.n	800c440 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2241      	movs	r2, #65	@ 0x41
 800c3d6:	5c9b      	ldrb	r3, [r3, r2]
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b29      	cmp	r3, #41	@ 0x29
 800c3dc:	d110      	bne.n	800c400 <I2C_Slave_ISR_IT+0xb4>
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	4a59      	ldr	r2, [pc, #356]	@ (800c548 <I2C_Slave_ISR_IT+0x1fc>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d00c      	beq.n	800c400 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2210      	movs	r2, #16
 800c3ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	0018      	movs	r0, r3
 800c3f2:	f001 f864 	bl	800d4be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	f000 fc8b 	bl	800cd14 <I2C_ITSlaveSeqCplt>
 800c3fe:	e01f      	b.n	800c440 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2210      	movs	r2, #16
 800c406:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c408:	e091      	b.n	800c52e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2210      	movs	r2, #16
 800c410:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c416:	2204      	movs	r2, #4
 800c418:	431a      	orrs	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d005      	beq.n	800c430 <I2C_Slave_ISR_IT+0xe4>
 800c424:	697a      	ldr	r2, [r7, #20]
 800c426:	2380      	movs	r3, #128	@ 0x80
 800c428:	045b      	lsls	r3, r3, #17
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d000      	beq.n	800c430 <I2C_Slave_ISR_IT+0xe4>
 800c42e:	e07e      	b.n	800c52e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	0011      	movs	r1, r2
 800c438:	0018      	movs	r0, r3
 800c43a:	f000 ff15 	bl	800d268 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c43e:	e076      	b.n	800c52e <I2C_Slave_ISR_IT+0x1e2>
 800c440:	e075      	b.n	800c52e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	2204      	movs	r2, #4
 800c446:	4013      	ands	r3, r2
 800c448:	d02f      	beq.n	800c4aa <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2204      	movs	r2, #4
 800c44e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c450:	d02b      	beq.n	800c4aa <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c456:	b29b      	uxth	r3, r3
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d018      	beq.n	800c48e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c466:	b2d2      	uxtb	r2, r2
 800c468:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c46e:	1c5a      	adds	r2, r3, #1
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c478:	3b01      	subs	r3, #1
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c484:	b29b      	uxth	r3, r3
 800c486:	3b01      	subs	r3, #1
 800c488:	b29a      	uxth	r2, r3
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c492:	b29b      	uxth	r3, r3
 800c494:	2b00      	cmp	r3, #0
 800c496:	d14c      	bne.n	800c532 <I2C_Slave_ISR_IT+0x1e6>
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	4a2b      	ldr	r2, [pc, #172]	@ (800c548 <I2C_Slave_ISR_IT+0x1fc>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d048      	beq.n	800c532 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	0018      	movs	r0, r3
 800c4a4:	f000 fc36 	bl	800cd14 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c4a8:	e043      	b.n	800c532 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2208      	movs	r2, #8
 800c4ae:	4013      	ands	r3, r2
 800c4b0:	d00a      	beq.n	800c4c8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2208      	movs	r2, #8
 800c4b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c4b8:	d006      	beq.n	800c4c8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	0011      	movs	r1, r2
 800c4c0:	0018      	movs	r0, r3
 800c4c2:	f000 fb41 	bl	800cb48 <I2C_ITAddrCplt>
 800c4c6:	e035      	b.n	800c534 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	d031      	beq.n	800c534 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c4d6:	d02d      	beq.n	800c534 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d018      	beq.n	800c514 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4e6:	781a      	ldrb	r2, [r3, #0]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4f2:	1c5a      	adds	r2, r3, #1
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	3b01      	subs	r3, #1
 800c500:	b29a      	uxth	r2, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c50a:	3b01      	subs	r3, #1
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c512:	e00f      	b.n	800c534 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c514:	697a      	ldr	r2, [r7, #20]
 800c516:	2380      	movs	r3, #128	@ 0x80
 800c518:	045b      	lsls	r3, r3, #17
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d002      	beq.n	800c524 <I2C_Slave_ISR_IT+0x1d8>
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d107      	bne.n	800c534 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	0018      	movs	r0, r3
 800c528:	f000 fbf4 	bl	800cd14 <I2C_ITSlaveSeqCplt>
 800c52c:	e002      	b.n	800c534 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800c52e:	46c0      	nop			@ (mov r8, r8)
 800c530:	e000      	b.n	800c534 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800c532:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2240      	movs	r2, #64	@ 0x40
 800c538:	2100      	movs	r1, #0
 800c53a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	0018      	movs	r0, r3
 800c540:	46bd      	mov	sp, r7
 800c542:	b006      	add	sp, #24
 800c544:	bd80      	pop	{r7, pc}
 800c546:	46c0      	nop			@ (mov r8, r8)
 800c548:	ffff0000 	.word	0xffff0000

0800c54c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c54c:	b590      	push	{r4, r7, lr}
 800c54e:	b089      	sub	sp, #36	@ 0x24
 800c550:	af02      	add	r7, sp, #8
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2240      	movs	r2, #64	@ 0x40
 800c55c:	5c9b      	ldrb	r3, [r3, r2]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d101      	bne.n	800c566 <I2C_Master_ISR_DMA+0x1a>
 800c562:	2302      	movs	r3, #2
 800c564:	e0e7      	b.n	800c736 <I2C_Master_ISR_DMA+0x1ea>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2240      	movs	r2, #64	@ 0x40
 800c56a:	2101      	movs	r1, #1
 800c56c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2210      	movs	r2, #16
 800c572:	4013      	ands	r3, r2
 800c574:	d017      	beq.n	800c5a6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2210      	movs	r2, #16
 800c57a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c57c:	d013      	beq.n	800c5a6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2210      	movs	r2, #16
 800c584:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c58a:	2204      	movs	r2, #4
 800c58c:	431a      	orrs	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2120      	movs	r1, #32
 800c596:	0018      	movs	r0, r3
 800c598:	f001 f8c6 	bl	800d728 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	0018      	movs	r0, r3
 800c5a0:	f000 ff8d 	bl	800d4be <I2C_Flush_TXDR>
 800c5a4:	e0c2      	b.n	800c72c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2280      	movs	r2, #128	@ 0x80
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	d100      	bne.n	800c5b0 <I2C_Master_ISR_DMA+0x64>
 800c5ae:	e07c      	b.n	800c6aa <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2240      	movs	r2, #64	@ 0x40
 800c5b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c5b6:	d100      	bne.n	800c5ba <I2C_Master_ISR_DMA+0x6e>
 800c5b8:	e077      	b.n	800c6aa <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2140      	movs	r1, #64	@ 0x40
 800c5c6:	438a      	bics	r2, r1
 800c5c8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d055      	beq.n	800c680 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	2312      	movs	r3, #18
 800c5de:	18fb      	adds	r3, r7, r3
 800c5e0:	0592      	lsls	r2, r2, #22
 800c5e2:	0d92      	lsrs	r2, r2, #22
 800c5e4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	2bff      	cmp	r3, #255	@ 0xff
 800c5ee:	d906      	bls.n	800c5fe <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	22ff      	movs	r2, #255	@ 0xff
 800c5f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800c5f6:	2380      	movs	r3, #128	@ 0x80
 800c5f8:	045b      	lsls	r3, r3, #17
 800c5fa:	617b      	str	r3, [r7, #20]
 800c5fc:	e010      	b.n	800c620 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c602:	b29a      	uxth	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c60c:	4a4c      	ldr	r2, [pc, #304]	@ (800c740 <I2C_Master_ISR_DMA+0x1f4>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d003      	beq.n	800c61a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c616:	617b      	str	r3, [r7, #20]
 800c618:	e002      	b.n	800c620 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c61a:	2380      	movs	r3, #128	@ 0x80
 800c61c:	049b      	lsls	r3, r3, #18
 800c61e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c624:	b2da      	uxtb	r2, r3
 800c626:	697c      	ldr	r4, [r7, #20]
 800c628:	2312      	movs	r3, #18
 800c62a:	18fb      	adds	r3, r7, r3
 800c62c:	8819      	ldrh	r1, [r3, #0]
 800c62e:	68f8      	ldr	r0, [r7, #12]
 800c630:	2300      	movs	r3, #0
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	0023      	movs	r3, r4
 800c636:	f001 f83d 	bl	800d6b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c63e:	b29a      	uxth	r2, r3
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	b29a      	uxth	r2, r3
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2241      	movs	r2, #65	@ 0x41
 800c650:	5c9b      	ldrb	r3, [r3, r2]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b22      	cmp	r3, #34	@ 0x22
 800c656:	d109      	bne.n	800c66c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2180      	movs	r1, #128	@ 0x80
 800c664:	0209      	lsls	r1, r1, #8
 800c666:	430a      	orrs	r2, r1
 800c668:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c66a:	e05f      	b.n	800c72c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2180      	movs	r1, #128	@ 0x80
 800c678:	01c9      	lsls	r1, r1, #7
 800c67a:	430a      	orrs	r2, r1
 800c67c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c67e:	e055      	b.n	800c72c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	2380      	movs	r3, #128	@ 0x80
 800c688:	049b      	lsls	r3, r3, #18
 800c68a:	401a      	ands	r2, r3
 800c68c:	2380      	movs	r3, #128	@ 0x80
 800c68e:	049b      	lsls	r3, r3, #18
 800c690:	429a      	cmp	r2, r3
 800c692:	d004      	beq.n	800c69e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	0018      	movs	r0, r3
 800c698:	f000 fafa 	bl	800cc90 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c69c:	e046      	b.n	800c72c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2140      	movs	r1, #64	@ 0x40
 800c6a2:	0018      	movs	r0, r3
 800c6a4:	f000 fde0 	bl	800d268 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c6a8:	e040      	b.n	800c72c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	2240      	movs	r2, #64	@ 0x40
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	d02c      	beq.n	800c70c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2240      	movs	r2, #64	@ 0x40
 800c6b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c6b8:	d028      	beq.n	800c70c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d11d      	bne.n	800c700 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	2380      	movs	r3, #128	@ 0x80
 800c6cc:	049b      	lsls	r3, r3, #18
 800c6ce:	401a      	ands	r2, r3
 800c6d0:	2380      	movs	r3, #128	@ 0x80
 800c6d2:	049b      	lsls	r3, r3, #18
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d028      	beq.n	800c72a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6dc:	4a18      	ldr	r2, [pc, #96]	@ (800c740 <I2C_Master_ISR_DMA+0x1f4>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d109      	bne.n	800c6f6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2180      	movs	r1, #128	@ 0x80
 800c6ee:	01c9      	lsls	r1, r1, #7
 800c6f0:	430a      	orrs	r2, r1
 800c6f2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c6f4:	e019      	b.n	800c72a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	0018      	movs	r0, r3
 800c6fa:	f000 fac9 	bl	800cc90 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c6fe:	e014      	b.n	800c72a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2140      	movs	r1, #64	@ 0x40
 800c704:	0018      	movs	r0, r3
 800c706:	f000 fdaf 	bl	800d268 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c70a:	e00e      	b.n	800c72a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2220      	movs	r2, #32
 800c710:	4013      	ands	r3, r2
 800c712:	d00b      	beq.n	800c72c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c71a:	d007      	beq.n	800c72c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	0011      	movs	r1, r2
 800c722:	0018      	movs	r0, r3
 800c724:	f000 fb5a 	bl	800cddc <I2C_ITMasterCplt>
 800c728:	e000      	b.n	800c72c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800c72a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2240      	movs	r2, #64	@ 0x40
 800c730:	2100      	movs	r1, #0
 800c732:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	0018      	movs	r0, r3
 800c738:	46bd      	mov	sp, r7
 800c73a:	b007      	add	sp, #28
 800c73c:	bd90      	pop	{r4, r7, pc}
 800c73e:	46c0      	nop			@ (mov r8, r8)
 800c740:	ffff0000 	.word	0xffff0000

0800c744 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c744:	b590      	push	{r4, r7, lr}
 800c746:	b089      	sub	sp, #36	@ 0x24
 800c748:	af02      	add	r7, sp, #8
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c750:	4b88      	ldr	r3, [pc, #544]	@ (800c974 <I2C_Mem_ISR_DMA+0x230>)
 800c752:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2240      	movs	r2, #64	@ 0x40
 800c758:	5c9b      	ldrb	r3, [r3, r2]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d101      	bne.n	800c762 <I2C_Mem_ISR_DMA+0x1e>
 800c75e:	2302      	movs	r3, #2
 800c760:	e104      	b.n	800c96c <I2C_Mem_ISR_DMA+0x228>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2240      	movs	r2, #64	@ 0x40
 800c766:	2101      	movs	r1, #1
 800c768:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	2210      	movs	r2, #16
 800c76e:	4013      	ands	r3, r2
 800c770:	d017      	beq.n	800c7a2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2210      	movs	r2, #16
 800c776:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c778:	d013      	beq.n	800c7a2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2210      	movs	r2, #16
 800c780:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c786:	2204      	movs	r2, #4
 800c788:	431a      	orrs	r2, r3
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2120      	movs	r1, #32
 800c792:	0018      	movs	r0, r3
 800c794:	f000 ffc8 	bl	800d728 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	0018      	movs	r0, r3
 800c79c:	f000 fe8f 	bl	800d4be <I2C_Flush_TXDR>
 800c7a0:	e0df      	b.n	800c962 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2202      	movs	r2, #2
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	d00d      	beq.n	800c7c6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2202      	movs	r2, #2
 800c7ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c7b0:	d009      	beq.n	800c7c6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c7ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	4252      	negs	r2, r2
 800c7c2:	651a      	str	r2, [r3, #80]	@ 0x50
 800c7c4:	e0cd      	b.n	800c962 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	2280      	movs	r2, #128	@ 0x80
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	d05e      	beq.n	800c88c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2240      	movs	r2, #64	@ 0x40
 800c7d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c7d4:	d05a      	beq.n	800c88c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2110      	movs	r1, #16
 800c7da:	0018      	movs	r0, r3
 800c7dc:	f000 ffa4 	bl	800d728 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d04a      	beq.n	800c880 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	2bff      	cmp	r3, #255	@ 0xff
 800c7f2:	d910      	bls.n	800c816 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	22ff      	movs	r2, #255	@ 0xff
 800c7f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7fe:	b299      	uxth	r1, r3
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c804:	b2da      	uxtb	r2, r3
 800c806:	2380      	movs	r3, #128	@ 0x80
 800c808:	045b      	lsls	r3, r3, #17
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	2400      	movs	r4, #0
 800c80e:	9400      	str	r4, [sp, #0]
 800c810:	f000 ff50 	bl	800d6b4 <I2C_TransferConfig>
 800c814:	e011      	b.n	800c83a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c824:	b299      	uxth	r1, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	2380      	movs	r3, #128	@ 0x80
 800c82e:	049b      	lsls	r3, r3, #18
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	2400      	movs	r4, #0
 800c834:	9400      	str	r4, [sp, #0]
 800c836:	f000 ff3d 	bl	800d6b4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c83e:	b29a      	uxth	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	b29a      	uxth	r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2241      	movs	r2, #65	@ 0x41
 800c850:	5c9b      	ldrb	r3, [r3, r2]
 800c852:	b2db      	uxtb	r3, r3
 800c854:	2b22      	cmp	r3, #34	@ 0x22
 800c856:	d109      	bne.n	800c86c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2180      	movs	r1, #128	@ 0x80
 800c864:	0209      	lsls	r1, r1, #8
 800c866:	430a      	orrs	r2, r1
 800c868:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c86a:	e07a      	b.n	800c962 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2180      	movs	r1, #128	@ 0x80
 800c878:	01c9      	lsls	r1, r1, #7
 800c87a:	430a      	orrs	r2, r1
 800c87c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c87e:	e070      	b.n	800c962 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2140      	movs	r1, #64	@ 0x40
 800c884:	0018      	movs	r0, r3
 800c886:	f000 fcef 	bl	800d268 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c88a:	e06a      	b.n	800c962 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	2240      	movs	r2, #64	@ 0x40
 800c890:	4013      	ands	r3, r2
 800c892:	d058      	beq.n	800c946 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2240      	movs	r2, #64	@ 0x40
 800c898:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c89a:	d054      	beq.n	800c946 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2241      	movs	r2, #65	@ 0x41
 800c8a0:	5c9b      	ldrb	r3, [r3, r2]
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b22      	cmp	r3, #34	@ 0x22
 800c8a6:	d101      	bne.n	800c8ac <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800c8a8:	4b33      	ldr	r3, [pc, #204]	@ (800c978 <I2C_Mem_ISR_DMA+0x234>)
 800c8aa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	2bff      	cmp	r3, #255	@ 0xff
 800c8b4:	d911      	bls.n	800c8da <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	22ff      	movs	r2, #255	@ 0xff
 800c8ba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8c0:	b299      	uxth	r1, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	2380      	movs	r3, #128	@ 0x80
 800c8ca:	045c      	lsls	r4, r3, #17
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	0023      	movs	r3, r4
 800c8d4:	f000 feee 	bl	800d6b4 <I2C_TransferConfig>
 800c8d8:	e012      	b.n	800c900 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8e8:	b299      	uxth	r1, r3
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	2380      	movs	r3, #128	@ 0x80
 800c8f2:	049c      	lsls	r4, r3, #18
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	0023      	movs	r3, r4
 800c8fc:	f000 feda 	bl	800d6b4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c904:	b29a      	uxth	r2, r3
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2241      	movs	r2, #65	@ 0x41
 800c916:	5c9b      	ldrb	r3, [r3, r2]
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b22      	cmp	r3, #34	@ 0x22
 800c91c:	d109      	bne.n	800c932 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2180      	movs	r1, #128	@ 0x80
 800c92a:	0209      	lsls	r1, r1, #8
 800c92c:	430a      	orrs	r2, r1
 800c92e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c930:	e017      	b.n	800c962 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2180      	movs	r1, #128	@ 0x80
 800c93e:	01c9      	lsls	r1, r1, #7
 800c940:	430a      	orrs	r2, r1
 800c942:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c944:	e00d      	b.n	800c962 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	2220      	movs	r2, #32
 800c94a:	4013      	ands	r3, r2
 800c94c:	d009      	beq.n	800c962 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2220      	movs	r2, #32
 800c952:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c954:	d005      	beq.n	800c962 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	0011      	movs	r1, r2
 800c95c:	0018      	movs	r0, r3
 800c95e:	f000 fa3d 	bl	800cddc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2240      	movs	r2, #64	@ 0x40
 800c966:	2100      	movs	r1, #0
 800c968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	0018      	movs	r0, r3
 800c96e:	46bd      	mov	sp, r7
 800c970:	b007      	add	sp, #28
 800c972:	bd90      	pop	{r4, r7, pc}
 800c974:	80002000 	.word	0x80002000
 800c978:	80002400 	.word	0x80002400

0800c97c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c98c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c98e:	2300      	movs	r3, #0
 800c990:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2240      	movs	r2, #64	@ 0x40
 800c996:	5c9b      	ldrb	r3, [r3, r2]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d101      	bne.n	800c9a0 <I2C_Slave_ISR_DMA+0x24>
 800c99c:	2302      	movs	r3, #2
 800c99e:	e0cd      	b.n	800cb3c <I2C_Slave_ISR_DMA+0x1c0>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2240      	movs	r2, #64	@ 0x40
 800c9a4:	2101      	movs	r1, #1
 800c9a6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	2220      	movs	r2, #32
 800c9ac:	4013      	ands	r3, r2
 800c9ae:	d009      	beq.n	800c9c4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2220      	movs	r2, #32
 800c9b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c9b6:	d005      	beq.n	800c9c4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	0011      	movs	r1, r2
 800c9be:	0018      	movs	r0, r3
 800c9c0:	f000 fada 	bl	800cf78 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2210      	movs	r2, #16
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	d100      	bne.n	800c9ce <I2C_Slave_ISR_DMA+0x52>
 800c9cc:	e0a3      	b.n	800cb16 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2210      	movs	r2, #16
 800c9d2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c9d4:	d100      	bne.n	800c9d8 <I2C_Slave_ISR_DMA+0x5c>
 800c9d6:	e09e      	b.n	800cb16 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	2380      	movs	r3, #128	@ 0x80
 800c9dc:	01db      	lsls	r3, r3, #7
 800c9de:	4013      	ands	r3, r2
 800c9e0:	d105      	bne.n	800c9ee <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	2380      	movs	r3, #128	@ 0x80
 800c9e6:	021b      	lsls	r3, r3, #8
 800c9e8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c9ea:	d100      	bne.n	800c9ee <I2C_Slave_ISR_DMA+0x72>
 800c9ec:	e08c      	b.n	800cb08 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00c      	beq.n	800ca10 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	2380      	movs	r3, #128	@ 0x80
 800c9fa:	021b      	lsls	r3, r3, #8
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	d007      	beq.n	800ca10 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d101      	bne.n	800ca10 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00c      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	2380      	movs	r3, #128	@ 0x80
 800ca1c:	01db      	lsls	r3, r3, #7
 800ca1e:	4013      	ands	r3, r2
 800ca20:	d007      	beq.n	800ca32 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d12d      	bne.n	800ca94 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2241      	movs	r2, #65	@ 0x41
 800ca3c:	5c9b      	ldrb	r3, [r3, r2]
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b28      	cmp	r3, #40	@ 0x28
 800ca42:	d10b      	bne.n	800ca5c <I2C_Slave_ISR_DMA+0xe0>
 800ca44:	69ba      	ldr	r2, [r7, #24]
 800ca46:	2380      	movs	r3, #128	@ 0x80
 800ca48:	049b      	lsls	r3, r3, #18
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d106      	bne.n	800ca5c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	0011      	movs	r1, r2
 800ca54:	0018      	movs	r0, r3
 800ca56:	f000 fbaf 	bl	800d1b8 <I2C_ITListenCplt>
 800ca5a:	e054      	b.n	800cb06 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2241      	movs	r2, #65	@ 0x41
 800ca60:	5c9b      	ldrb	r3, [r3, r2]
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	2b29      	cmp	r3, #41	@ 0x29
 800ca66:	d110      	bne.n	800ca8a <I2C_Slave_ISR_DMA+0x10e>
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	4a36      	ldr	r2, [pc, #216]	@ (800cb44 <I2C_Slave_ISR_DMA+0x1c8>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d00c      	beq.n	800ca8a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2210      	movs	r2, #16
 800ca76:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	0018      	movs	r0, r3
 800ca7c:	f000 fd1f 	bl	800d4be <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	0018      	movs	r0, r3
 800ca84:	f000 f946 	bl	800cd14 <I2C_ITSlaveSeqCplt>
 800ca88:	e03d      	b.n	800cb06 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2210      	movs	r2, #16
 800ca90:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ca92:	e03e      	b.n	800cb12 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2210      	movs	r2, #16
 800ca9a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caa0:	2204      	movs	r2, #4
 800caa2:	431a      	orrs	r2, r3
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800caa8:	2317      	movs	r3, #23
 800caaa:	18fb      	adds	r3, r7, r3
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	2141      	movs	r1, #65	@ 0x41
 800cab0:	5c52      	ldrb	r2, [r2, r1]
 800cab2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d004      	beq.n	800cac4 <I2C_Slave_ISR_DMA+0x148>
 800caba:	69ba      	ldr	r2, [r7, #24]
 800cabc:	2380      	movs	r3, #128	@ 0x80
 800cabe:	045b      	lsls	r3, r3, #17
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d126      	bne.n	800cb12 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cac4:	2217      	movs	r2, #23
 800cac6:	18bb      	adds	r3, r7, r2
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b21      	cmp	r3, #33	@ 0x21
 800cacc:	d003      	beq.n	800cad6 <I2C_Slave_ISR_DMA+0x15a>
 800cace:	18bb      	adds	r3, r7, r2
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	2b29      	cmp	r3, #41	@ 0x29
 800cad4:	d103      	bne.n	800cade <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2221      	movs	r2, #33	@ 0x21
 800cada:	631a      	str	r2, [r3, #48]	@ 0x30
 800cadc:	e00b      	b.n	800caf6 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cade:	2217      	movs	r2, #23
 800cae0:	18bb      	adds	r3, r7, r2
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b22      	cmp	r3, #34	@ 0x22
 800cae6:	d003      	beq.n	800caf0 <I2C_Slave_ISR_DMA+0x174>
 800cae8:	18bb      	adds	r3, r7, r2
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b2a      	cmp	r3, #42	@ 0x2a
 800caee:	d102      	bne.n	800caf6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2222      	movs	r2, #34	@ 0x22
 800caf4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	0011      	movs	r1, r2
 800cafe:	0018      	movs	r0, r3
 800cb00:	f000 fbb2 	bl	800d268 <I2C_ITError>
      if (treatdmanack == 1U)
 800cb04:	e005      	b.n	800cb12 <I2C_Slave_ISR_DMA+0x196>
 800cb06:	e004      	b.n	800cb12 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2210      	movs	r2, #16
 800cb0e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb10:	e00f      	b.n	800cb32 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800cb12:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cb14:	e00d      	b.n	800cb32 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	2208      	movs	r2, #8
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	d009      	beq.n	800cb32 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2208      	movs	r2, #8
 800cb22:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cb24:	d005      	beq.n	800cb32 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800cb26:	68ba      	ldr	r2, [r7, #8]
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	0011      	movs	r1, r2
 800cb2c:	0018      	movs	r0, r3
 800cb2e:	f000 f80b 	bl	800cb48 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2240      	movs	r2, #64	@ 0x40
 800cb36:	2100      	movs	r1, #0
 800cb38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	b008      	add	sp, #32
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	ffff0000 	.word	0xffff0000

0800cb48 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cb48:	b5b0      	push	{r4, r5, r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2241      	movs	r2, #65	@ 0x41
 800cb56:	5c9b      	ldrb	r3, [r3, r2]
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	001a      	movs	r2, r3
 800cb5c:	2328      	movs	r3, #40	@ 0x28
 800cb5e:	4013      	ands	r3, r2
 800cb60:	2b28      	cmp	r3, #40	@ 0x28
 800cb62:	d000      	beq.n	800cb66 <I2C_ITAddrCplt+0x1e>
 800cb64:	e088      	b.n	800cc78 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	0c1b      	lsrs	r3, r3, #16
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	250f      	movs	r5, #15
 800cb72:	197b      	adds	r3, r7, r5
 800cb74:	2101      	movs	r1, #1
 800cb76:	400a      	ands	r2, r1
 800cb78:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	0c1b      	lsrs	r3, r3, #16
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	200c      	movs	r0, #12
 800cb86:	183b      	adds	r3, r7, r0
 800cb88:	21fe      	movs	r1, #254	@ 0xfe
 800cb8a:	400a      	ands	r2, r1
 800cb8c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	240a      	movs	r4, #10
 800cb98:	193b      	adds	r3, r7, r4
 800cb9a:	0592      	lsls	r2, r2, #22
 800cb9c:	0d92      	lsrs	r2, r2, #22
 800cb9e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	2308      	movs	r3, #8
 800cbaa:	18fb      	adds	r3, r7, r3
 800cbac:	21fe      	movs	r1, #254	@ 0xfe
 800cbae:	400a      	ands	r2, r1
 800cbb0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d148      	bne.n	800cc4c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cbba:	0021      	movs	r1, r4
 800cbbc:	187b      	adds	r3, r7, r1
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	09db      	lsrs	r3, r3, #7
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	183b      	adds	r3, r7, r0
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	4053      	eors	r3, r2
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	001a      	movs	r2, r3
 800cbce:	2306      	movs	r3, #6
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	d120      	bne.n	800cc16 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800cbd4:	183b      	adds	r3, r7, r0
 800cbd6:	187a      	adds	r2, r7, r1
 800cbd8:	8812      	ldrh	r2, [r2, #0]
 800cbda:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	d14c      	bne.n	800cc88 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2240      	movs	r2, #64	@ 0x40
 800cc00:	2100      	movs	r1, #0
 800cc02:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc04:	183b      	adds	r3, r7, r0
 800cc06:	881a      	ldrh	r2, [r3, #0]
 800cc08:	197b      	adds	r3, r7, r5
 800cc0a:	7819      	ldrb	r1, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	0018      	movs	r0, r3
 800cc10:	f7ff fa39 	bl	800c086 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cc14:	e038      	b.n	800cc88 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800cc16:	240c      	movs	r4, #12
 800cc18:	193b      	adds	r3, r7, r4
 800cc1a:	2208      	movs	r2, #8
 800cc1c:	18ba      	adds	r2, r7, r2
 800cc1e:	8812      	ldrh	r2, [r2, #0]
 800cc20:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc22:	2380      	movs	r3, #128	@ 0x80
 800cc24:	021a      	lsls	r2, r3, #8
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	0011      	movs	r1, r2
 800cc2a:	0018      	movs	r0, r3
 800cc2c:	f000 fe0a 	bl	800d844 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2240      	movs	r2, #64	@ 0x40
 800cc34:	2100      	movs	r1, #0
 800cc36:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc38:	193b      	adds	r3, r7, r4
 800cc3a:	881a      	ldrh	r2, [r3, #0]
 800cc3c:	230f      	movs	r3, #15
 800cc3e:	18fb      	adds	r3, r7, r3
 800cc40:	7819      	ldrb	r1, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	0018      	movs	r0, r3
 800cc46:	f7ff fa1e 	bl	800c086 <HAL_I2C_AddrCallback>
}
 800cc4a:	e01d      	b.n	800cc88 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cc4c:	2380      	movs	r3, #128	@ 0x80
 800cc4e:	021a      	lsls	r2, r3, #8
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	0011      	movs	r1, r2
 800cc54:	0018      	movs	r0, r3
 800cc56:	f000 fdf5 	bl	800d844 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2240      	movs	r2, #64	@ 0x40
 800cc5e:	2100      	movs	r1, #0
 800cc60:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cc62:	230c      	movs	r3, #12
 800cc64:	18fb      	adds	r3, r7, r3
 800cc66:	881a      	ldrh	r2, [r3, #0]
 800cc68:	230f      	movs	r3, #15
 800cc6a:	18fb      	adds	r3, r7, r3
 800cc6c:	7819      	ldrb	r1, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	0018      	movs	r0, r3
 800cc72:	f7ff fa08 	bl	800c086 <HAL_I2C_AddrCallback>
}
 800cc76:	e007      	b.n	800cc88 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2208      	movs	r2, #8
 800cc7e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2240      	movs	r2, #64	@ 0x40
 800cc84:	2100      	movs	r1, #0
 800cc86:	5499      	strb	r1, [r3, r2]
}
 800cc88:	46c0      	nop			@ (mov r8, r8)
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	b004      	add	sp, #16
 800cc8e:	bdb0      	pop	{r4, r5, r7, pc}

0800cc90 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2242      	movs	r2, #66	@ 0x42
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2241      	movs	r2, #65	@ 0x41
 800cca4:	5c9b      	ldrb	r3, [r3, r2]
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	2b21      	cmp	r3, #33	@ 0x21
 800ccaa:	d117      	bne.n	800ccdc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2241      	movs	r2, #65	@ 0x41
 800ccb0:	2120      	movs	r1, #32
 800ccb2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2211      	movs	r2, #17
 800ccb8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2101      	movs	r1, #1
 800ccc4:	0018      	movs	r0, r3
 800ccc6:	f000 fdbd 	bl	800d844 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2240      	movs	r2, #64	@ 0x40
 800ccce:	2100      	movs	r1, #0
 800ccd0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	0018      	movs	r0, r3
 800ccd6:	f7ff f9b6 	bl	800c046 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ccda:	e016      	b.n	800cd0a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2241      	movs	r2, #65	@ 0x41
 800cce0:	2120      	movs	r1, #32
 800cce2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2212      	movs	r2, #18
 800cce8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2102      	movs	r1, #2
 800ccf4:	0018      	movs	r0, r3
 800ccf6:	f000 fda5 	bl	800d844 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2240      	movs	r2, #64	@ 0x40
 800ccfe:	2100      	movs	r1, #0
 800cd00:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	0018      	movs	r0, r3
 800cd06:	f7ff f9a6 	bl	800c056 <HAL_I2C_MasterRxCpltCallback>
}
 800cd0a:	46c0      	nop			@ (mov r8, r8)
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	b002      	add	sp, #8
 800cd10:	bd80      	pop	{r7, pc}
	...

0800cd14 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2242      	movs	r2, #66	@ 0x42
 800cd28:	2100      	movs	r1, #0
 800cd2a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	2380      	movs	r3, #128	@ 0x80
 800cd30:	01db      	lsls	r3, r3, #7
 800cd32:	4013      	ands	r3, r2
 800cd34:	d008      	beq.n	800cd48 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4924      	ldr	r1, [pc, #144]	@ (800cdd4 <I2C_ITSlaveSeqCplt+0xc0>)
 800cd42:	400a      	ands	r2, r1
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	e00c      	b.n	800cd62 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	2380      	movs	r3, #128	@ 0x80
 800cd4c:	021b      	lsls	r3, r3, #8
 800cd4e:	4013      	ands	r3, r2
 800cd50:	d007      	beq.n	800cd62 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	491e      	ldr	r1, [pc, #120]	@ (800cdd8 <I2C_ITSlaveSeqCplt+0xc4>)
 800cd5e:	400a      	ands	r2, r1
 800cd60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2241      	movs	r2, #65	@ 0x41
 800cd66:	5c9b      	ldrb	r3, [r3, r2]
 800cd68:	b2db      	uxtb	r3, r3
 800cd6a:	2b29      	cmp	r3, #41	@ 0x29
 800cd6c:	d114      	bne.n	800cd98 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2241      	movs	r2, #65	@ 0x41
 800cd72:	2128      	movs	r1, #40	@ 0x28
 800cd74:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2221      	movs	r2, #33	@ 0x21
 800cd7a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2101      	movs	r1, #1
 800cd80:	0018      	movs	r0, r3
 800cd82:	f000 fd5f 	bl	800d844 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2240      	movs	r2, #64	@ 0x40
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	0018      	movs	r0, r3
 800cd92:	f7ff f968 	bl	800c066 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd96:	e019      	b.n	800cdcc <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2241      	movs	r2, #65	@ 0x41
 800cd9c:	5c9b      	ldrb	r3, [r3, r2]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cda2:	d113      	bne.n	800cdcc <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2241      	movs	r2, #65	@ 0x41
 800cda8:	2128      	movs	r1, #40	@ 0x28
 800cdaa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2222      	movs	r2, #34	@ 0x22
 800cdb0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2102      	movs	r1, #2
 800cdb6:	0018      	movs	r0, r3
 800cdb8:	f000 fd44 	bl	800d844 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2240      	movs	r2, #64	@ 0x40
 800cdc0:	2100      	movs	r1, #0
 800cdc2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	0018      	movs	r0, r3
 800cdc8:	f7ff f955 	bl	800c076 <HAL_I2C_SlaveRxCpltCallback>
}
 800cdcc:	46c0      	nop			@ (mov r8, r8)
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	b004      	add	sp, #16
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	ffffbfff 	.word	0xffffbfff
 800cdd8:	ffff7fff 	.word	0xffff7fff

0800cddc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2220      	movs	r2, #32
 800cdf0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2241      	movs	r2, #65	@ 0x41
 800cdf6:	5c9b      	ldrb	r3, [r3, r2]
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	2b21      	cmp	r3, #33	@ 0x21
 800cdfc:	d108      	bne.n	800ce10 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2101      	movs	r1, #1
 800ce02:	0018      	movs	r0, r3
 800ce04:	f000 fd1e 	bl	800d844 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2211      	movs	r2, #17
 800ce0c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce0e:	e00d      	b.n	800ce2c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2241      	movs	r2, #65	@ 0x41
 800ce14:	5c9b      	ldrb	r3, [r3, r2]
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	2b22      	cmp	r3, #34	@ 0x22
 800ce1a:	d107      	bne.n	800ce2c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2102      	movs	r1, #2
 800ce20:	0018      	movs	r0, r3
 800ce22:	f000 fd0f 	bl	800d844 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2212      	movs	r2, #18
 800ce2a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	494e      	ldr	r1, [pc, #312]	@ (800cf70 <I2C_ITMasterCplt+0x194>)
 800ce38:	400a      	ands	r2, r1
 800ce3a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	4a4b      	ldr	r2, [pc, #300]	@ (800cf74 <I2C_ITMasterCplt+0x198>)
 800ce46:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	2210      	movs	r2, #16
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	d009      	beq.n	800ce64 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2210      	movs	r2, #16
 800ce56:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce5c:	2204      	movs	r2, #4
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2241      	movs	r2, #65	@ 0x41
 800ce68:	5c9b      	ldrb	r3, [r3, r2]
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b60      	cmp	r3, #96	@ 0x60
 800ce6e:	d109      	bne.n	800ce84 <I2C_ITMasterCplt+0xa8>
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	2204      	movs	r2, #4
 800ce74:	4013      	ands	r3, r2
 800ce76:	d005      	beq.n	800ce84 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ce82:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	0018      	movs	r0, r3
 800ce88:	f000 fb19 	bl	800d4be <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce90:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2241      	movs	r2, #65	@ 0x41
 800ce96:	5c9b      	ldrb	r3, [r3, r2]
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b60      	cmp	r3, #96	@ 0x60
 800ce9c:	d002      	beq.n	800cea4 <I2C_ITMasterCplt+0xc8>
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d007      	beq.n	800ceb4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	0011      	movs	r1, r2
 800ceac:	0018      	movs	r0, r3
 800ceae:	f000 f9db 	bl	800d268 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ceb2:	e058      	b.n	800cf66 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2241      	movs	r2, #65	@ 0x41
 800ceb8:	5c9b      	ldrb	r3, [r3, r2]
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b21      	cmp	r3, #33	@ 0x21
 800cebe:	d126      	bne.n	800cf0e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2241      	movs	r2, #65	@ 0x41
 800cec4:	2120      	movs	r1, #32
 800cec6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2242      	movs	r2, #66	@ 0x42
 800ced2:	5c9b      	ldrb	r3, [r3, r2]
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b40      	cmp	r3, #64	@ 0x40
 800ced8:	d10c      	bne.n	800cef4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2242      	movs	r2, #66	@ 0x42
 800cede:	2100      	movs	r1, #0
 800cee0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2240      	movs	r2, #64	@ 0x40
 800cee6:	2100      	movs	r1, #0
 800cee8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	0018      	movs	r0, r3
 800ceee:	f7ff f8e2 	bl	800c0b6 <HAL_I2C_MemTxCpltCallback>
}
 800cef2:	e038      	b.n	800cf66 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2242      	movs	r2, #66	@ 0x42
 800cef8:	2100      	movs	r1, #0
 800cefa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2240      	movs	r2, #64	@ 0x40
 800cf00:	2100      	movs	r1, #0
 800cf02:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	0018      	movs	r0, r3
 800cf08:	f7ff f89d 	bl	800c046 <HAL_I2C_MasterTxCpltCallback>
}
 800cf0c:	e02b      	b.n	800cf66 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2241      	movs	r2, #65	@ 0x41
 800cf12:	5c9b      	ldrb	r3, [r3, r2]
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b22      	cmp	r3, #34	@ 0x22
 800cf18:	d125      	bne.n	800cf66 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2241      	movs	r2, #65	@ 0x41
 800cf1e:	2120      	movs	r1, #32
 800cf20:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2242      	movs	r2, #66	@ 0x42
 800cf2c:	5c9b      	ldrb	r3, [r3, r2]
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b40      	cmp	r3, #64	@ 0x40
 800cf32:	d10c      	bne.n	800cf4e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2242      	movs	r2, #66	@ 0x42
 800cf38:	2100      	movs	r1, #0
 800cf3a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2240      	movs	r2, #64	@ 0x40
 800cf40:	2100      	movs	r1, #0
 800cf42:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	0018      	movs	r0, r3
 800cf48:	f7ff f8bd 	bl	800c0c6 <HAL_I2C_MemRxCpltCallback>
}
 800cf4c:	e00b      	b.n	800cf66 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2242      	movs	r2, #66	@ 0x42
 800cf52:	2100      	movs	r1, #0
 800cf54:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2240      	movs	r2, #64	@ 0x40
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	0018      	movs	r0, r3
 800cf62:	f7ff f878 	bl	800c056 <HAL_I2C_MasterRxCpltCallback>
}
 800cf66:	46c0      	nop			@ (mov r8, r8)
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	b006      	add	sp, #24
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	46c0      	nop			@ (mov r8, r8)
 800cf70:	fe00e800 	.word	0xfe00e800
 800cf74:	ffff0000 	.word	0xffff0000

0800cf78 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cf8e:	200f      	movs	r0, #15
 800cf90:	183b      	adds	r3, r7, r0
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	2141      	movs	r1, #65	@ 0x41
 800cf96:	5c52      	ldrb	r2, [r2, r1]
 800cf98:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2220      	movs	r2, #32
 800cfa0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cfa2:	183b      	adds	r3, r7, r0
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2b21      	cmp	r3, #33	@ 0x21
 800cfa8:	d003      	beq.n	800cfb2 <I2C_ITSlaveCplt+0x3a>
 800cfaa:	183b      	adds	r3, r7, r0
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b29      	cmp	r3, #41	@ 0x29
 800cfb0:	d109      	bne.n	800cfc6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cfb2:	4a7b      	ldr	r2, [pc, #492]	@ (800d1a0 <I2C_ITSlaveCplt+0x228>)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	0011      	movs	r1, r2
 800cfb8:	0018      	movs	r0, r3
 800cfba:	f000 fc43 	bl	800d844 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2221      	movs	r2, #33	@ 0x21
 800cfc2:	631a      	str	r2, [r3, #48]	@ 0x30
 800cfc4:	e011      	b.n	800cfea <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cfc6:	220f      	movs	r2, #15
 800cfc8:	18bb      	adds	r3, r7, r2
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	2b22      	cmp	r3, #34	@ 0x22
 800cfce:	d003      	beq.n	800cfd8 <I2C_ITSlaveCplt+0x60>
 800cfd0:	18bb      	adds	r3, r7, r2
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfd6:	d108      	bne.n	800cfea <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cfd8:	4a72      	ldr	r2, [pc, #456]	@ (800d1a4 <I2C_ITSlaveCplt+0x22c>)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	0011      	movs	r1, r2
 800cfde:	0018      	movs	r0, r3
 800cfe0:	f000 fc30 	bl	800d844 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2222      	movs	r2, #34	@ 0x22
 800cfe8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2180      	movs	r1, #128	@ 0x80
 800cff6:	0209      	lsls	r1, r1, #8
 800cff8:	430a      	orrs	r2, r1
 800cffa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	685a      	ldr	r2, [r3, #4]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4968      	ldr	r1, [pc, #416]	@ (800d1a8 <I2C_ITSlaveCplt+0x230>)
 800d008:	400a      	ands	r2, r1
 800d00a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	0018      	movs	r0, r3
 800d010:	f000 fa55 	bl	800d4be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	2380      	movs	r3, #128	@ 0x80
 800d018:	01db      	lsls	r3, r3, #7
 800d01a:	4013      	ands	r3, r2
 800d01c:	d013      	beq.n	800d046 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4960      	ldr	r1, [pc, #384]	@ (800d1ac <I2C_ITSlaveCplt+0x234>)
 800d02a:	400a      	ands	r2, r1
 800d02c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d032:	2b00      	cmp	r3, #0
 800d034:	d01f      	beq.n	800d076 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	b29a      	uxth	r2, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d044:	e017      	b.n	800d076 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d046:	693a      	ldr	r2, [r7, #16]
 800d048:	2380      	movs	r3, #128	@ 0x80
 800d04a:	021b      	lsls	r3, r3, #8
 800d04c:	4013      	ands	r3, r2
 800d04e:	d012      	beq.n	800d076 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4955      	ldr	r1, [pc, #340]	@ (800d1b0 <I2C_ITSlaveCplt+0x238>)
 800d05c:	400a      	ands	r2, r1
 800d05e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d064:	2b00      	cmp	r3, #0
 800d066:	d006      	beq.n	800d076 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	b29a      	uxth	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2204      	movs	r2, #4
 800d07a:	4013      	ands	r3, r2
 800d07c:	d020      	beq.n	800d0c0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	2204      	movs	r2, #4
 800d082:	4393      	bics	r3, r2
 800d084:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d090:	b2d2      	uxtb	r2, r2
 800d092:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00c      	beq.n	800d0c0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d005      	beq.n	800d0d6 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ce:	2204      	movs	r2, #4
 800d0d0:	431a      	orrs	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2242      	movs	r2, #66	@ 0x42
 800d0da:	2100      	movs	r1, #0
 800d0dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d013      	beq.n	800d114 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	0011      	movs	r1, r2
 800d0f4:	0018      	movs	r0, r3
 800d0f6:	f000 f8b7 	bl	800d268 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2241      	movs	r2, #65	@ 0x41
 800d0fe:	5c9b      	ldrb	r3, [r3, r2]
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b28      	cmp	r3, #40	@ 0x28
 800d104:	d147      	bne.n	800d196 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	0011      	movs	r1, r2
 800d10c:	0018      	movs	r0, r3
 800d10e:	f000 f853 	bl	800d1b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d112:	e040      	b.n	800d196 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d118:	4a26      	ldr	r2, [pc, #152]	@ (800d1b4 <I2C_ITSlaveCplt+0x23c>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d016      	beq.n	800d14c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	0018      	movs	r0, r3
 800d122:	f7ff fdf7 	bl	800cd14 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	4a22      	ldr	r2, [pc, #136]	@ (800d1b4 <I2C_ITSlaveCplt+0x23c>)
 800d12a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2241      	movs	r2, #65	@ 0x41
 800d130:	2120      	movs	r1, #32
 800d132:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2240      	movs	r2, #64	@ 0x40
 800d13e:	2100      	movs	r1, #0
 800d140:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	0018      	movs	r0, r3
 800d146:	f7fe ffae 	bl	800c0a6 <HAL_I2C_ListenCpltCallback>
}
 800d14a:	e024      	b.n	800d196 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2241      	movs	r2, #65	@ 0x41
 800d150:	5c9b      	ldrb	r3, [r3, r2]
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b22      	cmp	r3, #34	@ 0x22
 800d156:	d10f      	bne.n	800d178 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2241      	movs	r2, #65	@ 0x41
 800d15c:	2120      	movs	r1, #32
 800d15e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2240      	movs	r2, #64	@ 0x40
 800d16a:	2100      	movs	r1, #0
 800d16c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	0018      	movs	r0, r3
 800d172:	f7fe ff80 	bl	800c076 <HAL_I2C_SlaveRxCpltCallback>
}
 800d176:	e00e      	b.n	800d196 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2241      	movs	r2, #65	@ 0x41
 800d17c:	2120      	movs	r1, #32
 800d17e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2240      	movs	r2, #64	@ 0x40
 800d18a:	2100      	movs	r1, #0
 800d18c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	0018      	movs	r0, r3
 800d192:	f7fe ff68 	bl	800c066 <HAL_I2C_SlaveTxCpltCallback>
}
 800d196:	46c0      	nop			@ (mov r8, r8)
 800d198:	46bd      	mov	sp, r7
 800d19a:	b006      	add	sp, #24
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	46c0      	nop			@ (mov r8, r8)
 800d1a0:	00008001 	.word	0x00008001
 800d1a4:	00008002 	.word	0x00008002
 800d1a8:	fe00e800 	.word	0xfe00e800
 800d1ac:	ffffbfff 	.word	0xffffbfff
 800d1b0:	ffff7fff 	.word	0xffff7fff
 800d1b4:	ffff0000 	.word	0xffff0000

0800d1b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	4a26      	ldr	r2, [pc, #152]	@ (800d260 <I2C_ITListenCplt+0xa8>)
 800d1c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2241      	movs	r2, #65	@ 0x41
 800d1d2:	2120      	movs	r1, #32
 800d1d4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2242      	movs	r2, #66	@ 0x42
 800d1da:	2100      	movs	r1, #0
 800d1dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	2204      	movs	r2, #4
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	d022      	beq.n	800d232 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f6:	b2d2      	uxtb	r2, r2
 800d1f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1fe:	1c5a      	adds	r2, r3, #1
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d012      	beq.n	800d232 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d210:	3b01      	subs	r3, #1
 800d212:	b29a      	uxth	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	3b01      	subs	r3, #1
 800d220:	b29a      	uxth	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d22a:	2204      	movs	r2, #4
 800d22c:	431a      	orrs	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d232:	4a0c      	ldr	r2, [pc, #48]	@ (800d264 <I2C_ITListenCplt+0xac>)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	0011      	movs	r1, r2
 800d238:	0018      	movs	r0, r3
 800d23a:	f000 fb03 	bl	800d844 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2210      	movs	r2, #16
 800d244:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2240      	movs	r2, #64	@ 0x40
 800d24a:	2100      	movs	r1, #0
 800d24c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	0018      	movs	r0, r3
 800d252:	f7fe ff28 	bl	800c0a6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d256:	46c0      	nop			@ (mov r8, r8)
 800d258:	46bd      	mov	sp, r7
 800d25a:	b002      	add	sp, #8
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	46c0      	nop			@ (mov r8, r8)
 800d260:	ffff0000 	.word	0xffff0000
 800d264:	00008003 	.word	0x00008003

0800d268 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d272:	200f      	movs	r0, #15
 800d274:	183b      	adds	r3, r7, r0
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	2141      	movs	r1, #65	@ 0x41
 800d27a:	5c52      	ldrb	r2, [r2, r1]
 800d27c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2242      	movs	r2, #66	@ 0x42
 800d282:	2100      	movs	r1, #0
 800d284:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4a72      	ldr	r2, [pc, #456]	@ (800d454 <I2C_ITError+0x1ec>)
 800d28a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	431a      	orrs	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d29e:	183b      	adds	r3, r7, r0
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	2b28      	cmp	r3, #40	@ 0x28
 800d2a4:	d007      	beq.n	800d2b6 <I2C_ITError+0x4e>
 800d2a6:	183b      	adds	r3, r7, r0
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	2b29      	cmp	r3, #41	@ 0x29
 800d2ac:	d003      	beq.n	800d2b6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d2ae:	183b      	adds	r3, r7, r0
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2b4:	d10c      	bne.n	800d2d0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2103      	movs	r1, #3
 800d2ba:	0018      	movs	r0, r3
 800d2bc:	f000 fac2 	bl	800d844 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2241      	movs	r2, #65	@ 0x41
 800d2c4:	2128      	movs	r1, #40	@ 0x28
 800d2c6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	4a63      	ldr	r2, [pc, #396]	@ (800d458 <I2C_ITError+0x1f0>)
 800d2cc:	635a      	str	r2, [r3, #52]	@ 0x34
 800d2ce:	e032      	b.n	800d336 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d2d0:	4a62      	ldr	r2, [pc, #392]	@ (800d45c <I2C_ITError+0x1f4>)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	0011      	movs	r1, r2
 800d2d6:	0018      	movs	r0, r3
 800d2d8:	f000 fab4 	bl	800d844 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	0018      	movs	r0, r3
 800d2e0:	f000 f8ed 	bl	800d4be <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2241      	movs	r2, #65	@ 0x41
 800d2e8:	5c9b      	ldrb	r3, [r3, r2]
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b60      	cmp	r3, #96	@ 0x60
 800d2ee:	d01f      	beq.n	800d330 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2241      	movs	r2, #65	@ 0x41
 800d2f4:	2120      	movs	r1, #32
 800d2f6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	2220      	movs	r2, #32
 800d300:	4013      	ands	r3, r2
 800d302:	2b20      	cmp	r3, #32
 800d304:	d114      	bne.n	800d330 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	699b      	ldr	r3, [r3, #24]
 800d30c:	2210      	movs	r2, #16
 800d30e:	4013      	ands	r3, r2
 800d310:	2b10      	cmp	r3, #16
 800d312:	d109      	bne.n	800d328 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2210      	movs	r2, #16
 800d31a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d320:	2204      	movs	r2, #4
 800d322:	431a      	orrs	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2220      	movs	r2, #32
 800d32e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d33a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d340:	2b00      	cmp	r3, #0
 800d342:	d03b      	beq.n	800d3bc <I2C_ITError+0x154>
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2b11      	cmp	r3, #17
 800d348:	d002      	beq.n	800d350 <I2C_ITError+0xe8>
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	2b21      	cmp	r3, #33	@ 0x21
 800d34e:	d135      	bne.n	800d3bc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	2380      	movs	r3, #128	@ 0x80
 800d358:	01db      	lsls	r3, r3, #7
 800d35a:	401a      	ands	r2, r3
 800d35c:	2380      	movs	r3, #128	@ 0x80
 800d35e:	01db      	lsls	r3, r3, #7
 800d360:	429a      	cmp	r2, r3
 800d362:	d107      	bne.n	800d374 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	493c      	ldr	r1, [pc, #240]	@ (800d460 <I2C_ITError+0x1f8>)
 800d370:	400a      	ands	r2, r1
 800d372:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d378:	0018      	movs	r0, r3
 800d37a:	f7fd feac 	bl	800b0d6 <HAL_DMA_GetState>
 800d37e:	0003      	movs	r3, r0
 800d380:	2b01      	cmp	r3, #1
 800d382:	d016      	beq.n	800d3b2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d388:	4a36      	ldr	r2, [pc, #216]	@ (800d464 <I2C_ITError+0x1fc>)
 800d38a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2240      	movs	r2, #64	@ 0x40
 800d390:	2100      	movs	r1, #0
 800d392:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d398:	0018      	movs	r0, r3
 800d39a:	f7fd fda7 	bl	800aeec <HAL_DMA_Abort_IT>
 800d39e:	1e03      	subs	r3, r0, #0
 800d3a0:	d051      	beq.n	800d446 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d3b0:	e049      	b.n	800d446 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	0018      	movs	r0, r3
 800d3b6:	f000 f859 	bl	800d46c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d3ba:	e044      	b.n	800d446 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d03b      	beq.n	800d43c <I2C_ITError+0x1d4>
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	2b12      	cmp	r3, #18
 800d3c8:	d002      	beq.n	800d3d0 <I2C_ITError+0x168>
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	2b22      	cmp	r3, #34	@ 0x22
 800d3ce:	d135      	bne.n	800d43c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	2380      	movs	r3, #128	@ 0x80
 800d3d8:	021b      	lsls	r3, r3, #8
 800d3da:	401a      	ands	r2, r3
 800d3dc:	2380      	movs	r3, #128	@ 0x80
 800d3de:	021b      	lsls	r3, r3, #8
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d107      	bne.n	800d3f4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	491e      	ldr	r1, [pc, #120]	@ (800d468 <I2C_ITError+0x200>)
 800d3f0:	400a      	ands	r2, r1
 800d3f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3f8:	0018      	movs	r0, r3
 800d3fa:	f7fd fe6c 	bl	800b0d6 <HAL_DMA_GetState>
 800d3fe:	0003      	movs	r3, r0
 800d400:	2b01      	cmp	r3, #1
 800d402:	d016      	beq.n	800d432 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d408:	4a16      	ldr	r2, [pc, #88]	@ (800d464 <I2C_ITError+0x1fc>)
 800d40a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2240      	movs	r2, #64	@ 0x40
 800d410:	2100      	movs	r1, #0
 800d412:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d418:	0018      	movs	r0, r3
 800d41a:	f7fd fd67 	bl	800aeec <HAL_DMA_Abort_IT>
 800d41e:	1e03      	subs	r3, r0, #0
 800d420:	d013      	beq.n	800d44a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d42c:	0018      	movs	r0, r3
 800d42e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d430:	e00b      	b.n	800d44a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	0018      	movs	r0, r3
 800d436:	f000 f819 	bl	800d46c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d43a:	e006      	b.n	800d44a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	0018      	movs	r0, r3
 800d440:	f000 f814 	bl	800d46c <I2C_TreatErrorCallback>
  }
}
 800d444:	e002      	b.n	800d44c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d446:	46c0      	nop			@ (mov r8, r8)
 800d448:	e000      	b.n	800d44c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d44a:	46c0      	nop			@ (mov r8, r8)
}
 800d44c:	46c0      	nop			@ (mov r8, r8)
 800d44e:	46bd      	mov	sp, r7
 800d450:	b004      	add	sp, #16
 800d452:	bd80      	pop	{r7, pc}
 800d454:	ffff0000 	.word	0xffff0000
 800d458:	0800c34d 	.word	0x0800c34d
 800d45c:	00008003 	.word	0x00008003
 800d460:	ffffbfff 	.word	0xffffbfff
 800d464:	0800d677 	.word	0x0800d677
 800d468:	ffff7fff 	.word	0xffff7fff

0800d46c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2241      	movs	r2, #65	@ 0x41
 800d478:	5c9b      	ldrb	r3, [r3, r2]
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	2b60      	cmp	r3, #96	@ 0x60
 800d47e:	d10f      	bne.n	800d4a0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2241      	movs	r2, #65	@ 0x41
 800d484:	2120      	movs	r1, #32
 800d486:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2240      	movs	r2, #64	@ 0x40
 800d492:	2100      	movs	r1, #0
 800d494:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	0018      	movs	r0, r3
 800d49a:	f7fe fe24 	bl	800c0e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d49e:	e00a      	b.n	800d4b6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2240      	movs	r2, #64	@ 0x40
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	f7fe fe10 	bl	800c0d6 <HAL_I2C_ErrorCallback>
}
 800d4b6:	46c0      	nop			@ (mov r8, r8)
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	b002      	add	sp, #8
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	d103      	bne.n	800d4dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	699b      	ldr	r3, [r3, #24]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d007      	beq.n	800d4fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	699a      	ldr	r2, [r3, #24]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	430a      	orrs	r2, r1
 800d4f8:	619a      	str	r2, [r3, #24]
  }
}
 800d4fa:	46c0      	nop			@ (mov r8, r8)
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	b002      	add	sp, #8
 800d500:	bd80      	pop	{r7, pc}
	...

0800d504 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d510:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4920      	ldr	r1, [pc, #128]	@ (800d5a0 <I2C_DMAMasterTransmitCplt+0x9c>)
 800d51e:	400a      	ands	r2, r1
 800d520:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d526:	b29b      	uxth	r3, r3
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d105      	bne.n	800d538 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2120      	movs	r1, #32
 800d530:	0018      	movs	r0, r3
 800d532:	f000 f8f9 	bl	800d728 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d536:	e02e      	b.n	800d596 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d540:	189a      	adds	r2, r3, r2
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	2bff      	cmp	r3, #255	@ 0xff
 800d54e:	d903      	bls.n	800d558 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	22ff      	movs	r2, #255	@ 0xff
 800d554:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d556:	e004      	b.n	800d562 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d56a:	0019      	movs	r1, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	3328      	adds	r3, #40	@ 0x28
 800d572:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d578:	f7fd fc12 	bl	800ada0 <HAL_DMA_Start_IT>
 800d57c:	1e03      	subs	r3, r0, #0
 800d57e:	d005      	beq.n	800d58c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2110      	movs	r1, #16
 800d584:	0018      	movs	r0, r3
 800d586:	f7ff fe6f 	bl	800d268 <I2C_ITError>
}
 800d58a:	e004      	b.n	800d596 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2140      	movs	r1, #64	@ 0x40
 800d590:	0018      	movs	r0, r3
 800d592:	f000 f8c9 	bl	800d728 <I2C_Enable_IRQ>
}
 800d596:	46c0      	nop			@ (mov r8, r8)
 800d598:	46bd      	mov	sp, r7
 800d59a:	b004      	add	sp, #16
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	46c0      	nop			@ (mov r8, r8)
 800d5a0:	ffffbfff 	.word	0xffffbfff

0800d5a4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4920      	ldr	r1, [pc, #128]	@ (800d640 <I2C_DMAMasterReceiveCplt+0x9c>)
 800d5be:	400a      	ands	r2, r1
 800d5c0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d105      	bne.n	800d5d8 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2120      	movs	r1, #32
 800d5d0:	0018      	movs	r0, r3
 800d5d2:	f000 f8a9 	bl	800d728 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d5d6:	e02e      	b.n	800d636 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d5e0:	189a      	adds	r2, r3, r2
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	2bff      	cmp	r3, #255	@ 0xff
 800d5ee:	d903      	bls.n	800d5f8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	22ff      	movs	r2, #255	@ 0xff
 800d5f4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d5f6:	e004      	b.n	800d602 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	3324      	adds	r3, #36	@ 0x24
 800d60c:	0019      	movs	r1, r3
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d612:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d618:	f7fd fbc2 	bl	800ada0 <HAL_DMA_Start_IT>
 800d61c:	1e03      	subs	r3, r0, #0
 800d61e:	d005      	beq.n	800d62c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2110      	movs	r1, #16
 800d624:	0018      	movs	r0, r3
 800d626:	f7ff fe1f 	bl	800d268 <I2C_ITError>
}
 800d62a:	e004      	b.n	800d636 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2140      	movs	r1, #64	@ 0x40
 800d630:	0018      	movs	r0, r3
 800d632:	f000 f879 	bl	800d728 <I2C_Enable_IRQ>
}
 800d636:	46c0      	nop			@ (mov r8, r8)
 800d638:	46bd      	mov	sp, r7
 800d63a:	b004      	add	sp, #16
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	46c0      	nop			@ (mov r8, r8)
 800d640:	ffff7fff 	.word	0xffff7fff

0800d644 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d650:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2180      	movs	r1, #128	@ 0x80
 800d65e:	0209      	lsls	r1, r1, #8
 800d660:	430a      	orrs	r2, r1
 800d662:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2110      	movs	r1, #16
 800d668:	0018      	movs	r0, r3
 800d66a:	f7ff fdfd 	bl	800d268 <I2C_ITError>
}
 800d66e:	46c0      	nop			@ (mov r8, r8)
 800d670:	46bd      	mov	sp, r7
 800d672:	b004      	add	sp, #16
 800d674:	bd80      	pop	{r7, pc}

0800d676 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b084      	sub	sp, #16
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d682:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d690:	2200      	movs	r2, #0
 800d692:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d003      	beq.n	800d6a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	0018      	movs	r0, r3
 800d6a8:	f7ff fee0 	bl	800d46c <I2C_TreatErrorCallback>
}
 800d6ac:	46c0      	nop			@ (mov r8, r8)
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	b004      	add	sp, #16
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d6b4:	b590      	push	{r4, r7, lr}
 800d6b6:	b087      	sub	sp, #28
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	0008      	movs	r0, r1
 800d6be:	0011      	movs	r1, r2
 800d6c0:	607b      	str	r3, [r7, #4]
 800d6c2:	240a      	movs	r4, #10
 800d6c4:	193b      	adds	r3, r7, r4
 800d6c6:	1c02      	adds	r2, r0, #0
 800d6c8:	801a      	strh	r2, [r3, #0]
 800d6ca:	2009      	movs	r0, #9
 800d6cc:	183b      	adds	r3, r7, r0
 800d6ce:	1c0a      	adds	r2, r1, #0
 800d6d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6d2:	193b      	adds	r3, r7, r4
 800d6d4:	881b      	ldrh	r3, [r3, #0]
 800d6d6:	059b      	lsls	r3, r3, #22
 800d6d8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6da:	183b      	adds	r3, r7, r0
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	0419      	lsls	r1, r3, #16
 800d6e0:	23ff      	movs	r3, #255	@ 0xff
 800d6e2:	041b      	lsls	r3, r3, #16
 800d6e4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6e6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	085b      	lsrs	r3, r3, #1
 800d6f4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6fe:	0d51      	lsrs	r1, r2, #21
 800d700:	2280      	movs	r2, #128	@ 0x80
 800d702:	00d2      	lsls	r2, r2, #3
 800d704:	400a      	ands	r2, r1
 800d706:	4907      	ldr	r1, [pc, #28]	@ (800d724 <I2C_TransferConfig+0x70>)
 800d708:	430a      	orrs	r2, r1
 800d70a:	43d2      	mvns	r2, r2
 800d70c:	401a      	ands	r2, r3
 800d70e:	0011      	movs	r1, r2
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	697a      	ldr	r2, [r7, #20]
 800d716:	430a      	orrs	r2, r1
 800d718:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d71a:	46c0      	nop			@ (mov r8, r8)
 800d71c:	46bd      	mov	sp, r7
 800d71e:	b007      	add	sp, #28
 800d720:	bd90      	pop	{r4, r7, pc}
 800d722:	46c0      	nop			@ (mov r8, r8)
 800d724:	03ff63ff 	.word	0x03ff63ff

0800d728 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	000a      	movs	r2, r1
 800d732:	1cbb      	adds	r3, r7, #2
 800d734:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d736:	2300      	movs	r3, #0
 800d738:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d73e:	4b3e      	ldr	r3, [pc, #248]	@ (800d838 <I2C_Enable_IRQ+0x110>)
 800d740:	429a      	cmp	r2, r3
 800d742:	d035      	beq.n	800d7b0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d748:	4b3c      	ldr	r3, [pc, #240]	@ (800d83c <I2C_Enable_IRQ+0x114>)
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d030      	beq.n	800d7b0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d752:	4b3b      	ldr	r3, [pc, #236]	@ (800d840 <I2C_Enable_IRQ+0x118>)
 800d754:	429a      	cmp	r2, r3
 800d756:	d02b      	beq.n	800d7b0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d758:	1cbb      	adds	r3, r7, #2
 800d75a:	2200      	movs	r2, #0
 800d75c:	5e9b      	ldrsh	r3, [r3, r2]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	da03      	bge.n	800d76a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	22b8      	movs	r2, #184	@ 0xb8
 800d766:	4313      	orrs	r3, r2
 800d768:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d76a:	1cbb      	adds	r3, r7, #2
 800d76c:	881b      	ldrh	r3, [r3, #0]
 800d76e:	2201      	movs	r2, #1
 800d770:	4013      	ands	r3, r2
 800d772:	d003      	beq.n	800d77c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	22f2      	movs	r2, #242	@ 0xf2
 800d778:	4313      	orrs	r3, r2
 800d77a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d77c:	1cbb      	adds	r3, r7, #2
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	2202      	movs	r2, #2
 800d782:	4013      	ands	r3, r2
 800d784:	d003      	beq.n	800d78e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	22f4      	movs	r2, #244	@ 0xf4
 800d78a:	4313      	orrs	r3, r2
 800d78c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d78e:	1cbb      	adds	r3, r7, #2
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	2b10      	cmp	r3, #16
 800d794:	d103      	bne.n	800d79e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2290      	movs	r2, #144	@ 0x90
 800d79a:	4313      	orrs	r3, r2
 800d79c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d79e:	1cbb      	adds	r3, r7, #2
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	2b20      	cmp	r3, #32
 800d7a4:	d13c      	bne.n	800d820 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2220      	movs	r2, #32
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d7ae:	e037      	b.n	800d820 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d7b0:	1cbb      	adds	r3, r7, #2
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	5e9b      	ldrsh	r3, [r3, r2]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	da03      	bge.n	800d7c2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	22b8      	movs	r2, #184	@ 0xb8
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d7c2:	1cbb      	adds	r3, r7, #2
 800d7c4:	881b      	ldrh	r3, [r3, #0]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	d003      	beq.n	800d7d4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	22f2      	movs	r2, #242	@ 0xf2
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d7d4:	1cbb      	adds	r3, r7, #2
 800d7d6:	881b      	ldrh	r3, [r3, #0]
 800d7d8:	2202      	movs	r2, #2
 800d7da:	4013      	ands	r3, r2
 800d7dc:	d003      	beq.n	800d7e6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	22f4      	movs	r2, #244	@ 0xf4
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d7e6:	1cbb      	adds	r3, r7, #2
 800d7e8:	881b      	ldrh	r3, [r3, #0]
 800d7ea:	2b10      	cmp	r3, #16
 800d7ec:	d103      	bne.n	800d7f6 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2290      	movs	r2, #144	@ 0x90
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d7f6:	1cbb      	adds	r3, r7, #2
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	2b20      	cmp	r3, #32
 800d7fc:	d103      	bne.n	800d806 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2260      	movs	r2, #96	@ 0x60
 800d802:	4313      	orrs	r3, r2
 800d804:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d80a:	4b0d      	ldr	r3, [pc, #52]	@ (800d840 <I2C_Enable_IRQ+0x118>)
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d007      	beq.n	800d820 <I2C_Enable_IRQ+0xf8>
 800d810:	1cbb      	adds	r3, r7, #2
 800d812:	881b      	ldrh	r3, [r3, #0]
 800d814:	2b40      	cmp	r3, #64	@ 0x40
 800d816:	d103      	bne.n	800d820 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2240      	movs	r2, #64	@ 0x40
 800d81c:	4313      	orrs	r3, r2
 800d81e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6819      	ldr	r1, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	430a      	orrs	r2, r1
 800d82e:	601a      	str	r2, [r3, #0]
}
 800d830:	46c0      	nop			@ (mov r8, r8)
 800d832:	46bd      	mov	sp, r7
 800d834:	b004      	add	sp, #16
 800d836:	bd80      	pop	{r7, pc}
 800d838:	0800c54d 	.word	0x0800c54d
 800d83c:	0800c97d 	.word	0x0800c97d
 800d840:	0800c745 	.word	0x0800c745

0800d844 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	000a      	movs	r2, r1
 800d84e:	1cbb      	adds	r3, r7, #2
 800d850:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d852:	2300      	movs	r3, #0
 800d854:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d856:	1cbb      	adds	r3, r7, #2
 800d858:	881b      	ldrh	r3, [r3, #0]
 800d85a:	2201      	movs	r2, #1
 800d85c:	4013      	ands	r3, r2
 800d85e:	d010      	beq.n	800d882 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2242      	movs	r2, #66	@ 0x42
 800d864:	4313      	orrs	r3, r2
 800d866:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2241      	movs	r2, #65	@ 0x41
 800d86c:	5c9b      	ldrb	r3, [r3, r2]
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	001a      	movs	r2, r3
 800d872:	2328      	movs	r3, #40	@ 0x28
 800d874:	4013      	ands	r3, r2
 800d876:	2b28      	cmp	r3, #40	@ 0x28
 800d878:	d003      	beq.n	800d882 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	22b0      	movs	r2, #176	@ 0xb0
 800d87e:	4313      	orrs	r3, r2
 800d880:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d882:	1cbb      	adds	r3, r7, #2
 800d884:	881b      	ldrh	r3, [r3, #0]
 800d886:	2202      	movs	r2, #2
 800d888:	4013      	ands	r3, r2
 800d88a:	d010      	beq.n	800d8ae <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2244      	movs	r2, #68	@ 0x44
 800d890:	4313      	orrs	r3, r2
 800d892:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2241      	movs	r2, #65	@ 0x41
 800d898:	5c9b      	ldrb	r3, [r3, r2]
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	001a      	movs	r2, r3
 800d89e:	2328      	movs	r3, #40	@ 0x28
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	2b28      	cmp	r3, #40	@ 0x28
 800d8a4:	d003      	beq.n	800d8ae <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	22b0      	movs	r2, #176	@ 0xb0
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d8ae:	1cbb      	adds	r3, r7, #2
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	5e9b      	ldrsh	r3, [r3, r2]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	da03      	bge.n	800d8c0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	22b8      	movs	r2, #184	@ 0xb8
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d8c0:	1cbb      	adds	r3, r7, #2
 800d8c2:	881b      	ldrh	r3, [r3, #0]
 800d8c4:	2b10      	cmp	r3, #16
 800d8c6:	d103      	bne.n	800d8d0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2290      	movs	r2, #144	@ 0x90
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d8d0:	1cbb      	adds	r3, r7, #2
 800d8d2:	881b      	ldrh	r3, [r3, #0]
 800d8d4:	2b20      	cmp	r3, #32
 800d8d6:	d103      	bne.n	800d8e0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2220      	movs	r2, #32
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d8e0:	1cbb      	adds	r3, r7, #2
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	2b40      	cmp	r3, #64	@ 0x40
 800d8e6:	d103      	bne.n	800d8f0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2240      	movs	r2, #64	@ 0x40
 800d8ec:	4313      	orrs	r3, r2
 800d8ee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	43d9      	mvns	r1, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	400a      	ands	r2, r1
 800d900:	601a      	str	r2, [r3, #0]
}
 800d902:	46c0      	nop			@ (mov r8, r8)
 800d904:	46bd      	mov	sp, r7
 800d906:	b004      	add	sp, #16
 800d908:	bd80      	pop	{r7, pc}
	...

0800d90c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2241      	movs	r2, #65	@ 0x41
 800d91a:	5c9b      	ldrb	r3, [r3, r2]
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b20      	cmp	r3, #32
 800d920:	d138      	bne.n	800d994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2240      	movs	r2, #64	@ 0x40
 800d926:	5c9b      	ldrb	r3, [r3, r2]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d101      	bne.n	800d930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d92c:	2302      	movs	r3, #2
 800d92e:	e032      	b.n	800d996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2240      	movs	r2, #64	@ 0x40
 800d934:	2101      	movs	r1, #1
 800d936:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2241      	movs	r2, #65	@ 0x41
 800d93c:	2124      	movs	r1, #36	@ 0x24
 800d93e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2101      	movs	r1, #1
 800d94c:	438a      	bics	r2, r1
 800d94e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4911      	ldr	r1, [pc, #68]	@ (800d9a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d95c:	400a      	ands	r2, r1
 800d95e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6819      	ldr	r1, [r3, #0]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	430a      	orrs	r2, r1
 800d96e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2101      	movs	r1, #1
 800d97c:	430a      	orrs	r2, r1
 800d97e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2241      	movs	r2, #65	@ 0x41
 800d984:	2120      	movs	r1, #32
 800d986:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2240      	movs	r2, #64	@ 0x40
 800d98c:	2100      	movs	r1, #0
 800d98e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	e000      	b.n	800d996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d994:	2302      	movs	r3, #2
  }
}
 800d996:	0018      	movs	r0, r3
 800d998:	46bd      	mov	sp, r7
 800d99a:	b002      	add	sp, #8
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	46c0      	nop			@ (mov r8, r8)
 800d9a0:	ffffefff 	.word	0xffffefff

0800d9a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2241      	movs	r2, #65	@ 0x41
 800d9b2:	5c9b      	ldrb	r3, [r3, r2]
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	2b20      	cmp	r3, #32
 800d9b8:	d139      	bne.n	800da2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2240      	movs	r2, #64	@ 0x40
 800d9be:	5c9b      	ldrb	r3, [r3, r2]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d101      	bne.n	800d9c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	e033      	b.n	800da30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2240      	movs	r2, #64	@ 0x40
 800d9cc:	2101      	movs	r1, #1
 800d9ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2241      	movs	r2, #65	@ 0x41
 800d9d4:	2124      	movs	r1, #36	@ 0x24
 800d9d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2101      	movs	r1, #1
 800d9e4:	438a      	bics	r2, r1
 800d9e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	4a11      	ldr	r2, [pc, #68]	@ (800da38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d9f4:	4013      	ands	r3, r2
 800d9f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	021b      	lsls	r3, r3, #8
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	4313      	orrs	r3, r2
 800da00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2101      	movs	r1, #1
 800da16:	430a      	orrs	r2, r1
 800da18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2241      	movs	r2, #65	@ 0x41
 800da1e:	2120      	movs	r1, #32
 800da20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2240      	movs	r2, #64	@ 0x40
 800da26:	2100      	movs	r1, #0
 800da28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	e000      	b.n	800da30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800da2e:	2302      	movs	r3, #2
  }
}
 800da30:	0018      	movs	r0, r3
 800da32:	46bd      	mov	sp, r7
 800da34:	b004      	add	sp, #16
 800da36:	bd80      	pop	{r7, pc}
 800da38:	fffff0ff 	.word	0xfffff0ff

0800da3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b088      	sub	sp, #32
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e0e1      	b.n	800dc12 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2235      	movs	r2, #53	@ 0x35
 800da52:	5c9b      	ldrb	r3, [r3, r2]
 800da54:	b2db      	uxtb	r3, r3
 800da56:	2b00      	cmp	r3, #0
 800da58:	d107      	bne.n	800da6a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2234      	movs	r2, #52	@ 0x34
 800da5e:	2100      	movs	r1, #0
 800da60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	0018      	movs	r0, r3
 800da66:	f7f8 fbd3 	bl	8006210 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2235      	movs	r2, #53	@ 0x35
 800da6e:	2102      	movs	r1, #2
 800da70:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	69da      	ldr	r2, [r3, #28]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4967      	ldr	r1, [pc, #412]	@ (800dc1c <HAL_I2S_Init+0x1e0>)
 800da7e:	400a      	ands	r2, r1
 800da80:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2202      	movs	r2, #2
 800da88:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	695b      	ldr	r3, [r3, #20]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d073      	beq.n	800db7a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d102      	bne.n	800daa0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800da9a:	2310      	movs	r3, #16
 800da9c:	617b      	str	r3, [r7, #20]
 800da9e:	e001      	b.n	800daa4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800daa0:	2320      	movs	r3, #32
 800daa2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	2b20      	cmp	r3, #32
 800daaa:	d802      	bhi.n	800dab2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800dab2:	f002 fe8d 	bl	80107d0 <HAL_RCC_GetSysClockFreq>
 800dab6:	0003      	movs	r3, r0
 800dab8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	691a      	ldr	r2, [r3, #16]
 800dabe:	2380      	movs	r3, #128	@ 0x80
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d131      	bne.n	800db2a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d016      	beq.n	800dafc <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	0019      	movs	r1, r3
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f7f2 fb33 	bl	8000140 <__udivsi3>
 800dada:	0003      	movs	r3, r0
 800dadc:	001a      	movs	r2, r3
 800dade:	0013      	movs	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	189b      	adds	r3, r3, r2
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	001a      	movs	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	695b      	ldr	r3, [r3, #20]
 800daec:	0019      	movs	r1, r3
 800daee:	0010      	movs	r0, r2
 800daf0:	f7f2 fb26 	bl	8000140 <__udivsi3>
 800daf4:	0003      	movs	r3, r0
 800daf6:	3305      	adds	r3, #5
 800daf8:	613b      	str	r3, [r7, #16]
 800dafa:	e02a      	b.n	800db52 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	00db      	lsls	r3, r3, #3
 800db00:	0019      	movs	r1, r3
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f7f2 fb1c 	bl	8000140 <__udivsi3>
 800db08:	0003      	movs	r3, r0
 800db0a:	001a      	movs	r2, r3
 800db0c:	0013      	movs	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	189b      	adds	r3, r3, r2
 800db12:	005b      	lsls	r3, r3, #1
 800db14:	001a      	movs	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	695b      	ldr	r3, [r3, #20]
 800db1a:	0019      	movs	r1, r3
 800db1c:	0010      	movs	r0, r2
 800db1e:	f7f2 fb0f 	bl	8000140 <__udivsi3>
 800db22:	0003      	movs	r3, r0
 800db24:	3305      	adds	r3, #5
 800db26:	613b      	str	r3, [r7, #16]
 800db28:	e013      	b.n	800db52 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800db2a:	6979      	ldr	r1, [r7, #20]
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f7f2 fb07 	bl	8000140 <__udivsi3>
 800db32:	0003      	movs	r3, r0
 800db34:	001a      	movs	r2, r3
 800db36:	0013      	movs	r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	189b      	adds	r3, r3, r2
 800db3c:	005b      	lsls	r3, r3, #1
 800db3e:	001a      	movs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	0019      	movs	r1, r3
 800db46:	0010      	movs	r0, r2
 800db48:	f7f2 fafa 	bl	8000140 <__udivsi3>
 800db4c:	0003      	movs	r3, r0
 800db4e:	3305      	adds	r3, #5
 800db50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	210a      	movs	r1, #10
 800db56:	0018      	movs	r0, r3
 800db58:	f7f2 faf2 	bl	8000140 <__udivsi3>
 800db5c:	0003      	movs	r3, r0
 800db5e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	2201      	movs	r2, #1
 800db64:	4013      	ands	r3, r2
 800db66:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800db68:	693a      	ldr	r2, [r7, #16]
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	1ad3      	subs	r3, r2, r3
 800db6e:	085b      	lsrs	r3, r3, #1
 800db70:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	021b      	lsls	r3, r3, #8
 800db76:	61bb      	str	r3, [r7, #24]
 800db78:	e003      	b.n	800db82 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800db7a:	2302      	movs	r3, #2
 800db7c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800db7e:	2300      	movs	r3, #0
 800db80:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	2b01      	cmp	r3, #1
 800db86:	d902      	bls.n	800db8e <HAL_I2S_Init+0x152>
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	2bff      	cmp	r3, #255	@ 0xff
 800db8c:	d907      	bls.n	800db9e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db92:	2210      	movs	r2, #16
 800db94:	431a      	orrs	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	e039      	b.n	800dc12 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	691a      	ldr	r2, [r3, #16]
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	431a      	orrs	r2, r3
 800dba6:	0011      	movs	r1, r2
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	69fa      	ldr	r2, [r7, #28]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	69db      	ldr	r3, [r3, #28]
 800dbb8:	4a18      	ldr	r2, [pc, #96]	@ (800dc1c <HAL_I2S_Init+0x1e0>)
 800dbba:	401a      	ands	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6859      	ldr	r1, [r3, #4]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	4319      	orrs	r1, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	4319      	orrs	r1, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	699b      	ldr	r3, [r3, #24]
 800dbd0:	430b      	orrs	r3, r1
 800dbd2:	431a      	orrs	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2180      	movs	r1, #128	@ 0x80
 800dbda:	0109      	lsls	r1, r1, #4
 800dbdc:	430a      	orrs	r2, r1
 800dbde:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	2b30      	cmp	r3, #48	@ 0x30
 800dbe6:	d003      	beq.n	800dbf0 <HAL_I2S_Init+0x1b4>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	2bb0      	cmp	r3, #176	@ 0xb0
 800dbee:	d108      	bne.n	800dc02 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	69da      	ldr	r2, [r3, #28]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2180      	movs	r1, #128	@ 0x80
 800dbfc:	0149      	lsls	r1, r1, #5
 800dbfe:	430a      	orrs	r2, r1
 800dc00:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2235      	movs	r2, #53	@ 0x35
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc10:	2300      	movs	r3, #0
}
 800dc12:	0018      	movs	r0, r3
 800dc14:	46bd      	mov	sp, r7
 800dc16:	b008      	add	sp, #32
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	46c0      	nop			@ (mov r8, r8)
 800dc1c:	fffff040 	.word	0xfffff040

0800dc20 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d101      	bne.n	800dc32 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e01b      	b.n	800dc6a <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2235      	movs	r2, #53	@ 0x35
 800dc36:	2102      	movs	r1, #2
 800dc38:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	69da      	ldr	r2, [r3, #28]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	490b      	ldr	r1, [pc, #44]	@ (800dc74 <HAL_I2S_DeInit+0x54>)
 800dc46:	400a      	ands	r2, r1
 800dc48:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	0018      	movs	r0, r3
 800dc4e:	f7f8 fb53 	bl	80062f8 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2235      	movs	r2, #53	@ 0x35
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2234      	movs	r2, #52	@ 0x34
 800dc64:	2100      	movs	r1, #0
 800dc66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	b002      	add	sp, #8
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	46c0      	nop			@ (mov r8, r8)
 800dc74:	fffffbff 	.word	0xfffffbff

0800dc78 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	1dbb      	adds	r3, r7, #6
 800dc84:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d003      	beq.n	800dc94 <HAL_I2S_Receive_DMA+0x1c>
 800dc8c:	1dbb      	adds	r3, r7, #6
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d101      	bne.n	800dc98 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800dc94:	2301      	movs	r3, #1
 800dc96:	e0a6      	b.n	800dde6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2234      	movs	r2, #52	@ 0x34
 800dc9c:	5c9b      	ldrb	r3, [r3, r2]
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d101      	bne.n	800dca8 <HAL_I2S_Receive_DMA+0x30>
 800dca4:	2302      	movs	r3, #2
 800dca6:	e09e      	b.n	800dde6 <HAL_I2S_Receive_DMA+0x16e>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2234      	movs	r2, #52	@ 0x34
 800dcac:	2101      	movs	r1, #1
 800dcae:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2235      	movs	r2, #53	@ 0x35
 800dcb4:	5c9b      	ldrb	r3, [r3, r2]
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d005      	beq.n	800dcc8 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2234      	movs	r2, #52	@ 0x34
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	e08e      	b.n	800dde6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2235      	movs	r2, #53	@ 0x35
 800dccc:	2104      	movs	r1, #4
 800dcce:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	69db      	ldr	r3, [r3, #28]
 800dce2:	2207      	movs	r2, #7
 800dce4:	4013      	ands	r3, r2
 800dce6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	2b03      	cmp	r3, #3
 800dcec:	d002      	beq.n	800dcf4 <HAL_I2S_Receive_DMA+0x7c>
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2b05      	cmp	r3, #5
 800dcf2:	d10c      	bne.n	800dd0e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800dcf4:	1dbb      	adds	r3, r7, #6
 800dcf6:	881b      	ldrh	r3, [r3, #0]
 800dcf8:	18db      	adds	r3, r3, r3
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800dd00:	1dbb      	adds	r3, r7, #6
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	18db      	adds	r3, r3, r3
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dd0c:	e007      	b.n	800dd1e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	1dba      	adds	r2, r7, #6
 800dd12:	8812      	ldrh	r2, [r2, #0]
 800dd14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	1dba      	adds	r2, r7, #6
 800dd1a:	8812      	ldrh	r2, [r2, #0]
 800dd1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd22:	4a33      	ldr	r2, [pc, #204]	@ (800ddf0 <HAL_I2S_Receive_DMA+0x178>)
 800dd24:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd2a:	4a32      	ldr	r2, [pc, #200]	@ (800ddf4 <HAL_I2S_Receive_DMA+0x17c>)
 800dd2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd32:	4a31      	ldr	r2, [pc, #196]	@ (800ddf8 <HAL_I2S_Receive_DMA+0x180>)
 800dd34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	69da      	ldr	r2, [r3, #28]
 800dd3c:	23c0      	movs	r3, #192	@ 0xc0
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	401a      	ands	r2, r3
 800dd42:	23c0      	movs	r3, #192	@ 0xc0
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d10a      	bne.n	800dd60 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	613b      	str	r3, [r7, #16]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	613b      	str	r3, [r7, #16]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	613b      	str	r3, [r7, #16]
 800dd5e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	330c      	adds	r3, #12
 800dd6a:	0019      	movs	r1, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd70:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800dd78:	f7fd f812 	bl	800ada0 <HAL_DMA_Start_IT>
 800dd7c:	1e03      	subs	r3, r0, #0
 800dd7e:	d00f      	beq.n	800dda0 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd84:	2208      	movs	r2, #8
 800dd86:	431a      	orrs	r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2235      	movs	r2, #53	@ 0x35
 800dd90:	2101      	movs	r1, #1
 800dd92:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2234      	movs	r2, #52	@ 0x34
 800dd98:	2100      	movs	r1, #0
 800dd9a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	e022      	b.n	800dde6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	69da      	ldr	r2, [r3, #28]
 800dda6:	2380      	movs	r3, #128	@ 0x80
 800dda8:	00db      	lsls	r3, r3, #3
 800ddaa:	4013      	ands	r3, r2
 800ddac:	d108      	bne.n	800ddc0 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	69da      	ldr	r2, [r3, #28]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2180      	movs	r1, #128	@ 0x80
 800ddba:	00c9      	lsls	r1, r1, #3
 800ddbc:	430a      	orrs	r2, r1
 800ddbe:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	4013      	ands	r3, r2
 800ddca:	d107      	bne.n	800dddc <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2101      	movs	r1, #1
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2234      	movs	r2, #52	@ 0x34
 800dde0:	2100      	movs	r1, #0
 800dde2:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	0018      	movs	r0, r3
 800dde8:	46bd      	mov	sp, r7
 800ddea:	b006      	add	sp, #24
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	46c0      	nop			@ (mov r8, r8)
 800ddf0:	0800dff9 	.word	0x0800dff9
 800ddf4:	0800dfb5 	.word	0x0800dfb5
 800ddf8:	0800e017 	.word	0x0800e017

0800ddfc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de04:	2317      	movs	r3, #23
 800de06:	18fb      	adds	r3, r7, r3
 800de08:	2200      	movs	r2, #0
 800de0a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	685a      	ldr	r2, [r3, #4]
 800de10:	2380      	movs	r3, #128	@ 0x80
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	429a      	cmp	r2, r3
 800de16:	d003      	beq.n	800de20 <HAL_I2S_DMAStop+0x24>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d158      	bne.n	800ded2 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de24:	2b00      	cmp	r3, #0
 800de26:	d010      	beq.n	800de4a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de2c:	0018      	movs	r0, r3
 800de2e:	f7fd f81d 	bl	800ae6c <HAL_DMA_Abort>
 800de32:	1e03      	subs	r3, r0, #0
 800de34:	d009      	beq.n	800de4a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de3a:	2208      	movs	r2, #8
 800de3c:	431a      	orrs	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800de42:	2317      	movs	r3, #23
 800de44:	18fb      	adds	r3, r7, r3
 800de46:	2201      	movs	r2, #1
 800de48:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	2364      	movs	r3, #100	@ 0x64
 800de4e:	2201      	movs	r2, #1
 800de50:	2102      	movs	r1, #2
 800de52:	f000 f907 	bl	800e064 <I2S_WaitFlagStateUntilTimeout>
 800de56:	1e03      	subs	r3, r0, #0
 800de58:	d00d      	beq.n	800de76 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de5e:	2201      	movs	r2, #1
 800de60:	431a      	orrs	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2235      	movs	r2, #53	@ 0x35
 800de6a:	2101      	movs	r1, #1
 800de6c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800de6e:	2317      	movs	r3, #23
 800de70:	18fb      	adds	r3, r7, r3
 800de72:	2201      	movs	r2, #1
 800de74:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	2364      	movs	r3, #100	@ 0x64
 800de7a:	2200      	movs	r2, #0
 800de7c:	2180      	movs	r1, #128	@ 0x80
 800de7e:	f000 f8f1 	bl	800e064 <I2S_WaitFlagStateUntilTimeout>
 800de82:	1e03      	subs	r3, r0, #0
 800de84:	d00d      	beq.n	800dea2 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de8a:	2201      	movs	r2, #1
 800de8c:	431a      	orrs	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2235      	movs	r2, #53	@ 0x35
 800de96:	2101      	movs	r1, #1
 800de98:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800de9a:	2317      	movs	r3, #23
 800de9c:	18fb      	adds	r3, r7, r3
 800de9e:	2201      	movs	r2, #1
 800dea0:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	69da      	ldr	r2, [r3, #28]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4938      	ldr	r1, [pc, #224]	@ (800df90 <HAL_I2S_DMAStop+0x194>)
 800deae:	400a      	ands	r2, r1
 800deb0:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800deb2:	2300      	movs	r3, #0
 800deb4:	613b      	str	r3, [r7, #16]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	613b      	str	r3, [r7, #16]
 800debe:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	685a      	ldr	r2, [r3, #4]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2102      	movs	r1, #2
 800decc:	438a      	bics	r2, r1
 800dece:	605a      	str	r2, [r3, #4]
 800ded0:	e053      	b.n	800df7a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	23c0      	movs	r3, #192	@ 0xc0
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	429a      	cmp	r2, r3
 800dedc:	d005      	beq.n	800deea <HAL_I2S_DMAStop+0xee>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	2380      	movs	r3, #128	@ 0x80
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d147      	bne.n	800df7a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deee:	2b00      	cmp	r3, #0
 800def0:	d010      	beq.n	800df14 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800def6:	0018      	movs	r0, r3
 800def8:	f7fc ffb8 	bl	800ae6c <HAL_DMA_Abort>
 800defc:	1e03      	subs	r3, r0, #0
 800defe:	d009      	beq.n	800df14 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df04:	2208      	movs	r2, #8
 800df06:	431a      	orrs	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800df0c:	2317      	movs	r3, #23
 800df0e:	18fb      	adds	r3, r7, r3
 800df10:	2201      	movs	r2, #1
 800df12:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	69da      	ldr	r2, [r3, #28]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	491c      	ldr	r1, [pc, #112]	@ (800df90 <HAL_I2S_DMAStop+0x194>)
 800df20:	400a      	ands	r2, r1
 800df22:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800df24:	2300      	movs	r3, #0
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	60fb      	str	r3, [r7, #12]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	60fb      	str	r3, [r7, #12]
 800df38:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2101      	movs	r1, #1
 800df46:	438a      	bics	r2, r1
 800df48:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	685a      	ldr	r2, [r3, #4]
 800df4e:	2380      	movs	r3, #128	@ 0x80
 800df50:	005b      	lsls	r3, r3, #1
 800df52:	429a      	cmp	r2, r3
 800df54:	d10e      	bne.n	800df74 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df5a:	2240      	movs	r2, #64	@ 0x40
 800df5c:	431a      	orrs	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2235      	movs	r2, #53	@ 0x35
 800df66:	2101      	movs	r1, #1
 800df68:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800df6a:	2317      	movs	r3, #23
 800df6c:	18fb      	adds	r3, r7, r3
 800df6e:	2201      	movs	r2, #1
 800df70:	701a      	strb	r2, [r3, #0]
 800df72:	e002      	b.n	800df7a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2235      	movs	r2, #53	@ 0x35
 800df7e:	2101      	movs	r1, #1
 800df80:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800df82:	2317      	movs	r3, #23
 800df84:	18fb      	adds	r3, r7, r3
 800df86:	781b      	ldrb	r3, [r3, #0]
}
 800df88:	0018      	movs	r0, r3
 800df8a:	46bd      	mov	sp, r7
 800df8c:	b006      	add	sp, #24
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	fffffbff 	.word	0xfffffbff

0800df94 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800df9c:	46c0      	nop			@ (mov r8, r8)
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	b002      	add	sp, #8
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800dfac:	46c0      	nop			@ (mov r8, r8)
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	b002      	add	sp, #8
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfc0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	69db      	ldr	r3, [r3, #28]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d10e      	bne.n	800dfe8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	685a      	ldr	r2, [r3, #4]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	438a      	bics	r2, r1
 800dfd8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2200      	movs	r2, #0
 800dfde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2235      	movs	r2, #53	@ 0x35
 800dfe4:	2101      	movs	r1, #1
 800dfe6:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	0018      	movs	r0, r3
 800dfec:	f7f9 f9b4 	bl	8007358 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dff0:	46c0      	nop			@ (mov r8, r8)
 800dff2:	46bd      	mov	sp, r7
 800dff4:	b004      	add	sp, #16
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e004:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	0018      	movs	r0, r3
 800e00a:	f7ff ffc3 	bl	800df94 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800e00e:	46c0      	nop			@ (mov r8, r8)
 800e010:	46bd      	mov	sp, r7
 800e012:	b004      	add	sp, #16
 800e014:	bd80      	pop	{r7, pc}

0800e016 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e022:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2103      	movs	r1, #3
 800e030:	438a      	bics	r2, r1
 800e032:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2200      	movs	r2, #0
 800e038:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2235      	movs	r2, #53	@ 0x35
 800e044:	2101      	movs	r1, #1
 800e046:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e04c:	2208      	movs	r2, #8
 800e04e:	431a      	orrs	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	0018      	movs	r0, r3
 800e058:	f7ff ffa4 	bl	800dfa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800e05c:	46c0      	nop			@ (mov r8, r8)
 800e05e:	46bd      	mov	sp, r7
 800e060:	b004      	add	sp, #16
 800e062:	bd80      	pop	{r7, pc}

0800e064 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	603b      	str	r3, [r7, #0]
 800e070:	1dfb      	adds	r3, r7, #7
 800e072:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800e074:	f7fc f916 	bl	800a2a4 <HAL_GetTick>
 800e078:	0003      	movs	r3, r0
 800e07a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800e07c:	e017      	b.n	800e0ae <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	3301      	adds	r3, #1
 800e082:	d014      	beq.n	800e0ae <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800e084:	f7fc f90e 	bl	800a2a4 <HAL_GetTick>
 800e088:	0002      	movs	r2, r0
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	1ad3      	subs	r3, r2, r3
 800e08e:	683a      	ldr	r2, [r7, #0]
 800e090:	429a      	cmp	r2, r3
 800e092:	d902      	bls.n	800e09a <I2S_WaitFlagStateUntilTimeout+0x36>
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d109      	bne.n	800e0ae <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2235      	movs	r2, #53	@ 0x35
 800e09e:	2101      	movs	r1, #1
 800e0a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2234      	movs	r2, #52	@ 0x34
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e0aa:	2303      	movs	r3, #3
 800e0ac:	e00f      	b.n	800e0ce <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	68ba      	ldr	r2, [r7, #8]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	425a      	negs	r2, r3
 800e0be:	4153      	adcs	r3, r2
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	001a      	movs	r2, r3
 800e0c4:	1dfb      	adds	r3, r7, #7
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d1d8      	bne.n	800e07e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800e0cc:	2300      	movs	r3, #0
}
 800e0ce:	0018      	movs	r0, r3
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	b006      	add	sp, #24
 800e0d4:	bd80      	pop	{r7, pc}
	...

0800e0d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0da:	b08b      	sub	sp, #44	@ 0x2c
 800e0dc:	af06      	add	r7, sp, #24
 800e0de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d101      	bne.n	800e0ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e0f0      	b.n	800e2cc <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	4a79      	ldr	r2, [pc, #484]	@ (800e2d4 <HAL_PCD_Init+0x1fc>)
 800e0ee:	5c9b      	ldrb	r3, [r3, r2]
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d108      	bne.n	800e108 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	23aa      	movs	r3, #170	@ 0xaa
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	0018      	movs	r0, r3
 800e104:	f009 f8d8 	bl	80172b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4a72      	ldr	r2, [pc, #456]	@ (800e2d4 <HAL_PCD_Init+0x1fc>)
 800e10c:	2103      	movs	r1, #3
 800e10e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	0018      	movs	r0, r3
 800e116:	f005 f88b 	bl	8013230 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e11a:	230f      	movs	r3, #15
 800e11c:	18fb      	adds	r3, r7, r3
 800e11e:	2200      	movs	r2, #0
 800e120:	701a      	strb	r2, [r3, #0]
 800e122:	e049      	b.n	800e1b8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e124:	200f      	movs	r0, #15
 800e126:	183b      	adds	r3, r7, r0
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	1c5a      	adds	r2, r3, #1
 800e12e:	0013      	movs	r3, r2
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	189b      	adds	r3, r3, r2
 800e134:	00db      	lsls	r3, r3, #3
 800e136:	18cb      	adds	r3, r1, r3
 800e138:	3301      	adds	r3, #1
 800e13a:	2201      	movs	r2, #1
 800e13c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e13e:	183b      	adds	r3, r7, r0
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	6879      	ldr	r1, [r7, #4]
 800e144:	1c5a      	adds	r2, r3, #1
 800e146:	0013      	movs	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	189b      	adds	r3, r3, r2
 800e14c:	00db      	lsls	r3, r3, #3
 800e14e:	183a      	adds	r2, r7, r0
 800e150:	7812      	ldrb	r2, [r2, #0]
 800e152:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e154:	183b      	adds	r3, r7, r0
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	6879      	ldr	r1, [r7, #4]
 800e15a:	1c5a      	adds	r2, r3, #1
 800e15c:	0013      	movs	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	189b      	adds	r3, r3, r2
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	18cb      	adds	r3, r1, r3
 800e166:	3303      	adds	r3, #3
 800e168:	2200      	movs	r2, #0
 800e16a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e16c:	183b      	adds	r3, r7, r0
 800e16e:	781a      	ldrb	r2, [r3, #0]
 800e170:	6879      	ldr	r1, [r7, #4]
 800e172:	0013      	movs	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	189b      	adds	r3, r3, r2
 800e178:	00db      	lsls	r3, r3, #3
 800e17a:	18cb      	adds	r3, r1, r3
 800e17c:	3338      	adds	r3, #56	@ 0x38
 800e17e:	2200      	movs	r2, #0
 800e180:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e182:	183b      	adds	r3, r7, r0
 800e184:	781a      	ldrb	r2, [r3, #0]
 800e186:	6879      	ldr	r1, [r7, #4]
 800e188:	0013      	movs	r3, r2
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	189b      	adds	r3, r3, r2
 800e18e:	00db      	lsls	r3, r3, #3
 800e190:	18cb      	adds	r3, r1, r3
 800e192:	333c      	adds	r3, #60	@ 0x3c
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e198:	183b      	adds	r3, r7, r0
 800e19a:	781a      	ldrb	r2, [r3, #0]
 800e19c:	6879      	ldr	r1, [r7, #4]
 800e19e:	0013      	movs	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	189b      	adds	r3, r3, r2
 800e1a4:	00db      	lsls	r3, r3, #3
 800e1a6:	18cb      	adds	r3, r1, r3
 800e1a8:	3340      	adds	r3, #64	@ 0x40
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e1ae:	183b      	adds	r3, r7, r0
 800e1b0:	781a      	ldrb	r2, [r3, #0]
 800e1b2:	183b      	adds	r3, r7, r0
 800e1b4:	3201      	adds	r2, #1
 800e1b6:	701a      	strb	r2, [r3, #0]
 800e1b8:	210f      	movs	r1, #15
 800e1ba:	187b      	adds	r3, r7, r1
 800e1bc:	781a      	ldrb	r2, [r3, #0]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d3ae      	bcc.n	800e124 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e1c6:	187b      	adds	r3, r7, r1
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	701a      	strb	r2, [r3, #0]
 800e1cc:	e056      	b.n	800e27c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e1ce:	240f      	movs	r4, #15
 800e1d0:	193b      	adds	r3, r7, r4
 800e1d2:	781a      	ldrb	r2, [r3, #0]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	236a      	movs	r3, #106	@ 0x6a
 800e1d8:	33ff      	adds	r3, #255	@ 0xff
 800e1da:	0019      	movs	r1, r3
 800e1dc:	0013      	movs	r3, r2
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	189b      	adds	r3, r3, r2
 800e1e2:	00db      	lsls	r3, r3, #3
 800e1e4:	18c3      	adds	r3, r0, r3
 800e1e6:	185b      	adds	r3, r3, r1
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e1ec:	193b      	adds	r3, r7, r4
 800e1ee:	781a      	ldrb	r2, [r3, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	23b4      	movs	r3, #180	@ 0xb4
 800e1f4:	0059      	lsls	r1, r3, #1
 800e1f6:	0013      	movs	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	189b      	adds	r3, r3, r2
 800e1fc:	00db      	lsls	r3, r3, #3
 800e1fe:	18c3      	adds	r3, r0, r3
 800e200:	185b      	adds	r3, r3, r1
 800e202:	193a      	adds	r2, r7, r4
 800e204:	7812      	ldrb	r2, [r2, #0]
 800e206:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e208:	193b      	adds	r3, r7, r4
 800e20a:	781a      	ldrb	r2, [r3, #0]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	236c      	movs	r3, #108	@ 0x6c
 800e210:	33ff      	adds	r3, #255	@ 0xff
 800e212:	0019      	movs	r1, r3
 800e214:	0013      	movs	r3, r2
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	189b      	adds	r3, r3, r2
 800e21a:	00db      	lsls	r3, r3, #3
 800e21c:	18c3      	adds	r3, r0, r3
 800e21e:	185b      	adds	r3, r3, r1
 800e220:	2200      	movs	r2, #0
 800e222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e224:	193b      	adds	r3, r7, r4
 800e226:	781a      	ldrb	r2, [r3, #0]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	23bc      	movs	r3, #188	@ 0xbc
 800e22c:	0059      	lsls	r1, r3, #1
 800e22e:	0013      	movs	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	189b      	adds	r3, r3, r2
 800e234:	00db      	lsls	r3, r3, #3
 800e236:	18c3      	adds	r3, r0, r3
 800e238:	185b      	adds	r3, r3, r1
 800e23a:	2200      	movs	r2, #0
 800e23c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e23e:	193b      	adds	r3, r7, r4
 800e240:	781a      	ldrb	r2, [r3, #0]
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	23be      	movs	r3, #190	@ 0xbe
 800e246:	0059      	lsls	r1, r3, #1
 800e248:	0013      	movs	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	189b      	adds	r3, r3, r2
 800e24e:	00db      	lsls	r3, r3, #3
 800e250:	18c3      	adds	r3, r0, r3
 800e252:	185b      	adds	r3, r3, r1
 800e254:	2200      	movs	r2, #0
 800e256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e258:	193b      	adds	r3, r7, r4
 800e25a:	781a      	ldrb	r2, [r3, #0]
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	23c0      	movs	r3, #192	@ 0xc0
 800e260:	0059      	lsls	r1, r3, #1
 800e262:	0013      	movs	r3, r2
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	189b      	adds	r3, r3, r2
 800e268:	00db      	lsls	r3, r3, #3
 800e26a:	18c3      	adds	r3, r0, r3
 800e26c:	185b      	adds	r3, r3, r1
 800e26e:	2200      	movs	r2, #0
 800e270:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e272:	193b      	adds	r3, r7, r4
 800e274:	781a      	ldrb	r2, [r3, #0]
 800e276:	193b      	adds	r3, r7, r4
 800e278:	3201      	adds	r2, #1
 800e27a:	701a      	strb	r2, [r3, #0]
 800e27c:	230f      	movs	r3, #15
 800e27e:	18fb      	adds	r3, r7, r3
 800e280:	781a      	ldrb	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	429a      	cmp	r2, r3
 800e288:	d3a1      	bcc.n	800e1ce <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6818      	ldr	r0, [r3, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	466a      	mov	r2, sp
 800e292:	0011      	movs	r1, r2
 800e294:	001a      	movs	r2, r3
 800e296:	3210      	adds	r2, #16
 800e298:	ca70      	ldmia	r2!, {r4, r5, r6}
 800e29a:	c170      	stmia	r1!, {r4, r5, r6}
 800e29c:	ca30      	ldmia	r2!, {r4, r5}
 800e29e:	c130      	stmia	r1!, {r4, r5}
 800e2a0:	6859      	ldr	r1, [r3, #4]
 800e2a2:	689a      	ldr	r2, [r3, #8]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	f004 ffdd 	bl	8013264 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2224      	movs	r2, #36	@ 0x24
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4a07      	ldr	r2, [pc, #28]	@ (800e2d4 <HAL_PCD_Init+0x1fc>)
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	69db      	ldr	r3, [r3, #28]
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d103      	bne.n	800e2ca <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	0018      	movs	r0, r3
 800e2c6:	f001 fd23 	bl	800fd10 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800e2ca:	2300      	movs	r3, #0
}
 800e2cc:	0018      	movs	r0, r3
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	b005      	add	sp, #20
 800e2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2d4:	000002a9 	.word	0x000002a9

0800e2d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	23aa      	movs	r3, #170	@ 0xaa
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	5cd3      	ldrb	r3, [r2, r3]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d101      	bne.n	800e2f0 <HAL_PCD_Start+0x18>
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	e014      	b.n	800e31a <HAL_PCD_Start+0x42>
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	23aa      	movs	r3, #170	@ 0xaa
 800e2f4:	009b      	lsls	r3, r3, #2
 800e2f6:	2101      	movs	r1, #1
 800e2f8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	0018      	movs	r0, r3
 800e300:	f004 ff80 	bl	8013204 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	0018      	movs	r0, r3
 800e30a:	f006 ff83 	bl	8015214 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	23aa      	movs	r3, #170	@ 0xaa
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	2100      	movs	r1, #0
 800e316:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e318:	2300      	movs	r3, #0
}
 800e31a:	0018      	movs	r0, r3
 800e31c:	46bd      	mov	sp, r7
 800e31e:	b002      	add	sp, #8
 800e320:	bd80      	pop	{r7, pc}
	...

0800e324 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	0018      	movs	r0, r3
 800e332:	f006 ff85 	bl	8015240 <USB_ReadInterrupts>
 800e336:	0003      	movs	r3, r0
 800e338:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	2380      	movs	r3, #128	@ 0x80
 800e33e:	021b      	lsls	r3, r3, #8
 800e340:	4013      	ands	r3, r2
 800e342:	d004      	beq.n	800e34e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	0018      	movs	r0, r3
 800e348:	f000 fb62 	bl	800ea10 <PCD_EP_ISR_Handler>

    return;
 800e34c:	e11d      	b.n	800e58a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	2380      	movs	r3, #128	@ 0x80
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	4013      	ands	r3, r2
 800e356:	d015      	beq.n	800e384 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2244      	movs	r2, #68	@ 0x44
 800e35e:	5a9b      	ldrh	r3, [r3, r2]
 800e360:	b29a      	uxth	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	498a      	ldr	r1, [pc, #552]	@ (800e590 <HAL_PCD_IRQHandler+0x26c>)
 800e368:	400a      	ands	r2, r1
 800e36a:	b291      	uxth	r1, r2
 800e36c:	2244      	movs	r2, #68	@ 0x44
 800e36e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	0018      	movs	r0, r3
 800e374:	f009 f823 	bl	80173be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2100      	movs	r1, #0
 800e37c:	0018      	movs	r0, r3
 800e37e:	f000 f915 	bl	800e5ac <HAL_PCD_SetAddress>

    return;
 800e382:	e102      	b.n	800e58a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	2380      	movs	r3, #128	@ 0x80
 800e388:	01db      	lsls	r3, r3, #7
 800e38a:	4013      	ands	r3, r2
 800e38c:	d00c      	beq.n	800e3a8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2244      	movs	r2, #68	@ 0x44
 800e394:	5a9b      	ldrh	r3, [r3, r2]
 800e396:	b29a      	uxth	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	497d      	ldr	r1, [pc, #500]	@ (800e594 <HAL_PCD_IRQHandler+0x270>)
 800e39e:	400a      	ands	r2, r1
 800e3a0:	b291      	uxth	r1, r2
 800e3a2:	2244      	movs	r2, #68	@ 0x44
 800e3a4:	5299      	strh	r1, [r3, r2]

    return;
 800e3a6:	e0f0      	b.n	800e58a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	2380      	movs	r3, #128	@ 0x80
 800e3ac:	019b      	lsls	r3, r3, #6
 800e3ae:	4013      	ands	r3, r2
 800e3b0:	d00c      	beq.n	800e3cc <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	2244      	movs	r2, #68	@ 0x44
 800e3b8:	5a9b      	ldrh	r3, [r3, r2]
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4975      	ldr	r1, [pc, #468]	@ (800e598 <HAL_PCD_IRQHandler+0x274>)
 800e3c2:	400a      	ands	r2, r1
 800e3c4:	b291      	uxth	r1, r2
 800e3c6:	2244      	movs	r2, #68	@ 0x44
 800e3c8:	5299      	strh	r1, [r3, r2]

    return;
 800e3ca:	e0de      	b.n	800e58a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	2380      	movs	r3, #128	@ 0x80
 800e3d0:	015b      	lsls	r3, r3, #5
 800e3d2:	4013      	ands	r3, r2
 800e3d4:	d038      	beq.n	800e448 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2240      	movs	r2, #64	@ 0x40
 800e3dc:	5a9b      	ldrh	r3, [r3, r2]
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2104      	movs	r1, #4
 800e3e6:	438a      	bics	r2, r1
 800e3e8:	b291      	uxth	r1, r2
 800e3ea:	2240      	movs	r2, #64	@ 0x40
 800e3ec:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2240      	movs	r2, #64	@ 0x40
 800e3f4:	5a9b      	ldrh	r3, [r3, r2]
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2108      	movs	r1, #8
 800e3fe:	438a      	bics	r2, r1
 800e400:	b291      	uxth	r1, r2
 800e402:	2240      	movs	r2, #64	@ 0x40
 800e404:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	23b8      	movs	r3, #184	@ 0xb8
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	5cd3      	ldrb	r3, [r2, r3]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d109      	bne.n	800e426 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	23b8      	movs	r3, #184	@ 0xb8
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	2100      	movs	r1, #0
 800e41a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2100      	movs	r1, #0
 800e420:	0018      	movs	r0, r3
 800e422:	f001 fc9f 	bl	800fd64 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	0018      	movs	r0, r3
 800e42a:	f009 f809 	bl	8017440 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2244      	movs	r2, #68	@ 0x44
 800e434:	5a9b      	ldrh	r3, [r3, r2]
 800e436:	b29a      	uxth	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4957      	ldr	r1, [pc, #348]	@ (800e59c <HAL_PCD_IRQHandler+0x278>)
 800e43e:	400a      	ands	r2, r1
 800e440:	b291      	uxth	r1, r2
 800e442:	2244      	movs	r2, #68	@ 0x44
 800e444:	5299      	strh	r1, [r3, r2]

    return;
 800e446:	e0a0      	b.n	800e58a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	2380      	movs	r3, #128	@ 0x80
 800e44c:	011b      	lsls	r3, r3, #4
 800e44e:	4013      	ands	r3, r2
 800e450:	d028      	beq.n	800e4a4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2240      	movs	r2, #64	@ 0x40
 800e458:	5a9b      	ldrh	r3, [r3, r2]
 800e45a:	b29a      	uxth	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2108      	movs	r1, #8
 800e462:	430a      	orrs	r2, r1
 800e464:	b291      	uxth	r1, r2
 800e466:	2240      	movs	r2, #64	@ 0x40
 800e468:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2244      	movs	r2, #68	@ 0x44
 800e470:	5a9b      	ldrh	r3, [r3, r2]
 800e472:	b29a      	uxth	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4949      	ldr	r1, [pc, #292]	@ (800e5a0 <HAL_PCD_IRQHandler+0x27c>)
 800e47a:	400a      	ands	r2, r1
 800e47c:	b291      	uxth	r1, r2
 800e47e:	2244      	movs	r2, #68	@ 0x44
 800e480:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2240      	movs	r2, #64	@ 0x40
 800e488:	5a9b      	ldrh	r3, [r3, r2]
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2104      	movs	r1, #4
 800e492:	430a      	orrs	r2, r1
 800e494:	b291      	uxth	r1, r2
 800e496:	2240      	movs	r2, #64	@ 0x40
 800e498:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	0018      	movs	r0, r3
 800e49e:	f008 ffb3 	bl	8017408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e4a2:	e072      	b.n	800e58a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2280      	movs	r2, #128	@ 0x80
 800e4a8:	4013      	ands	r3, r2
 800e4aa:	d046      	beq.n	800e53a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2244      	movs	r2, #68	@ 0x44
 800e4b2:	5a9b      	ldrh	r3, [r3, r2]
 800e4b4:	b29a      	uxth	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2180      	movs	r1, #128	@ 0x80
 800e4bc:	438a      	bics	r2, r1
 800e4be:	b291      	uxth	r1, r2
 800e4c0:	2244      	movs	r2, #68	@ 0x44
 800e4c2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	23b8      	movs	r3, #184	@ 0xb8
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	5cd3      	ldrb	r3, [r2, r3]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d12f      	bne.n	800e530 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2240      	movs	r2, #64	@ 0x40
 800e4d6:	5a9b      	ldrh	r3, [r3, r2]
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2104      	movs	r1, #4
 800e4e0:	430a      	orrs	r2, r1
 800e4e2:	b291      	uxth	r1, r2
 800e4e4:	2240      	movs	r2, #64	@ 0x40
 800e4e6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2240      	movs	r2, #64	@ 0x40
 800e4ee:	5a9b      	ldrh	r3, [r3, r2]
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2108      	movs	r1, #8
 800e4f8:	430a      	orrs	r2, r1
 800e4fa:	b291      	uxth	r1, r2
 800e4fc:	2240      	movs	r2, #64	@ 0x40
 800e4fe:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	23b8      	movs	r3, #184	@ 0xb8
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	2101      	movs	r1, #1
 800e508:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2254      	movs	r2, #84	@ 0x54
 800e510:	5a9b      	ldrh	r3, [r3, r2]
 800e512:	b29b      	uxth	r3, r3
 800e514:	089b      	lsrs	r3, r3, #2
 800e516:	223c      	movs	r2, #60	@ 0x3c
 800e518:	4013      	ands	r3, r2
 800e51a:	0019      	movs	r1, r3
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	23b9      	movs	r3, #185	@ 0xb9
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2101      	movs	r1, #1
 800e528:	0018      	movs	r0, r3
 800e52a:	f001 fc1b 	bl	800fd64 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800e52e:	e02c      	b.n	800e58a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	0018      	movs	r0, r3
 800e534:	f008 ff68 	bl	8017408 <HAL_PCD_SuspendCallback>
    return;
 800e538:	e027      	b.n	800e58a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	2380      	movs	r3, #128	@ 0x80
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4013      	ands	r3, r2
 800e542:	d010      	beq.n	800e566 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2244      	movs	r2, #68	@ 0x44
 800e54a:	5a9b      	ldrh	r3, [r3, r2]
 800e54c:	b29a      	uxth	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4914      	ldr	r1, [pc, #80]	@ (800e5a4 <HAL_PCD_IRQHandler+0x280>)
 800e554:	400a      	ands	r2, r1
 800e556:	b291      	uxth	r1, r2
 800e558:	2244      	movs	r2, #68	@ 0x44
 800e55a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	0018      	movs	r0, r3
 800e560:	f008 ff1e 	bl	80173a0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e564:	e011      	b.n	800e58a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800e566:	68fa      	ldr	r2, [r7, #12]
 800e568:	2380      	movs	r3, #128	@ 0x80
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	4013      	ands	r3, r2
 800e56e:	d00c      	beq.n	800e58a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2244      	movs	r2, #68	@ 0x44
 800e576:	5a9b      	ldrh	r3, [r3, r2]
 800e578:	b29a      	uxth	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	490a      	ldr	r1, [pc, #40]	@ (800e5a8 <HAL_PCD_IRQHandler+0x284>)
 800e580:	400a      	ands	r2, r1
 800e582:	b291      	uxth	r1, r2
 800e584:	2244      	movs	r2, #68	@ 0x44
 800e586:	5299      	strh	r1, [r3, r2]

    return;
 800e588:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e58a:	46bd      	mov	sp, r7
 800e58c:	b004      	add	sp, #16
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	fffffbff 	.word	0xfffffbff
 800e594:	ffffbfff 	.word	0xffffbfff
 800e598:	ffffdfff 	.word	0xffffdfff
 800e59c:	ffffefff 	.word	0xffffefff
 800e5a0:	fffff7ff 	.word	0xfffff7ff
 800e5a4:	fffffdff 	.word	0xfffffdff
 800e5a8:	fffffeff 	.word	0xfffffeff

0800e5ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	000a      	movs	r2, r1
 800e5b6:	1cfb      	adds	r3, r7, #3
 800e5b8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	23aa      	movs	r3, #170	@ 0xaa
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	5cd3      	ldrb	r3, [r2, r3]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d101      	bne.n	800e5ca <HAL_PCD_SetAddress+0x1e>
 800e5c6:	2302      	movs	r3, #2
 800e5c8:	e017      	b.n	800e5fa <HAL_PCD_SetAddress+0x4e>
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	23aa      	movs	r3, #170	@ 0xaa
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	1cfa      	adds	r2, r7, #3
 800e5d8:	2124      	movs	r1, #36	@ 0x24
 800e5da:	7812      	ldrb	r2, [r2, #0]
 800e5dc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	1cfb      	adds	r3, r7, #3
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	0019      	movs	r1, r3
 800e5e8:	0010      	movs	r0, r2
 800e5ea:	f006 fdff 	bl	80151ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	23aa      	movs	r3, #170	@ 0xaa
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	0018      	movs	r0, r3
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	b002      	add	sp, #8
 800e600:	bd80      	pop	{r7, pc}

0800e602 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e602:	b590      	push	{r4, r7, lr}
 800e604:	b085      	sub	sp, #20
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
 800e60a:	000c      	movs	r4, r1
 800e60c:	0010      	movs	r0, r2
 800e60e:	0019      	movs	r1, r3
 800e610:	1cfb      	adds	r3, r7, #3
 800e612:	1c22      	adds	r2, r4, #0
 800e614:	701a      	strb	r2, [r3, #0]
 800e616:	003b      	movs	r3, r7
 800e618:	1c02      	adds	r2, r0, #0
 800e61a:	801a      	strh	r2, [r3, #0]
 800e61c:	1cbb      	adds	r3, r7, #2
 800e61e:	1c0a      	adds	r2, r1, #0
 800e620:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e622:	230b      	movs	r3, #11
 800e624:	18fb      	adds	r3, r7, r3
 800e626:	2200      	movs	r2, #0
 800e628:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e62a:	1cfb      	adds	r3, r7, #3
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	b25b      	sxtb	r3, r3
 800e630:	2b00      	cmp	r3, #0
 800e632:	da0f      	bge.n	800e654 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e634:	1cfb      	adds	r3, r7, #3
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2207      	movs	r2, #7
 800e63a:	4013      	ands	r3, r2
 800e63c:	1c5a      	adds	r2, r3, #1
 800e63e:	0013      	movs	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	189b      	adds	r3, r3, r2
 800e644:	00db      	lsls	r3, r3, #3
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	18d3      	adds	r3, r2, r3
 800e64a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2201      	movs	r2, #1
 800e650:	705a      	strb	r2, [r3, #1]
 800e652:	e00f      	b.n	800e674 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e654:	1cfb      	adds	r3, r7, #3
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	2207      	movs	r2, #7
 800e65a:	401a      	ands	r2, r3
 800e65c:	0013      	movs	r3, r2
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	189b      	adds	r3, r3, r2
 800e662:	00db      	lsls	r3, r3, #3
 800e664:	3369      	adds	r3, #105	@ 0x69
 800e666:	33ff      	adds	r3, #255	@ 0xff
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	18d3      	adds	r3, r2, r3
 800e66c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2200      	movs	r2, #0
 800e672:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e674:	1cfb      	adds	r3, r7, #3
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	2207      	movs	r2, #7
 800e67a:	4013      	ands	r3, r2
 800e67c:	b2da      	uxtb	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e682:	003b      	movs	r3, r7
 800e684:	881a      	ldrh	r2, [r3, #0]
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	1cba      	adds	r2, r7, #2
 800e68e:	7812      	ldrb	r2, [r2, #0]
 800e690:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e692:	1cbb      	adds	r3, r7, #2
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	2b02      	cmp	r3, #2
 800e698:	d102      	bne.n	800e6a0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2200      	movs	r2, #0
 800e69e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	23aa      	movs	r3, #170	@ 0xaa
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	5cd3      	ldrb	r3, [r2, r3]
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d101      	bne.n	800e6b0 <HAL_PCD_EP_Open+0xae>
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	e013      	b.n	800e6d8 <HAL_PCD_EP_Open+0xd6>
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	23aa      	movs	r3, #170	@ 0xaa
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	2101      	movs	r1, #1
 800e6b8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	68fa      	ldr	r2, [r7, #12]
 800e6c0:	0011      	movs	r1, r2
 800e6c2:	0018      	movs	r0, r3
 800e6c4:	f004 fdf6 	bl	80132b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	23aa      	movs	r3, #170	@ 0xaa
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e6d2:	230b      	movs	r3, #11
 800e6d4:	18fb      	adds	r3, r7, r3
 800e6d6:	781b      	ldrb	r3, [r3, #0]
}
 800e6d8:	0018      	movs	r0, r3
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	b005      	add	sp, #20
 800e6de:	bd90      	pop	{r4, r7, pc}

0800e6e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	000a      	movs	r2, r1
 800e6ea:	1cfb      	adds	r3, r7, #3
 800e6ec:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e6ee:	1cfb      	adds	r3, r7, #3
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	b25b      	sxtb	r3, r3
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	da0f      	bge.n	800e718 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e6f8:	1cfb      	adds	r3, r7, #3
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	2207      	movs	r2, #7
 800e6fe:	4013      	ands	r3, r2
 800e700:	1c5a      	adds	r2, r3, #1
 800e702:	0013      	movs	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	189b      	adds	r3, r3, r2
 800e708:	00db      	lsls	r3, r3, #3
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	18d3      	adds	r3, r2, r3
 800e70e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2201      	movs	r2, #1
 800e714:	705a      	strb	r2, [r3, #1]
 800e716:	e00f      	b.n	800e738 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e718:	1cfb      	adds	r3, r7, #3
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	2207      	movs	r2, #7
 800e71e:	401a      	ands	r2, r3
 800e720:	0013      	movs	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	189b      	adds	r3, r3, r2
 800e726:	00db      	lsls	r3, r3, #3
 800e728:	3369      	adds	r3, #105	@ 0x69
 800e72a:	33ff      	adds	r3, #255	@ 0xff
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	18d3      	adds	r3, r2, r3
 800e730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2200      	movs	r2, #0
 800e736:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e738:	1cfb      	adds	r3, r7, #3
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2207      	movs	r2, #7
 800e73e:	4013      	ands	r3, r2
 800e740:	b2da      	uxtb	r2, r3
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	23aa      	movs	r3, #170	@ 0xaa
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	5cd3      	ldrb	r3, [r2, r3]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d101      	bne.n	800e756 <HAL_PCD_EP_Close+0x76>
 800e752:	2302      	movs	r3, #2
 800e754:	e011      	b.n	800e77a <HAL_PCD_EP_Close+0x9a>
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	23aa      	movs	r3, #170	@ 0xaa
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	2101      	movs	r1, #1
 800e75e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	0011      	movs	r1, r2
 800e768:	0018      	movs	r0, r3
 800e76a:	f005 f945 	bl	80139f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	23aa      	movs	r3, #170	@ 0xaa
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	2100      	movs	r1, #0
 800e776:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	0018      	movs	r0, r3
 800e77c:	46bd      	mov	sp, r7
 800e77e:	b004      	add	sp, #16
 800e780:	bd80      	pop	{r7, pc}

0800e782 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e782:	b580      	push	{r7, lr}
 800e784:	b086      	sub	sp, #24
 800e786:	af00      	add	r7, sp, #0
 800e788:	60f8      	str	r0, [r7, #12]
 800e78a:	607a      	str	r2, [r7, #4]
 800e78c:	603b      	str	r3, [r7, #0]
 800e78e:	200b      	movs	r0, #11
 800e790:	183b      	adds	r3, r7, r0
 800e792:	1c0a      	adds	r2, r1, #0
 800e794:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e796:	0001      	movs	r1, r0
 800e798:	187b      	adds	r3, r7, r1
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	2207      	movs	r2, #7
 800e79e:	401a      	ands	r2, r3
 800e7a0:	0013      	movs	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	189b      	adds	r3, r3, r2
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	3369      	adds	r3, #105	@ 0x69
 800e7aa:	33ff      	adds	r3, #255	@ 0xff
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	18d3      	adds	r3, r2, r3
 800e7b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	683a      	ldr	r2, [r7, #0]
 800e7bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e7ca:	187b      	adds	r3, r7, r1
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	2207      	movs	r2, #7
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	697a      	ldr	r2, [r7, #20]
 800e7de:	0011      	movs	r1, r2
 800e7e0:	0018      	movs	r0, r3
 800e7e2:	f005 fac9 	bl	8013d78 <USB_EPStartXfer>

  return HAL_OK;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	b006      	add	sp, #24
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	000a      	movs	r2, r1
 800e7fa:	1cfb      	adds	r3, r7, #3
 800e7fc:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e7fe:	1cfb      	adds	r3, r7, #3
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	2207      	movs	r2, #7
 800e804:	401a      	ands	r2, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	23c2      	movs	r3, #194	@ 0xc2
 800e80a:	0059      	lsls	r1, r3, #1
 800e80c:	0013      	movs	r3, r2
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	189b      	adds	r3, r3, r2
 800e812:	00db      	lsls	r3, r3, #3
 800e814:	18c3      	adds	r3, r0, r3
 800e816:	185b      	adds	r3, r3, r1
 800e818:	681b      	ldr	r3, [r3, #0]
}
 800e81a:	0018      	movs	r0, r3
 800e81c:	46bd      	mov	sp, r7
 800e81e:	b002      	add	sp, #8
 800e820:	bd80      	pop	{r7, pc}

0800e822 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b086      	sub	sp, #24
 800e826:	af00      	add	r7, sp, #0
 800e828:	60f8      	str	r0, [r7, #12]
 800e82a:	607a      	str	r2, [r7, #4]
 800e82c:	603b      	str	r3, [r7, #0]
 800e82e:	200b      	movs	r0, #11
 800e830:	183b      	adds	r3, r7, r0
 800e832:	1c0a      	adds	r2, r1, #0
 800e834:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e836:	183b      	adds	r3, r7, r0
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	2207      	movs	r2, #7
 800e83c:	4013      	ands	r3, r2
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	0013      	movs	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	189b      	adds	r3, r3, r2
 800e846:	00db      	lsls	r3, r3, #3
 800e848:	68fa      	ldr	r2, [r7, #12]
 800e84a:	18d3      	adds	r3, r2, r3
 800e84c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	2224      	movs	r2, #36	@ 0x24
 800e85e:	2101      	movs	r1, #1
 800e860:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	683a      	ldr	r2, [r7, #0]
 800e866:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	2200      	movs	r2, #0
 800e86c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	2201      	movs	r2, #1
 800e872:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e874:	183b      	adds	r3, r7, r0
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2207      	movs	r2, #7
 800e87a:	4013      	ands	r3, r2
 800e87c:	b2da      	uxtb	r2, r3
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	697a      	ldr	r2, [r7, #20]
 800e888:	0011      	movs	r1, r2
 800e88a:	0018      	movs	r0, r3
 800e88c:	f005 fa74 	bl	8013d78 <USB_EPStartXfer>

  return HAL_OK;
 800e890:	2300      	movs	r3, #0
}
 800e892:	0018      	movs	r0, r3
 800e894:	46bd      	mov	sp, r7
 800e896:	b006      	add	sp, #24
 800e898:	bd80      	pop	{r7, pc}

0800e89a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b084      	sub	sp, #16
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
 800e8a2:	000a      	movs	r2, r1
 800e8a4:	1cfb      	adds	r3, r7, #3
 800e8a6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e8a8:	1cfb      	adds	r3, r7, #3
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	2207      	movs	r2, #7
 800e8ae:	401a      	ands	r2, r3
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d901      	bls.n	800e8bc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e046      	b.n	800e94a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e8bc:	1cfb      	adds	r3, r7, #3
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	b25b      	sxtb	r3, r3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	da0f      	bge.n	800e8e6 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e8c6:	1cfb      	adds	r3, r7, #3
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	2207      	movs	r2, #7
 800e8cc:	4013      	ands	r3, r2
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	0013      	movs	r3, r2
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	189b      	adds	r3, r3, r2
 800e8d6:	00db      	lsls	r3, r3, #3
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	18d3      	adds	r3, r2, r3
 800e8dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	705a      	strb	r2, [r3, #1]
 800e8e4:	e00d      	b.n	800e902 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e8e6:	1cfb      	adds	r3, r7, #3
 800e8e8:	781a      	ldrb	r2, [r3, #0]
 800e8ea:	0013      	movs	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	189b      	adds	r3, r3, r2
 800e8f0:	00db      	lsls	r3, r3, #3
 800e8f2:	3369      	adds	r3, #105	@ 0x69
 800e8f4:	33ff      	adds	r3, #255	@ 0xff
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	18d3      	adds	r3, r2, r3
 800e8fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2201      	movs	r2, #1
 800e906:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e908:	1cfb      	adds	r3, r7, #3
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	2207      	movs	r2, #7
 800e90e:	4013      	ands	r3, r2
 800e910:	b2da      	uxtb	r2, r3
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	23aa      	movs	r3, #170	@ 0xaa
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	5cd3      	ldrb	r3, [r2, r3]
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d101      	bne.n	800e926 <HAL_PCD_EP_SetStall+0x8c>
 800e922:	2302      	movs	r3, #2
 800e924:	e011      	b.n	800e94a <HAL_PCD_EP_SetStall+0xb0>
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	23aa      	movs	r3, #170	@ 0xaa
 800e92a:	009b      	lsls	r3, r3, #2
 800e92c:	2101      	movs	r1, #1
 800e92e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	68fa      	ldr	r2, [r7, #12]
 800e936:	0011      	movs	r1, r2
 800e938:	0018      	movs	r0, r3
 800e93a:	f006 fb55 	bl	8014fe8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	23aa      	movs	r3, #170	@ 0xaa
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	2100      	movs	r1, #0
 800e946:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	0018      	movs	r0, r3
 800e94c:	46bd      	mov	sp, r7
 800e94e:	b004      	add	sp, #16
 800e950:	bd80      	pop	{r7, pc}

0800e952 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b084      	sub	sp, #16
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
 800e95a:	000a      	movs	r2, r1
 800e95c:	1cfb      	adds	r3, r7, #3
 800e95e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e960:	1cfb      	adds	r3, r7, #3
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	220f      	movs	r2, #15
 800e966:	401a      	ands	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d901      	bls.n	800e974 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800e970:	2301      	movs	r3, #1
 800e972:	e048      	b.n	800ea06 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e974:	1cfb      	adds	r3, r7, #3
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	b25b      	sxtb	r3, r3
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	da0f      	bge.n	800e99e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e97e:	1cfb      	adds	r3, r7, #3
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	2207      	movs	r2, #7
 800e984:	4013      	ands	r3, r2
 800e986:	1c5a      	adds	r2, r3, #1
 800e988:	0013      	movs	r3, r2
 800e98a:	009b      	lsls	r3, r3, #2
 800e98c:	189b      	adds	r3, r3, r2
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	18d3      	adds	r3, r2, r3
 800e994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2201      	movs	r2, #1
 800e99a:	705a      	strb	r2, [r3, #1]
 800e99c:	e00f      	b.n	800e9be <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e99e:	1cfb      	adds	r3, r7, #3
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	2207      	movs	r2, #7
 800e9a4:	401a      	ands	r2, r3
 800e9a6:	0013      	movs	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	189b      	adds	r3, r3, r2
 800e9ac:	00db      	lsls	r3, r3, #3
 800e9ae:	3369      	adds	r3, #105	@ 0x69
 800e9b0:	33ff      	adds	r3, #255	@ 0xff
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	18d3      	adds	r3, r2, r3
 800e9b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e9c4:	1cfb      	adds	r3, r7, #3
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2207      	movs	r2, #7
 800e9ca:	4013      	ands	r3, r2
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	23aa      	movs	r3, #170	@ 0xaa
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	5cd3      	ldrb	r3, [r2, r3]
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d101      	bne.n	800e9e2 <HAL_PCD_EP_ClrStall+0x90>
 800e9de:	2302      	movs	r3, #2
 800e9e0:	e011      	b.n	800ea06 <HAL_PCD_EP_ClrStall+0xb4>
 800e9e2:	687a      	ldr	r2, [r7, #4]
 800e9e4:	23aa      	movs	r3, #170	@ 0xaa
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	0011      	movs	r1, r2
 800e9f4:	0018      	movs	r0, r3
 800e9f6:	f006 fb47 	bl	8015088 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	23aa      	movs	r3, #170	@ 0xaa
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	2100      	movs	r1, #0
 800ea02:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	0018      	movs	r0, r3
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	b004      	add	sp, #16
 800ea0c:	bd80      	pop	{r7, pc}
	...

0800ea10 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800ea10:	b5b0      	push	{r4, r5, r7, lr}
 800ea12:	b096      	sub	sp, #88	@ 0x58
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ea18:	f000 fbec 	bl	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	204e      	movs	r0, #78	@ 0x4e
 800ea22:	183b      	adds	r3, r7, r0
 800ea24:	2144      	movs	r1, #68	@ 0x44
 800ea26:	5a52      	ldrh	r2, [r2, r1]
 800ea28:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800ea2a:	183b      	adds	r3, r7, r0
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	b2da      	uxtb	r2, r3
 800ea30:	244d      	movs	r4, #77	@ 0x4d
 800ea32:	193b      	adds	r3, r7, r4
 800ea34:	210f      	movs	r1, #15
 800ea36:	400a      	ands	r2, r1
 800ea38:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800ea3a:	193b      	adds	r3, r7, r4
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d000      	beq.n	800ea44 <PCD_EP_ISR_Handler+0x34>
 800ea42:	e18f      	b.n	800ed64 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800ea44:	183b      	adds	r3, r7, r0
 800ea46:	881b      	ldrh	r3, [r3, #0]
 800ea48:	2210      	movs	r2, #16
 800ea4a:	4013      	ands	r3, r2
 800ea4c:	d155      	bne.n	800eafa <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	881b      	ldrh	r3, [r3, #0]
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	200e      	movs	r0, #14
 800ea58:	183b      	adds	r3, r7, r0
 800ea5a:	49bb      	ldr	r1, [pc, #748]	@ (800ed48 <PCD_EP_ISR_Handler+0x338>)
 800ea5c:	400a      	ands	r2, r1
 800ea5e:	801a      	strh	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	183a      	adds	r2, r7, r0
 800ea66:	8812      	ldrh	r2, [r2, #0]
 800ea68:	49b8      	ldr	r1, [pc, #736]	@ (800ed4c <PCD_EP_ISR_Handler+0x33c>)
 800ea6a:	430a      	orrs	r2, r1
 800ea6c:	b292      	uxth	r2, r2
 800ea6e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	3328      	adds	r3, #40	@ 0x28
 800ea74:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2250      	movs	r2, #80	@ 0x50
 800ea7c:	5a9b      	ldrh	r3, [r3, r2]
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	001a      	movs	r2, r3
 800ea82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	00db      	lsls	r3, r3, #3
 800ea88:	18d2      	adds	r2, r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	18d3      	adds	r3, r2, r3
 800ea90:	4aaf      	ldr	r2, [pc, #700]	@ (800ed50 <PCD_EP_ISR_Handler+0x340>)
 800ea92:	4694      	mov	ip, r2
 800ea94:	4463      	add	r3, ip
 800ea96:	881b      	ldrh	r3, [r3, #0]
 800ea98:	059b      	lsls	r3, r3, #22
 800ea9a:	0d9a      	lsrs	r2, r3, #22
 800ea9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800eaa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaa2:	695a      	ldr	r2, [r3, #20]
 800eaa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaa6:	69db      	ldr	r3, [r3, #28]
 800eaa8:	18d2      	adds	r2, r2, r3
 800eaaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2100      	movs	r1, #0
 800eab2:	0018      	movs	r0, r3
 800eab4:	f008 fc56 	bl	8017364 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2224      	movs	r2, #36	@ 0x24
 800eabc:	5c9b      	ldrb	r3, [r3, r2]
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d101      	bne.n	800eac8 <PCD_EP_ISR_Handler+0xb8>
 800eac4:	f000 fb96 	bl	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
 800eac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d001      	beq.n	800ead4 <PCD_EP_ISR_Handler+0xc4>
 800ead0:	f000 fb90 	bl	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2224      	movs	r2, #36	@ 0x24
 800ead8:	5c9b      	ldrb	r3, [r3, r2]
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	2280      	movs	r2, #128	@ 0x80
 800eade:	4252      	negs	r2, r2
 800eae0:	4313      	orrs	r3, r2
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	0011      	movs	r1, r2
 800eaea:	224c      	movs	r2, #76	@ 0x4c
 800eaec:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2224      	movs	r2, #36	@ 0x24
 800eaf2:	2100      	movs	r1, #0
 800eaf4:	5499      	strb	r1, [r3, r2]
 800eaf6:	f000 fb7d 	bl	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	3369      	adds	r3, #105	@ 0x69
 800eafe:	33ff      	adds	r3, #255	@ 0xff
 800eb00:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	214a      	movs	r1, #74	@ 0x4a
 800eb08:	187b      	adds	r3, r7, r1
 800eb0a:	8812      	ldrh	r2, [r2, #0]
 800eb0c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800eb0e:	187b      	adds	r3, r7, r1
 800eb10:	881a      	ldrh	r2, [r3, #0]
 800eb12:	2380      	movs	r3, #128	@ 0x80
 800eb14:	011b      	lsls	r3, r3, #4
 800eb16:	4013      	ands	r3, r2
 800eb18:	d037      	beq.n	800eb8a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2250      	movs	r2, #80	@ 0x50
 800eb20:	5a9b      	ldrh	r3, [r3, r2]
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	001a      	movs	r2, r3
 800eb26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	00db      	lsls	r3, r3, #3
 800eb2c:	18d2      	adds	r2, r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	18d3      	adds	r3, r2, r3
 800eb34:	4a87      	ldr	r2, [pc, #540]	@ (800ed54 <PCD_EP_ISR_Handler+0x344>)
 800eb36:	4694      	mov	ip, r2
 800eb38:	4463      	add	r3, ip
 800eb3a:	881b      	ldrh	r3, [r3, #0]
 800eb3c:	059b      	lsls	r3, r3, #22
 800eb3e:	0d9a      	lsrs	r2, r3, #22
 800eb40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6818      	ldr	r0, [r3, #0]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	22ac      	movs	r2, #172	@ 0xac
 800eb4c:	0092      	lsls	r2, r2, #2
 800eb4e:	1899      	adds	r1, r3, r2
 800eb50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb52:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800eb54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb56:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	f006 fbc8 	bl	80152ee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	881b      	ldrh	r3, [r3, #0]
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	2010      	movs	r0, #16
 800eb68:	183b      	adds	r3, r7, r0
 800eb6a:	497b      	ldr	r1, [pc, #492]	@ (800ed58 <PCD_EP_ISR_Handler+0x348>)
 800eb6c:	400a      	ands	r2, r1
 800eb6e:	801a      	strh	r2, [r3, #0]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	183a      	adds	r2, r7, r0
 800eb76:	8812      	ldrh	r2, [r2, #0]
 800eb78:	2180      	movs	r1, #128	@ 0x80
 800eb7a:	430a      	orrs	r2, r1
 800eb7c:	b292      	uxth	r2, r2
 800eb7e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	0018      	movs	r0, r3
 800eb84:	f008 fbb8 	bl	80172f8 <HAL_PCD_SetupStageCallback>
 800eb88:	e334      	b.n	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800eb8a:	234a      	movs	r3, #74	@ 0x4a
 800eb8c:	18fb      	adds	r3, r7, r3
 800eb8e:	2200      	movs	r2, #0
 800eb90:	5e9b      	ldrsh	r3, [r3, r2]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	db00      	blt.n	800eb98 <PCD_EP_ISR_Handler+0x188>
 800eb96:	e32d      	b.n	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	881b      	ldrh	r3, [r3, #0]
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	201e      	movs	r0, #30
 800eba2:	183b      	adds	r3, r7, r0
 800eba4:	496c      	ldr	r1, [pc, #432]	@ (800ed58 <PCD_EP_ISR_Handler+0x348>)
 800eba6:	400a      	ands	r2, r1
 800eba8:	801a      	strh	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	183a      	adds	r2, r7, r0
 800ebb0:	8812      	ldrh	r2, [r2, #0]
 800ebb2:	2180      	movs	r1, #128	@ 0x80
 800ebb4:	430a      	orrs	r2, r1
 800ebb6:	b292      	uxth	r2, r2
 800ebb8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2250      	movs	r2, #80	@ 0x50
 800ebc0:	5a9b      	ldrh	r3, [r3, r2]
 800ebc2:	b29b      	uxth	r3, r3
 800ebc4:	001a      	movs	r2, r3
 800ebc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	00db      	lsls	r3, r3, #3
 800ebcc:	18d2      	adds	r2, r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	18d3      	adds	r3, r2, r3
 800ebd4:	4a5f      	ldr	r2, [pc, #380]	@ (800ed54 <PCD_EP_ISR_Handler+0x344>)
 800ebd6:	4694      	mov	ip, r2
 800ebd8:	4463      	add	r3, ip
 800ebda:	881b      	ldrh	r3, [r3, #0]
 800ebdc:	059b      	lsls	r3, r3, #22
 800ebde:	0d9a      	lsrs	r2, r3, #22
 800ebe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebe2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ebe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d01a      	beq.n	800ec22 <PCD_EP_ISR_Handler+0x212>
 800ebec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebee:	695b      	ldr	r3, [r3, #20]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d016      	beq.n	800ec22 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6818      	ldr	r0, [r3, #0]
 800ebf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebfa:	6959      	ldr	r1, [r3, #20]
 800ebfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebfe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ec00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec02:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	f006 fb72 	bl	80152ee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ec0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec0c:	695a      	ldr	r2, [r3, #20]
 800ec0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec10:	69db      	ldr	r3, [r3, #28]
 800ec12:	18d2      	adds	r2, r2, r3
 800ec14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec16:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	0018      	movs	r0, r3
 800ec1e:	f008 fb80 	bl	8017322 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	214a      	movs	r1, #74	@ 0x4a
 800ec28:	187b      	adds	r3, r7, r1
 800ec2a:	8812      	ldrh	r2, [r2, #0]
 800ec2c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ec2e:	187b      	adds	r3, r7, r1
 800ec30:	881a      	ldrh	r2, [r3, #0]
 800ec32:	2380      	movs	r3, #128	@ 0x80
 800ec34:	011b      	lsls	r3, r3, #4
 800ec36:	4013      	ands	r3, r2
 800ec38:	d000      	beq.n	800ec3c <PCD_EP_ISR_Handler+0x22c>
 800ec3a:	e2db      	b.n	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
 800ec3c:	187b      	adds	r3, r7, r1
 800ec3e:	881a      	ldrh	r2, [r3, #0]
 800ec40:	23c0      	movs	r3, #192	@ 0xc0
 800ec42:	019b      	lsls	r3, r3, #6
 800ec44:	401a      	ands	r2, r3
 800ec46:	23c0      	movs	r3, #192	@ 0xc0
 800ec48:	019b      	lsls	r3, r3, #6
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d100      	bne.n	800ec50 <PCD_EP_ISR_Handler+0x240>
 800ec4e:	e2d1      	b.n	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	61bb      	str	r3, [r7, #24]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	2250      	movs	r2, #80	@ 0x50
 800ec5c:	5a9b      	ldrh	r3, [r3, r2]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	001a      	movs	r2, r3
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	189b      	adds	r3, r3, r2
 800ec66:	61bb      	str	r3, [r7, #24]
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	4a3a      	ldr	r2, [pc, #232]	@ (800ed54 <PCD_EP_ISR_Handler+0x344>)
 800ec6c:	4694      	mov	ip, r2
 800ec6e:	4463      	add	r3, ip
 800ec70:	617b      	str	r3, [r7, #20]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	059b      	lsls	r3, r3, #22
 800ec7a:	0d9b      	lsrs	r3, r3, #22
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	801a      	strh	r2, [r3, #0]
 800ec82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec88:	d91a      	bls.n	800ecc0 <PCD_EP_ISR_Handler+0x2b0>
 800ec8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec8c:	691b      	ldr	r3, [r3, #16]
 800ec8e:	095b      	lsrs	r3, r3, #5
 800ec90:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec94:	691b      	ldr	r3, [r3, #16]
 800ec96:	221f      	movs	r2, #31
 800ec98:	4013      	ands	r3, r2
 800ec9a:	d102      	bne.n	800eca2 <PCD_EP_ISR_Handler+0x292>
 800ec9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	647b      	str	r3, [r7, #68]	@ 0x44
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	881b      	ldrh	r3, [r3, #0]
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	029b      	lsls	r3, r3, #10
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	4a25      	ldr	r2, [pc, #148]	@ (800ed4c <PCD_EP_ISR_Handler+0x33c>)
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	801a      	strh	r2, [r3, #0]
 800ecbe:	e023      	b.n	800ed08 <PCD_EP_ISR_Handler+0x2f8>
 800ecc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecc2:	691b      	ldr	r3, [r3, #16]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d108      	bne.n	800ecda <PCD_EP_ISR_Handler+0x2ca>
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	881b      	ldrh	r3, [r3, #0]
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	4a1f      	ldr	r2, [pc, #124]	@ (800ed4c <PCD_EP_ISR_Handler+0x33c>)
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	801a      	strh	r2, [r3, #0]
 800ecd8:	e016      	b.n	800ed08 <PCD_EP_ISR_Handler+0x2f8>
 800ecda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecdc:	691b      	ldr	r3, [r3, #16]
 800ecde:	085b      	lsrs	r3, r3, #1
 800ece0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ece2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	2201      	movs	r2, #1
 800ece8:	4013      	ands	r3, r2
 800ecea:	d002      	beq.n	800ecf2 <PCD_EP_ISR_Handler+0x2e2>
 800ecec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecee:	3301      	adds	r3, #1
 800ecf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	029b      	lsls	r3, r3, #10
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	4313      	orrs	r3, r2
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	881b      	ldrh	r3, [r3, #0]
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	2012      	movs	r0, #18
 800ed12:	183b      	adds	r3, r7, r0
 800ed14:	4911      	ldr	r1, [pc, #68]	@ (800ed5c <PCD_EP_ISR_Handler+0x34c>)
 800ed16:	400a      	ands	r2, r1
 800ed18:	801a      	strh	r2, [r3, #0]
 800ed1a:	183b      	adds	r3, r7, r0
 800ed1c:	183a      	adds	r2, r7, r0
 800ed1e:	8812      	ldrh	r2, [r2, #0]
 800ed20:	2180      	movs	r1, #128	@ 0x80
 800ed22:	0149      	lsls	r1, r1, #5
 800ed24:	404a      	eors	r2, r1
 800ed26:	801a      	strh	r2, [r3, #0]
 800ed28:	183b      	adds	r3, r7, r0
 800ed2a:	183a      	adds	r2, r7, r0
 800ed2c:	8812      	ldrh	r2, [r2, #0]
 800ed2e:	2180      	movs	r1, #128	@ 0x80
 800ed30:	0189      	lsls	r1, r1, #6
 800ed32:	404a      	eors	r2, r1
 800ed34:	801a      	strh	r2, [r3, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	183a      	adds	r2, r7, r0
 800ed3c:	8812      	ldrh	r2, [r2, #0]
 800ed3e:	4908      	ldr	r1, [pc, #32]	@ (800ed60 <PCD_EP_ISR_Handler+0x350>)
 800ed40:	430a      	orrs	r2, r1
 800ed42:	b292      	uxth	r2, r2
 800ed44:	801a      	strh	r2, [r3, #0]
 800ed46:	e255      	b.n	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
 800ed48:	ffff8f0f 	.word	0xffff8f0f
 800ed4c:	ffff8000 	.word	0xffff8000
 800ed50:	00000402 	.word	0x00000402
 800ed54:	00000406 	.word	0x00000406
 800ed58:	00000f8f 	.word	0x00000f8f
 800ed5c:	ffffbf8f 	.word	0xffffbf8f
 800ed60:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	001a      	movs	r2, r3
 800ed6a:	204d      	movs	r0, #77	@ 0x4d
 800ed6c:	183b      	adds	r3, r7, r0
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	18d2      	adds	r2, r2, r3
 800ed74:	214a      	movs	r1, #74	@ 0x4a
 800ed76:	187b      	adds	r3, r7, r1
 800ed78:	8812      	ldrh	r2, [r2, #0]
 800ed7a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ed7c:	187b      	adds	r3, r7, r1
 800ed7e:	2200      	movs	r2, #0
 800ed80:	5e9b      	ldrsh	r3, [r3, r2]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	db00      	blt.n	800ed88 <PCD_EP_ISR_Handler+0x378>
 800ed86:	e0fa      	b.n	800ef7e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	001a      	movs	r2, r3
 800ed8e:	183b      	adds	r3, r7, r0
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	18d3      	adds	r3, r2, r3
 800ed96:	881b      	ldrh	r3, [r3, #0]
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	2448      	movs	r4, #72	@ 0x48
 800ed9c:	193b      	adds	r3, r7, r4
 800ed9e:	49d1      	ldr	r1, [pc, #836]	@ (800f0e4 <PCD_EP_ISR_Handler+0x6d4>)
 800eda0:	400a      	ands	r2, r1
 800eda2:	801a      	strh	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	001a      	movs	r2, r3
 800edaa:	183b      	adds	r3, r7, r0
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	18d3      	adds	r3, r2, r3
 800edb2:	193a      	adds	r2, r7, r4
 800edb4:	8812      	ldrh	r2, [r2, #0]
 800edb6:	2180      	movs	r1, #128	@ 0x80
 800edb8:	430a      	orrs	r2, r1
 800edba:	b292      	uxth	r2, r2
 800edbc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800edbe:	183b      	adds	r3, r7, r0
 800edc0:	781a      	ldrb	r2, [r3, #0]
 800edc2:	0013      	movs	r3, r2
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	189b      	adds	r3, r3, r2
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	3369      	adds	r3, #105	@ 0x69
 800edcc:	33ff      	adds	r3, #255	@ 0xff
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	18d3      	adds	r3, r2, r3
 800edd2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800edd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edd6:	7b1b      	ldrb	r3, [r3, #12]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d125      	bne.n	800ee28 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2250      	movs	r2, #80	@ 0x50
 800ede2:	5a9b      	ldrh	r3, [r3, r2]
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	001a      	movs	r2, r3
 800ede8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	00db      	lsls	r3, r3, #3
 800edee:	18d2      	adds	r2, r2, r3
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	18d3      	adds	r3, r2, r3
 800edf6:	4abc      	ldr	r2, [pc, #752]	@ (800f0e8 <PCD_EP_ISR_Handler+0x6d8>)
 800edf8:	4694      	mov	ip, r2
 800edfa:	4463      	add	r3, ip
 800edfc:	881a      	ldrh	r2, [r3, #0]
 800edfe:	2450      	movs	r4, #80	@ 0x50
 800ee00:	193b      	adds	r3, r7, r4
 800ee02:	0592      	lsls	r2, r2, #22
 800ee04:	0d92      	lsrs	r2, r2, #22
 800ee06:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800ee08:	193b      	adds	r3, r7, r4
 800ee0a:	881b      	ldrh	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d100      	bne.n	800ee12 <PCD_EP_ISR_Handler+0x402>
 800ee10:	e08d      	b.n	800ef2e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6818      	ldr	r0, [r3, #0]
 800ee16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee18:	6959      	ldr	r1, [r3, #20]
 800ee1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee1c:	88da      	ldrh	r2, [r3, #6]
 800ee1e:	193b      	adds	r3, r7, r4
 800ee20:	881b      	ldrh	r3, [r3, #0]
 800ee22:	f006 fa64 	bl	80152ee <USB_ReadPMA>
 800ee26:	e082      	b.n	800ef2e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ee28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee2a:	78db      	ldrb	r3, [r3, #3]
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d10c      	bne.n	800ee4a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ee30:	2350      	movs	r3, #80	@ 0x50
 800ee32:	18fc      	adds	r4, r7, r3
 800ee34:	234a      	movs	r3, #74	@ 0x4a
 800ee36:	18fb      	adds	r3, r7, r3
 800ee38:	881a      	ldrh	r2, [r3, #0]
 800ee3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	0018      	movs	r0, r3
 800ee40:	f000 f9ec 	bl	800f21c <HAL_PCD_EP_DB_Receive>
 800ee44:	0003      	movs	r3, r0
 800ee46:	8023      	strh	r3, [r4, #0]
 800ee48:	e071      	b.n	800ef2e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	001a      	movs	r2, r3
 800ee50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	18d3      	adds	r3, r2, r3
 800ee58:	881b      	ldrh	r3, [r3, #0]
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	2052      	movs	r0, #82	@ 0x52
 800ee5e:	183b      	adds	r3, r7, r0
 800ee60:	49a2      	ldr	r1, [pc, #648]	@ (800f0ec <PCD_EP_ISR_Handler+0x6dc>)
 800ee62:	400a      	ands	r2, r1
 800ee64:	801a      	strh	r2, [r3, #0]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	001a      	movs	r2, r3
 800ee6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	18d3      	adds	r3, r2, r3
 800ee74:	183a      	adds	r2, r7, r0
 800ee76:	8812      	ldrh	r2, [r2, #0]
 800ee78:	499d      	ldr	r1, [pc, #628]	@ (800f0f0 <PCD_EP_ISR_Handler+0x6e0>)
 800ee7a:	430a      	orrs	r2, r1
 800ee7c:	b292      	uxth	r2, r2
 800ee7e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	001a      	movs	r2, r3
 800ee86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	18d3      	adds	r3, r2, r3
 800ee8e:	881b      	ldrh	r3, [r3, #0]
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	001a      	movs	r2, r3
 800ee94:	2380      	movs	r3, #128	@ 0x80
 800ee96:	01db      	lsls	r3, r3, #7
 800ee98:	4013      	ands	r3, r2
 800ee9a:	d024      	beq.n	800eee6 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	2250      	movs	r2, #80	@ 0x50
 800eea2:	5a9b      	ldrh	r3, [r3, r2]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	001a      	movs	r2, r3
 800eea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	00db      	lsls	r3, r3, #3
 800eeae:	18d2      	adds	r2, r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	18d3      	adds	r3, r2, r3
 800eeb6:	4a8f      	ldr	r2, [pc, #572]	@ (800f0f4 <PCD_EP_ISR_Handler+0x6e4>)
 800eeb8:	4694      	mov	ip, r2
 800eeba:	4463      	add	r3, ip
 800eebc:	881a      	ldrh	r2, [r3, #0]
 800eebe:	2450      	movs	r4, #80	@ 0x50
 800eec0:	193b      	adds	r3, r7, r4
 800eec2:	0592      	lsls	r2, r2, #22
 800eec4:	0d92      	lsrs	r2, r2, #22
 800eec6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800eec8:	193b      	adds	r3, r7, r4
 800eeca:	881b      	ldrh	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d02e      	beq.n	800ef2e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6818      	ldr	r0, [r3, #0]
 800eed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eed6:	6959      	ldr	r1, [r3, #20]
 800eed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeda:	891a      	ldrh	r2, [r3, #8]
 800eedc:	193b      	adds	r3, r7, r4
 800eede:	881b      	ldrh	r3, [r3, #0]
 800eee0:	f006 fa05 	bl	80152ee <USB_ReadPMA>
 800eee4:	e023      	b.n	800ef2e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2250      	movs	r2, #80	@ 0x50
 800eeec:	5a9b      	ldrh	r3, [r3, r2]
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	001a      	movs	r2, r3
 800eef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	00db      	lsls	r3, r3, #3
 800eef8:	18d2      	adds	r2, r2, r3
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	18d3      	adds	r3, r2, r3
 800ef00:	4a79      	ldr	r2, [pc, #484]	@ (800f0e8 <PCD_EP_ISR_Handler+0x6d8>)
 800ef02:	4694      	mov	ip, r2
 800ef04:	4463      	add	r3, ip
 800ef06:	881a      	ldrh	r2, [r3, #0]
 800ef08:	2450      	movs	r4, #80	@ 0x50
 800ef0a:	193b      	adds	r3, r7, r4
 800ef0c:	0592      	lsls	r2, r2, #22
 800ef0e:	0d92      	lsrs	r2, r2, #22
 800ef10:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800ef12:	193b      	adds	r3, r7, r4
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d009      	beq.n	800ef2e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6818      	ldr	r0, [r3, #0]
 800ef1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef20:	6959      	ldr	r1, [r3, #20]
 800ef22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef24:	895a      	ldrh	r2, [r3, #10]
 800ef26:	193b      	adds	r3, r7, r4
 800ef28:	881b      	ldrh	r3, [r3, #0]
 800ef2a:	f006 f9e0 	bl	80152ee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ef2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef30:	69da      	ldr	r2, [r3, #28]
 800ef32:	2150      	movs	r1, #80	@ 0x50
 800ef34:	187b      	adds	r3, r7, r1
 800ef36:	881b      	ldrh	r3, [r3, #0]
 800ef38:	18d2      	adds	r2, r2, r3
 800ef3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ef3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef40:	695a      	ldr	r2, [r3, #20]
 800ef42:	187b      	adds	r3, r7, r1
 800ef44:	881b      	ldrh	r3, [r3, #0]
 800ef46:	18d2      	adds	r2, r2, r3
 800ef48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef4a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ef4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef4e:	699b      	ldr	r3, [r3, #24]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d005      	beq.n	800ef60 <PCD_EP_ISR_Handler+0x550>
 800ef54:	187b      	adds	r3, r7, r1
 800ef56:	881a      	ldrh	r2, [r3, #0]
 800ef58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef5a:	691b      	ldr	r3, [r3, #16]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d207      	bcs.n	800ef70 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ef60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef62:	781a      	ldrb	r2, [r3, #0]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	0011      	movs	r1, r2
 800ef68:	0018      	movs	r0, r3
 800ef6a:	f008 f9da 	bl	8017322 <HAL_PCD_DataOutStageCallback>
 800ef6e:	e006      	b.n	800ef7e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ef76:	0011      	movs	r1, r2
 800ef78:	0018      	movs	r0, r3
 800ef7a:	f004 fefd 	bl	8013d78 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ef7e:	244a      	movs	r4, #74	@ 0x4a
 800ef80:	193b      	adds	r3, r7, r4
 800ef82:	881b      	ldrh	r3, [r3, #0]
 800ef84:	2280      	movs	r2, #128	@ 0x80
 800ef86:	4013      	ands	r3, r2
 800ef88:	d100      	bne.n	800ef8c <PCD_EP_ISR_Handler+0x57c>
 800ef8a:	e133      	b.n	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800ef8c:	204d      	movs	r0, #77	@ 0x4d
 800ef8e:	183b      	adds	r3, r7, r0
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	1c5a      	adds	r2, r3, #1
 800ef94:	0013      	movs	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	189b      	adds	r3, r3, r2
 800ef9a:	00db      	lsls	r3, r3, #3
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	18d3      	adds	r3, r2, r3
 800efa0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	001a      	movs	r2, r3
 800efa8:	183b      	adds	r3, r7, r0
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	18d3      	adds	r3, r2, r3
 800efb0:	881b      	ldrh	r3, [r3, #0]
 800efb2:	b29a      	uxth	r2, r3
 800efb4:	2542      	movs	r5, #66	@ 0x42
 800efb6:	197b      	adds	r3, r7, r5
 800efb8:	494f      	ldr	r1, [pc, #316]	@ (800f0f8 <PCD_EP_ISR_Handler+0x6e8>)
 800efba:	400a      	ands	r2, r1
 800efbc:	801a      	strh	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	001a      	movs	r2, r3
 800efc4:	183b      	adds	r3, r7, r0
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	18d3      	adds	r3, r2, r3
 800efcc:	197a      	adds	r2, r7, r5
 800efce:	8812      	ldrh	r2, [r2, #0]
 800efd0:	494a      	ldr	r1, [pc, #296]	@ (800f0fc <PCD_EP_ISR_Handler+0x6ec>)
 800efd2:	430a      	orrs	r2, r1
 800efd4:	b292      	uxth	r2, r2
 800efd6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800efd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efda:	78db      	ldrb	r3, [r3, #3]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d000      	beq.n	800efe2 <PCD_EP_ISR_Handler+0x5d2>
 800efe0:	e0af      	b.n	800f142 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800efe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efe4:	2200      	movs	r2, #0
 800efe6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800efe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efea:	7b1b      	ldrb	r3, [r3, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d100      	bne.n	800eff2 <PCD_EP_ISR_Handler+0x5e2>
 800eff0:	e09f      	b.n	800f132 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800eff2:	193b      	adds	r3, r7, r4
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	2240      	movs	r2, #64	@ 0x40
 800eff8:	4013      	ands	r3, r2
 800effa:	d046      	beq.n	800f08a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800effc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800effe:	785b      	ldrb	r3, [r3, #1]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d125      	bne.n	800f050 <PCD_EP_ISR_Handler+0x640>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	627b      	str	r3, [r7, #36]	@ 0x24
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2250      	movs	r2, #80	@ 0x50
 800f010:	5a9b      	ldrh	r3, [r3, r2]
 800f012:	b29b      	uxth	r3, r3
 800f014:	001a      	movs	r2, r3
 800f016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f018:	189b      	adds	r3, r3, r2
 800f01a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f01c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	00da      	lsls	r2, r3, #3
 800f022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f024:	18d3      	adds	r3, r2, r3
 800f026:	4a33      	ldr	r2, [pc, #204]	@ (800f0f4 <PCD_EP_ISR_Handler+0x6e4>)
 800f028:	4694      	mov	ip, r2
 800f02a:	4463      	add	r3, ip
 800f02c:	623b      	str	r3, [r7, #32]
 800f02e:	6a3b      	ldr	r3, [r7, #32]
 800f030:	881b      	ldrh	r3, [r3, #0]
 800f032:	b29b      	uxth	r3, r3
 800f034:	059b      	lsls	r3, r3, #22
 800f036:	0d9b      	lsrs	r3, r3, #22
 800f038:	b29a      	uxth	r2, r3
 800f03a:	6a3b      	ldr	r3, [r7, #32]
 800f03c:	801a      	strh	r2, [r3, #0]
 800f03e:	6a3b      	ldr	r3, [r7, #32]
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	b29b      	uxth	r3, r3
 800f044:	4a2d      	ldr	r2, [pc, #180]	@ (800f0fc <PCD_EP_ISR_Handler+0x6ec>)
 800f046:	4313      	orrs	r3, r2
 800f048:	b29a      	uxth	r2, r3
 800f04a:	6a3b      	ldr	r3, [r7, #32]
 800f04c:	801a      	strh	r2, [r3, #0]
 800f04e:	e070      	b.n	800f132 <PCD_EP_ISR_Handler+0x722>
 800f050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f052:	785b      	ldrb	r3, [r3, #1]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d16c      	bne.n	800f132 <PCD_EP_ISR_Handler+0x722>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2250      	movs	r2, #80	@ 0x50
 800f064:	5a9b      	ldrh	r3, [r3, r2]
 800f066:	b29b      	uxth	r3, r3
 800f068:	001a      	movs	r2, r3
 800f06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06c:	189b      	adds	r3, r3, r2
 800f06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	00da      	lsls	r2, r3, #3
 800f076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f078:	18d3      	adds	r3, r2, r3
 800f07a:	4a1e      	ldr	r2, [pc, #120]	@ (800f0f4 <PCD_EP_ISR_Handler+0x6e4>)
 800f07c:	4694      	mov	ip, r2
 800f07e:	4463      	add	r3, ip
 800f080:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f084:	2200      	movs	r2, #0
 800f086:	801a      	strh	r2, [r3, #0]
 800f088:	e053      	b.n	800f132 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f092:	785b      	ldrb	r3, [r3, #1]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d133      	bne.n	800f100 <PCD_EP_ISR_Handler+0x6f0>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	2250      	movs	r2, #80	@ 0x50
 800f0a4:	5a9b      	ldrh	r3, [r3, r2]
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	001a      	movs	r2, r3
 800f0aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0ac:	189b      	adds	r3, r3, r2
 800f0ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800f0b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	00da      	lsls	r2, r3, #3
 800f0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0b8:	18d3      	adds	r3, r2, r3
 800f0ba:	4a0b      	ldr	r2, [pc, #44]	@ (800f0e8 <PCD_EP_ISR_Handler+0x6d8>)
 800f0bc:	4694      	mov	ip, r2
 800f0be:	4463      	add	r3, ip
 800f0c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c4:	881b      	ldrh	r3, [r3, #0]
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	059b      	lsls	r3, r3, #22
 800f0ca:	0d9b      	lsrs	r3, r3, #22
 800f0cc:	b29a      	uxth	r2, r3
 800f0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d0:	801a      	strh	r2, [r3, #0]
 800f0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d4:	881b      	ldrh	r3, [r3, #0]
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	4a08      	ldr	r2, [pc, #32]	@ (800f0fc <PCD_EP_ISR_Handler+0x6ec>)
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e0:	801a      	strh	r2, [r3, #0]
 800f0e2:	e026      	b.n	800f132 <PCD_EP_ISR_Handler+0x722>
 800f0e4:	00000f8f 	.word	0x00000f8f
 800f0e8:	00000406 	.word	0x00000406
 800f0ec:	ffff8f8f 	.word	0xffff8f8f
 800f0f0:	ffff80c0 	.word	0xffff80c0
 800f0f4:	00000402 	.word	0x00000402
 800f0f8:	ffff8f0f 	.word	0xffff8f0f
 800f0fc:	ffff8000 	.word	0xffff8000
 800f100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f102:	785b      	ldrb	r3, [r3, #1]
 800f104:	2b01      	cmp	r3, #1
 800f106:	d114      	bne.n	800f132 <PCD_EP_ISR_Handler+0x722>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2250      	movs	r2, #80	@ 0x50
 800f10e:	5a9b      	ldrh	r3, [r3, r2]
 800f110:	b29b      	uxth	r3, r3
 800f112:	001a      	movs	r2, r3
 800f114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f116:	189b      	adds	r3, r3, r2
 800f118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f11a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	00da      	lsls	r2, r3, #3
 800f120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f122:	18d3      	adds	r3, r2, r3
 800f124:	4a3b      	ldr	r2, [pc, #236]	@ (800f214 <PCD_EP_ISR_Handler+0x804>)
 800f126:	4694      	mov	ip, r2
 800f128:	4463      	add	r3, ip
 800f12a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12e:	2200      	movs	r2, #0
 800f130:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f134:	781a      	ldrb	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	0011      	movs	r1, r2
 800f13a:	0018      	movs	r0, r3
 800f13c:	f008 f912 	bl	8017364 <HAL_PCD_DataInStageCallback>
 800f140:	e058      	b.n	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800f142:	234a      	movs	r3, #74	@ 0x4a
 800f144:	18fb      	adds	r3, r7, r3
 800f146:	881a      	ldrh	r2, [r3, #0]
 800f148:	2380      	movs	r3, #128	@ 0x80
 800f14a:	005b      	lsls	r3, r3, #1
 800f14c:	4013      	ands	r3, r2
 800f14e:	d149      	bne.n	800f1e4 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2250      	movs	r2, #80	@ 0x50
 800f156:	5a9b      	ldrh	r3, [r3, r2]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	001a      	movs	r2, r3
 800f15c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	00db      	lsls	r3, r3, #3
 800f162:	18d2      	adds	r2, r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	18d3      	adds	r3, r2, r3
 800f16a:	4a2b      	ldr	r2, [pc, #172]	@ (800f218 <PCD_EP_ISR_Handler+0x808>)
 800f16c:	4694      	mov	ip, r2
 800f16e:	4463      	add	r3, ip
 800f170:	881a      	ldrh	r2, [r3, #0]
 800f172:	2140      	movs	r1, #64	@ 0x40
 800f174:	187b      	adds	r3, r7, r1
 800f176:	0592      	lsls	r2, r2, #22
 800f178:	0d92      	lsrs	r2, r2, #22
 800f17a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800f17c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f17e:	699a      	ldr	r2, [r3, #24]
 800f180:	187b      	adds	r3, r7, r1
 800f182:	881b      	ldrh	r3, [r3, #0]
 800f184:	429a      	cmp	r2, r3
 800f186:	d907      	bls.n	800f198 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800f188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f18a:	699a      	ldr	r2, [r3, #24]
 800f18c:	187b      	adds	r3, r7, r1
 800f18e:	881b      	ldrh	r3, [r3, #0]
 800f190:	1ad2      	subs	r2, r2, r3
 800f192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f194:	619a      	str	r2, [r3, #24]
 800f196:	e002      	b.n	800f19e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800f198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f19a:	2200      	movs	r2, #0
 800f19c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800f19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1a0:	699b      	ldr	r3, [r3, #24]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d107      	bne.n	800f1b6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f1a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1a8:	781a      	ldrb	r2, [r3, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	0011      	movs	r1, r2
 800f1ae:	0018      	movs	r0, r3
 800f1b0:	f008 f8d8 	bl	8017364 <HAL_PCD_DataInStageCallback>
 800f1b4:	e01e      	b.n	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800f1b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1b8:	695a      	ldr	r2, [r3, #20]
 800f1ba:	2140      	movs	r1, #64	@ 0x40
 800f1bc:	187b      	adds	r3, r7, r1
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	18d2      	adds	r2, r2, r3
 800f1c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1c4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800f1c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1c8:	69da      	ldr	r2, [r3, #28]
 800f1ca:	187b      	adds	r3, r7, r1
 800f1cc:	881b      	ldrh	r3, [r3, #0]
 800f1ce:	18d2      	adds	r2, r2, r3
 800f1d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1d2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f1da:	0011      	movs	r1, r2
 800f1dc:	0018      	movs	r0, r3
 800f1de:	f004 fdcb 	bl	8013d78 <USB_EPStartXfer>
 800f1e2:	e007      	b.n	800f1f4 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800f1e4:	234a      	movs	r3, #74	@ 0x4a
 800f1e6:	18fb      	adds	r3, r7, r3
 800f1e8:	881a      	ldrh	r2, [r3, #0]
 800f1ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	0018      	movs	r0, r3
 800f1f0:	f000 f930 	bl	800f454 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2244      	movs	r2, #68	@ 0x44
 800f1fa:	5a9b      	ldrh	r3, [r3, r2]
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	b21b      	sxth	r3, r3
 800f200:	2b00      	cmp	r3, #0
 800f202:	da01      	bge.n	800f208 <PCD_EP_ISR_Handler+0x7f8>
 800f204:	f7ff fc0a 	bl	800ea1c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	0018      	movs	r0, r3
 800f20c:	46bd      	mov	sp, r7
 800f20e:	b016      	add	sp, #88	@ 0x58
 800f210:	bdb0      	pop	{r4, r5, r7, pc}
 800f212:	46c0      	nop			@ (mov r8, r8)
 800f214:	00000406 	.word	0x00000406
 800f218:	00000402 	.word	0x00000402

0800f21c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f21c:	b590      	push	{r4, r7, lr}
 800f21e:	b089      	sub	sp, #36	@ 0x24
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	1dbb      	adds	r3, r7, #6
 800f228:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f22a:	1dbb      	adds	r3, r7, #6
 800f22c:	881a      	ldrh	r2, [r3, #0]
 800f22e:	2380      	movs	r3, #128	@ 0x80
 800f230:	01db      	lsls	r3, r3, #7
 800f232:	4013      	ands	r3, r2
 800f234:	d100      	bne.n	800f238 <HAL_PCD_EP_DB_Receive+0x1c>
 800f236:	e07d      	b.n	800f334 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	2250      	movs	r2, #80	@ 0x50
 800f23e:	5a9b      	ldrh	r3, [r3, r2]
 800f240:	b29b      	uxth	r3, r3
 800f242:	001a      	movs	r2, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	00db      	lsls	r3, r3, #3
 800f24a:	18d2      	adds	r2, r2, r3
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	18d3      	adds	r3, r2, r3
 800f252:	4a7a      	ldr	r2, [pc, #488]	@ (800f43c <HAL_PCD_EP_DB_Receive+0x220>)
 800f254:	4694      	mov	ip, r2
 800f256:	4463      	add	r3, ip
 800f258:	881a      	ldrh	r2, [r3, #0]
 800f25a:	211a      	movs	r1, #26
 800f25c:	187b      	adds	r3, r7, r1
 800f25e:	0592      	lsls	r2, r2, #22
 800f260:	0d92      	lsrs	r2, r2, #22
 800f262:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	699a      	ldr	r2, [r3, #24]
 800f268:	187b      	adds	r3, r7, r1
 800f26a:	881b      	ldrh	r3, [r3, #0]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d307      	bcc.n	800f280 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	699a      	ldr	r2, [r3, #24]
 800f274:	187b      	adds	r3, r7, r1
 800f276:	881b      	ldrh	r3, [r3, #0]
 800f278:	1ad2      	subs	r2, r2, r3
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	619a      	str	r2, [r3, #24]
 800f27e:	e002      	b.n	800f286 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	2200      	movs	r2, #0
 800f284:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d121      	bne.n	800f2d2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	001a      	movs	r2, r3
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	18d3      	adds	r3, r2, r3
 800f29c:	881b      	ldrh	r3, [r3, #0]
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	2018      	movs	r0, #24
 800f2a2:	183b      	adds	r3, r7, r0
 800f2a4:	4966      	ldr	r1, [pc, #408]	@ (800f440 <HAL_PCD_EP_DB_Receive+0x224>)
 800f2a6:	400a      	ands	r2, r1
 800f2a8:	801a      	strh	r2, [r3, #0]
 800f2aa:	183b      	adds	r3, r7, r0
 800f2ac:	183a      	adds	r2, r7, r0
 800f2ae:	8812      	ldrh	r2, [r2, #0]
 800f2b0:	2180      	movs	r1, #128	@ 0x80
 800f2b2:	0189      	lsls	r1, r1, #6
 800f2b4:	404a      	eors	r2, r1
 800f2b6:	801a      	strh	r2, [r3, #0]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	001a      	movs	r2, r3
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	18d3      	adds	r3, r2, r3
 800f2c6:	183a      	adds	r2, r7, r0
 800f2c8:	8812      	ldrh	r2, [r2, #0]
 800f2ca:	495e      	ldr	r1, [pc, #376]	@ (800f444 <HAL_PCD_EP_DB_Receive+0x228>)
 800f2cc:	430a      	orrs	r2, r1
 800f2ce:	b292      	uxth	r2, r2
 800f2d0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f2d2:	1dbb      	adds	r3, r7, #6
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	2240      	movs	r2, #64	@ 0x40
 800f2d8:	4013      	ands	r3, r2
 800f2da:	d01a      	beq.n	800f312 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	001a      	movs	r2, r3
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	18d3      	adds	r3, r2, r3
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	2016      	movs	r0, #22
 800f2f0:	183b      	adds	r3, r7, r0
 800f2f2:	4955      	ldr	r1, [pc, #340]	@ (800f448 <HAL_PCD_EP_DB_Receive+0x22c>)
 800f2f4:	400a      	ands	r2, r1
 800f2f6:	801a      	strh	r2, [r3, #0]
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	001a      	movs	r2, r3
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	009b      	lsls	r3, r3, #2
 800f304:	18d3      	adds	r3, r2, r3
 800f306:	183a      	adds	r2, r7, r0
 800f308:	8812      	ldrh	r2, [r2, #0]
 800f30a:	4950      	ldr	r1, [pc, #320]	@ (800f44c <HAL_PCD_EP_DB_Receive+0x230>)
 800f30c:	430a      	orrs	r2, r1
 800f30e:	b292      	uxth	r2, r2
 800f310:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f312:	241a      	movs	r4, #26
 800f314:	193b      	adds	r3, r7, r4
 800f316:	881b      	ldrh	r3, [r3, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d100      	bne.n	800f31e <HAL_PCD_EP_DB_Receive+0x102>
 800f31c:	e086      	b.n	800f42c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	6818      	ldr	r0, [r3, #0]
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	6959      	ldr	r1, [r3, #20]
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	891a      	ldrh	r2, [r3, #8]
 800f32a:	193b      	adds	r3, r7, r4
 800f32c:	881b      	ldrh	r3, [r3, #0]
 800f32e:	f005 ffde 	bl	80152ee <USB_ReadPMA>
 800f332:	e07b      	b.n	800f42c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2250      	movs	r2, #80	@ 0x50
 800f33a:	5a9b      	ldrh	r3, [r3, r2]
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	001a      	movs	r2, r3
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	00db      	lsls	r3, r3, #3
 800f346:	18d2      	adds	r2, r2, r3
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	18d3      	adds	r3, r2, r3
 800f34e:	4a40      	ldr	r2, [pc, #256]	@ (800f450 <HAL_PCD_EP_DB_Receive+0x234>)
 800f350:	4694      	mov	ip, r2
 800f352:	4463      	add	r3, ip
 800f354:	881a      	ldrh	r2, [r3, #0]
 800f356:	211a      	movs	r1, #26
 800f358:	187b      	adds	r3, r7, r1
 800f35a:	0592      	lsls	r2, r2, #22
 800f35c:	0d92      	lsrs	r2, r2, #22
 800f35e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	699a      	ldr	r2, [r3, #24]
 800f364:	187b      	adds	r3, r7, r1
 800f366:	881b      	ldrh	r3, [r3, #0]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d307      	bcc.n	800f37c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	699a      	ldr	r2, [r3, #24]
 800f370:	187b      	adds	r3, r7, r1
 800f372:	881b      	ldrh	r3, [r3, #0]
 800f374:	1ad2      	subs	r2, r2, r3
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	619a      	str	r2, [r3, #24]
 800f37a:	e002      	b.n	800f382 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	2200      	movs	r2, #0
 800f380:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	699b      	ldr	r3, [r3, #24]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d121      	bne.n	800f3ce <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	001a      	movs	r2, r3
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	009b      	lsls	r3, r3, #2
 800f396:	18d3      	adds	r3, r2, r3
 800f398:	881b      	ldrh	r3, [r3, #0]
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	201e      	movs	r0, #30
 800f39e:	183b      	adds	r3, r7, r0
 800f3a0:	4927      	ldr	r1, [pc, #156]	@ (800f440 <HAL_PCD_EP_DB_Receive+0x224>)
 800f3a2:	400a      	ands	r2, r1
 800f3a4:	801a      	strh	r2, [r3, #0]
 800f3a6:	183b      	adds	r3, r7, r0
 800f3a8:	183a      	adds	r2, r7, r0
 800f3aa:	8812      	ldrh	r2, [r2, #0]
 800f3ac:	2180      	movs	r1, #128	@ 0x80
 800f3ae:	0189      	lsls	r1, r1, #6
 800f3b0:	404a      	eors	r2, r1
 800f3b2:	801a      	strh	r2, [r3, #0]
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	001a      	movs	r2, r3
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	18d3      	adds	r3, r2, r3
 800f3c2:	183a      	adds	r2, r7, r0
 800f3c4:	8812      	ldrh	r2, [r2, #0]
 800f3c6:	491f      	ldr	r1, [pc, #124]	@ (800f444 <HAL_PCD_EP_DB_Receive+0x228>)
 800f3c8:	430a      	orrs	r2, r1
 800f3ca:	b292      	uxth	r2, r2
 800f3cc:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800f3ce:	1dbb      	adds	r3, r7, #6
 800f3d0:	881b      	ldrh	r3, [r3, #0]
 800f3d2:	2240      	movs	r2, #64	@ 0x40
 800f3d4:	4013      	ands	r3, r2
 800f3d6:	d11a      	bne.n	800f40e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	001a      	movs	r2, r3
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	18d3      	adds	r3, r2, r3
 800f3e6:	881b      	ldrh	r3, [r3, #0]
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	201c      	movs	r0, #28
 800f3ec:	183b      	adds	r3, r7, r0
 800f3ee:	4916      	ldr	r1, [pc, #88]	@ (800f448 <HAL_PCD_EP_DB_Receive+0x22c>)
 800f3f0:	400a      	ands	r2, r1
 800f3f2:	801a      	strh	r2, [r3, #0]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	001a      	movs	r2, r3
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	18d3      	adds	r3, r2, r3
 800f402:	183a      	adds	r2, r7, r0
 800f404:	8812      	ldrh	r2, [r2, #0]
 800f406:	4911      	ldr	r1, [pc, #68]	@ (800f44c <HAL_PCD_EP_DB_Receive+0x230>)
 800f408:	430a      	orrs	r2, r1
 800f40a:	b292      	uxth	r2, r2
 800f40c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f40e:	241a      	movs	r4, #26
 800f410:	193b      	adds	r3, r7, r4
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d009      	beq.n	800f42c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6818      	ldr	r0, [r3, #0]
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	6959      	ldr	r1, [r3, #20]
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	895a      	ldrh	r2, [r3, #10]
 800f424:	193b      	adds	r3, r7, r4
 800f426:	881b      	ldrh	r3, [r3, #0]
 800f428:	f005 ff61 	bl	80152ee <USB_ReadPMA>
    }
  }

  return count;
 800f42c:	231a      	movs	r3, #26
 800f42e:	18fb      	adds	r3, r7, r3
 800f430:	881b      	ldrh	r3, [r3, #0]
}
 800f432:	0018      	movs	r0, r3
 800f434:	46bd      	mov	sp, r7
 800f436:	b009      	add	sp, #36	@ 0x24
 800f438:	bd90      	pop	{r4, r7, pc}
 800f43a:	46c0      	nop			@ (mov r8, r8)
 800f43c:	00000402 	.word	0x00000402
 800f440:	ffffbf8f 	.word	0xffffbf8f
 800f444:	ffff8080 	.word	0xffff8080
 800f448:	ffff8f8f 	.word	0xffff8f8f
 800f44c:	ffff80c0 	.word	0xffff80c0
 800f450:	00000406 	.word	0x00000406

0800f454 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b0a4      	sub	sp, #144	@ 0x90
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	1dbb      	adds	r3, r7, #6
 800f460:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f462:	1dbb      	adds	r3, r7, #6
 800f464:	881b      	ldrh	r3, [r3, #0]
 800f466:	2240      	movs	r2, #64	@ 0x40
 800f468:	4013      	ands	r3, r2
 800f46a:	d100      	bne.n	800f46e <HAL_PCD_EP_DB_Transmit+0x1a>
 800f46c:	e1e4      	b.n	800f838 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2250      	movs	r2, #80	@ 0x50
 800f474:	5a9b      	ldrh	r3, [r3, r2]
 800f476:	b29b      	uxth	r3, r3
 800f478:	001a      	movs	r2, r3
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	00db      	lsls	r3, r3, #3
 800f480:	18d2      	adds	r2, r2, r3
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	18d3      	adds	r3, r2, r3
 800f488:	4ad0      	ldr	r2, [pc, #832]	@ (800f7cc <HAL_PCD_EP_DB_Transmit+0x378>)
 800f48a:	4694      	mov	ip, r2
 800f48c:	4463      	add	r3, ip
 800f48e:	881a      	ldrh	r2, [r3, #0]
 800f490:	2186      	movs	r1, #134	@ 0x86
 800f492:	187b      	adds	r3, r7, r1
 800f494:	0592      	lsls	r2, r2, #22
 800f496:	0d92      	lsrs	r2, r2, #22
 800f498:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	699a      	ldr	r2, [r3, #24]
 800f49e:	187b      	adds	r3, r7, r1
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d907      	bls.n	800f4b6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	699a      	ldr	r2, [r3, #24]
 800f4aa:	187b      	adds	r3, r7, r1
 800f4ac:	881b      	ldrh	r3, [r3, #0]
 800f4ae:	1ad2      	subs	r2, r2, r3
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	619a      	str	r2, [r3, #24]
 800f4b4:	e002      	b.n	800f4bc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	699b      	ldr	r3, [r3, #24]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d000      	beq.n	800f4c6 <HAL_PCD_EP_DB_Transmit+0x72>
 800f4c4:	e0b5      	b.n	800f632 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	785b      	ldrb	r3, [r3, #1]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d125      	bne.n	800f51a <HAL_PCD_EP_DB_Transmit+0xc6>
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2250      	movs	r2, #80	@ 0x50
 800f4da:	5a9b      	ldrh	r3, [r3, r2]
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	001a      	movs	r2, r3
 800f4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e2:	189b      	adds	r3, r3, r2
 800f4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	00da      	lsls	r2, r3, #3
 800f4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ee:	18d3      	adds	r3, r2, r3
 800f4f0:	4ab6      	ldr	r2, [pc, #728]	@ (800f7cc <HAL_PCD_EP_DB_Transmit+0x378>)
 800f4f2:	4694      	mov	ip, r2
 800f4f4:	4463      	add	r3, ip
 800f4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	059b      	lsls	r3, r3, #22
 800f500:	0d9b      	lsrs	r3, r3, #22
 800f502:	b29a      	uxth	r2, r3
 800f504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f506:	801a      	strh	r2, [r3, #0]
 800f508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f50a:	881b      	ldrh	r3, [r3, #0]
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	4ab0      	ldr	r2, [pc, #704]	@ (800f7d0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f510:	4313      	orrs	r3, r2
 800f512:	b29a      	uxth	r2, r3
 800f514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f516:	801a      	strh	r2, [r3, #0]
 800f518:	e01b      	b.n	800f552 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	785b      	ldrb	r3, [r3, #1]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d117      	bne.n	800f552 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	637b      	str	r3, [r7, #52]	@ 0x34
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2250      	movs	r2, #80	@ 0x50
 800f52e:	5a9b      	ldrh	r3, [r3, r2]
 800f530:	b29b      	uxth	r3, r3
 800f532:	001a      	movs	r2, r3
 800f534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f536:	189b      	adds	r3, r3, r2
 800f538:	637b      	str	r3, [r7, #52]	@ 0x34
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	00da      	lsls	r2, r3, #3
 800f540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f542:	18d3      	adds	r3, r2, r3
 800f544:	4aa1      	ldr	r2, [pc, #644]	@ (800f7cc <HAL_PCD_EP_DB_Transmit+0x378>)
 800f546:	4694      	mov	ip, r2
 800f548:	4463      	add	r3, ip
 800f54a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f54e:	2200      	movs	r2, #0
 800f550:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	627b      	str	r3, [r7, #36]	@ 0x24
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	785b      	ldrb	r3, [r3, #1]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d125      	bne.n	800f5ac <HAL_PCD_EP_DB_Transmit+0x158>
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	61fb      	str	r3, [r7, #28]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2250      	movs	r2, #80	@ 0x50
 800f56c:	5a9b      	ldrh	r3, [r3, r2]
 800f56e:	b29b      	uxth	r3, r3
 800f570:	001a      	movs	r2, r3
 800f572:	69fb      	ldr	r3, [r7, #28]
 800f574:	189b      	adds	r3, r3, r2
 800f576:	61fb      	str	r3, [r7, #28]
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	00da      	lsls	r2, r3, #3
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	18d3      	adds	r3, r2, r3
 800f582:	4a94      	ldr	r2, [pc, #592]	@ (800f7d4 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f584:	4694      	mov	ip, r2
 800f586:	4463      	add	r3, ip
 800f588:	61bb      	str	r3, [r7, #24]
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	881b      	ldrh	r3, [r3, #0]
 800f58e:	b29b      	uxth	r3, r3
 800f590:	059b      	lsls	r3, r3, #22
 800f592:	0d9b      	lsrs	r3, r3, #22
 800f594:	b29a      	uxth	r2, r3
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	801a      	strh	r2, [r3, #0]
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	4a8b      	ldr	r2, [pc, #556]	@ (800f7d0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	801a      	strh	r2, [r3, #0]
 800f5aa:	e018      	b.n	800f5de <HAL_PCD_EP_DB_Transmit+0x18a>
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	785b      	ldrb	r3, [r3, #1]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d114      	bne.n	800f5de <HAL_PCD_EP_DB_Transmit+0x18a>
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2250      	movs	r2, #80	@ 0x50
 800f5ba:	5a9b      	ldrh	r3, [r3, r2]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	001a      	movs	r2, r3
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c2:	189b      	adds	r3, r3, r2
 800f5c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	00da      	lsls	r2, r3, #3
 800f5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ce:	18d3      	adds	r3, r2, r3
 800f5d0:	4a80      	ldr	r2, [pc, #512]	@ (800f7d4 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f5d2:	4694      	mov	ip, r2
 800f5d4:	4463      	add	r3, ip
 800f5d6:	623b      	str	r3, [r7, #32]
 800f5d8:	6a3b      	ldr	r3, [r7, #32]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	781a      	ldrb	r2, [r3, #0]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	0011      	movs	r1, r2
 800f5e6:	0018      	movs	r0, r3
 800f5e8:	f007 febc 	bl	8017364 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f5ec:	1dbb      	adds	r3, r7, #6
 800f5ee:	881a      	ldrh	r2, [r3, #0]
 800f5f0:	2380      	movs	r3, #128	@ 0x80
 800f5f2:	01db      	lsls	r3, r3, #7
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	d100      	bne.n	800f5fa <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f5f8:	e309      	b.n	800fc0e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	001a      	movs	r2, r3
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	18d3      	adds	r3, r2, r3
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	b29a      	uxth	r2, r3
 800f60c:	2016      	movs	r0, #22
 800f60e:	183b      	adds	r3, r7, r0
 800f610:	4971      	ldr	r1, [pc, #452]	@ (800f7d8 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f612:	400a      	ands	r2, r1
 800f614:	801a      	strh	r2, [r3, #0]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	001a      	movs	r2, r3
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	18d3      	adds	r3, r2, r3
 800f624:	183a      	adds	r2, r7, r0
 800f626:	8812      	ldrh	r2, [r2, #0]
 800f628:	496c      	ldr	r1, [pc, #432]	@ (800f7dc <HAL_PCD_EP_DB_Transmit+0x388>)
 800f62a:	430a      	orrs	r2, r1
 800f62c:	b292      	uxth	r2, r2
 800f62e:	801a      	strh	r2, [r3, #0]
 800f630:	e2ed      	b.n	800fc0e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f632:	1dbb      	adds	r3, r7, #6
 800f634:	881a      	ldrh	r2, [r3, #0]
 800f636:	2380      	movs	r3, #128	@ 0x80
 800f638:	01db      	lsls	r3, r3, #7
 800f63a:	4013      	ands	r3, r2
 800f63c:	d01a      	beq.n	800f674 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	001a      	movs	r2, r3
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	18d3      	adds	r3, r2, r3
 800f64c:	881b      	ldrh	r3, [r3, #0]
 800f64e:	b29a      	uxth	r2, r3
 800f650:	208a      	movs	r0, #138	@ 0x8a
 800f652:	183b      	adds	r3, r7, r0
 800f654:	4960      	ldr	r1, [pc, #384]	@ (800f7d8 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f656:	400a      	ands	r2, r1
 800f658:	801a      	strh	r2, [r3, #0]
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	001a      	movs	r2, r3
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	18d3      	adds	r3, r2, r3
 800f668:	183a      	adds	r2, r7, r0
 800f66a:	8812      	ldrh	r2, [r2, #0]
 800f66c:	495b      	ldr	r1, [pc, #364]	@ (800f7dc <HAL_PCD_EP_DB_Transmit+0x388>)
 800f66e:	430a      	orrs	r2, r1
 800f670:	b292      	uxth	r2, r2
 800f672:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	2224      	movs	r2, #36	@ 0x24
 800f678:	5c9b      	ldrb	r3, [r3, r2]
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d000      	beq.n	800f680 <HAL_PCD_EP_DB_Transmit+0x22c>
 800f67e:	e2c6      	b.n	800fc0e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	695a      	ldr	r2, [r3, #20]
 800f684:	2186      	movs	r1, #134	@ 0x86
 800f686:	187b      	adds	r3, r7, r1
 800f688:	881b      	ldrh	r3, [r3, #0]
 800f68a:	18d2      	adds	r2, r2, r3
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	69da      	ldr	r2, [r3, #28]
 800f694:	187b      	adds	r3, r7, r1
 800f696:	881b      	ldrh	r3, [r3, #0]
 800f698:	18d2      	adds	r2, r2, r3
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	6a1a      	ldr	r2, [r3, #32]
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	691b      	ldr	r3, [r3, #16]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d30c      	bcc.n	800f6c4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	691b      	ldr	r3, [r3, #16]
 800f6ae:	218c      	movs	r1, #140	@ 0x8c
 800f6b0:	187a      	adds	r2, r7, r1
 800f6b2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	6a1a      	ldr	r2, [r3, #32]
 800f6b8:	187b      	adds	r3, r7, r1
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	1ad2      	subs	r2, r2, r3
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	621a      	str	r2, [r3, #32]
 800f6c2:	e01a      	b.n	800f6fa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	6a1b      	ldr	r3, [r3, #32]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d10a      	bne.n	800f6e2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800f6cc:	2386      	movs	r3, #134	@ 0x86
 800f6ce:	18fb      	adds	r3, r7, r3
 800f6d0:	881b      	ldrh	r3, [r3, #0]
 800f6d2:	228c      	movs	r2, #140	@ 0x8c
 800f6d4:	18ba      	adds	r2, r7, r2
 800f6d6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	2224      	movs	r2, #36	@ 0x24
 800f6dc:	2100      	movs	r1, #0
 800f6de:	5499      	strb	r1, [r3, r2]
 800f6e0:	e00b      	b.n	800f6fa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	2224      	movs	r2, #36	@ 0x24
 800f6e6:	2100      	movs	r1, #0
 800f6e8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	228c      	movs	r2, #140	@ 0x8c
 800f6f0:	18ba      	adds	r2, r7, r2
 800f6f2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	785b      	ldrb	r3, [r3, #1]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d000      	beq.n	800f704 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800f702:	e06d      	b.n	800f7e0 <HAL_PCD_EP_DB_Transmit+0x38c>
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2250      	movs	r2, #80	@ 0x50
 800f710:	5a9b      	ldrh	r3, [r3, r2]
 800f712:	b29b      	uxth	r3, r3
 800f714:	001a      	movs	r2, r3
 800f716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f718:	189b      	adds	r3, r3, r2
 800f71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	00da      	lsls	r2, r3, #3
 800f722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f724:	18d3      	adds	r3, r2, r3
 800f726:	4a29      	ldr	r2, [pc, #164]	@ (800f7cc <HAL_PCD_EP_DB_Transmit+0x378>)
 800f728:	4694      	mov	ip, r2
 800f72a:	4463      	add	r3, ip
 800f72c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	b29b      	uxth	r3, r3
 800f734:	059b      	lsls	r3, r3, #22
 800f736:	0d9b      	lsrs	r3, r3, #22
 800f738:	b29a      	uxth	r2, r3
 800f73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f73c:	801a      	strh	r2, [r3, #0]
 800f73e:	228c      	movs	r2, #140	@ 0x8c
 800f740:	18bb      	adds	r3, r7, r2
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2b3e      	cmp	r3, #62	@ 0x3e
 800f746:	d91a      	bls.n	800f77e <HAL_PCD_EP_DB_Transmit+0x32a>
 800f748:	18bb      	adds	r3, r7, r2
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	095b      	lsrs	r3, r3, #5
 800f74e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f750:	18bb      	adds	r3, r7, r2
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	221f      	movs	r2, #31
 800f756:	4013      	ands	r3, r2
 800f758:	d102      	bne.n	800f760 <HAL_PCD_EP_DB_Transmit+0x30c>
 800f75a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f75c:	3b01      	subs	r3, #1
 800f75e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f762:	881b      	ldrh	r3, [r3, #0]
 800f764:	b29a      	uxth	r2, r3
 800f766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f768:	b29b      	uxth	r3, r3
 800f76a:	029b      	lsls	r3, r3, #10
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4313      	orrs	r3, r2
 800f770:	b29b      	uxth	r3, r3
 800f772:	4a17      	ldr	r2, [pc, #92]	@ (800f7d0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f774:	4313      	orrs	r3, r2
 800f776:	b29a      	uxth	r2, r3
 800f778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f77a:	801a      	strh	r2, [r3, #0]
 800f77c:	e04f      	b.n	800f81e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f77e:	238c      	movs	r3, #140	@ 0x8c
 800f780:	18fb      	adds	r3, r7, r3
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d108      	bne.n	800f79a <HAL_PCD_EP_DB_Transmit+0x346>
 800f788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	4a10      	ldr	r2, [pc, #64]	@ (800f7d0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f790:	4313      	orrs	r3, r2
 800f792:	b29a      	uxth	r2, r3
 800f794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f796:	801a      	strh	r2, [r3, #0]
 800f798:	e041      	b.n	800f81e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f79a:	228c      	movs	r2, #140	@ 0x8c
 800f79c:	18bb      	adds	r3, r7, r2
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	085b      	lsrs	r3, r3, #1
 800f7a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7a4:	18bb      	adds	r3, r7, r2
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2201      	movs	r2, #1
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	d002      	beq.n	800f7b4 <HAL_PCD_EP_DB_Transmit+0x360>
 800f7ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b6:	881b      	ldrh	r3, [r3, #0]
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	029b      	lsls	r3, r3, #10
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	b29a      	uxth	r2, r3
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c8:	801a      	strh	r2, [r3, #0]
 800f7ca:	e028      	b.n	800f81e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f7cc:	00000402 	.word	0x00000402
 800f7d0:	ffff8000 	.word	0xffff8000
 800f7d4:	00000406 	.word	0x00000406
 800f7d8:	ffff8f8f 	.word	0xffff8f8f
 800f7dc:	ffffc080 	.word	0xffffc080
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	785b      	ldrb	r3, [r3, #1]
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d11a      	bne.n	800f81e <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2250      	movs	r2, #80	@ 0x50
 800f7f4:	5a9b      	ldrh	r3, [r3, r2]
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	001a      	movs	r2, r3
 800f7fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7fc:	189b      	adds	r3, r3, r2
 800f7fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	00da      	lsls	r2, r3, #3
 800f806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f808:	18d3      	adds	r3, r2, r3
 800f80a:	4adb      	ldr	r2, [pc, #876]	@ (800fb78 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f80c:	4694      	mov	ip, r2
 800f80e:	4463      	add	r3, ip
 800f810:	643b      	str	r3, [r7, #64]	@ 0x40
 800f812:	238c      	movs	r3, #140	@ 0x8c
 800f814:	18fb      	adds	r3, r7, r3
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	b29a      	uxth	r2, r3
 800f81a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f81c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6818      	ldr	r0, [r3, #0]
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	6959      	ldr	r1, [r3, #20]
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	891a      	ldrh	r2, [r3, #8]
 800f82a:	238c      	movs	r3, #140	@ 0x8c
 800f82c:	18fb      	adds	r3, r7, r3
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	b29b      	uxth	r3, r3
 800f832:	f005 fd13 	bl	801525c <USB_WritePMA>
 800f836:	e1ea      	b.n	800fc0e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2250      	movs	r2, #80	@ 0x50
 800f83e:	5a9b      	ldrh	r3, [r3, r2]
 800f840:	b29b      	uxth	r3, r3
 800f842:	001a      	movs	r2, r3
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	00db      	lsls	r3, r3, #3
 800f84a:	18d2      	adds	r2, r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	18d3      	adds	r3, r2, r3
 800f852:	4aca      	ldr	r2, [pc, #808]	@ (800fb7c <HAL_PCD_EP_DB_Transmit+0x728>)
 800f854:	4694      	mov	ip, r2
 800f856:	4463      	add	r3, ip
 800f858:	881a      	ldrh	r2, [r3, #0]
 800f85a:	2186      	movs	r1, #134	@ 0x86
 800f85c:	187b      	adds	r3, r7, r1
 800f85e:	0592      	lsls	r2, r2, #22
 800f860:	0d92      	lsrs	r2, r2, #22
 800f862:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	699a      	ldr	r2, [r3, #24]
 800f868:	187b      	adds	r3, r7, r1
 800f86a:	881b      	ldrh	r3, [r3, #0]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d307      	bcc.n	800f880 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	699a      	ldr	r2, [r3, #24]
 800f874:	187b      	adds	r3, r7, r1
 800f876:	881b      	ldrh	r3, [r3, #0]
 800f878:	1ad2      	subs	r2, r2, r3
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	619a      	str	r2, [r3, #24]
 800f87e:	e002      	b.n	800f886 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	2200      	movs	r2, #0
 800f884:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	699b      	ldr	r3, [r3, #24]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d000      	beq.n	800f890 <HAL_PCD_EP_DB_Transmit+0x43c>
 800f88e:	e0bb      	b.n	800fa08 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	785b      	ldrb	r3, [r3, #1]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d125      	bne.n	800f8e4 <HAL_PCD_EP_DB_Transmit+0x490>
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2250      	movs	r2, #80	@ 0x50
 800f8a4:	5a9b      	ldrh	r3, [r3, r2]
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	001a      	movs	r2, r3
 800f8aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f8ac:	189b      	adds	r3, r3, r2
 800f8ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	00da      	lsls	r2, r3, #3
 800f8b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f8b8:	18d3      	adds	r3, r2, r3
 800f8ba:	4aaf      	ldr	r2, [pc, #700]	@ (800fb78 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f8bc:	4694      	mov	ip, r2
 800f8be:	4463      	add	r3, ip
 800f8c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f8c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f8c4:	881b      	ldrh	r3, [r3, #0]
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	059b      	lsls	r3, r3, #22
 800f8ca:	0d9b      	lsrs	r3, r3, #22
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f8d0:	801a      	strh	r2, [r3, #0]
 800f8d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f8d4:	881b      	ldrh	r3, [r3, #0]
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	4aa9      	ldr	r2, [pc, #676]	@ (800fb80 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f8e0:	801a      	strh	r2, [r3, #0]
 800f8e2:	e01b      	b.n	800f91c <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	785b      	ldrb	r3, [r3, #1]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d117      	bne.n	800f91c <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2250      	movs	r2, #80	@ 0x50
 800f8f8:	5a9b      	ldrh	r3, [r3, r2]
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	001a      	movs	r2, r3
 800f8fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f900:	189b      	adds	r3, r3, r2
 800f902:	667b      	str	r3, [r7, #100]	@ 0x64
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	00da      	lsls	r2, r3, #3
 800f90a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f90c:	18d3      	adds	r3, r2, r3
 800f90e:	4a9a      	ldr	r2, [pc, #616]	@ (800fb78 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f910:	4694      	mov	ip, r2
 800f912:	4463      	add	r3, ip
 800f914:	663b      	str	r3, [r7, #96]	@ 0x60
 800f916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f918:	2200      	movs	r2, #0
 800f91a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	677b      	str	r3, [r7, #116]	@ 0x74
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	785b      	ldrb	r3, [r3, #1]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d12b      	bne.n	800f982 <HAL_PCD_EP_DB_Transmit+0x52e>
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	2250      	movs	r2, #80	@ 0x50
 800f936:	5a9b      	ldrh	r3, [r3, r2]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	001a      	movs	r2, r3
 800f93c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f93e:	189b      	adds	r3, r3, r2
 800f940:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	00da      	lsls	r2, r3, #3
 800f948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f94a:	18d3      	adds	r3, r2, r3
 800f94c:	4a8b      	ldr	r2, [pc, #556]	@ (800fb7c <HAL_PCD_EP_DB_Transmit+0x728>)
 800f94e:	4694      	mov	ip, r2
 800f950:	4463      	add	r3, ip
 800f952:	2180      	movs	r1, #128	@ 0x80
 800f954:	187a      	adds	r2, r7, r1
 800f956:	6013      	str	r3, [r2, #0]
 800f958:	187b      	adds	r3, r7, r1
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	881b      	ldrh	r3, [r3, #0]
 800f95e:	b29b      	uxth	r3, r3
 800f960:	059b      	lsls	r3, r3, #22
 800f962:	0d9b      	lsrs	r3, r3, #22
 800f964:	b29a      	uxth	r2, r3
 800f966:	187b      	adds	r3, r7, r1
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	801a      	strh	r2, [r3, #0]
 800f96c:	187b      	adds	r3, r7, r1
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	881b      	ldrh	r3, [r3, #0]
 800f972:	b29b      	uxth	r3, r3
 800f974:	4a82      	ldr	r2, [pc, #520]	@ (800fb80 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f976:	4313      	orrs	r3, r2
 800f978:	b29a      	uxth	r2, r3
 800f97a:	187b      	adds	r3, r7, r1
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	801a      	strh	r2, [r3, #0]
 800f980:	e018      	b.n	800f9b4 <HAL_PCD_EP_DB_Transmit+0x560>
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	785b      	ldrb	r3, [r3, #1]
 800f986:	2b01      	cmp	r3, #1
 800f988:	d114      	bne.n	800f9b4 <HAL_PCD_EP_DB_Transmit+0x560>
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2250      	movs	r2, #80	@ 0x50
 800f990:	5a9b      	ldrh	r3, [r3, r2]
 800f992:	b29b      	uxth	r3, r3
 800f994:	001a      	movs	r2, r3
 800f996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f998:	189b      	adds	r3, r3, r2
 800f99a:	677b      	str	r3, [r7, #116]	@ 0x74
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	00da      	lsls	r2, r3, #3
 800f9a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9a4:	18d3      	adds	r3, r2, r3
 800f9a6:	4a75      	ldr	r2, [pc, #468]	@ (800fb7c <HAL_PCD_EP_DB_Transmit+0x728>)
 800f9a8:	4694      	mov	ip, r2
 800f9aa:	4463      	add	r3, ip
 800f9ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800f9ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	781a      	ldrb	r2, [r3, #0]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	0011      	movs	r1, r2
 800f9bc:	0018      	movs	r0, r3
 800f9be:	f007 fcd1 	bl	8017364 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f9c2:	1dbb      	adds	r3, r7, #6
 800f9c4:	881a      	ldrh	r2, [r3, #0]
 800f9c6:	2380      	movs	r3, #128	@ 0x80
 800f9c8:	01db      	lsls	r3, r3, #7
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	d000      	beq.n	800f9d0 <HAL_PCD_EP_DB_Transmit+0x57c>
 800f9ce:	e11e      	b.n	800fc0e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	001a      	movs	r2, r3
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	18d3      	adds	r3, r2, r3
 800f9de:	881b      	ldrh	r3, [r3, #0]
 800f9e0:	b29a      	uxth	r2, r3
 800f9e2:	2088      	movs	r0, #136	@ 0x88
 800f9e4:	183b      	adds	r3, r7, r0
 800f9e6:	4967      	ldr	r1, [pc, #412]	@ (800fb84 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f9e8:	400a      	ands	r2, r1
 800f9ea:	801a      	strh	r2, [r3, #0]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	001a      	movs	r2, r3
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	18d3      	adds	r3, r2, r3
 800f9fa:	183a      	adds	r2, r7, r0
 800f9fc:	8812      	ldrh	r2, [r2, #0]
 800f9fe:	4962      	ldr	r1, [pc, #392]	@ (800fb88 <HAL_PCD_EP_DB_Transmit+0x734>)
 800fa00:	430a      	orrs	r2, r1
 800fa02:	b292      	uxth	r2, r2
 800fa04:	801a      	strh	r2, [r3, #0]
 800fa06:	e102      	b.n	800fc0e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800fa08:	1dbb      	adds	r3, r7, #6
 800fa0a:	881a      	ldrh	r2, [r3, #0]
 800fa0c:	2380      	movs	r3, #128	@ 0x80
 800fa0e:	01db      	lsls	r3, r3, #7
 800fa10:	4013      	ands	r3, r2
 800fa12:	d11a      	bne.n	800fa4a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	001a      	movs	r2, r3
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	18d3      	adds	r3, r2, r3
 800fa22:	881b      	ldrh	r3, [r3, #0]
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	204e      	movs	r0, #78	@ 0x4e
 800fa28:	183b      	adds	r3, r7, r0
 800fa2a:	4956      	ldr	r1, [pc, #344]	@ (800fb84 <HAL_PCD_EP_DB_Transmit+0x730>)
 800fa2c:	400a      	ands	r2, r1
 800fa2e:	801a      	strh	r2, [r3, #0]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	001a      	movs	r2, r3
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	18d3      	adds	r3, r2, r3
 800fa3e:	183a      	adds	r2, r7, r0
 800fa40:	8812      	ldrh	r2, [r2, #0]
 800fa42:	4951      	ldr	r1, [pc, #324]	@ (800fb88 <HAL_PCD_EP_DB_Transmit+0x734>)
 800fa44:	430a      	orrs	r2, r1
 800fa46:	b292      	uxth	r2, r2
 800fa48:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	2224      	movs	r2, #36	@ 0x24
 800fa4e:	5c9b      	ldrb	r3, [r3, r2]
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d000      	beq.n	800fa56 <HAL_PCD_EP_DB_Transmit+0x602>
 800fa54:	e0db      	b.n	800fc0e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	695a      	ldr	r2, [r3, #20]
 800fa5a:	2186      	movs	r1, #134	@ 0x86
 800fa5c:	187b      	adds	r3, r7, r1
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	18d2      	adds	r2, r2, r3
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	69da      	ldr	r2, [r3, #28]
 800fa6a:	187b      	adds	r3, r7, r1
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	18d2      	adds	r2, r2, r3
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	6a1a      	ldr	r2, [r3, #32]
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	691b      	ldr	r3, [r3, #16]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d30c      	bcc.n	800fa9a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	691b      	ldr	r3, [r3, #16]
 800fa84:	218c      	movs	r1, #140	@ 0x8c
 800fa86:	187a      	adds	r2, r7, r1
 800fa88:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	6a1a      	ldr	r2, [r3, #32]
 800fa8e:	187b      	adds	r3, r7, r1
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	1ad2      	subs	r2, r2, r3
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	621a      	str	r2, [r3, #32]
 800fa98:	e01a      	b.n	800fad0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d10a      	bne.n	800fab8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800faa2:	2386      	movs	r3, #134	@ 0x86
 800faa4:	18fb      	adds	r3, r7, r3
 800faa6:	881b      	ldrh	r3, [r3, #0]
 800faa8:	228c      	movs	r2, #140	@ 0x8c
 800faaa:	18ba      	adds	r2, r7, r2
 800faac:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	2224      	movs	r2, #36	@ 0x24
 800fab2:	2100      	movs	r1, #0
 800fab4:	5499      	strb	r1, [r3, r2]
 800fab6:	e00b      	b.n	800fad0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	6a1b      	ldr	r3, [r3, #32]
 800fabc:	228c      	movs	r2, #140	@ 0x8c
 800fabe:	18ba      	adds	r2, r7, r2
 800fac0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	2200      	movs	r2, #0
 800fac6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	2224      	movs	r2, #36	@ 0x24
 800facc:	2100      	movs	r1, #0
 800face:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	657b      	str	r3, [r7, #84]	@ 0x54
 800fad6:	68bb      	ldr	r3, [r7, #8]
 800fad8:	785b      	ldrb	r3, [r3, #1]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d000      	beq.n	800fae0 <HAL_PCD_EP_DB_Transmit+0x68c>
 800fade:	e06e      	b.n	800fbbe <HAL_PCD_EP_DB_Transmit+0x76a>
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2250      	movs	r2, #80	@ 0x50
 800faec:	5a9b      	ldrh	r3, [r3, r2]
 800faee:	b29b      	uxth	r3, r3
 800faf0:	001a      	movs	r2, r3
 800faf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800faf4:	189b      	adds	r3, r3, r2
 800faf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	00da      	lsls	r2, r3, #3
 800fafe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb00:	18d3      	adds	r3, r2, r3
 800fb02:	4a1e      	ldr	r2, [pc, #120]	@ (800fb7c <HAL_PCD_EP_DB_Transmit+0x728>)
 800fb04:	4694      	mov	ip, r2
 800fb06:	4463      	add	r3, ip
 800fb08:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fb0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb0c:	881b      	ldrh	r3, [r3, #0]
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	059b      	lsls	r3, r3, #22
 800fb12:	0d9b      	lsrs	r3, r3, #22
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb18:	801a      	strh	r2, [r3, #0]
 800fb1a:	228c      	movs	r2, #140	@ 0x8c
 800fb1c:	18bb      	adds	r3, r7, r2
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b3e      	cmp	r3, #62	@ 0x3e
 800fb22:	d91a      	bls.n	800fb5a <HAL_PCD_EP_DB_Transmit+0x706>
 800fb24:	18bb      	adds	r3, r7, r2
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	095b      	lsrs	r3, r3, #5
 800fb2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb2c:	18bb      	adds	r3, r7, r2
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	221f      	movs	r2, #31
 800fb32:	4013      	ands	r3, r2
 800fb34:	d102      	bne.n	800fb3c <HAL_PCD_EP_DB_Transmit+0x6e8>
 800fb36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb3e:	881b      	ldrh	r3, [r3, #0]
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	029b      	lsls	r3, r3, #10
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	4a0c      	ldr	r2, [pc, #48]	@ (800fb80 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800fb50:	4313      	orrs	r3, r2
 800fb52:	b29a      	uxth	r2, r3
 800fb54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb56:	801a      	strh	r2, [r3, #0]
 800fb58:	e04d      	b.n	800fbf6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fb5a:	238c      	movs	r3, #140	@ 0x8c
 800fb5c:	18fb      	adds	r3, r7, r3
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d113      	bne.n	800fb8c <HAL_PCD_EP_DB_Transmit+0x738>
 800fb64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	4a05      	ldr	r2, [pc, #20]	@ (800fb80 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800fb6c:	4313      	orrs	r3, r2
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb72:	801a      	strh	r2, [r3, #0]
 800fb74:	e03f      	b.n	800fbf6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fb76:	46c0      	nop			@ (mov r8, r8)
 800fb78:	00000402 	.word	0x00000402
 800fb7c:	00000406 	.word	0x00000406
 800fb80:	ffff8000 	.word	0xffff8000
 800fb84:	ffff8f8f 	.word	0xffff8f8f
 800fb88:	ffffc080 	.word	0xffffc080
 800fb8c:	228c      	movs	r2, #140	@ 0x8c
 800fb8e:	18bb      	adds	r3, r7, r2
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	085b      	lsrs	r3, r3, #1
 800fb94:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb96:	18bb      	adds	r3, r7, r2
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	4013      	ands	r3, r2
 800fb9e:	d002      	beq.n	800fba6 <HAL_PCD_EP_DB_Transmit+0x752>
 800fba0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fba2:	3301      	adds	r3, #1
 800fba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	029b      	lsls	r3, r3, #10
 800fbb2:	b29b      	uxth	r3, r3
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fbba:	801a      	strh	r2, [r3, #0]
 800fbbc:	e01b      	b.n	800fbf6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	785b      	ldrb	r3, [r3, #1]
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d117      	bne.n	800fbf6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2250      	movs	r2, #80	@ 0x50
 800fbcc:	5a9b      	ldrh	r3, [r3, r2]
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	001a      	movs	r2, r3
 800fbd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbd4:	189b      	adds	r3, r3, r2
 800fbd6:	657b      	str	r3, [r7, #84]	@ 0x54
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	00da      	lsls	r2, r3, #3
 800fbde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbe0:	18d3      	adds	r3, r2, r3
 800fbe2:	4a21      	ldr	r2, [pc, #132]	@ (800fc68 <HAL_PCD_EP_DB_Transmit+0x814>)
 800fbe4:	4694      	mov	ip, r2
 800fbe6:	4463      	add	r3, ip
 800fbe8:	653b      	str	r3, [r7, #80]	@ 0x50
 800fbea:	238c      	movs	r3, #140	@ 0x8c
 800fbec:	18fb      	adds	r3, r7, r3
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbf4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6818      	ldr	r0, [r3, #0]
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	6959      	ldr	r1, [r3, #20]
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	895a      	ldrh	r2, [r3, #10]
 800fc02:	238c      	movs	r3, #140	@ 0x8c
 800fc04:	18fb      	adds	r3, r7, r3
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	f005 fb27 	bl	801525c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	001a      	movs	r2, r3
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	18d3      	adds	r3, r2, r3
 800fc1c:	881b      	ldrh	r3, [r3, #0]
 800fc1e:	b29a      	uxth	r2, r3
 800fc20:	2014      	movs	r0, #20
 800fc22:	183b      	adds	r3, r7, r0
 800fc24:	4911      	ldr	r1, [pc, #68]	@ (800fc6c <HAL_PCD_EP_DB_Transmit+0x818>)
 800fc26:	400a      	ands	r2, r1
 800fc28:	801a      	strh	r2, [r3, #0]
 800fc2a:	183b      	adds	r3, r7, r0
 800fc2c:	183a      	adds	r2, r7, r0
 800fc2e:	8812      	ldrh	r2, [r2, #0]
 800fc30:	2110      	movs	r1, #16
 800fc32:	404a      	eors	r2, r1
 800fc34:	801a      	strh	r2, [r3, #0]
 800fc36:	183b      	adds	r3, r7, r0
 800fc38:	183a      	adds	r2, r7, r0
 800fc3a:	8812      	ldrh	r2, [r2, #0]
 800fc3c:	2120      	movs	r1, #32
 800fc3e:	404a      	eors	r2, r1
 800fc40:	801a      	strh	r2, [r3, #0]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	001a      	movs	r2, r3
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	18d3      	adds	r3, r2, r3
 800fc50:	183a      	adds	r2, r7, r0
 800fc52:	8812      	ldrh	r2, [r2, #0]
 800fc54:	4906      	ldr	r1, [pc, #24]	@ (800fc70 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800fc56:	430a      	orrs	r2, r1
 800fc58:	b292      	uxth	r2, r2
 800fc5a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800fc5c:	2300      	movs	r3, #0
}
 800fc5e:	0018      	movs	r0, r3
 800fc60:	46bd      	mov	sp, r7
 800fc62:	b024      	add	sp, #144	@ 0x90
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	46c0      	nop			@ (mov r8, r8)
 800fc68:	00000406 	.word	0x00000406
 800fc6c:	ffff8fbf 	.word	0xffff8fbf
 800fc70:	ffff8080 	.word	0xffff8080

0800fc74 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800fc74:	b590      	push	{r4, r7, lr}
 800fc76:	b087      	sub	sp, #28
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	0008      	movs	r0, r1
 800fc7e:	0011      	movs	r1, r2
 800fc80:	607b      	str	r3, [r7, #4]
 800fc82:	240a      	movs	r4, #10
 800fc84:	193b      	adds	r3, r7, r4
 800fc86:	1c02      	adds	r2, r0, #0
 800fc88:	801a      	strh	r2, [r3, #0]
 800fc8a:	2308      	movs	r3, #8
 800fc8c:	18fb      	adds	r3, r7, r3
 800fc8e:	1c0a      	adds	r2, r1, #0
 800fc90:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800fc92:	0021      	movs	r1, r4
 800fc94:	187b      	adds	r3, r7, r1
 800fc96:	881b      	ldrh	r3, [r3, #0]
 800fc98:	2280      	movs	r2, #128	@ 0x80
 800fc9a:	4013      	ands	r3, r2
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d00c      	beq.n	800fcbc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fca2:	187b      	adds	r3, r7, r1
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	2207      	movs	r2, #7
 800fca8:	4013      	ands	r3, r2
 800fcaa:	1c5a      	adds	r2, r3, #1
 800fcac:	0013      	movs	r3, r2
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	189b      	adds	r3, r3, r2
 800fcb2:	00db      	lsls	r3, r3, #3
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	18d3      	adds	r3, r2, r3
 800fcb8:	617b      	str	r3, [r7, #20]
 800fcba:	e00b      	b.n	800fcd4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fcbc:	230a      	movs	r3, #10
 800fcbe:	18fb      	adds	r3, r7, r3
 800fcc0:	881a      	ldrh	r2, [r3, #0]
 800fcc2:	0013      	movs	r3, r2
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	189b      	adds	r3, r3, r2
 800fcc8:	00db      	lsls	r3, r3, #3
 800fcca:	3369      	adds	r3, #105	@ 0x69
 800fccc:	33ff      	adds	r3, #255	@ 0xff
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	18d3      	adds	r3, r2, r3
 800fcd2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800fcd4:	2308      	movs	r3, #8
 800fcd6:	18fb      	adds	r3, r7, r3
 800fcd8:	881b      	ldrh	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d107      	bne.n	800fcee <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	2200      	movs	r2, #0
 800fce2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	80da      	strh	r2, [r3, #6]
 800fcec:	e00b      	b.n	800fd06 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	0c1b      	lsrs	r3, r3, #16
 800fd00:	b29a      	uxth	r2, r3
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fd06:	2300      	movs	r3, #0
}
 800fd08:	0018      	movs	r0, r3
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	b007      	add	sp, #28
 800fd0e:	bd90      	pop	{r4, r7, pc}

0800fd10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	23ba      	movs	r3, #186	@ 0xba
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	2101      	movs	r1, #1
 800fd26:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800fd28:	687a      	ldr	r2, [r7, #4]
 800fd2a:	23b8      	movs	r3, #184	@ 0xb8
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	2100      	movs	r1, #0
 800fd30:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2254      	movs	r2, #84	@ 0x54
 800fd36:	5a9b      	ldrh	r3, [r3, r2]
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	b299      	uxth	r1, r3
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2254      	movs	r2, #84	@ 0x54
 800fd44:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	2254      	movs	r2, #84	@ 0x54
 800fd4a:	5a9b      	ldrh	r3, [r3, r2]
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	2202      	movs	r2, #2
 800fd50:	4313      	orrs	r3, r2
 800fd52:	b299      	uxth	r1, r3
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2254      	movs	r2, #84	@ 0x54
 800fd58:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	0018      	movs	r0, r3
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	b004      	add	sp, #16
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	000a      	movs	r2, r1
 800fd6e:	1cfb      	adds	r3, r7, #3
 800fd70:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800fd72:	46c0      	nop			@ (mov r8, r8)
 800fd74:	46bd      	mov	sp, r7
 800fd76:	b002      	add	sp, #8
 800fd78:	bd80      	pop	{r7, pc}
	...

0800fd7c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800fd80:	4b04      	ldr	r3, [pc, #16]	@ (800fd94 <HAL_PWR_EnableBkUpAccess+0x18>)
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	4b03      	ldr	r3, [pc, #12]	@ (800fd94 <HAL_PWR_EnableBkUpAccess+0x18>)
 800fd86:	2180      	movs	r1, #128	@ 0x80
 800fd88:	0049      	lsls	r1, r1, #1
 800fd8a:	430a      	orrs	r2, r1
 800fd8c:	601a      	str	r2, [r3, #0]
}
 800fd8e:	46c0      	nop			@ (mov r8, r8)
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	40007000 	.word	0x40007000

0800fd98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fd98:	b5b0      	push	{r4, r5, r7, lr}
 800fd9a:	b08a      	sub	sp, #40	@ 0x28
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d102      	bne.n	800fdac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800fda6:	2301      	movs	r3, #1
 800fda8:	f000 fbbf 	bl	801052a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fdac:	4bc9      	ldr	r3, [pc, #804]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	220c      	movs	r2, #12
 800fdb2:	4013      	ands	r3, r2
 800fdb4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fdb6:	4bc7      	ldr	r3, [pc, #796]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fdb8:	68da      	ldr	r2, [r3, #12]
 800fdba:	2380      	movs	r3, #128	@ 0x80
 800fdbc:	025b      	lsls	r3, r3, #9
 800fdbe:	4013      	ands	r3, r2
 800fdc0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	4013      	ands	r3, r2
 800fdca:	d100      	bne.n	800fdce <HAL_RCC_OscConfig+0x36>
 800fdcc:	e07e      	b.n	800fecc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	2b08      	cmp	r3, #8
 800fdd2:	d007      	beq.n	800fde4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	2b0c      	cmp	r3, #12
 800fdd8:	d112      	bne.n	800fe00 <HAL_RCC_OscConfig+0x68>
 800fdda:	69ba      	ldr	r2, [r7, #24]
 800fddc:	2380      	movs	r3, #128	@ 0x80
 800fdde:	025b      	lsls	r3, r3, #9
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d10d      	bne.n	800fe00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fde4:	4bbb      	ldr	r3, [pc, #748]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	2380      	movs	r3, #128	@ 0x80
 800fdea:	029b      	lsls	r3, r3, #10
 800fdec:	4013      	ands	r3, r2
 800fdee:	d100      	bne.n	800fdf2 <HAL_RCC_OscConfig+0x5a>
 800fdf0:	e06b      	b.n	800feca <HAL_RCC_OscConfig+0x132>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d167      	bne.n	800feca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	f000 fb95 	bl	801052a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	685a      	ldr	r2, [r3, #4]
 800fe04:	2380      	movs	r3, #128	@ 0x80
 800fe06:	025b      	lsls	r3, r3, #9
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d107      	bne.n	800fe1c <HAL_RCC_OscConfig+0x84>
 800fe0c:	4bb1      	ldr	r3, [pc, #708]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	4bb0      	ldr	r3, [pc, #704]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe12:	2180      	movs	r1, #128	@ 0x80
 800fe14:	0249      	lsls	r1, r1, #9
 800fe16:	430a      	orrs	r2, r1
 800fe18:	601a      	str	r2, [r3, #0]
 800fe1a:	e027      	b.n	800fe6c <HAL_RCC_OscConfig+0xd4>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	685a      	ldr	r2, [r3, #4]
 800fe20:	23a0      	movs	r3, #160	@ 0xa0
 800fe22:	02db      	lsls	r3, r3, #11
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d10e      	bne.n	800fe46 <HAL_RCC_OscConfig+0xae>
 800fe28:	4baa      	ldr	r3, [pc, #680]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	4ba9      	ldr	r3, [pc, #676]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe2e:	2180      	movs	r1, #128	@ 0x80
 800fe30:	02c9      	lsls	r1, r1, #11
 800fe32:	430a      	orrs	r2, r1
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	4ba7      	ldr	r3, [pc, #668]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	4ba6      	ldr	r3, [pc, #664]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe3c:	2180      	movs	r1, #128	@ 0x80
 800fe3e:	0249      	lsls	r1, r1, #9
 800fe40:	430a      	orrs	r2, r1
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	e012      	b.n	800fe6c <HAL_RCC_OscConfig+0xd4>
 800fe46:	4ba3      	ldr	r3, [pc, #652]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	4ba2      	ldr	r3, [pc, #648]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe4c:	49a2      	ldr	r1, [pc, #648]	@ (80100d8 <HAL_RCC_OscConfig+0x340>)
 800fe4e:	400a      	ands	r2, r1
 800fe50:	601a      	str	r2, [r3, #0]
 800fe52:	4ba0      	ldr	r3, [pc, #640]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	2380      	movs	r3, #128	@ 0x80
 800fe58:	025b      	lsls	r3, r3, #9
 800fe5a:	4013      	ands	r3, r2
 800fe5c:	60fb      	str	r3, [r7, #12]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	4b9c      	ldr	r3, [pc, #624]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	4b9b      	ldr	r3, [pc, #620]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe66:	499d      	ldr	r1, [pc, #628]	@ (80100dc <HAL_RCC_OscConfig+0x344>)
 800fe68:	400a      	ands	r2, r1
 800fe6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d015      	beq.n	800fea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe74:	f7fa fa16 	bl	800a2a4 <HAL_GetTick>
 800fe78:	0003      	movs	r3, r0
 800fe7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fe7c:	e009      	b.n	800fe92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fe7e:	f7fa fa11 	bl	800a2a4 <HAL_GetTick>
 800fe82:	0002      	movs	r2, r0
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	1ad3      	subs	r3, r2, r3
 800fe88:	2b64      	cmp	r3, #100	@ 0x64
 800fe8a:	d902      	bls.n	800fe92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800fe8c:	2303      	movs	r3, #3
 800fe8e:	f000 fb4c 	bl	801052a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fe92:	4b90      	ldr	r3, [pc, #576]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	2380      	movs	r3, #128	@ 0x80
 800fe98:	029b      	lsls	r3, r3, #10
 800fe9a:	4013      	ands	r3, r2
 800fe9c:	d0ef      	beq.n	800fe7e <HAL_RCC_OscConfig+0xe6>
 800fe9e:	e015      	b.n	800fecc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fea0:	f7fa fa00 	bl	800a2a4 <HAL_GetTick>
 800fea4:	0003      	movs	r3, r0
 800fea6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fea8:	e008      	b.n	800febc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800feaa:	f7fa f9fb 	bl	800a2a4 <HAL_GetTick>
 800feae:	0002      	movs	r2, r0
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	1ad3      	subs	r3, r2, r3
 800feb4:	2b64      	cmp	r3, #100	@ 0x64
 800feb6:	d901      	bls.n	800febc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800feb8:	2303      	movs	r3, #3
 800feba:	e336      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800febc:	4b85      	ldr	r3, [pc, #532]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	2380      	movs	r3, #128	@ 0x80
 800fec2:	029b      	lsls	r3, r3, #10
 800fec4:	4013      	ands	r3, r2
 800fec6:	d1f0      	bne.n	800feaa <HAL_RCC_OscConfig+0x112>
 800fec8:	e000      	b.n	800fecc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800feca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	2202      	movs	r2, #2
 800fed2:	4013      	ands	r3, r2
 800fed4:	d100      	bne.n	800fed8 <HAL_RCC_OscConfig+0x140>
 800fed6:	e099      	b.n	801000c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800fede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee0:	2220      	movs	r2, #32
 800fee2:	4013      	ands	r3, r2
 800fee4:	d009      	beq.n	800fefa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800fee6:	4b7b      	ldr	r3, [pc, #492]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	4b7a      	ldr	r3, [pc, #488]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800feec:	2120      	movs	r1, #32
 800feee:	430a      	orrs	r2, r1
 800fef0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800fef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fef4:	2220      	movs	r2, #32
 800fef6:	4393      	bics	r3, r2
 800fef8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fefa:	69fb      	ldr	r3, [r7, #28]
 800fefc:	2b04      	cmp	r3, #4
 800fefe:	d005      	beq.n	800ff0c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	2b0c      	cmp	r3, #12
 800ff04:	d13e      	bne.n	800ff84 <HAL_RCC_OscConfig+0x1ec>
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d13b      	bne.n	800ff84 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800ff0c:	4b71      	ldr	r3, [pc, #452]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2204      	movs	r2, #4
 800ff12:	4013      	ands	r3, r2
 800ff14:	d004      	beq.n	800ff20 <HAL_RCC_OscConfig+0x188>
 800ff16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e304      	b.n	801052a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff20:	4b6c      	ldr	r3, [pc, #432]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	4a6e      	ldr	r2, [pc, #440]	@ (80100e0 <HAL_RCC_OscConfig+0x348>)
 800ff26:	4013      	ands	r3, r2
 800ff28:	0019      	movs	r1, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	691b      	ldr	r3, [r3, #16]
 800ff2e:	021a      	lsls	r2, r3, #8
 800ff30:	4b68      	ldr	r3, [pc, #416]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ff32:	430a      	orrs	r2, r1
 800ff34:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ff36:	4b67      	ldr	r3, [pc, #412]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	2209      	movs	r2, #9
 800ff3c:	4393      	bics	r3, r2
 800ff3e:	0019      	movs	r1, r3
 800ff40:	4b64      	ldr	r3, [pc, #400]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ff42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff44:	430a      	orrs	r2, r1
 800ff46:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ff48:	f000 fc42 	bl	80107d0 <HAL_RCC_GetSysClockFreq>
 800ff4c:	0001      	movs	r1, r0
 800ff4e:	4b61      	ldr	r3, [pc, #388]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	091b      	lsrs	r3, r3, #4
 800ff54:	220f      	movs	r2, #15
 800ff56:	4013      	ands	r3, r2
 800ff58:	4a62      	ldr	r2, [pc, #392]	@ (80100e4 <HAL_RCC_OscConfig+0x34c>)
 800ff5a:	5cd3      	ldrb	r3, [r2, r3]
 800ff5c:	000a      	movs	r2, r1
 800ff5e:	40da      	lsrs	r2, r3
 800ff60:	4b61      	ldr	r3, [pc, #388]	@ (80100e8 <HAL_RCC_OscConfig+0x350>)
 800ff62:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800ff64:	4b61      	ldr	r3, [pc, #388]	@ (80100ec <HAL_RCC_OscConfig+0x354>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2513      	movs	r5, #19
 800ff6a:	197c      	adds	r4, r7, r5
 800ff6c:	0018      	movs	r0, r3
 800ff6e:	f7fa f953 	bl	800a218 <HAL_InitTick>
 800ff72:	0003      	movs	r3, r0
 800ff74:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800ff76:	197b      	adds	r3, r7, r5
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d046      	beq.n	801000c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800ff7e:	197b      	adds	r3, r7, r5
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	e2d2      	b.n	801052a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800ff84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d027      	beq.n	800ffda <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ff8a:	4b52      	ldr	r3, [pc, #328]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2209      	movs	r2, #9
 800ff90:	4393      	bics	r3, r2
 800ff92:	0019      	movs	r1, r3
 800ff94:	4b4f      	ldr	r3, [pc, #316]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ff96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff98:	430a      	orrs	r2, r1
 800ff9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff9c:	f7fa f982 	bl	800a2a4 <HAL_GetTick>
 800ffa0:	0003      	movs	r3, r0
 800ffa2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ffa4:	e008      	b.n	800ffb8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ffa6:	f7fa f97d 	bl	800a2a4 <HAL_GetTick>
 800ffaa:	0002      	movs	r2, r0
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	2b02      	cmp	r3, #2
 800ffb2:	d901      	bls.n	800ffb8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800ffb4:	2303      	movs	r3, #3
 800ffb6:	e2b8      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ffb8:	4b46      	ldr	r3, [pc, #280]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2204      	movs	r2, #4
 800ffbe:	4013      	ands	r3, r2
 800ffc0:	d0f1      	beq.n	800ffa6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ffc2:	4b44      	ldr	r3, [pc, #272]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	4a46      	ldr	r2, [pc, #280]	@ (80100e0 <HAL_RCC_OscConfig+0x348>)
 800ffc8:	4013      	ands	r3, r2
 800ffca:	0019      	movs	r1, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	691b      	ldr	r3, [r3, #16]
 800ffd0:	021a      	lsls	r2, r3, #8
 800ffd2:	4b40      	ldr	r3, [pc, #256]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ffd4:	430a      	orrs	r2, r1
 800ffd6:	605a      	str	r2, [r3, #4]
 800ffd8:	e018      	b.n	801000c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ffda:	4b3e      	ldr	r3, [pc, #248]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	4b3d      	ldr	r3, [pc, #244]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 800ffe0:	2101      	movs	r1, #1
 800ffe2:	438a      	bics	r2, r1
 800ffe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ffe6:	f7fa f95d 	bl	800a2a4 <HAL_GetTick>
 800ffea:	0003      	movs	r3, r0
 800ffec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ffee:	e008      	b.n	8010002 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fff0:	f7fa f958 	bl	800a2a4 <HAL_GetTick>
 800fff4:	0002      	movs	r2, r0
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	1ad3      	subs	r3, r2, r3
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	d901      	bls.n	8010002 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800fffe:	2303      	movs	r3, #3
 8010000:	e293      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010002:	4b34      	ldr	r3, [pc, #208]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	2204      	movs	r2, #4
 8010008:	4013      	ands	r3, r2
 801000a:	d1f1      	bne.n	800fff0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2210      	movs	r2, #16
 8010012:	4013      	ands	r3, r2
 8010014:	d100      	bne.n	8010018 <HAL_RCC_OscConfig+0x280>
 8010016:	e0a2      	b.n	801015e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d140      	bne.n	80100a0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801001e:	4b2d      	ldr	r3, [pc, #180]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 8010020:	681a      	ldr	r2, [r3, #0]
 8010022:	2380      	movs	r3, #128	@ 0x80
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	4013      	ands	r3, r2
 8010028:	d005      	beq.n	8010036 <HAL_RCC_OscConfig+0x29e>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	69db      	ldr	r3, [r3, #28]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d101      	bne.n	8010036 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8010032:	2301      	movs	r3, #1
 8010034:	e279      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010036:	4b27      	ldr	r3, [pc, #156]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	4a2d      	ldr	r2, [pc, #180]	@ (80100f0 <HAL_RCC_OscConfig+0x358>)
 801003c:	4013      	ands	r3, r2
 801003e:	0019      	movs	r1, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010044:	4b23      	ldr	r3, [pc, #140]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 8010046:	430a      	orrs	r2, r1
 8010048:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801004a:	4b22      	ldr	r3, [pc, #136]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	021b      	lsls	r3, r3, #8
 8010050:	0a19      	lsrs	r1, r3, #8
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6a1b      	ldr	r3, [r3, #32]
 8010056:	061a      	lsls	r2, r3, #24
 8010058:	4b1e      	ldr	r3, [pc, #120]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 801005a:	430a      	orrs	r2, r1
 801005c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010062:	0b5b      	lsrs	r3, r3, #13
 8010064:	3301      	adds	r3, #1
 8010066:	2280      	movs	r2, #128	@ 0x80
 8010068:	0212      	lsls	r2, r2, #8
 801006a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801006c:	4b19      	ldr	r3, [pc, #100]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	091b      	lsrs	r3, r3, #4
 8010072:	210f      	movs	r1, #15
 8010074:	400b      	ands	r3, r1
 8010076:	491b      	ldr	r1, [pc, #108]	@ (80100e4 <HAL_RCC_OscConfig+0x34c>)
 8010078:	5ccb      	ldrb	r3, [r1, r3]
 801007a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801007c:	4b1a      	ldr	r3, [pc, #104]	@ (80100e8 <HAL_RCC_OscConfig+0x350>)
 801007e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8010080:	4b1a      	ldr	r3, [pc, #104]	@ (80100ec <HAL_RCC_OscConfig+0x354>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2513      	movs	r5, #19
 8010086:	197c      	adds	r4, r7, r5
 8010088:	0018      	movs	r0, r3
 801008a:	f7fa f8c5 	bl	800a218 <HAL_InitTick>
 801008e:	0003      	movs	r3, r0
 8010090:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8010092:	197b      	adds	r3, r7, r5
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d061      	beq.n	801015e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801009a:	197b      	adds	r3, r7, r5
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	e244      	b.n	801052a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	69db      	ldr	r3, [r3, #28]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d040      	beq.n	801012a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80100a8:	4b0a      	ldr	r3, [pc, #40]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	4b09      	ldr	r3, [pc, #36]	@ (80100d4 <HAL_RCC_OscConfig+0x33c>)
 80100ae:	2180      	movs	r1, #128	@ 0x80
 80100b0:	0049      	lsls	r1, r1, #1
 80100b2:	430a      	orrs	r2, r1
 80100b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100b6:	f7fa f8f5 	bl	800a2a4 <HAL_GetTick>
 80100ba:	0003      	movs	r3, r0
 80100bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80100be:	e019      	b.n	80100f4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80100c0:	f7fa f8f0 	bl	800a2a4 <HAL_GetTick>
 80100c4:	0002      	movs	r2, r0
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	2b02      	cmp	r3, #2
 80100cc:	d912      	bls.n	80100f4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80100ce:	2303      	movs	r3, #3
 80100d0:	e22b      	b.n	801052a <HAL_RCC_OscConfig+0x792>
 80100d2:	46c0      	nop			@ (mov r8, r8)
 80100d4:	40021000 	.word	0x40021000
 80100d8:	fffeffff 	.word	0xfffeffff
 80100dc:	fffbffff 	.word	0xfffbffff
 80100e0:	ffffe0ff 	.word	0xffffe0ff
 80100e4:	0801c0f4 	.word	0x0801c0f4
 80100e8:	2000005c 	.word	0x2000005c
 80100ec:	20000070 	.word	0x20000070
 80100f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80100f4:	4bca      	ldr	r3, [pc, #808]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80100f6:	681a      	ldr	r2, [r3, #0]
 80100f8:	2380      	movs	r3, #128	@ 0x80
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	4013      	ands	r3, r2
 80100fe:	d0df      	beq.n	80100c0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010100:	4bc7      	ldr	r3, [pc, #796]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	4ac7      	ldr	r2, [pc, #796]	@ (8010424 <HAL_RCC_OscConfig+0x68c>)
 8010106:	4013      	ands	r3, r2
 8010108:	0019      	movs	r1, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801010e:	4bc4      	ldr	r3, [pc, #784]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010110:	430a      	orrs	r2, r1
 8010112:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010114:	4bc2      	ldr	r3, [pc, #776]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	021b      	lsls	r3, r3, #8
 801011a:	0a19      	lsrs	r1, r3, #8
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6a1b      	ldr	r3, [r3, #32]
 8010120:	061a      	lsls	r2, r3, #24
 8010122:	4bbf      	ldr	r3, [pc, #764]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010124:	430a      	orrs	r2, r1
 8010126:	605a      	str	r2, [r3, #4]
 8010128:	e019      	b.n	801015e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801012a:	4bbd      	ldr	r3, [pc, #756]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	4bbc      	ldr	r3, [pc, #752]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010130:	49bd      	ldr	r1, [pc, #756]	@ (8010428 <HAL_RCC_OscConfig+0x690>)
 8010132:	400a      	ands	r2, r1
 8010134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010136:	f7fa f8b5 	bl	800a2a4 <HAL_GetTick>
 801013a:	0003      	movs	r3, r0
 801013c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801013e:	e008      	b.n	8010152 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010140:	f7fa f8b0 	bl	800a2a4 <HAL_GetTick>
 8010144:	0002      	movs	r2, r0
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	2b02      	cmp	r3, #2
 801014c:	d901      	bls.n	8010152 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801014e:	2303      	movs	r3, #3
 8010150:	e1eb      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8010152:	4bb3      	ldr	r3, [pc, #716]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	2380      	movs	r3, #128	@ 0x80
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	4013      	ands	r3, r2
 801015c:	d1f0      	bne.n	8010140 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	2208      	movs	r2, #8
 8010164:	4013      	ands	r3, r2
 8010166:	d036      	beq.n	80101d6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	695b      	ldr	r3, [r3, #20]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d019      	beq.n	80101a4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010170:	4bab      	ldr	r3, [pc, #684]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010172:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010174:	4baa      	ldr	r3, [pc, #680]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010176:	2101      	movs	r1, #1
 8010178:	430a      	orrs	r2, r1
 801017a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801017c:	f7fa f892 	bl	800a2a4 <HAL_GetTick>
 8010180:	0003      	movs	r3, r0
 8010182:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010184:	e008      	b.n	8010198 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010186:	f7fa f88d 	bl	800a2a4 <HAL_GetTick>
 801018a:	0002      	movs	r2, r0
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	2b02      	cmp	r3, #2
 8010192:	d901      	bls.n	8010198 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8010194:	2303      	movs	r3, #3
 8010196:	e1c8      	b.n	801052a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010198:	4ba1      	ldr	r3, [pc, #644]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 801019a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801019c:	2202      	movs	r2, #2
 801019e:	4013      	ands	r3, r2
 80101a0:	d0f1      	beq.n	8010186 <HAL_RCC_OscConfig+0x3ee>
 80101a2:	e018      	b.n	80101d6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80101a4:	4b9e      	ldr	r3, [pc, #632]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80101a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101a8:	4b9d      	ldr	r3, [pc, #628]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80101aa:	2101      	movs	r1, #1
 80101ac:	438a      	bics	r2, r1
 80101ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80101b0:	f7fa f878 	bl	800a2a4 <HAL_GetTick>
 80101b4:	0003      	movs	r3, r0
 80101b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80101b8:	e008      	b.n	80101cc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80101ba:	f7fa f873 	bl	800a2a4 <HAL_GetTick>
 80101be:	0002      	movs	r2, r0
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	2b02      	cmp	r3, #2
 80101c6:	d901      	bls.n	80101cc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80101c8:	2303      	movs	r3, #3
 80101ca:	e1ae      	b.n	801052a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80101cc:	4b94      	ldr	r3, [pc, #592]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80101ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101d0:	2202      	movs	r2, #2
 80101d2:	4013      	ands	r3, r2
 80101d4:	d1f1      	bne.n	80101ba <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2204      	movs	r2, #4
 80101dc:	4013      	ands	r3, r2
 80101de:	d100      	bne.n	80101e2 <HAL_RCC_OscConfig+0x44a>
 80101e0:	e0ae      	b.n	8010340 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80101e2:	2023      	movs	r0, #35	@ 0x23
 80101e4:	183b      	adds	r3, r7, r0
 80101e6:	2200      	movs	r2, #0
 80101e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80101ea:	4b8d      	ldr	r3, [pc, #564]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80101ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101ee:	2380      	movs	r3, #128	@ 0x80
 80101f0:	055b      	lsls	r3, r3, #21
 80101f2:	4013      	ands	r3, r2
 80101f4:	d109      	bne.n	801020a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80101f6:	4b8a      	ldr	r3, [pc, #552]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80101f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101fa:	4b89      	ldr	r3, [pc, #548]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80101fc:	2180      	movs	r1, #128	@ 0x80
 80101fe:	0549      	lsls	r1, r1, #21
 8010200:	430a      	orrs	r2, r1
 8010202:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8010204:	183b      	adds	r3, r7, r0
 8010206:	2201      	movs	r2, #1
 8010208:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801020a:	4b88      	ldr	r3, [pc, #544]	@ (801042c <HAL_RCC_OscConfig+0x694>)
 801020c:	681a      	ldr	r2, [r3, #0]
 801020e:	2380      	movs	r3, #128	@ 0x80
 8010210:	005b      	lsls	r3, r3, #1
 8010212:	4013      	ands	r3, r2
 8010214:	d11a      	bne.n	801024c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010216:	4b85      	ldr	r3, [pc, #532]	@ (801042c <HAL_RCC_OscConfig+0x694>)
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	4b84      	ldr	r3, [pc, #528]	@ (801042c <HAL_RCC_OscConfig+0x694>)
 801021c:	2180      	movs	r1, #128	@ 0x80
 801021e:	0049      	lsls	r1, r1, #1
 8010220:	430a      	orrs	r2, r1
 8010222:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010224:	f7fa f83e 	bl	800a2a4 <HAL_GetTick>
 8010228:	0003      	movs	r3, r0
 801022a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801022c:	e008      	b.n	8010240 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801022e:	f7fa f839 	bl	800a2a4 <HAL_GetTick>
 8010232:	0002      	movs	r2, r0
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	2b64      	cmp	r3, #100	@ 0x64
 801023a:	d901      	bls.n	8010240 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801023c:	2303      	movs	r3, #3
 801023e:	e174      	b.n	801052a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010240:	4b7a      	ldr	r3, [pc, #488]	@ (801042c <HAL_RCC_OscConfig+0x694>)
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	2380      	movs	r3, #128	@ 0x80
 8010246:	005b      	lsls	r3, r3, #1
 8010248:	4013      	ands	r3, r2
 801024a:	d0f0      	beq.n	801022e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	689a      	ldr	r2, [r3, #8]
 8010250:	2380      	movs	r3, #128	@ 0x80
 8010252:	005b      	lsls	r3, r3, #1
 8010254:	429a      	cmp	r2, r3
 8010256:	d107      	bne.n	8010268 <HAL_RCC_OscConfig+0x4d0>
 8010258:	4b71      	ldr	r3, [pc, #452]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 801025a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801025c:	4b70      	ldr	r3, [pc, #448]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 801025e:	2180      	movs	r1, #128	@ 0x80
 8010260:	0049      	lsls	r1, r1, #1
 8010262:	430a      	orrs	r2, r1
 8010264:	651a      	str	r2, [r3, #80]	@ 0x50
 8010266:	e031      	b.n	80102cc <HAL_RCC_OscConfig+0x534>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	689b      	ldr	r3, [r3, #8]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10c      	bne.n	801028a <HAL_RCC_OscConfig+0x4f2>
 8010270:	4b6b      	ldr	r3, [pc, #428]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010272:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010274:	4b6a      	ldr	r3, [pc, #424]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010276:	496c      	ldr	r1, [pc, #432]	@ (8010428 <HAL_RCC_OscConfig+0x690>)
 8010278:	400a      	ands	r2, r1
 801027a:	651a      	str	r2, [r3, #80]	@ 0x50
 801027c:	4b68      	ldr	r3, [pc, #416]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 801027e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010280:	4b67      	ldr	r3, [pc, #412]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010282:	496b      	ldr	r1, [pc, #428]	@ (8010430 <HAL_RCC_OscConfig+0x698>)
 8010284:	400a      	ands	r2, r1
 8010286:	651a      	str	r2, [r3, #80]	@ 0x50
 8010288:	e020      	b.n	80102cc <HAL_RCC_OscConfig+0x534>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	689a      	ldr	r2, [r3, #8]
 801028e:	23a0      	movs	r3, #160	@ 0xa0
 8010290:	00db      	lsls	r3, r3, #3
 8010292:	429a      	cmp	r2, r3
 8010294:	d10e      	bne.n	80102b4 <HAL_RCC_OscConfig+0x51c>
 8010296:	4b62      	ldr	r3, [pc, #392]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010298:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801029a:	4b61      	ldr	r3, [pc, #388]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 801029c:	2180      	movs	r1, #128	@ 0x80
 801029e:	00c9      	lsls	r1, r1, #3
 80102a0:	430a      	orrs	r2, r1
 80102a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80102a4:	4b5e      	ldr	r3, [pc, #376]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80102a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102a8:	4b5d      	ldr	r3, [pc, #372]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80102aa:	2180      	movs	r1, #128	@ 0x80
 80102ac:	0049      	lsls	r1, r1, #1
 80102ae:	430a      	orrs	r2, r1
 80102b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80102b2:	e00b      	b.n	80102cc <HAL_RCC_OscConfig+0x534>
 80102b4:	4b5a      	ldr	r3, [pc, #360]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80102b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102b8:	4b59      	ldr	r3, [pc, #356]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80102ba:	495b      	ldr	r1, [pc, #364]	@ (8010428 <HAL_RCC_OscConfig+0x690>)
 80102bc:	400a      	ands	r2, r1
 80102be:	651a      	str	r2, [r3, #80]	@ 0x50
 80102c0:	4b57      	ldr	r3, [pc, #348]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80102c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102c4:	4b56      	ldr	r3, [pc, #344]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80102c6:	495a      	ldr	r1, [pc, #360]	@ (8010430 <HAL_RCC_OscConfig+0x698>)
 80102c8:	400a      	ands	r2, r1
 80102ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d015      	beq.n	8010300 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80102d4:	f7f9 ffe6 	bl	800a2a4 <HAL_GetTick>
 80102d8:	0003      	movs	r3, r0
 80102da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80102dc:	e009      	b.n	80102f2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80102de:	f7f9 ffe1 	bl	800a2a4 <HAL_GetTick>
 80102e2:	0002      	movs	r2, r0
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	4a52      	ldr	r2, [pc, #328]	@ (8010434 <HAL_RCC_OscConfig+0x69c>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d901      	bls.n	80102f2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80102ee:	2303      	movs	r3, #3
 80102f0:	e11b      	b.n	801052a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80102f2:	4b4b      	ldr	r3, [pc, #300]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80102f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102f6:	2380      	movs	r3, #128	@ 0x80
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	4013      	ands	r3, r2
 80102fc:	d0ef      	beq.n	80102de <HAL_RCC_OscConfig+0x546>
 80102fe:	e014      	b.n	801032a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010300:	f7f9 ffd0 	bl	800a2a4 <HAL_GetTick>
 8010304:	0003      	movs	r3, r0
 8010306:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010308:	e009      	b.n	801031e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801030a:	f7f9 ffcb 	bl	800a2a4 <HAL_GetTick>
 801030e:	0002      	movs	r2, r0
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	1ad3      	subs	r3, r2, r3
 8010314:	4a47      	ldr	r2, [pc, #284]	@ (8010434 <HAL_RCC_OscConfig+0x69c>)
 8010316:	4293      	cmp	r3, r2
 8010318:	d901      	bls.n	801031e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801031a:	2303      	movs	r3, #3
 801031c:	e105      	b.n	801052a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801031e:	4b40      	ldr	r3, [pc, #256]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010322:	2380      	movs	r3, #128	@ 0x80
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	4013      	ands	r3, r2
 8010328:	d1ef      	bne.n	801030a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801032a:	2323      	movs	r3, #35	@ 0x23
 801032c:	18fb      	adds	r3, r7, r3
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	2b01      	cmp	r3, #1
 8010332:	d105      	bne.n	8010340 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010334:	4b3a      	ldr	r3, [pc, #232]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010338:	4b39      	ldr	r3, [pc, #228]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 801033a:	493f      	ldr	r1, [pc, #252]	@ (8010438 <HAL_RCC_OscConfig+0x6a0>)
 801033c:	400a      	ands	r2, r1
 801033e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2220      	movs	r2, #32
 8010346:	4013      	ands	r3, r2
 8010348:	d049      	beq.n	80103de <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	699b      	ldr	r3, [r3, #24]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d026      	beq.n	80103a0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8010352:	4b33      	ldr	r3, [pc, #204]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010354:	689a      	ldr	r2, [r3, #8]
 8010356:	4b32      	ldr	r3, [pc, #200]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010358:	2101      	movs	r1, #1
 801035a:	430a      	orrs	r2, r1
 801035c:	609a      	str	r2, [r3, #8]
 801035e:	4b30      	ldr	r3, [pc, #192]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010362:	4b2f      	ldr	r3, [pc, #188]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010364:	2101      	movs	r1, #1
 8010366:	430a      	orrs	r2, r1
 8010368:	635a      	str	r2, [r3, #52]	@ 0x34
 801036a:	4b34      	ldr	r3, [pc, #208]	@ (801043c <HAL_RCC_OscConfig+0x6a4>)
 801036c:	6a1a      	ldr	r2, [r3, #32]
 801036e:	4b33      	ldr	r3, [pc, #204]	@ (801043c <HAL_RCC_OscConfig+0x6a4>)
 8010370:	2180      	movs	r1, #128	@ 0x80
 8010372:	0189      	lsls	r1, r1, #6
 8010374:	430a      	orrs	r2, r1
 8010376:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010378:	f7f9 ff94 	bl	800a2a4 <HAL_GetTick>
 801037c:	0003      	movs	r3, r0
 801037e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010380:	e008      	b.n	8010394 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010382:	f7f9 ff8f 	bl	800a2a4 <HAL_GetTick>
 8010386:	0002      	movs	r2, r0
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	2b02      	cmp	r3, #2
 801038e:	d901      	bls.n	8010394 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8010390:	2303      	movs	r3, #3
 8010392:	e0ca      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010394:	4b22      	ldr	r3, [pc, #136]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 8010396:	689b      	ldr	r3, [r3, #8]
 8010398:	2202      	movs	r2, #2
 801039a:	4013      	ands	r3, r2
 801039c:	d0f1      	beq.n	8010382 <HAL_RCC_OscConfig+0x5ea>
 801039e:	e01e      	b.n	80103de <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80103a0:	4b1f      	ldr	r3, [pc, #124]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80103a2:	689a      	ldr	r2, [r3, #8]
 80103a4:	4b1e      	ldr	r3, [pc, #120]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80103a6:	2101      	movs	r1, #1
 80103a8:	438a      	bics	r2, r1
 80103aa:	609a      	str	r2, [r3, #8]
 80103ac:	4b23      	ldr	r3, [pc, #140]	@ (801043c <HAL_RCC_OscConfig+0x6a4>)
 80103ae:	6a1a      	ldr	r2, [r3, #32]
 80103b0:	4b22      	ldr	r3, [pc, #136]	@ (801043c <HAL_RCC_OscConfig+0x6a4>)
 80103b2:	4923      	ldr	r1, [pc, #140]	@ (8010440 <HAL_RCC_OscConfig+0x6a8>)
 80103b4:	400a      	ands	r2, r1
 80103b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80103b8:	f7f9 ff74 	bl	800a2a4 <HAL_GetTick>
 80103bc:	0003      	movs	r3, r0
 80103be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80103c0:	e008      	b.n	80103d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80103c2:	f7f9 ff6f 	bl	800a2a4 <HAL_GetTick>
 80103c6:	0002      	movs	r2, r0
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	2b02      	cmp	r3, #2
 80103ce:	d901      	bls.n	80103d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80103d0:	2303      	movs	r3, #3
 80103d2:	e0aa      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80103d4:	4b12      	ldr	r3, [pc, #72]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80103d6:	689b      	ldr	r3, [r3, #8]
 80103d8:	2202      	movs	r2, #2
 80103da:	4013      	ands	r3, r2
 80103dc:	d1f1      	bne.n	80103c2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d100      	bne.n	80103e8 <HAL_RCC_OscConfig+0x650>
 80103e6:	e09f      	b.n	8010528 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80103e8:	69fb      	ldr	r3, [r7, #28]
 80103ea:	2b0c      	cmp	r3, #12
 80103ec:	d100      	bne.n	80103f0 <HAL_RCC_OscConfig+0x658>
 80103ee:	e078      	b.n	80104e2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103f4:	2b02      	cmp	r3, #2
 80103f6:	d159      	bne.n	80104ac <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80103f8:	4b09      	ldr	r3, [pc, #36]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	4b08      	ldr	r3, [pc, #32]	@ (8010420 <HAL_RCC_OscConfig+0x688>)
 80103fe:	4911      	ldr	r1, [pc, #68]	@ (8010444 <HAL_RCC_OscConfig+0x6ac>)
 8010400:	400a      	ands	r2, r1
 8010402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010404:	f7f9 ff4e 	bl	800a2a4 <HAL_GetTick>
 8010408:	0003      	movs	r3, r0
 801040a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801040c:	e01c      	b.n	8010448 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801040e:	f7f9 ff49 	bl	800a2a4 <HAL_GetTick>
 8010412:	0002      	movs	r2, r0
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	1ad3      	subs	r3, r2, r3
 8010418:	2b02      	cmp	r3, #2
 801041a:	d915      	bls.n	8010448 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801041c:	2303      	movs	r3, #3
 801041e:	e084      	b.n	801052a <HAL_RCC_OscConfig+0x792>
 8010420:	40021000 	.word	0x40021000
 8010424:	ffff1fff 	.word	0xffff1fff
 8010428:	fffffeff 	.word	0xfffffeff
 801042c:	40007000 	.word	0x40007000
 8010430:	fffffbff 	.word	0xfffffbff
 8010434:	00001388 	.word	0x00001388
 8010438:	efffffff 	.word	0xefffffff
 801043c:	40010000 	.word	0x40010000
 8010440:	ffffdfff 	.word	0xffffdfff
 8010444:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010448:	4b3a      	ldr	r3, [pc, #232]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 801044a:	681a      	ldr	r2, [r3, #0]
 801044c:	2380      	movs	r3, #128	@ 0x80
 801044e:	049b      	lsls	r3, r3, #18
 8010450:	4013      	ands	r3, r2
 8010452:	d1dc      	bne.n	801040e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010454:	4b37      	ldr	r3, [pc, #220]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	4a37      	ldr	r2, [pc, #220]	@ (8010538 <HAL_RCC_OscConfig+0x7a0>)
 801045a:	4013      	ands	r3, r2
 801045c:	0019      	movs	r1, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010466:	431a      	orrs	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801046c:	431a      	orrs	r2, r3
 801046e:	4b31      	ldr	r3, [pc, #196]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 8010470:	430a      	orrs	r2, r1
 8010472:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010474:	4b2f      	ldr	r3, [pc, #188]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	4b2e      	ldr	r3, [pc, #184]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 801047a:	2180      	movs	r1, #128	@ 0x80
 801047c:	0449      	lsls	r1, r1, #17
 801047e:	430a      	orrs	r2, r1
 8010480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010482:	f7f9 ff0f 	bl	800a2a4 <HAL_GetTick>
 8010486:	0003      	movs	r3, r0
 8010488:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801048a:	e008      	b.n	801049e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801048c:	f7f9 ff0a 	bl	800a2a4 <HAL_GetTick>
 8010490:	0002      	movs	r2, r0
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	1ad3      	subs	r3, r2, r3
 8010496:	2b02      	cmp	r3, #2
 8010498:	d901      	bls.n	801049e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801049a:	2303      	movs	r3, #3
 801049c:	e045      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801049e:	4b25      	ldr	r3, [pc, #148]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	2380      	movs	r3, #128	@ 0x80
 80104a4:	049b      	lsls	r3, r3, #18
 80104a6:	4013      	ands	r3, r2
 80104a8:	d0f0      	beq.n	801048c <HAL_RCC_OscConfig+0x6f4>
 80104aa:	e03d      	b.n	8010528 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80104ac:	4b21      	ldr	r3, [pc, #132]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	4b20      	ldr	r3, [pc, #128]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 80104b2:	4922      	ldr	r1, [pc, #136]	@ (801053c <HAL_RCC_OscConfig+0x7a4>)
 80104b4:	400a      	ands	r2, r1
 80104b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80104b8:	f7f9 fef4 	bl	800a2a4 <HAL_GetTick>
 80104bc:	0003      	movs	r3, r0
 80104be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80104c0:	e008      	b.n	80104d4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104c2:	f7f9 feef 	bl	800a2a4 <HAL_GetTick>
 80104c6:	0002      	movs	r2, r0
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	1ad3      	subs	r3, r2, r3
 80104cc:	2b02      	cmp	r3, #2
 80104ce:	d901      	bls.n	80104d4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80104d0:	2303      	movs	r3, #3
 80104d2:	e02a      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80104d4:	4b17      	ldr	r3, [pc, #92]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 80104d6:	681a      	ldr	r2, [r3, #0]
 80104d8:	2380      	movs	r3, #128	@ 0x80
 80104da:	049b      	lsls	r3, r3, #18
 80104dc:	4013      	ands	r3, r2
 80104de:	d1f0      	bne.n	80104c2 <HAL_RCC_OscConfig+0x72a>
 80104e0:	e022      	b.n	8010528 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d101      	bne.n	80104ee <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80104ea:	2301      	movs	r3, #1
 80104ec:	e01d      	b.n	801052a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80104ee:	4b11      	ldr	r3, [pc, #68]	@ (8010534 <HAL_RCC_OscConfig+0x79c>)
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80104f4:	69ba      	ldr	r2, [r7, #24]
 80104f6:	2380      	movs	r3, #128	@ 0x80
 80104f8:	025b      	lsls	r3, r3, #9
 80104fa:	401a      	ands	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010500:	429a      	cmp	r2, r3
 8010502:	d10f      	bne.n	8010524 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8010504:	69ba      	ldr	r2, [r7, #24]
 8010506:	23f0      	movs	r3, #240	@ 0xf0
 8010508:	039b      	lsls	r3, r3, #14
 801050a:	401a      	ands	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010510:	429a      	cmp	r2, r3
 8010512:	d107      	bne.n	8010524 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8010514:	69ba      	ldr	r2, [r7, #24]
 8010516:	23c0      	movs	r3, #192	@ 0xc0
 8010518:	041b      	lsls	r3, r3, #16
 801051a:	401a      	ands	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8010520:	429a      	cmp	r2, r3
 8010522:	d001      	beq.n	8010528 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8010524:	2301      	movs	r3, #1
 8010526:	e000      	b.n	801052a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8010528:	2300      	movs	r3, #0
}
 801052a:	0018      	movs	r0, r3
 801052c:	46bd      	mov	sp, r7
 801052e:	b00a      	add	sp, #40	@ 0x28
 8010530:	bdb0      	pop	{r4, r5, r7, pc}
 8010532:	46c0      	nop			@ (mov r8, r8)
 8010534:	40021000 	.word	0x40021000
 8010538:	ff02ffff 	.word	0xff02ffff
 801053c:	feffffff 	.word	0xfeffffff

08010540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010540:	b5b0      	push	{r4, r5, r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d101      	bne.n	8010554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010550:	2301      	movs	r3, #1
 8010552:	e128      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010554:	4b96      	ldr	r3, [pc, #600]	@ (80107b0 <HAL_RCC_ClockConfig+0x270>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2201      	movs	r2, #1
 801055a:	4013      	ands	r3, r2
 801055c:	683a      	ldr	r2, [r7, #0]
 801055e:	429a      	cmp	r2, r3
 8010560:	d91e      	bls.n	80105a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010562:	4b93      	ldr	r3, [pc, #588]	@ (80107b0 <HAL_RCC_ClockConfig+0x270>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2201      	movs	r2, #1
 8010568:	4393      	bics	r3, r2
 801056a:	0019      	movs	r1, r3
 801056c:	4b90      	ldr	r3, [pc, #576]	@ (80107b0 <HAL_RCC_ClockConfig+0x270>)
 801056e:	683a      	ldr	r2, [r7, #0]
 8010570:	430a      	orrs	r2, r1
 8010572:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8010574:	f7f9 fe96 	bl	800a2a4 <HAL_GetTick>
 8010578:	0003      	movs	r3, r0
 801057a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801057c:	e009      	b.n	8010592 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801057e:	f7f9 fe91 	bl	800a2a4 <HAL_GetTick>
 8010582:	0002      	movs	r2, r0
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	1ad3      	subs	r3, r2, r3
 8010588:	4a8a      	ldr	r2, [pc, #552]	@ (80107b4 <HAL_RCC_ClockConfig+0x274>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d901      	bls.n	8010592 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801058e:	2303      	movs	r3, #3
 8010590:	e109      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010592:	4b87      	ldr	r3, [pc, #540]	@ (80107b0 <HAL_RCC_ClockConfig+0x270>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2201      	movs	r2, #1
 8010598:	4013      	ands	r3, r2
 801059a:	683a      	ldr	r2, [r7, #0]
 801059c:	429a      	cmp	r2, r3
 801059e:	d1ee      	bne.n	801057e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2202      	movs	r2, #2
 80105a6:	4013      	ands	r3, r2
 80105a8:	d009      	beq.n	80105be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80105aa:	4b83      	ldr	r3, [pc, #524]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	22f0      	movs	r2, #240	@ 0xf0
 80105b0:	4393      	bics	r3, r2
 80105b2:	0019      	movs	r1, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	689a      	ldr	r2, [r3, #8]
 80105b8:	4b7f      	ldr	r3, [pc, #508]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 80105ba:	430a      	orrs	r2, r1
 80105bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2201      	movs	r2, #1
 80105c4:	4013      	ands	r3, r2
 80105c6:	d100      	bne.n	80105ca <HAL_RCC_ClockConfig+0x8a>
 80105c8:	e089      	b.n	80106de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	2b02      	cmp	r3, #2
 80105d0:	d107      	bne.n	80105e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80105d2:	4b79      	ldr	r3, [pc, #484]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	2380      	movs	r3, #128	@ 0x80
 80105d8:	029b      	lsls	r3, r3, #10
 80105da:	4013      	ands	r3, r2
 80105dc:	d120      	bne.n	8010620 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80105de:	2301      	movs	r3, #1
 80105e0:	e0e1      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	2b03      	cmp	r3, #3
 80105e8:	d107      	bne.n	80105fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80105ea:	4b73      	ldr	r3, [pc, #460]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	2380      	movs	r3, #128	@ 0x80
 80105f0:	049b      	lsls	r3, r3, #18
 80105f2:	4013      	ands	r3, r2
 80105f4:	d114      	bne.n	8010620 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80105f6:	2301      	movs	r3, #1
 80105f8:	e0d5      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d106      	bne.n	8010610 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010602:	4b6d      	ldr	r3, [pc, #436]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2204      	movs	r2, #4
 8010608:	4013      	ands	r3, r2
 801060a:	d109      	bne.n	8010620 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801060c:	2301      	movs	r3, #1
 801060e:	e0ca      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010610:	4b69      	ldr	r3, [pc, #420]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	2380      	movs	r3, #128	@ 0x80
 8010616:	009b      	lsls	r3, r3, #2
 8010618:	4013      	ands	r3, r2
 801061a:	d101      	bne.n	8010620 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801061c:	2301      	movs	r3, #1
 801061e:	e0c2      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010620:	4b65      	ldr	r3, [pc, #404]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	2203      	movs	r2, #3
 8010626:	4393      	bics	r3, r2
 8010628:	0019      	movs	r1, r3
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	685a      	ldr	r2, [r3, #4]
 801062e:	4b62      	ldr	r3, [pc, #392]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010630:	430a      	orrs	r2, r1
 8010632:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010634:	f7f9 fe36 	bl	800a2a4 <HAL_GetTick>
 8010638:	0003      	movs	r3, r0
 801063a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	2b02      	cmp	r3, #2
 8010642:	d111      	bne.n	8010668 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8010644:	e009      	b.n	801065a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010646:	f7f9 fe2d 	bl	800a2a4 <HAL_GetTick>
 801064a:	0002      	movs	r2, r0
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	1ad3      	subs	r3, r2, r3
 8010650:	4a58      	ldr	r2, [pc, #352]	@ (80107b4 <HAL_RCC_ClockConfig+0x274>)
 8010652:	4293      	cmp	r3, r2
 8010654:	d901      	bls.n	801065a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8010656:	2303      	movs	r3, #3
 8010658:	e0a5      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801065a:	4b57      	ldr	r3, [pc, #348]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 801065c:	68db      	ldr	r3, [r3, #12]
 801065e:	220c      	movs	r2, #12
 8010660:	4013      	ands	r3, r2
 8010662:	2b08      	cmp	r3, #8
 8010664:	d1ef      	bne.n	8010646 <HAL_RCC_ClockConfig+0x106>
 8010666:	e03a      	b.n	80106de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	2b03      	cmp	r3, #3
 801066e:	d111      	bne.n	8010694 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010670:	e009      	b.n	8010686 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010672:	f7f9 fe17 	bl	800a2a4 <HAL_GetTick>
 8010676:	0002      	movs	r2, r0
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	1ad3      	subs	r3, r2, r3
 801067c:	4a4d      	ldr	r2, [pc, #308]	@ (80107b4 <HAL_RCC_ClockConfig+0x274>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d901      	bls.n	8010686 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8010682:	2303      	movs	r3, #3
 8010684:	e08f      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010686:	4b4c      	ldr	r3, [pc, #304]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	220c      	movs	r2, #12
 801068c:	4013      	ands	r3, r2
 801068e:	2b0c      	cmp	r3, #12
 8010690:	d1ef      	bne.n	8010672 <HAL_RCC_ClockConfig+0x132>
 8010692:	e024      	b.n	80106de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	2b01      	cmp	r3, #1
 801069a:	d11b      	bne.n	80106d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801069c:	e009      	b.n	80106b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801069e:	f7f9 fe01 	bl	800a2a4 <HAL_GetTick>
 80106a2:	0002      	movs	r2, r0
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	1ad3      	subs	r3, r2, r3
 80106a8:	4a42      	ldr	r2, [pc, #264]	@ (80107b4 <HAL_RCC_ClockConfig+0x274>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d901      	bls.n	80106b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80106ae:	2303      	movs	r3, #3
 80106b0:	e079      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80106b2:	4b41      	ldr	r3, [pc, #260]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	220c      	movs	r2, #12
 80106b8:	4013      	ands	r3, r2
 80106ba:	2b04      	cmp	r3, #4
 80106bc:	d1ef      	bne.n	801069e <HAL_RCC_ClockConfig+0x15e>
 80106be:	e00e      	b.n	80106de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80106c0:	f7f9 fdf0 	bl	800a2a4 <HAL_GetTick>
 80106c4:	0002      	movs	r2, r0
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	1ad3      	subs	r3, r2, r3
 80106ca:	4a3a      	ldr	r2, [pc, #232]	@ (80107b4 <HAL_RCC_ClockConfig+0x274>)
 80106cc:	4293      	cmp	r3, r2
 80106ce:	d901      	bls.n	80106d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80106d0:	2303      	movs	r3, #3
 80106d2:	e068      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80106d4:	4b38      	ldr	r3, [pc, #224]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	220c      	movs	r2, #12
 80106da:	4013      	ands	r3, r2
 80106dc:	d1f0      	bne.n	80106c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80106de:	4b34      	ldr	r3, [pc, #208]	@ (80107b0 <HAL_RCC_ClockConfig+0x270>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2201      	movs	r2, #1
 80106e4:	4013      	ands	r3, r2
 80106e6:	683a      	ldr	r2, [r7, #0]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d21e      	bcs.n	801072a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80106ec:	4b30      	ldr	r3, [pc, #192]	@ (80107b0 <HAL_RCC_ClockConfig+0x270>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2201      	movs	r2, #1
 80106f2:	4393      	bics	r3, r2
 80106f4:	0019      	movs	r1, r3
 80106f6:	4b2e      	ldr	r3, [pc, #184]	@ (80107b0 <HAL_RCC_ClockConfig+0x270>)
 80106f8:	683a      	ldr	r2, [r7, #0]
 80106fa:	430a      	orrs	r2, r1
 80106fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80106fe:	f7f9 fdd1 	bl	800a2a4 <HAL_GetTick>
 8010702:	0003      	movs	r3, r0
 8010704:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010706:	e009      	b.n	801071c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010708:	f7f9 fdcc 	bl	800a2a4 <HAL_GetTick>
 801070c:	0002      	movs	r2, r0
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	1ad3      	subs	r3, r2, r3
 8010712:	4a28      	ldr	r2, [pc, #160]	@ (80107b4 <HAL_RCC_ClockConfig+0x274>)
 8010714:	4293      	cmp	r3, r2
 8010716:	d901      	bls.n	801071c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8010718:	2303      	movs	r3, #3
 801071a:	e044      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801071c:	4b24      	ldr	r3, [pc, #144]	@ (80107b0 <HAL_RCC_ClockConfig+0x270>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2201      	movs	r2, #1
 8010722:	4013      	ands	r3, r2
 8010724:	683a      	ldr	r2, [r7, #0]
 8010726:	429a      	cmp	r2, r3
 8010728:	d1ee      	bne.n	8010708 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	2204      	movs	r2, #4
 8010730:	4013      	ands	r3, r2
 8010732:	d009      	beq.n	8010748 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010734:	4b20      	ldr	r3, [pc, #128]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	4a20      	ldr	r2, [pc, #128]	@ (80107bc <HAL_RCC_ClockConfig+0x27c>)
 801073a:	4013      	ands	r3, r2
 801073c:	0019      	movs	r1, r3
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	68da      	ldr	r2, [r3, #12]
 8010742:	4b1d      	ldr	r3, [pc, #116]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010744:	430a      	orrs	r2, r1
 8010746:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2208      	movs	r2, #8
 801074e:	4013      	ands	r3, r2
 8010750:	d00a      	beq.n	8010768 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8010752:	4b19      	ldr	r3, [pc, #100]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	4a1a      	ldr	r2, [pc, #104]	@ (80107c0 <HAL_RCC_ClockConfig+0x280>)
 8010758:	4013      	ands	r3, r2
 801075a:	0019      	movs	r1, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	00da      	lsls	r2, r3, #3
 8010762:	4b15      	ldr	r3, [pc, #84]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010764:	430a      	orrs	r2, r1
 8010766:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010768:	f000 f832 	bl	80107d0 <HAL_RCC_GetSysClockFreq>
 801076c:	0001      	movs	r1, r0
 801076e:	4b12      	ldr	r3, [pc, #72]	@ (80107b8 <HAL_RCC_ClockConfig+0x278>)
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	091b      	lsrs	r3, r3, #4
 8010774:	220f      	movs	r2, #15
 8010776:	4013      	ands	r3, r2
 8010778:	4a12      	ldr	r2, [pc, #72]	@ (80107c4 <HAL_RCC_ClockConfig+0x284>)
 801077a:	5cd3      	ldrb	r3, [r2, r3]
 801077c:	000a      	movs	r2, r1
 801077e:	40da      	lsrs	r2, r3
 8010780:	4b11      	ldr	r3, [pc, #68]	@ (80107c8 <HAL_RCC_ClockConfig+0x288>)
 8010782:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010784:	4b11      	ldr	r3, [pc, #68]	@ (80107cc <HAL_RCC_ClockConfig+0x28c>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	250b      	movs	r5, #11
 801078a:	197c      	adds	r4, r7, r5
 801078c:	0018      	movs	r0, r3
 801078e:	f7f9 fd43 	bl	800a218 <HAL_InitTick>
 8010792:	0003      	movs	r3, r0
 8010794:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8010796:	197b      	adds	r3, r7, r5
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d002      	beq.n	80107a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801079e:	197b      	adds	r3, r7, r5
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	e000      	b.n	80107a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80107a4:	2300      	movs	r3, #0
}
 80107a6:	0018      	movs	r0, r3
 80107a8:	46bd      	mov	sp, r7
 80107aa:	b004      	add	sp, #16
 80107ac:	bdb0      	pop	{r4, r5, r7, pc}
 80107ae:	46c0      	nop			@ (mov r8, r8)
 80107b0:	40022000 	.word	0x40022000
 80107b4:	00001388 	.word	0x00001388
 80107b8:	40021000 	.word	0x40021000
 80107bc:	fffff8ff 	.word	0xfffff8ff
 80107c0:	ffffc7ff 	.word	0xffffc7ff
 80107c4:	0801c0f4 	.word	0x0801c0f4
 80107c8:	2000005c 	.word	0x2000005c
 80107cc:	20000070 	.word	0x20000070

080107d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80107d0:	b5b0      	push	{r4, r5, r7, lr}
 80107d2:	b08e      	sub	sp, #56	@ 0x38
 80107d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80107d6:	4b4c      	ldr	r3, [pc, #304]	@ (8010908 <HAL_RCC_GetSysClockFreq+0x138>)
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80107dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107de:	230c      	movs	r3, #12
 80107e0:	4013      	ands	r3, r2
 80107e2:	2b0c      	cmp	r3, #12
 80107e4:	d014      	beq.n	8010810 <HAL_RCC_GetSysClockFreq+0x40>
 80107e6:	d900      	bls.n	80107ea <HAL_RCC_GetSysClockFreq+0x1a>
 80107e8:	e07b      	b.n	80108e2 <HAL_RCC_GetSysClockFreq+0x112>
 80107ea:	2b04      	cmp	r3, #4
 80107ec:	d002      	beq.n	80107f4 <HAL_RCC_GetSysClockFreq+0x24>
 80107ee:	2b08      	cmp	r3, #8
 80107f0:	d00b      	beq.n	801080a <HAL_RCC_GetSysClockFreq+0x3a>
 80107f2:	e076      	b.n	80108e2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80107f4:	4b44      	ldr	r3, [pc, #272]	@ (8010908 <HAL_RCC_GetSysClockFreq+0x138>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	2210      	movs	r2, #16
 80107fa:	4013      	ands	r3, r2
 80107fc:	d002      	beq.n	8010804 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80107fe:	4b43      	ldr	r3, [pc, #268]	@ (801090c <HAL_RCC_GetSysClockFreq+0x13c>)
 8010800:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8010802:	e07c      	b.n	80108fe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8010804:	4b42      	ldr	r3, [pc, #264]	@ (8010910 <HAL_RCC_GetSysClockFreq+0x140>)
 8010806:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010808:	e079      	b.n	80108fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801080a:	4b42      	ldr	r3, [pc, #264]	@ (8010914 <HAL_RCC_GetSysClockFreq+0x144>)
 801080c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801080e:	e076      	b.n	80108fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8010810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010812:	0c9a      	lsrs	r2, r3, #18
 8010814:	230f      	movs	r3, #15
 8010816:	401a      	ands	r2, r3
 8010818:	4b3f      	ldr	r3, [pc, #252]	@ (8010918 <HAL_RCC_GetSysClockFreq+0x148>)
 801081a:	5c9b      	ldrb	r3, [r3, r2]
 801081c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801081e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010820:	0d9a      	lsrs	r2, r3, #22
 8010822:	2303      	movs	r3, #3
 8010824:	4013      	ands	r3, r2
 8010826:	3301      	adds	r3, #1
 8010828:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801082a:	4b37      	ldr	r3, [pc, #220]	@ (8010908 <HAL_RCC_GetSysClockFreq+0x138>)
 801082c:	68da      	ldr	r2, [r3, #12]
 801082e:	2380      	movs	r3, #128	@ 0x80
 8010830:	025b      	lsls	r3, r3, #9
 8010832:	4013      	ands	r3, r2
 8010834:	d01a      	beq.n	801086c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010838:	61bb      	str	r3, [r7, #24]
 801083a:	2300      	movs	r3, #0
 801083c:	61fb      	str	r3, [r7, #28]
 801083e:	4a35      	ldr	r2, [pc, #212]	@ (8010914 <HAL_RCC_GetSysClockFreq+0x144>)
 8010840:	2300      	movs	r3, #0
 8010842:	69b8      	ldr	r0, [r7, #24]
 8010844:	69f9      	ldr	r1, [r7, #28]
 8010846:	f7ef fe89 	bl	800055c <__aeabi_lmul>
 801084a:	0002      	movs	r2, r0
 801084c:	000b      	movs	r3, r1
 801084e:	0010      	movs	r0, r2
 8010850:	0019      	movs	r1, r3
 8010852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010854:	613b      	str	r3, [r7, #16]
 8010856:	2300      	movs	r3, #0
 8010858:	617b      	str	r3, [r7, #20]
 801085a:	693a      	ldr	r2, [r7, #16]
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	f7ef fe5d 	bl	800051c <__aeabi_uldivmod>
 8010862:	0002      	movs	r2, r0
 8010864:	000b      	movs	r3, r1
 8010866:	0013      	movs	r3, r2
 8010868:	637b      	str	r3, [r7, #52]	@ 0x34
 801086a:	e037      	b.n	80108dc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801086c:	4b26      	ldr	r3, [pc, #152]	@ (8010908 <HAL_RCC_GetSysClockFreq+0x138>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	2210      	movs	r2, #16
 8010872:	4013      	ands	r3, r2
 8010874:	d01a      	beq.n	80108ac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8010876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010878:	60bb      	str	r3, [r7, #8]
 801087a:	2300      	movs	r3, #0
 801087c:	60fb      	str	r3, [r7, #12]
 801087e:	4a23      	ldr	r2, [pc, #140]	@ (801090c <HAL_RCC_GetSysClockFreq+0x13c>)
 8010880:	2300      	movs	r3, #0
 8010882:	68b8      	ldr	r0, [r7, #8]
 8010884:	68f9      	ldr	r1, [r7, #12]
 8010886:	f7ef fe69 	bl	800055c <__aeabi_lmul>
 801088a:	0002      	movs	r2, r0
 801088c:	000b      	movs	r3, r1
 801088e:	0010      	movs	r0, r2
 8010890:	0019      	movs	r1, r3
 8010892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010894:	603b      	str	r3, [r7, #0]
 8010896:	2300      	movs	r3, #0
 8010898:	607b      	str	r3, [r7, #4]
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f7ef fe3d 	bl	800051c <__aeabi_uldivmod>
 80108a2:	0002      	movs	r2, r0
 80108a4:	000b      	movs	r3, r1
 80108a6:	0013      	movs	r3, r2
 80108a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80108aa:	e017      	b.n	80108dc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80108ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ae:	0018      	movs	r0, r3
 80108b0:	2300      	movs	r3, #0
 80108b2:	0019      	movs	r1, r3
 80108b4:	4a16      	ldr	r2, [pc, #88]	@ (8010910 <HAL_RCC_GetSysClockFreq+0x140>)
 80108b6:	2300      	movs	r3, #0
 80108b8:	f7ef fe50 	bl	800055c <__aeabi_lmul>
 80108bc:	0002      	movs	r2, r0
 80108be:	000b      	movs	r3, r1
 80108c0:	0010      	movs	r0, r2
 80108c2:	0019      	movs	r1, r3
 80108c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108c6:	001c      	movs	r4, r3
 80108c8:	2300      	movs	r3, #0
 80108ca:	001d      	movs	r5, r3
 80108cc:	0022      	movs	r2, r4
 80108ce:	002b      	movs	r3, r5
 80108d0:	f7ef fe24 	bl	800051c <__aeabi_uldivmod>
 80108d4:	0002      	movs	r2, r0
 80108d6:	000b      	movs	r3, r1
 80108d8:	0013      	movs	r3, r2
 80108da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80108dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108de:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80108e0:	e00d      	b.n	80108fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80108e2:	4b09      	ldr	r3, [pc, #36]	@ (8010908 <HAL_RCC_GetSysClockFreq+0x138>)
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	0b5b      	lsrs	r3, r3, #13
 80108e8:	2207      	movs	r2, #7
 80108ea:	4013      	ands	r3, r2
 80108ec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80108ee:	6a3b      	ldr	r3, [r7, #32]
 80108f0:	3301      	adds	r3, #1
 80108f2:	2280      	movs	r2, #128	@ 0x80
 80108f4:	0212      	lsls	r2, r2, #8
 80108f6:	409a      	lsls	r2, r3
 80108f8:	0013      	movs	r3, r2
 80108fa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80108fc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80108fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8010900:	0018      	movs	r0, r3
 8010902:	46bd      	mov	sp, r7
 8010904:	b00e      	add	sp, #56	@ 0x38
 8010906:	bdb0      	pop	{r4, r5, r7, pc}
 8010908:	40021000 	.word	0x40021000
 801090c:	003d0900 	.word	0x003d0900
 8010910:	00f42400 	.word	0x00f42400
 8010914:	007a1200 	.word	0x007a1200
 8010918:	0801c10c 	.word	0x0801c10c

0801091c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010920:	4b02      	ldr	r3, [pc, #8]	@ (801092c <HAL_RCC_GetHCLKFreq+0x10>)
 8010922:	681b      	ldr	r3, [r3, #0]
}
 8010924:	0018      	movs	r0, r3
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	46c0      	nop			@ (mov r8, r8)
 801092c:	2000005c 	.word	0x2000005c

08010930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010934:	f7ff fff2 	bl	801091c <HAL_RCC_GetHCLKFreq>
 8010938:	0001      	movs	r1, r0
 801093a:	4b06      	ldr	r3, [pc, #24]	@ (8010954 <HAL_RCC_GetPCLK1Freq+0x24>)
 801093c:	68db      	ldr	r3, [r3, #12]
 801093e:	0a1b      	lsrs	r3, r3, #8
 8010940:	2207      	movs	r2, #7
 8010942:	4013      	ands	r3, r2
 8010944:	4a04      	ldr	r2, [pc, #16]	@ (8010958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010946:	5cd3      	ldrb	r3, [r2, r3]
 8010948:	40d9      	lsrs	r1, r3
 801094a:	000b      	movs	r3, r1
}
 801094c:	0018      	movs	r0, r3
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
 8010952:	46c0      	nop			@ (mov r8, r8)
 8010954:	40021000 	.word	0x40021000
 8010958:	0801c104 	.word	0x0801c104

0801095c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010960:	f7ff ffdc 	bl	801091c <HAL_RCC_GetHCLKFreq>
 8010964:	0001      	movs	r1, r0
 8010966:	4b06      	ldr	r3, [pc, #24]	@ (8010980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	0adb      	lsrs	r3, r3, #11
 801096c:	2207      	movs	r2, #7
 801096e:	4013      	ands	r3, r2
 8010970:	4a04      	ldr	r2, [pc, #16]	@ (8010984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010972:	5cd3      	ldrb	r3, [r2, r3]
 8010974:	40d9      	lsrs	r1, r3
 8010976:	000b      	movs	r3, r1
}
 8010978:	0018      	movs	r0, r3
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	46c0      	nop			@ (mov r8, r8)
 8010980:	40021000 	.word	0x40021000
 8010984:	0801c104 	.word	0x0801c104

08010988 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b086      	sub	sp, #24
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8010990:	2017      	movs	r0, #23
 8010992:	183b      	adds	r3, r7, r0
 8010994:	2200      	movs	r2, #0
 8010996:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	2220      	movs	r2, #32
 801099e:	4013      	ands	r3, r2
 80109a0:	d100      	bne.n	80109a4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80109a2:	e0c7      	b.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80109a4:	4b9b      	ldr	r3, [pc, #620]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80109a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80109a8:	2380      	movs	r3, #128	@ 0x80
 80109aa:	055b      	lsls	r3, r3, #21
 80109ac:	4013      	ands	r3, r2
 80109ae:	d109      	bne.n	80109c4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80109b0:	4b98      	ldr	r3, [pc, #608]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80109b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80109b4:	4b97      	ldr	r3, [pc, #604]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80109b6:	2180      	movs	r1, #128	@ 0x80
 80109b8:	0549      	lsls	r1, r1, #21
 80109ba:	430a      	orrs	r2, r1
 80109bc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80109be:	183b      	adds	r3, r7, r0
 80109c0:	2201      	movs	r2, #1
 80109c2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80109c4:	4b94      	ldr	r3, [pc, #592]	@ (8010c18 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	2380      	movs	r3, #128	@ 0x80
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	4013      	ands	r3, r2
 80109ce:	d11a      	bne.n	8010a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80109d0:	4b91      	ldr	r3, [pc, #580]	@ (8010c18 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	4b90      	ldr	r3, [pc, #576]	@ (8010c18 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80109d6:	2180      	movs	r1, #128	@ 0x80
 80109d8:	0049      	lsls	r1, r1, #1
 80109da:	430a      	orrs	r2, r1
 80109dc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80109de:	f7f9 fc61 	bl	800a2a4 <HAL_GetTick>
 80109e2:	0003      	movs	r3, r0
 80109e4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80109e6:	e008      	b.n	80109fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80109e8:	f7f9 fc5c 	bl	800a2a4 <HAL_GetTick>
 80109ec:	0002      	movs	r2, r0
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	1ad3      	subs	r3, r2, r3
 80109f2:	2b64      	cmp	r3, #100	@ 0x64
 80109f4:	d901      	bls.n	80109fa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80109f6:	2303      	movs	r3, #3
 80109f8:	e107      	b.n	8010c0a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80109fa:	4b87      	ldr	r3, [pc, #540]	@ (8010c18 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	2380      	movs	r3, #128	@ 0x80
 8010a00:	005b      	lsls	r3, r3, #1
 8010a02:	4013      	ands	r3, r2
 8010a04:	d0f0      	beq.n	80109e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8010a06:	4b83      	ldr	r3, [pc, #524]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	23c0      	movs	r3, #192	@ 0xc0
 8010a0c:	039b      	lsls	r3, r3, #14
 8010a0e:	4013      	ands	r3, r2
 8010a10:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	685a      	ldr	r2, [r3, #4]
 8010a16:	23c0      	movs	r3, #192	@ 0xc0
 8010a18:	039b      	lsls	r3, r3, #14
 8010a1a:	4013      	ands	r3, r2
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d013      	beq.n	8010a4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	685a      	ldr	r2, [r3, #4]
 8010a26:	23c0      	movs	r3, #192	@ 0xc0
 8010a28:	029b      	lsls	r3, r3, #10
 8010a2a:	401a      	ands	r2, r3
 8010a2c:	23c0      	movs	r3, #192	@ 0xc0
 8010a2e:	029b      	lsls	r3, r3, #10
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d10a      	bne.n	8010a4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010a34:	4b77      	ldr	r3, [pc, #476]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	2380      	movs	r3, #128	@ 0x80
 8010a3a:	029b      	lsls	r3, r3, #10
 8010a3c:	401a      	ands	r2, r3
 8010a3e:	2380      	movs	r3, #128	@ 0x80
 8010a40:	029b      	lsls	r3, r3, #10
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d101      	bne.n	8010a4a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8010a46:	2301      	movs	r3, #1
 8010a48:	e0df      	b.n	8010c0a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8010a4a:	4b72      	ldr	r3, [pc, #456]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a4e:	23c0      	movs	r3, #192	@ 0xc0
 8010a50:	029b      	lsls	r3, r3, #10
 8010a52:	4013      	ands	r3, r2
 8010a54:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d03b      	beq.n	8010ad4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	685a      	ldr	r2, [r3, #4]
 8010a60:	23c0      	movs	r3, #192	@ 0xc0
 8010a62:	029b      	lsls	r3, r3, #10
 8010a64:	4013      	ands	r3, r2
 8010a66:	68fa      	ldr	r2, [r7, #12]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d033      	beq.n	8010ad4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2220      	movs	r2, #32
 8010a72:	4013      	ands	r3, r2
 8010a74:	d02e      	beq.n	8010ad4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8010a76:	4b67      	ldr	r3, [pc, #412]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a7a:	4a68      	ldr	r2, [pc, #416]	@ (8010c1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8010a7c:	4013      	ands	r3, r2
 8010a7e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8010a80:	4b64      	ldr	r3, [pc, #400]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a84:	4b63      	ldr	r3, [pc, #396]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a86:	2180      	movs	r1, #128	@ 0x80
 8010a88:	0309      	lsls	r1, r1, #12
 8010a8a:	430a      	orrs	r2, r1
 8010a8c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010a8e:	4b61      	ldr	r3, [pc, #388]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a92:	4b60      	ldr	r3, [pc, #384]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a94:	4962      	ldr	r1, [pc, #392]	@ (8010c20 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8010a96:	400a      	ands	r2, r1
 8010a98:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8010a9a:	4b5e      	ldr	r3, [pc, #376]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a9c:	68fa      	ldr	r2, [r7, #12]
 8010a9e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8010aa0:	68fa      	ldr	r2, [r7, #12]
 8010aa2:	2380      	movs	r3, #128	@ 0x80
 8010aa4:	005b      	lsls	r3, r3, #1
 8010aa6:	4013      	ands	r3, r2
 8010aa8:	d014      	beq.n	8010ad4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010aaa:	f7f9 fbfb 	bl	800a2a4 <HAL_GetTick>
 8010aae:	0003      	movs	r3, r0
 8010ab0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010ab2:	e009      	b.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010ab4:	f7f9 fbf6 	bl	800a2a4 <HAL_GetTick>
 8010ab8:	0002      	movs	r2, r0
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	1ad3      	subs	r3, r2, r3
 8010abe:	4a59      	ldr	r2, [pc, #356]	@ (8010c24 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d901      	bls.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8010ac4:	2303      	movs	r3, #3
 8010ac6:	e0a0      	b.n	8010c0a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010ac8:	4b52      	ldr	r3, [pc, #328]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010aca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010acc:	2380      	movs	r3, #128	@ 0x80
 8010ace:	009b      	lsls	r3, r3, #2
 8010ad0:	4013      	ands	r3, r2
 8010ad2:	d0ef      	beq.n	8010ab4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2220      	movs	r2, #32
 8010ada:	4013      	ands	r3, r2
 8010adc:	d01f      	beq.n	8010b1e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	685a      	ldr	r2, [r3, #4]
 8010ae2:	23c0      	movs	r3, #192	@ 0xc0
 8010ae4:	029b      	lsls	r3, r3, #10
 8010ae6:	401a      	ands	r2, r3
 8010ae8:	23c0      	movs	r3, #192	@ 0xc0
 8010aea:	029b      	lsls	r3, r3, #10
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d10c      	bne.n	8010b0a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8010af0:	4b48      	ldr	r3, [pc, #288]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4a4c      	ldr	r2, [pc, #304]	@ (8010c28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8010af6:	4013      	ands	r3, r2
 8010af8:	0019      	movs	r1, r3
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	685a      	ldr	r2, [r3, #4]
 8010afe:	23c0      	movs	r3, #192	@ 0xc0
 8010b00:	039b      	lsls	r3, r3, #14
 8010b02:	401a      	ands	r2, r3
 8010b04:	4b43      	ldr	r3, [pc, #268]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b06:	430a      	orrs	r2, r1
 8010b08:	601a      	str	r2, [r3, #0]
 8010b0a:	4b42      	ldr	r3, [pc, #264]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	685a      	ldr	r2, [r3, #4]
 8010b12:	23c0      	movs	r3, #192	@ 0xc0
 8010b14:	029b      	lsls	r3, r3, #10
 8010b16:	401a      	ands	r2, r3
 8010b18:	4b3e      	ldr	r3, [pc, #248]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b1a:	430a      	orrs	r2, r1
 8010b1c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8010b1e:	2317      	movs	r3, #23
 8010b20:	18fb      	adds	r3, r7, r3
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d105      	bne.n	8010b34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010b28:	4b3a      	ldr	r3, [pc, #232]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b2c:	4b39      	ldr	r3, [pc, #228]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b2e:	493f      	ldr	r1, [pc, #252]	@ (8010c2c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8010b30:	400a      	ands	r2, r1
 8010b32:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2201      	movs	r2, #1
 8010b3a:	4013      	ands	r3, r2
 8010b3c:	d009      	beq.n	8010b52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010b3e:	4b35      	ldr	r3, [pc, #212]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b42:	2203      	movs	r2, #3
 8010b44:	4393      	bics	r3, r2
 8010b46:	0019      	movs	r1, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	689a      	ldr	r2, [r3, #8]
 8010b4c:	4b31      	ldr	r3, [pc, #196]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b4e:	430a      	orrs	r2, r1
 8010b50:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2202      	movs	r2, #2
 8010b58:	4013      	ands	r3, r2
 8010b5a:	d009      	beq.n	8010b70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b60:	220c      	movs	r2, #12
 8010b62:	4393      	bics	r3, r2
 8010b64:	0019      	movs	r1, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	68da      	ldr	r2, [r3, #12]
 8010b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b6c:	430a      	orrs	r2, r1
 8010b6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2204      	movs	r2, #4
 8010b76:	4013      	ands	r3, r2
 8010b78:	d009      	beq.n	8010b8e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010b7a:	4b26      	ldr	r3, [pc, #152]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b7e:	4a2c      	ldr	r2, [pc, #176]	@ (8010c30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8010b80:	4013      	ands	r3, r2
 8010b82:	0019      	movs	r1, r3
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	691a      	ldr	r2, [r3, #16]
 8010b88:	4b22      	ldr	r3, [pc, #136]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b8a:	430a      	orrs	r2, r1
 8010b8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	2208      	movs	r2, #8
 8010b94:	4013      	ands	r3, r2
 8010b96:	d009      	beq.n	8010bac <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010b98:	4b1e      	ldr	r3, [pc, #120]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b9c:	4a25      	ldr	r2, [pc, #148]	@ (8010c34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8010b9e:	4013      	ands	r3, r2
 8010ba0:	0019      	movs	r1, r3
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	695a      	ldr	r2, [r3, #20]
 8010ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010ba8:	430a      	orrs	r2, r1
 8010baa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681a      	ldr	r2, [r3, #0]
 8010bb0:	2380      	movs	r3, #128	@ 0x80
 8010bb2:	005b      	lsls	r3, r3, #1
 8010bb4:	4013      	ands	r3, r2
 8010bb6:	d009      	beq.n	8010bcc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010bb8:	4b16      	ldr	r3, [pc, #88]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bbc:	4a17      	ldr	r2, [pc, #92]	@ (8010c1c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8010bbe:	4013      	ands	r3, r2
 8010bc0:	0019      	movs	r1, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	699a      	ldr	r2, [r3, #24]
 8010bc6:	4b13      	ldr	r3, [pc, #76]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bc8:	430a      	orrs	r2, r1
 8010bca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	2240      	movs	r2, #64	@ 0x40
 8010bd2:	4013      	ands	r3, r2
 8010bd4:	d009      	beq.n	8010bea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bda:	4a17      	ldr	r2, [pc, #92]	@ (8010c38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8010bdc:	4013      	ands	r3, r2
 8010bde:	0019      	movs	r1, r3
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6a1a      	ldr	r2, [r3, #32]
 8010be4:	4b0b      	ldr	r3, [pc, #44]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010be6:	430a      	orrs	r2, r1
 8010be8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2280      	movs	r2, #128	@ 0x80
 8010bf0:	4013      	ands	r3, r2
 8010bf2:	d009      	beq.n	8010c08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8010bf4:	4b07      	ldr	r3, [pc, #28]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010bf8:	4a10      	ldr	r2, [pc, #64]	@ (8010c3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8010bfa:	4013      	ands	r3, r2
 8010bfc:	0019      	movs	r1, r3
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	69da      	ldr	r2, [r3, #28]
 8010c02:	4b04      	ldr	r3, [pc, #16]	@ (8010c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010c04:	430a      	orrs	r2, r1
 8010c06:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	0018      	movs	r0, r3
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	b006      	add	sp, #24
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	46c0      	nop			@ (mov r8, r8)
 8010c14:	40021000 	.word	0x40021000
 8010c18:	40007000 	.word	0x40007000
 8010c1c:	fffcffff 	.word	0xfffcffff
 8010c20:	fff7ffff 	.word	0xfff7ffff
 8010c24:	00001388 	.word	0x00001388
 8010c28:	ffcfffff 	.word	0xffcfffff
 8010c2c:	efffffff 	.word	0xefffffff
 8010c30:	fffff3ff 	.word	0xfffff3ff
 8010c34:	ffffcfff 	.word	0xffffcfff
 8010c38:	fbffffff 	.word	0xfbffffff
 8010c3c:	fff3ffff 	.word	0xfff3ffff

08010c40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010c40:	b5b0      	push	{r4, r5, r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010c48:	230f      	movs	r3, #15
 8010c4a:	18fb      	adds	r3, r7, r3
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d101      	bne.n	8010c5a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8010c56:	2301      	movs	r3, #1
 8010c58:	e088      	b.n	8010d6c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2221      	movs	r2, #33	@ 0x21
 8010c5e:	5c9b      	ldrb	r3, [r3, r2]
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d107      	bne.n	8010c76 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2220      	movs	r2, #32
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	0018      	movs	r0, r3
 8010c72:	f7f6 fc41 	bl	80074f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2221      	movs	r2, #33	@ 0x21
 8010c7a:	2102      	movs	r1, #2
 8010c7c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	2210      	movs	r2, #16
 8010c86:	4013      	ands	r3, r2
 8010c88:	2b10      	cmp	r3, #16
 8010c8a:	d05f      	beq.n	8010d4c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	22ca      	movs	r2, #202	@ 0xca
 8010c92:	625a      	str	r2, [r3, #36]	@ 0x24
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2253      	movs	r2, #83	@ 0x53
 8010c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010c9c:	250f      	movs	r5, #15
 8010c9e:	197c      	adds	r4, r7, r5
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	0018      	movs	r0, r3
 8010ca4:	f000 f93a 	bl	8010f1c <RTC_EnterInitMode>
 8010ca8:	0003      	movs	r3, r0
 8010caa:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8010cac:	0028      	movs	r0, r5
 8010cae:	183b      	adds	r3, r7, r0
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d12c      	bne.n	8010d10 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	689a      	ldr	r2, [r3, #8]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	492c      	ldr	r1, [pc, #176]	@ (8010d74 <HAL_RTC_Init+0x134>)
 8010cc2:	400a      	ands	r2, r1
 8010cc4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	6899      	ldr	r1, [r3, #8]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	685a      	ldr	r2, [r3, #4]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	691b      	ldr	r3, [r3, #16]
 8010cd4:	431a      	orrs	r2, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	699b      	ldr	r3, [r3, #24]
 8010cda:	431a      	orrs	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	430a      	orrs	r2, r1
 8010ce2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	687a      	ldr	r2, [r7, #4]
 8010cea:	68d2      	ldr	r2, [r2, #12]
 8010cec:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	6919      	ldr	r1, [r3, #16]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	689b      	ldr	r3, [r3, #8]
 8010cf8:	041a      	lsls	r2, r3, #16
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	430a      	orrs	r2, r1
 8010d00:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010d02:	183c      	adds	r4, r7, r0
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	0018      	movs	r0, r3
 8010d08:	f000 f94c 	bl	8010fa4 <RTC_ExitInitMode>
 8010d0c:	0003      	movs	r3, r0
 8010d0e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8010d10:	230f      	movs	r3, #15
 8010d12:	18fb      	adds	r3, r7, r3
 8010d14:	781b      	ldrb	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d113      	bne.n	8010d42 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2103      	movs	r1, #3
 8010d26:	438a      	bics	r2, r1
 8010d28:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	69da      	ldr	r2, [r3, #28]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	695b      	ldr	r3, [r3, #20]
 8010d38:	431a      	orrs	r2, r3
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	430a      	orrs	r2, r1
 8010d40:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	22ff      	movs	r2, #255	@ 0xff
 8010d48:	625a      	str	r2, [r3, #36]	@ 0x24
 8010d4a:	e003      	b.n	8010d54 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8010d4c:	230f      	movs	r3, #15
 8010d4e:	18fb      	adds	r3, r7, r3
 8010d50:	2200      	movs	r2, #0
 8010d52:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8010d54:	230f      	movs	r3, #15
 8010d56:	18fb      	adds	r3, r7, r3
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d103      	bne.n	8010d66 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2221      	movs	r2, #33	@ 0x21
 8010d62:	2101      	movs	r1, #1
 8010d64:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8010d66:	230f      	movs	r3, #15
 8010d68:	18fb      	adds	r3, r7, r3
 8010d6a:	781b      	ldrb	r3, [r3, #0]
}
 8010d6c:	0018      	movs	r0, r3
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	b004      	add	sp, #16
 8010d72:	bdb0      	pop	{r4, r5, r7, pc}
 8010d74:	ff8fffbf 	.word	0xff8fffbf

08010d78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010d78:	b5b0      	push	{r4, r5, r7, lr}
 8010d7a:	b086      	sub	sp, #24
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8010d84:	2300      	movs	r3, #0
 8010d86:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2220      	movs	r2, #32
 8010d8c:	5c9b      	ldrb	r3, [r3, r2]
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d101      	bne.n	8010d96 <HAL_RTC_SetTime+0x1e>
 8010d92:	2302      	movs	r3, #2
 8010d94:	e092      	b.n	8010ebc <HAL_RTC_SetTime+0x144>
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2220      	movs	r2, #32
 8010d9a:	2101      	movs	r1, #1
 8010d9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2221      	movs	r2, #33	@ 0x21
 8010da2:	2102      	movs	r1, #2
 8010da4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d125      	bne.n	8010df8 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	689b      	ldr	r3, [r3, #8]
 8010db2:	2240      	movs	r2, #64	@ 0x40
 8010db4:	4013      	ands	r3, r2
 8010db6:	d102      	bne.n	8010dbe <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	0018      	movs	r0, r3
 8010dc4:	f000 f918 	bl	8010ff8 <RTC_ByteToBcd2>
 8010dc8:	0003      	movs	r3, r0
 8010dca:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	785b      	ldrb	r3, [r3, #1]
 8010dd0:	0018      	movs	r0, r3
 8010dd2:	f000 f911 	bl	8010ff8 <RTC_ByteToBcd2>
 8010dd6:	0003      	movs	r3, r0
 8010dd8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010dda:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	789b      	ldrb	r3, [r3, #2]
 8010de0:	0018      	movs	r0, r3
 8010de2:	f000 f909 	bl	8010ff8 <RTC_ByteToBcd2>
 8010de6:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010de8:	0022      	movs	r2, r4
 8010dea:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	78db      	ldrb	r3, [r3, #3]
 8010df0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010df2:	4313      	orrs	r3, r2
 8010df4:	617b      	str	r3, [r7, #20]
 8010df6:	e017      	b.n	8010e28 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	689b      	ldr	r3, [r3, #8]
 8010dfe:	2240      	movs	r2, #64	@ 0x40
 8010e00:	4013      	ands	r3, r2
 8010e02:	d102      	bne.n	8010e0a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	2200      	movs	r2, #0
 8010e08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	785b      	ldrb	r3, [r3, #1]
 8010e14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010e16:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8010e18:	68ba      	ldr	r2, [r7, #8]
 8010e1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010e1c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	78db      	ldrb	r3, [r3, #3]
 8010e22:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010e24:	4313      	orrs	r3, r2
 8010e26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	22ca      	movs	r2, #202	@ 0xca
 8010e2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	2253      	movs	r2, #83	@ 0x53
 8010e36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010e38:	2513      	movs	r5, #19
 8010e3a:	197c      	adds	r4, r7, r5
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	0018      	movs	r0, r3
 8010e40:	f000 f86c 	bl	8010f1c <RTC_EnterInitMode>
 8010e44:	0003      	movs	r3, r0
 8010e46:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8010e48:	0028      	movs	r0, r5
 8010e4a:	183b      	adds	r3, r7, r0
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d120      	bne.n	8010e94 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	697a      	ldr	r2, [r7, #20]
 8010e58:	491a      	ldr	r1, [pc, #104]	@ (8010ec4 <HAL_RTC_SetTime+0x14c>)
 8010e5a:	400a      	ands	r2, r1
 8010e5c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	689a      	ldr	r2, [r3, #8]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	4917      	ldr	r1, [pc, #92]	@ (8010ec8 <HAL_RTC_SetTime+0x150>)
 8010e6a:	400a      	ands	r2, r1
 8010e6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	6899      	ldr	r1, [r3, #8]
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	68da      	ldr	r2, [r3, #12]
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	691b      	ldr	r3, [r3, #16]
 8010e7c:	431a      	orrs	r2, r3
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	430a      	orrs	r2, r1
 8010e84:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010e86:	183c      	adds	r4, r7, r0
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	0018      	movs	r0, r3
 8010e8c:	f000 f88a 	bl	8010fa4 <RTC_ExitInitMode>
 8010e90:	0003      	movs	r3, r0
 8010e92:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8010e94:	2313      	movs	r3, #19
 8010e96:	18fb      	adds	r3, r7, r3
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d103      	bne.n	8010ea6 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	2221      	movs	r2, #33	@ 0x21
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	22ff      	movs	r2, #255	@ 0xff
 8010eac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2220      	movs	r2, #32
 8010eb2:	2100      	movs	r1, #0
 8010eb4:	5499      	strb	r1, [r3, r2]

  return status;
 8010eb6:	2313      	movs	r3, #19
 8010eb8:	18fb      	adds	r3, r7, r3
 8010eba:	781b      	ldrb	r3, [r3, #0]
}
 8010ebc:	0018      	movs	r0, r3
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	b006      	add	sp, #24
 8010ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8010ec4:	007f7f7f 	.word	0x007f7f7f
 8010ec8:	fffbffff 	.word	0xfffbffff

08010ecc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b084      	sub	sp, #16
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	4a0e      	ldr	r2, [pc, #56]	@ (8010f18 <HAL_RTC_WaitForSynchro+0x4c>)
 8010ede:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010ee0:	f7f9 f9e0 	bl	800a2a4 <HAL_GetTick>
 8010ee4:	0003      	movs	r3, r0
 8010ee6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010ee8:	e00a      	b.n	8010f00 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010eea:	f7f9 f9db 	bl	800a2a4 <HAL_GetTick>
 8010eee:	0002      	movs	r2, r0
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	1ad2      	subs	r2, r2, r3
 8010ef4:	23fa      	movs	r3, #250	@ 0xfa
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d901      	bls.n	8010f00 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010efc:	2303      	movs	r3, #3
 8010efe:	e006      	b.n	8010f0e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	2220      	movs	r2, #32
 8010f08:	4013      	ands	r3, r2
 8010f0a:	d0ee      	beq.n	8010eea <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8010f0c:	2300      	movs	r3, #0
}
 8010f0e:	0018      	movs	r0, r3
 8010f10:	46bd      	mov	sp, r7
 8010f12:	b004      	add	sp, #16
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	46c0      	nop			@ (mov r8, r8)
 8010f18:	0001ff5f 	.word	0x0001ff5f

08010f1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010f24:	2300      	movs	r3, #0
 8010f26:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010f28:	230f      	movs	r3, #15
 8010f2a:	18fb      	adds	r3, r7, r3
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	68db      	ldr	r3, [r3, #12]
 8010f36:	2240      	movs	r2, #64	@ 0x40
 8010f38:	4013      	ands	r3, r2
 8010f3a:	d12c      	bne.n	8010f96 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	68da      	ldr	r2, [r3, #12]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2180      	movs	r1, #128	@ 0x80
 8010f48:	430a      	orrs	r2, r1
 8010f4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010f4c:	f7f9 f9aa 	bl	800a2a4 <HAL_GetTick>
 8010f50:	0003      	movs	r3, r0
 8010f52:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010f54:	e014      	b.n	8010f80 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010f56:	f7f9 f9a5 	bl	800a2a4 <HAL_GetTick>
 8010f5a:	0002      	movs	r2, r0
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	1ad2      	subs	r2, r2, r3
 8010f60:	200f      	movs	r0, #15
 8010f62:	183b      	adds	r3, r7, r0
 8010f64:	1839      	adds	r1, r7, r0
 8010f66:	7809      	ldrb	r1, [r1, #0]
 8010f68:	7019      	strb	r1, [r3, #0]
 8010f6a:	23fa      	movs	r3, #250	@ 0xfa
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d906      	bls.n	8010f80 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2221      	movs	r2, #33	@ 0x21
 8010f76:	2104      	movs	r1, #4
 8010f78:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8010f7a:	183b      	adds	r3, r7, r0
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	2240      	movs	r2, #64	@ 0x40
 8010f88:	4013      	ands	r3, r2
 8010f8a:	d104      	bne.n	8010f96 <RTC_EnterInitMode+0x7a>
 8010f8c:	230f      	movs	r3, #15
 8010f8e:	18fb      	adds	r3, r7, r3
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	d1df      	bne.n	8010f56 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8010f96:	230f      	movs	r3, #15
 8010f98:	18fb      	adds	r3, r7, r3
 8010f9a:	781b      	ldrb	r3, [r3, #0]
}
 8010f9c:	0018      	movs	r0, r3
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	b004      	add	sp, #16
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010fa4:	b590      	push	{r4, r7, lr}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010fac:	240f      	movs	r4, #15
 8010fae:	193b      	adds	r3, r7, r4
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	68da      	ldr	r2, [r3, #12]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	2180      	movs	r1, #128	@ 0x80
 8010fc0:	438a      	bics	r2, r1
 8010fc2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	689b      	ldr	r3, [r3, #8]
 8010fca:	2220      	movs	r2, #32
 8010fcc:	4013      	ands	r3, r2
 8010fce:	d10c      	bne.n	8010fea <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	0018      	movs	r0, r3
 8010fd4:	f7ff ff7a 	bl	8010ecc <HAL_RTC_WaitForSynchro>
 8010fd8:	1e03      	subs	r3, r0, #0
 8010fda:	d006      	beq.n	8010fea <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2221      	movs	r2, #33	@ 0x21
 8010fe0:	2104      	movs	r1, #4
 8010fe2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8010fe4:	193b      	adds	r3, r7, r4
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8010fea:	230f      	movs	r3, #15
 8010fec:	18fb      	adds	r3, r7, r3
 8010fee:	781b      	ldrb	r3, [r3, #0]
}
 8010ff0:	0018      	movs	r0, r3
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	b005      	add	sp, #20
 8010ff6:	bd90      	pop	{r4, r7, pc}

08010ff8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	0002      	movs	r2, r0
 8011000:	1dfb      	adds	r3, r7, #7
 8011002:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8011004:	2300      	movs	r3, #0
 8011006:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8011008:	e007      	b.n	801101a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	3301      	adds	r3, #1
 801100e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8011010:	1dfb      	adds	r3, r7, #7
 8011012:	1dfa      	adds	r2, r7, #7
 8011014:	7812      	ldrb	r2, [r2, #0]
 8011016:	3a0a      	subs	r2, #10
 8011018:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801101a:	1dfb      	adds	r3, r7, #7
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	2b09      	cmp	r3, #9
 8011020:	d8f3      	bhi.n	801100a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	b2db      	uxtb	r3, r3
 8011026:	011b      	lsls	r3, r3, #4
 8011028:	b2da      	uxtb	r2, r3
 801102a:	1dfb      	adds	r3, r7, #7
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	4313      	orrs	r3, r2
 8011030:	b2db      	uxtb	r3, r3
}
 8011032:	0018      	movs	r0, r3
 8011034:	46bd      	mov	sp, r7
 8011036:	b004      	add	sp, #16
 8011038:	bd80      	pop	{r7, pc}
	...

0801103c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8011048:	2300      	movs	r3, #0
 801104a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2220      	movs	r2, #32
 8011050:	5c9b      	ldrb	r3, [r3, r2]
 8011052:	2b01      	cmp	r3, #1
 8011054:	d101      	bne.n	801105a <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8011056:	2302      	movs	r3, #2
 8011058:	e096      	b.n	8011188 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2220      	movs	r2, #32
 801105e:	2101      	movs	r1, #1
 8011060:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2221      	movs	r2, #33	@ 0x21
 8011066:	2102      	movs	r1, #2
 8011068:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	22ca      	movs	r2, #202	@ 0xca
 8011070:	625a      	str	r2, [r3, #36]	@ 0x24
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	2253      	movs	r2, #83	@ 0x53
 8011078:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	689a      	ldr	r2, [r3, #8]
 8011080:	2380      	movs	r3, #128	@ 0x80
 8011082:	00db      	lsls	r3, r3, #3
 8011084:	4013      	ands	r3, r2
 8011086:	d021      	beq.n	80110cc <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8011088:	f7f9 f90c 	bl	800a2a4 <HAL_GetTick>
 801108c:	0003      	movs	r3, r0
 801108e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8011090:	e016      	b.n	80110c0 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011092:	f7f9 f907 	bl	800a2a4 <HAL_GetTick>
 8011096:	0002      	movs	r2, r0
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	1ad2      	subs	r2, r2, r3
 801109c:	23fa      	movs	r3, #250	@ 0xfa
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d90d      	bls.n	80110c0 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	22ff      	movs	r2, #255	@ 0xff
 80110aa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2221      	movs	r2, #33	@ 0x21
 80110b0:	2103      	movs	r1, #3
 80110b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	2220      	movs	r2, #32
 80110b8:	2100      	movs	r1, #0
 80110ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80110bc:	2303      	movs	r3, #3
 80110be:	e063      	b.n	8011188 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	68db      	ldr	r3, [r3, #12]
 80110c6:	2204      	movs	r2, #4
 80110c8:	4013      	ands	r3, r2
 80110ca:	d1e2      	bne.n	8011092 <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	689a      	ldr	r2, [r3, #8]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	492e      	ldr	r1, [pc, #184]	@ (8011190 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 80110d8:	400a      	ands	r2, r1
 80110da:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	68db      	ldr	r3, [r3, #12]
 80110e2:	22ff      	movs	r2, #255	@ 0xff
 80110e4:	401a      	ands	r2, r3
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	492a      	ldr	r1, [pc, #168]	@ (8011194 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 80110ec:	430a      	orrs	r2, r1
 80110ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80110f0:	f7f9 f8d8 	bl	800a2a4 <HAL_GetTick>
 80110f4:	0003      	movs	r3, r0
 80110f6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80110f8:	e016      	b.n	8011128 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80110fa:	f7f9 f8d3 	bl	800a2a4 <HAL_GetTick>
 80110fe:	0002      	movs	r2, r0
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	1ad2      	subs	r2, r2, r3
 8011104:	23fa      	movs	r3, #250	@ 0xfa
 8011106:	009b      	lsls	r3, r3, #2
 8011108:	429a      	cmp	r2, r3
 801110a:	d90d      	bls.n	8011128 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	22ff      	movs	r2, #255	@ 0xff
 8011112:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2221      	movs	r2, #33	@ 0x21
 8011118:	2103      	movs	r1, #3
 801111a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2220      	movs	r2, #32
 8011120:	2100      	movs	r1, #0
 8011122:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8011124:	2303      	movs	r3, #3
 8011126:	e02f      	b.n	8011188 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	68db      	ldr	r3, [r3, #12]
 801112e:	2204      	movs	r2, #4
 8011130:	4013      	ands	r3, r2
 8011132:	d0e2      	beq.n	80110fa <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	689a      	ldr	r2, [r3, #8]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2107      	movs	r1, #7
 8011140:	438a      	bics	r2, r1
 8011142:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	6899      	ldr	r1, [r3, #8]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	430a      	orrs	r2, r1
 8011152:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	68ba      	ldr	r2, [r7, #8]
 801115a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	689a      	ldr	r2, [r3, #8]
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2180      	movs	r1, #128	@ 0x80
 8011168:	00c9      	lsls	r1, r1, #3
 801116a:	430a      	orrs	r2, r1
 801116c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	22ff      	movs	r2, #255	@ 0xff
 8011174:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2221      	movs	r2, #33	@ 0x21
 801117a:	2101      	movs	r1, #1
 801117c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2220      	movs	r2, #32
 8011182:	2100      	movs	r1, #0
 8011184:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011186:	2300      	movs	r3, #0
}
 8011188:	0018      	movs	r0, r3
 801118a:	46bd      	mov	sp, r7
 801118c:	b006      	add	sp, #24
 801118e:	bd80      	pop	{r7, pc}
 8011190:	fffffbff 	.word	0xfffffbff
 8011194:	fffffb7f 	.word	0xfffffb7f

08011198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d101      	bne.n	80111aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80111a6:	2301      	movs	r3, #1
 80111a8:	e032      	b.n	8011210 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2239      	movs	r2, #57	@ 0x39
 80111ae:	5c9b      	ldrb	r3, [r3, r2]
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d107      	bne.n	80111c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2238      	movs	r2, #56	@ 0x38
 80111ba:	2100      	movs	r1, #0
 80111bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	0018      	movs	r0, r3
 80111c2:	f7f8 fa3d 	bl	8009640 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2239      	movs	r2, #57	@ 0x39
 80111ca:	2102      	movs	r1, #2
 80111cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	3304      	adds	r3, #4
 80111d6:	0019      	movs	r1, r3
 80111d8:	0010      	movs	r0, r2
 80111da:	f000 f975 	bl	80114c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	223e      	movs	r2, #62	@ 0x3e
 80111e2:	2101      	movs	r1, #1
 80111e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	223a      	movs	r2, #58	@ 0x3a
 80111ea:	2101      	movs	r1, #1
 80111ec:	5499      	strb	r1, [r3, r2]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	223b      	movs	r2, #59	@ 0x3b
 80111f2:	2101      	movs	r1, #1
 80111f4:	5499      	strb	r1, [r3, r2]
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	223c      	movs	r2, #60	@ 0x3c
 80111fa:	2101      	movs	r1, #1
 80111fc:	5499      	strb	r1, [r3, r2]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	223d      	movs	r2, #61	@ 0x3d
 8011202:	2101      	movs	r1, #1
 8011204:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2239      	movs	r2, #57	@ 0x39
 801120a:	2101      	movs	r1, #1
 801120c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	0018      	movs	r0, r3
 8011212:	46bd      	mov	sp, r7
 8011214:	b002      	add	sp, #8
 8011216:	bd80      	pop	{r7, pc}

08011218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d108      	bne.n	801123a <HAL_TIM_PWM_Start+0x22>
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	223a      	movs	r2, #58	@ 0x3a
 801122c:	5c9b      	ldrb	r3, [r3, r2]
 801122e:	b2db      	uxtb	r3, r3
 8011230:	3b01      	subs	r3, #1
 8011232:	1e5a      	subs	r2, r3, #1
 8011234:	4193      	sbcs	r3, r2
 8011236:	b2db      	uxtb	r3, r3
 8011238:	e01f      	b.n	801127a <HAL_TIM_PWM_Start+0x62>
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	2b04      	cmp	r3, #4
 801123e:	d108      	bne.n	8011252 <HAL_TIM_PWM_Start+0x3a>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	223b      	movs	r2, #59	@ 0x3b
 8011244:	5c9b      	ldrb	r3, [r3, r2]
 8011246:	b2db      	uxtb	r3, r3
 8011248:	3b01      	subs	r3, #1
 801124a:	1e5a      	subs	r2, r3, #1
 801124c:	4193      	sbcs	r3, r2
 801124e:	b2db      	uxtb	r3, r3
 8011250:	e013      	b.n	801127a <HAL_TIM_PWM_Start+0x62>
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	2b08      	cmp	r3, #8
 8011256:	d108      	bne.n	801126a <HAL_TIM_PWM_Start+0x52>
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	223c      	movs	r2, #60	@ 0x3c
 801125c:	5c9b      	ldrb	r3, [r3, r2]
 801125e:	b2db      	uxtb	r3, r3
 8011260:	3b01      	subs	r3, #1
 8011262:	1e5a      	subs	r2, r3, #1
 8011264:	4193      	sbcs	r3, r2
 8011266:	b2db      	uxtb	r3, r3
 8011268:	e007      	b.n	801127a <HAL_TIM_PWM_Start+0x62>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	223d      	movs	r2, #61	@ 0x3d
 801126e:	5c9b      	ldrb	r3, [r3, r2]
 8011270:	b2db      	uxtb	r3, r3
 8011272:	3b01      	subs	r3, #1
 8011274:	1e5a      	subs	r2, r3, #1
 8011276:	4193      	sbcs	r3, r2
 8011278:	b2db      	uxtb	r3, r3
 801127a:	2b00      	cmp	r3, #0
 801127c:	d001      	beq.n	8011282 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801127e:	2301      	movs	r3, #1
 8011280:	e052      	b.n	8011328 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d104      	bne.n	8011292 <HAL_TIM_PWM_Start+0x7a>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	223a      	movs	r2, #58	@ 0x3a
 801128c:	2102      	movs	r1, #2
 801128e:	5499      	strb	r1, [r3, r2]
 8011290:	e013      	b.n	80112ba <HAL_TIM_PWM_Start+0xa2>
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	2b04      	cmp	r3, #4
 8011296:	d104      	bne.n	80112a2 <HAL_TIM_PWM_Start+0x8a>
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	223b      	movs	r2, #59	@ 0x3b
 801129c:	2102      	movs	r1, #2
 801129e:	5499      	strb	r1, [r3, r2]
 80112a0:	e00b      	b.n	80112ba <HAL_TIM_PWM_Start+0xa2>
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	2b08      	cmp	r3, #8
 80112a6:	d104      	bne.n	80112b2 <HAL_TIM_PWM_Start+0x9a>
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	223c      	movs	r2, #60	@ 0x3c
 80112ac:	2102      	movs	r1, #2
 80112ae:	5499      	strb	r1, [r3, r2]
 80112b0:	e003      	b.n	80112ba <HAL_TIM_PWM_Start+0xa2>
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	223d      	movs	r2, #61	@ 0x3d
 80112b6:	2102      	movs	r1, #2
 80112b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	6839      	ldr	r1, [r7, #0]
 80112c0:	2201      	movs	r2, #1
 80112c2:	0018      	movs	r0, r3
 80112c4:	f000 fa62 	bl	801178c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	2380      	movs	r3, #128	@ 0x80
 80112ce:	05db      	lsls	r3, r3, #23
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d00e      	beq.n	80112f2 <HAL_TIM_PWM_Start+0xda>
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a15      	ldr	r2, [pc, #84]	@ (8011330 <HAL_TIM_PWM_Start+0x118>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d009      	beq.n	80112f2 <HAL_TIM_PWM_Start+0xda>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	4a14      	ldr	r2, [pc, #80]	@ (8011334 <HAL_TIM_PWM_Start+0x11c>)
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d004      	beq.n	80112f2 <HAL_TIM_PWM_Start+0xda>
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	4a12      	ldr	r2, [pc, #72]	@ (8011338 <HAL_TIM_PWM_Start+0x120>)
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d111      	bne.n	8011316 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	689b      	ldr	r3, [r3, #8]
 80112f8:	2207      	movs	r2, #7
 80112fa:	4013      	ands	r3, r2
 80112fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	2b06      	cmp	r3, #6
 8011302:	d010      	beq.n	8011326 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	2101      	movs	r1, #1
 8011310:	430a      	orrs	r2, r1
 8011312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011314:	e007      	b.n	8011326 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	2101      	movs	r1, #1
 8011322:	430a      	orrs	r2, r1
 8011324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011326:	2300      	movs	r3, #0
}
 8011328:	0018      	movs	r0, r3
 801132a:	46bd      	mov	sp, r7
 801132c:	b004      	add	sp, #16
 801132e:	bd80      	pop	{r7, pc}
 8011330:	40000400 	.word	0x40000400
 8011334:	40010800 	.word	0x40010800
 8011338:	40011400 	.word	0x40011400

0801133c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b086      	sub	sp, #24
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	60b9      	str	r1, [r7, #8]
 8011346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011348:	2317      	movs	r3, #23
 801134a:	18fb      	adds	r3, r7, r3
 801134c:	2200      	movs	r2, #0
 801134e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2238      	movs	r2, #56	@ 0x38
 8011354:	5c9b      	ldrb	r3, [r3, r2]
 8011356:	2b01      	cmp	r3, #1
 8011358:	d101      	bne.n	801135e <HAL_TIM_PWM_ConfigChannel+0x22>
 801135a:	2302      	movs	r3, #2
 801135c:	e0ad      	b.n	80114ba <HAL_TIM_PWM_ConfigChannel+0x17e>
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	2238      	movs	r2, #56	@ 0x38
 8011362:	2101      	movs	r1, #1
 8011364:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2b0c      	cmp	r3, #12
 801136a:	d100      	bne.n	801136e <HAL_TIM_PWM_ConfigChannel+0x32>
 801136c:	e076      	b.n	801145c <HAL_TIM_PWM_ConfigChannel+0x120>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2b0c      	cmp	r3, #12
 8011372:	d900      	bls.n	8011376 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8011374:	e095      	b.n	80114a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2b08      	cmp	r3, #8
 801137a:	d04e      	beq.n	801141a <HAL_TIM_PWM_ConfigChannel+0xde>
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2b08      	cmp	r3, #8
 8011380:	d900      	bls.n	8011384 <HAL_TIM_PWM_ConfigChannel+0x48>
 8011382:	e08e      	b.n	80114a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d003      	beq.n	8011392 <HAL_TIM_PWM_ConfigChannel+0x56>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2b04      	cmp	r3, #4
 801138e:	d021      	beq.n	80113d4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8011390:	e087      	b.n	80114a2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	68ba      	ldr	r2, [r7, #8]
 8011398:	0011      	movs	r1, r2
 801139a:	0018      	movs	r0, r3
 801139c:	f000 f8f2 	bl	8011584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	699a      	ldr	r2, [r3, #24]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	2108      	movs	r1, #8
 80113ac:	430a      	orrs	r2, r1
 80113ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	699a      	ldr	r2, [r3, #24]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2104      	movs	r1, #4
 80113bc:	438a      	bics	r2, r1
 80113be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	6999      	ldr	r1, [r3, #24]
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	68da      	ldr	r2, [r3, #12]
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	430a      	orrs	r2, r1
 80113d0:	619a      	str	r2, [r3, #24]
      break;
 80113d2:	e06b      	b.n	80114ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	68ba      	ldr	r2, [r7, #8]
 80113da:	0011      	movs	r1, r2
 80113dc:	0018      	movs	r0, r3
 80113de:	f000 f90d 	bl	80115fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	699a      	ldr	r2, [r3, #24]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	2180      	movs	r1, #128	@ 0x80
 80113ee:	0109      	lsls	r1, r1, #4
 80113f0:	430a      	orrs	r2, r1
 80113f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	699a      	ldr	r2, [r3, #24]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	4931      	ldr	r1, [pc, #196]	@ (80114c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8011400:	400a      	ands	r2, r1
 8011402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	6999      	ldr	r1, [r3, #24]
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	021a      	lsls	r2, r3, #8
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	430a      	orrs	r2, r1
 8011416:	619a      	str	r2, [r3, #24]
      break;
 8011418:	e048      	b.n	80114ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	68ba      	ldr	r2, [r7, #8]
 8011420:	0011      	movs	r1, r2
 8011422:	0018      	movs	r0, r3
 8011424:	f000 f92c 	bl	8011680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	69da      	ldr	r2, [r3, #28]
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2108      	movs	r1, #8
 8011434:	430a      	orrs	r2, r1
 8011436:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	69da      	ldr	r2, [r3, #28]
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2104      	movs	r1, #4
 8011444:	438a      	bics	r2, r1
 8011446:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	69d9      	ldr	r1, [r3, #28]
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	68da      	ldr	r2, [r3, #12]
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	430a      	orrs	r2, r1
 8011458:	61da      	str	r2, [r3, #28]
      break;
 801145a:	e027      	b.n	80114ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	68ba      	ldr	r2, [r7, #8]
 8011462:	0011      	movs	r1, r2
 8011464:	0018      	movs	r0, r3
 8011466:	f000 f94b 	bl	8011700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	69da      	ldr	r2, [r3, #28]
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	2180      	movs	r1, #128	@ 0x80
 8011476:	0109      	lsls	r1, r1, #4
 8011478:	430a      	orrs	r2, r1
 801147a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	69da      	ldr	r2, [r3, #28]
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	490f      	ldr	r1, [pc, #60]	@ (80114c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8011488:	400a      	ands	r2, r1
 801148a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	69d9      	ldr	r1, [r3, #28]
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	68db      	ldr	r3, [r3, #12]
 8011496:	021a      	lsls	r2, r3, #8
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	430a      	orrs	r2, r1
 801149e:	61da      	str	r2, [r3, #28]
      break;
 80114a0:	e004      	b.n	80114ac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80114a2:	2317      	movs	r3, #23
 80114a4:	18fb      	adds	r3, r7, r3
 80114a6:	2201      	movs	r2, #1
 80114a8:	701a      	strb	r2, [r3, #0]
      break;
 80114aa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2238      	movs	r2, #56	@ 0x38
 80114b0:	2100      	movs	r1, #0
 80114b2:	5499      	strb	r1, [r3, r2]

  return status;
 80114b4:	2317      	movs	r3, #23
 80114b6:	18fb      	adds	r3, r7, r3
 80114b8:	781b      	ldrb	r3, [r3, #0]
}
 80114ba:	0018      	movs	r0, r3
 80114bc:	46bd      	mov	sp, r7
 80114be:	b006      	add	sp, #24
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	46c0      	nop			@ (mov r8, r8)
 80114c4:	fffffbff 	.word	0xfffffbff

080114c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b084      	sub	sp, #16
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	2380      	movs	r3, #128	@ 0x80
 80114dc:	05db      	lsls	r3, r3, #23
 80114de:	429a      	cmp	r2, r3
 80114e0:	d00b      	beq.n	80114fa <TIM_Base_SetConfig+0x32>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4a23      	ldr	r2, [pc, #140]	@ (8011574 <TIM_Base_SetConfig+0xac>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d007      	beq.n	80114fa <TIM_Base_SetConfig+0x32>
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4a22      	ldr	r2, [pc, #136]	@ (8011578 <TIM_Base_SetConfig+0xb0>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d003      	beq.n	80114fa <TIM_Base_SetConfig+0x32>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	4a21      	ldr	r2, [pc, #132]	@ (801157c <TIM_Base_SetConfig+0xb4>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d108      	bne.n	801150c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2270      	movs	r2, #112	@ 0x70
 80114fe:	4393      	bics	r3, r2
 8011500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	68fa      	ldr	r2, [r7, #12]
 8011508:	4313      	orrs	r3, r2
 801150a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	2380      	movs	r3, #128	@ 0x80
 8011510:	05db      	lsls	r3, r3, #23
 8011512:	429a      	cmp	r2, r3
 8011514:	d00b      	beq.n	801152e <TIM_Base_SetConfig+0x66>
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	4a16      	ldr	r2, [pc, #88]	@ (8011574 <TIM_Base_SetConfig+0xac>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d007      	beq.n	801152e <TIM_Base_SetConfig+0x66>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4a15      	ldr	r2, [pc, #84]	@ (8011578 <TIM_Base_SetConfig+0xb0>)
 8011522:	4293      	cmp	r3, r2
 8011524:	d003      	beq.n	801152e <TIM_Base_SetConfig+0x66>
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	4a14      	ldr	r2, [pc, #80]	@ (801157c <TIM_Base_SetConfig+0xb4>)
 801152a:	4293      	cmp	r3, r2
 801152c:	d108      	bne.n	8011540 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	4a13      	ldr	r2, [pc, #76]	@ (8011580 <TIM_Base_SetConfig+0xb8>)
 8011532:	4013      	ands	r3, r2
 8011534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	68fa      	ldr	r2, [r7, #12]
 801153c:	4313      	orrs	r3, r2
 801153e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	2280      	movs	r2, #128	@ 0x80
 8011544:	4393      	bics	r3, r2
 8011546:	001a      	movs	r2, r3
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	691b      	ldr	r3, [r3, #16]
 801154c:	4313      	orrs	r3, r2
 801154e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	68fa      	ldr	r2, [r7, #12]
 8011554:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	689a      	ldr	r2, [r3, #8]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	2201      	movs	r2, #1
 801156a:	615a      	str	r2, [r3, #20]
}
 801156c:	46c0      	nop			@ (mov r8, r8)
 801156e:	46bd      	mov	sp, r7
 8011570:	b004      	add	sp, #16
 8011572:	bd80      	pop	{r7, pc}
 8011574:	40000400 	.word	0x40000400
 8011578:	40010800 	.word	0x40010800
 801157c:	40011400 	.word	0x40011400
 8011580:	fffffcff 	.word	0xfffffcff

08011584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b086      	sub	sp, #24
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6a1b      	ldr	r3, [r3, #32]
 8011592:	2201      	movs	r2, #1
 8011594:	4393      	bics	r3, r2
 8011596:	001a      	movs	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6a1b      	ldr	r3, [r3, #32]
 80115a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	699b      	ldr	r3, [r3, #24]
 80115ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	2270      	movs	r2, #112	@ 0x70
 80115b2:	4393      	bics	r3, r2
 80115b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	2203      	movs	r2, #3
 80115ba:	4393      	bics	r3, r2
 80115bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	68fa      	ldr	r2, [r7, #12]
 80115c4:	4313      	orrs	r3, r2
 80115c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	2202      	movs	r2, #2
 80115cc:	4393      	bics	r3, r2
 80115ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	689b      	ldr	r3, [r3, #8]
 80115d4:	697a      	ldr	r2, [r7, #20]
 80115d6:	4313      	orrs	r3, r2
 80115d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	693a      	ldr	r2, [r7, #16]
 80115de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68fa      	ldr	r2, [r7, #12]
 80115e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	685a      	ldr	r2, [r3, #4]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	697a      	ldr	r2, [r7, #20]
 80115f2:	621a      	str	r2, [r3, #32]
}
 80115f4:	46c0      	nop			@ (mov r8, r8)
 80115f6:	46bd      	mov	sp, r7
 80115f8:	b006      	add	sp, #24
 80115fa:	bd80      	pop	{r7, pc}

080115fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b086      	sub	sp, #24
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6a1b      	ldr	r3, [r3, #32]
 801160a:	2210      	movs	r2, #16
 801160c:	4393      	bics	r3, r2
 801160e:	001a      	movs	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6a1b      	ldr	r3, [r3, #32]
 8011618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	699b      	ldr	r3, [r3, #24]
 8011624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	4a13      	ldr	r2, [pc, #76]	@ (8011678 <TIM_OC2_SetConfig+0x7c>)
 801162a:	4013      	ands	r3, r2
 801162c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	4a12      	ldr	r2, [pc, #72]	@ (801167c <TIM_OC2_SetConfig+0x80>)
 8011632:	4013      	ands	r3, r2
 8011634:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	021b      	lsls	r3, r3, #8
 801163c:	68fa      	ldr	r2, [r7, #12]
 801163e:	4313      	orrs	r3, r2
 8011640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	2220      	movs	r2, #32
 8011646:	4393      	bics	r3, r2
 8011648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	689b      	ldr	r3, [r3, #8]
 801164e:	011b      	lsls	r3, r3, #4
 8011650:	697a      	ldr	r2, [r7, #20]
 8011652:	4313      	orrs	r3, r2
 8011654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	693a      	ldr	r2, [r7, #16]
 801165a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	68fa      	ldr	r2, [r7, #12]
 8011660:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	685a      	ldr	r2, [r3, #4]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	697a      	ldr	r2, [r7, #20]
 801166e:	621a      	str	r2, [r3, #32]
}
 8011670:	46c0      	nop			@ (mov r8, r8)
 8011672:	46bd      	mov	sp, r7
 8011674:	b006      	add	sp, #24
 8011676:	bd80      	pop	{r7, pc}
 8011678:	ffff8fff 	.word	0xffff8fff
 801167c:	fffffcff 	.word	0xfffffcff

08011680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6a1b      	ldr	r3, [r3, #32]
 801168e:	4a1a      	ldr	r2, [pc, #104]	@ (80116f8 <TIM_OC3_SetConfig+0x78>)
 8011690:	401a      	ands	r2, r3
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6a1b      	ldr	r3, [r3, #32]
 801169a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	69db      	ldr	r3, [r3, #28]
 80116a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2270      	movs	r2, #112	@ 0x70
 80116ac:	4393      	bics	r3, r2
 80116ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2203      	movs	r2, #3
 80116b4:	4393      	bics	r3, r2
 80116b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	68fa      	ldr	r2, [r7, #12]
 80116be:	4313      	orrs	r3, r2
 80116c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	4a0d      	ldr	r2, [pc, #52]	@ (80116fc <TIM_OC3_SetConfig+0x7c>)
 80116c6:	4013      	ands	r3, r2
 80116c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	021b      	lsls	r3, r3, #8
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	4313      	orrs	r3, r2
 80116d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	693a      	ldr	r2, [r7, #16]
 80116da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	68fa      	ldr	r2, [r7, #12]
 80116e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	685a      	ldr	r2, [r3, #4]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	697a      	ldr	r2, [r7, #20]
 80116ee:	621a      	str	r2, [r3, #32]
}
 80116f0:	46c0      	nop			@ (mov r8, r8)
 80116f2:	46bd      	mov	sp, r7
 80116f4:	b006      	add	sp, #24
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	fffffeff 	.word	0xfffffeff
 80116fc:	fffffdff 	.word	0xfffffdff

08011700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b086      	sub	sp, #24
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6a1b      	ldr	r3, [r3, #32]
 801170e:	4a1b      	ldr	r2, [pc, #108]	@ (801177c <TIM_OC4_SetConfig+0x7c>)
 8011710:	401a      	ands	r2, r3
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6a1b      	ldr	r3, [r3, #32]
 801171a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	69db      	ldr	r3, [r3, #28]
 8011726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	4a15      	ldr	r2, [pc, #84]	@ (8011780 <TIM_OC4_SetConfig+0x80>)
 801172c:	4013      	ands	r3, r2
 801172e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	4a14      	ldr	r2, [pc, #80]	@ (8011784 <TIM_OC4_SetConfig+0x84>)
 8011734:	4013      	ands	r3, r2
 8011736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	021b      	lsls	r3, r3, #8
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	4313      	orrs	r3, r2
 8011742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	4a10      	ldr	r2, [pc, #64]	@ (8011788 <TIM_OC4_SetConfig+0x88>)
 8011748:	4013      	ands	r3, r2
 801174a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	689b      	ldr	r3, [r3, #8]
 8011750:	031b      	lsls	r3, r3, #12
 8011752:	697a      	ldr	r2, [r7, #20]
 8011754:	4313      	orrs	r3, r2
 8011756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	693a      	ldr	r2, [r7, #16]
 801175c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	68fa      	ldr	r2, [r7, #12]
 8011762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	685a      	ldr	r2, [r3, #4]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	697a      	ldr	r2, [r7, #20]
 8011770:	621a      	str	r2, [r3, #32]
}
 8011772:	46c0      	nop			@ (mov r8, r8)
 8011774:	46bd      	mov	sp, r7
 8011776:	b006      	add	sp, #24
 8011778:	bd80      	pop	{r7, pc}
 801177a:	46c0      	nop			@ (mov r8, r8)
 801177c:	ffffefff 	.word	0xffffefff
 8011780:	ffff8fff 	.word	0xffff8fff
 8011784:	fffffcff 	.word	0xfffffcff
 8011788:	ffffdfff 	.word	0xffffdfff

0801178c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b086      	sub	sp, #24
 8011790:	af00      	add	r7, sp, #0
 8011792:	60f8      	str	r0, [r7, #12]
 8011794:	60b9      	str	r1, [r7, #8]
 8011796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	221f      	movs	r2, #31
 801179c:	4013      	ands	r3, r2
 801179e:	2201      	movs	r2, #1
 80117a0:	409a      	lsls	r2, r3
 80117a2:	0013      	movs	r3, r2
 80117a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	697a      	ldr	r2, [r7, #20]
 80117ac:	43d2      	mvns	r2, r2
 80117ae:	401a      	ands	r2, r3
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	6a1a      	ldr	r2, [r3, #32]
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	211f      	movs	r1, #31
 80117bc:	400b      	ands	r3, r1
 80117be:	6879      	ldr	r1, [r7, #4]
 80117c0:	4099      	lsls	r1, r3
 80117c2:	000b      	movs	r3, r1
 80117c4:	431a      	orrs	r2, r3
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	621a      	str	r2, [r3, #32]
}
 80117ca:	46c0      	nop			@ (mov r8, r8)
 80117cc:	46bd      	mov	sp, r7
 80117ce:	b006      	add	sp, #24
 80117d0:	bd80      	pop	{r7, pc}
	...

080117d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b084      	sub	sp, #16
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2238      	movs	r2, #56	@ 0x38
 80117e2:	5c9b      	ldrb	r3, [r3, r2]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d101      	bne.n	80117ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80117e8:	2302      	movs	r3, #2
 80117ea:	e047      	b.n	801187c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2238      	movs	r2, #56	@ 0x38
 80117f0:	2101      	movs	r1, #1
 80117f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2239      	movs	r2, #57	@ 0x39
 80117f8:	2102      	movs	r1, #2
 80117fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	2270      	movs	r2, #112	@ 0x70
 8011810:	4393      	bics	r3, r2
 8011812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	4313      	orrs	r3, r2
 801181c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	68fa      	ldr	r2, [r7, #12]
 8011824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	2380      	movs	r3, #128	@ 0x80
 801182c:	05db      	lsls	r3, r3, #23
 801182e:	429a      	cmp	r2, r3
 8011830:	d00e      	beq.n	8011850 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	4a13      	ldr	r2, [pc, #76]	@ (8011884 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8011838:	4293      	cmp	r3, r2
 801183a:	d009      	beq.n	8011850 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4a11      	ldr	r2, [pc, #68]	@ (8011888 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d004      	beq.n	8011850 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	4a10      	ldr	r2, [pc, #64]	@ (801188c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801184c:	4293      	cmp	r3, r2
 801184e:	d10c      	bne.n	801186a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	2280      	movs	r2, #128	@ 0x80
 8011854:	4393      	bics	r3, r2
 8011856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	68ba      	ldr	r2, [r7, #8]
 801185e:	4313      	orrs	r3, r2
 8011860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	68ba      	ldr	r2, [r7, #8]
 8011868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2239      	movs	r2, #57	@ 0x39
 801186e:	2101      	movs	r1, #1
 8011870:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2238      	movs	r2, #56	@ 0x38
 8011876:	2100      	movs	r1, #0
 8011878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801187a:	2300      	movs	r3, #0
}
 801187c:	0018      	movs	r0, r3
 801187e:	46bd      	mov	sp, r7
 8011880:	b004      	add	sp, #16
 8011882:	bd80      	pop	{r7, pc}
 8011884:	40000400 	.word	0x40000400
 8011888:	40010800 	.word	0x40010800
 801188c:	40011400 	.word	0x40011400

08011890 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2238      	movs	r2, #56	@ 0x38
 801189e:	5c9b      	ldrb	r3, [r3, r2]
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d101      	bne.n	80118a8 <HAL_TIMEx_RemapConfig+0x18>
 80118a4:	2302      	movs	r3, #2
 80118a6:	e00c      	b.n	80118c2 <HAL_TIMEx_RemapConfig+0x32>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2238      	movs	r2, #56	@ 0x38
 80118ac:	2101      	movs	r1, #1
 80118ae:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	683a      	ldr	r2, [r7, #0]
 80118b6:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2238      	movs	r2, #56	@ 0x38
 80118bc:	2100      	movs	r1, #0
 80118be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	0018      	movs	r0, r3
 80118c4:	46bd      	mov	sp, r7
 80118c6:	b002      	add	sp, #8
 80118c8:	bd80      	pop	{r7, pc}
	...

080118cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d101      	bne.n	80118de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80118da:	2301      	movs	r3, #1
 80118dc:	e053      	b.n	8011986 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d116      	bne.n	8011914 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2278      	movs	r2, #120	@ 0x78
 80118ea:	2100      	movs	r1, #0
 80118ec:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	0018      	movs	r0, r3
 80118f2:	f000 fd07 	bl	8012304 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	22b0      	movs	r2, #176	@ 0xb0
 80118fa:	589b      	ldr	r3, [r3, r2]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d103      	bne.n	8011908 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	21b0      	movs	r1, #176	@ 0xb0
 8011904:	4a22      	ldr	r2, [pc, #136]	@ (8011990 <HAL_UART_Init+0xc4>)
 8011906:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	22b0      	movs	r2, #176	@ 0xb0
 801190c:	589b      	ldr	r3, [r3, r2]
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	0010      	movs	r0, r2
 8011912:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2224      	movs	r2, #36	@ 0x24
 8011918:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	681a      	ldr	r2, [r3, #0]
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2101      	movs	r1, #1
 8011926:	438a      	bics	r2, r1
 8011928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	0018      	movs	r0, r3
 801192e:	f000 fd2d 	bl	801238c <UART_SetConfig>
 8011932:	0003      	movs	r3, r0
 8011934:	2b01      	cmp	r3, #1
 8011936:	d101      	bne.n	801193c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8011938:	2301      	movs	r3, #1
 801193a:	e024      	b.n	8011986 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011940:	2b00      	cmp	r3, #0
 8011942:	d003      	beq.n	801194c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	0018      	movs	r0, r3
 8011948:	f000 ffbe 	bl	80128c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	685a      	ldr	r2, [r3, #4]
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	490f      	ldr	r1, [pc, #60]	@ (8011994 <HAL_UART_Init+0xc8>)
 8011958:	400a      	ands	r2, r1
 801195a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	689a      	ldr	r2, [r3, #8]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	212a      	movs	r1, #42	@ 0x2a
 8011968:	438a      	bics	r2, r1
 801196a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2101      	movs	r1, #1
 8011978:	430a      	orrs	r2, r1
 801197a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	0018      	movs	r0, r3
 8011980:	f001 f856 	bl	8012a30 <UART_CheckIdleState>
 8011984:	0003      	movs	r3, r0
}
 8011986:	0018      	movs	r0, r3
 8011988:	46bd      	mov	sp, r7
 801198a:	b002      	add	sp, #8
 801198c:	bd80      	pop	{r7, pc}
 801198e:	46c0      	nop			@ (mov r8, r8)
 8011990:	0800988d 	.word	0x0800988d
 8011994:	ffffb7ff 	.word	0xffffb7ff

08011998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b08a      	sub	sp, #40	@ 0x28
 801199c:	af02      	add	r7, sp, #8
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	603b      	str	r3, [r7, #0]
 80119a4:	1dbb      	adds	r3, r7, #6
 80119a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119ac:	2b20      	cmp	r3, #32
 80119ae:	d000      	beq.n	80119b2 <HAL_UART_Transmit+0x1a>
 80119b0:	e08c      	b.n	8011acc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d003      	beq.n	80119c0 <HAL_UART_Transmit+0x28>
 80119b8:	1dbb      	adds	r3, r7, #6
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d101      	bne.n	80119c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80119c0:	2301      	movs	r3, #1
 80119c2:	e084      	b.n	8011ace <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	689a      	ldr	r2, [r3, #8]
 80119c8:	2380      	movs	r3, #128	@ 0x80
 80119ca:	015b      	lsls	r3, r3, #5
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d109      	bne.n	80119e4 <HAL_UART_Transmit+0x4c>
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	691b      	ldr	r3, [r3, #16]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d105      	bne.n	80119e4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	2201      	movs	r2, #1
 80119dc:	4013      	ands	r3, r2
 80119de:	d001      	beq.n	80119e4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80119e0:	2301      	movs	r3, #1
 80119e2:	e074      	b.n	8011ace <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2284      	movs	r2, #132	@ 0x84
 80119e8:	2100      	movs	r1, #0
 80119ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2221      	movs	r2, #33	@ 0x21
 80119f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80119f2:	f7f8 fc57 	bl	800a2a4 <HAL_GetTick>
 80119f6:	0003      	movs	r3, r0
 80119f8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	1dba      	adds	r2, r7, #6
 80119fe:	2150      	movs	r1, #80	@ 0x50
 8011a00:	8812      	ldrh	r2, [r2, #0]
 8011a02:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	1dba      	adds	r2, r7, #6
 8011a08:	2152      	movs	r1, #82	@ 0x52
 8011a0a:	8812      	ldrh	r2, [r2, #0]
 8011a0c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	689a      	ldr	r2, [r3, #8]
 8011a12:	2380      	movs	r3, #128	@ 0x80
 8011a14:	015b      	lsls	r3, r3, #5
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d108      	bne.n	8011a2c <HAL_UART_Transmit+0x94>
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	691b      	ldr	r3, [r3, #16]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d104      	bne.n	8011a2c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8011a22:	2300      	movs	r3, #0
 8011a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	61bb      	str	r3, [r7, #24]
 8011a2a:	e003      	b.n	8011a34 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011a30:	2300      	movs	r3, #0
 8011a32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011a34:	e02f      	b.n	8011a96 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011a36:	697a      	ldr	r2, [r7, #20]
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	0013      	movs	r3, r2
 8011a40:	2200      	movs	r2, #0
 8011a42:	2180      	movs	r1, #128	@ 0x80
 8011a44:	f001 f89c 	bl	8012b80 <UART_WaitOnFlagUntilTimeout>
 8011a48:	1e03      	subs	r3, r0, #0
 8011a4a:	d004      	beq.n	8011a56 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2220      	movs	r2, #32
 8011a50:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8011a52:	2303      	movs	r3, #3
 8011a54:	e03b      	b.n	8011ace <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d10b      	bne.n	8011a74 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	881b      	ldrh	r3, [r3, #0]
 8011a60:	001a      	movs	r2, r3
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	05d2      	lsls	r2, r2, #23
 8011a68:	0dd2      	lsrs	r2, r2, #23
 8011a6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	3302      	adds	r3, #2
 8011a70:	61bb      	str	r3, [r7, #24]
 8011a72:	e007      	b.n	8011a84 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	781a      	ldrb	r2, [r3, #0]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011a7e:	69fb      	ldr	r3, [r7, #28]
 8011a80:	3301      	adds	r3, #1
 8011a82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2252      	movs	r2, #82	@ 0x52
 8011a88:	5a9b      	ldrh	r3, [r3, r2]
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	b299      	uxth	r1, r3
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2252      	movs	r2, #82	@ 0x52
 8011a94:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	2252      	movs	r2, #82	@ 0x52
 8011a9a:	5a9b      	ldrh	r3, [r3, r2]
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d1c9      	bne.n	8011a36 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011aa2:	697a      	ldr	r2, [r7, #20]
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	9300      	str	r3, [sp, #0]
 8011aaa:	0013      	movs	r3, r2
 8011aac:	2200      	movs	r2, #0
 8011aae:	2140      	movs	r1, #64	@ 0x40
 8011ab0:	f001 f866 	bl	8012b80 <UART_WaitOnFlagUntilTimeout>
 8011ab4:	1e03      	subs	r3, r0, #0
 8011ab6:	d004      	beq.n	8011ac2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2220      	movs	r2, #32
 8011abc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8011abe:	2303      	movs	r3, #3
 8011ac0:	e005      	b.n	8011ace <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2220      	movs	r2, #32
 8011ac6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	e000      	b.n	8011ace <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8011acc:	2302      	movs	r3, #2
  }
}
 8011ace:	0018      	movs	r0, r3
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	b008      	add	sp, #32
 8011ad4:	bd80      	pop	{r7, pc}
	...

08011ad8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b088      	sub	sp, #32
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	1dbb      	adds	r3, r7, #6
 8011ae4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011aea:	2b20      	cmp	r3, #32
 8011aec:	d000      	beq.n	8011af0 <HAL_UART_Transmit_DMA+0x18>
 8011aee:	e077      	b.n	8011be0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d003      	beq.n	8011afe <HAL_UART_Transmit_DMA+0x26>
 8011af6:	1dbb      	adds	r3, r7, #6
 8011af8:	881b      	ldrh	r3, [r3, #0]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d101      	bne.n	8011b02 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011afe:	2301      	movs	r3, #1
 8011b00:	e06f      	b.n	8011be2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	689a      	ldr	r2, [r3, #8]
 8011b06:	2380      	movs	r3, #128	@ 0x80
 8011b08:	015b      	lsls	r3, r3, #5
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d109      	bne.n	8011b22 <HAL_UART_Transmit_DMA+0x4a>
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	691b      	ldr	r3, [r3, #16]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d105      	bne.n	8011b22 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	2201      	movs	r2, #1
 8011b1a:	4013      	ands	r3, r2
 8011b1c:	d001      	beq.n	8011b22 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011b1e:	2301      	movs	r3, #1
 8011b20:	e05f      	b.n	8011be2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	68ba      	ldr	r2, [r7, #8]
 8011b26:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	1dba      	adds	r2, r7, #6
 8011b2c:	2150      	movs	r1, #80	@ 0x50
 8011b2e:	8812      	ldrh	r2, [r2, #0]
 8011b30:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	1dba      	adds	r2, r7, #6
 8011b36:	2152      	movs	r1, #82	@ 0x52
 8011b38:	8812      	ldrh	r2, [r2, #0]
 8011b3a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2284      	movs	r2, #132	@ 0x84
 8011b40:	2100      	movs	r1, #0
 8011b42:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2221      	movs	r2, #33	@ 0x21
 8011b48:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d027      	beq.n	8011ba2 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b56:	4a25      	ldr	r2, [pc, #148]	@ (8011bec <HAL_UART_Transmit_DMA+0x114>)
 8011b58:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b5e:	4a24      	ldr	r2, [pc, #144]	@ (8011bf0 <HAL_UART_Transmit_DMA+0x118>)
 8011b60:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b66:	4a23      	ldr	r2, [pc, #140]	@ (8011bf4 <HAL_UART_Transmit_DMA+0x11c>)
 8011b68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b6e:	2200      	movs	r2, #0
 8011b70:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b7a:	0019      	movs	r1, r3
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	3328      	adds	r3, #40	@ 0x28
 8011b82:	001a      	movs	r2, r3
 8011b84:	1dbb      	adds	r3, r7, #6
 8011b86:	881b      	ldrh	r3, [r3, #0]
 8011b88:	f7f9 f90a 	bl	800ada0 <HAL_DMA_Start_IT>
 8011b8c:	1e03      	subs	r3, r0, #0
 8011b8e:	d008      	beq.n	8011ba2 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2284      	movs	r2, #132	@ 0x84
 8011b94:	2110      	movs	r1, #16
 8011b96:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2220      	movs	r2, #32
 8011b9c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	e01f      	b.n	8011be2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2240      	movs	r2, #64	@ 0x40
 8011ba8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011baa:	f3ef 8310 	mrs	r3, PRIMASK
 8011bae:	613b      	str	r3, [r7, #16]
  return(result);
 8011bb0:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011bb2:	61fb      	str	r3, [r7, #28]
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	f383 8810 	msr	PRIMASK, r3
}
 8011bbe:	46c0      	nop			@ (mov r8, r8)
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	689a      	ldr	r2, [r3, #8]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	2180      	movs	r1, #128	@ 0x80
 8011bcc:	430a      	orrs	r2, r1
 8011bce:	609a      	str	r2, [r3, #8]
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	f383 8810 	msr	PRIMASK, r3
}
 8011bda:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	e000      	b.n	8011be2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8011be0:	2302      	movs	r3, #2
  }
}
 8011be2:	0018      	movs	r0, r3
 8011be4:	46bd      	mov	sp, r7
 8011be6:	b008      	add	sp, #32
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	46c0      	nop			@ (mov r8, r8)
 8011bec:	08012ea5 	.word	0x08012ea5
 8011bf0:	08012f41 	.word	0x08012f41
 8011bf4:	080130e1 	.word	0x080130e1

08011bf8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b088      	sub	sp, #32
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	1dbb      	adds	r3, r7, #6
 8011c04:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2280      	movs	r2, #128	@ 0x80
 8011c0a:	589b      	ldr	r3, [r3, r2]
 8011c0c:	2b20      	cmp	r3, #32
 8011c0e:	d14a      	bne.n	8011ca6 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d003      	beq.n	8011c1e <HAL_UART_Receive_DMA+0x26>
 8011c16:	1dbb      	adds	r3, r7, #6
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d101      	bne.n	8011c22 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	e042      	b.n	8011ca8 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	689a      	ldr	r2, [r3, #8]
 8011c26:	2380      	movs	r3, #128	@ 0x80
 8011c28:	015b      	lsls	r3, r3, #5
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d109      	bne.n	8011c42 <HAL_UART_Receive_DMA+0x4a>
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	691b      	ldr	r3, [r3, #16]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d105      	bne.n	8011c42 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	2201      	movs	r2, #1
 8011c3a:	4013      	ands	r3, r2
 8011c3c:	d001      	beq.n	8011c42 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	e032      	b.n	8011ca8 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	2200      	movs	r2, #0
 8011c46:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	4a18      	ldr	r2, [pc, #96]	@ (8011cb0 <HAL_UART_Receive_DMA+0xb8>)
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d020      	beq.n	8011c94 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	685a      	ldr	r2, [r3, #4]
 8011c58:	2380      	movs	r3, #128	@ 0x80
 8011c5a:	041b      	lsls	r3, r3, #16
 8011c5c:	4013      	ands	r3, r2
 8011c5e:	d019      	beq.n	8011c94 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c60:	f3ef 8310 	mrs	r3, PRIMASK
 8011c64:	613b      	str	r3, [r7, #16]
  return(result);
 8011c66:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c68:	61fb      	str	r3, [r7, #28]
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	f383 8810 	msr	PRIMASK, r3
}
 8011c74:	46c0      	nop			@ (mov r8, r8)
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2180      	movs	r1, #128	@ 0x80
 8011c82:	04c9      	lsls	r1, r1, #19
 8011c84:	430a      	orrs	r2, r1
 8011c86:	601a      	str	r2, [r3, #0]
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c8c:	69bb      	ldr	r3, [r7, #24]
 8011c8e:	f383 8810 	msr	PRIMASK, r3
}
 8011c92:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011c94:	1dbb      	adds	r3, r7, #6
 8011c96:	881a      	ldrh	r2, [r3, #0]
 8011c98:	68b9      	ldr	r1, [r7, #8]
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	0018      	movs	r0, r3
 8011c9e:	f000 ffd9 	bl	8012c54 <UART_Start_Receive_DMA>
 8011ca2:	0003      	movs	r3, r0
 8011ca4:	e000      	b.n	8011ca8 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8011ca6:	2302      	movs	r3, #2
  }
}
 8011ca8:	0018      	movs	r0, r3
 8011caa:	46bd      	mov	sp, r7
 8011cac:	b008      	add	sp, #32
 8011cae:	bd80      	pop	{r7, pc}
 8011cb0:	40004800 	.word	0x40004800

08011cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011cb4:	b590      	push	{r4, r7, lr}
 8011cb6:	b0ab      	sub	sp, #172	@ 0xac
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	69db      	ldr	r3, [r3, #28]
 8011cc2:	22a4      	movs	r2, #164	@ 0xa4
 8011cc4:	18b9      	adds	r1, r7, r2
 8011cc6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	20a0      	movs	r0, #160	@ 0xa0
 8011cd0:	1839      	adds	r1, r7, r0
 8011cd2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	689b      	ldr	r3, [r3, #8]
 8011cda:	219c      	movs	r1, #156	@ 0x9c
 8011cdc:	1879      	adds	r1, r7, r1
 8011cde:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011ce0:	0011      	movs	r1, r2
 8011ce2:	18bb      	adds	r3, r7, r2
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4a9c      	ldr	r2, [pc, #624]	@ (8011f58 <HAL_UART_IRQHandler+0x2a4>)
 8011ce8:	4013      	ands	r3, r2
 8011cea:	2298      	movs	r2, #152	@ 0x98
 8011cec:	18bc      	adds	r4, r7, r2
 8011cee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8011cf0:	18bb      	adds	r3, r7, r2
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d114      	bne.n	8011d22 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011cf8:	187b      	adds	r3, r7, r1
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	2220      	movs	r2, #32
 8011cfe:	4013      	ands	r3, r2
 8011d00:	d00f      	beq.n	8011d22 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011d02:	183b      	adds	r3, r7, r0
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2220      	movs	r2, #32
 8011d08:	4013      	ands	r3, r2
 8011d0a:	d00a      	beq.n	8011d22 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d100      	bne.n	8011d16 <HAL_UART_IRQHandler+0x62>
 8011d14:	e2aa      	b.n	801226c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	0010      	movs	r0, r2
 8011d1e:	4798      	blx	r3
      }
      return;
 8011d20:	e2a4      	b.n	801226c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011d22:	2398      	movs	r3, #152	@ 0x98
 8011d24:	18fb      	adds	r3, r7, r3
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d100      	bne.n	8011d2e <HAL_UART_IRQHandler+0x7a>
 8011d2c:	e11a      	b.n	8011f64 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011d2e:	239c      	movs	r3, #156	@ 0x9c
 8011d30:	18fb      	adds	r3, r7, r3
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2201      	movs	r2, #1
 8011d36:	4013      	ands	r3, r2
 8011d38:	d106      	bne.n	8011d48 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011d3a:	23a0      	movs	r3, #160	@ 0xa0
 8011d3c:	18fb      	adds	r3, r7, r3
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4a86      	ldr	r2, [pc, #536]	@ (8011f5c <HAL_UART_IRQHandler+0x2a8>)
 8011d42:	4013      	ands	r3, r2
 8011d44:	d100      	bne.n	8011d48 <HAL_UART_IRQHandler+0x94>
 8011d46:	e10d      	b.n	8011f64 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011d48:	23a4      	movs	r3, #164	@ 0xa4
 8011d4a:	18fb      	adds	r3, r7, r3
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	2201      	movs	r2, #1
 8011d50:	4013      	ands	r3, r2
 8011d52:	d012      	beq.n	8011d7a <HAL_UART_IRQHandler+0xc6>
 8011d54:	23a0      	movs	r3, #160	@ 0xa0
 8011d56:	18fb      	adds	r3, r7, r3
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	2380      	movs	r3, #128	@ 0x80
 8011d5c:	005b      	lsls	r3, r3, #1
 8011d5e:	4013      	ands	r3, r2
 8011d60:	d00b      	beq.n	8011d7a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2201      	movs	r2, #1
 8011d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2284      	movs	r2, #132	@ 0x84
 8011d6e:	589b      	ldr	r3, [r3, r2]
 8011d70:	2201      	movs	r2, #1
 8011d72:	431a      	orrs	r2, r3
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2184      	movs	r1, #132	@ 0x84
 8011d78:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011d7a:	23a4      	movs	r3, #164	@ 0xa4
 8011d7c:	18fb      	adds	r3, r7, r3
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2202      	movs	r2, #2
 8011d82:	4013      	ands	r3, r2
 8011d84:	d011      	beq.n	8011daa <HAL_UART_IRQHandler+0xf6>
 8011d86:	239c      	movs	r3, #156	@ 0x9c
 8011d88:	18fb      	adds	r3, r7, r3
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	4013      	ands	r3, r2
 8011d90:	d00b      	beq.n	8011daa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2202      	movs	r2, #2
 8011d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2284      	movs	r2, #132	@ 0x84
 8011d9e:	589b      	ldr	r3, [r3, r2]
 8011da0:	2204      	movs	r2, #4
 8011da2:	431a      	orrs	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2184      	movs	r1, #132	@ 0x84
 8011da8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011daa:	23a4      	movs	r3, #164	@ 0xa4
 8011dac:	18fb      	adds	r3, r7, r3
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	2204      	movs	r2, #4
 8011db2:	4013      	ands	r3, r2
 8011db4:	d011      	beq.n	8011dda <HAL_UART_IRQHandler+0x126>
 8011db6:	239c      	movs	r3, #156	@ 0x9c
 8011db8:	18fb      	adds	r3, r7, r3
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2201      	movs	r2, #1
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	d00b      	beq.n	8011dda <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2204      	movs	r2, #4
 8011dc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2284      	movs	r2, #132	@ 0x84
 8011dce:	589b      	ldr	r3, [r3, r2]
 8011dd0:	2202      	movs	r2, #2
 8011dd2:	431a      	orrs	r2, r3
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2184      	movs	r1, #132	@ 0x84
 8011dd8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011dda:	23a4      	movs	r3, #164	@ 0xa4
 8011ddc:	18fb      	adds	r3, r7, r3
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	2208      	movs	r2, #8
 8011de2:	4013      	ands	r3, r2
 8011de4:	d017      	beq.n	8011e16 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011de6:	23a0      	movs	r3, #160	@ 0xa0
 8011de8:	18fb      	adds	r3, r7, r3
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2220      	movs	r2, #32
 8011dee:	4013      	ands	r3, r2
 8011df0:	d105      	bne.n	8011dfe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8011df2:	239c      	movs	r3, #156	@ 0x9c
 8011df4:	18fb      	adds	r3, r7, r3
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	2201      	movs	r2, #1
 8011dfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011dfc:	d00b      	beq.n	8011e16 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2208      	movs	r2, #8
 8011e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2284      	movs	r2, #132	@ 0x84
 8011e0a:	589b      	ldr	r3, [r3, r2]
 8011e0c:	2208      	movs	r2, #8
 8011e0e:	431a      	orrs	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2184      	movs	r1, #132	@ 0x84
 8011e14:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011e16:	23a4      	movs	r3, #164	@ 0xa4
 8011e18:	18fb      	adds	r3, r7, r3
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	2380      	movs	r3, #128	@ 0x80
 8011e1e:	011b      	lsls	r3, r3, #4
 8011e20:	4013      	ands	r3, r2
 8011e22:	d013      	beq.n	8011e4c <HAL_UART_IRQHandler+0x198>
 8011e24:	23a0      	movs	r3, #160	@ 0xa0
 8011e26:	18fb      	adds	r3, r7, r3
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	2380      	movs	r3, #128	@ 0x80
 8011e2c:	04db      	lsls	r3, r3, #19
 8011e2e:	4013      	ands	r3, r2
 8011e30:	d00c      	beq.n	8011e4c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2280      	movs	r2, #128	@ 0x80
 8011e38:	0112      	lsls	r2, r2, #4
 8011e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2284      	movs	r2, #132	@ 0x84
 8011e40:	589b      	ldr	r3, [r3, r2]
 8011e42:	2220      	movs	r2, #32
 8011e44:	431a      	orrs	r2, r3
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2184      	movs	r1, #132	@ 0x84
 8011e4a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2284      	movs	r2, #132	@ 0x84
 8011e50:	589b      	ldr	r3, [r3, r2]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d100      	bne.n	8011e58 <HAL_UART_IRQHandler+0x1a4>
 8011e56:	e20b      	b.n	8012270 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011e58:	23a4      	movs	r3, #164	@ 0xa4
 8011e5a:	18fb      	adds	r3, r7, r3
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2220      	movs	r2, #32
 8011e60:	4013      	ands	r3, r2
 8011e62:	d00e      	beq.n	8011e82 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011e64:	23a0      	movs	r3, #160	@ 0xa0
 8011e66:	18fb      	adds	r3, r7, r3
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2220      	movs	r2, #32
 8011e6c:	4013      	ands	r3, r2
 8011e6e:	d008      	beq.n	8011e82 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d004      	beq.n	8011e82 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	0010      	movs	r0, r2
 8011e80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2284      	movs	r2, #132	@ 0x84
 8011e86:	589b      	ldr	r3, [r3, r2]
 8011e88:	2194      	movs	r1, #148	@ 0x94
 8011e8a:	187a      	adds	r2, r7, r1
 8011e8c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	689b      	ldr	r3, [r3, #8]
 8011e94:	2240      	movs	r2, #64	@ 0x40
 8011e96:	4013      	ands	r3, r2
 8011e98:	2b40      	cmp	r3, #64	@ 0x40
 8011e9a:	d004      	beq.n	8011ea6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011e9c:	187b      	adds	r3, r7, r1
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2228      	movs	r2, #40	@ 0x28
 8011ea2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011ea4:	d04b      	beq.n	8011f3e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	0018      	movs	r0, r3
 8011eaa:	f000 ff97 	bl	8012ddc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	2240      	movs	r2, #64	@ 0x40
 8011eb6:	4013      	ands	r3, r2
 8011eb8:	2b40      	cmp	r3, #64	@ 0x40
 8011eba:	d139      	bne.n	8011f30 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8011ec0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8011ec2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011ec4:	2090      	movs	r0, #144	@ 0x90
 8011ec6:	183a      	adds	r2, r7, r0
 8011ec8:	6013      	str	r3, [r2, #0]
 8011eca:	2301      	movs	r3, #1
 8011ecc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ece:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011ed0:	f383 8810 	msr	PRIMASK, r3
}
 8011ed4:	46c0      	nop			@ (mov r8, r8)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	689a      	ldr	r2, [r3, #8]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	2140      	movs	r1, #64	@ 0x40
 8011ee2:	438a      	bics	r2, r1
 8011ee4:	609a      	str	r2, [r3, #8]
 8011ee6:	183b      	adds	r3, r7, r0
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011eec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011eee:	f383 8810 	msr	PRIMASK, r3
}
 8011ef2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d012      	beq.n	8011f22 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f00:	4a17      	ldr	r2, [pc, #92]	@ (8011f60 <HAL_UART_IRQHandler+0x2ac>)
 8011f02:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f08:	0018      	movs	r0, r3
 8011f0a:	f7f8 ffef 	bl	800aeec <HAL_DMA_Abort_IT>
 8011f0e:	1e03      	subs	r3, r0, #0
 8011f10:	d020      	beq.n	8011f54 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f1c:	0018      	movs	r0, r3
 8011f1e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f20:	e018      	b.n	8011f54 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2298      	movs	r2, #152	@ 0x98
 8011f26:	589b      	ldr	r3, [r3, r2]
 8011f28:	687a      	ldr	r2, [r7, #4]
 8011f2a:	0010      	movs	r0, r2
 8011f2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f2e:	e011      	b.n	8011f54 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2298      	movs	r2, #152	@ 0x98
 8011f34:	589b      	ldr	r3, [r3, r2]
 8011f36:	687a      	ldr	r2, [r7, #4]
 8011f38:	0010      	movs	r0, r2
 8011f3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f3c:	e00a      	b.n	8011f54 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2298      	movs	r2, #152	@ 0x98
 8011f42:	589b      	ldr	r3, [r3, r2]
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	0010      	movs	r0, r2
 8011f48:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2284      	movs	r2, #132	@ 0x84
 8011f4e:	2100      	movs	r1, #0
 8011f50:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8011f52:	e18d      	b.n	8012270 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f54:	46c0      	nop			@ (mov r8, r8)
    return;
 8011f56:	e18b      	b.n	8012270 <HAL_UART_IRQHandler+0x5bc>
 8011f58:	0000080f 	.word	0x0000080f
 8011f5c:	04000120 	.word	0x04000120
 8011f60:	08013169 	.word	0x08013169

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d000      	beq.n	8011f6e <HAL_UART_IRQHandler+0x2ba>
 8011f6c:	e13d      	b.n	80121ea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011f6e:	23a4      	movs	r3, #164	@ 0xa4
 8011f70:	18fb      	adds	r3, r7, r3
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2210      	movs	r2, #16
 8011f76:	4013      	ands	r3, r2
 8011f78:	d100      	bne.n	8011f7c <HAL_UART_IRQHandler+0x2c8>
 8011f7a:	e136      	b.n	80121ea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011f7c:	23a0      	movs	r3, #160	@ 0xa0
 8011f7e:	18fb      	adds	r3, r7, r3
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2210      	movs	r2, #16
 8011f84:	4013      	ands	r3, r2
 8011f86:	d100      	bne.n	8011f8a <HAL_UART_IRQHandler+0x2d6>
 8011f88:	e12f      	b.n	80121ea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	2210      	movs	r2, #16
 8011f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	689b      	ldr	r3, [r3, #8]
 8011f98:	2240      	movs	r2, #64	@ 0x40
 8011f9a:	4013      	ands	r3, r2
 8011f9c:	2b40      	cmp	r3, #64	@ 0x40
 8011f9e:	d000      	beq.n	8011fa2 <HAL_UART_IRQHandler+0x2ee>
 8011fa0:	e0a2      	b.n	80120e8 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	685a      	ldr	r2, [r3, #4]
 8011faa:	217e      	movs	r1, #126	@ 0x7e
 8011fac:	187b      	adds	r3, r7, r1
 8011fae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8011fb0:	187b      	adds	r3, r7, r1
 8011fb2:	881b      	ldrh	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d100      	bne.n	8011fba <HAL_UART_IRQHandler+0x306>
 8011fb8:	e15c      	b.n	8012274 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2258      	movs	r2, #88	@ 0x58
 8011fbe:	5a9b      	ldrh	r3, [r3, r2]
 8011fc0:	187a      	adds	r2, r7, r1
 8011fc2:	8812      	ldrh	r2, [r2, #0]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d300      	bcc.n	8011fca <HAL_UART_IRQHandler+0x316>
 8011fc8:	e154      	b.n	8012274 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	187a      	adds	r2, r7, r1
 8011fce:	215a      	movs	r1, #90	@ 0x5a
 8011fd0:	8812      	ldrh	r2, [r2, #0]
 8011fd2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2220      	movs	r2, #32
 8011fde:	4013      	ands	r3, r2
 8011fe0:	d16f      	bne.n	80120c2 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8011fe6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8011fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011fea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011fec:	2301      	movs	r3, #1
 8011fee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ff2:	f383 8810 	msr	PRIMASK, r3
}
 8011ff6:	46c0      	nop			@ (mov r8, r8)
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	49a0      	ldr	r1, [pc, #640]	@ (8012284 <HAL_UART_IRQHandler+0x5d0>)
 8012004:	400a      	ands	r2, r1
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801200a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801200c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801200e:	f383 8810 	msr	PRIMASK, r3
}
 8012012:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012014:	f3ef 8310 	mrs	r3, PRIMASK
 8012018:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801201a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801201c:	677b      	str	r3, [r7, #116]	@ 0x74
 801201e:	2301      	movs	r3, #1
 8012020:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012024:	f383 8810 	msr	PRIMASK, r3
}
 8012028:	46c0      	nop			@ (mov r8, r8)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	689a      	ldr	r2, [r3, #8]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	2101      	movs	r1, #1
 8012036:	438a      	bics	r2, r1
 8012038:	609a      	str	r2, [r3, #8]
 801203a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801203c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801203e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012040:	f383 8810 	msr	PRIMASK, r3
}
 8012044:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012046:	f3ef 8310 	mrs	r3, PRIMASK
 801204a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801204c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801204e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012050:	2301      	movs	r3, #1
 8012052:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012056:	f383 8810 	msr	PRIMASK, r3
}
 801205a:	46c0      	nop			@ (mov r8, r8)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	689a      	ldr	r2, [r3, #8]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	2140      	movs	r1, #64	@ 0x40
 8012068:	438a      	bics	r2, r1
 801206a:	609a      	str	r2, [r3, #8]
 801206c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801206e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012070:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012072:	f383 8810 	msr	PRIMASK, r3
}
 8012076:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2280      	movs	r2, #128	@ 0x80
 801207c:	2120      	movs	r1, #32
 801207e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2200      	movs	r2, #0
 8012084:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012086:	f3ef 8310 	mrs	r3, PRIMASK
 801208a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801208c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801208e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012090:	2301      	movs	r3, #1
 8012092:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012096:	f383 8810 	msr	PRIMASK, r3
}
 801209a:	46c0      	nop			@ (mov r8, r8)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2110      	movs	r1, #16
 80120a8:	438a      	bics	r2, r1
 80120aa:	601a      	str	r2, [r3, #0]
 80120ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80120b2:	f383 8810 	msr	PRIMASK, r3
}
 80120b6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120bc:	0018      	movs	r0, r3
 80120be:	f7f8 fed5 	bl	800ae6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2202      	movs	r2, #2
 80120c6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	22ac      	movs	r2, #172	@ 0xac
 80120cc:	589b      	ldr	r3, [r3, r2]
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	2158      	movs	r1, #88	@ 0x58
 80120d2:	5a51      	ldrh	r1, [r2, r1]
 80120d4:	687a      	ldr	r2, [r7, #4]
 80120d6:	205a      	movs	r0, #90	@ 0x5a
 80120d8:	5a12      	ldrh	r2, [r2, r0]
 80120da:	b292      	uxth	r2, r2
 80120dc:	1a8a      	subs	r2, r1, r2
 80120de:	b291      	uxth	r1, r2
 80120e0:	687a      	ldr	r2, [r7, #4]
 80120e2:	0010      	movs	r0, r2
 80120e4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80120e6:	e0c5      	b.n	8012274 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2258      	movs	r2, #88	@ 0x58
 80120ec:	5a99      	ldrh	r1, [r3, r2]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	225a      	movs	r2, #90	@ 0x5a
 80120f2:	5a9b      	ldrh	r3, [r3, r2]
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	208e      	movs	r0, #142	@ 0x8e
 80120f8:	183b      	adds	r3, r7, r0
 80120fa:	1a8a      	subs	r2, r1, r2
 80120fc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	225a      	movs	r2, #90	@ 0x5a
 8012102:	5a9b      	ldrh	r3, [r3, r2]
 8012104:	b29b      	uxth	r3, r3
 8012106:	2b00      	cmp	r3, #0
 8012108:	d100      	bne.n	801210c <HAL_UART_IRQHandler+0x458>
 801210a:	e0b5      	b.n	8012278 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801210c:	183b      	adds	r3, r7, r0
 801210e:	881b      	ldrh	r3, [r3, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d100      	bne.n	8012116 <HAL_UART_IRQHandler+0x462>
 8012114:	e0b0      	b.n	8012278 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012116:	f3ef 8310 	mrs	r3, PRIMASK
 801211a:	60fb      	str	r3, [r7, #12]
  return(result);
 801211c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801211e:	2488      	movs	r4, #136	@ 0x88
 8012120:	193a      	adds	r2, r7, r4
 8012122:	6013      	str	r3, [r2, #0]
 8012124:	2301      	movs	r3, #1
 8012126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	f383 8810 	msr	PRIMASK, r3
}
 801212e:	46c0      	nop			@ (mov r8, r8)
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	4953      	ldr	r1, [pc, #332]	@ (8012288 <HAL_UART_IRQHandler+0x5d4>)
 801213c:	400a      	ands	r2, r1
 801213e:	601a      	str	r2, [r3, #0]
 8012140:	193b      	adds	r3, r7, r4
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	f383 8810 	msr	PRIMASK, r3
}
 801214c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801214e:	f3ef 8310 	mrs	r3, PRIMASK
 8012152:	61bb      	str	r3, [r7, #24]
  return(result);
 8012154:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012156:	2484      	movs	r4, #132	@ 0x84
 8012158:	193a      	adds	r2, r7, r4
 801215a:	6013      	str	r3, [r2, #0]
 801215c:	2301      	movs	r3, #1
 801215e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	f383 8810 	msr	PRIMASK, r3
}
 8012166:	46c0      	nop			@ (mov r8, r8)
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	689a      	ldr	r2, [r3, #8]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	2101      	movs	r1, #1
 8012174:	438a      	bics	r2, r1
 8012176:	609a      	str	r2, [r3, #8]
 8012178:	193b      	adds	r3, r7, r4
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801217e:	6a3b      	ldr	r3, [r7, #32]
 8012180:	f383 8810 	msr	PRIMASK, r3
}
 8012184:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2280      	movs	r2, #128	@ 0x80
 801218a:	2120      	movs	r1, #32
 801218c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2200      	movs	r2, #0
 8012192:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801219a:	f3ef 8310 	mrs	r3, PRIMASK
 801219e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80121a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121a2:	2480      	movs	r4, #128	@ 0x80
 80121a4:	193a      	adds	r2, r7, r4
 80121a6:	6013      	str	r3, [r2, #0]
 80121a8:	2301      	movs	r3, #1
 80121aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ae:	f383 8810 	msr	PRIMASK, r3
}
 80121b2:	46c0      	nop			@ (mov r8, r8)
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	681a      	ldr	r2, [r3, #0]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2110      	movs	r1, #16
 80121c0:	438a      	bics	r2, r1
 80121c2:	601a      	str	r2, [r3, #0]
 80121c4:	193b      	adds	r3, r7, r4
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121cc:	f383 8810 	msr	PRIMASK, r3
}
 80121d0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2202      	movs	r2, #2
 80121d6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	22ac      	movs	r2, #172	@ 0xac
 80121dc:	589b      	ldr	r3, [r3, r2]
 80121de:	183a      	adds	r2, r7, r0
 80121e0:	8811      	ldrh	r1, [r2, #0]
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	0010      	movs	r0, r2
 80121e6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80121e8:	e046      	b.n	8012278 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80121ea:	23a4      	movs	r3, #164	@ 0xa4
 80121ec:	18fb      	adds	r3, r7, r3
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	2380      	movs	r3, #128	@ 0x80
 80121f2:	035b      	lsls	r3, r3, #13
 80121f4:	4013      	ands	r3, r2
 80121f6:	d012      	beq.n	801221e <HAL_UART_IRQHandler+0x56a>
 80121f8:	239c      	movs	r3, #156	@ 0x9c
 80121fa:	18fb      	adds	r3, r7, r3
 80121fc:	681a      	ldr	r2, [r3, #0]
 80121fe:	2380      	movs	r3, #128	@ 0x80
 8012200:	03db      	lsls	r3, r3, #15
 8012202:	4013      	ands	r3, r2
 8012204:	d00b      	beq.n	801221e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2280      	movs	r2, #128	@ 0x80
 801220c:	0352      	lsls	r2, r2, #13
 801220e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	22a8      	movs	r2, #168	@ 0xa8
 8012214:	589b      	ldr	r3, [r3, r2]
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	0010      	movs	r0, r2
 801221a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801221c:	e02f      	b.n	801227e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801221e:	23a4      	movs	r3, #164	@ 0xa4
 8012220:	18fb      	adds	r3, r7, r3
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	2280      	movs	r2, #128	@ 0x80
 8012226:	4013      	ands	r3, r2
 8012228:	d00f      	beq.n	801224a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801222a:	23a0      	movs	r3, #160	@ 0xa0
 801222c:	18fb      	adds	r3, r7, r3
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2280      	movs	r2, #128	@ 0x80
 8012232:	4013      	ands	r3, r2
 8012234:	d009      	beq.n	801224a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801223a:	2b00      	cmp	r3, #0
 801223c:	d01e      	beq.n	801227c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012242:	687a      	ldr	r2, [r7, #4]
 8012244:	0010      	movs	r0, r2
 8012246:	4798      	blx	r3
    }
    return;
 8012248:	e018      	b.n	801227c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801224a:	23a4      	movs	r3, #164	@ 0xa4
 801224c:	18fb      	adds	r3, r7, r3
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	2240      	movs	r2, #64	@ 0x40
 8012252:	4013      	ands	r3, r2
 8012254:	d013      	beq.n	801227e <HAL_UART_IRQHandler+0x5ca>
 8012256:	23a0      	movs	r3, #160	@ 0xa0
 8012258:	18fb      	adds	r3, r7, r3
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2240      	movs	r2, #64	@ 0x40
 801225e:	4013      	ands	r3, r2
 8012260:	d00d      	beq.n	801227e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	0018      	movs	r0, r3
 8012266:	f000 ff98 	bl	801319a <UART_EndTransmit_IT>
    return;
 801226a:	e008      	b.n	801227e <HAL_UART_IRQHandler+0x5ca>
      return;
 801226c:	46c0      	nop			@ (mov r8, r8)
 801226e:	e006      	b.n	801227e <HAL_UART_IRQHandler+0x5ca>
    return;
 8012270:	46c0      	nop			@ (mov r8, r8)
 8012272:	e004      	b.n	801227e <HAL_UART_IRQHandler+0x5ca>
      return;
 8012274:	46c0      	nop			@ (mov r8, r8)
 8012276:	e002      	b.n	801227e <HAL_UART_IRQHandler+0x5ca>
      return;
 8012278:	46c0      	nop			@ (mov r8, r8)
 801227a:	e000      	b.n	801227e <HAL_UART_IRQHandler+0x5ca>
    return;
 801227c:	46c0      	nop			@ (mov r8, r8)
  }

}
 801227e:	46bd      	mov	sp, r7
 8012280:	b02b      	add	sp, #172	@ 0xac
 8012282:	bd90      	pop	{r4, r7, pc}
 8012284:	fffffeff 	.word	0xfffffeff
 8012288:	fffffedf 	.word	0xfffffedf

0801228c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012294:	46c0      	nop			@ (mov r8, r8)
 8012296:	46bd      	mov	sp, r7
 8012298:	b002      	add	sp, #8
 801229a:	bd80      	pop	{r7, pc}

0801229c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80122a4:	46c0      	nop			@ (mov r8, r8)
 80122a6:	46bd      	mov	sp, r7
 80122a8:	b002      	add	sp, #8
 80122aa:	bd80      	pop	{r7, pc}

080122ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b082      	sub	sp, #8
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80122b4:	46c0      	nop			@ (mov r8, r8)
 80122b6:	46bd      	mov	sp, r7
 80122b8:	b002      	add	sp, #8
 80122ba:	bd80      	pop	{r7, pc}

080122bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80122c4:	46c0      	nop			@ (mov r8, r8)
 80122c6:	46bd      	mov	sp, r7
 80122c8:	b002      	add	sp, #8
 80122ca:	bd80      	pop	{r7, pc}

080122cc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80122d4:	46c0      	nop			@ (mov r8, r8)
 80122d6:	46bd      	mov	sp, r7
 80122d8:	b002      	add	sp, #8
 80122da:	bd80      	pop	{r7, pc}

080122dc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80122e4:	46c0      	nop			@ (mov r8, r8)
 80122e6:	46bd      	mov	sp, r7
 80122e8:	b002      	add	sp, #8
 80122ea:	bd80      	pop	{r7, pc}

080122ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	000a      	movs	r2, r1
 80122f6:	1cbb      	adds	r3, r7, #2
 80122f8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80122fa:	46c0      	nop			@ (mov r8, r8)
 80122fc:	46bd      	mov	sp, r7
 80122fe:	b002      	add	sp, #8
 8012300:	bd80      	pop	{r7, pc}
	...

08012304 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2188      	movs	r1, #136	@ 0x88
 8012310:	4a14      	ldr	r2, [pc, #80]	@ (8012364 <UART_InitCallbacksToDefault+0x60>)
 8012312:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	218c      	movs	r1, #140	@ 0x8c
 8012318:	4a13      	ldr	r2, [pc, #76]	@ (8012368 <UART_InitCallbacksToDefault+0x64>)
 801231a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2190      	movs	r1, #144	@ 0x90
 8012320:	4a12      	ldr	r2, [pc, #72]	@ (801236c <UART_InitCallbacksToDefault+0x68>)
 8012322:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2194      	movs	r1, #148	@ 0x94
 8012328:	4a11      	ldr	r2, [pc, #68]	@ (8012370 <UART_InitCallbacksToDefault+0x6c>)
 801232a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2198      	movs	r1, #152	@ 0x98
 8012330:	4a10      	ldr	r2, [pc, #64]	@ (8012374 <UART_InitCallbacksToDefault+0x70>)
 8012332:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	219c      	movs	r1, #156	@ 0x9c
 8012338:	4a0f      	ldr	r2, [pc, #60]	@ (8012378 <UART_InitCallbacksToDefault+0x74>)
 801233a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	21a0      	movs	r1, #160	@ 0xa0
 8012340:	4a0e      	ldr	r2, [pc, #56]	@ (801237c <UART_InitCallbacksToDefault+0x78>)
 8012342:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	21a4      	movs	r1, #164	@ 0xa4
 8012348:	4a0d      	ldr	r2, [pc, #52]	@ (8012380 <UART_InitCallbacksToDefault+0x7c>)
 801234a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	21a8      	movs	r1, #168	@ 0xa8
 8012350:	4a0c      	ldr	r2, [pc, #48]	@ (8012384 <UART_InitCallbacksToDefault+0x80>)
 8012352:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	21ac      	movs	r1, #172	@ 0xac
 8012358:	4a0b      	ldr	r2, [pc, #44]	@ (8012388 <UART_InitCallbacksToDefault+0x84>)
 801235a:	505a      	str	r2, [r3, r1]

}
 801235c:	46c0      	nop			@ (mov r8, r8)
 801235e:	46bd      	mov	sp, r7
 8012360:	b002      	add	sp, #8
 8012362:	bd80      	pop	{r7, pc}
 8012364:	0801229d 	.word	0x0801229d
 8012368:	0801228d 	.word	0x0801228d
 801236c:	080122ad 	.word	0x080122ad
 8012370:	08003861 	.word	0x08003861
 8012374:	0800389d 	.word	0x0800389d
 8012378:	080122bd 	.word	0x080122bd
 801237c:	080122cd 	.word	0x080122cd
 8012380:	080122dd 	.word	0x080122dd
 8012384:	080131f5 	.word	0x080131f5
 8012388:	080122ed 	.word	0x080122ed

0801238c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801238c:	b5b0      	push	{r4, r5, r7, lr}
 801238e:	b08e      	sub	sp, #56	@ 0x38
 8012390:	af00      	add	r7, sp, #0
 8012392:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012394:	231a      	movs	r3, #26
 8012396:	2218      	movs	r2, #24
 8012398:	189b      	adds	r3, r3, r2
 801239a:	19db      	adds	r3, r3, r7
 801239c:	2200      	movs	r2, #0
 801239e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	689a      	ldr	r2, [r3, #8]
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	691b      	ldr	r3, [r3, #16]
 80123a8:	431a      	orrs	r2, r3
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	695b      	ldr	r3, [r3, #20]
 80123ae:	431a      	orrs	r2, r3
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	69db      	ldr	r3, [r3, #28]
 80123b4:	4313      	orrs	r3, r2
 80123b6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80123b8:	69fb      	ldr	r3, [r7, #28]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	4ac3      	ldr	r2, [pc, #780]	@ (80126cc <UART_SetConfig+0x340>)
 80123c0:	4013      	ands	r3, r2
 80123c2:	0019      	movs	r1, r3
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80123ca:	430a      	orrs	r2, r1
 80123cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	4abe      	ldr	r2, [pc, #760]	@ (80126d0 <UART_SetConfig+0x344>)
 80123d6:	4013      	ands	r3, r2
 80123d8:	0019      	movs	r1, r3
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	68da      	ldr	r2, [r3, #12]
 80123de:	69fb      	ldr	r3, [r7, #28]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	430a      	orrs	r2, r1
 80123e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	699b      	ldr	r3, [r3, #24]
 80123ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	4ab8      	ldr	r2, [pc, #736]	@ (80126d4 <UART_SetConfig+0x348>)
 80123f2:	4293      	cmp	r3, r2
 80123f4:	d004      	beq.n	8012400 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	6a1b      	ldr	r3, [r3, #32]
 80123fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80123fc:	4313      	orrs	r3, r2
 80123fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012400:	69fb      	ldr	r3, [r7, #28]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	689b      	ldr	r3, [r3, #8]
 8012406:	4ab4      	ldr	r2, [pc, #720]	@ (80126d8 <UART_SetConfig+0x34c>)
 8012408:	4013      	ands	r3, r2
 801240a:	0019      	movs	r1, r3
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012412:	430a      	orrs	r2, r1
 8012414:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012416:	69fb      	ldr	r3, [r7, #28]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	4ab0      	ldr	r2, [pc, #704]	@ (80126dc <UART_SetConfig+0x350>)
 801241c:	4293      	cmp	r3, r2
 801241e:	d131      	bne.n	8012484 <UART_SetConfig+0xf8>
 8012420:	4baf      	ldr	r3, [pc, #700]	@ (80126e0 <UART_SetConfig+0x354>)
 8012422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012424:	2203      	movs	r2, #3
 8012426:	4013      	ands	r3, r2
 8012428:	2b03      	cmp	r3, #3
 801242a:	d01d      	beq.n	8012468 <UART_SetConfig+0xdc>
 801242c:	d823      	bhi.n	8012476 <UART_SetConfig+0xea>
 801242e:	2b02      	cmp	r3, #2
 8012430:	d00c      	beq.n	801244c <UART_SetConfig+0xc0>
 8012432:	d820      	bhi.n	8012476 <UART_SetConfig+0xea>
 8012434:	2b00      	cmp	r3, #0
 8012436:	d002      	beq.n	801243e <UART_SetConfig+0xb2>
 8012438:	2b01      	cmp	r3, #1
 801243a:	d00e      	beq.n	801245a <UART_SetConfig+0xce>
 801243c:	e01b      	b.n	8012476 <UART_SetConfig+0xea>
 801243e:	231b      	movs	r3, #27
 8012440:	2218      	movs	r2, #24
 8012442:	189b      	adds	r3, r3, r2
 8012444:	19db      	adds	r3, r3, r7
 8012446:	2201      	movs	r2, #1
 8012448:	701a      	strb	r2, [r3, #0]
 801244a:	e0b4      	b.n	80125b6 <UART_SetConfig+0x22a>
 801244c:	231b      	movs	r3, #27
 801244e:	2218      	movs	r2, #24
 8012450:	189b      	adds	r3, r3, r2
 8012452:	19db      	adds	r3, r3, r7
 8012454:	2202      	movs	r2, #2
 8012456:	701a      	strb	r2, [r3, #0]
 8012458:	e0ad      	b.n	80125b6 <UART_SetConfig+0x22a>
 801245a:	231b      	movs	r3, #27
 801245c:	2218      	movs	r2, #24
 801245e:	189b      	adds	r3, r3, r2
 8012460:	19db      	adds	r3, r3, r7
 8012462:	2204      	movs	r2, #4
 8012464:	701a      	strb	r2, [r3, #0]
 8012466:	e0a6      	b.n	80125b6 <UART_SetConfig+0x22a>
 8012468:	231b      	movs	r3, #27
 801246a:	2218      	movs	r2, #24
 801246c:	189b      	adds	r3, r3, r2
 801246e:	19db      	adds	r3, r3, r7
 8012470:	2208      	movs	r2, #8
 8012472:	701a      	strb	r2, [r3, #0]
 8012474:	e09f      	b.n	80125b6 <UART_SetConfig+0x22a>
 8012476:	231b      	movs	r3, #27
 8012478:	2218      	movs	r2, #24
 801247a:	189b      	adds	r3, r3, r2
 801247c:	19db      	adds	r3, r3, r7
 801247e:	2210      	movs	r2, #16
 8012480:	701a      	strb	r2, [r3, #0]
 8012482:	e098      	b.n	80125b6 <UART_SetConfig+0x22a>
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4a96      	ldr	r2, [pc, #600]	@ (80126e4 <UART_SetConfig+0x358>)
 801248a:	4293      	cmp	r3, r2
 801248c:	d131      	bne.n	80124f2 <UART_SetConfig+0x166>
 801248e:	4b94      	ldr	r3, [pc, #592]	@ (80126e0 <UART_SetConfig+0x354>)
 8012490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012492:	220c      	movs	r2, #12
 8012494:	4013      	ands	r3, r2
 8012496:	2b0c      	cmp	r3, #12
 8012498:	d01d      	beq.n	80124d6 <UART_SetConfig+0x14a>
 801249a:	d823      	bhi.n	80124e4 <UART_SetConfig+0x158>
 801249c:	2b08      	cmp	r3, #8
 801249e:	d00c      	beq.n	80124ba <UART_SetConfig+0x12e>
 80124a0:	d820      	bhi.n	80124e4 <UART_SetConfig+0x158>
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d002      	beq.n	80124ac <UART_SetConfig+0x120>
 80124a6:	2b04      	cmp	r3, #4
 80124a8:	d00e      	beq.n	80124c8 <UART_SetConfig+0x13c>
 80124aa:	e01b      	b.n	80124e4 <UART_SetConfig+0x158>
 80124ac:	231b      	movs	r3, #27
 80124ae:	2218      	movs	r2, #24
 80124b0:	189b      	adds	r3, r3, r2
 80124b2:	19db      	adds	r3, r3, r7
 80124b4:	2200      	movs	r2, #0
 80124b6:	701a      	strb	r2, [r3, #0]
 80124b8:	e07d      	b.n	80125b6 <UART_SetConfig+0x22a>
 80124ba:	231b      	movs	r3, #27
 80124bc:	2218      	movs	r2, #24
 80124be:	189b      	adds	r3, r3, r2
 80124c0:	19db      	adds	r3, r3, r7
 80124c2:	2202      	movs	r2, #2
 80124c4:	701a      	strb	r2, [r3, #0]
 80124c6:	e076      	b.n	80125b6 <UART_SetConfig+0x22a>
 80124c8:	231b      	movs	r3, #27
 80124ca:	2218      	movs	r2, #24
 80124cc:	189b      	adds	r3, r3, r2
 80124ce:	19db      	adds	r3, r3, r7
 80124d0:	2204      	movs	r2, #4
 80124d2:	701a      	strb	r2, [r3, #0]
 80124d4:	e06f      	b.n	80125b6 <UART_SetConfig+0x22a>
 80124d6:	231b      	movs	r3, #27
 80124d8:	2218      	movs	r2, #24
 80124da:	189b      	adds	r3, r3, r2
 80124dc:	19db      	adds	r3, r3, r7
 80124de:	2208      	movs	r2, #8
 80124e0:	701a      	strb	r2, [r3, #0]
 80124e2:	e068      	b.n	80125b6 <UART_SetConfig+0x22a>
 80124e4:	231b      	movs	r3, #27
 80124e6:	2218      	movs	r2, #24
 80124e8:	189b      	adds	r3, r3, r2
 80124ea:	19db      	adds	r3, r3, r7
 80124ec:	2210      	movs	r2, #16
 80124ee:	701a      	strb	r2, [r3, #0]
 80124f0:	e061      	b.n	80125b6 <UART_SetConfig+0x22a>
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	4a7c      	ldr	r2, [pc, #496]	@ (80126e8 <UART_SetConfig+0x35c>)
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d106      	bne.n	801250a <UART_SetConfig+0x17e>
 80124fc:	231b      	movs	r3, #27
 80124fe:	2218      	movs	r2, #24
 8012500:	189b      	adds	r3, r3, r2
 8012502:	19db      	adds	r3, r3, r7
 8012504:	2200      	movs	r2, #0
 8012506:	701a      	strb	r2, [r3, #0]
 8012508:	e055      	b.n	80125b6 <UART_SetConfig+0x22a>
 801250a:	69fb      	ldr	r3, [r7, #28]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	4a77      	ldr	r2, [pc, #476]	@ (80126ec <UART_SetConfig+0x360>)
 8012510:	4293      	cmp	r3, r2
 8012512:	d106      	bne.n	8012522 <UART_SetConfig+0x196>
 8012514:	231b      	movs	r3, #27
 8012516:	2218      	movs	r2, #24
 8012518:	189b      	adds	r3, r3, r2
 801251a:	19db      	adds	r3, r3, r7
 801251c:	2200      	movs	r2, #0
 801251e:	701a      	strb	r2, [r3, #0]
 8012520:	e049      	b.n	80125b6 <UART_SetConfig+0x22a>
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	4a6b      	ldr	r2, [pc, #428]	@ (80126d4 <UART_SetConfig+0x348>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d13e      	bne.n	80125aa <UART_SetConfig+0x21e>
 801252c:	4b6c      	ldr	r3, [pc, #432]	@ (80126e0 <UART_SetConfig+0x354>)
 801252e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012530:	23c0      	movs	r3, #192	@ 0xc0
 8012532:	011b      	lsls	r3, r3, #4
 8012534:	4013      	ands	r3, r2
 8012536:	22c0      	movs	r2, #192	@ 0xc0
 8012538:	0112      	lsls	r2, r2, #4
 801253a:	4293      	cmp	r3, r2
 801253c:	d027      	beq.n	801258e <UART_SetConfig+0x202>
 801253e:	22c0      	movs	r2, #192	@ 0xc0
 8012540:	0112      	lsls	r2, r2, #4
 8012542:	4293      	cmp	r3, r2
 8012544:	d82a      	bhi.n	801259c <UART_SetConfig+0x210>
 8012546:	2280      	movs	r2, #128	@ 0x80
 8012548:	0112      	lsls	r2, r2, #4
 801254a:	4293      	cmp	r3, r2
 801254c:	d011      	beq.n	8012572 <UART_SetConfig+0x1e6>
 801254e:	2280      	movs	r2, #128	@ 0x80
 8012550:	0112      	lsls	r2, r2, #4
 8012552:	4293      	cmp	r3, r2
 8012554:	d822      	bhi.n	801259c <UART_SetConfig+0x210>
 8012556:	2b00      	cmp	r3, #0
 8012558:	d004      	beq.n	8012564 <UART_SetConfig+0x1d8>
 801255a:	2280      	movs	r2, #128	@ 0x80
 801255c:	00d2      	lsls	r2, r2, #3
 801255e:	4293      	cmp	r3, r2
 8012560:	d00e      	beq.n	8012580 <UART_SetConfig+0x1f4>
 8012562:	e01b      	b.n	801259c <UART_SetConfig+0x210>
 8012564:	231b      	movs	r3, #27
 8012566:	2218      	movs	r2, #24
 8012568:	189b      	adds	r3, r3, r2
 801256a:	19db      	adds	r3, r3, r7
 801256c:	2200      	movs	r2, #0
 801256e:	701a      	strb	r2, [r3, #0]
 8012570:	e021      	b.n	80125b6 <UART_SetConfig+0x22a>
 8012572:	231b      	movs	r3, #27
 8012574:	2218      	movs	r2, #24
 8012576:	189b      	adds	r3, r3, r2
 8012578:	19db      	adds	r3, r3, r7
 801257a:	2202      	movs	r2, #2
 801257c:	701a      	strb	r2, [r3, #0]
 801257e:	e01a      	b.n	80125b6 <UART_SetConfig+0x22a>
 8012580:	231b      	movs	r3, #27
 8012582:	2218      	movs	r2, #24
 8012584:	189b      	adds	r3, r3, r2
 8012586:	19db      	adds	r3, r3, r7
 8012588:	2204      	movs	r2, #4
 801258a:	701a      	strb	r2, [r3, #0]
 801258c:	e013      	b.n	80125b6 <UART_SetConfig+0x22a>
 801258e:	231b      	movs	r3, #27
 8012590:	2218      	movs	r2, #24
 8012592:	189b      	adds	r3, r3, r2
 8012594:	19db      	adds	r3, r3, r7
 8012596:	2208      	movs	r2, #8
 8012598:	701a      	strb	r2, [r3, #0]
 801259a:	e00c      	b.n	80125b6 <UART_SetConfig+0x22a>
 801259c:	231b      	movs	r3, #27
 801259e:	2218      	movs	r2, #24
 80125a0:	189b      	adds	r3, r3, r2
 80125a2:	19db      	adds	r3, r3, r7
 80125a4:	2210      	movs	r2, #16
 80125a6:	701a      	strb	r2, [r3, #0]
 80125a8:	e005      	b.n	80125b6 <UART_SetConfig+0x22a>
 80125aa:	231b      	movs	r3, #27
 80125ac:	2218      	movs	r2, #24
 80125ae:	189b      	adds	r3, r3, r2
 80125b0:	19db      	adds	r3, r3, r7
 80125b2:	2210      	movs	r2, #16
 80125b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4a46      	ldr	r2, [pc, #280]	@ (80126d4 <UART_SetConfig+0x348>)
 80125bc:	4293      	cmp	r3, r2
 80125be:	d000      	beq.n	80125c2 <UART_SetConfig+0x236>
 80125c0:	e09a      	b.n	80126f8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80125c2:	231b      	movs	r3, #27
 80125c4:	2218      	movs	r2, #24
 80125c6:	189b      	adds	r3, r3, r2
 80125c8:	19db      	adds	r3, r3, r7
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	2b08      	cmp	r3, #8
 80125ce:	d01d      	beq.n	801260c <UART_SetConfig+0x280>
 80125d0:	dc20      	bgt.n	8012614 <UART_SetConfig+0x288>
 80125d2:	2b04      	cmp	r3, #4
 80125d4:	d015      	beq.n	8012602 <UART_SetConfig+0x276>
 80125d6:	dc1d      	bgt.n	8012614 <UART_SetConfig+0x288>
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d002      	beq.n	80125e2 <UART_SetConfig+0x256>
 80125dc:	2b02      	cmp	r3, #2
 80125de:	d005      	beq.n	80125ec <UART_SetConfig+0x260>
 80125e0:	e018      	b.n	8012614 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80125e2:	f7fe f9a5 	bl	8010930 <HAL_RCC_GetPCLK1Freq>
 80125e6:	0003      	movs	r3, r0
 80125e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80125ea:	e01c      	b.n	8012626 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80125ec:	4b3c      	ldr	r3, [pc, #240]	@ (80126e0 <UART_SetConfig+0x354>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	2210      	movs	r2, #16
 80125f2:	4013      	ands	r3, r2
 80125f4:	d002      	beq.n	80125fc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80125f6:	4b3e      	ldr	r3, [pc, #248]	@ (80126f0 <UART_SetConfig+0x364>)
 80125f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80125fa:	e014      	b.n	8012626 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80125fc:	4b3d      	ldr	r3, [pc, #244]	@ (80126f4 <UART_SetConfig+0x368>)
 80125fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012600:	e011      	b.n	8012626 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012602:	f7fe f8e5 	bl	80107d0 <HAL_RCC_GetSysClockFreq>
 8012606:	0003      	movs	r3, r0
 8012608:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801260a:	e00c      	b.n	8012626 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801260c:	2380      	movs	r3, #128	@ 0x80
 801260e:	021b      	lsls	r3, r3, #8
 8012610:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012612:	e008      	b.n	8012626 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8012614:	2300      	movs	r3, #0
 8012616:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012618:	231a      	movs	r3, #26
 801261a:	2218      	movs	r2, #24
 801261c:	189b      	adds	r3, r3, r2
 801261e:	19db      	adds	r3, r3, r7
 8012620:	2201      	movs	r2, #1
 8012622:	701a      	strb	r2, [r3, #0]
        break;
 8012624:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012628:	2b00      	cmp	r3, #0
 801262a:	d100      	bne.n	801262e <UART_SetConfig+0x2a2>
 801262c:	e133      	b.n	8012896 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	685a      	ldr	r2, [r3, #4]
 8012632:	0013      	movs	r3, r2
 8012634:	005b      	lsls	r3, r3, #1
 8012636:	189b      	adds	r3, r3, r2
 8012638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801263a:	429a      	cmp	r2, r3
 801263c:	d305      	bcc.n	801264a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8012644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012646:	429a      	cmp	r2, r3
 8012648:	d906      	bls.n	8012658 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801264a:	231a      	movs	r3, #26
 801264c:	2218      	movs	r2, #24
 801264e:	189b      	adds	r3, r3, r2
 8012650:	19db      	adds	r3, r3, r7
 8012652:	2201      	movs	r2, #1
 8012654:	701a      	strb	r2, [r3, #0]
 8012656:	e11e      	b.n	8012896 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8012658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801265a:	613b      	str	r3, [r7, #16]
 801265c:	2300      	movs	r3, #0
 801265e:	617b      	str	r3, [r7, #20]
 8012660:	6939      	ldr	r1, [r7, #16]
 8012662:	697a      	ldr	r2, [r7, #20]
 8012664:	000b      	movs	r3, r1
 8012666:	0e1b      	lsrs	r3, r3, #24
 8012668:	0010      	movs	r0, r2
 801266a:	0205      	lsls	r5, r0, #8
 801266c:	431d      	orrs	r5, r3
 801266e:	000b      	movs	r3, r1
 8012670:	021c      	lsls	r4, r3, #8
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	085b      	lsrs	r3, r3, #1
 8012678:	60bb      	str	r3, [r7, #8]
 801267a:	2300      	movs	r3, #0
 801267c:	60fb      	str	r3, [r7, #12]
 801267e:	68b8      	ldr	r0, [r7, #8]
 8012680:	68f9      	ldr	r1, [r7, #12]
 8012682:	1900      	adds	r0, r0, r4
 8012684:	4169      	adcs	r1, r5
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	603b      	str	r3, [r7, #0]
 801268c:	2300      	movs	r3, #0
 801268e:	607b      	str	r3, [r7, #4]
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f7ed ff42 	bl	800051c <__aeabi_uldivmod>
 8012698:	0002      	movs	r2, r0
 801269a:	000b      	movs	r3, r1
 801269c:	0013      	movs	r3, r2
 801269e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80126a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126a2:	23c0      	movs	r3, #192	@ 0xc0
 80126a4:	009b      	lsls	r3, r3, #2
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d309      	bcc.n	80126be <UART_SetConfig+0x332>
 80126aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126ac:	2380      	movs	r3, #128	@ 0x80
 80126ae:	035b      	lsls	r3, r3, #13
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d204      	bcs.n	80126be <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126ba:	60da      	str	r2, [r3, #12]
 80126bc:	e0eb      	b.n	8012896 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80126be:	231a      	movs	r3, #26
 80126c0:	2218      	movs	r2, #24
 80126c2:	189b      	adds	r3, r3, r2
 80126c4:	19db      	adds	r3, r3, r7
 80126c6:	2201      	movs	r2, #1
 80126c8:	701a      	strb	r2, [r3, #0]
 80126ca:	e0e4      	b.n	8012896 <UART_SetConfig+0x50a>
 80126cc:	efff69f3 	.word	0xefff69f3
 80126d0:	ffffcfff 	.word	0xffffcfff
 80126d4:	40004800 	.word	0x40004800
 80126d8:	fffff4ff 	.word	0xfffff4ff
 80126dc:	40013800 	.word	0x40013800
 80126e0:	40021000 	.word	0x40021000
 80126e4:	40004400 	.word	0x40004400
 80126e8:	40004c00 	.word	0x40004c00
 80126ec:	40005000 	.word	0x40005000
 80126f0:	003d0900 	.word	0x003d0900
 80126f4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	69da      	ldr	r2, [r3, #28]
 80126fc:	2380      	movs	r3, #128	@ 0x80
 80126fe:	021b      	lsls	r3, r3, #8
 8012700:	429a      	cmp	r2, r3
 8012702:	d000      	beq.n	8012706 <UART_SetConfig+0x37a>
 8012704:	e070      	b.n	80127e8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8012706:	231b      	movs	r3, #27
 8012708:	2218      	movs	r2, #24
 801270a:	189b      	adds	r3, r3, r2
 801270c:	19db      	adds	r3, r3, r7
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	2b08      	cmp	r3, #8
 8012712:	d822      	bhi.n	801275a <UART_SetConfig+0x3ce>
 8012714:	009a      	lsls	r2, r3, #2
 8012716:	4b67      	ldr	r3, [pc, #412]	@ (80128b4 <UART_SetConfig+0x528>)
 8012718:	18d3      	adds	r3, r2, r3
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801271e:	f7fe f907 	bl	8010930 <HAL_RCC_GetPCLK1Freq>
 8012722:	0003      	movs	r3, r0
 8012724:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012726:	e021      	b.n	801276c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012728:	f7fe f918 	bl	801095c <HAL_RCC_GetPCLK2Freq>
 801272c:	0003      	movs	r3, r0
 801272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012730:	e01c      	b.n	801276c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012732:	4b61      	ldr	r3, [pc, #388]	@ (80128b8 <UART_SetConfig+0x52c>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	2210      	movs	r2, #16
 8012738:	4013      	ands	r3, r2
 801273a:	d002      	beq.n	8012742 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801273c:	4b5f      	ldr	r3, [pc, #380]	@ (80128bc <UART_SetConfig+0x530>)
 801273e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012740:	e014      	b.n	801276c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8012742:	4b5f      	ldr	r3, [pc, #380]	@ (80128c0 <UART_SetConfig+0x534>)
 8012744:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012746:	e011      	b.n	801276c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012748:	f7fe f842 	bl	80107d0 <HAL_RCC_GetSysClockFreq>
 801274c:	0003      	movs	r3, r0
 801274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012750:	e00c      	b.n	801276c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012752:	2380      	movs	r3, #128	@ 0x80
 8012754:	021b      	lsls	r3, r3, #8
 8012756:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012758:	e008      	b.n	801276c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801275a:	2300      	movs	r3, #0
 801275c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801275e:	231a      	movs	r3, #26
 8012760:	2218      	movs	r2, #24
 8012762:	189b      	adds	r3, r3, r2
 8012764:	19db      	adds	r3, r3, r7
 8012766:	2201      	movs	r2, #1
 8012768:	701a      	strb	r2, [r3, #0]
        break;
 801276a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801276c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801276e:	2b00      	cmp	r3, #0
 8012770:	d100      	bne.n	8012774 <UART_SetConfig+0x3e8>
 8012772:	e090      	b.n	8012896 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012776:	005a      	lsls	r2, r3, #1
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	085b      	lsrs	r3, r3, #1
 801277e:	18d2      	adds	r2, r2, r3
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	0019      	movs	r1, r3
 8012786:	0010      	movs	r0, r2
 8012788:	f7ed fcda 	bl	8000140 <__udivsi3>
 801278c:	0003      	movs	r3, r0
 801278e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012792:	2b0f      	cmp	r3, #15
 8012794:	d921      	bls.n	80127da <UART_SetConfig+0x44e>
 8012796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012798:	2380      	movs	r3, #128	@ 0x80
 801279a:	025b      	lsls	r3, r3, #9
 801279c:	429a      	cmp	r2, r3
 801279e:	d21c      	bcs.n	80127da <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80127a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127a2:	b29a      	uxth	r2, r3
 80127a4:	200e      	movs	r0, #14
 80127a6:	2418      	movs	r4, #24
 80127a8:	1903      	adds	r3, r0, r4
 80127aa:	19db      	adds	r3, r3, r7
 80127ac:	210f      	movs	r1, #15
 80127ae:	438a      	bics	r2, r1
 80127b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80127b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127b4:	085b      	lsrs	r3, r3, #1
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	2207      	movs	r2, #7
 80127ba:	4013      	ands	r3, r2
 80127bc:	b299      	uxth	r1, r3
 80127be:	1903      	adds	r3, r0, r4
 80127c0:	19db      	adds	r3, r3, r7
 80127c2:	1902      	adds	r2, r0, r4
 80127c4:	19d2      	adds	r2, r2, r7
 80127c6:	8812      	ldrh	r2, [r2, #0]
 80127c8:	430a      	orrs	r2, r1
 80127ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	1902      	adds	r2, r0, r4
 80127d2:	19d2      	adds	r2, r2, r7
 80127d4:	8812      	ldrh	r2, [r2, #0]
 80127d6:	60da      	str	r2, [r3, #12]
 80127d8:	e05d      	b.n	8012896 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80127da:	231a      	movs	r3, #26
 80127dc:	2218      	movs	r2, #24
 80127de:	189b      	adds	r3, r3, r2
 80127e0:	19db      	adds	r3, r3, r7
 80127e2:	2201      	movs	r2, #1
 80127e4:	701a      	strb	r2, [r3, #0]
 80127e6:	e056      	b.n	8012896 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80127e8:	231b      	movs	r3, #27
 80127ea:	2218      	movs	r2, #24
 80127ec:	189b      	adds	r3, r3, r2
 80127ee:	19db      	adds	r3, r3, r7
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	2b08      	cmp	r3, #8
 80127f4:	d822      	bhi.n	801283c <UART_SetConfig+0x4b0>
 80127f6:	009a      	lsls	r2, r3, #2
 80127f8:	4b32      	ldr	r3, [pc, #200]	@ (80128c4 <UART_SetConfig+0x538>)
 80127fa:	18d3      	adds	r3, r2, r3
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012800:	f7fe f896 	bl	8010930 <HAL_RCC_GetPCLK1Freq>
 8012804:	0003      	movs	r3, r0
 8012806:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012808:	e021      	b.n	801284e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801280a:	f7fe f8a7 	bl	801095c <HAL_RCC_GetPCLK2Freq>
 801280e:	0003      	movs	r3, r0
 8012810:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012812:	e01c      	b.n	801284e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012814:	4b28      	ldr	r3, [pc, #160]	@ (80128b8 <UART_SetConfig+0x52c>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2210      	movs	r2, #16
 801281a:	4013      	ands	r3, r2
 801281c:	d002      	beq.n	8012824 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801281e:	4b27      	ldr	r3, [pc, #156]	@ (80128bc <UART_SetConfig+0x530>)
 8012820:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012822:	e014      	b.n	801284e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8012824:	4b26      	ldr	r3, [pc, #152]	@ (80128c0 <UART_SetConfig+0x534>)
 8012826:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012828:	e011      	b.n	801284e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801282a:	f7fd ffd1 	bl	80107d0 <HAL_RCC_GetSysClockFreq>
 801282e:	0003      	movs	r3, r0
 8012830:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012832:	e00c      	b.n	801284e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012834:	2380      	movs	r3, #128	@ 0x80
 8012836:	021b      	lsls	r3, r3, #8
 8012838:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801283a:	e008      	b.n	801284e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801283c:	2300      	movs	r3, #0
 801283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012840:	231a      	movs	r3, #26
 8012842:	2218      	movs	r2, #24
 8012844:	189b      	adds	r3, r3, r2
 8012846:	19db      	adds	r3, r3, r7
 8012848:	2201      	movs	r2, #1
 801284a:	701a      	strb	r2, [r3, #0]
        break;
 801284c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801284e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012850:	2b00      	cmp	r3, #0
 8012852:	d020      	beq.n	8012896 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	085a      	lsrs	r2, r3, #1
 801285a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801285c:	18d2      	adds	r2, r2, r3
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	0019      	movs	r1, r3
 8012864:	0010      	movs	r0, r2
 8012866:	f7ed fc6b 	bl	8000140 <__udivsi3>
 801286a:	0003      	movs	r3, r0
 801286c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012870:	2b0f      	cmp	r3, #15
 8012872:	d90a      	bls.n	801288a <UART_SetConfig+0x4fe>
 8012874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012876:	2380      	movs	r3, #128	@ 0x80
 8012878:	025b      	lsls	r3, r3, #9
 801287a:	429a      	cmp	r2, r3
 801287c:	d205      	bcs.n	801288a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801287e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012880:	b29a      	uxth	r2, r3
 8012882:	69fb      	ldr	r3, [r7, #28]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	60da      	str	r2, [r3, #12]
 8012888:	e005      	b.n	8012896 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801288a:	231a      	movs	r3, #26
 801288c:	2218      	movs	r2, #24
 801288e:	189b      	adds	r3, r3, r2
 8012890:	19db      	adds	r3, r3, r7
 8012892:	2201      	movs	r2, #1
 8012894:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012896:	69fb      	ldr	r3, [r7, #28]
 8012898:	2200      	movs	r2, #0
 801289a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	2200      	movs	r2, #0
 80128a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80128a2:	231a      	movs	r3, #26
 80128a4:	2218      	movs	r2, #24
 80128a6:	189b      	adds	r3, r3, r2
 80128a8:	19db      	adds	r3, r3, r7
 80128aa:	781b      	ldrb	r3, [r3, #0]
}
 80128ac:	0018      	movs	r0, r3
 80128ae:	46bd      	mov	sp, r7
 80128b0:	b00e      	add	sp, #56	@ 0x38
 80128b2:	bdb0      	pop	{r4, r5, r7, pc}
 80128b4:	0801c118 	.word	0x0801c118
 80128b8:	40021000 	.word	0x40021000
 80128bc:	003d0900 	.word	0x003d0900
 80128c0:	00f42400 	.word	0x00f42400
 80128c4:	0801c13c 	.word	0x0801c13c

080128c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128d4:	2201      	movs	r2, #1
 80128d6:	4013      	ands	r3, r2
 80128d8:	d00b      	beq.n	80128f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	4a4a      	ldr	r2, [pc, #296]	@ (8012a0c <UART_AdvFeatureConfig+0x144>)
 80128e2:	4013      	ands	r3, r2
 80128e4:	0019      	movs	r1, r3
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	430a      	orrs	r2, r1
 80128f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128f6:	2202      	movs	r2, #2
 80128f8:	4013      	ands	r3, r2
 80128fa:	d00b      	beq.n	8012914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	4a43      	ldr	r2, [pc, #268]	@ (8012a10 <UART_AdvFeatureConfig+0x148>)
 8012904:	4013      	ands	r3, r2
 8012906:	0019      	movs	r1, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	430a      	orrs	r2, r1
 8012912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012918:	2204      	movs	r2, #4
 801291a:	4013      	ands	r3, r2
 801291c:	d00b      	beq.n	8012936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	4a3b      	ldr	r2, [pc, #236]	@ (8012a14 <UART_AdvFeatureConfig+0x14c>)
 8012926:	4013      	ands	r3, r2
 8012928:	0019      	movs	r1, r3
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	430a      	orrs	r2, r1
 8012934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801293a:	2208      	movs	r2, #8
 801293c:	4013      	ands	r3, r2
 801293e:	d00b      	beq.n	8012958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	4a34      	ldr	r2, [pc, #208]	@ (8012a18 <UART_AdvFeatureConfig+0x150>)
 8012948:	4013      	ands	r3, r2
 801294a:	0019      	movs	r1, r3
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	430a      	orrs	r2, r1
 8012956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801295c:	2210      	movs	r2, #16
 801295e:	4013      	ands	r3, r2
 8012960:	d00b      	beq.n	801297a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	689b      	ldr	r3, [r3, #8]
 8012968:	4a2c      	ldr	r2, [pc, #176]	@ (8012a1c <UART_AdvFeatureConfig+0x154>)
 801296a:	4013      	ands	r3, r2
 801296c:	0019      	movs	r1, r3
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	430a      	orrs	r2, r1
 8012978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801297e:	2220      	movs	r2, #32
 8012980:	4013      	ands	r3, r2
 8012982:	d00b      	beq.n	801299c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	689b      	ldr	r3, [r3, #8]
 801298a:	4a25      	ldr	r2, [pc, #148]	@ (8012a20 <UART_AdvFeatureConfig+0x158>)
 801298c:	4013      	ands	r3, r2
 801298e:	0019      	movs	r1, r3
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	430a      	orrs	r2, r1
 801299a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129a0:	2240      	movs	r2, #64	@ 0x40
 80129a2:	4013      	ands	r3, r2
 80129a4:	d01d      	beq.n	80129e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	685b      	ldr	r3, [r3, #4]
 80129ac:	4a1d      	ldr	r2, [pc, #116]	@ (8012a24 <UART_AdvFeatureConfig+0x15c>)
 80129ae:	4013      	ands	r3, r2
 80129b0:	0019      	movs	r1, r3
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	430a      	orrs	r2, r1
 80129bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80129c2:	2380      	movs	r3, #128	@ 0x80
 80129c4:	035b      	lsls	r3, r3, #13
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d10b      	bne.n	80129e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	4a15      	ldr	r2, [pc, #84]	@ (8012a28 <UART_AdvFeatureConfig+0x160>)
 80129d2:	4013      	ands	r3, r2
 80129d4:	0019      	movs	r1, r3
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	430a      	orrs	r2, r1
 80129e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129e6:	2280      	movs	r2, #128	@ 0x80
 80129e8:	4013      	ands	r3, r2
 80129ea:	d00b      	beq.n	8012a04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	685b      	ldr	r3, [r3, #4]
 80129f2:	4a0e      	ldr	r2, [pc, #56]	@ (8012a2c <UART_AdvFeatureConfig+0x164>)
 80129f4:	4013      	ands	r3, r2
 80129f6:	0019      	movs	r1, r3
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	430a      	orrs	r2, r1
 8012a02:	605a      	str	r2, [r3, #4]
  }
}
 8012a04:	46c0      	nop			@ (mov r8, r8)
 8012a06:	46bd      	mov	sp, r7
 8012a08:	b002      	add	sp, #8
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	fffdffff 	.word	0xfffdffff
 8012a10:	fffeffff 	.word	0xfffeffff
 8012a14:	fffbffff 	.word	0xfffbffff
 8012a18:	ffff7fff 	.word	0xffff7fff
 8012a1c:	ffffefff 	.word	0xffffefff
 8012a20:	ffffdfff 	.word	0xffffdfff
 8012a24:	ffefffff 	.word	0xffefffff
 8012a28:	ff9fffff 	.word	0xff9fffff
 8012a2c:	fff7ffff 	.word	0xfff7ffff

08012a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b092      	sub	sp, #72	@ 0x48
 8012a34:	af02      	add	r7, sp, #8
 8012a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2284      	movs	r2, #132	@ 0x84
 8012a3c:	2100      	movs	r1, #0
 8012a3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012a40:	f7f7 fc30 	bl	800a2a4 <HAL_GetTick>
 8012a44:	0003      	movs	r3, r0
 8012a46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2208      	movs	r2, #8
 8012a50:	4013      	ands	r3, r2
 8012a52:	2b08      	cmp	r3, #8
 8012a54:	d12c      	bne.n	8012ab0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a58:	2280      	movs	r2, #128	@ 0x80
 8012a5a:	0391      	lsls	r1, r2, #14
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	4a46      	ldr	r2, [pc, #280]	@ (8012b78 <UART_CheckIdleState+0x148>)
 8012a60:	9200      	str	r2, [sp, #0]
 8012a62:	2200      	movs	r2, #0
 8012a64:	f000 f88c 	bl	8012b80 <UART_WaitOnFlagUntilTimeout>
 8012a68:	1e03      	subs	r3, r0, #0
 8012a6a:	d021      	beq.n	8012ab0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8012a70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8012a74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012a76:	2301      	movs	r3, #1
 8012a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a7c:	f383 8810 	msr	PRIMASK, r3
}
 8012a80:	46c0      	nop			@ (mov r8, r8)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	681a      	ldr	r2, [r3, #0]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2180      	movs	r1, #128	@ 0x80
 8012a8e:	438a      	bics	r2, r1
 8012a90:	601a      	str	r2, [r3, #0]
 8012a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a98:	f383 8810 	msr	PRIMASK, r3
}
 8012a9c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2220      	movs	r2, #32
 8012aa2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2278      	movs	r2, #120	@ 0x78
 8012aa8:	2100      	movs	r1, #0
 8012aaa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012aac:	2303      	movs	r3, #3
 8012aae:	e05f      	b.n	8012b70 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	2204      	movs	r2, #4
 8012ab8:	4013      	ands	r3, r2
 8012aba:	2b04      	cmp	r3, #4
 8012abc:	d146      	bne.n	8012b4c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ac0:	2280      	movs	r2, #128	@ 0x80
 8012ac2:	03d1      	lsls	r1, r2, #15
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8012b78 <UART_CheckIdleState+0x148>)
 8012ac8:	9200      	str	r2, [sp, #0]
 8012aca:	2200      	movs	r2, #0
 8012acc:	f000 f858 	bl	8012b80 <UART_WaitOnFlagUntilTimeout>
 8012ad0:	1e03      	subs	r3, r0, #0
 8012ad2:	d03b      	beq.n	8012b4c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8012ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ada:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ade:	2301      	movs	r3, #1
 8012ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	f383 8810 	msr	PRIMASK, r3
}
 8012ae8:	46c0      	nop			@ (mov r8, r8)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	681a      	ldr	r2, [r3, #0]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	4921      	ldr	r1, [pc, #132]	@ (8012b7c <UART_CheckIdleState+0x14c>)
 8012af6:	400a      	ands	r2, r1
 8012af8:	601a      	str	r2, [r3, #0]
 8012afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	f383 8810 	msr	PRIMASK, r3
}
 8012b04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b06:	f3ef 8310 	mrs	r3, PRIMASK
 8012b0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8012b0c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012b10:	2301      	movs	r3, #1
 8012b12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	f383 8810 	msr	PRIMASK, r3
}
 8012b1a:	46c0      	nop			@ (mov r8, r8)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	689a      	ldr	r2, [r3, #8]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2101      	movs	r1, #1
 8012b28:	438a      	bics	r2, r1
 8012b2a:	609a      	str	r2, [r3, #8]
 8012b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b30:	6a3b      	ldr	r3, [r7, #32]
 8012b32:	f383 8810 	msr	PRIMASK, r3
}
 8012b36:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2280      	movs	r2, #128	@ 0x80
 8012b3c:	2120      	movs	r1, #32
 8012b3e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	2278      	movs	r2, #120	@ 0x78
 8012b44:	2100      	movs	r1, #0
 8012b46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012b48:	2303      	movs	r3, #3
 8012b4a:	e011      	b.n	8012b70 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2220      	movs	r2, #32
 8012b50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2280      	movs	r2, #128	@ 0x80
 8012b56:	2120      	movs	r1, #32
 8012b58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2200      	movs	r2, #0
 8012b64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2278      	movs	r2, #120	@ 0x78
 8012b6a:	2100      	movs	r1, #0
 8012b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012b6e:	2300      	movs	r3, #0
}
 8012b70:	0018      	movs	r0, r3
 8012b72:	46bd      	mov	sp, r7
 8012b74:	b010      	add	sp, #64	@ 0x40
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	01ffffff 	.word	0x01ffffff
 8012b7c:	fffffedf 	.word	0xfffffedf

08012b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	603b      	str	r3, [r7, #0]
 8012b8c:	1dfb      	adds	r3, r7, #7
 8012b8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b90:	e04b      	b.n	8012c2a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	3301      	adds	r3, #1
 8012b96:	d048      	beq.n	8012c2a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012b98:	f7f7 fb84 	bl	800a2a4 <HAL_GetTick>
 8012b9c:	0002      	movs	r2, r0
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	1ad3      	subs	r3, r2, r3
 8012ba2:	69ba      	ldr	r2, [r7, #24]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	d302      	bcc.n	8012bae <UART_WaitOnFlagUntilTimeout+0x2e>
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d101      	bne.n	8012bb2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8012bae:	2303      	movs	r3, #3
 8012bb0:	e04b      	b.n	8012c4a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2204      	movs	r2, #4
 8012bba:	4013      	ands	r3, r2
 8012bbc:	d035      	beq.n	8012c2a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	69db      	ldr	r3, [r3, #28]
 8012bc4:	2208      	movs	r2, #8
 8012bc6:	4013      	ands	r3, r2
 8012bc8:	2b08      	cmp	r3, #8
 8012bca:	d111      	bne.n	8012bf0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	2208      	movs	r2, #8
 8012bd2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	0018      	movs	r0, r3
 8012bd8:	f000 f900 	bl	8012ddc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	2284      	movs	r2, #132	@ 0x84
 8012be0:	2108      	movs	r1, #8
 8012be2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2278      	movs	r2, #120	@ 0x78
 8012be8:	2100      	movs	r1, #0
 8012bea:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8012bec:	2301      	movs	r3, #1
 8012bee:	e02c      	b.n	8012c4a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	69da      	ldr	r2, [r3, #28]
 8012bf6:	2380      	movs	r3, #128	@ 0x80
 8012bf8:	011b      	lsls	r3, r3, #4
 8012bfa:	401a      	ands	r2, r3
 8012bfc:	2380      	movs	r3, #128	@ 0x80
 8012bfe:	011b      	lsls	r3, r3, #4
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d112      	bne.n	8012c2a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	2280      	movs	r2, #128	@ 0x80
 8012c0a:	0112      	lsls	r2, r2, #4
 8012c0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	0018      	movs	r0, r3
 8012c12:	f000 f8e3 	bl	8012ddc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2284      	movs	r2, #132	@ 0x84
 8012c1a:	2120      	movs	r1, #32
 8012c1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	2278      	movs	r2, #120	@ 0x78
 8012c22:	2100      	movs	r1, #0
 8012c24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8012c26:	2303      	movs	r3, #3
 8012c28:	e00f      	b.n	8012c4a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	69db      	ldr	r3, [r3, #28]
 8012c30:	68ba      	ldr	r2, [r7, #8]
 8012c32:	4013      	ands	r3, r2
 8012c34:	68ba      	ldr	r2, [r7, #8]
 8012c36:	1ad3      	subs	r3, r2, r3
 8012c38:	425a      	negs	r2, r3
 8012c3a:	4153      	adcs	r3, r2
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	001a      	movs	r2, r3
 8012c40:	1dfb      	adds	r3, r7, #7
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d0a4      	beq.n	8012b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	0018      	movs	r0, r3
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	b004      	add	sp, #16
 8012c50:	bd80      	pop	{r7, pc}
	...

08012c54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b090      	sub	sp, #64	@ 0x40
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	60b9      	str	r1, [r7, #8]
 8012c5e:	1dbb      	adds	r3, r7, #6
 8012c60:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	68ba      	ldr	r2, [r7, #8]
 8012c66:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	1dba      	adds	r2, r7, #6
 8012c6c:	2158      	movs	r1, #88	@ 0x58
 8012c6e:	8812      	ldrh	r2, [r2, #0]
 8012c70:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	2284      	movs	r2, #132	@ 0x84
 8012c76:	2100      	movs	r1, #0
 8012c78:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2280      	movs	r2, #128	@ 0x80
 8012c7e:	2122      	movs	r1, #34	@ 0x22
 8012c80:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d028      	beq.n	8012cdc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c8e:	4a3e      	ldr	r2, [pc, #248]	@ (8012d88 <UART_Start_Receive_DMA+0x134>)
 8012c90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c96:	4a3d      	ldr	r2, [pc, #244]	@ (8012d8c <UART_Start_Receive_DMA+0x138>)
 8012c98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c9e:	4a3c      	ldr	r2, [pc, #240]	@ (8012d90 <UART_Start_Receive_DMA+0x13c>)
 8012ca0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	3324      	adds	r3, #36	@ 0x24
 8012cb4:	0019      	movs	r1, r3
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cba:	001a      	movs	r2, r3
 8012cbc:	1dbb      	adds	r3, r7, #6
 8012cbe:	881b      	ldrh	r3, [r3, #0]
 8012cc0:	f7f8 f86e 	bl	800ada0 <HAL_DMA_Start_IT>
 8012cc4:	1e03      	subs	r3, r0, #0
 8012cc6:	d009      	beq.n	8012cdc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2284      	movs	r2, #132	@ 0x84
 8012ccc:	2110      	movs	r1, #16
 8012cce:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2280      	movs	r2, #128	@ 0x80
 8012cd4:	2120      	movs	r1, #32
 8012cd6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8012cd8:	2301      	movs	r3, #1
 8012cda:	e050      	b.n	8012d7e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	691b      	ldr	r3, [r3, #16]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d019      	beq.n	8012d18 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8012ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8012cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012cee:	2301      	movs	r3, #1
 8012cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cf4:	f383 8810 	msr	PRIMASK, r3
}
 8012cf8:	46c0      	nop			@ (mov r8, r8)
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	681a      	ldr	r2, [r3, #0]
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	2180      	movs	r1, #128	@ 0x80
 8012d06:	0049      	lsls	r1, r1, #1
 8012d08:	430a      	orrs	r2, r1
 8012d0a:	601a      	str	r2, [r3, #0]
 8012d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d12:	f383 8810 	msr	PRIMASK, r3
}
 8012d16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d18:	f3ef 8310 	mrs	r3, PRIMASK
 8012d1c:	613b      	str	r3, [r7, #16]
  return(result);
 8012d1e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012d22:	2301      	movs	r3, #1
 8012d24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	f383 8810 	msr	PRIMASK, r3
}
 8012d2c:	46c0      	nop			@ (mov r8, r8)
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	689a      	ldr	r2, [r3, #8]
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	2101      	movs	r1, #1
 8012d3a:	430a      	orrs	r2, r1
 8012d3c:	609a      	str	r2, [r3, #8]
 8012d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	f383 8810 	msr	PRIMASK, r3
}
 8012d48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8012d4e:	61fb      	str	r3, [r7, #28]
  return(result);
 8012d50:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d54:	2301      	movs	r3, #1
 8012d56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d58:	6a3b      	ldr	r3, [r7, #32]
 8012d5a:	f383 8810 	msr	PRIMASK, r3
}
 8012d5e:	46c0      	nop			@ (mov r8, r8)
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	689a      	ldr	r2, [r3, #8]
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2140      	movs	r1, #64	@ 0x40
 8012d6c:	430a      	orrs	r2, r1
 8012d6e:	609a      	str	r2, [r3, #8]
 8012d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d76:	f383 8810 	msr	PRIMASK, r3
}
 8012d7a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8012d7c:	2300      	movs	r3, #0
}
 8012d7e:	0018      	movs	r0, r3
 8012d80:	46bd      	mov	sp, r7
 8012d82:	b010      	add	sp, #64	@ 0x40
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	46c0      	nop			@ (mov r8, r8)
 8012d88:	08012f65 	.word	0x08012f65
 8012d8c:	08013099 	.word	0x08013099
 8012d90:	080130e1 	.word	0x080130e1

08012d94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8012da0:	60bb      	str	r3, [r7, #8]
  return(result);
 8012da2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012da4:	617b      	str	r3, [r7, #20]
 8012da6:	2301      	movs	r3, #1
 8012da8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	f383 8810 	msr	PRIMASK, r3
}
 8012db0:	46c0      	nop			@ (mov r8, r8)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	21c0      	movs	r1, #192	@ 0xc0
 8012dbe:	438a      	bics	r2, r1
 8012dc0:	601a      	str	r2, [r3, #0]
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	f383 8810 	msr	PRIMASK, r3
}
 8012dcc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2220      	movs	r2, #32
 8012dd2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8012dd4:	46c0      	nop			@ (mov r8, r8)
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	b006      	add	sp, #24
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b08e      	sub	sp, #56	@ 0x38
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012de4:	f3ef 8310 	mrs	r3, PRIMASK
 8012de8:	617b      	str	r3, [r7, #20]
  return(result);
 8012dea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8012dee:	2301      	movs	r3, #1
 8012df0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	f383 8810 	msr	PRIMASK, r3
}
 8012df8:	46c0      	nop			@ (mov r8, r8)
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	681a      	ldr	r2, [r3, #0]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4926      	ldr	r1, [pc, #152]	@ (8012ea0 <UART_EndRxTransfer+0xc4>)
 8012e06:	400a      	ands	r2, r1
 8012e08:	601a      	str	r2, [r3, #0]
 8012e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e0e:	69fb      	ldr	r3, [r7, #28]
 8012e10:	f383 8810 	msr	PRIMASK, r3
}
 8012e14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e16:	f3ef 8310 	mrs	r3, PRIMASK
 8012e1a:	623b      	str	r3, [r7, #32]
  return(result);
 8012e1c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e20:	2301      	movs	r3, #1
 8012e22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e26:	f383 8810 	msr	PRIMASK, r3
}
 8012e2a:	46c0      	nop			@ (mov r8, r8)
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	689a      	ldr	r2, [r3, #8]
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	2101      	movs	r1, #1
 8012e38:	438a      	bics	r2, r1
 8012e3a:	609a      	str	r2, [r3, #8]
 8012e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e42:	f383 8810 	msr	PRIMASK, r3
}
 8012e46:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d118      	bne.n	8012e82 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e50:	f3ef 8310 	mrs	r3, PRIMASK
 8012e54:	60bb      	str	r3, [r7, #8]
  return(result);
 8012e56:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f383 8810 	msr	PRIMASK, r3
}
 8012e64:	46c0      	nop			@ (mov r8, r8)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2110      	movs	r1, #16
 8012e72:	438a      	bics	r2, r1
 8012e74:	601a      	str	r2, [r3, #0]
 8012e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	f383 8810 	msr	PRIMASK, r3
}
 8012e80:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2280      	movs	r2, #128	@ 0x80
 8012e86:	2120      	movs	r1, #32
 8012e88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2200      	movs	r2, #0
 8012e94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012e96:	46c0      	nop			@ (mov r8, r8)
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	b00e      	add	sp, #56	@ 0x38
 8012e9c:	bd80      	pop	{r7, pc}
 8012e9e:	46c0      	nop			@ (mov r8, r8)
 8012ea0:	fffffedf 	.word	0xfffffedf

08012ea4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b08c      	sub	sp, #48	@ 0x30
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	2220      	movs	r2, #32
 8012eba:	4013      	ands	r3, r2
 8012ebc:	d135      	bne.n	8012f2a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8012ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec0:	2252      	movs	r2, #82	@ 0x52
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8012eca:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ecc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012ece:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	f383 8810 	msr	PRIMASK, r3
}
 8012eda:	46c0      	nop			@ (mov r8, r8)
 8012edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	689a      	ldr	r2, [r3, #8]
 8012ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	2180      	movs	r1, #128	@ 0x80
 8012ee8:	438a      	bics	r2, r1
 8012eea:	609a      	str	r2, [r3, #8]
 8012eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	f383 8810 	msr	PRIMASK, r3
}
 8012ef6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8012efc:	61bb      	str	r3, [r7, #24]
  return(result);
 8012efe:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f02:	2301      	movs	r3, #1
 8012f04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f06:	69fb      	ldr	r3, [r7, #28]
 8012f08:	f383 8810 	msr	PRIMASK, r3
}
 8012f0c:	46c0      	nop			@ (mov r8, r8)
 8012f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	681a      	ldr	r2, [r3, #0]
 8012f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2140      	movs	r1, #64	@ 0x40
 8012f1a:	430a      	orrs	r2, r1
 8012f1c:	601a      	str	r2, [r3, #0]
 8012f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f22:	6a3b      	ldr	r3, [r7, #32]
 8012f24:	f383 8810 	msr	PRIMASK, r3
}
 8012f28:	e006      	b.n	8012f38 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8012f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f2c:	228c      	movs	r2, #140	@ 0x8c
 8012f2e:	589b      	ldr	r3, [r3, r2]
 8012f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f32:	0010      	movs	r0, r2
 8012f34:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012f36:	46c0      	nop			@ (mov r8, r8)
 8012f38:	46c0      	nop			@ (mov r8, r8)
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	b00c      	add	sp, #48	@ 0x30
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	2288      	movs	r2, #136	@ 0x88
 8012f52:	589b      	ldr	r3, [r3, r2]
 8012f54:	68fa      	ldr	r2, [r7, #12]
 8012f56:	0010      	movs	r0, r2
 8012f58:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012f5a:	46c0      	nop			@ (mov r8, r8)
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	b004      	add	sp, #16
 8012f60:	bd80      	pop	{r7, pc}
	...

08012f64 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b094      	sub	sp, #80	@ 0x50
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f70:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2220      	movs	r2, #32
 8012f7a:	4013      	ands	r3, r2
 8012f7c:	d16f      	bne.n	801305e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8012f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f80:	225a      	movs	r2, #90	@ 0x5a
 8012f82:	2100      	movs	r1, #0
 8012f84:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f86:	f3ef 8310 	mrs	r3, PRIMASK
 8012f8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8012f8c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012f90:	2301      	movs	r3, #1
 8012f92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	f383 8810 	msr	PRIMASK, r3
}
 8012f9a:	46c0      	nop			@ (mov r8, r8)
 8012f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	493b      	ldr	r1, [pc, #236]	@ (8013094 <UART_DMAReceiveCplt+0x130>)
 8012fa8:	400a      	ands	r2, r1
 8012faa:	601a      	str	r2, [r3, #0]
 8012fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012fae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fb0:	6a3b      	ldr	r3, [r7, #32]
 8012fb2:	f383 8810 	msr	PRIMASK, r3
}
 8012fb6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8012fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fc8:	f383 8810 	msr	PRIMASK, r3
}
 8012fcc:	46c0      	nop			@ (mov r8, r8)
 8012fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	689a      	ldr	r2, [r3, #8]
 8012fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2101      	movs	r1, #1
 8012fda:	438a      	bics	r2, r1
 8012fdc:	609a      	str	r2, [r3, #8]
 8012fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fe4:	f383 8810 	msr	PRIMASK, r3
}
 8012fe8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fea:	f3ef 8310 	mrs	r3, PRIMASK
 8012fee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8012ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ff2:	643b      	str	r3, [r7, #64]	@ 0x40
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ffa:	f383 8810 	msr	PRIMASK, r3
}
 8012ffe:	46c0      	nop			@ (mov r8, r8)
 8013000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	689a      	ldr	r2, [r3, #8]
 8013006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	2140      	movs	r1, #64	@ 0x40
 801300c:	438a      	bics	r2, r1
 801300e:	609a      	str	r2, [r3, #8]
 8013010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013012:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013016:	f383 8810 	msr	PRIMASK, r3
}
 801301a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801301c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801301e:	2280      	movs	r2, #128	@ 0x80
 8013020:	2120      	movs	r1, #32
 8013022:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013028:	2b01      	cmp	r3, #1
 801302a:	d118      	bne.n	801305e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801302c:	f3ef 8310 	mrs	r3, PRIMASK
 8013030:	60fb      	str	r3, [r7, #12]
  return(result);
 8013032:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013034:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013036:	2301      	movs	r3, #1
 8013038:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	f383 8810 	msr	PRIMASK, r3
}
 8013040:	46c0      	nop			@ (mov r8, r8)
 8013042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	681a      	ldr	r2, [r3, #0]
 8013048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	2110      	movs	r1, #16
 801304e:	438a      	bics	r2, r1
 8013050:	601a      	str	r2, [r3, #0]
 8013052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013054:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	f383 8810 	msr	PRIMASK, r3
}
 801305c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801305e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013060:	2200      	movs	r2, #0
 8013062:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013068:	2b01      	cmp	r3, #1
 801306a:	d109      	bne.n	8013080 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801306c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801306e:	22ac      	movs	r2, #172	@ 0xac
 8013070:	589b      	ldr	r3, [r3, r2]
 8013072:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013074:	2158      	movs	r1, #88	@ 0x58
 8013076:	5a51      	ldrh	r1, [r2, r1]
 8013078:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801307a:	0010      	movs	r0, r2
 801307c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801307e:	e005      	b.n	801308c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8013080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013082:	2294      	movs	r2, #148	@ 0x94
 8013084:	589b      	ldr	r3, [r3, r2]
 8013086:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013088:	0010      	movs	r0, r2
 801308a:	4798      	blx	r3
}
 801308c:	46c0      	nop			@ (mov r8, r8)
 801308e:	46bd      	mov	sp, r7
 8013090:	b014      	add	sp, #80	@ 0x50
 8013092:	bd80      	pop	{r7, pc}
 8013094:	fffffeff 	.word	0xfffffeff

08013098 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b084      	sub	sp, #16
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2201      	movs	r2, #1
 80130aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80130b0:	2b01      	cmp	r3, #1
 80130b2:	d10b      	bne.n	80130cc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	22ac      	movs	r2, #172	@ 0xac
 80130b8:	589b      	ldr	r3, [r3, r2]
 80130ba:	68fa      	ldr	r2, [r7, #12]
 80130bc:	2158      	movs	r1, #88	@ 0x58
 80130be:	5a52      	ldrh	r2, [r2, r1]
 80130c0:	0852      	lsrs	r2, r2, #1
 80130c2:	b291      	uxth	r1, r2
 80130c4:	68fa      	ldr	r2, [r7, #12]
 80130c6:	0010      	movs	r0, r2
 80130c8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80130ca:	e005      	b.n	80130d8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2290      	movs	r2, #144	@ 0x90
 80130d0:	589b      	ldr	r3, [r3, r2]
 80130d2:	68fa      	ldr	r2, [r7, #12]
 80130d4:	0010      	movs	r0, r2
 80130d6:	4798      	blx	r3
}
 80130d8:	46c0      	nop			@ (mov r8, r8)
 80130da:	46bd      	mov	sp, r7
 80130dc:	b004      	add	sp, #16
 80130de:	bd80      	pop	{r7, pc}

080130e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b086      	sub	sp, #24
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	2280      	movs	r2, #128	@ 0x80
 80130f8:	589b      	ldr	r3, [r3, r2]
 80130fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	689b      	ldr	r3, [r3, #8]
 8013102:	2280      	movs	r2, #128	@ 0x80
 8013104:	4013      	ands	r3, r2
 8013106:	2b80      	cmp	r3, #128	@ 0x80
 8013108:	d10a      	bne.n	8013120 <UART_DMAError+0x40>
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	2b21      	cmp	r3, #33	@ 0x21
 801310e:	d107      	bne.n	8013120 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	2252      	movs	r2, #82	@ 0x52
 8013114:	2100      	movs	r1, #0
 8013116:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	0018      	movs	r0, r3
 801311c:	f7ff fe3a 	bl	8012d94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	689b      	ldr	r3, [r3, #8]
 8013126:	2240      	movs	r2, #64	@ 0x40
 8013128:	4013      	ands	r3, r2
 801312a:	2b40      	cmp	r3, #64	@ 0x40
 801312c:	d10a      	bne.n	8013144 <UART_DMAError+0x64>
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2b22      	cmp	r3, #34	@ 0x22
 8013132:	d107      	bne.n	8013144 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	225a      	movs	r2, #90	@ 0x5a
 8013138:	2100      	movs	r1, #0
 801313a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	0018      	movs	r0, r3
 8013140:	f7ff fe4c 	bl	8012ddc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	2284      	movs	r2, #132	@ 0x84
 8013148:	589b      	ldr	r3, [r3, r2]
 801314a:	2210      	movs	r2, #16
 801314c:	431a      	orrs	r2, r3
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	2184      	movs	r1, #132	@ 0x84
 8013152:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	2298      	movs	r2, #152	@ 0x98
 8013158:	589b      	ldr	r3, [r3, r2]
 801315a:	697a      	ldr	r2, [r7, #20]
 801315c:	0010      	movs	r0, r2
 801315e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013160:	46c0      	nop			@ (mov r8, r8)
 8013162:	46bd      	mov	sp, r7
 8013164:	b006      	add	sp, #24
 8013166:	bd80      	pop	{r7, pc}

08013168 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b084      	sub	sp, #16
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	225a      	movs	r2, #90	@ 0x5a
 801317a:	2100      	movs	r1, #0
 801317c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2252      	movs	r2, #82	@ 0x52
 8013182:	2100      	movs	r1, #0
 8013184:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2298      	movs	r2, #152	@ 0x98
 801318a:	589b      	ldr	r3, [r3, r2]
 801318c:	68fa      	ldr	r2, [r7, #12]
 801318e:	0010      	movs	r0, r2
 8013190:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013192:	46c0      	nop			@ (mov r8, r8)
 8013194:	46bd      	mov	sp, r7
 8013196:	b004      	add	sp, #16
 8013198:	bd80      	pop	{r7, pc}

0801319a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801319a:	b580      	push	{r7, lr}
 801319c:	b086      	sub	sp, #24
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131a2:	f3ef 8310 	mrs	r3, PRIMASK
 80131a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80131a8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80131aa:	617b      	str	r3, [r7, #20]
 80131ac:	2301      	movs	r3, #1
 80131ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	f383 8810 	msr	PRIMASK, r3
}
 80131b6:	46c0      	nop			@ (mov r8, r8)
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	2140      	movs	r1, #64	@ 0x40
 80131c4:	438a      	bics	r2, r1
 80131c6:	601a      	str	r2, [r3, #0]
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	f383 8810 	msr	PRIMASK, r3
}
 80131d2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2220      	movs	r2, #32
 80131d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2200      	movs	r2, #0
 80131de:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	228c      	movs	r2, #140	@ 0x8c
 80131e4:	589b      	ldr	r3, [r3, r2]
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	0010      	movs	r0, r2
 80131ea:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80131ec:	46c0      	nop			@ (mov r8, r8)
 80131ee:	46bd      	mov	sp, r7
 80131f0:	b006      	add	sp, #24
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80131fc:	46c0      	nop			@ (mov r8, r8)
 80131fe:	46bd      	mov	sp, r7
 8013200:	b002      	add	sp, #8
 8013202:	bd80      	pop	{r7, pc}

08013204 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2244      	movs	r2, #68	@ 0x44
 8013210:	2100      	movs	r1, #0
 8013212:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013214:	4b05      	ldr	r3, [pc, #20]	@ (801322c <USB_EnableGlobalInt+0x28>)
 8013216:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	b299      	uxth	r1, r3
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2240      	movs	r2, #64	@ 0x40
 8013220:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013222:	2300      	movs	r3, #0
}
 8013224:	0018      	movs	r0, r3
 8013226:	46bd      	mov	sp, r7
 8013228:	b004      	add	sp, #16
 801322a:	bd80      	pop	{r7, pc}
 801322c:	0000bf80 	.word	0x0000bf80

08013230 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013238:	4b09      	ldr	r3, [pc, #36]	@ (8013260 <USB_DisableGlobalInt+0x30>)
 801323a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2240      	movs	r2, #64	@ 0x40
 8013240:	5a9b      	ldrh	r3, [r3, r2]
 8013242:	b29b      	uxth	r3, r3
 8013244:	68fa      	ldr	r2, [r7, #12]
 8013246:	b292      	uxth	r2, r2
 8013248:	43d2      	mvns	r2, r2
 801324a:	b292      	uxth	r2, r2
 801324c:	4013      	ands	r3, r2
 801324e:	b299      	uxth	r1, r3
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2240      	movs	r2, #64	@ 0x40
 8013254:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013256:	2300      	movs	r3, #0
}
 8013258:	0018      	movs	r0, r3
 801325a:	46bd      	mov	sp, r7
 801325c:	b004      	add	sp, #16
 801325e:	bd80      	pop	{r7, pc}
 8013260:	0000bf80 	.word	0x0000bf80

08013264 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8013264:	b084      	sub	sp, #16
 8013266:	b590      	push	{r4, r7, lr}
 8013268:	b083      	sub	sp, #12
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
 801326e:	2004      	movs	r0, #4
 8013270:	2410      	movs	r4, #16
 8013272:	1900      	adds	r0, r0, r4
 8013274:	2408      	movs	r4, #8
 8013276:	46a4      	mov	ip, r4
 8013278:	44bc      	add	ip, r7
 801327a:	4460      	add	r0, ip
 801327c:	6001      	str	r1, [r0, #0]
 801327e:	6042      	str	r2, [r0, #4]
 8013280:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2240      	movs	r2, #64	@ 0x40
 8013286:	2101      	movs	r1, #1
 8013288:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2240      	movs	r2, #64	@ 0x40
 801328e:	2100      	movs	r1, #0
 8013290:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2244      	movs	r2, #68	@ 0x44
 8013296:	2100      	movs	r1, #0
 8013298:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2250      	movs	r2, #80	@ 0x50
 801329e:	2100      	movs	r1, #0
 80132a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80132a2:	2300      	movs	r3, #0
}
 80132a4:	0018      	movs	r0, r3
 80132a6:	46bd      	mov	sp, r7
 80132a8:	b003      	add	sp, #12
 80132aa:	bc90      	pop	{r4, r7}
 80132ac:	bc08      	pop	{r3}
 80132ae:	b004      	add	sp, #16
 80132b0:	4718      	bx	r3
	...

080132b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b09c      	sub	sp, #112	@ 0x70
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
 80132bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80132be:	236f      	movs	r3, #111	@ 0x6f
 80132c0:	18fb      	adds	r3, r7, r3
 80132c2:	2200      	movs	r2, #0
 80132c4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	18d3      	adds	r3, r2, r3
 80132d0:	881b      	ldrh	r3, [r3, #0]
 80132d2:	b29a      	uxth	r2, r3
 80132d4:	236c      	movs	r3, #108	@ 0x6c
 80132d6:	18fb      	adds	r3, r7, r3
 80132d8:	49a3      	ldr	r1, [pc, #652]	@ (8013568 <USB_ActivateEndpoint+0x2b4>)
 80132da:	400a      	ands	r2, r1
 80132dc:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	78db      	ldrb	r3, [r3, #3]
 80132e2:	2b03      	cmp	r3, #3
 80132e4:	d017      	beq.n	8013316 <USB_ActivateEndpoint+0x62>
 80132e6:	dc28      	bgt.n	801333a <USB_ActivateEndpoint+0x86>
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	d00e      	beq.n	801330a <USB_ActivateEndpoint+0x56>
 80132ec:	dc25      	bgt.n	801333a <USB_ActivateEndpoint+0x86>
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d002      	beq.n	80132f8 <USB_ActivateEndpoint+0x44>
 80132f2:	2b01      	cmp	r3, #1
 80132f4:	d018      	beq.n	8013328 <USB_ActivateEndpoint+0x74>
 80132f6:	e020      	b.n	801333a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80132f8:	226c      	movs	r2, #108	@ 0x6c
 80132fa:	18bb      	adds	r3, r7, r2
 80132fc:	18ba      	adds	r2, r7, r2
 80132fe:	8812      	ldrh	r2, [r2, #0]
 8013300:	2180      	movs	r1, #128	@ 0x80
 8013302:	0089      	lsls	r1, r1, #2
 8013304:	430a      	orrs	r2, r1
 8013306:	801a      	strh	r2, [r3, #0]
      break;
 8013308:	e01c      	b.n	8013344 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801330a:	226c      	movs	r2, #108	@ 0x6c
 801330c:	18bb      	adds	r3, r7, r2
 801330e:	18ba      	adds	r2, r7, r2
 8013310:	8812      	ldrh	r2, [r2, #0]
 8013312:	801a      	strh	r2, [r3, #0]
      break;
 8013314:	e016      	b.n	8013344 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8013316:	226c      	movs	r2, #108	@ 0x6c
 8013318:	18bb      	adds	r3, r7, r2
 801331a:	18ba      	adds	r2, r7, r2
 801331c:	8812      	ldrh	r2, [r2, #0]
 801331e:	21c0      	movs	r1, #192	@ 0xc0
 8013320:	00c9      	lsls	r1, r1, #3
 8013322:	430a      	orrs	r2, r1
 8013324:	801a      	strh	r2, [r3, #0]
      break;
 8013326:	e00d      	b.n	8013344 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8013328:	226c      	movs	r2, #108	@ 0x6c
 801332a:	18bb      	adds	r3, r7, r2
 801332c:	18ba      	adds	r2, r7, r2
 801332e:	8812      	ldrh	r2, [r2, #0]
 8013330:	2180      	movs	r1, #128	@ 0x80
 8013332:	00c9      	lsls	r1, r1, #3
 8013334:	430a      	orrs	r2, r1
 8013336:	801a      	strh	r2, [r3, #0]
      break;
 8013338:	e004      	b.n	8013344 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801333a:	236f      	movs	r3, #111	@ 0x6f
 801333c:	18fb      	adds	r3, r7, r3
 801333e:	2201      	movs	r2, #1
 8013340:	701a      	strb	r2, [r3, #0]
      break;
 8013342:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	18d3      	adds	r3, r2, r3
 801334e:	226c      	movs	r2, #108	@ 0x6c
 8013350:	18ba      	adds	r2, r7, r2
 8013352:	8812      	ldrh	r2, [r2, #0]
 8013354:	4985      	ldr	r1, [pc, #532]	@ (801356c <USB_ActivateEndpoint+0x2b8>)
 8013356:	430a      	orrs	r2, r1
 8013358:	b292      	uxth	r2, r2
 801335a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801335c:	687a      	ldr	r2, [r7, #4]
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	781b      	ldrb	r3, [r3, #0]
 8013362:	009b      	lsls	r3, r3, #2
 8013364:	18d3      	adds	r3, r2, r3
 8013366:	881b      	ldrh	r3, [r3, #0]
 8013368:	b29b      	uxth	r3, r3
 801336a:	b21b      	sxth	r3, r3
 801336c:	4a80      	ldr	r2, [pc, #512]	@ (8013570 <USB_ActivateEndpoint+0x2bc>)
 801336e:	4013      	ands	r3, r2
 8013370:	b21a      	sxth	r2, r3
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	b21b      	sxth	r3, r3
 8013378:	4313      	orrs	r3, r2
 801337a:	b21a      	sxth	r2, r3
 801337c:	2166      	movs	r1, #102	@ 0x66
 801337e:	187b      	adds	r3, r7, r1
 8013380:	801a      	strh	r2, [r3, #0]
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	009b      	lsls	r3, r3, #2
 801338a:	18d3      	adds	r3, r2, r3
 801338c:	187a      	adds	r2, r7, r1
 801338e:	8812      	ldrh	r2, [r2, #0]
 8013390:	4976      	ldr	r1, [pc, #472]	@ (801356c <USB_ActivateEndpoint+0x2b8>)
 8013392:	430a      	orrs	r2, r1
 8013394:	b292      	uxth	r2, r2
 8013396:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	7b1b      	ldrb	r3, [r3, #12]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d000      	beq.n	80133a2 <USB_ActivateEndpoint+0xee>
 80133a0:	e178      	b.n	8013694 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	785b      	ldrb	r3, [r3, #1]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d100      	bne.n	80133ac <USB_ActivateEndpoint+0xf8>
 80133aa:	e07a      	b.n	80134a2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	61bb      	str	r3, [r7, #24]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2250      	movs	r2, #80	@ 0x50
 80133b4:	5a9b      	ldrh	r3, [r3, r2]
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	001a      	movs	r2, r3
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	189b      	adds	r3, r3, r2
 80133be:	61bb      	str	r3, [r7, #24]
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	00da      	lsls	r2, r3, #3
 80133c6:	69bb      	ldr	r3, [r7, #24]
 80133c8:	18d3      	adds	r3, r2, r3
 80133ca:	2280      	movs	r2, #128	@ 0x80
 80133cc:	00d2      	lsls	r2, r2, #3
 80133ce:	4694      	mov	ip, r2
 80133d0:	4463      	add	r3, ip
 80133d2:	617b      	str	r3, [r7, #20]
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	88db      	ldrh	r3, [r3, #6]
 80133d8:	085b      	lsrs	r3, r3, #1
 80133da:	b29b      	uxth	r3, r3
 80133dc:	18db      	adds	r3, r3, r3
 80133de:	b29a      	uxth	r2, r3
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	18d2      	adds	r2, r2, r3
 80133ee:	2112      	movs	r1, #18
 80133f0:	187b      	adds	r3, r7, r1
 80133f2:	8812      	ldrh	r2, [r2, #0]
 80133f4:	801a      	strh	r2, [r3, #0]
 80133f6:	187b      	adds	r3, r7, r1
 80133f8:	881b      	ldrh	r3, [r3, #0]
 80133fa:	2240      	movs	r2, #64	@ 0x40
 80133fc:	4013      	ands	r3, r2
 80133fe:	d016      	beq.n	801342e <USB_ActivateEndpoint+0x17a>
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	18d3      	adds	r3, r2, r3
 801340a:	881b      	ldrh	r3, [r3, #0]
 801340c:	b29a      	uxth	r2, r3
 801340e:	2010      	movs	r0, #16
 8013410:	183b      	adds	r3, r7, r0
 8013412:	4957      	ldr	r1, [pc, #348]	@ (8013570 <USB_ActivateEndpoint+0x2bc>)
 8013414:	400a      	ands	r2, r1
 8013416:	801a      	strh	r2, [r3, #0]
 8013418:	687a      	ldr	r2, [r7, #4]
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	18d3      	adds	r3, r2, r3
 8013422:	183a      	adds	r2, r7, r0
 8013424:	8812      	ldrh	r2, [r2, #0]
 8013426:	4953      	ldr	r1, [pc, #332]	@ (8013574 <USB_ActivateEndpoint+0x2c0>)
 8013428:	430a      	orrs	r2, r1
 801342a:	b292      	uxth	r2, r2
 801342c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	78db      	ldrb	r3, [r3, #3]
 8013432:	2b01      	cmp	r3, #1
 8013434:	d01d      	beq.n	8013472 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013436:	687a      	ldr	r2, [r7, #4]
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	009b      	lsls	r3, r3, #2
 801343e:	18d3      	adds	r3, r2, r3
 8013440:	881b      	ldrh	r3, [r3, #0]
 8013442:	b29a      	uxth	r2, r3
 8013444:	200c      	movs	r0, #12
 8013446:	183b      	adds	r3, r7, r0
 8013448:	494b      	ldr	r1, [pc, #300]	@ (8013578 <USB_ActivateEndpoint+0x2c4>)
 801344a:	400a      	ands	r2, r1
 801344c:	801a      	strh	r2, [r3, #0]
 801344e:	183b      	adds	r3, r7, r0
 8013450:	183a      	adds	r2, r7, r0
 8013452:	8812      	ldrh	r2, [r2, #0]
 8013454:	2120      	movs	r1, #32
 8013456:	404a      	eors	r2, r1
 8013458:	801a      	strh	r2, [r3, #0]
 801345a:	687a      	ldr	r2, [r7, #4]
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	18d3      	adds	r3, r2, r3
 8013464:	183a      	adds	r2, r7, r0
 8013466:	8812      	ldrh	r2, [r2, #0]
 8013468:	4940      	ldr	r1, [pc, #256]	@ (801356c <USB_ActivateEndpoint+0x2b8>)
 801346a:	430a      	orrs	r2, r1
 801346c:	b292      	uxth	r2, r2
 801346e:	801a      	strh	r2, [r3, #0]
 8013470:	e2b4      	b.n	80139dc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013472:	687a      	ldr	r2, [r7, #4]
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	18d3      	adds	r3, r2, r3
 801347c:	881b      	ldrh	r3, [r3, #0]
 801347e:	b29a      	uxth	r2, r3
 8013480:	200e      	movs	r0, #14
 8013482:	183b      	adds	r3, r7, r0
 8013484:	493c      	ldr	r1, [pc, #240]	@ (8013578 <USB_ActivateEndpoint+0x2c4>)
 8013486:	400a      	ands	r2, r1
 8013488:	801a      	strh	r2, [r3, #0]
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	009b      	lsls	r3, r3, #2
 8013492:	18d3      	adds	r3, r2, r3
 8013494:	183a      	adds	r2, r7, r0
 8013496:	8812      	ldrh	r2, [r2, #0]
 8013498:	4934      	ldr	r1, [pc, #208]	@ (801356c <USB_ActivateEndpoint+0x2b8>)
 801349a:	430a      	orrs	r2, r1
 801349c:	b292      	uxth	r2, r2
 801349e:	801a      	strh	r2, [r3, #0]
 80134a0:	e29c      	b.n	80139dc <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2250      	movs	r2, #80	@ 0x50
 80134aa:	5a9b      	ldrh	r3, [r3, r2]
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	001a      	movs	r2, r3
 80134b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b2:	189b      	adds	r3, r3, r2
 80134b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	00da      	lsls	r2, r3, #3
 80134bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134be:	18d3      	adds	r3, r2, r3
 80134c0:	4a2e      	ldr	r2, [pc, #184]	@ (801357c <USB_ActivateEndpoint+0x2c8>)
 80134c2:	4694      	mov	ip, r2
 80134c4:	4463      	add	r3, ip
 80134c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	88db      	ldrh	r3, [r3, #6]
 80134cc:	085b      	lsrs	r3, r3, #1
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	18db      	adds	r3, r3, r3
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2250      	movs	r2, #80	@ 0x50
 80134e0:	5a9b      	ldrh	r3, [r3, r2]
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	001a      	movs	r2, r3
 80134e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e8:	189b      	adds	r3, r3, r2
 80134ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	00da      	lsls	r2, r3, #3
 80134f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134f4:	18d3      	adds	r3, r2, r3
 80134f6:	4a22      	ldr	r2, [pc, #136]	@ (8013580 <USB_ActivateEndpoint+0x2cc>)
 80134f8:	4694      	mov	ip, r2
 80134fa:	4463      	add	r3, ip
 80134fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80134fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013500:	881b      	ldrh	r3, [r3, #0]
 8013502:	b29b      	uxth	r3, r3
 8013504:	059b      	lsls	r3, r3, #22
 8013506:	0d9b      	lsrs	r3, r3, #22
 8013508:	b29a      	uxth	r2, r3
 801350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801350c:	801a      	strh	r2, [r3, #0]
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	691b      	ldr	r3, [r3, #16]
 8013512:	2b3e      	cmp	r3, #62	@ 0x3e
 8013514:	d91a      	bls.n	801354c <USB_ActivateEndpoint+0x298>
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	691b      	ldr	r3, [r3, #16]
 801351a:	095b      	lsrs	r3, r3, #5
 801351c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	691b      	ldr	r3, [r3, #16]
 8013522:	221f      	movs	r2, #31
 8013524:	4013      	ands	r3, r2
 8013526:	d102      	bne.n	801352e <USB_ActivateEndpoint+0x27a>
 8013528:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801352a:	3b01      	subs	r3, #1
 801352c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013530:	881b      	ldrh	r3, [r3, #0]
 8013532:	b29a      	uxth	r2, r3
 8013534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013536:	b29b      	uxth	r3, r3
 8013538:	029b      	lsls	r3, r3, #10
 801353a:	b29b      	uxth	r3, r3
 801353c:	4313      	orrs	r3, r2
 801353e:	b29b      	uxth	r3, r3
 8013540:	4a10      	ldr	r2, [pc, #64]	@ (8013584 <USB_ActivateEndpoint+0x2d0>)
 8013542:	4313      	orrs	r3, r2
 8013544:	b29a      	uxth	r2, r3
 8013546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013548:	801a      	strh	r2, [r3, #0]
 801354a:	e034      	b.n	80135b6 <USB_ActivateEndpoint+0x302>
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	691b      	ldr	r3, [r3, #16]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d119      	bne.n	8013588 <USB_ActivateEndpoint+0x2d4>
 8013554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013556:	881b      	ldrh	r3, [r3, #0]
 8013558:	b29b      	uxth	r3, r3
 801355a:	4a0a      	ldr	r2, [pc, #40]	@ (8013584 <USB_ActivateEndpoint+0x2d0>)
 801355c:	4313      	orrs	r3, r2
 801355e:	b29a      	uxth	r2, r3
 8013560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013562:	801a      	strh	r2, [r3, #0]
 8013564:	e027      	b.n	80135b6 <USB_ActivateEndpoint+0x302>
 8013566:	46c0      	nop			@ (mov r8, r8)
 8013568:	ffff898f 	.word	0xffff898f
 801356c:	ffff8080 	.word	0xffff8080
 8013570:	ffff8f8f 	.word	0xffff8f8f
 8013574:	ffff80c0 	.word	0xffff80c0
 8013578:	ffff8fbf 	.word	0xffff8fbf
 801357c:	00000404 	.word	0x00000404
 8013580:	00000406 	.word	0x00000406
 8013584:	ffff8000 	.word	0xffff8000
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	691b      	ldr	r3, [r3, #16]
 801358c:	085b      	lsrs	r3, r3, #1
 801358e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	691b      	ldr	r3, [r3, #16]
 8013594:	2201      	movs	r2, #1
 8013596:	4013      	ands	r3, r2
 8013598:	d002      	beq.n	80135a0 <USB_ActivateEndpoint+0x2ec>
 801359a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801359c:	3301      	adds	r3, #1
 801359e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80135a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135a2:	881b      	ldrh	r3, [r3, #0]
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	029b      	lsls	r3, r3, #10
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	4313      	orrs	r3, r2
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	009b      	lsls	r3, r3, #2
 80135be:	18d2      	adds	r2, r2, r3
 80135c0:	2122      	movs	r1, #34	@ 0x22
 80135c2:	187b      	adds	r3, r7, r1
 80135c4:	8812      	ldrh	r2, [r2, #0]
 80135c6:	801a      	strh	r2, [r3, #0]
 80135c8:	187b      	adds	r3, r7, r1
 80135ca:	881a      	ldrh	r2, [r3, #0]
 80135cc:	2380      	movs	r3, #128	@ 0x80
 80135ce:	01db      	lsls	r3, r3, #7
 80135d0:	4013      	ands	r3, r2
 80135d2:	d016      	beq.n	8013602 <USB_ActivateEndpoint+0x34e>
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	18d3      	adds	r3, r2, r3
 80135de:	881b      	ldrh	r3, [r3, #0]
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	2020      	movs	r0, #32
 80135e4:	183b      	adds	r3, r7, r0
 80135e6:	49dd      	ldr	r1, [pc, #884]	@ (801395c <USB_ActivateEndpoint+0x6a8>)
 80135e8:	400a      	ands	r2, r1
 80135ea:	801a      	strh	r2, [r3, #0]
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	18d3      	adds	r3, r2, r3
 80135f6:	183a      	adds	r2, r7, r0
 80135f8:	8812      	ldrh	r2, [r2, #0]
 80135fa:	49d9      	ldr	r1, [pc, #868]	@ (8013960 <USB_ActivateEndpoint+0x6ac>)
 80135fc:	430a      	orrs	r2, r1
 80135fe:	b292      	uxth	r2, r2
 8013600:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d125      	bne.n	8013656 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	009b      	lsls	r3, r3, #2
 8013612:	18d3      	adds	r3, r2, r3
 8013614:	881b      	ldrh	r3, [r3, #0]
 8013616:	b29a      	uxth	r2, r3
 8013618:	201c      	movs	r0, #28
 801361a:	183b      	adds	r3, r7, r0
 801361c:	49d1      	ldr	r1, [pc, #836]	@ (8013964 <USB_ActivateEndpoint+0x6b0>)
 801361e:	400a      	ands	r2, r1
 8013620:	801a      	strh	r2, [r3, #0]
 8013622:	183b      	adds	r3, r7, r0
 8013624:	183a      	adds	r2, r7, r0
 8013626:	8812      	ldrh	r2, [r2, #0]
 8013628:	2180      	movs	r1, #128	@ 0x80
 801362a:	0149      	lsls	r1, r1, #5
 801362c:	404a      	eors	r2, r1
 801362e:	801a      	strh	r2, [r3, #0]
 8013630:	183b      	adds	r3, r7, r0
 8013632:	183a      	adds	r2, r7, r0
 8013634:	8812      	ldrh	r2, [r2, #0]
 8013636:	2180      	movs	r1, #128	@ 0x80
 8013638:	0189      	lsls	r1, r1, #6
 801363a:	404a      	eors	r2, r1
 801363c:	801a      	strh	r2, [r3, #0]
 801363e:	687a      	ldr	r2, [r7, #4]
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	009b      	lsls	r3, r3, #2
 8013646:	18d3      	adds	r3, r2, r3
 8013648:	183a      	adds	r2, r7, r0
 801364a:	8812      	ldrh	r2, [r2, #0]
 801364c:	49c6      	ldr	r1, [pc, #792]	@ (8013968 <USB_ActivateEndpoint+0x6b4>)
 801364e:	430a      	orrs	r2, r1
 8013650:	b292      	uxth	r2, r2
 8013652:	801a      	strh	r2, [r3, #0]
 8013654:	e1c2      	b.n	80139dc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	009b      	lsls	r3, r3, #2
 801365e:	18d3      	adds	r3, r2, r3
 8013660:	881b      	ldrh	r3, [r3, #0]
 8013662:	b29a      	uxth	r2, r3
 8013664:	201e      	movs	r0, #30
 8013666:	183b      	adds	r3, r7, r0
 8013668:	49be      	ldr	r1, [pc, #760]	@ (8013964 <USB_ActivateEndpoint+0x6b0>)
 801366a:	400a      	ands	r2, r1
 801366c:	801a      	strh	r2, [r3, #0]
 801366e:	183b      	adds	r3, r7, r0
 8013670:	183a      	adds	r2, r7, r0
 8013672:	8812      	ldrh	r2, [r2, #0]
 8013674:	2180      	movs	r1, #128	@ 0x80
 8013676:	0189      	lsls	r1, r1, #6
 8013678:	404a      	eors	r2, r1
 801367a:	801a      	strh	r2, [r3, #0]
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	009b      	lsls	r3, r3, #2
 8013684:	18d3      	adds	r3, r2, r3
 8013686:	183a      	adds	r2, r7, r0
 8013688:	8812      	ldrh	r2, [r2, #0]
 801368a:	49b7      	ldr	r1, [pc, #732]	@ (8013968 <USB_ActivateEndpoint+0x6b4>)
 801368c:	430a      	orrs	r2, r1
 801368e:	b292      	uxth	r2, r2
 8013690:	801a      	strh	r2, [r3, #0]
 8013692:	e1a3      	b.n	80139dc <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	78db      	ldrb	r3, [r3, #3]
 8013698:	2b02      	cmp	r3, #2
 801369a:	d117      	bne.n	80136cc <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801369c:	687a      	ldr	r2, [r7, #4]
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	18d3      	adds	r3, r2, r3
 80136a6:	881b      	ldrh	r3, [r3, #0]
 80136a8:	b29a      	uxth	r2, r3
 80136aa:	2062      	movs	r0, #98	@ 0x62
 80136ac:	183b      	adds	r3, r7, r0
 80136ae:	49ab      	ldr	r1, [pc, #684]	@ (801395c <USB_ActivateEndpoint+0x6a8>)
 80136b0:	400a      	ands	r2, r1
 80136b2:	801a      	strh	r2, [r3, #0]
 80136b4:	687a      	ldr	r2, [r7, #4]
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	009b      	lsls	r3, r3, #2
 80136bc:	18d3      	adds	r3, r2, r3
 80136be:	183a      	adds	r2, r7, r0
 80136c0:	8812      	ldrh	r2, [r2, #0]
 80136c2:	49aa      	ldr	r1, [pc, #680]	@ (801396c <USB_ActivateEndpoint+0x6b8>)
 80136c4:	430a      	orrs	r2, r1
 80136c6:	b292      	uxth	r2, r2
 80136c8:	801a      	strh	r2, [r3, #0]
 80136ca:	e016      	b.n	80136fa <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	009b      	lsls	r3, r3, #2
 80136d4:	18d3      	adds	r3, r2, r3
 80136d6:	881b      	ldrh	r3, [r3, #0]
 80136d8:	b29a      	uxth	r2, r3
 80136da:	2064      	movs	r0, #100	@ 0x64
 80136dc:	183b      	adds	r3, r7, r0
 80136de:	49a4      	ldr	r1, [pc, #656]	@ (8013970 <USB_ActivateEndpoint+0x6bc>)
 80136e0:	400a      	ands	r2, r1
 80136e2:	801a      	strh	r2, [r3, #0]
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	009b      	lsls	r3, r3, #2
 80136ec:	18d3      	adds	r3, r2, r3
 80136ee:	183a      	adds	r2, r7, r0
 80136f0:	8812      	ldrh	r2, [r2, #0]
 80136f2:	499d      	ldr	r1, [pc, #628]	@ (8013968 <USB_ActivateEndpoint+0x6b4>)
 80136f4:	430a      	orrs	r2, r1
 80136f6:	b292      	uxth	r2, r2
 80136f8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	2250      	movs	r2, #80	@ 0x50
 8013702:	5a9b      	ldrh	r3, [r3, r2]
 8013704:	b29b      	uxth	r3, r3
 8013706:	001a      	movs	r2, r3
 8013708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801370a:	189b      	adds	r3, r3, r2
 801370c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	781b      	ldrb	r3, [r3, #0]
 8013712:	00da      	lsls	r2, r3, #3
 8013714:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013716:	18d3      	adds	r3, r2, r3
 8013718:	2280      	movs	r2, #128	@ 0x80
 801371a:	00d2      	lsls	r2, r2, #3
 801371c:	4694      	mov	ip, r2
 801371e:	4463      	add	r3, ip
 8013720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	891b      	ldrh	r3, [r3, #8]
 8013726:	085b      	lsrs	r3, r3, #1
 8013728:	b29b      	uxth	r3, r3
 801372a:	18db      	adds	r3, r3, r3
 801372c:	b29a      	uxth	r2, r3
 801372e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013730:	801a      	strh	r2, [r3, #0]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	657b      	str	r3, [r7, #84]	@ 0x54
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2250      	movs	r2, #80	@ 0x50
 801373a:	5a9b      	ldrh	r3, [r3, r2]
 801373c:	b29b      	uxth	r3, r3
 801373e:	001a      	movs	r2, r3
 8013740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013742:	189b      	adds	r3, r3, r2
 8013744:	657b      	str	r3, [r7, #84]	@ 0x54
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	00da      	lsls	r2, r3, #3
 801374c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801374e:	18d3      	adds	r3, r2, r3
 8013750:	4a88      	ldr	r2, [pc, #544]	@ (8013974 <USB_ActivateEndpoint+0x6c0>)
 8013752:	4694      	mov	ip, r2
 8013754:	4463      	add	r3, ip
 8013756:	653b      	str	r3, [r7, #80]	@ 0x50
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	895b      	ldrh	r3, [r3, #10]
 801375c:	085b      	lsrs	r3, r3, #1
 801375e:	b29b      	uxth	r3, r3
 8013760:	18db      	adds	r3, r3, r3
 8013762:	b29a      	uxth	r2, r3
 8013764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013766:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	785b      	ldrb	r3, [r3, #1]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d000      	beq.n	8013772 <USB_ActivateEndpoint+0x4be>
 8013770:	e087      	b.n	8013882 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013772:	687a      	ldr	r2, [r7, #4]
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	18d2      	adds	r2, r2, r3
 801377c:	2140      	movs	r1, #64	@ 0x40
 801377e:	187b      	adds	r3, r7, r1
 8013780:	8812      	ldrh	r2, [r2, #0]
 8013782:	801a      	strh	r2, [r3, #0]
 8013784:	187b      	adds	r3, r7, r1
 8013786:	881a      	ldrh	r2, [r3, #0]
 8013788:	2380      	movs	r3, #128	@ 0x80
 801378a:	01db      	lsls	r3, r3, #7
 801378c:	4013      	ands	r3, r2
 801378e:	d016      	beq.n	80137be <USB_ActivateEndpoint+0x50a>
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	18d3      	adds	r3, r2, r3
 801379a:	881b      	ldrh	r3, [r3, #0]
 801379c:	b29a      	uxth	r2, r3
 801379e:	203e      	movs	r0, #62	@ 0x3e
 80137a0:	183b      	adds	r3, r7, r0
 80137a2:	496e      	ldr	r1, [pc, #440]	@ (801395c <USB_ActivateEndpoint+0x6a8>)
 80137a4:	400a      	ands	r2, r1
 80137a6:	801a      	strh	r2, [r3, #0]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	18d3      	adds	r3, r2, r3
 80137b2:	183a      	adds	r2, r7, r0
 80137b4:	8812      	ldrh	r2, [r2, #0]
 80137b6:	496a      	ldr	r1, [pc, #424]	@ (8013960 <USB_ActivateEndpoint+0x6ac>)
 80137b8:	430a      	orrs	r2, r1
 80137ba:	b292      	uxth	r2, r2
 80137bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	18d2      	adds	r2, r2, r3
 80137c8:	213c      	movs	r1, #60	@ 0x3c
 80137ca:	187b      	adds	r3, r7, r1
 80137cc:	8812      	ldrh	r2, [r2, #0]
 80137ce:	801a      	strh	r2, [r3, #0]
 80137d0:	187b      	adds	r3, r7, r1
 80137d2:	881b      	ldrh	r3, [r3, #0]
 80137d4:	2240      	movs	r2, #64	@ 0x40
 80137d6:	4013      	ands	r3, r2
 80137d8:	d016      	beq.n	8013808 <USB_ActivateEndpoint+0x554>
 80137da:	687a      	ldr	r2, [r7, #4]
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	009b      	lsls	r3, r3, #2
 80137e2:	18d3      	adds	r3, r2, r3
 80137e4:	881b      	ldrh	r3, [r3, #0]
 80137e6:	b29a      	uxth	r2, r3
 80137e8:	203a      	movs	r0, #58	@ 0x3a
 80137ea:	183b      	adds	r3, r7, r0
 80137ec:	495b      	ldr	r1, [pc, #364]	@ (801395c <USB_ActivateEndpoint+0x6a8>)
 80137ee:	400a      	ands	r2, r1
 80137f0:	801a      	strh	r2, [r3, #0]
 80137f2:	687a      	ldr	r2, [r7, #4]
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	781b      	ldrb	r3, [r3, #0]
 80137f8:	009b      	lsls	r3, r3, #2
 80137fa:	18d3      	adds	r3, r2, r3
 80137fc:	183a      	adds	r2, r7, r0
 80137fe:	8812      	ldrh	r2, [r2, #0]
 8013800:	495d      	ldr	r1, [pc, #372]	@ (8013978 <USB_ActivateEndpoint+0x6c4>)
 8013802:	430a      	orrs	r2, r1
 8013804:	b292      	uxth	r2, r2
 8013806:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013808:	687a      	ldr	r2, [r7, #4]
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	009b      	lsls	r3, r3, #2
 8013810:	18d3      	adds	r3, r2, r3
 8013812:	881b      	ldrh	r3, [r3, #0]
 8013814:	b29a      	uxth	r2, r3
 8013816:	2038      	movs	r0, #56	@ 0x38
 8013818:	183b      	adds	r3, r7, r0
 801381a:	4952      	ldr	r1, [pc, #328]	@ (8013964 <USB_ActivateEndpoint+0x6b0>)
 801381c:	400a      	ands	r2, r1
 801381e:	801a      	strh	r2, [r3, #0]
 8013820:	183b      	adds	r3, r7, r0
 8013822:	183a      	adds	r2, r7, r0
 8013824:	8812      	ldrh	r2, [r2, #0]
 8013826:	2180      	movs	r1, #128	@ 0x80
 8013828:	0149      	lsls	r1, r1, #5
 801382a:	404a      	eors	r2, r1
 801382c:	801a      	strh	r2, [r3, #0]
 801382e:	183b      	adds	r3, r7, r0
 8013830:	183a      	adds	r2, r7, r0
 8013832:	8812      	ldrh	r2, [r2, #0]
 8013834:	2180      	movs	r1, #128	@ 0x80
 8013836:	0189      	lsls	r1, r1, #6
 8013838:	404a      	eors	r2, r1
 801383a:	801a      	strh	r2, [r3, #0]
 801383c:	687a      	ldr	r2, [r7, #4]
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	009b      	lsls	r3, r3, #2
 8013844:	18d3      	adds	r3, r2, r3
 8013846:	183a      	adds	r2, r7, r0
 8013848:	8812      	ldrh	r2, [r2, #0]
 801384a:	4947      	ldr	r1, [pc, #284]	@ (8013968 <USB_ActivateEndpoint+0x6b4>)
 801384c:	430a      	orrs	r2, r1
 801384e:	b292      	uxth	r2, r2
 8013850:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013852:	687a      	ldr	r2, [r7, #4]
 8013854:	683b      	ldr	r3, [r7, #0]
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	18d3      	adds	r3, r2, r3
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	b29a      	uxth	r2, r3
 8013860:	2036      	movs	r0, #54	@ 0x36
 8013862:	183b      	adds	r3, r7, r0
 8013864:	4945      	ldr	r1, [pc, #276]	@ (801397c <USB_ActivateEndpoint+0x6c8>)
 8013866:	400a      	ands	r2, r1
 8013868:	801a      	strh	r2, [r3, #0]
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	18d3      	adds	r3, r2, r3
 8013874:	183a      	adds	r2, r7, r0
 8013876:	8812      	ldrh	r2, [r2, #0]
 8013878:	493b      	ldr	r1, [pc, #236]	@ (8013968 <USB_ActivateEndpoint+0x6b4>)
 801387a:	430a      	orrs	r2, r1
 801387c:	b292      	uxth	r2, r2
 801387e:	801a      	strh	r2, [r3, #0]
 8013880:	e0ac      	b.n	80139dc <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	009b      	lsls	r3, r3, #2
 801388a:	18d2      	adds	r2, r2, r3
 801388c:	214e      	movs	r1, #78	@ 0x4e
 801388e:	187b      	adds	r3, r7, r1
 8013890:	8812      	ldrh	r2, [r2, #0]
 8013892:	801a      	strh	r2, [r3, #0]
 8013894:	187b      	adds	r3, r7, r1
 8013896:	881a      	ldrh	r2, [r3, #0]
 8013898:	2380      	movs	r3, #128	@ 0x80
 801389a:	01db      	lsls	r3, r3, #7
 801389c:	4013      	ands	r3, r2
 801389e:	d016      	beq.n	80138ce <USB_ActivateEndpoint+0x61a>
 80138a0:	687a      	ldr	r2, [r7, #4]
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	009b      	lsls	r3, r3, #2
 80138a8:	18d3      	adds	r3, r2, r3
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	b29a      	uxth	r2, r3
 80138ae:	204c      	movs	r0, #76	@ 0x4c
 80138b0:	183b      	adds	r3, r7, r0
 80138b2:	492a      	ldr	r1, [pc, #168]	@ (801395c <USB_ActivateEndpoint+0x6a8>)
 80138b4:	400a      	ands	r2, r1
 80138b6:	801a      	strh	r2, [r3, #0]
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	009b      	lsls	r3, r3, #2
 80138c0:	18d3      	adds	r3, r2, r3
 80138c2:	183a      	adds	r2, r7, r0
 80138c4:	8812      	ldrh	r2, [r2, #0]
 80138c6:	4926      	ldr	r1, [pc, #152]	@ (8013960 <USB_ActivateEndpoint+0x6ac>)
 80138c8:	430a      	orrs	r2, r1
 80138ca:	b292      	uxth	r2, r2
 80138cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	009b      	lsls	r3, r3, #2
 80138d6:	18d2      	adds	r2, r2, r3
 80138d8:	214a      	movs	r1, #74	@ 0x4a
 80138da:	187b      	adds	r3, r7, r1
 80138dc:	8812      	ldrh	r2, [r2, #0]
 80138de:	801a      	strh	r2, [r3, #0]
 80138e0:	187b      	adds	r3, r7, r1
 80138e2:	881b      	ldrh	r3, [r3, #0]
 80138e4:	2240      	movs	r2, #64	@ 0x40
 80138e6:	4013      	ands	r3, r2
 80138e8:	d016      	beq.n	8013918 <USB_ActivateEndpoint+0x664>
 80138ea:	687a      	ldr	r2, [r7, #4]
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	009b      	lsls	r3, r3, #2
 80138f2:	18d3      	adds	r3, r2, r3
 80138f4:	881b      	ldrh	r3, [r3, #0]
 80138f6:	b29a      	uxth	r2, r3
 80138f8:	2048      	movs	r0, #72	@ 0x48
 80138fa:	183b      	adds	r3, r7, r0
 80138fc:	4917      	ldr	r1, [pc, #92]	@ (801395c <USB_ActivateEndpoint+0x6a8>)
 80138fe:	400a      	ands	r2, r1
 8013900:	801a      	strh	r2, [r3, #0]
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	009b      	lsls	r3, r3, #2
 801390a:	18d3      	adds	r3, r2, r3
 801390c:	183a      	adds	r2, r7, r0
 801390e:	8812      	ldrh	r2, [r2, #0]
 8013910:	4919      	ldr	r1, [pc, #100]	@ (8013978 <USB_ActivateEndpoint+0x6c4>)
 8013912:	430a      	orrs	r2, r1
 8013914:	b292      	uxth	r2, r2
 8013916:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	78db      	ldrb	r3, [r3, #3]
 801391c:	2b01      	cmp	r3, #1
 801391e:	d02f      	beq.n	8013980 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013920:	687a      	ldr	r2, [r7, #4]
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	18d3      	adds	r3, r2, r3
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	b29a      	uxth	r2, r3
 801392e:	2044      	movs	r0, #68	@ 0x44
 8013930:	183b      	adds	r3, r7, r0
 8013932:	4912      	ldr	r1, [pc, #72]	@ (801397c <USB_ActivateEndpoint+0x6c8>)
 8013934:	400a      	ands	r2, r1
 8013936:	801a      	strh	r2, [r3, #0]
 8013938:	183b      	adds	r3, r7, r0
 801393a:	183a      	adds	r2, r7, r0
 801393c:	8812      	ldrh	r2, [r2, #0]
 801393e:	2120      	movs	r1, #32
 8013940:	404a      	eors	r2, r1
 8013942:	801a      	strh	r2, [r3, #0]
 8013944:	687a      	ldr	r2, [r7, #4]
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	18d3      	adds	r3, r2, r3
 801394e:	183a      	adds	r2, r7, r0
 8013950:	8812      	ldrh	r2, [r2, #0]
 8013952:	4905      	ldr	r1, [pc, #20]	@ (8013968 <USB_ActivateEndpoint+0x6b4>)
 8013954:	430a      	orrs	r2, r1
 8013956:	b292      	uxth	r2, r2
 8013958:	801a      	strh	r2, [r3, #0]
 801395a:	e028      	b.n	80139ae <USB_ActivateEndpoint+0x6fa>
 801395c:	ffff8f8f 	.word	0xffff8f8f
 8013960:	ffffc080 	.word	0xffffc080
 8013964:	ffffbf8f 	.word	0xffffbf8f
 8013968:	ffff8080 	.word	0xffff8080
 801396c:	ffff8180 	.word	0xffff8180
 8013970:	ffff8e8f 	.word	0xffff8e8f
 8013974:	00000404 	.word	0x00000404
 8013978:	ffff80c0 	.word	0xffff80c0
 801397c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013980:	687a      	ldr	r2, [r7, #4]
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	18d3      	adds	r3, r2, r3
 801398a:	881b      	ldrh	r3, [r3, #0]
 801398c:	b29a      	uxth	r2, r3
 801398e:	2046      	movs	r0, #70	@ 0x46
 8013990:	183b      	adds	r3, r7, r0
 8013992:	4916      	ldr	r1, [pc, #88]	@ (80139ec <USB_ActivateEndpoint+0x738>)
 8013994:	400a      	ands	r2, r1
 8013996:	801a      	strh	r2, [r3, #0]
 8013998:	687a      	ldr	r2, [r7, #4]
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	009b      	lsls	r3, r3, #2
 80139a0:	18d3      	adds	r3, r2, r3
 80139a2:	183a      	adds	r2, r7, r0
 80139a4:	8812      	ldrh	r2, [r2, #0]
 80139a6:	4912      	ldr	r1, [pc, #72]	@ (80139f0 <USB_ActivateEndpoint+0x73c>)
 80139a8:	430a      	orrs	r2, r1
 80139aa:	b292      	uxth	r2, r2
 80139ac:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	18d3      	adds	r3, r2, r3
 80139b8:	881b      	ldrh	r3, [r3, #0]
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	2042      	movs	r0, #66	@ 0x42
 80139be:	183b      	adds	r3, r7, r0
 80139c0:	490c      	ldr	r1, [pc, #48]	@ (80139f4 <USB_ActivateEndpoint+0x740>)
 80139c2:	400a      	ands	r2, r1
 80139c4:	801a      	strh	r2, [r3, #0]
 80139c6:	687a      	ldr	r2, [r7, #4]
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	009b      	lsls	r3, r3, #2
 80139ce:	18d3      	adds	r3, r2, r3
 80139d0:	183a      	adds	r2, r7, r0
 80139d2:	8812      	ldrh	r2, [r2, #0]
 80139d4:	4906      	ldr	r1, [pc, #24]	@ (80139f0 <USB_ActivateEndpoint+0x73c>)
 80139d6:	430a      	orrs	r2, r1
 80139d8:	b292      	uxth	r2, r2
 80139da:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80139dc:	236f      	movs	r3, #111	@ 0x6f
 80139de:	18fb      	adds	r3, r7, r3
 80139e0:	781b      	ldrb	r3, [r3, #0]
}
 80139e2:	0018      	movs	r0, r3
 80139e4:	46bd      	mov	sp, r7
 80139e6:	b01c      	add	sp, #112	@ 0x70
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	46c0      	nop			@ (mov r8, r8)
 80139ec:	ffff8fbf 	.word	0xffff8fbf
 80139f0:	ffff8080 	.word	0xffff8080
 80139f4:	ffffbf8f 	.word	0xffffbf8f

080139f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b08c      	sub	sp, #48	@ 0x30
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	7b1b      	ldrb	r3, [r3, #12]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d000      	beq.n	8013a0c <USB_DeactivateEndpoint+0x14>
 8013a0a:	e07e      	b.n	8013b0a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	785b      	ldrb	r3, [r3, #1]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d03c      	beq.n	8013a8e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	781b      	ldrb	r3, [r3, #0]
 8013a1a:	009b      	lsls	r3, r3, #2
 8013a1c:	18d2      	adds	r2, r2, r3
 8013a1e:	210c      	movs	r1, #12
 8013a20:	187b      	adds	r3, r7, r1
 8013a22:	8812      	ldrh	r2, [r2, #0]
 8013a24:	801a      	strh	r2, [r3, #0]
 8013a26:	187b      	adds	r3, r7, r1
 8013a28:	881b      	ldrh	r3, [r3, #0]
 8013a2a:	2240      	movs	r2, #64	@ 0x40
 8013a2c:	4013      	ands	r3, r2
 8013a2e:	d016      	beq.n	8013a5e <USB_DeactivateEndpoint+0x66>
 8013a30:	687a      	ldr	r2, [r7, #4]
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	009b      	lsls	r3, r3, #2
 8013a38:	18d3      	adds	r3, r2, r3
 8013a3a:	881b      	ldrh	r3, [r3, #0]
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	200a      	movs	r0, #10
 8013a40:	183b      	adds	r3, r7, r0
 8013a42:	49c7      	ldr	r1, [pc, #796]	@ (8013d60 <USB_DeactivateEndpoint+0x368>)
 8013a44:	400a      	ands	r2, r1
 8013a46:	801a      	strh	r2, [r3, #0]
 8013a48:	687a      	ldr	r2, [r7, #4]
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	18d3      	adds	r3, r2, r3
 8013a52:	183a      	adds	r2, r7, r0
 8013a54:	8812      	ldrh	r2, [r2, #0]
 8013a56:	49c3      	ldr	r1, [pc, #780]	@ (8013d64 <USB_DeactivateEndpoint+0x36c>)
 8013a58:	430a      	orrs	r2, r1
 8013a5a:	b292      	uxth	r2, r2
 8013a5c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	781b      	ldrb	r3, [r3, #0]
 8013a64:	009b      	lsls	r3, r3, #2
 8013a66:	18d3      	adds	r3, r2, r3
 8013a68:	881b      	ldrh	r3, [r3, #0]
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	2008      	movs	r0, #8
 8013a6e:	183b      	adds	r3, r7, r0
 8013a70:	49bd      	ldr	r1, [pc, #756]	@ (8013d68 <USB_DeactivateEndpoint+0x370>)
 8013a72:	400a      	ands	r2, r1
 8013a74:	801a      	strh	r2, [r3, #0]
 8013a76:	687a      	ldr	r2, [r7, #4]
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	009b      	lsls	r3, r3, #2
 8013a7e:	18d3      	adds	r3, r2, r3
 8013a80:	183a      	adds	r2, r7, r0
 8013a82:	8812      	ldrh	r2, [r2, #0]
 8013a84:	49b9      	ldr	r1, [pc, #740]	@ (8013d6c <USB_DeactivateEndpoint+0x374>)
 8013a86:	430a      	orrs	r2, r1
 8013a88:	b292      	uxth	r2, r2
 8013a8a:	801a      	strh	r2, [r3, #0]
 8013a8c:	e163      	b.n	8013d56 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013a8e:	687a      	ldr	r2, [r7, #4]
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	009b      	lsls	r3, r3, #2
 8013a96:	18d2      	adds	r2, r2, r3
 8013a98:	2112      	movs	r1, #18
 8013a9a:	187b      	adds	r3, r7, r1
 8013a9c:	8812      	ldrh	r2, [r2, #0]
 8013a9e:	801a      	strh	r2, [r3, #0]
 8013aa0:	187b      	adds	r3, r7, r1
 8013aa2:	881a      	ldrh	r2, [r3, #0]
 8013aa4:	2380      	movs	r3, #128	@ 0x80
 8013aa6:	01db      	lsls	r3, r3, #7
 8013aa8:	4013      	ands	r3, r2
 8013aaa:	d016      	beq.n	8013ada <USB_DeactivateEndpoint+0xe2>
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	009b      	lsls	r3, r3, #2
 8013ab4:	18d3      	adds	r3, r2, r3
 8013ab6:	881b      	ldrh	r3, [r3, #0]
 8013ab8:	b29a      	uxth	r2, r3
 8013aba:	2010      	movs	r0, #16
 8013abc:	183b      	adds	r3, r7, r0
 8013abe:	49a8      	ldr	r1, [pc, #672]	@ (8013d60 <USB_DeactivateEndpoint+0x368>)
 8013ac0:	400a      	ands	r2, r1
 8013ac2:	801a      	strh	r2, [r3, #0]
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	009b      	lsls	r3, r3, #2
 8013acc:	18d3      	adds	r3, r2, r3
 8013ace:	183a      	adds	r2, r7, r0
 8013ad0:	8812      	ldrh	r2, [r2, #0]
 8013ad2:	49a7      	ldr	r1, [pc, #668]	@ (8013d70 <USB_DeactivateEndpoint+0x378>)
 8013ad4:	430a      	orrs	r2, r1
 8013ad6:	b292      	uxth	r2, r2
 8013ad8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	009b      	lsls	r3, r3, #2
 8013ae2:	18d3      	adds	r3, r2, r3
 8013ae4:	881b      	ldrh	r3, [r3, #0]
 8013ae6:	b29a      	uxth	r2, r3
 8013ae8:	200e      	movs	r0, #14
 8013aea:	183b      	adds	r3, r7, r0
 8013aec:	49a1      	ldr	r1, [pc, #644]	@ (8013d74 <USB_DeactivateEndpoint+0x37c>)
 8013aee:	400a      	ands	r2, r1
 8013af0:	801a      	strh	r2, [r3, #0]
 8013af2:	687a      	ldr	r2, [r7, #4]
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	781b      	ldrb	r3, [r3, #0]
 8013af8:	009b      	lsls	r3, r3, #2
 8013afa:	18d3      	adds	r3, r2, r3
 8013afc:	183a      	adds	r2, r7, r0
 8013afe:	8812      	ldrh	r2, [r2, #0]
 8013b00:	499a      	ldr	r1, [pc, #616]	@ (8013d6c <USB_DeactivateEndpoint+0x374>)
 8013b02:	430a      	orrs	r2, r1
 8013b04:	b292      	uxth	r2, r2
 8013b06:	801a      	strh	r2, [r3, #0]
 8013b08:	e125      	b.n	8013d56 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	785b      	ldrb	r3, [r3, #1]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d000      	beq.n	8013b14 <USB_DeactivateEndpoint+0x11c>
 8013b12:	e090      	b.n	8013c36 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	009b      	lsls	r3, r3, #2
 8013b1c:	18d2      	adds	r2, r2, r3
 8013b1e:	2120      	movs	r1, #32
 8013b20:	187b      	adds	r3, r7, r1
 8013b22:	8812      	ldrh	r2, [r2, #0]
 8013b24:	801a      	strh	r2, [r3, #0]
 8013b26:	187b      	adds	r3, r7, r1
 8013b28:	881a      	ldrh	r2, [r3, #0]
 8013b2a:	2380      	movs	r3, #128	@ 0x80
 8013b2c:	01db      	lsls	r3, r3, #7
 8013b2e:	4013      	ands	r3, r2
 8013b30:	d016      	beq.n	8013b60 <USB_DeactivateEndpoint+0x168>
 8013b32:	687a      	ldr	r2, [r7, #4]
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	009b      	lsls	r3, r3, #2
 8013b3a:	18d3      	adds	r3, r2, r3
 8013b3c:	881b      	ldrh	r3, [r3, #0]
 8013b3e:	b29a      	uxth	r2, r3
 8013b40:	201e      	movs	r0, #30
 8013b42:	183b      	adds	r3, r7, r0
 8013b44:	4986      	ldr	r1, [pc, #536]	@ (8013d60 <USB_DeactivateEndpoint+0x368>)
 8013b46:	400a      	ands	r2, r1
 8013b48:	801a      	strh	r2, [r3, #0]
 8013b4a:	687a      	ldr	r2, [r7, #4]
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	18d3      	adds	r3, r2, r3
 8013b54:	183a      	adds	r2, r7, r0
 8013b56:	8812      	ldrh	r2, [r2, #0]
 8013b58:	4985      	ldr	r1, [pc, #532]	@ (8013d70 <USB_DeactivateEndpoint+0x378>)
 8013b5a:	430a      	orrs	r2, r1
 8013b5c:	b292      	uxth	r2, r2
 8013b5e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013b60:	687a      	ldr	r2, [r7, #4]
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	009b      	lsls	r3, r3, #2
 8013b68:	18d2      	adds	r2, r2, r3
 8013b6a:	211c      	movs	r1, #28
 8013b6c:	187b      	adds	r3, r7, r1
 8013b6e:	8812      	ldrh	r2, [r2, #0]
 8013b70:	801a      	strh	r2, [r3, #0]
 8013b72:	187b      	adds	r3, r7, r1
 8013b74:	881b      	ldrh	r3, [r3, #0]
 8013b76:	2240      	movs	r2, #64	@ 0x40
 8013b78:	4013      	ands	r3, r2
 8013b7a:	d016      	beq.n	8013baa <USB_DeactivateEndpoint+0x1b2>
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	009b      	lsls	r3, r3, #2
 8013b84:	18d3      	adds	r3, r2, r3
 8013b86:	881b      	ldrh	r3, [r3, #0]
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	201a      	movs	r0, #26
 8013b8c:	183b      	adds	r3, r7, r0
 8013b8e:	4974      	ldr	r1, [pc, #464]	@ (8013d60 <USB_DeactivateEndpoint+0x368>)
 8013b90:	400a      	ands	r2, r1
 8013b92:	801a      	strh	r2, [r3, #0]
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	781b      	ldrb	r3, [r3, #0]
 8013b9a:	009b      	lsls	r3, r3, #2
 8013b9c:	18d3      	adds	r3, r2, r3
 8013b9e:	183a      	adds	r2, r7, r0
 8013ba0:	8812      	ldrh	r2, [r2, #0]
 8013ba2:	4970      	ldr	r1, [pc, #448]	@ (8013d64 <USB_DeactivateEndpoint+0x36c>)
 8013ba4:	430a      	orrs	r2, r1
 8013ba6:	b292      	uxth	r2, r2
 8013ba8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8013baa:	687a      	ldr	r2, [r7, #4]
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	009b      	lsls	r3, r3, #2
 8013bb2:	18d3      	adds	r3, r2, r3
 8013bb4:	881b      	ldrh	r3, [r3, #0]
 8013bb6:	b29a      	uxth	r2, r3
 8013bb8:	2018      	movs	r0, #24
 8013bba:	183b      	adds	r3, r7, r0
 8013bbc:	4968      	ldr	r1, [pc, #416]	@ (8013d60 <USB_DeactivateEndpoint+0x368>)
 8013bbe:	400a      	ands	r2, r1
 8013bc0:	801a      	strh	r2, [r3, #0]
 8013bc2:	687a      	ldr	r2, [r7, #4]
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	009b      	lsls	r3, r3, #2
 8013bca:	18d3      	adds	r3, r2, r3
 8013bcc:	183a      	adds	r2, r7, r0
 8013bce:	8812      	ldrh	r2, [r2, #0]
 8013bd0:	4964      	ldr	r1, [pc, #400]	@ (8013d64 <USB_DeactivateEndpoint+0x36c>)
 8013bd2:	430a      	orrs	r2, r1
 8013bd4:	b292      	uxth	r2, r2
 8013bd6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013bd8:	687a      	ldr	r2, [r7, #4]
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	18d3      	adds	r3, r2, r3
 8013be2:	881b      	ldrh	r3, [r3, #0]
 8013be4:	b29a      	uxth	r2, r3
 8013be6:	2016      	movs	r0, #22
 8013be8:	183b      	adds	r3, r7, r0
 8013bea:	4962      	ldr	r1, [pc, #392]	@ (8013d74 <USB_DeactivateEndpoint+0x37c>)
 8013bec:	400a      	ands	r2, r1
 8013bee:	801a      	strh	r2, [r3, #0]
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	781b      	ldrb	r3, [r3, #0]
 8013bf6:	009b      	lsls	r3, r3, #2
 8013bf8:	18d3      	adds	r3, r2, r3
 8013bfa:	183a      	adds	r2, r7, r0
 8013bfc:	8812      	ldrh	r2, [r2, #0]
 8013bfe:	495b      	ldr	r1, [pc, #364]	@ (8013d6c <USB_DeactivateEndpoint+0x374>)
 8013c00:	430a      	orrs	r2, r1
 8013c02:	b292      	uxth	r2, r2
 8013c04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013c06:	687a      	ldr	r2, [r7, #4]
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	009b      	lsls	r3, r3, #2
 8013c0e:	18d3      	adds	r3, r2, r3
 8013c10:	881b      	ldrh	r3, [r3, #0]
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	2014      	movs	r0, #20
 8013c16:	183b      	adds	r3, r7, r0
 8013c18:	4953      	ldr	r1, [pc, #332]	@ (8013d68 <USB_DeactivateEndpoint+0x370>)
 8013c1a:	400a      	ands	r2, r1
 8013c1c:	801a      	strh	r2, [r3, #0]
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	009b      	lsls	r3, r3, #2
 8013c26:	18d3      	adds	r3, r2, r3
 8013c28:	183a      	adds	r2, r7, r0
 8013c2a:	8812      	ldrh	r2, [r2, #0]
 8013c2c:	494f      	ldr	r1, [pc, #316]	@ (8013d6c <USB_DeactivateEndpoint+0x374>)
 8013c2e:	430a      	orrs	r2, r1
 8013c30:	b292      	uxth	r2, r2
 8013c32:	801a      	strh	r2, [r3, #0]
 8013c34:	e08f      	b.n	8013d56 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013c36:	687a      	ldr	r2, [r7, #4]
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	009b      	lsls	r3, r3, #2
 8013c3e:	18d2      	adds	r2, r2, r3
 8013c40:	212e      	movs	r1, #46	@ 0x2e
 8013c42:	187b      	adds	r3, r7, r1
 8013c44:	8812      	ldrh	r2, [r2, #0]
 8013c46:	801a      	strh	r2, [r3, #0]
 8013c48:	187b      	adds	r3, r7, r1
 8013c4a:	881a      	ldrh	r2, [r3, #0]
 8013c4c:	2380      	movs	r3, #128	@ 0x80
 8013c4e:	01db      	lsls	r3, r3, #7
 8013c50:	4013      	ands	r3, r2
 8013c52:	d016      	beq.n	8013c82 <USB_DeactivateEndpoint+0x28a>
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	781b      	ldrb	r3, [r3, #0]
 8013c5a:	009b      	lsls	r3, r3, #2
 8013c5c:	18d3      	adds	r3, r2, r3
 8013c5e:	881b      	ldrh	r3, [r3, #0]
 8013c60:	b29a      	uxth	r2, r3
 8013c62:	202c      	movs	r0, #44	@ 0x2c
 8013c64:	183b      	adds	r3, r7, r0
 8013c66:	493e      	ldr	r1, [pc, #248]	@ (8013d60 <USB_DeactivateEndpoint+0x368>)
 8013c68:	400a      	ands	r2, r1
 8013c6a:	801a      	strh	r2, [r3, #0]
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	009b      	lsls	r3, r3, #2
 8013c74:	18d3      	adds	r3, r2, r3
 8013c76:	183a      	adds	r2, r7, r0
 8013c78:	8812      	ldrh	r2, [r2, #0]
 8013c7a:	493d      	ldr	r1, [pc, #244]	@ (8013d70 <USB_DeactivateEndpoint+0x378>)
 8013c7c:	430a      	orrs	r2, r1
 8013c7e:	b292      	uxth	r2, r2
 8013c80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013c82:	687a      	ldr	r2, [r7, #4]
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	009b      	lsls	r3, r3, #2
 8013c8a:	18d2      	adds	r2, r2, r3
 8013c8c:	212a      	movs	r1, #42	@ 0x2a
 8013c8e:	187b      	adds	r3, r7, r1
 8013c90:	8812      	ldrh	r2, [r2, #0]
 8013c92:	801a      	strh	r2, [r3, #0]
 8013c94:	187b      	adds	r3, r7, r1
 8013c96:	881b      	ldrh	r3, [r3, #0]
 8013c98:	2240      	movs	r2, #64	@ 0x40
 8013c9a:	4013      	ands	r3, r2
 8013c9c:	d016      	beq.n	8013ccc <USB_DeactivateEndpoint+0x2d4>
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	009b      	lsls	r3, r3, #2
 8013ca6:	18d3      	adds	r3, r2, r3
 8013ca8:	881b      	ldrh	r3, [r3, #0]
 8013caa:	b29a      	uxth	r2, r3
 8013cac:	2028      	movs	r0, #40	@ 0x28
 8013cae:	183b      	adds	r3, r7, r0
 8013cb0:	492b      	ldr	r1, [pc, #172]	@ (8013d60 <USB_DeactivateEndpoint+0x368>)
 8013cb2:	400a      	ands	r2, r1
 8013cb4:	801a      	strh	r2, [r3, #0]
 8013cb6:	687a      	ldr	r2, [r7, #4]
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	781b      	ldrb	r3, [r3, #0]
 8013cbc:	009b      	lsls	r3, r3, #2
 8013cbe:	18d3      	adds	r3, r2, r3
 8013cc0:	183a      	adds	r2, r7, r0
 8013cc2:	8812      	ldrh	r2, [r2, #0]
 8013cc4:	4927      	ldr	r1, [pc, #156]	@ (8013d64 <USB_DeactivateEndpoint+0x36c>)
 8013cc6:	430a      	orrs	r2, r1
 8013cc8:	b292      	uxth	r2, r2
 8013cca:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013ccc:	687a      	ldr	r2, [r7, #4]
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	781b      	ldrb	r3, [r3, #0]
 8013cd2:	009b      	lsls	r3, r3, #2
 8013cd4:	18d3      	adds	r3, r2, r3
 8013cd6:	881b      	ldrh	r3, [r3, #0]
 8013cd8:	b29a      	uxth	r2, r3
 8013cda:	2026      	movs	r0, #38	@ 0x26
 8013cdc:	183b      	adds	r3, r7, r0
 8013cde:	4920      	ldr	r1, [pc, #128]	@ (8013d60 <USB_DeactivateEndpoint+0x368>)
 8013ce0:	400a      	ands	r2, r1
 8013ce2:	801a      	strh	r2, [r3, #0]
 8013ce4:	687a      	ldr	r2, [r7, #4]
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	781b      	ldrb	r3, [r3, #0]
 8013cea:	009b      	lsls	r3, r3, #2
 8013cec:	18d3      	adds	r3, r2, r3
 8013cee:	183a      	adds	r2, r7, r0
 8013cf0:	8812      	ldrh	r2, [r2, #0]
 8013cf2:	491f      	ldr	r1, [pc, #124]	@ (8013d70 <USB_DeactivateEndpoint+0x378>)
 8013cf4:	430a      	orrs	r2, r1
 8013cf6:	b292      	uxth	r2, r2
 8013cf8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013cfa:	687a      	ldr	r2, [r7, #4]
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	781b      	ldrb	r3, [r3, #0]
 8013d00:	009b      	lsls	r3, r3, #2
 8013d02:	18d3      	adds	r3, r2, r3
 8013d04:	881b      	ldrh	r3, [r3, #0]
 8013d06:	b29a      	uxth	r2, r3
 8013d08:	2024      	movs	r0, #36	@ 0x24
 8013d0a:	183b      	adds	r3, r7, r0
 8013d0c:	4916      	ldr	r1, [pc, #88]	@ (8013d68 <USB_DeactivateEndpoint+0x370>)
 8013d0e:	400a      	ands	r2, r1
 8013d10:	801a      	strh	r2, [r3, #0]
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	781b      	ldrb	r3, [r3, #0]
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	18d3      	adds	r3, r2, r3
 8013d1c:	183a      	adds	r2, r7, r0
 8013d1e:	8812      	ldrh	r2, [r2, #0]
 8013d20:	4912      	ldr	r1, [pc, #72]	@ (8013d6c <USB_DeactivateEndpoint+0x374>)
 8013d22:	430a      	orrs	r2, r1
 8013d24:	b292      	uxth	r2, r2
 8013d26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	18d3      	adds	r3, r2, r3
 8013d32:	881b      	ldrh	r3, [r3, #0]
 8013d34:	b29a      	uxth	r2, r3
 8013d36:	2022      	movs	r0, #34	@ 0x22
 8013d38:	183b      	adds	r3, r7, r0
 8013d3a:	490e      	ldr	r1, [pc, #56]	@ (8013d74 <USB_DeactivateEndpoint+0x37c>)
 8013d3c:	400a      	ands	r2, r1
 8013d3e:	801a      	strh	r2, [r3, #0]
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	18d3      	adds	r3, r2, r3
 8013d4a:	183a      	adds	r2, r7, r0
 8013d4c:	8812      	ldrh	r2, [r2, #0]
 8013d4e:	4907      	ldr	r1, [pc, #28]	@ (8013d6c <USB_DeactivateEndpoint+0x374>)
 8013d50:	430a      	orrs	r2, r1
 8013d52:	b292      	uxth	r2, r2
 8013d54:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8013d56:	2300      	movs	r3, #0
}
 8013d58:	0018      	movs	r0, r3
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	b00c      	add	sp, #48	@ 0x30
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	ffff8f8f 	.word	0xffff8f8f
 8013d64:	ffff80c0 	.word	0xffff80c0
 8013d68:	ffff8fbf 	.word	0xffff8fbf
 8013d6c:	ffff8080 	.word	0xffff8080
 8013d70:	ffffc080 	.word	0xffffc080
 8013d74:	ffffbf8f 	.word	0xffffbf8f

08013d78 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013d78:	b590      	push	{r4, r7, lr}
 8013d7a:	b0c3      	sub	sp, #268	@ 0x10c
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	785b      	ldrb	r3, [r3, #1]
 8013d86:	2b01      	cmp	r3, #1
 8013d88:	d001      	beq.n	8013d8e <USB_EPStartXfer+0x16>
 8013d8a:	f000 fd2d 	bl	80147e8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8013d8e:	683b      	ldr	r3, [r7, #0]
 8013d90:	699a      	ldr	r2, [r3, #24]
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	691b      	ldr	r3, [r3, #16]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d905      	bls.n	8013da6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	691b      	ldr	r3, [r3, #16]
 8013d9e:	1d7a      	adds	r2, r7, #5
 8013da0:	32ff      	adds	r2, #255	@ 0xff
 8013da2:	6013      	str	r3, [r2, #0]
 8013da4:	e004      	b.n	8013db0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	699b      	ldr	r3, [r3, #24]
 8013daa:	1d7a      	adds	r2, r7, #5
 8013dac:	32ff      	adds	r2, #255	@ 0xff
 8013dae:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	7b1b      	ldrb	r3, [r3, #12]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d125      	bne.n	8013e04 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	6959      	ldr	r1, [r3, #20]
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	88da      	ldrh	r2, [r3, #6]
 8013dc0:	1d7b      	adds	r3, r7, #5
 8013dc2:	33ff      	adds	r3, #255	@ 0xff
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f001 fa47 	bl	801525c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	613b      	str	r3, [r7, #16]
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2250      	movs	r2, #80	@ 0x50
 8013dd6:	5a9b      	ldrh	r3, [r3, r2]
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	001a      	movs	r2, r3
 8013ddc:	693b      	ldr	r3, [r7, #16]
 8013dde:	189b      	adds	r3, r3, r2
 8013de0:	613b      	str	r3, [r7, #16]
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	00da      	lsls	r2, r3, #3
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	18d3      	adds	r3, r2, r3
 8013dec:	4ad7      	ldr	r2, [pc, #860]	@ (801414c <USB_EPStartXfer+0x3d4>)
 8013dee:	4694      	mov	ip, r2
 8013df0:	4463      	add	r3, ip
 8013df2:	60fb      	str	r3, [r7, #12]
 8013df4:	1d7b      	adds	r3, r7, #5
 8013df6:	33ff      	adds	r3, #255	@ 0xff
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	801a      	strh	r2, [r3, #0]
 8013e00:	f000 fccd 	bl	801479e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	78db      	ldrb	r3, [r3, #3]
 8013e08:	2b02      	cmp	r3, #2
 8013e0a:	d000      	beq.n	8013e0e <USB_EPStartXfer+0x96>
 8013e0c:	e362      	b.n	80144d4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	6a1a      	ldr	r2, [r3, #32]
 8013e12:	683b      	ldr	r3, [r7, #0]
 8013e14:	691b      	ldr	r3, [r3, #16]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d800      	bhi.n	8013e1c <USB_EPStartXfer+0xa4>
 8013e1a:	e309      	b.n	8014430 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	683b      	ldr	r3, [r7, #0]
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	009b      	lsls	r3, r3, #2
 8013e24:	18d3      	adds	r3, r2, r3
 8013e26:	881b      	ldrh	r3, [r3, #0]
 8013e28:	b29a      	uxth	r2, r3
 8013e2a:	2056      	movs	r0, #86	@ 0x56
 8013e2c:	183b      	adds	r3, r7, r0
 8013e2e:	49c8      	ldr	r1, [pc, #800]	@ (8014150 <USB_EPStartXfer+0x3d8>)
 8013e30:	400a      	ands	r2, r1
 8013e32:	801a      	strh	r2, [r3, #0]
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	009b      	lsls	r3, r3, #2
 8013e3c:	18d3      	adds	r3, r2, r3
 8013e3e:	183a      	adds	r2, r7, r0
 8013e40:	8812      	ldrh	r2, [r2, #0]
 8013e42:	49c4      	ldr	r1, [pc, #784]	@ (8014154 <USB_EPStartXfer+0x3dc>)
 8013e44:	430a      	orrs	r2, r1
 8013e46:	b292      	uxth	r2, r2
 8013e48:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	6a1a      	ldr	r2, [r3, #32]
 8013e4e:	1d7b      	adds	r3, r7, #5
 8013e50:	33ff      	adds	r3, #255	@ 0xff
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	1ad2      	subs	r2, r2, r3
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	009b      	lsls	r3, r3, #2
 8013e62:	18d3      	adds	r3, r2, r3
 8013e64:	881b      	ldrh	r3, [r3, #0]
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	001a      	movs	r2, r3
 8013e6a:	2340      	movs	r3, #64	@ 0x40
 8013e6c:	4013      	ands	r3, r2
 8013e6e:	d100      	bne.n	8013e72 <USB_EPStartXfer+0xfa>
 8013e70:	e176      	b.n	8014160 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	785b      	ldrb	r3, [r3, #1]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d000      	beq.n	8013e80 <USB_EPStartXfer+0x108>
 8013e7e:	e074      	b.n	8013f6a <USB_EPStartXfer+0x1f2>
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2250      	movs	r2, #80	@ 0x50
 8013e88:	5a9b      	ldrh	r3, [r3, r2]
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	001a      	movs	r2, r3
 8013e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e90:	189b      	adds	r3, r3, r2
 8013e92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	00da      	lsls	r2, r3, #3
 8013e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e9c:	18d3      	adds	r3, r2, r3
 8013e9e:	4aae      	ldr	r2, [pc, #696]	@ (8014158 <USB_EPStartXfer+0x3e0>)
 8013ea0:	4694      	mov	ip, r2
 8013ea2:	4463      	add	r3, ip
 8013ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ea8:	881b      	ldrh	r3, [r3, #0]
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	059b      	lsls	r3, r3, #22
 8013eae:	0d9b      	lsrs	r3, r3, #22
 8013eb0:	b29a      	uxth	r2, r3
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb4:	801a      	strh	r2, [r3, #0]
 8013eb6:	1d7b      	adds	r3, r7, #5
 8013eb8:	33ff      	adds	r3, #255	@ 0xff
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	2b3e      	cmp	r3, #62	@ 0x3e
 8013ebe:	d924      	bls.n	8013f0a <USB_EPStartXfer+0x192>
 8013ec0:	1d7b      	adds	r3, r7, #5
 8013ec2:	33ff      	adds	r3, #255	@ 0xff
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	095b      	lsrs	r3, r3, #5
 8013ec8:	1c7a      	adds	r2, r7, #1
 8013eca:	32ff      	adds	r2, #255	@ 0xff
 8013ecc:	6013      	str	r3, [r2, #0]
 8013ece:	1d7b      	adds	r3, r7, #5
 8013ed0:	33ff      	adds	r3, #255	@ 0xff
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	221f      	movs	r2, #31
 8013ed6:	4013      	ands	r3, r2
 8013ed8:	d106      	bne.n	8013ee8 <USB_EPStartXfer+0x170>
 8013eda:	1c7b      	adds	r3, r7, #1
 8013edc:	33ff      	adds	r3, #255	@ 0xff
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	3b01      	subs	r3, #1
 8013ee2:	1c7a      	adds	r2, r7, #1
 8013ee4:	32ff      	adds	r2, #255	@ 0xff
 8013ee6:	6013      	str	r3, [r2, #0]
 8013ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eea:	881b      	ldrh	r3, [r3, #0]
 8013eec:	b29a      	uxth	r2, r3
 8013eee:	1c7b      	adds	r3, r7, #1
 8013ef0:	33ff      	adds	r3, #255	@ 0xff
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	029b      	lsls	r3, r3, #10
 8013ef8:	b29b      	uxth	r3, r3
 8013efa:	4313      	orrs	r3, r2
 8013efc:	b29b      	uxth	r3, r3
 8013efe:	4a97      	ldr	r2, [pc, #604]	@ (801415c <USB_EPStartXfer+0x3e4>)
 8013f00:	4313      	orrs	r3, r2
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f06:	801a      	strh	r2, [r3, #0]
 8013f08:	e04a      	b.n	8013fa0 <USB_EPStartXfer+0x228>
 8013f0a:	1d7b      	adds	r3, r7, #5
 8013f0c:	33ff      	adds	r3, #255	@ 0xff
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d108      	bne.n	8013f26 <USB_EPStartXfer+0x1ae>
 8013f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f16:	881b      	ldrh	r3, [r3, #0]
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	4a90      	ldr	r2, [pc, #576]	@ (801415c <USB_EPStartXfer+0x3e4>)
 8013f1c:	4313      	orrs	r3, r2
 8013f1e:	b29a      	uxth	r2, r3
 8013f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f22:	801a      	strh	r2, [r3, #0]
 8013f24:	e03c      	b.n	8013fa0 <USB_EPStartXfer+0x228>
 8013f26:	1d7b      	adds	r3, r7, #5
 8013f28:	33ff      	adds	r3, #255	@ 0xff
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	085b      	lsrs	r3, r3, #1
 8013f2e:	1c7a      	adds	r2, r7, #1
 8013f30:	32ff      	adds	r2, #255	@ 0xff
 8013f32:	6013      	str	r3, [r2, #0]
 8013f34:	1d7b      	adds	r3, r7, #5
 8013f36:	33ff      	adds	r3, #255	@ 0xff
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	4013      	ands	r3, r2
 8013f3e:	d006      	beq.n	8013f4e <USB_EPStartXfer+0x1d6>
 8013f40:	1c7b      	adds	r3, r7, #1
 8013f42:	33ff      	adds	r3, #255	@ 0xff
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	3301      	adds	r3, #1
 8013f48:	1c7a      	adds	r2, r7, #1
 8013f4a:	32ff      	adds	r2, #255	@ 0xff
 8013f4c:	6013      	str	r3, [r2, #0]
 8013f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f50:	881b      	ldrh	r3, [r3, #0]
 8013f52:	b29a      	uxth	r2, r3
 8013f54:	1c7b      	adds	r3, r7, #1
 8013f56:	33ff      	adds	r3, #255	@ 0xff
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	029b      	lsls	r3, r3, #10
 8013f5e:	b29b      	uxth	r3, r3
 8013f60:	4313      	orrs	r3, r2
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f66:	801a      	strh	r2, [r3, #0]
 8013f68:	e01a      	b.n	8013fa0 <USB_EPStartXfer+0x228>
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	785b      	ldrb	r3, [r3, #1]
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	d116      	bne.n	8013fa0 <USB_EPStartXfer+0x228>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2250      	movs	r2, #80	@ 0x50
 8013f76:	5a9b      	ldrh	r3, [r3, r2]
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	001a      	movs	r2, r3
 8013f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f7e:	189b      	adds	r3, r3, r2
 8013f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	781b      	ldrb	r3, [r3, #0]
 8013f86:	00da      	lsls	r2, r3, #3
 8013f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f8a:	18d3      	adds	r3, r2, r3
 8013f8c:	4a72      	ldr	r2, [pc, #456]	@ (8014158 <USB_EPStartXfer+0x3e0>)
 8013f8e:	4694      	mov	ip, r2
 8013f90:	4463      	add	r3, ip
 8013f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f94:	1d7b      	adds	r3, r7, #5
 8013f96:	33ff      	adds	r3, #255	@ 0xff
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013fa0:	2076      	movs	r0, #118	@ 0x76
 8013fa2:	183b      	adds	r3, r7, r0
 8013fa4:	683a      	ldr	r2, [r7, #0]
 8013fa6:	8952      	ldrh	r2, [r2, #10]
 8013fa8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	6959      	ldr	r1, [r3, #20]
 8013fae:	1d7b      	adds	r3, r7, #5
 8013fb0:	33ff      	adds	r3, #255	@ 0xff
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	b29c      	uxth	r4, r3
 8013fb6:	183b      	adds	r3, r7, r0
 8013fb8:	881a      	ldrh	r2, [r3, #0]
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	0023      	movs	r3, r4
 8013fbe:	f001 f94d 	bl	801525c <USB_WritePMA>
            ep->xfer_buff += len;
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	695a      	ldr	r2, [r3, #20]
 8013fc6:	1d7b      	adds	r3, r7, #5
 8013fc8:	33ff      	adds	r3, #255	@ 0xff
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	18d2      	adds	r2, r2, r3
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	6a1a      	ldr	r2, [r3, #32]
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	691b      	ldr	r3, [r3, #16]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d908      	bls.n	8013ff0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	6a1a      	ldr	r2, [r3, #32]
 8013fe2:	1d7b      	adds	r3, r7, #5
 8013fe4:	33ff      	adds	r3, #255	@ 0xff
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	1ad2      	subs	r2, r2, r3
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	621a      	str	r2, [r3, #32]
 8013fee:	e007      	b.n	8014000 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	6a1b      	ldr	r3, [r3, #32]
 8013ff4:	1d7a      	adds	r2, r7, #5
 8013ff6:	32ff      	adds	r2, #255	@ 0xff
 8013ff8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	785b      	ldrb	r3, [r3, #1]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d000      	beq.n	801400a <USB_EPStartXfer+0x292>
 8014008:	e070      	b.n	80140ec <USB_EPStartXfer+0x374>
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	61bb      	str	r3, [r7, #24]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2250      	movs	r2, #80	@ 0x50
 8014012:	5a9b      	ldrh	r3, [r3, r2]
 8014014:	b29b      	uxth	r3, r3
 8014016:	001a      	movs	r2, r3
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	189b      	adds	r3, r3, r2
 801401c:	61bb      	str	r3, [r7, #24]
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	00da      	lsls	r2, r3, #3
 8014024:	69bb      	ldr	r3, [r7, #24]
 8014026:	18d3      	adds	r3, r2, r3
 8014028:	4a48      	ldr	r2, [pc, #288]	@ (801414c <USB_EPStartXfer+0x3d4>)
 801402a:	4694      	mov	ip, r2
 801402c:	4463      	add	r3, ip
 801402e:	617b      	str	r3, [r7, #20]
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	881b      	ldrh	r3, [r3, #0]
 8014034:	b29b      	uxth	r3, r3
 8014036:	059b      	lsls	r3, r3, #22
 8014038:	0d9b      	lsrs	r3, r3, #22
 801403a:	b29a      	uxth	r2, r3
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	801a      	strh	r2, [r3, #0]
 8014040:	1d7b      	adds	r3, r7, #5
 8014042:	33ff      	adds	r3, #255	@ 0xff
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	2b3e      	cmp	r3, #62	@ 0x3e
 8014048:	d922      	bls.n	8014090 <USB_EPStartXfer+0x318>
 801404a:	1d7b      	adds	r3, r7, #5
 801404c:	33ff      	adds	r3, #255	@ 0xff
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	095b      	lsrs	r3, r3, #5
 8014052:	21fc      	movs	r1, #252	@ 0xfc
 8014054:	187a      	adds	r2, r7, r1
 8014056:	6013      	str	r3, [r2, #0]
 8014058:	1d7b      	adds	r3, r7, #5
 801405a:	33ff      	adds	r3, #255	@ 0xff
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	221f      	movs	r2, #31
 8014060:	4013      	ands	r3, r2
 8014062:	d104      	bne.n	801406e <USB_EPStartXfer+0x2f6>
 8014064:	187b      	adds	r3, r7, r1
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	3b01      	subs	r3, #1
 801406a:	187a      	adds	r2, r7, r1
 801406c:	6013      	str	r3, [r2, #0]
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	881b      	ldrh	r3, [r3, #0]
 8014072:	b29a      	uxth	r2, r3
 8014074:	23fc      	movs	r3, #252	@ 0xfc
 8014076:	18fb      	adds	r3, r7, r3
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	b29b      	uxth	r3, r3
 801407c:	029b      	lsls	r3, r3, #10
 801407e:	b29b      	uxth	r3, r3
 8014080:	4313      	orrs	r3, r2
 8014082:	b29b      	uxth	r3, r3
 8014084:	4a35      	ldr	r2, [pc, #212]	@ (801415c <USB_EPStartXfer+0x3e4>)
 8014086:	4313      	orrs	r3, r2
 8014088:	b29a      	uxth	r2, r3
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	801a      	strh	r2, [r3, #0]
 801408e:	e04a      	b.n	8014126 <USB_EPStartXfer+0x3ae>
 8014090:	1d7b      	adds	r3, r7, #5
 8014092:	33ff      	adds	r3, #255	@ 0xff
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d108      	bne.n	80140ac <USB_EPStartXfer+0x334>
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	881b      	ldrh	r3, [r3, #0]
 801409e:	b29b      	uxth	r3, r3
 80140a0:	4a2e      	ldr	r2, [pc, #184]	@ (801415c <USB_EPStartXfer+0x3e4>)
 80140a2:	4313      	orrs	r3, r2
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	801a      	strh	r2, [r3, #0]
 80140aa:	e03c      	b.n	8014126 <USB_EPStartXfer+0x3ae>
 80140ac:	1d7b      	adds	r3, r7, #5
 80140ae:	33ff      	adds	r3, #255	@ 0xff
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	085b      	lsrs	r3, r3, #1
 80140b4:	21fc      	movs	r1, #252	@ 0xfc
 80140b6:	187a      	adds	r2, r7, r1
 80140b8:	6013      	str	r3, [r2, #0]
 80140ba:	1d7b      	adds	r3, r7, #5
 80140bc:	33ff      	adds	r3, #255	@ 0xff
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2201      	movs	r2, #1
 80140c2:	4013      	ands	r3, r2
 80140c4:	d004      	beq.n	80140d0 <USB_EPStartXfer+0x358>
 80140c6:	187b      	adds	r3, r7, r1
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	3301      	adds	r3, #1
 80140cc:	187a      	adds	r2, r7, r1
 80140ce:	6013      	str	r3, [r2, #0]
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	881b      	ldrh	r3, [r3, #0]
 80140d4:	b29a      	uxth	r2, r3
 80140d6:	23fc      	movs	r3, #252	@ 0xfc
 80140d8:	18fb      	adds	r3, r7, r3
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	b29b      	uxth	r3, r3
 80140de:	029b      	lsls	r3, r3, #10
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	4313      	orrs	r3, r2
 80140e4:	b29a      	uxth	r2, r3
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	801a      	strh	r2, [r3, #0]
 80140ea:	e01c      	b.n	8014126 <USB_EPStartXfer+0x3ae>
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	785b      	ldrb	r3, [r3, #1]
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	d118      	bne.n	8014126 <USB_EPStartXfer+0x3ae>
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	623b      	str	r3, [r7, #32]
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2250      	movs	r2, #80	@ 0x50
 80140fc:	5a9b      	ldrh	r3, [r3, r2]
 80140fe:	b29b      	uxth	r3, r3
 8014100:	001a      	movs	r2, r3
 8014102:	6a3b      	ldr	r3, [r7, #32]
 8014104:	189b      	adds	r3, r3, r2
 8014106:	623b      	str	r3, [r7, #32]
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	00da      	lsls	r2, r3, #3
 801410e:	6a3b      	ldr	r3, [r7, #32]
 8014110:	18d3      	adds	r3, r2, r3
 8014112:	4a0e      	ldr	r2, [pc, #56]	@ (801414c <USB_EPStartXfer+0x3d4>)
 8014114:	4694      	mov	ip, r2
 8014116:	4463      	add	r3, ip
 8014118:	61fb      	str	r3, [r7, #28]
 801411a:	1d7b      	adds	r3, r7, #5
 801411c:	33ff      	adds	r3, #255	@ 0xff
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	b29a      	uxth	r2, r3
 8014122:	69fb      	ldr	r3, [r7, #28]
 8014124:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8014126:	2076      	movs	r0, #118	@ 0x76
 8014128:	183b      	adds	r3, r7, r0
 801412a:	683a      	ldr	r2, [r7, #0]
 801412c:	8912      	ldrh	r2, [r2, #8]
 801412e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	6959      	ldr	r1, [r3, #20]
 8014134:	1d7b      	adds	r3, r7, #5
 8014136:	33ff      	adds	r3, #255	@ 0xff
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	b29c      	uxth	r4, r3
 801413c:	183b      	adds	r3, r7, r0
 801413e:	881a      	ldrh	r2, [r3, #0]
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	0023      	movs	r3, r4
 8014144:	f001 f88a 	bl	801525c <USB_WritePMA>
 8014148:	e329      	b.n	801479e <USB_EPStartXfer+0xa26>
 801414a:	46c0      	nop			@ (mov r8, r8)
 801414c:	00000402 	.word	0x00000402
 8014150:	ffff8f8f 	.word	0xffff8f8f
 8014154:	ffff8180 	.word	0xffff8180
 8014158:	00000406 	.word	0x00000406
 801415c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014160:	683b      	ldr	r3, [r7, #0]
 8014162:	785b      	ldrb	r3, [r3, #1]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d000      	beq.n	801416a <USB_EPStartXfer+0x3f2>
 8014168:	e070      	b.n	801424c <USB_EPStartXfer+0x4d4>
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2250      	movs	r2, #80	@ 0x50
 8014172:	5a9b      	ldrh	r3, [r3, r2]
 8014174:	b29b      	uxth	r3, r3
 8014176:	001a      	movs	r2, r3
 8014178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801417a:	189b      	adds	r3, r3, r2
 801417c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	781b      	ldrb	r3, [r3, #0]
 8014182:	00da      	lsls	r2, r3, #3
 8014184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014186:	18d3      	adds	r3, r2, r3
 8014188:	4acd      	ldr	r2, [pc, #820]	@ (80144c0 <USB_EPStartXfer+0x748>)
 801418a:	4694      	mov	ip, r2
 801418c:	4463      	add	r3, ip
 801418e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014192:	881b      	ldrh	r3, [r3, #0]
 8014194:	b29b      	uxth	r3, r3
 8014196:	059b      	lsls	r3, r3, #22
 8014198:	0d9b      	lsrs	r3, r3, #22
 801419a:	b29a      	uxth	r2, r3
 801419c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801419e:	801a      	strh	r2, [r3, #0]
 80141a0:	1d7b      	adds	r3, r7, #5
 80141a2:	33ff      	adds	r3, #255	@ 0xff
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80141a8:	d922      	bls.n	80141f0 <USB_EPStartXfer+0x478>
 80141aa:	1d7b      	adds	r3, r7, #5
 80141ac:	33ff      	adds	r3, #255	@ 0xff
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	095b      	lsrs	r3, r3, #5
 80141b2:	21f8      	movs	r1, #248	@ 0xf8
 80141b4:	187a      	adds	r2, r7, r1
 80141b6:	6013      	str	r3, [r2, #0]
 80141b8:	1d7b      	adds	r3, r7, #5
 80141ba:	33ff      	adds	r3, #255	@ 0xff
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	221f      	movs	r2, #31
 80141c0:	4013      	ands	r3, r2
 80141c2:	d104      	bne.n	80141ce <USB_EPStartXfer+0x456>
 80141c4:	187b      	adds	r3, r7, r1
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	3b01      	subs	r3, #1
 80141ca:	187a      	adds	r2, r7, r1
 80141cc:	6013      	str	r3, [r2, #0]
 80141ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141d0:	881b      	ldrh	r3, [r3, #0]
 80141d2:	b29a      	uxth	r2, r3
 80141d4:	23f8      	movs	r3, #248	@ 0xf8
 80141d6:	18fb      	adds	r3, r7, r3
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	b29b      	uxth	r3, r3
 80141dc:	029b      	lsls	r3, r3, #10
 80141de:	b29b      	uxth	r3, r3
 80141e0:	4313      	orrs	r3, r2
 80141e2:	b29b      	uxth	r3, r3
 80141e4:	4ab7      	ldr	r2, [pc, #732]	@ (80144c4 <USB_EPStartXfer+0x74c>)
 80141e6:	4313      	orrs	r3, r2
 80141e8:	b29a      	uxth	r2, r3
 80141ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141ec:	801a      	strh	r2, [r3, #0]
 80141ee:	e04a      	b.n	8014286 <USB_EPStartXfer+0x50e>
 80141f0:	1d7b      	adds	r3, r7, #5
 80141f2:	33ff      	adds	r3, #255	@ 0xff
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d108      	bne.n	801420c <USB_EPStartXfer+0x494>
 80141fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141fc:	881b      	ldrh	r3, [r3, #0]
 80141fe:	b29b      	uxth	r3, r3
 8014200:	4ab0      	ldr	r2, [pc, #704]	@ (80144c4 <USB_EPStartXfer+0x74c>)
 8014202:	4313      	orrs	r3, r2
 8014204:	b29a      	uxth	r2, r3
 8014206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014208:	801a      	strh	r2, [r3, #0]
 801420a:	e03c      	b.n	8014286 <USB_EPStartXfer+0x50e>
 801420c:	1d7b      	adds	r3, r7, #5
 801420e:	33ff      	adds	r3, #255	@ 0xff
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	085b      	lsrs	r3, r3, #1
 8014214:	21f8      	movs	r1, #248	@ 0xf8
 8014216:	187a      	adds	r2, r7, r1
 8014218:	6013      	str	r3, [r2, #0]
 801421a:	1d7b      	adds	r3, r7, #5
 801421c:	33ff      	adds	r3, #255	@ 0xff
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2201      	movs	r2, #1
 8014222:	4013      	ands	r3, r2
 8014224:	d004      	beq.n	8014230 <USB_EPStartXfer+0x4b8>
 8014226:	187b      	adds	r3, r7, r1
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	3301      	adds	r3, #1
 801422c:	187a      	adds	r2, r7, r1
 801422e:	6013      	str	r3, [r2, #0]
 8014230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014232:	881b      	ldrh	r3, [r3, #0]
 8014234:	b29a      	uxth	r2, r3
 8014236:	23f8      	movs	r3, #248	@ 0xf8
 8014238:	18fb      	adds	r3, r7, r3
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	b29b      	uxth	r3, r3
 801423e:	029b      	lsls	r3, r3, #10
 8014240:	b29b      	uxth	r3, r3
 8014242:	4313      	orrs	r3, r2
 8014244:	b29a      	uxth	r2, r3
 8014246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014248:	801a      	strh	r2, [r3, #0]
 801424a:	e01c      	b.n	8014286 <USB_EPStartXfer+0x50e>
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	785b      	ldrb	r3, [r3, #1]
 8014250:	2b01      	cmp	r3, #1
 8014252:	d118      	bne.n	8014286 <USB_EPStartXfer+0x50e>
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	653b      	str	r3, [r7, #80]	@ 0x50
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2250      	movs	r2, #80	@ 0x50
 801425c:	5a9b      	ldrh	r3, [r3, r2]
 801425e:	b29b      	uxth	r3, r3
 8014260:	001a      	movs	r2, r3
 8014262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014264:	189b      	adds	r3, r3, r2
 8014266:	653b      	str	r3, [r7, #80]	@ 0x50
 8014268:	683b      	ldr	r3, [r7, #0]
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	00da      	lsls	r2, r3, #3
 801426e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014270:	18d3      	adds	r3, r2, r3
 8014272:	4a93      	ldr	r2, [pc, #588]	@ (80144c0 <USB_EPStartXfer+0x748>)
 8014274:	4694      	mov	ip, r2
 8014276:	4463      	add	r3, ip
 8014278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801427a:	1d7b      	adds	r3, r7, #5
 801427c:	33ff      	adds	r3, #255	@ 0xff
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	b29a      	uxth	r2, r3
 8014282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014284:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8014286:	2076      	movs	r0, #118	@ 0x76
 8014288:	183b      	adds	r3, r7, r0
 801428a:	683a      	ldr	r2, [r7, #0]
 801428c:	8912      	ldrh	r2, [r2, #8]
 801428e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	6959      	ldr	r1, [r3, #20]
 8014294:	1d7b      	adds	r3, r7, #5
 8014296:	33ff      	adds	r3, #255	@ 0xff
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	b29c      	uxth	r4, r3
 801429c:	183b      	adds	r3, r7, r0
 801429e:	881a      	ldrh	r2, [r3, #0]
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	0023      	movs	r3, r4
 80142a4:	f000 ffda 	bl	801525c <USB_WritePMA>
            ep->xfer_buff += len;
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	695a      	ldr	r2, [r3, #20]
 80142ac:	1d7b      	adds	r3, r7, #5
 80142ae:	33ff      	adds	r3, #255	@ 0xff
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	18d2      	adds	r2, r2, r3
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	6a1a      	ldr	r2, [r3, #32]
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	691b      	ldr	r3, [r3, #16]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d908      	bls.n	80142d6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	6a1a      	ldr	r2, [r3, #32]
 80142c8:	1d7b      	adds	r3, r7, #5
 80142ca:	33ff      	adds	r3, #255	@ 0xff
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	1ad2      	subs	r2, r2, r3
 80142d0:	683b      	ldr	r3, [r7, #0]
 80142d2:	621a      	str	r2, [r3, #32]
 80142d4:	e007      	b.n	80142e6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	6a1b      	ldr	r3, [r3, #32]
 80142da:	1d7a      	adds	r2, r7, #5
 80142dc:	32ff      	adds	r2, #255	@ 0xff
 80142de:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	2200      	movs	r2, #0
 80142e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	785b      	ldrb	r3, [r3, #1]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d000      	beq.n	80142f4 <USB_EPStartXfer+0x57c>
 80142f2:	e070      	b.n	80143d6 <USB_EPStartXfer+0x65e>
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2250      	movs	r2, #80	@ 0x50
 80142fc:	5a9b      	ldrh	r3, [r3, r2]
 80142fe:	b29b      	uxth	r3, r3
 8014300:	001a      	movs	r2, r3
 8014302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014304:	189b      	adds	r3, r3, r2
 8014306:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014308:	683b      	ldr	r3, [r7, #0]
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	00da      	lsls	r2, r3, #3
 801430e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014310:	18d3      	adds	r3, r2, r3
 8014312:	4a6d      	ldr	r2, [pc, #436]	@ (80144c8 <USB_EPStartXfer+0x750>)
 8014314:	4694      	mov	ip, r2
 8014316:	4463      	add	r3, ip
 8014318:	637b      	str	r3, [r7, #52]	@ 0x34
 801431a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801431c:	881b      	ldrh	r3, [r3, #0]
 801431e:	b29b      	uxth	r3, r3
 8014320:	059b      	lsls	r3, r3, #22
 8014322:	0d9b      	lsrs	r3, r3, #22
 8014324:	b29a      	uxth	r2, r3
 8014326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014328:	801a      	strh	r2, [r3, #0]
 801432a:	1d7b      	adds	r3, r7, #5
 801432c:	33ff      	adds	r3, #255	@ 0xff
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	2b3e      	cmp	r3, #62	@ 0x3e
 8014332:	d922      	bls.n	801437a <USB_EPStartXfer+0x602>
 8014334:	1d7b      	adds	r3, r7, #5
 8014336:	33ff      	adds	r3, #255	@ 0xff
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	095b      	lsrs	r3, r3, #5
 801433c:	21f4      	movs	r1, #244	@ 0xf4
 801433e:	187a      	adds	r2, r7, r1
 8014340:	6013      	str	r3, [r2, #0]
 8014342:	1d7b      	adds	r3, r7, #5
 8014344:	33ff      	adds	r3, #255	@ 0xff
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	221f      	movs	r2, #31
 801434a:	4013      	ands	r3, r2
 801434c:	d104      	bne.n	8014358 <USB_EPStartXfer+0x5e0>
 801434e:	187b      	adds	r3, r7, r1
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	3b01      	subs	r3, #1
 8014354:	187a      	adds	r2, r7, r1
 8014356:	6013      	str	r3, [r2, #0]
 8014358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801435a:	881b      	ldrh	r3, [r3, #0]
 801435c:	b29a      	uxth	r2, r3
 801435e:	23f4      	movs	r3, #244	@ 0xf4
 8014360:	18fb      	adds	r3, r7, r3
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	b29b      	uxth	r3, r3
 8014366:	029b      	lsls	r3, r3, #10
 8014368:	b29b      	uxth	r3, r3
 801436a:	4313      	orrs	r3, r2
 801436c:	b29b      	uxth	r3, r3
 801436e:	4a55      	ldr	r2, [pc, #340]	@ (80144c4 <USB_EPStartXfer+0x74c>)
 8014370:	4313      	orrs	r3, r2
 8014372:	b29a      	uxth	r2, r3
 8014374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014376:	801a      	strh	r2, [r3, #0]
 8014378:	e048      	b.n	801440c <USB_EPStartXfer+0x694>
 801437a:	1d7b      	adds	r3, r7, #5
 801437c:	33ff      	adds	r3, #255	@ 0xff
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d108      	bne.n	8014396 <USB_EPStartXfer+0x61e>
 8014384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014386:	881b      	ldrh	r3, [r3, #0]
 8014388:	b29b      	uxth	r3, r3
 801438a:	4a4e      	ldr	r2, [pc, #312]	@ (80144c4 <USB_EPStartXfer+0x74c>)
 801438c:	4313      	orrs	r3, r2
 801438e:	b29a      	uxth	r2, r3
 8014390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014392:	801a      	strh	r2, [r3, #0]
 8014394:	e03a      	b.n	801440c <USB_EPStartXfer+0x694>
 8014396:	1d7b      	adds	r3, r7, #5
 8014398:	33ff      	adds	r3, #255	@ 0xff
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	085b      	lsrs	r3, r3, #1
 801439e:	21f4      	movs	r1, #244	@ 0xf4
 80143a0:	187a      	adds	r2, r7, r1
 80143a2:	6013      	str	r3, [r2, #0]
 80143a4:	1d7b      	adds	r3, r7, #5
 80143a6:	33ff      	adds	r3, #255	@ 0xff
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	2201      	movs	r2, #1
 80143ac:	4013      	ands	r3, r2
 80143ae:	d004      	beq.n	80143ba <USB_EPStartXfer+0x642>
 80143b0:	187b      	adds	r3, r7, r1
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	3301      	adds	r3, #1
 80143b6:	187a      	adds	r2, r7, r1
 80143b8:	6013      	str	r3, [r2, #0]
 80143ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143bc:	881b      	ldrh	r3, [r3, #0]
 80143be:	b29a      	uxth	r2, r3
 80143c0:	23f4      	movs	r3, #244	@ 0xf4
 80143c2:	18fb      	adds	r3, r7, r3
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	029b      	lsls	r3, r3, #10
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	4313      	orrs	r3, r2
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143d2:	801a      	strh	r2, [r3, #0]
 80143d4:	e01a      	b.n	801440c <USB_EPStartXfer+0x694>
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	785b      	ldrb	r3, [r3, #1]
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d116      	bne.n	801440c <USB_EPStartXfer+0x694>
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2250      	movs	r2, #80	@ 0x50
 80143e2:	5a9b      	ldrh	r3, [r3, r2]
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	001a      	movs	r2, r3
 80143e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80143ea:	189b      	adds	r3, r3, r2
 80143ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	781b      	ldrb	r3, [r3, #0]
 80143f2:	00da      	lsls	r2, r3, #3
 80143f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80143f6:	18d3      	adds	r3, r2, r3
 80143f8:	4a33      	ldr	r2, [pc, #204]	@ (80144c8 <USB_EPStartXfer+0x750>)
 80143fa:	4694      	mov	ip, r2
 80143fc:	4463      	add	r3, ip
 80143fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014400:	1d7b      	adds	r3, r7, #5
 8014402:	33ff      	adds	r3, #255	@ 0xff
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	b29a      	uxth	r2, r3
 8014408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801440a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801440c:	2076      	movs	r0, #118	@ 0x76
 801440e:	183b      	adds	r3, r7, r0
 8014410:	683a      	ldr	r2, [r7, #0]
 8014412:	8952      	ldrh	r2, [r2, #10]
 8014414:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	6959      	ldr	r1, [r3, #20]
 801441a:	1d7b      	adds	r3, r7, #5
 801441c:	33ff      	adds	r3, #255	@ 0xff
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	b29c      	uxth	r4, r3
 8014422:	183b      	adds	r3, r7, r0
 8014424:	881a      	ldrh	r2, [r3, #0]
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	0023      	movs	r3, r4
 801442a:	f000 ff17 	bl	801525c <USB_WritePMA>
 801442e:	e1b6      	b.n	801479e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	6a1b      	ldr	r3, [r3, #32]
 8014434:	1d7a      	adds	r2, r7, #5
 8014436:	32ff      	adds	r2, #255	@ 0xff
 8014438:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	18d3      	adds	r3, r2, r3
 8014444:	881b      	ldrh	r3, [r3, #0]
 8014446:	b29a      	uxth	r2, r3
 8014448:	2062      	movs	r0, #98	@ 0x62
 801444a:	183b      	adds	r3, r7, r0
 801444c:	491f      	ldr	r1, [pc, #124]	@ (80144cc <USB_EPStartXfer+0x754>)
 801444e:	400a      	ands	r2, r1
 8014450:	801a      	strh	r2, [r3, #0]
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	18d3      	adds	r3, r2, r3
 801445c:	183a      	adds	r2, r7, r0
 801445e:	8812      	ldrh	r2, [r2, #0]
 8014460:	491b      	ldr	r1, [pc, #108]	@ (80144d0 <USB_EPStartXfer+0x758>)
 8014462:	430a      	orrs	r2, r1
 8014464:	b292      	uxth	r2, r2
 8014466:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2250      	movs	r2, #80	@ 0x50
 8014470:	5a9b      	ldrh	r3, [r3, r2]
 8014472:	b29b      	uxth	r3, r3
 8014474:	001a      	movs	r2, r3
 8014476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014478:	189b      	adds	r3, r3, r2
 801447a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	00da      	lsls	r2, r3, #3
 8014482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014484:	18d3      	adds	r3, r2, r3
 8014486:	4a0e      	ldr	r2, [pc, #56]	@ (80144c0 <USB_EPStartXfer+0x748>)
 8014488:	4694      	mov	ip, r2
 801448a:	4463      	add	r3, ip
 801448c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801448e:	1d7b      	adds	r3, r7, #5
 8014490:	33ff      	adds	r3, #255	@ 0xff
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	b29a      	uxth	r2, r3
 8014496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014498:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801449a:	2076      	movs	r0, #118	@ 0x76
 801449c:	183b      	adds	r3, r7, r0
 801449e:	683a      	ldr	r2, [r7, #0]
 80144a0:	8912      	ldrh	r2, [r2, #8]
 80144a2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	6959      	ldr	r1, [r3, #20]
 80144a8:	1d7b      	adds	r3, r7, #5
 80144aa:	33ff      	adds	r3, #255	@ 0xff
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	b29c      	uxth	r4, r3
 80144b0:	183b      	adds	r3, r7, r0
 80144b2:	881a      	ldrh	r2, [r3, #0]
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	0023      	movs	r3, r4
 80144b8:	f000 fed0 	bl	801525c <USB_WritePMA>
 80144bc:	e16f      	b.n	801479e <USB_EPStartXfer+0xa26>
 80144be:	46c0      	nop			@ (mov r8, r8)
 80144c0:	00000402 	.word	0x00000402
 80144c4:	ffff8000 	.word	0xffff8000
 80144c8:	00000406 	.word	0x00000406
 80144cc:	ffff8e8f 	.word	0xffff8e8f
 80144d0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	6a1a      	ldr	r2, [r3, #32]
 80144d8:	1d7b      	adds	r3, r7, #5
 80144da:	33ff      	adds	r3, #255	@ 0xff
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	1ad2      	subs	r2, r2, r3
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80144e4:	687a      	ldr	r2, [r7, #4]
 80144e6:	683b      	ldr	r3, [r7, #0]
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	18d3      	adds	r3, r2, r3
 80144ee:	881b      	ldrh	r3, [r3, #0]
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	001a      	movs	r2, r3
 80144f4:	2340      	movs	r3, #64	@ 0x40
 80144f6:	4013      	ands	r3, r2
 80144f8:	d100      	bne.n	80144fc <USB_EPStartXfer+0x784>
 80144fa:	e0a4      	b.n	8014646 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8014500:	683b      	ldr	r3, [r7, #0]
 8014502:	785b      	ldrb	r3, [r3, #1]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d000      	beq.n	801450a <USB_EPStartXfer+0x792>
 8014508:	e070      	b.n	80145ec <USB_EPStartXfer+0x874>
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2250      	movs	r2, #80	@ 0x50
 8014512:	5a9b      	ldrh	r3, [r3, r2]
 8014514:	b29b      	uxth	r3, r3
 8014516:	001a      	movs	r2, r3
 8014518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801451a:	189b      	adds	r3, r3, r2
 801451c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	00da      	lsls	r2, r3, #3
 8014524:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014526:	18d3      	adds	r3, r2, r3
 8014528:	4abc      	ldr	r2, [pc, #752]	@ (801481c <USB_EPStartXfer+0xaa4>)
 801452a:	4694      	mov	ip, r2
 801452c:	4463      	add	r3, ip
 801452e:	667b      	str	r3, [r7, #100]	@ 0x64
 8014530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014532:	881b      	ldrh	r3, [r3, #0]
 8014534:	b29b      	uxth	r3, r3
 8014536:	059b      	lsls	r3, r3, #22
 8014538:	0d9b      	lsrs	r3, r3, #22
 801453a:	b29a      	uxth	r2, r3
 801453c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801453e:	801a      	strh	r2, [r3, #0]
 8014540:	1d7b      	adds	r3, r7, #5
 8014542:	33ff      	adds	r3, #255	@ 0xff
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2b3e      	cmp	r3, #62	@ 0x3e
 8014548:	d922      	bls.n	8014590 <USB_EPStartXfer+0x818>
 801454a:	1d7b      	adds	r3, r7, #5
 801454c:	33ff      	adds	r3, #255	@ 0xff
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	095b      	lsrs	r3, r3, #5
 8014552:	21f0      	movs	r1, #240	@ 0xf0
 8014554:	187a      	adds	r2, r7, r1
 8014556:	6013      	str	r3, [r2, #0]
 8014558:	1d7b      	adds	r3, r7, #5
 801455a:	33ff      	adds	r3, #255	@ 0xff
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	221f      	movs	r2, #31
 8014560:	4013      	ands	r3, r2
 8014562:	d104      	bne.n	801456e <USB_EPStartXfer+0x7f6>
 8014564:	187b      	adds	r3, r7, r1
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	3b01      	subs	r3, #1
 801456a:	187a      	adds	r2, r7, r1
 801456c:	6013      	str	r3, [r2, #0]
 801456e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014570:	881b      	ldrh	r3, [r3, #0]
 8014572:	b29a      	uxth	r2, r3
 8014574:	23f0      	movs	r3, #240	@ 0xf0
 8014576:	18fb      	adds	r3, r7, r3
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	b29b      	uxth	r3, r3
 801457c:	029b      	lsls	r3, r3, #10
 801457e:	b29b      	uxth	r3, r3
 8014580:	4313      	orrs	r3, r2
 8014582:	b29b      	uxth	r3, r3
 8014584:	4aa6      	ldr	r2, [pc, #664]	@ (8014820 <USB_EPStartXfer+0xaa8>)
 8014586:	4313      	orrs	r3, r2
 8014588:	b29a      	uxth	r2, r3
 801458a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801458c:	801a      	strh	r2, [r3, #0]
 801458e:	e048      	b.n	8014622 <USB_EPStartXfer+0x8aa>
 8014590:	1d7b      	adds	r3, r7, #5
 8014592:	33ff      	adds	r3, #255	@ 0xff
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d108      	bne.n	80145ac <USB_EPStartXfer+0x834>
 801459a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801459c:	881b      	ldrh	r3, [r3, #0]
 801459e:	b29b      	uxth	r3, r3
 80145a0:	4a9f      	ldr	r2, [pc, #636]	@ (8014820 <USB_EPStartXfer+0xaa8>)
 80145a2:	4313      	orrs	r3, r2
 80145a4:	b29a      	uxth	r2, r3
 80145a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80145a8:	801a      	strh	r2, [r3, #0]
 80145aa:	e03a      	b.n	8014622 <USB_EPStartXfer+0x8aa>
 80145ac:	1d7b      	adds	r3, r7, #5
 80145ae:	33ff      	adds	r3, #255	@ 0xff
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	085b      	lsrs	r3, r3, #1
 80145b4:	21f0      	movs	r1, #240	@ 0xf0
 80145b6:	187a      	adds	r2, r7, r1
 80145b8:	6013      	str	r3, [r2, #0]
 80145ba:	1d7b      	adds	r3, r7, #5
 80145bc:	33ff      	adds	r3, #255	@ 0xff
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2201      	movs	r2, #1
 80145c2:	4013      	ands	r3, r2
 80145c4:	d004      	beq.n	80145d0 <USB_EPStartXfer+0x858>
 80145c6:	187b      	adds	r3, r7, r1
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	3301      	adds	r3, #1
 80145cc:	187a      	adds	r2, r7, r1
 80145ce:	6013      	str	r3, [r2, #0]
 80145d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80145d2:	881b      	ldrh	r3, [r3, #0]
 80145d4:	b29a      	uxth	r2, r3
 80145d6:	23f0      	movs	r3, #240	@ 0xf0
 80145d8:	18fb      	adds	r3, r7, r3
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	b29b      	uxth	r3, r3
 80145de:	029b      	lsls	r3, r3, #10
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	4313      	orrs	r3, r2
 80145e4:	b29a      	uxth	r2, r3
 80145e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80145e8:	801a      	strh	r2, [r3, #0]
 80145ea:	e01a      	b.n	8014622 <USB_EPStartXfer+0x8aa>
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	785b      	ldrb	r3, [r3, #1]
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d116      	bne.n	8014622 <USB_EPStartXfer+0x8aa>
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2250      	movs	r2, #80	@ 0x50
 80145f8:	5a9b      	ldrh	r3, [r3, r2]
 80145fa:	b29b      	uxth	r3, r3
 80145fc:	001a      	movs	r2, r3
 80145fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014600:	189b      	adds	r3, r3, r2
 8014602:	673b      	str	r3, [r7, #112]	@ 0x70
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	00da      	lsls	r2, r3, #3
 801460a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801460c:	18d3      	adds	r3, r2, r3
 801460e:	4a83      	ldr	r2, [pc, #524]	@ (801481c <USB_EPStartXfer+0xaa4>)
 8014610:	4694      	mov	ip, r2
 8014612:	4463      	add	r3, ip
 8014614:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014616:	1d7b      	adds	r3, r7, #5
 8014618:	33ff      	adds	r3, #255	@ 0xff
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	b29a      	uxth	r2, r3
 801461e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014620:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8014622:	2076      	movs	r0, #118	@ 0x76
 8014624:	183b      	adds	r3, r7, r0
 8014626:	683a      	ldr	r2, [r7, #0]
 8014628:	8952      	ldrh	r2, [r2, #10]
 801462a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	6959      	ldr	r1, [r3, #20]
 8014630:	1d7b      	adds	r3, r7, #5
 8014632:	33ff      	adds	r3, #255	@ 0xff
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	b29c      	uxth	r4, r3
 8014638:	183b      	adds	r3, r7, r0
 801463a:	881a      	ldrh	r2, [r3, #0]
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	0023      	movs	r3, r4
 8014640:	f000 fe0c 	bl	801525c <USB_WritePMA>
 8014644:	e0ab      	b.n	801479e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	785b      	ldrb	r3, [r3, #1]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d000      	beq.n	8014650 <USB_EPStartXfer+0x8d8>
 801464e:	e070      	b.n	8014732 <USB_EPStartXfer+0x9ba>
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2250      	movs	r2, #80	@ 0x50
 8014658:	5a9b      	ldrh	r3, [r3, r2]
 801465a:	b29b      	uxth	r3, r3
 801465c:	001a      	movs	r2, r3
 801465e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014660:	189b      	adds	r3, r3, r2
 8014662:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	00da      	lsls	r2, r3, #3
 801466a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801466c:	18d3      	adds	r3, r2, r3
 801466e:	4a6d      	ldr	r2, [pc, #436]	@ (8014824 <USB_EPStartXfer+0xaac>)
 8014670:	4694      	mov	ip, r2
 8014672:	4463      	add	r3, ip
 8014674:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014676:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014678:	881b      	ldrh	r3, [r3, #0]
 801467a:	b29b      	uxth	r3, r3
 801467c:	059b      	lsls	r3, r3, #22
 801467e:	0d9b      	lsrs	r3, r3, #22
 8014680:	b29a      	uxth	r2, r3
 8014682:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014684:	801a      	strh	r2, [r3, #0]
 8014686:	1d7b      	adds	r3, r7, #5
 8014688:	33ff      	adds	r3, #255	@ 0xff
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2b3e      	cmp	r3, #62	@ 0x3e
 801468e:	d922      	bls.n	80146d6 <USB_EPStartXfer+0x95e>
 8014690:	1d7b      	adds	r3, r7, #5
 8014692:	33ff      	adds	r3, #255	@ 0xff
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	095b      	lsrs	r3, r3, #5
 8014698:	21ec      	movs	r1, #236	@ 0xec
 801469a:	187a      	adds	r2, r7, r1
 801469c:	6013      	str	r3, [r2, #0]
 801469e:	1d7b      	adds	r3, r7, #5
 80146a0:	33ff      	adds	r3, #255	@ 0xff
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	221f      	movs	r2, #31
 80146a6:	4013      	ands	r3, r2
 80146a8:	d104      	bne.n	80146b4 <USB_EPStartXfer+0x93c>
 80146aa:	187b      	adds	r3, r7, r1
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	3b01      	subs	r3, #1
 80146b0:	187a      	adds	r2, r7, r1
 80146b2:	6013      	str	r3, [r2, #0]
 80146b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146b6:	881b      	ldrh	r3, [r3, #0]
 80146b8:	b29a      	uxth	r2, r3
 80146ba:	23ec      	movs	r3, #236	@ 0xec
 80146bc:	18fb      	adds	r3, r7, r3
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	b29b      	uxth	r3, r3
 80146c2:	029b      	lsls	r3, r3, #10
 80146c4:	b29b      	uxth	r3, r3
 80146c6:	4313      	orrs	r3, r2
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	4a55      	ldr	r2, [pc, #340]	@ (8014820 <USB_EPStartXfer+0xaa8>)
 80146cc:	4313      	orrs	r3, r2
 80146ce:	b29a      	uxth	r2, r3
 80146d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146d2:	801a      	strh	r2, [r3, #0]
 80146d4:	e052      	b.n	801477c <USB_EPStartXfer+0xa04>
 80146d6:	1d7b      	adds	r3, r7, #5
 80146d8:	33ff      	adds	r3, #255	@ 0xff
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d108      	bne.n	80146f2 <USB_EPStartXfer+0x97a>
 80146e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146e2:	881b      	ldrh	r3, [r3, #0]
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	4a4e      	ldr	r2, [pc, #312]	@ (8014820 <USB_EPStartXfer+0xaa8>)
 80146e8:	4313      	orrs	r3, r2
 80146ea:	b29a      	uxth	r2, r3
 80146ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146ee:	801a      	strh	r2, [r3, #0]
 80146f0:	e044      	b.n	801477c <USB_EPStartXfer+0xa04>
 80146f2:	1d7b      	adds	r3, r7, #5
 80146f4:	33ff      	adds	r3, #255	@ 0xff
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	085b      	lsrs	r3, r3, #1
 80146fa:	21ec      	movs	r1, #236	@ 0xec
 80146fc:	187a      	adds	r2, r7, r1
 80146fe:	6013      	str	r3, [r2, #0]
 8014700:	1d7b      	adds	r3, r7, #5
 8014702:	33ff      	adds	r3, #255	@ 0xff
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	2201      	movs	r2, #1
 8014708:	4013      	ands	r3, r2
 801470a:	d004      	beq.n	8014716 <USB_EPStartXfer+0x99e>
 801470c:	187b      	adds	r3, r7, r1
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	3301      	adds	r3, #1
 8014712:	187a      	adds	r2, r7, r1
 8014714:	6013      	str	r3, [r2, #0]
 8014716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014718:	881b      	ldrh	r3, [r3, #0]
 801471a:	b29a      	uxth	r2, r3
 801471c:	23ec      	movs	r3, #236	@ 0xec
 801471e:	18fb      	adds	r3, r7, r3
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	b29b      	uxth	r3, r3
 8014724:	029b      	lsls	r3, r3, #10
 8014726:	b29b      	uxth	r3, r3
 8014728:	4313      	orrs	r3, r2
 801472a:	b29a      	uxth	r2, r3
 801472c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801472e:	801a      	strh	r2, [r3, #0]
 8014730:	e024      	b.n	801477c <USB_EPStartXfer+0xa04>
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	785b      	ldrb	r3, [r3, #1]
 8014736:	2b01      	cmp	r3, #1
 8014738:	d120      	bne.n	801477c <USB_EPStartXfer+0xa04>
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	2184      	movs	r1, #132	@ 0x84
 801473e:	187a      	adds	r2, r7, r1
 8014740:	6013      	str	r3, [r2, #0]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2250      	movs	r2, #80	@ 0x50
 8014746:	5a9b      	ldrh	r3, [r3, r2]
 8014748:	b29b      	uxth	r3, r3
 801474a:	001a      	movs	r2, r3
 801474c:	187b      	adds	r3, r7, r1
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	189b      	adds	r3, r3, r2
 8014752:	187a      	adds	r2, r7, r1
 8014754:	6013      	str	r3, [r2, #0]
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	00da      	lsls	r2, r3, #3
 801475c:	187b      	adds	r3, r7, r1
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	18d3      	adds	r3, r2, r3
 8014762:	4a30      	ldr	r2, [pc, #192]	@ (8014824 <USB_EPStartXfer+0xaac>)
 8014764:	4694      	mov	ip, r2
 8014766:	4463      	add	r3, ip
 8014768:	2180      	movs	r1, #128	@ 0x80
 801476a:	187a      	adds	r2, r7, r1
 801476c:	6013      	str	r3, [r2, #0]
 801476e:	1d7b      	adds	r3, r7, #5
 8014770:	33ff      	adds	r3, #255	@ 0xff
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	b29a      	uxth	r2, r3
 8014776:	187b      	adds	r3, r7, r1
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801477c:	2076      	movs	r0, #118	@ 0x76
 801477e:	183b      	adds	r3, r7, r0
 8014780:	683a      	ldr	r2, [r7, #0]
 8014782:	8912      	ldrh	r2, [r2, #8]
 8014784:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	6959      	ldr	r1, [r3, #20]
 801478a:	1d7b      	adds	r3, r7, #5
 801478c:	33ff      	adds	r3, #255	@ 0xff
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	b29c      	uxth	r4, r3
 8014792:	183b      	adds	r3, r7, r0
 8014794:	881a      	ldrh	r2, [r3, #0]
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	0023      	movs	r3, r4
 801479a:	f000 fd5f 	bl	801525c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	009b      	lsls	r3, r3, #2
 80147a6:	18d3      	adds	r3, r2, r3
 80147a8:	881b      	ldrh	r3, [r3, #0]
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	200a      	movs	r0, #10
 80147ae:	183b      	adds	r3, r7, r0
 80147b0:	491d      	ldr	r1, [pc, #116]	@ (8014828 <USB_EPStartXfer+0xab0>)
 80147b2:	400a      	ands	r2, r1
 80147b4:	801a      	strh	r2, [r3, #0]
 80147b6:	183b      	adds	r3, r7, r0
 80147b8:	183a      	adds	r2, r7, r0
 80147ba:	8812      	ldrh	r2, [r2, #0]
 80147bc:	2110      	movs	r1, #16
 80147be:	404a      	eors	r2, r1
 80147c0:	801a      	strh	r2, [r3, #0]
 80147c2:	183b      	adds	r3, r7, r0
 80147c4:	183a      	adds	r2, r7, r0
 80147c6:	8812      	ldrh	r2, [r2, #0]
 80147c8:	2120      	movs	r1, #32
 80147ca:	404a      	eors	r2, r1
 80147cc:	801a      	strh	r2, [r3, #0]
 80147ce:	687a      	ldr	r2, [r7, #4]
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	18d3      	adds	r3, r2, r3
 80147d8:	183a      	adds	r2, r7, r0
 80147da:	8812      	ldrh	r2, [r2, #0]
 80147dc:	4913      	ldr	r1, [pc, #76]	@ (801482c <USB_EPStartXfer+0xab4>)
 80147de:	430a      	orrs	r2, r1
 80147e0:	b292      	uxth	r2, r2
 80147e2:	801a      	strh	r2, [r3, #0]
 80147e4:	f000 fbf4 	bl	8014fd0 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	7b1b      	ldrb	r3, [r3, #12]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d000      	beq.n	80147f2 <USB_EPStartXfer+0xa7a>
 80147f0:	e0a9      	b.n	8014946 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	699a      	ldr	r2, [r3, #24]
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	691b      	ldr	r3, [r3, #16]
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d918      	bls.n	8014830 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	691b      	ldr	r3, [r3, #16]
 8014802:	1d7a      	adds	r2, r7, #5
 8014804:	32ff      	adds	r2, #255	@ 0xff
 8014806:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	699a      	ldr	r2, [r3, #24]
 801480c:	1d7b      	adds	r3, r7, #5
 801480e:	33ff      	adds	r3, #255	@ 0xff
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	1ad2      	subs	r2, r2, r3
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	619a      	str	r2, [r3, #24]
 8014818:	e012      	b.n	8014840 <USB_EPStartXfer+0xac8>
 801481a:	46c0      	nop			@ (mov r8, r8)
 801481c:	00000406 	.word	0x00000406
 8014820:	ffff8000 	.word	0xffff8000
 8014824:	00000402 	.word	0x00000402
 8014828:	ffff8fbf 	.word	0xffff8fbf
 801482c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	699b      	ldr	r3, [r3, #24]
 8014834:	1d7a      	adds	r2, r7, #5
 8014836:	32ff      	adds	r2, #255	@ 0xff
 8014838:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801483a:	683b      	ldr	r3, [r7, #0]
 801483c:	2200      	movs	r2, #0
 801483e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2190      	movs	r1, #144	@ 0x90
 8014844:	187a      	adds	r2, r7, r1
 8014846:	6013      	str	r3, [r2, #0]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2250      	movs	r2, #80	@ 0x50
 801484c:	5a9b      	ldrh	r3, [r3, r2]
 801484e:	b29b      	uxth	r3, r3
 8014850:	001a      	movs	r2, r3
 8014852:	187b      	adds	r3, r7, r1
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	189b      	adds	r3, r3, r2
 8014858:	187a      	adds	r2, r7, r1
 801485a:	6013      	str	r3, [r2, #0]
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	781b      	ldrb	r3, [r3, #0]
 8014860:	00da      	lsls	r2, r3, #3
 8014862:	187b      	adds	r3, r7, r1
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	18d3      	adds	r3, r2, r3
 8014868:	4acf      	ldr	r2, [pc, #828]	@ (8014ba8 <USB_EPStartXfer+0xe30>)
 801486a:	4694      	mov	ip, r2
 801486c:	4463      	add	r3, ip
 801486e:	218c      	movs	r1, #140	@ 0x8c
 8014870:	187a      	adds	r2, r7, r1
 8014872:	6013      	str	r3, [r2, #0]
 8014874:	187b      	adds	r3, r7, r1
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	881b      	ldrh	r3, [r3, #0]
 801487a:	b29b      	uxth	r3, r3
 801487c:	059b      	lsls	r3, r3, #22
 801487e:	0d9b      	lsrs	r3, r3, #22
 8014880:	b29a      	uxth	r2, r3
 8014882:	187b      	adds	r3, r7, r1
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	801a      	strh	r2, [r3, #0]
 8014888:	1d7b      	adds	r3, r7, #5
 801488a:	33ff      	adds	r3, #255	@ 0xff
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b3e      	cmp	r3, #62	@ 0x3e
 8014890:	d925      	bls.n	80148de <USB_EPStartXfer+0xb66>
 8014892:	1d7b      	adds	r3, r7, #5
 8014894:	33ff      	adds	r3, #255	@ 0xff
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	095b      	lsrs	r3, r3, #5
 801489a:	21e8      	movs	r1, #232	@ 0xe8
 801489c:	187a      	adds	r2, r7, r1
 801489e:	6013      	str	r3, [r2, #0]
 80148a0:	1d7b      	adds	r3, r7, #5
 80148a2:	33ff      	adds	r3, #255	@ 0xff
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	221f      	movs	r2, #31
 80148a8:	4013      	ands	r3, r2
 80148aa:	d104      	bne.n	80148b6 <USB_EPStartXfer+0xb3e>
 80148ac:	187b      	adds	r3, r7, r1
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	3b01      	subs	r3, #1
 80148b2:	187a      	adds	r2, r7, r1
 80148b4:	6013      	str	r3, [r2, #0]
 80148b6:	218c      	movs	r1, #140	@ 0x8c
 80148b8:	187b      	adds	r3, r7, r1
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	881b      	ldrh	r3, [r3, #0]
 80148be:	b29a      	uxth	r2, r3
 80148c0:	23e8      	movs	r3, #232	@ 0xe8
 80148c2:	18fb      	adds	r3, r7, r3
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	b29b      	uxth	r3, r3
 80148c8:	029b      	lsls	r3, r3, #10
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	4313      	orrs	r3, r2
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	4ab6      	ldr	r2, [pc, #728]	@ (8014bac <USB_EPStartXfer+0xe34>)
 80148d2:	4313      	orrs	r3, r2
 80148d4:	b29a      	uxth	r2, r3
 80148d6:	187b      	adds	r3, r7, r1
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	801a      	strh	r2, [r3, #0]
 80148dc:	e353      	b.n	8014f86 <USB_EPStartXfer+0x120e>
 80148de:	1d7b      	adds	r3, r7, #5
 80148e0:	33ff      	adds	r3, #255	@ 0xff
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d10b      	bne.n	8014900 <USB_EPStartXfer+0xb88>
 80148e8:	218c      	movs	r1, #140	@ 0x8c
 80148ea:	187b      	adds	r3, r7, r1
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	881b      	ldrh	r3, [r3, #0]
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	4aae      	ldr	r2, [pc, #696]	@ (8014bac <USB_EPStartXfer+0xe34>)
 80148f4:	4313      	orrs	r3, r2
 80148f6:	b29a      	uxth	r2, r3
 80148f8:	187b      	adds	r3, r7, r1
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	801a      	strh	r2, [r3, #0]
 80148fe:	e342      	b.n	8014f86 <USB_EPStartXfer+0x120e>
 8014900:	1d7b      	adds	r3, r7, #5
 8014902:	33ff      	adds	r3, #255	@ 0xff
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	085b      	lsrs	r3, r3, #1
 8014908:	21e8      	movs	r1, #232	@ 0xe8
 801490a:	187a      	adds	r2, r7, r1
 801490c:	6013      	str	r3, [r2, #0]
 801490e:	1d7b      	adds	r3, r7, #5
 8014910:	33ff      	adds	r3, #255	@ 0xff
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	2201      	movs	r2, #1
 8014916:	4013      	ands	r3, r2
 8014918:	d004      	beq.n	8014924 <USB_EPStartXfer+0xbac>
 801491a:	187b      	adds	r3, r7, r1
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	3301      	adds	r3, #1
 8014920:	187a      	adds	r2, r7, r1
 8014922:	6013      	str	r3, [r2, #0]
 8014924:	218c      	movs	r1, #140	@ 0x8c
 8014926:	187b      	adds	r3, r7, r1
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	881b      	ldrh	r3, [r3, #0]
 801492c:	b29a      	uxth	r2, r3
 801492e:	23e8      	movs	r3, #232	@ 0xe8
 8014930:	18fb      	adds	r3, r7, r3
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	b29b      	uxth	r3, r3
 8014936:	029b      	lsls	r3, r3, #10
 8014938:	b29b      	uxth	r3, r3
 801493a:	4313      	orrs	r3, r2
 801493c:	b29a      	uxth	r2, r3
 801493e:	187b      	adds	r3, r7, r1
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	801a      	strh	r2, [r3, #0]
 8014944:	e31f      	b.n	8014f86 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	78db      	ldrb	r3, [r3, #3]
 801494a:	2b02      	cmp	r3, #2
 801494c:	d000      	beq.n	8014950 <USB_EPStartXfer+0xbd8>
 801494e:	e191      	b.n	8014c74 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	785b      	ldrb	r3, [r3, #1]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d000      	beq.n	801495a <USB_EPStartXfer+0xbe2>
 8014958:	e07c      	b.n	8014a54 <USB_EPStartXfer+0xcdc>
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	21ac      	movs	r1, #172	@ 0xac
 801495e:	187a      	adds	r2, r7, r1
 8014960:	6013      	str	r3, [r2, #0]
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2250      	movs	r2, #80	@ 0x50
 8014966:	5a9b      	ldrh	r3, [r3, r2]
 8014968:	b29b      	uxth	r3, r3
 801496a:	001a      	movs	r2, r3
 801496c:	187b      	adds	r3, r7, r1
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	189b      	adds	r3, r3, r2
 8014972:	187a      	adds	r2, r7, r1
 8014974:	6013      	str	r3, [r2, #0]
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	00da      	lsls	r2, r3, #3
 801497c:	187b      	adds	r3, r7, r1
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	18d3      	adds	r3, r2, r3
 8014982:	4a8b      	ldr	r2, [pc, #556]	@ (8014bb0 <USB_EPStartXfer+0xe38>)
 8014984:	4694      	mov	ip, r2
 8014986:	4463      	add	r3, ip
 8014988:	21a8      	movs	r1, #168	@ 0xa8
 801498a:	187a      	adds	r2, r7, r1
 801498c:	6013      	str	r3, [r2, #0]
 801498e:	187b      	adds	r3, r7, r1
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	881b      	ldrh	r3, [r3, #0]
 8014994:	b29b      	uxth	r3, r3
 8014996:	059b      	lsls	r3, r3, #22
 8014998:	0d9b      	lsrs	r3, r3, #22
 801499a:	b29a      	uxth	r2, r3
 801499c:	187b      	adds	r3, r7, r1
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	801a      	strh	r2, [r3, #0]
 80149a2:	683b      	ldr	r3, [r7, #0]
 80149a4:	691b      	ldr	r3, [r3, #16]
 80149a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80149a8:	d923      	bls.n	80149f2 <USB_EPStartXfer+0xc7a>
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	691b      	ldr	r3, [r3, #16]
 80149ae:	095b      	lsrs	r3, r3, #5
 80149b0:	21e4      	movs	r1, #228	@ 0xe4
 80149b2:	187a      	adds	r2, r7, r1
 80149b4:	6013      	str	r3, [r2, #0]
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	691b      	ldr	r3, [r3, #16]
 80149ba:	221f      	movs	r2, #31
 80149bc:	4013      	ands	r3, r2
 80149be:	d104      	bne.n	80149ca <USB_EPStartXfer+0xc52>
 80149c0:	187b      	adds	r3, r7, r1
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	3b01      	subs	r3, #1
 80149c6:	187a      	adds	r2, r7, r1
 80149c8:	6013      	str	r3, [r2, #0]
 80149ca:	21a8      	movs	r1, #168	@ 0xa8
 80149cc:	187b      	adds	r3, r7, r1
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	881b      	ldrh	r3, [r3, #0]
 80149d2:	b29a      	uxth	r2, r3
 80149d4:	23e4      	movs	r3, #228	@ 0xe4
 80149d6:	18fb      	adds	r3, r7, r3
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	b29b      	uxth	r3, r3
 80149dc:	029b      	lsls	r3, r3, #10
 80149de:	b29b      	uxth	r3, r3
 80149e0:	4313      	orrs	r3, r2
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	4a71      	ldr	r2, [pc, #452]	@ (8014bac <USB_EPStartXfer+0xe34>)
 80149e6:	4313      	orrs	r3, r2
 80149e8:	b29a      	uxth	r2, r3
 80149ea:	187b      	adds	r3, r7, r1
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	801a      	strh	r2, [r3, #0]
 80149f0:	e054      	b.n	8014a9c <USB_EPStartXfer+0xd24>
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	691b      	ldr	r3, [r3, #16]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d10b      	bne.n	8014a12 <USB_EPStartXfer+0xc9a>
 80149fa:	21a8      	movs	r1, #168	@ 0xa8
 80149fc:	187b      	adds	r3, r7, r1
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	881b      	ldrh	r3, [r3, #0]
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	4a69      	ldr	r2, [pc, #420]	@ (8014bac <USB_EPStartXfer+0xe34>)
 8014a06:	4313      	orrs	r3, r2
 8014a08:	b29a      	uxth	r2, r3
 8014a0a:	187b      	adds	r3, r7, r1
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	801a      	strh	r2, [r3, #0]
 8014a10:	e044      	b.n	8014a9c <USB_EPStartXfer+0xd24>
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	691b      	ldr	r3, [r3, #16]
 8014a16:	085b      	lsrs	r3, r3, #1
 8014a18:	21e4      	movs	r1, #228	@ 0xe4
 8014a1a:	187a      	adds	r2, r7, r1
 8014a1c:	6013      	str	r3, [r2, #0]
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	691b      	ldr	r3, [r3, #16]
 8014a22:	2201      	movs	r2, #1
 8014a24:	4013      	ands	r3, r2
 8014a26:	d004      	beq.n	8014a32 <USB_EPStartXfer+0xcba>
 8014a28:	187b      	adds	r3, r7, r1
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	187a      	adds	r2, r7, r1
 8014a30:	6013      	str	r3, [r2, #0]
 8014a32:	21a8      	movs	r1, #168	@ 0xa8
 8014a34:	187b      	adds	r3, r7, r1
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	881b      	ldrh	r3, [r3, #0]
 8014a3a:	b29a      	uxth	r2, r3
 8014a3c:	23e4      	movs	r3, #228	@ 0xe4
 8014a3e:	18fb      	adds	r3, r7, r3
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	b29b      	uxth	r3, r3
 8014a44:	029b      	lsls	r3, r3, #10
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	b29a      	uxth	r2, r3
 8014a4c:	187b      	adds	r3, r7, r1
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	801a      	strh	r2, [r3, #0]
 8014a52:	e023      	b.n	8014a9c <USB_EPStartXfer+0xd24>
 8014a54:	683b      	ldr	r3, [r7, #0]
 8014a56:	785b      	ldrb	r3, [r3, #1]
 8014a58:	2b01      	cmp	r3, #1
 8014a5a:	d11f      	bne.n	8014a9c <USB_EPStartXfer+0xd24>
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	21b4      	movs	r1, #180	@ 0xb4
 8014a60:	187a      	adds	r2, r7, r1
 8014a62:	6013      	str	r3, [r2, #0]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2250      	movs	r2, #80	@ 0x50
 8014a68:	5a9b      	ldrh	r3, [r3, r2]
 8014a6a:	b29b      	uxth	r3, r3
 8014a6c:	001a      	movs	r2, r3
 8014a6e:	187b      	adds	r3, r7, r1
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	189b      	adds	r3, r3, r2
 8014a74:	187a      	adds	r2, r7, r1
 8014a76:	6013      	str	r3, [r2, #0]
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	781b      	ldrb	r3, [r3, #0]
 8014a7c:	00da      	lsls	r2, r3, #3
 8014a7e:	187b      	adds	r3, r7, r1
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	18d3      	adds	r3, r2, r3
 8014a84:	4a4a      	ldr	r2, [pc, #296]	@ (8014bb0 <USB_EPStartXfer+0xe38>)
 8014a86:	4694      	mov	ip, r2
 8014a88:	4463      	add	r3, ip
 8014a8a:	21b0      	movs	r1, #176	@ 0xb0
 8014a8c:	187a      	adds	r2, r7, r1
 8014a8e:	6013      	str	r3, [r2, #0]
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	691b      	ldr	r3, [r3, #16]
 8014a94:	b29a      	uxth	r2, r3
 8014a96:	187b      	adds	r3, r7, r1
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	801a      	strh	r2, [r3, #0]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	22a4      	movs	r2, #164	@ 0xa4
 8014aa0:	18ba      	adds	r2, r7, r2
 8014aa2:	6013      	str	r3, [r2, #0]
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	785b      	ldrb	r3, [r3, #1]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d000      	beq.n	8014aae <USB_EPStartXfer+0xd36>
 8014aac:	e082      	b.n	8014bb4 <USB_EPStartXfer+0xe3c>
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	219c      	movs	r1, #156	@ 0x9c
 8014ab2:	187a      	adds	r2, r7, r1
 8014ab4:	6013      	str	r3, [r2, #0]
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2250      	movs	r2, #80	@ 0x50
 8014aba:	5a9b      	ldrh	r3, [r3, r2]
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	001a      	movs	r2, r3
 8014ac0:	187b      	adds	r3, r7, r1
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	189b      	adds	r3, r3, r2
 8014ac6:	187a      	adds	r2, r7, r1
 8014ac8:	6013      	str	r3, [r2, #0]
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	00da      	lsls	r2, r3, #3
 8014ad0:	187b      	adds	r3, r7, r1
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	18d3      	adds	r3, r2, r3
 8014ad6:	4a34      	ldr	r2, [pc, #208]	@ (8014ba8 <USB_EPStartXfer+0xe30>)
 8014ad8:	4694      	mov	ip, r2
 8014ada:	4463      	add	r3, ip
 8014adc:	2198      	movs	r1, #152	@ 0x98
 8014ade:	187a      	adds	r2, r7, r1
 8014ae0:	6013      	str	r3, [r2, #0]
 8014ae2:	187b      	adds	r3, r7, r1
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	881b      	ldrh	r3, [r3, #0]
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	059b      	lsls	r3, r3, #22
 8014aec:	0d9b      	lsrs	r3, r3, #22
 8014aee:	b29a      	uxth	r2, r3
 8014af0:	187b      	adds	r3, r7, r1
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	801a      	strh	r2, [r3, #0]
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	691b      	ldr	r3, [r3, #16]
 8014afa:	2b3e      	cmp	r3, #62	@ 0x3e
 8014afc:	d923      	bls.n	8014b46 <USB_EPStartXfer+0xdce>
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	691b      	ldr	r3, [r3, #16]
 8014b02:	095b      	lsrs	r3, r3, #5
 8014b04:	21e0      	movs	r1, #224	@ 0xe0
 8014b06:	187a      	adds	r2, r7, r1
 8014b08:	6013      	str	r3, [r2, #0]
 8014b0a:	683b      	ldr	r3, [r7, #0]
 8014b0c:	691b      	ldr	r3, [r3, #16]
 8014b0e:	221f      	movs	r2, #31
 8014b10:	4013      	ands	r3, r2
 8014b12:	d104      	bne.n	8014b1e <USB_EPStartXfer+0xda6>
 8014b14:	187b      	adds	r3, r7, r1
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	3b01      	subs	r3, #1
 8014b1a:	187a      	adds	r2, r7, r1
 8014b1c:	6013      	str	r3, [r2, #0]
 8014b1e:	2198      	movs	r1, #152	@ 0x98
 8014b20:	187b      	adds	r3, r7, r1
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	881b      	ldrh	r3, [r3, #0]
 8014b26:	b29a      	uxth	r2, r3
 8014b28:	23e0      	movs	r3, #224	@ 0xe0
 8014b2a:	18fb      	adds	r3, r7, r3
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	029b      	lsls	r3, r3, #10
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	4313      	orrs	r3, r2
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	4a1c      	ldr	r2, [pc, #112]	@ (8014bac <USB_EPStartXfer+0xe34>)
 8014b3a:	4313      	orrs	r3, r2
 8014b3c:	b29a      	uxth	r2, r3
 8014b3e:	187b      	adds	r3, r7, r1
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	801a      	strh	r2, [r3, #0]
 8014b44:	e057      	b.n	8014bf6 <USB_EPStartXfer+0xe7e>
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	691b      	ldr	r3, [r3, #16]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d10b      	bne.n	8014b66 <USB_EPStartXfer+0xdee>
 8014b4e:	2198      	movs	r1, #152	@ 0x98
 8014b50:	187b      	adds	r3, r7, r1
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	881b      	ldrh	r3, [r3, #0]
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	4a14      	ldr	r2, [pc, #80]	@ (8014bac <USB_EPStartXfer+0xe34>)
 8014b5a:	4313      	orrs	r3, r2
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	187b      	adds	r3, r7, r1
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	801a      	strh	r2, [r3, #0]
 8014b64:	e047      	b.n	8014bf6 <USB_EPStartXfer+0xe7e>
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	691b      	ldr	r3, [r3, #16]
 8014b6a:	085b      	lsrs	r3, r3, #1
 8014b6c:	21e0      	movs	r1, #224	@ 0xe0
 8014b6e:	187a      	adds	r2, r7, r1
 8014b70:	6013      	str	r3, [r2, #0]
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	691b      	ldr	r3, [r3, #16]
 8014b76:	2201      	movs	r2, #1
 8014b78:	4013      	ands	r3, r2
 8014b7a:	d004      	beq.n	8014b86 <USB_EPStartXfer+0xe0e>
 8014b7c:	187b      	adds	r3, r7, r1
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	3301      	adds	r3, #1
 8014b82:	187a      	adds	r2, r7, r1
 8014b84:	6013      	str	r3, [r2, #0]
 8014b86:	2198      	movs	r1, #152	@ 0x98
 8014b88:	187b      	adds	r3, r7, r1
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	881b      	ldrh	r3, [r3, #0]
 8014b8e:	b29a      	uxth	r2, r3
 8014b90:	23e0      	movs	r3, #224	@ 0xe0
 8014b92:	18fb      	adds	r3, r7, r3
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	029b      	lsls	r3, r3, #10
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	4313      	orrs	r3, r2
 8014b9e:	b29a      	uxth	r2, r3
 8014ba0:	187b      	adds	r3, r7, r1
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	801a      	strh	r2, [r3, #0]
 8014ba6:	e026      	b.n	8014bf6 <USB_EPStartXfer+0xe7e>
 8014ba8:	00000406 	.word	0x00000406
 8014bac:	ffff8000 	.word	0xffff8000
 8014bb0:	00000402 	.word	0x00000402
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	785b      	ldrb	r3, [r3, #1]
 8014bb8:	2b01      	cmp	r3, #1
 8014bba:	d11c      	bne.n	8014bf6 <USB_EPStartXfer+0xe7e>
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2250      	movs	r2, #80	@ 0x50
 8014bc0:	5a9b      	ldrh	r3, [r3, r2]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	001a      	movs	r2, r3
 8014bc6:	21a4      	movs	r1, #164	@ 0xa4
 8014bc8:	187b      	adds	r3, r7, r1
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	189b      	adds	r3, r3, r2
 8014bce:	187a      	adds	r2, r7, r1
 8014bd0:	6013      	str	r3, [r2, #0]
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	781b      	ldrb	r3, [r3, #0]
 8014bd6:	00da      	lsls	r2, r3, #3
 8014bd8:	187b      	adds	r3, r7, r1
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	18d3      	adds	r3, r2, r3
 8014bde:	4ad2      	ldr	r2, [pc, #840]	@ (8014f28 <USB_EPStartXfer+0x11b0>)
 8014be0:	4694      	mov	ip, r2
 8014be2:	4463      	add	r3, ip
 8014be4:	21a0      	movs	r1, #160	@ 0xa0
 8014be6:	187a      	adds	r2, r7, r1
 8014be8:	6013      	str	r3, [r2, #0]
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	691b      	ldr	r3, [r3, #16]
 8014bee:	b29a      	uxth	r2, r3
 8014bf0:	187b      	adds	r3, r7, r1
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	69db      	ldr	r3, [r3, #28]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d100      	bne.n	8014c00 <USB_EPStartXfer+0xe88>
 8014bfe:	e1c2      	b.n	8014f86 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	781b      	ldrb	r3, [r3, #0]
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	18d2      	adds	r2, r2, r3
 8014c0a:	2196      	movs	r1, #150	@ 0x96
 8014c0c:	187b      	adds	r3, r7, r1
 8014c0e:	8812      	ldrh	r2, [r2, #0]
 8014c10:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014c12:	187b      	adds	r3, r7, r1
 8014c14:	881a      	ldrh	r2, [r3, #0]
 8014c16:	2380      	movs	r3, #128	@ 0x80
 8014c18:	01db      	lsls	r3, r3, #7
 8014c1a:	4013      	ands	r3, r2
 8014c1c:	d004      	beq.n	8014c28 <USB_EPStartXfer+0xeb0>
 8014c1e:	187b      	adds	r3, r7, r1
 8014c20:	881b      	ldrh	r3, [r3, #0]
 8014c22:	2240      	movs	r2, #64	@ 0x40
 8014c24:	4013      	ands	r3, r2
 8014c26:	d10d      	bne.n	8014c44 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014c28:	2196      	movs	r1, #150	@ 0x96
 8014c2a:	187b      	adds	r3, r7, r1
 8014c2c:	881a      	ldrh	r2, [r3, #0]
 8014c2e:	2380      	movs	r3, #128	@ 0x80
 8014c30:	01db      	lsls	r3, r3, #7
 8014c32:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014c34:	d000      	beq.n	8014c38 <USB_EPStartXfer+0xec0>
 8014c36:	e1a6      	b.n	8014f86 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014c38:	187b      	adds	r3, r7, r1
 8014c3a:	881b      	ldrh	r3, [r3, #0]
 8014c3c:	2240      	movs	r2, #64	@ 0x40
 8014c3e:	4013      	ands	r3, r2
 8014c40:	d000      	beq.n	8014c44 <USB_EPStartXfer+0xecc>
 8014c42:	e1a0      	b.n	8014f86 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8014c44:	687a      	ldr	r2, [r7, #4]
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	18d3      	adds	r3, r2, r3
 8014c4e:	881b      	ldrh	r3, [r3, #0]
 8014c50:	b29a      	uxth	r2, r3
 8014c52:	2094      	movs	r0, #148	@ 0x94
 8014c54:	183b      	adds	r3, r7, r0
 8014c56:	49b5      	ldr	r1, [pc, #724]	@ (8014f2c <USB_EPStartXfer+0x11b4>)
 8014c58:	400a      	ands	r2, r1
 8014c5a:	801a      	strh	r2, [r3, #0]
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	781b      	ldrb	r3, [r3, #0]
 8014c62:	009b      	lsls	r3, r3, #2
 8014c64:	18d3      	adds	r3, r2, r3
 8014c66:	183a      	adds	r2, r7, r0
 8014c68:	8812      	ldrh	r2, [r2, #0]
 8014c6a:	49b1      	ldr	r1, [pc, #708]	@ (8014f30 <USB_EPStartXfer+0x11b8>)
 8014c6c:	430a      	orrs	r2, r1
 8014c6e:	b292      	uxth	r2, r2
 8014c70:	801a      	strh	r2, [r3, #0]
 8014c72:	e188      	b.n	8014f86 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	78db      	ldrb	r3, [r3, #3]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d000      	beq.n	8014c7e <USB_EPStartXfer+0xf06>
 8014c7c:	e181      	b.n	8014f82 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	699a      	ldr	r2, [r3, #24]
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	691b      	ldr	r3, [r3, #16]
 8014c86:	429a      	cmp	r2, r3
 8014c88:	d90d      	bls.n	8014ca6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	691b      	ldr	r3, [r3, #16]
 8014c8e:	1d7a      	adds	r2, r7, #5
 8014c90:	32ff      	adds	r2, #255	@ 0xff
 8014c92:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8014c94:	683b      	ldr	r3, [r7, #0]
 8014c96:	699a      	ldr	r2, [r3, #24]
 8014c98:	1d7b      	adds	r3, r7, #5
 8014c9a:	33ff      	adds	r3, #255	@ 0xff
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	1ad2      	subs	r2, r2, r3
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	619a      	str	r2, [r3, #24]
 8014ca4:	e007      	b.n	8014cb6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	699b      	ldr	r3, [r3, #24]
 8014caa:	1d7a      	adds	r2, r7, #5
 8014cac:	32ff      	adds	r2, #255	@ 0xff
 8014cae:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	785b      	ldrb	r3, [r3, #1]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d000      	beq.n	8014cc0 <USB_EPStartXfer+0xf48>
 8014cbe:	e082      	b.n	8014dc6 <USB_EPStartXfer+0x104e>
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	21cc      	movs	r1, #204	@ 0xcc
 8014cc4:	187a      	adds	r2, r7, r1
 8014cc6:	6013      	str	r3, [r2, #0]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2250      	movs	r2, #80	@ 0x50
 8014ccc:	5a9b      	ldrh	r3, [r3, r2]
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	001a      	movs	r2, r3
 8014cd2:	187b      	adds	r3, r7, r1
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	189b      	adds	r3, r3, r2
 8014cd8:	187a      	adds	r2, r7, r1
 8014cda:	6013      	str	r3, [r2, #0]
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	00da      	lsls	r2, r3, #3
 8014ce2:	187b      	adds	r3, r7, r1
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	18d3      	adds	r3, r2, r3
 8014ce8:	4a92      	ldr	r2, [pc, #584]	@ (8014f34 <USB_EPStartXfer+0x11bc>)
 8014cea:	4694      	mov	ip, r2
 8014cec:	4463      	add	r3, ip
 8014cee:	21c8      	movs	r1, #200	@ 0xc8
 8014cf0:	187a      	adds	r2, r7, r1
 8014cf2:	6013      	str	r3, [r2, #0]
 8014cf4:	187b      	adds	r3, r7, r1
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	881b      	ldrh	r3, [r3, #0]
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	059b      	lsls	r3, r3, #22
 8014cfe:	0d9b      	lsrs	r3, r3, #22
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	187b      	adds	r3, r7, r1
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	801a      	strh	r2, [r3, #0]
 8014d08:	1d7b      	adds	r3, r7, #5
 8014d0a:	33ff      	adds	r3, #255	@ 0xff
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8014d10:	d925      	bls.n	8014d5e <USB_EPStartXfer+0xfe6>
 8014d12:	1d7b      	adds	r3, r7, #5
 8014d14:	33ff      	adds	r3, #255	@ 0xff
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	095b      	lsrs	r3, r3, #5
 8014d1a:	21dc      	movs	r1, #220	@ 0xdc
 8014d1c:	187a      	adds	r2, r7, r1
 8014d1e:	6013      	str	r3, [r2, #0]
 8014d20:	1d7b      	adds	r3, r7, #5
 8014d22:	33ff      	adds	r3, #255	@ 0xff
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	221f      	movs	r2, #31
 8014d28:	4013      	ands	r3, r2
 8014d2a:	d104      	bne.n	8014d36 <USB_EPStartXfer+0xfbe>
 8014d2c:	187b      	adds	r3, r7, r1
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	3b01      	subs	r3, #1
 8014d32:	187a      	adds	r2, r7, r1
 8014d34:	6013      	str	r3, [r2, #0]
 8014d36:	21c8      	movs	r1, #200	@ 0xc8
 8014d38:	187b      	adds	r3, r7, r1
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	881b      	ldrh	r3, [r3, #0]
 8014d3e:	b29a      	uxth	r2, r3
 8014d40:	23dc      	movs	r3, #220	@ 0xdc
 8014d42:	18fb      	adds	r3, r7, r3
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	b29b      	uxth	r3, r3
 8014d48:	029b      	lsls	r3, r3, #10
 8014d4a:	b29b      	uxth	r3, r3
 8014d4c:	4313      	orrs	r3, r2
 8014d4e:	b29b      	uxth	r3, r3
 8014d50:	4a79      	ldr	r2, [pc, #484]	@ (8014f38 <USB_EPStartXfer+0x11c0>)
 8014d52:	4313      	orrs	r3, r2
 8014d54:	b29a      	uxth	r2, r3
 8014d56:	187b      	adds	r3, r7, r1
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	801a      	strh	r2, [r3, #0]
 8014d5c:	e058      	b.n	8014e10 <USB_EPStartXfer+0x1098>
 8014d5e:	1d7b      	adds	r3, r7, #5
 8014d60:	33ff      	adds	r3, #255	@ 0xff
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d10b      	bne.n	8014d80 <USB_EPStartXfer+0x1008>
 8014d68:	21c8      	movs	r1, #200	@ 0xc8
 8014d6a:	187b      	adds	r3, r7, r1
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	881b      	ldrh	r3, [r3, #0]
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	4a71      	ldr	r2, [pc, #452]	@ (8014f38 <USB_EPStartXfer+0x11c0>)
 8014d74:	4313      	orrs	r3, r2
 8014d76:	b29a      	uxth	r2, r3
 8014d78:	187b      	adds	r3, r7, r1
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	801a      	strh	r2, [r3, #0]
 8014d7e:	e047      	b.n	8014e10 <USB_EPStartXfer+0x1098>
 8014d80:	1d7b      	adds	r3, r7, #5
 8014d82:	33ff      	adds	r3, #255	@ 0xff
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	085b      	lsrs	r3, r3, #1
 8014d88:	21dc      	movs	r1, #220	@ 0xdc
 8014d8a:	187a      	adds	r2, r7, r1
 8014d8c:	6013      	str	r3, [r2, #0]
 8014d8e:	1d7b      	adds	r3, r7, #5
 8014d90:	33ff      	adds	r3, #255	@ 0xff
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	2201      	movs	r2, #1
 8014d96:	4013      	ands	r3, r2
 8014d98:	d004      	beq.n	8014da4 <USB_EPStartXfer+0x102c>
 8014d9a:	187b      	adds	r3, r7, r1
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	3301      	adds	r3, #1
 8014da0:	187a      	adds	r2, r7, r1
 8014da2:	6013      	str	r3, [r2, #0]
 8014da4:	21c8      	movs	r1, #200	@ 0xc8
 8014da6:	187b      	adds	r3, r7, r1
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	881b      	ldrh	r3, [r3, #0]
 8014dac:	b29a      	uxth	r2, r3
 8014dae:	23dc      	movs	r3, #220	@ 0xdc
 8014db0:	18fb      	adds	r3, r7, r3
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	029b      	lsls	r3, r3, #10
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	4313      	orrs	r3, r2
 8014dbc:	b29a      	uxth	r2, r3
 8014dbe:	187b      	adds	r3, r7, r1
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	801a      	strh	r2, [r3, #0]
 8014dc4:	e024      	b.n	8014e10 <USB_EPStartXfer+0x1098>
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	785b      	ldrb	r3, [r3, #1]
 8014dca:	2b01      	cmp	r3, #1
 8014dcc:	d120      	bne.n	8014e10 <USB_EPStartXfer+0x1098>
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	21d4      	movs	r1, #212	@ 0xd4
 8014dd2:	187a      	adds	r2, r7, r1
 8014dd4:	6013      	str	r3, [r2, #0]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2250      	movs	r2, #80	@ 0x50
 8014dda:	5a9b      	ldrh	r3, [r3, r2]
 8014ddc:	b29b      	uxth	r3, r3
 8014dde:	001a      	movs	r2, r3
 8014de0:	187b      	adds	r3, r7, r1
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	189b      	adds	r3, r3, r2
 8014de6:	187a      	adds	r2, r7, r1
 8014de8:	6013      	str	r3, [r2, #0]
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	00da      	lsls	r2, r3, #3
 8014df0:	187b      	adds	r3, r7, r1
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	18d3      	adds	r3, r2, r3
 8014df6:	4a4f      	ldr	r2, [pc, #316]	@ (8014f34 <USB_EPStartXfer+0x11bc>)
 8014df8:	4694      	mov	ip, r2
 8014dfa:	4463      	add	r3, ip
 8014dfc:	21d0      	movs	r1, #208	@ 0xd0
 8014dfe:	187a      	adds	r2, r7, r1
 8014e00:	6013      	str	r3, [r2, #0]
 8014e02:	1d7b      	adds	r3, r7, #5
 8014e04:	33ff      	adds	r3, #255	@ 0xff
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	b29a      	uxth	r2, r3
 8014e0a:	187b      	adds	r3, r7, r1
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	801a      	strh	r2, [r3, #0]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	22c4      	movs	r2, #196	@ 0xc4
 8014e14:	18ba      	adds	r2, r7, r2
 8014e16:	6013      	str	r3, [r2, #0]
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	785b      	ldrb	r3, [r3, #1]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d000      	beq.n	8014e22 <USB_EPStartXfer+0x10aa>
 8014e20:	e08c      	b.n	8014f3c <USB_EPStartXfer+0x11c4>
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	21bc      	movs	r1, #188	@ 0xbc
 8014e26:	187a      	adds	r2, r7, r1
 8014e28:	6013      	str	r3, [r2, #0]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2250      	movs	r2, #80	@ 0x50
 8014e2e:	5a9b      	ldrh	r3, [r3, r2]
 8014e30:	b29b      	uxth	r3, r3
 8014e32:	001a      	movs	r2, r3
 8014e34:	187b      	adds	r3, r7, r1
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	189b      	adds	r3, r3, r2
 8014e3a:	187a      	adds	r2, r7, r1
 8014e3c:	6013      	str	r3, [r2, #0]
 8014e3e:	683b      	ldr	r3, [r7, #0]
 8014e40:	781b      	ldrb	r3, [r3, #0]
 8014e42:	00da      	lsls	r2, r3, #3
 8014e44:	187b      	adds	r3, r7, r1
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	18d3      	adds	r3, r2, r3
 8014e4a:	4a37      	ldr	r2, [pc, #220]	@ (8014f28 <USB_EPStartXfer+0x11b0>)
 8014e4c:	4694      	mov	ip, r2
 8014e4e:	4463      	add	r3, ip
 8014e50:	21b8      	movs	r1, #184	@ 0xb8
 8014e52:	187a      	adds	r2, r7, r1
 8014e54:	6013      	str	r3, [r2, #0]
 8014e56:	187b      	adds	r3, r7, r1
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	881b      	ldrh	r3, [r3, #0]
 8014e5c:	b29b      	uxth	r3, r3
 8014e5e:	059b      	lsls	r3, r3, #22
 8014e60:	0d9b      	lsrs	r3, r3, #22
 8014e62:	b29a      	uxth	r2, r3
 8014e64:	187b      	adds	r3, r7, r1
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	801a      	strh	r2, [r3, #0]
 8014e6a:	1d7b      	adds	r3, r7, #5
 8014e6c:	33ff      	adds	r3, #255	@ 0xff
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	2b3e      	cmp	r3, #62	@ 0x3e
 8014e72:	d925      	bls.n	8014ec0 <USB_EPStartXfer+0x1148>
 8014e74:	1d7b      	adds	r3, r7, #5
 8014e76:	33ff      	adds	r3, #255	@ 0xff
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	095b      	lsrs	r3, r3, #5
 8014e7c:	21d8      	movs	r1, #216	@ 0xd8
 8014e7e:	187a      	adds	r2, r7, r1
 8014e80:	6013      	str	r3, [r2, #0]
 8014e82:	1d7b      	adds	r3, r7, #5
 8014e84:	33ff      	adds	r3, #255	@ 0xff
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	221f      	movs	r2, #31
 8014e8a:	4013      	ands	r3, r2
 8014e8c:	d104      	bne.n	8014e98 <USB_EPStartXfer+0x1120>
 8014e8e:	187b      	adds	r3, r7, r1
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	3b01      	subs	r3, #1
 8014e94:	187a      	adds	r2, r7, r1
 8014e96:	6013      	str	r3, [r2, #0]
 8014e98:	21b8      	movs	r1, #184	@ 0xb8
 8014e9a:	187b      	adds	r3, r7, r1
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	881b      	ldrh	r3, [r3, #0]
 8014ea0:	b29a      	uxth	r2, r3
 8014ea2:	23d8      	movs	r3, #216	@ 0xd8
 8014ea4:	18fb      	adds	r3, r7, r3
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	029b      	lsls	r3, r3, #10
 8014eac:	b29b      	uxth	r3, r3
 8014eae:	4313      	orrs	r3, r2
 8014eb0:	b29b      	uxth	r3, r3
 8014eb2:	4a21      	ldr	r2, [pc, #132]	@ (8014f38 <USB_EPStartXfer+0x11c0>)
 8014eb4:	4313      	orrs	r3, r2
 8014eb6:	b29a      	uxth	r2, r3
 8014eb8:	187b      	adds	r3, r7, r1
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	801a      	strh	r2, [r3, #0]
 8014ebe:	e062      	b.n	8014f86 <USB_EPStartXfer+0x120e>
 8014ec0:	1d7b      	adds	r3, r7, #5
 8014ec2:	33ff      	adds	r3, #255	@ 0xff
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d10b      	bne.n	8014ee2 <USB_EPStartXfer+0x116a>
 8014eca:	21b8      	movs	r1, #184	@ 0xb8
 8014ecc:	187b      	adds	r3, r7, r1
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	881b      	ldrh	r3, [r3, #0]
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	4a18      	ldr	r2, [pc, #96]	@ (8014f38 <USB_EPStartXfer+0x11c0>)
 8014ed6:	4313      	orrs	r3, r2
 8014ed8:	b29a      	uxth	r2, r3
 8014eda:	187b      	adds	r3, r7, r1
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	801a      	strh	r2, [r3, #0]
 8014ee0:	e051      	b.n	8014f86 <USB_EPStartXfer+0x120e>
 8014ee2:	1d7b      	adds	r3, r7, #5
 8014ee4:	33ff      	adds	r3, #255	@ 0xff
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	085b      	lsrs	r3, r3, #1
 8014eea:	21d8      	movs	r1, #216	@ 0xd8
 8014eec:	187a      	adds	r2, r7, r1
 8014eee:	6013      	str	r3, [r2, #0]
 8014ef0:	1d7b      	adds	r3, r7, #5
 8014ef2:	33ff      	adds	r3, #255	@ 0xff
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	4013      	ands	r3, r2
 8014efa:	d004      	beq.n	8014f06 <USB_EPStartXfer+0x118e>
 8014efc:	187b      	adds	r3, r7, r1
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	3301      	adds	r3, #1
 8014f02:	187a      	adds	r2, r7, r1
 8014f04:	6013      	str	r3, [r2, #0]
 8014f06:	21b8      	movs	r1, #184	@ 0xb8
 8014f08:	187b      	adds	r3, r7, r1
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	881b      	ldrh	r3, [r3, #0]
 8014f0e:	b29a      	uxth	r2, r3
 8014f10:	23d8      	movs	r3, #216	@ 0xd8
 8014f12:	18fb      	adds	r3, r7, r3
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	b29b      	uxth	r3, r3
 8014f18:	029b      	lsls	r3, r3, #10
 8014f1a:	b29b      	uxth	r3, r3
 8014f1c:	4313      	orrs	r3, r2
 8014f1e:	b29a      	uxth	r2, r3
 8014f20:	187b      	adds	r3, r7, r1
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	801a      	strh	r2, [r3, #0]
 8014f26:	e02e      	b.n	8014f86 <USB_EPStartXfer+0x120e>
 8014f28:	00000406 	.word	0x00000406
 8014f2c:	ffff8f8f 	.word	0xffff8f8f
 8014f30:	ffff80c0 	.word	0xffff80c0
 8014f34:	00000402 	.word	0x00000402
 8014f38:	ffff8000 	.word	0xffff8000
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	785b      	ldrb	r3, [r3, #1]
 8014f40:	2b01      	cmp	r3, #1
 8014f42:	d120      	bne.n	8014f86 <USB_EPStartXfer+0x120e>
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2250      	movs	r2, #80	@ 0x50
 8014f48:	5a9b      	ldrh	r3, [r3, r2]
 8014f4a:	b29b      	uxth	r3, r3
 8014f4c:	001a      	movs	r2, r3
 8014f4e:	21c4      	movs	r1, #196	@ 0xc4
 8014f50:	187b      	adds	r3, r7, r1
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	189b      	adds	r3, r3, r2
 8014f56:	187a      	adds	r2, r7, r1
 8014f58:	6013      	str	r3, [r2, #0]
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	00da      	lsls	r2, r3, #3
 8014f60:	187b      	adds	r3, r7, r1
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	18d3      	adds	r3, r2, r3
 8014f66:	4a1d      	ldr	r2, [pc, #116]	@ (8014fdc <USB_EPStartXfer+0x1264>)
 8014f68:	4694      	mov	ip, r2
 8014f6a:	4463      	add	r3, ip
 8014f6c:	21c0      	movs	r1, #192	@ 0xc0
 8014f6e:	187a      	adds	r2, r7, r1
 8014f70:	6013      	str	r3, [r2, #0]
 8014f72:	1d7b      	adds	r3, r7, #5
 8014f74:	33ff      	adds	r3, #255	@ 0xff
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	b29a      	uxth	r2, r3
 8014f7a:	187b      	adds	r3, r7, r1
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	801a      	strh	r2, [r3, #0]
 8014f80:	e001      	b.n	8014f86 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8014f82:	2301      	movs	r3, #1
 8014f84:	e025      	b.n	8014fd2 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014f86:	687a      	ldr	r2, [r7, #4]
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	009b      	lsls	r3, r3, #2
 8014f8e:	18d3      	adds	r3, r2, r3
 8014f90:	881b      	ldrh	r3, [r3, #0]
 8014f92:	b29a      	uxth	r2, r3
 8014f94:	208a      	movs	r0, #138	@ 0x8a
 8014f96:	183b      	adds	r3, r7, r0
 8014f98:	4911      	ldr	r1, [pc, #68]	@ (8014fe0 <USB_EPStartXfer+0x1268>)
 8014f9a:	400a      	ands	r2, r1
 8014f9c:	801a      	strh	r2, [r3, #0]
 8014f9e:	183b      	adds	r3, r7, r0
 8014fa0:	183a      	adds	r2, r7, r0
 8014fa2:	8812      	ldrh	r2, [r2, #0]
 8014fa4:	2180      	movs	r1, #128	@ 0x80
 8014fa6:	0149      	lsls	r1, r1, #5
 8014fa8:	404a      	eors	r2, r1
 8014faa:	801a      	strh	r2, [r3, #0]
 8014fac:	183b      	adds	r3, r7, r0
 8014fae:	183a      	adds	r2, r7, r0
 8014fb0:	8812      	ldrh	r2, [r2, #0]
 8014fb2:	2180      	movs	r1, #128	@ 0x80
 8014fb4:	0189      	lsls	r1, r1, #6
 8014fb6:	404a      	eors	r2, r1
 8014fb8:	801a      	strh	r2, [r3, #0]
 8014fba:	687a      	ldr	r2, [r7, #4]
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	009b      	lsls	r3, r3, #2
 8014fc2:	18d3      	adds	r3, r2, r3
 8014fc4:	183a      	adds	r2, r7, r0
 8014fc6:	8812      	ldrh	r2, [r2, #0]
 8014fc8:	4906      	ldr	r1, [pc, #24]	@ (8014fe4 <USB_EPStartXfer+0x126c>)
 8014fca:	430a      	orrs	r2, r1
 8014fcc:	b292      	uxth	r2, r2
 8014fce:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8014fd0:	2300      	movs	r3, #0
}
 8014fd2:	0018      	movs	r0, r3
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	b043      	add	sp, #268	@ 0x10c
 8014fd8:	bd90      	pop	{r4, r7, pc}
 8014fda:	46c0      	nop			@ (mov r8, r8)
 8014fdc:	00000406 	.word	0x00000406
 8014fe0:	ffffbf8f 	.word	0xffffbf8f
 8014fe4:	ffff8080 	.word	0xffff8080

08014fe8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	785b      	ldrb	r3, [r3, #1]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d01d      	beq.n	8015036 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8014ffa:	687a      	ldr	r2, [r7, #4]
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	18d3      	adds	r3, r2, r3
 8015004:	881b      	ldrh	r3, [r3, #0]
 8015006:	b29a      	uxth	r2, r3
 8015008:	200c      	movs	r0, #12
 801500a:	183b      	adds	r3, r7, r0
 801500c:	491b      	ldr	r1, [pc, #108]	@ (801507c <USB_EPSetStall+0x94>)
 801500e:	400a      	ands	r2, r1
 8015010:	801a      	strh	r2, [r3, #0]
 8015012:	183b      	adds	r3, r7, r0
 8015014:	183a      	adds	r2, r7, r0
 8015016:	8812      	ldrh	r2, [r2, #0]
 8015018:	2110      	movs	r1, #16
 801501a:	404a      	eors	r2, r1
 801501c:	801a      	strh	r2, [r3, #0]
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	781b      	ldrb	r3, [r3, #0]
 8015024:	009b      	lsls	r3, r3, #2
 8015026:	18d3      	adds	r3, r2, r3
 8015028:	183a      	adds	r2, r7, r0
 801502a:	8812      	ldrh	r2, [r2, #0]
 801502c:	4914      	ldr	r1, [pc, #80]	@ (8015080 <USB_EPSetStall+0x98>)
 801502e:	430a      	orrs	r2, r1
 8015030:	b292      	uxth	r2, r2
 8015032:	801a      	strh	r2, [r3, #0]
 8015034:	e01d      	b.n	8015072 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8015036:	687a      	ldr	r2, [r7, #4]
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	009b      	lsls	r3, r3, #2
 801503e:	18d3      	adds	r3, r2, r3
 8015040:	881b      	ldrh	r3, [r3, #0]
 8015042:	b29a      	uxth	r2, r3
 8015044:	200e      	movs	r0, #14
 8015046:	183b      	adds	r3, r7, r0
 8015048:	490e      	ldr	r1, [pc, #56]	@ (8015084 <USB_EPSetStall+0x9c>)
 801504a:	400a      	ands	r2, r1
 801504c:	801a      	strh	r2, [r3, #0]
 801504e:	183b      	adds	r3, r7, r0
 8015050:	183a      	adds	r2, r7, r0
 8015052:	8812      	ldrh	r2, [r2, #0]
 8015054:	2180      	movs	r1, #128	@ 0x80
 8015056:	0149      	lsls	r1, r1, #5
 8015058:	404a      	eors	r2, r1
 801505a:	801a      	strh	r2, [r3, #0]
 801505c:	687a      	ldr	r2, [r7, #4]
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	18d3      	adds	r3, r2, r3
 8015066:	183a      	adds	r2, r7, r0
 8015068:	8812      	ldrh	r2, [r2, #0]
 801506a:	4905      	ldr	r1, [pc, #20]	@ (8015080 <USB_EPSetStall+0x98>)
 801506c:	430a      	orrs	r2, r1
 801506e:	b292      	uxth	r2, r2
 8015070:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8015072:	2300      	movs	r3, #0
}
 8015074:	0018      	movs	r0, r3
 8015076:	46bd      	mov	sp, r7
 8015078:	b004      	add	sp, #16
 801507a:	bd80      	pop	{r7, pc}
 801507c:	ffff8fbf 	.word	0xffff8fbf
 8015080:	ffff8080 	.word	0xffff8080
 8015084:	ffffbf8f 	.word	0xffffbf8f

08015088 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b086      	sub	sp, #24
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
 8015090:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	7b1b      	ldrb	r3, [r3, #12]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d000      	beq.n	801509c <USB_EPClearStall+0x14>
 801509a:	e095      	b.n	80151c8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	785b      	ldrb	r3, [r3, #1]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d046      	beq.n	8015132 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80150a4:	687a      	ldr	r2, [r7, #4]
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	781b      	ldrb	r3, [r3, #0]
 80150aa:	009b      	lsls	r3, r3, #2
 80150ac:	18d2      	adds	r2, r2, r3
 80150ae:	2110      	movs	r1, #16
 80150b0:	187b      	adds	r3, r7, r1
 80150b2:	8812      	ldrh	r2, [r2, #0]
 80150b4:	801a      	strh	r2, [r3, #0]
 80150b6:	187b      	adds	r3, r7, r1
 80150b8:	881b      	ldrh	r3, [r3, #0]
 80150ba:	2240      	movs	r2, #64	@ 0x40
 80150bc:	4013      	ands	r3, r2
 80150be:	d016      	beq.n	80150ee <USB_EPClearStall+0x66>
 80150c0:	687a      	ldr	r2, [r7, #4]
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	781b      	ldrb	r3, [r3, #0]
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	18d3      	adds	r3, r2, r3
 80150ca:	881b      	ldrh	r3, [r3, #0]
 80150cc:	b29a      	uxth	r2, r3
 80150ce:	200e      	movs	r0, #14
 80150d0:	183b      	adds	r3, r7, r0
 80150d2:	4940      	ldr	r1, [pc, #256]	@ (80151d4 <USB_EPClearStall+0x14c>)
 80150d4:	400a      	ands	r2, r1
 80150d6:	801a      	strh	r2, [r3, #0]
 80150d8:	687a      	ldr	r2, [r7, #4]
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	009b      	lsls	r3, r3, #2
 80150e0:	18d3      	adds	r3, r2, r3
 80150e2:	183a      	adds	r2, r7, r0
 80150e4:	8812      	ldrh	r2, [r2, #0]
 80150e6:	493c      	ldr	r1, [pc, #240]	@ (80151d8 <USB_EPClearStall+0x150>)
 80150e8:	430a      	orrs	r2, r1
 80150ea:	b292      	uxth	r2, r2
 80150ec:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	78db      	ldrb	r3, [r3, #3]
 80150f2:	2b01      	cmp	r3, #1
 80150f4:	d068      	beq.n	80151c8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	18d3      	adds	r3, r2, r3
 8015100:	881b      	ldrh	r3, [r3, #0]
 8015102:	b29a      	uxth	r2, r3
 8015104:	200c      	movs	r0, #12
 8015106:	183b      	adds	r3, r7, r0
 8015108:	4934      	ldr	r1, [pc, #208]	@ (80151dc <USB_EPClearStall+0x154>)
 801510a:	400a      	ands	r2, r1
 801510c:	801a      	strh	r2, [r3, #0]
 801510e:	183b      	adds	r3, r7, r0
 8015110:	183a      	adds	r2, r7, r0
 8015112:	8812      	ldrh	r2, [r2, #0]
 8015114:	2120      	movs	r1, #32
 8015116:	404a      	eors	r2, r1
 8015118:	801a      	strh	r2, [r3, #0]
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	781b      	ldrb	r3, [r3, #0]
 8015120:	009b      	lsls	r3, r3, #2
 8015122:	18d3      	adds	r3, r2, r3
 8015124:	183a      	adds	r2, r7, r0
 8015126:	8812      	ldrh	r2, [r2, #0]
 8015128:	492d      	ldr	r1, [pc, #180]	@ (80151e0 <USB_EPClearStall+0x158>)
 801512a:	430a      	orrs	r2, r1
 801512c:	b292      	uxth	r2, r2
 801512e:	801a      	strh	r2, [r3, #0]
 8015130:	e04a      	b.n	80151c8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	781b      	ldrb	r3, [r3, #0]
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	18d2      	adds	r2, r2, r3
 801513c:	2116      	movs	r1, #22
 801513e:	187b      	adds	r3, r7, r1
 8015140:	8812      	ldrh	r2, [r2, #0]
 8015142:	801a      	strh	r2, [r3, #0]
 8015144:	187b      	adds	r3, r7, r1
 8015146:	881a      	ldrh	r2, [r3, #0]
 8015148:	2380      	movs	r3, #128	@ 0x80
 801514a:	01db      	lsls	r3, r3, #7
 801514c:	4013      	ands	r3, r2
 801514e:	d016      	beq.n	801517e <USB_EPClearStall+0xf6>
 8015150:	687a      	ldr	r2, [r7, #4]
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	781b      	ldrb	r3, [r3, #0]
 8015156:	009b      	lsls	r3, r3, #2
 8015158:	18d3      	adds	r3, r2, r3
 801515a:	881b      	ldrh	r3, [r3, #0]
 801515c:	b29a      	uxth	r2, r3
 801515e:	2014      	movs	r0, #20
 8015160:	183b      	adds	r3, r7, r0
 8015162:	491c      	ldr	r1, [pc, #112]	@ (80151d4 <USB_EPClearStall+0x14c>)
 8015164:	400a      	ands	r2, r1
 8015166:	801a      	strh	r2, [r3, #0]
 8015168:	687a      	ldr	r2, [r7, #4]
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	781b      	ldrb	r3, [r3, #0]
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	18d3      	adds	r3, r2, r3
 8015172:	183a      	adds	r2, r7, r0
 8015174:	8812      	ldrh	r2, [r2, #0]
 8015176:	491b      	ldr	r1, [pc, #108]	@ (80151e4 <USB_EPClearStall+0x15c>)
 8015178:	430a      	orrs	r2, r1
 801517a:	b292      	uxth	r2, r2
 801517c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	781b      	ldrb	r3, [r3, #0]
 8015184:	009b      	lsls	r3, r3, #2
 8015186:	18d3      	adds	r3, r2, r3
 8015188:	881b      	ldrh	r3, [r3, #0]
 801518a:	b29a      	uxth	r2, r3
 801518c:	2012      	movs	r0, #18
 801518e:	183b      	adds	r3, r7, r0
 8015190:	4915      	ldr	r1, [pc, #84]	@ (80151e8 <USB_EPClearStall+0x160>)
 8015192:	400a      	ands	r2, r1
 8015194:	801a      	strh	r2, [r3, #0]
 8015196:	183b      	adds	r3, r7, r0
 8015198:	183a      	adds	r2, r7, r0
 801519a:	8812      	ldrh	r2, [r2, #0]
 801519c:	2180      	movs	r1, #128	@ 0x80
 801519e:	0149      	lsls	r1, r1, #5
 80151a0:	404a      	eors	r2, r1
 80151a2:	801a      	strh	r2, [r3, #0]
 80151a4:	183b      	adds	r3, r7, r0
 80151a6:	183a      	adds	r2, r7, r0
 80151a8:	8812      	ldrh	r2, [r2, #0]
 80151aa:	2180      	movs	r1, #128	@ 0x80
 80151ac:	0189      	lsls	r1, r1, #6
 80151ae:	404a      	eors	r2, r1
 80151b0:	801a      	strh	r2, [r3, #0]
 80151b2:	687a      	ldr	r2, [r7, #4]
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	009b      	lsls	r3, r3, #2
 80151ba:	18d3      	adds	r3, r2, r3
 80151bc:	183a      	adds	r2, r7, r0
 80151be:	8812      	ldrh	r2, [r2, #0]
 80151c0:	4907      	ldr	r1, [pc, #28]	@ (80151e0 <USB_EPClearStall+0x158>)
 80151c2:	430a      	orrs	r2, r1
 80151c4:	b292      	uxth	r2, r2
 80151c6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80151c8:	2300      	movs	r3, #0
}
 80151ca:	0018      	movs	r0, r3
 80151cc:	46bd      	mov	sp, r7
 80151ce:	b006      	add	sp, #24
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	46c0      	nop			@ (mov r8, r8)
 80151d4:	ffff8f8f 	.word	0xffff8f8f
 80151d8:	ffff80c0 	.word	0xffff80c0
 80151dc:	ffff8fbf 	.word	0xffff8fbf
 80151e0:	ffff8080 	.word	0xffff8080
 80151e4:	ffffc080 	.word	0xffffc080
 80151e8:	ffffbf8f 	.word	0xffffbf8f

080151ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	000a      	movs	r2, r1
 80151f6:	1cfb      	adds	r3, r7, #3
 80151f8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80151fa:	1cfb      	adds	r3, r7, #3
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d103      	bne.n	801520a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	224c      	movs	r2, #76	@ 0x4c
 8015206:	2180      	movs	r1, #128	@ 0x80
 8015208:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801520a:	2300      	movs	r3, #0
}
 801520c:	0018      	movs	r0, r3
 801520e:	46bd      	mov	sp, r7
 8015210:	b002      	add	sp, #8
 8015212:	bd80      	pop	{r7, pc}

08015214 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b082      	sub	sp, #8
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2258      	movs	r2, #88	@ 0x58
 8015220:	5a9b      	ldrh	r3, [r3, r2]
 8015222:	b29b      	uxth	r3, r3
 8015224:	4a05      	ldr	r2, [pc, #20]	@ (801523c <USB_DevConnect+0x28>)
 8015226:	4313      	orrs	r3, r2
 8015228:	b299      	uxth	r1, r3
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2258      	movs	r2, #88	@ 0x58
 801522e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015230:	2300      	movs	r3, #0
}
 8015232:	0018      	movs	r0, r3
 8015234:	46bd      	mov	sp, r7
 8015236:	b002      	add	sp, #8
 8015238:	bd80      	pop	{r7, pc}
 801523a:	46c0      	nop			@ (mov r8, r8)
 801523c:	ffff8000 	.word	0xffff8000

08015240 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b084      	sub	sp, #16
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2244      	movs	r2, #68	@ 0x44
 801524c:	5a9b      	ldrh	r3, [r3, r2]
 801524e:	b29b      	uxth	r3, r3
 8015250:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8015252:	68fb      	ldr	r3, [r7, #12]
}
 8015254:	0018      	movs	r0, r3
 8015256:	46bd      	mov	sp, r7
 8015258:	b004      	add	sp, #16
 801525a:	bd80      	pop	{r7, pc}

0801525c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b08a      	sub	sp, #40	@ 0x28
 8015260:	af00      	add	r7, sp, #0
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	0019      	movs	r1, r3
 8015268:	1dbb      	adds	r3, r7, #6
 801526a:	801a      	strh	r2, [r3, #0]
 801526c:	1d3b      	adds	r3, r7, #4
 801526e:	1c0a      	adds	r2, r1, #0
 8015270:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8015272:	1d3b      	adds	r3, r7, #4
 8015274:	881b      	ldrh	r3, [r3, #0]
 8015276:	3301      	adds	r3, #1
 8015278:	085b      	lsrs	r3, r3, #1
 801527a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8015284:	1dbb      	adds	r3, r7, #6
 8015286:	881a      	ldrh	r2, [r3, #0]
 8015288:	697b      	ldr	r3, [r7, #20]
 801528a:	18d3      	adds	r3, r2, r3
 801528c:	2280      	movs	r2, #128	@ 0x80
 801528e:	00d2      	lsls	r2, r2, #3
 8015290:	4694      	mov	ip, r2
 8015292:	4463      	add	r3, ip
 8015294:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8015296:	69bb      	ldr	r3, [r7, #24]
 8015298:	627b      	str	r3, [r7, #36]	@ 0x24
 801529a:	e020      	b.n	80152de <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	781a      	ldrb	r2, [r3, #0]
 80152a0:	2112      	movs	r1, #18
 80152a2:	187b      	adds	r3, r7, r1
 80152a4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80152a6:	69fb      	ldr	r3, [r7, #28]
 80152a8:	3301      	adds	r3, #1
 80152aa:	781b      	ldrb	r3, [r3, #0]
 80152ac:	021b      	lsls	r3, r3, #8
 80152ae:	b21a      	sxth	r2, r3
 80152b0:	187b      	adds	r3, r7, r1
 80152b2:	2000      	movs	r0, #0
 80152b4:	5e1b      	ldrsh	r3, [r3, r0]
 80152b6:	4313      	orrs	r3, r2
 80152b8:	b21a      	sxth	r2, r3
 80152ba:	187b      	adds	r3, r7, r1
 80152bc:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80152be:	6a3b      	ldr	r3, [r7, #32]
 80152c0:	187a      	adds	r2, r7, r1
 80152c2:	8812      	ldrh	r2, [r2, #0]
 80152c4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80152c6:	6a3b      	ldr	r3, [r7, #32]
 80152c8:	3302      	adds	r3, #2
 80152ca:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	3301      	adds	r3, #1
 80152d0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80152d2:	69fb      	ldr	r3, [r7, #28]
 80152d4:	3301      	adds	r3, #1
 80152d6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80152d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152da:	3b01      	subs	r3, #1
 80152dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80152de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d1db      	bne.n	801529c <USB_WritePMA+0x40>
  }
}
 80152e4:	46c0      	nop			@ (mov r8, r8)
 80152e6:	46c0      	nop			@ (mov r8, r8)
 80152e8:	46bd      	mov	sp, r7
 80152ea:	b00a      	add	sp, #40	@ 0x28
 80152ec:	bd80      	pop	{r7, pc}

080152ee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b08a      	sub	sp, #40	@ 0x28
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	60f8      	str	r0, [r7, #12]
 80152f6:	60b9      	str	r1, [r7, #8]
 80152f8:	0019      	movs	r1, r3
 80152fa:	1dbb      	adds	r3, r7, #6
 80152fc:	801a      	strh	r2, [r3, #0]
 80152fe:	1d3b      	adds	r3, r7, #4
 8015300:	1c0a      	adds	r2, r1, #0
 8015302:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8015304:	1d3b      	adds	r3, r7, #4
 8015306:	881b      	ldrh	r3, [r3, #0]
 8015308:	085b      	lsrs	r3, r3, #1
 801530a:	b29b      	uxth	r3, r3
 801530c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8015316:	1dbb      	adds	r3, r7, #6
 8015318:	881a      	ldrh	r2, [r3, #0]
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	18d3      	adds	r3, r2, r3
 801531e:	2280      	movs	r2, #128	@ 0x80
 8015320:	00d2      	lsls	r2, r2, #3
 8015322:	4694      	mov	ip, r2
 8015324:	4463      	add	r3, ip
 8015326:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8015328:	69bb      	ldr	r3, [r7, #24]
 801532a:	627b      	str	r3, [r7, #36]	@ 0x24
 801532c:	e018      	b.n	8015360 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801532e:	6a3b      	ldr	r3, [r7, #32]
 8015330:	881b      	ldrh	r3, [r3, #0]
 8015332:	b29b      	uxth	r3, r3
 8015334:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8015336:	6a3b      	ldr	r3, [r7, #32]
 8015338:	3302      	adds	r3, #2
 801533a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	b2da      	uxtb	r2, r3
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8015344:	69fb      	ldr	r3, [r7, #28]
 8015346:	3301      	adds	r3, #1
 8015348:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	0a1b      	lsrs	r3, r3, #8
 801534e:	b2da      	uxtb	r2, r3
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	3301      	adds	r3, #1
 8015358:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801535c:	3b01      	subs	r3, #1
 801535e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015362:	2b00      	cmp	r3, #0
 8015364:	d1e3      	bne.n	801532e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8015366:	1d3b      	adds	r3, r7, #4
 8015368:	881b      	ldrh	r3, [r3, #0]
 801536a:	2201      	movs	r2, #1
 801536c:	4013      	ands	r3, r2
 801536e:	b29b      	uxth	r3, r3
 8015370:	2b00      	cmp	r3, #0
 8015372:	d007      	beq.n	8015384 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8015374:	6a3b      	ldr	r3, [r7, #32]
 8015376:	881b      	ldrh	r3, [r3, #0]
 8015378:	b29b      	uxth	r3, r3
 801537a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	b2da      	uxtb	r2, r3
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	701a      	strb	r2, [r3, #0]
  }
}
 8015384:	46c0      	nop			@ (mov r8, r8)
 8015386:	46bd      	mov	sp, r7
 8015388:	b00a      	add	sp, #40	@ 0x28
 801538a:	bd80      	pop	{r7, pc}

0801538c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b084      	sub	sp, #16
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	000a      	movs	r2, r1
 8015396:	1cfb      	adds	r3, r7, #3
 8015398:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801539a:	230f      	movs	r3, #15
 801539c:	18fb      	adds	r3, r7, r3
 801539e:	2200      	movs	r2, #0
 80153a0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	7c1b      	ldrb	r3, [r3, #16]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d116      	bne.n	80153d8 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80153aa:	2380      	movs	r3, #128	@ 0x80
 80153ac:	009b      	lsls	r3, r3, #2
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	2202      	movs	r2, #2
 80153b2:	2181      	movs	r1, #129	@ 0x81
 80153b4:	f002 f8eb 	bl	801758e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2201      	movs	r2, #1
 80153bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80153be:	2380      	movs	r3, #128	@ 0x80
 80153c0:	009b      	lsls	r3, r3, #2
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	2202      	movs	r2, #2
 80153c6:	2101      	movs	r1, #1
 80153c8:	f002 f8e1 	bl	801758e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80153cc:	687a      	ldr	r2, [r7, #4]
 80153ce:	23b6      	movs	r3, #182	@ 0xb6
 80153d0:	005b      	lsls	r3, r3, #1
 80153d2:	2101      	movs	r1, #1
 80153d4:	50d1      	str	r1, [r2, r3]
 80153d6:	e013      	b.n	8015400 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	2340      	movs	r3, #64	@ 0x40
 80153dc:	2202      	movs	r2, #2
 80153de:	2181      	movs	r1, #129	@ 0x81
 80153e0:	f002 f8d5 	bl	801758e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2201      	movs	r2, #1
 80153e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	2340      	movs	r3, #64	@ 0x40
 80153ee:	2202      	movs	r2, #2
 80153f0:	2101      	movs	r1, #1
 80153f2:	f002 f8cc 	bl	801758e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	23b6      	movs	r3, #182	@ 0xb6
 80153fa:	005b      	lsls	r3, r3, #1
 80153fc:	2101      	movs	r1, #1
 80153fe:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	2308      	movs	r3, #8
 8015404:	2203      	movs	r2, #3
 8015406:	2182      	movs	r1, #130	@ 0x82
 8015408:	f002 f8c1 	bl	801758e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2201      	movs	r2, #1
 8015410:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015412:	2387      	movs	r3, #135	@ 0x87
 8015414:	009b      	lsls	r3, r3, #2
 8015416:	0018      	movs	r0, r3
 8015418:	f002 fa52 	bl	80178c0 <USBD_static_malloc>
 801541c:	0001      	movs	r1, r0
 801541e:	687a      	ldr	r2, [r7, #4]
 8015420:	23ae      	movs	r3, #174	@ 0xae
 8015422:	009b      	lsls	r3, r3, #2
 8015424:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	23ae      	movs	r3, #174	@ 0xae
 801542a:	009b      	lsls	r3, r3, #2
 801542c:	58d3      	ldr	r3, [r2, r3]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d104      	bne.n	801543c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8015432:	230f      	movs	r3, #15
 8015434:	18fb      	adds	r3, r7, r3
 8015436:	2201      	movs	r2, #1
 8015438:	701a      	strb	r2, [r3, #0]
 801543a:	e02c      	b.n	8015496 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801543c:	687a      	ldr	r2, [r7, #4]
 801543e:	23ae      	movs	r3, #174	@ 0xae
 8015440:	009b      	lsls	r3, r3, #2
 8015442:	58d3      	ldr	r3, [r2, r3]
 8015444:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8015446:	687a      	ldr	r2, [r7, #4]
 8015448:	23af      	movs	r3, #175	@ 0xaf
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	58d3      	ldr	r3, [r2, r3]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8015452:	68ba      	ldr	r2, [r7, #8]
 8015454:	2385      	movs	r3, #133	@ 0x85
 8015456:	009b      	lsls	r3, r3, #2
 8015458:	2100      	movs	r1, #0
 801545a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801545c:	68ba      	ldr	r2, [r7, #8]
 801545e:	2386      	movs	r3, #134	@ 0x86
 8015460:	009b      	lsls	r3, r3, #2
 8015462:	2100      	movs	r1, #0
 8015464:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	7c1b      	ldrb	r3, [r3, #16]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d10a      	bne.n	8015484 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801546e:	68ba      	ldr	r2, [r7, #8]
 8015470:	2381      	movs	r3, #129	@ 0x81
 8015472:	009b      	lsls	r3, r3, #2
 8015474:	58d2      	ldr	r2, [r2, r3]
 8015476:	2380      	movs	r3, #128	@ 0x80
 8015478:	009b      	lsls	r3, r3, #2
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	2101      	movs	r1, #1
 801547e:	f002 f9d1 	bl	8017824 <USBD_LL_PrepareReceive>
 8015482:	e008      	b.n	8015496 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015484:	68ba      	ldr	r2, [r7, #8]
 8015486:	2381      	movs	r3, #129	@ 0x81
 8015488:	009b      	lsls	r3, r3, #2
 801548a:	58d2      	ldr	r2, [r2, r3]
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	2340      	movs	r3, #64	@ 0x40
 8015490:	2101      	movs	r1, #1
 8015492:	f002 f9c7 	bl	8017824 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8015496:	230f      	movs	r3, #15
 8015498:	18fb      	adds	r3, r7, r3
 801549a:	781b      	ldrb	r3, [r3, #0]
}
 801549c:	0018      	movs	r0, r3
 801549e:	46bd      	mov	sp, r7
 80154a0:	b004      	add	sp, #16
 80154a2:	bd80      	pop	{r7, pc}

080154a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b084      	sub	sp, #16
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
 80154ac:	000a      	movs	r2, r1
 80154ae:	1cfb      	adds	r3, r7, #3
 80154b0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80154b2:	230f      	movs	r3, #15
 80154b4:	18fb      	adds	r3, r7, r3
 80154b6:	2200      	movs	r2, #0
 80154b8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2181      	movs	r1, #129	@ 0x81
 80154be:	0018      	movs	r0, r3
 80154c0:	f002 f89c 	bl	80175fc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2200      	movs	r2, #0
 80154c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2101      	movs	r1, #1
 80154ce:	0018      	movs	r0, r3
 80154d0:	f002 f894 	bl	80175fc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80154d4:	687a      	ldr	r2, [r7, #4]
 80154d6:	23b6      	movs	r3, #182	@ 0xb6
 80154d8:	005b      	lsls	r3, r3, #1
 80154da:	2100      	movs	r1, #0
 80154dc:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2182      	movs	r1, #130	@ 0x82
 80154e2:	0018      	movs	r0, r3
 80154e4:	f002 f88a 	bl	80175fc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2200      	movs	r2, #0
 80154ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80154ee:	687a      	ldr	r2, [r7, #4]
 80154f0:	23ae      	movs	r3, #174	@ 0xae
 80154f2:	009b      	lsls	r3, r3, #2
 80154f4:	58d3      	ldr	r3, [r2, r3]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d011      	beq.n	801551e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	23af      	movs	r3, #175	@ 0xaf
 80154fe:	009b      	lsls	r3, r3, #2
 8015500:	58d3      	ldr	r3, [r2, r3]
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8015506:	687a      	ldr	r2, [r7, #4]
 8015508:	23ae      	movs	r3, #174	@ 0xae
 801550a:	009b      	lsls	r3, r3, #2
 801550c:	58d3      	ldr	r3, [r2, r3]
 801550e:	0018      	movs	r0, r3
 8015510:	f002 f9e2 	bl	80178d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8015514:	687a      	ldr	r2, [r7, #4]
 8015516:	23ae      	movs	r3, #174	@ 0xae
 8015518:	009b      	lsls	r3, r3, #2
 801551a:	2100      	movs	r1, #0
 801551c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801551e:	230f      	movs	r3, #15
 8015520:	18fb      	adds	r3, r7, r3
 8015522:	781b      	ldrb	r3, [r3, #0]
}
 8015524:	0018      	movs	r0, r3
 8015526:	46bd      	mov	sp, r7
 8015528:	b004      	add	sp, #16
 801552a:	bd80      	pop	{r7, pc}

0801552c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b086      	sub	sp, #24
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015536:	687a      	ldr	r2, [r7, #4]
 8015538:	23ae      	movs	r3, #174	@ 0xae
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	58d3      	ldr	r3, [r2, r3]
 801553e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8015540:	230f      	movs	r3, #15
 8015542:	18fb      	adds	r3, r7, r3
 8015544:	2200      	movs	r2, #0
 8015546:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8015548:	230c      	movs	r3, #12
 801554a:	18fb      	adds	r3, r7, r3
 801554c:	2200      	movs	r2, #0
 801554e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8015550:	2317      	movs	r3, #23
 8015552:	18fb      	adds	r3, r7, r3
 8015554:	2200      	movs	r2, #0
 8015556:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	781b      	ldrb	r3, [r3, #0]
 801555c:	001a      	movs	r2, r3
 801555e:	2360      	movs	r3, #96	@ 0x60
 8015560:	4013      	ands	r3, r2
 8015562:	d03d      	beq.n	80155e0 <USBD_CDC_Setup+0xb4>
 8015564:	2b20      	cmp	r3, #32
 8015566:	d000      	beq.n	801556a <USBD_CDC_Setup+0x3e>
 8015568:	e094      	b.n	8015694 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	88db      	ldrh	r3, [r3, #6]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d02b      	beq.n	80155ca <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	781b      	ldrb	r3, [r3, #0]
 8015576:	b25b      	sxtb	r3, r3
 8015578:	2b00      	cmp	r3, #0
 801557a:	da12      	bge.n	80155a2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	23af      	movs	r3, #175	@ 0xaf
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	58d3      	ldr	r3, [r2, r3]
 8015584:	689b      	ldr	r3, [r3, #8]
 8015586:	683a      	ldr	r2, [r7, #0]
 8015588:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801558a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801558c:	683a      	ldr	r2, [r7, #0]
 801558e:	88d2      	ldrh	r2, [r2, #6]
 8015590:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8015592:	6939      	ldr	r1, [r7, #16]
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	88da      	ldrh	r2, [r3, #6]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	0018      	movs	r0, r3
 801559c:	f001 fbaf 	bl	8016cfe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80155a0:	e083      	b.n	80156aa <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	7859      	ldrb	r1, [r3, #1]
 80155a6:	693a      	ldr	r2, [r7, #16]
 80155a8:	2380      	movs	r3, #128	@ 0x80
 80155aa:	009b      	lsls	r3, r3, #2
 80155ac:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	88db      	ldrh	r3, [r3, #6]
 80155b2:	b2d9      	uxtb	r1, r3
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	4a40      	ldr	r2, [pc, #256]	@ (80156b8 <USBD_CDC_Setup+0x18c>)
 80155b8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80155ba:	6939      	ldr	r1, [r7, #16]
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	88da      	ldrh	r2, [r3, #6]
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	0018      	movs	r0, r3
 80155c4:	f001 fbce 	bl	8016d64 <USBD_CtlPrepareRx>
      break;
 80155c8:	e06f      	b.n	80156aa <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80155ca:	687a      	ldr	r2, [r7, #4]
 80155cc:	23af      	movs	r3, #175	@ 0xaf
 80155ce:	009b      	lsls	r3, r3, #2
 80155d0:	58d3      	ldr	r3, [r2, r3]
 80155d2:	689b      	ldr	r3, [r3, #8]
 80155d4:	683a      	ldr	r2, [r7, #0]
 80155d6:	7850      	ldrb	r0, [r2, #1]
 80155d8:	6839      	ldr	r1, [r7, #0]
 80155da:	2200      	movs	r2, #0
 80155dc:	4798      	blx	r3
      break;
 80155de:	e064      	b.n	80156aa <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	785b      	ldrb	r3, [r3, #1]
 80155e4:	2b0b      	cmp	r3, #11
 80155e6:	d037      	beq.n	8015658 <USBD_CDC_Setup+0x12c>
 80155e8:	dc47      	bgt.n	801567a <USBD_CDC_Setup+0x14e>
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d002      	beq.n	80155f4 <USBD_CDC_Setup+0xc8>
 80155ee:	2b0a      	cmp	r3, #10
 80155f0:	d019      	beq.n	8015626 <USBD_CDC_Setup+0xfa>
 80155f2:	e042      	b.n	801567a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	23a7      	movs	r3, #167	@ 0xa7
 80155f8:	009b      	lsls	r3, r3, #2
 80155fa:	5cd3      	ldrb	r3, [r2, r3]
 80155fc:	2b03      	cmp	r3, #3
 80155fe:	d107      	bne.n	8015610 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8015600:	230c      	movs	r3, #12
 8015602:	18f9      	adds	r1, r7, r3
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2202      	movs	r2, #2
 8015608:	0018      	movs	r0, r3
 801560a:	f001 fb78 	bl	8016cfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801560e:	e040      	b.n	8015692 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8015610:	683a      	ldr	r2, [r7, #0]
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	0011      	movs	r1, r2
 8015616:	0018      	movs	r0, r3
 8015618:	f001 faf3 	bl	8016c02 <USBD_CtlError>
            ret = USBD_FAIL;
 801561c:	2317      	movs	r3, #23
 801561e:	18fb      	adds	r3, r7, r3
 8015620:	2202      	movs	r2, #2
 8015622:	701a      	strb	r2, [r3, #0]
          break;
 8015624:	e035      	b.n	8015692 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015626:	687a      	ldr	r2, [r7, #4]
 8015628:	23a7      	movs	r3, #167	@ 0xa7
 801562a:	009b      	lsls	r3, r3, #2
 801562c:	5cd3      	ldrb	r3, [r2, r3]
 801562e:	2b03      	cmp	r3, #3
 8015630:	d107      	bne.n	8015642 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8015632:	230f      	movs	r3, #15
 8015634:	18f9      	adds	r1, r7, r3
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2201      	movs	r2, #1
 801563a:	0018      	movs	r0, r3
 801563c:	f001 fb5f 	bl	8016cfe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015640:	e027      	b.n	8015692 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8015642:	683a      	ldr	r2, [r7, #0]
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	0011      	movs	r1, r2
 8015648:	0018      	movs	r0, r3
 801564a:	f001 fada 	bl	8016c02 <USBD_CtlError>
            ret = USBD_FAIL;
 801564e:	2317      	movs	r3, #23
 8015650:	18fb      	adds	r3, r7, r3
 8015652:	2202      	movs	r2, #2
 8015654:	701a      	strb	r2, [r3, #0]
          break;
 8015656:	e01c      	b.n	8015692 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015658:	687a      	ldr	r2, [r7, #4]
 801565a:	23a7      	movs	r3, #167	@ 0xa7
 801565c:	009b      	lsls	r3, r3, #2
 801565e:	5cd3      	ldrb	r3, [r2, r3]
 8015660:	2b03      	cmp	r3, #3
 8015662:	d015      	beq.n	8015690 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8015664:	683a      	ldr	r2, [r7, #0]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	0011      	movs	r1, r2
 801566a:	0018      	movs	r0, r3
 801566c:	f001 fac9 	bl	8016c02 <USBD_CtlError>
            ret = USBD_FAIL;
 8015670:	2317      	movs	r3, #23
 8015672:	18fb      	adds	r3, r7, r3
 8015674:	2202      	movs	r2, #2
 8015676:	701a      	strb	r2, [r3, #0]
          }
          break;
 8015678:	e00a      	b.n	8015690 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801567a:	683a      	ldr	r2, [r7, #0]
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	0011      	movs	r1, r2
 8015680:	0018      	movs	r0, r3
 8015682:	f001 fabe 	bl	8016c02 <USBD_CtlError>
          ret = USBD_FAIL;
 8015686:	2317      	movs	r3, #23
 8015688:	18fb      	adds	r3, r7, r3
 801568a:	2202      	movs	r2, #2
 801568c:	701a      	strb	r2, [r3, #0]
          break;
 801568e:	e000      	b.n	8015692 <USBD_CDC_Setup+0x166>
          break;
 8015690:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015692:	e00a      	b.n	80156aa <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8015694:	683a      	ldr	r2, [r7, #0]
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	0011      	movs	r1, r2
 801569a:	0018      	movs	r0, r3
 801569c:	f001 fab1 	bl	8016c02 <USBD_CtlError>
      ret = USBD_FAIL;
 80156a0:	2317      	movs	r3, #23
 80156a2:	18fb      	adds	r3, r7, r3
 80156a4:	2202      	movs	r2, #2
 80156a6:	701a      	strb	r2, [r3, #0]
      break;
 80156a8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80156aa:	2317      	movs	r3, #23
 80156ac:	18fb      	adds	r3, r7, r3
 80156ae:	781b      	ldrb	r3, [r3, #0]
}
 80156b0:	0018      	movs	r0, r3
 80156b2:	46bd      	mov	sp, r7
 80156b4:	b006      	add	sp, #24
 80156b6:	bd80      	pop	{r7, pc}
 80156b8:	00000201 	.word	0x00000201

080156bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b084      	sub	sp, #16
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
 80156c4:	000a      	movs	r2, r1
 80156c6:	1cfb      	adds	r3, r7, #3
 80156c8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80156ca:	687a      	ldr	r2, [r7, #4]
 80156cc:	23ae      	movs	r3, #174	@ 0xae
 80156ce:	009b      	lsls	r3, r3, #2
 80156d0:	58d3      	ldr	r3, [r2, r3]
 80156d2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	23b0      	movs	r3, #176	@ 0xb0
 80156d8:	009b      	lsls	r3, r3, #2
 80156da:	58d3      	ldr	r3, [r2, r3]
 80156dc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80156de:	687a      	ldr	r2, [r7, #4]
 80156e0:	23ae      	movs	r3, #174	@ 0xae
 80156e2:	009b      	lsls	r3, r3, #2
 80156e4:	58d3      	ldr	r3, [r2, r3]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d03e      	beq.n	8015768 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80156ea:	1cfb      	adds	r3, r7, #3
 80156ec:	781a      	ldrb	r2, [r3, #0]
 80156ee:	6879      	ldr	r1, [r7, #4]
 80156f0:	0013      	movs	r3, r2
 80156f2:	009b      	lsls	r3, r3, #2
 80156f4:	189b      	adds	r3, r3, r2
 80156f6:	009b      	lsls	r3, r3, #2
 80156f8:	18cb      	adds	r3, r1, r3
 80156fa:	331c      	adds	r3, #28
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d02b      	beq.n	801575a <USBD_CDC_DataIn+0x9e>
 8015702:	1cfb      	adds	r3, r7, #3
 8015704:	781a      	ldrb	r2, [r3, #0]
 8015706:	6879      	ldr	r1, [r7, #4]
 8015708:	0013      	movs	r3, r2
 801570a:	009b      	lsls	r3, r3, #2
 801570c:	189b      	adds	r3, r3, r2
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	18cb      	adds	r3, r1, r3
 8015712:	331c      	adds	r3, #28
 8015714:	6818      	ldr	r0, [r3, #0]
 8015716:	1cfb      	adds	r3, r7, #3
 8015718:	781a      	ldrb	r2, [r3, #0]
 801571a:	68b9      	ldr	r1, [r7, #8]
 801571c:	0013      	movs	r3, r2
 801571e:	009b      	lsls	r3, r3, #2
 8015720:	189b      	adds	r3, r3, r2
 8015722:	00db      	lsls	r3, r3, #3
 8015724:	18cb      	adds	r3, r1, r3
 8015726:	3338      	adds	r3, #56	@ 0x38
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	0019      	movs	r1, r3
 801572c:	f7ea fd8e 	bl	800024c <__aeabi_uidivmod>
 8015730:	1e0b      	subs	r3, r1, #0
 8015732:	d112      	bne.n	801575a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8015734:	1cfb      	adds	r3, r7, #3
 8015736:	781a      	ldrb	r2, [r3, #0]
 8015738:	6879      	ldr	r1, [r7, #4]
 801573a:	0013      	movs	r3, r2
 801573c:	009b      	lsls	r3, r3, #2
 801573e:	189b      	adds	r3, r3, r2
 8015740:	009b      	lsls	r3, r3, #2
 8015742:	18cb      	adds	r3, r1, r3
 8015744:	331c      	adds	r3, #28
 8015746:	2200      	movs	r2, #0
 8015748:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801574a:	1cfb      	adds	r3, r7, #3
 801574c:	7819      	ldrb	r1, [r3, #0]
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	2300      	movs	r3, #0
 8015752:	2200      	movs	r2, #0
 8015754:	f002 f82f 	bl	80177b6 <USBD_LL_Transmit>
 8015758:	e004      	b.n	8015764 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801575a:	68fa      	ldr	r2, [r7, #12]
 801575c:	2385      	movs	r3, #133	@ 0x85
 801575e:	009b      	lsls	r3, r3, #2
 8015760:	2100      	movs	r1, #0
 8015762:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8015764:	2300      	movs	r3, #0
 8015766:	e000      	b.n	801576a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8015768:	2302      	movs	r3, #2
  }
}
 801576a:	0018      	movs	r0, r3
 801576c:	46bd      	mov	sp, r7
 801576e:	b004      	add	sp, #16
 8015770:	bd80      	pop	{r7, pc}

08015772 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015772:	b580      	push	{r7, lr}
 8015774:	b084      	sub	sp, #16
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
 801577a:	000a      	movs	r2, r1
 801577c:	1cfb      	adds	r3, r7, #3
 801577e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015780:	687a      	ldr	r2, [r7, #4]
 8015782:	23ae      	movs	r3, #174	@ 0xae
 8015784:	009b      	lsls	r3, r3, #2
 8015786:	58d3      	ldr	r3, [r2, r3]
 8015788:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801578a:	1cfb      	adds	r3, r7, #3
 801578c:	781a      	ldrb	r2, [r3, #0]
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	0011      	movs	r1, r2
 8015792:	0018      	movs	r0, r3
 8015794:	f002 f87d 	bl	8017892 <USBD_LL_GetRxDataSize>
 8015798:	0001      	movs	r1, r0
 801579a:	68fa      	ldr	r2, [r7, #12]
 801579c:	2383      	movs	r3, #131	@ 0x83
 801579e:	009b      	lsls	r3, r3, #2
 80157a0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80157a2:	687a      	ldr	r2, [r7, #4]
 80157a4:	23ae      	movs	r3, #174	@ 0xae
 80157a6:	009b      	lsls	r3, r3, #2
 80157a8:	58d3      	ldr	r3, [r2, r3]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d011      	beq.n	80157d2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	23af      	movs	r3, #175	@ 0xaf
 80157b2:	009b      	lsls	r3, r3, #2
 80157b4:	58d3      	ldr	r3, [r2, r3]
 80157b6:	68da      	ldr	r2, [r3, #12]
 80157b8:	68f9      	ldr	r1, [r7, #12]
 80157ba:	2381      	movs	r3, #129	@ 0x81
 80157bc:	009b      	lsls	r3, r3, #2
 80157be:	58c8      	ldr	r0, [r1, r3]
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	2183      	movs	r1, #131	@ 0x83
 80157c4:	0089      	lsls	r1, r1, #2
 80157c6:	468c      	mov	ip, r1
 80157c8:	4463      	add	r3, ip
 80157ca:	0019      	movs	r1, r3
 80157cc:	4790      	blx	r2

    return USBD_OK;
 80157ce:	2300      	movs	r3, #0
 80157d0:	e000      	b.n	80157d4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80157d2:	2302      	movs	r3, #2
  }
}
 80157d4:	0018      	movs	r0, r3
 80157d6:	46bd      	mov	sp, r7
 80157d8:	b004      	add	sp, #16
 80157da:	bd80      	pop	{r7, pc}

080157dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80157dc:	b590      	push	{r4, r7, lr}
 80157de:	b085      	sub	sp, #20
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80157e4:	687a      	ldr	r2, [r7, #4]
 80157e6:	23ae      	movs	r3, #174	@ 0xae
 80157e8:	009b      	lsls	r3, r3, #2
 80157ea:	58d3      	ldr	r3, [r2, r3]
 80157ec:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80157ee:	687a      	ldr	r2, [r7, #4]
 80157f0:	23af      	movs	r3, #175	@ 0xaf
 80157f2:	009b      	lsls	r3, r3, #2
 80157f4:	58d3      	ldr	r3, [r2, r3]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d018      	beq.n	801582c <USBD_CDC_EP0_RxReady+0x50>
 80157fa:	68fa      	ldr	r2, [r7, #12]
 80157fc:	2380      	movs	r3, #128	@ 0x80
 80157fe:	009b      	lsls	r3, r3, #2
 8015800:	5cd3      	ldrb	r3, [r2, r3]
 8015802:	2bff      	cmp	r3, #255	@ 0xff
 8015804:	d012      	beq.n	801582c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015806:	687a      	ldr	r2, [r7, #4]
 8015808:	23af      	movs	r3, #175	@ 0xaf
 801580a:	009b      	lsls	r3, r3, #2
 801580c:	58d3      	ldr	r3, [r2, r3]
 801580e:	689b      	ldr	r3, [r3, #8]
 8015810:	68f9      	ldr	r1, [r7, #12]
 8015812:	2280      	movs	r2, #128	@ 0x80
 8015814:	0092      	lsls	r2, r2, #2
 8015816:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8015818:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801581a:	68fa      	ldr	r2, [r7, #12]
 801581c:	4c06      	ldr	r4, [pc, #24]	@ (8015838 <USBD_CDC_EP0_RxReady+0x5c>)
 801581e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015820:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015822:	68fa      	ldr	r2, [r7, #12]
 8015824:	2380      	movs	r3, #128	@ 0x80
 8015826:	009b      	lsls	r3, r3, #2
 8015828:	21ff      	movs	r1, #255	@ 0xff
 801582a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801582c:	2300      	movs	r3, #0
}
 801582e:	0018      	movs	r0, r3
 8015830:	46bd      	mov	sp, r7
 8015832:	b005      	add	sp, #20
 8015834:	bd90      	pop	{r4, r7, pc}
 8015836:	46c0      	nop			@ (mov r8, r8)
 8015838:	00000201 	.word	0x00000201

0801583c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2243      	movs	r2, #67	@ 0x43
 8015848:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801584a:	4b02      	ldr	r3, [pc, #8]	@ (8015854 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801584c:	0018      	movs	r0, r3
 801584e:	46bd      	mov	sp, r7
 8015850:	b002      	add	sp, #8
 8015852:	bd80      	pop	{r7, pc}
 8015854:	20000100 	.word	0x20000100

08015858 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	2243      	movs	r2, #67	@ 0x43
 8015864:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8015866:	4b02      	ldr	r3, [pc, #8]	@ (8015870 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8015868:	0018      	movs	r0, r3
 801586a:	46bd      	mov	sp, r7
 801586c:	b002      	add	sp, #8
 801586e:	bd80      	pop	{r7, pc}
 8015870:	200000bc 	.word	0x200000bc

08015874 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	2243      	movs	r2, #67	@ 0x43
 8015880:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8015882:	4b02      	ldr	r3, [pc, #8]	@ (801588c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8015884:	0018      	movs	r0, r3
 8015886:	46bd      	mov	sp, r7
 8015888:	b002      	add	sp, #8
 801588a:	bd80      	pop	{r7, pc}
 801588c:	20000144 	.word	0x20000144

08015890 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b082      	sub	sp, #8
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	220a      	movs	r2, #10
 801589c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801589e:	4b02      	ldr	r3, [pc, #8]	@ (80158a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80158a0:	0018      	movs	r0, r3
 80158a2:	46bd      	mov	sp, r7
 80158a4:	b002      	add	sp, #8
 80158a6:	bd80      	pop	{r7, pc}
 80158a8:	20000078 	.word	0x20000078

080158ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80158b6:	200f      	movs	r0, #15
 80158b8:	183b      	adds	r3, r7, r0
 80158ba:	2202      	movs	r2, #2
 80158bc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d007      	beq.n	80158d4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80158c4:	687a      	ldr	r2, [r7, #4]
 80158c6:	23af      	movs	r3, #175	@ 0xaf
 80158c8:	009b      	lsls	r3, r3, #2
 80158ca:	6839      	ldr	r1, [r7, #0]
 80158cc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80158ce:	183b      	adds	r3, r7, r0
 80158d0:	2200      	movs	r2, #0
 80158d2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80158d4:	230f      	movs	r3, #15
 80158d6:	18fb      	adds	r3, r7, r3
 80158d8:	781b      	ldrb	r3, [r3, #0]
}
 80158da:	0018      	movs	r0, r3
 80158dc:	46bd      	mov	sp, r7
 80158de:	b004      	add	sp, #16
 80158e0:	bd80      	pop	{r7, pc}

080158e2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80158e2:	b580      	push	{r7, lr}
 80158e4:	b086      	sub	sp, #24
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	60f8      	str	r0, [r7, #12]
 80158ea:	60b9      	str	r1, [r7, #8]
 80158ec:	1dbb      	adds	r3, r7, #6
 80158ee:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80158f0:	68fa      	ldr	r2, [r7, #12]
 80158f2:	23ae      	movs	r3, #174	@ 0xae
 80158f4:	009b      	lsls	r3, r3, #2
 80158f6:	58d3      	ldr	r3, [r2, r3]
 80158f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80158fa:	697a      	ldr	r2, [r7, #20]
 80158fc:	2382      	movs	r3, #130	@ 0x82
 80158fe:	009b      	lsls	r3, r3, #2
 8015900:	68b9      	ldr	r1, [r7, #8]
 8015902:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8015904:	1dbb      	adds	r3, r7, #6
 8015906:	8819      	ldrh	r1, [r3, #0]
 8015908:	697a      	ldr	r2, [r7, #20]
 801590a:	2384      	movs	r3, #132	@ 0x84
 801590c:	009b      	lsls	r3, r3, #2
 801590e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8015910:	2300      	movs	r3, #0
}
 8015912:	0018      	movs	r0, r3
 8015914:	46bd      	mov	sp, r7
 8015916:	b006      	add	sp, #24
 8015918:	bd80      	pop	{r7, pc}

0801591a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801591a:	b580      	push	{r7, lr}
 801591c:	b084      	sub	sp, #16
 801591e:	af00      	add	r7, sp, #0
 8015920:	6078      	str	r0, [r7, #4]
 8015922:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015924:	687a      	ldr	r2, [r7, #4]
 8015926:	23ae      	movs	r3, #174	@ 0xae
 8015928:	009b      	lsls	r3, r3, #2
 801592a:	58d3      	ldr	r3, [r2, r3]
 801592c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801592e:	68fa      	ldr	r2, [r7, #12]
 8015930:	2381      	movs	r3, #129	@ 0x81
 8015932:	009b      	lsls	r3, r3, #2
 8015934:	6839      	ldr	r1, [r7, #0]
 8015936:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8015938:	2300      	movs	r3, #0
}
 801593a:	0018      	movs	r0, r3
 801593c:	46bd      	mov	sp, r7
 801593e:	b004      	add	sp, #16
 8015940:	bd80      	pop	{r7, pc}

08015942 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015942:	b580      	push	{r7, lr}
 8015944:	b084      	sub	sp, #16
 8015946:	af00      	add	r7, sp, #0
 8015948:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801594a:	687a      	ldr	r2, [r7, #4]
 801594c:	23ae      	movs	r3, #174	@ 0xae
 801594e:	009b      	lsls	r3, r3, #2
 8015950:	58d3      	ldr	r3, [r2, r3]
 8015952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8015954:	687a      	ldr	r2, [r7, #4]
 8015956:	23ae      	movs	r3, #174	@ 0xae
 8015958:	009b      	lsls	r3, r3, #2
 801595a:	58d3      	ldr	r3, [r2, r3]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d022      	beq.n	80159a6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8015960:	68fa      	ldr	r2, [r7, #12]
 8015962:	2385      	movs	r3, #133	@ 0x85
 8015964:	009b      	lsls	r3, r3, #2
 8015966:	58d3      	ldr	r3, [r2, r3]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d11a      	bne.n	80159a2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801596c:	68fa      	ldr	r2, [r7, #12]
 801596e:	2385      	movs	r3, #133	@ 0x85
 8015970:	009b      	lsls	r3, r3, #2
 8015972:	2101      	movs	r1, #1
 8015974:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8015976:	68fa      	ldr	r2, [r7, #12]
 8015978:	2384      	movs	r3, #132	@ 0x84
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	58d2      	ldr	r2, [r2, r3]
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8015982:	68fa      	ldr	r2, [r7, #12]
 8015984:	2382      	movs	r3, #130	@ 0x82
 8015986:	009b      	lsls	r3, r3, #2
 8015988:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801598a:	68fa      	ldr	r2, [r7, #12]
 801598c:	2384      	movs	r3, #132	@ 0x84
 801598e:	009b      	lsls	r3, r3, #2
 8015990:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8015992:	b29b      	uxth	r3, r3
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	000a      	movs	r2, r1
 8015998:	2181      	movs	r1, #129	@ 0x81
 801599a:	f001 ff0c 	bl	80177b6 <USBD_LL_Transmit>

      return USBD_OK;
 801599e:	2300      	movs	r3, #0
 80159a0:	e002      	b.n	80159a8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 80159a2:	2301      	movs	r3, #1
 80159a4:	e000      	b.n	80159a8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 80159a6:	2302      	movs	r3, #2
  }
}
 80159a8:	0018      	movs	r0, r3
 80159aa:	46bd      	mov	sp, r7
 80159ac:	b004      	add	sp, #16
 80159ae:	bd80      	pop	{r7, pc}

080159b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b084      	sub	sp, #16
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	23ae      	movs	r3, #174	@ 0xae
 80159bc:	009b      	lsls	r3, r3, #2
 80159be:	58d3      	ldr	r3, [r2, r3]
 80159c0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80159c2:	687a      	ldr	r2, [r7, #4]
 80159c4:	23ae      	movs	r3, #174	@ 0xae
 80159c6:	009b      	lsls	r3, r3, #2
 80159c8:	58d3      	ldr	r3, [r2, r3]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d019      	beq.n	8015a02 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	7c1b      	ldrb	r3, [r3, #16]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d10a      	bne.n	80159ec <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80159d6:	68fa      	ldr	r2, [r7, #12]
 80159d8:	2381      	movs	r3, #129	@ 0x81
 80159da:	009b      	lsls	r3, r3, #2
 80159dc:	58d2      	ldr	r2, [r2, r3]
 80159de:	2380      	movs	r3, #128	@ 0x80
 80159e0:	009b      	lsls	r3, r3, #2
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	2101      	movs	r1, #1
 80159e6:	f001 ff1d 	bl	8017824 <USBD_LL_PrepareReceive>
 80159ea:	e008      	b.n	80159fe <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80159ec:	68fa      	ldr	r2, [r7, #12]
 80159ee:	2381      	movs	r3, #129	@ 0x81
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	58d2      	ldr	r2, [r2, r3]
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	2340      	movs	r3, #64	@ 0x40
 80159f8:	2101      	movs	r1, #1
 80159fa:	f001 ff13 	bl	8017824 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80159fe:	2300      	movs	r3, #0
 8015a00:	e000      	b.n	8015a04 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8015a02:	2302      	movs	r3, #2
  }
}
 8015a04:	0018      	movs	r0, r3
 8015a06:	46bd      	mov	sp, r7
 8015a08:	b004      	add	sp, #16
 8015a0a:	bd80      	pop	{r7, pc}

08015a0c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b084      	sub	sp, #16
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	60f8      	str	r0, [r7, #12]
 8015a14:	60b9      	str	r1, [r7, #8]
 8015a16:	1dfb      	adds	r3, r7, #7
 8015a18:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d101      	bne.n	8015a24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015a20:	2302      	movs	r3, #2
 8015a22:	e020      	b.n	8015a66 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8015a24:	68fa      	ldr	r2, [r7, #12]
 8015a26:	23ad      	movs	r3, #173	@ 0xad
 8015a28:	009b      	lsls	r3, r3, #2
 8015a2a:	58d3      	ldr	r3, [r2, r3]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d004      	beq.n	8015a3a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8015a30:	68fa      	ldr	r2, [r7, #12]
 8015a32:	23ad      	movs	r3, #173	@ 0xad
 8015a34:	009b      	lsls	r3, r3, #2
 8015a36:	2100      	movs	r1, #0
 8015a38:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015a3a:	68bb      	ldr	r3, [r7, #8]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d004      	beq.n	8015a4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015a40:	68fa      	ldr	r2, [r7, #12]
 8015a42:	23ac      	movs	r3, #172	@ 0xac
 8015a44:	009b      	lsls	r3, r3, #2
 8015a46:	68b9      	ldr	r1, [r7, #8]
 8015a48:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a4a:	68fa      	ldr	r2, [r7, #12]
 8015a4c:	23a7      	movs	r3, #167	@ 0xa7
 8015a4e:	009b      	lsls	r3, r3, #2
 8015a50:	2101      	movs	r1, #1
 8015a52:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	1dfa      	adds	r2, r7, #7
 8015a58:	7812      	ldrb	r2, [r2, #0]
 8015a5a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	0018      	movs	r0, r3
 8015a60:	f001 fd0c 	bl	801747c <USBD_LL_Init>

  return USBD_OK;
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	0018      	movs	r0, r3
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	b004      	add	sp, #16
 8015a6c:	bd80      	pop	{r7, pc}

08015a6e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015a6e:	b580      	push	{r7, lr}
 8015a70:	b084      	sub	sp, #16
 8015a72:	af00      	add	r7, sp, #0
 8015a74:	6078      	str	r0, [r7, #4]
 8015a76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8015a78:	200f      	movs	r0, #15
 8015a7a:	183b      	adds	r3, r7, r0
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d008      	beq.n	8015a98 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	23ad      	movs	r3, #173	@ 0xad
 8015a8a:	009b      	lsls	r3, r3, #2
 8015a8c:	6839      	ldr	r1, [r7, #0]
 8015a8e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8015a90:	183b      	adds	r3, r7, r0
 8015a92:	2200      	movs	r2, #0
 8015a94:	701a      	strb	r2, [r3, #0]
 8015a96:	e003      	b.n	8015aa0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8015a98:	230f      	movs	r3, #15
 8015a9a:	18fb      	adds	r3, r7, r3
 8015a9c:	2202      	movs	r2, #2
 8015a9e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8015aa0:	230f      	movs	r3, #15
 8015aa2:	18fb      	adds	r3, r7, r3
 8015aa4:	781b      	ldrb	r3, [r3, #0]
}
 8015aa6:	0018      	movs	r0, r3
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	b004      	add	sp, #16
 8015aac:	bd80      	pop	{r7, pc}

08015aae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015aae:	b580      	push	{r7, lr}
 8015ab0:	b082      	sub	sp, #8
 8015ab2:	af00      	add	r7, sp, #0
 8015ab4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	0018      	movs	r0, r3
 8015aba:	f001 fd43 	bl	8017544 <USBD_LL_Start>

  return USBD_OK;
 8015abe:	2300      	movs	r3, #0
}
 8015ac0:	0018      	movs	r0, r3
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	b002      	add	sp, #8
 8015ac6:	bd80      	pop	{r7, pc}

08015ac8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015ad0:	2300      	movs	r3, #0
}
 8015ad2:	0018      	movs	r0, r3
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	b002      	add	sp, #8
 8015ad8:	bd80      	pop	{r7, pc}

08015ada <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015ada:	b590      	push	{r4, r7, lr}
 8015adc:	b085      	sub	sp, #20
 8015ade:	af00      	add	r7, sp, #0
 8015ae0:	6078      	str	r0, [r7, #4]
 8015ae2:	000a      	movs	r2, r1
 8015ae4:	1cfb      	adds	r3, r7, #3
 8015ae6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015ae8:	240f      	movs	r4, #15
 8015aea:	193b      	adds	r3, r7, r4
 8015aec:	2202      	movs	r2, #2
 8015aee:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8015af0:	687a      	ldr	r2, [r7, #4]
 8015af2:	23ad      	movs	r3, #173	@ 0xad
 8015af4:	009b      	lsls	r3, r3, #2
 8015af6:	58d3      	ldr	r3, [r2, r3]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d00e      	beq.n	8015b1a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	23ad      	movs	r3, #173	@ 0xad
 8015b00:	009b      	lsls	r3, r3, #2
 8015b02:	58d3      	ldr	r3, [r2, r3]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	1cfa      	adds	r2, r7, #3
 8015b08:	7811      	ldrb	r1, [r2, #0]
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	0010      	movs	r0, r2
 8015b0e:	4798      	blx	r3
 8015b10:	1e03      	subs	r3, r0, #0
 8015b12:	d102      	bne.n	8015b1a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8015b14:	193b      	adds	r3, r7, r4
 8015b16:	2200      	movs	r2, #0
 8015b18:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8015b1a:	230f      	movs	r3, #15
 8015b1c:	18fb      	adds	r3, r7, r3
 8015b1e:	781b      	ldrb	r3, [r3, #0]
}
 8015b20:	0018      	movs	r0, r3
 8015b22:	46bd      	mov	sp, r7
 8015b24:	b005      	add	sp, #20
 8015b26:	bd90      	pop	{r4, r7, pc}

08015b28 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	000a      	movs	r2, r1
 8015b32:	1cfb      	adds	r3, r7, #3
 8015b34:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8015b36:	687a      	ldr	r2, [r7, #4]
 8015b38:	23ad      	movs	r3, #173	@ 0xad
 8015b3a:	009b      	lsls	r3, r3, #2
 8015b3c:	58d3      	ldr	r3, [r2, r3]
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	1cfa      	adds	r2, r7, #3
 8015b42:	7811      	ldrb	r1, [r2, #0]
 8015b44:	687a      	ldr	r2, [r7, #4]
 8015b46:	0010      	movs	r0, r2
 8015b48:	4798      	blx	r3

  return USBD_OK;
 8015b4a:	2300      	movs	r3, #0
}
 8015b4c:	0018      	movs	r0, r3
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	b002      	add	sp, #8
 8015b52:	bd80      	pop	{r7, pc}

08015b54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b082      	sub	sp, #8
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
 8015b5c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	22aa      	movs	r2, #170	@ 0xaa
 8015b62:	0092      	lsls	r2, r2, #2
 8015b64:	4694      	mov	ip, r2
 8015b66:	4463      	add	r3, ip
 8015b68:	683a      	ldr	r2, [r7, #0]
 8015b6a:	0011      	movs	r1, r2
 8015b6c:	0018      	movs	r0, r3
 8015b6e:	f001 f810 	bl	8016b92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015b72:	687a      	ldr	r2, [r7, #4]
 8015b74:	23a5      	movs	r3, #165	@ 0xa5
 8015b76:	009b      	lsls	r3, r3, #2
 8015b78:	2101      	movs	r1, #1
 8015b7a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	4a23      	ldr	r2, [pc, #140]	@ (8015c0c <USBD_LL_SetupStage+0xb8>)
 8015b80:	5a9b      	ldrh	r3, [r3, r2]
 8015b82:	0019      	movs	r1, r3
 8015b84:	687a      	ldr	r2, [r7, #4]
 8015b86:	23a6      	movs	r3, #166	@ 0xa6
 8015b88:	009b      	lsls	r3, r3, #2
 8015b8a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	23aa      	movs	r3, #170	@ 0xaa
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	5cd3      	ldrb	r3, [r2, r3]
 8015b94:	001a      	movs	r2, r3
 8015b96:	231f      	movs	r3, #31
 8015b98:	4013      	ands	r3, r2
 8015b9a:	2b02      	cmp	r3, #2
 8015b9c:	d019      	beq.n	8015bd2 <USBD_LL_SetupStage+0x7e>
 8015b9e:	d822      	bhi.n	8015be6 <USBD_LL_SetupStage+0x92>
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d002      	beq.n	8015baa <USBD_LL_SetupStage+0x56>
 8015ba4:	2b01      	cmp	r3, #1
 8015ba6:	d00a      	beq.n	8015bbe <USBD_LL_SetupStage+0x6a>
 8015ba8:	e01d      	b.n	8015be6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	22aa      	movs	r2, #170	@ 0xaa
 8015bae:	0092      	lsls	r2, r2, #2
 8015bb0:	189a      	adds	r2, r3, r2
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	0011      	movs	r1, r2
 8015bb6:	0018      	movs	r0, r3
 8015bb8:	f000 fa10 	bl	8015fdc <USBD_StdDevReq>
      break;
 8015bbc:	e020      	b.n	8015c00 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	22aa      	movs	r2, #170	@ 0xaa
 8015bc2:	0092      	lsls	r2, r2, #2
 8015bc4:	189a      	adds	r2, r3, r2
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	0011      	movs	r1, r2
 8015bca:	0018      	movs	r0, r3
 8015bcc:	f000 fa78 	bl	80160c0 <USBD_StdItfReq>
      break;
 8015bd0:	e016      	b.n	8015c00 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	22aa      	movs	r2, #170	@ 0xaa
 8015bd6:	0092      	lsls	r2, r2, #2
 8015bd8:	189a      	adds	r2, r3, r2
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	0011      	movs	r1, r2
 8015bde:	0018      	movs	r0, r3
 8015be0:	f000 fac5 	bl	801616e <USBD_StdEPReq>
      break;
 8015be4:	e00c      	b.n	8015c00 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015be6:	687a      	ldr	r2, [r7, #4]
 8015be8:	23aa      	movs	r3, #170	@ 0xaa
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	5cd3      	ldrb	r3, [r2, r3]
 8015bee:	227f      	movs	r2, #127	@ 0x7f
 8015bf0:	4393      	bics	r3, r2
 8015bf2:	b2da      	uxtb	r2, r3
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	0011      	movs	r1, r2
 8015bf8:	0018      	movs	r0, r3
 8015bfa:	f001 fd2a 	bl	8017652 <USBD_LL_StallEP>
      break;
 8015bfe:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015c00:	2300      	movs	r3, #0
}
 8015c02:	0018      	movs	r0, r3
 8015c04:	46bd      	mov	sp, r7
 8015c06:	b002      	add	sp, #8
 8015c08:	bd80      	pop	{r7, pc}
 8015c0a:	46c0      	nop			@ (mov r8, r8)
 8015c0c:	000002ae 	.word	0x000002ae

08015c10 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b086      	sub	sp, #24
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	607a      	str	r2, [r7, #4]
 8015c1a:	200b      	movs	r0, #11
 8015c1c:	183b      	adds	r3, r7, r0
 8015c1e:	1c0a      	adds	r2, r1, #0
 8015c20:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015c22:	183b      	adds	r3, r7, r0
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d154      	bne.n	8015cd4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	3355      	adds	r3, #85	@ 0x55
 8015c2e:	33ff      	adds	r3, #255	@ 0xff
 8015c30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015c32:	68fa      	ldr	r2, [r7, #12]
 8015c34:	23a5      	movs	r3, #165	@ 0xa5
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	58d3      	ldr	r3, [r2, r3]
 8015c3a:	2b03      	cmp	r3, #3
 8015c3c:	d139      	bne.n	8015cb2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015c3e:	697b      	ldr	r3, [r7, #20]
 8015c40:	68da      	ldr	r2, [r3, #12]
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	691b      	ldr	r3, [r3, #16]
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d919      	bls.n	8015c7e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	68da      	ldr	r2, [r3, #12]
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	691b      	ldr	r3, [r3, #16]
 8015c52:	1ad2      	subs	r2, r2, r3
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	68da      	ldr	r2, [r3, #12]
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d203      	bcs.n	8015c6c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8015c68:	b29b      	uxth	r3, r3
 8015c6a:	e002      	b.n	8015c72 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015c70:	b29b      	uxth	r3, r3
 8015c72:	6879      	ldr	r1, [r7, #4]
 8015c74:	68f8      	ldr	r0, [r7, #12]
 8015c76:	001a      	movs	r2, r3
 8015c78:	f001 f898 	bl	8016dac <USBD_CtlContinueRx>
 8015c7c:	e045      	b.n	8015d0a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015c7e:	68fa      	ldr	r2, [r7, #12]
 8015c80:	23ad      	movs	r3, #173	@ 0xad
 8015c82:	009b      	lsls	r3, r3, #2
 8015c84:	58d3      	ldr	r3, [r2, r3]
 8015c86:	691b      	ldr	r3, [r3, #16]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d00d      	beq.n	8015ca8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015c8c:	68fa      	ldr	r2, [r7, #12]
 8015c8e:	23a7      	movs	r3, #167	@ 0xa7
 8015c90:	009b      	lsls	r3, r3, #2
 8015c92:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015c94:	2b03      	cmp	r3, #3
 8015c96:	d107      	bne.n	8015ca8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015c98:	68fa      	ldr	r2, [r7, #12]
 8015c9a:	23ad      	movs	r3, #173	@ 0xad
 8015c9c:	009b      	lsls	r3, r3, #2
 8015c9e:	58d3      	ldr	r3, [r2, r3]
 8015ca0:	691b      	ldr	r3, [r3, #16]
 8015ca2:	68fa      	ldr	r2, [r7, #12]
 8015ca4:	0010      	movs	r0, r2
 8015ca6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	0018      	movs	r0, r3
 8015cac:	f001 f891 	bl	8016dd2 <USBD_CtlSendStatus>
 8015cb0:	e02b      	b.n	8015d0a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8015cb2:	68fa      	ldr	r2, [r7, #12]
 8015cb4:	23a5      	movs	r3, #165	@ 0xa5
 8015cb6:	009b      	lsls	r3, r3, #2
 8015cb8:	58d3      	ldr	r3, [r2, r3]
 8015cba:	2b05      	cmp	r3, #5
 8015cbc:	d125      	bne.n	8015d0a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	23a5      	movs	r3, #165	@ 0xa5
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	2100      	movs	r1, #0
 8015ccc:	0018      	movs	r0, r3
 8015cce:	f001 fcc0 	bl	8017652 <USBD_LL_StallEP>
 8015cd2:	e01a      	b.n	8015d0a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015cd4:	68fa      	ldr	r2, [r7, #12]
 8015cd6:	23ad      	movs	r3, #173	@ 0xad
 8015cd8:	009b      	lsls	r3, r3, #2
 8015cda:	58d3      	ldr	r3, [r2, r3]
 8015cdc:	699b      	ldr	r3, [r3, #24]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d011      	beq.n	8015d06 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015ce2:	68fa      	ldr	r2, [r7, #12]
 8015ce4:	23a7      	movs	r3, #167	@ 0xa7
 8015ce6:	009b      	lsls	r3, r3, #2
 8015ce8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8015cea:	2b03      	cmp	r3, #3
 8015cec:	d10b      	bne.n	8015d06 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8015cee:	68fa      	ldr	r2, [r7, #12]
 8015cf0:	23ad      	movs	r3, #173	@ 0xad
 8015cf2:	009b      	lsls	r3, r3, #2
 8015cf4:	58d3      	ldr	r3, [r2, r3]
 8015cf6:	699b      	ldr	r3, [r3, #24]
 8015cf8:	220b      	movs	r2, #11
 8015cfa:	18ba      	adds	r2, r7, r2
 8015cfc:	7811      	ldrb	r1, [r2, #0]
 8015cfe:	68fa      	ldr	r2, [r7, #12]
 8015d00:	0010      	movs	r0, r2
 8015d02:	4798      	blx	r3
 8015d04:	e001      	b.n	8015d0a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015d06:	2302      	movs	r3, #2
 8015d08:	e000      	b.n	8015d0c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8015d0a:	2300      	movs	r3, #0
}
 8015d0c:	0018      	movs	r0, r3
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	b006      	add	sp, #24
 8015d12:	bd80      	pop	{r7, pc}

08015d14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b086      	sub	sp, #24
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	60f8      	str	r0, [r7, #12]
 8015d1c:	607a      	str	r2, [r7, #4]
 8015d1e:	200b      	movs	r0, #11
 8015d20:	183b      	adds	r3, r7, r0
 8015d22:	1c0a      	adds	r2, r1, #0
 8015d24:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015d26:	183b      	adds	r3, r7, r0
 8015d28:	781b      	ldrb	r3, [r3, #0]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d000      	beq.n	8015d30 <USBD_LL_DataInStage+0x1c>
 8015d2e:	e08e      	b.n	8015e4e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	3314      	adds	r3, #20
 8015d34:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015d36:	68fa      	ldr	r2, [r7, #12]
 8015d38:	23a5      	movs	r3, #165	@ 0xa5
 8015d3a:	009b      	lsls	r3, r3, #2
 8015d3c:	58d3      	ldr	r3, [r2, r3]
 8015d3e:	2b02      	cmp	r3, #2
 8015d40:	d164      	bne.n	8015e0c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	68da      	ldr	r2, [r3, #12]
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	691b      	ldr	r3, [r3, #16]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d915      	bls.n	8015d7a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	68da      	ldr	r2, [r3, #12]
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	691b      	ldr	r3, [r3, #16]
 8015d56:	1ad2      	subs	r2, r2, r3
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8015d5c:	697b      	ldr	r3, [r7, #20]
 8015d5e:	68db      	ldr	r3, [r3, #12]
 8015d60:	b29a      	uxth	r2, r3
 8015d62:	6879      	ldr	r1, [r7, #4]
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	0018      	movs	r0, r3
 8015d68:	f000 ffe9 	bl	8016d3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d6c:	68f8      	ldr	r0, [r7, #12]
 8015d6e:	2300      	movs	r3, #0
 8015d70:	2200      	movs	r2, #0
 8015d72:	2100      	movs	r1, #0
 8015d74:	f001 fd56 	bl	8017824 <USBD_LL_PrepareReceive>
 8015d78:	e059      	b.n	8015e2e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015d7a:	697b      	ldr	r3, [r7, #20]
 8015d7c:	689a      	ldr	r2, [r3, #8]
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	691b      	ldr	r3, [r3, #16]
 8015d82:	0019      	movs	r1, r3
 8015d84:	0010      	movs	r0, r2
 8015d86:	f7ea fa61 	bl	800024c <__aeabi_uidivmod>
 8015d8a:	1e0b      	subs	r3, r1, #0
 8015d8c:	d11f      	bne.n	8015dce <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8015d8e:	697b      	ldr	r3, [r7, #20]
 8015d90:	689a      	ldr	r2, [r3, #8]
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015d96:	429a      	cmp	r2, r3
 8015d98:	d319      	bcc.n	8015dce <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8015d9a:	697b      	ldr	r3, [r7, #20]
 8015d9c:	689a      	ldr	r2, [r3, #8]
 8015d9e:	68f9      	ldr	r1, [r7, #12]
 8015da0:	23a6      	movs	r3, #166	@ 0xa6
 8015da2:	009b      	lsls	r3, r3, #2
 8015da4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d211      	bcs.n	8015dce <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	2200      	movs	r2, #0
 8015dae:	2100      	movs	r1, #0
 8015db0:	0018      	movs	r0, r3
 8015db2:	f000 ffc4 	bl	8016d3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015db6:	68fa      	ldr	r2, [r7, #12]
 8015db8:	23a6      	movs	r3, #166	@ 0xa6
 8015dba:	009b      	lsls	r3, r3, #2
 8015dbc:	2100      	movs	r1, #0
 8015dbe:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015dc0:	68f8      	ldr	r0, [r7, #12]
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	2100      	movs	r1, #0
 8015dc8:	f001 fd2c 	bl	8017824 <USBD_LL_PrepareReceive>
 8015dcc:	e02f      	b.n	8015e2e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015dce:	68fa      	ldr	r2, [r7, #12]
 8015dd0:	23ad      	movs	r3, #173	@ 0xad
 8015dd2:	009b      	lsls	r3, r3, #2
 8015dd4:	58d3      	ldr	r3, [r2, r3]
 8015dd6:	68db      	ldr	r3, [r3, #12]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d00d      	beq.n	8015df8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015ddc:	68fa      	ldr	r2, [r7, #12]
 8015dde:	23a7      	movs	r3, #167	@ 0xa7
 8015de0:	009b      	lsls	r3, r3, #2
 8015de2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015de4:	2b03      	cmp	r3, #3
 8015de6:	d107      	bne.n	8015df8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015de8:	68fa      	ldr	r2, [r7, #12]
 8015dea:	23ad      	movs	r3, #173	@ 0xad
 8015dec:	009b      	lsls	r3, r3, #2
 8015dee:	58d3      	ldr	r3, [r2, r3]
 8015df0:	68db      	ldr	r3, [r3, #12]
 8015df2:	68fa      	ldr	r2, [r7, #12]
 8015df4:	0010      	movs	r0, r2
 8015df6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2180      	movs	r1, #128	@ 0x80
 8015dfc:	0018      	movs	r0, r3
 8015dfe:	f001 fc28 	bl	8017652 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	0018      	movs	r0, r3
 8015e06:	f000 fff8 	bl	8016dfa <USBD_CtlReceiveStatus>
 8015e0a:	e010      	b.n	8015e2e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015e0c:	68fa      	ldr	r2, [r7, #12]
 8015e0e:	23a5      	movs	r3, #165	@ 0xa5
 8015e10:	009b      	lsls	r3, r3, #2
 8015e12:	58d3      	ldr	r3, [r2, r3]
 8015e14:	2b04      	cmp	r3, #4
 8015e16:	d005      	beq.n	8015e24 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8015e18:	68fa      	ldr	r2, [r7, #12]
 8015e1a:	23a5      	movs	r3, #165	@ 0xa5
 8015e1c:	009b      	lsls	r3, r3, #2
 8015e1e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d104      	bne.n	8015e2e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	2180      	movs	r1, #128	@ 0x80
 8015e28:	0018      	movs	r0, r3
 8015e2a:	f001 fc12 	bl	8017652 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8015e2e:	68fa      	ldr	r2, [r7, #12]
 8015e30:	23a8      	movs	r3, #168	@ 0xa8
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	5cd3      	ldrb	r3, [r2, r3]
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d124      	bne.n	8015e84 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	0018      	movs	r0, r3
 8015e3e:	f7ff fe43 	bl	8015ac8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015e42:	68fa      	ldr	r2, [r7, #12]
 8015e44:	23a8      	movs	r3, #168	@ 0xa8
 8015e46:	009b      	lsls	r3, r3, #2
 8015e48:	2100      	movs	r1, #0
 8015e4a:	54d1      	strb	r1, [r2, r3]
 8015e4c:	e01a      	b.n	8015e84 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015e4e:	68fa      	ldr	r2, [r7, #12]
 8015e50:	23ad      	movs	r3, #173	@ 0xad
 8015e52:	009b      	lsls	r3, r3, #2
 8015e54:	58d3      	ldr	r3, [r2, r3]
 8015e56:	695b      	ldr	r3, [r3, #20]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d011      	beq.n	8015e80 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015e5c:	68fa      	ldr	r2, [r7, #12]
 8015e5e:	23a7      	movs	r3, #167	@ 0xa7
 8015e60:	009b      	lsls	r3, r3, #2
 8015e62:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8015e64:	2b03      	cmp	r3, #3
 8015e66:	d10b      	bne.n	8015e80 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8015e68:	68fa      	ldr	r2, [r7, #12]
 8015e6a:	23ad      	movs	r3, #173	@ 0xad
 8015e6c:	009b      	lsls	r3, r3, #2
 8015e6e:	58d3      	ldr	r3, [r2, r3]
 8015e70:	695b      	ldr	r3, [r3, #20]
 8015e72:	220b      	movs	r2, #11
 8015e74:	18ba      	adds	r2, r7, r2
 8015e76:	7811      	ldrb	r1, [r2, #0]
 8015e78:	68fa      	ldr	r2, [r7, #12]
 8015e7a:	0010      	movs	r0, r2
 8015e7c:	4798      	blx	r3
 8015e7e:	e001      	b.n	8015e84 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015e80:	2302      	movs	r3, #2
 8015e82:	e000      	b.n	8015e86 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8015e84:	2300      	movs	r3, #0
}
 8015e86:	0018      	movs	r0, r3
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	b006      	add	sp, #24
 8015e8c:	bd80      	pop	{r7, pc}

08015e8e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015e8e:	b580      	push	{r7, lr}
 8015e90:	b082      	sub	sp, #8
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	2340      	movs	r3, #64	@ 0x40
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	2100      	movs	r1, #0
 8015e9e:	f001 fb76 	bl	801758e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015ea2:	687a      	ldr	r2, [r7, #4]
 8015ea4:	23ac      	movs	r3, #172	@ 0xac
 8015ea6:	005b      	lsls	r3, r3, #1
 8015ea8:	2101      	movs	r1, #1
 8015eaa:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	23b2      	movs	r3, #178	@ 0xb2
 8015eb0:	005b      	lsls	r3, r3, #1
 8015eb2:	2140      	movs	r1, #64	@ 0x40
 8015eb4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015eb6:	6878      	ldr	r0, [r7, #4]
 8015eb8:	2340      	movs	r3, #64	@ 0x40
 8015eba:	2200      	movs	r2, #0
 8015ebc:	2180      	movs	r1, #128	@ 0x80
 8015ebe:	f001 fb66 	bl	801758e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	2201      	movs	r2, #1
 8015ec6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2240      	movs	r2, #64	@ 0x40
 8015ecc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	23a7      	movs	r3, #167	@ 0xa7
 8015ed2:	009b      	lsls	r3, r3, #2
 8015ed4:	2101      	movs	r1, #1
 8015ed6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8015ed8:	687a      	ldr	r2, [r7, #4]
 8015eda:	23a5      	movs	r3, #165	@ 0xa5
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	2100      	movs	r1, #0
 8015ee0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015ee8:	687a      	ldr	r2, [r7, #4]
 8015eea:	23a9      	movs	r3, #169	@ 0xa9
 8015eec:	009b      	lsls	r3, r3, #2
 8015eee:	2100      	movs	r1, #0
 8015ef0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8015ef2:	687a      	ldr	r2, [r7, #4]
 8015ef4:	23ae      	movs	r3, #174	@ 0xae
 8015ef6:	009b      	lsls	r3, r3, #2
 8015ef8:	58d3      	ldr	r3, [r2, r3]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d00a      	beq.n	8015f14 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015efe:	687a      	ldr	r2, [r7, #4]
 8015f00:	23ad      	movs	r3, #173	@ 0xad
 8015f02:	009b      	lsls	r3, r3, #2
 8015f04:	58d3      	ldr	r3, [r2, r3]
 8015f06:	685a      	ldr	r2, [r3, #4]
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	685b      	ldr	r3, [r3, #4]
 8015f0c:	b2d9      	uxtb	r1, r3
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	0018      	movs	r0, r3
 8015f12:	4790      	blx	r2
  }

  return USBD_OK;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	0018      	movs	r0, r3
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	b002      	add	sp, #8
 8015f1c:	bd80      	pop	{r7, pc}

08015f1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015f1e:	b580      	push	{r7, lr}
 8015f20:	b082      	sub	sp, #8
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
 8015f26:	000a      	movs	r2, r1
 8015f28:	1cfb      	adds	r3, r7, #3
 8015f2a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	1cfa      	adds	r2, r7, #3
 8015f30:	7812      	ldrb	r2, [r2, #0]
 8015f32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015f34:	2300      	movs	r3, #0
}
 8015f36:	0018      	movs	r0, r3
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	b002      	add	sp, #8
 8015f3c:	bd80      	pop	{r7, pc}
	...

08015f40 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8015f48:	687a      	ldr	r2, [r7, #4]
 8015f4a:	23a7      	movs	r3, #167	@ 0xa7
 8015f4c:	009b      	lsls	r3, r3, #2
 8015f4e:	5cd1      	ldrb	r1, [r2, r3]
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	4a06      	ldr	r2, [pc, #24]	@ (8015f6c <USBD_LL_Suspend+0x2c>)
 8015f54:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8015f56:	687a      	ldr	r2, [r7, #4]
 8015f58:	23a7      	movs	r3, #167	@ 0xa7
 8015f5a:	009b      	lsls	r3, r3, #2
 8015f5c:	2104      	movs	r1, #4
 8015f5e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8015f60:	2300      	movs	r3, #0
}
 8015f62:	0018      	movs	r0, r3
 8015f64:	46bd      	mov	sp, r7
 8015f66:	b002      	add	sp, #8
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	46c0      	nop			@ (mov r8, r8)
 8015f6c:	0000029d 	.word	0x0000029d

08015f70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015f78:	687a      	ldr	r2, [r7, #4]
 8015f7a:	23a7      	movs	r3, #167	@ 0xa7
 8015f7c:	009b      	lsls	r3, r3, #2
 8015f7e:	5cd3      	ldrb	r3, [r2, r3]
 8015f80:	2b04      	cmp	r3, #4
 8015f82:	d106      	bne.n	8015f92 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	4a05      	ldr	r2, [pc, #20]	@ (8015f9c <USBD_LL_Resume+0x2c>)
 8015f88:	5c99      	ldrb	r1, [r3, r2]
 8015f8a:	687a      	ldr	r2, [r7, #4]
 8015f8c:	23a7      	movs	r3, #167	@ 0xa7
 8015f8e:	009b      	lsls	r3, r3, #2
 8015f90:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8015f92:	2300      	movs	r3, #0
}
 8015f94:	0018      	movs	r0, r3
 8015f96:	46bd      	mov	sp, r7
 8015f98:	b002      	add	sp, #8
 8015f9a:	bd80      	pop	{r7, pc}
 8015f9c:	0000029d 	.word	0x0000029d

08015fa0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b082      	sub	sp, #8
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	23a7      	movs	r3, #167	@ 0xa7
 8015fac:	009b      	lsls	r3, r3, #2
 8015fae:	5cd3      	ldrb	r3, [r2, r3]
 8015fb0:	2b03      	cmp	r3, #3
 8015fb2:	d10e      	bne.n	8015fd2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	23ad      	movs	r3, #173	@ 0xad
 8015fb8:	009b      	lsls	r3, r3, #2
 8015fba:	58d3      	ldr	r3, [r2, r3]
 8015fbc:	69db      	ldr	r3, [r3, #28]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d007      	beq.n	8015fd2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	23ad      	movs	r3, #173	@ 0xad
 8015fc6:	009b      	lsls	r3, r3, #2
 8015fc8:	58d3      	ldr	r3, [r2, r3]
 8015fca:	69db      	ldr	r3, [r3, #28]
 8015fcc:	687a      	ldr	r2, [r7, #4]
 8015fce:	0010      	movs	r0, r2
 8015fd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015fd2:	2300      	movs	r3, #0
}
 8015fd4:	0018      	movs	r0, r3
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	b002      	add	sp, #8
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015fe6:	230f      	movs	r3, #15
 8015fe8:	18fb      	adds	r3, r7, r3
 8015fea:	2200      	movs	r2, #0
 8015fec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	781b      	ldrb	r3, [r3, #0]
 8015ff2:	001a      	movs	r2, r3
 8015ff4:	2360      	movs	r3, #96	@ 0x60
 8015ff6:	4013      	ands	r3, r2
 8015ff8:	2b40      	cmp	r3, #64	@ 0x40
 8015ffa:	d004      	beq.n	8016006 <USBD_StdDevReq+0x2a>
 8015ffc:	d84f      	bhi.n	801609e <USBD_StdDevReq+0xc2>
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d00b      	beq.n	801601a <USBD_StdDevReq+0x3e>
 8016002:	2b20      	cmp	r3, #32
 8016004:	d14b      	bne.n	801609e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	23ad      	movs	r3, #173	@ 0xad
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	58d3      	ldr	r3, [r2, r3]
 801600e:	689b      	ldr	r3, [r3, #8]
 8016010:	6839      	ldr	r1, [r7, #0]
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	0010      	movs	r0, r2
 8016016:	4798      	blx	r3
      break;
 8016018:	e048      	b.n	80160ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	785b      	ldrb	r3, [r3, #1]
 801601e:	2b09      	cmp	r3, #9
 8016020:	d835      	bhi.n	801608e <USBD_StdDevReq+0xb2>
 8016022:	009a      	lsls	r2, r3, #2
 8016024:	4b25      	ldr	r3, [pc, #148]	@ (80160bc <USBD_StdDevReq+0xe0>)
 8016026:	18d3      	adds	r3, r2, r3
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801602c:	683a      	ldr	r2, [r7, #0]
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	0011      	movs	r1, r2
 8016032:	0018      	movs	r0, r3
 8016034:	f000 fa52 	bl	80164dc <USBD_GetDescriptor>
          break;
 8016038:	e030      	b.n	801609c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801603a:	683a      	ldr	r2, [r7, #0]
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	0011      	movs	r1, r2
 8016040:	0018      	movs	r0, r3
 8016042:	f000 fbfd 	bl	8016840 <USBD_SetAddress>
          break;
 8016046:	e029      	b.n	801609c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8016048:	683a      	ldr	r2, [r7, #0]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	0011      	movs	r1, r2
 801604e:	0018      	movs	r0, r3
 8016050:	f000 fc4a 	bl	80168e8 <USBD_SetConfig>
          break;
 8016054:	e022      	b.n	801609c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016056:	683a      	ldr	r2, [r7, #0]
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	0011      	movs	r1, r2
 801605c:	0018      	movs	r0, r3
 801605e:	f000 fce7 	bl	8016a30 <USBD_GetConfig>
          break;
 8016062:	e01b      	b.n	801609c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016064:	683a      	ldr	r2, [r7, #0]
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	0011      	movs	r1, r2
 801606a:	0018      	movs	r0, r3
 801606c:	f000 fd1b 	bl	8016aa6 <USBD_GetStatus>
          break;
 8016070:	e014      	b.n	801609c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016072:	683a      	ldr	r2, [r7, #0]
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	0011      	movs	r1, r2
 8016078:	0018      	movs	r0, r3
 801607a:	f000 fd4e 	bl	8016b1a <USBD_SetFeature>
          break;
 801607e:	e00d      	b.n	801609c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016080:	683a      	ldr	r2, [r7, #0]
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	0011      	movs	r1, r2
 8016086:	0018      	movs	r0, r3
 8016088:	f000 fd5d 	bl	8016b46 <USBD_ClrFeature>
          break;
 801608c:	e006      	b.n	801609c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801608e:	683a      	ldr	r2, [r7, #0]
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	0011      	movs	r1, r2
 8016094:	0018      	movs	r0, r3
 8016096:	f000 fdb4 	bl	8016c02 <USBD_CtlError>
          break;
 801609a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801609c:	e006      	b.n	80160ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801609e:	683a      	ldr	r2, [r7, #0]
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	0011      	movs	r1, r2
 80160a4:	0018      	movs	r0, r3
 80160a6:	f000 fdac 	bl	8016c02 <USBD_CtlError>
      break;
 80160aa:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80160ac:	230f      	movs	r3, #15
 80160ae:	18fb      	adds	r3, r7, r3
 80160b0:	781b      	ldrb	r3, [r3, #0]
}
 80160b2:	0018      	movs	r0, r3
 80160b4:	46bd      	mov	sp, r7
 80160b6:	b004      	add	sp, #16
 80160b8:	bd80      	pop	{r7, pc}
 80160ba:	46c0      	nop			@ (mov r8, r8)
 80160bc:	0801c160 	.word	0x0801c160

080160c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80160c0:	b5b0      	push	{r4, r5, r7, lr}
 80160c2:	b084      	sub	sp, #16
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	6078      	str	r0, [r7, #4]
 80160c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80160ca:	230f      	movs	r3, #15
 80160cc:	18fb      	adds	r3, r7, r3
 80160ce:	2200      	movs	r2, #0
 80160d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	001a      	movs	r2, r3
 80160d8:	2360      	movs	r3, #96	@ 0x60
 80160da:	4013      	ands	r3, r2
 80160dc:	2b40      	cmp	r3, #64	@ 0x40
 80160de:	d004      	beq.n	80160ea <USBD_StdItfReq+0x2a>
 80160e0:	d839      	bhi.n	8016156 <USBD_StdItfReq+0x96>
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d001      	beq.n	80160ea <USBD_StdItfReq+0x2a>
 80160e6:	2b20      	cmp	r3, #32
 80160e8:	d135      	bne.n	8016156 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	23a7      	movs	r3, #167	@ 0xa7
 80160ee:	009b      	lsls	r3, r3, #2
 80160f0:	5cd3      	ldrb	r3, [r2, r3]
 80160f2:	3b01      	subs	r3, #1
 80160f4:	2b02      	cmp	r3, #2
 80160f6:	d825      	bhi.n	8016144 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	889b      	ldrh	r3, [r3, #4]
 80160fc:	b2db      	uxtb	r3, r3
 80160fe:	2b01      	cmp	r3, #1
 8016100:	d819      	bhi.n	8016136 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016102:	687a      	ldr	r2, [r7, #4]
 8016104:	23ad      	movs	r3, #173	@ 0xad
 8016106:	009b      	lsls	r3, r3, #2
 8016108:	58d3      	ldr	r3, [r2, r3]
 801610a:	689b      	ldr	r3, [r3, #8]
 801610c:	250f      	movs	r5, #15
 801610e:	197c      	adds	r4, r7, r5
 8016110:	6839      	ldr	r1, [r7, #0]
 8016112:	687a      	ldr	r2, [r7, #4]
 8016114:	0010      	movs	r0, r2
 8016116:	4798      	blx	r3
 8016118:	0003      	movs	r3, r0
 801611a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	88db      	ldrh	r3, [r3, #6]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d116      	bne.n	8016152 <USBD_StdItfReq+0x92>
 8016124:	197b      	adds	r3, r7, r5
 8016126:	781b      	ldrb	r3, [r3, #0]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d112      	bne.n	8016152 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	0018      	movs	r0, r3
 8016130:	f000 fe4f 	bl	8016dd2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016134:	e00d      	b.n	8016152 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8016136:	683a      	ldr	r2, [r7, #0]
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	0011      	movs	r1, r2
 801613c:	0018      	movs	r0, r3
 801613e:	f000 fd60 	bl	8016c02 <USBD_CtlError>
          break;
 8016142:	e006      	b.n	8016152 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8016144:	683a      	ldr	r2, [r7, #0]
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	0011      	movs	r1, r2
 801614a:	0018      	movs	r0, r3
 801614c:	f000 fd59 	bl	8016c02 <USBD_CtlError>
          break;
 8016150:	e000      	b.n	8016154 <USBD_StdItfReq+0x94>
          break;
 8016152:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8016154:	e006      	b.n	8016164 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8016156:	683a      	ldr	r2, [r7, #0]
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	0011      	movs	r1, r2
 801615c:	0018      	movs	r0, r3
 801615e:	f000 fd50 	bl	8016c02 <USBD_CtlError>
      break;
 8016162:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8016164:	2300      	movs	r3, #0
}
 8016166:	0018      	movs	r0, r3
 8016168:	46bd      	mov	sp, r7
 801616a:	b004      	add	sp, #16
 801616c:	bdb0      	pop	{r4, r5, r7, pc}

0801616e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801616e:	b5b0      	push	{r4, r5, r7, lr}
 8016170:	b084      	sub	sp, #16
 8016172:	af00      	add	r7, sp, #0
 8016174:	6078      	str	r0, [r7, #4]
 8016176:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016178:	230f      	movs	r3, #15
 801617a:	18fb      	adds	r3, r7, r3
 801617c:	2200      	movs	r2, #0
 801617e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	889a      	ldrh	r2, [r3, #4]
 8016184:	230e      	movs	r3, #14
 8016186:	18fb      	adds	r3, r7, r3
 8016188:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	781b      	ldrb	r3, [r3, #0]
 801618e:	001a      	movs	r2, r3
 8016190:	2360      	movs	r3, #96	@ 0x60
 8016192:	4013      	ands	r3, r2
 8016194:	2b40      	cmp	r3, #64	@ 0x40
 8016196:	d006      	beq.n	80161a6 <USBD_StdEPReq+0x38>
 8016198:	d900      	bls.n	801619c <USBD_StdEPReq+0x2e>
 801619a:	e190      	b.n	80164be <USBD_StdEPReq+0x350>
 801619c:	2b00      	cmp	r3, #0
 801619e:	d00c      	beq.n	80161ba <USBD_StdEPReq+0x4c>
 80161a0:	2b20      	cmp	r3, #32
 80161a2:	d000      	beq.n	80161a6 <USBD_StdEPReq+0x38>
 80161a4:	e18b      	b.n	80164be <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80161a6:	687a      	ldr	r2, [r7, #4]
 80161a8:	23ad      	movs	r3, #173	@ 0xad
 80161aa:	009b      	lsls	r3, r3, #2
 80161ac:	58d3      	ldr	r3, [r2, r3]
 80161ae:	689b      	ldr	r3, [r3, #8]
 80161b0:	6839      	ldr	r1, [r7, #0]
 80161b2:	687a      	ldr	r2, [r7, #4]
 80161b4:	0010      	movs	r0, r2
 80161b6:	4798      	blx	r3
      break;
 80161b8:	e188      	b.n	80164cc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	781b      	ldrb	r3, [r3, #0]
 80161be:	001a      	movs	r2, r3
 80161c0:	2360      	movs	r3, #96	@ 0x60
 80161c2:	4013      	ands	r3, r2
 80161c4:	2b20      	cmp	r3, #32
 80161c6:	d10f      	bne.n	80161e8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80161c8:	687a      	ldr	r2, [r7, #4]
 80161ca:	23ad      	movs	r3, #173	@ 0xad
 80161cc:	009b      	lsls	r3, r3, #2
 80161ce:	58d3      	ldr	r3, [r2, r3]
 80161d0:	689b      	ldr	r3, [r3, #8]
 80161d2:	250f      	movs	r5, #15
 80161d4:	197c      	adds	r4, r7, r5
 80161d6:	6839      	ldr	r1, [r7, #0]
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	0010      	movs	r0, r2
 80161dc:	4798      	blx	r3
 80161de:	0003      	movs	r3, r0
 80161e0:	7023      	strb	r3, [r4, #0]

        return ret;
 80161e2:	197b      	adds	r3, r7, r5
 80161e4:	781b      	ldrb	r3, [r3, #0]
 80161e6:	e174      	b.n	80164d2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	785b      	ldrb	r3, [r3, #1]
 80161ec:	2b03      	cmp	r3, #3
 80161ee:	d007      	beq.n	8016200 <USBD_StdEPReq+0x92>
 80161f0:	dd00      	ble.n	80161f4 <USBD_StdEPReq+0x86>
 80161f2:	e15c      	b.n	80164ae <USBD_StdEPReq+0x340>
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d100      	bne.n	80161fa <USBD_StdEPReq+0x8c>
 80161f8:	e092      	b.n	8016320 <USBD_StdEPReq+0x1b2>
 80161fa:	2b01      	cmp	r3, #1
 80161fc:	d04b      	beq.n	8016296 <USBD_StdEPReq+0x128>
 80161fe:	e156      	b.n	80164ae <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016200:	687a      	ldr	r2, [r7, #4]
 8016202:	23a7      	movs	r3, #167	@ 0xa7
 8016204:	009b      	lsls	r3, r3, #2
 8016206:	5cd3      	ldrb	r3, [r2, r3]
 8016208:	2b02      	cmp	r3, #2
 801620a:	d002      	beq.n	8016212 <USBD_StdEPReq+0xa4>
 801620c:	2b03      	cmp	r3, #3
 801620e:	d01d      	beq.n	801624c <USBD_StdEPReq+0xde>
 8016210:	e039      	b.n	8016286 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016212:	220e      	movs	r2, #14
 8016214:	18bb      	adds	r3, r7, r2
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d010      	beq.n	801623e <USBD_StdEPReq+0xd0>
 801621c:	18bb      	adds	r3, r7, r2
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	2b80      	cmp	r3, #128	@ 0x80
 8016222:	d00c      	beq.n	801623e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8016224:	18bb      	adds	r3, r7, r2
 8016226:	781a      	ldrb	r2, [r3, #0]
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	0011      	movs	r1, r2
 801622c:	0018      	movs	r0, r3
 801622e:	f001 fa10 	bl	8017652 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2180      	movs	r1, #128	@ 0x80
 8016236:	0018      	movs	r0, r3
 8016238:	f001 fa0b 	bl	8017652 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801623c:	e02a      	b.n	8016294 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801623e:	683a      	ldr	r2, [r7, #0]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	0011      	movs	r1, r2
 8016244:	0018      	movs	r0, r3
 8016246:	f000 fcdc 	bl	8016c02 <USBD_CtlError>
              break;
 801624a:	e023      	b.n	8016294 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	885b      	ldrh	r3, [r3, #2]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d113      	bne.n	801627c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8016254:	220e      	movs	r2, #14
 8016256:	18bb      	adds	r3, r7, r2
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d00e      	beq.n	801627c <USBD_StdEPReq+0x10e>
 801625e:	18bb      	adds	r3, r7, r2
 8016260:	781b      	ldrb	r3, [r3, #0]
 8016262:	2b80      	cmp	r3, #128	@ 0x80
 8016264:	d00a      	beq.n	801627c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	88db      	ldrh	r3, [r3, #6]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d106      	bne.n	801627c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801626e:	18bb      	adds	r3, r7, r2
 8016270:	781a      	ldrb	r2, [r3, #0]
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	0011      	movs	r1, r2
 8016276:	0018      	movs	r0, r3
 8016278:	f001 f9eb 	bl	8017652 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	0018      	movs	r0, r3
 8016280:	f000 fda7 	bl	8016dd2 <USBD_CtlSendStatus>

              break;
 8016284:	e006      	b.n	8016294 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8016286:	683a      	ldr	r2, [r7, #0]
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	0011      	movs	r1, r2
 801628c:	0018      	movs	r0, r3
 801628e:	f000 fcb8 	bl	8016c02 <USBD_CtlError>
              break;
 8016292:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8016294:	e112      	b.n	80164bc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016296:	687a      	ldr	r2, [r7, #4]
 8016298:	23a7      	movs	r3, #167	@ 0xa7
 801629a:	009b      	lsls	r3, r3, #2
 801629c:	5cd3      	ldrb	r3, [r2, r3]
 801629e:	2b02      	cmp	r3, #2
 80162a0:	d002      	beq.n	80162a8 <USBD_StdEPReq+0x13a>
 80162a2:	2b03      	cmp	r3, #3
 80162a4:	d01d      	beq.n	80162e2 <USBD_StdEPReq+0x174>
 80162a6:	e032      	b.n	801630e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80162a8:	220e      	movs	r2, #14
 80162aa:	18bb      	adds	r3, r7, r2
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d010      	beq.n	80162d4 <USBD_StdEPReq+0x166>
 80162b2:	18bb      	adds	r3, r7, r2
 80162b4:	781b      	ldrb	r3, [r3, #0]
 80162b6:	2b80      	cmp	r3, #128	@ 0x80
 80162b8:	d00c      	beq.n	80162d4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80162ba:	18bb      	adds	r3, r7, r2
 80162bc:	781a      	ldrb	r2, [r3, #0]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	0011      	movs	r1, r2
 80162c2:	0018      	movs	r0, r3
 80162c4:	f001 f9c5 	bl	8017652 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2180      	movs	r1, #128	@ 0x80
 80162cc:	0018      	movs	r0, r3
 80162ce:	f001 f9c0 	bl	8017652 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80162d2:	e024      	b.n	801631e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80162d4:	683a      	ldr	r2, [r7, #0]
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	0011      	movs	r1, r2
 80162da:	0018      	movs	r0, r3
 80162dc:	f000 fc91 	bl	8016c02 <USBD_CtlError>
              break;
 80162e0:	e01d      	b.n	801631e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	885b      	ldrh	r3, [r3, #2]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d118      	bne.n	801631c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80162ea:	210e      	movs	r1, #14
 80162ec:	187b      	adds	r3, r7, r1
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	227f      	movs	r2, #127	@ 0x7f
 80162f2:	4013      	ands	r3, r2
 80162f4:	d006      	beq.n	8016304 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80162f6:	187b      	adds	r3, r7, r1
 80162f8:	781a      	ldrb	r2, [r3, #0]
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	0011      	movs	r1, r2
 80162fe:	0018      	movs	r0, r3
 8016300:	f001 f9d2 	bl	80176a8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	0018      	movs	r0, r3
 8016308:	f000 fd63 	bl	8016dd2 <USBD_CtlSendStatus>
              }
              break;
 801630c:	e006      	b.n	801631c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801630e:	683a      	ldr	r2, [r7, #0]
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	0011      	movs	r1, r2
 8016314:	0018      	movs	r0, r3
 8016316:	f000 fc74 	bl	8016c02 <USBD_CtlError>
              break;
 801631a:	e000      	b.n	801631e <USBD_StdEPReq+0x1b0>
              break;
 801631c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801631e:	e0cd      	b.n	80164bc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016320:	687a      	ldr	r2, [r7, #4]
 8016322:	23a7      	movs	r3, #167	@ 0xa7
 8016324:	009b      	lsls	r3, r3, #2
 8016326:	5cd3      	ldrb	r3, [r2, r3]
 8016328:	2b02      	cmp	r3, #2
 801632a:	d002      	beq.n	8016332 <USBD_StdEPReq+0x1c4>
 801632c:	2b03      	cmp	r3, #3
 801632e:	d03c      	beq.n	80163aa <USBD_StdEPReq+0x23c>
 8016330:	e0b5      	b.n	801649e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016332:	220e      	movs	r2, #14
 8016334:	18bb      	adds	r3, r7, r2
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d00a      	beq.n	8016352 <USBD_StdEPReq+0x1e4>
 801633c:	18bb      	adds	r3, r7, r2
 801633e:	781b      	ldrb	r3, [r3, #0]
 8016340:	2b80      	cmp	r3, #128	@ 0x80
 8016342:	d006      	beq.n	8016352 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8016344:	683a      	ldr	r2, [r7, #0]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	0011      	movs	r1, r2
 801634a:	0018      	movs	r0, r3
 801634c:	f000 fc59 	bl	8016c02 <USBD_CtlError>
                break;
 8016350:	e0ac      	b.n	80164ac <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016352:	220e      	movs	r2, #14
 8016354:	18bb      	adds	r3, r7, r2
 8016356:	781b      	ldrb	r3, [r3, #0]
 8016358:	b25b      	sxtb	r3, r3
 801635a:	2b00      	cmp	r3, #0
 801635c:	da0c      	bge.n	8016378 <USBD_StdEPReq+0x20a>
 801635e:	18bb      	adds	r3, r7, r2
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	227f      	movs	r2, #127	@ 0x7f
 8016364:	401a      	ands	r2, r3
 8016366:	0013      	movs	r3, r2
 8016368:	009b      	lsls	r3, r3, #2
 801636a:	189b      	adds	r3, r3, r2
 801636c:	009b      	lsls	r3, r3, #2
 801636e:	3310      	adds	r3, #16
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	18d3      	adds	r3, r2, r3
 8016374:	3304      	adds	r3, #4
 8016376:	e00d      	b.n	8016394 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016378:	230e      	movs	r3, #14
 801637a:	18fb      	adds	r3, r7, r3
 801637c:	781b      	ldrb	r3, [r3, #0]
 801637e:	227f      	movs	r2, #127	@ 0x7f
 8016380:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016382:	0013      	movs	r3, r2
 8016384:	009b      	lsls	r3, r3, #2
 8016386:	189b      	adds	r3, r3, r2
 8016388:	009b      	lsls	r3, r3, #2
 801638a:	3351      	adds	r3, #81	@ 0x51
 801638c:	33ff      	adds	r3, #255	@ 0xff
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	18d3      	adds	r3, r2, r3
 8016392:	3304      	adds	r3, #4
 8016394:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016396:	68bb      	ldr	r3, [r7, #8]
 8016398:	2200      	movs	r2, #0
 801639a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801639c:	68b9      	ldr	r1, [r7, #8]
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2202      	movs	r2, #2
 80163a2:	0018      	movs	r0, r3
 80163a4:	f000 fcab 	bl	8016cfe <USBD_CtlSendData>
              break;
 80163a8:	e080      	b.n	80164ac <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80163aa:	220e      	movs	r2, #14
 80163ac:	18bb      	adds	r3, r7, r2
 80163ae:	781b      	ldrb	r3, [r3, #0]
 80163b0:	b25b      	sxtb	r3, r3
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	da14      	bge.n	80163e0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80163b6:	18bb      	adds	r3, r7, r2
 80163b8:	781b      	ldrb	r3, [r3, #0]
 80163ba:	220f      	movs	r2, #15
 80163bc:	401a      	ands	r2, r3
 80163be:	6879      	ldr	r1, [r7, #4]
 80163c0:	0013      	movs	r3, r2
 80163c2:	009b      	lsls	r3, r3, #2
 80163c4:	189b      	adds	r3, r3, r2
 80163c6:	009b      	lsls	r3, r3, #2
 80163c8:	18cb      	adds	r3, r1, r3
 80163ca:	3318      	adds	r3, #24
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d11e      	bne.n	8016410 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80163d2:	683a      	ldr	r2, [r7, #0]
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	0011      	movs	r1, r2
 80163d8:	0018      	movs	r0, r3
 80163da:	f000 fc12 	bl	8016c02 <USBD_CtlError>
                  break;
 80163de:	e065      	b.n	80164ac <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80163e0:	230e      	movs	r3, #14
 80163e2:	18fb      	adds	r3, r7, r3
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	220f      	movs	r2, #15
 80163e8:	401a      	ands	r2, r3
 80163ea:	6878      	ldr	r0, [r7, #4]
 80163ec:	23ac      	movs	r3, #172	@ 0xac
 80163ee:	0059      	lsls	r1, r3, #1
 80163f0:	0013      	movs	r3, r2
 80163f2:	009b      	lsls	r3, r3, #2
 80163f4:	189b      	adds	r3, r3, r2
 80163f6:	009b      	lsls	r3, r3, #2
 80163f8:	18c3      	adds	r3, r0, r3
 80163fa:	185b      	adds	r3, r3, r1
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d106      	bne.n	8016410 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8016402:	683a      	ldr	r2, [r7, #0]
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	0011      	movs	r1, r2
 8016408:	0018      	movs	r0, r3
 801640a:	f000 fbfa 	bl	8016c02 <USBD_CtlError>
                  break;
 801640e:	e04d      	b.n	80164ac <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016410:	220e      	movs	r2, #14
 8016412:	18bb      	adds	r3, r7, r2
 8016414:	781b      	ldrb	r3, [r3, #0]
 8016416:	b25b      	sxtb	r3, r3
 8016418:	2b00      	cmp	r3, #0
 801641a:	da0c      	bge.n	8016436 <USBD_StdEPReq+0x2c8>
 801641c:	18bb      	adds	r3, r7, r2
 801641e:	781b      	ldrb	r3, [r3, #0]
 8016420:	227f      	movs	r2, #127	@ 0x7f
 8016422:	401a      	ands	r2, r3
 8016424:	0013      	movs	r3, r2
 8016426:	009b      	lsls	r3, r3, #2
 8016428:	189b      	adds	r3, r3, r2
 801642a:	009b      	lsls	r3, r3, #2
 801642c:	3310      	adds	r3, #16
 801642e:	687a      	ldr	r2, [r7, #4]
 8016430:	18d3      	adds	r3, r2, r3
 8016432:	3304      	adds	r3, #4
 8016434:	e00d      	b.n	8016452 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016436:	230e      	movs	r3, #14
 8016438:	18fb      	adds	r3, r7, r3
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	227f      	movs	r2, #127	@ 0x7f
 801643e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016440:	0013      	movs	r3, r2
 8016442:	009b      	lsls	r3, r3, #2
 8016444:	189b      	adds	r3, r3, r2
 8016446:	009b      	lsls	r3, r3, #2
 8016448:	3351      	adds	r3, #81	@ 0x51
 801644a:	33ff      	adds	r3, #255	@ 0xff
 801644c:	687a      	ldr	r2, [r7, #4]
 801644e:	18d3      	adds	r3, r2, r3
 8016450:	3304      	adds	r3, #4
 8016452:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016454:	220e      	movs	r2, #14
 8016456:	18bb      	adds	r3, r7, r2
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d003      	beq.n	8016466 <USBD_StdEPReq+0x2f8>
 801645e:	18bb      	adds	r3, r7, r2
 8016460:	781b      	ldrb	r3, [r3, #0]
 8016462:	2b80      	cmp	r3, #128	@ 0x80
 8016464:	d103      	bne.n	801646e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8016466:	68bb      	ldr	r3, [r7, #8]
 8016468:	2200      	movs	r2, #0
 801646a:	601a      	str	r2, [r3, #0]
 801646c:	e010      	b.n	8016490 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801646e:	230e      	movs	r3, #14
 8016470:	18fb      	adds	r3, r7, r3
 8016472:	781a      	ldrb	r2, [r3, #0]
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	0011      	movs	r1, r2
 8016478:	0018      	movs	r0, r3
 801647a:	f001 f940 	bl	80176fe <USBD_LL_IsStallEP>
 801647e:	1e03      	subs	r3, r0, #0
 8016480:	d003      	beq.n	801648a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	2201      	movs	r2, #1
 8016486:	601a      	str	r2, [r3, #0]
 8016488:	e002      	b.n	8016490 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	2200      	movs	r2, #0
 801648e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8016490:	68b9      	ldr	r1, [r7, #8]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	2202      	movs	r2, #2
 8016496:	0018      	movs	r0, r3
 8016498:	f000 fc31 	bl	8016cfe <USBD_CtlSendData>
              break;
 801649c:	e006      	b.n	80164ac <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801649e:	683a      	ldr	r2, [r7, #0]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	0011      	movs	r1, r2
 80164a4:	0018      	movs	r0, r3
 80164a6:	f000 fbac 	bl	8016c02 <USBD_CtlError>
              break;
 80164aa:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80164ac:	e006      	b.n	80164bc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80164ae:	683a      	ldr	r2, [r7, #0]
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	0011      	movs	r1, r2
 80164b4:	0018      	movs	r0, r3
 80164b6:	f000 fba4 	bl	8016c02 <USBD_CtlError>
          break;
 80164ba:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80164bc:	e006      	b.n	80164cc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80164be:	683a      	ldr	r2, [r7, #0]
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	0011      	movs	r1, r2
 80164c4:	0018      	movs	r0, r3
 80164c6:	f000 fb9c 	bl	8016c02 <USBD_CtlError>
      break;
 80164ca:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80164cc:	230f      	movs	r3, #15
 80164ce:	18fb      	adds	r3, r7, r3
 80164d0:	781b      	ldrb	r3, [r3, #0]
}
 80164d2:	0018      	movs	r0, r3
 80164d4:	46bd      	mov	sp, r7
 80164d6:	b004      	add	sp, #16
 80164d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080164dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
 80164e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80164e6:	2308      	movs	r3, #8
 80164e8:	18fb      	adds	r3, r7, r3
 80164ea:	2200      	movs	r2, #0
 80164ec:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80164ee:	2300      	movs	r3, #0
 80164f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80164f2:	230b      	movs	r3, #11
 80164f4:	18fb      	adds	r3, r7, r3
 80164f6:	2200      	movs	r2, #0
 80164f8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	885b      	ldrh	r3, [r3, #2]
 80164fe:	0a1b      	lsrs	r3, r3, #8
 8016500:	b29b      	uxth	r3, r3
 8016502:	2b07      	cmp	r3, #7
 8016504:	d900      	bls.n	8016508 <USBD_GetDescriptor+0x2c>
 8016506:	e159      	b.n	80167bc <USBD_GetDescriptor+0x2e0>
 8016508:	009a      	lsls	r2, r3, #2
 801650a:	4bcb      	ldr	r3, [pc, #812]	@ (8016838 <USBD_GetDescriptor+0x35c>)
 801650c:	18d3      	adds	r3, r2, r3
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016512:	687a      	ldr	r2, [r7, #4]
 8016514:	23ac      	movs	r3, #172	@ 0xac
 8016516:	009b      	lsls	r3, r3, #2
 8016518:	58d3      	ldr	r3, [r2, r3]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	687a      	ldr	r2, [r7, #4]
 801651e:	7c12      	ldrb	r2, [r2, #16]
 8016520:	2108      	movs	r1, #8
 8016522:	1879      	adds	r1, r7, r1
 8016524:	0010      	movs	r0, r2
 8016526:	4798      	blx	r3
 8016528:	0003      	movs	r3, r0
 801652a:	60fb      	str	r3, [r7, #12]
      break;
 801652c:	e153      	b.n	80167d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	7c1b      	ldrb	r3, [r3, #16]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d10f      	bne.n	8016556 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	23ad      	movs	r3, #173	@ 0xad
 801653a:	009b      	lsls	r3, r3, #2
 801653c:	58d3      	ldr	r3, [r2, r3]
 801653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016540:	2208      	movs	r2, #8
 8016542:	18ba      	adds	r2, r7, r2
 8016544:	0010      	movs	r0, r2
 8016546:	4798      	blx	r3
 8016548:	0003      	movs	r3, r0
 801654a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	3301      	adds	r3, #1
 8016550:	2202      	movs	r2, #2
 8016552:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016554:	e13f      	b.n	80167d6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016556:	687a      	ldr	r2, [r7, #4]
 8016558:	23ad      	movs	r3, #173	@ 0xad
 801655a:	009b      	lsls	r3, r3, #2
 801655c:	58d3      	ldr	r3, [r2, r3]
 801655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016560:	2208      	movs	r2, #8
 8016562:	18ba      	adds	r2, r7, r2
 8016564:	0010      	movs	r0, r2
 8016566:	4798      	blx	r3
 8016568:	0003      	movs	r3, r0
 801656a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	3301      	adds	r3, #1
 8016570:	2202      	movs	r2, #2
 8016572:	701a      	strb	r2, [r3, #0]
      break;
 8016574:	e12f      	b.n	80167d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016576:	683b      	ldr	r3, [r7, #0]
 8016578:	885b      	ldrh	r3, [r3, #2]
 801657a:	b2db      	uxtb	r3, r3
 801657c:	2b05      	cmp	r3, #5
 801657e:	d900      	bls.n	8016582 <USBD_GetDescriptor+0xa6>
 8016580:	e0d0      	b.n	8016724 <USBD_GetDescriptor+0x248>
 8016582:	009a      	lsls	r2, r3, #2
 8016584:	4bad      	ldr	r3, [pc, #692]	@ (801683c <USBD_GetDescriptor+0x360>)
 8016586:	18d3      	adds	r3, r2, r3
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801658c:	687a      	ldr	r2, [r7, #4]
 801658e:	23ac      	movs	r3, #172	@ 0xac
 8016590:	009b      	lsls	r3, r3, #2
 8016592:	58d3      	ldr	r3, [r2, r3]
 8016594:	685b      	ldr	r3, [r3, #4]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d00d      	beq.n	80165b6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801659a:	687a      	ldr	r2, [r7, #4]
 801659c:	23ac      	movs	r3, #172	@ 0xac
 801659e:	009b      	lsls	r3, r3, #2
 80165a0:	58d3      	ldr	r3, [r2, r3]
 80165a2:	685b      	ldr	r3, [r3, #4]
 80165a4:	687a      	ldr	r2, [r7, #4]
 80165a6:	7c12      	ldrb	r2, [r2, #16]
 80165a8:	2108      	movs	r1, #8
 80165aa:	1879      	adds	r1, r7, r1
 80165ac:	0010      	movs	r0, r2
 80165ae:	4798      	blx	r3
 80165b0:	0003      	movs	r3, r0
 80165b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165b4:	e0c3      	b.n	801673e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80165b6:	683a      	ldr	r2, [r7, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	0011      	movs	r1, r2
 80165bc:	0018      	movs	r0, r3
 80165be:	f000 fb20 	bl	8016c02 <USBD_CtlError>
            err++;
 80165c2:	210b      	movs	r1, #11
 80165c4:	187b      	adds	r3, r7, r1
 80165c6:	781a      	ldrb	r2, [r3, #0]
 80165c8:	187b      	adds	r3, r7, r1
 80165ca:	3201      	adds	r2, #1
 80165cc:	701a      	strb	r2, [r3, #0]
          break;
 80165ce:	e0b6      	b.n	801673e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80165d0:	687a      	ldr	r2, [r7, #4]
 80165d2:	23ac      	movs	r3, #172	@ 0xac
 80165d4:	009b      	lsls	r3, r3, #2
 80165d6:	58d3      	ldr	r3, [r2, r3]
 80165d8:	689b      	ldr	r3, [r3, #8]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d00d      	beq.n	80165fa <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80165de:	687a      	ldr	r2, [r7, #4]
 80165e0:	23ac      	movs	r3, #172	@ 0xac
 80165e2:	009b      	lsls	r3, r3, #2
 80165e4:	58d3      	ldr	r3, [r2, r3]
 80165e6:	689b      	ldr	r3, [r3, #8]
 80165e8:	687a      	ldr	r2, [r7, #4]
 80165ea:	7c12      	ldrb	r2, [r2, #16]
 80165ec:	2108      	movs	r1, #8
 80165ee:	1879      	adds	r1, r7, r1
 80165f0:	0010      	movs	r0, r2
 80165f2:	4798      	blx	r3
 80165f4:	0003      	movs	r3, r0
 80165f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165f8:	e0a1      	b.n	801673e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80165fa:	683a      	ldr	r2, [r7, #0]
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	0011      	movs	r1, r2
 8016600:	0018      	movs	r0, r3
 8016602:	f000 fafe 	bl	8016c02 <USBD_CtlError>
            err++;
 8016606:	210b      	movs	r1, #11
 8016608:	187b      	adds	r3, r7, r1
 801660a:	781a      	ldrb	r2, [r3, #0]
 801660c:	187b      	adds	r3, r7, r1
 801660e:	3201      	adds	r2, #1
 8016610:	701a      	strb	r2, [r3, #0]
          break;
 8016612:	e094      	b.n	801673e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016614:	687a      	ldr	r2, [r7, #4]
 8016616:	23ac      	movs	r3, #172	@ 0xac
 8016618:	009b      	lsls	r3, r3, #2
 801661a:	58d3      	ldr	r3, [r2, r3]
 801661c:	68db      	ldr	r3, [r3, #12]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d00d      	beq.n	801663e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016622:	687a      	ldr	r2, [r7, #4]
 8016624:	23ac      	movs	r3, #172	@ 0xac
 8016626:	009b      	lsls	r3, r3, #2
 8016628:	58d3      	ldr	r3, [r2, r3]
 801662a:	68db      	ldr	r3, [r3, #12]
 801662c:	687a      	ldr	r2, [r7, #4]
 801662e:	7c12      	ldrb	r2, [r2, #16]
 8016630:	2108      	movs	r1, #8
 8016632:	1879      	adds	r1, r7, r1
 8016634:	0010      	movs	r0, r2
 8016636:	4798      	blx	r3
 8016638:	0003      	movs	r3, r0
 801663a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801663c:	e07f      	b.n	801673e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801663e:	683a      	ldr	r2, [r7, #0]
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	0011      	movs	r1, r2
 8016644:	0018      	movs	r0, r3
 8016646:	f000 fadc 	bl	8016c02 <USBD_CtlError>
            err++;
 801664a:	210b      	movs	r1, #11
 801664c:	187b      	adds	r3, r7, r1
 801664e:	781a      	ldrb	r2, [r3, #0]
 8016650:	187b      	adds	r3, r7, r1
 8016652:	3201      	adds	r2, #1
 8016654:	701a      	strb	r2, [r3, #0]
          break;
 8016656:	e072      	b.n	801673e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016658:	687a      	ldr	r2, [r7, #4]
 801665a:	23ac      	movs	r3, #172	@ 0xac
 801665c:	009b      	lsls	r3, r3, #2
 801665e:	58d3      	ldr	r3, [r2, r3]
 8016660:	691b      	ldr	r3, [r3, #16]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d00d      	beq.n	8016682 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016666:	687a      	ldr	r2, [r7, #4]
 8016668:	23ac      	movs	r3, #172	@ 0xac
 801666a:	009b      	lsls	r3, r3, #2
 801666c:	58d3      	ldr	r3, [r2, r3]
 801666e:	691b      	ldr	r3, [r3, #16]
 8016670:	687a      	ldr	r2, [r7, #4]
 8016672:	7c12      	ldrb	r2, [r2, #16]
 8016674:	2108      	movs	r1, #8
 8016676:	1879      	adds	r1, r7, r1
 8016678:	0010      	movs	r0, r2
 801667a:	4798      	blx	r3
 801667c:	0003      	movs	r3, r0
 801667e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016680:	e05d      	b.n	801673e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016682:	683a      	ldr	r2, [r7, #0]
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	0011      	movs	r1, r2
 8016688:	0018      	movs	r0, r3
 801668a:	f000 faba 	bl	8016c02 <USBD_CtlError>
            err++;
 801668e:	210b      	movs	r1, #11
 8016690:	187b      	adds	r3, r7, r1
 8016692:	781a      	ldrb	r2, [r3, #0]
 8016694:	187b      	adds	r3, r7, r1
 8016696:	3201      	adds	r2, #1
 8016698:	701a      	strb	r2, [r3, #0]
          break;
 801669a:	e050      	b.n	801673e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801669c:	687a      	ldr	r2, [r7, #4]
 801669e:	23ac      	movs	r3, #172	@ 0xac
 80166a0:	009b      	lsls	r3, r3, #2
 80166a2:	58d3      	ldr	r3, [r2, r3]
 80166a4:	695b      	ldr	r3, [r3, #20]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d00d      	beq.n	80166c6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80166aa:	687a      	ldr	r2, [r7, #4]
 80166ac:	23ac      	movs	r3, #172	@ 0xac
 80166ae:	009b      	lsls	r3, r3, #2
 80166b0:	58d3      	ldr	r3, [r2, r3]
 80166b2:	695b      	ldr	r3, [r3, #20]
 80166b4:	687a      	ldr	r2, [r7, #4]
 80166b6:	7c12      	ldrb	r2, [r2, #16]
 80166b8:	2108      	movs	r1, #8
 80166ba:	1879      	adds	r1, r7, r1
 80166bc:	0010      	movs	r0, r2
 80166be:	4798      	blx	r3
 80166c0:	0003      	movs	r3, r0
 80166c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80166c4:	e03b      	b.n	801673e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80166c6:	683a      	ldr	r2, [r7, #0]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	0011      	movs	r1, r2
 80166cc:	0018      	movs	r0, r3
 80166ce:	f000 fa98 	bl	8016c02 <USBD_CtlError>
            err++;
 80166d2:	210b      	movs	r1, #11
 80166d4:	187b      	adds	r3, r7, r1
 80166d6:	781a      	ldrb	r2, [r3, #0]
 80166d8:	187b      	adds	r3, r7, r1
 80166da:	3201      	adds	r2, #1
 80166dc:	701a      	strb	r2, [r3, #0]
          break;
 80166de:	e02e      	b.n	801673e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80166e0:	687a      	ldr	r2, [r7, #4]
 80166e2:	23ac      	movs	r3, #172	@ 0xac
 80166e4:	009b      	lsls	r3, r3, #2
 80166e6:	58d3      	ldr	r3, [r2, r3]
 80166e8:	699b      	ldr	r3, [r3, #24]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d00d      	beq.n	801670a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	23ac      	movs	r3, #172	@ 0xac
 80166f2:	009b      	lsls	r3, r3, #2
 80166f4:	58d3      	ldr	r3, [r2, r3]
 80166f6:	699b      	ldr	r3, [r3, #24]
 80166f8:	687a      	ldr	r2, [r7, #4]
 80166fa:	7c12      	ldrb	r2, [r2, #16]
 80166fc:	2108      	movs	r1, #8
 80166fe:	1879      	adds	r1, r7, r1
 8016700:	0010      	movs	r0, r2
 8016702:	4798      	blx	r3
 8016704:	0003      	movs	r3, r0
 8016706:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016708:	e019      	b.n	801673e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801670a:	683a      	ldr	r2, [r7, #0]
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	0011      	movs	r1, r2
 8016710:	0018      	movs	r0, r3
 8016712:	f000 fa76 	bl	8016c02 <USBD_CtlError>
            err++;
 8016716:	210b      	movs	r1, #11
 8016718:	187b      	adds	r3, r7, r1
 801671a:	781a      	ldrb	r2, [r3, #0]
 801671c:	187b      	adds	r3, r7, r1
 801671e:	3201      	adds	r2, #1
 8016720:	701a      	strb	r2, [r3, #0]
          break;
 8016722:	e00c      	b.n	801673e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8016724:	683a      	ldr	r2, [r7, #0]
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	0011      	movs	r1, r2
 801672a:	0018      	movs	r0, r3
 801672c:	f000 fa69 	bl	8016c02 <USBD_CtlError>
          err++;
 8016730:	210b      	movs	r1, #11
 8016732:	187b      	adds	r3, r7, r1
 8016734:	781a      	ldrb	r2, [r3, #0]
 8016736:	187b      	adds	r3, r7, r1
 8016738:	3201      	adds	r2, #1
 801673a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801673c:	e04b      	b.n	80167d6 <USBD_GetDescriptor+0x2fa>
 801673e:	e04a      	b.n	80167d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	7c1b      	ldrb	r3, [r3, #16]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d10b      	bne.n	8016760 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	23ad      	movs	r3, #173	@ 0xad
 801674c:	009b      	lsls	r3, r3, #2
 801674e:	58d3      	ldr	r3, [r2, r3]
 8016750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016752:	2208      	movs	r2, #8
 8016754:	18ba      	adds	r2, r7, r2
 8016756:	0010      	movs	r0, r2
 8016758:	4798      	blx	r3
 801675a:	0003      	movs	r3, r0
 801675c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801675e:	e03a      	b.n	80167d6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8016760:	683a      	ldr	r2, [r7, #0]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	0011      	movs	r1, r2
 8016766:	0018      	movs	r0, r3
 8016768:	f000 fa4b 	bl	8016c02 <USBD_CtlError>
        err++;
 801676c:	210b      	movs	r1, #11
 801676e:	187b      	adds	r3, r7, r1
 8016770:	781a      	ldrb	r2, [r3, #0]
 8016772:	187b      	adds	r3, r7, r1
 8016774:	3201      	adds	r2, #1
 8016776:	701a      	strb	r2, [r3, #0]
      break;
 8016778:	e02d      	b.n	80167d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	7c1b      	ldrb	r3, [r3, #16]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d10f      	bne.n	80167a2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8016782:	687a      	ldr	r2, [r7, #4]
 8016784:	23ad      	movs	r3, #173	@ 0xad
 8016786:	009b      	lsls	r3, r3, #2
 8016788:	58d3      	ldr	r3, [r2, r3]
 801678a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801678c:	2208      	movs	r2, #8
 801678e:	18ba      	adds	r2, r7, r2
 8016790:	0010      	movs	r0, r2
 8016792:	4798      	blx	r3
 8016794:	0003      	movs	r3, r0
 8016796:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	3301      	adds	r3, #1
 801679c:	2207      	movs	r2, #7
 801679e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80167a0:	e019      	b.n	80167d6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80167a2:	683a      	ldr	r2, [r7, #0]
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	0011      	movs	r1, r2
 80167a8:	0018      	movs	r0, r3
 80167aa:	f000 fa2a 	bl	8016c02 <USBD_CtlError>
        err++;
 80167ae:	210b      	movs	r1, #11
 80167b0:	187b      	adds	r3, r7, r1
 80167b2:	781a      	ldrb	r2, [r3, #0]
 80167b4:	187b      	adds	r3, r7, r1
 80167b6:	3201      	adds	r2, #1
 80167b8:	701a      	strb	r2, [r3, #0]
      break;
 80167ba:	e00c      	b.n	80167d6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80167bc:	683a      	ldr	r2, [r7, #0]
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	0011      	movs	r1, r2
 80167c2:	0018      	movs	r0, r3
 80167c4:	f000 fa1d 	bl	8016c02 <USBD_CtlError>
      err++;
 80167c8:	210b      	movs	r1, #11
 80167ca:	187b      	adds	r3, r7, r1
 80167cc:	781a      	ldrb	r2, [r3, #0]
 80167ce:	187b      	adds	r3, r7, r1
 80167d0:	3201      	adds	r2, #1
 80167d2:	701a      	strb	r2, [r3, #0]
      break;
 80167d4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80167d6:	230b      	movs	r3, #11
 80167d8:	18fb      	adds	r3, r7, r3
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d127      	bne.n	8016830 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80167e0:	2108      	movs	r1, #8
 80167e2:	187b      	adds	r3, r7, r1
 80167e4:	881b      	ldrh	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d019      	beq.n	801681e <USBD_GetDescriptor+0x342>
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	88db      	ldrh	r3, [r3, #6]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d015      	beq.n	801681e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	88da      	ldrh	r2, [r3, #6]
 80167f6:	187b      	adds	r3, r7, r1
 80167f8:	881b      	ldrh	r3, [r3, #0]
 80167fa:	1c18      	adds	r0, r3, #0
 80167fc:	1c11      	adds	r1, r2, #0
 80167fe:	b28a      	uxth	r2, r1
 8016800:	b283      	uxth	r3, r0
 8016802:	429a      	cmp	r2, r3
 8016804:	d900      	bls.n	8016808 <USBD_GetDescriptor+0x32c>
 8016806:	1c01      	adds	r1, r0, #0
 8016808:	b28a      	uxth	r2, r1
 801680a:	2108      	movs	r1, #8
 801680c:	187b      	adds	r3, r7, r1
 801680e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016810:	187b      	adds	r3, r7, r1
 8016812:	881a      	ldrh	r2, [r3, #0]
 8016814:	68f9      	ldr	r1, [r7, #12]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	0018      	movs	r0, r3
 801681a:	f000 fa70 	bl	8016cfe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	88db      	ldrh	r3, [r3, #6]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d105      	bne.n	8016832 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	0018      	movs	r0, r3
 801682a:	f000 fad2 	bl	8016dd2 <USBD_CtlSendStatus>
 801682e:	e000      	b.n	8016832 <USBD_GetDescriptor+0x356>
    return;
 8016830:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8016832:	46bd      	mov	sp, r7
 8016834:	b004      	add	sp, #16
 8016836:	bd80      	pop	{r7, pc}
 8016838:	0801c188 	.word	0x0801c188
 801683c:	0801c1a8 	.word	0x0801c1a8

08016840 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016840:	b590      	push	{r4, r7, lr}
 8016842:	b085      	sub	sp, #20
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	889b      	ldrh	r3, [r3, #4]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d13d      	bne.n	80168ce <USBD_SetAddress+0x8e>
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	88db      	ldrh	r3, [r3, #6]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d139      	bne.n	80168ce <USBD_SetAddress+0x8e>
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	885b      	ldrh	r3, [r3, #2]
 801685e:	2b7f      	cmp	r3, #127	@ 0x7f
 8016860:	d835      	bhi.n	80168ce <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	885b      	ldrh	r3, [r3, #2]
 8016866:	b2da      	uxtb	r2, r3
 8016868:	230f      	movs	r3, #15
 801686a:	18fb      	adds	r3, r7, r3
 801686c:	217f      	movs	r1, #127	@ 0x7f
 801686e:	400a      	ands	r2, r1
 8016870:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016872:	687a      	ldr	r2, [r7, #4]
 8016874:	23a7      	movs	r3, #167	@ 0xa7
 8016876:	009b      	lsls	r3, r3, #2
 8016878:	5cd3      	ldrb	r3, [r2, r3]
 801687a:	2b03      	cmp	r3, #3
 801687c:	d106      	bne.n	801688c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801687e:	683a      	ldr	r2, [r7, #0]
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	0011      	movs	r1, r2
 8016884:	0018      	movs	r0, r3
 8016886:	f000 f9bc 	bl	8016c02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801688a:	e027      	b.n	80168dc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	240f      	movs	r4, #15
 8016890:	193a      	adds	r2, r7, r4
 8016892:	4914      	ldr	r1, [pc, #80]	@ (80168e4 <USBD_SetAddress+0xa4>)
 8016894:	7812      	ldrb	r2, [r2, #0]
 8016896:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016898:	193b      	adds	r3, r7, r4
 801689a:	781a      	ldrb	r2, [r3, #0]
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	0011      	movs	r1, r2
 80168a0:	0018      	movs	r0, r3
 80168a2:	f000 ff5d 	bl	8017760 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	0018      	movs	r0, r3
 80168aa:	f000 fa92 	bl	8016dd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80168ae:	193b      	adds	r3, r7, r4
 80168b0:	781b      	ldrb	r3, [r3, #0]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d005      	beq.n	80168c2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80168b6:	687a      	ldr	r2, [r7, #4]
 80168b8:	23a7      	movs	r3, #167	@ 0xa7
 80168ba:	009b      	lsls	r3, r3, #2
 80168bc:	2102      	movs	r1, #2
 80168be:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168c0:	e00c      	b.n	80168dc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80168c2:	687a      	ldr	r2, [r7, #4]
 80168c4:	23a7      	movs	r3, #167	@ 0xa7
 80168c6:	009b      	lsls	r3, r3, #2
 80168c8:	2101      	movs	r1, #1
 80168ca:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168cc:	e006      	b.n	80168dc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80168ce:	683a      	ldr	r2, [r7, #0]
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	0011      	movs	r1, r2
 80168d4:	0018      	movs	r0, r3
 80168d6:	f000 f994 	bl	8016c02 <USBD_CtlError>
  }
}
 80168da:	46c0      	nop			@ (mov r8, r8)
 80168dc:	46c0      	nop			@ (mov r8, r8)
 80168de:	46bd      	mov	sp, r7
 80168e0:	b005      	add	sp, #20
 80168e2:	bd90      	pop	{r4, r7, pc}
 80168e4:	0000029e 	.word	0x0000029e

080168e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
 80168f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	885b      	ldrh	r3, [r3, #2]
 80168f6:	b2da      	uxtb	r2, r3
 80168f8:	4b4c      	ldr	r3, [pc, #304]	@ (8016a2c <USBD_SetConfig+0x144>)
 80168fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80168fc:	4b4b      	ldr	r3, [pc, #300]	@ (8016a2c <USBD_SetConfig+0x144>)
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	2b01      	cmp	r3, #1
 8016902:	d906      	bls.n	8016912 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8016904:	683a      	ldr	r2, [r7, #0]
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	0011      	movs	r1, r2
 801690a:	0018      	movs	r0, r3
 801690c:	f000 f979 	bl	8016c02 <USBD_CtlError>
 8016910:	e088      	b.n	8016a24 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8016912:	687a      	ldr	r2, [r7, #4]
 8016914:	23a7      	movs	r3, #167	@ 0xa7
 8016916:	009b      	lsls	r3, r3, #2
 8016918:	5cd3      	ldrb	r3, [r2, r3]
 801691a:	2b02      	cmp	r3, #2
 801691c:	d002      	beq.n	8016924 <USBD_SetConfig+0x3c>
 801691e:	2b03      	cmp	r3, #3
 8016920:	d029      	beq.n	8016976 <USBD_SetConfig+0x8e>
 8016922:	e071      	b.n	8016a08 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8016924:	4b41      	ldr	r3, [pc, #260]	@ (8016a2c <USBD_SetConfig+0x144>)
 8016926:	781b      	ldrb	r3, [r3, #0]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d01f      	beq.n	801696c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801692c:	4b3f      	ldr	r3, [pc, #252]	@ (8016a2c <USBD_SetConfig+0x144>)
 801692e:	781b      	ldrb	r3, [r3, #0]
 8016930:	001a      	movs	r2, r3
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016936:	687a      	ldr	r2, [r7, #4]
 8016938:	23a7      	movs	r3, #167	@ 0xa7
 801693a:	009b      	lsls	r3, r3, #2
 801693c:	2103      	movs	r1, #3
 801693e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8016940:	4b3a      	ldr	r3, [pc, #232]	@ (8016a2c <USBD_SetConfig+0x144>)
 8016942:	781a      	ldrb	r2, [r3, #0]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	0011      	movs	r1, r2
 8016948:	0018      	movs	r0, r3
 801694a:	f7ff f8c6 	bl	8015ada <USBD_SetClassConfig>
 801694e:	0003      	movs	r3, r0
 8016950:	2b02      	cmp	r3, #2
 8016952:	d106      	bne.n	8016962 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8016954:	683a      	ldr	r2, [r7, #0]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	0011      	movs	r1, r2
 801695a:	0018      	movs	r0, r3
 801695c:	f000 f951 	bl	8016c02 <USBD_CtlError>
            return;
 8016960:	e060      	b.n	8016a24 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	0018      	movs	r0, r3
 8016966:	f000 fa34 	bl	8016dd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801696a:	e05b      	b.n	8016a24 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	0018      	movs	r0, r3
 8016970:	f000 fa2f 	bl	8016dd2 <USBD_CtlSendStatus>
        break;
 8016974:	e056      	b.n	8016a24 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8016976:	4b2d      	ldr	r3, [pc, #180]	@ (8016a2c <USBD_SetConfig+0x144>)
 8016978:	781b      	ldrb	r3, [r3, #0]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d115      	bne.n	80169aa <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	23a7      	movs	r3, #167	@ 0xa7
 8016982:	009b      	lsls	r3, r3, #2
 8016984:	2102      	movs	r1, #2
 8016986:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8016988:	4b28      	ldr	r3, [pc, #160]	@ (8016a2c <USBD_SetConfig+0x144>)
 801698a:	781b      	ldrb	r3, [r3, #0]
 801698c:	001a      	movs	r2, r3
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8016992:	4b26      	ldr	r3, [pc, #152]	@ (8016a2c <USBD_SetConfig+0x144>)
 8016994:	781a      	ldrb	r2, [r3, #0]
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	0011      	movs	r1, r2
 801699a:	0018      	movs	r0, r3
 801699c:	f7ff f8c4 	bl	8015b28 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	0018      	movs	r0, r3
 80169a4:	f000 fa15 	bl	8016dd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80169a8:	e03c      	b.n	8016a24 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80169aa:	4b20      	ldr	r3, [pc, #128]	@ (8016a2c <USBD_SetConfig+0x144>)
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	001a      	movs	r2, r3
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	685b      	ldr	r3, [r3, #4]
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d022      	beq.n	80169fe <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	b2da      	uxtb	r2, r3
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	0011      	movs	r1, r2
 80169c2:	0018      	movs	r0, r3
 80169c4:	f7ff f8b0 	bl	8015b28 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80169c8:	4b18      	ldr	r3, [pc, #96]	@ (8016a2c <USBD_SetConfig+0x144>)
 80169ca:	781b      	ldrb	r3, [r3, #0]
 80169cc:	001a      	movs	r2, r3
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80169d2:	4b16      	ldr	r3, [pc, #88]	@ (8016a2c <USBD_SetConfig+0x144>)
 80169d4:	781a      	ldrb	r2, [r3, #0]
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	0011      	movs	r1, r2
 80169da:	0018      	movs	r0, r3
 80169dc:	f7ff f87d 	bl	8015ada <USBD_SetClassConfig>
 80169e0:	0003      	movs	r3, r0
 80169e2:	2b02      	cmp	r3, #2
 80169e4:	d106      	bne.n	80169f4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80169e6:	683a      	ldr	r2, [r7, #0]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	0011      	movs	r1, r2
 80169ec:	0018      	movs	r0, r3
 80169ee:	f000 f908 	bl	8016c02 <USBD_CtlError>
            return;
 80169f2:	e017      	b.n	8016a24 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	0018      	movs	r0, r3
 80169f8:	f000 f9eb 	bl	8016dd2 <USBD_CtlSendStatus>
        break;
 80169fc:	e012      	b.n	8016a24 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	0018      	movs	r0, r3
 8016a02:	f000 f9e6 	bl	8016dd2 <USBD_CtlSendStatus>
        break;
 8016a06:	e00d      	b.n	8016a24 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8016a08:	683a      	ldr	r2, [r7, #0]
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	0011      	movs	r1, r2
 8016a0e:	0018      	movs	r0, r3
 8016a10:	f000 f8f7 	bl	8016c02 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8016a14:	4b05      	ldr	r3, [pc, #20]	@ (8016a2c <USBD_SetConfig+0x144>)
 8016a16:	781a      	ldrb	r2, [r3, #0]
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	0011      	movs	r1, r2
 8016a1c:	0018      	movs	r0, r3
 8016a1e:	f7ff f883 	bl	8015b28 <USBD_ClrClassConfig>
        break;
 8016a22:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8016a24:	46bd      	mov	sp, r7
 8016a26:	b002      	add	sp, #8
 8016a28:	bd80      	pop	{r7, pc}
 8016a2a:	46c0      	nop			@ (mov r8, r8)
 8016a2c:	20002d38 	.word	0x20002d38

08016a30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	88db      	ldrh	r3, [r3, #6]
 8016a3e:	2b01      	cmp	r3, #1
 8016a40:	d006      	beq.n	8016a50 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8016a42:	683a      	ldr	r2, [r7, #0]
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	0011      	movs	r1, r2
 8016a48:	0018      	movs	r0, r3
 8016a4a:	f000 f8da 	bl	8016c02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016a4e:	e026      	b.n	8016a9e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8016a50:	687a      	ldr	r2, [r7, #4]
 8016a52:	23a7      	movs	r3, #167	@ 0xa7
 8016a54:	009b      	lsls	r3, r3, #2
 8016a56:	5cd3      	ldrb	r3, [r2, r3]
 8016a58:	2b02      	cmp	r3, #2
 8016a5a:	dc02      	bgt.n	8016a62 <USBD_GetConfig+0x32>
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	dc03      	bgt.n	8016a68 <USBD_GetConfig+0x38>
 8016a60:	e016      	b.n	8016a90 <USBD_GetConfig+0x60>
 8016a62:	2b03      	cmp	r3, #3
 8016a64:	d00c      	beq.n	8016a80 <USBD_GetConfig+0x50>
 8016a66:	e013      	b.n	8016a90 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	3308      	adds	r3, #8
 8016a72:	0019      	movs	r1, r3
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	2201      	movs	r2, #1
 8016a78:	0018      	movs	r0, r3
 8016a7a:	f000 f940 	bl	8016cfe <USBD_CtlSendData>
        break;
 8016a7e:	e00e      	b.n	8016a9e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	1d19      	adds	r1, r3, #4
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2201      	movs	r2, #1
 8016a88:	0018      	movs	r0, r3
 8016a8a:	f000 f938 	bl	8016cfe <USBD_CtlSendData>
        break;
 8016a8e:	e006      	b.n	8016a9e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8016a90:	683a      	ldr	r2, [r7, #0]
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	0011      	movs	r1, r2
 8016a96:	0018      	movs	r0, r3
 8016a98:	f000 f8b3 	bl	8016c02 <USBD_CtlError>
        break;
 8016a9c:	46c0      	nop			@ (mov r8, r8)
}
 8016a9e:	46c0      	nop			@ (mov r8, r8)
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	b002      	add	sp, #8
 8016aa4:	bd80      	pop	{r7, pc}

08016aa6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016aa6:	b580      	push	{r7, lr}
 8016aa8:	b082      	sub	sp, #8
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
 8016aae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016ab0:	687a      	ldr	r2, [r7, #4]
 8016ab2:	23a7      	movs	r3, #167	@ 0xa7
 8016ab4:	009b      	lsls	r3, r3, #2
 8016ab6:	5cd3      	ldrb	r3, [r2, r3]
 8016ab8:	3b01      	subs	r3, #1
 8016aba:	2b02      	cmp	r3, #2
 8016abc:	d822      	bhi.n	8016b04 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016abe:	683b      	ldr	r3, [r7, #0]
 8016ac0:	88db      	ldrh	r3, [r3, #6]
 8016ac2:	2b02      	cmp	r3, #2
 8016ac4:	d006      	beq.n	8016ad4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8016ac6:	683a      	ldr	r2, [r7, #0]
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	0011      	movs	r1, r2
 8016acc:	0018      	movs	r0, r3
 8016ace:	f000 f898 	bl	8016c02 <USBD_CtlError>
        break;
 8016ad2:	e01e      	b.n	8016b12 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2201      	movs	r2, #1
 8016ad8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8016ada:	687a      	ldr	r2, [r7, #4]
 8016adc:	23a9      	movs	r3, #169	@ 0xa9
 8016ade:	009b      	lsls	r3, r3, #2
 8016ae0:	58d3      	ldr	r3, [r2, r3]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d005      	beq.n	8016af2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	68db      	ldr	r3, [r3, #12]
 8016aea:	2202      	movs	r2, #2
 8016aec:	431a      	orrs	r2, r3
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	330c      	adds	r3, #12
 8016af6:	0019      	movs	r1, r3
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	2202      	movs	r2, #2
 8016afc:	0018      	movs	r0, r3
 8016afe:	f000 f8fe 	bl	8016cfe <USBD_CtlSendData>
      break;
 8016b02:	e006      	b.n	8016b12 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8016b04:	683a      	ldr	r2, [r7, #0]
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	0011      	movs	r1, r2
 8016b0a:	0018      	movs	r0, r3
 8016b0c:	f000 f879 	bl	8016c02 <USBD_CtlError>
      break;
 8016b10:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016b12:	46c0      	nop			@ (mov r8, r8)
 8016b14:	46bd      	mov	sp, r7
 8016b16:	b002      	add	sp, #8
 8016b18:	bd80      	pop	{r7, pc}

08016b1a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016b1a:	b580      	push	{r7, lr}
 8016b1c:	b082      	sub	sp, #8
 8016b1e:	af00      	add	r7, sp, #0
 8016b20:	6078      	str	r0, [r7, #4]
 8016b22:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	885b      	ldrh	r3, [r3, #2]
 8016b28:	2b01      	cmp	r3, #1
 8016b2a:	d108      	bne.n	8016b3e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8016b2c:	687a      	ldr	r2, [r7, #4]
 8016b2e:	23a9      	movs	r3, #169	@ 0xa9
 8016b30:	009b      	lsls	r3, r3, #2
 8016b32:	2101      	movs	r1, #1
 8016b34:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	0018      	movs	r0, r3
 8016b3a:	f000 f94a 	bl	8016dd2 <USBD_CtlSendStatus>
  }
}
 8016b3e:	46c0      	nop			@ (mov r8, r8)
 8016b40:	46bd      	mov	sp, r7
 8016b42:	b002      	add	sp, #8
 8016b44:	bd80      	pop	{r7, pc}

08016b46 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016b46:	b580      	push	{r7, lr}
 8016b48:	b082      	sub	sp, #8
 8016b4a:	af00      	add	r7, sp, #0
 8016b4c:	6078      	str	r0, [r7, #4]
 8016b4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016b50:	687a      	ldr	r2, [r7, #4]
 8016b52:	23a7      	movs	r3, #167	@ 0xa7
 8016b54:	009b      	lsls	r3, r3, #2
 8016b56:	5cd3      	ldrb	r3, [r2, r3]
 8016b58:	3b01      	subs	r3, #1
 8016b5a:	2b02      	cmp	r3, #2
 8016b5c:	d80d      	bhi.n	8016b7a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016b5e:	683b      	ldr	r3, [r7, #0]
 8016b60:	885b      	ldrh	r3, [r3, #2]
 8016b62:	2b01      	cmp	r3, #1
 8016b64:	d110      	bne.n	8016b88 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8016b66:	687a      	ldr	r2, [r7, #4]
 8016b68:	23a9      	movs	r3, #169	@ 0xa9
 8016b6a:	009b      	lsls	r3, r3, #2
 8016b6c:	2100      	movs	r1, #0
 8016b6e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	0018      	movs	r0, r3
 8016b74:	f000 f92d 	bl	8016dd2 <USBD_CtlSendStatus>
      }
      break;
 8016b78:	e006      	b.n	8016b88 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8016b7a:	683a      	ldr	r2, [r7, #0]
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	0011      	movs	r1, r2
 8016b80:	0018      	movs	r0, r3
 8016b82:	f000 f83e 	bl	8016c02 <USBD_CtlError>
      break;
 8016b86:	e000      	b.n	8016b8a <USBD_ClrFeature+0x44>
      break;
 8016b88:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016b8a:	46c0      	nop			@ (mov r8, r8)
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	b002      	add	sp, #8
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b082      	sub	sp, #8
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
 8016b9a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	781a      	ldrb	r2, [r3, #0]
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8016ba4:	683b      	ldr	r3, [r7, #0]
 8016ba6:	785a      	ldrb	r2, [r3, #1]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	3302      	adds	r3, #2
 8016bb0:	781b      	ldrb	r3, [r3, #0]
 8016bb2:	001a      	movs	r2, r3
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	3303      	adds	r3, #3
 8016bb8:	781b      	ldrb	r3, [r3, #0]
 8016bba:	021b      	lsls	r3, r3, #8
 8016bbc:	b29b      	uxth	r3, r3
 8016bbe:	18d3      	adds	r3, r2, r3
 8016bc0:	b29a      	uxth	r2, r3
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	3304      	adds	r3, #4
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	001a      	movs	r2, r3
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	3305      	adds	r3, #5
 8016bd2:	781b      	ldrb	r3, [r3, #0]
 8016bd4:	021b      	lsls	r3, r3, #8
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	18d3      	adds	r3, r2, r3
 8016bda:	b29a      	uxth	r2, r3
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	3306      	adds	r3, #6
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	001a      	movs	r2, r3
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	3307      	adds	r3, #7
 8016bec:	781b      	ldrb	r3, [r3, #0]
 8016bee:	021b      	lsls	r3, r3, #8
 8016bf0:	b29b      	uxth	r3, r3
 8016bf2:	18d3      	adds	r3, r2, r3
 8016bf4:	b29a      	uxth	r2, r3
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	80da      	strh	r2, [r3, #6]

}
 8016bfa:	46c0      	nop			@ (mov r8, r8)
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	b002      	add	sp, #8
 8016c00:	bd80      	pop	{r7, pc}

08016c02 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8016c02:	b580      	push	{r7, lr}
 8016c04:	b082      	sub	sp, #8
 8016c06:	af00      	add	r7, sp, #0
 8016c08:	6078      	str	r0, [r7, #4]
 8016c0a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2180      	movs	r1, #128	@ 0x80
 8016c10:	0018      	movs	r0, r3
 8016c12:	f000 fd1e 	bl	8017652 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	2100      	movs	r1, #0
 8016c1a:	0018      	movs	r0, r3
 8016c1c:	f000 fd19 	bl	8017652 <USBD_LL_StallEP>
}
 8016c20:	46c0      	nop			@ (mov r8, r8)
 8016c22:	46bd      	mov	sp, r7
 8016c24:	b002      	add	sp, #8
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016c28:	b590      	push	{r4, r7, lr}
 8016c2a:	b087      	sub	sp, #28
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	60f8      	str	r0, [r7, #12]
 8016c30:	60b9      	str	r1, [r7, #8]
 8016c32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016c34:	2417      	movs	r4, #23
 8016c36:	193b      	adds	r3, r7, r4
 8016c38:	2200      	movs	r2, #0
 8016c3a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d03c      	beq.n	8016cbc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	0018      	movs	r0, r3
 8016c46:	f000 f83d 	bl	8016cc4 <USBD_GetLen>
 8016c4a:	0003      	movs	r3, r0
 8016c4c:	3301      	adds	r3, #1
 8016c4e:	b29b      	uxth	r3, r3
 8016c50:	18db      	adds	r3, r3, r3
 8016c52:	b29a      	uxth	r2, r3
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8016c58:	193b      	adds	r3, r7, r4
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	193a      	adds	r2, r7, r4
 8016c5e:	1c59      	adds	r1, r3, #1
 8016c60:	7011      	strb	r1, [r2, #0]
 8016c62:	001a      	movs	r2, r3
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	189b      	adds	r3, r3, r2
 8016c68:	687a      	ldr	r2, [r7, #4]
 8016c6a:	7812      	ldrb	r2, [r2, #0]
 8016c6c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8016c6e:	193b      	adds	r3, r7, r4
 8016c70:	781b      	ldrb	r3, [r3, #0]
 8016c72:	193a      	adds	r2, r7, r4
 8016c74:	1c59      	adds	r1, r3, #1
 8016c76:	7011      	strb	r1, [r2, #0]
 8016c78:	001a      	movs	r2, r3
 8016c7a:	68bb      	ldr	r3, [r7, #8]
 8016c7c:	189b      	adds	r3, r3, r2
 8016c7e:	2203      	movs	r2, #3
 8016c80:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8016c82:	e017      	b.n	8016cb4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	1c5a      	adds	r2, r3, #1
 8016c88:	60fa      	str	r2, [r7, #12]
 8016c8a:	2417      	movs	r4, #23
 8016c8c:	193a      	adds	r2, r7, r4
 8016c8e:	7812      	ldrb	r2, [r2, #0]
 8016c90:	1939      	adds	r1, r7, r4
 8016c92:	1c50      	adds	r0, r2, #1
 8016c94:	7008      	strb	r0, [r1, #0]
 8016c96:	0011      	movs	r1, r2
 8016c98:	68ba      	ldr	r2, [r7, #8]
 8016c9a:	1852      	adds	r2, r2, r1
 8016c9c:	781b      	ldrb	r3, [r3, #0]
 8016c9e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8016ca0:	193b      	adds	r3, r7, r4
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	193a      	adds	r2, r7, r4
 8016ca6:	1c59      	adds	r1, r3, #1
 8016ca8:	7011      	strb	r1, [r2, #0]
 8016caa:	001a      	movs	r2, r3
 8016cac:	68bb      	ldr	r3, [r7, #8]
 8016cae:	189b      	adds	r3, r3, r2
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d1e3      	bne.n	8016c84 <USBD_GetString+0x5c>
    }
  }
}
 8016cbc:	46c0      	nop			@ (mov r8, r8)
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	b007      	add	sp, #28
 8016cc2:	bd90      	pop	{r4, r7, pc}

08016cc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b084      	sub	sp, #16
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016ccc:	230f      	movs	r3, #15
 8016cce:	18fb      	adds	r3, r7, r3
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8016cd4:	e008      	b.n	8016ce8 <USBD_GetLen+0x24>
  {
    len++;
 8016cd6:	210f      	movs	r1, #15
 8016cd8:	187b      	adds	r3, r7, r1
 8016cda:	781a      	ldrb	r2, [r3, #0]
 8016cdc:	187b      	adds	r3, r7, r1
 8016cde:	3201      	adds	r2, #1
 8016ce0:	701a      	strb	r2, [r3, #0]
    buf++;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	3301      	adds	r3, #1
 8016ce6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	781b      	ldrb	r3, [r3, #0]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d1f2      	bne.n	8016cd6 <USBD_GetLen+0x12>
  }

  return len;
 8016cf0:	230f      	movs	r3, #15
 8016cf2:	18fb      	adds	r3, r7, r3
 8016cf4:	781b      	ldrb	r3, [r3, #0]
}
 8016cf6:	0018      	movs	r0, r3
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	b004      	add	sp, #16
 8016cfc:	bd80      	pop	{r7, pc}

08016cfe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8016cfe:	b580      	push	{r7, lr}
 8016d00:	b084      	sub	sp, #16
 8016d02:	af00      	add	r7, sp, #0
 8016d04:	60f8      	str	r0, [r7, #12]
 8016d06:	60b9      	str	r1, [r7, #8]
 8016d08:	1dbb      	adds	r3, r7, #6
 8016d0a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016d0c:	68fa      	ldr	r2, [r7, #12]
 8016d0e:	23a5      	movs	r3, #165	@ 0xa5
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	2102      	movs	r1, #2
 8016d14:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8016d16:	1dbb      	adds	r3, r7, #6
 8016d18:	881a      	ldrh	r2, [r3, #0]
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8016d1e:	1dbb      	adds	r3, r7, #6
 8016d20:	881a      	ldrh	r2, [r3, #0]
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016d26:	1dbb      	adds	r3, r7, #6
 8016d28:	881b      	ldrh	r3, [r3, #0]
 8016d2a:	68ba      	ldr	r2, [r7, #8]
 8016d2c:	68f8      	ldr	r0, [r7, #12]
 8016d2e:	2100      	movs	r1, #0
 8016d30:	f000 fd41 	bl	80177b6 <USBD_LL_Transmit>

  return USBD_OK;
 8016d34:	2300      	movs	r3, #0
}
 8016d36:	0018      	movs	r0, r3
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	b004      	add	sp, #16
 8016d3c:	bd80      	pop	{r7, pc}

08016d3e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8016d3e:	b580      	push	{r7, lr}
 8016d40:	b084      	sub	sp, #16
 8016d42:	af00      	add	r7, sp, #0
 8016d44:	60f8      	str	r0, [r7, #12]
 8016d46:	60b9      	str	r1, [r7, #8]
 8016d48:	1dbb      	adds	r3, r7, #6
 8016d4a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016d4c:	1dbb      	adds	r3, r7, #6
 8016d4e:	881b      	ldrh	r3, [r3, #0]
 8016d50:	68ba      	ldr	r2, [r7, #8]
 8016d52:	68f8      	ldr	r0, [r7, #12]
 8016d54:	2100      	movs	r1, #0
 8016d56:	f000 fd2e 	bl	80177b6 <USBD_LL_Transmit>

  return USBD_OK;
 8016d5a:	2300      	movs	r3, #0
}
 8016d5c:	0018      	movs	r0, r3
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	b004      	add	sp, #16
 8016d62:	bd80      	pop	{r7, pc}

08016d64 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b084      	sub	sp, #16
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	60f8      	str	r0, [r7, #12]
 8016d6c:	60b9      	str	r1, [r7, #8]
 8016d6e:	1dbb      	adds	r3, r7, #6
 8016d70:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016d72:	68fa      	ldr	r2, [r7, #12]
 8016d74:	23a5      	movs	r3, #165	@ 0xa5
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	2103      	movs	r1, #3
 8016d7a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8016d7c:	1dbb      	adds	r3, r7, #6
 8016d7e:	8819      	ldrh	r1, [r3, #0]
 8016d80:	68fa      	ldr	r2, [r7, #12]
 8016d82:	23ae      	movs	r3, #174	@ 0xae
 8016d84:	005b      	lsls	r3, r3, #1
 8016d86:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8016d88:	1dbb      	adds	r3, r7, #6
 8016d8a:	8819      	ldrh	r1, [r3, #0]
 8016d8c:	68fa      	ldr	r2, [r7, #12]
 8016d8e:	23b0      	movs	r3, #176	@ 0xb0
 8016d90:	005b      	lsls	r3, r3, #1
 8016d92:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016d94:	1dbb      	adds	r3, r7, #6
 8016d96:	881b      	ldrh	r3, [r3, #0]
 8016d98:	68ba      	ldr	r2, [r7, #8]
 8016d9a:	68f8      	ldr	r0, [r7, #12]
 8016d9c:	2100      	movs	r1, #0
 8016d9e:	f000 fd41 	bl	8017824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016da2:	2300      	movs	r3, #0
}
 8016da4:	0018      	movs	r0, r3
 8016da6:	46bd      	mov	sp, r7
 8016da8:	b004      	add	sp, #16
 8016daa:	bd80      	pop	{r7, pc}

08016dac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b084      	sub	sp, #16
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	60f8      	str	r0, [r7, #12]
 8016db4:	60b9      	str	r1, [r7, #8]
 8016db6:	1dbb      	adds	r3, r7, #6
 8016db8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016dba:	1dbb      	adds	r3, r7, #6
 8016dbc:	881b      	ldrh	r3, [r3, #0]
 8016dbe:	68ba      	ldr	r2, [r7, #8]
 8016dc0:	68f8      	ldr	r0, [r7, #12]
 8016dc2:	2100      	movs	r1, #0
 8016dc4:	f000 fd2e 	bl	8017824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016dc8:	2300      	movs	r3, #0
}
 8016dca:	0018      	movs	r0, r3
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	b004      	add	sp, #16
 8016dd0:	bd80      	pop	{r7, pc}

08016dd2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016dd2:	b580      	push	{r7, lr}
 8016dd4:	b082      	sub	sp, #8
 8016dd6:	af00      	add	r7, sp, #0
 8016dd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016dda:	687a      	ldr	r2, [r7, #4]
 8016ddc:	23a5      	movs	r3, #165	@ 0xa5
 8016dde:	009b      	lsls	r3, r3, #2
 8016de0:	2104      	movs	r1, #4
 8016de2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	2300      	movs	r3, #0
 8016de8:	2200      	movs	r2, #0
 8016dea:	2100      	movs	r1, #0
 8016dec:	f000 fce3 	bl	80177b6 <USBD_LL_Transmit>

  return USBD_OK;
 8016df0:	2300      	movs	r3, #0
}
 8016df2:	0018      	movs	r0, r3
 8016df4:	46bd      	mov	sp, r7
 8016df6:	b002      	add	sp, #8
 8016df8:	bd80      	pop	{r7, pc}

08016dfa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016dfa:	b580      	push	{r7, lr}
 8016dfc:	b082      	sub	sp, #8
 8016dfe:	af00      	add	r7, sp, #0
 8016e00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016e02:	687a      	ldr	r2, [r7, #4]
 8016e04:	23a5      	movs	r3, #165	@ 0xa5
 8016e06:	009b      	lsls	r3, r3, #2
 8016e08:	2105      	movs	r1, #5
 8016e0a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	2300      	movs	r3, #0
 8016e10:	2200      	movs	r2, #0
 8016e12:	2100      	movs	r1, #0
 8016e14:	f000 fd06 	bl	8017824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016e18:	2300      	movs	r3, #0
}
 8016e1a:	0018      	movs	r0, r3
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	b002      	add	sp, #8
 8016e20:	bd80      	pop	{r7, pc}
	...

08016e24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016e28:	4914      	ldr	r1, [pc, #80]	@ (8016e7c <MX_USB_DEVICE_Init+0x58>)
 8016e2a:	4b15      	ldr	r3, [pc, #84]	@ (8016e80 <MX_USB_DEVICE_Init+0x5c>)
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	0018      	movs	r0, r3
 8016e30:	f7fe fdec 	bl	8015a0c <USBD_Init>
 8016e34:	1e03      	subs	r3, r0, #0
 8016e36:	d001      	beq.n	8016e3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016e38:	f7ef fc0a 	bl	8006650 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016e3c:	4a11      	ldr	r2, [pc, #68]	@ (8016e84 <MX_USB_DEVICE_Init+0x60>)
 8016e3e:	4b10      	ldr	r3, [pc, #64]	@ (8016e80 <MX_USB_DEVICE_Init+0x5c>)
 8016e40:	0011      	movs	r1, r2
 8016e42:	0018      	movs	r0, r3
 8016e44:	f7fe fe13 	bl	8015a6e <USBD_RegisterClass>
 8016e48:	1e03      	subs	r3, r0, #0
 8016e4a:	d001      	beq.n	8016e50 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8016e4c:	f7ef fc00 	bl	8006650 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016e50:	4a0d      	ldr	r2, [pc, #52]	@ (8016e88 <MX_USB_DEVICE_Init+0x64>)
 8016e52:	4b0b      	ldr	r3, [pc, #44]	@ (8016e80 <MX_USB_DEVICE_Init+0x5c>)
 8016e54:	0011      	movs	r1, r2
 8016e56:	0018      	movs	r0, r3
 8016e58:	f7fe fd28 	bl	80158ac <USBD_CDC_RegisterInterface>
 8016e5c:	1e03      	subs	r3, r0, #0
 8016e5e:	d001      	beq.n	8016e64 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8016e60:	f7ef fbf6 	bl	8006650 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016e64:	4b06      	ldr	r3, [pc, #24]	@ (8016e80 <MX_USB_DEVICE_Init+0x5c>)
 8016e66:	0018      	movs	r0, r3
 8016e68:	f7fe fe21 	bl	8015aae <USBD_Start>
 8016e6c:	1e03      	subs	r3, r0, #0
 8016e6e:	d001      	beq.n	8016e74 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8016e70:	f7ef fbee 	bl	8006650 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016e74:	46c0      	nop			@ (mov r8, r8)
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}
 8016e7a:	46c0      	nop			@ (mov r8, r8)
 8016e7c:	20000198 	.word	0x20000198
 8016e80:	20002d3c 	.word	0x20002d3c
 8016e84:	20000084 	.word	0x20000084
 8016e88:	20000188 	.word	0x20000188

08016e8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016e90:	4907      	ldr	r1, [pc, #28]	@ (8016eb0 <CDC_Init_FS+0x24>)
 8016e92:	4b08      	ldr	r3, [pc, #32]	@ (8016eb4 <CDC_Init_FS+0x28>)
 8016e94:	2200      	movs	r2, #0
 8016e96:	0018      	movs	r0, r3
 8016e98:	f7fe fd23 	bl	80158e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016e9c:	4a06      	ldr	r2, [pc, #24]	@ (8016eb8 <CDC_Init_FS+0x2c>)
 8016e9e:	4b05      	ldr	r3, [pc, #20]	@ (8016eb4 <CDC_Init_FS+0x28>)
 8016ea0:	0011      	movs	r1, r2
 8016ea2:	0018      	movs	r0, r3
 8016ea4:	f7fe fd39 	bl	801591a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016ea8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016eaa:	0018      	movs	r0, r3
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}
 8016eb0:	200034c0 	.word	0x200034c0
 8016eb4:	20002d3c 	.word	0x20002d3c
 8016eb8:	200030c0 	.word	0x200030c0

08016ebc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016ec0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016ec2:	0018      	movs	r0, r3
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}

08016ec8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b082      	sub	sp, #8
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6039      	str	r1, [r7, #0]
 8016ed0:	0011      	movs	r1, r2
 8016ed2:	1dfb      	adds	r3, r7, #7
 8016ed4:	1c02      	adds	r2, r0, #0
 8016ed6:	701a      	strb	r2, [r3, #0]
 8016ed8:	1d3b      	adds	r3, r7, #4
 8016eda:	1c0a      	adds	r2, r1, #0
 8016edc:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016ede:	1dfb      	adds	r3, r7, #7
 8016ee0:	781b      	ldrb	r3, [r3, #0]
 8016ee2:	2b23      	cmp	r3, #35	@ 0x23
 8016ee4:	d804      	bhi.n	8016ef0 <CDC_Control_FS+0x28>
 8016ee6:	009a      	lsls	r2, r3, #2
 8016ee8:	4b04      	ldr	r3, [pc, #16]	@ (8016efc <CDC_Control_FS+0x34>)
 8016eea:	18d3      	adds	r3, r2, r3
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016ef0:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8016ef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016ef4:	0018      	movs	r0, r3
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	b002      	add	sp, #8
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	0801c1c0 	.word	0x0801c1c0

08016f00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b082      	sub	sp, #8
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
 8016f08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8016f0a:	4b12      	ldr	r3, [pc, #72]	@ (8016f54 <CDC_Receive_FS+0x54>)
 8016f0c:	781b      	ldrb	r3, [r3, #0]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d013      	beq.n	8016f3a <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8016f12:	683b      	ldr	r3, [r7, #0]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	b29a      	uxth	r2, r3
 8016f18:	2301      	movs	r3, #1
 8016f1a:	425b      	negs	r3, r3
 8016f1c:	6879      	ldr	r1, [r7, #4]
 8016f1e:	480e      	ldr	r0, [pc, #56]	@ (8016f58 <CDC_Receive_FS+0x58>)
 8016f20:	f7fa fd3a 	bl	8011998 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016f24:	687a      	ldr	r2, [r7, #4]
 8016f26:	4b0d      	ldr	r3, [pc, #52]	@ (8016f5c <CDC_Receive_FS+0x5c>)
 8016f28:	0011      	movs	r1, r2
 8016f2a:	0018      	movs	r0, r3
 8016f2c:	f7fe fcf5 	bl	801591a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016f30:	4b0a      	ldr	r3, [pc, #40]	@ (8016f5c <CDC_Receive_FS+0x5c>)
 8016f32:	0018      	movs	r0, r3
 8016f34:	f7fe fd3c 	bl	80159b0 <USBD_CDC_ReceivePacket>
 8016f38:	e006      	b.n	8016f48 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	681a      	ldr	r2, [r3, #0]
 8016f3e:	4b08      	ldr	r3, [pc, #32]	@ (8016f60 <CDC_Receive_FS+0x60>)
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	18d2      	adds	r2, r2, r3
 8016f44:	4b06      	ldr	r3, [pc, #24]	@ (8016f60 <CDC_Receive_FS+0x60>)
 8016f46:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8016f48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016f4a:	0018      	movs	r0, r3
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	b002      	add	sp, #8
 8016f50:	bd80      	pop	{r7, pc}
 8016f52:	46c0      	nop			@ (mov r8, r8)
 8016f54:	20003000 	.word	0x20003000
 8016f58:	20003004 	.word	0x20003004
 8016f5c:	20002d3c 	.word	0x20002d3c
 8016f60:	200030bc 	.word	0x200030bc

08016f64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016f64:	b5b0      	push	{r4, r5, r7, lr}
 8016f66:	b084      	sub	sp, #16
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
 8016f6c:	000a      	movs	r2, r1
 8016f6e:	1cbb      	adds	r3, r7, #2
 8016f70:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8016f72:	230f      	movs	r3, #15
 8016f74:	18fb      	adds	r3, r7, r3
 8016f76:	2200      	movs	r2, #0
 8016f78:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016f7a:	4a11      	ldr	r2, [pc, #68]	@ (8016fc0 <CDC_Transmit_FS+0x5c>)
 8016f7c:	23ae      	movs	r3, #174	@ 0xae
 8016f7e:	009b      	lsls	r3, r3, #2
 8016f80:	58d3      	ldr	r3, [r2, r3]
 8016f82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016f84:	68ba      	ldr	r2, [r7, #8]
 8016f86:	2385      	movs	r3, #133	@ 0x85
 8016f88:	009b      	lsls	r3, r3, #2
 8016f8a:	58d3      	ldr	r3, [r2, r3]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d001      	beq.n	8016f94 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8016f90:	2301      	movs	r3, #1
 8016f92:	e010      	b.n	8016fb6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016f94:	1cbb      	adds	r3, r7, #2
 8016f96:	881a      	ldrh	r2, [r3, #0]
 8016f98:	6879      	ldr	r1, [r7, #4]
 8016f9a:	4b09      	ldr	r3, [pc, #36]	@ (8016fc0 <CDC_Transmit_FS+0x5c>)
 8016f9c:	0018      	movs	r0, r3
 8016f9e:	f7fe fca0 	bl	80158e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016fa2:	250f      	movs	r5, #15
 8016fa4:	197c      	adds	r4, r7, r5
 8016fa6:	4b06      	ldr	r3, [pc, #24]	@ (8016fc0 <CDC_Transmit_FS+0x5c>)
 8016fa8:	0018      	movs	r0, r3
 8016faa:	f7fe fcca 	bl	8015942 <USBD_CDC_TransmitPacket>
 8016fae:	0003      	movs	r3, r0
 8016fb0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8016fb2:	197b      	adds	r3, r7, r5
 8016fb4:	781b      	ldrb	r3, [r3, #0]
}
 8016fb6:	0018      	movs	r0, r3
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	b004      	add	sp, #16
 8016fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8016fbe:	46c0      	nop			@ (mov r8, r8)
 8016fc0:	20002d3c 	.word	0x20002d3c

08016fc4 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	af00      	add	r7, sp, #0
  ESPProg = true;
 8016fc8:	4b02      	ldr	r3, [pc, #8]	@ (8016fd4 <EnableESPProg+0x10>)
 8016fca:	2201      	movs	r2, #1
 8016fcc:	701a      	strb	r2, [r3, #0]
}
 8016fce:	46c0      	nop			@ (mov r8, r8)
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}
 8016fd4:	20003000 	.word	0x20003000

08016fd8 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8016fdc:	4b01      	ldr	r3, [pc, #4]	@ (8016fe4 <GetUsbRxPointer+0xc>)
}
 8016fde:	0018      	movs	r0, r3
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}
 8016fe4:	200030c0 	.word	0x200030c0

08016fe8 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8016fec:	4b07      	ldr	r3, [pc, #28]	@ (801700c <ResetUsbRxDataSize+0x24>)
 8016fee:	2200      	movs	r2, #0
 8016ff0:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8016ff2:	4a07      	ldr	r2, [pc, #28]	@ (8017010 <ResetUsbRxDataSize+0x28>)
 8016ff4:	4b07      	ldr	r3, [pc, #28]	@ (8017014 <ResetUsbRxDataSize+0x2c>)
 8016ff6:	0011      	movs	r1, r2
 8016ff8:	0018      	movs	r0, r3
 8016ffa:	f7fe fc8e 	bl	801591a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016ffe:	4b05      	ldr	r3, [pc, #20]	@ (8017014 <ResetUsbRxDataSize+0x2c>)
 8017000:	0018      	movs	r0, r3
 8017002:	f7fe fcd5 	bl	80159b0 <USBD_CDC_ReceivePacket>
}
 8017006:	46c0      	nop			@ (mov r8, r8)
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}
 801700c:	200030bc 	.word	0x200030bc
 8017010:	200030c0 	.word	0x200030c0
 8017014:	20002d3c 	.word	0x20002d3c

08017018 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8017018:	b580      	push	{r7, lr}
 801701a:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801701c:	4b02      	ldr	r3, [pc, #8]	@ (8017028 <GetUsbRxDataSize+0x10>)
 801701e:	681b      	ldr	r3, [r3, #0]
}
 8017020:	0018      	movs	r0, r3
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}
 8017026:	46c0      	nop			@ (mov r8, r8)
 8017028:	200030bc 	.word	0x200030bc

0801702c <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b082      	sub	sp, #8
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8017034:	687a      	ldr	r2, [r7, #4]
 8017036:	4b07      	ldr	r3, [pc, #28]	@ (8017054 <GetUsbRxNextChunk+0x28>)
 8017038:	18d2      	adds	r2, r2, r3
 801703a:	4b07      	ldr	r3, [pc, #28]	@ (8017058 <GetUsbRxNextChunk+0x2c>)
 801703c:	0011      	movs	r1, r2
 801703e:	0018      	movs	r0, r3
 8017040:	f7fe fc6b 	bl	801591a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017044:	4b04      	ldr	r3, [pc, #16]	@ (8017058 <GetUsbRxNextChunk+0x2c>)
 8017046:	0018      	movs	r0, r3
 8017048:	f7fe fcb2 	bl	80159b0 <USBD_CDC_ReceivePacket>
}
 801704c:	46c0      	nop			@ (mov r8, r8)
 801704e:	46bd      	mov	sp, r7
 8017050:	b002      	add	sp, #8
 8017052:	bd80      	pop	{r7, pc}
 8017054:	200030c0 	.word	0x200030c0
 8017058:	20002d3c 	.word	0x20002d3c

0801705c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b082      	sub	sp, #8
 8017060:	af00      	add	r7, sp, #0
 8017062:	0002      	movs	r2, r0
 8017064:	6039      	str	r1, [r7, #0]
 8017066:	1dfb      	adds	r3, r7, #7
 8017068:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	2212      	movs	r2, #18
 801706e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017070:	4b02      	ldr	r3, [pc, #8]	@ (801707c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017072:	0018      	movs	r0, r3
 8017074:	46bd      	mov	sp, r7
 8017076:	b002      	add	sp, #8
 8017078:	bd80      	pop	{r7, pc}
 801707a:	46c0      	nop			@ (mov r8, r8)
 801707c:	200001b4 	.word	0x200001b4

08017080 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b082      	sub	sp, #8
 8017084:	af00      	add	r7, sp, #0
 8017086:	0002      	movs	r2, r0
 8017088:	6039      	str	r1, [r7, #0]
 801708a:	1dfb      	adds	r3, r7, #7
 801708c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	2204      	movs	r2, #4
 8017092:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017094:	4b02      	ldr	r3, [pc, #8]	@ (80170a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017096:	0018      	movs	r0, r3
 8017098:	46bd      	mov	sp, r7
 801709a:	b002      	add	sp, #8
 801709c:	bd80      	pop	{r7, pc}
 801709e:	46c0      	nop			@ (mov r8, r8)
 80170a0:	200001c8 	.word	0x200001c8

080170a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b082      	sub	sp, #8
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	0002      	movs	r2, r0
 80170ac:	6039      	str	r1, [r7, #0]
 80170ae:	1dfb      	adds	r3, r7, #7
 80170b0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80170b2:	1dfb      	adds	r3, r7, #7
 80170b4:	781b      	ldrb	r3, [r3, #0]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d106      	bne.n	80170c8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80170ba:	683a      	ldr	r2, [r7, #0]
 80170bc:	4908      	ldr	r1, [pc, #32]	@ (80170e0 <USBD_FS_ProductStrDescriptor+0x3c>)
 80170be:	4b09      	ldr	r3, [pc, #36]	@ (80170e4 <USBD_FS_ProductStrDescriptor+0x40>)
 80170c0:	0018      	movs	r0, r3
 80170c2:	f7ff fdb1 	bl	8016c28 <USBD_GetString>
 80170c6:	e005      	b.n	80170d4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80170c8:	683a      	ldr	r2, [r7, #0]
 80170ca:	4905      	ldr	r1, [pc, #20]	@ (80170e0 <USBD_FS_ProductStrDescriptor+0x3c>)
 80170cc:	4b05      	ldr	r3, [pc, #20]	@ (80170e4 <USBD_FS_ProductStrDescriptor+0x40>)
 80170ce:	0018      	movs	r0, r3
 80170d0:	f7ff fdaa 	bl	8016c28 <USBD_GetString>
  }
  return USBD_StrDesc;
 80170d4:	4b02      	ldr	r3, [pc, #8]	@ (80170e0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80170d6:	0018      	movs	r0, r3
 80170d8:	46bd      	mov	sp, r7
 80170da:	b002      	add	sp, #8
 80170dc:	bd80      	pop	{r7, pc}
 80170de:	46c0      	nop			@ (mov r8, r8)
 80170e0:	200038c0 	.word	0x200038c0
 80170e4:	0801be80 	.word	0x0801be80

080170e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	0002      	movs	r2, r0
 80170f0:	6039      	str	r1, [r7, #0]
 80170f2:	1dfb      	adds	r3, r7, #7
 80170f4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80170f6:	683a      	ldr	r2, [r7, #0]
 80170f8:	4904      	ldr	r1, [pc, #16]	@ (801710c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80170fa:	4b05      	ldr	r3, [pc, #20]	@ (8017110 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80170fc:	0018      	movs	r0, r3
 80170fe:	f7ff fd93 	bl	8016c28 <USBD_GetString>
  return USBD_StrDesc;
 8017102:	4b02      	ldr	r3, [pc, #8]	@ (801710c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8017104:	0018      	movs	r0, r3
 8017106:	46bd      	mov	sp, r7
 8017108:	b002      	add	sp, #8
 801710a:	bd80      	pop	{r7, pc}
 801710c:	200038c0 	.word	0x200038c0
 8017110:	0801be98 	.word	0x0801be98

08017114 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
 801711a:	0002      	movs	r2, r0
 801711c:	6039      	str	r1, [r7, #0]
 801711e:	1dfb      	adds	r3, r7, #7
 8017120:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017122:	683b      	ldr	r3, [r7, #0]
 8017124:	221a      	movs	r2, #26
 8017126:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017128:	f000 f84c 	bl	80171c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801712c:	4b02      	ldr	r3, [pc, #8]	@ (8017138 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801712e:	0018      	movs	r0, r3
 8017130:	46bd      	mov	sp, r7
 8017132:	b002      	add	sp, #8
 8017134:	bd80      	pop	{r7, pc}
 8017136:	46c0      	nop			@ (mov r8, r8)
 8017138:	200001cc 	.word	0x200001cc

0801713c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b082      	sub	sp, #8
 8017140:	af00      	add	r7, sp, #0
 8017142:	0002      	movs	r2, r0
 8017144:	6039      	str	r1, [r7, #0]
 8017146:	1dfb      	adds	r3, r7, #7
 8017148:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801714a:	1dfb      	adds	r3, r7, #7
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d106      	bne.n	8017160 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017152:	683a      	ldr	r2, [r7, #0]
 8017154:	4908      	ldr	r1, [pc, #32]	@ (8017178 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8017156:	4b09      	ldr	r3, [pc, #36]	@ (801717c <USBD_FS_ConfigStrDescriptor+0x40>)
 8017158:	0018      	movs	r0, r3
 801715a:	f7ff fd65 	bl	8016c28 <USBD_GetString>
 801715e:	e005      	b.n	801716c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017160:	683a      	ldr	r2, [r7, #0]
 8017162:	4905      	ldr	r1, [pc, #20]	@ (8017178 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8017164:	4b05      	ldr	r3, [pc, #20]	@ (801717c <USBD_FS_ConfigStrDescriptor+0x40>)
 8017166:	0018      	movs	r0, r3
 8017168:	f7ff fd5e 	bl	8016c28 <USBD_GetString>
  }
  return USBD_StrDesc;
 801716c:	4b02      	ldr	r3, [pc, #8]	@ (8017178 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801716e:	0018      	movs	r0, r3
 8017170:	46bd      	mov	sp, r7
 8017172:	b002      	add	sp, #8
 8017174:	bd80      	pop	{r7, pc}
 8017176:	46c0      	nop			@ (mov r8, r8)
 8017178:	200038c0 	.word	0x200038c0
 801717c:	0801beac 	.word	0x0801beac

08017180 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	0002      	movs	r2, r0
 8017188:	6039      	str	r1, [r7, #0]
 801718a:	1dfb      	adds	r3, r7, #7
 801718c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801718e:	1dfb      	adds	r3, r7, #7
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d106      	bne.n	80171a4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017196:	683a      	ldr	r2, [r7, #0]
 8017198:	4908      	ldr	r1, [pc, #32]	@ (80171bc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801719a:	4b09      	ldr	r3, [pc, #36]	@ (80171c0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801719c:	0018      	movs	r0, r3
 801719e:	f7ff fd43 	bl	8016c28 <USBD_GetString>
 80171a2:	e005      	b.n	80171b0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80171a4:	683a      	ldr	r2, [r7, #0]
 80171a6:	4905      	ldr	r1, [pc, #20]	@ (80171bc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80171a8:	4b05      	ldr	r3, [pc, #20]	@ (80171c0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80171aa:	0018      	movs	r0, r3
 80171ac:	f7ff fd3c 	bl	8016c28 <USBD_GetString>
  }
  return USBD_StrDesc;
 80171b0:	4b02      	ldr	r3, [pc, #8]	@ (80171bc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80171b2:	0018      	movs	r0, r3
 80171b4:	46bd      	mov	sp, r7
 80171b6:	b002      	add	sp, #8
 80171b8:	bd80      	pop	{r7, pc}
 80171ba:	46c0      	nop			@ (mov r8, r8)
 80171bc:	200038c0 	.word	0x200038c0
 80171c0:	0801beb8 	.word	0x0801beb8

080171c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b084      	sub	sp, #16
 80171c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80171ca:	4b10      	ldr	r3, [pc, #64]	@ (801720c <Get_SerialNum+0x48>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80171d0:	4b0f      	ldr	r3, [pc, #60]	@ (8017210 <Get_SerialNum+0x4c>)
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80171d6:	4b0f      	ldr	r3, [pc, #60]	@ (8017214 <Get_SerialNum+0x50>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80171dc:	68fa      	ldr	r2, [r7, #12]
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	18d3      	adds	r3, r2, r3
 80171e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d00b      	beq.n	8017202 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80171ea:	490b      	ldr	r1, [pc, #44]	@ (8017218 <Get_SerialNum+0x54>)
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	2208      	movs	r2, #8
 80171f0:	0018      	movs	r0, r3
 80171f2:	f000 f815 	bl	8017220 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80171f6:	4909      	ldr	r1, [pc, #36]	@ (801721c <Get_SerialNum+0x58>)
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	2204      	movs	r2, #4
 80171fc:	0018      	movs	r0, r3
 80171fe:	f000 f80f 	bl	8017220 <IntToUnicode>
  }
}
 8017202:	46c0      	nop			@ (mov r8, r8)
 8017204:	46bd      	mov	sp, r7
 8017206:	b004      	add	sp, #16
 8017208:	bd80      	pop	{r7, pc}
 801720a:	46c0      	nop			@ (mov r8, r8)
 801720c:	1ff80050 	.word	0x1ff80050
 8017210:	1ff80054 	.word	0x1ff80054
 8017214:	1ff80058 	.word	0x1ff80058
 8017218:	200001ce 	.word	0x200001ce
 801721c:	200001de 	.word	0x200001de

08017220 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b086      	sub	sp, #24
 8017224:	af00      	add	r7, sp, #0
 8017226:	60f8      	str	r0, [r7, #12]
 8017228:	60b9      	str	r1, [r7, #8]
 801722a:	1dfb      	adds	r3, r7, #7
 801722c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801722e:	2117      	movs	r1, #23
 8017230:	187b      	adds	r3, r7, r1
 8017232:	2200      	movs	r2, #0
 8017234:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8017236:	187b      	adds	r3, r7, r1
 8017238:	2200      	movs	r2, #0
 801723a:	701a      	strb	r2, [r3, #0]
 801723c:	e02f      	b.n	801729e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	0f1b      	lsrs	r3, r3, #28
 8017242:	2b09      	cmp	r3, #9
 8017244:	d80d      	bhi.n	8017262 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	0f1b      	lsrs	r3, r3, #28
 801724a:	b2da      	uxtb	r2, r3
 801724c:	2317      	movs	r3, #23
 801724e:	18fb      	adds	r3, r7, r3
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	005b      	lsls	r3, r3, #1
 8017254:	0019      	movs	r1, r3
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	185b      	adds	r3, r3, r1
 801725a:	3230      	adds	r2, #48	@ 0x30
 801725c:	b2d2      	uxtb	r2, r2
 801725e:	701a      	strb	r2, [r3, #0]
 8017260:	e00c      	b.n	801727c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	0f1b      	lsrs	r3, r3, #28
 8017266:	b2da      	uxtb	r2, r3
 8017268:	2317      	movs	r3, #23
 801726a:	18fb      	adds	r3, r7, r3
 801726c:	781b      	ldrb	r3, [r3, #0]
 801726e:	005b      	lsls	r3, r3, #1
 8017270:	0019      	movs	r1, r3
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	185b      	adds	r3, r3, r1
 8017276:	3237      	adds	r2, #55	@ 0x37
 8017278:	b2d2      	uxtb	r2, r2
 801727a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	011b      	lsls	r3, r3, #4
 8017280:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017282:	2117      	movs	r1, #23
 8017284:	187b      	adds	r3, r7, r1
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	005b      	lsls	r3, r3, #1
 801728a:	3301      	adds	r3, #1
 801728c:	68ba      	ldr	r2, [r7, #8]
 801728e:	18d3      	adds	r3, r2, r3
 8017290:	2200      	movs	r2, #0
 8017292:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017294:	187b      	adds	r3, r7, r1
 8017296:	781a      	ldrb	r2, [r3, #0]
 8017298:	187b      	adds	r3, r7, r1
 801729a:	3201      	adds	r2, #1
 801729c:	701a      	strb	r2, [r3, #0]
 801729e:	2317      	movs	r3, #23
 80172a0:	18fa      	adds	r2, r7, r3
 80172a2:	1dfb      	adds	r3, r7, #7
 80172a4:	7812      	ldrb	r2, [r2, #0]
 80172a6:	781b      	ldrb	r3, [r3, #0]
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d3c8      	bcc.n	801723e <IntToUnicode+0x1e>
  }
}
 80172ac:	46c0      	nop			@ (mov r8, r8)
 80172ae:	46c0      	nop			@ (mov r8, r8)
 80172b0:	46bd      	mov	sp, r7
 80172b2:	b006      	add	sp, #24
 80172b4:	bd80      	pop	{r7, pc}
	...

080172b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b082      	sub	sp, #8
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4a0a      	ldr	r2, [pc, #40]	@ (80172f0 <HAL_PCD_MspInit+0x38>)
 80172c6:	4293      	cmp	r3, r2
 80172c8:	d10e      	bne.n	80172e8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80172ca:	4b0a      	ldr	r3, [pc, #40]	@ (80172f4 <HAL_PCD_MspInit+0x3c>)
 80172cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80172ce:	4b09      	ldr	r3, [pc, #36]	@ (80172f4 <HAL_PCD_MspInit+0x3c>)
 80172d0:	2180      	movs	r1, #128	@ 0x80
 80172d2:	0409      	lsls	r1, r1, #16
 80172d4:	430a      	orrs	r2, r1
 80172d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80172d8:	2200      	movs	r2, #0
 80172da:	2100      	movs	r1, #0
 80172dc:	201f      	movs	r0, #31
 80172de:	f7f3 fc57 	bl	800ab90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80172e2:	201f      	movs	r0, #31
 80172e4:	f7f3 fc69 	bl	800abba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80172e8:	46c0      	nop			@ (mov r8, r8)
 80172ea:	46bd      	mov	sp, r7
 80172ec:	b002      	add	sp, #8
 80172ee:	bd80      	pop	{r7, pc}
 80172f0:	40005c00 	.word	0x40005c00
 80172f4:	40021000 	.word	0x40021000

080172f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b082      	sub	sp, #8
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017300:	687a      	ldr	r2, [r7, #4]
 8017302:	23bc      	movs	r3, #188	@ 0xbc
 8017304:	009b      	lsls	r3, r3, #2
 8017306:	58d2      	ldr	r2, [r2, r3]
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	21ac      	movs	r1, #172	@ 0xac
 801730c:	0089      	lsls	r1, r1, #2
 801730e:	468c      	mov	ip, r1
 8017310:	4463      	add	r3, ip
 8017312:	0019      	movs	r1, r3
 8017314:	0010      	movs	r0, r2
 8017316:	f7fe fc1d 	bl	8015b54 <USBD_LL_SetupStage>
}
 801731a:	46c0      	nop			@ (mov r8, r8)
 801731c:	46bd      	mov	sp, r7
 801731e:	b002      	add	sp, #8
 8017320:	bd80      	pop	{r7, pc}

08017322 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017322:	b590      	push	{r4, r7, lr}
 8017324:	b083      	sub	sp, #12
 8017326:	af00      	add	r7, sp, #0
 8017328:	6078      	str	r0, [r7, #4]
 801732a:	000a      	movs	r2, r1
 801732c:	1cfb      	adds	r3, r7, #3
 801732e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017330:	687a      	ldr	r2, [r7, #4]
 8017332:	23bc      	movs	r3, #188	@ 0xbc
 8017334:	009b      	lsls	r3, r3, #2
 8017336:	58d4      	ldr	r4, [r2, r3]
 8017338:	1cfb      	adds	r3, r7, #3
 801733a:	781a      	ldrb	r2, [r3, #0]
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	23be      	movs	r3, #190	@ 0xbe
 8017340:	0059      	lsls	r1, r3, #1
 8017342:	0013      	movs	r3, r2
 8017344:	009b      	lsls	r3, r3, #2
 8017346:	189b      	adds	r3, r3, r2
 8017348:	00db      	lsls	r3, r3, #3
 801734a:	18c3      	adds	r3, r0, r3
 801734c:	185b      	adds	r3, r3, r1
 801734e:	681a      	ldr	r2, [r3, #0]
 8017350:	1cfb      	adds	r3, r7, #3
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	0019      	movs	r1, r3
 8017356:	0020      	movs	r0, r4
 8017358:	f7fe fc5a 	bl	8015c10 <USBD_LL_DataOutStage>
}
 801735c:	46c0      	nop			@ (mov r8, r8)
 801735e:	46bd      	mov	sp, r7
 8017360:	b003      	add	sp, #12
 8017362:	bd90      	pop	{r4, r7, pc}

08017364 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
 801736c:	000a      	movs	r2, r1
 801736e:	1cfb      	adds	r3, r7, #3
 8017370:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017372:	687a      	ldr	r2, [r7, #4]
 8017374:	23bc      	movs	r3, #188	@ 0xbc
 8017376:	009b      	lsls	r3, r3, #2
 8017378:	58d0      	ldr	r0, [r2, r3]
 801737a:	1cfb      	adds	r3, r7, #3
 801737c:	781a      	ldrb	r2, [r3, #0]
 801737e:	6879      	ldr	r1, [r7, #4]
 8017380:	0013      	movs	r3, r2
 8017382:	009b      	lsls	r3, r3, #2
 8017384:	189b      	adds	r3, r3, r2
 8017386:	00db      	lsls	r3, r3, #3
 8017388:	18cb      	adds	r3, r1, r3
 801738a:	333c      	adds	r3, #60	@ 0x3c
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	1cfb      	adds	r3, r7, #3
 8017390:	781b      	ldrb	r3, [r3, #0]
 8017392:	0019      	movs	r1, r3
 8017394:	f7fe fcbe 	bl	8015d14 <USBD_LL_DataInStage>
}
 8017398:	46c0      	nop			@ (mov r8, r8)
 801739a:	46bd      	mov	sp, r7
 801739c:	b002      	add	sp, #8
 801739e:	bd80      	pop	{r7, pc}

080173a0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b082      	sub	sp, #8
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80173a8:	687a      	ldr	r2, [r7, #4]
 80173aa:	23bc      	movs	r3, #188	@ 0xbc
 80173ac:	009b      	lsls	r3, r3, #2
 80173ae:	58d3      	ldr	r3, [r2, r3]
 80173b0:	0018      	movs	r0, r3
 80173b2:	f7fe fdf5 	bl	8015fa0 <USBD_LL_SOF>
}
 80173b6:	46c0      	nop			@ (mov r8, r8)
 80173b8:	46bd      	mov	sp, r7
 80173ba:	b002      	add	sp, #8
 80173bc:	bd80      	pop	{r7, pc}

080173be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173be:	b580      	push	{r7, lr}
 80173c0:	b084      	sub	sp, #16
 80173c2:	af00      	add	r7, sp, #0
 80173c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80173c6:	230f      	movs	r3, #15
 80173c8:	18fb      	adds	r3, r7, r3
 80173ca:	2201      	movs	r2, #1
 80173cc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	689b      	ldr	r3, [r3, #8]
 80173d2:	2b02      	cmp	r3, #2
 80173d4:	d001      	beq.n	80173da <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80173d6:	f7ef f93b 	bl	8006650 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80173da:	687a      	ldr	r2, [r7, #4]
 80173dc:	23bc      	movs	r3, #188	@ 0xbc
 80173de:	009b      	lsls	r3, r3, #2
 80173e0:	58d2      	ldr	r2, [r2, r3]
 80173e2:	230f      	movs	r3, #15
 80173e4:	18fb      	adds	r3, r7, r3
 80173e6:	781b      	ldrb	r3, [r3, #0]
 80173e8:	0019      	movs	r1, r3
 80173ea:	0010      	movs	r0, r2
 80173ec:	f7fe fd97 	bl	8015f1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80173f0:	687a      	ldr	r2, [r7, #4]
 80173f2:	23bc      	movs	r3, #188	@ 0xbc
 80173f4:	009b      	lsls	r3, r3, #2
 80173f6:	58d3      	ldr	r3, [r2, r3]
 80173f8:	0018      	movs	r0, r3
 80173fa:	f7fe fd48 	bl	8015e8e <USBD_LL_Reset>
}
 80173fe:	46c0      	nop			@ (mov r8, r8)
 8017400:	46bd      	mov	sp, r7
 8017402:	b004      	add	sp, #16
 8017404:	bd80      	pop	{r7, pc}
	...

08017408 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b082      	sub	sp, #8
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017410:	687a      	ldr	r2, [r7, #4]
 8017412:	23bc      	movs	r3, #188	@ 0xbc
 8017414:	009b      	lsls	r3, r3, #2
 8017416:	58d3      	ldr	r3, [r2, r3]
 8017418:	0018      	movs	r0, r3
 801741a:	f7fe fd91 	bl	8015f40 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	699b      	ldr	r3, [r3, #24]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d005      	beq.n	8017432 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017426:	4b05      	ldr	r3, [pc, #20]	@ (801743c <HAL_PCD_SuspendCallback+0x34>)
 8017428:	691a      	ldr	r2, [r3, #16]
 801742a:	4b04      	ldr	r3, [pc, #16]	@ (801743c <HAL_PCD_SuspendCallback+0x34>)
 801742c:	2106      	movs	r1, #6
 801742e:	430a      	orrs	r2, r1
 8017430:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8017432:	46c0      	nop			@ (mov r8, r8)
 8017434:	46bd      	mov	sp, r7
 8017436:	b002      	add	sp, #8
 8017438:	bd80      	pop	{r7, pc}
 801743a:	46c0      	nop			@ (mov r8, r8)
 801743c:	e000ed00 	.word	0xe000ed00

08017440 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b082      	sub	sp, #8
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	699b      	ldr	r3, [r3, #24]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d007      	beq.n	8017460 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017450:	4b09      	ldr	r3, [pc, #36]	@ (8017478 <HAL_PCD_ResumeCallback+0x38>)
 8017452:	691a      	ldr	r2, [r3, #16]
 8017454:	4b08      	ldr	r3, [pc, #32]	@ (8017478 <HAL_PCD_ResumeCallback+0x38>)
 8017456:	2106      	movs	r1, #6
 8017458:	438a      	bics	r2, r1
 801745a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801745c:	f000 fa44 	bl	80178e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017460:	687a      	ldr	r2, [r7, #4]
 8017462:	23bc      	movs	r3, #188	@ 0xbc
 8017464:	009b      	lsls	r3, r3, #2
 8017466:	58d3      	ldr	r3, [r2, r3]
 8017468:	0018      	movs	r0, r3
 801746a:	f7fe fd81 	bl	8015f70 <USBD_LL_Resume>
}
 801746e:	46c0      	nop			@ (mov r8, r8)
 8017470:	46bd      	mov	sp, r7
 8017472:	b002      	add	sp, #8
 8017474:	bd80      	pop	{r7, pc}
 8017476:	46c0      	nop			@ (mov r8, r8)
 8017478:	e000ed00 	.word	0xe000ed00

0801747c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b082      	sub	sp, #8
 8017480:	af00      	add	r7, sp, #0
 8017482:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8017484:	4a2d      	ldr	r2, [pc, #180]	@ (801753c <USBD_LL_Init+0xc0>)
 8017486:	23bc      	movs	r3, #188	@ 0xbc
 8017488:	009b      	lsls	r3, r3, #2
 801748a:	6879      	ldr	r1, [r7, #4]
 801748c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801748e:	687a      	ldr	r2, [r7, #4]
 8017490:	23b0      	movs	r3, #176	@ 0xb0
 8017492:	009b      	lsls	r3, r3, #2
 8017494:	4929      	ldr	r1, [pc, #164]	@ (801753c <USBD_LL_Init+0xc0>)
 8017496:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8017498:	4b28      	ldr	r3, [pc, #160]	@ (801753c <USBD_LL_Init+0xc0>)
 801749a:	4a29      	ldr	r2, [pc, #164]	@ (8017540 <USBD_LL_Init+0xc4>)
 801749c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801749e:	4b27      	ldr	r3, [pc, #156]	@ (801753c <USBD_LL_Init+0xc0>)
 80174a0:	2208      	movs	r2, #8
 80174a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80174a4:	4b25      	ldr	r3, [pc, #148]	@ (801753c <USBD_LL_Init+0xc0>)
 80174a6:	2202      	movs	r2, #2
 80174a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80174aa:	4b24      	ldr	r3, [pc, #144]	@ (801753c <USBD_LL_Init+0xc0>)
 80174ac:	2202      	movs	r2, #2
 80174ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80174b0:	4b22      	ldr	r3, [pc, #136]	@ (801753c <USBD_LL_Init+0xc0>)
 80174b2:	2200      	movs	r2, #0
 80174b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80174b6:	4b21      	ldr	r3, [pc, #132]	@ (801753c <USBD_LL_Init+0xc0>)
 80174b8:	2200      	movs	r2, #0
 80174ba:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80174bc:	4b1f      	ldr	r3, [pc, #124]	@ (801753c <USBD_LL_Init+0xc0>)
 80174be:	2200      	movs	r2, #0
 80174c0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80174c2:	4b1e      	ldr	r3, [pc, #120]	@ (801753c <USBD_LL_Init+0xc0>)
 80174c4:	0018      	movs	r0, r3
 80174c6:	f7f6 fe07 	bl	800e0d8 <HAL_PCD_Init>
 80174ca:	1e03      	subs	r3, r0, #0
 80174cc:	d001      	beq.n	80174d2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80174ce:	f7ef f8bf 	bl	8006650 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80174d2:	687a      	ldr	r2, [r7, #4]
 80174d4:	23b0      	movs	r3, #176	@ 0xb0
 80174d6:	009b      	lsls	r3, r3, #2
 80174d8:	58d0      	ldr	r0, [r2, r3]
 80174da:	2318      	movs	r3, #24
 80174dc:	2200      	movs	r2, #0
 80174de:	2100      	movs	r1, #0
 80174e0:	f7f8 fbc8 	bl	800fc74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80174e4:	687a      	ldr	r2, [r7, #4]
 80174e6:	23b0      	movs	r3, #176	@ 0xb0
 80174e8:	009b      	lsls	r3, r3, #2
 80174ea:	58d0      	ldr	r0, [r2, r3]
 80174ec:	2358      	movs	r3, #88	@ 0x58
 80174ee:	2200      	movs	r2, #0
 80174f0:	2180      	movs	r1, #128	@ 0x80
 80174f2:	f7f8 fbbf 	bl	800fc74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80174f6:	687a      	ldr	r2, [r7, #4]
 80174f8:	23b0      	movs	r3, #176	@ 0xb0
 80174fa:	009b      	lsls	r3, r3, #2
 80174fc:	58d0      	ldr	r0, [r2, r3]
 80174fe:	23c0      	movs	r3, #192	@ 0xc0
 8017500:	2200      	movs	r2, #0
 8017502:	2181      	movs	r1, #129	@ 0x81
 8017504:	f7f8 fbb6 	bl	800fc74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8017508:	687a      	ldr	r2, [r7, #4]
 801750a:	23b0      	movs	r3, #176	@ 0xb0
 801750c:	009b      	lsls	r3, r3, #2
 801750e:	58d0      	ldr	r0, [r2, r3]
 8017510:	2388      	movs	r3, #136	@ 0x88
 8017512:	005b      	lsls	r3, r3, #1
 8017514:	2200      	movs	r2, #0
 8017516:	2101      	movs	r1, #1
 8017518:	f7f8 fbac 	bl	800fc74 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801751c:	687a      	ldr	r2, [r7, #4]
 801751e:	23b0      	movs	r3, #176	@ 0xb0
 8017520:	009b      	lsls	r3, r3, #2
 8017522:	58d0      	ldr	r0, [r2, r3]
 8017524:	2380      	movs	r3, #128	@ 0x80
 8017526:	005b      	lsls	r3, r3, #1
 8017528:	2200      	movs	r2, #0
 801752a:	2182      	movs	r1, #130	@ 0x82
 801752c:	f7f8 fba2 	bl	800fc74 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8017530:	2300      	movs	r3, #0
}
 8017532:	0018      	movs	r0, r3
 8017534:	46bd      	mov	sp, r7
 8017536:	b002      	add	sp, #8
 8017538:	bd80      	pop	{r7, pc}
 801753a:	46c0      	nop			@ (mov r8, r8)
 801753c:	20003ac0 	.word	0x20003ac0
 8017540:	40005c00 	.word	0x40005c00

08017544 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017546:	b085      	sub	sp, #20
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801754c:	210f      	movs	r1, #15
 801754e:	187b      	adds	r3, r7, r1
 8017550:	2200      	movs	r2, #0
 8017552:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017554:	260e      	movs	r6, #14
 8017556:	19bb      	adds	r3, r7, r6
 8017558:	2200      	movs	r2, #0
 801755a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801755c:	687a      	ldr	r2, [r7, #4]
 801755e:	23b0      	movs	r3, #176	@ 0xb0
 8017560:	009b      	lsls	r3, r3, #2
 8017562:	58d3      	ldr	r3, [r2, r3]
 8017564:	000d      	movs	r5, r1
 8017566:	187c      	adds	r4, r7, r1
 8017568:	0018      	movs	r0, r3
 801756a:	f7f6 feb5 	bl	800e2d8 <HAL_PCD_Start>
 801756e:	0003      	movs	r3, r0
 8017570:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017572:	19bc      	adds	r4, r7, r6
 8017574:	197b      	adds	r3, r7, r5
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	0018      	movs	r0, r3
 801757a:	f000 f9bc 	bl	80178f6 <USBD_Get_USB_Status>
 801757e:	0003      	movs	r3, r0
 8017580:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017582:	19bb      	adds	r3, r7, r6
 8017584:	781b      	ldrb	r3, [r3, #0]
}
 8017586:	0018      	movs	r0, r3
 8017588:	46bd      	mov	sp, r7
 801758a:	b005      	add	sp, #20
 801758c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801758e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801758e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017590:	b085      	sub	sp, #20
 8017592:	af00      	add	r7, sp, #0
 8017594:	6078      	str	r0, [r7, #4]
 8017596:	000c      	movs	r4, r1
 8017598:	0010      	movs	r0, r2
 801759a:	0019      	movs	r1, r3
 801759c:	1cfb      	adds	r3, r7, #3
 801759e:	1c22      	adds	r2, r4, #0
 80175a0:	701a      	strb	r2, [r3, #0]
 80175a2:	1cbb      	adds	r3, r7, #2
 80175a4:	1c02      	adds	r2, r0, #0
 80175a6:	701a      	strb	r2, [r3, #0]
 80175a8:	003b      	movs	r3, r7
 80175aa:	1c0a      	adds	r2, r1, #0
 80175ac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175ae:	260f      	movs	r6, #15
 80175b0:	19bb      	adds	r3, r7, r6
 80175b2:	2200      	movs	r2, #0
 80175b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175b6:	250e      	movs	r5, #14
 80175b8:	197b      	adds	r3, r7, r5
 80175ba:	2200      	movs	r2, #0
 80175bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80175be:	687a      	ldr	r2, [r7, #4]
 80175c0:	23b0      	movs	r3, #176	@ 0xb0
 80175c2:	009b      	lsls	r3, r3, #2
 80175c4:	58d0      	ldr	r0, [r2, r3]
 80175c6:	19bc      	adds	r4, r7, r6
 80175c8:	1cbb      	adds	r3, r7, #2
 80175ca:	781d      	ldrb	r5, [r3, #0]
 80175cc:	003b      	movs	r3, r7
 80175ce:	881a      	ldrh	r2, [r3, #0]
 80175d0:	1cfb      	adds	r3, r7, #3
 80175d2:	7819      	ldrb	r1, [r3, #0]
 80175d4:	002b      	movs	r3, r5
 80175d6:	f7f7 f814 	bl	800e602 <HAL_PCD_EP_Open>
 80175da:	0003      	movs	r3, r0
 80175dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175de:	250e      	movs	r5, #14
 80175e0:	197c      	adds	r4, r7, r5
 80175e2:	19bb      	adds	r3, r7, r6
 80175e4:	781b      	ldrb	r3, [r3, #0]
 80175e6:	0018      	movs	r0, r3
 80175e8:	f000 f985 	bl	80178f6 <USBD_Get_USB_Status>
 80175ec:	0003      	movs	r3, r0
 80175ee:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80175f0:	197b      	adds	r3, r7, r5
 80175f2:	781b      	ldrb	r3, [r3, #0]
}
 80175f4:	0018      	movs	r0, r3
 80175f6:	46bd      	mov	sp, r7
 80175f8:	b005      	add	sp, #20
 80175fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175fc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175fe:	b085      	sub	sp, #20
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
 8017604:	000a      	movs	r2, r1
 8017606:	1cfb      	adds	r3, r7, #3
 8017608:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801760a:	210f      	movs	r1, #15
 801760c:	187b      	adds	r3, r7, r1
 801760e:	2200      	movs	r2, #0
 8017610:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017612:	260e      	movs	r6, #14
 8017614:	19bb      	adds	r3, r7, r6
 8017616:	2200      	movs	r2, #0
 8017618:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801761a:	687a      	ldr	r2, [r7, #4]
 801761c:	23b0      	movs	r3, #176	@ 0xb0
 801761e:	009b      	lsls	r3, r3, #2
 8017620:	58d2      	ldr	r2, [r2, r3]
 8017622:	000d      	movs	r5, r1
 8017624:	187c      	adds	r4, r7, r1
 8017626:	1cfb      	adds	r3, r7, #3
 8017628:	781b      	ldrb	r3, [r3, #0]
 801762a:	0019      	movs	r1, r3
 801762c:	0010      	movs	r0, r2
 801762e:	f7f7 f857 	bl	800e6e0 <HAL_PCD_EP_Close>
 8017632:	0003      	movs	r3, r0
 8017634:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017636:	19bc      	adds	r4, r7, r6
 8017638:	197b      	adds	r3, r7, r5
 801763a:	781b      	ldrb	r3, [r3, #0]
 801763c:	0018      	movs	r0, r3
 801763e:	f000 f95a 	bl	80178f6 <USBD_Get_USB_Status>
 8017642:	0003      	movs	r3, r0
 8017644:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017646:	19bb      	adds	r3, r7, r6
 8017648:	781b      	ldrb	r3, [r3, #0]
}
 801764a:	0018      	movs	r0, r3
 801764c:	46bd      	mov	sp, r7
 801764e:	b005      	add	sp, #20
 8017650:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017652 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017654:	b085      	sub	sp, #20
 8017656:	af00      	add	r7, sp, #0
 8017658:	6078      	str	r0, [r7, #4]
 801765a:	000a      	movs	r2, r1
 801765c:	1cfb      	adds	r3, r7, #3
 801765e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017660:	210f      	movs	r1, #15
 8017662:	187b      	adds	r3, r7, r1
 8017664:	2200      	movs	r2, #0
 8017666:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017668:	260e      	movs	r6, #14
 801766a:	19bb      	adds	r3, r7, r6
 801766c:	2200      	movs	r2, #0
 801766e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017670:	687a      	ldr	r2, [r7, #4]
 8017672:	23b0      	movs	r3, #176	@ 0xb0
 8017674:	009b      	lsls	r3, r3, #2
 8017676:	58d2      	ldr	r2, [r2, r3]
 8017678:	000d      	movs	r5, r1
 801767a:	187c      	adds	r4, r7, r1
 801767c:	1cfb      	adds	r3, r7, #3
 801767e:	781b      	ldrb	r3, [r3, #0]
 8017680:	0019      	movs	r1, r3
 8017682:	0010      	movs	r0, r2
 8017684:	f7f7 f909 	bl	800e89a <HAL_PCD_EP_SetStall>
 8017688:	0003      	movs	r3, r0
 801768a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801768c:	19bc      	adds	r4, r7, r6
 801768e:	197b      	adds	r3, r7, r5
 8017690:	781b      	ldrb	r3, [r3, #0]
 8017692:	0018      	movs	r0, r3
 8017694:	f000 f92f 	bl	80178f6 <USBD_Get_USB_Status>
 8017698:	0003      	movs	r3, r0
 801769a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801769c:	19bb      	adds	r3, r7, r6
 801769e:	781b      	ldrb	r3, [r3, #0]
}
 80176a0:	0018      	movs	r0, r3
 80176a2:	46bd      	mov	sp, r7
 80176a4:	b005      	add	sp, #20
 80176a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80176a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176aa:	b085      	sub	sp, #20
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
 80176b0:	000a      	movs	r2, r1
 80176b2:	1cfb      	adds	r3, r7, #3
 80176b4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176b6:	210f      	movs	r1, #15
 80176b8:	187b      	adds	r3, r7, r1
 80176ba:	2200      	movs	r2, #0
 80176bc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176be:	260e      	movs	r6, #14
 80176c0:	19bb      	adds	r3, r7, r6
 80176c2:	2200      	movs	r2, #0
 80176c4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80176c6:	687a      	ldr	r2, [r7, #4]
 80176c8:	23b0      	movs	r3, #176	@ 0xb0
 80176ca:	009b      	lsls	r3, r3, #2
 80176cc:	58d2      	ldr	r2, [r2, r3]
 80176ce:	000d      	movs	r5, r1
 80176d0:	187c      	adds	r4, r7, r1
 80176d2:	1cfb      	adds	r3, r7, #3
 80176d4:	781b      	ldrb	r3, [r3, #0]
 80176d6:	0019      	movs	r1, r3
 80176d8:	0010      	movs	r0, r2
 80176da:	f7f7 f93a 	bl	800e952 <HAL_PCD_EP_ClrStall>
 80176de:	0003      	movs	r3, r0
 80176e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176e2:	19bc      	adds	r4, r7, r6
 80176e4:	197b      	adds	r3, r7, r5
 80176e6:	781b      	ldrb	r3, [r3, #0]
 80176e8:	0018      	movs	r0, r3
 80176ea:	f000 f904 	bl	80178f6 <USBD_Get_USB_Status>
 80176ee:	0003      	movs	r3, r0
 80176f0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80176f2:	19bb      	adds	r3, r7, r6
 80176f4:	781b      	ldrb	r3, [r3, #0]
}
 80176f6:	0018      	movs	r0, r3
 80176f8:	46bd      	mov	sp, r7
 80176fa:	b005      	add	sp, #20
 80176fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176fe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80176fe:	b580      	push	{r7, lr}
 8017700:	b084      	sub	sp, #16
 8017702:	af00      	add	r7, sp, #0
 8017704:	6078      	str	r0, [r7, #4]
 8017706:	000a      	movs	r2, r1
 8017708:	1cfb      	adds	r3, r7, #3
 801770a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801770c:	687a      	ldr	r2, [r7, #4]
 801770e:	23b0      	movs	r3, #176	@ 0xb0
 8017710:	009b      	lsls	r3, r3, #2
 8017712:	58d3      	ldr	r3, [r2, r3]
 8017714:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017716:	1cfb      	adds	r3, r7, #3
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	b25b      	sxtb	r3, r3
 801771c:	2b00      	cmp	r3, #0
 801771e:	da0d      	bge.n	801773c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017720:	1cfb      	adds	r3, r7, #3
 8017722:	781b      	ldrb	r3, [r3, #0]
 8017724:	227f      	movs	r2, #127	@ 0x7f
 8017726:	4013      	ands	r3, r2
 8017728:	68f9      	ldr	r1, [r7, #12]
 801772a:	1c5a      	adds	r2, r3, #1
 801772c:	0013      	movs	r3, r2
 801772e:	009b      	lsls	r3, r3, #2
 8017730:	189b      	adds	r3, r3, r2
 8017732:	00db      	lsls	r3, r3, #3
 8017734:	18cb      	adds	r3, r1, r3
 8017736:	3302      	adds	r3, #2
 8017738:	781b      	ldrb	r3, [r3, #0]
 801773a:	e00d      	b.n	8017758 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801773c:	1cfb      	adds	r3, r7, #3
 801773e:	781b      	ldrb	r3, [r3, #0]
 8017740:	227f      	movs	r2, #127	@ 0x7f
 8017742:	401a      	ands	r2, r3
 8017744:	68f8      	ldr	r0, [r7, #12]
 8017746:	23b5      	movs	r3, #181	@ 0xb5
 8017748:	0059      	lsls	r1, r3, #1
 801774a:	0013      	movs	r3, r2
 801774c:	009b      	lsls	r3, r3, #2
 801774e:	189b      	adds	r3, r3, r2
 8017750:	00db      	lsls	r3, r3, #3
 8017752:	18c3      	adds	r3, r0, r3
 8017754:	185b      	adds	r3, r3, r1
 8017756:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017758:	0018      	movs	r0, r3
 801775a:	46bd      	mov	sp, r7
 801775c:	b004      	add	sp, #16
 801775e:	bd80      	pop	{r7, pc}

08017760 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017762:	b085      	sub	sp, #20
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	000a      	movs	r2, r1
 801776a:	1cfb      	adds	r3, r7, #3
 801776c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801776e:	210f      	movs	r1, #15
 8017770:	187b      	adds	r3, r7, r1
 8017772:	2200      	movs	r2, #0
 8017774:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017776:	260e      	movs	r6, #14
 8017778:	19bb      	adds	r3, r7, r6
 801777a:	2200      	movs	r2, #0
 801777c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801777e:	687a      	ldr	r2, [r7, #4]
 8017780:	23b0      	movs	r3, #176	@ 0xb0
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	58d2      	ldr	r2, [r2, r3]
 8017786:	000d      	movs	r5, r1
 8017788:	187c      	adds	r4, r7, r1
 801778a:	1cfb      	adds	r3, r7, #3
 801778c:	781b      	ldrb	r3, [r3, #0]
 801778e:	0019      	movs	r1, r3
 8017790:	0010      	movs	r0, r2
 8017792:	f7f6 ff0b 	bl	800e5ac <HAL_PCD_SetAddress>
 8017796:	0003      	movs	r3, r0
 8017798:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801779a:	19bc      	adds	r4, r7, r6
 801779c:	197b      	adds	r3, r7, r5
 801779e:	781b      	ldrb	r3, [r3, #0]
 80177a0:	0018      	movs	r0, r3
 80177a2:	f000 f8a8 	bl	80178f6 <USBD_Get_USB_Status>
 80177a6:	0003      	movs	r3, r0
 80177a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80177aa:	19bb      	adds	r3, r7, r6
 80177ac:	781b      	ldrb	r3, [r3, #0]
}
 80177ae:	0018      	movs	r0, r3
 80177b0:	46bd      	mov	sp, r7
 80177b2:	b005      	add	sp, #20
 80177b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80177b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177b8:	b087      	sub	sp, #28
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	60f8      	str	r0, [r7, #12]
 80177be:	0008      	movs	r0, r1
 80177c0:	607a      	str	r2, [r7, #4]
 80177c2:	0019      	movs	r1, r3
 80177c4:	230b      	movs	r3, #11
 80177c6:	18fb      	adds	r3, r7, r3
 80177c8:	1c02      	adds	r2, r0, #0
 80177ca:	701a      	strb	r2, [r3, #0]
 80177cc:	2408      	movs	r4, #8
 80177ce:	193b      	adds	r3, r7, r4
 80177d0:	1c0a      	adds	r2, r1, #0
 80177d2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177d4:	2117      	movs	r1, #23
 80177d6:	187b      	adds	r3, r7, r1
 80177d8:	2200      	movs	r2, #0
 80177da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177dc:	2516      	movs	r5, #22
 80177de:	197b      	adds	r3, r7, r5
 80177e0:	2200      	movs	r2, #0
 80177e2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80177e4:	68fa      	ldr	r2, [r7, #12]
 80177e6:	23b0      	movs	r3, #176	@ 0xb0
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	58d0      	ldr	r0, [r2, r3]
 80177ec:	193b      	adds	r3, r7, r4
 80177ee:	881d      	ldrh	r5, [r3, #0]
 80177f0:	000e      	movs	r6, r1
 80177f2:	187c      	adds	r4, r7, r1
 80177f4:	687a      	ldr	r2, [r7, #4]
 80177f6:	230b      	movs	r3, #11
 80177f8:	18fb      	adds	r3, r7, r3
 80177fa:	7819      	ldrb	r1, [r3, #0]
 80177fc:	002b      	movs	r3, r5
 80177fe:	f7f7 f810 	bl	800e822 <HAL_PCD_EP_Transmit>
 8017802:	0003      	movs	r3, r0
 8017804:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017806:	2516      	movs	r5, #22
 8017808:	197c      	adds	r4, r7, r5
 801780a:	19bb      	adds	r3, r7, r6
 801780c:	781b      	ldrb	r3, [r3, #0]
 801780e:	0018      	movs	r0, r3
 8017810:	f000 f871 	bl	80178f6 <USBD_Get_USB_Status>
 8017814:	0003      	movs	r3, r0
 8017816:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017818:	197b      	adds	r3, r7, r5
 801781a:	781b      	ldrb	r3, [r3, #0]
}
 801781c:	0018      	movs	r0, r3
 801781e:	46bd      	mov	sp, r7
 8017820:	b007      	add	sp, #28
 8017822:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017824 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017826:	b087      	sub	sp, #28
 8017828:	af00      	add	r7, sp, #0
 801782a:	60f8      	str	r0, [r7, #12]
 801782c:	0008      	movs	r0, r1
 801782e:	607a      	str	r2, [r7, #4]
 8017830:	0019      	movs	r1, r3
 8017832:	230b      	movs	r3, #11
 8017834:	18fb      	adds	r3, r7, r3
 8017836:	1c02      	adds	r2, r0, #0
 8017838:	701a      	strb	r2, [r3, #0]
 801783a:	2408      	movs	r4, #8
 801783c:	193b      	adds	r3, r7, r4
 801783e:	1c0a      	adds	r2, r1, #0
 8017840:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017842:	2117      	movs	r1, #23
 8017844:	187b      	adds	r3, r7, r1
 8017846:	2200      	movs	r2, #0
 8017848:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801784a:	2516      	movs	r5, #22
 801784c:	197b      	adds	r3, r7, r5
 801784e:	2200      	movs	r2, #0
 8017850:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017852:	68fa      	ldr	r2, [r7, #12]
 8017854:	23b0      	movs	r3, #176	@ 0xb0
 8017856:	009b      	lsls	r3, r3, #2
 8017858:	58d0      	ldr	r0, [r2, r3]
 801785a:	193b      	adds	r3, r7, r4
 801785c:	881d      	ldrh	r5, [r3, #0]
 801785e:	000e      	movs	r6, r1
 8017860:	187c      	adds	r4, r7, r1
 8017862:	687a      	ldr	r2, [r7, #4]
 8017864:	230b      	movs	r3, #11
 8017866:	18fb      	adds	r3, r7, r3
 8017868:	7819      	ldrb	r1, [r3, #0]
 801786a:	002b      	movs	r3, r5
 801786c:	f7f6 ff89 	bl	800e782 <HAL_PCD_EP_Receive>
 8017870:	0003      	movs	r3, r0
 8017872:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017874:	2516      	movs	r5, #22
 8017876:	197c      	adds	r4, r7, r5
 8017878:	19bb      	adds	r3, r7, r6
 801787a:	781b      	ldrb	r3, [r3, #0]
 801787c:	0018      	movs	r0, r3
 801787e:	f000 f83a 	bl	80178f6 <USBD_Get_USB_Status>
 8017882:	0003      	movs	r3, r0
 8017884:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017886:	197b      	adds	r3, r7, r5
 8017888:	781b      	ldrb	r3, [r3, #0]
}
 801788a:	0018      	movs	r0, r3
 801788c:	46bd      	mov	sp, r7
 801788e:	b007      	add	sp, #28
 8017890:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017892 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017892:	b580      	push	{r7, lr}
 8017894:	b082      	sub	sp, #8
 8017896:	af00      	add	r7, sp, #0
 8017898:	6078      	str	r0, [r7, #4]
 801789a:	000a      	movs	r2, r1
 801789c:	1cfb      	adds	r3, r7, #3
 801789e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80178a0:	687a      	ldr	r2, [r7, #4]
 80178a2:	23b0      	movs	r3, #176	@ 0xb0
 80178a4:	009b      	lsls	r3, r3, #2
 80178a6:	58d2      	ldr	r2, [r2, r3]
 80178a8:	1cfb      	adds	r3, r7, #3
 80178aa:	781b      	ldrb	r3, [r3, #0]
 80178ac:	0019      	movs	r1, r3
 80178ae:	0010      	movs	r0, r2
 80178b0:	f7f6 ff9e 	bl	800e7f0 <HAL_PCD_EP_GetRxCount>
 80178b4:	0003      	movs	r3, r0
}
 80178b6:	0018      	movs	r0, r3
 80178b8:	46bd      	mov	sp, r7
 80178ba:	b002      	add	sp, #8
 80178bc:	bd80      	pop	{r7, pc}
	...

080178c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b082      	sub	sp, #8
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80178c8:	4b02      	ldr	r3, [pc, #8]	@ (80178d4 <USBD_static_malloc+0x14>)
}
 80178ca:	0018      	movs	r0, r3
 80178cc:	46bd      	mov	sp, r7
 80178ce:	b002      	add	sp, #8
 80178d0:	bd80      	pop	{r7, pc}
 80178d2:	46c0      	nop			@ (mov r8, r8)
 80178d4:	20003db4 	.word	0x20003db4

080178d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b082      	sub	sp, #8
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]

}
 80178e0:	46c0      	nop			@ (mov r8, r8)
 80178e2:	46bd      	mov	sp, r7
 80178e4:	b002      	add	sp, #8
 80178e6:	bd80      	pop	{r7, pc}

080178e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80178ec:	f7ee fe2a 	bl	8006544 <SystemClock_Config>
}
 80178f0:	46c0      	nop			@ (mov r8, r8)
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}

080178f6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80178f6:	b580      	push	{r7, lr}
 80178f8:	b084      	sub	sp, #16
 80178fa:	af00      	add	r7, sp, #0
 80178fc:	0002      	movs	r2, r0
 80178fe:	1dfb      	adds	r3, r7, #7
 8017900:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017902:	230f      	movs	r3, #15
 8017904:	18fb      	adds	r3, r7, r3
 8017906:	2200      	movs	r2, #0
 8017908:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801790a:	1dfb      	adds	r3, r7, #7
 801790c:	781b      	ldrb	r3, [r3, #0]
 801790e:	2b03      	cmp	r3, #3
 8017910:	d017      	beq.n	8017942 <USBD_Get_USB_Status+0x4c>
 8017912:	dc1b      	bgt.n	801794c <USBD_Get_USB_Status+0x56>
 8017914:	2b02      	cmp	r3, #2
 8017916:	d00f      	beq.n	8017938 <USBD_Get_USB_Status+0x42>
 8017918:	dc18      	bgt.n	801794c <USBD_Get_USB_Status+0x56>
 801791a:	2b00      	cmp	r3, #0
 801791c:	d002      	beq.n	8017924 <USBD_Get_USB_Status+0x2e>
 801791e:	2b01      	cmp	r3, #1
 8017920:	d005      	beq.n	801792e <USBD_Get_USB_Status+0x38>
 8017922:	e013      	b.n	801794c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017924:	230f      	movs	r3, #15
 8017926:	18fb      	adds	r3, r7, r3
 8017928:	2200      	movs	r2, #0
 801792a:	701a      	strb	r2, [r3, #0]
    break;
 801792c:	e013      	b.n	8017956 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801792e:	230f      	movs	r3, #15
 8017930:	18fb      	adds	r3, r7, r3
 8017932:	2202      	movs	r2, #2
 8017934:	701a      	strb	r2, [r3, #0]
    break;
 8017936:	e00e      	b.n	8017956 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017938:	230f      	movs	r3, #15
 801793a:	18fb      	adds	r3, r7, r3
 801793c:	2201      	movs	r2, #1
 801793e:	701a      	strb	r2, [r3, #0]
    break;
 8017940:	e009      	b.n	8017956 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017942:	230f      	movs	r3, #15
 8017944:	18fb      	adds	r3, r7, r3
 8017946:	2202      	movs	r2, #2
 8017948:	701a      	strb	r2, [r3, #0]
    break;
 801794a:	e004      	b.n	8017956 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801794c:	230f      	movs	r3, #15
 801794e:	18fb      	adds	r3, r7, r3
 8017950:	2202      	movs	r2, #2
 8017952:	701a      	strb	r2, [r3, #0]
    break;
 8017954:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8017956:	230f      	movs	r3, #15
 8017958:	18fb      	adds	r3, r7, r3
 801795a:	781b      	ldrb	r3, [r3, #0]
}
 801795c:	0018      	movs	r0, r3
 801795e:	46bd      	mov	sp, r7
 8017960:	b004      	add	sp, #16
 8017962:	bd80      	pop	{r7, pc}

08017964 <__cvt>:
 8017964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017966:	001f      	movs	r7, r3
 8017968:	2300      	movs	r3, #0
 801796a:	0016      	movs	r6, r2
 801796c:	b08b      	sub	sp, #44	@ 0x2c
 801796e:	429f      	cmp	r7, r3
 8017970:	da04      	bge.n	801797c <__cvt+0x18>
 8017972:	2180      	movs	r1, #128	@ 0x80
 8017974:	0609      	lsls	r1, r1, #24
 8017976:	187b      	adds	r3, r7, r1
 8017978:	001f      	movs	r7, r3
 801797a:	232d      	movs	r3, #45	@ 0x2d
 801797c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801797e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8017980:	7013      	strb	r3, [r2, #0]
 8017982:	2320      	movs	r3, #32
 8017984:	2203      	movs	r2, #3
 8017986:	439d      	bics	r5, r3
 8017988:	2d46      	cmp	r5, #70	@ 0x46
 801798a:	d007      	beq.n	801799c <__cvt+0x38>
 801798c:	002b      	movs	r3, r5
 801798e:	3b45      	subs	r3, #69	@ 0x45
 8017990:	4259      	negs	r1, r3
 8017992:	414b      	adcs	r3, r1
 8017994:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017996:	3a01      	subs	r2, #1
 8017998:	18cb      	adds	r3, r1, r3
 801799a:	9310      	str	r3, [sp, #64]	@ 0x40
 801799c:	ab09      	add	r3, sp, #36	@ 0x24
 801799e:	9304      	str	r3, [sp, #16]
 80179a0:	ab08      	add	r3, sp, #32
 80179a2:	9303      	str	r3, [sp, #12]
 80179a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80179a6:	9200      	str	r2, [sp, #0]
 80179a8:	9302      	str	r3, [sp, #8]
 80179aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80179ac:	0032      	movs	r2, r6
 80179ae:	9301      	str	r3, [sp, #4]
 80179b0:	003b      	movs	r3, r7
 80179b2:	f000 ff13 	bl	80187dc <_dtoa_r>
 80179b6:	0004      	movs	r4, r0
 80179b8:	2d47      	cmp	r5, #71	@ 0x47
 80179ba:	d11b      	bne.n	80179f4 <__cvt+0x90>
 80179bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80179be:	07db      	lsls	r3, r3, #31
 80179c0:	d511      	bpl.n	80179e6 <__cvt+0x82>
 80179c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80179c4:	18c3      	adds	r3, r0, r3
 80179c6:	9307      	str	r3, [sp, #28]
 80179c8:	2200      	movs	r2, #0
 80179ca:	2300      	movs	r3, #0
 80179cc:	0030      	movs	r0, r6
 80179ce:	0039      	movs	r1, r7
 80179d0:	f7e8 fd3c 	bl	800044c <__aeabi_dcmpeq>
 80179d4:	2800      	cmp	r0, #0
 80179d6:	d001      	beq.n	80179dc <__cvt+0x78>
 80179d8:	9b07      	ldr	r3, [sp, #28]
 80179da:	9309      	str	r3, [sp, #36]	@ 0x24
 80179dc:	2230      	movs	r2, #48	@ 0x30
 80179de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179e0:	9907      	ldr	r1, [sp, #28]
 80179e2:	428b      	cmp	r3, r1
 80179e4:	d320      	bcc.n	8017a28 <__cvt+0xc4>
 80179e6:	0020      	movs	r0, r4
 80179e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80179ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80179ec:	1b1b      	subs	r3, r3, r4
 80179ee:	6013      	str	r3, [r2, #0]
 80179f0:	b00b      	add	sp, #44	@ 0x2c
 80179f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80179f6:	18c3      	adds	r3, r0, r3
 80179f8:	9307      	str	r3, [sp, #28]
 80179fa:	2d46      	cmp	r5, #70	@ 0x46
 80179fc:	d1e4      	bne.n	80179c8 <__cvt+0x64>
 80179fe:	7803      	ldrb	r3, [r0, #0]
 8017a00:	2b30      	cmp	r3, #48	@ 0x30
 8017a02:	d10c      	bne.n	8017a1e <__cvt+0xba>
 8017a04:	2200      	movs	r2, #0
 8017a06:	2300      	movs	r3, #0
 8017a08:	0030      	movs	r0, r6
 8017a0a:	0039      	movs	r1, r7
 8017a0c:	f7e8 fd1e 	bl	800044c <__aeabi_dcmpeq>
 8017a10:	2800      	cmp	r0, #0
 8017a12:	d104      	bne.n	8017a1e <__cvt+0xba>
 8017a14:	2301      	movs	r3, #1
 8017a16:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017a18:	1a9b      	subs	r3, r3, r2
 8017a1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017a1c:	6013      	str	r3, [r2, #0]
 8017a1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017a20:	9a07      	ldr	r2, [sp, #28]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	18d3      	adds	r3, r2, r3
 8017a26:	e7ce      	b.n	80179c6 <__cvt+0x62>
 8017a28:	1c59      	adds	r1, r3, #1
 8017a2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8017a2c:	701a      	strb	r2, [r3, #0]
 8017a2e:	e7d6      	b.n	80179de <__cvt+0x7a>

08017a30 <__exponent>:
 8017a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a32:	232b      	movs	r3, #43	@ 0x2b
 8017a34:	0005      	movs	r5, r0
 8017a36:	000c      	movs	r4, r1
 8017a38:	b085      	sub	sp, #20
 8017a3a:	7002      	strb	r2, [r0, #0]
 8017a3c:	2900      	cmp	r1, #0
 8017a3e:	da01      	bge.n	8017a44 <__exponent+0x14>
 8017a40:	424c      	negs	r4, r1
 8017a42:	3302      	adds	r3, #2
 8017a44:	706b      	strb	r3, [r5, #1]
 8017a46:	2c09      	cmp	r4, #9
 8017a48:	dd2c      	ble.n	8017aa4 <__exponent+0x74>
 8017a4a:	ab02      	add	r3, sp, #8
 8017a4c:	1dde      	adds	r6, r3, #7
 8017a4e:	0020      	movs	r0, r4
 8017a50:	210a      	movs	r1, #10
 8017a52:	f7e8 fce5 	bl	8000420 <__aeabi_idivmod>
 8017a56:	0037      	movs	r7, r6
 8017a58:	3130      	adds	r1, #48	@ 0x30
 8017a5a:	3e01      	subs	r6, #1
 8017a5c:	0020      	movs	r0, r4
 8017a5e:	7031      	strb	r1, [r6, #0]
 8017a60:	210a      	movs	r1, #10
 8017a62:	9401      	str	r4, [sp, #4]
 8017a64:	f7e8 fbf6 	bl	8000254 <__divsi3>
 8017a68:	9b01      	ldr	r3, [sp, #4]
 8017a6a:	0004      	movs	r4, r0
 8017a6c:	2b63      	cmp	r3, #99	@ 0x63
 8017a6e:	dcee      	bgt.n	8017a4e <__exponent+0x1e>
 8017a70:	1eba      	subs	r2, r7, #2
 8017a72:	1ca8      	adds	r0, r5, #2
 8017a74:	0001      	movs	r1, r0
 8017a76:	0013      	movs	r3, r2
 8017a78:	3430      	adds	r4, #48	@ 0x30
 8017a7a:	7014      	strb	r4, [r2, #0]
 8017a7c:	ac02      	add	r4, sp, #8
 8017a7e:	3407      	adds	r4, #7
 8017a80:	429c      	cmp	r4, r3
 8017a82:	d80a      	bhi.n	8017a9a <__exponent+0x6a>
 8017a84:	2300      	movs	r3, #0
 8017a86:	42a2      	cmp	r2, r4
 8017a88:	d803      	bhi.n	8017a92 <__exponent+0x62>
 8017a8a:	3309      	adds	r3, #9
 8017a8c:	aa02      	add	r2, sp, #8
 8017a8e:	189b      	adds	r3, r3, r2
 8017a90:	1bdb      	subs	r3, r3, r7
 8017a92:	18c0      	adds	r0, r0, r3
 8017a94:	1b40      	subs	r0, r0, r5
 8017a96:	b005      	add	sp, #20
 8017a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a9a:	781c      	ldrb	r4, [r3, #0]
 8017a9c:	3301      	adds	r3, #1
 8017a9e:	700c      	strb	r4, [r1, #0]
 8017aa0:	3101      	adds	r1, #1
 8017aa2:	e7eb      	b.n	8017a7c <__exponent+0x4c>
 8017aa4:	2330      	movs	r3, #48	@ 0x30
 8017aa6:	18e4      	adds	r4, r4, r3
 8017aa8:	70ab      	strb	r3, [r5, #2]
 8017aaa:	1d28      	adds	r0, r5, #4
 8017aac:	70ec      	strb	r4, [r5, #3]
 8017aae:	e7f1      	b.n	8017a94 <__exponent+0x64>

08017ab0 <_printf_float>:
 8017ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ab2:	b097      	sub	sp, #92	@ 0x5c
 8017ab4:	000d      	movs	r5, r1
 8017ab6:	920a      	str	r2, [sp, #40]	@ 0x28
 8017ab8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017aba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017abc:	9009      	str	r0, [sp, #36]	@ 0x24
 8017abe:	f000 fd6b 	bl	8018598 <_localeconv_r>
 8017ac2:	6803      	ldr	r3, [r0, #0]
 8017ac4:	0018      	movs	r0, r3
 8017ac6:	930d      	str	r3, [sp, #52]	@ 0x34
 8017ac8:	f7e8 fb1e 	bl	8000108 <strlen>
 8017acc:	2300      	movs	r3, #0
 8017ace:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017ad0:	9314      	str	r3, [sp, #80]	@ 0x50
 8017ad2:	7e2b      	ldrb	r3, [r5, #24]
 8017ad4:	2207      	movs	r2, #7
 8017ad6:	930c      	str	r3, [sp, #48]	@ 0x30
 8017ad8:	682b      	ldr	r3, [r5, #0]
 8017ada:	930e      	str	r3, [sp, #56]	@ 0x38
 8017adc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017ade:	6823      	ldr	r3, [r4, #0]
 8017ae0:	05c9      	lsls	r1, r1, #23
 8017ae2:	d545      	bpl.n	8017b70 <_printf_float+0xc0>
 8017ae4:	189b      	adds	r3, r3, r2
 8017ae6:	4393      	bics	r3, r2
 8017ae8:	001a      	movs	r2, r3
 8017aea:	3208      	adds	r2, #8
 8017aec:	6022      	str	r2, [r4, #0]
 8017aee:	2201      	movs	r2, #1
 8017af0:	681e      	ldr	r6, [r3, #0]
 8017af2:	685f      	ldr	r7, [r3, #4]
 8017af4:	007b      	lsls	r3, r7, #1
 8017af6:	085b      	lsrs	r3, r3, #1
 8017af8:	9311      	str	r3, [sp, #68]	@ 0x44
 8017afa:	9610      	str	r6, [sp, #64]	@ 0x40
 8017afc:	64ae      	str	r6, [r5, #72]	@ 0x48
 8017afe:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8017b00:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017b02:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017b04:	4ba7      	ldr	r3, [pc, #668]	@ (8017da4 <_printf_float+0x2f4>)
 8017b06:	4252      	negs	r2, r2
 8017b08:	f7eb fb7a 	bl	8003200 <__aeabi_dcmpun>
 8017b0c:	2800      	cmp	r0, #0
 8017b0e:	d131      	bne.n	8017b74 <_printf_float+0xc4>
 8017b10:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017b12:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017b14:	2201      	movs	r2, #1
 8017b16:	4ba3      	ldr	r3, [pc, #652]	@ (8017da4 <_printf_float+0x2f4>)
 8017b18:	4252      	negs	r2, r2
 8017b1a:	f7e8 fca7 	bl	800046c <__aeabi_dcmple>
 8017b1e:	2800      	cmp	r0, #0
 8017b20:	d128      	bne.n	8017b74 <_printf_float+0xc4>
 8017b22:	2200      	movs	r2, #0
 8017b24:	2300      	movs	r3, #0
 8017b26:	0030      	movs	r0, r6
 8017b28:	0039      	movs	r1, r7
 8017b2a:	f7e8 fc95 	bl	8000458 <__aeabi_dcmplt>
 8017b2e:	2800      	cmp	r0, #0
 8017b30:	d003      	beq.n	8017b3a <_printf_float+0x8a>
 8017b32:	002b      	movs	r3, r5
 8017b34:	222d      	movs	r2, #45	@ 0x2d
 8017b36:	3343      	adds	r3, #67	@ 0x43
 8017b38:	701a      	strb	r2, [r3, #0]
 8017b3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b3c:	4f9a      	ldr	r7, [pc, #616]	@ (8017da8 <_printf_float+0x2f8>)
 8017b3e:	2b47      	cmp	r3, #71	@ 0x47
 8017b40:	d900      	bls.n	8017b44 <_printf_float+0x94>
 8017b42:	4f9a      	ldr	r7, [pc, #616]	@ (8017dac <_printf_float+0x2fc>)
 8017b44:	2303      	movs	r3, #3
 8017b46:	2400      	movs	r4, #0
 8017b48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b4a:	612b      	str	r3, [r5, #16]
 8017b4c:	3301      	adds	r3, #1
 8017b4e:	439a      	bics	r2, r3
 8017b50:	602a      	str	r2, [r5, #0]
 8017b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017b54:	0029      	movs	r1, r5
 8017b56:	9300      	str	r3, [sp, #0]
 8017b58:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017b5c:	aa15      	add	r2, sp, #84	@ 0x54
 8017b5e:	f000 f9e5 	bl	8017f2c <_printf_common>
 8017b62:	3001      	adds	r0, #1
 8017b64:	d000      	beq.n	8017b68 <_printf_float+0xb8>
 8017b66:	e09f      	b.n	8017ca8 <_printf_float+0x1f8>
 8017b68:	2001      	movs	r0, #1
 8017b6a:	4240      	negs	r0, r0
 8017b6c:	b017      	add	sp, #92	@ 0x5c
 8017b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b70:	3307      	adds	r3, #7
 8017b72:	e7b8      	b.n	8017ae6 <_printf_float+0x36>
 8017b74:	0032      	movs	r2, r6
 8017b76:	003b      	movs	r3, r7
 8017b78:	0030      	movs	r0, r6
 8017b7a:	0039      	movs	r1, r7
 8017b7c:	f7eb fb40 	bl	8003200 <__aeabi_dcmpun>
 8017b80:	2800      	cmp	r0, #0
 8017b82:	d00b      	beq.n	8017b9c <_printf_float+0xec>
 8017b84:	2f00      	cmp	r7, #0
 8017b86:	da03      	bge.n	8017b90 <_printf_float+0xe0>
 8017b88:	002b      	movs	r3, r5
 8017b8a:	222d      	movs	r2, #45	@ 0x2d
 8017b8c:	3343      	adds	r3, #67	@ 0x43
 8017b8e:	701a      	strb	r2, [r3, #0]
 8017b90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b92:	4f87      	ldr	r7, [pc, #540]	@ (8017db0 <_printf_float+0x300>)
 8017b94:	2b47      	cmp	r3, #71	@ 0x47
 8017b96:	d9d5      	bls.n	8017b44 <_printf_float+0x94>
 8017b98:	4f86      	ldr	r7, [pc, #536]	@ (8017db4 <_printf_float+0x304>)
 8017b9a:	e7d3      	b.n	8017b44 <_printf_float+0x94>
 8017b9c:	2220      	movs	r2, #32
 8017b9e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017ba0:	686b      	ldr	r3, [r5, #4]
 8017ba2:	4394      	bics	r4, r2
 8017ba4:	1c5a      	adds	r2, r3, #1
 8017ba6:	d146      	bne.n	8017c36 <_printf_float+0x186>
 8017ba8:	3307      	adds	r3, #7
 8017baa:	606b      	str	r3, [r5, #4]
 8017bac:	2380      	movs	r3, #128	@ 0x80
 8017bae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017bb0:	00db      	lsls	r3, r3, #3
 8017bb2:	4313      	orrs	r3, r2
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	602b      	str	r3, [r5, #0]
 8017bb8:	9206      	str	r2, [sp, #24]
 8017bba:	aa14      	add	r2, sp, #80	@ 0x50
 8017bbc:	9205      	str	r2, [sp, #20]
 8017bbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017bc0:	a90a      	add	r1, sp, #40	@ 0x28
 8017bc2:	9204      	str	r2, [sp, #16]
 8017bc4:	aa13      	add	r2, sp, #76	@ 0x4c
 8017bc6:	9203      	str	r2, [sp, #12]
 8017bc8:	2223      	movs	r2, #35	@ 0x23
 8017bca:	1852      	adds	r2, r2, r1
 8017bcc:	9202      	str	r2, [sp, #8]
 8017bce:	9301      	str	r3, [sp, #4]
 8017bd0:	686b      	ldr	r3, [r5, #4]
 8017bd2:	0032      	movs	r2, r6
 8017bd4:	9300      	str	r3, [sp, #0]
 8017bd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017bd8:	003b      	movs	r3, r7
 8017bda:	f7ff fec3 	bl	8017964 <__cvt>
 8017bde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017be0:	0007      	movs	r7, r0
 8017be2:	2c47      	cmp	r4, #71	@ 0x47
 8017be4:	d12d      	bne.n	8017c42 <_printf_float+0x192>
 8017be6:	1cd3      	adds	r3, r2, #3
 8017be8:	db02      	blt.n	8017bf0 <_printf_float+0x140>
 8017bea:	686b      	ldr	r3, [r5, #4]
 8017bec:	429a      	cmp	r2, r3
 8017bee:	dd48      	ble.n	8017c82 <_printf_float+0x1d2>
 8017bf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017bf2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017bf4:	3b02      	subs	r3, #2
 8017bf6:	b2db      	uxtb	r3, r3
 8017bf8:	930c      	str	r3, [sp, #48]	@ 0x30
 8017bfa:	0028      	movs	r0, r5
 8017bfc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017bfe:	3901      	subs	r1, #1
 8017c00:	3050      	adds	r0, #80	@ 0x50
 8017c02:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017c04:	f7ff ff14 	bl	8017a30 <__exponent>
 8017c08:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017c0a:	0004      	movs	r4, r0
 8017c0c:	1813      	adds	r3, r2, r0
 8017c0e:	612b      	str	r3, [r5, #16]
 8017c10:	2a01      	cmp	r2, #1
 8017c12:	dc02      	bgt.n	8017c1a <_printf_float+0x16a>
 8017c14:	682a      	ldr	r2, [r5, #0]
 8017c16:	07d2      	lsls	r2, r2, #31
 8017c18:	d501      	bpl.n	8017c1e <_printf_float+0x16e>
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	612b      	str	r3, [r5, #16]
 8017c1e:	2323      	movs	r3, #35	@ 0x23
 8017c20:	aa0a      	add	r2, sp, #40	@ 0x28
 8017c22:	189b      	adds	r3, r3, r2
 8017c24:	781b      	ldrb	r3, [r3, #0]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d100      	bne.n	8017c2c <_printf_float+0x17c>
 8017c2a:	e792      	b.n	8017b52 <_printf_float+0xa2>
 8017c2c:	002b      	movs	r3, r5
 8017c2e:	222d      	movs	r2, #45	@ 0x2d
 8017c30:	3343      	adds	r3, #67	@ 0x43
 8017c32:	701a      	strb	r2, [r3, #0]
 8017c34:	e78d      	b.n	8017b52 <_printf_float+0xa2>
 8017c36:	2c47      	cmp	r4, #71	@ 0x47
 8017c38:	d1b8      	bne.n	8017bac <_printf_float+0xfc>
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d1b6      	bne.n	8017bac <_printf_float+0xfc>
 8017c3e:	3301      	adds	r3, #1
 8017c40:	e7b3      	b.n	8017baa <_printf_float+0xfa>
 8017c42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017c44:	0011      	movs	r1, r2
 8017c46:	2b65      	cmp	r3, #101	@ 0x65
 8017c48:	d9d7      	bls.n	8017bfa <_printf_float+0x14a>
 8017c4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017c4c:	2b66      	cmp	r3, #102	@ 0x66
 8017c4e:	d11a      	bne.n	8017c86 <_printf_float+0x1d6>
 8017c50:	686b      	ldr	r3, [r5, #4]
 8017c52:	2a00      	cmp	r2, #0
 8017c54:	dd09      	ble.n	8017c6a <_printf_float+0x1ba>
 8017c56:	612a      	str	r2, [r5, #16]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d102      	bne.n	8017c62 <_printf_float+0x1b2>
 8017c5c:	6829      	ldr	r1, [r5, #0]
 8017c5e:	07c9      	lsls	r1, r1, #31
 8017c60:	d50b      	bpl.n	8017c7a <_printf_float+0x1ca>
 8017c62:	3301      	adds	r3, #1
 8017c64:	189b      	adds	r3, r3, r2
 8017c66:	612b      	str	r3, [r5, #16]
 8017c68:	e007      	b.n	8017c7a <_printf_float+0x1ca>
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d103      	bne.n	8017c76 <_printf_float+0x1c6>
 8017c6e:	2201      	movs	r2, #1
 8017c70:	6829      	ldr	r1, [r5, #0]
 8017c72:	4211      	tst	r1, r2
 8017c74:	d000      	beq.n	8017c78 <_printf_float+0x1c8>
 8017c76:	1c9a      	adds	r2, r3, #2
 8017c78:	612a      	str	r2, [r5, #16]
 8017c7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017c7c:	2400      	movs	r4, #0
 8017c7e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8017c80:	e7cd      	b.n	8017c1e <_printf_float+0x16e>
 8017c82:	2367      	movs	r3, #103	@ 0x67
 8017c84:	930c      	str	r3, [sp, #48]	@ 0x30
 8017c86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017c88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017c8a:	4299      	cmp	r1, r3
 8017c8c:	db06      	blt.n	8017c9c <_printf_float+0x1ec>
 8017c8e:	682b      	ldr	r3, [r5, #0]
 8017c90:	6129      	str	r1, [r5, #16]
 8017c92:	07db      	lsls	r3, r3, #31
 8017c94:	d5f1      	bpl.n	8017c7a <_printf_float+0x1ca>
 8017c96:	3101      	adds	r1, #1
 8017c98:	6129      	str	r1, [r5, #16]
 8017c9a:	e7ee      	b.n	8017c7a <_printf_float+0x1ca>
 8017c9c:	2201      	movs	r2, #1
 8017c9e:	2900      	cmp	r1, #0
 8017ca0:	dce0      	bgt.n	8017c64 <_printf_float+0x1b4>
 8017ca2:	1892      	adds	r2, r2, r2
 8017ca4:	1a52      	subs	r2, r2, r1
 8017ca6:	e7dd      	b.n	8017c64 <_printf_float+0x1b4>
 8017ca8:	682a      	ldr	r2, [r5, #0]
 8017caa:	0553      	lsls	r3, r2, #21
 8017cac:	d408      	bmi.n	8017cc0 <_printf_float+0x210>
 8017cae:	692b      	ldr	r3, [r5, #16]
 8017cb0:	003a      	movs	r2, r7
 8017cb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017cb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017cb6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017cb8:	47a0      	blx	r4
 8017cba:	3001      	adds	r0, #1
 8017cbc:	d129      	bne.n	8017d12 <_printf_float+0x262>
 8017cbe:	e753      	b.n	8017b68 <_printf_float+0xb8>
 8017cc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017cc2:	2b65      	cmp	r3, #101	@ 0x65
 8017cc4:	d800      	bhi.n	8017cc8 <_printf_float+0x218>
 8017cc6:	e0da      	b.n	8017e7e <_printf_float+0x3ce>
 8017cc8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017cca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017ccc:	2200      	movs	r2, #0
 8017cce:	2300      	movs	r3, #0
 8017cd0:	f7e8 fbbc 	bl	800044c <__aeabi_dcmpeq>
 8017cd4:	2800      	cmp	r0, #0
 8017cd6:	d033      	beq.n	8017d40 <_printf_float+0x290>
 8017cd8:	2301      	movs	r3, #1
 8017cda:	4a37      	ldr	r2, [pc, #220]	@ (8017db8 <_printf_float+0x308>)
 8017cdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ce0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017ce2:	47a0      	blx	r4
 8017ce4:	3001      	adds	r0, #1
 8017ce6:	d100      	bne.n	8017cea <_printf_float+0x23a>
 8017ce8:	e73e      	b.n	8017b68 <_printf_float+0xb8>
 8017cea:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017cec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017cee:	42b3      	cmp	r3, r6
 8017cf0:	db02      	blt.n	8017cf8 <_printf_float+0x248>
 8017cf2:	682b      	ldr	r3, [r5, #0]
 8017cf4:	07db      	lsls	r3, r3, #31
 8017cf6:	d50c      	bpl.n	8017d12 <_printf_float+0x262>
 8017cf8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017cfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017cfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017cfe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d02:	47a0      	blx	r4
 8017d04:	2400      	movs	r4, #0
 8017d06:	3001      	adds	r0, #1
 8017d08:	d100      	bne.n	8017d0c <_printf_float+0x25c>
 8017d0a:	e72d      	b.n	8017b68 <_printf_float+0xb8>
 8017d0c:	1e73      	subs	r3, r6, #1
 8017d0e:	42a3      	cmp	r3, r4
 8017d10:	dc0a      	bgt.n	8017d28 <_printf_float+0x278>
 8017d12:	682b      	ldr	r3, [r5, #0]
 8017d14:	079b      	lsls	r3, r3, #30
 8017d16:	d500      	bpl.n	8017d1a <_printf_float+0x26a>
 8017d18:	e105      	b.n	8017f26 <_printf_float+0x476>
 8017d1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017d1c:	68e8      	ldr	r0, [r5, #12]
 8017d1e:	4298      	cmp	r0, r3
 8017d20:	db00      	blt.n	8017d24 <_printf_float+0x274>
 8017d22:	e723      	b.n	8017b6c <_printf_float+0xbc>
 8017d24:	0018      	movs	r0, r3
 8017d26:	e721      	b.n	8017b6c <_printf_float+0xbc>
 8017d28:	002a      	movs	r2, r5
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d30:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017d32:	321a      	adds	r2, #26
 8017d34:	47b8      	blx	r7
 8017d36:	3001      	adds	r0, #1
 8017d38:	d100      	bne.n	8017d3c <_printf_float+0x28c>
 8017d3a:	e715      	b.n	8017b68 <_printf_float+0xb8>
 8017d3c:	3401      	adds	r4, #1
 8017d3e:	e7e5      	b.n	8017d0c <_printf_float+0x25c>
 8017d40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	dc3a      	bgt.n	8017dbc <_printf_float+0x30c>
 8017d46:	2301      	movs	r3, #1
 8017d48:	4a1b      	ldr	r2, [pc, #108]	@ (8017db8 <_printf_float+0x308>)
 8017d4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d4e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017d50:	47a0      	blx	r4
 8017d52:	3001      	adds	r0, #1
 8017d54:	d100      	bne.n	8017d58 <_printf_float+0x2a8>
 8017d56:	e707      	b.n	8017b68 <_printf_float+0xb8>
 8017d58:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017d5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d5c:	4333      	orrs	r3, r6
 8017d5e:	d102      	bne.n	8017d66 <_printf_float+0x2b6>
 8017d60:	682b      	ldr	r3, [r5, #0]
 8017d62:	07db      	lsls	r3, r3, #31
 8017d64:	d5d5      	bpl.n	8017d12 <_printf_float+0x262>
 8017d66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017d6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d6e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017d70:	47a0      	blx	r4
 8017d72:	2300      	movs	r3, #0
 8017d74:	3001      	adds	r0, #1
 8017d76:	d100      	bne.n	8017d7a <_printf_float+0x2ca>
 8017d78:	e6f6      	b.n	8017b68 <_printf_float+0xb8>
 8017d7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8017d7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017d80:	425b      	negs	r3, r3
 8017d82:	4293      	cmp	r3, r2
 8017d84:	dc01      	bgt.n	8017d8a <_printf_float+0x2da>
 8017d86:	0033      	movs	r3, r6
 8017d88:	e792      	b.n	8017cb0 <_printf_float+0x200>
 8017d8a:	002a      	movs	r2, r5
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d92:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017d94:	321a      	adds	r2, #26
 8017d96:	47a0      	blx	r4
 8017d98:	3001      	adds	r0, #1
 8017d9a:	d100      	bne.n	8017d9e <_printf_float+0x2ee>
 8017d9c:	e6e4      	b.n	8017b68 <_printf_float+0xb8>
 8017d9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017da0:	3301      	adds	r3, #1
 8017da2:	e7ea      	b.n	8017d7a <_printf_float+0x2ca>
 8017da4:	7fefffff 	.word	0x7fefffff
 8017da8:	0801c250 	.word	0x0801c250
 8017dac:	0801c254 	.word	0x0801c254
 8017db0:	0801c258 	.word	0x0801c258
 8017db4:	0801c25c 	.word	0x0801c25c
 8017db8:	0801c260 	.word	0x0801c260
 8017dbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017dbe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017dc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8017dc2:	429e      	cmp	r6, r3
 8017dc4:	dd00      	ble.n	8017dc8 <_printf_float+0x318>
 8017dc6:	001e      	movs	r6, r3
 8017dc8:	2e00      	cmp	r6, #0
 8017dca:	dc31      	bgt.n	8017e30 <_printf_float+0x380>
 8017dcc:	43f3      	mvns	r3, r6
 8017dce:	2400      	movs	r4, #0
 8017dd0:	17db      	asrs	r3, r3, #31
 8017dd2:	4033      	ands	r3, r6
 8017dd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8017dd6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017dd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017dda:	1af3      	subs	r3, r6, r3
 8017ddc:	42a3      	cmp	r3, r4
 8017dde:	dc30      	bgt.n	8017e42 <_printf_float+0x392>
 8017de0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017de2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017de4:	429a      	cmp	r2, r3
 8017de6:	dc38      	bgt.n	8017e5a <_printf_float+0x3aa>
 8017de8:	682b      	ldr	r3, [r5, #0]
 8017dea:	07db      	lsls	r3, r3, #31
 8017dec:	d435      	bmi.n	8017e5a <_printf_float+0x3aa>
 8017dee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017df0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017df2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017df4:	1b9b      	subs	r3, r3, r6
 8017df6:	1b14      	subs	r4, r2, r4
 8017df8:	429c      	cmp	r4, r3
 8017dfa:	dd00      	ble.n	8017dfe <_printf_float+0x34e>
 8017dfc:	001c      	movs	r4, r3
 8017dfe:	2c00      	cmp	r4, #0
 8017e00:	dc34      	bgt.n	8017e6c <_printf_float+0x3bc>
 8017e02:	43e3      	mvns	r3, r4
 8017e04:	2600      	movs	r6, #0
 8017e06:	17db      	asrs	r3, r3, #31
 8017e08:	401c      	ands	r4, r3
 8017e0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017e0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017e0e:	1ad3      	subs	r3, r2, r3
 8017e10:	1b1b      	subs	r3, r3, r4
 8017e12:	42b3      	cmp	r3, r6
 8017e14:	dc00      	bgt.n	8017e18 <_printf_float+0x368>
 8017e16:	e77c      	b.n	8017d12 <_printf_float+0x262>
 8017e18:	002a      	movs	r2, r5
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e20:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017e22:	321a      	adds	r2, #26
 8017e24:	47b8      	blx	r7
 8017e26:	3001      	adds	r0, #1
 8017e28:	d100      	bne.n	8017e2c <_printf_float+0x37c>
 8017e2a:	e69d      	b.n	8017b68 <_printf_float+0xb8>
 8017e2c:	3601      	adds	r6, #1
 8017e2e:	e7ec      	b.n	8017e0a <_printf_float+0x35a>
 8017e30:	0033      	movs	r3, r6
 8017e32:	003a      	movs	r2, r7
 8017e34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e38:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017e3a:	47a0      	blx	r4
 8017e3c:	3001      	adds	r0, #1
 8017e3e:	d1c5      	bne.n	8017dcc <_printf_float+0x31c>
 8017e40:	e692      	b.n	8017b68 <_printf_float+0xb8>
 8017e42:	002a      	movs	r2, r5
 8017e44:	2301      	movs	r3, #1
 8017e46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e4a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017e4c:	321a      	adds	r2, #26
 8017e4e:	47b0      	blx	r6
 8017e50:	3001      	adds	r0, #1
 8017e52:	d100      	bne.n	8017e56 <_printf_float+0x3a6>
 8017e54:	e688      	b.n	8017b68 <_printf_float+0xb8>
 8017e56:	3401      	adds	r4, #1
 8017e58:	e7bd      	b.n	8017dd6 <_printf_float+0x326>
 8017e5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017e5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017e64:	47a0      	blx	r4
 8017e66:	3001      	adds	r0, #1
 8017e68:	d1c1      	bne.n	8017dee <_printf_float+0x33e>
 8017e6a:	e67d      	b.n	8017b68 <_printf_float+0xb8>
 8017e6c:	19ba      	adds	r2, r7, r6
 8017e6e:	0023      	movs	r3, r4
 8017e70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017e76:	47b0      	blx	r6
 8017e78:	3001      	adds	r0, #1
 8017e7a:	d1c2      	bne.n	8017e02 <_printf_float+0x352>
 8017e7c:	e674      	b.n	8017b68 <_printf_float+0xb8>
 8017e7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017e80:	930c      	str	r3, [sp, #48]	@ 0x30
 8017e82:	2b01      	cmp	r3, #1
 8017e84:	dc02      	bgt.n	8017e8c <_printf_float+0x3dc>
 8017e86:	2301      	movs	r3, #1
 8017e88:	421a      	tst	r2, r3
 8017e8a:	d039      	beq.n	8017f00 <_printf_float+0x450>
 8017e8c:	2301      	movs	r3, #1
 8017e8e:	003a      	movs	r2, r7
 8017e90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e94:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017e96:	47b0      	blx	r6
 8017e98:	3001      	adds	r0, #1
 8017e9a:	d100      	bne.n	8017e9e <_printf_float+0x3ee>
 8017e9c:	e664      	b.n	8017b68 <_printf_float+0xb8>
 8017e9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ea0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017ea2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ea4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ea6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017ea8:	47b0      	blx	r6
 8017eaa:	3001      	adds	r0, #1
 8017eac:	d100      	bne.n	8017eb0 <_printf_float+0x400>
 8017eae:	e65b      	b.n	8017b68 <_printf_float+0xb8>
 8017eb0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017eb2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017eb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	3b01      	subs	r3, #1
 8017eba:	930c      	str	r3, [sp, #48]	@ 0x30
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	f7e8 fac5 	bl	800044c <__aeabi_dcmpeq>
 8017ec2:	2800      	cmp	r0, #0
 8017ec4:	d11a      	bne.n	8017efc <_printf_float+0x44c>
 8017ec6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ec8:	1c7a      	adds	r2, r7, #1
 8017eca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ecc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ece:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017ed0:	47b0      	blx	r6
 8017ed2:	3001      	adds	r0, #1
 8017ed4:	d10e      	bne.n	8017ef4 <_printf_float+0x444>
 8017ed6:	e647      	b.n	8017b68 <_printf_float+0xb8>
 8017ed8:	002a      	movs	r2, r5
 8017eda:	2301      	movs	r3, #1
 8017edc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ee0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017ee2:	321a      	adds	r2, #26
 8017ee4:	47b8      	blx	r7
 8017ee6:	3001      	adds	r0, #1
 8017ee8:	d100      	bne.n	8017eec <_printf_float+0x43c>
 8017eea:	e63d      	b.n	8017b68 <_printf_float+0xb8>
 8017eec:	3601      	adds	r6, #1
 8017eee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ef0:	429e      	cmp	r6, r3
 8017ef2:	dbf1      	blt.n	8017ed8 <_printf_float+0x428>
 8017ef4:	002a      	movs	r2, r5
 8017ef6:	0023      	movs	r3, r4
 8017ef8:	3250      	adds	r2, #80	@ 0x50
 8017efa:	e6da      	b.n	8017cb2 <_printf_float+0x202>
 8017efc:	2600      	movs	r6, #0
 8017efe:	e7f6      	b.n	8017eee <_printf_float+0x43e>
 8017f00:	003a      	movs	r2, r7
 8017f02:	e7e2      	b.n	8017eca <_printf_float+0x41a>
 8017f04:	002a      	movs	r2, r5
 8017f06:	2301      	movs	r3, #1
 8017f08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017f0e:	3219      	adds	r2, #25
 8017f10:	47b0      	blx	r6
 8017f12:	3001      	adds	r0, #1
 8017f14:	d100      	bne.n	8017f18 <_printf_float+0x468>
 8017f16:	e627      	b.n	8017b68 <_printf_float+0xb8>
 8017f18:	3401      	adds	r4, #1
 8017f1a:	68eb      	ldr	r3, [r5, #12]
 8017f1c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017f1e:	1a9b      	subs	r3, r3, r2
 8017f20:	42a3      	cmp	r3, r4
 8017f22:	dcef      	bgt.n	8017f04 <_printf_float+0x454>
 8017f24:	e6f9      	b.n	8017d1a <_printf_float+0x26a>
 8017f26:	2400      	movs	r4, #0
 8017f28:	e7f7      	b.n	8017f1a <_printf_float+0x46a>
 8017f2a:	46c0      	nop			@ (mov r8, r8)

08017f2c <_printf_common>:
 8017f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f2e:	0016      	movs	r6, r2
 8017f30:	9301      	str	r3, [sp, #4]
 8017f32:	688a      	ldr	r2, [r1, #8]
 8017f34:	690b      	ldr	r3, [r1, #16]
 8017f36:	000c      	movs	r4, r1
 8017f38:	9000      	str	r0, [sp, #0]
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	da00      	bge.n	8017f40 <_printf_common+0x14>
 8017f3e:	0013      	movs	r3, r2
 8017f40:	0022      	movs	r2, r4
 8017f42:	6033      	str	r3, [r6, #0]
 8017f44:	3243      	adds	r2, #67	@ 0x43
 8017f46:	7812      	ldrb	r2, [r2, #0]
 8017f48:	2a00      	cmp	r2, #0
 8017f4a:	d001      	beq.n	8017f50 <_printf_common+0x24>
 8017f4c:	3301      	adds	r3, #1
 8017f4e:	6033      	str	r3, [r6, #0]
 8017f50:	6823      	ldr	r3, [r4, #0]
 8017f52:	069b      	lsls	r3, r3, #26
 8017f54:	d502      	bpl.n	8017f5c <_printf_common+0x30>
 8017f56:	6833      	ldr	r3, [r6, #0]
 8017f58:	3302      	adds	r3, #2
 8017f5a:	6033      	str	r3, [r6, #0]
 8017f5c:	6822      	ldr	r2, [r4, #0]
 8017f5e:	2306      	movs	r3, #6
 8017f60:	0015      	movs	r5, r2
 8017f62:	401d      	ands	r5, r3
 8017f64:	421a      	tst	r2, r3
 8017f66:	d027      	beq.n	8017fb8 <_printf_common+0x8c>
 8017f68:	0023      	movs	r3, r4
 8017f6a:	3343      	adds	r3, #67	@ 0x43
 8017f6c:	781b      	ldrb	r3, [r3, #0]
 8017f6e:	1e5a      	subs	r2, r3, #1
 8017f70:	4193      	sbcs	r3, r2
 8017f72:	6822      	ldr	r2, [r4, #0]
 8017f74:	0692      	lsls	r2, r2, #26
 8017f76:	d430      	bmi.n	8017fda <_printf_common+0xae>
 8017f78:	0022      	movs	r2, r4
 8017f7a:	9901      	ldr	r1, [sp, #4]
 8017f7c:	9800      	ldr	r0, [sp, #0]
 8017f7e:	9d08      	ldr	r5, [sp, #32]
 8017f80:	3243      	adds	r2, #67	@ 0x43
 8017f82:	47a8      	blx	r5
 8017f84:	3001      	adds	r0, #1
 8017f86:	d025      	beq.n	8017fd4 <_printf_common+0xa8>
 8017f88:	2206      	movs	r2, #6
 8017f8a:	6823      	ldr	r3, [r4, #0]
 8017f8c:	2500      	movs	r5, #0
 8017f8e:	4013      	ands	r3, r2
 8017f90:	2b04      	cmp	r3, #4
 8017f92:	d105      	bne.n	8017fa0 <_printf_common+0x74>
 8017f94:	6833      	ldr	r3, [r6, #0]
 8017f96:	68e5      	ldr	r5, [r4, #12]
 8017f98:	1aed      	subs	r5, r5, r3
 8017f9a:	43eb      	mvns	r3, r5
 8017f9c:	17db      	asrs	r3, r3, #31
 8017f9e:	401d      	ands	r5, r3
 8017fa0:	68a3      	ldr	r3, [r4, #8]
 8017fa2:	6922      	ldr	r2, [r4, #16]
 8017fa4:	4293      	cmp	r3, r2
 8017fa6:	dd01      	ble.n	8017fac <_printf_common+0x80>
 8017fa8:	1a9b      	subs	r3, r3, r2
 8017faa:	18ed      	adds	r5, r5, r3
 8017fac:	2600      	movs	r6, #0
 8017fae:	42b5      	cmp	r5, r6
 8017fb0:	d120      	bne.n	8017ff4 <_printf_common+0xc8>
 8017fb2:	2000      	movs	r0, #0
 8017fb4:	e010      	b.n	8017fd8 <_printf_common+0xac>
 8017fb6:	3501      	adds	r5, #1
 8017fb8:	68e3      	ldr	r3, [r4, #12]
 8017fba:	6832      	ldr	r2, [r6, #0]
 8017fbc:	1a9b      	subs	r3, r3, r2
 8017fbe:	42ab      	cmp	r3, r5
 8017fc0:	ddd2      	ble.n	8017f68 <_printf_common+0x3c>
 8017fc2:	0022      	movs	r2, r4
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	9901      	ldr	r1, [sp, #4]
 8017fc8:	9800      	ldr	r0, [sp, #0]
 8017fca:	9f08      	ldr	r7, [sp, #32]
 8017fcc:	3219      	adds	r2, #25
 8017fce:	47b8      	blx	r7
 8017fd0:	3001      	adds	r0, #1
 8017fd2:	d1f0      	bne.n	8017fb6 <_printf_common+0x8a>
 8017fd4:	2001      	movs	r0, #1
 8017fd6:	4240      	negs	r0, r0
 8017fd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017fda:	2030      	movs	r0, #48	@ 0x30
 8017fdc:	18e1      	adds	r1, r4, r3
 8017fde:	3143      	adds	r1, #67	@ 0x43
 8017fe0:	7008      	strb	r0, [r1, #0]
 8017fe2:	0021      	movs	r1, r4
 8017fe4:	1c5a      	adds	r2, r3, #1
 8017fe6:	3145      	adds	r1, #69	@ 0x45
 8017fe8:	7809      	ldrb	r1, [r1, #0]
 8017fea:	18a2      	adds	r2, r4, r2
 8017fec:	3243      	adds	r2, #67	@ 0x43
 8017fee:	3302      	adds	r3, #2
 8017ff0:	7011      	strb	r1, [r2, #0]
 8017ff2:	e7c1      	b.n	8017f78 <_printf_common+0x4c>
 8017ff4:	0022      	movs	r2, r4
 8017ff6:	2301      	movs	r3, #1
 8017ff8:	9901      	ldr	r1, [sp, #4]
 8017ffa:	9800      	ldr	r0, [sp, #0]
 8017ffc:	9f08      	ldr	r7, [sp, #32]
 8017ffe:	321a      	adds	r2, #26
 8018000:	47b8      	blx	r7
 8018002:	3001      	adds	r0, #1
 8018004:	d0e6      	beq.n	8017fd4 <_printf_common+0xa8>
 8018006:	3601      	adds	r6, #1
 8018008:	e7d1      	b.n	8017fae <_printf_common+0x82>
	...

0801800c <_printf_i>:
 801800c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801800e:	b08b      	sub	sp, #44	@ 0x2c
 8018010:	9206      	str	r2, [sp, #24]
 8018012:	000a      	movs	r2, r1
 8018014:	3243      	adds	r2, #67	@ 0x43
 8018016:	9307      	str	r3, [sp, #28]
 8018018:	9005      	str	r0, [sp, #20]
 801801a:	9203      	str	r2, [sp, #12]
 801801c:	7e0a      	ldrb	r2, [r1, #24]
 801801e:	000c      	movs	r4, r1
 8018020:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018022:	2a78      	cmp	r2, #120	@ 0x78
 8018024:	d809      	bhi.n	801803a <_printf_i+0x2e>
 8018026:	2a62      	cmp	r2, #98	@ 0x62
 8018028:	d80b      	bhi.n	8018042 <_printf_i+0x36>
 801802a:	2a00      	cmp	r2, #0
 801802c:	d100      	bne.n	8018030 <_printf_i+0x24>
 801802e:	e0bc      	b.n	80181aa <_printf_i+0x19e>
 8018030:	497b      	ldr	r1, [pc, #492]	@ (8018220 <_printf_i+0x214>)
 8018032:	9104      	str	r1, [sp, #16]
 8018034:	2a58      	cmp	r2, #88	@ 0x58
 8018036:	d100      	bne.n	801803a <_printf_i+0x2e>
 8018038:	e090      	b.n	801815c <_printf_i+0x150>
 801803a:	0025      	movs	r5, r4
 801803c:	3542      	adds	r5, #66	@ 0x42
 801803e:	702a      	strb	r2, [r5, #0]
 8018040:	e022      	b.n	8018088 <_printf_i+0x7c>
 8018042:	0010      	movs	r0, r2
 8018044:	3863      	subs	r0, #99	@ 0x63
 8018046:	2815      	cmp	r0, #21
 8018048:	d8f7      	bhi.n	801803a <_printf_i+0x2e>
 801804a:	f7e8 f86f 	bl	800012c <__gnu_thumb1_case_shi>
 801804e:	0016      	.short	0x0016
 8018050:	fff6001f 	.word	0xfff6001f
 8018054:	fff6fff6 	.word	0xfff6fff6
 8018058:	001ffff6 	.word	0x001ffff6
 801805c:	fff6fff6 	.word	0xfff6fff6
 8018060:	fff6fff6 	.word	0xfff6fff6
 8018064:	003600a1 	.word	0x003600a1
 8018068:	fff60080 	.word	0xfff60080
 801806c:	00b2fff6 	.word	0x00b2fff6
 8018070:	0036fff6 	.word	0x0036fff6
 8018074:	fff6fff6 	.word	0xfff6fff6
 8018078:	0084      	.short	0x0084
 801807a:	0025      	movs	r5, r4
 801807c:	681a      	ldr	r2, [r3, #0]
 801807e:	3542      	adds	r5, #66	@ 0x42
 8018080:	1d11      	adds	r1, r2, #4
 8018082:	6019      	str	r1, [r3, #0]
 8018084:	6813      	ldr	r3, [r2, #0]
 8018086:	702b      	strb	r3, [r5, #0]
 8018088:	2301      	movs	r3, #1
 801808a:	e0a0      	b.n	80181ce <_printf_i+0x1c2>
 801808c:	6818      	ldr	r0, [r3, #0]
 801808e:	6809      	ldr	r1, [r1, #0]
 8018090:	1d02      	adds	r2, r0, #4
 8018092:	060d      	lsls	r5, r1, #24
 8018094:	d50b      	bpl.n	80180ae <_printf_i+0xa2>
 8018096:	6806      	ldr	r6, [r0, #0]
 8018098:	601a      	str	r2, [r3, #0]
 801809a:	2e00      	cmp	r6, #0
 801809c:	da03      	bge.n	80180a6 <_printf_i+0x9a>
 801809e:	232d      	movs	r3, #45	@ 0x2d
 80180a0:	9a03      	ldr	r2, [sp, #12]
 80180a2:	4276      	negs	r6, r6
 80180a4:	7013      	strb	r3, [r2, #0]
 80180a6:	4b5e      	ldr	r3, [pc, #376]	@ (8018220 <_printf_i+0x214>)
 80180a8:	270a      	movs	r7, #10
 80180aa:	9304      	str	r3, [sp, #16]
 80180ac:	e018      	b.n	80180e0 <_printf_i+0xd4>
 80180ae:	6806      	ldr	r6, [r0, #0]
 80180b0:	601a      	str	r2, [r3, #0]
 80180b2:	0649      	lsls	r1, r1, #25
 80180b4:	d5f1      	bpl.n	801809a <_printf_i+0x8e>
 80180b6:	b236      	sxth	r6, r6
 80180b8:	e7ef      	b.n	801809a <_printf_i+0x8e>
 80180ba:	6808      	ldr	r0, [r1, #0]
 80180bc:	6819      	ldr	r1, [r3, #0]
 80180be:	c940      	ldmia	r1!, {r6}
 80180c0:	0605      	lsls	r5, r0, #24
 80180c2:	d402      	bmi.n	80180ca <_printf_i+0xbe>
 80180c4:	0640      	lsls	r0, r0, #25
 80180c6:	d500      	bpl.n	80180ca <_printf_i+0xbe>
 80180c8:	b2b6      	uxth	r6, r6
 80180ca:	6019      	str	r1, [r3, #0]
 80180cc:	4b54      	ldr	r3, [pc, #336]	@ (8018220 <_printf_i+0x214>)
 80180ce:	270a      	movs	r7, #10
 80180d0:	9304      	str	r3, [sp, #16]
 80180d2:	2a6f      	cmp	r2, #111	@ 0x6f
 80180d4:	d100      	bne.n	80180d8 <_printf_i+0xcc>
 80180d6:	3f02      	subs	r7, #2
 80180d8:	0023      	movs	r3, r4
 80180da:	2200      	movs	r2, #0
 80180dc:	3343      	adds	r3, #67	@ 0x43
 80180de:	701a      	strb	r2, [r3, #0]
 80180e0:	6863      	ldr	r3, [r4, #4]
 80180e2:	60a3      	str	r3, [r4, #8]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	db03      	blt.n	80180f0 <_printf_i+0xe4>
 80180e8:	2104      	movs	r1, #4
 80180ea:	6822      	ldr	r2, [r4, #0]
 80180ec:	438a      	bics	r2, r1
 80180ee:	6022      	str	r2, [r4, #0]
 80180f0:	2e00      	cmp	r6, #0
 80180f2:	d102      	bne.n	80180fa <_printf_i+0xee>
 80180f4:	9d03      	ldr	r5, [sp, #12]
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d00c      	beq.n	8018114 <_printf_i+0x108>
 80180fa:	9d03      	ldr	r5, [sp, #12]
 80180fc:	0030      	movs	r0, r6
 80180fe:	0039      	movs	r1, r7
 8018100:	f7e8 f8a4 	bl	800024c <__aeabi_uidivmod>
 8018104:	9b04      	ldr	r3, [sp, #16]
 8018106:	3d01      	subs	r5, #1
 8018108:	5c5b      	ldrb	r3, [r3, r1]
 801810a:	702b      	strb	r3, [r5, #0]
 801810c:	0033      	movs	r3, r6
 801810e:	0006      	movs	r6, r0
 8018110:	429f      	cmp	r7, r3
 8018112:	d9f3      	bls.n	80180fc <_printf_i+0xf0>
 8018114:	2f08      	cmp	r7, #8
 8018116:	d109      	bne.n	801812c <_printf_i+0x120>
 8018118:	6823      	ldr	r3, [r4, #0]
 801811a:	07db      	lsls	r3, r3, #31
 801811c:	d506      	bpl.n	801812c <_printf_i+0x120>
 801811e:	6862      	ldr	r2, [r4, #4]
 8018120:	6923      	ldr	r3, [r4, #16]
 8018122:	429a      	cmp	r2, r3
 8018124:	dc02      	bgt.n	801812c <_printf_i+0x120>
 8018126:	2330      	movs	r3, #48	@ 0x30
 8018128:	3d01      	subs	r5, #1
 801812a:	702b      	strb	r3, [r5, #0]
 801812c:	9b03      	ldr	r3, [sp, #12]
 801812e:	1b5b      	subs	r3, r3, r5
 8018130:	6123      	str	r3, [r4, #16]
 8018132:	9b07      	ldr	r3, [sp, #28]
 8018134:	0021      	movs	r1, r4
 8018136:	9300      	str	r3, [sp, #0]
 8018138:	9805      	ldr	r0, [sp, #20]
 801813a:	9b06      	ldr	r3, [sp, #24]
 801813c:	aa09      	add	r2, sp, #36	@ 0x24
 801813e:	f7ff fef5 	bl	8017f2c <_printf_common>
 8018142:	3001      	adds	r0, #1
 8018144:	d148      	bne.n	80181d8 <_printf_i+0x1cc>
 8018146:	2001      	movs	r0, #1
 8018148:	4240      	negs	r0, r0
 801814a:	b00b      	add	sp, #44	@ 0x2c
 801814c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801814e:	2220      	movs	r2, #32
 8018150:	6809      	ldr	r1, [r1, #0]
 8018152:	430a      	orrs	r2, r1
 8018154:	6022      	str	r2, [r4, #0]
 8018156:	2278      	movs	r2, #120	@ 0x78
 8018158:	4932      	ldr	r1, [pc, #200]	@ (8018224 <_printf_i+0x218>)
 801815a:	9104      	str	r1, [sp, #16]
 801815c:	0021      	movs	r1, r4
 801815e:	3145      	adds	r1, #69	@ 0x45
 8018160:	700a      	strb	r2, [r1, #0]
 8018162:	6819      	ldr	r1, [r3, #0]
 8018164:	6822      	ldr	r2, [r4, #0]
 8018166:	c940      	ldmia	r1!, {r6}
 8018168:	0610      	lsls	r0, r2, #24
 801816a:	d402      	bmi.n	8018172 <_printf_i+0x166>
 801816c:	0650      	lsls	r0, r2, #25
 801816e:	d500      	bpl.n	8018172 <_printf_i+0x166>
 8018170:	b2b6      	uxth	r6, r6
 8018172:	6019      	str	r1, [r3, #0]
 8018174:	07d3      	lsls	r3, r2, #31
 8018176:	d502      	bpl.n	801817e <_printf_i+0x172>
 8018178:	2320      	movs	r3, #32
 801817a:	4313      	orrs	r3, r2
 801817c:	6023      	str	r3, [r4, #0]
 801817e:	2e00      	cmp	r6, #0
 8018180:	d001      	beq.n	8018186 <_printf_i+0x17a>
 8018182:	2710      	movs	r7, #16
 8018184:	e7a8      	b.n	80180d8 <_printf_i+0xcc>
 8018186:	2220      	movs	r2, #32
 8018188:	6823      	ldr	r3, [r4, #0]
 801818a:	4393      	bics	r3, r2
 801818c:	6023      	str	r3, [r4, #0]
 801818e:	e7f8      	b.n	8018182 <_printf_i+0x176>
 8018190:	681a      	ldr	r2, [r3, #0]
 8018192:	680d      	ldr	r5, [r1, #0]
 8018194:	1d10      	adds	r0, r2, #4
 8018196:	6949      	ldr	r1, [r1, #20]
 8018198:	6018      	str	r0, [r3, #0]
 801819a:	6813      	ldr	r3, [r2, #0]
 801819c:	062e      	lsls	r6, r5, #24
 801819e:	d501      	bpl.n	80181a4 <_printf_i+0x198>
 80181a0:	6019      	str	r1, [r3, #0]
 80181a2:	e002      	b.n	80181aa <_printf_i+0x19e>
 80181a4:	066d      	lsls	r5, r5, #25
 80181a6:	d5fb      	bpl.n	80181a0 <_printf_i+0x194>
 80181a8:	8019      	strh	r1, [r3, #0]
 80181aa:	2300      	movs	r3, #0
 80181ac:	9d03      	ldr	r5, [sp, #12]
 80181ae:	6123      	str	r3, [r4, #16]
 80181b0:	e7bf      	b.n	8018132 <_printf_i+0x126>
 80181b2:	681a      	ldr	r2, [r3, #0]
 80181b4:	1d11      	adds	r1, r2, #4
 80181b6:	6019      	str	r1, [r3, #0]
 80181b8:	6815      	ldr	r5, [r2, #0]
 80181ba:	2100      	movs	r1, #0
 80181bc:	0028      	movs	r0, r5
 80181be:	6862      	ldr	r2, [r4, #4]
 80181c0:	f000 fa69 	bl	8018696 <memchr>
 80181c4:	2800      	cmp	r0, #0
 80181c6:	d001      	beq.n	80181cc <_printf_i+0x1c0>
 80181c8:	1b40      	subs	r0, r0, r5
 80181ca:	6060      	str	r0, [r4, #4]
 80181cc:	6863      	ldr	r3, [r4, #4]
 80181ce:	6123      	str	r3, [r4, #16]
 80181d0:	2300      	movs	r3, #0
 80181d2:	9a03      	ldr	r2, [sp, #12]
 80181d4:	7013      	strb	r3, [r2, #0]
 80181d6:	e7ac      	b.n	8018132 <_printf_i+0x126>
 80181d8:	002a      	movs	r2, r5
 80181da:	6923      	ldr	r3, [r4, #16]
 80181dc:	9906      	ldr	r1, [sp, #24]
 80181de:	9805      	ldr	r0, [sp, #20]
 80181e0:	9d07      	ldr	r5, [sp, #28]
 80181e2:	47a8      	blx	r5
 80181e4:	3001      	adds	r0, #1
 80181e6:	d0ae      	beq.n	8018146 <_printf_i+0x13a>
 80181e8:	6823      	ldr	r3, [r4, #0]
 80181ea:	079b      	lsls	r3, r3, #30
 80181ec:	d415      	bmi.n	801821a <_printf_i+0x20e>
 80181ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181f0:	68e0      	ldr	r0, [r4, #12]
 80181f2:	4298      	cmp	r0, r3
 80181f4:	daa9      	bge.n	801814a <_printf_i+0x13e>
 80181f6:	0018      	movs	r0, r3
 80181f8:	e7a7      	b.n	801814a <_printf_i+0x13e>
 80181fa:	0022      	movs	r2, r4
 80181fc:	2301      	movs	r3, #1
 80181fe:	9906      	ldr	r1, [sp, #24]
 8018200:	9805      	ldr	r0, [sp, #20]
 8018202:	9e07      	ldr	r6, [sp, #28]
 8018204:	3219      	adds	r2, #25
 8018206:	47b0      	blx	r6
 8018208:	3001      	adds	r0, #1
 801820a:	d09c      	beq.n	8018146 <_printf_i+0x13a>
 801820c:	3501      	adds	r5, #1
 801820e:	68e3      	ldr	r3, [r4, #12]
 8018210:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018212:	1a9b      	subs	r3, r3, r2
 8018214:	42ab      	cmp	r3, r5
 8018216:	dcf0      	bgt.n	80181fa <_printf_i+0x1ee>
 8018218:	e7e9      	b.n	80181ee <_printf_i+0x1e2>
 801821a:	2500      	movs	r5, #0
 801821c:	e7f7      	b.n	801820e <_printf_i+0x202>
 801821e:	46c0      	nop			@ (mov r8, r8)
 8018220:	0801c262 	.word	0x0801c262
 8018224:	0801c273 	.word	0x0801c273

08018228 <std>:
 8018228:	2300      	movs	r3, #0
 801822a:	b510      	push	{r4, lr}
 801822c:	0004      	movs	r4, r0
 801822e:	6003      	str	r3, [r0, #0]
 8018230:	6043      	str	r3, [r0, #4]
 8018232:	6083      	str	r3, [r0, #8]
 8018234:	8181      	strh	r1, [r0, #12]
 8018236:	6643      	str	r3, [r0, #100]	@ 0x64
 8018238:	81c2      	strh	r2, [r0, #14]
 801823a:	6103      	str	r3, [r0, #16]
 801823c:	6143      	str	r3, [r0, #20]
 801823e:	6183      	str	r3, [r0, #24]
 8018240:	0019      	movs	r1, r3
 8018242:	2208      	movs	r2, #8
 8018244:	305c      	adds	r0, #92	@ 0x5c
 8018246:	f000 f967 	bl	8018518 <memset>
 801824a:	4b0b      	ldr	r3, [pc, #44]	@ (8018278 <std+0x50>)
 801824c:	6224      	str	r4, [r4, #32]
 801824e:	6263      	str	r3, [r4, #36]	@ 0x24
 8018250:	4b0a      	ldr	r3, [pc, #40]	@ (801827c <std+0x54>)
 8018252:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018254:	4b0a      	ldr	r3, [pc, #40]	@ (8018280 <std+0x58>)
 8018256:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018258:	4b0a      	ldr	r3, [pc, #40]	@ (8018284 <std+0x5c>)
 801825a:	6323      	str	r3, [r4, #48]	@ 0x30
 801825c:	4b0a      	ldr	r3, [pc, #40]	@ (8018288 <std+0x60>)
 801825e:	429c      	cmp	r4, r3
 8018260:	d005      	beq.n	801826e <std+0x46>
 8018262:	4b0a      	ldr	r3, [pc, #40]	@ (801828c <std+0x64>)
 8018264:	429c      	cmp	r4, r3
 8018266:	d002      	beq.n	801826e <std+0x46>
 8018268:	4b09      	ldr	r3, [pc, #36]	@ (8018290 <std+0x68>)
 801826a:	429c      	cmp	r4, r3
 801826c:	d103      	bne.n	8018276 <std+0x4e>
 801826e:	0020      	movs	r0, r4
 8018270:	3058      	adds	r0, #88	@ 0x58
 8018272:	f000 fa0d 	bl	8018690 <__retarget_lock_init_recursive>
 8018276:	bd10      	pop	{r4, pc}
 8018278:	08018411 	.word	0x08018411
 801827c:	08018439 	.word	0x08018439
 8018280:	08018471 	.word	0x08018471
 8018284:	0801849d 	.word	0x0801849d
 8018288:	20003fd4 	.word	0x20003fd4
 801828c:	2000403c 	.word	0x2000403c
 8018290:	200040a4 	.word	0x200040a4

08018294 <stdio_exit_handler>:
 8018294:	b510      	push	{r4, lr}
 8018296:	4a03      	ldr	r2, [pc, #12]	@ (80182a4 <stdio_exit_handler+0x10>)
 8018298:	4903      	ldr	r1, [pc, #12]	@ (80182a8 <stdio_exit_handler+0x14>)
 801829a:	4804      	ldr	r0, [pc, #16]	@ (80182ac <stdio_exit_handler+0x18>)
 801829c:	f000 f86c 	bl	8018378 <_fwalk_sglue>
 80182a0:	bd10      	pop	{r4, pc}
 80182a2:	46c0      	nop			@ (mov r8, r8)
 80182a4:	200001e8 	.word	0x200001e8
 80182a8:	0801a369 	.word	0x0801a369
 80182ac:	200001f8 	.word	0x200001f8

080182b0 <cleanup_stdio>:
 80182b0:	6841      	ldr	r1, [r0, #4]
 80182b2:	4b0b      	ldr	r3, [pc, #44]	@ (80182e0 <cleanup_stdio+0x30>)
 80182b4:	b510      	push	{r4, lr}
 80182b6:	0004      	movs	r4, r0
 80182b8:	4299      	cmp	r1, r3
 80182ba:	d001      	beq.n	80182c0 <cleanup_stdio+0x10>
 80182bc:	f002 f854 	bl	801a368 <_fflush_r>
 80182c0:	68a1      	ldr	r1, [r4, #8]
 80182c2:	4b08      	ldr	r3, [pc, #32]	@ (80182e4 <cleanup_stdio+0x34>)
 80182c4:	4299      	cmp	r1, r3
 80182c6:	d002      	beq.n	80182ce <cleanup_stdio+0x1e>
 80182c8:	0020      	movs	r0, r4
 80182ca:	f002 f84d 	bl	801a368 <_fflush_r>
 80182ce:	68e1      	ldr	r1, [r4, #12]
 80182d0:	4b05      	ldr	r3, [pc, #20]	@ (80182e8 <cleanup_stdio+0x38>)
 80182d2:	4299      	cmp	r1, r3
 80182d4:	d002      	beq.n	80182dc <cleanup_stdio+0x2c>
 80182d6:	0020      	movs	r0, r4
 80182d8:	f002 f846 	bl	801a368 <_fflush_r>
 80182dc:	bd10      	pop	{r4, pc}
 80182de:	46c0      	nop			@ (mov r8, r8)
 80182e0:	20003fd4 	.word	0x20003fd4
 80182e4:	2000403c 	.word	0x2000403c
 80182e8:	200040a4 	.word	0x200040a4

080182ec <global_stdio_init.part.0>:
 80182ec:	b510      	push	{r4, lr}
 80182ee:	4b09      	ldr	r3, [pc, #36]	@ (8018314 <global_stdio_init.part.0+0x28>)
 80182f0:	4a09      	ldr	r2, [pc, #36]	@ (8018318 <global_stdio_init.part.0+0x2c>)
 80182f2:	2104      	movs	r1, #4
 80182f4:	601a      	str	r2, [r3, #0]
 80182f6:	4809      	ldr	r0, [pc, #36]	@ (801831c <global_stdio_init.part.0+0x30>)
 80182f8:	2200      	movs	r2, #0
 80182fa:	f7ff ff95 	bl	8018228 <std>
 80182fe:	2201      	movs	r2, #1
 8018300:	2109      	movs	r1, #9
 8018302:	4807      	ldr	r0, [pc, #28]	@ (8018320 <global_stdio_init.part.0+0x34>)
 8018304:	f7ff ff90 	bl	8018228 <std>
 8018308:	2202      	movs	r2, #2
 801830a:	2112      	movs	r1, #18
 801830c:	4805      	ldr	r0, [pc, #20]	@ (8018324 <global_stdio_init.part.0+0x38>)
 801830e:	f7ff ff8b 	bl	8018228 <std>
 8018312:	bd10      	pop	{r4, pc}
 8018314:	2000410c 	.word	0x2000410c
 8018318:	08018295 	.word	0x08018295
 801831c:	20003fd4 	.word	0x20003fd4
 8018320:	2000403c 	.word	0x2000403c
 8018324:	200040a4 	.word	0x200040a4

08018328 <__sfp_lock_acquire>:
 8018328:	b510      	push	{r4, lr}
 801832a:	4802      	ldr	r0, [pc, #8]	@ (8018334 <__sfp_lock_acquire+0xc>)
 801832c:	f000 f9b1 	bl	8018692 <__retarget_lock_acquire_recursive>
 8018330:	bd10      	pop	{r4, pc}
 8018332:	46c0      	nop			@ (mov r8, r8)
 8018334:	20004115 	.word	0x20004115

08018338 <__sfp_lock_release>:
 8018338:	b510      	push	{r4, lr}
 801833a:	4802      	ldr	r0, [pc, #8]	@ (8018344 <__sfp_lock_release+0xc>)
 801833c:	f000 f9aa 	bl	8018694 <__retarget_lock_release_recursive>
 8018340:	bd10      	pop	{r4, pc}
 8018342:	46c0      	nop			@ (mov r8, r8)
 8018344:	20004115 	.word	0x20004115

08018348 <__sinit>:
 8018348:	b510      	push	{r4, lr}
 801834a:	0004      	movs	r4, r0
 801834c:	f7ff ffec 	bl	8018328 <__sfp_lock_acquire>
 8018350:	6a23      	ldr	r3, [r4, #32]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d002      	beq.n	801835c <__sinit+0x14>
 8018356:	f7ff ffef 	bl	8018338 <__sfp_lock_release>
 801835a:	bd10      	pop	{r4, pc}
 801835c:	4b04      	ldr	r3, [pc, #16]	@ (8018370 <__sinit+0x28>)
 801835e:	6223      	str	r3, [r4, #32]
 8018360:	4b04      	ldr	r3, [pc, #16]	@ (8018374 <__sinit+0x2c>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d1f6      	bne.n	8018356 <__sinit+0xe>
 8018368:	f7ff ffc0 	bl	80182ec <global_stdio_init.part.0>
 801836c:	e7f3      	b.n	8018356 <__sinit+0xe>
 801836e:	46c0      	nop			@ (mov r8, r8)
 8018370:	080182b1 	.word	0x080182b1
 8018374:	2000410c 	.word	0x2000410c

08018378 <_fwalk_sglue>:
 8018378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801837a:	0014      	movs	r4, r2
 801837c:	2600      	movs	r6, #0
 801837e:	9000      	str	r0, [sp, #0]
 8018380:	9101      	str	r1, [sp, #4]
 8018382:	68a5      	ldr	r5, [r4, #8]
 8018384:	6867      	ldr	r7, [r4, #4]
 8018386:	3f01      	subs	r7, #1
 8018388:	d504      	bpl.n	8018394 <_fwalk_sglue+0x1c>
 801838a:	6824      	ldr	r4, [r4, #0]
 801838c:	2c00      	cmp	r4, #0
 801838e:	d1f8      	bne.n	8018382 <_fwalk_sglue+0xa>
 8018390:	0030      	movs	r0, r6
 8018392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018394:	89ab      	ldrh	r3, [r5, #12]
 8018396:	2b01      	cmp	r3, #1
 8018398:	d908      	bls.n	80183ac <_fwalk_sglue+0x34>
 801839a:	220e      	movs	r2, #14
 801839c:	5eab      	ldrsh	r3, [r5, r2]
 801839e:	3301      	adds	r3, #1
 80183a0:	d004      	beq.n	80183ac <_fwalk_sglue+0x34>
 80183a2:	0029      	movs	r1, r5
 80183a4:	9800      	ldr	r0, [sp, #0]
 80183a6:	9b01      	ldr	r3, [sp, #4]
 80183a8:	4798      	blx	r3
 80183aa:	4306      	orrs	r6, r0
 80183ac:	3568      	adds	r5, #104	@ 0x68
 80183ae:	e7ea      	b.n	8018386 <_fwalk_sglue+0xe>

080183b0 <iprintf>:
 80183b0:	b40f      	push	{r0, r1, r2, r3}
 80183b2:	b507      	push	{r0, r1, r2, lr}
 80183b4:	4905      	ldr	r1, [pc, #20]	@ (80183cc <iprintf+0x1c>)
 80183b6:	ab04      	add	r3, sp, #16
 80183b8:	6808      	ldr	r0, [r1, #0]
 80183ba:	cb04      	ldmia	r3!, {r2}
 80183bc:	6881      	ldr	r1, [r0, #8]
 80183be:	9301      	str	r3, [sp, #4]
 80183c0:	f001 fe30 	bl	801a024 <_vfiprintf_r>
 80183c4:	b003      	add	sp, #12
 80183c6:	bc08      	pop	{r3}
 80183c8:	b004      	add	sp, #16
 80183ca:	4718      	bx	r3
 80183cc:	200001f4 	.word	0x200001f4

080183d0 <siprintf>:
 80183d0:	b40e      	push	{r1, r2, r3}
 80183d2:	b500      	push	{lr}
 80183d4:	490b      	ldr	r1, [pc, #44]	@ (8018404 <siprintf+0x34>)
 80183d6:	b09c      	sub	sp, #112	@ 0x70
 80183d8:	ab1d      	add	r3, sp, #116	@ 0x74
 80183da:	9002      	str	r0, [sp, #8]
 80183dc:	9006      	str	r0, [sp, #24]
 80183de:	9107      	str	r1, [sp, #28]
 80183e0:	9104      	str	r1, [sp, #16]
 80183e2:	4809      	ldr	r0, [pc, #36]	@ (8018408 <siprintf+0x38>)
 80183e4:	4909      	ldr	r1, [pc, #36]	@ (801840c <siprintf+0x3c>)
 80183e6:	cb04      	ldmia	r3!, {r2}
 80183e8:	9105      	str	r1, [sp, #20]
 80183ea:	6800      	ldr	r0, [r0, #0]
 80183ec:	a902      	add	r1, sp, #8
 80183ee:	9301      	str	r3, [sp, #4]
 80183f0:	f001 fcf2 	bl	8019dd8 <_svfiprintf_r>
 80183f4:	2200      	movs	r2, #0
 80183f6:	9b02      	ldr	r3, [sp, #8]
 80183f8:	701a      	strb	r2, [r3, #0]
 80183fa:	b01c      	add	sp, #112	@ 0x70
 80183fc:	bc08      	pop	{r3}
 80183fe:	b003      	add	sp, #12
 8018400:	4718      	bx	r3
 8018402:	46c0      	nop			@ (mov r8, r8)
 8018404:	7fffffff 	.word	0x7fffffff
 8018408:	200001f4 	.word	0x200001f4
 801840c:	ffff0208 	.word	0xffff0208

08018410 <__sread>:
 8018410:	b570      	push	{r4, r5, r6, lr}
 8018412:	000c      	movs	r4, r1
 8018414:	250e      	movs	r5, #14
 8018416:	5f49      	ldrsh	r1, [r1, r5]
 8018418:	f000 f8e8 	bl	80185ec <_read_r>
 801841c:	2800      	cmp	r0, #0
 801841e:	db03      	blt.n	8018428 <__sread+0x18>
 8018420:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8018422:	181b      	adds	r3, r3, r0
 8018424:	6563      	str	r3, [r4, #84]	@ 0x54
 8018426:	bd70      	pop	{r4, r5, r6, pc}
 8018428:	89a3      	ldrh	r3, [r4, #12]
 801842a:	4a02      	ldr	r2, [pc, #8]	@ (8018434 <__sread+0x24>)
 801842c:	4013      	ands	r3, r2
 801842e:	81a3      	strh	r3, [r4, #12]
 8018430:	e7f9      	b.n	8018426 <__sread+0x16>
 8018432:	46c0      	nop			@ (mov r8, r8)
 8018434:	ffffefff 	.word	0xffffefff

08018438 <__swrite>:
 8018438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801843a:	001f      	movs	r7, r3
 801843c:	898b      	ldrh	r3, [r1, #12]
 801843e:	0005      	movs	r5, r0
 8018440:	000c      	movs	r4, r1
 8018442:	0016      	movs	r6, r2
 8018444:	05db      	lsls	r3, r3, #23
 8018446:	d505      	bpl.n	8018454 <__swrite+0x1c>
 8018448:	230e      	movs	r3, #14
 801844a:	5ec9      	ldrsh	r1, [r1, r3]
 801844c:	2200      	movs	r2, #0
 801844e:	2302      	movs	r3, #2
 8018450:	f000 f8b8 	bl	80185c4 <_lseek_r>
 8018454:	89a3      	ldrh	r3, [r4, #12]
 8018456:	4a05      	ldr	r2, [pc, #20]	@ (801846c <__swrite+0x34>)
 8018458:	0028      	movs	r0, r5
 801845a:	4013      	ands	r3, r2
 801845c:	81a3      	strh	r3, [r4, #12]
 801845e:	0032      	movs	r2, r6
 8018460:	230e      	movs	r3, #14
 8018462:	5ee1      	ldrsh	r1, [r4, r3]
 8018464:	003b      	movs	r3, r7
 8018466:	f000 f8d5 	bl	8018614 <_write_r>
 801846a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801846c:	ffffefff 	.word	0xffffefff

08018470 <__sseek>:
 8018470:	b570      	push	{r4, r5, r6, lr}
 8018472:	000c      	movs	r4, r1
 8018474:	250e      	movs	r5, #14
 8018476:	5f49      	ldrsh	r1, [r1, r5]
 8018478:	f000 f8a4 	bl	80185c4 <_lseek_r>
 801847c:	89a3      	ldrh	r3, [r4, #12]
 801847e:	1c42      	adds	r2, r0, #1
 8018480:	d103      	bne.n	801848a <__sseek+0x1a>
 8018482:	4a05      	ldr	r2, [pc, #20]	@ (8018498 <__sseek+0x28>)
 8018484:	4013      	ands	r3, r2
 8018486:	81a3      	strh	r3, [r4, #12]
 8018488:	bd70      	pop	{r4, r5, r6, pc}
 801848a:	2280      	movs	r2, #128	@ 0x80
 801848c:	0152      	lsls	r2, r2, #5
 801848e:	4313      	orrs	r3, r2
 8018490:	81a3      	strh	r3, [r4, #12]
 8018492:	6560      	str	r0, [r4, #84]	@ 0x54
 8018494:	e7f8      	b.n	8018488 <__sseek+0x18>
 8018496:	46c0      	nop			@ (mov r8, r8)
 8018498:	ffffefff 	.word	0xffffefff

0801849c <__sclose>:
 801849c:	b510      	push	{r4, lr}
 801849e:	230e      	movs	r3, #14
 80184a0:	5ec9      	ldrsh	r1, [r1, r3]
 80184a2:	f000 f87d 	bl	80185a0 <_close_r>
 80184a6:	bd10      	pop	{r4, pc}

080184a8 <_vsniprintf_r>:
 80184a8:	b530      	push	{r4, r5, lr}
 80184aa:	0014      	movs	r4, r2
 80184ac:	0005      	movs	r5, r0
 80184ae:	001a      	movs	r2, r3
 80184b0:	b09b      	sub	sp, #108	@ 0x6c
 80184b2:	2c00      	cmp	r4, #0
 80184b4:	da05      	bge.n	80184c2 <_vsniprintf_r+0x1a>
 80184b6:	238b      	movs	r3, #139	@ 0x8b
 80184b8:	6003      	str	r3, [r0, #0]
 80184ba:	2001      	movs	r0, #1
 80184bc:	4240      	negs	r0, r0
 80184be:	b01b      	add	sp, #108	@ 0x6c
 80184c0:	bd30      	pop	{r4, r5, pc}
 80184c2:	2382      	movs	r3, #130	@ 0x82
 80184c4:	4668      	mov	r0, sp
 80184c6:	009b      	lsls	r3, r3, #2
 80184c8:	8183      	strh	r3, [r0, #12]
 80184ca:	2300      	movs	r3, #0
 80184cc:	9100      	str	r1, [sp, #0]
 80184ce:	9104      	str	r1, [sp, #16]
 80184d0:	429c      	cmp	r4, r3
 80184d2:	d000      	beq.n	80184d6 <_vsniprintf_r+0x2e>
 80184d4:	1e63      	subs	r3, r4, #1
 80184d6:	9302      	str	r3, [sp, #8]
 80184d8:	9305      	str	r3, [sp, #20]
 80184da:	2301      	movs	r3, #1
 80184dc:	4669      	mov	r1, sp
 80184de:	425b      	negs	r3, r3
 80184e0:	81cb      	strh	r3, [r1, #14]
 80184e2:	0028      	movs	r0, r5
 80184e4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80184e6:	f001 fc77 	bl	8019dd8 <_svfiprintf_r>
 80184ea:	1c43      	adds	r3, r0, #1
 80184ec:	da01      	bge.n	80184f2 <_vsniprintf_r+0x4a>
 80184ee:	238b      	movs	r3, #139	@ 0x8b
 80184f0:	602b      	str	r3, [r5, #0]
 80184f2:	2c00      	cmp	r4, #0
 80184f4:	d0e3      	beq.n	80184be <_vsniprintf_r+0x16>
 80184f6:	2200      	movs	r2, #0
 80184f8:	9b00      	ldr	r3, [sp, #0]
 80184fa:	701a      	strb	r2, [r3, #0]
 80184fc:	e7df      	b.n	80184be <_vsniprintf_r+0x16>
	...

08018500 <vsniprintf>:
 8018500:	b513      	push	{r0, r1, r4, lr}
 8018502:	4c04      	ldr	r4, [pc, #16]	@ (8018514 <vsniprintf+0x14>)
 8018504:	9300      	str	r3, [sp, #0]
 8018506:	0013      	movs	r3, r2
 8018508:	000a      	movs	r2, r1
 801850a:	0001      	movs	r1, r0
 801850c:	6820      	ldr	r0, [r4, #0]
 801850e:	f7ff ffcb 	bl	80184a8 <_vsniprintf_r>
 8018512:	bd16      	pop	{r1, r2, r4, pc}
 8018514:	200001f4 	.word	0x200001f4

08018518 <memset>:
 8018518:	0003      	movs	r3, r0
 801851a:	1882      	adds	r2, r0, r2
 801851c:	4293      	cmp	r3, r2
 801851e:	d100      	bne.n	8018522 <memset+0xa>
 8018520:	4770      	bx	lr
 8018522:	7019      	strb	r1, [r3, #0]
 8018524:	3301      	adds	r3, #1
 8018526:	e7f9      	b.n	801851c <memset+0x4>

08018528 <strchr>:
 8018528:	b2c9      	uxtb	r1, r1
 801852a:	7803      	ldrb	r3, [r0, #0]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d004      	beq.n	801853a <strchr+0x12>
 8018530:	428b      	cmp	r3, r1
 8018532:	d100      	bne.n	8018536 <strchr+0xe>
 8018534:	4770      	bx	lr
 8018536:	3001      	adds	r0, #1
 8018538:	e7f7      	b.n	801852a <strchr+0x2>
 801853a:	424b      	negs	r3, r1
 801853c:	4159      	adcs	r1, r3
 801853e:	4249      	negs	r1, r1
 8018540:	4008      	ands	r0, r1
 8018542:	e7f7      	b.n	8018534 <strchr+0xc>

08018544 <strncpy>:
 8018544:	0003      	movs	r3, r0
 8018546:	b530      	push	{r4, r5, lr}
 8018548:	001d      	movs	r5, r3
 801854a:	2a00      	cmp	r2, #0
 801854c:	d006      	beq.n	801855c <strncpy+0x18>
 801854e:	780c      	ldrb	r4, [r1, #0]
 8018550:	3a01      	subs	r2, #1
 8018552:	3301      	adds	r3, #1
 8018554:	702c      	strb	r4, [r5, #0]
 8018556:	3101      	adds	r1, #1
 8018558:	2c00      	cmp	r4, #0
 801855a:	d1f5      	bne.n	8018548 <strncpy+0x4>
 801855c:	2100      	movs	r1, #0
 801855e:	189a      	adds	r2, r3, r2
 8018560:	4293      	cmp	r3, r2
 8018562:	d100      	bne.n	8018566 <strncpy+0x22>
 8018564:	bd30      	pop	{r4, r5, pc}
 8018566:	7019      	strb	r1, [r3, #0]
 8018568:	3301      	adds	r3, #1
 801856a:	e7f9      	b.n	8018560 <strncpy+0x1c>

0801856c <strstr>:
 801856c:	780a      	ldrb	r2, [r1, #0]
 801856e:	b530      	push	{r4, r5, lr}
 8018570:	2a00      	cmp	r2, #0
 8018572:	d10c      	bne.n	801858e <strstr+0x22>
 8018574:	bd30      	pop	{r4, r5, pc}
 8018576:	429a      	cmp	r2, r3
 8018578:	d108      	bne.n	801858c <strstr+0x20>
 801857a:	2301      	movs	r3, #1
 801857c:	5ccc      	ldrb	r4, [r1, r3]
 801857e:	2c00      	cmp	r4, #0
 8018580:	d0f8      	beq.n	8018574 <strstr+0x8>
 8018582:	5cc5      	ldrb	r5, [r0, r3]
 8018584:	42a5      	cmp	r5, r4
 8018586:	d101      	bne.n	801858c <strstr+0x20>
 8018588:	3301      	adds	r3, #1
 801858a:	e7f7      	b.n	801857c <strstr+0x10>
 801858c:	3001      	adds	r0, #1
 801858e:	7803      	ldrb	r3, [r0, #0]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d1f0      	bne.n	8018576 <strstr+0xa>
 8018594:	0018      	movs	r0, r3
 8018596:	e7ed      	b.n	8018574 <strstr+0x8>

08018598 <_localeconv_r>:
 8018598:	4800      	ldr	r0, [pc, #0]	@ (801859c <_localeconv_r+0x4>)
 801859a:	4770      	bx	lr
 801859c:	20000334 	.word	0x20000334

080185a0 <_close_r>:
 80185a0:	2300      	movs	r3, #0
 80185a2:	b570      	push	{r4, r5, r6, lr}
 80185a4:	4d06      	ldr	r5, [pc, #24]	@ (80185c0 <_close_r+0x20>)
 80185a6:	0004      	movs	r4, r0
 80185a8:	0008      	movs	r0, r1
 80185aa:	602b      	str	r3, [r5, #0]
 80185ac:	f7f0 feee 	bl	800938c <_close>
 80185b0:	1c43      	adds	r3, r0, #1
 80185b2:	d103      	bne.n	80185bc <_close_r+0x1c>
 80185b4:	682b      	ldr	r3, [r5, #0]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d000      	beq.n	80185bc <_close_r+0x1c>
 80185ba:	6023      	str	r3, [r4, #0]
 80185bc:	bd70      	pop	{r4, r5, r6, pc}
 80185be:	46c0      	nop			@ (mov r8, r8)
 80185c0:	20004110 	.word	0x20004110

080185c4 <_lseek_r>:
 80185c4:	b570      	push	{r4, r5, r6, lr}
 80185c6:	0004      	movs	r4, r0
 80185c8:	0008      	movs	r0, r1
 80185ca:	0011      	movs	r1, r2
 80185cc:	001a      	movs	r2, r3
 80185ce:	2300      	movs	r3, #0
 80185d0:	4d05      	ldr	r5, [pc, #20]	@ (80185e8 <_lseek_r+0x24>)
 80185d2:	602b      	str	r3, [r5, #0]
 80185d4:	f7f0 fefb 	bl	80093ce <_lseek>
 80185d8:	1c43      	adds	r3, r0, #1
 80185da:	d103      	bne.n	80185e4 <_lseek_r+0x20>
 80185dc:	682b      	ldr	r3, [r5, #0]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d000      	beq.n	80185e4 <_lseek_r+0x20>
 80185e2:	6023      	str	r3, [r4, #0]
 80185e4:	bd70      	pop	{r4, r5, r6, pc}
 80185e6:	46c0      	nop			@ (mov r8, r8)
 80185e8:	20004110 	.word	0x20004110

080185ec <_read_r>:
 80185ec:	b570      	push	{r4, r5, r6, lr}
 80185ee:	0004      	movs	r4, r0
 80185f0:	0008      	movs	r0, r1
 80185f2:	0011      	movs	r1, r2
 80185f4:	001a      	movs	r2, r3
 80185f6:	2300      	movs	r3, #0
 80185f8:	4d05      	ldr	r5, [pc, #20]	@ (8018610 <_read_r+0x24>)
 80185fa:	602b      	str	r3, [r5, #0]
 80185fc:	f7f0 fea9 	bl	8009352 <_read>
 8018600:	1c43      	adds	r3, r0, #1
 8018602:	d103      	bne.n	801860c <_read_r+0x20>
 8018604:	682b      	ldr	r3, [r5, #0]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d000      	beq.n	801860c <_read_r+0x20>
 801860a:	6023      	str	r3, [r4, #0]
 801860c:	bd70      	pop	{r4, r5, r6, pc}
 801860e:	46c0      	nop			@ (mov r8, r8)
 8018610:	20004110 	.word	0x20004110

08018614 <_write_r>:
 8018614:	b570      	push	{r4, r5, r6, lr}
 8018616:	0004      	movs	r4, r0
 8018618:	0008      	movs	r0, r1
 801861a:	0011      	movs	r1, r2
 801861c:	001a      	movs	r2, r3
 801861e:	2300      	movs	r3, #0
 8018620:	4d05      	ldr	r5, [pc, #20]	@ (8018638 <_write_r+0x24>)
 8018622:	602b      	str	r3, [r5, #0]
 8018624:	f7f1 fb06 	bl	8009c34 <_write>
 8018628:	1c43      	adds	r3, r0, #1
 801862a:	d103      	bne.n	8018634 <_write_r+0x20>
 801862c:	682b      	ldr	r3, [r5, #0]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d000      	beq.n	8018634 <_write_r+0x20>
 8018632:	6023      	str	r3, [r4, #0]
 8018634:	bd70      	pop	{r4, r5, r6, pc}
 8018636:	46c0      	nop			@ (mov r8, r8)
 8018638:	20004110 	.word	0x20004110

0801863c <__errno>:
 801863c:	4b01      	ldr	r3, [pc, #4]	@ (8018644 <__errno+0x8>)
 801863e:	6818      	ldr	r0, [r3, #0]
 8018640:	4770      	bx	lr
 8018642:	46c0      	nop			@ (mov r8, r8)
 8018644:	200001f4 	.word	0x200001f4

08018648 <__libc_init_array>:
 8018648:	b570      	push	{r4, r5, r6, lr}
 801864a:	2600      	movs	r6, #0
 801864c:	4c0c      	ldr	r4, [pc, #48]	@ (8018680 <__libc_init_array+0x38>)
 801864e:	4d0d      	ldr	r5, [pc, #52]	@ (8018684 <__libc_init_array+0x3c>)
 8018650:	1b64      	subs	r4, r4, r5
 8018652:	10a4      	asrs	r4, r4, #2
 8018654:	42a6      	cmp	r6, r4
 8018656:	d109      	bne.n	801866c <__libc_init_array+0x24>
 8018658:	2600      	movs	r6, #0
 801865a:	f002 fe57 	bl	801b30c <_init>
 801865e:	4c0a      	ldr	r4, [pc, #40]	@ (8018688 <__libc_init_array+0x40>)
 8018660:	4d0a      	ldr	r5, [pc, #40]	@ (801868c <__libc_init_array+0x44>)
 8018662:	1b64      	subs	r4, r4, r5
 8018664:	10a4      	asrs	r4, r4, #2
 8018666:	42a6      	cmp	r6, r4
 8018668:	d105      	bne.n	8018676 <__libc_init_array+0x2e>
 801866a:	bd70      	pop	{r4, r5, r6, pc}
 801866c:	00b3      	lsls	r3, r6, #2
 801866e:	58eb      	ldr	r3, [r5, r3]
 8018670:	4798      	blx	r3
 8018672:	3601      	adds	r6, #1
 8018674:	e7ee      	b.n	8018654 <__libc_init_array+0xc>
 8018676:	00b3      	lsls	r3, r6, #2
 8018678:	58eb      	ldr	r3, [r5, r3]
 801867a:	4798      	blx	r3
 801867c:	3601      	adds	r6, #1
 801867e:	e7f2      	b.n	8018666 <__libc_init_array+0x1e>
 8018680:	0801c5e0 	.word	0x0801c5e0
 8018684:	0801c5e0 	.word	0x0801c5e0
 8018688:	0801c5e4 	.word	0x0801c5e4
 801868c:	0801c5e0 	.word	0x0801c5e0

08018690 <__retarget_lock_init_recursive>:
 8018690:	4770      	bx	lr

08018692 <__retarget_lock_acquire_recursive>:
 8018692:	4770      	bx	lr

08018694 <__retarget_lock_release_recursive>:
 8018694:	4770      	bx	lr

08018696 <memchr>:
 8018696:	b2c9      	uxtb	r1, r1
 8018698:	1882      	adds	r2, r0, r2
 801869a:	4290      	cmp	r0, r2
 801869c:	d101      	bne.n	80186a2 <memchr+0xc>
 801869e:	2000      	movs	r0, #0
 80186a0:	4770      	bx	lr
 80186a2:	7803      	ldrb	r3, [r0, #0]
 80186a4:	428b      	cmp	r3, r1
 80186a6:	d0fb      	beq.n	80186a0 <memchr+0xa>
 80186a8:	3001      	adds	r0, #1
 80186aa:	e7f6      	b.n	801869a <memchr+0x4>

080186ac <memcpy>:
 80186ac:	2300      	movs	r3, #0
 80186ae:	b510      	push	{r4, lr}
 80186b0:	429a      	cmp	r2, r3
 80186b2:	d100      	bne.n	80186b6 <memcpy+0xa>
 80186b4:	bd10      	pop	{r4, pc}
 80186b6:	5ccc      	ldrb	r4, [r1, r3]
 80186b8:	54c4      	strb	r4, [r0, r3]
 80186ba:	3301      	adds	r3, #1
 80186bc:	e7f8      	b.n	80186b0 <memcpy+0x4>

080186be <quorem>:
 80186be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186c0:	6902      	ldr	r2, [r0, #16]
 80186c2:	690f      	ldr	r7, [r1, #16]
 80186c4:	b087      	sub	sp, #28
 80186c6:	0006      	movs	r6, r0
 80186c8:	000b      	movs	r3, r1
 80186ca:	2000      	movs	r0, #0
 80186cc:	9102      	str	r1, [sp, #8]
 80186ce:	42ba      	cmp	r2, r7
 80186d0:	db6d      	blt.n	80187ae <quorem+0xf0>
 80186d2:	3f01      	subs	r7, #1
 80186d4:	00bc      	lsls	r4, r7, #2
 80186d6:	3314      	adds	r3, #20
 80186d8:	9305      	str	r3, [sp, #20]
 80186da:	191b      	adds	r3, r3, r4
 80186dc:	9303      	str	r3, [sp, #12]
 80186de:	0033      	movs	r3, r6
 80186e0:	3314      	adds	r3, #20
 80186e2:	191c      	adds	r4, r3, r4
 80186e4:	9301      	str	r3, [sp, #4]
 80186e6:	6823      	ldr	r3, [r4, #0]
 80186e8:	9304      	str	r3, [sp, #16]
 80186ea:	9b03      	ldr	r3, [sp, #12]
 80186ec:	9804      	ldr	r0, [sp, #16]
 80186ee:	681d      	ldr	r5, [r3, #0]
 80186f0:	3501      	adds	r5, #1
 80186f2:	0029      	movs	r1, r5
 80186f4:	f7e7 fd24 	bl	8000140 <__udivsi3>
 80186f8:	9b04      	ldr	r3, [sp, #16]
 80186fa:	9000      	str	r0, [sp, #0]
 80186fc:	42ab      	cmp	r3, r5
 80186fe:	d32b      	bcc.n	8018758 <quorem+0x9a>
 8018700:	9b05      	ldr	r3, [sp, #20]
 8018702:	9d01      	ldr	r5, [sp, #4]
 8018704:	469c      	mov	ip, r3
 8018706:	2300      	movs	r3, #0
 8018708:	9305      	str	r3, [sp, #20]
 801870a:	9304      	str	r3, [sp, #16]
 801870c:	4662      	mov	r2, ip
 801870e:	ca08      	ldmia	r2!, {r3}
 8018710:	6828      	ldr	r0, [r5, #0]
 8018712:	4694      	mov	ip, r2
 8018714:	9a00      	ldr	r2, [sp, #0]
 8018716:	b299      	uxth	r1, r3
 8018718:	4351      	muls	r1, r2
 801871a:	9a05      	ldr	r2, [sp, #20]
 801871c:	0c1b      	lsrs	r3, r3, #16
 801871e:	1889      	adds	r1, r1, r2
 8018720:	9a00      	ldr	r2, [sp, #0]
 8018722:	4353      	muls	r3, r2
 8018724:	0c0a      	lsrs	r2, r1, #16
 8018726:	189b      	adds	r3, r3, r2
 8018728:	0c1a      	lsrs	r2, r3, #16
 801872a:	b289      	uxth	r1, r1
 801872c:	9205      	str	r2, [sp, #20]
 801872e:	b282      	uxth	r2, r0
 8018730:	1a52      	subs	r2, r2, r1
 8018732:	9904      	ldr	r1, [sp, #16]
 8018734:	0c00      	lsrs	r0, r0, #16
 8018736:	1852      	adds	r2, r2, r1
 8018738:	b29b      	uxth	r3, r3
 801873a:	1411      	asrs	r1, r2, #16
 801873c:	1ac3      	subs	r3, r0, r3
 801873e:	185b      	adds	r3, r3, r1
 8018740:	1419      	asrs	r1, r3, #16
 8018742:	b292      	uxth	r2, r2
 8018744:	041b      	lsls	r3, r3, #16
 8018746:	431a      	orrs	r2, r3
 8018748:	9b03      	ldr	r3, [sp, #12]
 801874a:	9104      	str	r1, [sp, #16]
 801874c:	c504      	stmia	r5!, {r2}
 801874e:	4563      	cmp	r3, ip
 8018750:	d2dc      	bcs.n	801870c <quorem+0x4e>
 8018752:	6823      	ldr	r3, [r4, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d030      	beq.n	80187ba <quorem+0xfc>
 8018758:	0030      	movs	r0, r6
 801875a:	9902      	ldr	r1, [sp, #8]
 801875c:	f001 f9c6 	bl	8019aec <__mcmp>
 8018760:	2800      	cmp	r0, #0
 8018762:	db23      	blt.n	80187ac <quorem+0xee>
 8018764:	0034      	movs	r4, r6
 8018766:	2500      	movs	r5, #0
 8018768:	9902      	ldr	r1, [sp, #8]
 801876a:	3414      	adds	r4, #20
 801876c:	3114      	adds	r1, #20
 801876e:	6823      	ldr	r3, [r4, #0]
 8018770:	c901      	ldmia	r1!, {r0}
 8018772:	9302      	str	r3, [sp, #8]
 8018774:	466b      	mov	r3, sp
 8018776:	891b      	ldrh	r3, [r3, #8]
 8018778:	b282      	uxth	r2, r0
 801877a:	1a9a      	subs	r2, r3, r2
 801877c:	9b02      	ldr	r3, [sp, #8]
 801877e:	1952      	adds	r2, r2, r5
 8018780:	0c00      	lsrs	r0, r0, #16
 8018782:	0c1b      	lsrs	r3, r3, #16
 8018784:	1a1b      	subs	r3, r3, r0
 8018786:	1410      	asrs	r0, r2, #16
 8018788:	181b      	adds	r3, r3, r0
 801878a:	141d      	asrs	r5, r3, #16
 801878c:	b292      	uxth	r2, r2
 801878e:	041b      	lsls	r3, r3, #16
 8018790:	431a      	orrs	r2, r3
 8018792:	9b03      	ldr	r3, [sp, #12]
 8018794:	c404      	stmia	r4!, {r2}
 8018796:	428b      	cmp	r3, r1
 8018798:	d2e9      	bcs.n	801876e <quorem+0xb0>
 801879a:	9a01      	ldr	r2, [sp, #4]
 801879c:	00bb      	lsls	r3, r7, #2
 801879e:	18d3      	adds	r3, r2, r3
 80187a0:	681a      	ldr	r2, [r3, #0]
 80187a2:	2a00      	cmp	r2, #0
 80187a4:	d013      	beq.n	80187ce <quorem+0x110>
 80187a6:	9b00      	ldr	r3, [sp, #0]
 80187a8:	3301      	adds	r3, #1
 80187aa:	9300      	str	r3, [sp, #0]
 80187ac:	9800      	ldr	r0, [sp, #0]
 80187ae:	b007      	add	sp, #28
 80187b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187b2:	6823      	ldr	r3, [r4, #0]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d104      	bne.n	80187c2 <quorem+0x104>
 80187b8:	3f01      	subs	r7, #1
 80187ba:	9b01      	ldr	r3, [sp, #4]
 80187bc:	3c04      	subs	r4, #4
 80187be:	42a3      	cmp	r3, r4
 80187c0:	d3f7      	bcc.n	80187b2 <quorem+0xf4>
 80187c2:	6137      	str	r7, [r6, #16]
 80187c4:	e7c8      	b.n	8018758 <quorem+0x9a>
 80187c6:	681a      	ldr	r2, [r3, #0]
 80187c8:	2a00      	cmp	r2, #0
 80187ca:	d104      	bne.n	80187d6 <quorem+0x118>
 80187cc:	3f01      	subs	r7, #1
 80187ce:	9a01      	ldr	r2, [sp, #4]
 80187d0:	3b04      	subs	r3, #4
 80187d2:	429a      	cmp	r2, r3
 80187d4:	d3f7      	bcc.n	80187c6 <quorem+0x108>
 80187d6:	6137      	str	r7, [r6, #16]
 80187d8:	e7e5      	b.n	80187a6 <quorem+0xe8>
	...

080187dc <_dtoa_r>:
 80187dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187de:	0014      	movs	r4, r2
 80187e0:	001d      	movs	r5, r3
 80187e2:	69c6      	ldr	r6, [r0, #28]
 80187e4:	b09d      	sub	sp, #116	@ 0x74
 80187e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80187e8:	950b      	str	r5, [sp, #44]	@ 0x2c
 80187ea:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80187ec:	9003      	str	r0, [sp, #12]
 80187ee:	2e00      	cmp	r6, #0
 80187f0:	d10f      	bne.n	8018812 <_dtoa_r+0x36>
 80187f2:	2010      	movs	r0, #16
 80187f4:	f000 fe30 	bl	8019458 <malloc>
 80187f8:	9b03      	ldr	r3, [sp, #12]
 80187fa:	1e02      	subs	r2, r0, #0
 80187fc:	61d8      	str	r0, [r3, #28]
 80187fe:	d104      	bne.n	801880a <_dtoa_r+0x2e>
 8018800:	21ef      	movs	r1, #239	@ 0xef
 8018802:	4bc7      	ldr	r3, [pc, #796]	@ (8018b20 <_dtoa_r+0x344>)
 8018804:	48c7      	ldr	r0, [pc, #796]	@ (8018b24 <_dtoa_r+0x348>)
 8018806:	f001 fea1 	bl	801a54c <__assert_func>
 801880a:	6046      	str	r6, [r0, #4]
 801880c:	6086      	str	r6, [r0, #8]
 801880e:	6006      	str	r6, [r0, #0]
 8018810:	60c6      	str	r6, [r0, #12]
 8018812:	9b03      	ldr	r3, [sp, #12]
 8018814:	69db      	ldr	r3, [r3, #28]
 8018816:	6819      	ldr	r1, [r3, #0]
 8018818:	2900      	cmp	r1, #0
 801881a:	d00b      	beq.n	8018834 <_dtoa_r+0x58>
 801881c:	685a      	ldr	r2, [r3, #4]
 801881e:	2301      	movs	r3, #1
 8018820:	4093      	lsls	r3, r2
 8018822:	604a      	str	r2, [r1, #4]
 8018824:	608b      	str	r3, [r1, #8]
 8018826:	9803      	ldr	r0, [sp, #12]
 8018828:	f000 ff16 	bl	8019658 <_Bfree>
 801882c:	2200      	movs	r2, #0
 801882e:	9b03      	ldr	r3, [sp, #12]
 8018830:	69db      	ldr	r3, [r3, #28]
 8018832:	601a      	str	r2, [r3, #0]
 8018834:	2d00      	cmp	r5, #0
 8018836:	da1e      	bge.n	8018876 <_dtoa_r+0x9a>
 8018838:	2301      	movs	r3, #1
 801883a:	603b      	str	r3, [r7, #0]
 801883c:	006b      	lsls	r3, r5, #1
 801883e:	085b      	lsrs	r3, r3, #1
 8018840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018842:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018844:	4bb8      	ldr	r3, [pc, #736]	@ (8018b28 <_dtoa_r+0x34c>)
 8018846:	4ab8      	ldr	r2, [pc, #736]	@ (8018b28 <_dtoa_r+0x34c>)
 8018848:	403b      	ands	r3, r7
 801884a:	4293      	cmp	r3, r2
 801884c:	d116      	bne.n	801887c <_dtoa_r+0xa0>
 801884e:	4bb7      	ldr	r3, [pc, #732]	@ (8018b2c <_dtoa_r+0x350>)
 8018850:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018852:	6013      	str	r3, [r2, #0]
 8018854:	033b      	lsls	r3, r7, #12
 8018856:	0b1b      	lsrs	r3, r3, #12
 8018858:	4323      	orrs	r3, r4
 801885a:	d101      	bne.n	8018860 <_dtoa_r+0x84>
 801885c:	f000 fd83 	bl	8019366 <_dtoa_r+0xb8a>
 8018860:	4bb3      	ldr	r3, [pc, #716]	@ (8018b30 <_dtoa_r+0x354>)
 8018862:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018864:	9308      	str	r3, [sp, #32]
 8018866:	2a00      	cmp	r2, #0
 8018868:	d002      	beq.n	8018870 <_dtoa_r+0x94>
 801886a:	4bb2      	ldr	r3, [pc, #712]	@ (8018b34 <_dtoa_r+0x358>)
 801886c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801886e:	6013      	str	r3, [r2, #0]
 8018870:	9808      	ldr	r0, [sp, #32]
 8018872:	b01d      	add	sp, #116	@ 0x74
 8018874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018876:	2300      	movs	r3, #0
 8018878:	603b      	str	r3, [r7, #0]
 801887a:	e7e2      	b.n	8018842 <_dtoa_r+0x66>
 801887c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801887e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018880:	9212      	str	r2, [sp, #72]	@ 0x48
 8018882:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018884:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018886:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018888:	2200      	movs	r2, #0
 801888a:	2300      	movs	r3, #0
 801888c:	f7e7 fdde 	bl	800044c <__aeabi_dcmpeq>
 8018890:	1e06      	subs	r6, r0, #0
 8018892:	d00b      	beq.n	80188ac <_dtoa_r+0xd0>
 8018894:	2301      	movs	r3, #1
 8018896:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018898:	6013      	str	r3, [r2, #0]
 801889a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801889c:	2b00      	cmp	r3, #0
 801889e:	d002      	beq.n	80188a6 <_dtoa_r+0xca>
 80188a0:	4ba5      	ldr	r3, [pc, #660]	@ (8018b38 <_dtoa_r+0x35c>)
 80188a2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80188a4:	6013      	str	r3, [r2, #0]
 80188a6:	4ba5      	ldr	r3, [pc, #660]	@ (8018b3c <_dtoa_r+0x360>)
 80188a8:	9308      	str	r3, [sp, #32]
 80188aa:	e7e1      	b.n	8018870 <_dtoa_r+0x94>
 80188ac:	ab1a      	add	r3, sp, #104	@ 0x68
 80188ae:	9301      	str	r3, [sp, #4]
 80188b0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80188b2:	9300      	str	r3, [sp, #0]
 80188b4:	9803      	ldr	r0, [sp, #12]
 80188b6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80188b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80188ba:	f001 f9cd 	bl	8019c58 <__d2b>
 80188be:	007a      	lsls	r2, r7, #1
 80188c0:	9005      	str	r0, [sp, #20]
 80188c2:	0d52      	lsrs	r2, r2, #21
 80188c4:	d100      	bne.n	80188c8 <_dtoa_r+0xec>
 80188c6:	e07b      	b.n	80189c0 <_dtoa_r+0x1e4>
 80188c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80188ca:	9618      	str	r6, [sp, #96]	@ 0x60
 80188cc:	0319      	lsls	r1, r3, #12
 80188ce:	4b9c      	ldr	r3, [pc, #624]	@ (8018b40 <_dtoa_r+0x364>)
 80188d0:	0b09      	lsrs	r1, r1, #12
 80188d2:	430b      	orrs	r3, r1
 80188d4:	499b      	ldr	r1, [pc, #620]	@ (8018b44 <_dtoa_r+0x368>)
 80188d6:	1857      	adds	r7, r2, r1
 80188d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80188da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80188dc:	0019      	movs	r1, r3
 80188de:	2200      	movs	r2, #0
 80188e0:	4b99      	ldr	r3, [pc, #612]	@ (8018b48 <_dtoa_r+0x36c>)
 80188e2:	f7ea f8f1 	bl	8002ac8 <__aeabi_dsub>
 80188e6:	4a99      	ldr	r2, [pc, #612]	@ (8018b4c <_dtoa_r+0x370>)
 80188e8:	4b99      	ldr	r3, [pc, #612]	@ (8018b50 <_dtoa_r+0x374>)
 80188ea:	f7e9 fe25 	bl	8002538 <__aeabi_dmul>
 80188ee:	4a99      	ldr	r2, [pc, #612]	@ (8018b54 <_dtoa_r+0x378>)
 80188f0:	4b99      	ldr	r3, [pc, #612]	@ (8018b58 <_dtoa_r+0x37c>)
 80188f2:	f7e8 fe79 	bl	80015e8 <__aeabi_dadd>
 80188f6:	0004      	movs	r4, r0
 80188f8:	0038      	movs	r0, r7
 80188fa:	000d      	movs	r5, r1
 80188fc:	f7ea fcde 	bl	80032bc <__aeabi_i2d>
 8018900:	4a96      	ldr	r2, [pc, #600]	@ (8018b5c <_dtoa_r+0x380>)
 8018902:	4b97      	ldr	r3, [pc, #604]	@ (8018b60 <_dtoa_r+0x384>)
 8018904:	f7e9 fe18 	bl	8002538 <__aeabi_dmul>
 8018908:	0002      	movs	r2, r0
 801890a:	000b      	movs	r3, r1
 801890c:	0020      	movs	r0, r4
 801890e:	0029      	movs	r1, r5
 8018910:	f7e8 fe6a 	bl	80015e8 <__aeabi_dadd>
 8018914:	0004      	movs	r4, r0
 8018916:	000d      	movs	r5, r1
 8018918:	f7ea fc94 	bl	8003244 <__aeabi_d2iz>
 801891c:	2200      	movs	r2, #0
 801891e:	9004      	str	r0, [sp, #16]
 8018920:	2300      	movs	r3, #0
 8018922:	0020      	movs	r0, r4
 8018924:	0029      	movs	r1, r5
 8018926:	f7e7 fd97 	bl	8000458 <__aeabi_dcmplt>
 801892a:	2800      	cmp	r0, #0
 801892c:	d00b      	beq.n	8018946 <_dtoa_r+0x16a>
 801892e:	9804      	ldr	r0, [sp, #16]
 8018930:	f7ea fcc4 	bl	80032bc <__aeabi_i2d>
 8018934:	002b      	movs	r3, r5
 8018936:	0022      	movs	r2, r4
 8018938:	f7e7 fd88 	bl	800044c <__aeabi_dcmpeq>
 801893c:	4243      	negs	r3, r0
 801893e:	4158      	adcs	r0, r3
 8018940:	9b04      	ldr	r3, [sp, #16]
 8018942:	1a1b      	subs	r3, r3, r0
 8018944:	9304      	str	r3, [sp, #16]
 8018946:	2301      	movs	r3, #1
 8018948:	9315      	str	r3, [sp, #84]	@ 0x54
 801894a:	9b04      	ldr	r3, [sp, #16]
 801894c:	2b16      	cmp	r3, #22
 801894e:	d810      	bhi.n	8018972 <_dtoa_r+0x196>
 8018950:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018952:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018954:	9a04      	ldr	r2, [sp, #16]
 8018956:	4b83      	ldr	r3, [pc, #524]	@ (8018b64 <_dtoa_r+0x388>)
 8018958:	00d2      	lsls	r2, r2, #3
 801895a:	189b      	adds	r3, r3, r2
 801895c:	681a      	ldr	r2, [r3, #0]
 801895e:	685b      	ldr	r3, [r3, #4]
 8018960:	f7e7 fd7a 	bl	8000458 <__aeabi_dcmplt>
 8018964:	2800      	cmp	r0, #0
 8018966:	d047      	beq.n	80189f8 <_dtoa_r+0x21c>
 8018968:	9b04      	ldr	r3, [sp, #16]
 801896a:	3b01      	subs	r3, #1
 801896c:	9304      	str	r3, [sp, #16]
 801896e:	2300      	movs	r3, #0
 8018970:	9315      	str	r3, [sp, #84]	@ 0x54
 8018972:	2200      	movs	r2, #0
 8018974:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8018976:	9206      	str	r2, [sp, #24]
 8018978:	1bdb      	subs	r3, r3, r7
 801897a:	1e5a      	subs	r2, r3, #1
 801897c:	d53e      	bpl.n	80189fc <_dtoa_r+0x220>
 801897e:	2201      	movs	r2, #1
 8018980:	1ad3      	subs	r3, r2, r3
 8018982:	9306      	str	r3, [sp, #24]
 8018984:	2300      	movs	r3, #0
 8018986:	930d      	str	r3, [sp, #52]	@ 0x34
 8018988:	9b04      	ldr	r3, [sp, #16]
 801898a:	2b00      	cmp	r3, #0
 801898c:	db38      	blt.n	8018a00 <_dtoa_r+0x224>
 801898e:	9a04      	ldr	r2, [sp, #16]
 8018990:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018992:	4694      	mov	ip, r2
 8018994:	4463      	add	r3, ip
 8018996:	930d      	str	r3, [sp, #52]	@ 0x34
 8018998:	2300      	movs	r3, #0
 801899a:	9214      	str	r2, [sp, #80]	@ 0x50
 801899c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801899e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80189a0:	2401      	movs	r4, #1
 80189a2:	2b09      	cmp	r3, #9
 80189a4:	d867      	bhi.n	8018a76 <_dtoa_r+0x29a>
 80189a6:	2b05      	cmp	r3, #5
 80189a8:	dd02      	ble.n	80189b0 <_dtoa_r+0x1d4>
 80189aa:	2400      	movs	r4, #0
 80189ac:	3b04      	subs	r3, #4
 80189ae:	9322      	str	r3, [sp, #136]	@ 0x88
 80189b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80189b2:	1e98      	subs	r0, r3, #2
 80189b4:	2803      	cmp	r0, #3
 80189b6:	d867      	bhi.n	8018a88 <_dtoa_r+0x2ac>
 80189b8:	f7e7 fbae 	bl	8000118 <__gnu_thumb1_case_uqi>
 80189bc:	5b383a2b 	.word	0x5b383a2b
 80189c0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80189c2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80189c4:	18f6      	adds	r6, r6, r3
 80189c6:	4b68      	ldr	r3, [pc, #416]	@ (8018b68 <_dtoa_r+0x38c>)
 80189c8:	18f2      	adds	r2, r6, r3
 80189ca:	2a20      	cmp	r2, #32
 80189cc:	dd0f      	ble.n	80189ee <_dtoa_r+0x212>
 80189ce:	2340      	movs	r3, #64	@ 0x40
 80189d0:	1a9b      	subs	r3, r3, r2
 80189d2:	409f      	lsls	r7, r3
 80189d4:	4b65      	ldr	r3, [pc, #404]	@ (8018b6c <_dtoa_r+0x390>)
 80189d6:	0038      	movs	r0, r7
 80189d8:	18f3      	adds	r3, r6, r3
 80189da:	40dc      	lsrs	r4, r3
 80189dc:	4320      	orrs	r0, r4
 80189de:	f7ea fc9b 	bl	8003318 <__aeabi_ui2d>
 80189e2:	2201      	movs	r2, #1
 80189e4:	4b62      	ldr	r3, [pc, #392]	@ (8018b70 <_dtoa_r+0x394>)
 80189e6:	1e77      	subs	r7, r6, #1
 80189e8:	18cb      	adds	r3, r1, r3
 80189ea:	9218      	str	r2, [sp, #96]	@ 0x60
 80189ec:	e776      	b.n	80188dc <_dtoa_r+0x100>
 80189ee:	2320      	movs	r3, #32
 80189f0:	0020      	movs	r0, r4
 80189f2:	1a9b      	subs	r3, r3, r2
 80189f4:	4098      	lsls	r0, r3
 80189f6:	e7f2      	b.n	80189de <_dtoa_r+0x202>
 80189f8:	9015      	str	r0, [sp, #84]	@ 0x54
 80189fa:	e7ba      	b.n	8018972 <_dtoa_r+0x196>
 80189fc:	920d      	str	r2, [sp, #52]	@ 0x34
 80189fe:	e7c3      	b.n	8018988 <_dtoa_r+0x1ac>
 8018a00:	9b06      	ldr	r3, [sp, #24]
 8018a02:	9a04      	ldr	r2, [sp, #16]
 8018a04:	1a9b      	subs	r3, r3, r2
 8018a06:	9306      	str	r3, [sp, #24]
 8018a08:	4253      	negs	r3, r2
 8018a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	9314      	str	r3, [sp, #80]	@ 0x50
 8018a10:	e7c5      	b.n	801899e <_dtoa_r+0x1c2>
 8018a12:	2300      	movs	r3, #0
 8018a14:	9310      	str	r3, [sp, #64]	@ 0x40
 8018a16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018a18:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	dc13      	bgt.n	8018a48 <_dtoa_r+0x26c>
 8018a20:	2301      	movs	r3, #1
 8018a22:	001a      	movs	r2, r3
 8018a24:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a28:	9223      	str	r2, [sp, #140]	@ 0x8c
 8018a2a:	e00d      	b.n	8018a48 <_dtoa_r+0x26c>
 8018a2c:	2301      	movs	r3, #1
 8018a2e:	e7f1      	b.n	8018a14 <_dtoa_r+0x238>
 8018a30:	2300      	movs	r3, #0
 8018a32:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018a34:	9310      	str	r3, [sp, #64]	@ 0x40
 8018a36:	4694      	mov	ip, r2
 8018a38:	9b04      	ldr	r3, [sp, #16]
 8018a3a:	4463      	add	r3, ip
 8018a3c:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a3e:	3301      	adds	r3, #1
 8018a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	dc00      	bgt.n	8018a48 <_dtoa_r+0x26c>
 8018a46:	2301      	movs	r3, #1
 8018a48:	9a03      	ldr	r2, [sp, #12]
 8018a4a:	2100      	movs	r1, #0
 8018a4c:	69d0      	ldr	r0, [r2, #28]
 8018a4e:	2204      	movs	r2, #4
 8018a50:	0015      	movs	r5, r2
 8018a52:	3514      	adds	r5, #20
 8018a54:	429d      	cmp	r5, r3
 8018a56:	d91b      	bls.n	8018a90 <_dtoa_r+0x2b4>
 8018a58:	6041      	str	r1, [r0, #4]
 8018a5a:	9803      	ldr	r0, [sp, #12]
 8018a5c:	f000 fdb8 	bl	80195d0 <_Balloc>
 8018a60:	9008      	str	r0, [sp, #32]
 8018a62:	2800      	cmp	r0, #0
 8018a64:	d117      	bne.n	8018a96 <_dtoa_r+0x2ba>
 8018a66:	21b0      	movs	r1, #176	@ 0xb0
 8018a68:	4b42      	ldr	r3, [pc, #264]	@ (8018b74 <_dtoa_r+0x398>)
 8018a6a:	482e      	ldr	r0, [pc, #184]	@ (8018b24 <_dtoa_r+0x348>)
 8018a6c:	9a08      	ldr	r2, [sp, #32]
 8018a6e:	31ff      	adds	r1, #255	@ 0xff
 8018a70:	e6c9      	b.n	8018806 <_dtoa_r+0x2a>
 8018a72:	2301      	movs	r3, #1
 8018a74:	e7dd      	b.n	8018a32 <_dtoa_r+0x256>
 8018a76:	2300      	movs	r3, #0
 8018a78:	9410      	str	r4, [sp, #64]	@ 0x40
 8018a7a:	9322      	str	r3, [sp, #136]	@ 0x88
 8018a7c:	3b01      	subs	r3, #1
 8018a7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a82:	2200      	movs	r2, #0
 8018a84:	3313      	adds	r3, #19
 8018a86:	e7cf      	b.n	8018a28 <_dtoa_r+0x24c>
 8018a88:	2301      	movs	r3, #1
 8018a8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8018a8c:	3b02      	subs	r3, #2
 8018a8e:	e7f6      	b.n	8018a7e <_dtoa_r+0x2a2>
 8018a90:	3101      	adds	r1, #1
 8018a92:	0052      	lsls	r2, r2, #1
 8018a94:	e7dc      	b.n	8018a50 <_dtoa_r+0x274>
 8018a96:	9b03      	ldr	r3, [sp, #12]
 8018a98:	9a08      	ldr	r2, [sp, #32]
 8018a9a:	69db      	ldr	r3, [r3, #28]
 8018a9c:	601a      	str	r2, [r3, #0]
 8018a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018aa0:	2b0e      	cmp	r3, #14
 8018aa2:	d900      	bls.n	8018aa6 <_dtoa_r+0x2ca>
 8018aa4:	e0d9      	b.n	8018c5a <_dtoa_r+0x47e>
 8018aa6:	2c00      	cmp	r4, #0
 8018aa8:	d100      	bne.n	8018aac <_dtoa_r+0x2d0>
 8018aaa:	e0d6      	b.n	8018c5a <_dtoa_r+0x47e>
 8018aac:	9b04      	ldr	r3, [sp, #16]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	dd64      	ble.n	8018b7c <_dtoa_r+0x3a0>
 8018ab2:	210f      	movs	r1, #15
 8018ab4:	9a04      	ldr	r2, [sp, #16]
 8018ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8018b64 <_dtoa_r+0x388>)
 8018ab8:	400a      	ands	r2, r1
 8018aba:	00d2      	lsls	r2, r2, #3
 8018abc:	189b      	adds	r3, r3, r2
 8018abe:	681e      	ldr	r6, [r3, #0]
 8018ac0:	685f      	ldr	r7, [r3, #4]
 8018ac2:	9b04      	ldr	r3, [sp, #16]
 8018ac4:	2402      	movs	r4, #2
 8018ac6:	111d      	asrs	r5, r3, #4
 8018ac8:	05db      	lsls	r3, r3, #23
 8018aca:	d50a      	bpl.n	8018ae2 <_dtoa_r+0x306>
 8018acc:	4b2a      	ldr	r3, [pc, #168]	@ (8018b78 <_dtoa_r+0x39c>)
 8018ace:	400d      	ands	r5, r1
 8018ad0:	6a1a      	ldr	r2, [r3, #32]
 8018ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ad4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018ad6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018ad8:	f7e9 f8ea 	bl	8001cb0 <__aeabi_ddiv>
 8018adc:	900a      	str	r0, [sp, #40]	@ 0x28
 8018ade:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018ae0:	3401      	adds	r4, #1
 8018ae2:	4b25      	ldr	r3, [pc, #148]	@ (8018b78 <_dtoa_r+0x39c>)
 8018ae4:	930c      	str	r3, [sp, #48]	@ 0x30
 8018ae6:	2d00      	cmp	r5, #0
 8018ae8:	d108      	bne.n	8018afc <_dtoa_r+0x320>
 8018aea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018aec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018aee:	0032      	movs	r2, r6
 8018af0:	003b      	movs	r3, r7
 8018af2:	f7e9 f8dd 	bl	8001cb0 <__aeabi_ddiv>
 8018af6:	900a      	str	r0, [sp, #40]	@ 0x28
 8018af8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018afa:	e05a      	b.n	8018bb2 <_dtoa_r+0x3d6>
 8018afc:	2301      	movs	r3, #1
 8018afe:	421d      	tst	r5, r3
 8018b00:	d009      	beq.n	8018b16 <_dtoa_r+0x33a>
 8018b02:	18e4      	adds	r4, r4, r3
 8018b04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b06:	0030      	movs	r0, r6
 8018b08:	681a      	ldr	r2, [r3, #0]
 8018b0a:	685b      	ldr	r3, [r3, #4]
 8018b0c:	0039      	movs	r1, r7
 8018b0e:	f7e9 fd13 	bl	8002538 <__aeabi_dmul>
 8018b12:	0006      	movs	r6, r0
 8018b14:	000f      	movs	r7, r1
 8018b16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b18:	106d      	asrs	r5, r5, #1
 8018b1a:	3308      	adds	r3, #8
 8018b1c:	e7e2      	b.n	8018ae4 <_dtoa_r+0x308>
 8018b1e:	46c0      	nop			@ (mov r8, r8)
 8018b20:	0801c291 	.word	0x0801c291
 8018b24:	0801c2a8 	.word	0x0801c2a8
 8018b28:	7ff00000 	.word	0x7ff00000
 8018b2c:	0000270f 	.word	0x0000270f
 8018b30:	0801c28d 	.word	0x0801c28d
 8018b34:	0801c290 	.word	0x0801c290
 8018b38:	0801c261 	.word	0x0801c261
 8018b3c:	0801c260 	.word	0x0801c260
 8018b40:	3ff00000 	.word	0x3ff00000
 8018b44:	fffffc01 	.word	0xfffffc01
 8018b48:	3ff80000 	.word	0x3ff80000
 8018b4c:	636f4361 	.word	0x636f4361
 8018b50:	3fd287a7 	.word	0x3fd287a7
 8018b54:	8b60c8b3 	.word	0x8b60c8b3
 8018b58:	3fc68a28 	.word	0x3fc68a28
 8018b5c:	509f79fb 	.word	0x509f79fb
 8018b60:	3fd34413 	.word	0x3fd34413
 8018b64:	0801c3a0 	.word	0x0801c3a0
 8018b68:	00000432 	.word	0x00000432
 8018b6c:	00000412 	.word	0x00000412
 8018b70:	fe100000 	.word	0xfe100000
 8018b74:	0801c300 	.word	0x0801c300
 8018b78:	0801c378 	.word	0x0801c378
 8018b7c:	9b04      	ldr	r3, [sp, #16]
 8018b7e:	2402      	movs	r4, #2
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d016      	beq.n	8018bb2 <_dtoa_r+0x3d6>
 8018b84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018b86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018b88:	220f      	movs	r2, #15
 8018b8a:	425d      	negs	r5, r3
 8018b8c:	402a      	ands	r2, r5
 8018b8e:	4bd7      	ldr	r3, [pc, #860]	@ (8018eec <_dtoa_r+0x710>)
 8018b90:	00d2      	lsls	r2, r2, #3
 8018b92:	189b      	adds	r3, r3, r2
 8018b94:	681a      	ldr	r2, [r3, #0]
 8018b96:	685b      	ldr	r3, [r3, #4]
 8018b98:	f7e9 fcce 	bl	8002538 <__aeabi_dmul>
 8018b9c:	2701      	movs	r7, #1
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	900a      	str	r0, [sp, #40]	@ 0x28
 8018ba2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018ba4:	4ed2      	ldr	r6, [pc, #840]	@ (8018ef0 <_dtoa_r+0x714>)
 8018ba6:	112d      	asrs	r5, r5, #4
 8018ba8:	2d00      	cmp	r5, #0
 8018baa:	d000      	beq.n	8018bae <_dtoa_r+0x3d2>
 8018bac:	e0ba      	b.n	8018d24 <_dtoa_r+0x548>
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d1a1      	bne.n	8018af6 <_dtoa_r+0x31a>
 8018bb2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018bb4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018bb6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d100      	bne.n	8018bbe <_dtoa_r+0x3e2>
 8018bbc:	e0bd      	b.n	8018d3a <_dtoa_r+0x55e>
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	0030      	movs	r0, r6
 8018bc2:	0039      	movs	r1, r7
 8018bc4:	4bcb      	ldr	r3, [pc, #812]	@ (8018ef4 <_dtoa_r+0x718>)
 8018bc6:	f7e7 fc47 	bl	8000458 <__aeabi_dcmplt>
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	d100      	bne.n	8018bd0 <_dtoa_r+0x3f4>
 8018bce:	e0b4      	b.n	8018d3a <_dtoa_r+0x55e>
 8018bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d100      	bne.n	8018bd8 <_dtoa_r+0x3fc>
 8018bd6:	e0b0      	b.n	8018d3a <_dtoa_r+0x55e>
 8018bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	dd39      	ble.n	8018c52 <_dtoa_r+0x476>
 8018bde:	9b04      	ldr	r3, [sp, #16]
 8018be0:	2200      	movs	r2, #0
 8018be2:	3b01      	subs	r3, #1
 8018be4:	930c      	str	r3, [sp, #48]	@ 0x30
 8018be6:	0030      	movs	r0, r6
 8018be8:	4bc3      	ldr	r3, [pc, #780]	@ (8018ef8 <_dtoa_r+0x71c>)
 8018bea:	0039      	movs	r1, r7
 8018bec:	f7e9 fca4 	bl	8002538 <__aeabi_dmul>
 8018bf0:	900a      	str	r0, [sp, #40]	@ 0x28
 8018bf2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bf6:	3401      	adds	r4, #1
 8018bf8:	0020      	movs	r0, r4
 8018bfa:	9311      	str	r3, [sp, #68]	@ 0x44
 8018bfc:	f7ea fb5e 	bl	80032bc <__aeabi_i2d>
 8018c00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018c02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018c04:	f7e9 fc98 	bl	8002538 <__aeabi_dmul>
 8018c08:	4bbc      	ldr	r3, [pc, #752]	@ (8018efc <_dtoa_r+0x720>)
 8018c0a:	2200      	movs	r2, #0
 8018c0c:	f7e8 fcec 	bl	80015e8 <__aeabi_dadd>
 8018c10:	4bbb      	ldr	r3, [pc, #748]	@ (8018f00 <_dtoa_r+0x724>)
 8018c12:	0006      	movs	r6, r0
 8018c14:	18cf      	adds	r7, r1, r3
 8018c16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d000      	beq.n	8018c1e <_dtoa_r+0x442>
 8018c1c:	e091      	b.n	8018d42 <_dtoa_r+0x566>
 8018c1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018c20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018c22:	2200      	movs	r2, #0
 8018c24:	4bb7      	ldr	r3, [pc, #732]	@ (8018f04 <_dtoa_r+0x728>)
 8018c26:	f7e9 ff4f 	bl	8002ac8 <__aeabi_dsub>
 8018c2a:	0032      	movs	r2, r6
 8018c2c:	003b      	movs	r3, r7
 8018c2e:	0004      	movs	r4, r0
 8018c30:	000d      	movs	r5, r1
 8018c32:	f7e7 fc25 	bl	8000480 <__aeabi_dcmpgt>
 8018c36:	2800      	cmp	r0, #0
 8018c38:	d000      	beq.n	8018c3c <_dtoa_r+0x460>
 8018c3a:	e29d      	b.n	8019178 <_dtoa_r+0x99c>
 8018c3c:	2180      	movs	r1, #128	@ 0x80
 8018c3e:	0609      	lsls	r1, r1, #24
 8018c40:	187b      	adds	r3, r7, r1
 8018c42:	0032      	movs	r2, r6
 8018c44:	0020      	movs	r0, r4
 8018c46:	0029      	movs	r1, r5
 8018c48:	f7e7 fc06 	bl	8000458 <__aeabi_dcmplt>
 8018c4c:	2800      	cmp	r0, #0
 8018c4e:	d000      	beq.n	8018c52 <_dtoa_r+0x476>
 8018c50:	e130      	b.n	8018eb4 <_dtoa_r+0x6d8>
 8018c52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018c54:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8018c58:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018c5a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	da00      	bge.n	8018c62 <_dtoa_r+0x486>
 8018c60:	e177      	b.n	8018f52 <_dtoa_r+0x776>
 8018c62:	9a04      	ldr	r2, [sp, #16]
 8018c64:	2a0e      	cmp	r2, #14
 8018c66:	dd00      	ble.n	8018c6a <_dtoa_r+0x48e>
 8018c68:	e173      	b.n	8018f52 <_dtoa_r+0x776>
 8018c6a:	4ba0      	ldr	r3, [pc, #640]	@ (8018eec <_dtoa_r+0x710>)
 8018c6c:	00d2      	lsls	r2, r2, #3
 8018c6e:	189b      	adds	r3, r3, r2
 8018c70:	685c      	ldr	r4, [r3, #4]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	9306      	str	r3, [sp, #24]
 8018c76:	9407      	str	r4, [sp, #28]
 8018c78:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	da03      	bge.n	8018c86 <_dtoa_r+0x4aa>
 8018c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	dc00      	bgt.n	8018c86 <_dtoa_r+0x4aa>
 8018c84:	e106      	b.n	8018e94 <_dtoa_r+0x6b8>
 8018c86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018c88:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c8c:	9d08      	ldr	r5, [sp, #32]
 8018c8e:	3b01      	subs	r3, #1
 8018c90:	195b      	adds	r3, r3, r5
 8018c92:	930a      	str	r3, [sp, #40]	@ 0x28
 8018c94:	9a06      	ldr	r2, [sp, #24]
 8018c96:	9b07      	ldr	r3, [sp, #28]
 8018c98:	0030      	movs	r0, r6
 8018c9a:	0039      	movs	r1, r7
 8018c9c:	f7e9 f808 	bl	8001cb0 <__aeabi_ddiv>
 8018ca0:	f7ea fad0 	bl	8003244 <__aeabi_d2iz>
 8018ca4:	9009      	str	r0, [sp, #36]	@ 0x24
 8018ca6:	f7ea fb09 	bl	80032bc <__aeabi_i2d>
 8018caa:	9a06      	ldr	r2, [sp, #24]
 8018cac:	9b07      	ldr	r3, [sp, #28]
 8018cae:	f7e9 fc43 	bl	8002538 <__aeabi_dmul>
 8018cb2:	0002      	movs	r2, r0
 8018cb4:	000b      	movs	r3, r1
 8018cb6:	0030      	movs	r0, r6
 8018cb8:	0039      	movs	r1, r7
 8018cba:	f7e9 ff05 	bl	8002ac8 <__aeabi_dsub>
 8018cbe:	002b      	movs	r3, r5
 8018cc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018cc2:	3501      	adds	r5, #1
 8018cc4:	3230      	adds	r2, #48	@ 0x30
 8018cc6:	701a      	strb	r2, [r3, #0]
 8018cc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018cca:	002c      	movs	r4, r5
 8018ccc:	429a      	cmp	r2, r3
 8018cce:	d000      	beq.n	8018cd2 <_dtoa_r+0x4f6>
 8018cd0:	e131      	b.n	8018f36 <_dtoa_r+0x75a>
 8018cd2:	0002      	movs	r2, r0
 8018cd4:	000b      	movs	r3, r1
 8018cd6:	f7e8 fc87 	bl	80015e8 <__aeabi_dadd>
 8018cda:	9a06      	ldr	r2, [sp, #24]
 8018cdc:	9b07      	ldr	r3, [sp, #28]
 8018cde:	0006      	movs	r6, r0
 8018ce0:	000f      	movs	r7, r1
 8018ce2:	f7e7 fbcd 	bl	8000480 <__aeabi_dcmpgt>
 8018ce6:	2800      	cmp	r0, #0
 8018ce8:	d000      	beq.n	8018cec <_dtoa_r+0x510>
 8018cea:	e10f      	b.n	8018f0c <_dtoa_r+0x730>
 8018cec:	9a06      	ldr	r2, [sp, #24]
 8018cee:	9b07      	ldr	r3, [sp, #28]
 8018cf0:	0030      	movs	r0, r6
 8018cf2:	0039      	movs	r1, r7
 8018cf4:	f7e7 fbaa 	bl	800044c <__aeabi_dcmpeq>
 8018cf8:	2800      	cmp	r0, #0
 8018cfa:	d003      	beq.n	8018d04 <_dtoa_r+0x528>
 8018cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cfe:	07dd      	lsls	r5, r3, #31
 8018d00:	d500      	bpl.n	8018d04 <_dtoa_r+0x528>
 8018d02:	e103      	b.n	8018f0c <_dtoa_r+0x730>
 8018d04:	9905      	ldr	r1, [sp, #20]
 8018d06:	9803      	ldr	r0, [sp, #12]
 8018d08:	f000 fca6 	bl	8019658 <_Bfree>
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	7023      	strb	r3, [r4, #0]
 8018d10:	9b04      	ldr	r3, [sp, #16]
 8018d12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018d14:	3301      	adds	r3, #1
 8018d16:	6013      	str	r3, [r2, #0]
 8018d18:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d100      	bne.n	8018d20 <_dtoa_r+0x544>
 8018d1e:	e5a7      	b.n	8018870 <_dtoa_r+0x94>
 8018d20:	601c      	str	r4, [r3, #0]
 8018d22:	e5a5      	b.n	8018870 <_dtoa_r+0x94>
 8018d24:	423d      	tst	r5, r7
 8018d26:	d005      	beq.n	8018d34 <_dtoa_r+0x558>
 8018d28:	6832      	ldr	r2, [r6, #0]
 8018d2a:	6873      	ldr	r3, [r6, #4]
 8018d2c:	f7e9 fc04 	bl	8002538 <__aeabi_dmul>
 8018d30:	003b      	movs	r3, r7
 8018d32:	3401      	adds	r4, #1
 8018d34:	106d      	asrs	r5, r5, #1
 8018d36:	3608      	adds	r6, #8
 8018d38:	e736      	b.n	8018ba8 <_dtoa_r+0x3cc>
 8018d3a:	9b04      	ldr	r3, [sp, #16]
 8018d3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d40:	e75a      	b.n	8018bf8 <_dtoa_r+0x41c>
 8018d42:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018d44:	4b69      	ldr	r3, [pc, #420]	@ (8018eec <_dtoa_r+0x710>)
 8018d46:	3a01      	subs	r2, #1
 8018d48:	00d2      	lsls	r2, r2, #3
 8018d4a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018d4c:	189b      	adds	r3, r3, r2
 8018d4e:	681a      	ldr	r2, [r3, #0]
 8018d50:	685b      	ldr	r3, [r3, #4]
 8018d52:	2900      	cmp	r1, #0
 8018d54:	d04c      	beq.n	8018df0 <_dtoa_r+0x614>
 8018d56:	2000      	movs	r0, #0
 8018d58:	496b      	ldr	r1, [pc, #428]	@ (8018f08 <_dtoa_r+0x72c>)
 8018d5a:	f7e8 ffa9 	bl	8001cb0 <__aeabi_ddiv>
 8018d5e:	0032      	movs	r2, r6
 8018d60:	003b      	movs	r3, r7
 8018d62:	f7e9 feb1 	bl	8002ac8 <__aeabi_dsub>
 8018d66:	9a08      	ldr	r2, [sp, #32]
 8018d68:	0006      	movs	r6, r0
 8018d6a:	4694      	mov	ip, r2
 8018d6c:	000f      	movs	r7, r1
 8018d6e:	9b08      	ldr	r3, [sp, #32]
 8018d70:	9316      	str	r3, [sp, #88]	@ 0x58
 8018d72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d74:	4463      	add	r3, ip
 8018d76:	9311      	str	r3, [sp, #68]	@ 0x44
 8018d78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018d7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018d7c:	f7ea fa62 	bl	8003244 <__aeabi_d2iz>
 8018d80:	0005      	movs	r5, r0
 8018d82:	f7ea fa9b 	bl	80032bc <__aeabi_i2d>
 8018d86:	0002      	movs	r2, r0
 8018d88:	000b      	movs	r3, r1
 8018d8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018d8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018d8e:	f7e9 fe9b 	bl	8002ac8 <__aeabi_dsub>
 8018d92:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018d94:	3530      	adds	r5, #48	@ 0x30
 8018d96:	1c5c      	adds	r4, r3, #1
 8018d98:	701d      	strb	r5, [r3, #0]
 8018d9a:	0032      	movs	r2, r6
 8018d9c:	003b      	movs	r3, r7
 8018d9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018da0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018da2:	f7e7 fb59 	bl	8000458 <__aeabi_dcmplt>
 8018da6:	2800      	cmp	r0, #0
 8018da8:	d16a      	bne.n	8018e80 <_dtoa_r+0x6a4>
 8018daa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018dac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018dae:	2000      	movs	r0, #0
 8018db0:	4950      	ldr	r1, [pc, #320]	@ (8018ef4 <_dtoa_r+0x718>)
 8018db2:	f7e9 fe89 	bl	8002ac8 <__aeabi_dsub>
 8018db6:	0032      	movs	r2, r6
 8018db8:	003b      	movs	r3, r7
 8018dba:	f7e7 fb4d 	bl	8000458 <__aeabi_dcmplt>
 8018dbe:	2800      	cmp	r0, #0
 8018dc0:	d000      	beq.n	8018dc4 <_dtoa_r+0x5e8>
 8018dc2:	e0a5      	b.n	8018f10 <_dtoa_r+0x734>
 8018dc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018dc6:	42a3      	cmp	r3, r4
 8018dc8:	d100      	bne.n	8018dcc <_dtoa_r+0x5f0>
 8018dca:	e742      	b.n	8018c52 <_dtoa_r+0x476>
 8018dcc:	2200      	movs	r2, #0
 8018dce:	0030      	movs	r0, r6
 8018dd0:	0039      	movs	r1, r7
 8018dd2:	4b49      	ldr	r3, [pc, #292]	@ (8018ef8 <_dtoa_r+0x71c>)
 8018dd4:	f7e9 fbb0 	bl	8002538 <__aeabi_dmul>
 8018dd8:	2200      	movs	r2, #0
 8018dda:	0006      	movs	r6, r0
 8018ddc:	000f      	movs	r7, r1
 8018dde:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018de0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018de2:	4b45      	ldr	r3, [pc, #276]	@ (8018ef8 <_dtoa_r+0x71c>)
 8018de4:	f7e9 fba8 	bl	8002538 <__aeabi_dmul>
 8018de8:	9416      	str	r4, [sp, #88]	@ 0x58
 8018dea:	900a      	str	r0, [sp, #40]	@ 0x28
 8018dec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018dee:	e7c3      	b.n	8018d78 <_dtoa_r+0x59c>
 8018df0:	0030      	movs	r0, r6
 8018df2:	0039      	movs	r1, r7
 8018df4:	f7e9 fba0 	bl	8002538 <__aeabi_dmul>
 8018df8:	9d08      	ldr	r5, [sp, #32]
 8018dfa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018dfc:	002b      	movs	r3, r5
 8018dfe:	4694      	mov	ip, r2
 8018e00:	9016      	str	r0, [sp, #88]	@ 0x58
 8018e02:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018e04:	4463      	add	r3, ip
 8018e06:	9319      	str	r3, [sp, #100]	@ 0x64
 8018e08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018e0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018e0c:	f7ea fa1a 	bl	8003244 <__aeabi_d2iz>
 8018e10:	0004      	movs	r4, r0
 8018e12:	f7ea fa53 	bl	80032bc <__aeabi_i2d>
 8018e16:	000b      	movs	r3, r1
 8018e18:	0002      	movs	r2, r0
 8018e1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018e1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018e1e:	f7e9 fe53 	bl	8002ac8 <__aeabi_dsub>
 8018e22:	3430      	adds	r4, #48	@ 0x30
 8018e24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018e26:	702c      	strb	r4, [r5, #0]
 8018e28:	3501      	adds	r5, #1
 8018e2a:	0006      	movs	r6, r0
 8018e2c:	000f      	movs	r7, r1
 8018e2e:	42ab      	cmp	r3, r5
 8018e30:	d129      	bne.n	8018e86 <_dtoa_r+0x6aa>
 8018e32:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8018e34:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018e36:	9b08      	ldr	r3, [sp, #32]
 8018e38:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018e3a:	469c      	mov	ip, r3
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	4b32      	ldr	r3, [pc, #200]	@ (8018f08 <_dtoa_r+0x72c>)
 8018e40:	4464      	add	r4, ip
 8018e42:	f7e8 fbd1 	bl	80015e8 <__aeabi_dadd>
 8018e46:	0002      	movs	r2, r0
 8018e48:	000b      	movs	r3, r1
 8018e4a:	0030      	movs	r0, r6
 8018e4c:	0039      	movs	r1, r7
 8018e4e:	f7e7 fb17 	bl	8000480 <__aeabi_dcmpgt>
 8018e52:	2800      	cmp	r0, #0
 8018e54:	d15c      	bne.n	8018f10 <_dtoa_r+0x734>
 8018e56:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018e58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018e5a:	2000      	movs	r0, #0
 8018e5c:	492a      	ldr	r1, [pc, #168]	@ (8018f08 <_dtoa_r+0x72c>)
 8018e5e:	f7e9 fe33 	bl	8002ac8 <__aeabi_dsub>
 8018e62:	0002      	movs	r2, r0
 8018e64:	000b      	movs	r3, r1
 8018e66:	0030      	movs	r0, r6
 8018e68:	0039      	movs	r1, r7
 8018e6a:	f7e7 faf5 	bl	8000458 <__aeabi_dcmplt>
 8018e6e:	2800      	cmp	r0, #0
 8018e70:	d100      	bne.n	8018e74 <_dtoa_r+0x698>
 8018e72:	e6ee      	b.n	8018c52 <_dtoa_r+0x476>
 8018e74:	0023      	movs	r3, r4
 8018e76:	3c01      	subs	r4, #1
 8018e78:	7822      	ldrb	r2, [r4, #0]
 8018e7a:	2a30      	cmp	r2, #48	@ 0x30
 8018e7c:	d0fa      	beq.n	8018e74 <_dtoa_r+0x698>
 8018e7e:	001c      	movs	r4, r3
 8018e80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018e82:	9304      	str	r3, [sp, #16]
 8018e84:	e73e      	b.n	8018d04 <_dtoa_r+0x528>
 8018e86:	2200      	movs	r2, #0
 8018e88:	4b1b      	ldr	r3, [pc, #108]	@ (8018ef8 <_dtoa_r+0x71c>)
 8018e8a:	f7e9 fb55 	bl	8002538 <__aeabi_dmul>
 8018e8e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018e90:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018e92:	e7b9      	b.n	8018e08 <_dtoa_r+0x62c>
 8018e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d10c      	bne.n	8018eb4 <_dtoa_r+0x6d8>
 8018e9a:	9806      	ldr	r0, [sp, #24]
 8018e9c:	9907      	ldr	r1, [sp, #28]
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	4b18      	ldr	r3, [pc, #96]	@ (8018f04 <_dtoa_r+0x728>)
 8018ea2:	f7e9 fb49 	bl	8002538 <__aeabi_dmul>
 8018ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018ea8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018eaa:	f7e7 faf3 	bl	8000494 <__aeabi_dcmpge>
 8018eae:	2800      	cmp	r0, #0
 8018eb0:	d100      	bne.n	8018eb4 <_dtoa_r+0x6d8>
 8018eb2:	e164      	b.n	801917e <_dtoa_r+0x9a2>
 8018eb4:	2600      	movs	r6, #0
 8018eb6:	0037      	movs	r7, r6
 8018eb8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018eba:	9c08      	ldr	r4, [sp, #32]
 8018ebc:	43db      	mvns	r3, r3
 8018ebe:	930c      	str	r3, [sp, #48]	@ 0x30
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	9304      	str	r3, [sp, #16]
 8018ec4:	0031      	movs	r1, r6
 8018ec6:	9803      	ldr	r0, [sp, #12]
 8018ec8:	f000 fbc6 	bl	8019658 <_Bfree>
 8018ecc:	2f00      	cmp	r7, #0
 8018ece:	d0d7      	beq.n	8018e80 <_dtoa_r+0x6a4>
 8018ed0:	9b04      	ldr	r3, [sp, #16]
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d005      	beq.n	8018ee2 <_dtoa_r+0x706>
 8018ed6:	42bb      	cmp	r3, r7
 8018ed8:	d003      	beq.n	8018ee2 <_dtoa_r+0x706>
 8018eda:	0019      	movs	r1, r3
 8018edc:	9803      	ldr	r0, [sp, #12]
 8018ede:	f000 fbbb 	bl	8019658 <_Bfree>
 8018ee2:	0039      	movs	r1, r7
 8018ee4:	9803      	ldr	r0, [sp, #12]
 8018ee6:	f000 fbb7 	bl	8019658 <_Bfree>
 8018eea:	e7c9      	b.n	8018e80 <_dtoa_r+0x6a4>
 8018eec:	0801c3a0 	.word	0x0801c3a0
 8018ef0:	0801c378 	.word	0x0801c378
 8018ef4:	3ff00000 	.word	0x3ff00000
 8018ef8:	40240000 	.word	0x40240000
 8018efc:	401c0000 	.word	0x401c0000
 8018f00:	fcc00000 	.word	0xfcc00000
 8018f04:	40140000 	.word	0x40140000
 8018f08:	3fe00000 	.word	0x3fe00000
 8018f0c:	9b04      	ldr	r3, [sp, #16]
 8018f0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8018f10:	0023      	movs	r3, r4
 8018f12:	001c      	movs	r4, r3
 8018f14:	3b01      	subs	r3, #1
 8018f16:	781a      	ldrb	r2, [r3, #0]
 8018f18:	2a39      	cmp	r2, #57	@ 0x39
 8018f1a:	d108      	bne.n	8018f2e <_dtoa_r+0x752>
 8018f1c:	9a08      	ldr	r2, [sp, #32]
 8018f1e:	429a      	cmp	r2, r3
 8018f20:	d1f7      	bne.n	8018f12 <_dtoa_r+0x736>
 8018f22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018f24:	9908      	ldr	r1, [sp, #32]
 8018f26:	3201      	adds	r2, #1
 8018f28:	920c      	str	r2, [sp, #48]	@ 0x30
 8018f2a:	2230      	movs	r2, #48	@ 0x30
 8018f2c:	700a      	strb	r2, [r1, #0]
 8018f2e:	781a      	ldrb	r2, [r3, #0]
 8018f30:	3201      	adds	r2, #1
 8018f32:	701a      	strb	r2, [r3, #0]
 8018f34:	e7a4      	b.n	8018e80 <_dtoa_r+0x6a4>
 8018f36:	2200      	movs	r2, #0
 8018f38:	4bc6      	ldr	r3, [pc, #792]	@ (8019254 <_dtoa_r+0xa78>)
 8018f3a:	f7e9 fafd 	bl	8002538 <__aeabi_dmul>
 8018f3e:	2200      	movs	r2, #0
 8018f40:	2300      	movs	r3, #0
 8018f42:	0006      	movs	r6, r0
 8018f44:	000f      	movs	r7, r1
 8018f46:	f7e7 fa81 	bl	800044c <__aeabi_dcmpeq>
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	d100      	bne.n	8018f50 <_dtoa_r+0x774>
 8018f4e:	e6a1      	b.n	8018c94 <_dtoa_r+0x4b8>
 8018f50:	e6d8      	b.n	8018d04 <_dtoa_r+0x528>
 8018f52:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018f54:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018f56:	9c06      	ldr	r4, [sp, #24]
 8018f58:	2f00      	cmp	r7, #0
 8018f5a:	d014      	beq.n	8018f86 <_dtoa_r+0x7aa>
 8018f5c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018f5e:	2a01      	cmp	r2, #1
 8018f60:	dd00      	ble.n	8018f64 <_dtoa_r+0x788>
 8018f62:	e0c8      	b.n	80190f6 <_dtoa_r+0x91a>
 8018f64:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018f66:	2a00      	cmp	r2, #0
 8018f68:	d100      	bne.n	8018f6c <_dtoa_r+0x790>
 8018f6a:	e0be      	b.n	80190ea <_dtoa_r+0x90e>
 8018f6c:	4aba      	ldr	r2, [pc, #744]	@ (8019258 <_dtoa_r+0xa7c>)
 8018f6e:	189b      	adds	r3, r3, r2
 8018f70:	9a06      	ldr	r2, [sp, #24]
 8018f72:	2101      	movs	r1, #1
 8018f74:	18d2      	adds	r2, r2, r3
 8018f76:	9206      	str	r2, [sp, #24]
 8018f78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018f7a:	9803      	ldr	r0, [sp, #12]
 8018f7c:	18d3      	adds	r3, r2, r3
 8018f7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018f80:	f000 fc22 	bl	80197c8 <__i2b>
 8018f84:	0007      	movs	r7, r0
 8018f86:	2c00      	cmp	r4, #0
 8018f88:	d00e      	beq.n	8018fa8 <_dtoa_r+0x7cc>
 8018f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	dd0b      	ble.n	8018fa8 <_dtoa_r+0x7cc>
 8018f90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018f92:	0023      	movs	r3, r4
 8018f94:	4294      	cmp	r4, r2
 8018f96:	dd00      	ble.n	8018f9a <_dtoa_r+0x7be>
 8018f98:	0013      	movs	r3, r2
 8018f9a:	9a06      	ldr	r2, [sp, #24]
 8018f9c:	1ae4      	subs	r4, r4, r3
 8018f9e:	1ad2      	subs	r2, r2, r3
 8018fa0:	9206      	str	r2, [sp, #24]
 8018fa2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018fa4:	1ad3      	subs	r3, r2, r3
 8018fa6:	930d      	str	r3, [sp, #52]	@ 0x34
 8018fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d01f      	beq.n	8018fee <_dtoa_r+0x812>
 8018fae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d100      	bne.n	8018fb6 <_dtoa_r+0x7da>
 8018fb4:	e0b5      	b.n	8019122 <_dtoa_r+0x946>
 8018fb6:	2d00      	cmp	r5, #0
 8018fb8:	d010      	beq.n	8018fdc <_dtoa_r+0x800>
 8018fba:	0039      	movs	r1, r7
 8018fbc:	002a      	movs	r2, r5
 8018fbe:	9803      	ldr	r0, [sp, #12]
 8018fc0:	f000 fccc 	bl	801995c <__pow5mult>
 8018fc4:	9a05      	ldr	r2, [sp, #20]
 8018fc6:	0001      	movs	r1, r0
 8018fc8:	0007      	movs	r7, r0
 8018fca:	9803      	ldr	r0, [sp, #12]
 8018fcc:	f000 fc14 	bl	80197f8 <__multiply>
 8018fd0:	0006      	movs	r6, r0
 8018fd2:	9905      	ldr	r1, [sp, #20]
 8018fd4:	9803      	ldr	r0, [sp, #12]
 8018fd6:	f000 fb3f 	bl	8019658 <_Bfree>
 8018fda:	9605      	str	r6, [sp, #20]
 8018fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018fde:	1b5a      	subs	r2, r3, r5
 8018fe0:	42ab      	cmp	r3, r5
 8018fe2:	d004      	beq.n	8018fee <_dtoa_r+0x812>
 8018fe4:	9905      	ldr	r1, [sp, #20]
 8018fe6:	9803      	ldr	r0, [sp, #12]
 8018fe8:	f000 fcb8 	bl	801995c <__pow5mult>
 8018fec:	9005      	str	r0, [sp, #20]
 8018fee:	2101      	movs	r1, #1
 8018ff0:	9803      	ldr	r0, [sp, #12]
 8018ff2:	f000 fbe9 	bl	80197c8 <__i2b>
 8018ff6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018ff8:	0006      	movs	r6, r0
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d100      	bne.n	8019000 <_dtoa_r+0x824>
 8018ffe:	e1bc      	b.n	801937a <_dtoa_r+0xb9e>
 8019000:	001a      	movs	r2, r3
 8019002:	0001      	movs	r1, r0
 8019004:	9803      	ldr	r0, [sp, #12]
 8019006:	f000 fca9 	bl	801995c <__pow5mult>
 801900a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801900c:	0006      	movs	r6, r0
 801900e:	2500      	movs	r5, #0
 8019010:	2b01      	cmp	r3, #1
 8019012:	dc16      	bgt.n	8019042 <_dtoa_r+0x866>
 8019014:	2500      	movs	r5, #0
 8019016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019018:	42ab      	cmp	r3, r5
 801901a:	d10e      	bne.n	801903a <_dtoa_r+0x85e>
 801901c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801901e:	031b      	lsls	r3, r3, #12
 8019020:	42ab      	cmp	r3, r5
 8019022:	d10a      	bne.n	801903a <_dtoa_r+0x85e>
 8019024:	4b8d      	ldr	r3, [pc, #564]	@ (801925c <_dtoa_r+0xa80>)
 8019026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019028:	4213      	tst	r3, r2
 801902a:	d006      	beq.n	801903a <_dtoa_r+0x85e>
 801902c:	9b06      	ldr	r3, [sp, #24]
 801902e:	3501      	adds	r5, #1
 8019030:	3301      	adds	r3, #1
 8019032:	9306      	str	r3, [sp, #24]
 8019034:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019036:	3301      	adds	r3, #1
 8019038:	930d      	str	r3, [sp, #52]	@ 0x34
 801903a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801903c:	2001      	movs	r0, #1
 801903e:	2b00      	cmp	r3, #0
 8019040:	d008      	beq.n	8019054 <_dtoa_r+0x878>
 8019042:	6933      	ldr	r3, [r6, #16]
 8019044:	3303      	adds	r3, #3
 8019046:	009b      	lsls	r3, r3, #2
 8019048:	18f3      	adds	r3, r6, r3
 801904a:	6858      	ldr	r0, [r3, #4]
 801904c:	f000 fb6c 	bl	8019728 <__hi0bits>
 8019050:	2320      	movs	r3, #32
 8019052:	1a18      	subs	r0, r3, r0
 8019054:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019056:	1818      	adds	r0, r3, r0
 8019058:	0002      	movs	r2, r0
 801905a:	231f      	movs	r3, #31
 801905c:	401a      	ands	r2, r3
 801905e:	4218      	tst	r0, r3
 8019060:	d065      	beq.n	801912e <_dtoa_r+0x952>
 8019062:	3301      	adds	r3, #1
 8019064:	1a9b      	subs	r3, r3, r2
 8019066:	2b04      	cmp	r3, #4
 8019068:	dd5d      	ble.n	8019126 <_dtoa_r+0x94a>
 801906a:	231c      	movs	r3, #28
 801906c:	1a9b      	subs	r3, r3, r2
 801906e:	9a06      	ldr	r2, [sp, #24]
 8019070:	18e4      	adds	r4, r4, r3
 8019072:	18d2      	adds	r2, r2, r3
 8019074:	9206      	str	r2, [sp, #24]
 8019076:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019078:	18d3      	adds	r3, r2, r3
 801907a:	930d      	str	r3, [sp, #52]	@ 0x34
 801907c:	9b06      	ldr	r3, [sp, #24]
 801907e:	2b00      	cmp	r3, #0
 8019080:	dd05      	ble.n	801908e <_dtoa_r+0x8b2>
 8019082:	001a      	movs	r2, r3
 8019084:	9905      	ldr	r1, [sp, #20]
 8019086:	9803      	ldr	r0, [sp, #12]
 8019088:	f000 fcc4 	bl	8019a14 <__lshift>
 801908c:	9005      	str	r0, [sp, #20]
 801908e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019090:	2b00      	cmp	r3, #0
 8019092:	dd05      	ble.n	80190a0 <_dtoa_r+0x8c4>
 8019094:	0031      	movs	r1, r6
 8019096:	001a      	movs	r2, r3
 8019098:	9803      	ldr	r0, [sp, #12]
 801909a:	f000 fcbb 	bl	8019a14 <__lshift>
 801909e:	0006      	movs	r6, r0
 80190a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d045      	beq.n	8019132 <_dtoa_r+0x956>
 80190a6:	0031      	movs	r1, r6
 80190a8:	9805      	ldr	r0, [sp, #20]
 80190aa:	f000 fd1f 	bl	8019aec <__mcmp>
 80190ae:	2800      	cmp	r0, #0
 80190b0:	da3f      	bge.n	8019132 <_dtoa_r+0x956>
 80190b2:	9b04      	ldr	r3, [sp, #16]
 80190b4:	220a      	movs	r2, #10
 80190b6:	3b01      	subs	r3, #1
 80190b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80190ba:	9905      	ldr	r1, [sp, #20]
 80190bc:	2300      	movs	r3, #0
 80190be:	9803      	ldr	r0, [sp, #12]
 80190c0:	f000 faee 	bl	80196a0 <__multadd>
 80190c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80190c6:	9005      	str	r0, [sp, #20]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d100      	bne.n	80190ce <_dtoa_r+0x8f2>
 80190cc:	e15c      	b.n	8019388 <_dtoa_r+0xbac>
 80190ce:	2300      	movs	r3, #0
 80190d0:	0039      	movs	r1, r7
 80190d2:	220a      	movs	r2, #10
 80190d4:	9803      	ldr	r0, [sp, #12]
 80190d6:	f000 fae3 	bl	80196a0 <__multadd>
 80190da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80190dc:	0007      	movs	r7, r0
 80190de:	2b00      	cmp	r3, #0
 80190e0:	dc55      	bgt.n	801918e <_dtoa_r+0x9b2>
 80190e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80190e4:	2b02      	cmp	r3, #2
 80190e6:	dc2d      	bgt.n	8019144 <_dtoa_r+0x968>
 80190e8:	e051      	b.n	801918e <_dtoa_r+0x9b2>
 80190ea:	2336      	movs	r3, #54	@ 0x36
 80190ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80190ee:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80190f0:	9c06      	ldr	r4, [sp, #24]
 80190f2:	1a9b      	subs	r3, r3, r2
 80190f4:	e73c      	b.n	8018f70 <_dtoa_r+0x794>
 80190f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190f8:	1e5d      	subs	r5, r3, #1
 80190fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80190fc:	42ab      	cmp	r3, r5
 80190fe:	db08      	blt.n	8019112 <_dtoa_r+0x936>
 8019100:	1b5d      	subs	r5, r3, r5
 8019102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019104:	9c06      	ldr	r4, [sp, #24]
 8019106:	2b00      	cmp	r3, #0
 8019108:	db00      	blt.n	801910c <_dtoa_r+0x930>
 801910a:	e731      	b.n	8018f70 <_dtoa_r+0x794>
 801910c:	1ae4      	subs	r4, r4, r3
 801910e:	2300      	movs	r3, #0
 8019110:	e72e      	b.n	8018f70 <_dtoa_r+0x794>
 8019112:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019114:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019116:	1aeb      	subs	r3, r5, r3
 8019118:	18d3      	adds	r3, r2, r3
 801911a:	950f      	str	r5, [sp, #60]	@ 0x3c
 801911c:	9314      	str	r3, [sp, #80]	@ 0x50
 801911e:	2500      	movs	r5, #0
 8019120:	e7ef      	b.n	8019102 <_dtoa_r+0x926>
 8019122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019124:	e75e      	b.n	8018fe4 <_dtoa_r+0x808>
 8019126:	2b04      	cmp	r3, #4
 8019128:	d0a8      	beq.n	801907c <_dtoa_r+0x8a0>
 801912a:	331c      	adds	r3, #28
 801912c:	e79f      	b.n	801906e <_dtoa_r+0x892>
 801912e:	0013      	movs	r3, r2
 8019130:	e7fb      	b.n	801912a <_dtoa_r+0x94e>
 8019132:	9b04      	ldr	r3, [sp, #16]
 8019134:	930c      	str	r3, [sp, #48]	@ 0x30
 8019136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019138:	930e      	str	r3, [sp, #56]	@ 0x38
 801913a:	2b00      	cmp	r3, #0
 801913c:	dc23      	bgt.n	8019186 <_dtoa_r+0x9aa>
 801913e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019140:	2b02      	cmp	r3, #2
 8019142:	dd20      	ble.n	8019186 <_dtoa_r+0x9aa>
 8019144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019146:	2b00      	cmp	r3, #0
 8019148:	d000      	beq.n	801914c <_dtoa_r+0x970>
 801914a:	e6b5      	b.n	8018eb8 <_dtoa_r+0x6dc>
 801914c:	0031      	movs	r1, r6
 801914e:	2205      	movs	r2, #5
 8019150:	9803      	ldr	r0, [sp, #12]
 8019152:	f000 faa5 	bl	80196a0 <__multadd>
 8019156:	0006      	movs	r6, r0
 8019158:	0001      	movs	r1, r0
 801915a:	9805      	ldr	r0, [sp, #20]
 801915c:	f000 fcc6 	bl	8019aec <__mcmp>
 8019160:	2800      	cmp	r0, #0
 8019162:	dc00      	bgt.n	8019166 <_dtoa_r+0x98a>
 8019164:	e6a8      	b.n	8018eb8 <_dtoa_r+0x6dc>
 8019166:	9b08      	ldr	r3, [sp, #32]
 8019168:	9a08      	ldr	r2, [sp, #32]
 801916a:	1c5c      	adds	r4, r3, #1
 801916c:	2331      	movs	r3, #49	@ 0x31
 801916e:	7013      	strb	r3, [r2, #0]
 8019170:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019172:	3301      	adds	r3, #1
 8019174:	930c      	str	r3, [sp, #48]	@ 0x30
 8019176:	e6a3      	b.n	8018ec0 <_dtoa_r+0x6e4>
 8019178:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801917a:	0037      	movs	r7, r6
 801917c:	e7f3      	b.n	8019166 <_dtoa_r+0x98a>
 801917e:	9b04      	ldr	r3, [sp, #16]
 8019180:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8019182:	930c      	str	r3, [sp, #48]	@ 0x30
 8019184:	e7f9      	b.n	801917a <_dtoa_r+0x99e>
 8019186:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019188:	2b00      	cmp	r3, #0
 801918a:	d100      	bne.n	801918e <_dtoa_r+0x9b2>
 801918c:	e100      	b.n	8019390 <_dtoa_r+0xbb4>
 801918e:	2c00      	cmp	r4, #0
 8019190:	dd05      	ble.n	801919e <_dtoa_r+0x9c2>
 8019192:	0039      	movs	r1, r7
 8019194:	0022      	movs	r2, r4
 8019196:	9803      	ldr	r0, [sp, #12]
 8019198:	f000 fc3c 	bl	8019a14 <__lshift>
 801919c:	0007      	movs	r7, r0
 801919e:	0038      	movs	r0, r7
 80191a0:	2d00      	cmp	r5, #0
 80191a2:	d018      	beq.n	80191d6 <_dtoa_r+0x9fa>
 80191a4:	6879      	ldr	r1, [r7, #4]
 80191a6:	9803      	ldr	r0, [sp, #12]
 80191a8:	f000 fa12 	bl	80195d0 <_Balloc>
 80191ac:	1e04      	subs	r4, r0, #0
 80191ae:	d105      	bne.n	80191bc <_dtoa_r+0x9e0>
 80191b0:	0022      	movs	r2, r4
 80191b2:	4b2b      	ldr	r3, [pc, #172]	@ (8019260 <_dtoa_r+0xa84>)
 80191b4:	482b      	ldr	r0, [pc, #172]	@ (8019264 <_dtoa_r+0xa88>)
 80191b6:	492c      	ldr	r1, [pc, #176]	@ (8019268 <_dtoa_r+0xa8c>)
 80191b8:	f7ff fb25 	bl	8018806 <_dtoa_r+0x2a>
 80191bc:	0039      	movs	r1, r7
 80191be:	693a      	ldr	r2, [r7, #16]
 80191c0:	310c      	adds	r1, #12
 80191c2:	3202      	adds	r2, #2
 80191c4:	0092      	lsls	r2, r2, #2
 80191c6:	300c      	adds	r0, #12
 80191c8:	f7ff fa70 	bl	80186ac <memcpy>
 80191cc:	2201      	movs	r2, #1
 80191ce:	0021      	movs	r1, r4
 80191d0:	9803      	ldr	r0, [sp, #12]
 80191d2:	f000 fc1f 	bl	8019a14 <__lshift>
 80191d6:	9b08      	ldr	r3, [sp, #32]
 80191d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80191da:	9306      	str	r3, [sp, #24]
 80191dc:	3b01      	subs	r3, #1
 80191de:	189b      	adds	r3, r3, r2
 80191e0:	2201      	movs	r2, #1
 80191e2:	9704      	str	r7, [sp, #16]
 80191e4:	0007      	movs	r7, r0
 80191e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80191e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80191ea:	4013      	ands	r3, r2
 80191ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80191ee:	0031      	movs	r1, r6
 80191f0:	9805      	ldr	r0, [sp, #20]
 80191f2:	f7ff fa64 	bl	80186be <quorem>
 80191f6:	9904      	ldr	r1, [sp, #16]
 80191f8:	0005      	movs	r5, r0
 80191fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80191fc:	9805      	ldr	r0, [sp, #20]
 80191fe:	f000 fc75 	bl	8019aec <__mcmp>
 8019202:	003a      	movs	r2, r7
 8019204:	900d      	str	r0, [sp, #52]	@ 0x34
 8019206:	0031      	movs	r1, r6
 8019208:	9803      	ldr	r0, [sp, #12]
 801920a:	f000 fc8b 	bl	8019b24 <__mdiff>
 801920e:	2201      	movs	r2, #1
 8019210:	68c3      	ldr	r3, [r0, #12]
 8019212:	0004      	movs	r4, r0
 8019214:	3530      	adds	r5, #48	@ 0x30
 8019216:	9209      	str	r2, [sp, #36]	@ 0x24
 8019218:	2b00      	cmp	r3, #0
 801921a:	d104      	bne.n	8019226 <_dtoa_r+0xa4a>
 801921c:	0001      	movs	r1, r0
 801921e:	9805      	ldr	r0, [sp, #20]
 8019220:	f000 fc64 	bl	8019aec <__mcmp>
 8019224:	9009      	str	r0, [sp, #36]	@ 0x24
 8019226:	0021      	movs	r1, r4
 8019228:	9803      	ldr	r0, [sp, #12]
 801922a:	f000 fa15 	bl	8019658 <_Bfree>
 801922e:	9b06      	ldr	r3, [sp, #24]
 8019230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019232:	1c5c      	adds	r4, r3, #1
 8019234:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019236:	4313      	orrs	r3, r2
 8019238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801923a:	4313      	orrs	r3, r2
 801923c:	d116      	bne.n	801926c <_dtoa_r+0xa90>
 801923e:	2d39      	cmp	r5, #57	@ 0x39
 8019240:	d02f      	beq.n	80192a2 <_dtoa_r+0xac6>
 8019242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019244:	2b00      	cmp	r3, #0
 8019246:	dd01      	ble.n	801924c <_dtoa_r+0xa70>
 8019248:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801924a:	3531      	adds	r5, #49	@ 0x31
 801924c:	9b06      	ldr	r3, [sp, #24]
 801924e:	701d      	strb	r5, [r3, #0]
 8019250:	e638      	b.n	8018ec4 <_dtoa_r+0x6e8>
 8019252:	46c0      	nop			@ (mov r8, r8)
 8019254:	40240000 	.word	0x40240000
 8019258:	00000433 	.word	0x00000433
 801925c:	7ff00000 	.word	0x7ff00000
 8019260:	0801c300 	.word	0x0801c300
 8019264:	0801c2a8 	.word	0x0801c2a8
 8019268:	000002ef 	.word	0x000002ef
 801926c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801926e:	2b00      	cmp	r3, #0
 8019270:	db04      	blt.n	801927c <_dtoa_r+0xaa0>
 8019272:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8019274:	4313      	orrs	r3, r2
 8019276:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019278:	4313      	orrs	r3, r2
 801927a:	d11e      	bne.n	80192ba <_dtoa_r+0xade>
 801927c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801927e:	2b00      	cmp	r3, #0
 8019280:	dde4      	ble.n	801924c <_dtoa_r+0xa70>
 8019282:	9905      	ldr	r1, [sp, #20]
 8019284:	2201      	movs	r2, #1
 8019286:	9803      	ldr	r0, [sp, #12]
 8019288:	f000 fbc4 	bl	8019a14 <__lshift>
 801928c:	0031      	movs	r1, r6
 801928e:	9005      	str	r0, [sp, #20]
 8019290:	f000 fc2c 	bl	8019aec <__mcmp>
 8019294:	2800      	cmp	r0, #0
 8019296:	dc02      	bgt.n	801929e <_dtoa_r+0xac2>
 8019298:	d1d8      	bne.n	801924c <_dtoa_r+0xa70>
 801929a:	07eb      	lsls	r3, r5, #31
 801929c:	d5d6      	bpl.n	801924c <_dtoa_r+0xa70>
 801929e:	2d39      	cmp	r5, #57	@ 0x39
 80192a0:	d1d2      	bne.n	8019248 <_dtoa_r+0xa6c>
 80192a2:	2339      	movs	r3, #57	@ 0x39
 80192a4:	9a06      	ldr	r2, [sp, #24]
 80192a6:	7013      	strb	r3, [r2, #0]
 80192a8:	0023      	movs	r3, r4
 80192aa:	001c      	movs	r4, r3
 80192ac:	3b01      	subs	r3, #1
 80192ae:	781a      	ldrb	r2, [r3, #0]
 80192b0:	2a39      	cmp	r2, #57	@ 0x39
 80192b2:	d04f      	beq.n	8019354 <_dtoa_r+0xb78>
 80192b4:	3201      	adds	r2, #1
 80192b6:	701a      	strb	r2, [r3, #0]
 80192b8:	e604      	b.n	8018ec4 <_dtoa_r+0x6e8>
 80192ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192bc:	2b00      	cmp	r3, #0
 80192be:	dd03      	ble.n	80192c8 <_dtoa_r+0xaec>
 80192c0:	2d39      	cmp	r5, #57	@ 0x39
 80192c2:	d0ee      	beq.n	80192a2 <_dtoa_r+0xac6>
 80192c4:	3501      	adds	r5, #1
 80192c6:	e7c1      	b.n	801924c <_dtoa_r+0xa70>
 80192c8:	9b06      	ldr	r3, [sp, #24]
 80192ca:	9a06      	ldr	r2, [sp, #24]
 80192cc:	701d      	strb	r5, [r3, #0]
 80192ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80192d0:	4293      	cmp	r3, r2
 80192d2:	d02a      	beq.n	801932a <_dtoa_r+0xb4e>
 80192d4:	2300      	movs	r3, #0
 80192d6:	220a      	movs	r2, #10
 80192d8:	9905      	ldr	r1, [sp, #20]
 80192da:	9803      	ldr	r0, [sp, #12]
 80192dc:	f000 f9e0 	bl	80196a0 <__multadd>
 80192e0:	9b04      	ldr	r3, [sp, #16]
 80192e2:	9005      	str	r0, [sp, #20]
 80192e4:	42bb      	cmp	r3, r7
 80192e6:	d109      	bne.n	80192fc <_dtoa_r+0xb20>
 80192e8:	2300      	movs	r3, #0
 80192ea:	220a      	movs	r2, #10
 80192ec:	9904      	ldr	r1, [sp, #16]
 80192ee:	9803      	ldr	r0, [sp, #12]
 80192f0:	f000 f9d6 	bl	80196a0 <__multadd>
 80192f4:	9004      	str	r0, [sp, #16]
 80192f6:	0007      	movs	r7, r0
 80192f8:	9406      	str	r4, [sp, #24]
 80192fa:	e778      	b.n	80191ee <_dtoa_r+0xa12>
 80192fc:	9904      	ldr	r1, [sp, #16]
 80192fe:	2300      	movs	r3, #0
 8019300:	220a      	movs	r2, #10
 8019302:	9803      	ldr	r0, [sp, #12]
 8019304:	f000 f9cc 	bl	80196a0 <__multadd>
 8019308:	2300      	movs	r3, #0
 801930a:	9004      	str	r0, [sp, #16]
 801930c:	220a      	movs	r2, #10
 801930e:	0039      	movs	r1, r7
 8019310:	9803      	ldr	r0, [sp, #12]
 8019312:	f000 f9c5 	bl	80196a0 <__multadd>
 8019316:	e7ee      	b.n	80192f6 <_dtoa_r+0xb1a>
 8019318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801931a:	2401      	movs	r4, #1
 801931c:	2b00      	cmp	r3, #0
 801931e:	dd00      	ble.n	8019322 <_dtoa_r+0xb46>
 8019320:	001c      	movs	r4, r3
 8019322:	9b08      	ldr	r3, [sp, #32]
 8019324:	191c      	adds	r4, r3, r4
 8019326:	2300      	movs	r3, #0
 8019328:	9304      	str	r3, [sp, #16]
 801932a:	9905      	ldr	r1, [sp, #20]
 801932c:	2201      	movs	r2, #1
 801932e:	9803      	ldr	r0, [sp, #12]
 8019330:	f000 fb70 	bl	8019a14 <__lshift>
 8019334:	0031      	movs	r1, r6
 8019336:	9005      	str	r0, [sp, #20]
 8019338:	f000 fbd8 	bl	8019aec <__mcmp>
 801933c:	2800      	cmp	r0, #0
 801933e:	dcb3      	bgt.n	80192a8 <_dtoa_r+0xacc>
 8019340:	d101      	bne.n	8019346 <_dtoa_r+0xb6a>
 8019342:	07ed      	lsls	r5, r5, #31
 8019344:	d4b0      	bmi.n	80192a8 <_dtoa_r+0xacc>
 8019346:	0023      	movs	r3, r4
 8019348:	001c      	movs	r4, r3
 801934a:	3b01      	subs	r3, #1
 801934c:	781a      	ldrb	r2, [r3, #0]
 801934e:	2a30      	cmp	r2, #48	@ 0x30
 8019350:	d0fa      	beq.n	8019348 <_dtoa_r+0xb6c>
 8019352:	e5b7      	b.n	8018ec4 <_dtoa_r+0x6e8>
 8019354:	9a08      	ldr	r2, [sp, #32]
 8019356:	429a      	cmp	r2, r3
 8019358:	d1a7      	bne.n	80192aa <_dtoa_r+0xace>
 801935a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801935c:	3301      	adds	r3, #1
 801935e:	930c      	str	r3, [sp, #48]	@ 0x30
 8019360:	2331      	movs	r3, #49	@ 0x31
 8019362:	7013      	strb	r3, [r2, #0]
 8019364:	e5ae      	b.n	8018ec4 <_dtoa_r+0x6e8>
 8019366:	4b15      	ldr	r3, [pc, #84]	@ (80193bc <_dtoa_r+0xbe0>)
 8019368:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801936a:	9308      	str	r3, [sp, #32]
 801936c:	4b14      	ldr	r3, [pc, #80]	@ (80193c0 <_dtoa_r+0xbe4>)
 801936e:	2a00      	cmp	r2, #0
 8019370:	d001      	beq.n	8019376 <_dtoa_r+0xb9a>
 8019372:	f7ff fa7b 	bl	801886c <_dtoa_r+0x90>
 8019376:	f7ff fa7b 	bl	8018870 <_dtoa_r+0x94>
 801937a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801937c:	2b01      	cmp	r3, #1
 801937e:	dc00      	bgt.n	8019382 <_dtoa_r+0xba6>
 8019380:	e648      	b.n	8019014 <_dtoa_r+0x838>
 8019382:	2001      	movs	r0, #1
 8019384:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8019386:	e665      	b.n	8019054 <_dtoa_r+0x878>
 8019388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801938a:	2b00      	cmp	r3, #0
 801938c:	dc00      	bgt.n	8019390 <_dtoa_r+0xbb4>
 801938e:	e6d6      	b.n	801913e <_dtoa_r+0x962>
 8019390:	2400      	movs	r4, #0
 8019392:	0031      	movs	r1, r6
 8019394:	9805      	ldr	r0, [sp, #20]
 8019396:	f7ff f992 	bl	80186be <quorem>
 801939a:	9b08      	ldr	r3, [sp, #32]
 801939c:	3030      	adds	r0, #48	@ 0x30
 801939e:	5518      	strb	r0, [r3, r4]
 80193a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80193a2:	3401      	adds	r4, #1
 80193a4:	0005      	movs	r5, r0
 80193a6:	429c      	cmp	r4, r3
 80193a8:	dab6      	bge.n	8019318 <_dtoa_r+0xb3c>
 80193aa:	2300      	movs	r3, #0
 80193ac:	220a      	movs	r2, #10
 80193ae:	9905      	ldr	r1, [sp, #20]
 80193b0:	9803      	ldr	r0, [sp, #12]
 80193b2:	f000 f975 	bl	80196a0 <__multadd>
 80193b6:	9005      	str	r0, [sp, #20]
 80193b8:	e7eb      	b.n	8019392 <_dtoa_r+0xbb6>
 80193ba:	46c0      	nop			@ (mov r8, r8)
 80193bc:	0801c284 	.word	0x0801c284
 80193c0:	0801c28c 	.word	0x0801c28c

080193c4 <_free_r>:
 80193c4:	b570      	push	{r4, r5, r6, lr}
 80193c6:	0005      	movs	r5, r0
 80193c8:	1e0c      	subs	r4, r1, #0
 80193ca:	d010      	beq.n	80193ee <_free_r+0x2a>
 80193cc:	3c04      	subs	r4, #4
 80193ce:	6823      	ldr	r3, [r4, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	da00      	bge.n	80193d6 <_free_r+0x12>
 80193d4:	18e4      	adds	r4, r4, r3
 80193d6:	0028      	movs	r0, r5
 80193d8:	f000 f8ea 	bl	80195b0 <__malloc_lock>
 80193dc:	4a1d      	ldr	r2, [pc, #116]	@ (8019454 <_free_r+0x90>)
 80193de:	6813      	ldr	r3, [r2, #0]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d105      	bne.n	80193f0 <_free_r+0x2c>
 80193e4:	6063      	str	r3, [r4, #4]
 80193e6:	6014      	str	r4, [r2, #0]
 80193e8:	0028      	movs	r0, r5
 80193ea:	f000 f8e9 	bl	80195c0 <__malloc_unlock>
 80193ee:	bd70      	pop	{r4, r5, r6, pc}
 80193f0:	42a3      	cmp	r3, r4
 80193f2:	d908      	bls.n	8019406 <_free_r+0x42>
 80193f4:	6820      	ldr	r0, [r4, #0]
 80193f6:	1821      	adds	r1, r4, r0
 80193f8:	428b      	cmp	r3, r1
 80193fa:	d1f3      	bne.n	80193e4 <_free_r+0x20>
 80193fc:	6819      	ldr	r1, [r3, #0]
 80193fe:	685b      	ldr	r3, [r3, #4]
 8019400:	1809      	adds	r1, r1, r0
 8019402:	6021      	str	r1, [r4, #0]
 8019404:	e7ee      	b.n	80193e4 <_free_r+0x20>
 8019406:	001a      	movs	r2, r3
 8019408:	685b      	ldr	r3, [r3, #4]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d001      	beq.n	8019412 <_free_r+0x4e>
 801940e:	42a3      	cmp	r3, r4
 8019410:	d9f9      	bls.n	8019406 <_free_r+0x42>
 8019412:	6811      	ldr	r1, [r2, #0]
 8019414:	1850      	adds	r0, r2, r1
 8019416:	42a0      	cmp	r0, r4
 8019418:	d10b      	bne.n	8019432 <_free_r+0x6e>
 801941a:	6820      	ldr	r0, [r4, #0]
 801941c:	1809      	adds	r1, r1, r0
 801941e:	1850      	adds	r0, r2, r1
 8019420:	6011      	str	r1, [r2, #0]
 8019422:	4283      	cmp	r3, r0
 8019424:	d1e0      	bne.n	80193e8 <_free_r+0x24>
 8019426:	6818      	ldr	r0, [r3, #0]
 8019428:	685b      	ldr	r3, [r3, #4]
 801942a:	1841      	adds	r1, r0, r1
 801942c:	6011      	str	r1, [r2, #0]
 801942e:	6053      	str	r3, [r2, #4]
 8019430:	e7da      	b.n	80193e8 <_free_r+0x24>
 8019432:	42a0      	cmp	r0, r4
 8019434:	d902      	bls.n	801943c <_free_r+0x78>
 8019436:	230c      	movs	r3, #12
 8019438:	602b      	str	r3, [r5, #0]
 801943a:	e7d5      	b.n	80193e8 <_free_r+0x24>
 801943c:	6820      	ldr	r0, [r4, #0]
 801943e:	1821      	adds	r1, r4, r0
 8019440:	428b      	cmp	r3, r1
 8019442:	d103      	bne.n	801944c <_free_r+0x88>
 8019444:	6819      	ldr	r1, [r3, #0]
 8019446:	685b      	ldr	r3, [r3, #4]
 8019448:	1809      	adds	r1, r1, r0
 801944a:	6021      	str	r1, [r4, #0]
 801944c:	6063      	str	r3, [r4, #4]
 801944e:	6054      	str	r4, [r2, #4]
 8019450:	e7ca      	b.n	80193e8 <_free_r+0x24>
 8019452:	46c0      	nop			@ (mov r8, r8)
 8019454:	2000411c 	.word	0x2000411c

08019458 <malloc>:
 8019458:	b510      	push	{r4, lr}
 801945a:	4b03      	ldr	r3, [pc, #12]	@ (8019468 <malloc+0x10>)
 801945c:	0001      	movs	r1, r0
 801945e:	6818      	ldr	r0, [r3, #0]
 8019460:	f000 f826 	bl	80194b0 <_malloc_r>
 8019464:	bd10      	pop	{r4, pc}
 8019466:	46c0      	nop			@ (mov r8, r8)
 8019468:	200001f4 	.word	0x200001f4

0801946c <sbrk_aligned>:
 801946c:	b570      	push	{r4, r5, r6, lr}
 801946e:	4e0f      	ldr	r6, [pc, #60]	@ (80194ac <sbrk_aligned+0x40>)
 8019470:	000d      	movs	r5, r1
 8019472:	6831      	ldr	r1, [r6, #0]
 8019474:	0004      	movs	r4, r0
 8019476:	2900      	cmp	r1, #0
 8019478:	d102      	bne.n	8019480 <sbrk_aligned+0x14>
 801947a:	f001 f855 	bl	801a528 <_sbrk_r>
 801947e:	6030      	str	r0, [r6, #0]
 8019480:	0029      	movs	r1, r5
 8019482:	0020      	movs	r0, r4
 8019484:	f001 f850 	bl	801a528 <_sbrk_r>
 8019488:	1c43      	adds	r3, r0, #1
 801948a:	d103      	bne.n	8019494 <sbrk_aligned+0x28>
 801948c:	2501      	movs	r5, #1
 801948e:	426d      	negs	r5, r5
 8019490:	0028      	movs	r0, r5
 8019492:	bd70      	pop	{r4, r5, r6, pc}
 8019494:	2303      	movs	r3, #3
 8019496:	1cc5      	adds	r5, r0, #3
 8019498:	439d      	bics	r5, r3
 801949a:	42a8      	cmp	r0, r5
 801949c:	d0f8      	beq.n	8019490 <sbrk_aligned+0x24>
 801949e:	1a29      	subs	r1, r5, r0
 80194a0:	0020      	movs	r0, r4
 80194a2:	f001 f841 	bl	801a528 <_sbrk_r>
 80194a6:	3001      	adds	r0, #1
 80194a8:	d1f2      	bne.n	8019490 <sbrk_aligned+0x24>
 80194aa:	e7ef      	b.n	801948c <sbrk_aligned+0x20>
 80194ac:	20004118 	.word	0x20004118

080194b0 <_malloc_r>:
 80194b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80194b2:	2203      	movs	r2, #3
 80194b4:	1ccb      	adds	r3, r1, #3
 80194b6:	4393      	bics	r3, r2
 80194b8:	3308      	adds	r3, #8
 80194ba:	0005      	movs	r5, r0
 80194bc:	001f      	movs	r7, r3
 80194be:	2b0c      	cmp	r3, #12
 80194c0:	d234      	bcs.n	801952c <_malloc_r+0x7c>
 80194c2:	270c      	movs	r7, #12
 80194c4:	42b9      	cmp	r1, r7
 80194c6:	d833      	bhi.n	8019530 <_malloc_r+0x80>
 80194c8:	0028      	movs	r0, r5
 80194ca:	f000 f871 	bl	80195b0 <__malloc_lock>
 80194ce:	4e37      	ldr	r6, [pc, #220]	@ (80195ac <_malloc_r+0xfc>)
 80194d0:	6833      	ldr	r3, [r6, #0]
 80194d2:	001c      	movs	r4, r3
 80194d4:	2c00      	cmp	r4, #0
 80194d6:	d12f      	bne.n	8019538 <_malloc_r+0x88>
 80194d8:	0039      	movs	r1, r7
 80194da:	0028      	movs	r0, r5
 80194dc:	f7ff ffc6 	bl	801946c <sbrk_aligned>
 80194e0:	0004      	movs	r4, r0
 80194e2:	1c43      	adds	r3, r0, #1
 80194e4:	d15f      	bne.n	80195a6 <_malloc_r+0xf6>
 80194e6:	6834      	ldr	r4, [r6, #0]
 80194e8:	9400      	str	r4, [sp, #0]
 80194ea:	9b00      	ldr	r3, [sp, #0]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d14a      	bne.n	8019586 <_malloc_r+0xd6>
 80194f0:	2c00      	cmp	r4, #0
 80194f2:	d052      	beq.n	801959a <_malloc_r+0xea>
 80194f4:	6823      	ldr	r3, [r4, #0]
 80194f6:	0028      	movs	r0, r5
 80194f8:	18e3      	adds	r3, r4, r3
 80194fa:	9900      	ldr	r1, [sp, #0]
 80194fc:	9301      	str	r3, [sp, #4]
 80194fe:	f001 f813 	bl	801a528 <_sbrk_r>
 8019502:	9b01      	ldr	r3, [sp, #4]
 8019504:	4283      	cmp	r3, r0
 8019506:	d148      	bne.n	801959a <_malloc_r+0xea>
 8019508:	6823      	ldr	r3, [r4, #0]
 801950a:	0028      	movs	r0, r5
 801950c:	1aff      	subs	r7, r7, r3
 801950e:	0039      	movs	r1, r7
 8019510:	f7ff ffac 	bl	801946c <sbrk_aligned>
 8019514:	3001      	adds	r0, #1
 8019516:	d040      	beq.n	801959a <_malloc_r+0xea>
 8019518:	6823      	ldr	r3, [r4, #0]
 801951a:	19db      	adds	r3, r3, r7
 801951c:	6023      	str	r3, [r4, #0]
 801951e:	6833      	ldr	r3, [r6, #0]
 8019520:	685a      	ldr	r2, [r3, #4]
 8019522:	2a00      	cmp	r2, #0
 8019524:	d133      	bne.n	801958e <_malloc_r+0xde>
 8019526:	9b00      	ldr	r3, [sp, #0]
 8019528:	6033      	str	r3, [r6, #0]
 801952a:	e019      	b.n	8019560 <_malloc_r+0xb0>
 801952c:	2b00      	cmp	r3, #0
 801952e:	dac9      	bge.n	80194c4 <_malloc_r+0x14>
 8019530:	230c      	movs	r3, #12
 8019532:	602b      	str	r3, [r5, #0]
 8019534:	2000      	movs	r0, #0
 8019536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019538:	6821      	ldr	r1, [r4, #0]
 801953a:	1bc9      	subs	r1, r1, r7
 801953c:	d420      	bmi.n	8019580 <_malloc_r+0xd0>
 801953e:	290b      	cmp	r1, #11
 8019540:	d90a      	bls.n	8019558 <_malloc_r+0xa8>
 8019542:	19e2      	adds	r2, r4, r7
 8019544:	6027      	str	r7, [r4, #0]
 8019546:	42a3      	cmp	r3, r4
 8019548:	d104      	bne.n	8019554 <_malloc_r+0xa4>
 801954a:	6032      	str	r2, [r6, #0]
 801954c:	6863      	ldr	r3, [r4, #4]
 801954e:	6011      	str	r1, [r2, #0]
 8019550:	6053      	str	r3, [r2, #4]
 8019552:	e005      	b.n	8019560 <_malloc_r+0xb0>
 8019554:	605a      	str	r2, [r3, #4]
 8019556:	e7f9      	b.n	801954c <_malloc_r+0x9c>
 8019558:	6862      	ldr	r2, [r4, #4]
 801955a:	42a3      	cmp	r3, r4
 801955c:	d10e      	bne.n	801957c <_malloc_r+0xcc>
 801955e:	6032      	str	r2, [r6, #0]
 8019560:	0028      	movs	r0, r5
 8019562:	f000 f82d 	bl	80195c0 <__malloc_unlock>
 8019566:	0020      	movs	r0, r4
 8019568:	2207      	movs	r2, #7
 801956a:	300b      	adds	r0, #11
 801956c:	1d23      	adds	r3, r4, #4
 801956e:	4390      	bics	r0, r2
 8019570:	1ac2      	subs	r2, r0, r3
 8019572:	4298      	cmp	r0, r3
 8019574:	d0df      	beq.n	8019536 <_malloc_r+0x86>
 8019576:	1a1b      	subs	r3, r3, r0
 8019578:	50a3      	str	r3, [r4, r2]
 801957a:	e7dc      	b.n	8019536 <_malloc_r+0x86>
 801957c:	605a      	str	r2, [r3, #4]
 801957e:	e7ef      	b.n	8019560 <_malloc_r+0xb0>
 8019580:	0023      	movs	r3, r4
 8019582:	6864      	ldr	r4, [r4, #4]
 8019584:	e7a6      	b.n	80194d4 <_malloc_r+0x24>
 8019586:	9c00      	ldr	r4, [sp, #0]
 8019588:	6863      	ldr	r3, [r4, #4]
 801958a:	9300      	str	r3, [sp, #0]
 801958c:	e7ad      	b.n	80194ea <_malloc_r+0x3a>
 801958e:	001a      	movs	r2, r3
 8019590:	685b      	ldr	r3, [r3, #4]
 8019592:	42a3      	cmp	r3, r4
 8019594:	d1fb      	bne.n	801958e <_malloc_r+0xde>
 8019596:	2300      	movs	r3, #0
 8019598:	e7da      	b.n	8019550 <_malloc_r+0xa0>
 801959a:	230c      	movs	r3, #12
 801959c:	0028      	movs	r0, r5
 801959e:	602b      	str	r3, [r5, #0]
 80195a0:	f000 f80e 	bl	80195c0 <__malloc_unlock>
 80195a4:	e7c6      	b.n	8019534 <_malloc_r+0x84>
 80195a6:	6007      	str	r7, [r0, #0]
 80195a8:	e7da      	b.n	8019560 <_malloc_r+0xb0>
 80195aa:	46c0      	nop			@ (mov r8, r8)
 80195ac:	2000411c 	.word	0x2000411c

080195b0 <__malloc_lock>:
 80195b0:	b510      	push	{r4, lr}
 80195b2:	4802      	ldr	r0, [pc, #8]	@ (80195bc <__malloc_lock+0xc>)
 80195b4:	f7ff f86d 	bl	8018692 <__retarget_lock_acquire_recursive>
 80195b8:	bd10      	pop	{r4, pc}
 80195ba:	46c0      	nop			@ (mov r8, r8)
 80195bc:	20004114 	.word	0x20004114

080195c0 <__malloc_unlock>:
 80195c0:	b510      	push	{r4, lr}
 80195c2:	4802      	ldr	r0, [pc, #8]	@ (80195cc <__malloc_unlock+0xc>)
 80195c4:	f7ff f866 	bl	8018694 <__retarget_lock_release_recursive>
 80195c8:	bd10      	pop	{r4, pc}
 80195ca:	46c0      	nop			@ (mov r8, r8)
 80195cc:	20004114 	.word	0x20004114

080195d0 <_Balloc>:
 80195d0:	b570      	push	{r4, r5, r6, lr}
 80195d2:	69c5      	ldr	r5, [r0, #28]
 80195d4:	0006      	movs	r6, r0
 80195d6:	000c      	movs	r4, r1
 80195d8:	2d00      	cmp	r5, #0
 80195da:	d10e      	bne.n	80195fa <_Balloc+0x2a>
 80195dc:	2010      	movs	r0, #16
 80195de:	f7ff ff3b 	bl	8019458 <malloc>
 80195e2:	1e02      	subs	r2, r0, #0
 80195e4:	61f0      	str	r0, [r6, #28]
 80195e6:	d104      	bne.n	80195f2 <_Balloc+0x22>
 80195e8:	216b      	movs	r1, #107	@ 0x6b
 80195ea:	4b19      	ldr	r3, [pc, #100]	@ (8019650 <_Balloc+0x80>)
 80195ec:	4819      	ldr	r0, [pc, #100]	@ (8019654 <_Balloc+0x84>)
 80195ee:	f000 ffad 	bl	801a54c <__assert_func>
 80195f2:	6045      	str	r5, [r0, #4]
 80195f4:	6085      	str	r5, [r0, #8]
 80195f6:	6005      	str	r5, [r0, #0]
 80195f8:	60c5      	str	r5, [r0, #12]
 80195fa:	69f5      	ldr	r5, [r6, #28]
 80195fc:	68eb      	ldr	r3, [r5, #12]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d013      	beq.n	801962a <_Balloc+0x5a>
 8019602:	69f3      	ldr	r3, [r6, #28]
 8019604:	00a2      	lsls	r2, r4, #2
 8019606:	68db      	ldr	r3, [r3, #12]
 8019608:	189b      	adds	r3, r3, r2
 801960a:	6818      	ldr	r0, [r3, #0]
 801960c:	2800      	cmp	r0, #0
 801960e:	d118      	bne.n	8019642 <_Balloc+0x72>
 8019610:	2101      	movs	r1, #1
 8019612:	000d      	movs	r5, r1
 8019614:	40a5      	lsls	r5, r4
 8019616:	1d6a      	adds	r2, r5, #5
 8019618:	0030      	movs	r0, r6
 801961a:	0092      	lsls	r2, r2, #2
 801961c:	f000 ffb4 	bl	801a588 <_calloc_r>
 8019620:	2800      	cmp	r0, #0
 8019622:	d00c      	beq.n	801963e <_Balloc+0x6e>
 8019624:	6044      	str	r4, [r0, #4]
 8019626:	6085      	str	r5, [r0, #8]
 8019628:	e00d      	b.n	8019646 <_Balloc+0x76>
 801962a:	2221      	movs	r2, #33	@ 0x21
 801962c:	2104      	movs	r1, #4
 801962e:	0030      	movs	r0, r6
 8019630:	f000 ffaa 	bl	801a588 <_calloc_r>
 8019634:	69f3      	ldr	r3, [r6, #28]
 8019636:	60e8      	str	r0, [r5, #12]
 8019638:	68db      	ldr	r3, [r3, #12]
 801963a:	2b00      	cmp	r3, #0
 801963c:	d1e1      	bne.n	8019602 <_Balloc+0x32>
 801963e:	2000      	movs	r0, #0
 8019640:	bd70      	pop	{r4, r5, r6, pc}
 8019642:	6802      	ldr	r2, [r0, #0]
 8019644:	601a      	str	r2, [r3, #0]
 8019646:	2300      	movs	r3, #0
 8019648:	6103      	str	r3, [r0, #16]
 801964a:	60c3      	str	r3, [r0, #12]
 801964c:	e7f8      	b.n	8019640 <_Balloc+0x70>
 801964e:	46c0      	nop			@ (mov r8, r8)
 8019650:	0801c291 	.word	0x0801c291
 8019654:	0801c311 	.word	0x0801c311

08019658 <_Bfree>:
 8019658:	b570      	push	{r4, r5, r6, lr}
 801965a:	69c6      	ldr	r6, [r0, #28]
 801965c:	0005      	movs	r5, r0
 801965e:	000c      	movs	r4, r1
 8019660:	2e00      	cmp	r6, #0
 8019662:	d10e      	bne.n	8019682 <_Bfree+0x2a>
 8019664:	2010      	movs	r0, #16
 8019666:	f7ff fef7 	bl	8019458 <malloc>
 801966a:	1e02      	subs	r2, r0, #0
 801966c:	61e8      	str	r0, [r5, #28]
 801966e:	d104      	bne.n	801967a <_Bfree+0x22>
 8019670:	218f      	movs	r1, #143	@ 0x8f
 8019672:	4b09      	ldr	r3, [pc, #36]	@ (8019698 <_Bfree+0x40>)
 8019674:	4809      	ldr	r0, [pc, #36]	@ (801969c <_Bfree+0x44>)
 8019676:	f000 ff69 	bl	801a54c <__assert_func>
 801967a:	6046      	str	r6, [r0, #4]
 801967c:	6086      	str	r6, [r0, #8]
 801967e:	6006      	str	r6, [r0, #0]
 8019680:	60c6      	str	r6, [r0, #12]
 8019682:	2c00      	cmp	r4, #0
 8019684:	d007      	beq.n	8019696 <_Bfree+0x3e>
 8019686:	69eb      	ldr	r3, [r5, #28]
 8019688:	6862      	ldr	r2, [r4, #4]
 801968a:	68db      	ldr	r3, [r3, #12]
 801968c:	0092      	lsls	r2, r2, #2
 801968e:	189b      	adds	r3, r3, r2
 8019690:	681a      	ldr	r2, [r3, #0]
 8019692:	6022      	str	r2, [r4, #0]
 8019694:	601c      	str	r4, [r3, #0]
 8019696:	bd70      	pop	{r4, r5, r6, pc}
 8019698:	0801c291 	.word	0x0801c291
 801969c:	0801c311 	.word	0x0801c311

080196a0 <__multadd>:
 80196a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80196a2:	000f      	movs	r7, r1
 80196a4:	9001      	str	r0, [sp, #4]
 80196a6:	000c      	movs	r4, r1
 80196a8:	001e      	movs	r6, r3
 80196aa:	2000      	movs	r0, #0
 80196ac:	690d      	ldr	r5, [r1, #16]
 80196ae:	3714      	adds	r7, #20
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	3001      	adds	r0, #1
 80196b4:	b299      	uxth	r1, r3
 80196b6:	4351      	muls	r1, r2
 80196b8:	0c1b      	lsrs	r3, r3, #16
 80196ba:	4353      	muls	r3, r2
 80196bc:	1989      	adds	r1, r1, r6
 80196be:	0c0e      	lsrs	r6, r1, #16
 80196c0:	199b      	adds	r3, r3, r6
 80196c2:	0c1e      	lsrs	r6, r3, #16
 80196c4:	b289      	uxth	r1, r1
 80196c6:	041b      	lsls	r3, r3, #16
 80196c8:	185b      	adds	r3, r3, r1
 80196ca:	c708      	stmia	r7!, {r3}
 80196cc:	4285      	cmp	r5, r0
 80196ce:	dcef      	bgt.n	80196b0 <__multadd+0x10>
 80196d0:	2e00      	cmp	r6, #0
 80196d2:	d022      	beq.n	801971a <__multadd+0x7a>
 80196d4:	68a3      	ldr	r3, [r4, #8]
 80196d6:	42ab      	cmp	r3, r5
 80196d8:	dc19      	bgt.n	801970e <__multadd+0x6e>
 80196da:	6861      	ldr	r1, [r4, #4]
 80196dc:	9801      	ldr	r0, [sp, #4]
 80196de:	3101      	adds	r1, #1
 80196e0:	f7ff ff76 	bl	80195d0 <_Balloc>
 80196e4:	1e07      	subs	r7, r0, #0
 80196e6:	d105      	bne.n	80196f4 <__multadd+0x54>
 80196e8:	003a      	movs	r2, r7
 80196ea:	21ba      	movs	r1, #186	@ 0xba
 80196ec:	4b0c      	ldr	r3, [pc, #48]	@ (8019720 <__multadd+0x80>)
 80196ee:	480d      	ldr	r0, [pc, #52]	@ (8019724 <__multadd+0x84>)
 80196f0:	f000 ff2c 	bl	801a54c <__assert_func>
 80196f4:	0021      	movs	r1, r4
 80196f6:	6922      	ldr	r2, [r4, #16]
 80196f8:	310c      	adds	r1, #12
 80196fa:	3202      	adds	r2, #2
 80196fc:	0092      	lsls	r2, r2, #2
 80196fe:	300c      	adds	r0, #12
 8019700:	f7fe ffd4 	bl	80186ac <memcpy>
 8019704:	0021      	movs	r1, r4
 8019706:	9801      	ldr	r0, [sp, #4]
 8019708:	f7ff ffa6 	bl	8019658 <_Bfree>
 801970c:	003c      	movs	r4, r7
 801970e:	1d2b      	adds	r3, r5, #4
 8019710:	009b      	lsls	r3, r3, #2
 8019712:	18e3      	adds	r3, r4, r3
 8019714:	3501      	adds	r5, #1
 8019716:	605e      	str	r6, [r3, #4]
 8019718:	6125      	str	r5, [r4, #16]
 801971a:	0020      	movs	r0, r4
 801971c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801971e:	46c0      	nop			@ (mov r8, r8)
 8019720:	0801c300 	.word	0x0801c300
 8019724:	0801c311 	.word	0x0801c311

08019728 <__hi0bits>:
 8019728:	2280      	movs	r2, #128	@ 0x80
 801972a:	0003      	movs	r3, r0
 801972c:	0252      	lsls	r2, r2, #9
 801972e:	2000      	movs	r0, #0
 8019730:	4293      	cmp	r3, r2
 8019732:	d201      	bcs.n	8019738 <__hi0bits+0x10>
 8019734:	041b      	lsls	r3, r3, #16
 8019736:	3010      	adds	r0, #16
 8019738:	2280      	movs	r2, #128	@ 0x80
 801973a:	0452      	lsls	r2, r2, #17
 801973c:	4293      	cmp	r3, r2
 801973e:	d201      	bcs.n	8019744 <__hi0bits+0x1c>
 8019740:	3008      	adds	r0, #8
 8019742:	021b      	lsls	r3, r3, #8
 8019744:	2280      	movs	r2, #128	@ 0x80
 8019746:	0552      	lsls	r2, r2, #21
 8019748:	4293      	cmp	r3, r2
 801974a:	d201      	bcs.n	8019750 <__hi0bits+0x28>
 801974c:	3004      	adds	r0, #4
 801974e:	011b      	lsls	r3, r3, #4
 8019750:	2280      	movs	r2, #128	@ 0x80
 8019752:	05d2      	lsls	r2, r2, #23
 8019754:	4293      	cmp	r3, r2
 8019756:	d201      	bcs.n	801975c <__hi0bits+0x34>
 8019758:	3002      	adds	r0, #2
 801975a:	009b      	lsls	r3, r3, #2
 801975c:	2b00      	cmp	r3, #0
 801975e:	db03      	blt.n	8019768 <__hi0bits+0x40>
 8019760:	3001      	adds	r0, #1
 8019762:	4213      	tst	r3, r2
 8019764:	d100      	bne.n	8019768 <__hi0bits+0x40>
 8019766:	2020      	movs	r0, #32
 8019768:	4770      	bx	lr

0801976a <__lo0bits>:
 801976a:	6803      	ldr	r3, [r0, #0]
 801976c:	0001      	movs	r1, r0
 801976e:	2207      	movs	r2, #7
 8019770:	0018      	movs	r0, r3
 8019772:	4010      	ands	r0, r2
 8019774:	4213      	tst	r3, r2
 8019776:	d00d      	beq.n	8019794 <__lo0bits+0x2a>
 8019778:	3a06      	subs	r2, #6
 801977a:	2000      	movs	r0, #0
 801977c:	4213      	tst	r3, r2
 801977e:	d105      	bne.n	801978c <__lo0bits+0x22>
 8019780:	3002      	adds	r0, #2
 8019782:	4203      	tst	r3, r0
 8019784:	d003      	beq.n	801978e <__lo0bits+0x24>
 8019786:	40d3      	lsrs	r3, r2
 8019788:	0010      	movs	r0, r2
 801978a:	600b      	str	r3, [r1, #0]
 801978c:	4770      	bx	lr
 801978e:	089b      	lsrs	r3, r3, #2
 8019790:	600b      	str	r3, [r1, #0]
 8019792:	e7fb      	b.n	801978c <__lo0bits+0x22>
 8019794:	b29a      	uxth	r2, r3
 8019796:	2a00      	cmp	r2, #0
 8019798:	d101      	bne.n	801979e <__lo0bits+0x34>
 801979a:	2010      	movs	r0, #16
 801979c:	0c1b      	lsrs	r3, r3, #16
 801979e:	b2da      	uxtb	r2, r3
 80197a0:	2a00      	cmp	r2, #0
 80197a2:	d101      	bne.n	80197a8 <__lo0bits+0x3e>
 80197a4:	3008      	adds	r0, #8
 80197a6:	0a1b      	lsrs	r3, r3, #8
 80197a8:	071a      	lsls	r2, r3, #28
 80197aa:	d101      	bne.n	80197b0 <__lo0bits+0x46>
 80197ac:	3004      	adds	r0, #4
 80197ae:	091b      	lsrs	r3, r3, #4
 80197b0:	079a      	lsls	r2, r3, #30
 80197b2:	d101      	bne.n	80197b8 <__lo0bits+0x4e>
 80197b4:	3002      	adds	r0, #2
 80197b6:	089b      	lsrs	r3, r3, #2
 80197b8:	07da      	lsls	r2, r3, #31
 80197ba:	d4e9      	bmi.n	8019790 <__lo0bits+0x26>
 80197bc:	3001      	adds	r0, #1
 80197be:	085b      	lsrs	r3, r3, #1
 80197c0:	d1e6      	bne.n	8019790 <__lo0bits+0x26>
 80197c2:	2020      	movs	r0, #32
 80197c4:	e7e2      	b.n	801978c <__lo0bits+0x22>
	...

080197c8 <__i2b>:
 80197c8:	b510      	push	{r4, lr}
 80197ca:	000c      	movs	r4, r1
 80197cc:	2101      	movs	r1, #1
 80197ce:	f7ff feff 	bl	80195d0 <_Balloc>
 80197d2:	2800      	cmp	r0, #0
 80197d4:	d107      	bne.n	80197e6 <__i2b+0x1e>
 80197d6:	2146      	movs	r1, #70	@ 0x46
 80197d8:	4c05      	ldr	r4, [pc, #20]	@ (80197f0 <__i2b+0x28>)
 80197da:	0002      	movs	r2, r0
 80197dc:	4b05      	ldr	r3, [pc, #20]	@ (80197f4 <__i2b+0x2c>)
 80197de:	0020      	movs	r0, r4
 80197e0:	31ff      	adds	r1, #255	@ 0xff
 80197e2:	f000 feb3 	bl	801a54c <__assert_func>
 80197e6:	2301      	movs	r3, #1
 80197e8:	6144      	str	r4, [r0, #20]
 80197ea:	6103      	str	r3, [r0, #16]
 80197ec:	bd10      	pop	{r4, pc}
 80197ee:	46c0      	nop			@ (mov r8, r8)
 80197f0:	0801c311 	.word	0x0801c311
 80197f4:	0801c300 	.word	0x0801c300

080197f8 <__multiply>:
 80197f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197fa:	0014      	movs	r4, r2
 80197fc:	690a      	ldr	r2, [r1, #16]
 80197fe:	6923      	ldr	r3, [r4, #16]
 8019800:	000d      	movs	r5, r1
 8019802:	b08b      	sub	sp, #44	@ 0x2c
 8019804:	429a      	cmp	r2, r3
 8019806:	db02      	blt.n	801980e <__multiply+0x16>
 8019808:	0023      	movs	r3, r4
 801980a:	000c      	movs	r4, r1
 801980c:	001d      	movs	r5, r3
 801980e:	6927      	ldr	r7, [r4, #16]
 8019810:	692e      	ldr	r6, [r5, #16]
 8019812:	6861      	ldr	r1, [r4, #4]
 8019814:	19bb      	adds	r3, r7, r6
 8019816:	9303      	str	r3, [sp, #12]
 8019818:	68a3      	ldr	r3, [r4, #8]
 801981a:	19ba      	adds	r2, r7, r6
 801981c:	4293      	cmp	r3, r2
 801981e:	da00      	bge.n	8019822 <__multiply+0x2a>
 8019820:	3101      	adds	r1, #1
 8019822:	f7ff fed5 	bl	80195d0 <_Balloc>
 8019826:	9002      	str	r0, [sp, #8]
 8019828:	2800      	cmp	r0, #0
 801982a:	d106      	bne.n	801983a <__multiply+0x42>
 801982c:	21b1      	movs	r1, #177	@ 0xb1
 801982e:	4b49      	ldr	r3, [pc, #292]	@ (8019954 <__multiply+0x15c>)
 8019830:	4849      	ldr	r0, [pc, #292]	@ (8019958 <__multiply+0x160>)
 8019832:	9a02      	ldr	r2, [sp, #8]
 8019834:	0049      	lsls	r1, r1, #1
 8019836:	f000 fe89 	bl	801a54c <__assert_func>
 801983a:	9b02      	ldr	r3, [sp, #8]
 801983c:	2200      	movs	r2, #0
 801983e:	3314      	adds	r3, #20
 8019840:	469c      	mov	ip, r3
 8019842:	19bb      	adds	r3, r7, r6
 8019844:	009b      	lsls	r3, r3, #2
 8019846:	4463      	add	r3, ip
 8019848:	9304      	str	r3, [sp, #16]
 801984a:	4663      	mov	r3, ip
 801984c:	9904      	ldr	r1, [sp, #16]
 801984e:	428b      	cmp	r3, r1
 8019850:	d32a      	bcc.n	80198a8 <__multiply+0xb0>
 8019852:	0023      	movs	r3, r4
 8019854:	00bf      	lsls	r7, r7, #2
 8019856:	3314      	adds	r3, #20
 8019858:	3514      	adds	r5, #20
 801985a:	9308      	str	r3, [sp, #32]
 801985c:	00b6      	lsls	r6, r6, #2
 801985e:	19db      	adds	r3, r3, r7
 8019860:	9305      	str	r3, [sp, #20]
 8019862:	19ab      	adds	r3, r5, r6
 8019864:	9309      	str	r3, [sp, #36]	@ 0x24
 8019866:	2304      	movs	r3, #4
 8019868:	9306      	str	r3, [sp, #24]
 801986a:	0023      	movs	r3, r4
 801986c:	9a05      	ldr	r2, [sp, #20]
 801986e:	3315      	adds	r3, #21
 8019870:	9501      	str	r5, [sp, #4]
 8019872:	429a      	cmp	r2, r3
 8019874:	d305      	bcc.n	8019882 <__multiply+0x8a>
 8019876:	1b13      	subs	r3, r2, r4
 8019878:	3b15      	subs	r3, #21
 801987a:	089b      	lsrs	r3, r3, #2
 801987c:	3301      	adds	r3, #1
 801987e:	009b      	lsls	r3, r3, #2
 8019880:	9306      	str	r3, [sp, #24]
 8019882:	9b01      	ldr	r3, [sp, #4]
 8019884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019886:	4293      	cmp	r3, r2
 8019888:	d310      	bcc.n	80198ac <__multiply+0xb4>
 801988a:	9b03      	ldr	r3, [sp, #12]
 801988c:	2b00      	cmp	r3, #0
 801988e:	dd05      	ble.n	801989c <__multiply+0xa4>
 8019890:	9b04      	ldr	r3, [sp, #16]
 8019892:	3b04      	subs	r3, #4
 8019894:	9304      	str	r3, [sp, #16]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	2b00      	cmp	r3, #0
 801989a:	d056      	beq.n	801994a <__multiply+0x152>
 801989c:	9b02      	ldr	r3, [sp, #8]
 801989e:	9a03      	ldr	r2, [sp, #12]
 80198a0:	0018      	movs	r0, r3
 80198a2:	611a      	str	r2, [r3, #16]
 80198a4:	b00b      	add	sp, #44	@ 0x2c
 80198a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198a8:	c304      	stmia	r3!, {r2}
 80198aa:	e7cf      	b.n	801984c <__multiply+0x54>
 80198ac:	9b01      	ldr	r3, [sp, #4]
 80198ae:	6818      	ldr	r0, [r3, #0]
 80198b0:	b280      	uxth	r0, r0
 80198b2:	2800      	cmp	r0, #0
 80198b4:	d01e      	beq.n	80198f4 <__multiply+0xfc>
 80198b6:	4667      	mov	r7, ip
 80198b8:	2500      	movs	r5, #0
 80198ba:	9e08      	ldr	r6, [sp, #32]
 80198bc:	ce02      	ldmia	r6!, {r1}
 80198be:	683b      	ldr	r3, [r7, #0]
 80198c0:	9307      	str	r3, [sp, #28]
 80198c2:	b28b      	uxth	r3, r1
 80198c4:	4343      	muls	r3, r0
 80198c6:	001a      	movs	r2, r3
 80198c8:	466b      	mov	r3, sp
 80198ca:	0c09      	lsrs	r1, r1, #16
 80198cc:	8b9b      	ldrh	r3, [r3, #28]
 80198ce:	4341      	muls	r1, r0
 80198d0:	18d3      	adds	r3, r2, r3
 80198d2:	9a07      	ldr	r2, [sp, #28]
 80198d4:	195b      	adds	r3, r3, r5
 80198d6:	0c12      	lsrs	r2, r2, #16
 80198d8:	1889      	adds	r1, r1, r2
 80198da:	0c1a      	lsrs	r2, r3, #16
 80198dc:	188a      	adds	r2, r1, r2
 80198de:	b29b      	uxth	r3, r3
 80198e0:	0c15      	lsrs	r5, r2, #16
 80198e2:	0412      	lsls	r2, r2, #16
 80198e4:	431a      	orrs	r2, r3
 80198e6:	9b05      	ldr	r3, [sp, #20]
 80198e8:	c704      	stmia	r7!, {r2}
 80198ea:	42b3      	cmp	r3, r6
 80198ec:	d8e6      	bhi.n	80198bc <__multiply+0xc4>
 80198ee:	4663      	mov	r3, ip
 80198f0:	9a06      	ldr	r2, [sp, #24]
 80198f2:	509d      	str	r5, [r3, r2]
 80198f4:	9b01      	ldr	r3, [sp, #4]
 80198f6:	6818      	ldr	r0, [r3, #0]
 80198f8:	0c00      	lsrs	r0, r0, #16
 80198fa:	d020      	beq.n	801993e <__multiply+0x146>
 80198fc:	4663      	mov	r3, ip
 80198fe:	0025      	movs	r5, r4
 8019900:	4661      	mov	r1, ip
 8019902:	2700      	movs	r7, #0
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	3514      	adds	r5, #20
 8019908:	682a      	ldr	r2, [r5, #0]
 801990a:	680e      	ldr	r6, [r1, #0]
 801990c:	b292      	uxth	r2, r2
 801990e:	4342      	muls	r2, r0
 8019910:	0c36      	lsrs	r6, r6, #16
 8019912:	1992      	adds	r2, r2, r6
 8019914:	19d2      	adds	r2, r2, r7
 8019916:	0416      	lsls	r6, r2, #16
 8019918:	b29b      	uxth	r3, r3
 801991a:	431e      	orrs	r6, r3
 801991c:	600e      	str	r6, [r1, #0]
 801991e:	cd40      	ldmia	r5!, {r6}
 8019920:	684b      	ldr	r3, [r1, #4]
 8019922:	0c36      	lsrs	r6, r6, #16
 8019924:	4346      	muls	r6, r0
 8019926:	b29b      	uxth	r3, r3
 8019928:	0c12      	lsrs	r2, r2, #16
 801992a:	18f3      	adds	r3, r6, r3
 801992c:	189b      	adds	r3, r3, r2
 801992e:	9a05      	ldr	r2, [sp, #20]
 8019930:	0c1f      	lsrs	r7, r3, #16
 8019932:	3104      	adds	r1, #4
 8019934:	42aa      	cmp	r2, r5
 8019936:	d8e7      	bhi.n	8019908 <__multiply+0x110>
 8019938:	4662      	mov	r2, ip
 801993a:	9906      	ldr	r1, [sp, #24]
 801993c:	5053      	str	r3, [r2, r1]
 801993e:	9b01      	ldr	r3, [sp, #4]
 8019940:	3304      	adds	r3, #4
 8019942:	9301      	str	r3, [sp, #4]
 8019944:	2304      	movs	r3, #4
 8019946:	449c      	add	ip, r3
 8019948:	e79b      	b.n	8019882 <__multiply+0x8a>
 801994a:	9b03      	ldr	r3, [sp, #12]
 801994c:	3b01      	subs	r3, #1
 801994e:	9303      	str	r3, [sp, #12]
 8019950:	e79b      	b.n	801988a <__multiply+0x92>
 8019952:	46c0      	nop			@ (mov r8, r8)
 8019954:	0801c300 	.word	0x0801c300
 8019958:	0801c311 	.word	0x0801c311

0801995c <__pow5mult>:
 801995c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801995e:	2303      	movs	r3, #3
 8019960:	0015      	movs	r5, r2
 8019962:	0007      	movs	r7, r0
 8019964:	000e      	movs	r6, r1
 8019966:	401a      	ands	r2, r3
 8019968:	421d      	tst	r5, r3
 801996a:	d008      	beq.n	801997e <__pow5mult+0x22>
 801996c:	4925      	ldr	r1, [pc, #148]	@ (8019a04 <__pow5mult+0xa8>)
 801996e:	3a01      	subs	r2, #1
 8019970:	0092      	lsls	r2, r2, #2
 8019972:	5852      	ldr	r2, [r2, r1]
 8019974:	2300      	movs	r3, #0
 8019976:	0031      	movs	r1, r6
 8019978:	f7ff fe92 	bl	80196a0 <__multadd>
 801997c:	0006      	movs	r6, r0
 801997e:	10ad      	asrs	r5, r5, #2
 8019980:	d03d      	beq.n	80199fe <__pow5mult+0xa2>
 8019982:	69fc      	ldr	r4, [r7, #28]
 8019984:	2c00      	cmp	r4, #0
 8019986:	d10f      	bne.n	80199a8 <__pow5mult+0x4c>
 8019988:	2010      	movs	r0, #16
 801998a:	f7ff fd65 	bl	8019458 <malloc>
 801998e:	1e02      	subs	r2, r0, #0
 8019990:	61f8      	str	r0, [r7, #28]
 8019992:	d105      	bne.n	80199a0 <__pow5mult+0x44>
 8019994:	21b4      	movs	r1, #180	@ 0xb4
 8019996:	4b1c      	ldr	r3, [pc, #112]	@ (8019a08 <__pow5mult+0xac>)
 8019998:	481c      	ldr	r0, [pc, #112]	@ (8019a0c <__pow5mult+0xb0>)
 801999a:	31ff      	adds	r1, #255	@ 0xff
 801999c:	f000 fdd6 	bl	801a54c <__assert_func>
 80199a0:	6044      	str	r4, [r0, #4]
 80199a2:	6084      	str	r4, [r0, #8]
 80199a4:	6004      	str	r4, [r0, #0]
 80199a6:	60c4      	str	r4, [r0, #12]
 80199a8:	69fb      	ldr	r3, [r7, #28]
 80199aa:	689c      	ldr	r4, [r3, #8]
 80199ac:	9301      	str	r3, [sp, #4]
 80199ae:	2c00      	cmp	r4, #0
 80199b0:	d108      	bne.n	80199c4 <__pow5mult+0x68>
 80199b2:	0038      	movs	r0, r7
 80199b4:	4916      	ldr	r1, [pc, #88]	@ (8019a10 <__pow5mult+0xb4>)
 80199b6:	f7ff ff07 	bl	80197c8 <__i2b>
 80199ba:	9b01      	ldr	r3, [sp, #4]
 80199bc:	0004      	movs	r4, r0
 80199be:	6098      	str	r0, [r3, #8]
 80199c0:	2300      	movs	r3, #0
 80199c2:	6003      	str	r3, [r0, #0]
 80199c4:	2301      	movs	r3, #1
 80199c6:	421d      	tst	r5, r3
 80199c8:	d00a      	beq.n	80199e0 <__pow5mult+0x84>
 80199ca:	0031      	movs	r1, r6
 80199cc:	0022      	movs	r2, r4
 80199ce:	0038      	movs	r0, r7
 80199d0:	f7ff ff12 	bl	80197f8 <__multiply>
 80199d4:	0031      	movs	r1, r6
 80199d6:	9001      	str	r0, [sp, #4]
 80199d8:	0038      	movs	r0, r7
 80199da:	f7ff fe3d 	bl	8019658 <_Bfree>
 80199de:	9e01      	ldr	r6, [sp, #4]
 80199e0:	106d      	asrs	r5, r5, #1
 80199e2:	d00c      	beq.n	80199fe <__pow5mult+0xa2>
 80199e4:	6820      	ldr	r0, [r4, #0]
 80199e6:	2800      	cmp	r0, #0
 80199e8:	d107      	bne.n	80199fa <__pow5mult+0x9e>
 80199ea:	0022      	movs	r2, r4
 80199ec:	0021      	movs	r1, r4
 80199ee:	0038      	movs	r0, r7
 80199f0:	f7ff ff02 	bl	80197f8 <__multiply>
 80199f4:	2300      	movs	r3, #0
 80199f6:	6020      	str	r0, [r4, #0]
 80199f8:	6003      	str	r3, [r0, #0]
 80199fa:	0004      	movs	r4, r0
 80199fc:	e7e2      	b.n	80199c4 <__pow5mult+0x68>
 80199fe:	0030      	movs	r0, r6
 8019a00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019a02:	46c0      	nop			@ (mov r8, r8)
 8019a04:	0801c36c 	.word	0x0801c36c
 8019a08:	0801c291 	.word	0x0801c291
 8019a0c:	0801c311 	.word	0x0801c311
 8019a10:	00000271 	.word	0x00000271

08019a14 <__lshift>:
 8019a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a16:	000c      	movs	r4, r1
 8019a18:	0016      	movs	r6, r2
 8019a1a:	6923      	ldr	r3, [r4, #16]
 8019a1c:	1157      	asrs	r7, r2, #5
 8019a1e:	b085      	sub	sp, #20
 8019a20:	18fb      	adds	r3, r7, r3
 8019a22:	9301      	str	r3, [sp, #4]
 8019a24:	3301      	adds	r3, #1
 8019a26:	9300      	str	r3, [sp, #0]
 8019a28:	6849      	ldr	r1, [r1, #4]
 8019a2a:	68a3      	ldr	r3, [r4, #8]
 8019a2c:	9002      	str	r0, [sp, #8]
 8019a2e:	9a00      	ldr	r2, [sp, #0]
 8019a30:	4293      	cmp	r3, r2
 8019a32:	db10      	blt.n	8019a56 <__lshift+0x42>
 8019a34:	9802      	ldr	r0, [sp, #8]
 8019a36:	f7ff fdcb 	bl	80195d0 <_Balloc>
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	0001      	movs	r1, r0
 8019a3e:	0005      	movs	r5, r0
 8019a40:	001a      	movs	r2, r3
 8019a42:	3114      	adds	r1, #20
 8019a44:	4298      	cmp	r0, r3
 8019a46:	d10c      	bne.n	8019a62 <__lshift+0x4e>
 8019a48:	21ef      	movs	r1, #239	@ 0xef
 8019a4a:	002a      	movs	r2, r5
 8019a4c:	4b25      	ldr	r3, [pc, #148]	@ (8019ae4 <__lshift+0xd0>)
 8019a4e:	4826      	ldr	r0, [pc, #152]	@ (8019ae8 <__lshift+0xd4>)
 8019a50:	0049      	lsls	r1, r1, #1
 8019a52:	f000 fd7b 	bl	801a54c <__assert_func>
 8019a56:	3101      	adds	r1, #1
 8019a58:	005b      	lsls	r3, r3, #1
 8019a5a:	e7e8      	b.n	8019a2e <__lshift+0x1a>
 8019a5c:	0098      	lsls	r0, r3, #2
 8019a5e:	500a      	str	r2, [r1, r0]
 8019a60:	3301      	adds	r3, #1
 8019a62:	42bb      	cmp	r3, r7
 8019a64:	dbfa      	blt.n	8019a5c <__lshift+0x48>
 8019a66:	43fb      	mvns	r3, r7
 8019a68:	17db      	asrs	r3, r3, #31
 8019a6a:	401f      	ands	r7, r3
 8019a6c:	00bf      	lsls	r7, r7, #2
 8019a6e:	0023      	movs	r3, r4
 8019a70:	201f      	movs	r0, #31
 8019a72:	19c9      	adds	r1, r1, r7
 8019a74:	0037      	movs	r7, r6
 8019a76:	6922      	ldr	r2, [r4, #16]
 8019a78:	3314      	adds	r3, #20
 8019a7a:	0092      	lsls	r2, r2, #2
 8019a7c:	189a      	adds	r2, r3, r2
 8019a7e:	4007      	ands	r7, r0
 8019a80:	4206      	tst	r6, r0
 8019a82:	d029      	beq.n	8019ad8 <__lshift+0xc4>
 8019a84:	3001      	adds	r0, #1
 8019a86:	1bc0      	subs	r0, r0, r7
 8019a88:	9003      	str	r0, [sp, #12]
 8019a8a:	468c      	mov	ip, r1
 8019a8c:	2000      	movs	r0, #0
 8019a8e:	681e      	ldr	r6, [r3, #0]
 8019a90:	40be      	lsls	r6, r7
 8019a92:	4306      	orrs	r6, r0
 8019a94:	4660      	mov	r0, ip
 8019a96:	c040      	stmia	r0!, {r6}
 8019a98:	4684      	mov	ip, r0
 8019a9a:	9e03      	ldr	r6, [sp, #12]
 8019a9c:	cb01      	ldmia	r3!, {r0}
 8019a9e:	40f0      	lsrs	r0, r6
 8019aa0:	429a      	cmp	r2, r3
 8019aa2:	d8f4      	bhi.n	8019a8e <__lshift+0x7a>
 8019aa4:	0026      	movs	r6, r4
 8019aa6:	3615      	adds	r6, #21
 8019aa8:	2304      	movs	r3, #4
 8019aaa:	42b2      	cmp	r2, r6
 8019aac:	d304      	bcc.n	8019ab8 <__lshift+0xa4>
 8019aae:	1b13      	subs	r3, r2, r4
 8019ab0:	3b15      	subs	r3, #21
 8019ab2:	089b      	lsrs	r3, r3, #2
 8019ab4:	3301      	adds	r3, #1
 8019ab6:	009b      	lsls	r3, r3, #2
 8019ab8:	50c8      	str	r0, [r1, r3]
 8019aba:	2800      	cmp	r0, #0
 8019abc:	d002      	beq.n	8019ac4 <__lshift+0xb0>
 8019abe:	9b01      	ldr	r3, [sp, #4]
 8019ac0:	3302      	adds	r3, #2
 8019ac2:	9300      	str	r3, [sp, #0]
 8019ac4:	9b00      	ldr	r3, [sp, #0]
 8019ac6:	9802      	ldr	r0, [sp, #8]
 8019ac8:	3b01      	subs	r3, #1
 8019aca:	0021      	movs	r1, r4
 8019acc:	612b      	str	r3, [r5, #16]
 8019ace:	f7ff fdc3 	bl	8019658 <_Bfree>
 8019ad2:	0028      	movs	r0, r5
 8019ad4:	b005      	add	sp, #20
 8019ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ad8:	cb01      	ldmia	r3!, {r0}
 8019ada:	c101      	stmia	r1!, {r0}
 8019adc:	429a      	cmp	r2, r3
 8019ade:	d8fb      	bhi.n	8019ad8 <__lshift+0xc4>
 8019ae0:	e7f0      	b.n	8019ac4 <__lshift+0xb0>
 8019ae2:	46c0      	nop			@ (mov r8, r8)
 8019ae4:	0801c300 	.word	0x0801c300
 8019ae8:	0801c311 	.word	0x0801c311

08019aec <__mcmp>:
 8019aec:	b530      	push	{r4, r5, lr}
 8019aee:	690b      	ldr	r3, [r1, #16]
 8019af0:	6904      	ldr	r4, [r0, #16]
 8019af2:	0002      	movs	r2, r0
 8019af4:	1ae0      	subs	r0, r4, r3
 8019af6:	429c      	cmp	r4, r3
 8019af8:	d10f      	bne.n	8019b1a <__mcmp+0x2e>
 8019afa:	3214      	adds	r2, #20
 8019afc:	009b      	lsls	r3, r3, #2
 8019afe:	3114      	adds	r1, #20
 8019b00:	0014      	movs	r4, r2
 8019b02:	18c9      	adds	r1, r1, r3
 8019b04:	18d2      	adds	r2, r2, r3
 8019b06:	3a04      	subs	r2, #4
 8019b08:	3904      	subs	r1, #4
 8019b0a:	6815      	ldr	r5, [r2, #0]
 8019b0c:	680b      	ldr	r3, [r1, #0]
 8019b0e:	429d      	cmp	r5, r3
 8019b10:	d004      	beq.n	8019b1c <__mcmp+0x30>
 8019b12:	2001      	movs	r0, #1
 8019b14:	429d      	cmp	r5, r3
 8019b16:	d200      	bcs.n	8019b1a <__mcmp+0x2e>
 8019b18:	3802      	subs	r0, #2
 8019b1a:	bd30      	pop	{r4, r5, pc}
 8019b1c:	4294      	cmp	r4, r2
 8019b1e:	d3f2      	bcc.n	8019b06 <__mcmp+0x1a>
 8019b20:	e7fb      	b.n	8019b1a <__mcmp+0x2e>
	...

08019b24 <__mdiff>:
 8019b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b26:	000c      	movs	r4, r1
 8019b28:	b087      	sub	sp, #28
 8019b2a:	9000      	str	r0, [sp, #0]
 8019b2c:	0011      	movs	r1, r2
 8019b2e:	0020      	movs	r0, r4
 8019b30:	0017      	movs	r7, r2
 8019b32:	f7ff ffdb 	bl	8019aec <__mcmp>
 8019b36:	1e05      	subs	r5, r0, #0
 8019b38:	d110      	bne.n	8019b5c <__mdiff+0x38>
 8019b3a:	0001      	movs	r1, r0
 8019b3c:	9800      	ldr	r0, [sp, #0]
 8019b3e:	f7ff fd47 	bl	80195d0 <_Balloc>
 8019b42:	1e02      	subs	r2, r0, #0
 8019b44:	d104      	bne.n	8019b50 <__mdiff+0x2c>
 8019b46:	4b40      	ldr	r3, [pc, #256]	@ (8019c48 <__mdiff+0x124>)
 8019b48:	4840      	ldr	r0, [pc, #256]	@ (8019c4c <__mdiff+0x128>)
 8019b4a:	4941      	ldr	r1, [pc, #260]	@ (8019c50 <__mdiff+0x12c>)
 8019b4c:	f000 fcfe 	bl	801a54c <__assert_func>
 8019b50:	2301      	movs	r3, #1
 8019b52:	6145      	str	r5, [r0, #20]
 8019b54:	6103      	str	r3, [r0, #16]
 8019b56:	0010      	movs	r0, r2
 8019b58:	b007      	add	sp, #28
 8019b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b5c:	2600      	movs	r6, #0
 8019b5e:	42b0      	cmp	r0, r6
 8019b60:	da03      	bge.n	8019b6a <__mdiff+0x46>
 8019b62:	0023      	movs	r3, r4
 8019b64:	003c      	movs	r4, r7
 8019b66:	001f      	movs	r7, r3
 8019b68:	3601      	adds	r6, #1
 8019b6a:	6861      	ldr	r1, [r4, #4]
 8019b6c:	9800      	ldr	r0, [sp, #0]
 8019b6e:	f7ff fd2f 	bl	80195d0 <_Balloc>
 8019b72:	1e02      	subs	r2, r0, #0
 8019b74:	d103      	bne.n	8019b7e <__mdiff+0x5a>
 8019b76:	4b34      	ldr	r3, [pc, #208]	@ (8019c48 <__mdiff+0x124>)
 8019b78:	4834      	ldr	r0, [pc, #208]	@ (8019c4c <__mdiff+0x128>)
 8019b7a:	4936      	ldr	r1, [pc, #216]	@ (8019c54 <__mdiff+0x130>)
 8019b7c:	e7e6      	b.n	8019b4c <__mdiff+0x28>
 8019b7e:	6923      	ldr	r3, [r4, #16]
 8019b80:	3414      	adds	r4, #20
 8019b82:	9300      	str	r3, [sp, #0]
 8019b84:	009b      	lsls	r3, r3, #2
 8019b86:	18e3      	adds	r3, r4, r3
 8019b88:	0021      	movs	r1, r4
 8019b8a:	9401      	str	r4, [sp, #4]
 8019b8c:	003c      	movs	r4, r7
 8019b8e:	9302      	str	r3, [sp, #8]
 8019b90:	693b      	ldr	r3, [r7, #16]
 8019b92:	3414      	adds	r4, #20
 8019b94:	009b      	lsls	r3, r3, #2
 8019b96:	18e3      	adds	r3, r4, r3
 8019b98:	9303      	str	r3, [sp, #12]
 8019b9a:	0003      	movs	r3, r0
 8019b9c:	60c6      	str	r6, [r0, #12]
 8019b9e:	468c      	mov	ip, r1
 8019ba0:	2000      	movs	r0, #0
 8019ba2:	3314      	adds	r3, #20
 8019ba4:	9304      	str	r3, [sp, #16]
 8019ba6:	9305      	str	r3, [sp, #20]
 8019ba8:	4663      	mov	r3, ip
 8019baa:	cb20      	ldmia	r3!, {r5}
 8019bac:	b2a9      	uxth	r1, r5
 8019bae:	000e      	movs	r6, r1
 8019bb0:	469c      	mov	ip, r3
 8019bb2:	cc08      	ldmia	r4!, {r3}
 8019bb4:	0c2d      	lsrs	r5, r5, #16
 8019bb6:	b299      	uxth	r1, r3
 8019bb8:	1a71      	subs	r1, r6, r1
 8019bba:	1809      	adds	r1, r1, r0
 8019bbc:	0c1b      	lsrs	r3, r3, #16
 8019bbe:	1408      	asrs	r0, r1, #16
 8019bc0:	1aeb      	subs	r3, r5, r3
 8019bc2:	181b      	adds	r3, r3, r0
 8019bc4:	1418      	asrs	r0, r3, #16
 8019bc6:	b289      	uxth	r1, r1
 8019bc8:	041b      	lsls	r3, r3, #16
 8019bca:	4319      	orrs	r1, r3
 8019bcc:	9b05      	ldr	r3, [sp, #20]
 8019bce:	c302      	stmia	r3!, {r1}
 8019bd0:	9305      	str	r3, [sp, #20]
 8019bd2:	9b03      	ldr	r3, [sp, #12]
 8019bd4:	42a3      	cmp	r3, r4
 8019bd6:	d8e7      	bhi.n	8019ba8 <__mdiff+0x84>
 8019bd8:	0039      	movs	r1, r7
 8019bda:	9c03      	ldr	r4, [sp, #12]
 8019bdc:	3115      	adds	r1, #21
 8019bde:	2304      	movs	r3, #4
 8019be0:	428c      	cmp	r4, r1
 8019be2:	d304      	bcc.n	8019bee <__mdiff+0xca>
 8019be4:	1be3      	subs	r3, r4, r7
 8019be6:	3b15      	subs	r3, #21
 8019be8:	089b      	lsrs	r3, r3, #2
 8019bea:	3301      	adds	r3, #1
 8019bec:	009b      	lsls	r3, r3, #2
 8019bee:	9901      	ldr	r1, [sp, #4]
 8019bf0:	18cd      	adds	r5, r1, r3
 8019bf2:	9904      	ldr	r1, [sp, #16]
 8019bf4:	002e      	movs	r6, r5
 8019bf6:	18cb      	adds	r3, r1, r3
 8019bf8:	001f      	movs	r7, r3
 8019bfa:	9902      	ldr	r1, [sp, #8]
 8019bfc:	428e      	cmp	r6, r1
 8019bfe:	d311      	bcc.n	8019c24 <__mdiff+0x100>
 8019c00:	9c02      	ldr	r4, [sp, #8]
 8019c02:	1ee9      	subs	r1, r5, #3
 8019c04:	2000      	movs	r0, #0
 8019c06:	428c      	cmp	r4, r1
 8019c08:	d304      	bcc.n	8019c14 <__mdiff+0xf0>
 8019c0a:	0021      	movs	r1, r4
 8019c0c:	3103      	adds	r1, #3
 8019c0e:	1b49      	subs	r1, r1, r5
 8019c10:	0889      	lsrs	r1, r1, #2
 8019c12:	0088      	lsls	r0, r1, #2
 8019c14:	181b      	adds	r3, r3, r0
 8019c16:	3b04      	subs	r3, #4
 8019c18:	6819      	ldr	r1, [r3, #0]
 8019c1a:	2900      	cmp	r1, #0
 8019c1c:	d010      	beq.n	8019c40 <__mdiff+0x11c>
 8019c1e:	9b00      	ldr	r3, [sp, #0]
 8019c20:	6113      	str	r3, [r2, #16]
 8019c22:	e798      	b.n	8019b56 <__mdiff+0x32>
 8019c24:	4684      	mov	ip, r0
 8019c26:	ce02      	ldmia	r6!, {r1}
 8019c28:	b288      	uxth	r0, r1
 8019c2a:	4460      	add	r0, ip
 8019c2c:	1400      	asrs	r0, r0, #16
 8019c2e:	0c0c      	lsrs	r4, r1, #16
 8019c30:	1904      	adds	r4, r0, r4
 8019c32:	4461      	add	r1, ip
 8019c34:	1420      	asrs	r0, r4, #16
 8019c36:	b289      	uxth	r1, r1
 8019c38:	0424      	lsls	r4, r4, #16
 8019c3a:	4321      	orrs	r1, r4
 8019c3c:	c702      	stmia	r7!, {r1}
 8019c3e:	e7dc      	b.n	8019bfa <__mdiff+0xd6>
 8019c40:	9900      	ldr	r1, [sp, #0]
 8019c42:	3901      	subs	r1, #1
 8019c44:	9100      	str	r1, [sp, #0]
 8019c46:	e7e6      	b.n	8019c16 <__mdiff+0xf2>
 8019c48:	0801c300 	.word	0x0801c300
 8019c4c:	0801c311 	.word	0x0801c311
 8019c50:	00000237 	.word	0x00000237
 8019c54:	00000245 	.word	0x00000245

08019c58 <__d2b>:
 8019c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c5a:	2101      	movs	r1, #1
 8019c5c:	0016      	movs	r6, r2
 8019c5e:	001f      	movs	r7, r3
 8019c60:	f7ff fcb6 	bl	80195d0 <_Balloc>
 8019c64:	1e04      	subs	r4, r0, #0
 8019c66:	d105      	bne.n	8019c74 <__d2b+0x1c>
 8019c68:	0022      	movs	r2, r4
 8019c6a:	4b25      	ldr	r3, [pc, #148]	@ (8019d00 <__d2b+0xa8>)
 8019c6c:	4825      	ldr	r0, [pc, #148]	@ (8019d04 <__d2b+0xac>)
 8019c6e:	4926      	ldr	r1, [pc, #152]	@ (8019d08 <__d2b+0xb0>)
 8019c70:	f000 fc6c 	bl	801a54c <__assert_func>
 8019c74:	033b      	lsls	r3, r7, #12
 8019c76:	007d      	lsls	r5, r7, #1
 8019c78:	0b1b      	lsrs	r3, r3, #12
 8019c7a:	0d6d      	lsrs	r5, r5, #21
 8019c7c:	d002      	beq.n	8019c84 <__d2b+0x2c>
 8019c7e:	2280      	movs	r2, #128	@ 0x80
 8019c80:	0352      	lsls	r2, r2, #13
 8019c82:	4313      	orrs	r3, r2
 8019c84:	9301      	str	r3, [sp, #4]
 8019c86:	2e00      	cmp	r6, #0
 8019c88:	d025      	beq.n	8019cd6 <__d2b+0x7e>
 8019c8a:	4668      	mov	r0, sp
 8019c8c:	9600      	str	r6, [sp, #0]
 8019c8e:	f7ff fd6c 	bl	801976a <__lo0bits>
 8019c92:	9b01      	ldr	r3, [sp, #4]
 8019c94:	9900      	ldr	r1, [sp, #0]
 8019c96:	2800      	cmp	r0, #0
 8019c98:	d01b      	beq.n	8019cd2 <__d2b+0x7a>
 8019c9a:	2220      	movs	r2, #32
 8019c9c:	001e      	movs	r6, r3
 8019c9e:	1a12      	subs	r2, r2, r0
 8019ca0:	4096      	lsls	r6, r2
 8019ca2:	0032      	movs	r2, r6
 8019ca4:	40c3      	lsrs	r3, r0
 8019ca6:	430a      	orrs	r2, r1
 8019ca8:	6162      	str	r2, [r4, #20]
 8019caa:	9301      	str	r3, [sp, #4]
 8019cac:	9e01      	ldr	r6, [sp, #4]
 8019cae:	61a6      	str	r6, [r4, #24]
 8019cb0:	1e73      	subs	r3, r6, #1
 8019cb2:	419e      	sbcs	r6, r3
 8019cb4:	3601      	adds	r6, #1
 8019cb6:	6126      	str	r6, [r4, #16]
 8019cb8:	2d00      	cmp	r5, #0
 8019cba:	d014      	beq.n	8019ce6 <__d2b+0x8e>
 8019cbc:	2635      	movs	r6, #53	@ 0x35
 8019cbe:	4b13      	ldr	r3, [pc, #76]	@ (8019d0c <__d2b+0xb4>)
 8019cc0:	18ed      	adds	r5, r5, r3
 8019cc2:	9b08      	ldr	r3, [sp, #32]
 8019cc4:	182d      	adds	r5, r5, r0
 8019cc6:	601d      	str	r5, [r3, #0]
 8019cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019cca:	1a36      	subs	r6, r6, r0
 8019ccc:	601e      	str	r6, [r3, #0]
 8019cce:	0020      	movs	r0, r4
 8019cd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019cd2:	6161      	str	r1, [r4, #20]
 8019cd4:	e7ea      	b.n	8019cac <__d2b+0x54>
 8019cd6:	a801      	add	r0, sp, #4
 8019cd8:	f7ff fd47 	bl	801976a <__lo0bits>
 8019cdc:	9b01      	ldr	r3, [sp, #4]
 8019cde:	2601      	movs	r6, #1
 8019ce0:	6163      	str	r3, [r4, #20]
 8019ce2:	3020      	adds	r0, #32
 8019ce4:	e7e7      	b.n	8019cb6 <__d2b+0x5e>
 8019ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8019d10 <__d2b+0xb8>)
 8019ce8:	18c0      	adds	r0, r0, r3
 8019cea:	9b08      	ldr	r3, [sp, #32]
 8019cec:	6018      	str	r0, [r3, #0]
 8019cee:	4b09      	ldr	r3, [pc, #36]	@ (8019d14 <__d2b+0xbc>)
 8019cf0:	18f3      	adds	r3, r6, r3
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	18e3      	adds	r3, r4, r3
 8019cf6:	6958      	ldr	r0, [r3, #20]
 8019cf8:	f7ff fd16 	bl	8019728 <__hi0bits>
 8019cfc:	0176      	lsls	r6, r6, #5
 8019cfe:	e7e3      	b.n	8019cc8 <__d2b+0x70>
 8019d00:	0801c300 	.word	0x0801c300
 8019d04:	0801c311 	.word	0x0801c311
 8019d08:	0000030f 	.word	0x0000030f
 8019d0c:	fffffbcd 	.word	0xfffffbcd
 8019d10:	fffffbce 	.word	0xfffffbce
 8019d14:	3fffffff 	.word	0x3fffffff

08019d18 <__ssputs_r>:
 8019d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d1a:	688e      	ldr	r6, [r1, #8]
 8019d1c:	b085      	sub	sp, #20
 8019d1e:	001f      	movs	r7, r3
 8019d20:	000c      	movs	r4, r1
 8019d22:	680b      	ldr	r3, [r1, #0]
 8019d24:	9002      	str	r0, [sp, #8]
 8019d26:	9203      	str	r2, [sp, #12]
 8019d28:	42be      	cmp	r6, r7
 8019d2a:	d830      	bhi.n	8019d8e <__ssputs_r+0x76>
 8019d2c:	210c      	movs	r1, #12
 8019d2e:	5e62      	ldrsh	r2, [r4, r1]
 8019d30:	2190      	movs	r1, #144	@ 0x90
 8019d32:	00c9      	lsls	r1, r1, #3
 8019d34:	420a      	tst	r2, r1
 8019d36:	d028      	beq.n	8019d8a <__ssputs_r+0x72>
 8019d38:	2003      	movs	r0, #3
 8019d3a:	6921      	ldr	r1, [r4, #16]
 8019d3c:	1a5b      	subs	r3, r3, r1
 8019d3e:	9301      	str	r3, [sp, #4]
 8019d40:	6963      	ldr	r3, [r4, #20]
 8019d42:	4343      	muls	r3, r0
 8019d44:	9801      	ldr	r0, [sp, #4]
 8019d46:	0fdd      	lsrs	r5, r3, #31
 8019d48:	18ed      	adds	r5, r5, r3
 8019d4a:	1c7b      	adds	r3, r7, #1
 8019d4c:	181b      	adds	r3, r3, r0
 8019d4e:	106d      	asrs	r5, r5, #1
 8019d50:	42ab      	cmp	r3, r5
 8019d52:	d900      	bls.n	8019d56 <__ssputs_r+0x3e>
 8019d54:	001d      	movs	r5, r3
 8019d56:	0552      	lsls	r2, r2, #21
 8019d58:	d528      	bpl.n	8019dac <__ssputs_r+0x94>
 8019d5a:	0029      	movs	r1, r5
 8019d5c:	9802      	ldr	r0, [sp, #8]
 8019d5e:	f7ff fba7 	bl	80194b0 <_malloc_r>
 8019d62:	1e06      	subs	r6, r0, #0
 8019d64:	d02c      	beq.n	8019dc0 <__ssputs_r+0xa8>
 8019d66:	9a01      	ldr	r2, [sp, #4]
 8019d68:	6921      	ldr	r1, [r4, #16]
 8019d6a:	f7fe fc9f 	bl	80186ac <memcpy>
 8019d6e:	89a2      	ldrh	r2, [r4, #12]
 8019d70:	4b18      	ldr	r3, [pc, #96]	@ (8019dd4 <__ssputs_r+0xbc>)
 8019d72:	401a      	ands	r2, r3
 8019d74:	2380      	movs	r3, #128	@ 0x80
 8019d76:	4313      	orrs	r3, r2
 8019d78:	81a3      	strh	r3, [r4, #12]
 8019d7a:	9b01      	ldr	r3, [sp, #4]
 8019d7c:	6126      	str	r6, [r4, #16]
 8019d7e:	18f6      	adds	r6, r6, r3
 8019d80:	6026      	str	r6, [r4, #0]
 8019d82:	003e      	movs	r6, r7
 8019d84:	6165      	str	r5, [r4, #20]
 8019d86:	1aed      	subs	r5, r5, r3
 8019d88:	60a5      	str	r5, [r4, #8]
 8019d8a:	42be      	cmp	r6, r7
 8019d8c:	d900      	bls.n	8019d90 <__ssputs_r+0x78>
 8019d8e:	003e      	movs	r6, r7
 8019d90:	0032      	movs	r2, r6
 8019d92:	9903      	ldr	r1, [sp, #12]
 8019d94:	6820      	ldr	r0, [r4, #0]
 8019d96:	f000 fbb3 	bl	801a500 <memmove>
 8019d9a:	2000      	movs	r0, #0
 8019d9c:	68a3      	ldr	r3, [r4, #8]
 8019d9e:	1b9b      	subs	r3, r3, r6
 8019da0:	60a3      	str	r3, [r4, #8]
 8019da2:	6823      	ldr	r3, [r4, #0]
 8019da4:	199b      	adds	r3, r3, r6
 8019da6:	6023      	str	r3, [r4, #0]
 8019da8:	b005      	add	sp, #20
 8019daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019dac:	002a      	movs	r2, r5
 8019dae:	9802      	ldr	r0, [sp, #8]
 8019db0:	f000 fc29 	bl	801a606 <_realloc_r>
 8019db4:	1e06      	subs	r6, r0, #0
 8019db6:	d1e0      	bne.n	8019d7a <__ssputs_r+0x62>
 8019db8:	6921      	ldr	r1, [r4, #16]
 8019dba:	9802      	ldr	r0, [sp, #8]
 8019dbc:	f7ff fb02 	bl	80193c4 <_free_r>
 8019dc0:	230c      	movs	r3, #12
 8019dc2:	2001      	movs	r0, #1
 8019dc4:	9a02      	ldr	r2, [sp, #8]
 8019dc6:	4240      	negs	r0, r0
 8019dc8:	6013      	str	r3, [r2, #0]
 8019dca:	89a2      	ldrh	r2, [r4, #12]
 8019dcc:	3334      	adds	r3, #52	@ 0x34
 8019dce:	4313      	orrs	r3, r2
 8019dd0:	81a3      	strh	r3, [r4, #12]
 8019dd2:	e7e9      	b.n	8019da8 <__ssputs_r+0x90>
 8019dd4:	fffffb7f 	.word	0xfffffb7f

08019dd8 <_svfiprintf_r>:
 8019dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019dda:	b0a1      	sub	sp, #132	@ 0x84
 8019ddc:	9003      	str	r0, [sp, #12]
 8019dde:	001d      	movs	r5, r3
 8019de0:	898b      	ldrh	r3, [r1, #12]
 8019de2:	000f      	movs	r7, r1
 8019de4:	0016      	movs	r6, r2
 8019de6:	061b      	lsls	r3, r3, #24
 8019de8:	d511      	bpl.n	8019e0e <_svfiprintf_r+0x36>
 8019dea:	690b      	ldr	r3, [r1, #16]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d10e      	bne.n	8019e0e <_svfiprintf_r+0x36>
 8019df0:	2140      	movs	r1, #64	@ 0x40
 8019df2:	f7ff fb5d 	bl	80194b0 <_malloc_r>
 8019df6:	6038      	str	r0, [r7, #0]
 8019df8:	6138      	str	r0, [r7, #16]
 8019dfa:	2800      	cmp	r0, #0
 8019dfc:	d105      	bne.n	8019e0a <_svfiprintf_r+0x32>
 8019dfe:	230c      	movs	r3, #12
 8019e00:	9a03      	ldr	r2, [sp, #12]
 8019e02:	6013      	str	r3, [r2, #0]
 8019e04:	2001      	movs	r0, #1
 8019e06:	4240      	negs	r0, r0
 8019e08:	e0cf      	b.n	8019faa <_svfiprintf_r+0x1d2>
 8019e0a:	2340      	movs	r3, #64	@ 0x40
 8019e0c:	617b      	str	r3, [r7, #20]
 8019e0e:	2300      	movs	r3, #0
 8019e10:	ac08      	add	r4, sp, #32
 8019e12:	6163      	str	r3, [r4, #20]
 8019e14:	3320      	adds	r3, #32
 8019e16:	7663      	strb	r3, [r4, #25]
 8019e18:	3310      	adds	r3, #16
 8019e1a:	76a3      	strb	r3, [r4, #26]
 8019e1c:	9507      	str	r5, [sp, #28]
 8019e1e:	0035      	movs	r5, r6
 8019e20:	782b      	ldrb	r3, [r5, #0]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d001      	beq.n	8019e2a <_svfiprintf_r+0x52>
 8019e26:	2b25      	cmp	r3, #37	@ 0x25
 8019e28:	d148      	bne.n	8019ebc <_svfiprintf_r+0xe4>
 8019e2a:	1bab      	subs	r3, r5, r6
 8019e2c:	9305      	str	r3, [sp, #20]
 8019e2e:	42b5      	cmp	r5, r6
 8019e30:	d00b      	beq.n	8019e4a <_svfiprintf_r+0x72>
 8019e32:	0032      	movs	r2, r6
 8019e34:	0039      	movs	r1, r7
 8019e36:	9803      	ldr	r0, [sp, #12]
 8019e38:	f7ff ff6e 	bl	8019d18 <__ssputs_r>
 8019e3c:	3001      	adds	r0, #1
 8019e3e:	d100      	bne.n	8019e42 <_svfiprintf_r+0x6a>
 8019e40:	e0ae      	b.n	8019fa0 <_svfiprintf_r+0x1c8>
 8019e42:	6963      	ldr	r3, [r4, #20]
 8019e44:	9a05      	ldr	r2, [sp, #20]
 8019e46:	189b      	adds	r3, r3, r2
 8019e48:	6163      	str	r3, [r4, #20]
 8019e4a:	782b      	ldrb	r3, [r5, #0]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d100      	bne.n	8019e52 <_svfiprintf_r+0x7a>
 8019e50:	e0a6      	b.n	8019fa0 <_svfiprintf_r+0x1c8>
 8019e52:	2201      	movs	r2, #1
 8019e54:	2300      	movs	r3, #0
 8019e56:	4252      	negs	r2, r2
 8019e58:	6062      	str	r2, [r4, #4]
 8019e5a:	a904      	add	r1, sp, #16
 8019e5c:	3254      	adds	r2, #84	@ 0x54
 8019e5e:	1852      	adds	r2, r2, r1
 8019e60:	1c6e      	adds	r6, r5, #1
 8019e62:	6023      	str	r3, [r4, #0]
 8019e64:	60e3      	str	r3, [r4, #12]
 8019e66:	60a3      	str	r3, [r4, #8]
 8019e68:	7013      	strb	r3, [r2, #0]
 8019e6a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019e6c:	4b54      	ldr	r3, [pc, #336]	@ (8019fc0 <_svfiprintf_r+0x1e8>)
 8019e6e:	2205      	movs	r2, #5
 8019e70:	0018      	movs	r0, r3
 8019e72:	7831      	ldrb	r1, [r6, #0]
 8019e74:	9305      	str	r3, [sp, #20]
 8019e76:	f7fe fc0e 	bl	8018696 <memchr>
 8019e7a:	1c75      	adds	r5, r6, #1
 8019e7c:	2800      	cmp	r0, #0
 8019e7e:	d11f      	bne.n	8019ec0 <_svfiprintf_r+0xe8>
 8019e80:	6822      	ldr	r2, [r4, #0]
 8019e82:	06d3      	lsls	r3, r2, #27
 8019e84:	d504      	bpl.n	8019e90 <_svfiprintf_r+0xb8>
 8019e86:	2353      	movs	r3, #83	@ 0x53
 8019e88:	a904      	add	r1, sp, #16
 8019e8a:	185b      	adds	r3, r3, r1
 8019e8c:	2120      	movs	r1, #32
 8019e8e:	7019      	strb	r1, [r3, #0]
 8019e90:	0713      	lsls	r3, r2, #28
 8019e92:	d504      	bpl.n	8019e9e <_svfiprintf_r+0xc6>
 8019e94:	2353      	movs	r3, #83	@ 0x53
 8019e96:	a904      	add	r1, sp, #16
 8019e98:	185b      	adds	r3, r3, r1
 8019e9a:	212b      	movs	r1, #43	@ 0x2b
 8019e9c:	7019      	strb	r1, [r3, #0]
 8019e9e:	7833      	ldrb	r3, [r6, #0]
 8019ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8019ea2:	d016      	beq.n	8019ed2 <_svfiprintf_r+0xfa>
 8019ea4:	0035      	movs	r5, r6
 8019ea6:	2100      	movs	r1, #0
 8019ea8:	200a      	movs	r0, #10
 8019eaa:	68e3      	ldr	r3, [r4, #12]
 8019eac:	782a      	ldrb	r2, [r5, #0]
 8019eae:	1c6e      	adds	r6, r5, #1
 8019eb0:	3a30      	subs	r2, #48	@ 0x30
 8019eb2:	2a09      	cmp	r2, #9
 8019eb4:	d950      	bls.n	8019f58 <_svfiprintf_r+0x180>
 8019eb6:	2900      	cmp	r1, #0
 8019eb8:	d111      	bne.n	8019ede <_svfiprintf_r+0x106>
 8019eba:	e017      	b.n	8019eec <_svfiprintf_r+0x114>
 8019ebc:	3501      	adds	r5, #1
 8019ebe:	e7af      	b.n	8019e20 <_svfiprintf_r+0x48>
 8019ec0:	9b05      	ldr	r3, [sp, #20]
 8019ec2:	6822      	ldr	r2, [r4, #0]
 8019ec4:	1ac0      	subs	r0, r0, r3
 8019ec6:	2301      	movs	r3, #1
 8019ec8:	4083      	lsls	r3, r0
 8019eca:	4313      	orrs	r3, r2
 8019ecc:	002e      	movs	r6, r5
 8019ece:	6023      	str	r3, [r4, #0]
 8019ed0:	e7cc      	b.n	8019e6c <_svfiprintf_r+0x94>
 8019ed2:	9b07      	ldr	r3, [sp, #28]
 8019ed4:	1d19      	adds	r1, r3, #4
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	9107      	str	r1, [sp, #28]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	db01      	blt.n	8019ee2 <_svfiprintf_r+0x10a>
 8019ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019ee0:	e004      	b.n	8019eec <_svfiprintf_r+0x114>
 8019ee2:	425b      	negs	r3, r3
 8019ee4:	60e3      	str	r3, [r4, #12]
 8019ee6:	2302      	movs	r3, #2
 8019ee8:	4313      	orrs	r3, r2
 8019eea:	6023      	str	r3, [r4, #0]
 8019eec:	782b      	ldrb	r3, [r5, #0]
 8019eee:	2b2e      	cmp	r3, #46	@ 0x2e
 8019ef0:	d10c      	bne.n	8019f0c <_svfiprintf_r+0x134>
 8019ef2:	786b      	ldrb	r3, [r5, #1]
 8019ef4:	2b2a      	cmp	r3, #42	@ 0x2a
 8019ef6:	d134      	bne.n	8019f62 <_svfiprintf_r+0x18a>
 8019ef8:	9b07      	ldr	r3, [sp, #28]
 8019efa:	3502      	adds	r5, #2
 8019efc:	1d1a      	adds	r2, r3, #4
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	9207      	str	r2, [sp, #28]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	da01      	bge.n	8019f0a <_svfiprintf_r+0x132>
 8019f06:	2301      	movs	r3, #1
 8019f08:	425b      	negs	r3, r3
 8019f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f0c:	4e2d      	ldr	r6, [pc, #180]	@ (8019fc4 <_svfiprintf_r+0x1ec>)
 8019f0e:	2203      	movs	r2, #3
 8019f10:	0030      	movs	r0, r6
 8019f12:	7829      	ldrb	r1, [r5, #0]
 8019f14:	f7fe fbbf 	bl	8018696 <memchr>
 8019f18:	2800      	cmp	r0, #0
 8019f1a:	d006      	beq.n	8019f2a <_svfiprintf_r+0x152>
 8019f1c:	2340      	movs	r3, #64	@ 0x40
 8019f1e:	1b80      	subs	r0, r0, r6
 8019f20:	4083      	lsls	r3, r0
 8019f22:	6822      	ldr	r2, [r4, #0]
 8019f24:	3501      	adds	r5, #1
 8019f26:	4313      	orrs	r3, r2
 8019f28:	6023      	str	r3, [r4, #0]
 8019f2a:	7829      	ldrb	r1, [r5, #0]
 8019f2c:	2206      	movs	r2, #6
 8019f2e:	4826      	ldr	r0, [pc, #152]	@ (8019fc8 <_svfiprintf_r+0x1f0>)
 8019f30:	1c6e      	adds	r6, r5, #1
 8019f32:	7621      	strb	r1, [r4, #24]
 8019f34:	f7fe fbaf 	bl	8018696 <memchr>
 8019f38:	2800      	cmp	r0, #0
 8019f3a:	d038      	beq.n	8019fae <_svfiprintf_r+0x1d6>
 8019f3c:	4b23      	ldr	r3, [pc, #140]	@ (8019fcc <_svfiprintf_r+0x1f4>)
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d122      	bne.n	8019f88 <_svfiprintf_r+0x1b0>
 8019f42:	2207      	movs	r2, #7
 8019f44:	9b07      	ldr	r3, [sp, #28]
 8019f46:	3307      	adds	r3, #7
 8019f48:	4393      	bics	r3, r2
 8019f4a:	3308      	adds	r3, #8
 8019f4c:	9307      	str	r3, [sp, #28]
 8019f4e:	6963      	ldr	r3, [r4, #20]
 8019f50:	9a04      	ldr	r2, [sp, #16]
 8019f52:	189b      	adds	r3, r3, r2
 8019f54:	6163      	str	r3, [r4, #20]
 8019f56:	e762      	b.n	8019e1e <_svfiprintf_r+0x46>
 8019f58:	4343      	muls	r3, r0
 8019f5a:	0035      	movs	r5, r6
 8019f5c:	2101      	movs	r1, #1
 8019f5e:	189b      	adds	r3, r3, r2
 8019f60:	e7a4      	b.n	8019eac <_svfiprintf_r+0xd4>
 8019f62:	2300      	movs	r3, #0
 8019f64:	200a      	movs	r0, #10
 8019f66:	0019      	movs	r1, r3
 8019f68:	3501      	adds	r5, #1
 8019f6a:	6063      	str	r3, [r4, #4]
 8019f6c:	782a      	ldrb	r2, [r5, #0]
 8019f6e:	1c6e      	adds	r6, r5, #1
 8019f70:	3a30      	subs	r2, #48	@ 0x30
 8019f72:	2a09      	cmp	r2, #9
 8019f74:	d903      	bls.n	8019f7e <_svfiprintf_r+0x1a6>
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d0c8      	beq.n	8019f0c <_svfiprintf_r+0x134>
 8019f7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8019f7c:	e7c6      	b.n	8019f0c <_svfiprintf_r+0x134>
 8019f7e:	4341      	muls	r1, r0
 8019f80:	0035      	movs	r5, r6
 8019f82:	2301      	movs	r3, #1
 8019f84:	1889      	adds	r1, r1, r2
 8019f86:	e7f1      	b.n	8019f6c <_svfiprintf_r+0x194>
 8019f88:	aa07      	add	r2, sp, #28
 8019f8a:	9200      	str	r2, [sp, #0]
 8019f8c:	0021      	movs	r1, r4
 8019f8e:	003a      	movs	r2, r7
 8019f90:	4b0f      	ldr	r3, [pc, #60]	@ (8019fd0 <_svfiprintf_r+0x1f8>)
 8019f92:	9803      	ldr	r0, [sp, #12]
 8019f94:	f7fd fd8c 	bl	8017ab0 <_printf_float>
 8019f98:	9004      	str	r0, [sp, #16]
 8019f9a:	9b04      	ldr	r3, [sp, #16]
 8019f9c:	3301      	adds	r3, #1
 8019f9e:	d1d6      	bne.n	8019f4e <_svfiprintf_r+0x176>
 8019fa0:	89bb      	ldrh	r3, [r7, #12]
 8019fa2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019fa4:	065b      	lsls	r3, r3, #25
 8019fa6:	d500      	bpl.n	8019faa <_svfiprintf_r+0x1d2>
 8019fa8:	e72c      	b.n	8019e04 <_svfiprintf_r+0x2c>
 8019faa:	b021      	add	sp, #132	@ 0x84
 8019fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fae:	aa07      	add	r2, sp, #28
 8019fb0:	9200      	str	r2, [sp, #0]
 8019fb2:	0021      	movs	r1, r4
 8019fb4:	003a      	movs	r2, r7
 8019fb6:	4b06      	ldr	r3, [pc, #24]	@ (8019fd0 <_svfiprintf_r+0x1f8>)
 8019fb8:	9803      	ldr	r0, [sp, #12]
 8019fba:	f7fe f827 	bl	801800c <_printf_i>
 8019fbe:	e7eb      	b.n	8019f98 <_svfiprintf_r+0x1c0>
 8019fc0:	0801c468 	.word	0x0801c468
 8019fc4:	0801c46e 	.word	0x0801c46e
 8019fc8:	0801c472 	.word	0x0801c472
 8019fcc:	08017ab1 	.word	0x08017ab1
 8019fd0:	08019d19 	.word	0x08019d19

08019fd4 <__sfputc_r>:
 8019fd4:	6893      	ldr	r3, [r2, #8]
 8019fd6:	b510      	push	{r4, lr}
 8019fd8:	3b01      	subs	r3, #1
 8019fda:	6093      	str	r3, [r2, #8]
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	da04      	bge.n	8019fea <__sfputc_r+0x16>
 8019fe0:	6994      	ldr	r4, [r2, #24]
 8019fe2:	42a3      	cmp	r3, r4
 8019fe4:	db07      	blt.n	8019ff6 <__sfputc_r+0x22>
 8019fe6:	290a      	cmp	r1, #10
 8019fe8:	d005      	beq.n	8019ff6 <__sfputc_r+0x22>
 8019fea:	6813      	ldr	r3, [r2, #0]
 8019fec:	1c58      	adds	r0, r3, #1
 8019fee:	6010      	str	r0, [r2, #0]
 8019ff0:	7019      	strb	r1, [r3, #0]
 8019ff2:	0008      	movs	r0, r1
 8019ff4:	bd10      	pop	{r4, pc}
 8019ff6:	f000 f9e2 	bl	801a3be <__swbuf_r>
 8019ffa:	0001      	movs	r1, r0
 8019ffc:	e7f9      	b.n	8019ff2 <__sfputc_r+0x1e>

08019ffe <__sfputs_r>:
 8019ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a000:	0006      	movs	r6, r0
 801a002:	000f      	movs	r7, r1
 801a004:	0014      	movs	r4, r2
 801a006:	18d5      	adds	r5, r2, r3
 801a008:	42ac      	cmp	r4, r5
 801a00a:	d101      	bne.n	801a010 <__sfputs_r+0x12>
 801a00c:	2000      	movs	r0, #0
 801a00e:	e007      	b.n	801a020 <__sfputs_r+0x22>
 801a010:	7821      	ldrb	r1, [r4, #0]
 801a012:	003a      	movs	r2, r7
 801a014:	0030      	movs	r0, r6
 801a016:	f7ff ffdd 	bl	8019fd4 <__sfputc_r>
 801a01a:	3401      	adds	r4, #1
 801a01c:	1c43      	adds	r3, r0, #1
 801a01e:	d1f3      	bne.n	801a008 <__sfputs_r+0xa>
 801a020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a024 <_vfiprintf_r>:
 801a024:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a026:	b0a1      	sub	sp, #132	@ 0x84
 801a028:	000f      	movs	r7, r1
 801a02a:	0015      	movs	r5, r2
 801a02c:	001e      	movs	r6, r3
 801a02e:	9003      	str	r0, [sp, #12]
 801a030:	2800      	cmp	r0, #0
 801a032:	d004      	beq.n	801a03e <_vfiprintf_r+0x1a>
 801a034:	6a03      	ldr	r3, [r0, #32]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d101      	bne.n	801a03e <_vfiprintf_r+0x1a>
 801a03a:	f7fe f985 	bl	8018348 <__sinit>
 801a03e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a040:	07db      	lsls	r3, r3, #31
 801a042:	d405      	bmi.n	801a050 <_vfiprintf_r+0x2c>
 801a044:	89bb      	ldrh	r3, [r7, #12]
 801a046:	059b      	lsls	r3, r3, #22
 801a048:	d402      	bmi.n	801a050 <_vfiprintf_r+0x2c>
 801a04a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a04c:	f7fe fb21 	bl	8018692 <__retarget_lock_acquire_recursive>
 801a050:	89bb      	ldrh	r3, [r7, #12]
 801a052:	071b      	lsls	r3, r3, #28
 801a054:	d502      	bpl.n	801a05c <_vfiprintf_r+0x38>
 801a056:	693b      	ldr	r3, [r7, #16]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d113      	bne.n	801a084 <_vfiprintf_r+0x60>
 801a05c:	0039      	movs	r1, r7
 801a05e:	9803      	ldr	r0, [sp, #12]
 801a060:	f000 f9f0 	bl	801a444 <__swsetup_r>
 801a064:	2800      	cmp	r0, #0
 801a066:	d00d      	beq.n	801a084 <_vfiprintf_r+0x60>
 801a068:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a06a:	07db      	lsls	r3, r3, #31
 801a06c:	d503      	bpl.n	801a076 <_vfiprintf_r+0x52>
 801a06e:	2001      	movs	r0, #1
 801a070:	4240      	negs	r0, r0
 801a072:	b021      	add	sp, #132	@ 0x84
 801a074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a076:	89bb      	ldrh	r3, [r7, #12]
 801a078:	059b      	lsls	r3, r3, #22
 801a07a:	d4f8      	bmi.n	801a06e <_vfiprintf_r+0x4a>
 801a07c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a07e:	f7fe fb09 	bl	8018694 <__retarget_lock_release_recursive>
 801a082:	e7f4      	b.n	801a06e <_vfiprintf_r+0x4a>
 801a084:	2300      	movs	r3, #0
 801a086:	ac08      	add	r4, sp, #32
 801a088:	6163      	str	r3, [r4, #20]
 801a08a:	3320      	adds	r3, #32
 801a08c:	7663      	strb	r3, [r4, #25]
 801a08e:	3310      	adds	r3, #16
 801a090:	76a3      	strb	r3, [r4, #26]
 801a092:	9607      	str	r6, [sp, #28]
 801a094:	002e      	movs	r6, r5
 801a096:	7833      	ldrb	r3, [r6, #0]
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d001      	beq.n	801a0a0 <_vfiprintf_r+0x7c>
 801a09c:	2b25      	cmp	r3, #37	@ 0x25
 801a09e:	d148      	bne.n	801a132 <_vfiprintf_r+0x10e>
 801a0a0:	1b73      	subs	r3, r6, r5
 801a0a2:	9305      	str	r3, [sp, #20]
 801a0a4:	42ae      	cmp	r6, r5
 801a0a6:	d00b      	beq.n	801a0c0 <_vfiprintf_r+0x9c>
 801a0a8:	002a      	movs	r2, r5
 801a0aa:	0039      	movs	r1, r7
 801a0ac:	9803      	ldr	r0, [sp, #12]
 801a0ae:	f7ff ffa6 	bl	8019ffe <__sfputs_r>
 801a0b2:	3001      	adds	r0, #1
 801a0b4:	d100      	bne.n	801a0b8 <_vfiprintf_r+0x94>
 801a0b6:	e0ae      	b.n	801a216 <_vfiprintf_r+0x1f2>
 801a0b8:	6963      	ldr	r3, [r4, #20]
 801a0ba:	9a05      	ldr	r2, [sp, #20]
 801a0bc:	189b      	adds	r3, r3, r2
 801a0be:	6163      	str	r3, [r4, #20]
 801a0c0:	7833      	ldrb	r3, [r6, #0]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d100      	bne.n	801a0c8 <_vfiprintf_r+0xa4>
 801a0c6:	e0a6      	b.n	801a216 <_vfiprintf_r+0x1f2>
 801a0c8:	2201      	movs	r2, #1
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	4252      	negs	r2, r2
 801a0ce:	6062      	str	r2, [r4, #4]
 801a0d0:	a904      	add	r1, sp, #16
 801a0d2:	3254      	adds	r2, #84	@ 0x54
 801a0d4:	1852      	adds	r2, r2, r1
 801a0d6:	1c75      	adds	r5, r6, #1
 801a0d8:	6023      	str	r3, [r4, #0]
 801a0da:	60e3      	str	r3, [r4, #12]
 801a0dc:	60a3      	str	r3, [r4, #8]
 801a0de:	7013      	strb	r3, [r2, #0]
 801a0e0:	65a3      	str	r3, [r4, #88]	@ 0x58
 801a0e2:	4b59      	ldr	r3, [pc, #356]	@ (801a248 <_vfiprintf_r+0x224>)
 801a0e4:	2205      	movs	r2, #5
 801a0e6:	0018      	movs	r0, r3
 801a0e8:	7829      	ldrb	r1, [r5, #0]
 801a0ea:	9305      	str	r3, [sp, #20]
 801a0ec:	f7fe fad3 	bl	8018696 <memchr>
 801a0f0:	1c6e      	adds	r6, r5, #1
 801a0f2:	2800      	cmp	r0, #0
 801a0f4:	d11f      	bne.n	801a136 <_vfiprintf_r+0x112>
 801a0f6:	6822      	ldr	r2, [r4, #0]
 801a0f8:	06d3      	lsls	r3, r2, #27
 801a0fa:	d504      	bpl.n	801a106 <_vfiprintf_r+0xe2>
 801a0fc:	2353      	movs	r3, #83	@ 0x53
 801a0fe:	a904      	add	r1, sp, #16
 801a100:	185b      	adds	r3, r3, r1
 801a102:	2120      	movs	r1, #32
 801a104:	7019      	strb	r1, [r3, #0]
 801a106:	0713      	lsls	r3, r2, #28
 801a108:	d504      	bpl.n	801a114 <_vfiprintf_r+0xf0>
 801a10a:	2353      	movs	r3, #83	@ 0x53
 801a10c:	a904      	add	r1, sp, #16
 801a10e:	185b      	adds	r3, r3, r1
 801a110:	212b      	movs	r1, #43	@ 0x2b
 801a112:	7019      	strb	r1, [r3, #0]
 801a114:	782b      	ldrb	r3, [r5, #0]
 801a116:	2b2a      	cmp	r3, #42	@ 0x2a
 801a118:	d016      	beq.n	801a148 <_vfiprintf_r+0x124>
 801a11a:	002e      	movs	r6, r5
 801a11c:	2100      	movs	r1, #0
 801a11e:	200a      	movs	r0, #10
 801a120:	68e3      	ldr	r3, [r4, #12]
 801a122:	7832      	ldrb	r2, [r6, #0]
 801a124:	1c75      	adds	r5, r6, #1
 801a126:	3a30      	subs	r2, #48	@ 0x30
 801a128:	2a09      	cmp	r2, #9
 801a12a:	d950      	bls.n	801a1ce <_vfiprintf_r+0x1aa>
 801a12c:	2900      	cmp	r1, #0
 801a12e:	d111      	bne.n	801a154 <_vfiprintf_r+0x130>
 801a130:	e017      	b.n	801a162 <_vfiprintf_r+0x13e>
 801a132:	3601      	adds	r6, #1
 801a134:	e7af      	b.n	801a096 <_vfiprintf_r+0x72>
 801a136:	9b05      	ldr	r3, [sp, #20]
 801a138:	6822      	ldr	r2, [r4, #0]
 801a13a:	1ac0      	subs	r0, r0, r3
 801a13c:	2301      	movs	r3, #1
 801a13e:	4083      	lsls	r3, r0
 801a140:	4313      	orrs	r3, r2
 801a142:	0035      	movs	r5, r6
 801a144:	6023      	str	r3, [r4, #0]
 801a146:	e7cc      	b.n	801a0e2 <_vfiprintf_r+0xbe>
 801a148:	9b07      	ldr	r3, [sp, #28]
 801a14a:	1d19      	adds	r1, r3, #4
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	9107      	str	r1, [sp, #28]
 801a150:	2b00      	cmp	r3, #0
 801a152:	db01      	blt.n	801a158 <_vfiprintf_r+0x134>
 801a154:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a156:	e004      	b.n	801a162 <_vfiprintf_r+0x13e>
 801a158:	425b      	negs	r3, r3
 801a15a:	60e3      	str	r3, [r4, #12]
 801a15c:	2302      	movs	r3, #2
 801a15e:	4313      	orrs	r3, r2
 801a160:	6023      	str	r3, [r4, #0]
 801a162:	7833      	ldrb	r3, [r6, #0]
 801a164:	2b2e      	cmp	r3, #46	@ 0x2e
 801a166:	d10c      	bne.n	801a182 <_vfiprintf_r+0x15e>
 801a168:	7873      	ldrb	r3, [r6, #1]
 801a16a:	2b2a      	cmp	r3, #42	@ 0x2a
 801a16c:	d134      	bne.n	801a1d8 <_vfiprintf_r+0x1b4>
 801a16e:	9b07      	ldr	r3, [sp, #28]
 801a170:	3602      	adds	r6, #2
 801a172:	1d1a      	adds	r2, r3, #4
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	9207      	str	r2, [sp, #28]
 801a178:	2b00      	cmp	r3, #0
 801a17a:	da01      	bge.n	801a180 <_vfiprintf_r+0x15c>
 801a17c:	2301      	movs	r3, #1
 801a17e:	425b      	negs	r3, r3
 801a180:	9309      	str	r3, [sp, #36]	@ 0x24
 801a182:	4d32      	ldr	r5, [pc, #200]	@ (801a24c <_vfiprintf_r+0x228>)
 801a184:	2203      	movs	r2, #3
 801a186:	0028      	movs	r0, r5
 801a188:	7831      	ldrb	r1, [r6, #0]
 801a18a:	f7fe fa84 	bl	8018696 <memchr>
 801a18e:	2800      	cmp	r0, #0
 801a190:	d006      	beq.n	801a1a0 <_vfiprintf_r+0x17c>
 801a192:	2340      	movs	r3, #64	@ 0x40
 801a194:	1b40      	subs	r0, r0, r5
 801a196:	4083      	lsls	r3, r0
 801a198:	6822      	ldr	r2, [r4, #0]
 801a19a:	3601      	adds	r6, #1
 801a19c:	4313      	orrs	r3, r2
 801a19e:	6023      	str	r3, [r4, #0]
 801a1a0:	7831      	ldrb	r1, [r6, #0]
 801a1a2:	2206      	movs	r2, #6
 801a1a4:	482a      	ldr	r0, [pc, #168]	@ (801a250 <_vfiprintf_r+0x22c>)
 801a1a6:	1c75      	adds	r5, r6, #1
 801a1a8:	7621      	strb	r1, [r4, #24]
 801a1aa:	f7fe fa74 	bl	8018696 <memchr>
 801a1ae:	2800      	cmp	r0, #0
 801a1b0:	d040      	beq.n	801a234 <_vfiprintf_r+0x210>
 801a1b2:	4b28      	ldr	r3, [pc, #160]	@ (801a254 <_vfiprintf_r+0x230>)
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d122      	bne.n	801a1fe <_vfiprintf_r+0x1da>
 801a1b8:	2207      	movs	r2, #7
 801a1ba:	9b07      	ldr	r3, [sp, #28]
 801a1bc:	3307      	adds	r3, #7
 801a1be:	4393      	bics	r3, r2
 801a1c0:	3308      	adds	r3, #8
 801a1c2:	9307      	str	r3, [sp, #28]
 801a1c4:	6963      	ldr	r3, [r4, #20]
 801a1c6:	9a04      	ldr	r2, [sp, #16]
 801a1c8:	189b      	adds	r3, r3, r2
 801a1ca:	6163      	str	r3, [r4, #20]
 801a1cc:	e762      	b.n	801a094 <_vfiprintf_r+0x70>
 801a1ce:	4343      	muls	r3, r0
 801a1d0:	002e      	movs	r6, r5
 801a1d2:	2101      	movs	r1, #1
 801a1d4:	189b      	adds	r3, r3, r2
 801a1d6:	e7a4      	b.n	801a122 <_vfiprintf_r+0xfe>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	200a      	movs	r0, #10
 801a1dc:	0019      	movs	r1, r3
 801a1de:	3601      	adds	r6, #1
 801a1e0:	6063      	str	r3, [r4, #4]
 801a1e2:	7832      	ldrb	r2, [r6, #0]
 801a1e4:	1c75      	adds	r5, r6, #1
 801a1e6:	3a30      	subs	r2, #48	@ 0x30
 801a1e8:	2a09      	cmp	r2, #9
 801a1ea:	d903      	bls.n	801a1f4 <_vfiprintf_r+0x1d0>
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d0c8      	beq.n	801a182 <_vfiprintf_r+0x15e>
 801a1f0:	9109      	str	r1, [sp, #36]	@ 0x24
 801a1f2:	e7c6      	b.n	801a182 <_vfiprintf_r+0x15e>
 801a1f4:	4341      	muls	r1, r0
 801a1f6:	002e      	movs	r6, r5
 801a1f8:	2301      	movs	r3, #1
 801a1fa:	1889      	adds	r1, r1, r2
 801a1fc:	e7f1      	b.n	801a1e2 <_vfiprintf_r+0x1be>
 801a1fe:	aa07      	add	r2, sp, #28
 801a200:	9200      	str	r2, [sp, #0]
 801a202:	0021      	movs	r1, r4
 801a204:	003a      	movs	r2, r7
 801a206:	4b14      	ldr	r3, [pc, #80]	@ (801a258 <_vfiprintf_r+0x234>)
 801a208:	9803      	ldr	r0, [sp, #12]
 801a20a:	f7fd fc51 	bl	8017ab0 <_printf_float>
 801a20e:	9004      	str	r0, [sp, #16]
 801a210:	9b04      	ldr	r3, [sp, #16]
 801a212:	3301      	adds	r3, #1
 801a214:	d1d6      	bne.n	801a1c4 <_vfiprintf_r+0x1a0>
 801a216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a218:	07db      	lsls	r3, r3, #31
 801a21a:	d405      	bmi.n	801a228 <_vfiprintf_r+0x204>
 801a21c:	89bb      	ldrh	r3, [r7, #12]
 801a21e:	059b      	lsls	r3, r3, #22
 801a220:	d402      	bmi.n	801a228 <_vfiprintf_r+0x204>
 801a222:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a224:	f7fe fa36 	bl	8018694 <__retarget_lock_release_recursive>
 801a228:	89bb      	ldrh	r3, [r7, #12]
 801a22a:	065b      	lsls	r3, r3, #25
 801a22c:	d500      	bpl.n	801a230 <_vfiprintf_r+0x20c>
 801a22e:	e71e      	b.n	801a06e <_vfiprintf_r+0x4a>
 801a230:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a232:	e71e      	b.n	801a072 <_vfiprintf_r+0x4e>
 801a234:	aa07      	add	r2, sp, #28
 801a236:	9200      	str	r2, [sp, #0]
 801a238:	0021      	movs	r1, r4
 801a23a:	003a      	movs	r2, r7
 801a23c:	4b06      	ldr	r3, [pc, #24]	@ (801a258 <_vfiprintf_r+0x234>)
 801a23e:	9803      	ldr	r0, [sp, #12]
 801a240:	f7fd fee4 	bl	801800c <_printf_i>
 801a244:	e7e3      	b.n	801a20e <_vfiprintf_r+0x1ea>
 801a246:	46c0      	nop			@ (mov r8, r8)
 801a248:	0801c468 	.word	0x0801c468
 801a24c:	0801c46e 	.word	0x0801c46e
 801a250:	0801c472 	.word	0x0801c472
 801a254:	08017ab1 	.word	0x08017ab1
 801a258:	08019fff 	.word	0x08019fff

0801a25c <__sflush_r>:
 801a25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a25e:	220c      	movs	r2, #12
 801a260:	5e8b      	ldrsh	r3, [r1, r2]
 801a262:	0005      	movs	r5, r0
 801a264:	000c      	movs	r4, r1
 801a266:	071a      	lsls	r2, r3, #28
 801a268:	d456      	bmi.n	801a318 <__sflush_r+0xbc>
 801a26a:	684a      	ldr	r2, [r1, #4]
 801a26c:	2a00      	cmp	r2, #0
 801a26e:	dc02      	bgt.n	801a276 <__sflush_r+0x1a>
 801a270:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801a272:	2a00      	cmp	r2, #0
 801a274:	dd4e      	ble.n	801a314 <__sflush_r+0xb8>
 801a276:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801a278:	2f00      	cmp	r7, #0
 801a27a:	d04b      	beq.n	801a314 <__sflush_r+0xb8>
 801a27c:	2200      	movs	r2, #0
 801a27e:	2080      	movs	r0, #128	@ 0x80
 801a280:	682e      	ldr	r6, [r5, #0]
 801a282:	602a      	str	r2, [r5, #0]
 801a284:	001a      	movs	r2, r3
 801a286:	0140      	lsls	r0, r0, #5
 801a288:	6a21      	ldr	r1, [r4, #32]
 801a28a:	4002      	ands	r2, r0
 801a28c:	4203      	tst	r3, r0
 801a28e:	d033      	beq.n	801a2f8 <__sflush_r+0x9c>
 801a290:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a292:	89a3      	ldrh	r3, [r4, #12]
 801a294:	075b      	lsls	r3, r3, #29
 801a296:	d506      	bpl.n	801a2a6 <__sflush_r+0x4a>
 801a298:	6863      	ldr	r3, [r4, #4]
 801a29a:	1ad2      	subs	r2, r2, r3
 801a29c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d001      	beq.n	801a2a6 <__sflush_r+0x4a>
 801a2a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a2a4:	1ad2      	subs	r2, r2, r3
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	0028      	movs	r0, r5
 801a2aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801a2ac:	6a21      	ldr	r1, [r4, #32]
 801a2ae:	47b8      	blx	r7
 801a2b0:	89a2      	ldrh	r2, [r4, #12]
 801a2b2:	1c43      	adds	r3, r0, #1
 801a2b4:	d106      	bne.n	801a2c4 <__sflush_r+0x68>
 801a2b6:	6829      	ldr	r1, [r5, #0]
 801a2b8:	291d      	cmp	r1, #29
 801a2ba:	d846      	bhi.n	801a34a <__sflush_r+0xee>
 801a2bc:	4b29      	ldr	r3, [pc, #164]	@ (801a364 <__sflush_r+0x108>)
 801a2be:	410b      	asrs	r3, r1
 801a2c0:	07db      	lsls	r3, r3, #31
 801a2c2:	d442      	bmi.n	801a34a <__sflush_r+0xee>
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	6063      	str	r3, [r4, #4]
 801a2c8:	6923      	ldr	r3, [r4, #16]
 801a2ca:	6023      	str	r3, [r4, #0]
 801a2cc:	04d2      	lsls	r2, r2, #19
 801a2ce:	d505      	bpl.n	801a2dc <__sflush_r+0x80>
 801a2d0:	1c43      	adds	r3, r0, #1
 801a2d2:	d102      	bne.n	801a2da <__sflush_r+0x7e>
 801a2d4:	682b      	ldr	r3, [r5, #0]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d100      	bne.n	801a2dc <__sflush_r+0x80>
 801a2da:	6560      	str	r0, [r4, #84]	@ 0x54
 801a2dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a2de:	602e      	str	r6, [r5, #0]
 801a2e0:	2900      	cmp	r1, #0
 801a2e2:	d017      	beq.n	801a314 <__sflush_r+0xb8>
 801a2e4:	0023      	movs	r3, r4
 801a2e6:	3344      	adds	r3, #68	@ 0x44
 801a2e8:	4299      	cmp	r1, r3
 801a2ea:	d002      	beq.n	801a2f2 <__sflush_r+0x96>
 801a2ec:	0028      	movs	r0, r5
 801a2ee:	f7ff f869 	bl	80193c4 <_free_r>
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	6363      	str	r3, [r4, #52]	@ 0x34
 801a2f6:	e00d      	b.n	801a314 <__sflush_r+0xb8>
 801a2f8:	2301      	movs	r3, #1
 801a2fa:	0028      	movs	r0, r5
 801a2fc:	47b8      	blx	r7
 801a2fe:	0002      	movs	r2, r0
 801a300:	1c43      	adds	r3, r0, #1
 801a302:	d1c6      	bne.n	801a292 <__sflush_r+0x36>
 801a304:	682b      	ldr	r3, [r5, #0]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d0c3      	beq.n	801a292 <__sflush_r+0x36>
 801a30a:	2b1d      	cmp	r3, #29
 801a30c:	d001      	beq.n	801a312 <__sflush_r+0xb6>
 801a30e:	2b16      	cmp	r3, #22
 801a310:	d11a      	bne.n	801a348 <__sflush_r+0xec>
 801a312:	602e      	str	r6, [r5, #0]
 801a314:	2000      	movs	r0, #0
 801a316:	e01e      	b.n	801a356 <__sflush_r+0xfa>
 801a318:	690e      	ldr	r6, [r1, #16]
 801a31a:	2e00      	cmp	r6, #0
 801a31c:	d0fa      	beq.n	801a314 <__sflush_r+0xb8>
 801a31e:	680f      	ldr	r7, [r1, #0]
 801a320:	600e      	str	r6, [r1, #0]
 801a322:	1bba      	subs	r2, r7, r6
 801a324:	9201      	str	r2, [sp, #4]
 801a326:	2200      	movs	r2, #0
 801a328:	079b      	lsls	r3, r3, #30
 801a32a:	d100      	bne.n	801a32e <__sflush_r+0xd2>
 801a32c:	694a      	ldr	r2, [r1, #20]
 801a32e:	60a2      	str	r2, [r4, #8]
 801a330:	9b01      	ldr	r3, [sp, #4]
 801a332:	2b00      	cmp	r3, #0
 801a334:	ddee      	ble.n	801a314 <__sflush_r+0xb8>
 801a336:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a338:	0032      	movs	r2, r6
 801a33a:	001f      	movs	r7, r3
 801a33c:	0028      	movs	r0, r5
 801a33e:	9b01      	ldr	r3, [sp, #4]
 801a340:	6a21      	ldr	r1, [r4, #32]
 801a342:	47b8      	blx	r7
 801a344:	2800      	cmp	r0, #0
 801a346:	dc07      	bgt.n	801a358 <__sflush_r+0xfc>
 801a348:	89a2      	ldrh	r2, [r4, #12]
 801a34a:	2340      	movs	r3, #64	@ 0x40
 801a34c:	2001      	movs	r0, #1
 801a34e:	4313      	orrs	r3, r2
 801a350:	b21b      	sxth	r3, r3
 801a352:	81a3      	strh	r3, [r4, #12]
 801a354:	4240      	negs	r0, r0
 801a356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a358:	9b01      	ldr	r3, [sp, #4]
 801a35a:	1836      	adds	r6, r6, r0
 801a35c:	1a1b      	subs	r3, r3, r0
 801a35e:	9301      	str	r3, [sp, #4]
 801a360:	e7e6      	b.n	801a330 <__sflush_r+0xd4>
 801a362:	46c0      	nop			@ (mov r8, r8)
 801a364:	dfbffffe 	.word	0xdfbffffe

0801a368 <_fflush_r>:
 801a368:	690b      	ldr	r3, [r1, #16]
 801a36a:	b570      	push	{r4, r5, r6, lr}
 801a36c:	0005      	movs	r5, r0
 801a36e:	000c      	movs	r4, r1
 801a370:	2b00      	cmp	r3, #0
 801a372:	d102      	bne.n	801a37a <_fflush_r+0x12>
 801a374:	2500      	movs	r5, #0
 801a376:	0028      	movs	r0, r5
 801a378:	bd70      	pop	{r4, r5, r6, pc}
 801a37a:	2800      	cmp	r0, #0
 801a37c:	d004      	beq.n	801a388 <_fflush_r+0x20>
 801a37e:	6a03      	ldr	r3, [r0, #32]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d101      	bne.n	801a388 <_fflush_r+0x20>
 801a384:	f7fd ffe0 	bl	8018348 <__sinit>
 801a388:	220c      	movs	r2, #12
 801a38a:	5ea3      	ldrsh	r3, [r4, r2]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d0f1      	beq.n	801a374 <_fflush_r+0xc>
 801a390:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a392:	07d2      	lsls	r2, r2, #31
 801a394:	d404      	bmi.n	801a3a0 <_fflush_r+0x38>
 801a396:	059b      	lsls	r3, r3, #22
 801a398:	d402      	bmi.n	801a3a0 <_fflush_r+0x38>
 801a39a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a39c:	f7fe f979 	bl	8018692 <__retarget_lock_acquire_recursive>
 801a3a0:	0028      	movs	r0, r5
 801a3a2:	0021      	movs	r1, r4
 801a3a4:	f7ff ff5a 	bl	801a25c <__sflush_r>
 801a3a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a3aa:	0005      	movs	r5, r0
 801a3ac:	07db      	lsls	r3, r3, #31
 801a3ae:	d4e2      	bmi.n	801a376 <_fflush_r+0xe>
 801a3b0:	89a3      	ldrh	r3, [r4, #12]
 801a3b2:	059b      	lsls	r3, r3, #22
 801a3b4:	d4df      	bmi.n	801a376 <_fflush_r+0xe>
 801a3b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a3b8:	f7fe f96c 	bl	8018694 <__retarget_lock_release_recursive>
 801a3bc:	e7db      	b.n	801a376 <_fflush_r+0xe>

0801a3be <__swbuf_r>:
 801a3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c0:	0006      	movs	r6, r0
 801a3c2:	000d      	movs	r5, r1
 801a3c4:	0014      	movs	r4, r2
 801a3c6:	2800      	cmp	r0, #0
 801a3c8:	d004      	beq.n	801a3d4 <__swbuf_r+0x16>
 801a3ca:	6a03      	ldr	r3, [r0, #32]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d101      	bne.n	801a3d4 <__swbuf_r+0x16>
 801a3d0:	f7fd ffba 	bl	8018348 <__sinit>
 801a3d4:	69a3      	ldr	r3, [r4, #24]
 801a3d6:	60a3      	str	r3, [r4, #8]
 801a3d8:	89a3      	ldrh	r3, [r4, #12]
 801a3da:	071b      	lsls	r3, r3, #28
 801a3dc:	d502      	bpl.n	801a3e4 <__swbuf_r+0x26>
 801a3de:	6923      	ldr	r3, [r4, #16]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d109      	bne.n	801a3f8 <__swbuf_r+0x3a>
 801a3e4:	0021      	movs	r1, r4
 801a3e6:	0030      	movs	r0, r6
 801a3e8:	f000 f82c 	bl	801a444 <__swsetup_r>
 801a3ec:	2800      	cmp	r0, #0
 801a3ee:	d003      	beq.n	801a3f8 <__swbuf_r+0x3a>
 801a3f0:	2501      	movs	r5, #1
 801a3f2:	426d      	negs	r5, r5
 801a3f4:	0028      	movs	r0, r5
 801a3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3f8:	6923      	ldr	r3, [r4, #16]
 801a3fa:	6820      	ldr	r0, [r4, #0]
 801a3fc:	b2ef      	uxtb	r7, r5
 801a3fe:	1ac0      	subs	r0, r0, r3
 801a400:	6963      	ldr	r3, [r4, #20]
 801a402:	b2ed      	uxtb	r5, r5
 801a404:	4283      	cmp	r3, r0
 801a406:	dc05      	bgt.n	801a414 <__swbuf_r+0x56>
 801a408:	0021      	movs	r1, r4
 801a40a:	0030      	movs	r0, r6
 801a40c:	f7ff ffac 	bl	801a368 <_fflush_r>
 801a410:	2800      	cmp	r0, #0
 801a412:	d1ed      	bne.n	801a3f0 <__swbuf_r+0x32>
 801a414:	68a3      	ldr	r3, [r4, #8]
 801a416:	3001      	adds	r0, #1
 801a418:	3b01      	subs	r3, #1
 801a41a:	60a3      	str	r3, [r4, #8]
 801a41c:	6823      	ldr	r3, [r4, #0]
 801a41e:	1c5a      	adds	r2, r3, #1
 801a420:	6022      	str	r2, [r4, #0]
 801a422:	701f      	strb	r7, [r3, #0]
 801a424:	6963      	ldr	r3, [r4, #20]
 801a426:	4283      	cmp	r3, r0
 801a428:	d004      	beq.n	801a434 <__swbuf_r+0x76>
 801a42a:	89a3      	ldrh	r3, [r4, #12]
 801a42c:	07db      	lsls	r3, r3, #31
 801a42e:	d5e1      	bpl.n	801a3f4 <__swbuf_r+0x36>
 801a430:	2d0a      	cmp	r5, #10
 801a432:	d1df      	bne.n	801a3f4 <__swbuf_r+0x36>
 801a434:	0021      	movs	r1, r4
 801a436:	0030      	movs	r0, r6
 801a438:	f7ff ff96 	bl	801a368 <_fflush_r>
 801a43c:	2800      	cmp	r0, #0
 801a43e:	d0d9      	beq.n	801a3f4 <__swbuf_r+0x36>
 801a440:	e7d6      	b.n	801a3f0 <__swbuf_r+0x32>
	...

0801a444 <__swsetup_r>:
 801a444:	4b2d      	ldr	r3, [pc, #180]	@ (801a4fc <__swsetup_r+0xb8>)
 801a446:	b570      	push	{r4, r5, r6, lr}
 801a448:	0005      	movs	r5, r0
 801a44a:	6818      	ldr	r0, [r3, #0]
 801a44c:	000c      	movs	r4, r1
 801a44e:	2800      	cmp	r0, #0
 801a450:	d004      	beq.n	801a45c <__swsetup_r+0x18>
 801a452:	6a03      	ldr	r3, [r0, #32]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d101      	bne.n	801a45c <__swsetup_r+0x18>
 801a458:	f7fd ff76 	bl	8018348 <__sinit>
 801a45c:	230c      	movs	r3, #12
 801a45e:	5ee2      	ldrsh	r2, [r4, r3]
 801a460:	0713      	lsls	r3, r2, #28
 801a462:	d423      	bmi.n	801a4ac <__swsetup_r+0x68>
 801a464:	06d3      	lsls	r3, r2, #27
 801a466:	d407      	bmi.n	801a478 <__swsetup_r+0x34>
 801a468:	2309      	movs	r3, #9
 801a46a:	602b      	str	r3, [r5, #0]
 801a46c:	2340      	movs	r3, #64	@ 0x40
 801a46e:	2001      	movs	r0, #1
 801a470:	4313      	orrs	r3, r2
 801a472:	81a3      	strh	r3, [r4, #12]
 801a474:	4240      	negs	r0, r0
 801a476:	e03a      	b.n	801a4ee <__swsetup_r+0xaa>
 801a478:	0752      	lsls	r2, r2, #29
 801a47a:	d513      	bpl.n	801a4a4 <__swsetup_r+0x60>
 801a47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a47e:	2900      	cmp	r1, #0
 801a480:	d008      	beq.n	801a494 <__swsetup_r+0x50>
 801a482:	0023      	movs	r3, r4
 801a484:	3344      	adds	r3, #68	@ 0x44
 801a486:	4299      	cmp	r1, r3
 801a488:	d002      	beq.n	801a490 <__swsetup_r+0x4c>
 801a48a:	0028      	movs	r0, r5
 801a48c:	f7fe ff9a 	bl	80193c4 <_free_r>
 801a490:	2300      	movs	r3, #0
 801a492:	6363      	str	r3, [r4, #52]	@ 0x34
 801a494:	2224      	movs	r2, #36	@ 0x24
 801a496:	89a3      	ldrh	r3, [r4, #12]
 801a498:	4393      	bics	r3, r2
 801a49a:	81a3      	strh	r3, [r4, #12]
 801a49c:	2300      	movs	r3, #0
 801a49e:	6063      	str	r3, [r4, #4]
 801a4a0:	6923      	ldr	r3, [r4, #16]
 801a4a2:	6023      	str	r3, [r4, #0]
 801a4a4:	2308      	movs	r3, #8
 801a4a6:	89a2      	ldrh	r2, [r4, #12]
 801a4a8:	4313      	orrs	r3, r2
 801a4aa:	81a3      	strh	r3, [r4, #12]
 801a4ac:	6923      	ldr	r3, [r4, #16]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d10b      	bne.n	801a4ca <__swsetup_r+0x86>
 801a4b2:	21a0      	movs	r1, #160	@ 0xa0
 801a4b4:	2280      	movs	r2, #128	@ 0x80
 801a4b6:	89a3      	ldrh	r3, [r4, #12]
 801a4b8:	0089      	lsls	r1, r1, #2
 801a4ba:	0092      	lsls	r2, r2, #2
 801a4bc:	400b      	ands	r3, r1
 801a4be:	4293      	cmp	r3, r2
 801a4c0:	d003      	beq.n	801a4ca <__swsetup_r+0x86>
 801a4c2:	0021      	movs	r1, r4
 801a4c4:	0028      	movs	r0, r5
 801a4c6:	f000 f915 	bl	801a6f4 <__smakebuf_r>
 801a4ca:	230c      	movs	r3, #12
 801a4cc:	5ee2      	ldrsh	r2, [r4, r3]
 801a4ce:	2101      	movs	r1, #1
 801a4d0:	0013      	movs	r3, r2
 801a4d2:	400b      	ands	r3, r1
 801a4d4:	420a      	tst	r2, r1
 801a4d6:	d00b      	beq.n	801a4f0 <__swsetup_r+0xac>
 801a4d8:	2300      	movs	r3, #0
 801a4da:	60a3      	str	r3, [r4, #8]
 801a4dc:	6963      	ldr	r3, [r4, #20]
 801a4de:	425b      	negs	r3, r3
 801a4e0:	61a3      	str	r3, [r4, #24]
 801a4e2:	2000      	movs	r0, #0
 801a4e4:	6923      	ldr	r3, [r4, #16]
 801a4e6:	4283      	cmp	r3, r0
 801a4e8:	d101      	bne.n	801a4ee <__swsetup_r+0xaa>
 801a4ea:	0613      	lsls	r3, r2, #24
 801a4ec:	d4be      	bmi.n	801a46c <__swsetup_r+0x28>
 801a4ee:	bd70      	pop	{r4, r5, r6, pc}
 801a4f0:	0791      	lsls	r1, r2, #30
 801a4f2:	d400      	bmi.n	801a4f6 <__swsetup_r+0xb2>
 801a4f4:	6963      	ldr	r3, [r4, #20]
 801a4f6:	60a3      	str	r3, [r4, #8]
 801a4f8:	e7f3      	b.n	801a4e2 <__swsetup_r+0x9e>
 801a4fa:	46c0      	nop			@ (mov r8, r8)
 801a4fc:	200001f4 	.word	0x200001f4

0801a500 <memmove>:
 801a500:	b510      	push	{r4, lr}
 801a502:	4288      	cmp	r0, r1
 801a504:	d806      	bhi.n	801a514 <memmove+0x14>
 801a506:	2300      	movs	r3, #0
 801a508:	429a      	cmp	r2, r3
 801a50a:	d008      	beq.n	801a51e <memmove+0x1e>
 801a50c:	5ccc      	ldrb	r4, [r1, r3]
 801a50e:	54c4      	strb	r4, [r0, r3]
 801a510:	3301      	adds	r3, #1
 801a512:	e7f9      	b.n	801a508 <memmove+0x8>
 801a514:	188b      	adds	r3, r1, r2
 801a516:	4298      	cmp	r0, r3
 801a518:	d2f5      	bcs.n	801a506 <memmove+0x6>
 801a51a:	3a01      	subs	r2, #1
 801a51c:	d200      	bcs.n	801a520 <memmove+0x20>
 801a51e:	bd10      	pop	{r4, pc}
 801a520:	5c8b      	ldrb	r3, [r1, r2]
 801a522:	5483      	strb	r3, [r0, r2]
 801a524:	e7f9      	b.n	801a51a <memmove+0x1a>
	...

0801a528 <_sbrk_r>:
 801a528:	2300      	movs	r3, #0
 801a52a:	b570      	push	{r4, r5, r6, lr}
 801a52c:	4d06      	ldr	r5, [pc, #24]	@ (801a548 <_sbrk_r+0x20>)
 801a52e:	0004      	movs	r4, r0
 801a530:	0008      	movs	r0, r1
 801a532:	602b      	str	r3, [r5, #0]
 801a534:	f7ee ff56 	bl	80093e4 <_sbrk>
 801a538:	1c43      	adds	r3, r0, #1
 801a53a:	d103      	bne.n	801a544 <_sbrk_r+0x1c>
 801a53c:	682b      	ldr	r3, [r5, #0]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d000      	beq.n	801a544 <_sbrk_r+0x1c>
 801a542:	6023      	str	r3, [r4, #0]
 801a544:	bd70      	pop	{r4, r5, r6, pc}
 801a546:	46c0      	nop			@ (mov r8, r8)
 801a548:	20004110 	.word	0x20004110

0801a54c <__assert_func>:
 801a54c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a54e:	0014      	movs	r4, r2
 801a550:	001a      	movs	r2, r3
 801a552:	4b09      	ldr	r3, [pc, #36]	@ (801a578 <__assert_func+0x2c>)
 801a554:	0005      	movs	r5, r0
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	000e      	movs	r6, r1
 801a55a:	68d8      	ldr	r0, [r3, #12]
 801a55c:	4b07      	ldr	r3, [pc, #28]	@ (801a57c <__assert_func+0x30>)
 801a55e:	2c00      	cmp	r4, #0
 801a560:	d101      	bne.n	801a566 <__assert_func+0x1a>
 801a562:	4b07      	ldr	r3, [pc, #28]	@ (801a580 <__assert_func+0x34>)
 801a564:	001c      	movs	r4, r3
 801a566:	4907      	ldr	r1, [pc, #28]	@ (801a584 <__assert_func+0x38>)
 801a568:	9301      	str	r3, [sp, #4]
 801a56a:	9402      	str	r4, [sp, #8]
 801a56c:	002b      	movs	r3, r5
 801a56e:	9600      	str	r6, [sp, #0]
 801a570:	f000 f886 	bl	801a680 <fiprintf>
 801a574:	f000 f924 	bl	801a7c0 <abort>
 801a578:	200001f4 	.word	0x200001f4
 801a57c:	0801c483 	.word	0x0801c483
 801a580:	0801c4be 	.word	0x0801c4be
 801a584:	0801c490 	.word	0x0801c490

0801a588 <_calloc_r>:
 801a588:	b570      	push	{r4, r5, r6, lr}
 801a58a:	0c0b      	lsrs	r3, r1, #16
 801a58c:	0c15      	lsrs	r5, r2, #16
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d11e      	bne.n	801a5d0 <_calloc_r+0x48>
 801a592:	2d00      	cmp	r5, #0
 801a594:	d10c      	bne.n	801a5b0 <_calloc_r+0x28>
 801a596:	b289      	uxth	r1, r1
 801a598:	b294      	uxth	r4, r2
 801a59a:	434c      	muls	r4, r1
 801a59c:	0021      	movs	r1, r4
 801a59e:	f7fe ff87 	bl	80194b0 <_malloc_r>
 801a5a2:	1e05      	subs	r5, r0, #0
 801a5a4:	d01a      	beq.n	801a5dc <_calloc_r+0x54>
 801a5a6:	0022      	movs	r2, r4
 801a5a8:	2100      	movs	r1, #0
 801a5aa:	f7fd ffb5 	bl	8018518 <memset>
 801a5ae:	e016      	b.n	801a5de <_calloc_r+0x56>
 801a5b0:	1c2b      	adds	r3, r5, #0
 801a5b2:	1c0c      	adds	r4, r1, #0
 801a5b4:	b289      	uxth	r1, r1
 801a5b6:	b292      	uxth	r2, r2
 801a5b8:	434a      	muls	r2, r1
 801a5ba:	b29b      	uxth	r3, r3
 801a5bc:	b2a1      	uxth	r1, r4
 801a5be:	4359      	muls	r1, r3
 801a5c0:	0c14      	lsrs	r4, r2, #16
 801a5c2:	190c      	adds	r4, r1, r4
 801a5c4:	0c23      	lsrs	r3, r4, #16
 801a5c6:	d107      	bne.n	801a5d8 <_calloc_r+0x50>
 801a5c8:	0424      	lsls	r4, r4, #16
 801a5ca:	b292      	uxth	r2, r2
 801a5cc:	4314      	orrs	r4, r2
 801a5ce:	e7e5      	b.n	801a59c <_calloc_r+0x14>
 801a5d0:	2d00      	cmp	r5, #0
 801a5d2:	d101      	bne.n	801a5d8 <_calloc_r+0x50>
 801a5d4:	1c14      	adds	r4, r2, #0
 801a5d6:	e7ed      	b.n	801a5b4 <_calloc_r+0x2c>
 801a5d8:	230c      	movs	r3, #12
 801a5da:	6003      	str	r3, [r0, #0]
 801a5dc:	2500      	movs	r5, #0
 801a5de:	0028      	movs	r0, r5
 801a5e0:	bd70      	pop	{r4, r5, r6, pc}

0801a5e2 <__ascii_mbtowc>:
 801a5e2:	b082      	sub	sp, #8
 801a5e4:	2900      	cmp	r1, #0
 801a5e6:	d100      	bne.n	801a5ea <__ascii_mbtowc+0x8>
 801a5e8:	a901      	add	r1, sp, #4
 801a5ea:	1e10      	subs	r0, r2, #0
 801a5ec:	d006      	beq.n	801a5fc <__ascii_mbtowc+0x1a>
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d006      	beq.n	801a600 <__ascii_mbtowc+0x1e>
 801a5f2:	7813      	ldrb	r3, [r2, #0]
 801a5f4:	600b      	str	r3, [r1, #0]
 801a5f6:	7810      	ldrb	r0, [r2, #0]
 801a5f8:	1e43      	subs	r3, r0, #1
 801a5fa:	4198      	sbcs	r0, r3
 801a5fc:	b002      	add	sp, #8
 801a5fe:	4770      	bx	lr
 801a600:	2002      	movs	r0, #2
 801a602:	4240      	negs	r0, r0
 801a604:	e7fa      	b.n	801a5fc <__ascii_mbtowc+0x1a>

0801a606 <_realloc_r>:
 801a606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a608:	0006      	movs	r6, r0
 801a60a:	000c      	movs	r4, r1
 801a60c:	0015      	movs	r5, r2
 801a60e:	2900      	cmp	r1, #0
 801a610:	d105      	bne.n	801a61e <_realloc_r+0x18>
 801a612:	0011      	movs	r1, r2
 801a614:	f7fe ff4c 	bl	80194b0 <_malloc_r>
 801a618:	0004      	movs	r4, r0
 801a61a:	0020      	movs	r0, r4
 801a61c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a61e:	2a00      	cmp	r2, #0
 801a620:	d103      	bne.n	801a62a <_realloc_r+0x24>
 801a622:	f7fe fecf 	bl	80193c4 <_free_r>
 801a626:	2400      	movs	r4, #0
 801a628:	e7f7      	b.n	801a61a <_realloc_r+0x14>
 801a62a:	f000 f8d0 	bl	801a7ce <_malloc_usable_size_r>
 801a62e:	0007      	movs	r7, r0
 801a630:	4285      	cmp	r5, r0
 801a632:	d802      	bhi.n	801a63a <_realloc_r+0x34>
 801a634:	0843      	lsrs	r3, r0, #1
 801a636:	42ab      	cmp	r3, r5
 801a638:	d3ef      	bcc.n	801a61a <_realloc_r+0x14>
 801a63a:	0029      	movs	r1, r5
 801a63c:	0030      	movs	r0, r6
 801a63e:	f7fe ff37 	bl	80194b0 <_malloc_r>
 801a642:	9001      	str	r0, [sp, #4]
 801a644:	2800      	cmp	r0, #0
 801a646:	d0ee      	beq.n	801a626 <_realloc_r+0x20>
 801a648:	002a      	movs	r2, r5
 801a64a:	42bd      	cmp	r5, r7
 801a64c:	d900      	bls.n	801a650 <_realloc_r+0x4a>
 801a64e:	003a      	movs	r2, r7
 801a650:	0021      	movs	r1, r4
 801a652:	9801      	ldr	r0, [sp, #4]
 801a654:	f7fe f82a 	bl	80186ac <memcpy>
 801a658:	0021      	movs	r1, r4
 801a65a:	0030      	movs	r0, r6
 801a65c:	f7fe feb2 	bl	80193c4 <_free_r>
 801a660:	9c01      	ldr	r4, [sp, #4]
 801a662:	e7da      	b.n	801a61a <_realloc_r+0x14>

0801a664 <__ascii_wctomb>:
 801a664:	0003      	movs	r3, r0
 801a666:	1e08      	subs	r0, r1, #0
 801a668:	d005      	beq.n	801a676 <__ascii_wctomb+0x12>
 801a66a:	2aff      	cmp	r2, #255	@ 0xff
 801a66c:	d904      	bls.n	801a678 <__ascii_wctomb+0x14>
 801a66e:	228a      	movs	r2, #138	@ 0x8a
 801a670:	2001      	movs	r0, #1
 801a672:	601a      	str	r2, [r3, #0]
 801a674:	4240      	negs	r0, r0
 801a676:	4770      	bx	lr
 801a678:	2001      	movs	r0, #1
 801a67a:	700a      	strb	r2, [r1, #0]
 801a67c:	e7fb      	b.n	801a676 <__ascii_wctomb+0x12>
	...

0801a680 <fiprintf>:
 801a680:	b40e      	push	{r1, r2, r3}
 801a682:	b517      	push	{r0, r1, r2, r4, lr}
 801a684:	4c05      	ldr	r4, [pc, #20]	@ (801a69c <fiprintf+0x1c>)
 801a686:	ab05      	add	r3, sp, #20
 801a688:	cb04      	ldmia	r3!, {r2}
 801a68a:	0001      	movs	r1, r0
 801a68c:	6820      	ldr	r0, [r4, #0]
 801a68e:	9301      	str	r3, [sp, #4]
 801a690:	f7ff fcc8 	bl	801a024 <_vfiprintf_r>
 801a694:	bc1e      	pop	{r1, r2, r3, r4}
 801a696:	bc08      	pop	{r3}
 801a698:	b003      	add	sp, #12
 801a69a:	4718      	bx	r3
 801a69c:	200001f4 	.word	0x200001f4

0801a6a0 <__swhatbuf_r>:
 801a6a0:	b570      	push	{r4, r5, r6, lr}
 801a6a2:	000e      	movs	r6, r1
 801a6a4:	001d      	movs	r5, r3
 801a6a6:	230e      	movs	r3, #14
 801a6a8:	5ec9      	ldrsh	r1, [r1, r3]
 801a6aa:	0014      	movs	r4, r2
 801a6ac:	b096      	sub	sp, #88	@ 0x58
 801a6ae:	2900      	cmp	r1, #0
 801a6b0:	da0c      	bge.n	801a6cc <__swhatbuf_r+0x2c>
 801a6b2:	89b2      	ldrh	r2, [r6, #12]
 801a6b4:	2380      	movs	r3, #128	@ 0x80
 801a6b6:	0011      	movs	r1, r2
 801a6b8:	4019      	ands	r1, r3
 801a6ba:	421a      	tst	r2, r3
 801a6bc:	d114      	bne.n	801a6e8 <__swhatbuf_r+0x48>
 801a6be:	2380      	movs	r3, #128	@ 0x80
 801a6c0:	00db      	lsls	r3, r3, #3
 801a6c2:	2000      	movs	r0, #0
 801a6c4:	6029      	str	r1, [r5, #0]
 801a6c6:	6023      	str	r3, [r4, #0]
 801a6c8:	b016      	add	sp, #88	@ 0x58
 801a6ca:	bd70      	pop	{r4, r5, r6, pc}
 801a6cc:	466a      	mov	r2, sp
 801a6ce:	f000 f853 	bl	801a778 <_fstat_r>
 801a6d2:	2800      	cmp	r0, #0
 801a6d4:	dbed      	blt.n	801a6b2 <__swhatbuf_r+0x12>
 801a6d6:	23f0      	movs	r3, #240	@ 0xf0
 801a6d8:	9901      	ldr	r1, [sp, #4]
 801a6da:	021b      	lsls	r3, r3, #8
 801a6dc:	4019      	ands	r1, r3
 801a6de:	4b04      	ldr	r3, [pc, #16]	@ (801a6f0 <__swhatbuf_r+0x50>)
 801a6e0:	18c9      	adds	r1, r1, r3
 801a6e2:	424b      	negs	r3, r1
 801a6e4:	4159      	adcs	r1, r3
 801a6e6:	e7ea      	b.n	801a6be <__swhatbuf_r+0x1e>
 801a6e8:	2100      	movs	r1, #0
 801a6ea:	2340      	movs	r3, #64	@ 0x40
 801a6ec:	e7e9      	b.n	801a6c2 <__swhatbuf_r+0x22>
 801a6ee:	46c0      	nop			@ (mov r8, r8)
 801a6f0:	ffffe000 	.word	0xffffe000

0801a6f4 <__smakebuf_r>:
 801a6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6f6:	2602      	movs	r6, #2
 801a6f8:	898b      	ldrh	r3, [r1, #12]
 801a6fa:	0005      	movs	r5, r0
 801a6fc:	000c      	movs	r4, r1
 801a6fe:	b085      	sub	sp, #20
 801a700:	4233      	tst	r3, r6
 801a702:	d007      	beq.n	801a714 <__smakebuf_r+0x20>
 801a704:	0023      	movs	r3, r4
 801a706:	3347      	adds	r3, #71	@ 0x47
 801a708:	6023      	str	r3, [r4, #0]
 801a70a:	6123      	str	r3, [r4, #16]
 801a70c:	2301      	movs	r3, #1
 801a70e:	6163      	str	r3, [r4, #20]
 801a710:	b005      	add	sp, #20
 801a712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a714:	ab03      	add	r3, sp, #12
 801a716:	aa02      	add	r2, sp, #8
 801a718:	f7ff ffc2 	bl	801a6a0 <__swhatbuf_r>
 801a71c:	9f02      	ldr	r7, [sp, #8]
 801a71e:	9001      	str	r0, [sp, #4]
 801a720:	0039      	movs	r1, r7
 801a722:	0028      	movs	r0, r5
 801a724:	f7fe fec4 	bl	80194b0 <_malloc_r>
 801a728:	2800      	cmp	r0, #0
 801a72a:	d108      	bne.n	801a73e <__smakebuf_r+0x4a>
 801a72c:	220c      	movs	r2, #12
 801a72e:	5ea3      	ldrsh	r3, [r4, r2]
 801a730:	059a      	lsls	r2, r3, #22
 801a732:	d4ed      	bmi.n	801a710 <__smakebuf_r+0x1c>
 801a734:	2203      	movs	r2, #3
 801a736:	4393      	bics	r3, r2
 801a738:	431e      	orrs	r6, r3
 801a73a:	81a6      	strh	r6, [r4, #12]
 801a73c:	e7e2      	b.n	801a704 <__smakebuf_r+0x10>
 801a73e:	2380      	movs	r3, #128	@ 0x80
 801a740:	89a2      	ldrh	r2, [r4, #12]
 801a742:	6020      	str	r0, [r4, #0]
 801a744:	4313      	orrs	r3, r2
 801a746:	81a3      	strh	r3, [r4, #12]
 801a748:	9b03      	ldr	r3, [sp, #12]
 801a74a:	6120      	str	r0, [r4, #16]
 801a74c:	6167      	str	r7, [r4, #20]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d00c      	beq.n	801a76c <__smakebuf_r+0x78>
 801a752:	0028      	movs	r0, r5
 801a754:	230e      	movs	r3, #14
 801a756:	5ee1      	ldrsh	r1, [r4, r3]
 801a758:	f000 f820 	bl	801a79c <_isatty_r>
 801a75c:	2800      	cmp	r0, #0
 801a75e:	d005      	beq.n	801a76c <__smakebuf_r+0x78>
 801a760:	2303      	movs	r3, #3
 801a762:	89a2      	ldrh	r2, [r4, #12]
 801a764:	439a      	bics	r2, r3
 801a766:	3b02      	subs	r3, #2
 801a768:	4313      	orrs	r3, r2
 801a76a:	81a3      	strh	r3, [r4, #12]
 801a76c:	89a3      	ldrh	r3, [r4, #12]
 801a76e:	9a01      	ldr	r2, [sp, #4]
 801a770:	4313      	orrs	r3, r2
 801a772:	81a3      	strh	r3, [r4, #12]
 801a774:	e7cc      	b.n	801a710 <__smakebuf_r+0x1c>
	...

0801a778 <_fstat_r>:
 801a778:	2300      	movs	r3, #0
 801a77a:	b570      	push	{r4, r5, r6, lr}
 801a77c:	4d06      	ldr	r5, [pc, #24]	@ (801a798 <_fstat_r+0x20>)
 801a77e:	0004      	movs	r4, r0
 801a780:	0008      	movs	r0, r1
 801a782:	0011      	movs	r1, r2
 801a784:	602b      	str	r3, [r5, #0]
 801a786:	f7ee fe0b 	bl	80093a0 <_fstat>
 801a78a:	1c43      	adds	r3, r0, #1
 801a78c:	d103      	bne.n	801a796 <_fstat_r+0x1e>
 801a78e:	682b      	ldr	r3, [r5, #0]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d000      	beq.n	801a796 <_fstat_r+0x1e>
 801a794:	6023      	str	r3, [r4, #0]
 801a796:	bd70      	pop	{r4, r5, r6, pc}
 801a798:	20004110 	.word	0x20004110

0801a79c <_isatty_r>:
 801a79c:	2300      	movs	r3, #0
 801a79e:	b570      	push	{r4, r5, r6, lr}
 801a7a0:	4d06      	ldr	r5, [pc, #24]	@ (801a7bc <_isatty_r+0x20>)
 801a7a2:	0004      	movs	r4, r0
 801a7a4:	0008      	movs	r0, r1
 801a7a6:	602b      	str	r3, [r5, #0]
 801a7a8:	f7ee fe08 	bl	80093bc <_isatty>
 801a7ac:	1c43      	adds	r3, r0, #1
 801a7ae:	d103      	bne.n	801a7b8 <_isatty_r+0x1c>
 801a7b0:	682b      	ldr	r3, [r5, #0]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d000      	beq.n	801a7b8 <_isatty_r+0x1c>
 801a7b6:	6023      	str	r3, [r4, #0]
 801a7b8:	bd70      	pop	{r4, r5, r6, pc}
 801a7ba:	46c0      	nop			@ (mov r8, r8)
 801a7bc:	20004110 	.word	0x20004110

0801a7c0 <abort>:
 801a7c0:	2006      	movs	r0, #6
 801a7c2:	b510      	push	{r4, lr}
 801a7c4:	f000 f834 	bl	801a830 <raise>
 801a7c8:	2001      	movs	r0, #1
 801a7ca:	f7ee fdb5 	bl	8009338 <_exit>

0801a7ce <_malloc_usable_size_r>:
 801a7ce:	1f0b      	subs	r3, r1, #4
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	1f18      	subs	r0, r3, #4
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	da01      	bge.n	801a7dc <_malloc_usable_size_r+0xe>
 801a7d8:	580b      	ldr	r3, [r1, r0]
 801a7da:	18c0      	adds	r0, r0, r3
 801a7dc:	4770      	bx	lr

0801a7de <_raise_r>:
 801a7de:	b570      	push	{r4, r5, r6, lr}
 801a7e0:	0004      	movs	r4, r0
 801a7e2:	000d      	movs	r5, r1
 801a7e4:	291f      	cmp	r1, #31
 801a7e6:	d904      	bls.n	801a7f2 <_raise_r+0x14>
 801a7e8:	2316      	movs	r3, #22
 801a7ea:	6003      	str	r3, [r0, #0]
 801a7ec:	2001      	movs	r0, #1
 801a7ee:	4240      	negs	r0, r0
 801a7f0:	bd70      	pop	{r4, r5, r6, pc}
 801a7f2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d004      	beq.n	801a802 <_raise_r+0x24>
 801a7f8:	008a      	lsls	r2, r1, #2
 801a7fa:	189b      	adds	r3, r3, r2
 801a7fc:	681a      	ldr	r2, [r3, #0]
 801a7fe:	2a00      	cmp	r2, #0
 801a800:	d108      	bne.n	801a814 <_raise_r+0x36>
 801a802:	0020      	movs	r0, r4
 801a804:	f000 f830 	bl	801a868 <_getpid_r>
 801a808:	002a      	movs	r2, r5
 801a80a:	0001      	movs	r1, r0
 801a80c:	0020      	movs	r0, r4
 801a80e:	f000 f819 	bl	801a844 <_kill_r>
 801a812:	e7ed      	b.n	801a7f0 <_raise_r+0x12>
 801a814:	2a01      	cmp	r2, #1
 801a816:	d009      	beq.n	801a82c <_raise_r+0x4e>
 801a818:	1c51      	adds	r1, r2, #1
 801a81a:	d103      	bne.n	801a824 <_raise_r+0x46>
 801a81c:	2316      	movs	r3, #22
 801a81e:	6003      	str	r3, [r0, #0]
 801a820:	2001      	movs	r0, #1
 801a822:	e7e5      	b.n	801a7f0 <_raise_r+0x12>
 801a824:	2100      	movs	r1, #0
 801a826:	0028      	movs	r0, r5
 801a828:	6019      	str	r1, [r3, #0]
 801a82a:	4790      	blx	r2
 801a82c:	2000      	movs	r0, #0
 801a82e:	e7df      	b.n	801a7f0 <_raise_r+0x12>

0801a830 <raise>:
 801a830:	b510      	push	{r4, lr}
 801a832:	4b03      	ldr	r3, [pc, #12]	@ (801a840 <raise+0x10>)
 801a834:	0001      	movs	r1, r0
 801a836:	6818      	ldr	r0, [r3, #0]
 801a838:	f7ff ffd1 	bl	801a7de <_raise_r>
 801a83c:	bd10      	pop	{r4, pc}
 801a83e:	46c0      	nop			@ (mov r8, r8)
 801a840:	200001f4 	.word	0x200001f4

0801a844 <_kill_r>:
 801a844:	2300      	movs	r3, #0
 801a846:	b570      	push	{r4, r5, r6, lr}
 801a848:	4d06      	ldr	r5, [pc, #24]	@ (801a864 <_kill_r+0x20>)
 801a84a:	0004      	movs	r4, r0
 801a84c:	0008      	movs	r0, r1
 801a84e:	0011      	movs	r1, r2
 801a850:	602b      	str	r3, [r5, #0]
 801a852:	f7ee fd61 	bl	8009318 <_kill>
 801a856:	1c43      	adds	r3, r0, #1
 801a858:	d103      	bne.n	801a862 <_kill_r+0x1e>
 801a85a:	682b      	ldr	r3, [r5, #0]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d000      	beq.n	801a862 <_kill_r+0x1e>
 801a860:	6023      	str	r3, [r4, #0]
 801a862:	bd70      	pop	{r4, r5, r6, pc}
 801a864:	20004110 	.word	0x20004110

0801a868 <_getpid_r>:
 801a868:	b510      	push	{r4, lr}
 801a86a:	f7ee fd4f 	bl	800930c <_getpid>
 801a86e:	bd10      	pop	{r4, pc}

0801a870 <log10>:
 801a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a872:	0004      	movs	r4, r0
 801a874:	000d      	movs	r5, r1
 801a876:	f000 fa0b 	bl	801ac90 <__ieee754_log10>
 801a87a:	0022      	movs	r2, r4
 801a87c:	0006      	movs	r6, r0
 801a87e:	000f      	movs	r7, r1
 801a880:	002b      	movs	r3, r5
 801a882:	0020      	movs	r0, r4
 801a884:	0029      	movs	r1, r5
 801a886:	f7e8 fcbb 	bl	8003200 <__aeabi_dcmpun>
 801a88a:	2800      	cmp	r0, #0
 801a88c:	d115      	bne.n	801a8ba <log10+0x4a>
 801a88e:	2200      	movs	r2, #0
 801a890:	2300      	movs	r3, #0
 801a892:	0020      	movs	r0, r4
 801a894:	0029      	movs	r1, r5
 801a896:	f7e5 fde9 	bl	800046c <__aeabi_dcmple>
 801a89a:	2800      	cmp	r0, #0
 801a89c:	d00d      	beq.n	801a8ba <log10+0x4a>
 801a89e:	2200      	movs	r2, #0
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	0020      	movs	r0, r4
 801a8a4:	0029      	movs	r1, r5
 801a8a6:	f7e5 fdd1 	bl	800044c <__aeabi_dcmpeq>
 801a8aa:	2800      	cmp	r0, #0
 801a8ac:	d008      	beq.n	801a8c0 <log10+0x50>
 801a8ae:	f7fd fec5 	bl	801863c <__errno>
 801a8b2:	2322      	movs	r3, #34	@ 0x22
 801a8b4:	2600      	movs	r6, #0
 801a8b6:	4f07      	ldr	r7, [pc, #28]	@ (801a8d4 <log10+0x64>)
 801a8b8:	6003      	str	r3, [r0, #0]
 801a8ba:	0030      	movs	r0, r6
 801a8bc:	0039      	movs	r1, r7
 801a8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8c0:	f7fd febc 	bl	801863c <__errno>
 801a8c4:	2321      	movs	r3, #33	@ 0x21
 801a8c6:	6003      	str	r3, [r0, #0]
 801a8c8:	4803      	ldr	r0, [pc, #12]	@ (801a8d8 <log10+0x68>)
 801a8ca:	f000 f871 	bl	801a9b0 <nan>
 801a8ce:	0006      	movs	r6, r0
 801a8d0:	000f      	movs	r7, r1
 801a8d2:	e7f2      	b.n	801a8ba <log10+0x4a>
 801a8d4:	fff00000 	.word	0xfff00000
 801a8d8:	0801c4be 	.word	0x0801c4be

0801a8dc <sqrt>:
 801a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8de:	0004      	movs	r4, r0
 801a8e0:	000d      	movs	r5, r1
 801a8e2:	f000 f875 	bl	801a9d0 <__ieee754_sqrt>
 801a8e6:	0022      	movs	r2, r4
 801a8e8:	0006      	movs	r6, r0
 801a8ea:	000f      	movs	r7, r1
 801a8ec:	002b      	movs	r3, r5
 801a8ee:	0020      	movs	r0, r4
 801a8f0:	0029      	movs	r1, r5
 801a8f2:	f7e8 fc85 	bl	8003200 <__aeabi_dcmpun>
 801a8f6:	2800      	cmp	r0, #0
 801a8f8:	d113      	bne.n	801a922 <sqrt+0x46>
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	0020      	movs	r0, r4
 801a900:	0029      	movs	r1, r5
 801a902:	f7e5 fda9 	bl	8000458 <__aeabi_dcmplt>
 801a906:	2800      	cmp	r0, #0
 801a908:	d00b      	beq.n	801a922 <sqrt+0x46>
 801a90a:	f7fd fe97 	bl	801863c <__errno>
 801a90e:	2321      	movs	r3, #33	@ 0x21
 801a910:	2200      	movs	r2, #0
 801a912:	6003      	str	r3, [r0, #0]
 801a914:	2300      	movs	r3, #0
 801a916:	0010      	movs	r0, r2
 801a918:	0019      	movs	r1, r3
 801a91a:	f7e7 f9c9 	bl	8001cb0 <__aeabi_ddiv>
 801a91e:	0006      	movs	r6, r0
 801a920:	000f      	movs	r7, r1
 801a922:	0030      	movs	r0, r6
 801a924:	0039      	movs	r1, r7
 801a926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a928 <expf>:
 801a928:	b570      	push	{r4, r5, r6, lr}
 801a92a:	1c04      	adds	r4, r0, #0
 801a92c:	f000 fa2a 	bl	801ad84 <__ieee754_expf>
 801a930:	1c05      	adds	r5, r0, #0
 801a932:	1c20      	adds	r0, r4, #0
 801a934:	f000 f842 	bl	801a9bc <finitef>
 801a938:	2800      	cmp	r0, #0
 801a93a:	d00b      	beq.n	801a954 <expf+0x2c>
 801a93c:	490c      	ldr	r1, [pc, #48]	@ (801a970 <expf+0x48>)
 801a93e:	1c20      	adds	r0, r4, #0
 801a940:	f7e5 fdd8 	bl	80004f4 <__aeabi_fcmpgt>
 801a944:	2800      	cmp	r0, #0
 801a946:	d007      	beq.n	801a958 <expf+0x30>
 801a948:	f7fd fe78 	bl	801863c <__errno>
 801a94c:	25ff      	movs	r5, #255	@ 0xff
 801a94e:	2322      	movs	r3, #34	@ 0x22
 801a950:	05ed      	lsls	r5, r5, #23
 801a952:	6003      	str	r3, [r0, #0]
 801a954:	1c28      	adds	r0, r5, #0
 801a956:	bd70      	pop	{r4, r5, r6, pc}
 801a958:	4906      	ldr	r1, [pc, #24]	@ (801a974 <expf+0x4c>)
 801a95a:	1c20      	adds	r0, r4, #0
 801a95c:	f7e5 fdb6 	bl	80004cc <__aeabi_fcmplt>
 801a960:	2800      	cmp	r0, #0
 801a962:	d0f7      	beq.n	801a954 <expf+0x2c>
 801a964:	f7fd fe6a 	bl	801863c <__errno>
 801a968:	2322      	movs	r3, #34	@ 0x22
 801a96a:	2500      	movs	r5, #0
 801a96c:	6003      	str	r3, [r0, #0]
 801a96e:	e7f1      	b.n	801a954 <expf+0x2c>
 801a970:	42b17217 	.word	0x42b17217
 801a974:	c2cff1b5 	.word	0xc2cff1b5

0801a978 <sqrtf>:
 801a978:	b570      	push	{r4, r5, r6, lr}
 801a97a:	1c05      	adds	r5, r0, #0
 801a97c:	f000 f910 	bl	801aba0 <__ieee754_sqrtf>
 801a980:	1c29      	adds	r1, r5, #0
 801a982:	1c04      	adds	r4, r0, #0
 801a984:	1c28      	adds	r0, r5, #0
 801a986:	f7e6 fd6b 	bl	8001460 <__aeabi_fcmpun>
 801a98a:	2800      	cmp	r0, #0
 801a98c:	d10e      	bne.n	801a9ac <sqrtf+0x34>
 801a98e:	2100      	movs	r1, #0
 801a990:	1c28      	adds	r0, r5, #0
 801a992:	f7e5 fd9b 	bl	80004cc <__aeabi_fcmplt>
 801a996:	2800      	cmp	r0, #0
 801a998:	d008      	beq.n	801a9ac <sqrtf+0x34>
 801a99a:	f7fd fe4f 	bl	801863c <__errno>
 801a99e:	2321      	movs	r3, #33	@ 0x21
 801a9a0:	2100      	movs	r1, #0
 801a9a2:	6003      	str	r3, [r0, #0]
 801a9a4:	1c08      	adds	r0, r1, #0
 801a9a6:	f7e6 f893 	bl	8000ad0 <__aeabi_fdiv>
 801a9aa:	1c04      	adds	r4, r0, #0
 801a9ac:	1c20      	adds	r0, r4, #0
 801a9ae:	bd70      	pop	{r4, r5, r6, pc}

0801a9b0 <nan>:
 801a9b0:	2000      	movs	r0, #0
 801a9b2:	4901      	ldr	r1, [pc, #4]	@ (801a9b8 <nan+0x8>)
 801a9b4:	4770      	bx	lr
 801a9b6:	46c0      	nop			@ (mov r8, r8)
 801a9b8:	7ff80000 	.word	0x7ff80000

0801a9bc <finitef>:
 801a9bc:	22ff      	movs	r2, #255	@ 0xff
 801a9be:	0043      	lsls	r3, r0, #1
 801a9c0:	085b      	lsrs	r3, r3, #1
 801a9c2:	2001      	movs	r0, #1
 801a9c4:	05d2      	lsls	r2, r2, #23
 801a9c6:	4293      	cmp	r3, r2
 801a9c8:	db00      	blt.n	801a9cc <finitef+0x10>
 801a9ca:	2000      	movs	r0, #0
 801a9cc:	4770      	bx	lr
	...

0801a9d0 <__ieee754_sqrt>:
 801a9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9d2:	000a      	movs	r2, r1
 801a9d4:	000d      	movs	r5, r1
 801a9d6:	496d      	ldr	r1, [pc, #436]	@ (801ab8c <__ieee754_sqrt+0x1bc>)
 801a9d8:	0004      	movs	r4, r0
 801a9da:	0003      	movs	r3, r0
 801a9dc:	0008      	movs	r0, r1
 801a9de:	b087      	sub	sp, #28
 801a9e0:	4028      	ands	r0, r5
 801a9e2:	4288      	cmp	r0, r1
 801a9e4:	d111      	bne.n	801aa0a <__ieee754_sqrt+0x3a>
 801a9e6:	0022      	movs	r2, r4
 801a9e8:	002b      	movs	r3, r5
 801a9ea:	0020      	movs	r0, r4
 801a9ec:	0029      	movs	r1, r5
 801a9ee:	f7e7 fda3 	bl	8002538 <__aeabi_dmul>
 801a9f2:	0002      	movs	r2, r0
 801a9f4:	000b      	movs	r3, r1
 801a9f6:	0020      	movs	r0, r4
 801a9f8:	0029      	movs	r1, r5
 801a9fa:	f7e6 fdf5 	bl	80015e8 <__aeabi_dadd>
 801a9fe:	0004      	movs	r4, r0
 801aa00:	000d      	movs	r5, r1
 801aa02:	0020      	movs	r0, r4
 801aa04:	0029      	movs	r1, r5
 801aa06:	b007      	add	sp, #28
 801aa08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa0a:	2d00      	cmp	r5, #0
 801aa0c:	dc11      	bgt.n	801aa32 <__ieee754_sqrt+0x62>
 801aa0e:	0069      	lsls	r1, r5, #1
 801aa10:	0849      	lsrs	r1, r1, #1
 801aa12:	4321      	orrs	r1, r4
 801aa14:	d0f5      	beq.n	801aa02 <__ieee754_sqrt+0x32>
 801aa16:	2000      	movs	r0, #0
 801aa18:	4285      	cmp	r5, r0
 801aa1a:	d010      	beq.n	801aa3e <__ieee754_sqrt+0x6e>
 801aa1c:	0022      	movs	r2, r4
 801aa1e:	002b      	movs	r3, r5
 801aa20:	0020      	movs	r0, r4
 801aa22:	0029      	movs	r1, r5
 801aa24:	f7e8 f850 	bl	8002ac8 <__aeabi_dsub>
 801aa28:	0002      	movs	r2, r0
 801aa2a:	000b      	movs	r3, r1
 801aa2c:	f7e7 f940 	bl	8001cb0 <__aeabi_ddiv>
 801aa30:	e7e5      	b.n	801a9fe <__ieee754_sqrt+0x2e>
 801aa32:	1528      	asrs	r0, r5, #20
 801aa34:	d115      	bne.n	801aa62 <__ieee754_sqrt+0x92>
 801aa36:	2480      	movs	r4, #128	@ 0x80
 801aa38:	2100      	movs	r1, #0
 801aa3a:	0364      	lsls	r4, r4, #13
 801aa3c:	e007      	b.n	801aa4e <__ieee754_sqrt+0x7e>
 801aa3e:	0ada      	lsrs	r2, r3, #11
 801aa40:	3815      	subs	r0, #21
 801aa42:	055b      	lsls	r3, r3, #21
 801aa44:	2a00      	cmp	r2, #0
 801aa46:	d0fa      	beq.n	801aa3e <__ieee754_sqrt+0x6e>
 801aa48:	e7f5      	b.n	801aa36 <__ieee754_sqrt+0x66>
 801aa4a:	0052      	lsls	r2, r2, #1
 801aa4c:	3101      	adds	r1, #1
 801aa4e:	4222      	tst	r2, r4
 801aa50:	d0fb      	beq.n	801aa4a <__ieee754_sqrt+0x7a>
 801aa52:	1e4c      	subs	r4, r1, #1
 801aa54:	1b00      	subs	r0, r0, r4
 801aa56:	2420      	movs	r4, #32
 801aa58:	001d      	movs	r5, r3
 801aa5a:	1a64      	subs	r4, r4, r1
 801aa5c:	40e5      	lsrs	r5, r4
 801aa5e:	408b      	lsls	r3, r1
 801aa60:	432a      	orrs	r2, r5
 801aa62:	494b      	ldr	r1, [pc, #300]	@ (801ab90 <__ieee754_sqrt+0x1c0>)
 801aa64:	0312      	lsls	r2, r2, #12
 801aa66:	1844      	adds	r4, r0, r1
 801aa68:	2180      	movs	r1, #128	@ 0x80
 801aa6a:	0b12      	lsrs	r2, r2, #12
 801aa6c:	0349      	lsls	r1, r1, #13
 801aa6e:	4311      	orrs	r1, r2
 801aa70:	07c0      	lsls	r0, r0, #31
 801aa72:	d403      	bmi.n	801aa7c <__ieee754_sqrt+0xac>
 801aa74:	0fda      	lsrs	r2, r3, #31
 801aa76:	0049      	lsls	r1, r1, #1
 801aa78:	1851      	adds	r1, r2, r1
 801aa7a:	005b      	lsls	r3, r3, #1
 801aa7c:	2500      	movs	r5, #0
 801aa7e:	1062      	asrs	r2, r4, #1
 801aa80:	0049      	lsls	r1, r1, #1
 801aa82:	2480      	movs	r4, #128	@ 0x80
 801aa84:	9205      	str	r2, [sp, #20]
 801aa86:	0fda      	lsrs	r2, r3, #31
 801aa88:	1852      	adds	r2, r2, r1
 801aa8a:	2016      	movs	r0, #22
 801aa8c:	0029      	movs	r1, r5
 801aa8e:	005b      	lsls	r3, r3, #1
 801aa90:	03a4      	lsls	r4, r4, #14
 801aa92:	190e      	adds	r6, r1, r4
 801aa94:	4296      	cmp	r6, r2
 801aa96:	dc02      	bgt.n	801aa9e <__ieee754_sqrt+0xce>
 801aa98:	1931      	adds	r1, r6, r4
 801aa9a:	1b92      	subs	r2, r2, r6
 801aa9c:	192d      	adds	r5, r5, r4
 801aa9e:	0fde      	lsrs	r6, r3, #31
 801aaa0:	0052      	lsls	r2, r2, #1
 801aaa2:	3801      	subs	r0, #1
 801aaa4:	1992      	adds	r2, r2, r6
 801aaa6:	005b      	lsls	r3, r3, #1
 801aaa8:	0864      	lsrs	r4, r4, #1
 801aaaa:	2800      	cmp	r0, #0
 801aaac:	d1f1      	bne.n	801aa92 <__ieee754_sqrt+0xc2>
 801aaae:	2620      	movs	r6, #32
 801aab0:	2780      	movs	r7, #128	@ 0x80
 801aab2:	0004      	movs	r4, r0
 801aab4:	9604      	str	r6, [sp, #16]
 801aab6:	063f      	lsls	r7, r7, #24
 801aab8:	19c6      	adds	r6, r0, r7
 801aaba:	46b4      	mov	ip, r6
 801aabc:	4291      	cmp	r1, r2
 801aabe:	db02      	blt.n	801aac6 <__ieee754_sqrt+0xf6>
 801aac0:	d114      	bne.n	801aaec <__ieee754_sqrt+0x11c>
 801aac2:	429e      	cmp	r6, r3
 801aac4:	d812      	bhi.n	801aaec <__ieee754_sqrt+0x11c>
 801aac6:	4660      	mov	r0, ip
 801aac8:	4666      	mov	r6, ip
 801aaca:	19c0      	adds	r0, r0, r7
 801aacc:	9100      	str	r1, [sp, #0]
 801aace:	2e00      	cmp	r6, #0
 801aad0:	da03      	bge.n	801aada <__ieee754_sqrt+0x10a>
 801aad2:	43c6      	mvns	r6, r0
 801aad4:	0ff6      	lsrs	r6, r6, #31
 801aad6:	198e      	adds	r6, r1, r6
 801aad8:	9600      	str	r6, [sp, #0]
 801aada:	1a52      	subs	r2, r2, r1
 801aadc:	4563      	cmp	r3, ip
 801aade:	4189      	sbcs	r1, r1
 801aae0:	4249      	negs	r1, r1
 801aae2:	1a52      	subs	r2, r2, r1
 801aae4:	4661      	mov	r1, ip
 801aae6:	1a5b      	subs	r3, r3, r1
 801aae8:	9900      	ldr	r1, [sp, #0]
 801aaea:	19e4      	adds	r4, r4, r7
 801aaec:	0fde      	lsrs	r6, r3, #31
 801aaee:	0052      	lsls	r2, r2, #1
 801aaf0:	1992      	adds	r2, r2, r6
 801aaf2:	9e04      	ldr	r6, [sp, #16]
 801aaf4:	005b      	lsls	r3, r3, #1
 801aaf6:	3e01      	subs	r6, #1
 801aaf8:	087f      	lsrs	r7, r7, #1
 801aafa:	9604      	str	r6, [sp, #16]
 801aafc:	2e00      	cmp	r6, #0
 801aafe:	d1db      	bne.n	801aab8 <__ieee754_sqrt+0xe8>
 801ab00:	431a      	orrs	r2, r3
 801ab02:	d01f      	beq.n	801ab44 <__ieee754_sqrt+0x174>
 801ab04:	4e23      	ldr	r6, [pc, #140]	@ (801ab94 <__ieee754_sqrt+0x1c4>)
 801ab06:	4f24      	ldr	r7, [pc, #144]	@ (801ab98 <__ieee754_sqrt+0x1c8>)
 801ab08:	6830      	ldr	r0, [r6, #0]
 801ab0a:	6871      	ldr	r1, [r6, #4]
 801ab0c:	683a      	ldr	r2, [r7, #0]
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	9200      	str	r2, [sp, #0]
 801ab12:	9301      	str	r3, [sp, #4]
 801ab14:	6832      	ldr	r2, [r6, #0]
 801ab16:	6873      	ldr	r3, [r6, #4]
 801ab18:	9202      	str	r2, [sp, #8]
 801ab1a:	9303      	str	r3, [sp, #12]
 801ab1c:	9a00      	ldr	r2, [sp, #0]
 801ab1e:	9b01      	ldr	r3, [sp, #4]
 801ab20:	f7e7 ffd2 	bl	8002ac8 <__aeabi_dsub>
 801ab24:	0002      	movs	r2, r0
 801ab26:	000b      	movs	r3, r1
 801ab28:	9802      	ldr	r0, [sp, #8]
 801ab2a:	9903      	ldr	r1, [sp, #12]
 801ab2c:	f7e5 fc9e 	bl	800046c <__aeabi_dcmple>
 801ab30:	2800      	cmp	r0, #0
 801ab32:	d007      	beq.n	801ab44 <__ieee754_sqrt+0x174>
 801ab34:	6830      	ldr	r0, [r6, #0]
 801ab36:	6871      	ldr	r1, [r6, #4]
 801ab38:	683a      	ldr	r2, [r7, #0]
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	1c67      	adds	r7, r4, #1
 801ab3e:	d10f      	bne.n	801ab60 <__ieee754_sqrt+0x190>
 801ab40:	9c04      	ldr	r4, [sp, #16]
 801ab42:	3501      	adds	r5, #1
 801ab44:	4b15      	ldr	r3, [pc, #84]	@ (801ab9c <__ieee754_sqrt+0x1cc>)
 801ab46:	106a      	asrs	r2, r5, #1
 801ab48:	18d2      	adds	r2, r2, r3
 801ab4a:	0863      	lsrs	r3, r4, #1
 801ab4c:	07ed      	lsls	r5, r5, #31
 801ab4e:	d502      	bpl.n	801ab56 <__ieee754_sqrt+0x186>
 801ab50:	2180      	movs	r1, #128	@ 0x80
 801ab52:	0609      	lsls	r1, r1, #24
 801ab54:	430b      	orrs	r3, r1
 801ab56:	9905      	ldr	r1, [sp, #20]
 801ab58:	001c      	movs	r4, r3
 801ab5a:	0509      	lsls	r1, r1, #20
 801ab5c:	188d      	adds	r5, r1, r2
 801ab5e:	e750      	b.n	801aa02 <__ieee754_sqrt+0x32>
 801ab60:	f7e6 fd42 	bl	80015e8 <__aeabi_dadd>
 801ab64:	6877      	ldr	r7, [r6, #4]
 801ab66:	6836      	ldr	r6, [r6, #0]
 801ab68:	0002      	movs	r2, r0
 801ab6a:	000b      	movs	r3, r1
 801ab6c:	0030      	movs	r0, r6
 801ab6e:	0039      	movs	r1, r7
 801ab70:	f7e5 fc72 	bl	8000458 <__aeabi_dcmplt>
 801ab74:	2800      	cmp	r0, #0
 801ab76:	d004      	beq.n	801ab82 <__ieee754_sqrt+0x1b2>
 801ab78:	3402      	adds	r4, #2
 801ab7a:	4263      	negs	r3, r4
 801ab7c:	4163      	adcs	r3, r4
 801ab7e:	18ed      	adds	r5, r5, r3
 801ab80:	e7e0      	b.n	801ab44 <__ieee754_sqrt+0x174>
 801ab82:	2301      	movs	r3, #1
 801ab84:	3401      	adds	r4, #1
 801ab86:	439c      	bics	r4, r3
 801ab88:	e7dc      	b.n	801ab44 <__ieee754_sqrt+0x174>
 801ab8a:	46c0      	nop			@ (mov r8, r8)
 801ab8c:	7ff00000 	.word	0x7ff00000
 801ab90:	fffffc01 	.word	0xfffffc01
 801ab94:	200003b8 	.word	0x200003b8
 801ab98:	200003b0 	.word	0x200003b0
 801ab9c:	3fe00000 	.word	0x3fe00000

0801aba0 <__ieee754_sqrtf>:
 801aba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aba2:	0003      	movs	r3, r0
 801aba4:	0042      	lsls	r2, r0, #1
 801aba6:	1c04      	adds	r4, r0, #0
 801aba8:	20ff      	movs	r0, #255	@ 0xff
 801abaa:	0852      	lsrs	r2, r2, #1
 801abac:	05c0      	lsls	r0, r0, #23
 801abae:	4282      	cmp	r2, r0
 801abb0:	d30a      	bcc.n	801abc8 <__ieee754_sqrtf+0x28>
 801abb2:	1c21      	adds	r1, r4, #0
 801abb4:	1c20      	adds	r0, r4, #0
 801abb6:	f7e6 f971 	bl	8000e9c <__aeabi_fmul>
 801abba:	1c01      	adds	r1, r0, #0
 801abbc:	1c20      	adds	r0, r4, #0
 801abbe:	f7e5 fdfd 	bl	80007bc <__aeabi_fadd>
 801abc2:	1c04      	adds	r4, r0, #0
 801abc4:	1c20      	adds	r0, r4, #0
 801abc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801abc8:	2a00      	cmp	r2, #0
 801abca:	d0fb      	beq.n	801abc4 <__ieee754_sqrtf+0x24>
 801abcc:	2c00      	cmp	r4, #0
 801abce:	da07      	bge.n	801abe0 <__ieee754_sqrtf+0x40>
 801abd0:	1c21      	adds	r1, r4, #0
 801abd2:	1c20      	adds	r0, r4, #0
 801abd4:	f7e6 faa0 	bl	8001118 <__aeabi_fsub>
 801abd8:	1c01      	adds	r1, r0, #0
 801abda:	f7e5 ff79 	bl	8000ad0 <__aeabi_fdiv>
 801abde:	e7f0      	b.n	801abc2 <__ieee754_sqrtf+0x22>
 801abe0:	0022      	movs	r2, r4
 801abe2:	15e1      	asrs	r1, r4, #23
 801abe4:	4002      	ands	r2, r0
 801abe6:	4204      	tst	r4, r0
 801abe8:	d046      	beq.n	801ac78 <__ieee754_sqrtf+0xd8>
 801abea:	2280      	movs	r2, #128	@ 0x80
 801abec:	000f      	movs	r7, r1
 801abee:	025b      	lsls	r3, r3, #9
 801abf0:	0a5b      	lsrs	r3, r3, #9
 801abf2:	0412      	lsls	r2, r2, #16
 801abf4:	3f7f      	subs	r7, #127	@ 0x7f
 801abf6:	4313      	orrs	r3, r2
 801abf8:	07c9      	lsls	r1, r1, #31
 801abfa:	d400      	bmi.n	801abfe <__ieee754_sqrtf+0x5e>
 801abfc:	005b      	lsls	r3, r3, #1
 801abfe:	2400      	movs	r4, #0
 801ac00:	2180      	movs	r1, #128	@ 0x80
 801ac02:	2019      	movs	r0, #25
 801ac04:	0026      	movs	r6, r4
 801ac06:	107f      	asrs	r7, r7, #1
 801ac08:	005b      	lsls	r3, r3, #1
 801ac0a:	0449      	lsls	r1, r1, #17
 801ac0c:	1875      	adds	r5, r6, r1
 801ac0e:	001a      	movs	r2, r3
 801ac10:	429d      	cmp	r5, r3
 801ac12:	dc02      	bgt.n	801ac1a <__ieee754_sqrtf+0x7a>
 801ac14:	186e      	adds	r6, r5, r1
 801ac16:	1b5a      	subs	r2, r3, r5
 801ac18:	1864      	adds	r4, r4, r1
 801ac1a:	3801      	subs	r0, #1
 801ac1c:	0053      	lsls	r3, r2, #1
 801ac1e:	0849      	lsrs	r1, r1, #1
 801ac20:	2800      	cmp	r0, #0
 801ac22:	d1f3      	bne.n	801ac0c <__ieee754_sqrtf+0x6c>
 801ac24:	2a00      	cmp	r2, #0
 801ac26:	d019      	beq.n	801ac5c <__ieee754_sqrtf+0xbc>
 801ac28:	4d17      	ldr	r5, [pc, #92]	@ (801ac88 <__ieee754_sqrtf+0xe8>)
 801ac2a:	4e18      	ldr	r6, [pc, #96]	@ (801ac8c <__ieee754_sqrtf+0xec>)
 801ac2c:	6828      	ldr	r0, [r5, #0]
 801ac2e:	6831      	ldr	r1, [r6, #0]
 801ac30:	682b      	ldr	r3, [r5, #0]
 801ac32:	9301      	str	r3, [sp, #4]
 801ac34:	f7e6 fa70 	bl	8001118 <__aeabi_fsub>
 801ac38:	1c01      	adds	r1, r0, #0
 801ac3a:	9801      	ldr	r0, [sp, #4]
 801ac3c:	f7e5 fc50 	bl	80004e0 <__aeabi_fcmple>
 801ac40:	2800      	cmp	r0, #0
 801ac42:	d00b      	beq.n	801ac5c <__ieee754_sqrtf+0xbc>
 801ac44:	6828      	ldr	r0, [r5, #0]
 801ac46:	6831      	ldr	r1, [r6, #0]
 801ac48:	f7e5 fdb8 	bl	80007bc <__aeabi_fadd>
 801ac4c:	682d      	ldr	r5, [r5, #0]
 801ac4e:	1c01      	adds	r1, r0, #0
 801ac50:	1c28      	adds	r0, r5, #0
 801ac52:	f7e5 fc3b 	bl	80004cc <__aeabi_fcmplt>
 801ac56:	2800      	cmp	r0, #0
 801ac58:	d011      	beq.n	801ac7e <__ieee754_sqrtf+0xde>
 801ac5a:	3402      	adds	r4, #2
 801ac5c:	23fc      	movs	r3, #252	@ 0xfc
 801ac5e:	1064      	asrs	r4, r4, #1
 801ac60:	059b      	lsls	r3, r3, #22
 801ac62:	18e3      	adds	r3, r4, r3
 801ac64:	05fc      	lsls	r4, r7, #23
 801ac66:	18e4      	adds	r4, r4, r3
 801ac68:	e7ac      	b.n	801abc4 <__ieee754_sqrtf+0x24>
 801ac6a:	005b      	lsls	r3, r3, #1
 801ac6c:	3201      	adds	r2, #1
 801ac6e:	4203      	tst	r3, r0
 801ac70:	d0fb      	beq.n	801ac6a <__ieee754_sqrtf+0xca>
 801ac72:	3a01      	subs	r2, #1
 801ac74:	1a89      	subs	r1, r1, r2
 801ac76:	e7b8      	b.n	801abea <__ieee754_sqrtf+0x4a>
 801ac78:	2080      	movs	r0, #128	@ 0x80
 801ac7a:	0400      	lsls	r0, r0, #16
 801ac7c:	e7f7      	b.n	801ac6e <__ieee754_sqrtf+0xce>
 801ac7e:	2301      	movs	r3, #1
 801ac80:	3401      	adds	r4, #1
 801ac82:	439c      	bics	r4, r3
 801ac84:	e7ea      	b.n	801ac5c <__ieee754_sqrtf+0xbc>
 801ac86:	46c0      	nop			@ (mov r8, r8)
 801ac88:	200003c4 	.word	0x200003c4
 801ac8c:	200003c0 	.word	0x200003c0

0801ac90 <__ieee754_log10>:
 801ac90:	2280      	movs	r2, #128	@ 0x80
 801ac92:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac94:	000b      	movs	r3, r1
 801ac96:	0004      	movs	r4, r0
 801ac98:	000d      	movs	r5, r1
 801ac9a:	b085      	sub	sp, #20
 801ac9c:	0352      	lsls	r2, r2, #13
 801ac9e:	4291      	cmp	r1, r2
 801aca0:	da26      	bge.n	801acf0 <__ieee754_log10+0x60>
 801aca2:	004a      	lsls	r2, r1, #1
 801aca4:	0852      	lsrs	r2, r2, #1
 801aca6:	4302      	orrs	r2, r0
 801aca8:	d107      	bne.n	801acba <__ieee754_log10+0x2a>
 801acaa:	2200      	movs	r2, #0
 801acac:	2300      	movs	r3, #0
 801acae:	2000      	movs	r0, #0
 801acb0:	4929      	ldr	r1, [pc, #164]	@ (801ad58 <__ieee754_log10+0xc8>)
 801acb2:	f7e6 fffd 	bl	8001cb0 <__aeabi_ddiv>
 801acb6:	b005      	add	sp, #20
 801acb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acba:	2900      	cmp	r1, #0
 801acbc:	da05      	bge.n	801acca <__ieee754_log10+0x3a>
 801acbe:	0002      	movs	r2, r0
 801acc0:	f7e7 ff02 	bl	8002ac8 <__aeabi_dsub>
 801acc4:	2200      	movs	r2, #0
 801acc6:	2300      	movs	r3, #0
 801acc8:	e7f3      	b.n	801acb2 <__ieee754_log10+0x22>
 801acca:	2200      	movs	r2, #0
 801accc:	4b23      	ldr	r3, [pc, #140]	@ (801ad5c <__ieee754_log10+0xcc>)
 801acce:	f7e7 fc33 	bl	8002538 <__aeabi_dmul>
 801acd2:	2236      	movs	r2, #54	@ 0x36
 801acd4:	0004      	movs	r4, r0
 801acd6:	000d      	movs	r5, r1
 801acd8:	000b      	movs	r3, r1
 801acda:	4252      	negs	r2, r2
 801acdc:	4920      	ldr	r1, [pc, #128]	@ (801ad60 <__ieee754_log10+0xd0>)
 801acde:	428b      	cmp	r3, r1
 801ace0:	dd08      	ble.n	801acf4 <__ieee754_log10+0x64>
 801ace2:	0022      	movs	r2, r4
 801ace4:	002b      	movs	r3, r5
 801ace6:	0020      	movs	r0, r4
 801ace8:	0029      	movs	r1, r5
 801acea:	f7e6 fc7d 	bl	80015e8 <__aeabi_dadd>
 801acee:	e7e2      	b.n	801acb6 <__ieee754_log10+0x26>
 801acf0:	2200      	movs	r2, #0
 801acf2:	e7f3      	b.n	801acdc <__ieee754_log10+0x4c>
 801acf4:	491b      	ldr	r1, [pc, #108]	@ (801ad64 <__ieee754_log10+0xd4>)
 801acf6:	1518      	asrs	r0, r3, #20
 801acf8:	1840      	adds	r0, r0, r1
 801acfa:	1880      	adds	r0, r0, r2
 801acfc:	0fc2      	lsrs	r2, r0, #31
 801acfe:	031b      	lsls	r3, r3, #12
 801ad00:	0b1b      	lsrs	r3, r3, #12
 801ad02:	1880      	adds	r0, r0, r2
 801ad04:	9203      	str	r2, [sp, #12]
 801ad06:	9300      	str	r3, [sp, #0]
 801ad08:	f7e8 fad8 	bl	80032bc <__aeabi_i2d>
 801ad0c:	9a03      	ldr	r2, [sp, #12]
 801ad0e:	4b16      	ldr	r3, [pc, #88]	@ (801ad68 <__ieee754_log10+0xd8>)
 801ad10:	0006      	movs	r6, r0
 801ad12:	1a9b      	subs	r3, r3, r2
 801ad14:	9a00      	ldr	r2, [sp, #0]
 801ad16:	051b      	lsls	r3, r3, #20
 801ad18:	431a      	orrs	r2, r3
 801ad1a:	0015      	movs	r5, r2
 801ad1c:	4b13      	ldr	r3, [pc, #76]	@ (801ad6c <__ieee754_log10+0xdc>)
 801ad1e:	4a14      	ldr	r2, [pc, #80]	@ (801ad70 <__ieee754_log10+0xe0>)
 801ad20:	000f      	movs	r7, r1
 801ad22:	f7e7 fc09 	bl	8002538 <__aeabi_dmul>
 801ad26:	9000      	str	r0, [sp, #0]
 801ad28:	9101      	str	r1, [sp, #4]
 801ad2a:	0020      	movs	r0, r4
 801ad2c:	0029      	movs	r1, r5
 801ad2e:	f000 f93b 	bl	801afa8 <__ieee754_log>
 801ad32:	4a10      	ldr	r2, [pc, #64]	@ (801ad74 <__ieee754_log10+0xe4>)
 801ad34:	4b10      	ldr	r3, [pc, #64]	@ (801ad78 <__ieee754_log10+0xe8>)
 801ad36:	f7e7 fbff 	bl	8002538 <__aeabi_dmul>
 801ad3a:	9a00      	ldr	r2, [sp, #0]
 801ad3c:	9b01      	ldr	r3, [sp, #4]
 801ad3e:	f7e6 fc53 	bl	80015e8 <__aeabi_dadd>
 801ad42:	4a0e      	ldr	r2, [pc, #56]	@ (801ad7c <__ieee754_log10+0xec>)
 801ad44:	4b0e      	ldr	r3, [pc, #56]	@ (801ad80 <__ieee754_log10+0xf0>)
 801ad46:	0004      	movs	r4, r0
 801ad48:	000d      	movs	r5, r1
 801ad4a:	0030      	movs	r0, r6
 801ad4c:	0039      	movs	r1, r7
 801ad4e:	f7e7 fbf3 	bl	8002538 <__aeabi_dmul>
 801ad52:	0002      	movs	r2, r0
 801ad54:	000b      	movs	r3, r1
 801ad56:	e7c6      	b.n	801ace6 <__ieee754_log10+0x56>
 801ad58:	c3500000 	.word	0xc3500000
 801ad5c:	43500000 	.word	0x43500000
 801ad60:	7fefffff 	.word	0x7fefffff
 801ad64:	fffffc01 	.word	0xfffffc01
 801ad68:	000003ff 	.word	0x000003ff
 801ad6c:	3d59fef3 	.word	0x3d59fef3
 801ad70:	11f12b36 	.word	0x11f12b36
 801ad74:	1526e50e 	.word	0x1526e50e
 801ad78:	3fdbcb7b 	.word	0x3fdbcb7b
 801ad7c:	509f6000 	.word	0x509f6000
 801ad80:	3fd34413 	.word	0x3fd34413

0801ad84 <__ieee754_expf>:
 801ad84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad86:	21ff      	movs	r1, #255	@ 0xff
 801ad88:	0043      	lsls	r3, r0, #1
 801ad8a:	1c04      	adds	r4, r0, #0
 801ad8c:	085b      	lsrs	r3, r3, #1
 801ad8e:	05c9      	lsls	r1, r1, #23
 801ad90:	428b      	cmp	r3, r1
 801ad92:	d904      	bls.n	801ad9e <__ieee754_expf+0x1a>
 801ad94:	1c01      	adds	r1, r0, #0
 801ad96:	1c20      	adds	r0, r4, #0
 801ad98:	f7e5 fd10 	bl	80007bc <__aeabi_fadd>
 801ad9c:	e00d      	b.n	801adba <__ieee754_expf+0x36>
 801ad9e:	0fc6      	lsrs	r6, r0, #31
 801ada0:	428b      	cmp	r3, r1
 801ada2:	d104      	bne.n	801adae <__ieee754_expf+0x2a>
 801ada4:	2e00      	cmp	r6, #0
 801ada6:	d000      	beq.n	801adaa <__ieee754_expf+0x26>
 801ada8:	e0ba      	b.n	801af20 <__ieee754_expf+0x19c>
 801adaa:	1c20      	adds	r0, r4, #0
 801adac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801adae:	495d      	ldr	r1, [pc, #372]	@ (801af24 <__ieee754_expf+0x1a0>)
 801adb0:	4288      	cmp	r0, r1
 801adb2:	dd04      	ble.n	801adbe <__ieee754_expf+0x3a>
 801adb4:	2000      	movs	r0, #0
 801adb6:	f000 f8f1 	bl	801af9c <__math_oflowf>
 801adba:	1c04      	adds	r4, r0, #0
 801adbc:	e7f5      	b.n	801adaa <__ieee754_expf+0x26>
 801adbe:	2800      	cmp	r0, #0
 801adc0:	da06      	bge.n	801add0 <__ieee754_expf+0x4c>
 801adc2:	4a59      	ldr	r2, [pc, #356]	@ (801af28 <__ieee754_expf+0x1a4>)
 801adc4:	4293      	cmp	r3, r2
 801adc6:	d903      	bls.n	801add0 <__ieee754_expf+0x4c>
 801adc8:	2000      	movs	r0, #0
 801adca:	f000 f8e1 	bl	801af90 <__math_uflowf>
 801adce:	e7f4      	b.n	801adba <__ieee754_expf+0x36>
 801add0:	4a56      	ldr	r2, [pc, #344]	@ (801af2c <__ieee754_expf+0x1a8>)
 801add2:	4293      	cmp	r3, r2
 801add4:	d96e      	bls.n	801aeb4 <__ieee754_expf+0x130>
 801add6:	4a56      	ldr	r2, [pc, #344]	@ (801af30 <__ieee754_expf+0x1ac>)
 801add8:	00b5      	lsls	r5, r6, #2
 801adda:	4293      	cmp	r3, r2
 801addc:	d84e      	bhi.n	801ae7c <__ieee754_expf+0xf8>
 801adde:	4b55      	ldr	r3, [pc, #340]	@ (801af34 <__ieee754_expf+0x1b0>)
 801ade0:	1c20      	adds	r0, r4, #0
 801ade2:	5959      	ldr	r1, [r3, r5]
 801ade4:	f7e6 f998 	bl	8001118 <__aeabi_fsub>
 801ade8:	4b53      	ldr	r3, [pc, #332]	@ (801af38 <__ieee754_expf+0x1b4>)
 801adea:	1c07      	adds	r7, r0, #0
 801adec:	595b      	ldr	r3, [r3, r5]
 801adee:	2501      	movs	r5, #1
 801adf0:	1bad      	subs	r5, r5, r6
 801adf2:	9300      	str	r3, [sp, #0]
 801adf4:	1bad      	subs	r5, r5, r6
 801adf6:	9900      	ldr	r1, [sp, #0]
 801adf8:	1c38      	adds	r0, r7, #0
 801adfa:	f7e6 f98d 	bl	8001118 <__aeabi_fsub>
 801adfe:	1c04      	adds	r4, r0, #0
 801ae00:	1c21      	adds	r1, r4, #0
 801ae02:	1c20      	adds	r0, r4, #0
 801ae04:	f7e6 f84a 	bl	8000e9c <__aeabi_fmul>
 801ae08:	494c      	ldr	r1, [pc, #304]	@ (801af3c <__ieee754_expf+0x1b8>)
 801ae0a:	1c06      	adds	r6, r0, #0
 801ae0c:	f7e6 f846 	bl	8000e9c <__aeabi_fmul>
 801ae10:	494b      	ldr	r1, [pc, #300]	@ (801af40 <__ieee754_expf+0x1bc>)
 801ae12:	f7e6 f981 	bl	8001118 <__aeabi_fsub>
 801ae16:	1c31      	adds	r1, r6, #0
 801ae18:	f7e6 f840 	bl	8000e9c <__aeabi_fmul>
 801ae1c:	4949      	ldr	r1, [pc, #292]	@ (801af44 <__ieee754_expf+0x1c0>)
 801ae1e:	f7e5 fccd 	bl	80007bc <__aeabi_fadd>
 801ae22:	1c31      	adds	r1, r6, #0
 801ae24:	f7e6 f83a 	bl	8000e9c <__aeabi_fmul>
 801ae28:	4947      	ldr	r1, [pc, #284]	@ (801af48 <__ieee754_expf+0x1c4>)
 801ae2a:	f7e6 f975 	bl	8001118 <__aeabi_fsub>
 801ae2e:	1c31      	adds	r1, r6, #0
 801ae30:	f7e6 f834 	bl	8000e9c <__aeabi_fmul>
 801ae34:	4945      	ldr	r1, [pc, #276]	@ (801af4c <__ieee754_expf+0x1c8>)
 801ae36:	f7e5 fcc1 	bl	80007bc <__aeabi_fadd>
 801ae3a:	1c31      	adds	r1, r6, #0
 801ae3c:	f7e6 f82e 	bl	8000e9c <__aeabi_fmul>
 801ae40:	1c01      	adds	r1, r0, #0
 801ae42:	1c20      	adds	r0, r4, #0
 801ae44:	f7e6 f968 	bl	8001118 <__aeabi_fsub>
 801ae48:	1c01      	adds	r1, r0, #0
 801ae4a:	1c06      	adds	r6, r0, #0
 801ae4c:	1c20      	adds	r0, r4, #0
 801ae4e:	f7e6 f825 	bl	8000e9c <__aeabi_fmul>
 801ae52:	9001      	str	r0, [sp, #4]
 801ae54:	2d00      	cmp	r5, #0
 801ae56:	d140      	bne.n	801aeda <__ieee754_expf+0x156>
 801ae58:	2180      	movs	r1, #128	@ 0x80
 801ae5a:	1c30      	adds	r0, r6, #0
 801ae5c:	05c9      	lsls	r1, r1, #23
 801ae5e:	f7e6 f95b 	bl	8001118 <__aeabi_fsub>
 801ae62:	1c01      	adds	r1, r0, #0
 801ae64:	9801      	ldr	r0, [sp, #4]
 801ae66:	f7e5 fe33 	bl	8000ad0 <__aeabi_fdiv>
 801ae6a:	1c21      	adds	r1, r4, #0
 801ae6c:	f7e6 f954 	bl	8001118 <__aeabi_fsub>
 801ae70:	1c01      	adds	r1, r0, #0
 801ae72:	20fe      	movs	r0, #254	@ 0xfe
 801ae74:	0580      	lsls	r0, r0, #22
 801ae76:	f7e6 f94f 	bl	8001118 <__aeabi_fsub>
 801ae7a:	e79e      	b.n	801adba <__ieee754_expf+0x36>
 801ae7c:	4934      	ldr	r1, [pc, #208]	@ (801af50 <__ieee754_expf+0x1cc>)
 801ae7e:	1c20      	adds	r0, r4, #0
 801ae80:	f7e6 f80c 	bl	8000e9c <__aeabi_fmul>
 801ae84:	4b33      	ldr	r3, [pc, #204]	@ (801af54 <__ieee754_expf+0x1d0>)
 801ae86:	5959      	ldr	r1, [r3, r5]
 801ae88:	f7e5 fc98 	bl	80007bc <__aeabi_fadd>
 801ae8c:	f7e6 fafe 	bl	800148c <__aeabi_f2iz>
 801ae90:	0005      	movs	r5, r0
 801ae92:	f7e6 fb1b 	bl	80014cc <__aeabi_i2f>
 801ae96:	4930      	ldr	r1, [pc, #192]	@ (801af58 <__ieee754_expf+0x1d4>)
 801ae98:	1c06      	adds	r6, r0, #0
 801ae9a:	f7e5 ffff 	bl	8000e9c <__aeabi_fmul>
 801ae9e:	1c01      	adds	r1, r0, #0
 801aea0:	1c20      	adds	r0, r4, #0
 801aea2:	f7e6 f939 	bl	8001118 <__aeabi_fsub>
 801aea6:	492d      	ldr	r1, [pc, #180]	@ (801af5c <__ieee754_expf+0x1d8>)
 801aea8:	1c07      	adds	r7, r0, #0
 801aeaa:	1c30      	adds	r0, r6, #0
 801aeac:	f7e5 fff6 	bl	8000e9c <__aeabi_fmul>
 801aeb0:	9000      	str	r0, [sp, #0]
 801aeb2:	e7a0      	b.n	801adf6 <__ieee754_expf+0x72>
 801aeb4:	22d0      	movs	r2, #208	@ 0xd0
 801aeb6:	0592      	lsls	r2, r2, #22
 801aeb8:	4293      	cmp	r3, r2
 801aeba:	d20c      	bcs.n	801aed6 <__ieee754_expf+0x152>
 801aebc:	4928      	ldr	r1, [pc, #160]	@ (801af60 <__ieee754_expf+0x1dc>)
 801aebe:	1c20      	adds	r0, r4, #0
 801aec0:	f7e5 fc7c 	bl	80007bc <__aeabi_fadd>
 801aec4:	21fe      	movs	r1, #254	@ 0xfe
 801aec6:	0589      	lsls	r1, r1, #22
 801aec8:	f7e5 fb14 	bl	80004f4 <__aeabi_fcmpgt>
 801aecc:	1e05      	subs	r5, r0, #0
 801aece:	d097      	beq.n	801ae00 <__ieee754_expf+0x7c>
 801aed0:	21fe      	movs	r1, #254	@ 0xfe
 801aed2:	0589      	lsls	r1, r1, #22
 801aed4:	e75f      	b.n	801ad96 <__ieee754_expf+0x12>
 801aed6:	2500      	movs	r5, #0
 801aed8:	e792      	b.n	801ae00 <__ieee754_expf+0x7c>
 801aeda:	2080      	movs	r0, #128	@ 0x80
 801aedc:	1c31      	adds	r1, r6, #0
 801aede:	05c0      	lsls	r0, r0, #23
 801aee0:	f7e6 f91a 	bl	8001118 <__aeabi_fsub>
 801aee4:	1c01      	adds	r1, r0, #0
 801aee6:	9801      	ldr	r0, [sp, #4]
 801aee8:	f7e5 fdf2 	bl	8000ad0 <__aeabi_fdiv>
 801aeec:	1c01      	adds	r1, r0, #0
 801aeee:	9800      	ldr	r0, [sp, #0]
 801aef0:	f7e6 f912 	bl	8001118 <__aeabi_fsub>
 801aef4:	1c39      	adds	r1, r7, #0
 801aef6:	f7e6 f90f 	bl	8001118 <__aeabi_fsub>
 801aefa:	1c01      	adds	r1, r0, #0
 801aefc:	20fe      	movs	r0, #254	@ 0xfe
 801aefe:	0580      	lsls	r0, r0, #22
 801af00:	f7e6 f90a 	bl	8001118 <__aeabi_fsub>
 801af04:	002b      	movs	r3, r5
 801af06:	337d      	adds	r3, #125	@ 0x7d
 801af08:	db02      	blt.n	801af10 <__ieee754_expf+0x18c>
 801af0a:	05ec      	lsls	r4, r5, #23
 801af0c:	1824      	adds	r4, r4, r0
 801af0e:	e74c      	b.n	801adaa <__ieee754_expf+0x26>
 801af10:	21d8      	movs	r1, #216	@ 0xd8
 801af12:	3564      	adds	r5, #100	@ 0x64
 801af14:	05ed      	lsls	r5, r5, #23
 801af16:	1828      	adds	r0, r5, r0
 801af18:	0509      	lsls	r1, r1, #20
 801af1a:	f7e5 ffbf 	bl	8000e9c <__aeabi_fmul>
 801af1e:	e74c      	b.n	801adba <__ieee754_expf+0x36>
 801af20:	2400      	movs	r4, #0
 801af22:	e742      	b.n	801adaa <__ieee754_expf+0x26>
 801af24:	42b17217 	.word	0x42b17217
 801af28:	42cff1b5 	.word	0x42cff1b5
 801af2c:	3eb17218 	.word	0x3eb17218
 801af30:	3f851591 	.word	0x3f851591
 801af34:	0801c5c8 	.word	0x0801c5c8
 801af38:	0801c5c0 	.word	0x0801c5c0
 801af3c:	3331bb4c 	.word	0x3331bb4c
 801af40:	35ddea0e 	.word	0x35ddea0e
 801af44:	388ab355 	.word	0x388ab355
 801af48:	3b360b61 	.word	0x3b360b61
 801af4c:	3e2aaaab 	.word	0x3e2aaaab
 801af50:	3fb8aa3b 	.word	0x3fb8aa3b
 801af54:	0801c5d0 	.word	0x0801c5d0
 801af58:	3f317180 	.word	0x3f317180
 801af5c:	3717f7d1 	.word	0x3717f7d1
 801af60:	7149f2ca 	.word	0x7149f2ca

0801af64 <with_errnof>:
 801af64:	b570      	push	{r4, r5, r6, lr}
 801af66:	000d      	movs	r5, r1
 801af68:	1c04      	adds	r4, r0, #0
 801af6a:	f7fd fb67 	bl	801863c <__errno>
 801af6e:	6005      	str	r5, [r0, #0]
 801af70:	1c20      	adds	r0, r4, #0
 801af72:	bd70      	pop	{r4, r5, r6, pc}

0801af74 <xflowf>:
 801af74:	b510      	push	{r4, lr}
 801af76:	1c0b      	adds	r3, r1, #0
 801af78:	2800      	cmp	r0, #0
 801af7a:	d002      	beq.n	801af82 <xflowf+0xe>
 801af7c:	2380      	movs	r3, #128	@ 0x80
 801af7e:	061b      	lsls	r3, r3, #24
 801af80:	18cb      	adds	r3, r1, r3
 801af82:	1c18      	adds	r0, r3, #0
 801af84:	f7e5 ff8a 	bl	8000e9c <__aeabi_fmul>
 801af88:	2122      	movs	r1, #34	@ 0x22
 801af8a:	f7ff ffeb 	bl	801af64 <with_errnof>
 801af8e:	bd10      	pop	{r4, pc}

0801af90 <__math_uflowf>:
 801af90:	2180      	movs	r1, #128	@ 0x80
 801af92:	b510      	push	{r4, lr}
 801af94:	0549      	lsls	r1, r1, #21
 801af96:	f7ff ffed 	bl	801af74 <xflowf>
 801af9a:	bd10      	pop	{r4, pc}

0801af9c <__math_oflowf>:
 801af9c:	21e0      	movs	r1, #224	@ 0xe0
 801af9e:	b510      	push	{r4, lr}
 801afa0:	05c9      	lsls	r1, r1, #23
 801afa2:	f7ff ffe7 	bl	801af74 <xflowf>
 801afa6:	bd10      	pop	{r4, pc}

0801afa8 <__ieee754_log>:
 801afa8:	2380      	movs	r3, #128	@ 0x80
 801afaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afac:	035b      	lsls	r3, r3, #13
 801afae:	000e      	movs	r6, r1
 801afb0:	b08d      	sub	sp, #52	@ 0x34
 801afb2:	4299      	cmp	r1, r3
 801afb4:	da23      	bge.n	801affe <__ieee754_log+0x56>
 801afb6:	004b      	lsls	r3, r1, #1
 801afb8:	085b      	lsrs	r3, r3, #1
 801afba:	4303      	orrs	r3, r0
 801afbc:	d107      	bne.n	801afce <__ieee754_log+0x26>
 801afbe:	2200      	movs	r2, #0
 801afc0:	2300      	movs	r3, #0
 801afc2:	2000      	movs	r0, #0
 801afc4:	49b4      	ldr	r1, [pc, #720]	@ (801b298 <__ieee754_log+0x2f0>)
 801afc6:	f7e6 fe73 	bl	8001cb0 <__aeabi_ddiv>
 801afca:	b00d      	add	sp, #52	@ 0x34
 801afcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afce:	2900      	cmp	r1, #0
 801afd0:	da06      	bge.n	801afe0 <__ieee754_log+0x38>
 801afd2:	0002      	movs	r2, r0
 801afd4:	000b      	movs	r3, r1
 801afd6:	f7e7 fd77 	bl	8002ac8 <__aeabi_dsub>
 801afda:	2200      	movs	r2, #0
 801afdc:	2300      	movs	r3, #0
 801afde:	e7f2      	b.n	801afc6 <__ieee754_log+0x1e>
 801afe0:	4bae      	ldr	r3, [pc, #696]	@ (801b29c <__ieee754_log+0x2f4>)
 801afe2:	2200      	movs	r2, #0
 801afe4:	f7e7 faa8 	bl	8002538 <__aeabi_dmul>
 801afe8:	2336      	movs	r3, #54	@ 0x36
 801afea:	000e      	movs	r6, r1
 801afec:	425b      	negs	r3, r3
 801afee:	4aac      	ldr	r2, [pc, #688]	@ (801b2a0 <__ieee754_log+0x2f8>)
 801aff0:	4296      	cmp	r6, r2
 801aff2:	dd06      	ble.n	801b002 <__ieee754_log+0x5a>
 801aff4:	0002      	movs	r2, r0
 801aff6:	000b      	movs	r3, r1
 801aff8:	f7e6 faf6 	bl	80015e8 <__aeabi_dadd>
 801affc:	e7e5      	b.n	801afca <__ieee754_log+0x22>
 801affe:	2300      	movs	r3, #0
 801b000:	e7f5      	b.n	801afee <__ieee754_log+0x46>
 801b002:	4ca8      	ldr	r4, [pc, #672]	@ (801b2a4 <__ieee754_log+0x2fc>)
 801b004:	1532      	asrs	r2, r6, #20
 801b006:	1912      	adds	r2, r2, r4
 801b008:	0336      	lsls	r6, r6, #12
 801b00a:	4ca7      	ldr	r4, [pc, #668]	@ (801b2a8 <__ieee754_log+0x300>)
 801b00c:	18d2      	adds	r2, r2, r3
 801b00e:	0b33      	lsrs	r3, r6, #12
 801b010:	9302      	str	r3, [sp, #8]
 801b012:	191b      	adds	r3, r3, r4
 801b014:	2480      	movs	r4, #128	@ 0x80
 801b016:	0364      	lsls	r4, r4, #13
 801b018:	4023      	ands	r3, r4
 801b01a:	4ca4      	ldr	r4, [pc, #656]	@ (801b2ac <__ieee754_log+0x304>)
 801b01c:	9d02      	ldr	r5, [sp, #8]
 801b01e:	405c      	eors	r4, r3
 801b020:	151b      	asrs	r3, r3, #20
 801b022:	189b      	adds	r3, r3, r2
 801b024:	4325      	orrs	r5, r4
 801b026:	2200      	movs	r2, #0
 801b028:	9300      	str	r3, [sp, #0]
 801b02a:	0029      	movs	r1, r5
 801b02c:	4b9f      	ldr	r3, [pc, #636]	@ (801b2ac <__ieee754_log+0x304>)
 801b02e:	f7e7 fd4b 	bl	8002ac8 <__aeabi_dsub>
 801b032:	9b02      	ldr	r3, [sp, #8]
 801b034:	0006      	movs	r6, r0
 801b036:	3302      	adds	r3, #2
 801b038:	031b      	lsls	r3, r3, #12
 801b03a:	000f      	movs	r7, r1
 801b03c:	2200      	movs	r2, #0
 801b03e:	0b1b      	lsrs	r3, r3, #12
 801b040:	2b02      	cmp	r3, #2
 801b042:	dc64      	bgt.n	801b10e <__ieee754_log+0x166>
 801b044:	2300      	movs	r3, #0
 801b046:	f7e5 fa01 	bl	800044c <__aeabi_dcmpeq>
 801b04a:	2800      	cmp	r0, #0
 801b04c:	d019      	beq.n	801b082 <__ieee754_log+0xda>
 801b04e:	9b00      	ldr	r3, [sp, #0]
 801b050:	2b00      	cmp	r3, #0
 801b052:	d100      	bne.n	801b056 <__ieee754_log+0xae>
 801b054:	e11c      	b.n	801b290 <__ieee754_log+0x2e8>
 801b056:	0018      	movs	r0, r3
 801b058:	f7e8 f930 	bl	80032bc <__aeabi_i2d>
 801b05c:	4a94      	ldr	r2, [pc, #592]	@ (801b2b0 <__ieee754_log+0x308>)
 801b05e:	4b95      	ldr	r3, [pc, #596]	@ (801b2b4 <__ieee754_log+0x30c>)
 801b060:	0004      	movs	r4, r0
 801b062:	000d      	movs	r5, r1
 801b064:	f7e7 fa68 	bl	8002538 <__aeabi_dmul>
 801b068:	4a93      	ldr	r2, [pc, #588]	@ (801b2b8 <__ieee754_log+0x310>)
 801b06a:	0006      	movs	r6, r0
 801b06c:	000f      	movs	r7, r1
 801b06e:	4b93      	ldr	r3, [pc, #588]	@ (801b2bc <__ieee754_log+0x314>)
 801b070:	0020      	movs	r0, r4
 801b072:	0029      	movs	r1, r5
 801b074:	f7e7 fa60 	bl	8002538 <__aeabi_dmul>
 801b078:	0002      	movs	r2, r0
 801b07a:	000b      	movs	r3, r1
 801b07c:	0030      	movs	r0, r6
 801b07e:	0039      	movs	r1, r7
 801b080:	e7ba      	b.n	801aff8 <__ieee754_log+0x50>
 801b082:	4a8f      	ldr	r2, [pc, #572]	@ (801b2c0 <__ieee754_log+0x318>)
 801b084:	4b8f      	ldr	r3, [pc, #572]	@ (801b2c4 <__ieee754_log+0x31c>)
 801b086:	0030      	movs	r0, r6
 801b088:	0039      	movs	r1, r7
 801b08a:	f7e7 fa55 	bl	8002538 <__aeabi_dmul>
 801b08e:	0002      	movs	r2, r0
 801b090:	000b      	movs	r3, r1
 801b092:	2000      	movs	r0, #0
 801b094:	498c      	ldr	r1, [pc, #560]	@ (801b2c8 <__ieee754_log+0x320>)
 801b096:	f7e7 fd17 	bl	8002ac8 <__aeabi_dsub>
 801b09a:	0032      	movs	r2, r6
 801b09c:	0004      	movs	r4, r0
 801b09e:	000d      	movs	r5, r1
 801b0a0:	003b      	movs	r3, r7
 801b0a2:	0030      	movs	r0, r6
 801b0a4:	0039      	movs	r1, r7
 801b0a6:	f7e7 fa47 	bl	8002538 <__aeabi_dmul>
 801b0aa:	000b      	movs	r3, r1
 801b0ac:	0002      	movs	r2, r0
 801b0ae:	0029      	movs	r1, r5
 801b0b0:	0020      	movs	r0, r4
 801b0b2:	f7e7 fa41 	bl	8002538 <__aeabi_dmul>
 801b0b6:	9b00      	ldr	r3, [sp, #0]
 801b0b8:	9002      	str	r0, [sp, #8]
 801b0ba:	9103      	str	r1, [sp, #12]
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d106      	bne.n	801b0ce <__ieee754_log+0x126>
 801b0c0:	0002      	movs	r2, r0
 801b0c2:	000b      	movs	r3, r1
 801b0c4:	0030      	movs	r0, r6
 801b0c6:	0039      	movs	r1, r7
 801b0c8:	f7e7 fcfe 	bl	8002ac8 <__aeabi_dsub>
 801b0cc:	e77d      	b.n	801afca <__ieee754_log+0x22>
 801b0ce:	9800      	ldr	r0, [sp, #0]
 801b0d0:	f7e8 f8f4 	bl	80032bc <__aeabi_i2d>
 801b0d4:	4a76      	ldr	r2, [pc, #472]	@ (801b2b0 <__ieee754_log+0x308>)
 801b0d6:	4b77      	ldr	r3, [pc, #476]	@ (801b2b4 <__ieee754_log+0x30c>)
 801b0d8:	0004      	movs	r4, r0
 801b0da:	000d      	movs	r5, r1
 801b0dc:	f7e7 fa2c 	bl	8002538 <__aeabi_dmul>
 801b0e0:	4a75      	ldr	r2, [pc, #468]	@ (801b2b8 <__ieee754_log+0x310>)
 801b0e2:	9000      	str	r0, [sp, #0]
 801b0e4:	9101      	str	r1, [sp, #4]
 801b0e6:	4b75      	ldr	r3, [pc, #468]	@ (801b2bc <__ieee754_log+0x314>)
 801b0e8:	0020      	movs	r0, r4
 801b0ea:	0029      	movs	r1, r5
 801b0ec:	f7e7 fa24 	bl	8002538 <__aeabi_dmul>
 801b0f0:	0002      	movs	r2, r0
 801b0f2:	000b      	movs	r3, r1
 801b0f4:	9802      	ldr	r0, [sp, #8]
 801b0f6:	9903      	ldr	r1, [sp, #12]
 801b0f8:	f7e7 fce6 	bl	8002ac8 <__aeabi_dsub>
 801b0fc:	0032      	movs	r2, r6
 801b0fe:	003b      	movs	r3, r7
 801b100:	f7e7 fce2 	bl	8002ac8 <__aeabi_dsub>
 801b104:	0002      	movs	r2, r0
 801b106:	000b      	movs	r3, r1
 801b108:	9800      	ldr	r0, [sp, #0]
 801b10a:	9901      	ldr	r1, [sp, #4]
 801b10c:	e7dc      	b.n	801b0c8 <__ieee754_log+0x120>
 801b10e:	2380      	movs	r3, #128	@ 0x80
 801b110:	05db      	lsls	r3, r3, #23
 801b112:	f7e6 fa69 	bl	80015e8 <__aeabi_dadd>
 801b116:	0002      	movs	r2, r0
 801b118:	000b      	movs	r3, r1
 801b11a:	0030      	movs	r0, r6
 801b11c:	0039      	movs	r1, r7
 801b11e:	f7e6 fdc7 	bl	8001cb0 <__aeabi_ddiv>
 801b122:	9004      	str	r0, [sp, #16]
 801b124:	9105      	str	r1, [sp, #20]
 801b126:	9800      	ldr	r0, [sp, #0]
 801b128:	f7e8 f8c8 	bl	80032bc <__aeabi_i2d>
 801b12c:	9a04      	ldr	r2, [sp, #16]
 801b12e:	9b05      	ldr	r3, [sp, #20]
 801b130:	9006      	str	r0, [sp, #24]
 801b132:	9107      	str	r1, [sp, #28]
 801b134:	0010      	movs	r0, r2
 801b136:	0019      	movs	r1, r3
 801b138:	f7e7 f9fe 	bl	8002538 <__aeabi_dmul>
 801b13c:	4a63      	ldr	r2, [pc, #396]	@ (801b2cc <__ieee754_log+0x324>)
 801b13e:	9b02      	ldr	r3, [sp, #8]
 801b140:	4694      	mov	ip, r2
 801b142:	4463      	add	r3, ip
 801b144:	0002      	movs	r2, r0
 801b146:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b148:	000b      	movs	r3, r1
 801b14a:	9008      	str	r0, [sp, #32]
 801b14c:	9109      	str	r1, [sp, #36]	@ 0x24
 801b14e:	f7e7 f9f3 	bl	8002538 <__aeabi_dmul>
 801b152:	0004      	movs	r4, r0
 801b154:	000d      	movs	r5, r1
 801b156:	4a5e      	ldr	r2, [pc, #376]	@ (801b2d0 <__ieee754_log+0x328>)
 801b158:	4b5e      	ldr	r3, [pc, #376]	@ (801b2d4 <__ieee754_log+0x32c>)
 801b15a:	f7e7 f9ed 	bl	8002538 <__aeabi_dmul>
 801b15e:	4a5e      	ldr	r2, [pc, #376]	@ (801b2d8 <__ieee754_log+0x330>)
 801b160:	4b5e      	ldr	r3, [pc, #376]	@ (801b2dc <__ieee754_log+0x334>)
 801b162:	f7e6 fa41 	bl	80015e8 <__aeabi_dadd>
 801b166:	0022      	movs	r2, r4
 801b168:	002b      	movs	r3, r5
 801b16a:	f7e7 f9e5 	bl	8002538 <__aeabi_dmul>
 801b16e:	4a5c      	ldr	r2, [pc, #368]	@ (801b2e0 <__ieee754_log+0x338>)
 801b170:	4b5c      	ldr	r3, [pc, #368]	@ (801b2e4 <__ieee754_log+0x33c>)
 801b172:	f7e6 fa39 	bl	80015e8 <__aeabi_dadd>
 801b176:	0022      	movs	r2, r4
 801b178:	002b      	movs	r3, r5
 801b17a:	f7e7 f9dd 	bl	8002538 <__aeabi_dmul>
 801b17e:	4a5a      	ldr	r2, [pc, #360]	@ (801b2e8 <__ieee754_log+0x340>)
 801b180:	4b5a      	ldr	r3, [pc, #360]	@ (801b2ec <__ieee754_log+0x344>)
 801b182:	f7e6 fa31 	bl	80015e8 <__aeabi_dadd>
 801b186:	9a08      	ldr	r2, [sp, #32]
 801b188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b18a:	f7e7 f9d5 	bl	8002538 <__aeabi_dmul>
 801b18e:	4a58      	ldr	r2, [pc, #352]	@ (801b2f0 <__ieee754_log+0x348>)
 801b190:	9008      	str	r0, [sp, #32]
 801b192:	9109      	str	r1, [sp, #36]	@ 0x24
 801b194:	4b57      	ldr	r3, [pc, #348]	@ (801b2f4 <__ieee754_log+0x34c>)
 801b196:	0020      	movs	r0, r4
 801b198:	0029      	movs	r1, r5
 801b19a:	f7e7 f9cd 	bl	8002538 <__aeabi_dmul>
 801b19e:	4a56      	ldr	r2, [pc, #344]	@ (801b2f8 <__ieee754_log+0x350>)
 801b1a0:	4b56      	ldr	r3, [pc, #344]	@ (801b2fc <__ieee754_log+0x354>)
 801b1a2:	f7e6 fa21 	bl	80015e8 <__aeabi_dadd>
 801b1a6:	0022      	movs	r2, r4
 801b1a8:	002b      	movs	r3, r5
 801b1aa:	f7e7 f9c5 	bl	8002538 <__aeabi_dmul>
 801b1ae:	4a54      	ldr	r2, [pc, #336]	@ (801b300 <__ieee754_log+0x358>)
 801b1b0:	4b54      	ldr	r3, [pc, #336]	@ (801b304 <__ieee754_log+0x35c>)
 801b1b2:	f7e6 fa19 	bl	80015e8 <__aeabi_dadd>
 801b1b6:	0022      	movs	r2, r4
 801b1b8:	002b      	movs	r3, r5
 801b1ba:	f7e7 f9bd 	bl	8002538 <__aeabi_dmul>
 801b1be:	0002      	movs	r2, r0
 801b1c0:	000b      	movs	r3, r1
 801b1c2:	9808      	ldr	r0, [sp, #32]
 801b1c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b1c6:	f7e6 fa0f 	bl	80015e8 <__aeabi_dadd>
 801b1ca:	9a02      	ldr	r2, [sp, #8]
 801b1cc:	4b4e      	ldr	r3, [pc, #312]	@ (801b308 <__ieee754_log+0x360>)
 801b1ce:	0004      	movs	r4, r0
 801b1d0:	1a9b      	subs	r3, r3, r2
 801b1d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b1d4:	000d      	movs	r5, r1
 801b1d6:	4313      	orrs	r3, r2
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	dd34      	ble.n	801b246 <__ieee754_log+0x29e>
 801b1dc:	2200      	movs	r2, #0
 801b1de:	4b3a      	ldr	r3, [pc, #232]	@ (801b2c8 <__ieee754_log+0x320>)
 801b1e0:	0030      	movs	r0, r6
 801b1e2:	0039      	movs	r1, r7
 801b1e4:	f7e7 f9a8 	bl	8002538 <__aeabi_dmul>
 801b1e8:	0032      	movs	r2, r6
 801b1ea:	003b      	movs	r3, r7
 801b1ec:	f7e7 f9a4 	bl	8002538 <__aeabi_dmul>
 801b1f0:	0002      	movs	r2, r0
 801b1f2:	000b      	movs	r3, r1
 801b1f4:	9002      	str	r0, [sp, #8]
 801b1f6:	9103      	str	r1, [sp, #12]
 801b1f8:	0020      	movs	r0, r4
 801b1fa:	0029      	movs	r1, r5
 801b1fc:	f7e6 f9f4 	bl	80015e8 <__aeabi_dadd>
 801b200:	9a04      	ldr	r2, [sp, #16]
 801b202:	9b05      	ldr	r3, [sp, #20]
 801b204:	f7e7 f998 	bl	8002538 <__aeabi_dmul>
 801b208:	9b00      	ldr	r3, [sp, #0]
 801b20a:	0004      	movs	r4, r0
 801b20c:	000d      	movs	r5, r1
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d106      	bne.n	801b220 <__ieee754_log+0x278>
 801b212:	0002      	movs	r2, r0
 801b214:	000b      	movs	r3, r1
 801b216:	9802      	ldr	r0, [sp, #8]
 801b218:	9903      	ldr	r1, [sp, #12]
 801b21a:	f7e7 fc55 	bl	8002ac8 <__aeabi_dsub>
 801b21e:	e74f      	b.n	801b0c0 <__ieee754_log+0x118>
 801b220:	4a23      	ldr	r2, [pc, #140]	@ (801b2b0 <__ieee754_log+0x308>)
 801b222:	4b24      	ldr	r3, [pc, #144]	@ (801b2b4 <__ieee754_log+0x30c>)
 801b224:	9806      	ldr	r0, [sp, #24]
 801b226:	9907      	ldr	r1, [sp, #28]
 801b228:	f7e7 f986 	bl	8002538 <__aeabi_dmul>
 801b22c:	4a22      	ldr	r2, [pc, #136]	@ (801b2b8 <__ieee754_log+0x310>)
 801b22e:	9000      	str	r0, [sp, #0]
 801b230:	9101      	str	r1, [sp, #4]
 801b232:	9806      	ldr	r0, [sp, #24]
 801b234:	9907      	ldr	r1, [sp, #28]
 801b236:	4b21      	ldr	r3, [pc, #132]	@ (801b2bc <__ieee754_log+0x314>)
 801b238:	f7e7 f97e 	bl	8002538 <__aeabi_dmul>
 801b23c:	0022      	movs	r2, r4
 801b23e:	002b      	movs	r3, r5
 801b240:	f7e6 f9d2 	bl	80015e8 <__aeabi_dadd>
 801b244:	e754      	b.n	801b0f0 <__ieee754_log+0x148>
 801b246:	0002      	movs	r2, r0
 801b248:	000b      	movs	r3, r1
 801b24a:	0030      	movs	r0, r6
 801b24c:	0039      	movs	r1, r7
 801b24e:	f7e7 fc3b 	bl	8002ac8 <__aeabi_dsub>
 801b252:	9a04      	ldr	r2, [sp, #16]
 801b254:	9b05      	ldr	r3, [sp, #20]
 801b256:	f7e7 f96f 	bl	8002538 <__aeabi_dmul>
 801b25a:	9b00      	ldr	r3, [sp, #0]
 801b25c:	0004      	movs	r4, r0
 801b25e:	000d      	movs	r5, r1
 801b260:	2b00      	cmp	r3, #0
 801b262:	d102      	bne.n	801b26a <__ieee754_log+0x2c2>
 801b264:	0002      	movs	r2, r0
 801b266:	000b      	movs	r3, r1
 801b268:	e72c      	b.n	801b0c4 <__ieee754_log+0x11c>
 801b26a:	4a11      	ldr	r2, [pc, #68]	@ (801b2b0 <__ieee754_log+0x308>)
 801b26c:	4b11      	ldr	r3, [pc, #68]	@ (801b2b4 <__ieee754_log+0x30c>)
 801b26e:	9806      	ldr	r0, [sp, #24]
 801b270:	9907      	ldr	r1, [sp, #28]
 801b272:	f7e7 f961 	bl	8002538 <__aeabi_dmul>
 801b276:	4a10      	ldr	r2, [pc, #64]	@ (801b2b8 <__ieee754_log+0x310>)
 801b278:	9000      	str	r0, [sp, #0]
 801b27a:	9101      	str	r1, [sp, #4]
 801b27c:	9806      	ldr	r0, [sp, #24]
 801b27e:	9907      	ldr	r1, [sp, #28]
 801b280:	4b0e      	ldr	r3, [pc, #56]	@ (801b2bc <__ieee754_log+0x314>)
 801b282:	f7e7 f959 	bl	8002538 <__aeabi_dmul>
 801b286:	0002      	movs	r2, r0
 801b288:	000b      	movs	r3, r1
 801b28a:	0020      	movs	r0, r4
 801b28c:	0029      	movs	r1, r5
 801b28e:	e733      	b.n	801b0f8 <__ieee754_log+0x150>
 801b290:	2000      	movs	r0, #0
 801b292:	2100      	movs	r1, #0
 801b294:	e699      	b.n	801afca <__ieee754_log+0x22>
 801b296:	46c0      	nop			@ (mov r8, r8)
 801b298:	c3500000 	.word	0xc3500000
 801b29c:	43500000 	.word	0x43500000
 801b2a0:	7fefffff 	.word	0x7fefffff
 801b2a4:	fffffc01 	.word	0xfffffc01
 801b2a8:	00095f64 	.word	0x00095f64
 801b2ac:	3ff00000 	.word	0x3ff00000
 801b2b0:	fee00000 	.word	0xfee00000
 801b2b4:	3fe62e42 	.word	0x3fe62e42
 801b2b8:	35793c76 	.word	0x35793c76
 801b2bc:	3dea39ef 	.word	0x3dea39ef
 801b2c0:	55555555 	.word	0x55555555
 801b2c4:	3fd55555 	.word	0x3fd55555
 801b2c8:	3fe00000 	.word	0x3fe00000
 801b2cc:	fff9eb86 	.word	0xfff9eb86
 801b2d0:	df3e5244 	.word	0xdf3e5244
 801b2d4:	3fc2f112 	.word	0x3fc2f112
 801b2d8:	96cb03de 	.word	0x96cb03de
 801b2dc:	3fc74664 	.word	0x3fc74664
 801b2e0:	94229359 	.word	0x94229359
 801b2e4:	3fd24924 	.word	0x3fd24924
 801b2e8:	55555593 	.word	0x55555593
 801b2ec:	3fe55555 	.word	0x3fe55555
 801b2f0:	d078c69f 	.word	0xd078c69f
 801b2f4:	3fc39a09 	.word	0x3fc39a09
 801b2f8:	1d8e78af 	.word	0x1d8e78af
 801b2fc:	3fcc71c5 	.word	0x3fcc71c5
 801b300:	9997fa04 	.word	0x9997fa04
 801b304:	3fd99999 	.word	0x3fd99999
 801b308:	0006b851 	.word	0x0006b851

0801b30c <_init>:
 801b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b30e:	46c0      	nop			@ (mov r8, r8)
 801b310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b312:	bc08      	pop	{r3}
 801b314:	469e      	mov	lr, r3
 801b316:	4770      	bx	lr

0801b318 <_fini>:
 801b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b31a:	46c0      	nop			@ (mov r8, r8)
 801b31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b31e:	bc08      	pop	{r3}
 801b320:	469e      	mov	lr, r3
 801b322:	4770      	bx	lr
