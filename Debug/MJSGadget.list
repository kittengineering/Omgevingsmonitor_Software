
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014390  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012cb8  08014450  08014450  00015450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027108  08027108  0002931c  2**0
                  CONTENTS
  4 .ARM          00000008  08027108  08027108  00028108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027110  08027110  0002931c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027110  08027110  00028110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08027114  08027114  00028114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08027118  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003440  2000031c  08027434  0002931c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000375c  08027434  0002975c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002931c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002418f  00000000  00000000  00029344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006203  00000000  00000000  0004d4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  000536d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001490  00000000  00000000  00055300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c121  00000000  00000000  00056790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a889  00000000  00000000  000728b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c82  00000000  00000000  0009d13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00131dbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000770c  00000000  00000000  00131e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013957c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002742  00000000  00000000  001395d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000a8  00000000  00000000  0013bd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000031c 	.word	0x2000031c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08014438 	.word	0x08014438

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000320 	.word	0x20000320
 8000104:	08014438 	.word	0x08014438

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strlen>:
 8000158:	2300      	movs	r3, #0
 800015a:	5cc2      	ldrb	r2, [r0, r3]
 800015c:	3301      	adds	r3, #1
 800015e:	2a00      	cmp	r2, #0
 8000160:	d1fb      	bne.n	800015a <strlen+0x2>
 8000162:	1e58      	subs	r0, r3, #1
 8000164:	4770      	bx	lr
	...

08000168 <__gnu_thumb1_case_uqi>:
 8000168:	b402      	push	{r1}
 800016a:	4671      	mov	r1, lr
 800016c:	0849      	lsrs	r1, r1, #1
 800016e:	0049      	lsls	r1, r1, #1
 8000170:	5c09      	ldrb	r1, [r1, r0]
 8000172:	0049      	lsls	r1, r1, #1
 8000174:	448e      	add	lr, r1
 8000176:	bc02      	pop	{r1}
 8000178:	4770      	bx	lr
 800017a:	46c0      	nop			@ (mov r8, r8)

0800017c <__gnu_thumb1_case_shi>:
 800017c:	b403      	push	{r0, r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0040      	lsls	r0, r0, #1
 8000184:	0049      	lsls	r1, r1, #1
 8000186:	5e09      	ldrsh	r1, [r1, r0]
 8000188:	0049      	lsls	r1, r1, #1
 800018a:	448e      	add	lr, r1
 800018c:	bc03      	pop	{r0, r1}
 800018e:	4770      	bx	lr

08000190 <__udivsi3>:
 8000190:	2200      	movs	r2, #0
 8000192:	0843      	lsrs	r3, r0, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d374      	bcc.n	8000282 <__udivsi3+0xf2>
 8000198:	0903      	lsrs	r3, r0, #4
 800019a:	428b      	cmp	r3, r1
 800019c:	d35f      	bcc.n	800025e <__udivsi3+0xce>
 800019e:	0a03      	lsrs	r3, r0, #8
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d344      	bcc.n	800022e <__udivsi3+0x9e>
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d328      	bcc.n	80001fc <__udivsi3+0x6c>
 80001aa:	0c03      	lsrs	r3, r0, #16
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d30d      	bcc.n	80001cc <__udivsi3+0x3c>
 80001b0:	22ff      	movs	r2, #255	@ 0xff
 80001b2:	0209      	lsls	r1, r1, #8
 80001b4:	ba12      	rev	r2, r2
 80001b6:	0c03      	lsrs	r3, r0, #16
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d302      	bcc.n	80001c2 <__udivsi3+0x32>
 80001bc:	1212      	asrs	r2, r2, #8
 80001be:	0209      	lsls	r1, r1, #8
 80001c0:	d065      	beq.n	800028e <__udivsi3+0xfe>
 80001c2:	0b03      	lsrs	r3, r0, #12
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d319      	bcc.n	80001fc <__udivsi3+0x6c>
 80001c8:	e000      	b.n	80001cc <__udivsi3+0x3c>
 80001ca:	0a09      	lsrs	r1, r1, #8
 80001cc:	0bc3      	lsrs	r3, r0, #15
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x46>
 80001d2:	03cb      	lsls	r3, r1, #15
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0b83      	lsrs	r3, r0, #14
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x52>
 80001de:	038b      	lsls	r3, r1, #14
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0b43      	lsrs	r3, r0, #13
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x5e>
 80001ea:	034b      	lsls	r3, r1, #13
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0b03      	lsrs	r3, r0, #12
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x6a>
 80001f6:	030b      	lsls	r3, r1, #12
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0ac3      	lsrs	r3, r0, #11
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x76>
 8000202:	02cb      	lsls	r3, r1, #11
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0a83      	lsrs	r3, r0, #10
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x82>
 800020e:	028b      	lsls	r3, r1, #10
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	0a43      	lsrs	r3, r0, #9
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x8e>
 800021a:	024b      	lsls	r3, r1, #9
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0a03      	lsrs	r3, r0, #8
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x9a>
 8000226:	020b      	lsls	r3, r1, #8
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	d2cd      	bcs.n	80001ca <__udivsi3+0x3a>
 800022e:	09c3      	lsrs	r3, r0, #7
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xa8>
 8000234:	01cb      	lsls	r3, r1, #7
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0983      	lsrs	r3, r0, #6
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xb4>
 8000240:	018b      	lsls	r3, r1, #6
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0943      	lsrs	r3, r0, #5
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xc0>
 800024c:	014b      	lsls	r3, r1, #5
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xcc>
 8000258:	010b      	lsls	r3, r1, #4
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	08c3      	lsrs	r3, r0, #3
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xd8>
 8000264:	00cb      	lsls	r3, r1, #3
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0883      	lsrs	r3, r0, #2
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__udivsi3+0xe4>
 8000270:	008b      	lsls	r3, r1, #2
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0843      	lsrs	r3, r0, #1
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xf0>
 800027c:	004b      	lsls	r3, r1, #1
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	1a41      	subs	r1, r0, r1
 8000284:	d200      	bcs.n	8000288 <__udivsi3+0xf8>
 8000286:	4601      	mov	r1, r0
 8000288:	4152      	adcs	r2, r2
 800028a:	4610      	mov	r0, r2
 800028c:	4770      	bx	lr
 800028e:	e7ff      	b.n	8000290 <__udivsi3+0x100>
 8000290:	b501      	push	{r0, lr}
 8000292:	2000      	movs	r0, #0
 8000294:	f000 f8f0 	bl	8000478 <__aeabi_idiv0>
 8000298:	bd02      	pop	{r1, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_uidivmod>:
 800029c:	2900      	cmp	r1, #0
 800029e:	d0f7      	beq.n	8000290 <__udivsi3+0x100>
 80002a0:	e776      	b.n	8000190 <__udivsi3>
 80002a2:	4770      	bx	lr

080002a4 <__divsi3>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	430b      	orrs	r3, r1
 80002a8:	d47f      	bmi.n	80003aa <__divsi3+0x106>
 80002aa:	2200      	movs	r2, #0
 80002ac:	0843      	lsrs	r3, r0, #1
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d374      	bcc.n	800039c <__divsi3+0xf8>
 80002b2:	0903      	lsrs	r3, r0, #4
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d35f      	bcc.n	8000378 <__divsi3+0xd4>
 80002b8:	0a03      	lsrs	r3, r0, #8
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d344      	bcc.n	8000348 <__divsi3+0xa4>
 80002be:	0b03      	lsrs	r3, r0, #12
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d328      	bcc.n	8000316 <__divsi3+0x72>
 80002c4:	0c03      	lsrs	r3, r0, #16
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d30d      	bcc.n	80002e6 <__divsi3+0x42>
 80002ca:	22ff      	movs	r2, #255	@ 0xff
 80002cc:	0209      	lsls	r1, r1, #8
 80002ce:	ba12      	rev	r2, r2
 80002d0:	0c03      	lsrs	r3, r0, #16
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__divsi3+0x38>
 80002d6:	1212      	asrs	r2, r2, #8
 80002d8:	0209      	lsls	r1, r1, #8
 80002da:	d065      	beq.n	80003a8 <__divsi3+0x104>
 80002dc:	0b03      	lsrs	r3, r0, #12
 80002de:	428b      	cmp	r3, r1
 80002e0:	d319      	bcc.n	8000316 <__divsi3+0x72>
 80002e2:	e000      	b.n	80002e6 <__divsi3+0x42>
 80002e4:	0a09      	lsrs	r1, r1, #8
 80002e6:	0bc3      	lsrs	r3, r0, #15
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x4c>
 80002ec:	03cb      	lsls	r3, r1, #15
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0b83      	lsrs	r3, r0, #14
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x58>
 80002f8:	038b      	lsls	r3, r1, #14
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0b43      	lsrs	r3, r0, #13
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0x64>
 8000304:	034b      	lsls	r3, r1, #13
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0b03      	lsrs	r3, r0, #12
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__divsi3+0x70>
 8000310:	030b      	lsls	r3, r1, #12
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	0ac3      	lsrs	r3, r0, #11
 8000318:	428b      	cmp	r3, r1
 800031a:	d301      	bcc.n	8000320 <__divsi3+0x7c>
 800031c:	02cb      	lsls	r3, r1, #11
 800031e:	1ac0      	subs	r0, r0, r3
 8000320:	4152      	adcs	r2, r2
 8000322:	0a83      	lsrs	r3, r0, #10
 8000324:	428b      	cmp	r3, r1
 8000326:	d301      	bcc.n	800032c <__divsi3+0x88>
 8000328:	028b      	lsls	r3, r1, #10
 800032a:	1ac0      	subs	r0, r0, r3
 800032c:	4152      	adcs	r2, r2
 800032e:	0a43      	lsrs	r3, r0, #9
 8000330:	428b      	cmp	r3, r1
 8000332:	d301      	bcc.n	8000338 <__divsi3+0x94>
 8000334:	024b      	lsls	r3, r1, #9
 8000336:	1ac0      	subs	r0, r0, r3
 8000338:	4152      	adcs	r2, r2
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d301      	bcc.n	8000344 <__divsi3+0xa0>
 8000340:	020b      	lsls	r3, r1, #8
 8000342:	1ac0      	subs	r0, r0, r3
 8000344:	4152      	adcs	r2, r2
 8000346:	d2cd      	bcs.n	80002e4 <__divsi3+0x40>
 8000348:	09c3      	lsrs	r3, r0, #7
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xae>
 800034e:	01cb      	lsls	r3, r1, #7
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0983      	lsrs	r3, r0, #6
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xba>
 800035a:	018b      	lsls	r3, r1, #6
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	0943      	lsrs	r3, r0, #5
 8000362:	428b      	cmp	r3, r1
 8000364:	d301      	bcc.n	800036a <__divsi3+0xc6>
 8000366:	014b      	lsls	r3, r1, #5
 8000368:	1ac0      	subs	r0, r0, r3
 800036a:	4152      	adcs	r2, r2
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d301      	bcc.n	8000376 <__divsi3+0xd2>
 8000372:	010b      	lsls	r3, r1, #4
 8000374:	1ac0      	subs	r0, r0, r3
 8000376:	4152      	adcs	r2, r2
 8000378:	08c3      	lsrs	r3, r0, #3
 800037a:	428b      	cmp	r3, r1
 800037c:	d301      	bcc.n	8000382 <__divsi3+0xde>
 800037e:	00cb      	lsls	r3, r1, #3
 8000380:	1ac0      	subs	r0, r0, r3
 8000382:	4152      	adcs	r2, r2
 8000384:	0883      	lsrs	r3, r0, #2
 8000386:	428b      	cmp	r3, r1
 8000388:	d301      	bcc.n	800038e <__divsi3+0xea>
 800038a:	008b      	lsls	r3, r1, #2
 800038c:	1ac0      	subs	r0, r0, r3
 800038e:	4152      	adcs	r2, r2
 8000390:	0843      	lsrs	r3, r0, #1
 8000392:	428b      	cmp	r3, r1
 8000394:	d301      	bcc.n	800039a <__divsi3+0xf6>
 8000396:	004b      	lsls	r3, r1, #1
 8000398:	1ac0      	subs	r0, r0, r3
 800039a:	4152      	adcs	r2, r2
 800039c:	1a41      	subs	r1, r0, r1
 800039e:	d200      	bcs.n	80003a2 <__divsi3+0xfe>
 80003a0:	4601      	mov	r1, r0
 80003a2:	4152      	adcs	r2, r2
 80003a4:	4610      	mov	r0, r2
 80003a6:	4770      	bx	lr
 80003a8:	e05d      	b.n	8000466 <__divsi3+0x1c2>
 80003aa:	0fca      	lsrs	r2, r1, #31
 80003ac:	d000      	beq.n	80003b0 <__divsi3+0x10c>
 80003ae:	4249      	negs	r1, r1
 80003b0:	1003      	asrs	r3, r0, #32
 80003b2:	d300      	bcc.n	80003b6 <__divsi3+0x112>
 80003b4:	4240      	negs	r0, r0
 80003b6:	4053      	eors	r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	469c      	mov	ip, r3
 80003bc:	0903      	lsrs	r3, r0, #4
 80003be:	428b      	cmp	r3, r1
 80003c0:	d32d      	bcc.n	800041e <__divsi3+0x17a>
 80003c2:	0a03      	lsrs	r3, r0, #8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d312      	bcc.n	80003ee <__divsi3+0x14a>
 80003c8:	22fc      	movs	r2, #252	@ 0xfc
 80003ca:	0189      	lsls	r1, r1, #6
 80003cc:	ba12      	rev	r2, r2
 80003ce:	0a03      	lsrs	r3, r0, #8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d30c      	bcc.n	80003ee <__divsi3+0x14a>
 80003d4:	0189      	lsls	r1, r1, #6
 80003d6:	1192      	asrs	r2, r2, #6
 80003d8:	428b      	cmp	r3, r1
 80003da:	d308      	bcc.n	80003ee <__divsi3+0x14a>
 80003dc:	0189      	lsls	r1, r1, #6
 80003de:	1192      	asrs	r2, r2, #6
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d304      	bcc.n	80003ee <__divsi3+0x14a>
 80003e4:	0189      	lsls	r1, r1, #6
 80003e6:	d03a      	beq.n	800045e <__divsi3+0x1ba>
 80003e8:	1192      	asrs	r2, r2, #6
 80003ea:	e000      	b.n	80003ee <__divsi3+0x14a>
 80003ec:	0989      	lsrs	r1, r1, #6
 80003ee:	09c3      	lsrs	r3, r0, #7
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x154>
 80003f4:	01cb      	lsls	r3, r1, #7
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	0983      	lsrs	r3, r0, #6
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x160>
 8000400:	018b      	lsls	r3, r1, #6
 8000402:	1ac0      	subs	r0, r0, r3
 8000404:	4152      	adcs	r2, r2
 8000406:	0943      	lsrs	r3, r0, #5
 8000408:	428b      	cmp	r3, r1
 800040a:	d301      	bcc.n	8000410 <__divsi3+0x16c>
 800040c:	014b      	lsls	r3, r1, #5
 800040e:	1ac0      	subs	r0, r0, r3
 8000410:	4152      	adcs	r2, r2
 8000412:	0903      	lsrs	r3, r0, #4
 8000414:	428b      	cmp	r3, r1
 8000416:	d301      	bcc.n	800041c <__divsi3+0x178>
 8000418:	010b      	lsls	r3, r1, #4
 800041a:	1ac0      	subs	r0, r0, r3
 800041c:	4152      	adcs	r2, r2
 800041e:	08c3      	lsrs	r3, r0, #3
 8000420:	428b      	cmp	r3, r1
 8000422:	d301      	bcc.n	8000428 <__divsi3+0x184>
 8000424:	00cb      	lsls	r3, r1, #3
 8000426:	1ac0      	subs	r0, r0, r3
 8000428:	4152      	adcs	r2, r2
 800042a:	0883      	lsrs	r3, r0, #2
 800042c:	428b      	cmp	r3, r1
 800042e:	d301      	bcc.n	8000434 <__divsi3+0x190>
 8000430:	008b      	lsls	r3, r1, #2
 8000432:	1ac0      	subs	r0, r0, r3
 8000434:	4152      	adcs	r2, r2
 8000436:	d2d9      	bcs.n	80003ec <__divsi3+0x148>
 8000438:	0843      	lsrs	r3, r0, #1
 800043a:	428b      	cmp	r3, r1
 800043c:	d301      	bcc.n	8000442 <__divsi3+0x19e>
 800043e:	004b      	lsls	r3, r1, #1
 8000440:	1ac0      	subs	r0, r0, r3
 8000442:	4152      	adcs	r2, r2
 8000444:	1a41      	subs	r1, r0, r1
 8000446:	d200      	bcs.n	800044a <__divsi3+0x1a6>
 8000448:	4601      	mov	r1, r0
 800044a:	4663      	mov	r3, ip
 800044c:	4152      	adcs	r2, r2
 800044e:	105b      	asrs	r3, r3, #1
 8000450:	4610      	mov	r0, r2
 8000452:	d301      	bcc.n	8000458 <__divsi3+0x1b4>
 8000454:	4240      	negs	r0, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d500      	bpl.n	800045c <__divsi3+0x1b8>
 800045a:	4249      	negs	r1, r1
 800045c:	4770      	bx	lr
 800045e:	4663      	mov	r3, ip
 8000460:	105b      	asrs	r3, r3, #1
 8000462:	d300      	bcc.n	8000466 <__divsi3+0x1c2>
 8000464:	4240      	negs	r0, r0
 8000466:	b501      	push	{r0, lr}
 8000468:	2000      	movs	r0, #0
 800046a:	f000 f805 	bl	8000478 <__aeabi_idiv0>
 800046e:	bd02      	pop	{r1, pc}

08000470 <__aeabi_idivmod>:
 8000470:	2900      	cmp	r1, #0
 8000472:	d0f8      	beq.n	8000466 <__divsi3+0x1c2>
 8000474:	e716      	b.n	80002a4 <__divsi3>
 8000476:	4770      	bx	lr

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_cdrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	0010      	movs	r0, r2
 8000480:	4662      	mov	r2, ip
 8000482:	468c      	mov	ip, r1
 8000484:	0019      	movs	r1, r3
 8000486:	4663      	mov	r3, ip
 8000488:	e000      	b.n	800048c <__aeabi_cdcmpeq>
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_cdcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f002 f827 	bl	80024e0 <__ledf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cdcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_dcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f001 ff67 	bl	8002370 <__eqdf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_dcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f819 	bl	80024e0 <__ledf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_dcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f80f 	bl	80024e0 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_dcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f001 ff91 	bl	80023f8 <__gedf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_dcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ff87 	bl	80023f8 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_dcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_cfrcmple>:
 80004f8:	4684      	mov	ip, r0
 80004fa:	0008      	movs	r0, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	e7ff      	b.n	8000500 <__aeabi_cfcmpeq>

08000500 <__aeabi_cfcmpeq>:
 8000500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000502:	f000 fcc3 	bl	8000e8c <__lesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	d401      	bmi.n	800050e <__aeabi_cfcmpeq+0xe>
 800050a:	2100      	movs	r1, #0
 800050c:	42c8      	cmn	r0, r1
 800050e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000510 <__aeabi_fcmpeq>:
 8000510:	b510      	push	{r4, lr}
 8000512:	f000 fc43 	bl	8000d9c <__eqsf2>
 8000516:	4240      	negs	r0, r0
 8000518:	3001      	adds	r0, #1
 800051a:	bd10      	pop	{r4, pc}

0800051c <__aeabi_fcmplt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fcb5 	bl	8000e8c <__lesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	db01      	blt.n	800052a <__aeabi_fcmplt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fcmple>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fcab 	bl	8000e8c <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	dd01      	ble.n	800053e <__aeabi_fcmple+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmpgt>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fc51 	bl	8000dec <__gesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dc01      	bgt.n	8000552 <__aeabi_fcmpgt+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpge>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc47 	bl	8000dec <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	da01      	bge.n	8000566 <__aeabi_fcmpge+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__clzsi2>:
 800056c:	211c      	movs	r1, #28
 800056e:	2301      	movs	r3, #1
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	4298      	cmp	r0, r3
 8000574:	d301      	bcc.n	800057a <__clzsi2+0xe>
 8000576:	0c00      	lsrs	r0, r0, #16
 8000578:	3910      	subs	r1, #16
 800057a:	0a1b      	lsrs	r3, r3, #8
 800057c:	4298      	cmp	r0, r3
 800057e:	d301      	bcc.n	8000584 <__clzsi2+0x18>
 8000580:	0a00      	lsrs	r0, r0, #8
 8000582:	3908      	subs	r1, #8
 8000584:	091b      	lsrs	r3, r3, #4
 8000586:	4298      	cmp	r0, r3
 8000588:	d301      	bcc.n	800058e <__clzsi2+0x22>
 800058a:	0900      	lsrs	r0, r0, #4
 800058c:	3904      	subs	r1, #4
 800058e:	a202      	add	r2, pc, #8	@ (adr r2, 8000598 <__clzsi2+0x2c>)
 8000590:	5c10      	ldrb	r0, [r2, r0]
 8000592:	1840      	adds	r0, r0, r1
 8000594:	4770      	bx	lr
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	02020304 	.word	0x02020304
 800059c:	01010101 	.word	0x01010101
	...

080005a8 <__aeabi_uldivmod>:
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d111      	bne.n	80005d0 <__aeabi_uldivmod+0x28>
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	d10f      	bne.n	80005d0 <__aeabi_uldivmod+0x28>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_uldivmod+0xe>
 80005b4:	2800      	cmp	r0, #0
 80005b6:	d002      	beq.n	80005be <__aeabi_uldivmod+0x16>
 80005b8:	2100      	movs	r1, #0
 80005ba:	43c9      	mvns	r1, r1
 80005bc:	0008      	movs	r0, r1
 80005be:	b407      	push	{r0, r1, r2}
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <__aeabi_uldivmod+0x24>)
 80005c2:	a102      	add	r1, pc, #8	@ (adr r1, 80005cc <__aeabi_uldivmod+0x24>)
 80005c4:	1840      	adds	r0, r0, r1
 80005c6:	9002      	str	r0, [sp, #8]
 80005c8:	bd03      	pop	{r0, r1, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	fffffead 	.word	0xfffffead
 80005d0:	b403      	push	{r0, r1}
 80005d2:	4668      	mov	r0, sp
 80005d4:	b501      	push	{r0, lr}
 80005d6:	9802      	ldr	r0, [sp, #8]
 80005d8:	f000 f86a 	bl	80006b0 <__udivmoddi4>
 80005dc:	9b01      	ldr	r3, [sp, #4]
 80005de:	469e      	mov	lr, r3
 80005e0:	b002      	add	sp, #8
 80005e2:	bc0c      	pop	{r2, r3}
 80005e4:	4770      	bx	lr
 80005e6:	46c0      	nop			@ (mov r8, r8)

080005e8 <__aeabi_lmul>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	46ce      	mov	lr, r9
 80005ec:	4699      	mov	r9, r3
 80005ee:	0c03      	lsrs	r3, r0, #16
 80005f0:	469c      	mov	ip, r3
 80005f2:	0413      	lsls	r3, r2, #16
 80005f4:	4647      	mov	r7, r8
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	001d      	movs	r5, r3
 80005fa:	000e      	movs	r6, r1
 80005fc:	4661      	mov	r1, ip
 80005fe:	0404      	lsls	r4, r0, #16
 8000600:	0c24      	lsrs	r4, r4, #16
 8000602:	b580      	push	{r7, lr}
 8000604:	0007      	movs	r7, r0
 8000606:	0c10      	lsrs	r0, r2, #16
 8000608:	434b      	muls	r3, r1
 800060a:	4365      	muls	r5, r4
 800060c:	4341      	muls	r1, r0
 800060e:	4360      	muls	r0, r4
 8000610:	0c2c      	lsrs	r4, r5, #16
 8000612:	18c0      	adds	r0, r0, r3
 8000614:	1824      	adds	r4, r4, r0
 8000616:	468c      	mov	ip, r1
 8000618:	42a3      	cmp	r3, r4
 800061a:	d903      	bls.n	8000624 <__aeabi_lmul+0x3c>
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	025b      	lsls	r3, r3, #9
 8000620:	4698      	mov	r8, r3
 8000622:	44c4      	add	ip, r8
 8000624:	4649      	mov	r1, r9
 8000626:	4379      	muls	r1, r7
 8000628:	4356      	muls	r6, r2
 800062a:	0c23      	lsrs	r3, r4, #16
 800062c:	042d      	lsls	r5, r5, #16
 800062e:	0c2d      	lsrs	r5, r5, #16
 8000630:	1989      	adds	r1, r1, r6
 8000632:	4463      	add	r3, ip
 8000634:	0424      	lsls	r4, r4, #16
 8000636:	1960      	adds	r0, r4, r5
 8000638:	18c9      	adds	r1, r1, r3
 800063a:	bcc0      	pop	{r6, r7}
 800063c:	46b9      	mov	r9, r7
 800063e:	46b0      	mov	r8, r6
 8000640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)

08000644 <__aeabi_f2uiz>:
 8000644:	219e      	movs	r1, #158	@ 0x9e
 8000646:	b510      	push	{r4, lr}
 8000648:	05c9      	lsls	r1, r1, #23
 800064a:	1c04      	adds	r4, r0, #0
 800064c:	f7ff ff84 	bl	8000558 <__aeabi_fcmpge>
 8000650:	2800      	cmp	r0, #0
 8000652:	d103      	bne.n	800065c <__aeabi_f2uiz+0x18>
 8000654:	1c20      	adds	r0, r4, #0
 8000656:	f000 ff5f 	bl	8001518 <__aeabi_f2iz>
 800065a:	bd10      	pop	{r4, pc}
 800065c:	219e      	movs	r1, #158	@ 0x9e
 800065e:	1c20      	adds	r0, r4, #0
 8000660:	05c9      	lsls	r1, r1, #23
 8000662:	f000 fd9f 	bl	80011a4 <__aeabi_fsub>
 8000666:	f000 ff57 	bl	8001518 <__aeabi_f2iz>
 800066a:	2380      	movs	r3, #128	@ 0x80
 800066c:	061b      	lsls	r3, r3, #24
 800066e:	469c      	mov	ip, r3
 8000670:	4460      	add	r0, ip
 8000672:	e7f2      	b.n	800065a <__aeabi_f2uiz+0x16>

08000674 <__aeabi_d2uiz>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	2200      	movs	r2, #0
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <__aeabi_d2uiz+0x38>)
 800067a:	0004      	movs	r4, r0
 800067c:	000d      	movs	r5, r1
 800067e:	f7ff ff31 	bl	80004e4 <__aeabi_dcmpge>
 8000682:	2800      	cmp	r0, #0
 8000684:	d104      	bne.n	8000690 <__aeabi_d2uiz+0x1c>
 8000686:	0020      	movs	r0, r4
 8000688:	0029      	movs	r1, r5
 800068a:	f002 fe21 	bl	80032d0 <__aeabi_d2iz>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <__aeabi_d2uiz+0x38>)
 8000692:	2200      	movs	r2, #0
 8000694:	0020      	movs	r0, r4
 8000696:	0029      	movs	r1, r5
 8000698:	f002 fa5c 	bl	8002b54 <__aeabi_dsub>
 800069c:	f002 fe18 	bl	80032d0 <__aeabi_d2iz>
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	061b      	lsls	r3, r3, #24
 80006a4:	469c      	mov	ip, r3
 80006a6:	4460      	add	r0, ip
 80006a8:	e7f1      	b.n	800068e <__aeabi_d2uiz+0x1a>
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	41e00000 	.word	0x41e00000

080006b0 <__udivmoddi4>:
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	4657      	mov	r7, sl
 80006b4:	464e      	mov	r6, r9
 80006b6:	4645      	mov	r5, r8
 80006b8:	46de      	mov	lr, fp
 80006ba:	b5e0      	push	{r5, r6, r7, lr}
 80006bc:	0004      	movs	r4, r0
 80006be:	000d      	movs	r5, r1
 80006c0:	4692      	mov	sl, r2
 80006c2:	4699      	mov	r9, r3
 80006c4:	b083      	sub	sp, #12
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d830      	bhi.n	800072c <__udivmoddi4+0x7c>
 80006ca:	d02d      	beq.n	8000728 <__udivmoddi4+0x78>
 80006cc:	4649      	mov	r1, r9
 80006ce:	4650      	mov	r0, sl
 80006d0:	f002 ff58 	bl	8003584 <__clzdi2>
 80006d4:	0029      	movs	r1, r5
 80006d6:	0006      	movs	r6, r0
 80006d8:	0020      	movs	r0, r4
 80006da:	f002 ff53 	bl	8003584 <__clzdi2>
 80006de:	1a33      	subs	r3, r6, r0
 80006e0:	4698      	mov	r8, r3
 80006e2:	3b20      	subs	r3, #32
 80006e4:	d434      	bmi.n	8000750 <__udivmoddi4+0xa0>
 80006e6:	469b      	mov	fp, r3
 80006e8:	4653      	mov	r3, sl
 80006ea:	465a      	mov	r2, fp
 80006ec:	4093      	lsls	r3, r2
 80006ee:	4642      	mov	r2, r8
 80006f0:	001f      	movs	r7, r3
 80006f2:	4653      	mov	r3, sl
 80006f4:	4093      	lsls	r3, r2
 80006f6:	001e      	movs	r6, r3
 80006f8:	42af      	cmp	r7, r5
 80006fa:	d83b      	bhi.n	8000774 <__udivmoddi4+0xc4>
 80006fc:	42af      	cmp	r7, r5
 80006fe:	d100      	bne.n	8000702 <__udivmoddi4+0x52>
 8000700:	e079      	b.n	80007f6 <__udivmoddi4+0x146>
 8000702:	465b      	mov	r3, fp
 8000704:	1ba4      	subs	r4, r4, r6
 8000706:	41bd      	sbcs	r5, r7
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <__udivmoddi4+0x5e>
 800070c:	e076      	b.n	80007fc <__udivmoddi4+0x14c>
 800070e:	2200      	movs	r2, #0
 8000710:	2300      	movs	r3, #0
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2301      	movs	r3, #1
 8000718:	465a      	mov	r2, fp
 800071a:	4093      	lsls	r3, r2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2301      	movs	r3, #1
 8000720:	4642      	mov	r2, r8
 8000722:	4093      	lsls	r3, r2
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	e029      	b.n	800077c <__udivmoddi4+0xcc>
 8000728:	4282      	cmp	r2, r0
 800072a:	d9cf      	bls.n	80006cc <__udivmoddi4+0x1c>
 800072c:	2200      	movs	r2, #0
 800072e:	2300      	movs	r3, #0
 8000730:	9200      	str	r2, [sp, #0]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <__udivmoddi4+0x8e>
 800073a:	601c      	str	r4, [r3, #0]
 800073c:	605d      	str	r5, [r3, #4]
 800073e:	9800      	ldr	r0, [sp, #0]
 8000740:	9901      	ldr	r1, [sp, #4]
 8000742:	b003      	add	sp, #12
 8000744:	bcf0      	pop	{r4, r5, r6, r7}
 8000746:	46bb      	mov	fp, r7
 8000748:	46b2      	mov	sl, r6
 800074a:	46a9      	mov	r9, r5
 800074c:	46a0      	mov	r8, r4
 800074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000750:	4642      	mov	r2, r8
 8000752:	469b      	mov	fp, r3
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	4652      	mov	r2, sl
 800075a:	40da      	lsrs	r2, r3
 800075c:	4641      	mov	r1, r8
 800075e:	0013      	movs	r3, r2
 8000760:	464a      	mov	r2, r9
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	4642      	mov	r2, r8
 8000768:	431f      	orrs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d9c3      	bls.n	80006fc <__udivmoddi4+0x4c>
 8000774:	2200      	movs	r2, #0
 8000776:	2300      	movs	r3, #0
 8000778:	9200      	str	r2, [sp, #0]
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4643      	mov	r3, r8
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0d8      	beq.n	8000734 <__udivmoddi4+0x84>
 8000782:	07fb      	lsls	r3, r7, #31
 8000784:	0872      	lsrs	r2, r6, #1
 8000786:	431a      	orrs	r2, r3
 8000788:	4646      	mov	r6, r8
 800078a:	087b      	lsrs	r3, r7, #1
 800078c:	e00e      	b.n	80007ac <__udivmoddi4+0xfc>
 800078e:	42ab      	cmp	r3, r5
 8000790:	d101      	bne.n	8000796 <__udivmoddi4+0xe6>
 8000792:	42a2      	cmp	r2, r4
 8000794:	d80c      	bhi.n	80007b0 <__udivmoddi4+0x100>
 8000796:	1aa4      	subs	r4, r4, r2
 8000798:	419d      	sbcs	r5, r3
 800079a:	2001      	movs	r0, #1
 800079c:	1924      	adds	r4, r4, r4
 800079e:	416d      	adcs	r5, r5
 80007a0:	2100      	movs	r1, #0
 80007a2:	3e01      	subs	r6, #1
 80007a4:	1824      	adds	r4, r4, r0
 80007a6:	414d      	adcs	r5, r1
 80007a8:	2e00      	cmp	r6, #0
 80007aa:	d006      	beq.n	80007ba <__udivmoddi4+0x10a>
 80007ac:	42ab      	cmp	r3, r5
 80007ae:	d9ee      	bls.n	800078e <__udivmoddi4+0xde>
 80007b0:	3e01      	subs	r6, #1
 80007b2:	1924      	adds	r4, r4, r4
 80007b4:	416d      	adcs	r5, r5
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d1f8      	bne.n	80007ac <__udivmoddi4+0xfc>
 80007ba:	9800      	ldr	r0, [sp, #0]
 80007bc:	9901      	ldr	r1, [sp, #4]
 80007be:	465b      	mov	r3, fp
 80007c0:	1900      	adds	r0, r0, r4
 80007c2:	4169      	adcs	r1, r5
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db24      	blt.n	8000812 <__udivmoddi4+0x162>
 80007c8:	002b      	movs	r3, r5
 80007ca:	465a      	mov	r2, fp
 80007cc:	4644      	mov	r4, r8
 80007ce:	40d3      	lsrs	r3, r2
 80007d0:	002a      	movs	r2, r5
 80007d2:	40e2      	lsrs	r2, r4
 80007d4:	001c      	movs	r4, r3
 80007d6:	465b      	mov	r3, fp
 80007d8:	0015      	movs	r5, r2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db2a      	blt.n	8000834 <__udivmoddi4+0x184>
 80007de:	0026      	movs	r6, r4
 80007e0:	409e      	lsls	r6, r3
 80007e2:	0033      	movs	r3, r6
 80007e4:	0026      	movs	r6, r4
 80007e6:	4647      	mov	r7, r8
 80007e8:	40be      	lsls	r6, r7
 80007ea:	0032      	movs	r2, r6
 80007ec:	1a80      	subs	r0, r0, r2
 80007ee:	4199      	sbcs	r1, r3
 80007f0:	9000      	str	r0, [sp, #0]
 80007f2:	9101      	str	r1, [sp, #4]
 80007f4:	e79e      	b.n	8000734 <__udivmoddi4+0x84>
 80007f6:	42a3      	cmp	r3, r4
 80007f8:	d8bc      	bhi.n	8000774 <__udivmoddi4+0xc4>
 80007fa:	e782      	b.n	8000702 <__udivmoddi4+0x52>
 80007fc:	4642      	mov	r2, r8
 80007fe:	2320      	movs	r3, #32
 8000800:	2100      	movs	r1, #0
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	2200      	movs	r2, #0
 8000806:	9100      	str	r1, [sp, #0]
 8000808:	9201      	str	r2, [sp, #4]
 800080a:	2201      	movs	r2, #1
 800080c:	40da      	lsrs	r2, r3
 800080e:	9201      	str	r2, [sp, #4]
 8000810:	e785      	b.n	800071e <__udivmoddi4+0x6e>
 8000812:	4642      	mov	r2, r8
 8000814:	2320      	movs	r3, #32
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	002a      	movs	r2, r5
 800081a:	4646      	mov	r6, r8
 800081c:	409a      	lsls	r2, r3
 800081e:	0023      	movs	r3, r4
 8000820:	40f3      	lsrs	r3, r6
 8000822:	4644      	mov	r4, r8
 8000824:	4313      	orrs	r3, r2
 8000826:	002a      	movs	r2, r5
 8000828:	40e2      	lsrs	r2, r4
 800082a:	001c      	movs	r4, r3
 800082c:	465b      	mov	r3, fp
 800082e:	0015      	movs	r5, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	dad4      	bge.n	80007de <__udivmoddi4+0x12e>
 8000834:	4642      	mov	r2, r8
 8000836:	002f      	movs	r7, r5
 8000838:	2320      	movs	r3, #32
 800083a:	0026      	movs	r6, r4
 800083c:	4097      	lsls	r7, r2
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	40de      	lsrs	r6, r3
 8000842:	003b      	movs	r3, r7
 8000844:	4333      	orrs	r3, r6
 8000846:	e7cd      	b.n	80007e4 <__udivmoddi4+0x134>

08000848 <__aeabi_fadd>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	46ce      	mov	lr, r9
 800084c:	4647      	mov	r7, r8
 800084e:	0243      	lsls	r3, r0, #9
 8000850:	0a5a      	lsrs	r2, r3, #9
 8000852:	024e      	lsls	r6, r1, #9
 8000854:	0045      	lsls	r5, r0, #1
 8000856:	0fc4      	lsrs	r4, r0, #31
 8000858:	0048      	lsls	r0, r1, #1
 800085a:	4691      	mov	r9, r2
 800085c:	0e2d      	lsrs	r5, r5, #24
 800085e:	0a72      	lsrs	r2, r6, #9
 8000860:	0e00      	lsrs	r0, r0, #24
 8000862:	4694      	mov	ip, r2
 8000864:	b580      	push	{r7, lr}
 8000866:	099b      	lsrs	r3, r3, #6
 8000868:	0fc9      	lsrs	r1, r1, #31
 800086a:	09b6      	lsrs	r6, r6, #6
 800086c:	1a2a      	subs	r2, r5, r0
 800086e:	428c      	cmp	r4, r1
 8000870:	d021      	beq.n	80008b6 <__aeabi_fadd+0x6e>
 8000872:	2a00      	cmp	r2, #0
 8000874:	dd0d      	ble.n	8000892 <__aeabi_fadd+0x4a>
 8000876:	2800      	cmp	r0, #0
 8000878:	d12d      	bne.n	80008d6 <__aeabi_fadd+0x8e>
 800087a:	2e00      	cmp	r6, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_fadd+0x38>
 800087e:	e08d      	b.n	800099c <__aeabi_fadd+0x154>
 8000880:	1e51      	subs	r1, r2, #1
 8000882:	2a01      	cmp	r2, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x40>
 8000886:	e11d      	b.n	8000ac4 <__aeabi_fadd+0x27c>
 8000888:	2aff      	cmp	r2, #255	@ 0xff
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x46>
 800088c:	e0ab      	b.n	80009e6 <__aeabi_fadd+0x19e>
 800088e:	000a      	movs	r2, r1
 8000890:	e027      	b.n	80008e2 <__aeabi_fadd+0x9a>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d04d      	beq.n	8000932 <__aeabi_fadd+0xea>
 8000896:	1b42      	subs	r2, r0, r5
 8000898:	2d00      	cmp	r5, #0
 800089a:	d000      	beq.n	800089e <__aeabi_fadd+0x56>
 800089c:	e0cc      	b.n	8000a38 <__aeabi_fadd+0x1f0>
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x5c>
 80008a2:	e079      	b.n	8000998 <__aeabi_fadd+0x150>
 80008a4:	1e54      	subs	r4, r2, #1
 80008a6:	2a01      	cmp	r2, #1
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x64>
 80008aa:	e128      	b.n	8000afe <__aeabi_fadd+0x2b6>
 80008ac:	2aff      	cmp	r2, #255	@ 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0x6a>
 80008b0:	e097      	b.n	80009e2 <__aeabi_fadd+0x19a>
 80008b2:	0022      	movs	r2, r4
 80008b4:	e0c5      	b.n	8000a42 <__aeabi_fadd+0x1fa>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_fadd+0x74>
 80008ba:	e096      	b.n	80009ea <__aeabi_fadd+0x1a2>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d04f      	beq.n	8000960 <__aeabi_fadd+0x118>
 80008c0:	2dff      	cmp	r5, #255	@ 0xff
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x7e>
 80008c4:	e08f      	b.n	80009e6 <__aeabi_fadd+0x19e>
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	04c9      	lsls	r1, r1, #19
 80008ca:	430e      	orrs	r6, r1
 80008cc:	2a1b      	cmp	r2, #27
 80008ce:	dd51      	ble.n	8000974 <__aeabi_fadd+0x12c>
 80008d0:	002a      	movs	r2, r5
 80008d2:	3301      	adds	r3, #1
 80008d4:	e018      	b.n	8000908 <__aeabi_fadd+0xc0>
 80008d6:	2dff      	cmp	r5, #255	@ 0xff
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x94>
 80008da:	e084      	b.n	80009e6 <__aeabi_fadd+0x19e>
 80008dc:	2180      	movs	r1, #128	@ 0x80
 80008de:	04c9      	lsls	r1, r1, #19
 80008e0:	430e      	orrs	r6, r1
 80008e2:	2101      	movs	r1, #1
 80008e4:	2a1b      	cmp	r2, #27
 80008e6:	dc08      	bgt.n	80008fa <__aeabi_fadd+0xb2>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	4311      	orrs	r1, r2
 80008fa:	1a5b      	subs	r3, r3, r1
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d459      	bmi.n	80009b4 <__aeabi_fadd+0x16c>
 8000900:	2107      	movs	r1, #7
 8000902:	002a      	movs	r2, r5
 8000904:	4019      	ands	r1, r3
 8000906:	d049      	beq.n	800099c <__aeabi_fadd+0x154>
 8000908:	210f      	movs	r1, #15
 800090a:	4019      	ands	r1, r3
 800090c:	2904      	cmp	r1, #4
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0xca>
 8000910:	3304      	adds	r3, #4
 8000912:	0159      	lsls	r1, r3, #5
 8000914:	d542      	bpl.n	800099c <__aeabi_fadd+0x154>
 8000916:	1c50      	adds	r0, r2, #1
 8000918:	2afe      	cmp	r2, #254	@ 0xfe
 800091a:	d03a      	beq.n	8000992 <__aeabi_fadd+0x14a>
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	b2c0      	uxtb	r0, r0
 8000920:	0a5b      	lsrs	r3, r3, #9
 8000922:	05c0      	lsls	r0, r0, #23
 8000924:	4318      	orrs	r0, r3
 8000926:	07e4      	lsls	r4, r4, #31
 8000928:	4320      	orrs	r0, r4
 800092a:	bcc0      	pop	{r6, r7}
 800092c:	46b9      	mov	r9, r7
 800092e:	46b0      	mov	r8, r6
 8000930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000932:	20fe      	movs	r0, #254	@ 0xfe
 8000934:	4680      	mov	r8, r0
 8000936:	1c6f      	adds	r7, r5, #1
 8000938:	0038      	movs	r0, r7
 800093a:	4647      	mov	r7, r8
 800093c:	4207      	tst	r7, r0
 800093e:	d000      	beq.n	8000942 <__aeabi_fadd+0xfa>
 8000940:	e08e      	b.n	8000a60 <__aeabi_fadd+0x218>
 8000942:	2d00      	cmp	r5, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_fadd+0x100>
 8000946:	e0b4      	b.n	8000ab2 <__aeabi_fadd+0x26a>
 8000948:	2b00      	cmp	r3, #0
 800094a:	d100      	bne.n	800094e <__aeabi_fadd+0x106>
 800094c:	e0db      	b.n	8000b06 <__aeabi_fadd+0x2be>
 800094e:	2e00      	cmp	r6, #0
 8000950:	d06c      	beq.n	8000a2c <__aeabi_fadd+0x1e4>
 8000952:	1b98      	subs	r0, r3, r6
 8000954:	0145      	lsls	r5, r0, #5
 8000956:	d400      	bmi.n	800095a <__aeabi_fadd+0x112>
 8000958:	e0f7      	b.n	8000b4a <__aeabi_fadd+0x302>
 800095a:	000c      	movs	r4, r1
 800095c:	1af3      	subs	r3, r6, r3
 800095e:	e03d      	b.n	80009dc <__aeabi_fadd+0x194>
 8000960:	2e00      	cmp	r6, #0
 8000962:	d01b      	beq.n	800099c <__aeabi_fadd+0x154>
 8000964:	1e51      	subs	r1, r2, #1
 8000966:	2a01      	cmp	r2, #1
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x124>
 800096a:	e082      	b.n	8000a72 <__aeabi_fadd+0x22a>
 800096c:	2aff      	cmp	r2, #255	@ 0xff
 800096e:	d03a      	beq.n	80009e6 <__aeabi_fadd+0x19e>
 8000970:	000a      	movs	r2, r1
 8000972:	e7ab      	b.n	80008cc <__aeabi_fadd+0x84>
 8000974:	0031      	movs	r1, r6
 8000976:	2020      	movs	r0, #32
 8000978:	40d1      	lsrs	r1, r2
 800097a:	1a82      	subs	r2, r0, r2
 800097c:	4096      	lsls	r6, r2
 800097e:	0032      	movs	r2, r6
 8000980:	1e50      	subs	r0, r2, #1
 8000982:	4182      	sbcs	r2, r0
 8000984:	430a      	orrs	r2, r1
 8000986:	189b      	adds	r3, r3, r2
 8000988:	015a      	lsls	r2, r3, #5
 800098a:	d5b9      	bpl.n	8000900 <__aeabi_fadd+0xb8>
 800098c:	1c6a      	adds	r2, r5, #1
 800098e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000990:	d175      	bne.n	8000a7e <__aeabi_fadd+0x236>
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	2300      	movs	r3, #0
 8000996:	e7c4      	b.n	8000922 <__aeabi_fadd+0xda>
 8000998:	000c      	movs	r4, r1
 800099a:	0033      	movs	r3, r6
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	2aff      	cmp	r2, #255	@ 0xff
 80009a0:	d146      	bne.n	8000a30 <__aeabi_fadd+0x1e8>
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f5      	beq.n	8000992 <__aeabi_fadd+0x14a>
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	03d2      	lsls	r2, r2, #15
 80009aa:	4313      	orrs	r3, r2
 80009ac:	025b      	lsls	r3, r3, #9
 80009ae:	20ff      	movs	r0, #255	@ 0xff
 80009b0:	0a5b      	lsrs	r3, r3, #9
 80009b2:	e7b6      	b.n	8000922 <__aeabi_fadd+0xda>
 80009b4:	019f      	lsls	r7, r3, #6
 80009b6:	09bf      	lsrs	r7, r7, #6
 80009b8:	0038      	movs	r0, r7
 80009ba:	f7ff fdd7 	bl	800056c <__clzsi2>
 80009be:	3805      	subs	r0, #5
 80009c0:	4087      	lsls	r7, r0
 80009c2:	4285      	cmp	r5, r0
 80009c4:	dc24      	bgt.n	8000a10 <__aeabi_fadd+0x1c8>
 80009c6:	003b      	movs	r3, r7
 80009c8:	2120      	movs	r1, #32
 80009ca:	1b42      	subs	r2, r0, r5
 80009cc:	3201      	adds	r2, #1
 80009ce:	40d3      	lsrs	r3, r2
 80009d0:	1a8a      	subs	r2, r1, r2
 80009d2:	4097      	lsls	r7, r2
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	4197      	sbcs	r7, r2
 80009d8:	2200      	movs	r2, #0
 80009da:	433b      	orrs	r3, r7
 80009dc:	0759      	lsls	r1, r3, #29
 80009de:	d193      	bne.n	8000908 <__aeabi_fadd+0xc0>
 80009e0:	e797      	b.n	8000912 <__aeabi_fadd+0xca>
 80009e2:	000c      	movs	r4, r1
 80009e4:	0033      	movs	r3, r6
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	e7db      	b.n	80009a2 <__aeabi_fadd+0x15a>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d014      	beq.n	8000a18 <__aeabi_fadd+0x1d0>
 80009ee:	1b42      	subs	r2, r0, r5
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d14b      	bne.n	8000a8c <__aeabi_fadd+0x244>
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0d0      	beq.n	800099a <__aeabi_fadd+0x152>
 80009f8:	1e51      	subs	r1, r2, #1
 80009fa:	2a01      	cmp	r2, #1
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fadd+0x1b8>
 80009fe:	e09e      	b.n	8000b3e <__aeabi_fadd+0x2f6>
 8000a00:	2aff      	cmp	r2, #255	@ 0xff
 8000a02:	d0ef      	beq.n	80009e4 <__aeabi_fadd+0x19c>
 8000a04:	000a      	movs	r2, r1
 8000a06:	2a1b      	cmp	r2, #27
 8000a08:	dd5f      	ble.n	8000aca <__aeabi_fadd+0x282>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	1c73      	adds	r3, r6, #1
 8000a0e:	e77b      	b.n	8000908 <__aeabi_fadd+0xc0>
 8000a10:	4b50      	ldr	r3, [pc, #320]	@ (8000b54 <__aeabi_fadd+0x30c>)
 8000a12:	1a2a      	subs	r2, r5, r0
 8000a14:	403b      	ands	r3, r7
 8000a16:	e7e1      	b.n	80009dc <__aeabi_fadd+0x194>
 8000a18:	21fe      	movs	r1, #254	@ 0xfe
 8000a1a:	1c6a      	adds	r2, r5, #1
 8000a1c:	4211      	tst	r1, r2
 8000a1e:	d13b      	bne.n	8000a98 <__aeabi_fadd+0x250>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d15d      	bne.n	8000ae0 <__aeabi_fadd+0x298>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d07f      	beq.n	8000b28 <__aeabi_fadd+0x2e0>
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d17f      	bne.n	8000b2c <__aeabi_fadd+0x2e4>
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	0a5b      	lsrs	r3, r3, #9
 8000a34:	b2d0      	uxtb	r0, r2
 8000a36:	e774      	b.n	8000922 <__aeabi_fadd+0xda>
 8000a38:	28ff      	cmp	r0, #255	@ 0xff
 8000a3a:	d0d2      	beq.n	80009e2 <__aeabi_fadd+0x19a>
 8000a3c:	2480      	movs	r4, #128	@ 0x80
 8000a3e:	04e4      	lsls	r4, r4, #19
 8000a40:	4323      	orrs	r3, r4
 8000a42:	2401      	movs	r4, #1
 8000a44:	2a1b      	cmp	r2, #27
 8000a46:	dc07      	bgt.n	8000a58 <__aeabi_fadd+0x210>
 8000a48:	001c      	movs	r4, r3
 8000a4a:	2520      	movs	r5, #32
 8000a4c:	40d4      	lsrs	r4, r2
 8000a4e:	1aaa      	subs	r2, r5, r2
 8000a50:	4093      	lsls	r3, r2
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	4193      	sbcs	r3, r2
 8000a56:	431c      	orrs	r4, r3
 8000a58:	1b33      	subs	r3, r6, r4
 8000a5a:	0005      	movs	r5, r0
 8000a5c:	000c      	movs	r4, r1
 8000a5e:	e74d      	b.n	80008fc <__aeabi_fadd+0xb4>
 8000a60:	1b9f      	subs	r7, r3, r6
 8000a62:	017a      	lsls	r2, r7, #5
 8000a64:	d422      	bmi.n	8000aac <__aeabi_fadd+0x264>
 8000a66:	2f00      	cmp	r7, #0
 8000a68:	d1a6      	bne.n	80009b8 <__aeabi_fadd+0x170>
 8000a6a:	2400      	movs	r4, #0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e757      	b.n	8000922 <__aeabi_fadd+0xda>
 8000a72:	199b      	adds	r3, r3, r6
 8000a74:	2501      	movs	r5, #1
 8000a76:	3201      	adds	r2, #1
 8000a78:	0159      	lsls	r1, r3, #5
 8000a7a:	d400      	bmi.n	8000a7e <__aeabi_fadd+0x236>
 8000a7c:	e740      	b.n	8000900 <__aeabi_fadd+0xb8>
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4835      	ldr	r0, [pc, #212]	@ (8000b58 <__aeabi_fadd+0x310>)
 8000a82:	4019      	ands	r1, r3
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	4003      	ands	r3, r0
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	e7a7      	b.n	80009dc <__aeabi_fadd+0x194>
 8000a8c:	28ff      	cmp	r0, #255	@ 0xff
 8000a8e:	d0a9      	beq.n	80009e4 <__aeabi_fadd+0x19c>
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	04c9      	lsls	r1, r1, #19
 8000a94:	430b      	orrs	r3, r1
 8000a96:	e7b6      	b.n	8000a06 <__aeabi_fadd+0x1be>
 8000a98:	2aff      	cmp	r2, #255	@ 0xff
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fadd+0x256>
 8000a9c:	e779      	b.n	8000992 <__aeabi_fadd+0x14a>
 8000a9e:	199b      	adds	r3, r3, r6
 8000aa0:	085b      	lsrs	r3, r3, #1
 8000aa2:	0759      	lsls	r1, r3, #29
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fadd+0x260>
 8000aa6:	e72f      	b.n	8000908 <__aeabi_fadd+0xc0>
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	e7c1      	b.n	8000a30 <__aeabi_fadd+0x1e8>
 8000aac:	000c      	movs	r4, r1
 8000aae:	1af7      	subs	r7, r6, r3
 8000ab0:	e782      	b.n	80009b8 <__aeabi_fadd+0x170>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d12c      	bne.n	8000b10 <__aeabi_fadd+0x2c8>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d193      	bne.n	80009e2 <__aeabi_fadd+0x19a>
 8000aba:	2380      	movs	r3, #128	@ 0x80
 8000abc:	2400      	movs	r4, #0
 8000abe:	20ff      	movs	r0, #255	@ 0xff
 8000ac0:	03db      	lsls	r3, r3, #15
 8000ac2:	e72e      	b.n	8000922 <__aeabi_fadd+0xda>
 8000ac4:	2501      	movs	r5, #1
 8000ac6:	1b9b      	subs	r3, r3, r6
 8000ac8:	e718      	b.n	80008fc <__aeabi_fadd+0xb4>
 8000aca:	0019      	movs	r1, r3
 8000acc:	2520      	movs	r5, #32
 8000ace:	40d1      	lsrs	r1, r2
 8000ad0:	1aaa      	subs	r2, r5, r2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	4193      	sbcs	r3, r2
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	0005      	movs	r5, r0
 8000adc:	199b      	adds	r3, r3, r6
 8000ade:	e753      	b.n	8000988 <__aeabi_fadd+0x140>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fadd+0x29e>
 8000ae4:	e77e      	b.n	80009e4 <__aeabi_fadd+0x19c>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fadd+0x2a4>
 8000aea:	e77c      	b.n	80009e6 <__aeabi_fadd+0x19e>
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4591      	cmp	r9, r2
 8000af2:	d302      	bcc.n	8000afa <__aeabi_fadd+0x2b2>
 8000af4:	4594      	cmp	ip, r2
 8000af6:	d200      	bcs.n	8000afa <__aeabi_fadd+0x2b2>
 8000af8:	0033      	movs	r3, r6
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	e753      	b.n	80009a6 <__aeabi_fadd+0x15e>
 8000afe:	000c      	movs	r4, r1
 8000b00:	1af3      	subs	r3, r6, r3
 8000b02:	3501      	adds	r5, #1
 8000b04:	e6fa      	b.n	80008fc <__aeabi_fadd+0xb4>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d0af      	beq.n	8000a6a <__aeabi_fadd+0x222>
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	e78d      	b.n	8000a2c <__aeabi_fadd+0x1e4>
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x2ce>
 8000b14:	e767      	b.n	80009e6 <__aeabi_fadd+0x19e>
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	03d2      	lsls	r2, r2, #15
 8000b1a:	4591      	cmp	r9, r2
 8000b1c:	d3ed      	bcc.n	8000afa <__aeabi_fadd+0x2b2>
 8000b1e:	4594      	cmp	ip, r2
 8000b20:	d2eb      	bcs.n	8000afa <__aeabi_fadd+0x2b2>
 8000b22:	000c      	movs	r4, r1
 8000b24:	0033      	movs	r3, r6
 8000b26:	e7e8      	b.n	8000afa <__aeabi_fadd+0x2b2>
 8000b28:	0033      	movs	r3, r6
 8000b2a:	e77f      	b.n	8000a2c <__aeabi_fadd+0x1e4>
 8000b2c:	199b      	adds	r3, r3, r6
 8000b2e:	2200      	movs	r2, #0
 8000b30:	0159      	lsls	r1, r3, #5
 8000b32:	d5b9      	bpl.n	8000aa8 <__aeabi_fadd+0x260>
 8000b34:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <__aeabi_fadd+0x30c>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	e778      	b.n	8000a30 <__aeabi_fadd+0x1e8>
 8000b3e:	199b      	adds	r3, r3, r6
 8000b40:	3201      	adds	r2, #1
 8000b42:	3501      	adds	r5, #1
 8000b44:	0159      	lsls	r1, r3, #5
 8000b46:	d49a      	bmi.n	8000a7e <__aeabi_fadd+0x236>
 8000b48:	e6da      	b.n	8000900 <__aeabi_fadd+0xb8>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d08d      	beq.n	8000a6a <__aeabi_fadd+0x222>
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	e76e      	b.n	8000a30 <__aeabi_fadd+0x1e8>
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	fbffffff 	.word	0xfbffffff
 8000b58:	7dffffff 	.word	0x7dffffff

08000b5c <__aeabi_fdiv>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	464f      	mov	r7, r9
 8000b60:	4646      	mov	r6, r8
 8000b62:	46d6      	mov	lr, sl
 8000b64:	0244      	lsls	r4, r0, #9
 8000b66:	b5c0      	push	{r6, r7, lr}
 8000b68:	0047      	lsls	r7, r0, #1
 8000b6a:	1c0e      	adds	r6, r1, #0
 8000b6c:	0a64      	lsrs	r4, r4, #9
 8000b6e:	0e3f      	lsrs	r7, r7, #24
 8000b70:	0fc5      	lsrs	r5, r0, #31
 8000b72:	2f00      	cmp	r7, #0
 8000b74:	d03c      	beq.n	8000bf0 <__aeabi_fdiv+0x94>
 8000b76:	2fff      	cmp	r7, #255	@ 0xff
 8000b78:	d042      	beq.n	8000c00 <__aeabi_fdiv+0xa4>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	4699      	mov	r9, r3
 8000b80:	469a      	mov	sl, r3
 8000b82:	00e4      	lsls	r4, r4, #3
 8000b84:	04d2      	lsls	r2, r2, #19
 8000b86:	4314      	orrs	r4, r2
 8000b88:	3f7f      	subs	r7, #127	@ 0x7f
 8000b8a:	0273      	lsls	r3, r6, #9
 8000b8c:	0a5b      	lsrs	r3, r3, #9
 8000b8e:	4698      	mov	r8, r3
 8000b90:	0073      	lsls	r3, r6, #1
 8000b92:	0e1b      	lsrs	r3, r3, #24
 8000b94:	0ff6      	lsrs	r6, r6, #31
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d01b      	beq.n	8000bd2 <__aeabi_fdiv+0x76>
 8000b9a:	2bff      	cmp	r3, #255	@ 0xff
 8000b9c:	d013      	beq.n	8000bc6 <__aeabi_fdiv+0x6a>
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	00d2      	lsls	r2, r2, #3
 8000ba4:	04c9      	lsls	r1, r1, #19
 8000ba6:	4311      	orrs	r1, r2
 8000ba8:	4688      	mov	r8, r1
 8000baa:	2000      	movs	r0, #0
 8000bac:	3b7f      	subs	r3, #127	@ 0x7f
 8000bae:	0029      	movs	r1, r5
 8000bb0:	1aff      	subs	r7, r7, r3
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	4071      	eors	r1, r6
 8000bb6:	b2c9      	uxtb	r1, r1
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d900      	bls.n	8000bbe <__aeabi_fdiv+0x62>
 8000bbc:	e0b5      	b.n	8000d2a <__aeabi_fdiv+0x1ce>
 8000bbe:	4a74      	ldr	r2, [pc, #464]	@ (8000d90 <__aeabi_fdiv+0x234>)
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	58d3      	ldr	r3, [r2, r3]
 8000bc4:	469f      	mov	pc, r3
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d13f      	bne.n	8000c4c <__aeabi_fdiv+0xf0>
 8000bcc:	3fff      	subs	r7, #255	@ 0xff
 8000bce:	3302      	adds	r3, #2
 8000bd0:	e003      	b.n	8000bda <__aeabi_fdiv+0x7e>
 8000bd2:	4643      	mov	r3, r8
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d12d      	bne.n	8000c34 <__aeabi_fdiv+0xd8>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	0029      	movs	r1, r5
 8000bdc:	464a      	mov	r2, r9
 8000bde:	4071      	eors	r1, r6
 8000be0:	b2c9      	uxtb	r1, r1
 8000be2:	431a      	orrs	r2, r3
 8000be4:	2a0e      	cmp	r2, #14
 8000be6:	d838      	bhi.n	8000c5a <__aeabi_fdiv+0xfe>
 8000be8:	486a      	ldr	r0, [pc, #424]	@ (8000d94 <__aeabi_fdiv+0x238>)
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	5882      	ldr	r2, [r0, r2]
 8000bee:	4697      	mov	pc, r2
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d113      	bne.n	8000c1c <__aeabi_fdiv+0xc0>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	2700      	movs	r7, #0
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	e7c4      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d105      	bne.n	8000c10 <__aeabi_fdiv+0xb4>
 8000c04:	2308      	movs	r3, #8
 8000c06:	4699      	mov	r9, r3
 8000c08:	3b06      	subs	r3, #6
 8000c0a:	27ff      	movs	r7, #255	@ 0xff
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	e7bc      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c10:	230c      	movs	r3, #12
 8000c12:	4699      	mov	r9, r3
 8000c14:	3b09      	subs	r3, #9
 8000c16:	27ff      	movs	r7, #255	@ 0xff
 8000c18:	469a      	mov	sl, r3
 8000c1a:	e7b6      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f7ff fca5 	bl	800056c <__clzsi2>
 8000c22:	2776      	movs	r7, #118	@ 0x76
 8000c24:	1f43      	subs	r3, r0, #5
 8000c26:	409c      	lsls	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	427f      	negs	r7, r7
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	469a      	mov	sl, r3
 8000c30:	1a3f      	subs	r7, r7, r0
 8000c32:	e7aa      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c34:	4640      	mov	r0, r8
 8000c36:	f7ff fc99 	bl	800056c <__clzsi2>
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	1f43      	subs	r3, r0, #5
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	2376      	movs	r3, #118	@ 0x76
 8000c42:	425b      	negs	r3, r3
 8000c44:	1a1b      	subs	r3, r3, r0
 8000c46:	4690      	mov	r8, r2
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e7b0      	b.n	8000bae <__aeabi_fdiv+0x52>
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	464a      	mov	r2, r9
 8000c50:	431a      	orrs	r2, r3
 8000c52:	4691      	mov	r9, r2
 8000c54:	2003      	movs	r0, #3
 8000c56:	33fc      	adds	r3, #252	@ 0xfc
 8000c58:	e7a9      	b.n	8000bae <__aeabi_fdiv+0x52>
 8000c5a:	000d      	movs	r5, r1
 8000c5c:	20ff      	movs	r0, #255	@ 0xff
 8000c5e:	2200      	movs	r2, #0
 8000c60:	05c0      	lsls	r0, r0, #23
 8000c62:	07ed      	lsls	r5, r5, #31
 8000c64:	4310      	orrs	r0, r2
 8000c66:	4328      	orrs	r0, r5
 8000c68:	bce0      	pop	{r5, r6, r7}
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	46b1      	mov	r9, r6
 8000c6e:	46a8      	mov	r8, r5
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	000d      	movs	r5, r1
 8000c74:	2000      	movs	r0, #0
 8000c76:	2200      	movs	r2, #0
 8000c78:	e7f2      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d0ed      	beq.n	8000c5c <__aeabi_fdiv+0x100>
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d033      	beq.n	8000cec <__aeabi_fdiv+0x190>
 8000c84:	46a0      	mov	r8, r4
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d105      	bne.n	8000c96 <__aeabi_fdiv+0x13a>
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e7e7      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000c90:	0035      	movs	r5, r6
 8000c92:	2803      	cmp	r0, #3
 8000c94:	d07a      	beq.n	8000d8c <__aeabi_fdiv+0x230>
 8000c96:	003b      	movs	r3, r7
 8000c98:	337f      	adds	r3, #127	@ 0x7f
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dd2d      	ble.n	8000cfa <__aeabi_fdiv+0x19e>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0752      	lsls	r2, r2, #29
 8000ca2:	d007      	beq.n	8000cb4 <__aeabi_fdiv+0x158>
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	400a      	ands	r2, r1
 8000caa:	2a04      	cmp	r2, #4
 8000cac:	d002      	beq.n	8000cb4 <__aeabi_fdiv+0x158>
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	44e0      	add	r8, ip
 8000cb4:	4642      	mov	r2, r8
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	d505      	bpl.n	8000cc6 <__aeabi_fdiv+0x16a>
 8000cba:	4642      	mov	r2, r8
 8000cbc:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <__aeabi_fdiv+0x23c>)
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	3380      	adds	r3, #128	@ 0x80
 8000cc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cc8:	dcc8      	bgt.n	8000c5c <__aeabi_fdiv+0x100>
 8000cca:	4642      	mov	r2, r8
 8000ccc:	0192      	lsls	r2, r2, #6
 8000cce:	0a52      	lsrs	r2, r2, #9
 8000cd0:	b2d8      	uxtb	r0, r3
 8000cd2:	e7c5      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000cd4:	2280      	movs	r2, #128	@ 0x80
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	03d2      	lsls	r2, r2, #15
 8000cdc:	e7c0      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000cde:	2280      	movs	r2, #128	@ 0x80
 8000ce0:	03d2      	lsls	r2, r2, #15
 8000ce2:	4214      	tst	r4, r2
 8000ce4:	d002      	beq.n	8000cec <__aeabi_fdiv+0x190>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	4213      	tst	r3, r2
 8000cea:	d049      	beq.n	8000d80 <__aeabi_fdiv+0x224>
 8000cec:	2280      	movs	r2, #128	@ 0x80
 8000cee:	03d2      	lsls	r2, r2, #15
 8000cf0:	4322      	orrs	r2, r4
 8000cf2:	0252      	lsls	r2, r2, #9
 8000cf4:	20ff      	movs	r0, #255	@ 0xff
 8000cf6:	0a52      	lsrs	r2, r2, #9
 8000cf8:	e7b2      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b1b      	cmp	r3, #27
 8000d00:	dcc3      	bgt.n	8000c8a <__aeabi_fdiv+0x12e>
 8000d02:	4642      	mov	r2, r8
 8000d04:	40da      	lsrs	r2, r3
 8000d06:	4643      	mov	r3, r8
 8000d08:	379e      	adds	r7, #158	@ 0x9e
 8000d0a:	40bb      	lsls	r3, r7
 8000d0c:	1e59      	subs	r1, r3, #1
 8000d0e:	418b      	sbcs	r3, r1
 8000d10:	431a      	orrs	r2, r3
 8000d12:	0753      	lsls	r3, r2, #29
 8000d14:	d004      	beq.n	8000d20 <__aeabi_fdiv+0x1c4>
 8000d16:	230f      	movs	r3, #15
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fdiv+0x1c4>
 8000d1e:	3204      	adds	r2, #4
 8000d20:	0153      	lsls	r3, r2, #5
 8000d22:	d529      	bpl.n	8000d78 <__aeabi_fdiv+0x21c>
 8000d24:	2001      	movs	r0, #1
 8000d26:	2200      	movs	r2, #0
 8000d28:	e79a      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d2a:	4642      	mov	r2, r8
 8000d2c:	0163      	lsls	r3, r4, #5
 8000d2e:	0155      	lsls	r5, r2, #5
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d215      	bcs.n	8000d60 <__aeabi_fdiv+0x204>
 8000d34:	201b      	movs	r0, #27
 8000d36:	2200      	movs	r2, #0
 8000d38:	3f01      	subs	r7, #1
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	001c      	movs	r4, r3
 8000d3e:	0052      	lsls	r2, r2, #1
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	db01      	blt.n	8000d4a <__aeabi_fdiv+0x1ee>
 8000d46:	429d      	cmp	r5, r3
 8000d48:	d801      	bhi.n	8000d4e <__aeabi_fdiv+0x1f2>
 8000d4a:	1b5b      	subs	r3, r3, r5
 8000d4c:	4332      	orrs	r2, r6
 8000d4e:	3801      	subs	r0, #1
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d1f3      	bne.n	8000d3c <__aeabi_fdiv+0x1e0>
 8000d54:	1e58      	subs	r0, r3, #1
 8000d56:	4183      	sbcs	r3, r0
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	4698      	mov	r8, r3
 8000d5c:	000d      	movs	r5, r1
 8000d5e:	e79a      	b.n	8000c96 <__aeabi_fdiv+0x13a>
 8000d60:	201a      	movs	r0, #26
 8000d62:	2201      	movs	r2, #1
 8000d64:	1b5b      	subs	r3, r3, r5
 8000d66:	e7e8      	b.n	8000d3a <__aeabi_fdiv+0x1de>
 8000d68:	3b02      	subs	r3, #2
 8000d6a:	425a      	negs	r2, r3
 8000d6c:	4153      	adcs	r3, r2
 8000d6e:	425b      	negs	r3, r3
 8000d70:	0035      	movs	r5, r6
 8000d72:	2200      	movs	r2, #0
 8000d74:	b2d8      	uxtb	r0, r3
 8000d76:	e773      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d78:	0192      	lsls	r2, r2, #6
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	0a52      	lsrs	r2, r2, #9
 8000d7e:	e76f      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d80:	431a      	orrs	r2, r3
 8000d82:	0252      	lsls	r2, r2, #9
 8000d84:	0035      	movs	r5, r6
 8000d86:	20ff      	movs	r0, #255	@ 0xff
 8000d88:	0a52      	lsrs	r2, r2, #9
 8000d8a:	e769      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d8c:	4644      	mov	r4, r8
 8000d8e:	e7ad      	b.n	8000cec <__aeabi_fdiv+0x190>
 8000d90:	08014d80 	.word	0x08014d80
 8000d94:	08014dc0 	.word	0x08014dc0
 8000d98:	f7ffffff 	.word	0xf7ffffff

08000d9c <__eqsf2>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	024e      	lsls	r6, r1, #9
 8000da2:	004c      	lsls	r4, r1, #1
 8000da4:	0245      	lsls	r5, r0, #9
 8000da6:	0a6d      	lsrs	r5, r5, #9
 8000da8:	0e12      	lsrs	r2, r2, #24
 8000daa:	0fc3      	lsrs	r3, r0, #31
 8000dac:	0a76      	lsrs	r6, r6, #9
 8000dae:	0e24      	lsrs	r4, r4, #24
 8000db0:	0fc9      	lsrs	r1, r1, #31
 8000db2:	2aff      	cmp	r2, #255	@ 0xff
 8000db4:	d010      	beq.n	8000dd8 <__eqsf2+0x3c>
 8000db6:	2cff      	cmp	r4, #255	@ 0xff
 8000db8:	d00c      	beq.n	8000dd4 <__eqsf2+0x38>
 8000dba:	2001      	movs	r0, #1
 8000dbc:	42a2      	cmp	r2, r4
 8000dbe:	d10a      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dc0:	42b5      	cmp	r5, r6
 8000dc2:	d108      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d00f      	beq.n	8000de8 <__eqsf2+0x4c>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d104      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dcc:	0028      	movs	r0, r5
 8000dce:	1e43      	subs	r3, r0, #1
 8000dd0:	4198      	sbcs	r0, r3
 8000dd2:	e000      	b.n	8000dd6 <__eqsf2+0x3a>
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	2001      	movs	r0, #1
 8000dda:	2cff      	cmp	r4, #255	@ 0xff
 8000ddc:	d1fb      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dde:	4335      	orrs	r5, r6
 8000de0:	d1f9      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000de2:	404b      	eors	r3, r1
 8000de4:	0018      	movs	r0, r3
 8000de6:	e7f6      	b.n	8000dd6 <__eqsf2+0x3a>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7f4      	b.n	8000dd6 <__eqsf2+0x3a>

08000dec <__gesf2>:
 8000dec:	b530      	push	{r4, r5, lr}
 8000dee:	0042      	lsls	r2, r0, #1
 8000df0:	0244      	lsls	r4, r0, #9
 8000df2:	024d      	lsls	r5, r1, #9
 8000df4:	0fc3      	lsrs	r3, r0, #31
 8000df6:	0048      	lsls	r0, r1, #1
 8000df8:	0a64      	lsrs	r4, r4, #9
 8000dfa:	0e12      	lsrs	r2, r2, #24
 8000dfc:	0a6d      	lsrs	r5, r5, #9
 8000dfe:	0e00      	lsrs	r0, r0, #24
 8000e00:	0fc9      	lsrs	r1, r1, #31
 8000e02:	2aff      	cmp	r2, #255	@ 0xff
 8000e04:	d019      	beq.n	8000e3a <__gesf2+0x4e>
 8000e06:	28ff      	cmp	r0, #255	@ 0xff
 8000e08:	d00b      	beq.n	8000e22 <__gesf2+0x36>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d11e      	bne.n	8000e4c <__gesf2+0x60>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d10b      	bne.n	8000e2a <__gesf2+0x3e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d027      	beq.n	8000e66 <__gesf2+0x7a>
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	d134      	bne.n	8000e84 <__gesf2+0x98>
 8000e1a:	2900      	cmp	r1, #0
 8000e1c:	d02f      	beq.n	8000e7e <__gesf2+0x92>
 8000e1e:	0008      	movs	r0, r1
 8000e20:	bd30      	pop	{r4, r5, pc}
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d128      	bne.n	8000e78 <__gesf2+0x8c>
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d101      	bne.n	8000e2e <__gesf2+0x42>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d0f5      	beq.n	8000e1a <__gesf2+0x2e>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d107      	bne.n	8000e42 <__gesf2+0x56>
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d023      	beq.n	8000e7e <__gesf2+0x92>
 8000e36:	0018      	movs	r0, r3
 8000e38:	e7f2      	b.n	8000e20 <__gesf2+0x34>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d11c      	bne.n	8000e78 <__gesf2+0x8c>
 8000e3e:	28ff      	cmp	r0, #255	@ 0xff
 8000e40:	d014      	beq.n	8000e6c <__gesf2+0x80>
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	2302      	movs	r3, #2
 8000e46:	4018      	ands	r0, r3
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7e9      	b.n	8000e20 <__gesf2+0x34>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d0f8      	beq.n	8000e42 <__gesf2+0x56>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d1f6      	bne.n	8000e42 <__gesf2+0x56>
 8000e54:	4282      	cmp	r2, r0
 8000e56:	dcf4      	bgt.n	8000e42 <__gesf2+0x56>
 8000e58:	dbeb      	blt.n	8000e32 <__gesf2+0x46>
 8000e5a:	42ac      	cmp	r4, r5
 8000e5c:	d8f1      	bhi.n	8000e42 <__gesf2+0x56>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	42ac      	cmp	r4, r5
 8000e62:	d2dd      	bcs.n	8000e20 <__gesf2+0x34>
 8000e64:	e7e5      	b.n	8000e32 <__gesf2+0x46>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d0da      	beq.n	8000e20 <__gesf2+0x34>
 8000e6a:	e7ea      	b.n	8000e42 <__gesf2+0x56>
 8000e6c:	2d00      	cmp	r5, #0
 8000e6e:	d103      	bne.n	8000e78 <__gesf2+0x8c>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d1e6      	bne.n	8000e42 <__gesf2+0x56>
 8000e74:	2000      	movs	r0, #0
 8000e76:	e7d3      	b.n	8000e20 <__gesf2+0x34>
 8000e78:	2002      	movs	r0, #2
 8000e7a:	4240      	negs	r0, r0
 8000e7c:	e7d0      	b.n	8000e20 <__gesf2+0x34>
 8000e7e:	2001      	movs	r0, #1
 8000e80:	4240      	negs	r0, r0
 8000e82:	e7cd      	b.n	8000e20 <__gesf2+0x34>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d0e8      	beq.n	8000e5a <__gesf2+0x6e>
 8000e88:	e7db      	b.n	8000e42 <__gesf2+0x56>
 8000e8a:	46c0      	nop			@ (mov r8, r8)

08000e8c <__lesf2>:
 8000e8c:	b530      	push	{r4, r5, lr}
 8000e8e:	0042      	lsls	r2, r0, #1
 8000e90:	0244      	lsls	r4, r0, #9
 8000e92:	024d      	lsls	r5, r1, #9
 8000e94:	0fc3      	lsrs	r3, r0, #31
 8000e96:	0048      	lsls	r0, r1, #1
 8000e98:	0a64      	lsrs	r4, r4, #9
 8000e9a:	0e12      	lsrs	r2, r2, #24
 8000e9c:	0a6d      	lsrs	r5, r5, #9
 8000e9e:	0e00      	lsrs	r0, r0, #24
 8000ea0:	0fc9      	lsrs	r1, r1, #31
 8000ea2:	2aff      	cmp	r2, #255	@ 0xff
 8000ea4:	d01a      	beq.n	8000edc <__lesf2+0x50>
 8000ea6:	28ff      	cmp	r0, #255	@ 0xff
 8000ea8:	d00e      	beq.n	8000ec8 <__lesf2+0x3c>
 8000eaa:	2a00      	cmp	r2, #0
 8000eac:	d11e      	bne.n	8000eec <__lesf2+0x60>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d10e      	bne.n	8000ed0 <__lesf2+0x44>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d02a      	beq.n	8000f0c <__lesf2+0x80>
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	d00c      	beq.n	8000ed4 <__lesf2+0x48>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d01d      	beq.n	8000efa <__lesf2+0x6e>
 8000ebe:	1e58      	subs	r0, r3, #1
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	4018      	ands	r0, r3
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e010      	b.n	8000eea <__lesf2+0x5e>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d10d      	bne.n	8000ee8 <__lesf2+0x5c>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d120      	bne.n	8000f12 <__lesf2+0x86>
 8000ed0:	2c00      	cmp	r4, #0
 8000ed2:	d11e      	bne.n	8000f12 <__lesf2+0x86>
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d023      	beq.n	8000f20 <__lesf2+0x94>
 8000ed8:	0008      	movs	r0, r1
 8000eda:	e006      	b.n	8000eea <__lesf2+0x5e>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d103      	bne.n	8000ee8 <__lesf2+0x5c>
 8000ee0:	28ff      	cmp	r0, #255	@ 0xff
 8000ee2:	d1ec      	bne.n	8000ebe <__lesf2+0x32>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d017      	beq.n	8000f18 <__lesf2+0x8c>
 8000ee8:	2002      	movs	r0, #2
 8000eea:	bd30      	pop	{r4, r5, pc}
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d0e6      	beq.n	8000ebe <__lesf2+0x32>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d1e4      	bne.n	8000ebe <__lesf2+0x32>
 8000ef4:	4282      	cmp	r2, r0
 8000ef6:	dce2      	bgt.n	8000ebe <__lesf2+0x32>
 8000ef8:	db04      	blt.n	8000f04 <__lesf2+0x78>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d8df      	bhi.n	8000ebe <__lesf2+0x32>
 8000efe:	2000      	movs	r0, #0
 8000f00:	42ac      	cmp	r4, r5
 8000f02:	d2f2      	bcs.n	8000eea <__lesf2+0x5e>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00b      	beq.n	8000f20 <__lesf2+0x94>
 8000f08:	0018      	movs	r0, r3
 8000f0a:	e7ee      	b.n	8000eea <__lesf2+0x5e>
 8000f0c:	2c00      	cmp	r4, #0
 8000f0e:	d0ec      	beq.n	8000eea <__lesf2+0x5e>
 8000f10:	e7d5      	b.n	8000ebe <__lesf2+0x32>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d1d3      	bne.n	8000ebe <__lesf2+0x32>
 8000f16:	e7f5      	b.n	8000f04 <__lesf2+0x78>
 8000f18:	2000      	movs	r0, #0
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d0e5      	beq.n	8000eea <__lesf2+0x5e>
 8000f1e:	e7ce      	b.n	8000ebe <__lesf2+0x32>
 8000f20:	2001      	movs	r0, #1
 8000f22:	4240      	negs	r0, r0
 8000f24:	e7e1      	b.n	8000eea <__lesf2+0x5e>
 8000f26:	46c0      	nop			@ (mov r8, r8)

08000f28 <__aeabi_fmul>:
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	464f      	mov	r7, r9
 8000f2c:	4646      	mov	r6, r8
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	0243      	lsls	r3, r0, #9
 8000f32:	0a5b      	lsrs	r3, r3, #9
 8000f34:	0045      	lsls	r5, r0, #1
 8000f36:	b5c0      	push	{r6, r7, lr}
 8000f38:	4699      	mov	r9, r3
 8000f3a:	1c0f      	adds	r7, r1, #0
 8000f3c:	0e2d      	lsrs	r5, r5, #24
 8000f3e:	0fc6      	lsrs	r6, r0, #31
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fmul+0x1e>
 8000f44:	e088      	b.n	8001058 <__aeabi_fmul+0x130>
 8000f46:	2dff      	cmp	r5, #255	@ 0xff
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fmul+0x24>
 8000f4a:	e08d      	b.n	8001068 <__aeabi_fmul+0x140>
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	04d2      	lsls	r2, r2, #19
 8000f52:	431a      	orrs	r2, r3
 8000f54:	2300      	movs	r3, #0
 8000f56:	4691      	mov	r9, r2
 8000f58:	4698      	mov	r8, r3
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	3d7f      	subs	r5, #127	@ 0x7f
 8000f5e:	027c      	lsls	r4, r7, #9
 8000f60:	007b      	lsls	r3, r7, #1
 8000f62:	0a64      	lsrs	r4, r4, #9
 8000f64:	0e1b      	lsrs	r3, r3, #24
 8000f66:	0fff      	lsrs	r7, r7, #31
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d068      	beq.n	800103e <__aeabi_fmul+0x116>
 8000f6c:	2bff      	cmp	r3, #255	@ 0xff
 8000f6e:	d021      	beq.n	8000fb4 <__aeabi_fmul+0x8c>
 8000f70:	2280      	movs	r2, #128	@ 0x80
 8000f72:	00e4      	lsls	r4, r4, #3
 8000f74:	04d2      	lsls	r2, r2, #19
 8000f76:	4314      	orrs	r4, r2
 8000f78:	4642      	mov	r2, r8
 8000f7a:	3b7f      	subs	r3, #127	@ 0x7f
 8000f7c:	195b      	adds	r3, r3, r5
 8000f7e:	2100      	movs	r1, #0
 8000f80:	1c5d      	adds	r5, r3, #1
 8000f82:	2a0a      	cmp	r2, #10
 8000f84:	dc2e      	bgt.n	8000fe4 <__aeabi_fmul+0xbc>
 8000f86:	407e      	eors	r6, r7
 8000f88:	4642      	mov	r2, r8
 8000f8a:	2a02      	cmp	r2, #2
 8000f8c:	dc23      	bgt.n	8000fd6 <__aeabi_fmul+0xae>
 8000f8e:	3a01      	subs	r2, #1
 8000f90:	2a01      	cmp	r2, #1
 8000f92:	d900      	bls.n	8000f96 <__aeabi_fmul+0x6e>
 8000f94:	e0bd      	b.n	8001112 <__aeabi_fmul+0x1ea>
 8000f96:	2902      	cmp	r1, #2
 8000f98:	d06e      	beq.n	8001078 <__aeabi_fmul+0x150>
 8000f9a:	2901      	cmp	r1, #1
 8000f9c:	d12c      	bne.n	8000ff8 <__aeabi_fmul+0xd0>
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	05c0      	lsls	r0, r0, #23
 8000fa4:	07f6      	lsls	r6, r6, #31
 8000fa6:	4310      	orrs	r0, r2
 8000fa8:	4330      	orrs	r0, r6
 8000faa:	bce0      	pop	{r5, r6, r7}
 8000fac:	46ba      	mov	sl, r7
 8000fae:	46b1      	mov	r9, r6
 8000fb0:	46a8      	mov	r8, r5
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb4:	002b      	movs	r3, r5
 8000fb6:	33ff      	adds	r3, #255	@ 0xff
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d065      	beq.n	8001088 <__aeabi_fmul+0x160>
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4641      	mov	r1, r8
 8000fc0:	4311      	orrs	r1, r2
 8000fc2:	0032      	movs	r2, r6
 8000fc4:	3501      	adds	r5, #1
 8000fc6:	4688      	mov	r8, r1
 8000fc8:	407a      	eors	r2, r7
 8000fca:	35ff      	adds	r5, #255	@ 0xff
 8000fcc:	290a      	cmp	r1, #10
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_fmul+0xaa>
 8000fd0:	e0d8      	b.n	8001184 <__aeabi_fmul+0x25c>
 8000fd2:	0016      	movs	r6, r2
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4082      	lsls	r2, r0
 8000fdc:	20a6      	movs	r0, #166	@ 0xa6
 8000fde:	00c0      	lsls	r0, r0, #3
 8000fe0:	4202      	tst	r2, r0
 8000fe2:	d020      	beq.n	8001026 <__aeabi_fmul+0xfe>
 8000fe4:	4653      	mov	r3, sl
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d046      	beq.n	8001078 <__aeabi_fmul+0x150>
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fmul+0xc8>
 8000fee:	e0bb      	b.n	8001168 <__aeabi_fmul+0x240>
 8000ff0:	4651      	mov	r1, sl
 8000ff2:	464c      	mov	r4, r9
 8000ff4:	2901      	cmp	r1, #1
 8000ff6:	d0d2      	beq.n	8000f9e <__aeabi_fmul+0x76>
 8000ff8:	002b      	movs	r3, r5
 8000ffa:	337f      	adds	r3, #127	@ 0x7f
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dd70      	ble.n	80010e2 <__aeabi_fmul+0x1ba>
 8001000:	0762      	lsls	r2, r4, #29
 8001002:	d004      	beq.n	800100e <__aeabi_fmul+0xe6>
 8001004:	220f      	movs	r2, #15
 8001006:	4022      	ands	r2, r4
 8001008:	2a04      	cmp	r2, #4
 800100a:	d000      	beq.n	800100e <__aeabi_fmul+0xe6>
 800100c:	3404      	adds	r4, #4
 800100e:	0122      	lsls	r2, r4, #4
 8001010:	d503      	bpl.n	800101a <__aeabi_fmul+0xf2>
 8001012:	4b63      	ldr	r3, [pc, #396]	@ (80011a0 <__aeabi_fmul+0x278>)
 8001014:	401c      	ands	r4, r3
 8001016:	002b      	movs	r3, r5
 8001018:	3380      	adds	r3, #128	@ 0x80
 800101a:	2bfe      	cmp	r3, #254	@ 0xfe
 800101c:	dc2c      	bgt.n	8001078 <__aeabi_fmul+0x150>
 800101e:	01a2      	lsls	r2, r4, #6
 8001020:	0a52      	lsrs	r2, r2, #9
 8001022:	b2d8      	uxtb	r0, r3
 8001024:	e7bd      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001026:	2090      	movs	r0, #144	@ 0x90
 8001028:	0080      	lsls	r0, r0, #2
 800102a:	4202      	tst	r2, r0
 800102c:	d127      	bne.n	800107e <__aeabi_fmul+0x156>
 800102e:	38b9      	subs	r0, #185	@ 0xb9
 8001030:	38ff      	subs	r0, #255	@ 0xff
 8001032:	4210      	tst	r0, r2
 8001034:	d06d      	beq.n	8001112 <__aeabi_fmul+0x1ea>
 8001036:	003e      	movs	r6, r7
 8001038:	46a1      	mov	r9, r4
 800103a:	468a      	mov	sl, r1
 800103c:	e7d2      	b.n	8000fe4 <__aeabi_fmul+0xbc>
 800103e:	2c00      	cmp	r4, #0
 8001040:	d141      	bne.n	80010c6 <__aeabi_fmul+0x19e>
 8001042:	2301      	movs	r3, #1
 8001044:	4642      	mov	r2, r8
 8001046:	431a      	orrs	r2, r3
 8001048:	4690      	mov	r8, r2
 800104a:	002b      	movs	r3, r5
 800104c:	4642      	mov	r2, r8
 800104e:	2101      	movs	r1, #1
 8001050:	1c5d      	adds	r5, r3, #1
 8001052:	2a0a      	cmp	r2, #10
 8001054:	dd97      	ble.n	8000f86 <__aeabi_fmul+0x5e>
 8001056:	e7c5      	b.n	8000fe4 <__aeabi_fmul+0xbc>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d126      	bne.n	80010aa <__aeabi_fmul+0x182>
 800105c:	2304      	movs	r3, #4
 800105e:	4698      	mov	r8, r3
 8001060:	3b03      	subs	r3, #3
 8001062:	2500      	movs	r5, #0
 8001064:	469a      	mov	sl, r3
 8001066:	e77a      	b.n	8000f5e <__aeabi_fmul+0x36>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d118      	bne.n	800109e <__aeabi_fmul+0x176>
 800106c:	2308      	movs	r3, #8
 800106e:	4698      	mov	r8, r3
 8001070:	3b06      	subs	r3, #6
 8001072:	25ff      	movs	r5, #255	@ 0xff
 8001074:	469a      	mov	sl, r3
 8001076:	e772      	b.n	8000f5e <__aeabi_fmul+0x36>
 8001078:	20ff      	movs	r0, #255	@ 0xff
 800107a:	2200      	movs	r2, #0
 800107c:	e791      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 800107e:	2280      	movs	r2, #128	@ 0x80
 8001080:	2600      	movs	r6, #0
 8001082:	20ff      	movs	r0, #255	@ 0xff
 8001084:	03d2      	lsls	r2, r2, #15
 8001086:	e78c      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001088:	4641      	mov	r1, r8
 800108a:	2202      	movs	r2, #2
 800108c:	3501      	adds	r5, #1
 800108e:	4311      	orrs	r1, r2
 8001090:	4688      	mov	r8, r1
 8001092:	35ff      	adds	r5, #255	@ 0xff
 8001094:	290a      	cmp	r1, #10
 8001096:	dca5      	bgt.n	8000fe4 <__aeabi_fmul+0xbc>
 8001098:	2102      	movs	r1, #2
 800109a:	407e      	eors	r6, r7
 800109c:	e774      	b.n	8000f88 <__aeabi_fmul+0x60>
 800109e:	230c      	movs	r3, #12
 80010a0:	4698      	mov	r8, r3
 80010a2:	3b09      	subs	r3, #9
 80010a4:	25ff      	movs	r5, #255	@ 0xff
 80010a6:	469a      	mov	sl, r3
 80010a8:	e759      	b.n	8000f5e <__aeabi_fmul+0x36>
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff fa5e 	bl	800056c <__clzsi2>
 80010b0:	464a      	mov	r2, r9
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	2576      	movs	r5, #118	@ 0x76
 80010b6:	409a      	lsls	r2, r3
 80010b8:	2300      	movs	r3, #0
 80010ba:	426d      	negs	r5, r5
 80010bc:	4691      	mov	r9, r2
 80010be:	4698      	mov	r8, r3
 80010c0:	469a      	mov	sl, r3
 80010c2:	1a2d      	subs	r5, r5, r0
 80010c4:	e74b      	b.n	8000f5e <__aeabi_fmul+0x36>
 80010c6:	0020      	movs	r0, r4
 80010c8:	f7ff fa50 	bl	800056c <__clzsi2>
 80010cc:	4642      	mov	r2, r8
 80010ce:	1f43      	subs	r3, r0, #5
 80010d0:	409c      	lsls	r4, r3
 80010d2:	1a2b      	subs	r3, r5, r0
 80010d4:	3b76      	subs	r3, #118	@ 0x76
 80010d6:	2100      	movs	r1, #0
 80010d8:	1c5d      	adds	r5, r3, #1
 80010da:	2a0a      	cmp	r2, #10
 80010dc:	dc00      	bgt.n	80010e0 <__aeabi_fmul+0x1b8>
 80010de:	e752      	b.n	8000f86 <__aeabi_fmul+0x5e>
 80010e0:	e780      	b.n	8000fe4 <__aeabi_fmul+0xbc>
 80010e2:	2201      	movs	r2, #1
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b1b      	cmp	r3, #27
 80010e8:	dd00      	ble.n	80010ec <__aeabi_fmul+0x1c4>
 80010ea:	e758      	b.n	8000f9e <__aeabi_fmul+0x76>
 80010ec:	359e      	adds	r5, #158	@ 0x9e
 80010ee:	0022      	movs	r2, r4
 80010f0:	40ac      	lsls	r4, r5
 80010f2:	40da      	lsrs	r2, r3
 80010f4:	1e63      	subs	r3, r4, #1
 80010f6:	419c      	sbcs	r4, r3
 80010f8:	4322      	orrs	r2, r4
 80010fa:	0753      	lsls	r3, r2, #29
 80010fc:	d004      	beq.n	8001108 <__aeabi_fmul+0x1e0>
 80010fe:	230f      	movs	r3, #15
 8001100:	4013      	ands	r3, r2
 8001102:	2b04      	cmp	r3, #4
 8001104:	d000      	beq.n	8001108 <__aeabi_fmul+0x1e0>
 8001106:	3204      	adds	r2, #4
 8001108:	0153      	lsls	r3, r2, #5
 800110a:	d537      	bpl.n	800117c <__aeabi_fmul+0x254>
 800110c:	2001      	movs	r0, #1
 800110e:	2200      	movs	r2, #0
 8001110:	e747      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001112:	0c21      	lsrs	r1, r4, #16
 8001114:	464a      	mov	r2, r9
 8001116:	0424      	lsls	r4, r4, #16
 8001118:	0c24      	lsrs	r4, r4, #16
 800111a:	0027      	movs	r7, r4
 800111c:	0c10      	lsrs	r0, r2, #16
 800111e:	0412      	lsls	r2, r2, #16
 8001120:	0c12      	lsrs	r2, r2, #16
 8001122:	4344      	muls	r4, r0
 8001124:	4357      	muls	r7, r2
 8001126:	4348      	muls	r0, r1
 8001128:	4351      	muls	r1, r2
 800112a:	0c3a      	lsrs	r2, r7, #16
 800112c:	1909      	adds	r1, r1, r4
 800112e:	1852      	adds	r2, r2, r1
 8001130:	4294      	cmp	r4, r2
 8001132:	d903      	bls.n	800113c <__aeabi_fmul+0x214>
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	0249      	lsls	r1, r1, #9
 8001138:	468c      	mov	ip, r1
 800113a:	4460      	add	r0, ip
 800113c:	043f      	lsls	r7, r7, #16
 800113e:	0411      	lsls	r1, r2, #16
 8001140:	0c3f      	lsrs	r7, r7, #16
 8001142:	19c9      	adds	r1, r1, r7
 8001144:	018c      	lsls	r4, r1, #6
 8001146:	1e67      	subs	r7, r4, #1
 8001148:	41bc      	sbcs	r4, r7
 800114a:	0c12      	lsrs	r2, r2, #16
 800114c:	0e89      	lsrs	r1, r1, #26
 800114e:	1812      	adds	r2, r2, r0
 8001150:	430c      	orrs	r4, r1
 8001152:	0192      	lsls	r2, r2, #6
 8001154:	4314      	orrs	r4, r2
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	d50e      	bpl.n	8001178 <__aeabi_fmul+0x250>
 800115a:	2301      	movs	r3, #1
 800115c:	0862      	lsrs	r2, r4, #1
 800115e:	401c      	ands	r4, r3
 8001160:	4314      	orrs	r4, r2
 8001162:	e749      	b.n	8000ff8 <__aeabi_fmul+0xd0>
 8001164:	003e      	movs	r6, r7
 8001166:	46a1      	mov	r9, r4
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	464b      	mov	r3, r9
 800116c:	03d2      	lsls	r2, r2, #15
 800116e:	431a      	orrs	r2, r3
 8001170:	0252      	lsls	r2, r2, #9
 8001172:	20ff      	movs	r0, #255	@ 0xff
 8001174:	0a52      	lsrs	r2, r2, #9
 8001176:	e714      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001178:	001d      	movs	r5, r3
 800117a:	e73d      	b.n	8000ff8 <__aeabi_fmul+0xd0>
 800117c:	0192      	lsls	r2, r2, #6
 800117e:	2000      	movs	r0, #0
 8001180:	0a52      	lsrs	r2, r2, #9
 8001182:	e70e      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001184:	290f      	cmp	r1, #15
 8001186:	d1ed      	bne.n	8001164 <__aeabi_fmul+0x23c>
 8001188:	2280      	movs	r2, #128	@ 0x80
 800118a:	464b      	mov	r3, r9
 800118c:	03d2      	lsls	r2, r2, #15
 800118e:	4213      	tst	r3, r2
 8001190:	d0ea      	beq.n	8001168 <__aeabi_fmul+0x240>
 8001192:	4214      	tst	r4, r2
 8001194:	d1e8      	bne.n	8001168 <__aeabi_fmul+0x240>
 8001196:	003e      	movs	r6, r7
 8001198:	20ff      	movs	r0, #255	@ 0xff
 800119a:	4322      	orrs	r2, r4
 800119c:	e701      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	f7ffffff 	.word	0xf7ffffff

080011a4 <__aeabi_fsub>:
 80011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a6:	4647      	mov	r7, r8
 80011a8:	46ce      	mov	lr, r9
 80011aa:	024e      	lsls	r6, r1, #9
 80011ac:	0243      	lsls	r3, r0, #9
 80011ae:	0045      	lsls	r5, r0, #1
 80011b0:	0a72      	lsrs	r2, r6, #9
 80011b2:	0fc4      	lsrs	r4, r0, #31
 80011b4:	0048      	lsls	r0, r1, #1
 80011b6:	b580      	push	{r7, lr}
 80011b8:	4694      	mov	ip, r2
 80011ba:	0a5f      	lsrs	r7, r3, #9
 80011bc:	0e2d      	lsrs	r5, r5, #24
 80011be:	099b      	lsrs	r3, r3, #6
 80011c0:	0e00      	lsrs	r0, r0, #24
 80011c2:	0fc9      	lsrs	r1, r1, #31
 80011c4:	09b6      	lsrs	r6, r6, #6
 80011c6:	28ff      	cmp	r0, #255	@ 0xff
 80011c8:	d024      	beq.n	8001214 <__aeabi_fsub+0x70>
 80011ca:	2201      	movs	r2, #1
 80011cc:	4051      	eors	r1, r2
 80011ce:	1a2a      	subs	r2, r5, r0
 80011d0:	428c      	cmp	r4, r1
 80011d2:	d00f      	beq.n	80011f4 <__aeabi_fsub+0x50>
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	dc00      	bgt.n	80011da <__aeabi_fsub+0x36>
 80011d8:	e16a      	b.n	80014b0 <__aeabi_fsub+0x30c>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d135      	bne.n	800124a <__aeabi_fsub+0xa6>
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_fsub+0x40>
 80011e2:	e0a2      	b.n	800132a <__aeabi_fsub+0x186>
 80011e4:	1e51      	subs	r1, r2, #1
 80011e6:	2a01      	cmp	r2, #1
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x48>
 80011ea:	e124      	b.n	8001436 <__aeabi_fsub+0x292>
 80011ec:	2aff      	cmp	r2, #255	@ 0xff
 80011ee:	d021      	beq.n	8001234 <__aeabi_fsub+0x90>
 80011f0:	000a      	movs	r2, r1
 80011f2:	e02f      	b.n	8001254 <__aeabi_fsub+0xb0>
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	dc00      	bgt.n	80011fa <__aeabi_fsub+0x56>
 80011f8:	e167      	b.n	80014ca <__aeabi_fsub+0x326>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d05e      	beq.n	80012bc <__aeabi_fsub+0x118>
 80011fe:	2dff      	cmp	r5, #255	@ 0xff
 8001200:	d018      	beq.n	8001234 <__aeabi_fsub+0x90>
 8001202:	2180      	movs	r1, #128	@ 0x80
 8001204:	04c9      	lsls	r1, r1, #19
 8001206:	430e      	orrs	r6, r1
 8001208:	2a1b      	cmp	r2, #27
 800120a:	dc00      	bgt.n	800120e <__aeabi_fsub+0x6a>
 800120c:	e076      	b.n	80012fc <__aeabi_fsub+0x158>
 800120e:	002a      	movs	r2, r5
 8001210:	3301      	adds	r3, #1
 8001212:	e032      	b.n	800127a <__aeabi_fsub+0xd6>
 8001214:	002a      	movs	r2, r5
 8001216:	3aff      	subs	r2, #255	@ 0xff
 8001218:	4691      	mov	r9, r2
 800121a:	2e00      	cmp	r6, #0
 800121c:	d042      	beq.n	80012a4 <__aeabi_fsub+0x100>
 800121e:	428c      	cmp	r4, r1
 8001220:	d055      	beq.n	80012ce <__aeabi_fsub+0x12a>
 8001222:	464a      	mov	r2, r9
 8001224:	2a00      	cmp	r2, #0
 8001226:	d100      	bne.n	800122a <__aeabi_fsub+0x86>
 8001228:	e09c      	b.n	8001364 <__aeabi_fsub+0x1c0>
 800122a:	2d00      	cmp	r5, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_fsub+0x8c>
 800122e:	e077      	b.n	8001320 <__aeabi_fsub+0x17c>
 8001230:	000c      	movs	r4, r1
 8001232:	0033      	movs	r3, r6
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d100      	bne.n	800123c <__aeabi_fsub+0x98>
 800123a:	e06e      	b.n	800131a <__aeabi_fsub+0x176>
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	03d2      	lsls	r2, r2, #15
 8001240:	4313      	orrs	r3, r2
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	20ff      	movs	r0, #255	@ 0xff
 8001246:	0a5b      	lsrs	r3, r3, #9
 8001248:	e024      	b.n	8001294 <__aeabi_fsub+0xf0>
 800124a:	2dff      	cmp	r5, #255	@ 0xff
 800124c:	d0f2      	beq.n	8001234 <__aeabi_fsub+0x90>
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	04c9      	lsls	r1, r1, #19
 8001252:	430e      	orrs	r6, r1
 8001254:	2101      	movs	r1, #1
 8001256:	2a1b      	cmp	r2, #27
 8001258:	dc08      	bgt.n	800126c <__aeabi_fsub+0xc8>
 800125a:	0031      	movs	r1, r6
 800125c:	2020      	movs	r0, #32
 800125e:	40d1      	lsrs	r1, r2
 8001260:	1a82      	subs	r2, r0, r2
 8001262:	4096      	lsls	r6, r2
 8001264:	0032      	movs	r2, r6
 8001266:	1e50      	subs	r0, r2, #1
 8001268:	4182      	sbcs	r2, r0
 800126a:	4311      	orrs	r1, r2
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	015a      	lsls	r2, r3, #5
 8001270:	d460      	bmi.n	8001334 <__aeabi_fsub+0x190>
 8001272:	2107      	movs	r1, #7
 8001274:	002a      	movs	r2, r5
 8001276:	4019      	ands	r1, r3
 8001278:	d057      	beq.n	800132a <__aeabi_fsub+0x186>
 800127a:	210f      	movs	r1, #15
 800127c:	4019      	ands	r1, r3
 800127e:	2904      	cmp	r1, #4
 8001280:	d000      	beq.n	8001284 <__aeabi_fsub+0xe0>
 8001282:	3304      	adds	r3, #4
 8001284:	0159      	lsls	r1, r3, #5
 8001286:	d550      	bpl.n	800132a <__aeabi_fsub+0x186>
 8001288:	1c50      	adds	r0, r2, #1
 800128a:	2afe      	cmp	r2, #254	@ 0xfe
 800128c:	d045      	beq.n	800131a <__aeabi_fsub+0x176>
 800128e:	019b      	lsls	r3, r3, #6
 8001290:	b2c0      	uxtb	r0, r0
 8001292:	0a5b      	lsrs	r3, r3, #9
 8001294:	05c0      	lsls	r0, r0, #23
 8001296:	4318      	orrs	r0, r3
 8001298:	07e4      	lsls	r4, r4, #31
 800129a:	4320      	orrs	r0, r4
 800129c:	bcc0      	pop	{r6, r7}
 800129e:	46b9      	mov	r9, r7
 80012a0:	46b0      	mov	r8, r6
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	2201      	movs	r2, #1
 80012a6:	4051      	eors	r1, r2
 80012a8:	428c      	cmp	r4, r1
 80012aa:	d1ba      	bne.n	8001222 <__aeabi_fsub+0x7e>
 80012ac:	464a      	mov	r2, r9
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d010      	beq.n	80012d4 <__aeabi_fsub+0x130>
 80012b2:	2d00      	cmp	r5, #0
 80012b4:	d100      	bne.n	80012b8 <__aeabi_fsub+0x114>
 80012b6:	e098      	b.n	80013ea <__aeabi_fsub+0x246>
 80012b8:	2300      	movs	r3, #0
 80012ba:	e7bb      	b.n	8001234 <__aeabi_fsub+0x90>
 80012bc:	2e00      	cmp	r6, #0
 80012be:	d034      	beq.n	800132a <__aeabi_fsub+0x186>
 80012c0:	1e51      	subs	r1, r2, #1
 80012c2:	2a01      	cmp	r2, #1
 80012c4:	d06e      	beq.n	80013a4 <__aeabi_fsub+0x200>
 80012c6:	2aff      	cmp	r2, #255	@ 0xff
 80012c8:	d0b4      	beq.n	8001234 <__aeabi_fsub+0x90>
 80012ca:	000a      	movs	r2, r1
 80012cc:	e79c      	b.n	8001208 <__aeabi_fsub+0x64>
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d000      	beq.n	80012d4 <__aeabi_fsub+0x130>
 80012d2:	e088      	b.n	80013e6 <__aeabi_fsub+0x242>
 80012d4:	20fe      	movs	r0, #254	@ 0xfe
 80012d6:	1c6a      	adds	r2, r5, #1
 80012d8:	4210      	tst	r0, r2
 80012da:	d000      	beq.n	80012de <__aeabi_fsub+0x13a>
 80012dc:	e092      	b.n	8001404 <__aeabi_fsub+0x260>
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_fsub+0x140>
 80012e2:	e0a4      	b.n	800142e <__aeabi_fsub+0x28a>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x146>
 80012e8:	e0cb      	b.n	8001482 <__aeabi_fsub+0x2de>
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_fsub+0x14c>
 80012ee:	e0ca      	b.n	8001486 <__aeabi_fsub+0x2e2>
 80012f0:	2200      	movs	r2, #0
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0a5b      	lsrs	r3, r3, #9
 80012f8:	b2d0      	uxtb	r0, r2
 80012fa:	e7cb      	b.n	8001294 <__aeabi_fsub+0xf0>
 80012fc:	0031      	movs	r1, r6
 80012fe:	2020      	movs	r0, #32
 8001300:	40d1      	lsrs	r1, r2
 8001302:	1a82      	subs	r2, r0, r2
 8001304:	4096      	lsls	r6, r2
 8001306:	0032      	movs	r2, r6
 8001308:	1e50      	subs	r0, r2, #1
 800130a:	4182      	sbcs	r2, r0
 800130c:	430a      	orrs	r2, r1
 800130e:	189b      	adds	r3, r3, r2
 8001310:	015a      	lsls	r2, r3, #5
 8001312:	d5ae      	bpl.n	8001272 <__aeabi_fsub+0xce>
 8001314:	1c6a      	adds	r2, r5, #1
 8001316:	2dfe      	cmp	r5, #254	@ 0xfe
 8001318:	d14a      	bne.n	80013b0 <__aeabi_fsub+0x20c>
 800131a:	20ff      	movs	r0, #255	@ 0xff
 800131c:	2300      	movs	r3, #0
 800131e:	e7b9      	b.n	8001294 <__aeabi_fsub+0xf0>
 8001320:	22ff      	movs	r2, #255	@ 0xff
 8001322:	2b00      	cmp	r3, #0
 8001324:	d14b      	bne.n	80013be <__aeabi_fsub+0x21a>
 8001326:	000c      	movs	r4, r1
 8001328:	0033      	movs	r3, r6
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	2aff      	cmp	r2, #255	@ 0xff
 800132e:	d100      	bne.n	8001332 <__aeabi_fsub+0x18e>
 8001330:	e781      	b.n	8001236 <__aeabi_fsub+0x92>
 8001332:	e7df      	b.n	80012f4 <__aeabi_fsub+0x150>
 8001334:	019f      	lsls	r7, r3, #6
 8001336:	09bf      	lsrs	r7, r7, #6
 8001338:	0038      	movs	r0, r7
 800133a:	f7ff f917 	bl	800056c <__clzsi2>
 800133e:	3805      	subs	r0, #5
 8001340:	4087      	lsls	r7, r0
 8001342:	4285      	cmp	r5, r0
 8001344:	dc21      	bgt.n	800138a <__aeabi_fsub+0x1e6>
 8001346:	003b      	movs	r3, r7
 8001348:	2120      	movs	r1, #32
 800134a:	1b42      	subs	r2, r0, r5
 800134c:	3201      	adds	r2, #1
 800134e:	40d3      	lsrs	r3, r2
 8001350:	1a8a      	subs	r2, r1, r2
 8001352:	4097      	lsls	r7, r2
 8001354:	1e7a      	subs	r2, r7, #1
 8001356:	4197      	sbcs	r7, r2
 8001358:	2200      	movs	r2, #0
 800135a:	433b      	orrs	r3, r7
 800135c:	0759      	lsls	r1, r3, #29
 800135e:	d000      	beq.n	8001362 <__aeabi_fsub+0x1be>
 8001360:	e78b      	b.n	800127a <__aeabi_fsub+0xd6>
 8001362:	e78f      	b.n	8001284 <__aeabi_fsub+0xe0>
 8001364:	20fe      	movs	r0, #254	@ 0xfe
 8001366:	1c6a      	adds	r2, r5, #1
 8001368:	4210      	tst	r0, r2
 800136a:	d112      	bne.n	8001392 <__aeabi_fsub+0x1ee>
 800136c:	2d00      	cmp	r5, #0
 800136e:	d152      	bne.n	8001416 <__aeabi_fsub+0x272>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d07c      	beq.n	800146e <__aeabi_fsub+0x2ca>
 8001374:	2e00      	cmp	r6, #0
 8001376:	d0bb      	beq.n	80012f0 <__aeabi_fsub+0x14c>
 8001378:	1b9a      	subs	r2, r3, r6
 800137a:	0150      	lsls	r0, r2, #5
 800137c:	d400      	bmi.n	8001380 <__aeabi_fsub+0x1dc>
 800137e:	e08b      	b.n	8001498 <__aeabi_fsub+0x2f4>
 8001380:	2401      	movs	r4, #1
 8001382:	2200      	movs	r2, #0
 8001384:	1af3      	subs	r3, r6, r3
 8001386:	400c      	ands	r4, r1
 8001388:	e7e8      	b.n	800135c <__aeabi_fsub+0x1b8>
 800138a:	4b56      	ldr	r3, [pc, #344]	@ (80014e4 <__aeabi_fsub+0x340>)
 800138c:	1a2a      	subs	r2, r5, r0
 800138e:	403b      	ands	r3, r7
 8001390:	e7e4      	b.n	800135c <__aeabi_fsub+0x1b8>
 8001392:	1b9f      	subs	r7, r3, r6
 8001394:	017a      	lsls	r2, r7, #5
 8001396:	d446      	bmi.n	8001426 <__aeabi_fsub+0x282>
 8001398:	2f00      	cmp	r7, #0
 800139a:	d1cd      	bne.n	8001338 <__aeabi_fsub+0x194>
 800139c:	2400      	movs	r4, #0
 800139e:	2000      	movs	r0, #0
 80013a0:	2300      	movs	r3, #0
 80013a2:	e777      	b.n	8001294 <__aeabi_fsub+0xf0>
 80013a4:	199b      	adds	r3, r3, r6
 80013a6:	2501      	movs	r5, #1
 80013a8:	3201      	adds	r2, #1
 80013aa:	0159      	lsls	r1, r3, #5
 80013ac:	d400      	bmi.n	80013b0 <__aeabi_fsub+0x20c>
 80013ae:	e760      	b.n	8001272 <__aeabi_fsub+0xce>
 80013b0:	2101      	movs	r1, #1
 80013b2:	484d      	ldr	r0, [pc, #308]	@ (80014e8 <__aeabi_fsub+0x344>)
 80013b4:	4019      	ands	r1, r3
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	4003      	ands	r3, r0
 80013ba:	430b      	orrs	r3, r1
 80013bc:	e7ce      	b.n	800135c <__aeabi_fsub+0x1b8>
 80013be:	1e57      	subs	r7, r2, #1
 80013c0:	2a01      	cmp	r2, #1
 80013c2:	d05a      	beq.n	800147a <__aeabi_fsub+0x2d6>
 80013c4:	000c      	movs	r4, r1
 80013c6:	2aff      	cmp	r2, #255	@ 0xff
 80013c8:	d033      	beq.n	8001432 <__aeabi_fsub+0x28e>
 80013ca:	2201      	movs	r2, #1
 80013cc:	2f1b      	cmp	r7, #27
 80013ce:	dc07      	bgt.n	80013e0 <__aeabi_fsub+0x23c>
 80013d0:	2120      	movs	r1, #32
 80013d2:	1bc9      	subs	r1, r1, r7
 80013d4:	001a      	movs	r2, r3
 80013d6:	408b      	lsls	r3, r1
 80013d8:	40fa      	lsrs	r2, r7
 80013da:	1e59      	subs	r1, r3, #1
 80013dc:	418b      	sbcs	r3, r1
 80013de:	431a      	orrs	r2, r3
 80013e0:	0005      	movs	r5, r0
 80013e2:	1ab3      	subs	r3, r6, r2
 80013e4:	e743      	b.n	800126e <__aeabi_fsub+0xca>
 80013e6:	2d00      	cmp	r5, #0
 80013e8:	d123      	bne.n	8001432 <__aeabi_fsub+0x28e>
 80013ea:	22ff      	movs	r2, #255	@ 0xff
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d09b      	beq.n	8001328 <__aeabi_fsub+0x184>
 80013f0:	1e51      	subs	r1, r2, #1
 80013f2:	2a01      	cmp	r2, #1
 80013f4:	d0d6      	beq.n	80013a4 <__aeabi_fsub+0x200>
 80013f6:	2aff      	cmp	r2, #255	@ 0xff
 80013f8:	d01b      	beq.n	8001432 <__aeabi_fsub+0x28e>
 80013fa:	291b      	cmp	r1, #27
 80013fc:	dd2c      	ble.n	8001458 <__aeabi_fsub+0x2b4>
 80013fe:	0002      	movs	r2, r0
 8001400:	1c73      	adds	r3, r6, #1
 8001402:	e73a      	b.n	800127a <__aeabi_fsub+0xd6>
 8001404:	2aff      	cmp	r2, #255	@ 0xff
 8001406:	d088      	beq.n	800131a <__aeabi_fsub+0x176>
 8001408:	199b      	adds	r3, r3, r6
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	0759      	lsls	r1, r3, #29
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x26e>
 8001410:	e733      	b.n	800127a <__aeabi_fsub+0xd6>
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	e76e      	b.n	80012f4 <__aeabi_fsub+0x150>
 8001416:	2b00      	cmp	r3, #0
 8001418:	d110      	bne.n	800143c <__aeabi_fsub+0x298>
 800141a:	2e00      	cmp	r6, #0
 800141c:	d043      	beq.n	80014a6 <__aeabi_fsub+0x302>
 800141e:	2401      	movs	r4, #1
 8001420:	0033      	movs	r3, r6
 8001422:	400c      	ands	r4, r1
 8001424:	e706      	b.n	8001234 <__aeabi_fsub+0x90>
 8001426:	2401      	movs	r4, #1
 8001428:	1af7      	subs	r7, r6, r3
 800142a:	400c      	ands	r4, r1
 800142c:	e784      	b.n	8001338 <__aeabi_fsub+0x194>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d104      	bne.n	800143c <__aeabi_fsub+0x298>
 8001432:	0033      	movs	r3, r6
 8001434:	e6fe      	b.n	8001234 <__aeabi_fsub+0x90>
 8001436:	2501      	movs	r5, #1
 8001438:	1b9b      	subs	r3, r3, r6
 800143a:	e718      	b.n	800126e <__aeabi_fsub+0xca>
 800143c:	2e00      	cmp	r6, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_fsub+0x29e>
 8001440:	e6f8      	b.n	8001234 <__aeabi_fsub+0x90>
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	03d2      	lsls	r2, r2, #15
 8001446:	4297      	cmp	r7, r2
 8001448:	d304      	bcc.n	8001454 <__aeabi_fsub+0x2b0>
 800144a:	4594      	cmp	ip, r2
 800144c:	d202      	bcs.n	8001454 <__aeabi_fsub+0x2b0>
 800144e:	2401      	movs	r4, #1
 8001450:	0033      	movs	r3, r6
 8001452:	400c      	ands	r4, r1
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	e6f1      	b.n	800123c <__aeabi_fsub+0x98>
 8001458:	001a      	movs	r2, r3
 800145a:	2520      	movs	r5, #32
 800145c:	40ca      	lsrs	r2, r1
 800145e:	1a69      	subs	r1, r5, r1
 8001460:	408b      	lsls	r3, r1
 8001462:	1e59      	subs	r1, r3, #1
 8001464:	418b      	sbcs	r3, r1
 8001466:	4313      	orrs	r3, r2
 8001468:	0005      	movs	r5, r0
 800146a:	199b      	adds	r3, r3, r6
 800146c:	e750      	b.n	8001310 <__aeabi_fsub+0x16c>
 800146e:	2e00      	cmp	r6, #0
 8001470:	d094      	beq.n	800139c <__aeabi_fsub+0x1f8>
 8001472:	2401      	movs	r4, #1
 8001474:	0033      	movs	r3, r6
 8001476:	400c      	ands	r4, r1
 8001478:	e73a      	b.n	80012f0 <__aeabi_fsub+0x14c>
 800147a:	000c      	movs	r4, r1
 800147c:	2501      	movs	r5, #1
 800147e:	1af3      	subs	r3, r6, r3
 8001480:	e6f5      	b.n	800126e <__aeabi_fsub+0xca>
 8001482:	0033      	movs	r3, r6
 8001484:	e734      	b.n	80012f0 <__aeabi_fsub+0x14c>
 8001486:	199b      	adds	r3, r3, r6
 8001488:	2200      	movs	r2, #0
 800148a:	0159      	lsls	r1, r3, #5
 800148c:	d5c1      	bpl.n	8001412 <__aeabi_fsub+0x26e>
 800148e:	4a15      	ldr	r2, [pc, #84]	@ (80014e4 <__aeabi_fsub+0x340>)
 8001490:	4013      	ands	r3, r2
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	2201      	movs	r2, #1
 8001496:	e72d      	b.n	80012f4 <__aeabi_fsub+0x150>
 8001498:	2a00      	cmp	r2, #0
 800149a:	d100      	bne.n	800149e <__aeabi_fsub+0x2fa>
 800149c:	e77e      	b.n	800139c <__aeabi_fsub+0x1f8>
 800149e:	0013      	movs	r3, r2
 80014a0:	2200      	movs	r2, #0
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	e726      	b.n	80012f4 <__aeabi_fsub+0x150>
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	2400      	movs	r4, #0
 80014aa:	20ff      	movs	r0, #255	@ 0xff
 80014ac:	03db      	lsls	r3, r3, #15
 80014ae:	e6f1      	b.n	8001294 <__aeabi_fsub+0xf0>
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_fsub+0x312>
 80014b4:	e756      	b.n	8001364 <__aeabi_fsub+0x1c0>
 80014b6:	1b47      	subs	r7, r0, r5
 80014b8:	003a      	movs	r2, r7
 80014ba:	2d00      	cmp	r5, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_fsub+0x31c>
 80014be:	e730      	b.n	8001322 <__aeabi_fsub+0x17e>
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	04d2      	lsls	r2, r2, #19
 80014c4:	000c      	movs	r4, r1
 80014c6:	4313      	orrs	r3, r2
 80014c8:	e77f      	b.n	80013ca <__aeabi_fsub+0x226>
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_fsub+0x32c>
 80014ce:	e701      	b.n	80012d4 <__aeabi_fsub+0x130>
 80014d0:	1b41      	subs	r1, r0, r5
 80014d2:	2d00      	cmp	r5, #0
 80014d4:	d101      	bne.n	80014da <__aeabi_fsub+0x336>
 80014d6:	000a      	movs	r2, r1
 80014d8:	e788      	b.n	80013ec <__aeabi_fsub+0x248>
 80014da:	2280      	movs	r2, #128	@ 0x80
 80014dc:	04d2      	lsls	r2, r2, #19
 80014de:	4313      	orrs	r3, r2
 80014e0:	e78b      	b.n	80013fa <__aeabi_fsub+0x256>
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	fbffffff 	.word	0xfbffffff
 80014e8:	7dffffff 	.word	0x7dffffff

080014ec <__aeabi_fcmpun>:
 80014ec:	0243      	lsls	r3, r0, #9
 80014ee:	024a      	lsls	r2, r1, #9
 80014f0:	0040      	lsls	r0, r0, #1
 80014f2:	0049      	lsls	r1, r1, #1
 80014f4:	0a5b      	lsrs	r3, r3, #9
 80014f6:	0a52      	lsrs	r2, r2, #9
 80014f8:	0e09      	lsrs	r1, r1, #24
 80014fa:	0e00      	lsrs	r0, r0, #24
 80014fc:	28ff      	cmp	r0, #255	@ 0xff
 80014fe:	d006      	beq.n	800150e <__aeabi_fcmpun+0x22>
 8001500:	2000      	movs	r0, #0
 8001502:	29ff      	cmp	r1, #255	@ 0xff
 8001504:	d102      	bne.n	800150c <__aeabi_fcmpun+0x20>
 8001506:	1e53      	subs	r3, r2, #1
 8001508:	419a      	sbcs	r2, r3
 800150a:	0010      	movs	r0, r2
 800150c:	4770      	bx	lr
 800150e:	38fe      	subs	r0, #254	@ 0xfe
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1fb      	bne.n	800150c <__aeabi_fcmpun+0x20>
 8001514:	e7f4      	b.n	8001500 <__aeabi_fcmpun+0x14>
 8001516:	46c0      	nop			@ (mov r8, r8)

08001518 <__aeabi_f2iz>:
 8001518:	0241      	lsls	r1, r0, #9
 800151a:	0042      	lsls	r2, r0, #1
 800151c:	0fc3      	lsrs	r3, r0, #31
 800151e:	0a49      	lsrs	r1, r1, #9
 8001520:	2000      	movs	r0, #0
 8001522:	0e12      	lsrs	r2, r2, #24
 8001524:	2a7e      	cmp	r2, #126	@ 0x7e
 8001526:	dd03      	ble.n	8001530 <__aeabi_f2iz+0x18>
 8001528:	2a9d      	cmp	r2, #157	@ 0x9d
 800152a:	dd02      	ble.n	8001532 <__aeabi_f2iz+0x1a>
 800152c:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <__aeabi_f2iz+0x3c>)
 800152e:	1898      	adds	r0, r3, r2
 8001530:	4770      	bx	lr
 8001532:	2080      	movs	r0, #128	@ 0x80
 8001534:	0400      	lsls	r0, r0, #16
 8001536:	4301      	orrs	r1, r0
 8001538:	2a95      	cmp	r2, #149	@ 0x95
 800153a:	dc07      	bgt.n	800154c <__aeabi_f2iz+0x34>
 800153c:	2096      	movs	r0, #150	@ 0x96
 800153e:	1a82      	subs	r2, r0, r2
 8001540:	40d1      	lsrs	r1, r2
 8001542:	4248      	negs	r0, r1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f3      	bne.n	8001530 <__aeabi_f2iz+0x18>
 8001548:	0008      	movs	r0, r1
 800154a:	e7f1      	b.n	8001530 <__aeabi_f2iz+0x18>
 800154c:	3a96      	subs	r2, #150	@ 0x96
 800154e:	4091      	lsls	r1, r2
 8001550:	e7f7      	b.n	8001542 <__aeabi_f2iz+0x2a>
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	7fffffff 	.word	0x7fffffff

08001558 <__aeabi_i2f>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	2800      	cmp	r0, #0
 800155c:	d013      	beq.n	8001586 <__aeabi_i2f+0x2e>
 800155e:	17c3      	asrs	r3, r0, #31
 8001560:	18c5      	adds	r5, r0, r3
 8001562:	405d      	eors	r5, r3
 8001564:	0fc4      	lsrs	r4, r0, #31
 8001566:	0028      	movs	r0, r5
 8001568:	f7ff f800 	bl	800056c <__clzsi2>
 800156c:	239e      	movs	r3, #158	@ 0x9e
 800156e:	0001      	movs	r1, r0
 8001570:	1a1b      	subs	r3, r3, r0
 8001572:	2b96      	cmp	r3, #150	@ 0x96
 8001574:	dc0f      	bgt.n	8001596 <__aeabi_i2f+0x3e>
 8001576:	2808      	cmp	r0, #8
 8001578:	d034      	beq.n	80015e4 <__aeabi_i2f+0x8c>
 800157a:	3908      	subs	r1, #8
 800157c:	408d      	lsls	r5, r1
 800157e:	026d      	lsls	r5, r5, #9
 8001580:	0a6d      	lsrs	r5, r5, #9
 8001582:	b2d8      	uxtb	r0, r3
 8001584:	e002      	b.n	800158c <__aeabi_i2f+0x34>
 8001586:	2400      	movs	r4, #0
 8001588:	2000      	movs	r0, #0
 800158a:	2500      	movs	r5, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4328      	orrs	r0, r5
 8001590:	07e4      	lsls	r4, r4, #31
 8001592:	4320      	orrs	r0, r4
 8001594:	bd70      	pop	{r4, r5, r6, pc}
 8001596:	2b99      	cmp	r3, #153	@ 0x99
 8001598:	dc16      	bgt.n	80015c8 <__aeabi_i2f+0x70>
 800159a:	1f42      	subs	r2, r0, #5
 800159c:	2805      	cmp	r0, #5
 800159e:	d000      	beq.n	80015a2 <__aeabi_i2f+0x4a>
 80015a0:	4095      	lsls	r5, r2
 80015a2:	002a      	movs	r2, r5
 80015a4:	4811      	ldr	r0, [pc, #68]	@ (80015ec <__aeabi_i2f+0x94>)
 80015a6:	4002      	ands	r2, r0
 80015a8:	076e      	lsls	r6, r5, #29
 80015aa:	d009      	beq.n	80015c0 <__aeabi_i2f+0x68>
 80015ac:	260f      	movs	r6, #15
 80015ae:	4035      	ands	r5, r6
 80015b0:	2d04      	cmp	r5, #4
 80015b2:	d005      	beq.n	80015c0 <__aeabi_i2f+0x68>
 80015b4:	3204      	adds	r2, #4
 80015b6:	0155      	lsls	r5, r2, #5
 80015b8:	d502      	bpl.n	80015c0 <__aeabi_i2f+0x68>
 80015ba:	239f      	movs	r3, #159	@ 0x9f
 80015bc:	4002      	ands	r2, r0
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	0192      	lsls	r2, r2, #6
 80015c2:	0a55      	lsrs	r5, r2, #9
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	e7e1      	b.n	800158c <__aeabi_i2f+0x34>
 80015c8:	2205      	movs	r2, #5
 80015ca:	1a12      	subs	r2, r2, r0
 80015cc:	0028      	movs	r0, r5
 80015ce:	40d0      	lsrs	r0, r2
 80015d0:	0002      	movs	r2, r0
 80015d2:	0008      	movs	r0, r1
 80015d4:	301b      	adds	r0, #27
 80015d6:	4085      	lsls	r5, r0
 80015d8:	0028      	movs	r0, r5
 80015da:	1e45      	subs	r5, r0, #1
 80015dc:	41a8      	sbcs	r0, r5
 80015de:	4302      	orrs	r2, r0
 80015e0:	0015      	movs	r5, r2
 80015e2:	e7de      	b.n	80015a2 <__aeabi_i2f+0x4a>
 80015e4:	026d      	lsls	r5, r5, #9
 80015e6:	2096      	movs	r0, #150	@ 0x96
 80015e8:	0a6d      	lsrs	r5, r5, #9
 80015ea:	e7cf      	b.n	800158c <__aeabi_i2f+0x34>
 80015ec:	fbffffff 	.word	0xfbffffff

080015f0 <__aeabi_ui2f>:
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	1e04      	subs	r4, r0, #0
 80015f4:	d00e      	beq.n	8001614 <__aeabi_ui2f+0x24>
 80015f6:	f7fe ffb9 	bl	800056c <__clzsi2>
 80015fa:	239e      	movs	r3, #158	@ 0x9e
 80015fc:	0001      	movs	r1, r0
 80015fe:	1a1b      	subs	r3, r3, r0
 8001600:	2b96      	cmp	r3, #150	@ 0x96
 8001602:	dc0c      	bgt.n	800161e <__aeabi_ui2f+0x2e>
 8001604:	2808      	cmp	r0, #8
 8001606:	d02f      	beq.n	8001668 <__aeabi_ui2f+0x78>
 8001608:	3908      	subs	r1, #8
 800160a:	408c      	lsls	r4, r1
 800160c:	0264      	lsls	r4, r4, #9
 800160e:	0a64      	lsrs	r4, r4, #9
 8001610:	b2d8      	uxtb	r0, r3
 8001612:	e001      	b.n	8001618 <__aeabi_ui2f+0x28>
 8001614:	2000      	movs	r0, #0
 8001616:	2400      	movs	r4, #0
 8001618:	05c0      	lsls	r0, r0, #23
 800161a:	4320      	orrs	r0, r4
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	2b99      	cmp	r3, #153	@ 0x99
 8001620:	dc16      	bgt.n	8001650 <__aeabi_ui2f+0x60>
 8001622:	1f42      	subs	r2, r0, #5
 8001624:	2805      	cmp	r0, #5
 8001626:	d000      	beq.n	800162a <__aeabi_ui2f+0x3a>
 8001628:	4094      	lsls	r4, r2
 800162a:	0022      	movs	r2, r4
 800162c:	4810      	ldr	r0, [pc, #64]	@ (8001670 <__aeabi_ui2f+0x80>)
 800162e:	4002      	ands	r2, r0
 8001630:	0765      	lsls	r5, r4, #29
 8001632:	d009      	beq.n	8001648 <__aeabi_ui2f+0x58>
 8001634:	250f      	movs	r5, #15
 8001636:	402c      	ands	r4, r5
 8001638:	2c04      	cmp	r4, #4
 800163a:	d005      	beq.n	8001648 <__aeabi_ui2f+0x58>
 800163c:	3204      	adds	r2, #4
 800163e:	0154      	lsls	r4, r2, #5
 8001640:	d502      	bpl.n	8001648 <__aeabi_ui2f+0x58>
 8001642:	239f      	movs	r3, #159	@ 0x9f
 8001644:	4002      	ands	r2, r0
 8001646:	1a5b      	subs	r3, r3, r1
 8001648:	0192      	lsls	r2, r2, #6
 800164a:	0a54      	lsrs	r4, r2, #9
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	e7e3      	b.n	8001618 <__aeabi_ui2f+0x28>
 8001650:	0002      	movs	r2, r0
 8001652:	0020      	movs	r0, r4
 8001654:	321b      	adds	r2, #27
 8001656:	4090      	lsls	r0, r2
 8001658:	0002      	movs	r2, r0
 800165a:	1e50      	subs	r0, r2, #1
 800165c:	4182      	sbcs	r2, r0
 800165e:	2005      	movs	r0, #5
 8001660:	1a40      	subs	r0, r0, r1
 8001662:	40c4      	lsrs	r4, r0
 8001664:	4314      	orrs	r4, r2
 8001666:	e7e0      	b.n	800162a <__aeabi_ui2f+0x3a>
 8001668:	0264      	lsls	r4, r4, #9
 800166a:	2096      	movs	r0, #150	@ 0x96
 800166c:	0a64      	lsrs	r4, r4, #9
 800166e:	e7d3      	b.n	8001618 <__aeabi_ui2f+0x28>
 8001670:	fbffffff 	.word	0xfbffffff

08001674 <__aeabi_dadd>:
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	4645      	mov	r5, r8
 800167c:	46de      	mov	lr, fp
 800167e:	b5e0      	push	{r5, r6, r7, lr}
 8001680:	b083      	sub	sp, #12
 8001682:	9000      	str	r0, [sp, #0]
 8001684:	9101      	str	r1, [sp, #4]
 8001686:	030c      	lsls	r4, r1, #12
 8001688:	004f      	lsls	r7, r1, #1
 800168a:	0fce      	lsrs	r6, r1, #31
 800168c:	0a61      	lsrs	r1, r4, #9
 800168e:	9c00      	ldr	r4, [sp, #0]
 8001690:	031d      	lsls	r5, r3, #12
 8001692:	0f64      	lsrs	r4, r4, #29
 8001694:	430c      	orrs	r4, r1
 8001696:	9900      	ldr	r1, [sp, #0]
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	00c8      	lsls	r0, r1, #3
 800169e:	0059      	lsls	r1, r3, #1
 80016a0:	0d4b      	lsrs	r3, r1, #21
 80016a2:	4699      	mov	r9, r3
 80016a4:	9a00      	ldr	r2, [sp, #0]
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	0a6d      	lsrs	r5, r5, #9
 80016aa:	0fd9      	lsrs	r1, r3, #31
 80016ac:	0f53      	lsrs	r3, r2, #29
 80016ae:	432b      	orrs	r3, r5
 80016b0:	469a      	mov	sl, r3
 80016b2:	9b00      	ldr	r3, [sp, #0]
 80016b4:	0d7f      	lsrs	r7, r7, #21
 80016b6:	00da      	lsls	r2, r3, #3
 80016b8:	4694      	mov	ip, r2
 80016ba:	464a      	mov	r2, r9
 80016bc:	46b0      	mov	r8, r6
 80016be:	1aba      	subs	r2, r7, r2
 80016c0:	428e      	cmp	r6, r1
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dadd+0x52>
 80016c4:	e0b0      	b.n	8001828 <__aeabi_dadd+0x1b4>
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	dc00      	bgt.n	80016cc <__aeabi_dadd+0x58>
 80016ca:	e078      	b.n	80017be <__aeabi_dadd+0x14a>
 80016cc:	4649      	mov	r1, r9
 80016ce:	2900      	cmp	r1, #0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x60>
 80016d2:	e0e9      	b.n	80018a8 <__aeabi_dadd+0x234>
 80016d4:	49c9      	ldr	r1, [pc, #804]	@ (80019fc <__aeabi_dadd+0x388>)
 80016d6:	428f      	cmp	r7, r1
 80016d8:	d100      	bne.n	80016dc <__aeabi_dadd+0x68>
 80016da:	e195      	b.n	8001a08 <__aeabi_dadd+0x394>
 80016dc:	2501      	movs	r5, #1
 80016de:	2a38      	cmp	r2, #56	@ 0x38
 80016e0:	dc16      	bgt.n	8001710 <__aeabi_dadd+0x9c>
 80016e2:	2180      	movs	r1, #128	@ 0x80
 80016e4:	4653      	mov	r3, sl
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	430b      	orrs	r3, r1
 80016ea:	469a      	mov	sl, r3
 80016ec:	2a1f      	cmp	r2, #31
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dadd+0x7e>
 80016f0:	e1e7      	b.n	8001ac2 <__aeabi_dadd+0x44e>
 80016f2:	2120      	movs	r1, #32
 80016f4:	4655      	mov	r5, sl
 80016f6:	1a8b      	subs	r3, r1, r2
 80016f8:	4661      	mov	r1, ip
 80016fa:	409d      	lsls	r5, r3
 80016fc:	40d1      	lsrs	r1, r2
 80016fe:	430d      	orrs	r5, r1
 8001700:	4661      	mov	r1, ip
 8001702:	4099      	lsls	r1, r3
 8001704:	1e4b      	subs	r3, r1, #1
 8001706:	4199      	sbcs	r1, r3
 8001708:	4653      	mov	r3, sl
 800170a:	40d3      	lsrs	r3, r2
 800170c:	430d      	orrs	r5, r1
 800170e:	1ae4      	subs	r4, r4, r3
 8001710:	1b45      	subs	r5, r0, r5
 8001712:	42a8      	cmp	r0, r5
 8001714:	4180      	sbcs	r0, r0
 8001716:	4240      	negs	r0, r0
 8001718:	1a24      	subs	r4, r4, r0
 800171a:	0223      	lsls	r3, r4, #8
 800171c:	d400      	bmi.n	8001720 <__aeabi_dadd+0xac>
 800171e:	e10f      	b.n	8001940 <__aeabi_dadd+0x2cc>
 8001720:	0264      	lsls	r4, r4, #9
 8001722:	0a64      	lsrs	r4, r4, #9
 8001724:	2c00      	cmp	r4, #0
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0xb6>
 8001728:	e139      	b.n	800199e <__aeabi_dadd+0x32a>
 800172a:	0020      	movs	r0, r4
 800172c:	f7fe ff1e 	bl	800056c <__clzsi2>
 8001730:	0003      	movs	r3, r0
 8001732:	3b08      	subs	r3, #8
 8001734:	2120      	movs	r1, #32
 8001736:	0028      	movs	r0, r5
 8001738:	1aca      	subs	r2, r1, r3
 800173a:	40d0      	lsrs	r0, r2
 800173c:	409c      	lsls	r4, r3
 800173e:	0002      	movs	r2, r0
 8001740:	409d      	lsls	r5, r3
 8001742:	4322      	orrs	r2, r4
 8001744:	429f      	cmp	r7, r3
 8001746:	dd00      	ble.n	800174a <__aeabi_dadd+0xd6>
 8001748:	e173      	b.n	8001a32 <__aeabi_dadd+0x3be>
 800174a:	1bd8      	subs	r0, r3, r7
 800174c:	3001      	adds	r0, #1
 800174e:	1a09      	subs	r1, r1, r0
 8001750:	002c      	movs	r4, r5
 8001752:	408d      	lsls	r5, r1
 8001754:	40c4      	lsrs	r4, r0
 8001756:	1e6b      	subs	r3, r5, #1
 8001758:	419d      	sbcs	r5, r3
 800175a:	0013      	movs	r3, r2
 800175c:	40c2      	lsrs	r2, r0
 800175e:	408b      	lsls	r3, r1
 8001760:	4325      	orrs	r5, r4
 8001762:	2700      	movs	r7, #0
 8001764:	0014      	movs	r4, r2
 8001766:	431d      	orrs	r5, r3
 8001768:	076b      	lsls	r3, r5, #29
 800176a:	d009      	beq.n	8001780 <__aeabi_dadd+0x10c>
 800176c:	230f      	movs	r3, #15
 800176e:	402b      	ands	r3, r5
 8001770:	2b04      	cmp	r3, #4
 8001772:	d005      	beq.n	8001780 <__aeabi_dadd+0x10c>
 8001774:	1d2b      	adds	r3, r5, #4
 8001776:	42ab      	cmp	r3, r5
 8001778:	41ad      	sbcs	r5, r5
 800177a:	426d      	negs	r5, r5
 800177c:	1964      	adds	r4, r4, r5
 800177e:	001d      	movs	r5, r3
 8001780:	0223      	lsls	r3, r4, #8
 8001782:	d400      	bmi.n	8001786 <__aeabi_dadd+0x112>
 8001784:	e12d      	b.n	80019e2 <__aeabi_dadd+0x36e>
 8001786:	4a9d      	ldr	r2, [pc, #628]	@ (80019fc <__aeabi_dadd+0x388>)
 8001788:	3701      	adds	r7, #1
 800178a:	4297      	cmp	r7, r2
 800178c:	d100      	bne.n	8001790 <__aeabi_dadd+0x11c>
 800178e:	e0d3      	b.n	8001938 <__aeabi_dadd+0x2c4>
 8001790:	4646      	mov	r6, r8
 8001792:	499b      	ldr	r1, [pc, #620]	@ (8001a00 <__aeabi_dadd+0x38c>)
 8001794:	08ed      	lsrs	r5, r5, #3
 8001796:	4021      	ands	r1, r4
 8001798:	074a      	lsls	r2, r1, #29
 800179a:	432a      	orrs	r2, r5
 800179c:	057c      	lsls	r4, r7, #21
 800179e:	024d      	lsls	r5, r1, #9
 80017a0:	0b2d      	lsrs	r5, r5, #12
 80017a2:	0d64      	lsrs	r4, r4, #21
 80017a4:	0524      	lsls	r4, r4, #20
 80017a6:	432c      	orrs	r4, r5
 80017a8:	07f6      	lsls	r6, r6, #31
 80017aa:	4334      	orrs	r4, r6
 80017ac:	0010      	movs	r0, r2
 80017ae:	0021      	movs	r1, r4
 80017b0:	b003      	add	sp, #12
 80017b2:	bcf0      	pop	{r4, r5, r6, r7}
 80017b4:	46bb      	mov	fp, r7
 80017b6:	46b2      	mov	sl, r6
 80017b8:	46a9      	mov	r9, r5
 80017ba:	46a0      	mov	r8, r4
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017be:	2a00      	cmp	r2, #0
 80017c0:	d100      	bne.n	80017c4 <__aeabi_dadd+0x150>
 80017c2:	e084      	b.n	80018ce <__aeabi_dadd+0x25a>
 80017c4:	464a      	mov	r2, r9
 80017c6:	1bd2      	subs	r2, r2, r7
 80017c8:	2f00      	cmp	r7, #0
 80017ca:	d000      	beq.n	80017ce <__aeabi_dadd+0x15a>
 80017cc:	e16d      	b.n	8001aaa <__aeabi_dadd+0x436>
 80017ce:	0025      	movs	r5, r4
 80017d0:	4305      	orrs	r5, r0
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x162>
 80017d4:	e127      	b.n	8001a26 <__aeabi_dadd+0x3b2>
 80017d6:	1e56      	subs	r6, r2, #1
 80017d8:	2a01      	cmp	r2, #1
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x16a>
 80017dc:	e23b      	b.n	8001c56 <__aeabi_dadd+0x5e2>
 80017de:	4d87      	ldr	r5, [pc, #540]	@ (80019fc <__aeabi_dadd+0x388>)
 80017e0:	42aa      	cmp	r2, r5
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dadd+0x172>
 80017e4:	e26a      	b.n	8001cbc <__aeabi_dadd+0x648>
 80017e6:	2501      	movs	r5, #1
 80017e8:	2e38      	cmp	r6, #56	@ 0x38
 80017ea:	dc12      	bgt.n	8001812 <__aeabi_dadd+0x19e>
 80017ec:	0032      	movs	r2, r6
 80017ee:	2a1f      	cmp	r2, #31
 80017f0:	dd00      	ble.n	80017f4 <__aeabi_dadd+0x180>
 80017f2:	e1f8      	b.n	8001be6 <__aeabi_dadd+0x572>
 80017f4:	2620      	movs	r6, #32
 80017f6:	0025      	movs	r5, r4
 80017f8:	1ab6      	subs	r6, r6, r2
 80017fa:	0007      	movs	r7, r0
 80017fc:	4653      	mov	r3, sl
 80017fe:	40b0      	lsls	r0, r6
 8001800:	40d4      	lsrs	r4, r2
 8001802:	40b5      	lsls	r5, r6
 8001804:	40d7      	lsrs	r7, r2
 8001806:	1e46      	subs	r6, r0, #1
 8001808:	41b0      	sbcs	r0, r6
 800180a:	1b1b      	subs	r3, r3, r4
 800180c:	469a      	mov	sl, r3
 800180e:	433d      	orrs	r5, r7
 8001810:	4305      	orrs	r5, r0
 8001812:	4662      	mov	r2, ip
 8001814:	1b55      	subs	r5, r2, r5
 8001816:	45ac      	cmp	ip, r5
 8001818:	4192      	sbcs	r2, r2
 800181a:	4653      	mov	r3, sl
 800181c:	4252      	negs	r2, r2
 800181e:	000e      	movs	r6, r1
 8001820:	464f      	mov	r7, r9
 8001822:	4688      	mov	r8, r1
 8001824:	1a9c      	subs	r4, r3, r2
 8001826:	e778      	b.n	800171a <__aeabi_dadd+0xa6>
 8001828:	2a00      	cmp	r2, #0
 800182a:	dc00      	bgt.n	800182e <__aeabi_dadd+0x1ba>
 800182c:	e08e      	b.n	800194c <__aeabi_dadd+0x2d8>
 800182e:	4649      	mov	r1, r9
 8001830:	2900      	cmp	r1, #0
 8001832:	d175      	bne.n	8001920 <__aeabi_dadd+0x2ac>
 8001834:	4661      	mov	r1, ip
 8001836:	4653      	mov	r3, sl
 8001838:	4319      	orrs	r1, r3
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x1ca>
 800183c:	e0f6      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 800183e:	1e51      	subs	r1, r2, #1
 8001840:	2a01      	cmp	r2, #1
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x1d2>
 8001844:	e191      	b.n	8001b6a <__aeabi_dadd+0x4f6>
 8001846:	4d6d      	ldr	r5, [pc, #436]	@ (80019fc <__aeabi_dadd+0x388>)
 8001848:	42aa      	cmp	r2, r5
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x1da>
 800184c:	e0dc      	b.n	8001a08 <__aeabi_dadd+0x394>
 800184e:	2501      	movs	r5, #1
 8001850:	2938      	cmp	r1, #56	@ 0x38
 8001852:	dc14      	bgt.n	800187e <__aeabi_dadd+0x20a>
 8001854:	000a      	movs	r2, r1
 8001856:	2a1f      	cmp	r2, #31
 8001858:	dd00      	ble.n	800185c <__aeabi_dadd+0x1e8>
 800185a:	e1a2      	b.n	8001ba2 <__aeabi_dadd+0x52e>
 800185c:	2120      	movs	r1, #32
 800185e:	4653      	mov	r3, sl
 8001860:	1a89      	subs	r1, r1, r2
 8001862:	408b      	lsls	r3, r1
 8001864:	001d      	movs	r5, r3
 8001866:	4663      	mov	r3, ip
 8001868:	40d3      	lsrs	r3, r2
 800186a:	431d      	orrs	r5, r3
 800186c:	4663      	mov	r3, ip
 800186e:	408b      	lsls	r3, r1
 8001870:	0019      	movs	r1, r3
 8001872:	1e4b      	subs	r3, r1, #1
 8001874:	4199      	sbcs	r1, r3
 8001876:	4653      	mov	r3, sl
 8001878:	40d3      	lsrs	r3, r2
 800187a:	430d      	orrs	r5, r1
 800187c:	18e4      	adds	r4, r4, r3
 800187e:	182d      	adds	r5, r5, r0
 8001880:	4285      	cmp	r5, r0
 8001882:	4180      	sbcs	r0, r0
 8001884:	4240      	negs	r0, r0
 8001886:	1824      	adds	r4, r4, r0
 8001888:	0223      	lsls	r3, r4, #8
 800188a:	d559      	bpl.n	8001940 <__aeabi_dadd+0x2cc>
 800188c:	4b5b      	ldr	r3, [pc, #364]	@ (80019fc <__aeabi_dadd+0x388>)
 800188e:	3701      	adds	r7, #1
 8001890:	429f      	cmp	r7, r3
 8001892:	d051      	beq.n	8001938 <__aeabi_dadd+0x2c4>
 8001894:	2101      	movs	r1, #1
 8001896:	4b5a      	ldr	r3, [pc, #360]	@ (8001a00 <__aeabi_dadd+0x38c>)
 8001898:	086a      	lsrs	r2, r5, #1
 800189a:	401c      	ands	r4, r3
 800189c:	4029      	ands	r1, r5
 800189e:	430a      	orrs	r2, r1
 80018a0:	07e5      	lsls	r5, r4, #31
 80018a2:	4315      	orrs	r5, r2
 80018a4:	0864      	lsrs	r4, r4, #1
 80018a6:	e75f      	b.n	8001768 <__aeabi_dadd+0xf4>
 80018a8:	4661      	mov	r1, ip
 80018aa:	4653      	mov	r3, sl
 80018ac:	4319      	orrs	r1, r3
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x23e>
 80018b0:	e0bc      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 80018b2:	1e51      	subs	r1, r2, #1
 80018b4:	2a01      	cmp	r2, #1
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x246>
 80018b8:	e164      	b.n	8001b84 <__aeabi_dadd+0x510>
 80018ba:	4d50      	ldr	r5, [pc, #320]	@ (80019fc <__aeabi_dadd+0x388>)
 80018bc:	42aa      	cmp	r2, r5
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x24e>
 80018c0:	e16a      	b.n	8001b98 <__aeabi_dadd+0x524>
 80018c2:	2501      	movs	r5, #1
 80018c4:	2938      	cmp	r1, #56	@ 0x38
 80018c6:	dd00      	ble.n	80018ca <__aeabi_dadd+0x256>
 80018c8:	e722      	b.n	8001710 <__aeabi_dadd+0x9c>
 80018ca:	000a      	movs	r2, r1
 80018cc:	e70e      	b.n	80016ec <__aeabi_dadd+0x78>
 80018ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001a04 <__aeabi_dadd+0x390>)
 80018d0:	1c7d      	adds	r5, r7, #1
 80018d2:	4215      	tst	r5, r2
 80018d4:	d000      	beq.n	80018d8 <__aeabi_dadd+0x264>
 80018d6:	e0d0      	b.n	8001a7a <__aeabi_dadd+0x406>
 80018d8:	0025      	movs	r5, r4
 80018da:	4662      	mov	r2, ip
 80018dc:	4653      	mov	r3, sl
 80018de:	4305      	orrs	r5, r0
 80018e0:	431a      	orrs	r2, r3
 80018e2:	2f00      	cmp	r7, #0
 80018e4:	d000      	beq.n	80018e8 <__aeabi_dadd+0x274>
 80018e6:	e137      	b.n	8001b58 <__aeabi_dadd+0x4e4>
 80018e8:	2d00      	cmp	r5, #0
 80018ea:	d100      	bne.n	80018ee <__aeabi_dadd+0x27a>
 80018ec:	e1a8      	b.n	8001c40 <__aeabi_dadd+0x5cc>
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dadd+0x280>
 80018f2:	e16a      	b.n	8001bca <__aeabi_dadd+0x556>
 80018f4:	4663      	mov	r3, ip
 80018f6:	1ac5      	subs	r5, r0, r3
 80018f8:	4653      	mov	r3, sl
 80018fa:	1ae2      	subs	r2, r4, r3
 80018fc:	42a8      	cmp	r0, r5
 80018fe:	419b      	sbcs	r3, r3
 8001900:	425b      	negs	r3, r3
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	021a      	lsls	r2, r3, #8
 8001906:	d400      	bmi.n	800190a <__aeabi_dadd+0x296>
 8001908:	e203      	b.n	8001d12 <__aeabi_dadd+0x69e>
 800190a:	4663      	mov	r3, ip
 800190c:	1a1d      	subs	r5, r3, r0
 800190e:	45ac      	cmp	ip, r5
 8001910:	4192      	sbcs	r2, r2
 8001912:	4653      	mov	r3, sl
 8001914:	4252      	negs	r2, r2
 8001916:	1b1c      	subs	r4, r3, r4
 8001918:	000e      	movs	r6, r1
 800191a:	4688      	mov	r8, r1
 800191c:	1aa4      	subs	r4, r4, r2
 800191e:	e723      	b.n	8001768 <__aeabi_dadd+0xf4>
 8001920:	4936      	ldr	r1, [pc, #216]	@ (80019fc <__aeabi_dadd+0x388>)
 8001922:	428f      	cmp	r7, r1
 8001924:	d070      	beq.n	8001a08 <__aeabi_dadd+0x394>
 8001926:	2501      	movs	r5, #1
 8001928:	2a38      	cmp	r2, #56	@ 0x38
 800192a:	dca8      	bgt.n	800187e <__aeabi_dadd+0x20a>
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	4653      	mov	r3, sl
 8001930:	0409      	lsls	r1, r1, #16
 8001932:	430b      	orrs	r3, r1
 8001934:	469a      	mov	sl, r3
 8001936:	e78e      	b.n	8001856 <__aeabi_dadd+0x1e2>
 8001938:	003c      	movs	r4, r7
 800193a:	2500      	movs	r5, #0
 800193c:	2200      	movs	r2, #0
 800193e:	e731      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001940:	2307      	movs	r3, #7
 8001942:	402b      	ands	r3, r5
 8001944:	2b00      	cmp	r3, #0
 8001946:	d000      	beq.n	800194a <__aeabi_dadd+0x2d6>
 8001948:	e710      	b.n	800176c <__aeabi_dadd+0xf8>
 800194a:	e093      	b.n	8001a74 <__aeabi_dadd+0x400>
 800194c:	2a00      	cmp	r2, #0
 800194e:	d074      	beq.n	8001a3a <__aeabi_dadd+0x3c6>
 8001950:	464a      	mov	r2, r9
 8001952:	1bd2      	subs	r2, r2, r7
 8001954:	2f00      	cmp	r7, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x2e6>
 8001958:	e0c7      	b.n	8001aea <__aeabi_dadd+0x476>
 800195a:	4928      	ldr	r1, [pc, #160]	@ (80019fc <__aeabi_dadd+0x388>)
 800195c:	4589      	cmp	r9, r1
 800195e:	d100      	bne.n	8001962 <__aeabi_dadd+0x2ee>
 8001960:	e185      	b.n	8001c6e <__aeabi_dadd+0x5fa>
 8001962:	2501      	movs	r5, #1
 8001964:	2a38      	cmp	r2, #56	@ 0x38
 8001966:	dc12      	bgt.n	800198e <__aeabi_dadd+0x31a>
 8001968:	2180      	movs	r1, #128	@ 0x80
 800196a:	0409      	lsls	r1, r1, #16
 800196c:	430c      	orrs	r4, r1
 800196e:	2a1f      	cmp	r2, #31
 8001970:	dd00      	ble.n	8001974 <__aeabi_dadd+0x300>
 8001972:	e1ab      	b.n	8001ccc <__aeabi_dadd+0x658>
 8001974:	2120      	movs	r1, #32
 8001976:	0025      	movs	r5, r4
 8001978:	1a89      	subs	r1, r1, r2
 800197a:	0007      	movs	r7, r0
 800197c:	4088      	lsls	r0, r1
 800197e:	408d      	lsls	r5, r1
 8001980:	40d7      	lsrs	r7, r2
 8001982:	1e41      	subs	r1, r0, #1
 8001984:	4188      	sbcs	r0, r1
 8001986:	40d4      	lsrs	r4, r2
 8001988:	433d      	orrs	r5, r7
 800198a:	4305      	orrs	r5, r0
 800198c:	44a2      	add	sl, r4
 800198e:	4465      	add	r5, ip
 8001990:	4565      	cmp	r5, ip
 8001992:	4192      	sbcs	r2, r2
 8001994:	4252      	negs	r2, r2
 8001996:	4452      	add	r2, sl
 8001998:	0014      	movs	r4, r2
 800199a:	464f      	mov	r7, r9
 800199c:	e774      	b.n	8001888 <__aeabi_dadd+0x214>
 800199e:	0028      	movs	r0, r5
 80019a0:	f7fe fde4 	bl	800056c <__clzsi2>
 80019a4:	0003      	movs	r3, r0
 80019a6:	3318      	adds	r3, #24
 80019a8:	2b1f      	cmp	r3, #31
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_dadd+0x33a>
 80019ac:	e6c2      	b.n	8001734 <__aeabi_dadd+0xc0>
 80019ae:	002a      	movs	r2, r5
 80019b0:	3808      	subs	r0, #8
 80019b2:	4082      	lsls	r2, r0
 80019b4:	429f      	cmp	r7, r3
 80019b6:	dd00      	ble.n	80019ba <__aeabi_dadd+0x346>
 80019b8:	e0a9      	b.n	8001b0e <__aeabi_dadd+0x49a>
 80019ba:	1bdb      	subs	r3, r3, r7
 80019bc:	1c58      	adds	r0, r3, #1
 80019be:	281f      	cmp	r0, #31
 80019c0:	dc00      	bgt.n	80019c4 <__aeabi_dadd+0x350>
 80019c2:	e1ac      	b.n	8001d1e <__aeabi_dadd+0x6aa>
 80019c4:	0015      	movs	r5, r2
 80019c6:	3b1f      	subs	r3, #31
 80019c8:	40dd      	lsrs	r5, r3
 80019ca:	2820      	cmp	r0, #32
 80019cc:	d005      	beq.n	80019da <__aeabi_dadd+0x366>
 80019ce:	2340      	movs	r3, #64	@ 0x40
 80019d0:	1a1b      	subs	r3, r3, r0
 80019d2:	409a      	lsls	r2, r3
 80019d4:	1e53      	subs	r3, r2, #1
 80019d6:	419a      	sbcs	r2, r3
 80019d8:	4315      	orrs	r5, r2
 80019da:	2307      	movs	r3, #7
 80019dc:	2700      	movs	r7, #0
 80019de:	402b      	ands	r3, r5
 80019e0:	e7b0      	b.n	8001944 <__aeabi_dadd+0x2d0>
 80019e2:	08ed      	lsrs	r5, r5, #3
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <__aeabi_dadd+0x388>)
 80019e6:	0762      	lsls	r2, r4, #29
 80019e8:	432a      	orrs	r2, r5
 80019ea:	08e4      	lsrs	r4, r4, #3
 80019ec:	429f      	cmp	r7, r3
 80019ee:	d00f      	beq.n	8001a10 <__aeabi_dadd+0x39c>
 80019f0:	0324      	lsls	r4, r4, #12
 80019f2:	0b25      	lsrs	r5, r4, #12
 80019f4:	057c      	lsls	r4, r7, #21
 80019f6:	0d64      	lsrs	r4, r4, #21
 80019f8:	e6d4      	b.n	80017a4 <__aeabi_dadd+0x130>
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	000007ff 	.word	0x000007ff
 8001a00:	ff7fffff 	.word	0xff7fffff
 8001a04:	000007fe 	.word	0x000007fe
 8001a08:	08c0      	lsrs	r0, r0, #3
 8001a0a:	0762      	lsls	r2, r4, #29
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	08e4      	lsrs	r4, r4, #3
 8001a10:	0013      	movs	r3, r2
 8001a12:	4323      	orrs	r3, r4
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dadd+0x3a4>
 8001a16:	e186      	b.n	8001d26 <__aeabi_dadd+0x6b2>
 8001a18:	2580      	movs	r5, #128	@ 0x80
 8001a1a:	032d      	lsls	r5, r5, #12
 8001a1c:	4325      	orrs	r5, r4
 8001a1e:	032d      	lsls	r5, r5, #12
 8001a20:	4cc3      	ldr	r4, [pc, #780]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001a22:	0b2d      	lsrs	r5, r5, #12
 8001a24:	e6be      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001a26:	4660      	mov	r0, ip
 8001a28:	4654      	mov	r4, sl
 8001a2a:	000e      	movs	r6, r1
 8001a2c:	0017      	movs	r7, r2
 8001a2e:	08c5      	lsrs	r5, r0, #3
 8001a30:	e7d8      	b.n	80019e4 <__aeabi_dadd+0x370>
 8001a32:	4cc0      	ldr	r4, [pc, #768]	@ (8001d34 <__aeabi_dadd+0x6c0>)
 8001a34:	1aff      	subs	r7, r7, r3
 8001a36:	4014      	ands	r4, r2
 8001a38:	e696      	b.n	8001768 <__aeabi_dadd+0xf4>
 8001a3a:	4abf      	ldr	r2, [pc, #764]	@ (8001d38 <__aeabi_dadd+0x6c4>)
 8001a3c:	1c79      	adds	r1, r7, #1
 8001a3e:	4211      	tst	r1, r2
 8001a40:	d16b      	bne.n	8001b1a <__aeabi_dadd+0x4a6>
 8001a42:	0022      	movs	r2, r4
 8001a44:	4302      	orrs	r2, r0
 8001a46:	2f00      	cmp	r7, #0
 8001a48:	d000      	beq.n	8001a4c <__aeabi_dadd+0x3d8>
 8001a4a:	e0db      	b.n	8001c04 <__aeabi_dadd+0x590>
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dadd+0x3de>
 8001a50:	e12d      	b.n	8001cae <__aeabi_dadd+0x63a>
 8001a52:	4662      	mov	r2, ip
 8001a54:	4653      	mov	r3, sl
 8001a56:	431a      	orrs	r2, r3
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dadd+0x3e8>
 8001a5a:	e0b6      	b.n	8001bca <__aeabi_dadd+0x556>
 8001a5c:	4663      	mov	r3, ip
 8001a5e:	18c5      	adds	r5, r0, r3
 8001a60:	4285      	cmp	r5, r0
 8001a62:	4180      	sbcs	r0, r0
 8001a64:	4454      	add	r4, sl
 8001a66:	4240      	negs	r0, r0
 8001a68:	1824      	adds	r4, r4, r0
 8001a6a:	0223      	lsls	r3, r4, #8
 8001a6c:	d502      	bpl.n	8001a74 <__aeabi_dadd+0x400>
 8001a6e:	000f      	movs	r7, r1
 8001a70:	4bb0      	ldr	r3, [pc, #704]	@ (8001d34 <__aeabi_dadd+0x6c0>)
 8001a72:	401c      	ands	r4, r3
 8001a74:	003a      	movs	r2, r7
 8001a76:	0028      	movs	r0, r5
 8001a78:	e7d8      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 8001a7a:	4662      	mov	r2, ip
 8001a7c:	1a85      	subs	r5, r0, r2
 8001a7e:	42a8      	cmp	r0, r5
 8001a80:	4192      	sbcs	r2, r2
 8001a82:	4653      	mov	r3, sl
 8001a84:	4252      	negs	r2, r2
 8001a86:	4691      	mov	r9, r2
 8001a88:	1ae3      	subs	r3, r4, r3
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	464b      	mov	r3, r9
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	4691      	mov	r9, r2
 8001a94:	021a      	lsls	r2, r3, #8
 8001a96:	d454      	bmi.n	8001b42 <__aeabi_dadd+0x4ce>
 8001a98:	464a      	mov	r2, r9
 8001a9a:	464c      	mov	r4, r9
 8001a9c:	432a      	orrs	r2, r5
 8001a9e:	d000      	beq.n	8001aa2 <__aeabi_dadd+0x42e>
 8001aa0:	e640      	b.n	8001724 <__aeabi_dadd+0xb0>
 8001aa2:	2600      	movs	r6, #0
 8001aa4:	2400      	movs	r4, #0
 8001aa6:	2500      	movs	r5, #0
 8001aa8:	e67c      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001aaa:	4da1      	ldr	r5, [pc, #644]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001aac:	45a9      	cmp	r9, r5
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dadd+0x43e>
 8001ab0:	e090      	b.n	8001bd4 <__aeabi_dadd+0x560>
 8001ab2:	2501      	movs	r5, #1
 8001ab4:	2a38      	cmp	r2, #56	@ 0x38
 8001ab6:	dd00      	ble.n	8001aba <__aeabi_dadd+0x446>
 8001ab8:	e6ab      	b.n	8001812 <__aeabi_dadd+0x19e>
 8001aba:	2580      	movs	r5, #128	@ 0x80
 8001abc:	042d      	lsls	r5, r5, #16
 8001abe:	432c      	orrs	r4, r5
 8001ac0:	e695      	b.n	80017ee <__aeabi_dadd+0x17a>
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	4655      	mov	r5, sl
 8001ac6:	3920      	subs	r1, #32
 8001ac8:	40cd      	lsrs	r5, r1
 8001aca:	46a9      	mov	r9, r5
 8001acc:	2a20      	cmp	r2, #32
 8001ace:	d006      	beq.n	8001ade <__aeabi_dadd+0x46a>
 8001ad0:	2140      	movs	r1, #64	@ 0x40
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	1a8a      	subs	r2, r1, r2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	4662      	mov	r2, ip
 8001ada:	431a      	orrs	r2, r3
 8001adc:	4694      	mov	ip, r2
 8001ade:	4665      	mov	r5, ip
 8001ae0:	1e6b      	subs	r3, r5, #1
 8001ae2:	419d      	sbcs	r5, r3
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	431d      	orrs	r5, r3
 8001ae8:	e612      	b.n	8001710 <__aeabi_dadd+0x9c>
 8001aea:	0021      	movs	r1, r4
 8001aec:	4301      	orrs	r1, r0
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x47e>
 8001af0:	e0c4      	b.n	8001c7c <__aeabi_dadd+0x608>
 8001af2:	1e51      	subs	r1, r2, #1
 8001af4:	2a01      	cmp	r2, #1
 8001af6:	d100      	bne.n	8001afa <__aeabi_dadd+0x486>
 8001af8:	e0fb      	b.n	8001cf2 <__aeabi_dadd+0x67e>
 8001afa:	4d8d      	ldr	r5, [pc, #564]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001afc:	42aa      	cmp	r2, r5
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dadd+0x48e>
 8001b00:	e0b5      	b.n	8001c6e <__aeabi_dadd+0x5fa>
 8001b02:	2501      	movs	r5, #1
 8001b04:	2938      	cmp	r1, #56	@ 0x38
 8001b06:	dd00      	ble.n	8001b0a <__aeabi_dadd+0x496>
 8001b08:	e741      	b.n	800198e <__aeabi_dadd+0x31a>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	e72f      	b.n	800196e <__aeabi_dadd+0x2fa>
 8001b0e:	4c89      	ldr	r4, [pc, #548]	@ (8001d34 <__aeabi_dadd+0x6c0>)
 8001b10:	1aff      	subs	r7, r7, r3
 8001b12:	4014      	ands	r4, r2
 8001b14:	0762      	lsls	r2, r4, #29
 8001b16:	08e4      	lsrs	r4, r4, #3
 8001b18:	e76a      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001b1a:	4a85      	ldr	r2, [pc, #532]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001b1c:	4291      	cmp	r1, r2
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dadd+0x4ae>
 8001b20:	e0e3      	b.n	8001cea <__aeabi_dadd+0x676>
 8001b22:	4663      	mov	r3, ip
 8001b24:	18c2      	adds	r2, r0, r3
 8001b26:	4282      	cmp	r2, r0
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	0023      	movs	r3, r4
 8001b2c:	4240      	negs	r0, r0
 8001b2e:	4453      	add	r3, sl
 8001b30:	181b      	adds	r3, r3, r0
 8001b32:	07dd      	lsls	r5, r3, #31
 8001b34:	085c      	lsrs	r4, r3, #1
 8001b36:	2307      	movs	r3, #7
 8001b38:	0852      	lsrs	r2, r2, #1
 8001b3a:	4315      	orrs	r5, r2
 8001b3c:	000f      	movs	r7, r1
 8001b3e:	402b      	ands	r3, r5
 8001b40:	e700      	b.n	8001944 <__aeabi_dadd+0x2d0>
 8001b42:	4663      	mov	r3, ip
 8001b44:	1a1d      	subs	r5, r3, r0
 8001b46:	45ac      	cmp	ip, r5
 8001b48:	4192      	sbcs	r2, r2
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	4252      	negs	r2, r2
 8001b4e:	1b1c      	subs	r4, r3, r4
 8001b50:	000e      	movs	r6, r1
 8001b52:	4688      	mov	r8, r1
 8001b54:	1aa4      	subs	r4, r4, r2
 8001b56:	e5e5      	b.n	8001724 <__aeabi_dadd+0xb0>
 8001b58:	2d00      	cmp	r5, #0
 8001b5a:	d000      	beq.n	8001b5e <__aeabi_dadd+0x4ea>
 8001b5c:	e091      	b.n	8001c82 <__aeabi_dadd+0x60e>
 8001b5e:	2a00      	cmp	r2, #0
 8001b60:	d138      	bne.n	8001bd4 <__aeabi_dadd+0x560>
 8001b62:	2480      	movs	r4, #128	@ 0x80
 8001b64:	2600      	movs	r6, #0
 8001b66:	0324      	lsls	r4, r4, #12
 8001b68:	e756      	b.n	8001a18 <__aeabi_dadd+0x3a4>
 8001b6a:	4663      	mov	r3, ip
 8001b6c:	18c5      	adds	r5, r0, r3
 8001b6e:	4285      	cmp	r5, r0
 8001b70:	4180      	sbcs	r0, r0
 8001b72:	4454      	add	r4, sl
 8001b74:	4240      	negs	r0, r0
 8001b76:	1824      	adds	r4, r4, r0
 8001b78:	2701      	movs	r7, #1
 8001b7a:	0223      	lsls	r3, r4, #8
 8001b7c:	d400      	bmi.n	8001b80 <__aeabi_dadd+0x50c>
 8001b7e:	e6df      	b.n	8001940 <__aeabi_dadd+0x2cc>
 8001b80:	2702      	movs	r7, #2
 8001b82:	e687      	b.n	8001894 <__aeabi_dadd+0x220>
 8001b84:	4663      	mov	r3, ip
 8001b86:	1ac5      	subs	r5, r0, r3
 8001b88:	42a8      	cmp	r0, r5
 8001b8a:	4180      	sbcs	r0, r0
 8001b8c:	4653      	mov	r3, sl
 8001b8e:	4240      	negs	r0, r0
 8001b90:	1ae4      	subs	r4, r4, r3
 8001b92:	2701      	movs	r7, #1
 8001b94:	1a24      	subs	r4, r4, r0
 8001b96:	e5c0      	b.n	800171a <__aeabi_dadd+0xa6>
 8001b98:	0762      	lsls	r2, r4, #29
 8001b9a:	08c0      	lsrs	r0, r0, #3
 8001b9c:	4302      	orrs	r2, r0
 8001b9e:	08e4      	lsrs	r4, r4, #3
 8001ba0:	e736      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	4653      	mov	r3, sl
 8001ba6:	3920      	subs	r1, #32
 8001ba8:	40cb      	lsrs	r3, r1
 8001baa:	4699      	mov	r9, r3
 8001bac:	2a20      	cmp	r2, #32
 8001bae:	d006      	beq.n	8001bbe <__aeabi_dadd+0x54a>
 8001bb0:	2140      	movs	r1, #64	@ 0x40
 8001bb2:	4653      	mov	r3, sl
 8001bb4:	1a8a      	subs	r2, r1, r2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	4662      	mov	r2, ip
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	4694      	mov	ip, r2
 8001bbe:	4665      	mov	r5, ip
 8001bc0:	1e6b      	subs	r3, r5, #1
 8001bc2:	419d      	sbcs	r5, r3
 8001bc4:	464b      	mov	r3, r9
 8001bc6:	431d      	orrs	r5, r3
 8001bc8:	e659      	b.n	800187e <__aeabi_dadd+0x20a>
 8001bca:	0762      	lsls	r2, r4, #29
 8001bcc:	08c0      	lsrs	r0, r0, #3
 8001bce:	4302      	orrs	r2, r0
 8001bd0:	08e4      	lsrs	r4, r4, #3
 8001bd2:	e70d      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001bd4:	4653      	mov	r3, sl
 8001bd6:	075a      	lsls	r2, r3, #29
 8001bd8:	4663      	mov	r3, ip
 8001bda:	08d8      	lsrs	r0, r3, #3
 8001bdc:	4653      	mov	r3, sl
 8001bde:	000e      	movs	r6, r1
 8001be0:	4302      	orrs	r2, r0
 8001be2:	08dc      	lsrs	r4, r3, #3
 8001be4:	e714      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001be6:	0015      	movs	r5, r2
 8001be8:	0026      	movs	r6, r4
 8001bea:	3d20      	subs	r5, #32
 8001bec:	40ee      	lsrs	r6, r5
 8001bee:	2a20      	cmp	r2, #32
 8001bf0:	d003      	beq.n	8001bfa <__aeabi_dadd+0x586>
 8001bf2:	2540      	movs	r5, #64	@ 0x40
 8001bf4:	1aaa      	subs	r2, r5, r2
 8001bf6:	4094      	lsls	r4, r2
 8001bf8:	4320      	orrs	r0, r4
 8001bfa:	1e42      	subs	r2, r0, #1
 8001bfc:	4190      	sbcs	r0, r2
 8001bfe:	0005      	movs	r5, r0
 8001c00:	4335      	orrs	r5, r6
 8001c02:	e606      	b.n	8001812 <__aeabi_dadd+0x19e>
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	d07c      	beq.n	8001d02 <__aeabi_dadd+0x68e>
 8001c08:	4662      	mov	r2, ip
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	08c0      	lsrs	r0, r0, #3
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dadd+0x5a0>
 8001c12:	e6fa      	b.n	8001a0a <__aeabi_dadd+0x396>
 8001c14:	0762      	lsls	r2, r4, #29
 8001c16:	4310      	orrs	r0, r2
 8001c18:	2280      	movs	r2, #128	@ 0x80
 8001c1a:	08e4      	lsrs	r4, r4, #3
 8001c1c:	0312      	lsls	r2, r2, #12
 8001c1e:	4214      	tst	r4, r2
 8001c20:	d008      	beq.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c22:	08d9      	lsrs	r1, r3, #3
 8001c24:	4211      	tst	r1, r2
 8001c26:	d105      	bne.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c28:	4663      	mov	r3, ip
 8001c2a:	08d8      	lsrs	r0, r3, #3
 8001c2c:	4653      	mov	r3, sl
 8001c2e:	000c      	movs	r4, r1
 8001c30:	075b      	lsls	r3, r3, #29
 8001c32:	4318      	orrs	r0, r3
 8001c34:	0f42      	lsrs	r2, r0, #29
 8001c36:	00c0      	lsls	r0, r0, #3
 8001c38:	08c0      	lsrs	r0, r0, #3
 8001c3a:	0752      	lsls	r2, r2, #29
 8001c3c:	4302      	orrs	r2, r0
 8001c3e:	e6e7      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x5d2>
 8001c44:	e72d      	b.n	8001aa2 <__aeabi_dadd+0x42e>
 8001c46:	4663      	mov	r3, ip
 8001c48:	08d8      	lsrs	r0, r3, #3
 8001c4a:	4653      	mov	r3, sl
 8001c4c:	075a      	lsls	r2, r3, #29
 8001c4e:	000e      	movs	r6, r1
 8001c50:	4302      	orrs	r2, r0
 8001c52:	08dc      	lsrs	r4, r3, #3
 8001c54:	e6cc      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001c56:	4663      	mov	r3, ip
 8001c58:	1a1d      	subs	r5, r3, r0
 8001c5a:	45ac      	cmp	ip, r5
 8001c5c:	4192      	sbcs	r2, r2
 8001c5e:	4653      	mov	r3, sl
 8001c60:	4252      	negs	r2, r2
 8001c62:	1b1c      	subs	r4, r3, r4
 8001c64:	000e      	movs	r6, r1
 8001c66:	4688      	mov	r8, r1
 8001c68:	1aa4      	subs	r4, r4, r2
 8001c6a:	3701      	adds	r7, #1
 8001c6c:	e555      	b.n	800171a <__aeabi_dadd+0xa6>
 8001c6e:	4663      	mov	r3, ip
 8001c70:	08d9      	lsrs	r1, r3, #3
 8001c72:	4653      	mov	r3, sl
 8001c74:	075a      	lsls	r2, r3, #29
 8001c76:	430a      	orrs	r2, r1
 8001c78:	08dc      	lsrs	r4, r3, #3
 8001c7a:	e6c9      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001c7c:	4660      	mov	r0, ip
 8001c7e:	4654      	mov	r4, sl
 8001c80:	e6d4      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 8001c82:	08c0      	lsrs	r0, r0, #3
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dadd+0x616>
 8001c88:	e6bf      	b.n	8001a0a <__aeabi_dadd+0x396>
 8001c8a:	0762      	lsls	r2, r4, #29
 8001c8c:	4310      	orrs	r0, r2
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	08e4      	lsrs	r4, r4, #3
 8001c92:	0312      	lsls	r2, r2, #12
 8001c94:	4214      	tst	r4, r2
 8001c96:	d0cd      	beq.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c98:	08dd      	lsrs	r5, r3, #3
 8001c9a:	4215      	tst	r5, r2
 8001c9c:	d1ca      	bne.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c9e:	4663      	mov	r3, ip
 8001ca0:	08d8      	lsrs	r0, r3, #3
 8001ca2:	4653      	mov	r3, sl
 8001ca4:	075b      	lsls	r3, r3, #29
 8001ca6:	000e      	movs	r6, r1
 8001ca8:	002c      	movs	r4, r5
 8001caa:	4318      	orrs	r0, r3
 8001cac:	e7c2      	b.n	8001c34 <__aeabi_dadd+0x5c0>
 8001cae:	4663      	mov	r3, ip
 8001cb0:	08d9      	lsrs	r1, r3, #3
 8001cb2:	4653      	mov	r3, sl
 8001cb4:	075a      	lsls	r2, r3, #29
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	08dc      	lsrs	r4, r3, #3
 8001cba:	e699      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	08d8      	lsrs	r0, r3, #3
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	075a      	lsls	r2, r3, #29
 8001cc4:	000e      	movs	r6, r1
 8001cc6:	4302      	orrs	r2, r0
 8001cc8:	08dc      	lsrs	r4, r3, #3
 8001cca:	e6a1      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001ccc:	0011      	movs	r1, r2
 8001cce:	0027      	movs	r7, r4
 8001cd0:	3920      	subs	r1, #32
 8001cd2:	40cf      	lsrs	r7, r1
 8001cd4:	2a20      	cmp	r2, #32
 8001cd6:	d003      	beq.n	8001ce0 <__aeabi_dadd+0x66c>
 8001cd8:	2140      	movs	r1, #64	@ 0x40
 8001cda:	1a8a      	subs	r2, r1, r2
 8001cdc:	4094      	lsls	r4, r2
 8001cde:	4320      	orrs	r0, r4
 8001ce0:	1e42      	subs	r2, r0, #1
 8001ce2:	4190      	sbcs	r0, r2
 8001ce4:	0005      	movs	r5, r0
 8001ce6:	433d      	orrs	r5, r7
 8001ce8:	e651      	b.n	800198e <__aeabi_dadd+0x31a>
 8001cea:	000c      	movs	r4, r1
 8001cec:	2500      	movs	r5, #0
 8001cee:	2200      	movs	r2, #0
 8001cf0:	e558      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001cf2:	4460      	add	r0, ip
 8001cf4:	4560      	cmp	r0, ip
 8001cf6:	4192      	sbcs	r2, r2
 8001cf8:	4454      	add	r4, sl
 8001cfa:	4252      	negs	r2, r2
 8001cfc:	0005      	movs	r5, r0
 8001cfe:	18a4      	adds	r4, r4, r2
 8001d00:	e73a      	b.n	8001b78 <__aeabi_dadd+0x504>
 8001d02:	4653      	mov	r3, sl
 8001d04:	075a      	lsls	r2, r3, #29
 8001d06:	4663      	mov	r3, ip
 8001d08:	08d9      	lsrs	r1, r3, #3
 8001d0a:	4653      	mov	r3, sl
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	08dc      	lsrs	r4, r3, #3
 8001d10:	e67e      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001d12:	001a      	movs	r2, r3
 8001d14:	001c      	movs	r4, r3
 8001d16:	432a      	orrs	r2, r5
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dadd+0x6a8>
 8001d1a:	e6ab      	b.n	8001a74 <__aeabi_dadd+0x400>
 8001d1c:	e6c1      	b.n	8001aa2 <__aeabi_dadd+0x42e>
 8001d1e:	2120      	movs	r1, #32
 8001d20:	2500      	movs	r5, #0
 8001d22:	1a09      	subs	r1, r1, r0
 8001d24:	e519      	b.n	800175a <__aeabi_dadd+0xe6>
 8001d26:	2200      	movs	r2, #0
 8001d28:	2500      	movs	r5, #0
 8001d2a:	4c01      	ldr	r4, [pc, #4]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001d2c:	e53a      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	000007ff 	.word	0x000007ff
 8001d34:	ff7fffff 	.word	0xff7fffff
 8001d38:	000007fe 	.word	0x000007fe

08001d3c <__aeabi_ddiv>:
 8001d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3e:	46de      	mov	lr, fp
 8001d40:	4645      	mov	r5, r8
 8001d42:	4657      	mov	r7, sl
 8001d44:	464e      	mov	r6, r9
 8001d46:	b5e0      	push	{r5, r6, r7, lr}
 8001d48:	b087      	sub	sp, #28
 8001d4a:	9200      	str	r2, [sp, #0]
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	030b      	lsls	r3, r1, #12
 8001d50:	0b1b      	lsrs	r3, r3, #12
 8001d52:	469b      	mov	fp, r3
 8001d54:	0fca      	lsrs	r2, r1, #31
 8001d56:	004b      	lsls	r3, r1, #1
 8001d58:	0004      	movs	r4, r0
 8001d5a:	4680      	mov	r8, r0
 8001d5c:	0d5b      	lsrs	r3, r3, #21
 8001d5e:	9202      	str	r2, [sp, #8]
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x28>
 8001d62:	e16a      	b.n	800203a <__aeabi_ddiv+0x2fe>
 8001d64:	4ad4      	ldr	r2, [pc, #848]	@ (80020b8 <__aeabi_ddiv+0x37c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d100      	bne.n	8001d6c <__aeabi_ddiv+0x30>
 8001d6a:	e18c      	b.n	8002086 <__aeabi_ddiv+0x34a>
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	0f42      	lsrs	r2, r0, #29
 8001d70:	00c9      	lsls	r1, r1, #3
 8001d72:	430a      	orrs	r2, r1
 8001d74:	2180      	movs	r1, #128	@ 0x80
 8001d76:	0409      	lsls	r1, r1, #16
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	00c2      	lsls	r2, r0, #3
 8001d7c:	4690      	mov	r8, r2
 8001d7e:	4acf      	ldr	r2, [pc, #828]	@ (80020bc <__aeabi_ddiv+0x380>)
 8001d80:	4689      	mov	r9, r1
 8001d82:	4692      	mov	sl, r2
 8001d84:	449a      	add	sl, r3
 8001d86:	2300      	movs	r3, #0
 8001d88:	2400      	movs	r4, #0
 8001d8a:	9303      	str	r3, [sp, #12]
 8001d8c:	9e00      	ldr	r6, [sp, #0]
 8001d8e:	9f01      	ldr	r7, [sp, #4]
 8001d90:	033b      	lsls	r3, r7, #12
 8001d92:	0b1b      	lsrs	r3, r3, #12
 8001d94:	469b      	mov	fp, r3
 8001d96:	007b      	lsls	r3, r7, #1
 8001d98:	0030      	movs	r0, r6
 8001d9a:	0d5b      	lsrs	r3, r3, #21
 8001d9c:	0ffd      	lsrs	r5, r7, #31
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d100      	bne.n	8001da4 <__aeabi_ddiv+0x68>
 8001da2:	e128      	b.n	8001ff6 <__aeabi_ddiv+0x2ba>
 8001da4:	4ac4      	ldr	r2, [pc, #784]	@ (80020b8 <__aeabi_ddiv+0x37c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_ddiv+0x70>
 8001daa:	e177      	b.n	800209c <__aeabi_ddiv+0x360>
 8001dac:	4659      	mov	r1, fp
 8001dae:	0f72      	lsrs	r2, r6, #29
 8001db0:	00c9      	lsls	r1, r1, #3
 8001db2:	430a      	orrs	r2, r1
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	0409      	lsls	r1, r1, #16
 8001db8:	4311      	orrs	r1, r2
 8001dba:	468b      	mov	fp, r1
 8001dbc:	49bf      	ldr	r1, [pc, #764]	@ (80020bc <__aeabi_ddiv+0x380>)
 8001dbe:	00f2      	lsls	r2, r6, #3
 8001dc0:	468c      	mov	ip, r1
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	4463      	add	r3, ip
 8001dc6:	1acb      	subs	r3, r1, r3
 8001dc8:	469a      	mov	sl, r3
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9e02      	ldr	r6, [sp, #8]
 8001dce:	406e      	eors	r6, r5
 8001dd0:	2c0f      	cmp	r4, #15
 8001dd2:	d827      	bhi.n	8001e24 <__aeabi_ddiv+0xe8>
 8001dd4:	49ba      	ldr	r1, [pc, #744]	@ (80020c0 <__aeabi_ddiv+0x384>)
 8001dd6:	00a4      	lsls	r4, r4, #2
 8001dd8:	5909      	ldr	r1, [r1, r4]
 8001dda:	468f      	mov	pc, r1
 8001ddc:	46cb      	mov	fp, r9
 8001dde:	4642      	mov	r2, r8
 8001de0:	9e02      	ldr	r6, [sp, #8]
 8001de2:	9b03      	ldr	r3, [sp, #12]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d016      	beq.n	8001e16 <__aeabi_ddiv+0xda>
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0xb2>
 8001dec:	e2a6      	b.n	800233c <__aeabi_ddiv+0x600>
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d000      	beq.n	8001df4 <__aeabi_ddiv+0xb8>
 8001df2:	e0df      	b.n	8001fb4 <__aeabi_ddiv+0x278>
 8001df4:	2200      	movs	r2, #0
 8001df6:	2300      	movs	r3, #0
 8001df8:	2400      	movs	r4, #0
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	051b      	lsls	r3, r3, #20
 8001dfe:	4323      	orrs	r3, r4
 8001e00:	07f6      	lsls	r6, r6, #31
 8001e02:	4333      	orrs	r3, r6
 8001e04:	4640      	mov	r0, r8
 8001e06:	0019      	movs	r1, r3
 8001e08:	b007      	add	sp, #28
 8001e0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e0c:	46bb      	mov	fp, r7
 8001e0e:	46b2      	mov	sl, r6
 8001e10:	46a9      	mov	r9, r5
 8001e12:	46a0      	mov	r8, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	2200      	movs	r2, #0
 8001e18:	2400      	movs	r4, #0
 8001e1a:	4690      	mov	r8, r2
 8001e1c:	4ba6      	ldr	r3, [pc, #664]	@ (80020b8 <__aeabi_ddiv+0x37c>)
 8001e1e:	e7ed      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 8001e20:	002e      	movs	r6, r5
 8001e22:	e7df      	b.n	8001de4 <__aeabi_ddiv+0xa8>
 8001e24:	45cb      	cmp	fp, r9
 8001e26:	d200      	bcs.n	8001e2a <__aeabi_ddiv+0xee>
 8001e28:	e1d4      	b.n	80021d4 <__aeabi_ddiv+0x498>
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_ddiv+0xf2>
 8001e2c:	e1cf      	b.n	80021ce <__aeabi_ddiv+0x492>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	425b      	negs	r3, r3
 8001e32:	469c      	mov	ip, r3
 8001e34:	4644      	mov	r4, r8
 8001e36:	4648      	mov	r0, r9
 8001e38:	2700      	movs	r7, #0
 8001e3a:	44e2      	add	sl, ip
 8001e3c:	465b      	mov	r3, fp
 8001e3e:	0e15      	lsrs	r5, r2, #24
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	431d      	orrs	r5, r3
 8001e44:	0c19      	lsrs	r1, r3, #16
 8001e46:	042b      	lsls	r3, r5, #16
 8001e48:	0212      	lsls	r2, r2, #8
 8001e4a:	9500      	str	r5, [sp, #0]
 8001e4c:	0c1d      	lsrs	r5, r3, #16
 8001e4e:	4691      	mov	r9, r2
 8001e50:	9102      	str	r1, [sp, #8]
 8001e52:	9503      	str	r5, [sp, #12]
 8001e54:	f7fe fa22 	bl	800029c <__aeabi_uidivmod>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	436a      	muls	r2, r5
 8001e5c:	040b      	lsls	r3, r1, #16
 8001e5e:	0c21      	lsrs	r1, r4, #16
 8001e60:	4680      	mov	r8, r0
 8001e62:	4319      	orrs	r1, r3
 8001e64:	428a      	cmp	r2, r1
 8001e66:	d909      	bls.n	8001e7c <__aeabi_ddiv+0x140>
 8001e68:	9d00      	ldr	r5, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	46ac      	mov	ip, r5
 8001e6e:	425b      	negs	r3, r3
 8001e70:	4461      	add	r1, ip
 8001e72:	469c      	mov	ip, r3
 8001e74:	44e0      	add	r8, ip
 8001e76:	428d      	cmp	r5, r1
 8001e78:	d800      	bhi.n	8001e7c <__aeabi_ddiv+0x140>
 8001e7a:	e1fb      	b.n	8002274 <__aeabi_ddiv+0x538>
 8001e7c:	1a88      	subs	r0, r1, r2
 8001e7e:	9902      	ldr	r1, [sp, #8]
 8001e80:	f7fe fa0c 	bl	800029c <__aeabi_uidivmod>
 8001e84:	9a03      	ldr	r2, [sp, #12]
 8001e86:	0424      	lsls	r4, r4, #16
 8001e88:	4342      	muls	r2, r0
 8001e8a:	0409      	lsls	r1, r1, #16
 8001e8c:	0c24      	lsrs	r4, r4, #16
 8001e8e:	0003      	movs	r3, r0
 8001e90:	430c      	orrs	r4, r1
 8001e92:	42a2      	cmp	r2, r4
 8001e94:	d906      	bls.n	8001ea4 <__aeabi_ddiv+0x168>
 8001e96:	9900      	ldr	r1, [sp, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	468c      	mov	ip, r1
 8001e9c:	4464      	add	r4, ip
 8001e9e:	42a1      	cmp	r1, r4
 8001ea0:	d800      	bhi.n	8001ea4 <__aeabi_ddiv+0x168>
 8001ea2:	e1e1      	b.n	8002268 <__aeabi_ddiv+0x52c>
 8001ea4:	1aa0      	subs	r0, r4, r2
 8001ea6:	4642      	mov	r2, r8
 8001ea8:	0412      	lsls	r2, r2, #16
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	4693      	mov	fp, r2
 8001eae:	464b      	mov	r3, r9
 8001eb0:	4659      	mov	r1, fp
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	001d      	movs	r5, r3
 8001eb6:	9304      	str	r3, [sp, #16]
 8001eb8:	040b      	lsls	r3, r1, #16
 8001eba:	4649      	mov	r1, r9
 8001ebc:	0409      	lsls	r1, r1, #16
 8001ebe:	0c09      	lsrs	r1, r1, #16
 8001ec0:	000c      	movs	r4, r1
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	435c      	muls	r4, r3
 8001ec6:	0c12      	lsrs	r2, r2, #16
 8001ec8:	436b      	muls	r3, r5
 8001eca:	4688      	mov	r8, r1
 8001ecc:	4351      	muls	r1, r2
 8001ece:	436a      	muls	r2, r5
 8001ed0:	0c25      	lsrs	r5, r4, #16
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	185b      	adds	r3, r3, r1
 8001ed6:	4463      	add	r3, ip
 8001ed8:	4299      	cmp	r1, r3
 8001eda:	d903      	bls.n	8001ee4 <__aeabi_ddiv+0x1a8>
 8001edc:	2180      	movs	r1, #128	@ 0x80
 8001ede:	0249      	lsls	r1, r1, #9
 8001ee0:	468c      	mov	ip, r1
 8001ee2:	4462      	add	r2, ip
 8001ee4:	0c19      	lsrs	r1, r3, #16
 8001ee6:	0424      	lsls	r4, r4, #16
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	0c24      	lsrs	r4, r4, #16
 8001eec:	188a      	adds	r2, r1, r2
 8001eee:	191c      	adds	r4, r3, r4
 8001ef0:	4290      	cmp	r0, r2
 8001ef2:	d302      	bcc.n	8001efa <__aeabi_ddiv+0x1be>
 8001ef4:	d116      	bne.n	8001f24 <__aeabi_ddiv+0x1e8>
 8001ef6:	42a7      	cmp	r7, r4
 8001ef8:	d214      	bcs.n	8001f24 <__aeabi_ddiv+0x1e8>
 8001efa:	465b      	mov	r3, fp
 8001efc:	9d00      	ldr	r5, [sp, #0]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	444f      	add	r7, r9
 8001f02:	9305      	str	r3, [sp, #20]
 8001f04:	454f      	cmp	r7, r9
 8001f06:	419b      	sbcs	r3, r3
 8001f08:	46ac      	mov	ip, r5
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	4463      	add	r3, ip
 8001f0e:	18c0      	adds	r0, r0, r3
 8001f10:	4285      	cmp	r5, r0
 8001f12:	d300      	bcc.n	8001f16 <__aeabi_ddiv+0x1da>
 8001f14:	e1a1      	b.n	800225a <__aeabi_ddiv+0x51e>
 8001f16:	4282      	cmp	r2, r0
 8001f18:	d900      	bls.n	8001f1c <__aeabi_ddiv+0x1e0>
 8001f1a:	e1f6      	b.n	800230a <__aeabi_ddiv+0x5ce>
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_ddiv+0x1e4>
 8001f1e:	e1f1      	b.n	8002304 <__aeabi_ddiv+0x5c8>
 8001f20:	9b05      	ldr	r3, [sp, #20]
 8001f22:	469b      	mov	fp, r3
 8001f24:	1b3c      	subs	r4, r7, r4
 8001f26:	42a7      	cmp	r7, r4
 8001f28:	41bf      	sbcs	r7, r7
 8001f2a:	9d00      	ldr	r5, [sp, #0]
 8001f2c:	1a80      	subs	r0, r0, r2
 8001f2e:	427f      	negs	r7, r7
 8001f30:	1bc0      	subs	r0, r0, r7
 8001f32:	4285      	cmp	r5, r0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_ddiv+0x1fc>
 8001f36:	e1d0      	b.n	80022da <__aeabi_ddiv+0x59e>
 8001f38:	9902      	ldr	r1, [sp, #8]
 8001f3a:	f7fe f9af 	bl	800029c <__aeabi_uidivmod>
 8001f3e:	9a03      	ldr	r2, [sp, #12]
 8001f40:	040b      	lsls	r3, r1, #16
 8001f42:	4342      	muls	r2, r0
 8001f44:	0c21      	lsrs	r1, r4, #16
 8001f46:	0007      	movs	r7, r0
 8001f48:	4319      	orrs	r1, r3
 8001f4a:	428a      	cmp	r2, r1
 8001f4c:	d900      	bls.n	8001f50 <__aeabi_ddiv+0x214>
 8001f4e:	e178      	b.n	8002242 <__aeabi_ddiv+0x506>
 8001f50:	1a88      	subs	r0, r1, r2
 8001f52:	9902      	ldr	r1, [sp, #8]
 8001f54:	f7fe f9a2 	bl	800029c <__aeabi_uidivmod>
 8001f58:	9a03      	ldr	r2, [sp, #12]
 8001f5a:	0424      	lsls	r4, r4, #16
 8001f5c:	4342      	muls	r2, r0
 8001f5e:	0409      	lsls	r1, r1, #16
 8001f60:	0c24      	lsrs	r4, r4, #16
 8001f62:	0003      	movs	r3, r0
 8001f64:	430c      	orrs	r4, r1
 8001f66:	42a2      	cmp	r2, r4
 8001f68:	d900      	bls.n	8001f6c <__aeabi_ddiv+0x230>
 8001f6a:	e15d      	b.n	8002228 <__aeabi_ddiv+0x4ec>
 8001f6c:	4641      	mov	r1, r8
 8001f6e:	1aa4      	subs	r4, r4, r2
 8001f70:	043a      	lsls	r2, r7, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	9d04      	ldr	r5, [sp, #16]
 8001f76:	0413      	lsls	r3, r2, #16
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	4359      	muls	r1, r3
 8001f7c:	4647      	mov	r7, r8
 8001f7e:	436b      	muls	r3, r5
 8001f80:	469c      	mov	ip, r3
 8001f82:	0c10      	lsrs	r0, r2, #16
 8001f84:	4347      	muls	r7, r0
 8001f86:	0c0b      	lsrs	r3, r1, #16
 8001f88:	44bc      	add	ip, r7
 8001f8a:	4463      	add	r3, ip
 8001f8c:	4368      	muls	r0, r5
 8001f8e:	429f      	cmp	r7, r3
 8001f90:	d903      	bls.n	8001f9a <__aeabi_ddiv+0x25e>
 8001f92:	2580      	movs	r5, #128	@ 0x80
 8001f94:	026d      	lsls	r5, r5, #9
 8001f96:	46ac      	mov	ip, r5
 8001f98:	4460      	add	r0, ip
 8001f9a:	0c1f      	lsrs	r7, r3, #16
 8001f9c:	0409      	lsls	r1, r1, #16
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	0c09      	lsrs	r1, r1, #16
 8001fa2:	183f      	adds	r7, r7, r0
 8001fa4:	185b      	adds	r3, r3, r1
 8001fa6:	42bc      	cmp	r4, r7
 8001fa8:	d200      	bcs.n	8001fac <__aeabi_ddiv+0x270>
 8001faa:	e102      	b.n	80021b2 <__aeabi_ddiv+0x476>
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x274>
 8001fae:	e0fd      	b.n	80021ac <__aeabi_ddiv+0x470>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <__aeabi_ddiv+0x388>)
 8001fb6:	4453      	add	r3, sl
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dc00      	bgt.n	8001fbe <__aeabi_ddiv+0x282>
 8001fbc:	e0ae      	b.n	800211c <__aeabi_ddiv+0x3e0>
 8001fbe:	0751      	lsls	r1, r2, #29
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_ddiv+0x288>
 8001fc2:	e198      	b.n	80022f6 <__aeabi_ddiv+0x5ba>
 8001fc4:	4659      	mov	r1, fp
 8001fc6:	01c9      	lsls	r1, r1, #7
 8001fc8:	d506      	bpl.n	8001fd8 <__aeabi_ddiv+0x29c>
 8001fca:	4659      	mov	r1, fp
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80020c8 <__aeabi_ddiv+0x38c>)
 8001fce:	4019      	ands	r1, r3
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	468b      	mov	fp, r1
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4453      	add	r3, sl
 8001fd8:	493c      	ldr	r1, [pc, #240]	@ (80020cc <__aeabi_ddiv+0x390>)
 8001fda:	428b      	cmp	r3, r1
 8001fdc:	dd00      	ble.n	8001fe0 <__aeabi_ddiv+0x2a4>
 8001fde:	e71a      	b.n	8001e16 <__aeabi_ddiv+0xda>
 8001fe0:	4659      	mov	r1, fp
 8001fe2:	08d2      	lsrs	r2, r2, #3
 8001fe4:	0749      	lsls	r1, r1, #29
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	465a      	mov	r2, fp
 8001fea:	055b      	lsls	r3, r3, #21
 8001fec:	0254      	lsls	r4, r2, #9
 8001fee:	4688      	mov	r8, r1
 8001ff0:	0b24      	lsrs	r4, r4, #12
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	e702      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 8001ff6:	465a      	mov	r2, fp
 8001ff8:	9b00      	ldr	r3, [sp, #0]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	d100      	bne.n	8002000 <__aeabi_ddiv+0x2c4>
 8001ffe:	e07e      	b.n	80020fe <__aeabi_ddiv+0x3c2>
 8002000:	465b      	mov	r3, fp
 8002002:	2b00      	cmp	r3, #0
 8002004:	d100      	bne.n	8002008 <__aeabi_ddiv+0x2cc>
 8002006:	e100      	b.n	800220a <__aeabi_ddiv+0x4ce>
 8002008:	4658      	mov	r0, fp
 800200a:	f7fe faaf 	bl	800056c <__clzsi2>
 800200e:	0002      	movs	r2, r0
 8002010:	0003      	movs	r3, r0
 8002012:	3a0b      	subs	r2, #11
 8002014:	271d      	movs	r7, #29
 8002016:	9e00      	ldr	r6, [sp, #0]
 8002018:	1aba      	subs	r2, r7, r2
 800201a:	0019      	movs	r1, r3
 800201c:	4658      	mov	r0, fp
 800201e:	40d6      	lsrs	r6, r2
 8002020:	3908      	subs	r1, #8
 8002022:	4088      	lsls	r0, r1
 8002024:	0032      	movs	r2, r6
 8002026:	4302      	orrs	r2, r0
 8002028:	4693      	mov	fp, r2
 800202a:	9a00      	ldr	r2, [sp, #0]
 800202c:	408a      	lsls	r2, r1
 800202e:	4928      	ldr	r1, [pc, #160]	@ (80020d0 <__aeabi_ddiv+0x394>)
 8002030:	4453      	add	r3, sl
 8002032:	468a      	mov	sl, r1
 8002034:	449a      	add	sl, r3
 8002036:	2300      	movs	r3, #0
 8002038:	e6c8      	b.n	8001dcc <__aeabi_ddiv+0x90>
 800203a:	465b      	mov	r3, fp
 800203c:	4303      	orrs	r3, r0
 800203e:	4699      	mov	r9, r3
 8002040:	d056      	beq.n	80020f0 <__aeabi_ddiv+0x3b4>
 8002042:	465b      	mov	r3, fp
 8002044:	2b00      	cmp	r3, #0
 8002046:	d100      	bne.n	800204a <__aeabi_ddiv+0x30e>
 8002048:	e0cd      	b.n	80021e6 <__aeabi_ddiv+0x4aa>
 800204a:	4658      	mov	r0, fp
 800204c:	f7fe fa8e 	bl	800056c <__clzsi2>
 8002050:	230b      	movs	r3, #11
 8002052:	425b      	negs	r3, r3
 8002054:	469c      	mov	ip, r3
 8002056:	0002      	movs	r2, r0
 8002058:	4484      	add	ip, r0
 800205a:	4666      	mov	r6, ip
 800205c:	231d      	movs	r3, #29
 800205e:	1b9b      	subs	r3, r3, r6
 8002060:	0026      	movs	r6, r4
 8002062:	0011      	movs	r1, r2
 8002064:	4658      	mov	r0, fp
 8002066:	40de      	lsrs	r6, r3
 8002068:	3908      	subs	r1, #8
 800206a:	4088      	lsls	r0, r1
 800206c:	0033      	movs	r3, r6
 800206e:	4303      	orrs	r3, r0
 8002070:	4699      	mov	r9, r3
 8002072:	0023      	movs	r3, r4
 8002074:	408b      	lsls	r3, r1
 8002076:	4698      	mov	r8, r3
 8002078:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <__aeabi_ddiv+0x398>)
 800207a:	2400      	movs	r4, #0
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	469a      	mov	sl, r3
 8002080:	2300      	movs	r3, #0
 8002082:	9303      	str	r3, [sp, #12]
 8002084:	e682      	b.n	8001d8c <__aeabi_ddiv+0x50>
 8002086:	465a      	mov	r2, fp
 8002088:	4302      	orrs	r2, r0
 800208a:	4691      	mov	r9, r2
 800208c:	d12a      	bne.n	80020e4 <__aeabi_ddiv+0x3a8>
 800208e:	2200      	movs	r2, #0
 8002090:	469a      	mov	sl, r3
 8002092:	2302      	movs	r3, #2
 8002094:	4690      	mov	r8, r2
 8002096:	2408      	movs	r4, #8
 8002098:	9303      	str	r3, [sp, #12]
 800209a:	e677      	b.n	8001d8c <__aeabi_ddiv+0x50>
 800209c:	465a      	mov	r2, fp
 800209e:	9b00      	ldr	r3, [sp, #0]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <__aeabi_ddiv+0x39c>)
 80020a4:	469c      	mov	ip, r3
 80020a6:	44e2      	add	sl, ip
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	d117      	bne.n	80020dc <__aeabi_ddiv+0x3a0>
 80020ac:	2302      	movs	r3, #2
 80020ae:	431c      	orrs	r4, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	469b      	mov	fp, r3
 80020b4:	3302      	adds	r3, #2
 80020b6:	e689      	b.n	8001dcc <__aeabi_ddiv+0x90>
 80020b8:	000007ff 	.word	0x000007ff
 80020bc:	fffffc01 	.word	0xfffffc01
 80020c0:	08014dfc 	.word	0x08014dfc
 80020c4:	000003ff 	.word	0x000003ff
 80020c8:	feffffff 	.word	0xfeffffff
 80020cc:	000007fe 	.word	0x000007fe
 80020d0:	000003f3 	.word	0x000003f3
 80020d4:	fffffc0d 	.word	0xfffffc0d
 80020d8:	fffff801 	.word	0xfffff801
 80020dc:	2303      	movs	r3, #3
 80020de:	0032      	movs	r2, r6
 80020e0:	431c      	orrs	r4, r3
 80020e2:	e673      	b.n	8001dcc <__aeabi_ddiv+0x90>
 80020e4:	469a      	mov	sl, r3
 80020e6:	2303      	movs	r3, #3
 80020e8:	46d9      	mov	r9, fp
 80020ea:	240c      	movs	r4, #12
 80020ec:	9303      	str	r3, [sp, #12]
 80020ee:	e64d      	b.n	8001d8c <__aeabi_ddiv+0x50>
 80020f0:	2300      	movs	r3, #0
 80020f2:	4698      	mov	r8, r3
 80020f4:	469a      	mov	sl, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	2404      	movs	r4, #4
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e646      	b.n	8001d8c <__aeabi_ddiv+0x50>
 80020fe:	2301      	movs	r3, #1
 8002100:	431c      	orrs	r4, r3
 8002102:	2300      	movs	r3, #0
 8002104:	469b      	mov	fp, r3
 8002106:	3301      	adds	r3, #1
 8002108:	e660      	b.n	8001dcc <__aeabi_ddiv+0x90>
 800210a:	2300      	movs	r3, #0
 800210c:	2480      	movs	r4, #128	@ 0x80
 800210e:	4698      	mov	r8, r3
 8002110:	2600      	movs	r6, #0
 8002112:	4b92      	ldr	r3, [pc, #584]	@ (800235c <__aeabi_ddiv+0x620>)
 8002114:	0324      	lsls	r4, r4, #12
 8002116:	e671      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 8002118:	2201      	movs	r2, #1
 800211a:	4252      	negs	r2, r2
 800211c:	2101      	movs	r1, #1
 800211e:	1ac9      	subs	r1, r1, r3
 8002120:	2938      	cmp	r1, #56	@ 0x38
 8002122:	dd00      	ble.n	8002126 <__aeabi_ddiv+0x3ea>
 8002124:	e666      	b.n	8001df4 <__aeabi_ddiv+0xb8>
 8002126:	291f      	cmp	r1, #31
 8002128:	dc00      	bgt.n	800212c <__aeabi_ddiv+0x3f0>
 800212a:	e0ab      	b.n	8002284 <__aeabi_ddiv+0x548>
 800212c:	201f      	movs	r0, #31
 800212e:	4240      	negs	r0, r0
 8002130:	1ac3      	subs	r3, r0, r3
 8002132:	4658      	mov	r0, fp
 8002134:	40d8      	lsrs	r0, r3
 8002136:	0003      	movs	r3, r0
 8002138:	2920      	cmp	r1, #32
 800213a:	d004      	beq.n	8002146 <__aeabi_ddiv+0x40a>
 800213c:	4658      	mov	r0, fp
 800213e:	4988      	ldr	r1, [pc, #544]	@ (8002360 <__aeabi_ddiv+0x624>)
 8002140:	4451      	add	r1, sl
 8002142:	4088      	lsls	r0, r1
 8002144:	4302      	orrs	r2, r0
 8002146:	1e51      	subs	r1, r2, #1
 8002148:	418a      	sbcs	r2, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	2307      	movs	r3, #7
 800214e:	0019      	movs	r1, r3
 8002150:	2400      	movs	r4, #0
 8002152:	4011      	ands	r1, r2
 8002154:	4213      	tst	r3, r2
 8002156:	d00c      	beq.n	8002172 <__aeabi_ddiv+0x436>
 8002158:	230f      	movs	r3, #15
 800215a:	4013      	ands	r3, r2
 800215c:	2b04      	cmp	r3, #4
 800215e:	d100      	bne.n	8002162 <__aeabi_ddiv+0x426>
 8002160:	e0f9      	b.n	8002356 <__aeabi_ddiv+0x61a>
 8002162:	1d11      	adds	r1, r2, #4
 8002164:	4291      	cmp	r1, r2
 8002166:	419b      	sbcs	r3, r3
 8002168:	000a      	movs	r2, r1
 800216a:	425b      	negs	r3, r3
 800216c:	0759      	lsls	r1, r3, #29
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	0b1c      	lsrs	r4, r3, #12
 8002172:	08d2      	lsrs	r2, r2, #3
 8002174:	430a      	orrs	r2, r1
 8002176:	4690      	mov	r8, r2
 8002178:	2300      	movs	r3, #0
 800217a:	e63f      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 800217c:	2480      	movs	r4, #128	@ 0x80
 800217e:	464b      	mov	r3, r9
 8002180:	0324      	lsls	r4, r4, #12
 8002182:	4223      	tst	r3, r4
 8002184:	d009      	beq.n	800219a <__aeabi_ddiv+0x45e>
 8002186:	465b      	mov	r3, fp
 8002188:	4223      	tst	r3, r4
 800218a:	d106      	bne.n	800219a <__aeabi_ddiv+0x45e>
 800218c:	431c      	orrs	r4, r3
 800218e:	0324      	lsls	r4, r4, #12
 8002190:	002e      	movs	r6, r5
 8002192:	4690      	mov	r8, r2
 8002194:	4b71      	ldr	r3, [pc, #452]	@ (800235c <__aeabi_ddiv+0x620>)
 8002196:	0b24      	lsrs	r4, r4, #12
 8002198:	e630      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 800219a:	2480      	movs	r4, #128	@ 0x80
 800219c:	464b      	mov	r3, r9
 800219e:	0324      	lsls	r4, r4, #12
 80021a0:	431c      	orrs	r4, r3
 80021a2:	0324      	lsls	r4, r4, #12
 80021a4:	9e02      	ldr	r6, [sp, #8]
 80021a6:	4b6d      	ldr	r3, [pc, #436]	@ (800235c <__aeabi_ddiv+0x620>)
 80021a8:	0b24      	lsrs	r4, r4, #12
 80021aa:	e627      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d100      	bne.n	80021b2 <__aeabi_ddiv+0x476>
 80021b0:	e700      	b.n	8001fb4 <__aeabi_ddiv+0x278>
 80021b2:	9800      	ldr	r0, [sp, #0]
 80021b4:	1e51      	subs	r1, r2, #1
 80021b6:	4684      	mov	ip, r0
 80021b8:	4464      	add	r4, ip
 80021ba:	4284      	cmp	r4, r0
 80021bc:	d200      	bcs.n	80021c0 <__aeabi_ddiv+0x484>
 80021be:	e084      	b.n	80022ca <__aeabi_ddiv+0x58e>
 80021c0:	42bc      	cmp	r4, r7
 80021c2:	d200      	bcs.n	80021c6 <__aeabi_ddiv+0x48a>
 80021c4:	e0ae      	b.n	8002324 <__aeabi_ddiv+0x5e8>
 80021c6:	d100      	bne.n	80021ca <__aeabi_ddiv+0x48e>
 80021c8:	e0c1      	b.n	800234e <__aeabi_ddiv+0x612>
 80021ca:	000a      	movs	r2, r1
 80021cc:	e6f0      	b.n	8001fb0 <__aeabi_ddiv+0x274>
 80021ce:	4542      	cmp	r2, r8
 80021d0:	d900      	bls.n	80021d4 <__aeabi_ddiv+0x498>
 80021d2:	e62c      	b.n	8001e2e <__aeabi_ddiv+0xf2>
 80021d4:	464b      	mov	r3, r9
 80021d6:	07dc      	lsls	r4, r3, #31
 80021d8:	0858      	lsrs	r0, r3, #1
 80021da:	4643      	mov	r3, r8
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	431c      	orrs	r4, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	07df      	lsls	r7, r3, #31
 80021e4:	e62a      	b.n	8001e3c <__aeabi_ddiv+0x100>
 80021e6:	f7fe f9c1 	bl	800056c <__clzsi2>
 80021ea:	2315      	movs	r3, #21
 80021ec:	469c      	mov	ip, r3
 80021ee:	4484      	add	ip, r0
 80021f0:	0002      	movs	r2, r0
 80021f2:	4663      	mov	r3, ip
 80021f4:	3220      	adds	r2, #32
 80021f6:	2b1c      	cmp	r3, #28
 80021f8:	dc00      	bgt.n	80021fc <__aeabi_ddiv+0x4c0>
 80021fa:	e72e      	b.n	800205a <__aeabi_ddiv+0x31e>
 80021fc:	0023      	movs	r3, r4
 80021fe:	3808      	subs	r0, #8
 8002200:	4083      	lsls	r3, r0
 8002202:	4699      	mov	r9, r3
 8002204:	2300      	movs	r3, #0
 8002206:	4698      	mov	r8, r3
 8002208:	e736      	b.n	8002078 <__aeabi_ddiv+0x33c>
 800220a:	f7fe f9af 	bl	800056c <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3215      	adds	r2, #21
 8002214:	3320      	adds	r3, #32
 8002216:	2a1c      	cmp	r2, #28
 8002218:	dc00      	bgt.n	800221c <__aeabi_ddiv+0x4e0>
 800221a:	e6fb      	b.n	8002014 <__aeabi_ddiv+0x2d8>
 800221c:	9900      	ldr	r1, [sp, #0]
 800221e:	3808      	subs	r0, #8
 8002220:	4081      	lsls	r1, r0
 8002222:	2200      	movs	r2, #0
 8002224:	468b      	mov	fp, r1
 8002226:	e702      	b.n	800202e <__aeabi_ddiv+0x2f2>
 8002228:	9900      	ldr	r1, [sp, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	468c      	mov	ip, r1
 800222e:	4464      	add	r4, ip
 8002230:	42a1      	cmp	r1, r4
 8002232:	d900      	bls.n	8002236 <__aeabi_ddiv+0x4fa>
 8002234:	e69a      	b.n	8001f6c <__aeabi_ddiv+0x230>
 8002236:	42a2      	cmp	r2, r4
 8002238:	d800      	bhi.n	800223c <__aeabi_ddiv+0x500>
 800223a:	e697      	b.n	8001f6c <__aeabi_ddiv+0x230>
 800223c:	1e83      	subs	r3, r0, #2
 800223e:	4464      	add	r4, ip
 8002240:	e694      	b.n	8001f6c <__aeabi_ddiv+0x230>
 8002242:	46ac      	mov	ip, r5
 8002244:	4461      	add	r1, ip
 8002246:	3f01      	subs	r7, #1
 8002248:	428d      	cmp	r5, r1
 800224a:	d900      	bls.n	800224e <__aeabi_ddiv+0x512>
 800224c:	e680      	b.n	8001f50 <__aeabi_ddiv+0x214>
 800224e:	428a      	cmp	r2, r1
 8002250:	d800      	bhi.n	8002254 <__aeabi_ddiv+0x518>
 8002252:	e67d      	b.n	8001f50 <__aeabi_ddiv+0x214>
 8002254:	1e87      	subs	r7, r0, #2
 8002256:	4461      	add	r1, ip
 8002258:	e67a      	b.n	8001f50 <__aeabi_ddiv+0x214>
 800225a:	4285      	cmp	r5, r0
 800225c:	d000      	beq.n	8002260 <__aeabi_ddiv+0x524>
 800225e:	e65f      	b.n	8001f20 <__aeabi_ddiv+0x1e4>
 8002260:	45b9      	cmp	r9, r7
 8002262:	d900      	bls.n	8002266 <__aeabi_ddiv+0x52a>
 8002264:	e65c      	b.n	8001f20 <__aeabi_ddiv+0x1e4>
 8002266:	e656      	b.n	8001f16 <__aeabi_ddiv+0x1da>
 8002268:	42a2      	cmp	r2, r4
 800226a:	d800      	bhi.n	800226e <__aeabi_ddiv+0x532>
 800226c:	e61a      	b.n	8001ea4 <__aeabi_ddiv+0x168>
 800226e:	1e83      	subs	r3, r0, #2
 8002270:	4464      	add	r4, ip
 8002272:	e617      	b.n	8001ea4 <__aeabi_ddiv+0x168>
 8002274:	428a      	cmp	r2, r1
 8002276:	d800      	bhi.n	800227a <__aeabi_ddiv+0x53e>
 8002278:	e600      	b.n	8001e7c <__aeabi_ddiv+0x140>
 800227a:	46ac      	mov	ip, r5
 800227c:	1e83      	subs	r3, r0, #2
 800227e:	4698      	mov	r8, r3
 8002280:	4461      	add	r1, ip
 8002282:	e5fb      	b.n	8001e7c <__aeabi_ddiv+0x140>
 8002284:	4837      	ldr	r0, [pc, #220]	@ (8002364 <__aeabi_ddiv+0x628>)
 8002286:	0014      	movs	r4, r2
 8002288:	4450      	add	r0, sl
 800228a:	4082      	lsls	r2, r0
 800228c:	465b      	mov	r3, fp
 800228e:	0017      	movs	r7, r2
 8002290:	4083      	lsls	r3, r0
 8002292:	40cc      	lsrs	r4, r1
 8002294:	1e7a      	subs	r2, r7, #1
 8002296:	4197      	sbcs	r7, r2
 8002298:	4323      	orrs	r3, r4
 800229a:	433b      	orrs	r3, r7
 800229c:	001a      	movs	r2, r3
 800229e:	465b      	mov	r3, fp
 80022a0:	40cb      	lsrs	r3, r1
 80022a2:	0751      	lsls	r1, r2, #29
 80022a4:	d009      	beq.n	80022ba <__aeabi_ddiv+0x57e>
 80022a6:	210f      	movs	r1, #15
 80022a8:	4011      	ands	r1, r2
 80022aa:	2904      	cmp	r1, #4
 80022ac:	d005      	beq.n	80022ba <__aeabi_ddiv+0x57e>
 80022ae:	1d11      	adds	r1, r2, #4
 80022b0:	4291      	cmp	r1, r2
 80022b2:	4192      	sbcs	r2, r2
 80022b4:	4252      	negs	r2, r2
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	000a      	movs	r2, r1
 80022ba:	0219      	lsls	r1, r3, #8
 80022bc:	d400      	bmi.n	80022c0 <__aeabi_ddiv+0x584>
 80022be:	e755      	b.n	800216c <__aeabi_ddiv+0x430>
 80022c0:	2200      	movs	r2, #0
 80022c2:	2301      	movs	r3, #1
 80022c4:	2400      	movs	r4, #0
 80022c6:	4690      	mov	r8, r2
 80022c8:	e598      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 80022ca:	000a      	movs	r2, r1
 80022cc:	42bc      	cmp	r4, r7
 80022ce:	d000      	beq.n	80022d2 <__aeabi_ddiv+0x596>
 80022d0:	e66e      	b.n	8001fb0 <__aeabi_ddiv+0x274>
 80022d2:	454b      	cmp	r3, r9
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x59c>
 80022d6:	e66b      	b.n	8001fb0 <__aeabi_ddiv+0x274>
 80022d8:	e66c      	b.n	8001fb4 <__aeabi_ddiv+0x278>
 80022da:	4b23      	ldr	r3, [pc, #140]	@ (8002368 <__aeabi_ddiv+0x62c>)
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <__aeabi_ddiv+0x630>)
 80022de:	4453      	add	r3, sl
 80022e0:	4592      	cmp	sl, r2
 80022e2:	da00      	bge.n	80022e6 <__aeabi_ddiv+0x5aa>
 80022e4:	e718      	b.n	8002118 <__aeabi_ddiv+0x3dc>
 80022e6:	2101      	movs	r1, #1
 80022e8:	4249      	negs	r1, r1
 80022ea:	1d0a      	adds	r2, r1, #4
 80022ec:	428a      	cmp	r2, r1
 80022ee:	4189      	sbcs	r1, r1
 80022f0:	4249      	negs	r1, r1
 80022f2:	448b      	add	fp, r1
 80022f4:	e666      	b.n	8001fc4 <__aeabi_ddiv+0x288>
 80022f6:	210f      	movs	r1, #15
 80022f8:	4011      	ands	r1, r2
 80022fa:	2904      	cmp	r1, #4
 80022fc:	d100      	bne.n	8002300 <__aeabi_ddiv+0x5c4>
 80022fe:	e661      	b.n	8001fc4 <__aeabi_ddiv+0x288>
 8002300:	0011      	movs	r1, r2
 8002302:	e7f2      	b.n	80022ea <__aeabi_ddiv+0x5ae>
 8002304:	42bc      	cmp	r4, r7
 8002306:	d800      	bhi.n	800230a <__aeabi_ddiv+0x5ce>
 8002308:	e60a      	b.n	8001f20 <__aeabi_ddiv+0x1e4>
 800230a:	2302      	movs	r3, #2
 800230c:	425b      	negs	r3, r3
 800230e:	469c      	mov	ip, r3
 8002310:	9900      	ldr	r1, [sp, #0]
 8002312:	444f      	add	r7, r9
 8002314:	454f      	cmp	r7, r9
 8002316:	419b      	sbcs	r3, r3
 8002318:	44e3      	add	fp, ip
 800231a:	468c      	mov	ip, r1
 800231c:	425b      	negs	r3, r3
 800231e:	4463      	add	r3, ip
 8002320:	18c0      	adds	r0, r0, r3
 8002322:	e5ff      	b.n	8001f24 <__aeabi_ddiv+0x1e8>
 8002324:	4649      	mov	r1, r9
 8002326:	9d00      	ldr	r5, [sp, #0]
 8002328:	0048      	lsls	r0, r1, #1
 800232a:	4548      	cmp	r0, r9
 800232c:	4189      	sbcs	r1, r1
 800232e:	46ac      	mov	ip, r5
 8002330:	4249      	negs	r1, r1
 8002332:	4461      	add	r1, ip
 8002334:	4681      	mov	r9, r0
 8002336:	3a02      	subs	r2, #2
 8002338:	1864      	adds	r4, r4, r1
 800233a:	e7c7      	b.n	80022cc <__aeabi_ddiv+0x590>
 800233c:	2480      	movs	r4, #128	@ 0x80
 800233e:	465b      	mov	r3, fp
 8002340:	0324      	lsls	r4, r4, #12
 8002342:	431c      	orrs	r4, r3
 8002344:	0324      	lsls	r4, r4, #12
 8002346:	4690      	mov	r8, r2
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__aeabi_ddiv+0x620>)
 800234a:	0b24      	lsrs	r4, r4, #12
 800234c:	e556      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 800234e:	4599      	cmp	r9, r3
 8002350:	d3e8      	bcc.n	8002324 <__aeabi_ddiv+0x5e8>
 8002352:	000a      	movs	r2, r1
 8002354:	e7bd      	b.n	80022d2 <__aeabi_ddiv+0x596>
 8002356:	2300      	movs	r3, #0
 8002358:	e708      	b.n	800216c <__aeabi_ddiv+0x430>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	000007ff 	.word	0x000007ff
 8002360:	0000043e 	.word	0x0000043e
 8002364:	0000041e 	.word	0x0000041e
 8002368:	000003ff 	.word	0x000003ff
 800236c:	fffffc02 	.word	0xfffffc02

08002370 <__eqdf2>:
 8002370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002372:	4657      	mov	r7, sl
 8002374:	46de      	mov	lr, fp
 8002376:	464e      	mov	r6, r9
 8002378:	4645      	mov	r5, r8
 800237a:	b5e0      	push	{r5, r6, r7, lr}
 800237c:	000d      	movs	r5, r1
 800237e:	0004      	movs	r4, r0
 8002380:	0fe8      	lsrs	r0, r5, #31
 8002382:	4683      	mov	fp, r0
 8002384:	0309      	lsls	r1, r1, #12
 8002386:	0fd8      	lsrs	r0, r3, #31
 8002388:	0b09      	lsrs	r1, r1, #12
 800238a:	4682      	mov	sl, r0
 800238c:	4819      	ldr	r0, [pc, #100]	@ (80023f4 <__eqdf2+0x84>)
 800238e:	468c      	mov	ip, r1
 8002390:	031f      	lsls	r7, r3, #12
 8002392:	0069      	lsls	r1, r5, #1
 8002394:	005e      	lsls	r6, r3, #1
 8002396:	0d49      	lsrs	r1, r1, #21
 8002398:	0b3f      	lsrs	r7, r7, #12
 800239a:	0d76      	lsrs	r6, r6, #21
 800239c:	4281      	cmp	r1, r0
 800239e:	d018      	beq.n	80023d2 <__eqdf2+0x62>
 80023a0:	4286      	cmp	r6, r0
 80023a2:	d00f      	beq.n	80023c4 <__eqdf2+0x54>
 80023a4:	2001      	movs	r0, #1
 80023a6:	42b1      	cmp	r1, r6
 80023a8:	d10d      	bne.n	80023c6 <__eqdf2+0x56>
 80023aa:	45bc      	cmp	ip, r7
 80023ac:	d10b      	bne.n	80023c6 <__eqdf2+0x56>
 80023ae:	4294      	cmp	r4, r2
 80023b0:	d109      	bne.n	80023c6 <__eqdf2+0x56>
 80023b2:	45d3      	cmp	fp, sl
 80023b4:	d01c      	beq.n	80023f0 <__eqdf2+0x80>
 80023b6:	2900      	cmp	r1, #0
 80023b8:	d105      	bne.n	80023c6 <__eqdf2+0x56>
 80023ba:	4660      	mov	r0, ip
 80023bc:	4320      	orrs	r0, r4
 80023be:	1e43      	subs	r3, r0, #1
 80023c0:	4198      	sbcs	r0, r3
 80023c2:	e000      	b.n	80023c6 <__eqdf2+0x56>
 80023c4:	2001      	movs	r0, #1
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2001      	movs	r0, #1
 80023d4:	428e      	cmp	r6, r1
 80023d6:	d1f6      	bne.n	80023c6 <__eqdf2+0x56>
 80023d8:	4661      	mov	r1, ip
 80023da:	4339      	orrs	r1, r7
 80023dc:	000f      	movs	r7, r1
 80023de:	4317      	orrs	r7, r2
 80023e0:	4327      	orrs	r7, r4
 80023e2:	d1f0      	bne.n	80023c6 <__eqdf2+0x56>
 80023e4:	465b      	mov	r3, fp
 80023e6:	4652      	mov	r2, sl
 80023e8:	1a98      	subs	r0, r3, r2
 80023ea:	1e43      	subs	r3, r0, #1
 80023ec:	4198      	sbcs	r0, r3
 80023ee:	e7ea      	b.n	80023c6 <__eqdf2+0x56>
 80023f0:	2000      	movs	r0, #0
 80023f2:	e7e8      	b.n	80023c6 <__eqdf2+0x56>
 80023f4:	000007ff 	.word	0x000007ff

080023f8 <__gedf2>:
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	4657      	mov	r7, sl
 80023fc:	464e      	mov	r6, r9
 80023fe:	4645      	mov	r5, r8
 8002400:	46de      	mov	lr, fp
 8002402:	b5e0      	push	{r5, r6, r7, lr}
 8002404:	000d      	movs	r5, r1
 8002406:	030f      	lsls	r7, r1, #12
 8002408:	0b39      	lsrs	r1, r7, #12
 800240a:	b083      	sub	sp, #12
 800240c:	0004      	movs	r4, r0
 800240e:	4680      	mov	r8, r0
 8002410:	9101      	str	r1, [sp, #4]
 8002412:	0058      	lsls	r0, r3, #1
 8002414:	0fe9      	lsrs	r1, r5, #31
 8002416:	4f31      	ldr	r7, [pc, #196]	@ (80024dc <__gedf2+0xe4>)
 8002418:	0d40      	lsrs	r0, r0, #21
 800241a:	468c      	mov	ip, r1
 800241c:	006e      	lsls	r6, r5, #1
 800241e:	0319      	lsls	r1, r3, #12
 8002420:	4682      	mov	sl, r0
 8002422:	4691      	mov	r9, r2
 8002424:	0d76      	lsrs	r6, r6, #21
 8002426:	0b09      	lsrs	r1, r1, #12
 8002428:	0fd8      	lsrs	r0, r3, #31
 800242a:	42be      	cmp	r6, r7
 800242c:	d01f      	beq.n	800246e <__gedf2+0x76>
 800242e:	45ba      	cmp	sl, r7
 8002430:	d00f      	beq.n	8002452 <__gedf2+0x5a>
 8002432:	2e00      	cmp	r6, #0
 8002434:	d12f      	bne.n	8002496 <__gedf2+0x9e>
 8002436:	4655      	mov	r5, sl
 8002438:	9e01      	ldr	r6, [sp, #4]
 800243a:	4334      	orrs	r4, r6
 800243c:	2d00      	cmp	r5, #0
 800243e:	d127      	bne.n	8002490 <__gedf2+0x98>
 8002440:	430a      	orrs	r2, r1
 8002442:	d03a      	beq.n	80024ba <__gedf2+0xc2>
 8002444:	2c00      	cmp	r4, #0
 8002446:	d145      	bne.n	80024d4 <__gedf2+0xdc>
 8002448:	2800      	cmp	r0, #0
 800244a:	d11a      	bne.n	8002482 <__gedf2+0x8a>
 800244c:	2001      	movs	r0, #1
 800244e:	4240      	negs	r0, r0
 8002450:	e017      	b.n	8002482 <__gedf2+0x8a>
 8002452:	4311      	orrs	r1, r2
 8002454:	d13b      	bne.n	80024ce <__gedf2+0xd6>
 8002456:	2e00      	cmp	r6, #0
 8002458:	d102      	bne.n	8002460 <__gedf2+0x68>
 800245a:	9f01      	ldr	r7, [sp, #4]
 800245c:	4327      	orrs	r7, r4
 800245e:	d0f3      	beq.n	8002448 <__gedf2+0x50>
 8002460:	4584      	cmp	ip, r0
 8002462:	d109      	bne.n	8002478 <__gedf2+0x80>
 8002464:	4663      	mov	r3, ip
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <__gedf2+0x54>
 800246a:	4660      	mov	r0, ip
 800246c:	e009      	b.n	8002482 <__gedf2+0x8a>
 800246e:	9f01      	ldr	r7, [sp, #4]
 8002470:	4327      	orrs	r7, r4
 8002472:	d12c      	bne.n	80024ce <__gedf2+0xd6>
 8002474:	45b2      	cmp	sl, r6
 8002476:	d024      	beq.n	80024c2 <__gedf2+0xca>
 8002478:	4663      	mov	r3, ip
 800247a:	2002      	movs	r0, #2
 800247c:	3b01      	subs	r3, #1
 800247e:	4018      	ands	r0, r3
 8002480:	3801      	subs	r0, #1
 8002482:	b003      	add	sp, #12
 8002484:	bcf0      	pop	{r4, r5, r6, r7}
 8002486:	46bb      	mov	fp, r7
 8002488:	46b2      	mov	sl, r6
 800248a:	46a9      	mov	r9, r5
 800248c:	46a0      	mov	r8, r4
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	2c00      	cmp	r4, #0
 8002492:	d0d9      	beq.n	8002448 <__gedf2+0x50>
 8002494:	e7e4      	b.n	8002460 <__gedf2+0x68>
 8002496:	4654      	mov	r4, sl
 8002498:	2c00      	cmp	r4, #0
 800249a:	d0ed      	beq.n	8002478 <__gedf2+0x80>
 800249c:	4584      	cmp	ip, r0
 800249e:	d1eb      	bne.n	8002478 <__gedf2+0x80>
 80024a0:	4556      	cmp	r6, sl
 80024a2:	dce9      	bgt.n	8002478 <__gedf2+0x80>
 80024a4:	dbde      	blt.n	8002464 <__gedf2+0x6c>
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	428b      	cmp	r3, r1
 80024aa:	d8e5      	bhi.n	8002478 <__gedf2+0x80>
 80024ac:	d1da      	bne.n	8002464 <__gedf2+0x6c>
 80024ae:	45c8      	cmp	r8, r9
 80024b0:	d8e2      	bhi.n	8002478 <__gedf2+0x80>
 80024b2:	2000      	movs	r0, #0
 80024b4:	45c8      	cmp	r8, r9
 80024b6:	d2e4      	bcs.n	8002482 <__gedf2+0x8a>
 80024b8:	e7d4      	b.n	8002464 <__gedf2+0x6c>
 80024ba:	2000      	movs	r0, #0
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d0e0      	beq.n	8002482 <__gedf2+0x8a>
 80024c0:	e7da      	b.n	8002478 <__gedf2+0x80>
 80024c2:	4311      	orrs	r1, r2
 80024c4:	d103      	bne.n	80024ce <__gedf2+0xd6>
 80024c6:	4584      	cmp	ip, r0
 80024c8:	d1d6      	bne.n	8002478 <__gedf2+0x80>
 80024ca:	2000      	movs	r0, #0
 80024cc:	e7d9      	b.n	8002482 <__gedf2+0x8a>
 80024ce:	2002      	movs	r0, #2
 80024d0:	4240      	negs	r0, r0
 80024d2:	e7d6      	b.n	8002482 <__gedf2+0x8a>
 80024d4:	4584      	cmp	ip, r0
 80024d6:	d0e6      	beq.n	80024a6 <__gedf2+0xae>
 80024d8:	e7ce      	b.n	8002478 <__gedf2+0x80>
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	000007ff 	.word	0x000007ff

080024e0 <__ledf2>:
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	4657      	mov	r7, sl
 80024e4:	464e      	mov	r6, r9
 80024e6:	4645      	mov	r5, r8
 80024e8:	46de      	mov	lr, fp
 80024ea:	b5e0      	push	{r5, r6, r7, lr}
 80024ec:	000d      	movs	r5, r1
 80024ee:	030f      	lsls	r7, r1, #12
 80024f0:	0004      	movs	r4, r0
 80024f2:	4680      	mov	r8, r0
 80024f4:	0fe8      	lsrs	r0, r5, #31
 80024f6:	0b39      	lsrs	r1, r7, #12
 80024f8:	4684      	mov	ip, r0
 80024fa:	b083      	sub	sp, #12
 80024fc:	0058      	lsls	r0, r3, #1
 80024fe:	4f30      	ldr	r7, [pc, #192]	@ (80025c0 <__ledf2+0xe0>)
 8002500:	0d40      	lsrs	r0, r0, #21
 8002502:	9101      	str	r1, [sp, #4]
 8002504:	031e      	lsls	r6, r3, #12
 8002506:	0069      	lsls	r1, r5, #1
 8002508:	4682      	mov	sl, r0
 800250a:	4691      	mov	r9, r2
 800250c:	0d49      	lsrs	r1, r1, #21
 800250e:	0b36      	lsrs	r6, r6, #12
 8002510:	0fd8      	lsrs	r0, r3, #31
 8002512:	42b9      	cmp	r1, r7
 8002514:	d020      	beq.n	8002558 <__ledf2+0x78>
 8002516:	45ba      	cmp	sl, r7
 8002518:	d00f      	beq.n	800253a <__ledf2+0x5a>
 800251a:	2900      	cmp	r1, #0
 800251c:	d12b      	bne.n	8002576 <__ledf2+0x96>
 800251e:	9901      	ldr	r1, [sp, #4]
 8002520:	430c      	orrs	r4, r1
 8002522:	4651      	mov	r1, sl
 8002524:	2900      	cmp	r1, #0
 8002526:	d137      	bne.n	8002598 <__ledf2+0xb8>
 8002528:	4332      	orrs	r2, r6
 800252a:	d038      	beq.n	800259e <__ledf2+0xbe>
 800252c:	2c00      	cmp	r4, #0
 800252e:	d144      	bne.n	80025ba <__ledf2+0xda>
 8002530:	2800      	cmp	r0, #0
 8002532:	d119      	bne.n	8002568 <__ledf2+0x88>
 8002534:	2001      	movs	r0, #1
 8002536:	4240      	negs	r0, r0
 8002538:	e016      	b.n	8002568 <__ledf2+0x88>
 800253a:	4316      	orrs	r6, r2
 800253c:	d113      	bne.n	8002566 <__ledf2+0x86>
 800253e:	2900      	cmp	r1, #0
 8002540:	d102      	bne.n	8002548 <__ledf2+0x68>
 8002542:	9f01      	ldr	r7, [sp, #4]
 8002544:	4327      	orrs	r7, r4
 8002546:	d0f3      	beq.n	8002530 <__ledf2+0x50>
 8002548:	4584      	cmp	ip, r0
 800254a:	d020      	beq.n	800258e <__ledf2+0xae>
 800254c:	4663      	mov	r3, ip
 800254e:	2002      	movs	r0, #2
 8002550:	3b01      	subs	r3, #1
 8002552:	4018      	ands	r0, r3
 8002554:	3801      	subs	r0, #1
 8002556:	e007      	b.n	8002568 <__ledf2+0x88>
 8002558:	9f01      	ldr	r7, [sp, #4]
 800255a:	4327      	orrs	r7, r4
 800255c:	d103      	bne.n	8002566 <__ledf2+0x86>
 800255e:	458a      	cmp	sl, r1
 8002560:	d1f4      	bne.n	800254c <__ledf2+0x6c>
 8002562:	4316      	orrs	r6, r2
 8002564:	d01f      	beq.n	80025a6 <__ledf2+0xc6>
 8002566:	2002      	movs	r0, #2
 8002568:	b003      	add	sp, #12
 800256a:	bcf0      	pop	{r4, r5, r6, r7}
 800256c:	46bb      	mov	fp, r7
 800256e:	46b2      	mov	sl, r6
 8002570:	46a9      	mov	r9, r5
 8002572:	46a0      	mov	r8, r4
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002576:	4654      	mov	r4, sl
 8002578:	2c00      	cmp	r4, #0
 800257a:	d0e7      	beq.n	800254c <__ledf2+0x6c>
 800257c:	4584      	cmp	ip, r0
 800257e:	d1e5      	bne.n	800254c <__ledf2+0x6c>
 8002580:	4551      	cmp	r1, sl
 8002582:	dce3      	bgt.n	800254c <__ledf2+0x6c>
 8002584:	db03      	blt.n	800258e <__ledf2+0xae>
 8002586:	9b01      	ldr	r3, [sp, #4]
 8002588:	42b3      	cmp	r3, r6
 800258a:	d8df      	bhi.n	800254c <__ledf2+0x6c>
 800258c:	d00f      	beq.n	80025ae <__ledf2+0xce>
 800258e:	4663      	mov	r3, ip
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0cf      	beq.n	8002534 <__ledf2+0x54>
 8002594:	4660      	mov	r0, ip
 8002596:	e7e7      	b.n	8002568 <__ledf2+0x88>
 8002598:	2c00      	cmp	r4, #0
 800259a:	d0c9      	beq.n	8002530 <__ledf2+0x50>
 800259c:	e7d4      	b.n	8002548 <__ledf2+0x68>
 800259e:	2000      	movs	r0, #0
 80025a0:	2c00      	cmp	r4, #0
 80025a2:	d0e1      	beq.n	8002568 <__ledf2+0x88>
 80025a4:	e7d2      	b.n	800254c <__ledf2+0x6c>
 80025a6:	4584      	cmp	ip, r0
 80025a8:	d1d0      	bne.n	800254c <__ledf2+0x6c>
 80025aa:	2000      	movs	r0, #0
 80025ac:	e7dc      	b.n	8002568 <__ledf2+0x88>
 80025ae:	45c8      	cmp	r8, r9
 80025b0:	d8cc      	bhi.n	800254c <__ledf2+0x6c>
 80025b2:	2000      	movs	r0, #0
 80025b4:	45c8      	cmp	r8, r9
 80025b6:	d2d7      	bcs.n	8002568 <__ledf2+0x88>
 80025b8:	e7e9      	b.n	800258e <__ledf2+0xae>
 80025ba:	4584      	cmp	ip, r0
 80025bc:	d0e3      	beq.n	8002586 <__ledf2+0xa6>
 80025be:	e7c5      	b.n	800254c <__ledf2+0x6c>
 80025c0:	000007ff 	.word	0x000007ff

080025c4 <__aeabi_dmul>:
 80025c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c6:	4657      	mov	r7, sl
 80025c8:	46de      	mov	lr, fp
 80025ca:	464e      	mov	r6, r9
 80025cc:	4645      	mov	r5, r8
 80025ce:	b5e0      	push	{r5, r6, r7, lr}
 80025d0:	001f      	movs	r7, r3
 80025d2:	030b      	lsls	r3, r1, #12
 80025d4:	0b1b      	lsrs	r3, r3, #12
 80025d6:	0016      	movs	r6, r2
 80025d8:	469a      	mov	sl, r3
 80025da:	0fca      	lsrs	r2, r1, #31
 80025dc:	004b      	lsls	r3, r1, #1
 80025de:	0004      	movs	r4, r0
 80025e0:	4693      	mov	fp, r2
 80025e2:	b087      	sub	sp, #28
 80025e4:	0d5b      	lsrs	r3, r3, #21
 80025e6:	d100      	bne.n	80025ea <__aeabi_dmul+0x26>
 80025e8:	e0d5      	b.n	8002796 <__aeabi_dmul+0x1d2>
 80025ea:	4abb      	ldr	r2, [pc, #748]	@ (80028d8 <__aeabi_dmul+0x314>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d100      	bne.n	80025f2 <__aeabi_dmul+0x2e>
 80025f0:	e0f8      	b.n	80027e4 <__aeabi_dmul+0x220>
 80025f2:	4651      	mov	r1, sl
 80025f4:	0f42      	lsrs	r2, r0, #29
 80025f6:	00c9      	lsls	r1, r1, #3
 80025f8:	430a      	orrs	r2, r1
 80025fa:	2180      	movs	r1, #128	@ 0x80
 80025fc:	0409      	lsls	r1, r1, #16
 80025fe:	4311      	orrs	r1, r2
 8002600:	00c2      	lsls	r2, r0, #3
 8002602:	4691      	mov	r9, r2
 8002604:	4ab5      	ldr	r2, [pc, #724]	@ (80028dc <__aeabi_dmul+0x318>)
 8002606:	468a      	mov	sl, r1
 8002608:	189d      	adds	r5, r3, r2
 800260a:	2300      	movs	r3, #0
 800260c:	4698      	mov	r8, r3
 800260e:	9302      	str	r3, [sp, #8]
 8002610:	033c      	lsls	r4, r7, #12
 8002612:	007b      	lsls	r3, r7, #1
 8002614:	0ffa      	lsrs	r2, r7, #31
 8002616:	0030      	movs	r0, r6
 8002618:	0b24      	lsrs	r4, r4, #12
 800261a:	0d5b      	lsrs	r3, r3, #21
 800261c:	9200      	str	r2, [sp, #0]
 800261e:	d100      	bne.n	8002622 <__aeabi_dmul+0x5e>
 8002620:	e096      	b.n	8002750 <__aeabi_dmul+0x18c>
 8002622:	4aad      	ldr	r2, [pc, #692]	@ (80028d8 <__aeabi_dmul+0x314>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d031      	beq.n	800268c <__aeabi_dmul+0xc8>
 8002628:	0f72      	lsrs	r2, r6, #29
 800262a:	00e4      	lsls	r4, r4, #3
 800262c:	4322      	orrs	r2, r4
 800262e:	2480      	movs	r4, #128	@ 0x80
 8002630:	0424      	lsls	r4, r4, #16
 8002632:	4314      	orrs	r4, r2
 8002634:	4aa9      	ldr	r2, [pc, #676]	@ (80028dc <__aeabi_dmul+0x318>)
 8002636:	00f0      	lsls	r0, r6, #3
 8002638:	4694      	mov	ip, r2
 800263a:	4463      	add	r3, ip
 800263c:	195b      	adds	r3, r3, r5
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	9201      	str	r2, [sp, #4]
 8002642:	4642      	mov	r2, r8
 8002644:	2600      	movs	r6, #0
 8002646:	2a0a      	cmp	r2, #10
 8002648:	dc42      	bgt.n	80026d0 <__aeabi_dmul+0x10c>
 800264a:	465a      	mov	r2, fp
 800264c:	9900      	ldr	r1, [sp, #0]
 800264e:	404a      	eors	r2, r1
 8002650:	4693      	mov	fp, r2
 8002652:	4642      	mov	r2, r8
 8002654:	2a02      	cmp	r2, #2
 8002656:	dc32      	bgt.n	80026be <__aeabi_dmul+0xfa>
 8002658:	3a01      	subs	r2, #1
 800265a:	2a01      	cmp	r2, #1
 800265c:	d900      	bls.n	8002660 <__aeabi_dmul+0x9c>
 800265e:	e149      	b.n	80028f4 <__aeabi_dmul+0x330>
 8002660:	2e02      	cmp	r6, #2
 8002662:	d100      	bne.n	8002666 <__aeabi_dmul+0xa2>
 8002664:	e0ca      	b.n	80027fc <__aeabi_dmul+0x238>
 8002666:	2e01      	cmp	r6, #1
 8002668:	d13d      	bne.n	80026e6 <__aeabi_dmul+0x122>
 800266a:	2300      	movs	r3, #0
 800266c:	2400      	movs	r4, #0
 800266e:	2200      	movs	r2, #0
 8002670:	0010      	movs	r0, r2
 8002672:	465a      	mov	r2, fp
 8002674:	051b      	lsls	r3, r3, #20
 8002676:	4323      	orrs	r3, r4
 8002678:	07d2      	lsls	r2, r2, #31
 800267a:	4313      	orrs	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	b007      	add	sp, #28
 8002680:	bcf0      	pop	{r4, r5, r6, r7}
 8002682:	46bb      	mov	fp, r7
 8002684:	46b2      	mov	sl, r6
 8002686:	46a9      	mov	r9, r5
 8002688:	46a0      	mov	r8, r4
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	4b92      	ldr	r3, [pc, #584]	@ (80028d8 <__aeabi_dmul+0x314>)
 800268e:	4326      	orrs	r6, r4
 8002690:	18eb      	adds	r3, r5, r3
 8002692:	2e00      	cmp	r6, #0
 8002694:	d100      	bne.n	8002698 <__aeabi_dmul+0xd4>
 8002696:	e0bb      	b.n	8002810 <__aeabi_dmul+0x24c>
 8002698:	2203      	movs	r2, #3
 800269a:	4641      	mov	r1, r8
 800269c:	4311      	orrs	r1, r2
 800269e:	465a      	mov	r2, fp
 80026a0:	4688      	mov	r8, r1
 80026a2:	9900      	ldr	r1, [sp, #0]
 80026a4:	404a      	eors	r2, r1
 80026a6:	2180      	movs	r1, #128	@ 0x80
 80026a8:	0109      	lsls	r1, r1, #4
 80026aa:	468c      	mov	ip, r1
 80026ac:	0029      	movs	r1, r5
 80026ae:	4461      	add	r1, ip
 80026b0:	9101      	str	r1, [sp, #4]
 80026b2:	4641      	mov	r1, r8
 80026b4:	290a      	cmp	r1, #10
 80026b6:	dd00      	ble.n	80026ba <__aeabi_dmul+0xf6>
 80026b8:	e233      	b.n	8002b22 <__aeabi_dmul+0x55e>
 80026ba:	4693      	mov	fp, r2
 80026bc:	2603      	movs	r6, #3
 80026be:	4642      	mov	r2, r8
 80026c0:	2701      	movs	r7, #1
 80026c2:	4097      	lsls	r7, r2
 80026c4:	21a6      	movs	r1, #166	@ 0xa6
 80026c6:	003a      	movs	r2, r7
 80026c8:	00c9      	lsls	r1, r1, #3
 80026ca:	400a      	ands	r2, r1
 80026cc:	420f      	tst	r7, r1
 80026ce:	d031      	beq.n	8002734 <__aeabi_dmul+0x170>
 80026d0:	9e02      	ldr	r6, [sp, #8]
 80026d2:	2e02      	cmp	r6, #2
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dmul+0x114>
 80026d6:	e235      	b.n	8002b44 <__aeabi_dmul+0x580>
 80026d8:	2e03      	cmp	r6, #3
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0x11a>
 80026dc:	e1d2      	b.n	8002a84 <__aeabi_dmul+0x4c0>
 80026de:	4654      	mov	r4, sl
 80026e0:	4648      	mov	r0, r9
 80026e2:	2e01      	cmp	r6, #1
 80026e4:	d0c1      	beq.n	800266a <__aeabi_dmul+0xa6>
 80026e6:	9a01      	ldr	r2, [sp, #4]
 80026e8:	4b7d      	ldr	r3, [pc, #500]	@ (80028e0 <__aeabi_dmul+0x31c>)
 80026ea:	4694      	mov	ip, r2
 80026ec:	4463      	add	r3, ip
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	dc00      	bgt.n	80026f4 <__aeabi_dmul+0x130>
 80026f2:	e0c0      	b.n	8002876 <__aeabi_dmul+0x2b2>
 80026f4:	0742      	lsls	r2, r0, #29
 80026f6:	d009      	beq.n	800270c <__aeabi_dmul+0x148>
 80026f8:	220f      	movs	r2, #15
 80026fa:	4002      	ands	r2, r0
 80026fc:	2a04      	cmp	r2, #4
 80026fe:	d005      	beq.n	800270c <__aeabi_dmul+0x148>
 8002700:	1d02      	adds	r2, r0, #4
 8002702:	4282      	cmp	r2, r0
 8002704:	4180      	sbcs	r0, r0
 8002706:	4240      	negs	r0, r0
 8002708:	1824      	adds	r4, r4, r0
 800270a:	0010      	movs	r0, r2
 800270c:	01e2      	lsls	r2, r4, #7
 800270e:	d506      	bpl.n	800271e <__aeabi_dmul+0x15a>
 8002710:	4b74      	ldr	r3, [pc, #464]	@ (80028e4 <__aeabi_dmul+0x320>)
 8002712:	9a01      	ldr	r2, [sp, #4]
 8002714:	401c      	ands	r4, r3
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	4694      	mov	ip, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4463      	add	r3, ip
 800271e:	4a72      	ldr	r2, [pc, #456]	@ (80028e8 <__aeabi_dmul+0x324>)
 8002720:	4293      	cmp	r3, r2
 8002722:	dc6b      	bgt.n	80027fc <__aeabi_dmul+0x238>
 8002724:	0762      	lsls	r2, r4, #29
 8002726:	08c0      	lsrs	r0, r0, #3
 8002728:	0264      	lsls	r4, r4, #9
 800272a:	055b      	lsls	r3, r3, #21
 800272c:	4302      	orrs	r2, r0
 800272e:	0b24      	lsrs	r4, r4, #12
 8002730:	0d5b      	lsrs	r3, r3, #21
 8002732:	e79d      	b.n	8002670 <__aeabi_dmul+0xac>
 8002734:	2190      	movs	r1, #144	@ 0x90
 8002736:	0089      	lsls	r1, r1, #2
 8002738:	420f      	tst	r7, r1
 800273a:	d163      	bne.n	8002804 <__aeabi_dmul+0x240>
 800273c:	2288      	movs	r2, #136	@ 0x88
 800273e:	423a      	tst	r2, r7
 8002740:	d100      	bne.n	8002744 <__aeabi_dmul+0x180>
 8002742:	e0d7      	b.n	80028f4 <__aeabi_dmul+0x330>
 8002744:	9b00      	ldr	r3, [sp, #0]
 8002746:	46a2      	mov	sl, r4
 8002748:	469b      	mov	fp, r3
 800274a:	4681      	mov	r9, r0
 800274c:	9602      	str	r6, [sp, #8]
 800274e:	e7bf      	b.n	80026d0 <__aeabi_dmul+0x10c>
 8002750:	0023      	movs	r3, r4
 8002752:	4333      	orrs	r3, r6
 8002754:	d100      	bne.n	8002758 <__aeabi_dmul+0x194>
 8002756:	e07f      	b.n	8002858 <__aeabi_dmul+0x294>
 8002758:	2c00      	cmp	r4, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dmul+0x19a>
 800275c:	e1ad      	b.n	8002aba <__aeabi_dmul+0x4f6>
 800275e:	0020      	movs	r0, r4
 8002760:	f7fd ff04 	bl	800056c <__clzsi2>
 8002764:	0002      	movs	r2, r0
 8002766:	0003      	movs	r3, r0
 8002768:	3a0b      	subs	r2, #11
 800276a:	201d      	movs	r0, #29
 800276c:	0019      	movs	r1, r3
 800276e:	1a82      	subs	r2, r0, r2
 8002770:	0030      	movs	r0, r6
 8002772:	3908      	subs	r1, #8
 8002774:	40d0      	lsrs	r0, r2
 8002776:	408c      	lsls	r4, r1
 8002778:	4304      	orrs	r4, r0
 800277a:	0030      	movs	r0, r6
 800277c:	4088      	lsls	r0, r1
 800277e:	4a5b      	ldr	r2, [pc, #364]	@ (80028ec <__aeabi_dmul+0x328>)
 8002780:	1aeb      	subs	r3, r5, r3
 8002782:	4694      	mov	ip, r2
 8002784:	4463      	add	r3, ip
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	9201      	str	r2, [sp, #4]
 800278a:	4642      	mov	r2, r8
 800278c:	2600      	movs	r6, #0
 800278e:	2a0a      	cmp	r2, #10
 8002790:	dc00      	bgt.n	8002794 <__aeabi_dmul+0x1d0>
 8002792:	e75a      	b.n	800264a <__aeabi_dmul+0x86>
 8002794:	e79c      	b.n	80026d0 <__aeabi_dmul+0x10c>
 8002796:	4653      	mov	r3, sl
 8002798:	4303      	orrs	r3, r0
 800279a:	4699      	mov	r9, r3
 800279c:	d054      	beq.n	8002848 <__aeabi_dmul+0x284>
 800279e:	4653      	mov	r3, sl
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d100      	bne.n	80027a6 <__aeabi_dmul+0x1e2>
 80027a4:	e177      	b.n	8002a96 <__aeabi_dmul+0x4d2>
 80027a6:	4650      	mov	r0, sl
 80027a8:	f7fd fee0 	bl	800056c <__clzsi2>
 80027ac:	230b      	movs	r3, #11
 80027ae:	425b      	negs	r3, r3
 80027b0:	469c      	mov	ip, r3
 80027b2:	0002      	movs	r2, r0
 80027b4:	4484      	add	ip, r0
 80027b6:	0011      	movs	r1, r2
 80027b8:	4650      	mov	r0, sl
 80027ba:	3908      	subs	r1, #8
 80027bc:	4088      	lsls	r0, r1
 80027be:	231d      	movs	r3, #29
 80027c0:	4680      	mov	r8, r0
 80027c2:	4660      	mov	r0, ip
 80027c4:	1a1b      	subs	r3, r3, r0
 80027c6:	0020      	movs	r0, r4
 80027c8:	40d8      	lsrs	r0, r3
 80027ca:	0003      	movs	r3, r0
 80027cc:	4640      	mov	r0, r8
 80027ce:	4303      	orrs	r3, r0
 80027d0:	469a      	mov	sl, r3
 80027d2:	0023      	movs	r3, r4
 80027d4:	408b      	lsls	r3, r1
 80027d6:	4699      	mov	r9, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	4d44      	ldr	r5, [pc, #272]	@ (80028ec <__aeabi_dmul+0x328>)
 80027dc:	4698      	mov	r8, r3
 80027de:	1aad      	subs	r5, r5, r2
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	e715      	b.n	8002610 <__aeabi_dmul+0x4c>
 80027e4:	4652      	mov	r2, sl
 80027e6:	4302      	orrs	r2, r0
 80027e8:	4691      	mov	r9, r2
 80027ea:	d126      	bne.n	800283a <__aeabi_dmul+0x276>
 80027ec:	2200      	movs	r2, #0
 80027ee:	001d      	movs	r5, r3
 80027f0:	2302      	movs	r3, #2
 80027f2:	4692      	mov	sl, r2
 80027f4:	3208      	adds	r2, #8
 80027f6:	4690      	mov	r8, r2
 80027f8:	9302      	str	r3, [sp, #8]
 80027fa:	e709      	b.n	8002610 <__aeabi_dmul+0x4c>
 80027fc:	2400      	movs	r4, #0
 80027fe:	2200      	movs	r2, #0
 8002800:	4b35      	ldr	r3, [pc, #212]	@ (80028d8 <__aeabi_dmul+0x314>)
 8002802:	e735      	b.n	8002670 <__aeabi_dmul+0xac>
 8002804:	2300      	movs	r3, #0
 8002806:	2480      	movs	r4, #128	@ 0x80
 8002808:	469b      	mov	fp, r3
 800280a:	0324      	lsls	r4, r4, #12
 800280c:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <__aeabi_dmul+0x314>)
 800280e:	e72f      	b.n	8002670 <__aeabi_dmul+0xac>
 8002810:	2202      	movs	r2, #2
 8002812:	4641      	mov	r1, r8
 8002814:	4311      	orrs	r1, r2
 8002816:	2280      	movs	r2, #128	@ 0x80
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	4694      	mov	ip, r2
 800281c:	002a      	movs	r2, r5
 800281e:	4462      	add	r2, ip
 8002820:	4688      	mov	r8, r1
 8002822:	9201      	str	r2, [sp, #4]
 8002824:	290a      	cmp	r1, #10
 8002826:	dd00      	ble.n	800282a <__aeabi_dmul+0x266>
 8002828:	e752      	b.n	80026d0 <__aeabi_dmul+0x10c>
 800282a:	465a      	mov	r2, fp
 800282c:	2000      	movs	r0, #0
 800282e:	9900      	ldr	r1, [sp, #0]
 8002830:	0004      	movs	r4, r0
 8002832:	404a      	eors	r2, r1
 8002834:	4693      	mov	fp, r2
 8002836:	2602      	movs	r6, #2
 8002838:	e70b      	b.n	8002652 <__aeabi_dmul+0x8e>
 800283a:	220c      	movs	r2, #12
 800283c:	001d      	movs	r5, r3
 800283e:	2303      	movs	r3, #3
 8002840:	4681      	mov	r9, r0
 8002842:	4690      	mov	r8, r2
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	e6e3      	b.n	8002610 <__aeabi_dmul+0x4c>
 8002848:	2300      	movs	r3, #0
 800284a:	469a      	mov	sl, r3
 800284c:	3304      	adds	r3, #4
 800284e:	4698      	mov	r8, r3
 8002850:	3b03      	subs	r3, #3
 8002852:	2500      	movs	r5, #0
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	e6db      	b.n	8002610 <__aeabi_dmul+0x4c>
 8002858:	4642      	mov	r2, r8
 800285a:	3301      	adds	r3, #1
 800285c:	431a      	orrs	r2, r3
 800285e:	002b      	movs	r3, r5
 8002860:	4690      	mov	r8, r2
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	9201      	str	r2, [sp, #4]
 8002866:	4642      	mov	r2, r8
 8002868:	2400      	movs	r4, #0
 800286a:	2000      	movs	r0, #0
 800286c:	2601      	movs	r6, #1
 800286e:	2a0a      	cmp	r2, #10
 8002870:	dc00      	bgt.n	8002874 <__aeabi_dmul+0x2b0>
 8002872:	e6ea      	b.n	800264a <__aeabi_dmul+0x86>
 8002874:	e72c      	b.n	80026d0 <__aeabi_dmul+0x10c>
 8002876:	2201      	movs	r2, #1
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	2a38      	cmp	r2, #56	@ 0x38
 800287c:	dd00      	ble.n	8002880 <__aeabi_dmul+0x2bc>
 800287e:	e6f4      	b.n	800266a <__aeabi_dmul+0xa6>
 8002880:	2a1f      	cmp	r2, #31
 8002882:	dc00      	bgt.n	8002886 <__aeabi_dmul+0x2c2>
 8002884:	e12a      	b.n	8002adc <__aeabi_dmul+0x518>
 8002886:	211f      	movs	r1, #31
 8002888:	4249      	negs	r1, r1
 800288a:	1acb      	subs	r3, r1, r3
 800288c:	0021      	movs	r1, r4
 800288e:	40d9      	lsrs	r1, r3
 8002890:	000b      	movs	r3, r1
 8002892:	2a20      	cmp	r2, #32
 8002894:	d005      	beq.n	80028a2 <__aeabi_dmul+0x2de>
 8002896:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <__aeabi_dmul+0x32c>)
 8002898:	9d01      	ldr	r5, [sp, #4]
 800289a:	4694      	mov	ip, r2
 800289c:	4465      	add	r5, ip
 800289e:	40ac      	lsls	r4, r5
 80028a0:	4320      	orrs	r0, r4
 80028a2:	1e42      	subs	r2, r0, #1
 80028a4:	4190      	sbcs	r0, r2
 80028a6:	4318      	orrs	r0, r3
 80028a8:	2307      	movs	r3, #7
 80028aa:	0019      	movs	r1, r3
 80028ac:	2400      	movs	r4, #0
 80028ae:	4001      	ands	r1, r0
 80028b0:	4203      	tst	r3, r0
 80028b2:	d00c      	beq.n	80028ce <__aeabi_dmul+0x30a>
 80028b4:	230f      	movs	r3, #15
 80028b6:	4003      	ands	r3, r0
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d100      	bne.n	80028be <__aeabi_dmul+0x2fa>
 80028bc:	e140      	b.n	8002b40 <__aeabi_dmul+0x57c>
 80028be:	1d03      	adds	r3, r0, #4
 80028c0:	4283      	cmp	r3, r0
 80028c2:	41a4      	sbcs	r4, r4
 80028c4:	0018      	movs	r0, r3
 80028c6:	4264      	negs	r4, r4
 80028c8:	0761      	lsls	r1, r4, #29
 80028ca:	0264      	lsls	r4, r4, #9
 80028cc:	0b24      	lsrs	r4, r4, #12
 80028ce:	08c2      	lsrs	r2, r0, #3
 80028d0:	2300      	movs	r3, #0
 80028d2:	430a      	orrs	r2, r1
 80028d4:	e6cc      	b.n	8002670 <__aeabi_dmul+0xac>
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	000007ff 	.word	0x000007ff
 80028dc:	fffffc01 	.word	0xfffffc01
 80028e0:	000003ff 	.word	0x000003ff
 80028e4:	feffffff 	.word	0xfeffffff
 80028e8:	000007fe 	.word	0x000007fe
 80028ec:	fffffc0d 	.word	0xfffffc0d
 80028f0:	0000043e 	.word	0x0000043e
 80028f4:	4649      	mov	r1, r9
 80028f6:	464a      	mov	r2, r9
 80028f8:	0409      	lsls	r1, r1, #16
 80028fa:	0c09      	lsrs	r1, r1, #16
 80028fc:	000d      	movs	r5, r1
 80028fe:	0c16      	lsrs	r6, r2, #16
 8002900:	0c02      	lsrs	r2, r0, #16
 8002902:	0400      	lsls	r0, r0, #16
 8002904:	0c00      	lsrs	r0, r0, #16
 8002906:	4345      	muls	r5, r0
 8002908:	46ac      	mov	ip, r5
 800290a:	0005      	movs	r5, r0
 800290c:	4375      	muls	r5, r6
 800290e:	46a8      	mov	r8, r5
 8002910:	0015      	movs	r5, r2
 8002912:	000f      	movs	r7, r1
 8002914:	4375      	muls	r5, r6
 8002916:	9200      	str	r2, [sp, #0]
 8002918:	9502      	str	r5, [sp, #8]
 800291a:	002a      	movs	r2, r5
 800291c:	9d00      	ldr	r5, [sp, #0]
 800291e:	436f      	muls	r7, r5
 8002920:	4665      	mov	r5, ip
 8002922:	0c2d      	lsrs	r5, r5, #16
 8002924:	46a9      	mov	r9, r5
 8002926:	4447      	add	r7, r8
 8002928:	444f      	add	r7, r9
 800292a:	45b8      	cmp	r8, r7
 800292c:	d905      	bls.n	800293a <__aeabi_dmul+0x376>
 800292e:	0015      	movs	r5, r2
 8002930:	2280      	movs	r2, #128	@ 0x80
 8002932:	0252      	lsls	r2, r2, #9
 8002934:	4690      	mov	r8, r2
 8002936:	4445      	add	r5, r8
 8002938:	9502      	str	r5, [sp, #8]
 800293a:	0c3d      	lsrs	r5, r7, #16
 800293c:	9503      	str	r5, [sp, #12]
 800293e:	4665      	mov	r5, ip
 8002940:	042d      	lsls	r5, r5, #16
 8002942:	043f      	lsls	r7, r7, #16
 8002944:	0c2d      	lsrs	r5, r5, #16
 8002946:	46ac      	mov	ip, r5
 8002948:	003d      	movs	r5, r7
 800294a:	4465      	add	r5, ip
 800294c:	9504      	str	r5, [sp, #16]
 800294e:	0c25      	lsrs	r5, r4, #16
 8002950:	0424      	lsls	r4, r4, #16
 8002952:	0c24      	lsrs	r4, r4, #16
 8002954:	46ac      	mov	ip, r5
 8002956:	0025      	movs	r5, r4
 8002958:	4375      	muls	r5, r6
 800295a:	46a8      	mov	r8, r5
 800295c:	4665      	mov	r5, ip
 800295e:	000f      	movs	r7, r1
 8002960:	4369      	muls	r1, r5
 8002962:	4441      	add	r1, r8
 8002964:	4689      	mov	r9, r1
 8002966:	4367      	muls	r7, r4
 8002968:	0c39      	lsrs	r1, r7, #16
 800296a:	4449      	add	r1, r9
 800296c:	436e      	muls	r6, r5
 800296e:	4588      	cmp	r8, r1
 8002970:	d903      	bls.n	800297a <__aeabi_dmul+0x3b6>
 8002972:	2280      	movs	r2, #128	@ 0x80
 8002974:	0252      	lsls	r2, r2, #9
 8002976:	4690      	mov	r8, r2
 8002978:	4446      	add	r6, r8
 800297a:	0c0d      	lsrs	r5, r1, #16
 800297c:	46a8      	mov	r8, r5
 800297e:	0035      	movs	r5, r6
 8002980:	4445      	add	r5, r8
 8002982:	9505      	str	r5, [sp, #20]
 8002984:	9d03      	ldr	r5, [sp, #12]
 8002986:	043f      	lsls	r7, r7, #16
 8002988:	46a8      	mov	r8, r5
 800298a:	0c3f      	lsrs	r7, r7, #16
 800298c:	0409      	lsls	r1, r1, #16
 800298e:	19c9      	adds	r1, r1, r7
 8002990:	4488      	add	r8, r1
 8002992:	4645      	mov	r5, r8
 8002994:	9503      	str	r5, [sp, #12]
 8002996:	4655      	mov	r5, sl
 8002998:	042e      	lsls	r6, r5, #16
 800299a:	0c36      	lsrs	r6, r6, #16
 800299c:	0c2f      	lsrs	r7, r5, #16
 800299e:	0035      	movs	r5, r6
 80029a0:	4345      	muls	r5, r0
 80029a2:	4378      	muls	r0, r7
 80029a4:	4681      	mov	r9, r0
 80029a6:	0038      	movs	r0, r7
 80029a8:	46a8      	mov	r8, r5
 80029aa:	0c2d      	lsrs	r5, r5, #16
 80029ac:	46aa      	mov	sl, r5
 80029ae:	9a00      	ldr	r2, [sp, #0]
 80029b0:	4350      	muls	r0, r2
 80029b2:	4372      	muls	r2, r6
 80029b4:	444a      	add	r2, r9
 80029b6:	4452      	add	r2, sl
 80029b8:	4591      	cmp	r9, r2
 80029ba:	d903      	bls.n	80029c4 <__aeabi_dmul+0x400>
 80029bc:	2580      	movs	r5, #128	@ 0x80
 80029be:	026d      	lsls	r5, r5, #9
 80029c0:	46a9      	mov	r9, r5
 80029c2:	4448      	add	r0, r9
 80029c4:	0c15      	lsrs	r5, r2, #16
 80029c6:	46a9      	mov	r9, r5
 80029c8:	4645      	mov	r5, r8
 80029ca:	042d      	lsls	r5, r5, #16
 80029cc:	0c2d      	lsrs	r5, r5, #16
 80029ce:	46a8      	mov	r8, r5
 80029d0:	4665      	mov	r5, ip
 80029d2:	437d      	muls	r5, r7
 80029d4:	0412      	lsls	r2, r2, #16
 80029d6:	4448      	add	r0, r9
 80029d8:	4490      	add	r8, r2
 80029da:	46a9      	mov	r9, r5
 80029dc:	0032      	movs	r2, r6
 80029de:	4665      	mov	r5, ip
 80029e0:	4362      	muls	r2, r4
 80029e2:	436e      	muls	r6, r5
 80029e4:	437c      	muls	r4, r7
 80029e6:	0c17      	lsrs	r7, r2, #16
 80029e8:	1936      	adds	r6, r6, r4
 80029ea:	19bf      	adds	r7, r7, r6
 80029ec:	42bc      	cmp	r4, r7
 80029ee:	d903      	bls.n	80029f8 <__aeabi_dmul+0x434>
 80029f0:	2480      	movs	r4, #128	@ 0x80
 80029f2:	0264      	lsls	r4, r4, #9
 80029f4:	46a4      	mov	ip, r4
 80029f6:	44e1      	add	r9, ip
 80029f8:	9c02      	ldr	r4, [sp, #8]
 80029fa:	9e03      	ldr	r6, [sp, #12]
 80029fc:	46a4      	mov	ip, r4
 80029fe:	9d05      	ldr	r5, [sp, #20]
 8002a00:	4466      	add	r6, ip
 8002a02:	428e      	cmp	r6, r1
 8002a04:	4189      	sbcs	r1, r1
 8002a06:	46ac      	mov	ip, r5
 8002a08:	0412      	lsls	r2, r2, #16
 8002a0a:	043c      	lsls	r4, r7, #16
 8002a0c:	0c12      	lsrs	r2, r2, #16
 8002a0e:	18a2      	adds	r2, r4, r2
 8002a10:	4462      	add	r2, ip
 8002a12:	4249      	negs	r1, r1
 8002a14:	1854      	adds	r4, r2, r1
 8002a16:	4446      	add	r6, r8
 8002a18:	46a4      	mov	ip, r4
 8002a1a:	4546      	cmp	r6, r8
 8002a1c:	41a4      	sbcs	r4, r4
 8002a1e:	4682      	mov	sl, r0
 8002a20:	4264      	negs	r4, r4
 8002a22:	46a0      	mov	r8, r4
 8002a24:	42aa      	cmp	r2, r5
 8002a26:	4192      	sbcs	r2, r2
 8002a28:	458c      	cmp	ip, r1
 8002a2a:	4189      	sbcs	r1, r1
 8002a2c:	44e2      	add	sl, ip
 8002a2e:	44d0      	add	r8, sl
 8002a30:	4249      	negs	r1, r1
 8002a32:	4252      	negs	r2, r2
 8002a34:	430a      	orrs	r2, r1
 8002a36:	45a0      	cmp	r8, r4
 8002a38:	41a4      	sbcs	r4, r4
 8002a3a:	4582      	cmp	sl, r0
 8002a3c:	4189      	sbcs	r1, r1
 8002a3e:	4264      	negs	r4, r4
 8002a40:	4249      	negs	r1, r1
 8002a42:	430c      	orrs	r4, r1
 8002a44:	4641      	mov	r1, r8
 8002a46:	0c3f      	lsrs	r7, r7, #16
 8002a48:	19d2      	adds	r2, r2, r7
 8002a4a:	1912      	adds	r2, r2, r4
 8002a4c:	0dcc      	lsrs	r4, r1, #23
 8002a4e:	9904      	ldr	r1, [sp, #16]
 8002a50:	0270      	lsls	r0, r6, #9
 8002a52:	4308      	orrs	r0, r1
 8002a54:	1e41      	subs	r1, r0, #1
 8002a56:	4188      	sbcs	r0, r1
 8002a58:	4641      	mov	r1, r8
 8002a5a:	444a      	add	r2, r9
 8002a5c:	0df6      	lsrs	r6, r6, #23
 8002a5e:	0252      	lsls	r2, r2, #9
 8002a60:	4330      	orrs	r0, r6
 8002a62:	0249      	lsls	r1, r1, #9
 8002a64:	4314      	orrs	r4, r2
 8002a66:	4308      	orrs	r0, r1
 8002a68:	01d2      	lsls	r2, r2, #7
 8002a6a:	d535      	bpl.n	8002ad8 <__aeabi_dmul+0x514>
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	0843      	lsrs	r3, r0, #1
 8002a70:	4002      	ands	r2, r0
 8002a72:	4313      	orrs	r3, r2
 8002a74:	07e0      	lsls	r0, r4, #31
 8002a76:	4318      	orrs	r0, r3
 8002a78:	0864      	lsrs	r4, r4, #1
 8002a7a:	e634      	b.n	80026e6 <__aeabi_dmul+0x122>
 8002a7c:	9b00      	ldr	r3, [sp, #0]
 8002a7e:	46a2      	mov	sl, r4
 8002a80:	469b      	mov	fp, r3
 8002a82:	4681      	mov	r9, r0
 8002a84:	2480      	movs	r4, #128	@ 0x80
 8002a86:	4653      	mov	r3, sl
 8002a88:	0324      	lsls	r4, r4, #12
 8002a8a:	431c      	orrs	r4, r3
 8002a8c:	0324      	lsls	r4, r4, #12
 8002a8e:	464a      	mov	r2, r9
 8002a90:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <__aeabi_dmul+0x588>)
 8002a92:	0b24      	lsrs	r4, r4, #12
 8002a94:	e5ec      	b.n	8002670 <__aeabi_dmul+0xac>
 8002a96:	f7fd fd69 	bl	800056c <__clzsi2>
 8002a9a:	2315      	movs	r3, #21
 8002a9c:	469c      	mov	ip, r3
 8002a9e:	4484      	add	ip, r0
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	4663      	mov	r3, ip
 8002aa4:	3220      	adds	r2, #32
 8002aa6:	2b1c      	cmp	r3, #28
 8002aa8:	dc00      	bgt.n	8002aac <__aeabi_dmul+0x4e8>
 8002aaa:	e684      	b.n	80027b6 <__aeabi_dmul+0x1f2>
 8002aac:	2300      	movs	r3, #0
 8002aae:	4699      	mov	r9, r3
 8002ab0:	0023      	movs	r3, r4
 8002ab2:	3808      	subs	r0, #8
 8002ab4:	4083      	lsls	r3, r0
 8002ab6:	469a      	mov	sl, r3
 8002ab8:	e68e      	b.n	80027d8 <__aeabi_dmul+0x214>
 8002aba:	f7fd fd57 	bl	800056c <__clzsi2>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	3215      	adds	r2, #21
 8002ac4:	3320      	adds	r3, #32
 8002ac6:	2a1c      	cmp	r2, #28
 8002ac8:	dc00      	bgt.n	8002acc <__aeabi_dmul+0x508>
 8002aca:	e64e      	b.n	800276a <__aeabi_dmul+0x1a6>
 8002acc:	0002      	movs	r2, r0
 8002ace:	0034      	movs	r4, r6
 8002ad0:	3a08      	subs	r2, #8
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	4094      	lsls	r4, r2
 8002ad6:	e652      	b.n	800277e <__aeabi_dmul+0x1ba>
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	e604      	b.n	80026e6 <__aeabi_dmul+0x122>
 8002adc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <__aeabi_dmul+0x58c>)
 8002ade:	0021      	movs	r1, r4
 8002ae0:	469c      	mov	ip, r3
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	9d01      	ldr	r5, [sp, #4]
 8002ae6:	40d3      	lsrs	r3, r2
 8002ae8:	4465      	add	r5, ip
 8002aea:	40a9      	lsls	r1, r5
 8002aec:	4319      	orrs	r1, r3
 8002aee:	0003      	movs	r3, r0
 8002af0:	40ab      	lsls	r3, r5
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	4183      	sbcs	r3, r0
 8002af6:	4319      	orrs	r1, r3
 8002af8:	0008      	movs	r0, r1
 8002afa:	40d4      	lsrs	r4, r2
 8002afc:	074b      	lsls	r3, r1, #29
 8002afe:	d009      	beq.n	8002b14 <__aeabi_dmul+0x550>
 8002b00:	230f      	movs	r3, #15
 8002b02:	400b      	ands	r3, r1
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d005      	beq.n	8002b14 <__aeabi_dmul+0x550>
 8002b08:	1d0b      	adds	r3, r1, #4
 8002b0a:	428b      	cmp	r3, r1
 8002b0c:	4180      	sbcs	r0, r0
 8002b0e:	4240      	negs	r0, r0
 8002b10:	1824      	adds	r4, r4, r0
 8002b12:	0018      	movs	r0, r3
 8002b14:	0223      	lsls	r3, r4, #8
 8002b16:	d400      	bmi.n	8002b1a <__aeabi_dmul+0x556>
 8002b18:	e6d6      	b.n	80028c8 <__aeabi_dmul+0x304>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	2400      	movs	r4, #0
 8002b1e:	2200      	movs	r2, #0
 8002b20:	e5a6      	b.n	8002670 <__aeabi_dmul+0xac>
 8002b22:	290f      	cmp	r1, #15
 8002b24:	d1aa      	bne.n	8002a7c <__aeabi_dmul+0x4b8>
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	4652      	mov	r2, sl
 8002b2a:	031b      	lsls	r3, r3, #12
 8002b2c:	421a      	tst	r2, r3
 8002b2e:	d0a9      	beq.n	8002a84 <__aeabi_dmul+0x4c0>
 8002b30:	421c      	tst	r4, r3
 8002b32:	d1a7      	bne.n	8002a84 <__aeabi_dmul+0x4c0>
 8002b34:	431c      	orrs	r4, r3
 8002b36:	9b00      	ldr	r3, [sp, #0]
 8002b38:	0002      	movs	r2, r0
 8002b3a:	469b      	mov	fp, r3
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <__aeabi_dmul+0x588>)
 8002b3e:	e597      	b.n	8002670 <__aeabi_dmul+0xac>
 8002b40:	2400      	movs	r4, #0
 8002b42:	e6c1      	b.n	80028c8 <__aeabi_dmul+0x304>
 8002b44:	2400      	movs	r4, #0
 8002b46:	4b01      	ldr	r3, [pc, #4]	@ (8002b4c <__aeabi_dmul+0x588>)
 8002b48:	0022      	movs	r2, r4
 8002b4a:	e591      	b.n	8002670 <__aeabi_dmul+0xac>
 8002b4c:	000007ff 	.word	0x000007ff
 8002b50:	0000041e 	.word	0x0000041e

08002b54 <__aeabi_dsub>:
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b56:	464e      	mov	r6, r9
 8002b58:	4645      	mov	r5, r8
 8002b5a:	46de      	mov	lr, fp
 8002b5c:	4657      	mov	r7, sl
 8002b5e:	b5e0      	push	{r5, r6, r7, lr}
 8002b60:	b085      	sub	sp, #20
 8002b62:	9000      	str	r0, [sp, #0]
 8002b64:	9101      	str	r1, [sp, #4]
 8002b66:	030c      	lsls	r4, r1, #12
 8002b68:	004f      	lsls	r7, r1, #1
 8002b6a:	0fce      	lsrs	r6, r1, #31
 8002b6c:	0a61      	lsrs	r1, r4, #9
 8002b6e:	9c00      	ldr	r4, [sp, #0]
 8002b70:	46b0      	mov	r8, r6
 8002b72:	0f64      	lsrs	r4, r4, #29
 8002b74:	430c      	orrs	r4, r1
 8002b76:	9900      	ldr	r1, [sp, #0]
 8002b78:	0d7f      	lsrs	r7, r7, #21
 8002b7a:	00c8      	lsls	r0, r1, #3
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	001a      	movs	r2, r3
 8002b80:	031b      	lsls	r3, r3, #12
 8002b82:	469c      	mov	ip, r3
 8002b84:	9100      	str	r1, [sp, #0]
 8002b86:	9201      	str	r2, [sp, #4]
 8002b88:	0051      	lsls	r1, r2, #1
 8002b8a:	0d4b      	lsrs	r3, r1, #21
 8002b8c:	4699      	mov	r9, r3
 8002b8e:	9b01      	ldr	r3, [sp, #4]
 8002b90:	9d00      	ldr	r5, [sp, #0]
 8002b92:	0fd9      	lsrs	r1, r3, #31
 8002b94:	4663      	mov	r3, ip
 8002b96:	0f6a      	lsrs	r2, r5, #29
 8002b98:	0a5b      	lsrs	r3, r3, #9
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	00ea      	lsls	r2, r5, #3
 8002b9e:	4694      	mov	ip, r2
 8002ba0:	4693      	mov	fp, r2
 8002ba2:	4ac1      	ldr	r2, [pc, #772]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002ba4:	9003      	str	r0, [sp, #12]
 8002ba6:	9302      	str	r3, [sp, #8]
 8002ba8:	4591      	cmp	r9, r2
 8002baa:	d100      	bne.n	8002bae <__aeabi_dsub+0x5a>
 8002bac:	e0cd      	b.n	8002d4a <__aeabi_dsub+0x1f6>
 8002bae:	2501      	movs	r5, #1
 8002bb0:	4069      	eors	r1, r5
 8002bb2:	464d      	mov	r5, r9
 8002bb4:	1b7d      	subs	r5, r7, r5
 8002bb6:	46aa      	mov	sl, r5
 8002bb8:	428e      	cmp	r6, r1
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x6a>
 8002bbc:	e080      	b.n	8002cc0 <__aeabi_dsub+0x16c>
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	dc00      	bgt.n	8002bc4 <__aeabi_dsub+0x70>
 8002bc2:	e335      	b.n	8003230 <__aeabi_dsub+0x6dc>
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	2900      	cmp	r1, #0
 8002bc8:	d100      	bne.n	8002bcc <__aeabi_dsub+0x78>
 8002bca:	e0df      	b.n	8002d8c <__aeabi_dsub+0x238>
 8002bcc:	4297      	cmp	r7, r2
 8002bce:	d100      	bne.n	8002bd2 <__aeabi_dsub+0x7e>
 8002bd0:	e194      	b.n	8002efc <__aeabi_dsub+0x3a8>
 8002bd2:	4652      	mov	r2, sl
 8002bd4:	2501      	movs	r5, #1
 8002bd6:	2a38      	cmp	r2, #56	@ 0x38
 8002bd8:	dc19      	bgt.n	8002c0e <__aeabi_dsub+0xba>
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	9b02      	ldr	r3, [sp, #8]
 8002bde:	0412      	lsls	r2, r2, #16
 8002be0:	4313      	orrs	r3, r2
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	4652      	mov	r2, sl
 8002be6:	2a1f      	cmp	r2, #31
 8002be8:	dd00      	ble.n	8002bec <__aeabi_dsub+0x98>
 8002bea:	e1e3      	b.n	8002fb4 <__aeabi_dsub+0x460>
 8002bec:	4653      	mov	r3, sl
 8002bee:	2220      	movs	r2, #32
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	9d02      	ldr	r5, [sp, #8]
 8002bf4:	1ad2      	subs	r2, r2, r3
 8002bf6:	4095      	lsls	r5, r2
 8002bf8:	40d9      	lsrs	r1, r3
 8002bfa:	430d      	orrs	r5, r1
 8002bfc:	4661      	mov	r1, ip
 8002bfe:	4091      	lsls	r1, r2
 8002c00:	000a      	movs	r2, r1
 8002c02:	1e51      	subs	r1, r2, #1
 8002c04:	418a      	sbcs	r2, r1
 8002c06:	4315      	orrs	r5, r2
 8002c08:	9a02      	ldr	r2, [sp, #8]
 8002c0a:	40da      	lsrs	r2, r3
 8002c0c:	1aa4      	subs	r4, r4, r2
 8002c0e:	1b45      	subs	r5, r0, r5
 8002c10:	42a8      	cmp	r0, r5
 8002c12:	4180      	sbcs	r0, r0
 8002c14:	4240      	negs	r0, r0
 8002c16:	1a24      	subs	r4, r4, r0
 8002c18:	0223      	lsls	r3, r4, #8
 8002c1a:	d400      	bmi.n	8002c1e <__aeabi_dsub+0xca>
 8002c1c:	e13d      	b.n	8002e9a <__aeabi_dsub+0x346>
 8002c1e:	0264      	lsls	r4, r4, #9
 8002c20:	0a64      	lsrs	r4, r4, #9
 8002c22:	2c00      	cmp	r4, #0
 8002c24:	d100      	bne.n	8002c28 <__aeabi_dsub+0xd4>
 8002c26:	e147      	b.n	8002eb8 <__aeabi_dsub+0x364>
 8002c28:	0020      	movs	r0, r4
 8002c2a:	f7fd fc9f 	bl	800056c <__clzsi2>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	3b08      	subs	r3, #8
 8002c32:	2120      	movs	r1, #32
 8002c34:	0028      	movs	r0, r5
 8002c36:	1aca      	subs	r2, r1, r3
 8002c38:	40d0      	lsrs	r0, r2
 8002c3a:	409c      	lsls	r4, r3
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	409d      	lsls	r5, r3
 8002c40:	4322      	orrs	r2, r4
 8002c42:	429f      	cmp	r7, r3
 8002c44:	dd00      	ble.n	8002c48 <__aeabi_dsub+0xf4>
 8002c46:	e177      	b.n	8002f38 <__aeabi_dsub+0x3e4>
 8002c48:	1bd8      	subs	r0, r3, r7
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	1a09      	subs	r1, r1, r0
 8002c4e:	002c      	movs	r4, r5
 8002c50:	408d      	lsls	r5, r1
 8002c52:	40c4      	lsrs	r4, r0
 8002c54:	1e6b      	subs	r3, r5, #1
 8002c56:	419d      	sbcs	r5, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	40c2      	lsrs	r2, r0
 8002c5c:	408b      	lsls	r3, r1
 8002c5e:	4325      	orrs	r5, r4
 8002c60:	2700      	movs	r7, #0
 8002c62:	0014      	movs	r4, r2
 8002c64:	431d      	orrs	r5, r3
 8002c66:	076b      	lsls	r3, r5, #29
 8002c68:	d009      	beq.n	8002c7e <__aeabi_dsub+0x12a>
 8002c6a:	230f      	movs	r3, #15
 8002c6c:	402b      	ands	r3, r5
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d005      	beq.n	8002c7e <__aeabi_dsub+0x12a>
 8002c72:	1d2b      	adds	r3, r5, #4
 8002c74:	42ab      	cmp	r3, r5
 8002c76:	41ad      	sbcs	r5, r5
 8002c78:	426d      	negs	r5, r5
 8002c7a:	1964      	adds	r4, r4, r5
 8002c7c:	001d      	movs	r5, r3
 8002c7e:	0223      	lsls	r3, r4, #8
 8002c80:	d400      	bmi.n	8002c84 <__aeabi_dsub+0x130>
 8002c82:	e140      	b.n	8002f06 <__aeabi_dsub+0x3b2>
 8002c84:	4a88      	ldr	r2, [pc, #544]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002c86:	3701      	adds	r7, #1
 8002c88:	4297      	cmp	r7, r2
 8002c8a:	d100      	bne.n	8002c8e <__aeabi_dsub+0x13a>
 8002c8c:	e101      	b.n	8002e92 <__aeabi_dsub+0x33e>
 8002c8e:	2601      	movs	r6, #1
 8002c90:	4643      	mov	r3, r8
 8002c92:	4986      	ldr	r1, [pc, #536]	@ (8002eac <__aeabi_dsub+0x358>)
 8002c94:	08ed      	lsrs	r5, r5, #3
 8002c96:	4021      	ands	r1, r4
 8002c98:	074a      	lsls	r2, r1, #29
 8002c9a:	432a      	orrs	r2, r5
 8002c9c:	057c      	lsls	r4, r7, #21
 8002c9e:	024d      	lsls	r5, r1, #9
 8002ca0:	0b2d      	lsrs	r5, r5, #12
 8002ca2:	0d64      	lsrs	r4, r4, #21
 8002ca4:	401e      	ands	r6, r3
 8002ca6:	0524      	lsls	r4, r4, #20
 8002ca8:	432c      	orrs	r4, r5
 8002caa:	07f6      	lsls	r6, r6, #31
 8002cac:	4334      	orrs	r4, r6
 8002cae:	0010      	movs	r0, r2
 8002cb0:	0021      	movs	r1, r4
 8002cb2:	b005      	add	sp, #20
 8002cb4:	bcf0      	pop	{r4, r5, r6, r7}
 8002cb6:	46bb      	mov	fp, r7
 8002cb8:	46b2      	mov	sl, r6
 8002cba:	46a9      	mov	r9, r5
 8002cbc:	46a0      	mov	r8, r4
 8002cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc0:	2d00      	cmp	r5, #0
 8002cc2:	dc00      	bgt.n	8002cc6 <__aeabi_dsub+0x172>
 8002cc4:	e2d0      	b.n	8003268 <__aeabi_dsub+0x714>
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	2900      	cmp	r1, #0
 8002cca:	d000      	beq.n	8002cce <__aeabi_dsub+0x17a>
 8002ccc:	e0d4      	b.n	8002e78 <__aeabi_dsub+0x324>
 8002cce:	4661      	mov	r1, ip
 8002cd0:	9b02      	ldr	r3, [sp, #8]
 8002cd2:	4319      	orrs	r1, r3
 8002cd4:	d100      	bne.n	8002cd8 <__aeabi_dsub+0x184>
 8002cd6:	e12b      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 8002cd8:	1e69      	subs	r1, r5, #1
 8002cda:	2d01      	cmp	r5, #1
 8002cdc:	d100      	bne.n	8002ce0 <__aeabi_dsub+0x18c>
 8002cde:	e1d9      	b.n	8003094 <__aeabi_dsub+0x540>
 8002ce0:	4295      	cmp	r5, r2
 8002ce2:	d100      	bne.n	8002ce6 <__aeabi_dsub+0x192>
 8002ce4:	e10a      	b.n	8002efc <__aeabi_dsub+0x3a8>
 8002ce6:	2501      	movs	r5, #1
 8002ce8:	2938      	cmp	r1, #56	@ 0x38
 8002cea:	dc17      	bgt.n	8002d1c <__aeabi_dsub+0x1c8>
 8002cec:	468a      	mov	sl, r1
 8002cee:	4653      	mov	r3, sl
 8002cf0:	2b1f      	cmp	r3, #31
 8002cf2:	dd00      	ble.n	8002cf6 <__aeabi_dsub+0x1a2>
 8002cf4:	e1e7      	b.n	80030c6 <__aeabi_dsub+0x572>
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	1ad2      	subs	r2, r2, r3
 8002cfa:	9b02      	ldr	r3, [sp, #8]
 8002cfc:	4661      	mov	r1, ip
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	001d      	movs	r5, r3
 8002d02:	4653      	mov	r3, sl
 8002d04:	40d9      	lsrs	r1, r3
 8002d06:	4663      	mov	r3, ip
 8002d08:	4093      	lsls	r3, r2
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	430d      	orrs	r5, r1
 8002d0e:	1e51      	subs	r1, r2, #1
 8002d10:	418a      	sbcs	r2, r1
 8002d12:	4653      	mov	r3, sl
 8002d14:	4315      	orrs	r5, r2
 8002d16:	9a02      	ldr	r2, [sp, #8]
 8002d18:	40da      	lsrs	r2, r3
 8002d1a:	18a4      	adds	r4, r4, r2
 8002d1c:	182d      	adds	r5, r5, r0
 8002d1e:	4285      	cmp	r5, r0
 8002d20:	4180      	sbcs	r0, r0
 8002d22:	4240      	negs	r0, r0
 8002d24:	1824      	adds	r4, r4, r0
 8002d26:	0223      	lsls	r3, r4, #8
 8002d28:	d400      	bmi.n	8002d2c <__aeabi_dsub+0x1d8>
 8002d2a:	e0b6      	b.n	8002e9a <__aeabi_dsub+0x346>
 8002d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002d2e:	3701      	adds	r7, #1
 8002d30:	429f      	cmp	r7, r3
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x1e2>
 8002d34:	e0ad      	b.n	8002e92 <__aeabi_dsub+0x33e>
 8002d36:	2101      	movs	r1, #1
 8002d38:	4b5c      	ldr	r3, [pc, #368]	@ (8002eac <__aeabi_dsub+0x358>)
 8002d3a:	086a      	lsrs	r2, r5, #1
 8002d3c:	401c      	ands	r4, r3
 8002d3e:	4029      	ands	r1, r5
 8002d40:	430a      	orrs	r2, r1
 8002d42:	07e5      	lsls	r5, r4, #31
 8002d44:	4315      	orrs	r5, r2
 8002d46:	0864      	lsrs	r4, r4, #1
 8002d48:	e78d      	b.n	8002c66 <__aeabi_dsub+0x112>
 8002d4a:	4a59      	ldr	r2, [pc, #356]	@ (8002eb0 <__aeabi_dsub+0x35c>)
 8002d4c:	9b02      	ldr	r3, [sp, #8]
 8002d4e:	4692      	mov	sl, r2
 8002d50:	4662      	mov	r2, ip
 8002d52:	44ba      	add	sl, r7
 8002d54:	431a      	orrs	r2, r3
 8002d56:	d02c      	beq.n	8002db2 <__aeabi_dsub+0x25e>
 8002d58:	428e      	cmp	r6, r1
 8002d5a:	d02e      	beq.n	8002dba <__aeabi_dsub+0x266>
 8002d5c:	4652      	mov	r2, sl
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d060      	beq.n	8002e24 <__aeabi_dsub+0x2d0>
 8002d62:	2f00      	cmp	r7, #0
 8002d64:	d100      	bne.n	8002d68 <__aeabi_dsub+0x214>
 8002d66:	e0db      	b.n	8002f20 <__aeabi_dsub+0x3cc>
 8002d68:	4663      	mov	r3, ip
 8002d6a:	000e      	movs	r6, r1
 8002d6c:	9c02      	ldr	r4, [sp, #8]
 8002d6e:	08d8      	lsrs	r0, r3, #3
 8002d70:	0762      	lsls	r2, r4, #29
 8002d72:	4302      	orrs	r2, r0
 8002d74:	08e4      	lsrs	r4, r4, #3
 8002d76:	0013      	movs	r3, r2
 8002d78:	4323      	orrs	r3, r4
 8002d7a:	d100      	bne.n	8002d7e <__aeabi_dsub+0x22a>
 8002d7c:	e254      	b.n	8003228 <__aeabi_dsub+0x6d4>
 8002d7e:	2580      	movs	r5, #128	@ 0x80
 8002d80:	032d      	lsls	r5, r5, #12
 8002d82:	4325      	orrs	r5, r4
 8002d84:	032d      	lsls	r5, r5, #12
 8002d86:	4c48      	ldr	r4, [pc, #288]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002d88:	0b2d      	lsrs	r5, r5, #12
 8002d8a:	e78c      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002d8c:	4661      	mov	r1, ip
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4319      	orrs	r1, r3
 8002d92:	d100      	bne.n	8002d96 <__aeabi_dsub+0x242>
 8002d94:	e0cc      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 8002d96:	0029      	movs	r1, r5
 8002d98:	3901      	subs	r1, #1
 8002d9a:	2d01      	cmp	r5, #1
 8002d9c:	d100      	bne.n	8002da0 <__aeabi_dsub+0x24c>
 8002d9e:	e188      	b.n	80030b2 <__aeabi_dsub+0x55e>
 8002da0:	4295      	cmp	r5, r2
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x252>
 8002da4:	e0aa      	b.n	8002efc <__aeabi_dsub+0x3a8>
 8002da6:	2501      	movs	r5, #1
 8002da8:	2938      	cmp	r1, #56	@ 0x38
 8002daa:	dd00      	ble.n	8002dae <__aeabi_dsub+0x25a>
 8002dac:	e72f      	b.n	8002c0e <__aeabi_dsub+0xba>
 8002dae:	468a      	mov	sl, r1
 8002db0:	e718      	b.n	8002be4 <__aeabi_dsub+0x90>
 8002db2:	2201      	movs	r2, #1
 8002db4:	4051      	eors	r1, r2
 8002db6:	428e      	cmp	r6, r1
 8002db8:	d1d0      	bne.n	8002d5c <__aeabi_dsub+0x208>
 8002dba:	4653      	mov	r3, sl
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d100      	bne.n	8002dc2 <__aeabi_dsub+0x26e>
 8002dc0:	e0be      	b.n	8002f40 <__aeabi_dsub+0x3ec>
 8002dc2:	2f00      	cmp	r7, #0
 8002dc4:	d000      	beq.n	8002dc8 <__aeabi_dsub+0x274>
 8002dc6:	e138      	b.n	800303a <__aeabi_dsub+0x4e6>
 8002dc8:	46ca      	mov	sl, r9
 8002dca:	0022      	movs	r2, r4
 8002dcc:	4302      	orrs	r2, r0
 8002dce:	d100      	bne.n	8002dd2 <__aeabi_dsub+0x27e>
 8002dd0:	e1e2      	b.n	8003198 <__aeabi_dsub+0x644>
 8002dd2:	4653      	mov	r3, sl
 8002dd4:	1e59      	subs	r1, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x288>
 8002dda:	e20d      	b.n	80031f8 <__aeabi_dsub+0x6a4>
 8002ddc:	4a32      	ldr	r2, [pc, #200]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002dde:	4592      	cmp	sl, r2
 8002de0:	d100      	bne.n	8002de4 <__aeabi_dsub+0x290>
 8002de2:	e1d2      	b.n	800318a <__aeabi_dsub+0x636>
 8002de4:	2701      	movs	r7, #1
 8002de6:	2938      	cmp	r1, #56	@ 0x38
 8002de8:	dc13      	bgt.n	8002e12 <__aeabi_dsub+0x2be>
 8002dea:	291f      	cmp	r1, #31
 8002dec:	dd00      	ble.n	8002df0 <__aeabi_dsub+0x29c>
 8002dee:	e1ee      	b.n	80031ce <__aeabi_dsub+0x67a>
 8002df0:	2220      	movs	r2, #32
 8002df2:	9b02      	ldr	r3, [sp, #8]
 8002df4:	1a52      	subs	r2, r2, r1
 8002df6:	0025      	movs	r5, r4
 8002df8:	0007      	movs	r7, r0
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	40cc      	lsrs	r4, r1
 8002dfe:	4090      	lsls	r0, r2
 8002e00:	4095      	lsls	r5, r2
 8002e02:	40cf      	lsrs	r7, r1
 8002e04:	44a2      	add	sl, r4
 8002e06:	1e42      	subs	r2, r0, #1
 8002e08:	4190      	sbcs	r0, r2
 8002e0a:	4653      	mov	r3, sl
 8002e0c:	432f      	orrs	r7, r5
 8002e0e:	4307      	orrs	r7, r0
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	003d      	movs	r5, r7
 8002e14:	4465      	add	r5, ip
 8002e16:	4565      	cmp	r5, ip
 8002e18:	4192      	sbcs	r2, r2
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	4252      	negs	r2, r2
 8002e1e:	464f      	mov	r7, r9
 8002e20:	18d4      	adds	r4, r2, r3
 8002e22:	e780      	b.n	8002d26 <__aeabi_dsub+0x1d2>
 8002e24:	4a23      	ldr	r2, [pc, #140]	@ (8002eb4 <__aeabi_dsub+0x360>)
 8002e26:	1c7d      	adds	r5, r7, #1
 8002e28:	4215      	tst	r5, r2
 8002e2a:	d000      	beq.n	8002e2e <__aeabi_dsub+0x2da>
 8002e2c:	e0aa      	b.n	8002f84 <__aeabi_dsub+0x430>
 8002e2e:	4662      	mov	r2, ip
 8002e30:	0025      	movs	r5, r4
 8002e32:	9b02      	ldr	r3, [sp, #8]
 8002e34:	4305      	orrs	r5, r0
 8002e36:	431a      	orrs	r2, r3
 8002e38:	2f00      	cmp	r7, #0
 8002e3a:	d000      	beq.n	8002e3e <__aeabi_dsub+0x2ea>
 8002e3c:	e0f5      	b.n	800302a <__aeabi_dsub+0x4d6>
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	d100      	bne.n	8002e44 <__aeabi_dsub+0x2f0>
 8002e42:	e16b      	b.n	800311c <__aeabi_dsub+0x5c8>
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x2f6>
 8002e48:	e152      	b.n	80030f0 <__aeabi_dsub+0x59c>
 8002e4a:	4663      	mov	r3, ip
 8002e4c:	1ac5      	subs	r5, r0, r3
 8002e4e:	9b02      	ldr	r3, [sp, #8]
 8002e50:	1ae2      	subs	r2, r4, r3
 8002e52:	42a8      	cmp	r0, r5
 8002e54:	419b      	sbcs	r3, r3
 8002e56:	425b      	negs	r3, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	d400      	bmi.n	8002e60 <__aeabi_dsub+0x30c>
 8002e5e:	e1d5      	b.n	800320c <__aeabi_dsub+0x6b8>
 8002e60:	4663      	mov	r3, ip
 8002e62:	1a1d      	subs	r5, r3, r0
 8002e64:	45ac      	cmp	ip, r5
 8002e66:	4192      	sbcs	r2, r2
 8002e68:	2601      	movs	r6, #1
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	4252      	negs	r2, r2
 8002e6e:	1b1c      	subs	r4, r3, r4
 8002e70:	4688      	mov	r8, r1
 8002e72:	1aa4      	subs	r4, r4, r2
 8002e74:	400e      	ands	r6, r1
 8002e76:	e6f6      	b.n	8002c66 <__aeabi_dsub+0x112>
 8002e78:	4297      	cmp	r7, r2
 8002e7a:	d03f      	beq.n	8002efc <__aeabi_dsub+0x3a8>
 8002e7c:	4652      	mov	r2, sl
 8002e7e:	2501      	movs	r5, #1
 8002e80:	2a38      	cmp	r2, #56	@ 0x38
 8002e82:	dd00      	ble.n	8002e86 <__aeabi_dsub+0x332>
 8002e84:	e74a      	b.n	8002d1c <__aeabi_dsub+0x1c8>
 8002e86:	2280      	movs	r2, #128	@ 0x80
 8002e88:	9b02      	ldr	r3, [sp, #8]
 8002e8a:	0412      	lsls	r2, r2, #16
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	9302      	str	r3, [sp, #8]
 8002e90:	e72d      	b.n	8002cee <__aeabi_dsub+0x19a>
 8002e92:	003c      	movs	r4, r7
 8002e94:	2500      	movs	r5, #0
 8002e96:	2200      	movs	r2, #0
 8002e98:	e705      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	402b      	ands	r3, r5
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d000      	beq.n	8002ea4 <__aeabi_dsub+0x350>
 8002ea2:	e6e2      	b.n	8002c6a <__aeabi_dsub+0x116>
 8002ea4:	e06b      	b.n	8002f7e <__aeabi_dsub+0x42a>
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	000007ff 	.word	0x000007ff
 8002eac:	ff7fffff 	.word	0xff7fffff
 8002eb0:	fffff801 	.word	0xfffff801
 8002eb4:	000007fe 	.word	0x000007fe
 8002eb8:	0028      	movs	r0, r5
 8002eba:	f7fd fb57 	bl	800056c <__clzsi2>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	2b1f      	cmp	r3, #31
 8002ec4:	dc00      	bgt.n	8002ec8 <__aeabi_dsub+0x374>
 8002ec6:	e6b4      	b.n	8002c32 <__aeabi_dsub+0xde>
 8002ec8:	002a      	movs	r2, r5
 8002eca:	3808      	subs	r0, #8
 8002ecc:	4082      	lsls	r2, r0
 8002ece:	429f      	cmp	r7, r3
 8002ed0:	dd00      	ble.n	8002ed4 <__aeabi_dsub+0x380>
 8002ed2:	e0b9      	b.n	8003048 <__aeabi_dsub+0x4f4>
 8002ed4:	1bdb      	subs	r3, r3, r7
 8002ed6:	1c58      	adds	r0, r3, #1
 8002ed8:	281f      	cmp	r0, #31
 8002eda:	dc00      	bgt.n	8002ede <__aeabi_dsub+0x38a>
 8002edc:	e1a0      	b.n	8003220 <__aeabi_dsub+0x6cc>
 8002ede:	0015      	movs	r5, r2
 8002ee0:	3b1f      	subs	r3, #31
 8002ee2:	40dd      	lsrs	r5, r3
 8002ee4:	2820      	cmp	r0, #32
 8002ee6:	d005      	beq.n	8002ef4 <__aeabi_dsub+0x3a0>
 8002ee8:	2340      	movs	r3, #64	@ 0x40
 8002eea:	1a1b      	subs	r3, r3, r0
 8002eec:	409a      	lsls	r2, r3
 8002eee:	1e53      	subs	r3, r2, #1
 8002ef0:	419a      	sbcs	r2, r3
 8002ef2:	4315      	orrs	r5, r2
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	2700      	movs	r7, #0
 8002ef8:	402b      	ands	r3, r5
 8002efa:	e7d0      	b.n	8002e9e <__aeabi_dsub+0x34a>
 8002efc:	08c0      	lsrs	r0, r0, #3
 8002efe:	0762      	lsls	r2, r4, #29
 8002f00:	4302      	orrs	r2, r0
 8002f02:	08e4      	lsrs	r4, r4, #3
 8002f04:	e737      	b.n	8002d76 <__aeabi_dsub+0x222>
 8002f06:	08ea      	lsrs	r2, r5, #3
 8002f08:	0763      	lsls	r3, r4, #29
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	4bd3      	ldr	r3, [pc, #844]	@ (800325c <__aeabi_dsub+0x708>)
 8002f0e:	08e4      	lsrs	r4, r4, #3
 8002f10:	429f      	cmp	r7, r3
 8002f12:	d100      	bne.n	8002f16 <__aeabi_dsub+0x3c2>
 8002f14:	e72f      	b.n	8002d76 <__aeabi_dsub+0x222>
 8002f16:	0324      	lsls	r4, r4, #12
 8002f18:	0b25      	lsrs	r5, r4, #12
 8002f1a:	057c      	lsls	r4, r7, #21
 8002f1c:	0d64      	lsrs	r4, r4, #21
 8002f1e:	e6c2      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002f20:	46ca      	mov	sl, r9
 8002f22:	0022      	movs	r2, r4
 8002f24:	4302      	orrs	r2, r0
 8002f26:	d158      	bne.n	8002fda <__aeabi_dsub+0x486>
 8002f28:	4663      	mov	r3, ip
 8002f2a:	000e      	movs	r6, r1
 8002f2c:	9c02      	ldr	r4, [sp, #8]
 8002f2e:	9303      	str	r3, [sp, #12]
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	4657      	mov	r7, sl
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	e7e7      	b.n	8002f08 <__aeabi_dsub+0x3b4>
 8002f38:	4cc9      	ldr	r4, [pc, #804]	@ (8003260 <__aeabi_dsub+0x70c>)
 8002f3a:	1aff      	subs	r7, r7, r3
 8002f3c:	4014      	ands	r4, r2
 8002f3e:	e692      	b.n	8002c66 <__aeabi_dsub+0x112>
 8002f40:	4dc8      	ldr	r5, [pc, #800]	@ (8003264 <__aeabi_dsub+0x710>)
 8002f42:	1c7a      	adds	r2, r7, #1
 8002f44:	422a      	tst	r2, r5
 8002f46:	d000      	beq.n	8002f4a <__aeabi_dsub+0x3f6>
 8002f48:	e084      	b.n	8003054 <__aeabi_dsub+0x500>
 8002f4a:	0022      	movs	r2, r4
 8002f4c:	4302      	orrs	r2, r0
 8002f4e:	2f00      	cmp	r7, #0
 8002f50:	d000      	beq.n	8002f54 <__aeabi_dsub+0x400>
 8002f52:	e0ef      	b.n	8003134 <__aeabi_dsub+0x5e0>
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d100      	bne.n	8002f5a <__aeabi_dsub+0x406>
 8002f58:	e0e5      	b.n	8003126 <__aeabi_dsub+0x5d2>
 8002f5a:	4662      	mov	r2, ip
 8002f5c:	9902      	ldr	r1, [sp, #8]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	d100      	bne.n	8002f64 <__aeabi_dsub+0x410>
 8002f62:	e0c5      	b.n	80030f0 <__aeabi_dsub+0x59c>
 8002f64:	4663      	mov	r3, ip
 8002f66:	18c5      	adds	r5, r0, r3
 8002f68:	468c      	mov	ip, r1
 8002f6a:	4285      	cmp	r5, r0
 8002f6c:	4180      	sbcs	r0, r0
 8002f6e:	4464      	add	r4, ip
 8002f70:	4240      	negs	r0, r0
 8002f72:	1824      	adds	r4, r4, r0
 8002f74:	0223      	lsls	r3, r4, #8
 8002f76:	d502      	bpl.n	8002f7e <__aeabi_dsub+0x42a>
 8002f78:	4bb9      	ldr	r3, [pc, #740]	@ (8003260 <__aeabi_dsub+0x70c>)
 8002f7a:	3701      	adds	r7, #1
 8002f7c:	401c      	ands	r4, r3
 8002f7e:	46ba      	mov	sl, r7
 8002f80:	9503      	str	r5, [sp, #12]
 8002f82:	e7d5      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 8002f84:	4662      	mov	r2, ip
 8002f86:	1a85      	subs	r5, r0, r2
 8002f88:	42a8      	cmp	r0, r5
 8002f8a:	4192      	sbcs	r2, r2
 8002f8c:	4252      	negs	r2, r2
 8002f8e:	4691      	mov	r9, r2
 8002f90:	9b02      	ldr	r3, [sp, #8]
 8002f92:	1ae3      	subs	r3, r4, r3
 8002f94:	001a      	movs	r2, r3
 8002f96:	464b      	mov	r3, r9
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	4691      	mov	r9, r2
 8002f9e:	021a      	lsls	r2, r3, #8
 8002fa0:	d46c      	bmi.n	800307c <__aeabi_dsub+0x528>
 8002fa2:	464a      	mov	r2, r9
 8002fa4:	464c      	mov	r4, r9
 8002fa6:	432a      	orrs	r2, r5
 8002fa8:	d000      	beq.n	8002fac <__aeabi_dsub+0x458>
 8002faa:	e63a      	b.n	8002c22 <__aeabi_dsub+0xce>
 8002fac:	2600      	movs	r6, #0
 8002fae:	2400      	movs	r4, #0
 8002fb0:	2500      	movs	r5, #0
 8002fb2:	e678      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002fb4:	9902      	ldr	r1, [sp, #8]
 8002fb6:	4653      	mov	r3, sl
 8002fb8:	000d      	movs	r5, r1
 8002fba:	3a20      	subs	r2, #32
 8002fbc:	40d5      	lsrs	r5, r2
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d006      	beq.n	8002fd0 <__aeabi_dsub+0x47c>
 8002fc2:	2240      	movs	r2, #64	@ 0x40
 8002fc4:	1ad2      	subs	r2, r2, r3
 8002fc6:	000b      	movs	r3, r1
 8002fc8:	4093      	lsls	r3, r2
 8002fca:	4662      	mov	r2, ip
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	4693      	mov	fp, r2
 8002fd0:	465b      	mov	r3, fp
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	4193      	sbcs	r3, r2
 8002fd6:	431d      	orrs	r5, r3
 8002fd8:	e619      	b.n	8002c0e <__aeabi_dsub+0xba>
 8002fda:	4653      	mov	r3, sl
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d100      	bne.n	8002fe4 <__aeabi_dsub+0x490>
 8002fe2:	e0c6      	b.n	8003172 <__aeabi_dsub+0x61e>
 8002fe4:	4e9d      	ldr	r6, [pc, #628]	@ (800325c <__aeabi_dsub+0x708>)
 8002fe6:	45b2      	cmp	sl, r6
 8002fe8:	d100      	bne.n	8002fec <__aeabi_dsub+0x498>
 8002fea:	e6bd      	b.n	8002d68 <__aeabi_dsub+0x214>
 8002fec:	4688      	mov	r8, r1
 8002fee:	000e      	movs	r6, r1
 8002ff0:	2501      	movs	r5, #1
 8002ff2:	2a38      	cmp	r2, #56	@ 0x38
 8002ff4:	dc10      	bgt.n	8003018 <__aeabi_dsub+0x4c4>
 8002ff6:	2a1f      	cmp	r2, #31
 8002ff8:	dc7f      	bgt.n	80030fa <__aeabi_dsub+0x5a6>
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	0025      	movs	r5, r4
 8002ffe:	1a89      	subs	r1, r1, r2
 8003000:	0007      	movs	r7, r0
 8003002:	4088      	lsls	r0, r1
 8003004:	408d      	lsls	r5, r1
 8003006:	40d7      	lsrs	r7, r2
 8003008:	40d4      	lsrs	r4, r2
 800300a:	1e41      	subs	r1, r0, #1
 800300c:	4188      	sbcs	r0, r1
 800300e:	9b02      	ldr	r3, [sp, #8]
 8003010:	433d      	orrs	r5, r7
 8003012:	1b1b      	subs	r3, r3, r4
 8003014:	4305      	orrs	r5, r0
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	4662      	mov	r2, ip
 800301a:	1b55      	subs	r5, r2, r5
 800301c:	45ac      	cmp	ip, r5
 800301e:	4192      	sbcs	r2, r2
 8003020:	9b02      	ldr	r3, [sp, #8]
 8003022:	4252      	negs	r2, r2
 8003024:	464f      	mov	r7, r9
 8003026:	1a9c      	subs	r4, r3, r2
 8003028:	e5f6      	b.n	8002c18 <__aeabi_dsub+0xc4>
 800302a:	2d00      	cmp	r5, #0
 800302c:	d000      	beq.n	8003030 <__aeabi_dsub+0x4dc>
 800302e:	e0b7      	b.n	80031a0 <__aeabi_dsub+0x64c>
 8003030:	2a00      	cmp	r2, #0
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x4e2>
 8003034:	e0f0      	b.n	8003218 <__aeabi_dsub+0x6c4>
 8003036:	2601      	movs	r6, #1
 8003038:	400e      	ands	r6, r1
 800303a:	4663      	mov	r3, ip
 800303c:	9802      	ldr	r0, [sp, #8]
 800303e:	08d9      	lsrs	r1, r3, #3
 8003040:	0742      	lsls	r2, r0, #29
 8003042:	430a      	orrs	r2, r1
 8003044:	08c4      	lsrs	r4, r0, #3
 8003046:	e696      	b.n	8002d76 <__aeabi_dsub+0x222>
 8003048:	4c85      	ldr	r4, [pc, #532]	@ (8003260 <__aeabi_dsub+0x70c>)
 800304a:	1aff      	subs	r7, r7, r3
 800304c:	4014      	ands	r4, r2
 800304e:	0762      	lsls	r2, r4, #29
 8003050:	08e4      	lsrs	r4, r4, #3
 8003052:	e760      	b.n	8002f16 <__aeabi_dsub+0x3c2>
 8003054:	4981      	ldr	r1, [pc, #516]	@ (800325c <__aeabi_dsub+0x708>)
 8003056:	428a      	cmp	r2, r1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x508>
 800305a:	e0c9      	b.n	80031f0 <__aeabi_dsub+0x69c>
 800305c:	4663      	mov	r3, ip
 800305e:	18c1      	adds	r1, r0, r3
 8003060:	4281      	cmp	r1, r0
 8003062:	4180      	sbcs	r0, r0
 8003064:	9b02      	ldr	r3, [sp, #8]
 8003066:	4240      	negs	r0, r0
 8003068:	18e3      	adds	r3, r4, r3
 800306a:	181b      	adds	r3, r3, r0
 800306c:	07dd      	lsls	r5, r3, #31
 800306e:	085c      	lsrs	r4, r3, #1
 8003070:	2307      	movs	r3, #7
 8003072:	0849      	lsrs	r1, r1, #1
 8003074:	430d      	orrs	r5, r1
 8003076:	0017      	movs	r7, r2
 8003078:	402b      	ands	r3, r5
 800307a:	e710      	b.n	8002e9e <__aeabi_dsub+0x34a>
 800307c:	4663      	mov	r3, ip
 800307e:	1a1d      	subs	r5, r3, r0
 8003080:	45ac      	cmp	ip, r5
 8003082:	4192      	sbcs	r2, r2
 8003084:	2601      	movs	r6, #1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	4252      	negs	r2, r2
 800308a:	1b1c      	subs	r4, r3, r4
 800308c:	4688      	mov	r8, r1
 800308e:	1aa4      	subs	r4, r4, r2
 8003090:	400e      	ands	r6, r1
 8003092:	e5c6      	b.n	8002c22 <__aeabi_dsub+0xce>
 8003094:	4663      	mov	r3, ip
 8003096:	18c5      	adds	r5, r0, r3
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4285      	cmp	r5, r0
 800309c:	4180      	sbcs	r0, r0
 800309e:	469c      	mov	ip, r3
 80030a0:	4240      	negs	r0, r0
 80030a2:	4464      	add	r4, ip
 80030a4:	1824      	adds	r4, r4, r0
 80030a6:	2701      	movs	r7, #1
 80030a8:	0223      	lsls	r3, r4, #8
 80030aa:	d400      	bmi.n	80030ae <__aeabi_dsub+0x55a>
 80030ac:	e6f5      	b.n	8002e9a <__aeabi_dsub+0x346>
 80030ae:	2702      	movs	r7, #2
 80030b0:	e641      	b.n	8002d36 <__aeabi_dsub+0x1e2>
 80030b2:	4663      	mov	r3, ip
 80030b4:	1ac5      	subs	r5, r0, r3
 80030b6:	42a8      	cmp	r0, r5
 80030b8:	4180      	sbcs	r0, r0
 80030ba:	9b02      	ldr	r3, [sp, #8]
 80030bc:	4240      	negs	r0, r0
 80030be:	1ae4      	subs	r4, r4, r3
 80030c0:	2701      	movs	r7, #1
 80030c2:	1a24      	subs	r4, r4, r0
 80030c4:	e5a8      	b.n	8002c18 <__aeabi_dsub+0xc4>
 80030c6:	9d02      	ldr	r5, [sp, #8]
 80030c8:	4652      	mov	r2, sl
 80030ca:	002b      	movs	r3, r5
 80030cc:	3a20      	subs	r2, #32
 80030ce:	40d3      	lsrs	r3, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	4653      	mov	r3, sl
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d006      	beq.n	80030e6 <__aeabi_dsub+0x592>
 80030d8:	2240      	movs	r2, #64	@ 0x40
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	002b      	movs	r3, r5
 80030de:	4093      	lsls	r3, r2
 80030e0:	4662      	mov	r2, ip
 80030e2:	431a      	orrs	r2, r3
 80030e4:	4693      	mov	fp, r2
 80030e6:	465d      	mov	r5, fp
 80030e8:	1e6b      	subs	r3, r5, #1
 80030ea:	419d      	sbcs	r5, r3
 80030ec:	430d      	orrs	r5, r1
 80030ee:	e615      	b.n	8002d1c <__aeabi_dsub+0x1c8>
 80030f0:	0762      	lsls	r2, r4, #29
 80030f2:	08c0      	lsrs	r0, r0, #3
 80030f4:	4302      	orrs	r2, r0
 80030f6:	08e4      	lsrs	r4, r4, #3
 80030f8:	e70d      	b.n	8002f16 <__aeabi_dsub+0x3c2>
 80030fa:	0011      	movs	r1, r2
 80030fc:	0027      	movs	r7, r4
 80030fe:	3920      	subs	r1, #32
 8003100:	40cf      	lsrs	r7, r1
 8003102:	2a20      	cmp	r2, #32
 8003104:	d005      	beq.n	8003112 <__aeabi_dsub+0x5be>
 8003106:	2140      	movs	r1, #64	@ 0x40
 8003108:	1a8a      	subs	r2, r1, r2
 800310a:	4094      	lsls	r4, r2
 800310c:	0025      	movs	r5, r4
 800310e:	4305      	orrs	r5, r0
 8003110:	9503      	str	r5, [sp, #12]
 8003112:	9d03      	ldr	r5, [sp, #12]
 8003114:	1e6a      	subs	r2, r5, #1
 8003116:	4195      	sbcs	r5, r2
 8003118:	433d      	orrs	r5, r7
 800311a:	e77d      	b.n	8003018 <__aeabi_dsub+0x4c4>
 800311c:	2a00      	cmp	r2, #0
 800311e:	d100      	bne.n	8003122 <__aeabi_dsub+0x5ce>
 8003120:	e744      	b.n	8002fac <__aeabi_dsub+0x458>
 8003122:	2601      	movs	r6, #1
 8003124:	400e      	ands	r6, r1
 8003126:	4663      	mov	r3, ip
 8003128:	08d9      	lsrs	r1, r3, #3
 800312a:	9b02      	ldr	r3, [sp, #8]
 800312c:	075a      	lsls	r2, r3, #29
 800312e:	430a      	orrs	r2, r1
 8003130:	08dc      	lsrs	r4, r3, #3
 8003132:	e6f0      	b.n	8002f16 <__aeabi_dsub+0x3c2>
 8003134:	2a00      	cmp	r2, #0
 8003136:	d028      	beq.n	800318a <__aeabi_dsub+0x636>
 8003138:	4662      	mov	r2, ip
 800313a:	9f02      	ldr	r7, [sp, #8]
 800313c:	08c0      	lsrs	r0, r0, #3
 800313e:	433a      	orrs	r2, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x5f0>
 8003142:	e6dc      	b.n	8002efe <__aeabi_dsub+0x3aa>
 8003144:	0762      	lsls	r2, r4, #29
 8003146:	4310      	orrs	r0, r2
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	08e4      	lsrs	r4, r4, #3
 800314c:	0312      	lsls	r2, r2, #12
 800314e:	4214      	tst	r4, r2
 8003150:	d009      	beq.n	8003166 <__aeabi_dsub+0x612>
 8003152:	08fd      	lsrs	r5, r7, #3
 8003154:	4215      	tst	r5, r2
 8003156:	d106      	bne.n	8003166 <__aeabi_dsub+0x612>
 8003158:	4663      	mov	r3, ip
 800315a:	2601      	movs	r6, #1
 800315c:	002c      	movs	r4, r5
 800315e:	08d8      	lsrs	r0, r3, #3
 8003160:	077b      	lsls	r3, r7, #29
 8003162:	4318      	orrs	r0, r3
 8003164:	400e      	ands	r6, r1
 8003166:	0f42      	lsrs	r2, r0, #29
 8003168:	00c0      	lsls	r0, r0, #3
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	0752      	lsls	r2, r2, #29
 800316e:	4302      	orrs	r2, r0
 8003170:	e601      	b.n	8002d76 <__aeabi_dsub+0x222>
 8003172:	4663      	mov	r3, ip
 8003174:	1a1d      	subs	r5, r3, r0
 8003176:	45ac      	cmp	ip, r5
 8003178:	4192      	sbcs	r2, r2
 800317a:	9b02      	ldr	r3, [sp, #8]
 800317c:	4252      	negs	r2, r2
 800317e:	1b1c      	subs	r4, r3, r4
 8003180:	000e      	movs	r6, r1
 8003182:	4688      	mov	r8, r1
 8003184:	2701      	movs	r7, #1
 8003186:	1aa4      	subs	r4, r4, r2
 8003188:	e546      	b.n	8002c18 <__aeabi_dsub+0xc4>
 800318a:	4663      	mov	r3, ip
 800318c:	08d9      	lsrs	r1, r3, #3
 800318e:	9b02      	ldr	r3, [sp, #8]
 8003190:	075a      	lsls	r2, r3, #29
 8003192:	430a      	orrs	r2, r1
 8003194:	08dc      	lsrs	r4, r3, #3
 8003196:	e5ee      	b.n	8002d76 <__aeabi_dsub+0x222>
 8003198:	4663      	mov	r3, ip
 800319a:	9c02      	ldr	r4, [sp, #8]
 800319c:	9303      	str	r3, [sp, #12]
 800319e:	e6c7      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 80031a0:	08c0      	lsrs	r0, r0, #3
 80031a2:	2a00      	cmp	r2, #0
 80031a4:	d100      	bne.n	80031a8 <__aeabi_dsub+0x654>
 80031a6:	e6aa      	b.n	8002efe <__aeabi_dsub+0x3aa>
 80031a8:	0762      	lsls	r2, r4, #29
 80031aa:	4310      	orrs	r0, r2
 80031ac:	2280      	movs	r2, #128	@ 0x80
 80031ae:	08e4      	lsrs	r4, r4, #3
 80031b0:	0312      	lsls	r2, r2, #12
 80031b2:	4214      	tst	r4, r2
 80031b4:	d0d7      	beq.n	8003166 <__aeabi_dsub+0x612>
 80031b6:	9f02      	ldr	r7, [sp, #8]
 80031b8:	08fd      	lsrs	r5, r7, #3
 80031ba:	4215      	tst	r5, r2
 80031bc:	d1d3      	bne.n	8003166 <__aeabi_dsub+0x612>
 80031be:	4663      	mov	r3, ip
 80031c0:	2601      	movs	r6, #1
 80031c2:	08d8      	lsrs	r0, r3, #3
 80031c4:	077b      	lsls	r3, r7, #29
 80031c6:	002c      	movs	r4, r5
 80031c8:	4318      	orrs	r0, r3
 80031ca:	400e      	ands	r6, r1
 80031cc:	e7cb      	b.n	8003166 <__aeabi_dsub+0x612>
 80031ce:	000a      	movs	r2, r1
 80031d0:	0027      	movs	r7, r4
 80031d2:	3a20      	subs	r2, #32
 80031d4:	40d7      	lsrs	r7, r2
 80031d6:	2920      	cmp	r1, #32
 80031d8:	d005      	beq.n	80031e6 <__aeabi_dsub+0x692>
 80031da:	2240      	movs	r2, #64	@ 0x40
 80031dc:	1a52      	subs	r2, r2, r1
 80031de:	4094      	lsls	r4, r2
 80031e0:	0025      	movs	r5, r4
 80031e2:	4305      	orrs	r5, r0
 80031e4:	9503      	str	r5, [sp, #12]
 80031e6:	9d03      	ldr	r5, [sp, #12]
 80031e8:	1e6a      	subs	r2, r5, #1
 80031ea:	4195      	sbcs	r5, r2
 80031ec:	432f      	orrs	r7, r5
 80031ee:	e610      	b.n	8002e12 <__aeabi_dsub+0x2be>
 80031f0:	0014      	movs	r4, r2
 80031f2:	2500      	movs	r5, #0
 80031f4:	2200      	movs	r2, #0
 80031f6:	e556      	b.n	8002ca6 <__aeabi_dsub+0x152>
 80031f8:	9b02      	ldr	r3, [sp, #8]
 80031fa:	4460      	add	r0, ip
 80031fc:	4699      	mov	r9, r3
 80031fe:	4560      	cmp	r0, ip
 8003200:	4192      	sbcs	r2, r2
 8003202:	444c      	add	r4, r9
 8003204:	4252      	negs	r2, r2
 8003206:	0005      	movs	r5, r0
 8003208:	18a4      	adds	r4, r4, r2
 800320a:	e74c      	b.n	80030a6 <__aeabi_dsub+0x552>
 800320c:	001a      	movs	r2, r3
 800320e:	001c      	movs	r4, r3
 8003210:	432a      	orrs	r2, r5
 8003212:	d000      	beq.n	8003216 <__aeabi_dsub+0x6c2>
 8003214:	e6b3      	b.n	8002f7e <__aeabi_dsub+0x42a>
 8003216:	e6c9      	b.n	8002fac <__aeabi_dsub+0x458>
 8003218:	2480      	movs	r4, #128	@ 0x80
 800321a:	2600      	movs	r6, #0
 800321c:	0324      	lsls	r4, r4, #12
 800321e:	e5ae      	b.n	8002d7e <__aeabi_dsub+0x22a>
 8003220:	2120      	movs	r1, #32
 8003222:	2500      	movs	r5, #0
 8003224:	1a09      	subs	r1, r1, r0
 8003226:	e517      	b.n	8002c58 <__aeabi_dsub+0x104>
 8003228:	2200      	movs	r2, #0
 800322a:	2500      	movs	r5, #0
 800322c:	4c0b      	ldr	r4, [pc, #44]	@ (800325c <__aeabi_dsub+0x708>)
 800322e:	e53a      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8003230:	2d00      	cmp	r5, #0
 8003232:	d100      	bne.n	8003236 <__aeabi_dsub+0x6e2>
 8003234:	e5f6      	b.n	8002e24 <__aeabi_dsub+0x2d0>
 8003236:	464b      	mov	r3, r9
 8003238:	1bda      	subs	r2, r3, r7
 800323a:	4692      	mov	sl, r2
 800323c:	2f00      	cmp	r7, #0
 800323e:	d100      	bne.n	8003242 <__aeabi_dsub+0x6ee>
 8003240:	e66f      	b.n	8002f22 <__aeabi_dsub+0x3ce>
 8003242:	2a38      	cmp	r2, #56	@ 0x38
 8003244:	dc05      	bgt.n	8003252 <__aeabi_dsub+0x6fe>
 8003246:	2680      	movs	r6, #128	@ 0x80
 8003248:	0436      	lsls	r6, r6, #16
 800324a:	4334      	orrs	r4, r6
 800324c:	4688      	mov	r8, r1
 800324e:	000e      	movs	r6, r1
 8003250:	e6d1      	b.n	8002ff6 <__aeabi_dsub+0x4a2>
 8003252:	4688      	mov	r8, r1
 8003254:	000e      	movs	r6, r1
 8003256:	2501      	movs	r5, #1
 8003258:	e6de      	b.n	8003018 <__aeabi_dsub+0x4c4>
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	000007ff 	.word	0x000007ff
 8003260:	ff7fffff 	.word	0xff7fffff
 8003264:	000007fe 	.word	0x000007fe
 8003268:	2d00      	cmp	r5, #0
 800326a:	d100      	bne.n	800326e <__aeabi_dsub+0x71a>
 800326c:	e668      	b.n	8002f40 <__aeabi_dsub+0x3ec>
 800326e:	464b      	mov	r3, r9
 8003270:	1bd9      	subs	r1, r3, r7
 8003272:	2f00      	cmp	r7, #0
 8003274:	d101      	bne.n	800327a <__aeabi_dsub+0x726>
 8003276:	468a      	mov	sl, r1
 8003278:	e5a7      	b.n	8002dca <__aeabi_dsub+0x276>
 800327a:	2701      	movs	r7, #1
 800327c:	2938      	cmp	r1, #56	@ 0x38
 800327e:	dd00      	ble.n	8003282 <__aeabi_dsub+0x72e>
 8003280:	e5c7      	b.n	8002e12 <__aeabi_dsub+0x2be>
 8003282:	2280      	movs	r2, #128	@ 0x80
 8003284:	0412      	lsls	r2, r2, #16
 8003286:	4314      	orrs	r4, r2
 8003288:	e5af      	b.n	8002dea <__aeabi_dsub+0x296>
 800328a:	46c0      	nop			@ (mov r8, r8)

0800328c <__aeabi_dcmpun>:
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328e:	46c6      	mov	lr, r8
 8003290:	031e      	lsls	r6, r3, #12
 8003292:	0b36      	lsrs	r6, r6, #12
 8003294:	46b0      	mov	r8, r6
 8003296:	4e0d      	ldr	r6, [pc, #52]	@ (80032cc <__aeabi_dcmpun+0x40>)
 8003298:	030c      	lsls	r4, r1, #12
 800329a:	004d      	lsls	r5, r1, #1
 800329c:	005f      	lsls	r7, r3, #1
 800329e:	b500      	push	{lr}
 80032a0:	0b24      	lsrs	r4, r4, #12
 80032a2:	0d6d      	lsrs	r5, r5, #21
 80032a4:	0d7f      	lsrs	r7, r7, #21
 80032a6:	42b5      	cmp	r5, r6
 80032a8:	d00b      	beq.n	80032c2 <__aeabi_dcmpun+0x36>
 80032aa:	4908      	ldr	r1, [pc, #32]	@ (80032cc <__aeabi_dcmpun+0x40>)
 80032ac:	2000      	movs	r0, #0
 80032ae:	428f      	cmp	r7, r1
 80032b0:	d104      	bne.n	80032bc <__aeabi_dcmpun+0x30>
 80032b2:	4646      	mov	r6, r8
 80032b4:	4316      	orrs	r6, r2
 80032b6:	0030      	movs	r0, r6
 80032b8:	1e43      	subs	r3, r0, #1
 80032ba:	4198      	sbcs	r0, r3
 80032bc:	bc80      	pop	{r7}
 80032be:	46b8      	mov	r8, r7
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	4304      	orrs	r4, r0
 80032c4:	2001      	movs	r0, #1
 80032c6:	2c00      	cmp	r4, #0
 80032c8:	d1f8      	bne.n	80032bc <__aeabi_dcmpun+0x30>
 80032ca:	e7ee      	b.n	80032aa <__aeabi_dcmpun+0x1e>
 80032cc:	000007ff 	.word	0x000007ff

080032d0 <__aeabi_d2iz>:
 80032d0:	000b      	movs	r3, r1
 80032d2:	0002      	movs	r2, r0
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4d16      	ldr	r5, [pc, #88]	@ (8003330 <__aeabi_d2iz+0x60>)
 80032d8:	030c      	lsls	r4, r1, #12
 80032da:	b082      	sub	sp, #8
 80032dc:	0049      	lsls	r1, r1, #1
 80032de:	2000      	movs	r0, #0
 80032e0:	9200      	str	r2, [sp, #0]
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	0b24      	lsrs	r4, r4, #12
 80032e6:	0d49      	lsrs	r1, r1, #21
 80032e8:	0fde      	lsrs	r6, r3, #31
 80032ea:	42a9      	cmp	r1, r5
 80032ec:	dd04      	ble.n	80032f8 <__aeabi_d2iz+0x28>
 80032ee:	4811      	ldr	r0, [pc, #68]	@ (8003334 <__aeabi_d2iz+0x64>)
 80032f0:	4281      	cmp	r1, r0
 80032f2:	dd03      	ble.n	80032fc <__aeabi_d2iz+0x2c>
 80032f4:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <__aeabi_d2iz+0x68>)
 80032f6:	18f0      	adds	r0, r6, r3
 80032f8:	b002      	add	sp, #8
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	2080      	movs	r0, #128	@ 0x80
 80032fe:	0340      	lsls	r0, r0, #13
 8003300:	4320      	orrs	r0, r4
 8003302:	4c0e      	ldr	r4, [pc, #56]	@ (800333c <__aeabi_d2iz+0x6c>)
 8003304:	1a64      	subs	r4, r4, r1
 8003306:	2c1f      	cmp	r4, #31
 8003308:	dd08      	ble.n	800331c <__aeabi_d2iz+0x4c>
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <__aeabi_d2iz+0x70>)
 800330c:	1a5b      	subs	r3, r3, r1
 800330e:	40d8      	lsrs	r0, r3
 8003310:	0003      	movs	r3, r0
 8003312:	4258      	negs	r0, r3
 8003314:	2e00      	cmp	r6, #0
 8003316:	d1ef      	bne.n	80032f8 <__aeabi_d2iz+0x28>
 8003318:	0018      	movs	r0, r3
 800331a:	e7ed      	b.n	80032f8 <__aeabi_d2iz+0x28>
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <__aeabi_d2iz+0x74>)
 800331e:	9a00      	ldr	r2, [sp, #0]
 8003320:	469c      	mov	ip, r3
 8003322:	0003      	movs	r3, r0
 8003324:	4461      	add	r1, ip
 8003326:	408b      	lsls	r3, r1
 8003328:	40e2      	lsrs	r2, r4
 800332a:	4313      	orrs	r3, r2
 800332c:	e7f1      	b.n	8003312 <__aeabi_d2iz+0x42>
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	000003fe 	.word	0x000003fe
 8003334:	0000041d 	.word	0x0000041d
 8003338:	7fffffff 	.word	0x7fffffff
 800333c:	00000433 	.word	0x00000433
 8003340:	00000413 	.word	0x00000413
 8003344:	fffffbed 	.word	0xfffffbed

08003348 <__aeabi_i2d>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	2800      	cmp	r0, #0
 800334c:	d016      	beq.n	800337c <__aeabi_i2d+0x34>
 800334e:	17c3      	asrs	r3, r0, #31
 8003350:	18c5      	adds	r5, r0, r3
 8003352:	405d      	eors	r5, r3
 8003354:	0fc4      	lsrs	r4, r0, #31
 8003356:	0028      	movs	r0, r5
 8003358:	f7fd f908 	bl	800056c <__clzsi2>
 800335c:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <__aeabi_i2d+0x58>)
 800335e:	1a1b      	subs	r3, r3, r0
 8003360:	055b      	lsls	r3, r3, #21
 8003362:	0d5b      	lsrs	r3, r3, #21
 8003364:	280a      	cmp	r0, #10
 8003366:	dc14      	bgt.n	8003392 <__aeabi_i2d+0x4a>
 8003368:	0002      	movs	r2, r0
 800336a:	002e      	movs	r6, r5
 800336c:	3215      	adds	r2, #21
 800336e:	4096      	lsls	r6, r2
 8003370:	220b      	movs	r2, #11
 8003372:	1a12      	subs	r2, r2, r0
 8003374:	40d5      	lsrs	r5, r2
 8003376:	032d      	lsls	r5, r5, #12
 8003378:	0b2d      	lsrs	r5, r5, #12
 800337a:	e003      	b.n	8003384 <__aeabi_i2d+0x3c>
 800337c:	2400      	movs	r4, #0
 800337e:	2300      	movs	r3, #0
 8003380:	2500      	movs	r5, #0
 8003382:	2600      	movs	r6, #0
 8003384:	051b      	lsls	r3, r3, #20
 8003386:	432b      	orrs	r3, r5
 8003388:	07e4      	lsls	r4, r4, #31
 800338a:	4323      	orrs	r3, r4
 800338c:	0030      	movs	r0, r6
 800338e:	0019      	movs	r1, r3
 8003390:	bd70      	pop	{r4, r5, r6, pc}
 8003392:	380b      	subs	r0, #11
 8003394:	4085      	lsls	r5, r0
 8003396:	032d      	lsls	r5, r5, #12
 8003398:	2600      	movs	r6, #0
 800339a:	0b2d      	lsrs	r5, r5, #12
 800339c:	e7f2      	b.n	8003384 <__aeabi_i2d+0x3c>
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	0000041e 	.word	0x0000041e

080033a4 <__aeabi_ui2d>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	1e04      	subs	r4, r0, #0
 80033a8:	d010      	beq.n	80033cc <__aeabi_ui2d+0x28>
 80033aa:	f7fd f8df 	bl	800056c <__clzsi2>
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_ui2d+0x44>)
 80033b0:	1a1b      	subs	r3, r3, r0
 80033b2:	055b      	lsls	r3, r3, #21
 80033b4:	0d5b      	lsrs	r3, r3, #21
 80033b6:	280a      	cmp	r0, #10
 80033b8:	dc0f      	bgt.n	80033da <__aeabi_ui2d+0x36>
 80033ba:	220b      	movs	r2, #11
 80033bc:	0021      	movs	r1, r4
 80033be:	1a12      	subs	r2, r2, r0
 80033c0:	40d1      	lsrs	r1, r2
 80033c2:	3015      	adds	r0, #21
 80033c4:	030a      	lsls	r2, r1, #12
 80033c6:	4084      	lsls	r4, r0
 80033c8:	0b12      	lsrs	r2, r2, #12
 80033ca:	e001      	b.n	80033d0 <__aeabi_ui2d+0x2c>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2200      	movs	r2, #0
 80033d0:	051b      	lsls	r3, r3, #20
 80033d2:	4313      	orrs	r3, r2
 80033d4:	0020      	movs	r0, r4
 80033d6:	0019      	movs	r1, r3
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	0022      	movs	r2, r4
 80033dc:	380b      	subs	r0, #11
 80033de:	4082      	lsls	r2, r0
 80033e0:	0312      	lsls	r2, r2, #12
 80033e2:	2400      	movs	r4, #0
 80033e4:	0b12      	lsrs	r2, r2, #12
 80033e6:	e7f3      	b.n	80033d0 <__aeabi_ui2d+0x2c>
 80033e8:	0000041e 	.word	0x0000041e

080033ec <__aeabi_f2d>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	0242      	lsls	r2, r0, #9
 80033f0:	0043      	lsls	r3, r0, #1
 80033f2:	0fc4      	lsrs	r4, r0, #31
 80033f4:	20fe      	movs	r0, #254	@ 0xfe
 80033f6:	0e1b      	lsrs	r3, r3, #24
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	0a55      	lsrs	r5, r2, #9
 80033fc:	4208      	tst	r0, r1
 80033fe:	d00c      	beq.n	800341a <__aeabi_f2d+0x2e>
 8003400:	21e0      	movs	r1, #224	@ 0xe0
 8003402:	0089      	lsls	r1, r1, #2
 8003404:	468c      	mov	ip, r1
 8003406:	076d      	lsls	r5, r5, #29
 8003408:	0b12      	lsrs	r2, r2, #12
 800340a:	4463      	add	r3, ip
 800340c:	051b      	lsls	r3, r3, #20
 800340e:	4313      	orrs	r3, r2
 8003410:	07e4      	lsls	r4, r4, #31
 8003412:	4323      	orrs	r3, r4
 8003414:	0028      	movs	r0, r5
 8003416:	0019      	movs	r1, r3
 8003418:	bd70      	pop	{r4, r5, r6, pc}
 800341a:	2b00      	cmp	r3, #0
 800341c:	d114      	bne.n	8003448 <__aeabi_f2d+0x5c>
 800341e:	2d00      	cmp	r5, #0
 8003420:	d01b      	beq.n	800345a <__aeabi_f2d+0x6e>
 8003422:	0028      	movs	r0, r5
 8003424:	f7fd f8a2 	bl	800056c <__clzsi2>
 8003428:	280a      	cmp	r0, #10
 800342a:	dc1c      	bgt.n	8003466 <__aeabi_f2d+0x7a>
 800342c:	230b      	movs	r3, #11
 800342e:	002a      	movs	r2, r5
 8003430:	1a1b      	subs	r3, r3, r0
 8003432:	40da      	lsrs	r2, r3
 8003434:	0003      	movs	r3, r0
 8003436:	3315      	adds	r3, #21
 8003438:	409d      	lsls	r5, r3
 800343a:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <__aeabi_f2d+0x88>)
 800343c:	0312      	lsls	r2, r2, #12
 800343e:	1a1b      	subs	r3, r3, r0
 8003440:	055b      	lsls	r3, r3, #21
 8003442:	0b12      	lsrs	r2, r2, #12
 8003444:	0d5b      	lsrs	r3, r3, #21
 8003446:	e7e1      	b.n	800340c <__aeabi_f2d+0x20>
 8003448:	2d00      	cmp	r5, #0
 800344a:	d009      	beq.n	8003460 <__aeabi_f2d+0x74>
 800344c:	0b13      	lsrs	r3, r2, #12
 800344e:	2280      	movs	r2, #128	@ 0x80
 8003450:	0312      	lsls	r2, r2, #12
 8003452:	431a      	orrs	r2, r3
 8003454:	076d      	lsls	r5, r5, #29
 8003456:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <__aeabi_f2d+0x8c>)
 8003458:	e7d8      	b.n	800340c <__aeabi_f2d+0x20>
 800345a:	2300      	movs	r3, #0
 800345c:	2200      	movs	r2, #0
 800345e:	e7d5      	b.n	800340c <__aeabi_f2d+0x20>
 8003460:	2200      	movs	r2, #0
 8003462:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <__aeabi_f2d+0x8c>)
 8003464:	e7d2      	b.n	800340c <__aeabi_f2d+0x20>
 8003466:	0003      	movs	r3, r0
 8003468:	002a      	movs	r2, r5
 800346a:	3b0b      	subs	r3, #11
 800346c:	409a      	lsls	r2, r3
 800346e:	2500      	movs	r5, #0
 8003470:	e7e3      	b.n	800343a <__aeabi_f2d+0x4e>
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	00000389 	.word	0x00000389
 8003478:	000007ff 	.word	0x000007ff

0800347c <__aeabi_d2f>:
 800347c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347e:	004b      	lsls	r3, r1, #1
 8003480:	030f      	lsls	r7, r1, #12
 8003482:	0d5b      	lsrs	r3, r3, #21
 8003484:	4c3b      	ldr	r4, [pc, #236]	@ (8003574 <__aeabi_d2f+0xf8>)
 8003486:	0f45      	lsrs	r5, r0, #29
 8003488:	b083      	sub	sp, #12
 800348a:	0a7f      	lsrs	r7, r7, #9
 800348c:	1c5e      	adds	r6, r3, #1
 800348e:	432f      	orrs	r7, r5
 8003490:	9000      	str	r0, [sp, #0]
 8003492:	9101      	str	r1, [sp, #4]
 8003494:	0fca      	lsrs	r2, r1, #31
 8003496:	00c5      	lsls	r5, r0, #3
 8003498:	4226      	tst	r6, r4
 800349a:	d00b      	beq.n	80034b4 <__aeabi_d2f+0x38>
 800349c:	4936      	ldr	r1, [pc, #216]	@ (8003578 <__aeabi_d2f+0xfc>)
 800349e:	185c      	adds	r4, r3, r1
 80034a0:	2cfe      	cmp	r4, #254	@ 0xfe
 80034a2:	dd13      	ble.n	80034cc <__aeabi_d2f+0x50>
 80034a4:	20ff      	movs	r0, #255	@ 0xff
 80034a6:	2300      	movs	r3, #0
 80034a8:	05c0      	lsls	r0, r0, #23
 80034aa:	4318      	orrs	r0, r3
 80034ac:	07d2      	lsls	r2, r2, #31
 80034ae:	4310      	orrs	r0, r2
 80034b0:	b003      	add	sp, #12
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <__aeabi_d2f+0x42>
 80034b8:	2000      	movs	r0, #0
 80034ba:	2300      	movs	r3, #0
 80034bc:	e7f4      	b.n	80034a8 <__aeabi_d2f+0x2c>
 80034be:	433d      	orrs	r5, r7
 80034c0:	d0f0      	beq.n	80034a4 <__aeabi_d2f+0x28>
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	03db      	lsls	r3, r3, #15
 80034c6:	20ff      	movs	r0, #255	@ 0xff
 80034c8:	433b      	orrs	r3, r7
 80034ca:	e7ed      	b.n	80034a8 <__aeabi_d2f+0x2c>
 80034cc:	2c00      	cmp	r4, #0
 80034ce:	dd14      	ble.n	80034fa <__aeabi_d2f+0x7e>
 80034d0:	9b00      	ldr	r3, [sp, #0]
 80034d2:	00ff      	lsls	r7, r7, #3
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	1e58      	subs	r0, r3, #1
 80034d8:	4183      	sbcs	r3, r0
 80034da:	0f69      	lsrs	r1, r5, #29
 80034dc:	433b      	orrs	r3, r7
 80034de:	430b      	orrs	r3, r1
 80034e0:	0759      	lsls	r1, r3, #29
 80034e2:	d041      	beq.n	8003568 <__aeabi_d2f+0xec>
 80034e4:	210f      	movs	r1, #15
 80034e6:	4019      	ands	r1, r3
 80034e8:	2904      	cmp	r1, #4
 80034ea:	d028      	beq.n	800353e <__aeabi_d2f+0xc2>
 80034ec:	3304      	adds	r3, #4
 80034ee:	0159      	lsls	r1, r3, #5
 80034f0:	d525      	bpl.n	800353e <__aeabi_d2f+0xc2>
 80034f2:	3401      	adds	r4, #1
 80034f4:	2300      	movs	r3, #0
 80034f6:	b2e0      	uxtb	r0, r4
 80034f8:	e7d6      	b.n	80034a8 <__aeabi_d2f+0x2c>
 80034fa:	0021      	movs	r1, r4
 80034fc:	3117      	adds	r1, #23
 80034fe:	dbdb      	blt.n	80034b8 <__aeabi_d2f+0x3c>
 8003500:	2180      	movs	r1, #128	@ 0x80
 8003502:	201e      	movs	r0, #30
 8003504:	0409      	lsls	r1, r1, #16
 8003506:	4339      	orrs	r1, r7
 8003508:	1b00      	subs	r0, r0, r4
 800350a:	281f      	cmp	r0, #31
 800350c:	dd1b      	ble.n	8003546 <__aeabi_d2f+0xca>
 800350e:	2602      	movs	r6, #2
 8003510:	4276      	negs	r6, r6
 8003512:	1b34      	subs	r4, r6, r4
 8003514:	000e      	movs	r6, r1
 8003516:	40e6      	lsrs	r6, r4
 8003518:	0034      	movs	r4, r6
 800351a:	2820      	cmp	r0, #32
 800351c:	d004      	beq.n	8003528 <__aeabi_d2f+0xac>
 800351e:	4817      	ldr	r0, [pc, #92]	@ (800357c <__aeabi_d2f+0x100>)
 8003520:	4684      	mov	ip, r0
 8003522:	4463      	add	r3, ip
 8003524:	4099      	lsls	r1, r3
 8003526:	430d      	orrs	r5, r1
 8003528:	002b      	movs	r3, r5
 800352a:	1e59      	subs	r1, r3, #1
 800352c:	418b      	sbcs	r3, r1
 800352e:	4323      	orrs	r3, r4
 8003530:	0759      	lsls	r1, r3, #29
 8003532:	d015      	beq.n	8003560 <__aeabi_d2f+0xe4>
 8003534:	210f      	movs	r1, #15
 8003536:	2400      	movs	r4, #0
 8003538:	4019      	ands	r1, r3
 800353a:	2904      	cmp	r1, #4
 800353c:	d117      	bne.n	800356e <__aeabi_d2f+0xf2>
 800353e:	019b      	lsls	r3, r3, #6
 8003540:	0a5b      	lsrs	r3, r3, #9
 8003542:	b2e0      	uxtb	r0, r4
 8003544:	e7b0      	b.n	80034a8 <__aeabi_d2f+0x2c>
 8003546:	4c0e      	ldr	r4, [pc, #56]	@ (8003580 <__aeabi_d2f+0x104>)
 8003548:	191c      	adds	r4, r3, r4
 800354a:	002b      	movs	r3, r5
 800354c:	40a5      	lsls	r5, r4
 800354e:	40c3      	lsrs	r3, r0
 8003550:	40a1      	lsls	r1, r4
 8003552:	1e68      	subs	r0, r5, #1
 8003554:	4185      	sbcs	r5, r0
 8003556:	4329      	orrs	r1, r5
 8003558:	430b      	orrs	r3, r1
 800355a:	2400      	movs	r4, #0
 800355c:	0759      	lsls	r1, r3, #29
 800355e:	d1c1      	bne.n	80034e4 <__aeabi_d2f+0x68>
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	2000      	movs	r0, #0
 8003564:	0a5b      	lsrs	r3, r3, #9
 8003566:	e79f      	b.n	80034a8 <__aeabi_d2f+0x2c>
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	b2e0      	uxtb	r0, r4
 800356c:	e79c      	b.n	80034a8 <__aeabi_d2f+0x2c>
 800356e:	3304      	adds	r3, #4
 8003570:	e7e5      	b.n	800353e <__aeabi_d2f+0xc2>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	000007fe 	.word	0x000007fe
 8003578:	fffffc80 	.word	0xfffffc80
 800357c:	fffffca2 	.word	0xfffffca2
 8003580:	fffffc82 	.word	0xfffffc82

08003584 <__clzdi2>:
 8003584:	b510      	push	{r4, lr}
 8003586:	2900      	cmp	r1, #0
 8003588:	d103      	bne.n	8003592 <__clzdi2+0xe>
 800358a:	f7fc ffef 	bl	800056c <__clzsi2>
 800358e:	3020      	adds	r0, #32
 8003590:	e002      	b.n	8003598 <__clzdi2+0x14>
 8003592:	0008      	movs	r0, r1
 8003594:	f7fc ffea 	bl	800056c <__clzsi2>
 8003598:	bd10      	pop	{r4, pc}
 800359a:	46c0      	nop			@ (mov r8, r8)

0800359c <batteryInit>:
static ADC_HandleTypeDef* ADC_Handler = NULL;
float Charge = 0;
float Solar = 0;
uint16_t Vref = 3;

void batteryInit(ADC_HandleTypeDef* ADC_HANDLER){
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  ADC_Handler = ADC_HANDLER;
 80035a4:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <batteryInit+0x18>)
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b002      	add	sp, #8
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	20000338 	.word	0x20000338

080035b8 <checkCharges>:

void checkCharges(){
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  HAL_ADC_Start(ADC_Handler);
 80035bc:	4b41      	ldr	r3, [pc, #260]	@ (80036c4 <checkCharges+0x10c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f005 fc21 	bl	8008e08 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 80035c6:	4b3f      	ldr	r3, [pc, #252]	@ (80036c4 <checkCharges+0x10c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	0018      	movs	r0, r3
 80035ce:	f005 fc6f 	bl	8008eb0 <HAL_ADC_PollForConversion>
  Charge = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 80035d2:	4b3c      	ldr	r3, [pc, #240]	@ (80036c4 <checkCharges+0x10c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f005 fd06 	bl	8008fe8 <HAL_ADC_GetValue>
 80035dc:	0003      	movs	r3, r0
 80035de:	0018      	movs	r0, r3
 80035e0:	f7fe f806 	bl	80015f0 <__aeabi_ui2f>
 80035e4:	1c03      	adds	r3, r0, #0
 80035e6:	1c18      	adds	r0, r3, #0
 80035e8:	f7ff ff00 	bl	80033ec <__aeabi_f2d>
 80035ec:	2200      	movs	r2, #0
 80035ee:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <checkCharges+0x110>)
 80035f0:	f7fe fba4 	bl	8001d3c <__aeabi_ddiv>
 80035f4:	0002      	movs	r2, r0
 80035f6:	000b      	movs	r3, r1
 80035f8:	0014      	movs	r4, r2
 80035fa:	001d      	movs	r5, r3
 80035fc:	4b33      	ldr	r3, [pc, #204]	@ (80036cc <checkCharges+0x114>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	0018      	movs	r0, r3
 8003602:	f7ff fea1 	bl	8003348 <__aeabi_i2d>
 8003606:	0002      	movs	r2, r0
 8003608:	000b      	movs	r3, r1
 800360a:	0020      	movs	r0, r4
 800360c:	0029      	movs	r1, r5
 800360e:	f7fe ffd9 	bl	80025c4 <__aeabi_dmul>
 8003612:	0002      	movs	r2, r0
 8003614:	000b      	movs	r3, r1
 8003616:	0010      	movs	r0, r2
 8003618:	0019      	movs	r1, r3
 800361a:	0002      	movs	r2, r0
 800361c:	000b      	movs	r3, r1
 800361e:	f7fe f829 	bl	8001674 <__aeabi_dadd>
 8003622:	0002      	movs	r2, r0
 8003624:	000b      	movs	r3, r1
 8003626:	0010      	movs	r0, r2
 8003628:	0019      	movs	r1, r3
 800362a:	f7ff ff27 	bl	800347c <__aeabi_d2f>
 800362e:	1c02      	adds	r2, r0, #0
 8003630:	4b27      	ldr	r3, [pc, #156]	@ (80036d0 <checkCharges+0x118>)
 8003632:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(ADC_Handler);
 8003634:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <checkCharges+0x10c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0018      	movs	r0, r3
 800363a:	f005 fbe5 	bl	8008e08 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 800363e:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <checkCharges+0x10c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	0018      	movs	r0, r3
 8003646:	f005 fc33 	bl	8008eb0 <HAL_ADC_PollForConversion>
  Solar = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 800364a:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <checkCharges+0x10c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0018      	movs	r0, r3
 8003650:	f005 fcca 	bl	8008fe8 <HAL_ADC_GetValue>
 8003654:	0003      	movs	r3, r0
 8003656:	0018      	movs	r0, r3
 8003658:	f7fd ffca 	bl	80015f0 <__aeabi_ui2f>
 800365c:	1c03      	adds	r3, r0, #0
 800365e:	1c18      	adds	r0, r3, #0
 8003660:	f7ff fec4 	bl	80033ec <__aeabi_f2d>
 8003664:	2200      	movs	r2, #0
 8003666:	4b18      	ldr	r3, [pc, #96]	@ (80036c8 <checkCharges+0x110>)
 8003668:	f7fe fb68 	bl	8001d3c <__aeabi_ddiv>
 800366c:	0002      	movs	r2, r0
 800366e:	000b      	movs	r3, r1
 8003670:	0014      	movs	r4, r2
 8003672:	001d      	movs	r5, r3
 8003674:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <checkCharges+0x114>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff fe65 	bl	8003348 <__aeabi_i2d>
 800367e:	0002      	movs	r2, r0
 8003680:	000b      	movs	r3, r1
 8003682:	0020      	movs	r0, r4
 8003684:	0029      	movs	r1, r5
 8003686:	f7fe ff9d 	bl	80025c4 <__aeabi_dmul>
 800368a:	0002      	movs	r2, r0
 800368c:	000b      	movs	r3, r1
 800368e:	0010      	movs	r0, r2
 8003690:	0019      	movs	r1, r3
 8003692:	0002      	movs	r2, r0
 8003694:	000b      	movs	r3, r1
 8003696:	f7fd ffed 	bl	8001674 <__aeabi_dadd>
 800369a:	0002      	movs	r2, r0
 800369c:	000b      	movs	r3, r1
 800369e:	0010      	movs	r0, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	f7ff feeb 	bl	800347c <__aeabi_d2f>
 80036a6:	1c02      	adds	r2, r0, #0
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <checkCharges+0x11c>)
 80036aa:	601a      	str	r2, [r3, #0]
  setCharges(Charge, Solar);
 80036ac:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <checkCharges+0x118>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <checkCharges+0x11c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c19      	adds	r1, r3, #0
 80036b6:	1c10      	adds	r0, r2, #0
 80036b8:	f000 f80e 	bl	80036d8 <setCharges>
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdb0      	pop	{r4, r5, r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	20000338 	.word	0x20000338
 80036c8:	40affe00 	.word	0x40affe00
 80036cc:	20000000 	.word	0x20000000
 80036d0:	2000033c 	.word	0x2000033c
 80036d4:	20000340 	.word	0x20000340

080036d8 <setCharges>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setCharges(float battery, float solar){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  batteryCharge = battery;
 80036e2:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <setCharges+0x20>)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	601a      	str	r2, [r3, #0]
  solarCharge = solar;
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <setCharges+0x24>)
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	601a      	str	r2, [r3, #0]
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	20000454 	.word	0x20000454
 80036fc:	20000458 	.word	0x20000458

08003700 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	1dbb      	adds	r3, r7, #6
 800370c:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 800370e:	4b07      	ldr	r3, [pc, #28]	@ (800372c <setMeasurement+0x2c>)
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003714:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <setMeasurement+0x30>)
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 800371a:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <setMeasurement+0x34>)
 800371c:	1dba      	adds	r2, r7, #6
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	801a      	strh	r2, [r3, #0]
}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b004      	add	sp, #16
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	2000044c 	.word	0x2000044c
 8003730:	20000450 	.word	0x20000450
 8003734:	2000045c 	.word	0x2000045c

08003738 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003740:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <ESP_Init+0x1c>)
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003746:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <ESP_Init+0x20>)
 8003748:	2202      	movs	r2, #2
 800374a:	701a      	strb	r2, [r3, #0]
}
 800374c:	46c0      	nop			@ (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000344 	.word	0x20000344
 8003758:	200000fb 	.word	0x200000fb

0800375c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	000a      	movs	r2, r1
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <ESP_Send+0x48>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	250f      	movs	r5, #15
 8003770:	197c      	adds	r4, r7, r5
 8003772:	1cbb      	adds	r3, r7, #2
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0019      	movs	r1, r3
 800377a:	f00a fbed 	bl	800df58 <HAL_UART_Transmit_DMA>
 800377e:	0003      	movs	r3, r0
 8003780:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003782:	197b      	adds	r3, r7, r5
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 800378a:	4a07      	ldr	r2, [pc, #28]	@ (80037a8 <ESP_Send+0x4c>)
 800378c:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <ESP_Send+0x50>)
 800378e:	0019      	movs	r1, r3
 8003790:	2003      	movs	r0, #3
 8003792:	f004 fd9f 	bl	80082d4 <CreateLine>
    return false;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <ESP_Send+0x40>
  }
  return true;
 800379a:	2301      	movs	r3, #1
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bdb0      	pop	{r4, r5, r7, pc}
 80037a4:	20000344 	.word	0x20000344
 80037a8:	08014450 	.word	0x08014450
 80037ac:	08014470 	.word	0x08014470

080037b0 <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037b0:	b5b0      	push	{r4, r5, r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	000a      	movs	r2, r1
 80037ba:	1cfb      	adds	r3, r7, #3
 80037bc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80037be:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <ESP_Receive+0x58>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80037c4:	4b11      	ldr	r3, [pc, #68]	@ (800380c <ESP_Receive+0x5c>)
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	1cfb      	adds	r3, r7, #3
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	250f      	movs	r5, #15
 80037d0:	197c      	adds	r4, r7, r5
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0019      	movs	r1, r3
 80037d6:	f00a fc4f 	bl	800e078 <HAL_UART_Receive_DMA>
 80037da:	0003      	movs	r3, r0
 80037dc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037de:	197b      	adds	r3, r7, r5
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 80037e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <ESP_Receive+0x60>)
 80037e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <ESP_Receive+0x64>)
 80037ea:	0019      	movs	r1, r3
 80037ec:	2003      	movs	r0, #3
 80037ee:	f004 fd71 	bl	80082d4 <CreateLine>
    RxComplete = true;
 80037f2:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <ESP_Receive+0x58>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
    return false;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <ESP_Receive+0x4e>
  }
  return true;
 80037fc:	2301      	movs	r3, #1
}
 80037fe:	0018      	movs	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	b004      	add	sp, #16
 8003804:	bdb0      	pop	{r4, r5, r7, pc}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	20000348 	.word	0x20000348
 800380c:	20000344 	.word	0x20000344
 8003810:	08014474 	.word	0x08014474
 8003814:	08014470 	.word	0x08014470

08003818 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_UART_RxCpltCallback+0x2c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d108      	bne.n	800383c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <HAL_UART_RxCpltCallback+0x30>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003830:	4a06      	ldr	r2, [pc, #24]	@ (800384c <HAL_UART_RxCpltCallback+0x34>)
 8003832:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <HAL_UART_RxCpltCallback+0x38>)
 8003834:	0019      	movs	r1, r3
 8003836:	2003      	movs	r0, #3
 8003838:	f004 fd4c 	bl	80082d4 <CreateLine>
  }
}
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000344 	.word	0x20000344
 8003848:	20000348 	.word	0x20000348
 800384c:	08014494 	.word	0x08014494
 8003850:	08014470 	.word	0x08014470

08003854 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_UART_ErrorCallback+0x20>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d102      	bne.n	800386c <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 8003866:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <HAL_UART_ErrorCallback+0x24>)
 8003868:	2207      	movs	r2, #7
 800386a:	701a      	strb	r2, [r3, #0]
  }
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000344 	.word	0x20000344
 8003878:	200000fb 	.word	0x200000fb

0800387c <CreateMessage>:
uint16_t CreateMessage(){
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b085      	sub	sp, #20
 8003880:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 8003882:	1dbb      	adds	r3, r7, #6
 8003884:	2200      	movs	r2, #0
 8003886:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID1, Temperature);
 8003888:	4b3d      	ldr	r3, [pc, #244]	@ (8003980 <CreateMessage+0x104>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1c18      	adds	r0, r3, #0
 800388e:	f7ff fdad 	bl	80033ec <__aeabi_f2d>
 8003892:	0002      	movs	r2, r0
 8003894:	000b      	movs	r3, r1
 8003896:	4c3b      	ldr	r4, [pc, #236]	@ (8003984 <CreateMessage+0x108>)
 8003898:	493b      	ldr	r1, [pc, #236]	@ (8003988 <CreateMessage+0x10c>)
 800389a:	483c      	ldr	r0, [pc, #240]	@ (800398c <CreateMessage+0x110>)
 800389c:	9200      	str	r2, [sp, #0]
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	0022      	movs	r2, r4
 80038a2:	f00d ff47 	bl	8011734 <siprintf>
  messageLength += strlen(messagePart1);
 80038a6:	4b39      	ldr	r3, [pc, #228]	@ (800398c <CreateMessage+0x110>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fc fc55 	bl	8000158 <strlen>
 80038ae:	0003      	movs	r3, r0
 80038b0:	b299      	uxth	r1, r3
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	1dba      	adds	r2, r7, #6
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	188a      	adds	r2, r1, r2
 80038ba:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID2, Humidity);
 80038bc:	4b34      	ldr	r3, [pc, #208]	@ (8003990 <CreateMessage+0x114>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	1c18      	adds	r0, r3, #0
 80038c2:	f7ff fd93 	bl	80033ec <__aeabi_f2d>
 80038c6:	0002      	movs	r2, r0
 80038c8:	000b      	movs	r3, r1
 80038ca:	4c32      	ldr	r4, [pc, #200]	@ (8003994 <CreateMessage+0x118>)
 80038cc:	4932      	ldr	r1, [pc, #200]	@ (8003998 <CreateMessage+0x11c>)
 80038ce:	4833      	ldr	r0, [pc, #204]	@ (800399c <CreateMessage+0x120>)
 80038d0:	9200      	str	r2, [sp, #0]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	0022      	movs	r2, r4
 80038d6:	f00d ff2d 	bl	8011734 <siprintf>
  messageLength += strlen(messagePart2);
 80038da:	4b30      	ldr	r3, [pc, #192]	@ (800399c <CreateMessage+0x120>)
 80038dc:	0018      	movs	r0, r3
 80038de:	f7fc fc3b 	bl	8000158 <strlen>
 80038e2:	0003      	movs	r3, r0
 80038e4:	b299      	uxth	r1, r3
 80038e6:	1dbb      	adds	r3, r7, #6
 80038e8:	1dba      	adds	r2, r7, #6
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	188a      	adds	r2, r1, r2
 80038ee:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":77", sensorID3);
 80038f0:	4a2b      	ldr	r2, [pc, #172]	@ (80039a0 <CreateMessage+0x124>)
 80038f2:	492c      	ldr	r1, [pc, #176]	@ (80039a4 <CreateMessage+0x128>)
 80038f4:	4b2c      	ldr	r3, [pc, #176]	@ (80039a8 <CreateMessage+0x12c>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f00d ff1c 	bl	8011734 <siprintf>
  messageLength += strlen(messagePart3);
 80038fc:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <CreateMessage+0x12c>)
 80038fe:	0018      	movs	r0, r3
 8003900:	f7fc fc2a 	bl	8000158 <strlen>
 8003904:	0003      	movs	r3, r0
 8003906:	b299      	uxth	r1, r3
 8003908:	1dbb      	adds	r3, r7, #6
 800390a:	1dba      	adds	r2, r7, #6
 800390c:	8812      	ldrh	r2, [r2, #0]
 800390e:	188a      	adds	r2, r1, r2
 8003910:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d", sensorID4, VOCIndex);
 8003912:	4b26      	ldr	r3, [pc, #152]	@ (80039ac <CreateMessage+0x130>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	4a26      	ldr	r2, [pc, #152]	@ (80039b0 <CreateMessage+0x134>)
 8003918:	4926      	ldr	r1, [pc, #152]	@ (80039b4 <CreateMessage+0x138>)
 800391a:	4827      	ldr	r0, [pc, #156]	@ (80039b8 <CreateMessage+0x13c>)
 800391c:	f00d ff0a 	bl	8011734 <siprintf>
  messageLength += strlen(messagePart4);
 8003920:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <CreateMessage+0x13c>)
 8003922:	0018      	movs	r0, r3
 8003924:	f7fc fc18 	bl	8000158 <strlen>
 8003928:	0003      	movs	r3, r0
 800392a:	b299      	uxth	r1, r3
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	1dba      	adds	r2, r7, #6
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	188a      	adds	r2, r1, r2
 8003934:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID5, batteryCharge);
 8003936:	4b21      	ldr	r3, [pc, #132]	@ (80039bc <CreateMessage+0x140>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1c18      	adds	r0, r3, #0
 800393c:	f7ff fd56 	bl	80033ec <__aeabi_f2d>
 8003940:	0002      	movs	r2, r0
 8003942:	000b      	movs	r3, r1
 8003944:	4c1e      	ldr	r4, [pc, #120]	@ (80039c0 <CreateMessage+0x144>)
 8003946:	491f      	ldr	r1, [pc, #124]	@ (80039c4 <CreateMessage+0x148>)
 8003948:	481f      	ldr	r0, [pc, #124]	@ (80039c8 <CreateMessage+0x14c>)
 800394a:	9200      	str	r2, [sp, #0]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	0022      	movs	r2, r4
 8003950:	f00d fef0 	bl	8011734 <siprintf>
  messageLength += strlen(messagePart5);
 8003954:	4b1c      	ldr	r3, [pc, #112]	@ (80039c8 <CreateMessage+0x14c>)
 8003956:	0018      	movs	r0, r3
 8003958:	f7fc fbfe 	bl	8000158 <strlen>
 800395c:	0003      	movs	r3, r0
 800395e:	b299      	uxth	r1, r3
 8003960:	1dbb      	adds	r3, r7, #6
 8003962:	1dba      	adds	r2, r7, #6
 8003964:	8812      	ldrh	r2, [r2, #0]
 8003966:	188a      	adds	r2, r1, r2
 8003968:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 800396a:	1dbb      	adds	r3, r7, #6
 800396c:	1dba      	adds	r2, r7, #6
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	3214      	adds	r2, #20
 8003972:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003974:	1dbb      	adds	r3, r7, #6
 8003976:	881b      	ldrh	r3, [r3, #0]
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b003      	add	sp, #12
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	2000044c 	.word	0x2000044c
 8003984:	20000070 	.word	0x20000070
 8003988:	080144a0 	.word	0x080144a0
 800398c:	20000460 	.word	0x20000460
 8003990:	20000450 	.word	0x20000450
 8003994:	2000008c 	.word	0x2000008c
 8003998:	080144e4 	.word	0x080144e4
 800399c:	200004e0 	.word	0x200004e0
 80039a0:	200000a8 	.word	0x200000a8
 80039a4:	08014528 	.word	0x08014528
 80039a8:	20000560 	.word	0x20000560
 80039ac:	2000045c 	.word	0x2000045c
 80039b0:	200000c4 	.word	0x200000c4
 80039b4:	0801456c 	.word	0x0801456c
 80039b8:	200005e0 	.word	0x200005e0
 80039bc:	20000454 	.word	0x20000454
 80039c0:	200000e0 	.word	0x200000e0
 80039c4:	080145b0 	.word	0x080145b0
 80039c8:	20000660 	.word	0x20000660

080039cc <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <SetCommandBuffer+0x24>)
 80039dc:	0018      	movs	r0, r3
 80039de:	f00d ff55 	bl	801188c <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 80039e2:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <SetCommandBuffer+0x28>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	200006ec 	.word	0x200006ec
 80039f4:	200008ec 	.word	0x200008ec

080039f8 <StartProg>:
void StartProg(){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  HAL_Delay(1000);
 80039fc:	23fa      	movs	r3, #250	@ 0xfa
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	0018      	movs	r0, r3
 8003a02:	f005 f869 	bl	8008ad8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003a06:	4b17      	ldr	r3, [pc, #92]	@ (8003a64 <StartProg+0x6c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f006 f9ef 	bl	8009df0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003a12:	2064      	movs	r0, #100	@ 0x64
 8003a14:	f005 f860 	bl	8008ad8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003a18:	4b12      	ldr	r3, [pc, #72]	@ (8003a64 <StartProg+0x6c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f006 f9e6 	bl	8009df0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a24:	23fa      	movs	r3, #250	@ 0xfa
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f005 f855 	bl	8008ad8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <StartProg+0x6c>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	2101      	movs	r1, #1
 8003a34:	0018      	movs	r0, r3
 8003a36:	f006 f9db 	bl	8009df0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a3a:	23fa      	movs	r3, #250	@ 0xfa
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f005 f84a 	bl	8008ad8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003a44:	4b07      	ldr	r3, [pc, #28]	@ (8003a64 <StartProg+0x6c>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	2102      	movs	r1, #2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f006 f9d0 	bl	8009df0 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a50:	2028      	movs	r0, #40	@ 0x28
 8003a52:	f005 f841 	bl	8008ad8 <HAL_Delay>
  EspState = ESP_STATE_BOOT;
 8003a56:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <StartProg+0x70>)
 8003a58:	220a      	movs	r2, #10
 8003a5a:	701a      	strb	r2, [r3, #0]
}
 8003a5c:	46c0      	nop			@ (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	50001c00 	.word	0x50001c00
 8003a68:	200000fb 	.word	0x200000fb

08003a6c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6e:	46c6      	mov	lr, r8
 8003a70:	b500      	push	{lr}
 8003a72:	b094      	sub	sp, #80	@ 0x50
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	61f8      	str	r0, [r7, #28]
 8003a78:	0008      	movs	r0, r1
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	261a      	movs	r6, #26
 8003a7e:	19bb      	adds	r3, r7, r6
 8003a80:	1c02      	adds	r2, r0, #0
 8003a82:	801a      	strh	r2, [r3, #0]
 8003a84:	2319      	movs	r3, #25
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	1c0a      	adds	r2, r1, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	466b      	mov	r3, sp
 8003a8e:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003a90:	19bb      	adds	r3, r7, r6
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a9a:	001a      	movs	r2, r3
 8003a9c:	60ba      	str	r2, [r7, #8]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	60fa      	str	r2, [r7, #12]
 8003aa2:	68b8      	ldr	r0, [r7, #8]
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	0f52      	lsrs	r2, r2, #29
 8003aaa:	000e      	movs	r6, r1
 8003aac:	00f6      	lsls	r6, r6, #3
 8003aae:	617e      	str	r6, [r7, #20]
 8003ab0:	697e      	ldr	r6, [r7, #20]
 8003ab2:	4316      	orrs	r6, r2
 8003ab4:	617e      	str	r6, [r7, #20]
 8003ab6:	0002      	movs	r2, r0
 8003ab8:	00d2      	lsls	r2, r2, #3
 8003aba:	613a      	str	r2, [r7, #16]
 8003abc:	001a      	movs	r2, r3
 8003abe:	603a      	str	r2, [r7, #0]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	6838      	ldr	r0, [r7, #0]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	0002      	movs	r2, r0
 8003aca:	0f52      	lsrs	r2, r2, #29
 8003acc:	000e      	movs	r6, r1
 8003ace:	00f5      	lsls	r5, r6, #3
 8003ad0:	4315      	orrs	r5, r2
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	00d4      	lsls	r4, r2, #3
 8003ad6:	3307      	adds	r3, #7
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	466a      	mov	r2, sp
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	469d      	mov	sp, r3
 8003ae2:	466b      	mov	r3, sp
 8003ae4:	3300      	adds	r3, #0
 8003ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003ae8:	2337      	movs	r3, #55	@ 0x37
 8003aea:	2118      	movs	r1, #24
 8003aec:	185b      	adds	r3, r3, r1
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	2203      	movs	r2, #3
 8003af2:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003af4:	2334      	movs	r3, #52	@ 0x34
 8003af6:	185b      	adds	r3, r3, r1
 8003af8:	19db      	adds	r3, r3, r7
 8003afa:	2200      	movs	r2, #0
 8003afc:	801a      	strh	r2, [r3, #0]
 8003afe:	e013      	b.n	8003b28 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003b00:	2034      	movs	r0, #52	@ 0x34
 8003b02:	2418      	movs	r4, #24
 8003b04:	1903      	adds	r3, r0, r4
 8003b06:	19db      	adds	r3, r3, r7
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	18d2      	adds	r2, r2, r3
 8003b0e:	1903      	adds	r3, r0, r4
 8003b10:	19db      	adds	r3, r3, r7
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	7811      	ldrb	r1, [r2, #0]
 8003b16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b18:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003b1a:	1903      	adds	r3, r0, r4
 8003b1c:	19db      	adds	r3, r3, r7
 8003b1e:	881a      	ldrh	r2, [r3, #0]
 8003b20:	1903      	adds	r3, r0, r4
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	3201      	adds	r2, #1
 8003b26:	801a      	strh	r2, [r3, #0]
 8003b28:	2334      	movs	r3, #52	@ 0x34
 8003b2a:	2018      	movs	r0, #24
 8003b2c:	181b      	adds	r3, r3, r0
 8003b2e:	19da      	adds	r2, r3, r7
 8003b30:	211a      	movs	r1, #26
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	8812      	ldrh	r2, [r2, #0]
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d3e1      	bcc.n	8003b00 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b42:	2100      	movs	r1, #0
 8003b44:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003b46:	2327      	movs	r3, #39	@ 0x27
 8003b48:	0004      	movs	r4, r0
 8003b4a:	191b      	adds	r3, r3, r4
 8003b4c:	19db      	adds	r3, r3, r7
 8003b4e:	224e      	movs	r2, #78	@ 0x4e
 8003b50:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  const char OK[] = AT_RESPONSE_OK;
 8003b52:	201c      	movs	r0, #28
 8003b54:	1903      	adds	r3, r0, r4
 8003b56:	19db      	adds	r3, r3, r7
 8003b58:	4a4f      	ldr	r2, [pc, #316]	@ (8003c98 <ParseBuffer+0x22c>)
 8003b5a:	8811      	ldrh	r1, [r2, #0]
 8003b5c:	8019      	strh	r1, [r3, #0]
 8003b5e:	7892      	ldrb	r2, [r2, #2]
 8003b60:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b62:	2314      	movs	r3, #20
 8003b64:	191b      	adds	r3, r3, r4
 8003b66:	19db      	adds	r3, r3, r7
 8003b68:	4a4c      	ldr	r2, [pc, #304]	@ (8003c9c <ParseBuffer+0x230>)
 8003b6a:	6811      	ldr	r1, [r2, #0]
 8003b6c:	6019      	str	r1, [r3, #0]
 8003b6e:	8892      	ldrh	r2, [r2, #4]
 8003b70:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b72:	230c      	movs	r3, #12
 8003b74:	191b      	adds	r3, r3, r4
 8003b76:	19db      	adds	r3, r3, r7
 8003b78:	4a49      	ldr	r2, [pc, #292]	@ (8003ca0 <ParseBuffer+0x234>)
 8003b7a:	6811      	ldr	r1, [r2, #0]
 8003b7c:	6019      	str	r1, [r3, #0]
 8003b7e:	8892      	ldrh	r2, [r2, #4]
 8003b80:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003b82:	2308      	movs	r3, #8
 8003b84:	0021      	movs	r1, r4
 8003b86:	185b      	adds	r3, r3, r1
 8003b88:	19db      	adds	r3, r3, r7
 8003b8a:	223e      	movs	r2, #62	@ 0x3e
 8003b8c:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003b8e:	2319      	movs	r3, #25
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d108      	bne.n	8003baa <ParseBuffer+0x13e>
    ParsePoint = strstr(tempBuf, OK);
 8003b98:	1843      	adds	r3, r0, r1
 8003b9a:	19da      	adds	r2, r3, r7
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f00d fe87 	bl	80118b4 <strstr>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003baa:	2319      	movs	r3, #25
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10a      	bne.n	8003bca <ParseBuffer+0x15e>
    ParsePoint = strstr(tempBuf, ready);
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	2218      	movs	r2, #24
 8003bb8:	189b      	adds	r3, r3, r2
 8003bba:	19da      	adds	r2, r3, r7
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bbe:	0011      	movs	r1, r2
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f00d fe77 	bl	80118b4 <strstr>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003bca:	2319      	movs	r3, #25
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d10a      	bne.n	8003bea <ParseBuffer+0x17e>
    ParsePoint = strstr(tempBuf, start);
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	2218      	movs	r2, #24
 8003bd8:	189b      	adds	r3, r3, r2
 8003bda:	19da      	adds	r2, r3, r7
 8003bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bde:	0011      	movs	r1, r2
 8003be0:	0018      	movs	r0, r3
 8003be2:	f00d fe67 	bl	80118b4 <strstr>
 8003be6:	0003      	movs	r3, r0
 8003be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003bea:	2314      	movs	r3, #20
 8003bec:	2418      	movs	r4, #24
 8003bee:	191b      	adds	r3, r3, r4
 8003bf0:	19da      	adds	r2, r3, r7
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f00d fe5c 	bl	80118b4 <strstr>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if(len > 1 ){
 8003c00:	231a      	movs	r3, #26
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d939      	bls.n	8003c7e <ParseBuffer+0x212>
    TestChar = *ParsePoint;
 8003c0a:	2127      	movs	r1, #39	@ 0x27
 8003c0c:	190b      	adds	r3, r1, r4
 8003c0e:	19db      	adds	r3, r3, r7
 8003c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003c16:	190b      	adds	r3, r1, r4
 8003c18:	19db      	adds	r3, r3, r7
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c1e:	d104      	bne.n	8003c2a <ParseBuffer+0x1be>
      status = RECEIVE_STATUS_OK;
 8003c20:	2337      	movs	r3, #55	@ 0x37
 8003c22:	191b      	adds	r3, r3, r4
 8003c24:	19db      	adds	r3, r3, r7
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003c2a:	2327      	movs	r3, #39	@ 0x27
 8003c2c:	2218      	movs	r2, #24
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b72      	cmp	r3, #114	@ 0x72
 8003c36:	d104      	bne.n	8003c42 <ParseBuffer+0x1d6>
      status = RECEIVE_STATUS_READY;
 8003c38:	2337      	movs	r3, #55	@ 0x37
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	19db      	adds	r3, r3, r7
 8003c3e:	2202      	movs	r2, #2
 8003c40:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003c42:	2327      	movs	r3, #39	@ 0x27
 8003c44:	2218      	movs	r2, #24
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	19db      	adds	r3, r3, r7
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c4e:	d104      	bne.n	8003c5a <ParseBuffer+0x1ee>
      status = RECEIVE_STATUS_START;
 8003c50:	2337      	movs	r3, #55	@ 0x37
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	19db      	adds	r3, r3, r7
 8003c56:	2205      	movs	r2, #5
 8003c58:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003c5a:	2127      	movs	r1, #39	@ 0x27
 8003c5c:	2018      	movs	r0, #24
 8003c5e:	180b      	adds	r3, r1, r0
 8003c60:	19db      	adds	r3, r3, r7
 8003c62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003c68:	0002      	movs	r2, r0
 8003c6a:	188b      	adds	r3, r1, r2
 8003c6c:	19db      	adds	r3, r3, r7
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b45      	cmp	r3, #69	@ 0x45
 8003c72:	d104      	bne.n	8003c7e <ParseBuffer+0x212>
      status = RECEIVE_STATUS_ERROR;
 8003c74:	2337      	movs	r3, #55	@ 0x37
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	19db      	adds	r3, r3, r7
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003c7e:	2337      	movs	r3, #55	@ 0x37
 8003c80:	2218      	movs	r2, #24
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	19db      	adds	r3, r3, r7
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	46c5      	mov	sp, r8
//          if (TempIndex >= ESP_MAX_BUFFER_SIZE) {
//              TempIndex = 0;
//          }
//       }
//    }
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b014      	add	sp, #80	@ 0x50
 8003c90:	bc80      	pop	{r7}
 8003c92:	46b8      	mov	r8, r7
 8003c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	080145f8 	.word	0x080145f8
 8003c9c:	080145fc 	.word	0x080145fc
 8003ca0:	08014604 	.word	0x08014604

08003ca4 <PollAwake>:
/* line 228 to 383 contain the AT commands. This could be optimized by loading the commands into
 * an array and having the function handling the sending. This was the simple but verbose
 * implementation.
 */
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003caa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <PollAwake+0x3c>)
 8003cac:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7ff fe8b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7fc fa4d 	bl	8000158 <strlen>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0011      	movs	r1, r2
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7ff fd48 	bl	800375c <ESP_Send>
 8003ccc:	1e03      	subs	r3, r0, #0
 8003cce:	d001      	beq.n	8003cd4 <PollAwake+0x30>
    return true;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <PollAwake+0x32>
  }
  else{
    return false;
 8003cd4:	2300      	movs	r3, #0
  }
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	0801460c 	.word	0x0801460c

08003ce4 <RFPower>:
bool RFPower(){
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <RFPower+0x3c>)
 8003cec:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7ff fe6b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7fc fa2d 	bl	8000158 <strlen>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7ff fd28 	bl	800375c <ESP_Send>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d001      	beq.n	8003d14 <RFPower+0x30>
    return true;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <RFPower+0x32>
  }
  else{
    return false;
 8003d14:	2300      	movs	r3, #0
  }
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	08014614 	.word	0x08014614

08003d24 <CheckRFPower>:
bool CheckRFPower(){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <CheckRFPower+0x3c>)
 8003d2c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff fe4b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7fc fa0d 	bl	8000158 <strlen>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	0011      	movs	r1, r2
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7ff fd08 	bl	800375c <ESP_Send>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d001      	beq.n	8003d54 <CheckRFPower+0x30>
    return true;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <CheckRFPower+0x32>
  }
  else{
    return false;
 8003d54:	2300      	movs	r3, #0
  }
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b002      	add	sp, #8
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	08014624 	.word	0x08014624

08003d64 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <ATRestore+0x3c>)
 8003d6c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff fe2b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7fc f9ed 	bl	8000158 <strlen>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff fce8 	bl	800375c <ESP_Send>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <ATRestore+0x30>
    return true;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <ATRestore+0x32>
  }
  else{
    return false;
 8003d94:	2300      	movs	r3, #0
  }
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	08014634 	.word	0x08014634

08003da4 <CWINIT>:
bool CWINIT(){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003daa:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <CWINIT+0x3c>)
 8003dac:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff fe0b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7fc f9cd 	bl	8000158 <strlen>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0011      	movs	r1, r2
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7ff fcc8 	bl	800375c <ESP_Send>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d001      	beq.n	8003dd4 <CWINIT+0x30>
    return true;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <CWINIT+0x32>
  }
  else{
    return false;
 8003dd4:	2300      	movs	r3, #0
  }
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	08014644 	.word	0x08014644

08003de4 <CWMODE1>:
bool CWMODE1(){
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003dea:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <CWMODE1+0x3c>)
 8003dec:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff fdeb 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7fc f9ad 	bl	8000158 <strlen>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0011      	movs	r1, r2
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7ff fca8 	bl	800375c <ESP_Send>
 8003e0c:	1e03      	subs	r3, r0, #0
 8003e0e:	d001      	beq.n	8003e14 <CWMODE1+0x30>
    return true;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <CWMODE1+0x32>
  }
  else{
    return false;
 8003e14:	2300      	movs	r3, #0
  }
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b002      	add	sp, #8
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	08014654 	.word	0x08014654

08003e24 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <CWAUTOCONN+0x3c>)
 8003e2c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7ff fdcb 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f7fc f98d 	bl	8000158 <strlen>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0011      	movs	r1, r2
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff fc88 	bl	800375c <ESP_Send>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d001      	beq.n	8003e54 <CWAUTOCONN+0x30>
    return true;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003e54:	2300      	movs	r3, #0
  }
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b002      	add	sp, #8
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	08014664 	.word	0x08014664

08003e64 <CWJAP>:
bool CWJAP(){
 8003e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e66:	46c6      	mov	lr, r8
 8003e68:	b500      	push	{lr}
 8003e6a:	b0a2      	sub	sp, #136	@ 0x88
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	466b      	mov	r3, sp
 8003e70:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003e72:	2618      	movs	r6, #24
 8003e74:	19bb      	adds	r3, r7, r6
 8003e76:	2264      	movs	r2, #100	@ 0x64
 8003e78:	2100      	movs	r1, #0
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f00d fcfe 	bl	801187c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, Password);
 8003e80:	4b34      	ldr	r3, [pc, #208]	@ (8003f54 <CWJAP+0xf0>)
 8003e82:	4a35      	ldr	r2, [pc, #212]	@ (8003f58 <CWJAP+0xf4>)
 8003e84:	4935      	ldr	r1, [pc, #212]	@ (8003f5c <CWJAP+0xf8>)
 8003e86:	19b8      	adds	r0, r7, r6
 8003e88:	f00d fc54 	bl	8011734 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003e8c:	19bb      	adds	r3, r7, r6
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7fc f962 	bl	8000158 <strlen>
 8003e94:	0002      	movs	r2, r0
 8003e96:	216f      	movs	r1, #111	@ 0x6f
 8003e98:	0030      	movs	r0, r6
 8003e9a:	180b      	adds	r3, r1, r0
 8003e9c:	19db      	adds	r3, r3, r7
 8003e9e:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003ea0:	180b      	adds	r3, r1, r0
 8003ea2:	19db      	adds	r3, r3, r7
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	2180      	movs	r1, #128	@ 0x80
 8003eac:	1879      	adds	r1, r7, r1
 8003eae:	600a      	str	r2, [r1, #0]
 8003eb0:	001a      	movs	r2, r3
 8003eb2:	60ba      	str	r2, [r7, #8]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	60fa      	str	r2, [r7, #12]
 8003eb8:	68b8      	ldr	r0, [r7, #8]
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	0f52      	lsrs	r2, r2, #29
 8003ec0:	000e      	movs	r6, r1
 8003ec2:	00f6      	lsls	r6, r6, #3
 8003ec4:	617e      	str	r6, [r7, #20]
 8003ec6:	697e      	ldr	r6, [r7, #20]
 8003ec8:	4316      	orrs	r6, r2
 8003eca:	617e      	str	r6, [r7, #20]
 8003ecc:	0002      	movs	r2, r0
 8003ece:	00d2      	lsls	r2, r2, #3
 8003ed0:	613a      	str	r2, [r7, #16]
 8003ed2:	001a      	movs	r2, r3
 8003ed4:	603a      	str	r2, [r7, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	6838      	ldr	r0, [r7, #0]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	0002      	movs	r2, r0
 8003ee0:	0f52      	lsrs	r2, r2, #29
 8003ee2:	000e      	movs	r6, r1
 8003ee4:	00f5      	lsls	r5, r6, #3
 8003ee6:	4315      	orrs	r5, r2
 8003ee8:	0002      	movs	r2, r0
 8003eea:	00d4      	lsls	r4, r2, #3
 8003eec:	3307      	adds	r3, #7
 8003eee:	08db      	lsrs	r3, r3, #3
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	466a      	mov	r2, sp
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	469d      	mov	sp, r3
 8003ef8:	466b      	mov	r3, sp
 8003efa:	3300      	adds	r3, #0
 8003efc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  atCommand[len] = '\0';
 8003efe:	246f      	movs	r4, #111	@ 0x6f
 8003f00:	2018      	movs	r0, #24
 8003f02:	1823      	adds	r3, r4, r0
 8003f04:	19db      	adds	r3, r3, r7
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	54d1      	strb	r1, [r2, r3]
  strncpy(atCommand, atCommandBuff, len);
 8003f0e:	1823      	adds	r3, r4, r0
 8003f10:	19db      	adds	r3, r3, r7
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	0005      	movs	r5, r0
 8003f16:	1839      	adds	r1, r7, r0
 8003f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f00d fcb6 	bl	801188c <strncpy>
  SetCommandBuffer(atCommand);
 8003f20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7ff fd52 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003f28:	1963      	adds	r3, r4, r5
 8003f2a:	19db      	adds	r3, r3, r7
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f32:	0011      	movs	r1, r2
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff fc11 	bl	800375c <ESP_Send>
 8003f3a:	1e03      	subs	r3, r0, #0
 8003f3c:	d001      	beq.n	8003f42 <CWJAP+0xde>
    return true;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <CWJAP+0xe0>
  }
  else{
    return false;
 8003f42:	2300      	movs	r3, #0
 8003f44:	46c5      	mov	sp, r8
  }
}
 8003f46:	0018      	movs	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b022      	add	sp, #136	@ 0x88
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	46b8      	mov	r8, r7
 8003f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000010 	.word	0x20000010
 8003f58:	20000004 	.word	0x20000004
 8003f5c:	08014678 	.word	0x08014678

08003f60 <CWMODE3>:
bool CWMODE3(){
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <CWMODE3+0x3c>)
 8003f68:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7ff fd2d 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7fc f8ef 	bl	8000158 <strlen>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	0011      	movs	r1, r2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f7ff fbea 	bl	800375c <ESP_Send>
 8003f88:	1e03      	subs	r3, r0, #0
 8003f8a:	d001      	beq.n	8003f90 <CWMODE3+0x30>
    return true;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <CWMODE3+0x32>
  }
  else{
    return false;
 8003f90:	2300      	movs	r3, #0
  }
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b002      	add	sp, #8
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	08014690 	.word	0x08014690

08003fa0 <CWSAP>:
bool CWSAP(){
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <CWSAP+0x3c>)
 8003fa8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f7ff fd0d 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7fc f8cf 	bl	8000158 <strlen>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0011      	movs	r1, r2
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7ff fbca 	bl	800375c <ESP_Send>
 8003fc8:	1e03      	subs	r3, r0, #0
 8003fca:	d001      	beq.n	8003fd0 <CWSAP+0x30>
    return true;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <CWSAP+0x32>
  }
  else{
    return false;
 8003fd0:	2300      	movs	r3, #0
  }
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b002      	add	sp, #8
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	080146a0 	.word	0x080146a0

08003fe0 <CIPMUX>:
bool CIPMUX(){
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <CIPMUX+0x3c>)
 8003fe8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff fced 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7fc f8af 	bl	8000158 <strlen>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	0011      	movs	r1, r2
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff fbaa 	bl	800375c <ESP_Send>
 8004008:	1e03      	subs	r3, r0, #0
 800400a:	d001      	beq.n	8004010 <CIPMUX+0x30>
    return true;
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <CIPMUX+0x32>
  }
  else{
    return false;
 8004010:	2300      	movs	r3, #0
  }
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b002      	add	sp, #8
 8004018:	bd80      	pop	{r7, pc}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	080146c4 	.word	0x080146c4

08004020 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004026:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <WEBSERVER+0x3c>)
 8004028:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff fccd 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0018      	movs	r0, r3
 8004036:	f7fc f88f 	bl	8000158 <strlen>
 800403a:	0003      	movs	r3, r0
 800403c:	b29a      	uxth	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	0011      	movs	r1, r2
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff fb8a 	bl	800375c <ESP_Send>
 8004048:	1e03      	subs	r3, r0, #0
 800404a:	d001      	beq.n	8004050 <WEBSERVER+0x30>
    return true;
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <WEBSERVER+0x32>
  }
  else{
    return false;
 8004050:	2300      	movs	r3, #0
  }
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	b002      	add	sp, #8
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	080146d4 	.word	0x080146d4

08004060 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004062:	46c6      	mov	lr, r8
 8004064:	b500      	push	{lr}
 8004066:	4c47      	ldr	r4, [pc, #284]	@ (8004184 <HTTPCPOST+0x124>)
 8004068:	44a5      	add	sp, r4
 800406a:	af00      	add	r7, sp, #0
 800406c:	466b      	mov	r3, sp
 800406e:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8004070:	4b45      	ldr	r3, [pc, #276]	@ (8004188 <HTTPCPOST+0x128>)
 8004072:	2218      	movs	r2, #24
 8004074:	189b      	adds	r3, r3, r2
 8004076:	19dc      	adds	r4, r3, r7
 8004078:	f7ff fc00 	bl	800387c <CreateMessage>
 800407c:	0003      	movs	r3, r0
 800407e:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", API, length);
 8004080:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <HTTPCPOST+0x128>)
 8004082:	2218      	movs	r2, #24
 8004084:	189b      	adds	r3, r3, r2
 8004086:	19db      	adds	r3, r3, r7
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	4a40      	ldr	r2, [pc, #256]	@ (800418c <HTTPCPOST+0x12c>)
 800408c:	4940      	ldr	r1, [pc, #256]	@ (8004190 <HTTPCPOST+0x130>)
 800408e:	201c      	movs	r0, #28
 8004090:	1838      	adds	r0, r7, r0
 8004092:	f00d fb4f 	bl	8011734 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004096:	231c      	movs	r3, #28
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	0018      	movs	r0, r3
 800409c:	f7fc f85c 	bl	8000158 <strlen>
 80040a0:	0002      	movs	r2, r0
 80040a2:	4c3c      	ldr	r4, [pc, #240]	@ (8004194 <HTTPCPOST+0x134>)
 80040a4:	2318      	movs	r3, #24
 80040a6:	18e3      	adds	r3, r4, r3
 80040a8:	19db      	adds	r3, r3, r7
 80040aa:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80040ac:	2318      	movs	r3, #24
 80040ae:	18e3      	adds	r3, r4, r3
 80040b0:	19db      	adds	r3, r3, r7
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	3301      	adds	r3, #1
 80040b6:	1e5a      	subs	r2, r3, #1
 80040b8:	2198      	movs	r1, #152	@ 0x98
 80040ba:	0089      	lsls	r1, r1, #2
 80040bc:	2018      	movs	r0, #24
 80040be:	1809      	adds	r1, r1, r0
 80040c0:	19c9      	adds	r1, r1, r7
 80040c2:	600a      	str	r2, [r1, #0]
 80040c4:	001a      	movs	r2, r3
 80040c6:	0015      	movs	r5, r2
 80040c8:	2200      	movs	r2, #0
 80040ca:	0016      	movs	r6, r2
 80040cc:	0028      	movs	r0, r5
 80040ce:	0031      	movs	r1, r6
 80040d0:	0002      	movs	r2, r0
 80040d2:	0f52      	lsrs	r2, r2, #29
 80040d4:	000d      	movs	r5, r1
 80040d6:	00ed      	lsls	r5, r5, #3
 80040d8:	617d      	str	r5, [r7, #20]
 80040da:	697d      	ldr	r5, [r7, #20]
 80040dc:	4315      	orrs	r5, r2
 80040de:	617d      	str	r5, [r7, #20]
 80040e0:	0002      	movs	r2, r0
 80040e2:	00d2      	lsls	r2, r2, #3
 80040e4:	613a      	str	r2, [r7, #16]
 80040e6:	001a      	movs	r2, r3
 80040e8:	603a      	str	r2, [r7, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	6838      	ldr	r0, [r7, #0]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	0002      	movs	r2, r0
 80040f4:	0f52      	lsrs	r2, r2, #29
 80040f6:	000d      	movs	r5, r1
 80040f8:	00ed      	lsls	r5, r5, #3
 80040fa:	60fd      	str	r5, [r7, #12]
 80040fc:	68fd      	ldr	r5, [r7, #12]
 80040fe:	4315      	orrs	r5, r2
 8004100:	60fd      	str	r5, [r7, #12]
 8004102:	0002      	movs	r2, r0
 8004104:	00d2      	lsls	r2, r2, #3
 8004106:	60ba      	str	r2, [r7, #8]
 8004108:	3307      	adds	r3, #7
 800410a:	08db      	lsrs	r3, r3, #3
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	466a      	mov	r2, sp
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	469d      	mov	sp, r3
 8004114:	466b      	mov	r3, sp
 8004116:	3300      	adds	r3, #0
 8004118:	2597      	movs	r5, #151	@ 0x97
 800411a:	00ad      	lsls	r5, r5, #2
 800411c:	2218      	movs	r2, #24
 800411e:	18aa      	adds	r2, r5, r2
 8004120:	19d2      	adds	r2, r2, r7
 8004122:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 8004124:	2318      	movs	r3, #24
 8004126:	18e3      	adds	r3, r4, r3
 8004128:	19db      	adds	r3, r3, r7
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	231c      	movs	r3, #28
 800412e:	18f9      	adds	r1, r7, r3
 8004130:	2318      	movs	r3, #24
 8004132:	18eb      	adds	r3, r5, r3
 8004134:	19db      	adds	r3, r3, r7
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0018      	movs	r0, r3
 800413a:	f00d fba7 	bl	801188c <strncpy>
  SetCommandBuffer(atCommand);
 800413e:	2318      	movs	r3, #24
 8004140:	18eb      	adds	r3, r5, r3
 8004142:	19db      	adds	r3, r3, r7
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	0018      	movs	r0, r3
 8004148:	f7ff fc40 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 800414c:	2318      	movs	r3, #24
 800414e:	18e3      	adds	r3, r4, r3
 8004150:	19db      	adds	r3, r3, r7
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b29a      	uxth	r2, r3
 8004156:	2318      	movs	r3, #24
 8004158:	18eb      	adds	r3, r5, r3
 800415a:	19db      	adds	r3, r3, r7
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	0011      	movs	r1, r2
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff fafb 	bl	800375c <ESP_Send>
 8004166:	1e03      	subs	r3, r0, #0
 8004168:	d001      	beq.n	800416e <HTTPCPOST+0x10e>
    return true;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HTTPCPOST+0x110>
  }
  else{
    return false;
 800416e:	2300      	movs	r3, #0
 8004170:	46c5      	mov	sp, r8
  }
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	23a0      	movs	r3, #160	@ 0xa0
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	449d      	add	sp, r3
 800417c:	bc80      	pop	{r7}
 800417e:	46b8      	mov	r8, r7
 8004180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	fffffd80 	.word	0xfffffd80
 8004188:	00000266 	.word	0x00000266
 800418c:	2000002c 	.word	0x2000002c
 8004190:	080146ec 	.word	0x080146ec
 8004194:	00000265 	.word	0x00000265

08004198 <SENDDATA>:
bool SENDDATA(){
 8004198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800419a:	46c6      	mov	lr, r8
 800419c:	b500      	push	{lr}
 800419e:	4c4c      	ldr	r4, [pc, #304]	@ (80042d0 <SENDDATA+0x138>)
 80041a0:	44a5      	add	sp, r4
 80041a2:	af04      	add	r7, sp, #16
 80041a4:	466b      	mov	r3, sp
 80041a6:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 80041a8:	23a4      	movs	r3, #164	@ 0xa4
 80041aa:	009a      	lsls	r2, r3, #2
 80041ac:	261c      	movs	r6, #28
 80041ae:	19bb      	adds	r3, r7, r6
 80041b0:	2100      	movs	r1, #0
 80041b2:	0018      	movs	r0, r3
 80041b4:	f00d fb62 	bl	801187c <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 80041b8:	4a46      	ldr	r2, [pc, #280]	@ (80042d4 <SENDDATA+0x13c>)
 80041ba:	4947      	ldr	r1, [pc, #284]	@ (80042d8 <SENDDATA+0x140>)
 80041bc:	4847      	ldr	r0, [pc, #284]	@ (80042dc <SENDDATA+0x144>)
 80041be:	19be      	adds	r6, r7, r6
 80041c0:	4b47      	ldr	r3, [pc, #284]	@ (80042e0 <SENDDATA+0x148>)
 80041c2:	9302      	str	r3, [sp, #8]
 80041c4:	4b47      	ldr	r3, [pc, #284]	@ (80042e4 <SENDDATA+0x14c>)
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	4b47      	ldr	r3, [pc, #284]	@ (80042e8 <SENDDATA+0x150>)
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	0013      	movs	r3, r2
 80041ce:	000a      	movs	r2, r1
 80041d0:	0001      	movs	r1, r0
 80041d2:	0030      	movs	r0, r6
 80041d4:	f00d faae 	bl	8011734 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 80041d8:	231c      	movs	r3, #28
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	0018      	movs	r0, r3
 80041de:	f7fb ffbb 	bl	8000158 <strlen>
 80041e2:	0002      	movs	r2, r0
 80041e4:	4e41      	ldr	r6, [pc, #260]	@ (80042ec <SENDDATA+0x154>)
 80041e6:	2018      	movs	r0, #24
 80041e8:	1831      	adds	r1, r6, r0
 80041ea:	19cb      	adds	r3, r1, r7
 80041ec:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 80041ee:	1832      	adds	r2, r6, r0
 80041f0:	19d3      	adds	r3, r2, r7
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	1e5a      	subs	r2, r3, #1
 80041f8:	21a6      	movs	r1, #166	@ 0xa6
 80041fa:	0089      	lsls	r1, r1, #2
 80041fc:	1809      	adds	r1, r1, r0
 80041fe:	19c9      	adds	r1, r1, r7
 8004200:	600a      	str	r2, [r1, #0]
 8004202:	001a      	movs	r2, r3
 8004204:	60ba      	str	r2, [r7, #8]
 8004206:	2200      	movs	r2, #0
 8004208:	60fa      	str	r2, [r7, #12]
 800420a:	68b8      	ldr	r0, [r7, #8]
 800420c:	68f9      	ldr	r1, [r7, #12]
 800420e:	0002      	movs	r2, r0
 8004210:	0f52      	lsrs	r2, r2, #29
 8004212:	000e      	movs	r6, r1
 8004214:	00f6      	lsls	r6, r6, #3
 8004216:	617e      	str	r6, [r7, #20]
 8004218:	697e      	ldr	r6, [r7, #20]
 800421a:	4316      	orrs	r6, r2
 800421c:	617e      	str	r6, [r7, #20]
 800421e:	0002      	movs	r2, r0
 8004220:	00d2      	lsls	r2, r2, #3
 8004222:	613a      	str	r2, [r7, #16]
 8004224:	001a      	movs	r2, r3
 8004226:	603a      	str	r2, [r7, #0]
 8004228:	2200      	movs	r2, #0
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	6838      	ldr	r0, [r7, #0]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	0002      	movs	r2, r0
 8004232:	0f52      	lsrs	r2, r2, #29
 8004234:	000e      	movs	r6, r1
 8004236:	00f5      	lsls	r5, r6, #3
 8004238:	4315      	orrs	r5, r2
 800423a:	0002      	movs	r2, r0
 800423c:	00d4      	lsls	r4, r2, #3
 800423e:	3307      	adds	r3, #7
 8004240:	08db      	lsrs	r3, r3, #3
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	466a      	mov	r2, sp
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	469d      	mov	sp, r3
 800424a:	ab04      	add	r3, sp, #16
 800424c:	3300      	adds	r3, #0
 800424e:	21a5      	movs	r1, #165	@ 0xa5
 8004250:	0089      	lsls	r1, r1, #2
 8004252:	2018      	movs	r0, #24
 8004254:	180a      	adds	r2, r1, r0
 8004256:	19d2      	adds	r2, r2, r7
 8004258:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 800425a:	4e24      	ldr	r6, [pc, #144]	@ (80042ec <SENDDATA+0x154>)
 800425c:	1832      	adds	r2, r6, r0
 800425e:	19d3      	adds	r3, r2, r7
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	001a      	movs	r2, r3
 8004266:	000c      	movs	r4, r1
 8004268:	0005      	movs	r5, r0
 800426a:	1821      	adds	r1, r4, r0
 800426c:	19cb      	adds	r3, r1, r7
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2100      	movs	r1, #0
 8004272:	0018      	movs	r0, r3
 8004274:	f00d fb02 	bl	801187c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004278:	0028      	movs	r0, r5
 800427a:	1832      	adds	r2, r6, r0
 800427c:	19d3      	adds	r3, r2, r7
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	231c      	movs	r3, #28
 8004282:	18f9      	adds	r1, r7, r3
 8004284:	0005      	movs	r5, r0
 8004286:	1963      	adds	r3, r4, r5
 8004288:	19db      	adds	r3, r3, r7
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0018      	movs	r0, r3
 800428e:	f00d fafd 	bl	801188c <strncpy>
  SetCommandBuffer(atCommand);
 8004292:	1963      	adds	r3, r4, r5
 8004294:	19db      	adds	r3, r3, r7
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0018      	movs	r0, r3
 800429a:	f7ff fb97 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800429e:	0028      	movs	r0, r5
 80042a0:	1833      	adds	r3, r6, r0
 80042a2:	19db      	adds	r3, r3, r7
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	1823      	adds	r3, r4, r0
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	0011      	movs	r1, r2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f7ff fa54 	bl	800375c <ESP_Send>
 80042b4:	1e03      	subs	r3, r0, #0
 80042b6:	d001      	beq.n	80042bc <SENDDATA+0x124>
    return true;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <SENDDATA+0x126>
  }
  else{
    return false;
 80042bc:	2300      	movs	r3, #0
 80042be:	46c5      	mov	sp, r8
  }
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	23ae      	movs	r3, #174	@ 0xae
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	449d      	add	sp, r3
 80042ca:	bc80      	pop	{r7}
 80042cc:	46b8      	mov	r8, r7
 80042ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d0:	fffffd38 	.word	0xfffffd38
 80042d4:	200004e0 	.word	0x200004e0
 80042d8:	20000460 	.word	0x20000460
 80042dc:	08014724 	.word	0x08014724
 80042e0:	20000660 	.word	0x20000660
 80042e4:	200005e0 	.word	0x200005e0
 80042e8:	20000560 	.word	0x20000560
 80042ec:	0000029e 	.word	0x0000029e

080042f0 <SLEEP>:
bool SLEEP(){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <SLEEP+0x3c>)
 80042f8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7ff fb65 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	0018      	movs	r0, r3
 8004306:	f7fb ff27 	bl	8000158 <strlen>
 800430a:	0003      	movs	r3, r0
 800430c:	b29a      	uxth	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0011      	movs	r1, r2
 8004312:	0018      	movs	r0, r3
 8004314:	f7ff fa22 	bl	800375c <ESP_Send>
 8004318:	1e03      	subs	r3, r0, #0
 800431a:	d001      	beq.n	8004320 <SLEEP+0x30>
    return true;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <SLEEP+0x32>
  }
  else{
    return false;
 8004320:	2300      	movs	r3, #0
  }
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b002      	add	sp, #8
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	08014744 	.word	0x08014744

08004330 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 8004330:	b5b0      	push	{r4, r5, r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	0002      	movs	r2, r0
 8004338:	1dfb      	adds	r3, r7, #7
 800433a:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 800433c:	4b4a      	ldr	r3, [pc, #296]	@ (8004468 <DMA_ProcessBuffer+0x138>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	b2da      	uxtb	r2, r3
 8004344:	210e      	movs	r1, #14
 8004346:	187b      	adds	r3, r7, r1
 8004348:	43d2      	mvns	r2, r2
 800434a:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 800434c:	200f      	movs	r0, #15
 800434e:	183b      	adds	r3, r7, r0
 8004350:	2203      	movs	r2, #3
 8004352:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 8004354:	4b45      	ldr	r3, [pc, #276]	@ (800446c <DMA_ProcessBuffer+0x13c>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	187a      	adds	r2, r7, r1
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d124      	bne.n	80043ac <DMA_ProcessBuffer+0x7c>
      if(retry >4){
 8004362:	4b43      	ldr	r3, [pc, #268]	@ (8004470 <DMA_ProcessBuffer+0x140>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b04      	cmp	r3, #4
 8004368:	d90e      	bls.n	8004388 <DMA_ProcessBuffer+0x58>
        retry = 0;
 800436a:	4b41      	ldr	r3, [pc, #260]	@ (8004470 <DMA_ProcessBuffer+0x140>)
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommands == AT_WAKEUP){
 8004370:	4b40      	ldr	r3, [pc, #256]	@ (8004474 <DMA_ProcessBuffer+0x144>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <DMA_ProcessBuffer+0x4e>
          status = RECEIVE_STATUS_UNPROGGED;
 8004378:	183b      	adds	r3, r7, r0
 800437a:	2207      	movs	r2, #7
 800437c:	701a      	strb	r2, [r3, #0]
        }

        status = RECEIVE_STATUS_TIMEOUT;
 800437e:	230f      	movs	r3, #15
 8004380:	18fb      	adds	r3, r7, r3
 8004382:	2206      	movs	r2, #6
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e011      	b.n	80043ac <DMA_ProcessBuffer+0x7c>
      }
     else{
       retry ++;
 8004388:	4b39      	ldr	r3, [pc, #228]	@ (8004470 <DMA_ProcessBuffer+0x140>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	b2da      	uxtb	r2, r3
 8004390:	4b37      	ldr	r3, [pc, #220]	@ (8004470 <DMA_ProcessBuffer+0x140>)
 8004392:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004394:	f004 fb96 	bl	8008ac4 <HAL_GetTick>
 8004398:	0003      	movs	r3, r0
 800439a:	33f5      	adds	r3, #245	@ 0xf5
 800439c:	33ff      	adds	r3, #255	@ 0xff
 800439e:	001a      	movs	r2, r3
 80043a0:	4b35      	ldr	r3, [pc, #212]	@ (8004478 <DMA_ProcessBuffer+0x148>)
 80043a2:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80043a4:	230f      	movs	r3, #15
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	2204      	movs	r2, #4
 80043aa:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80043ac:	4b2f      	ldr	r3, [pc, #188]	@ (800446c <DMA_ProcessBuffer+0x13c>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	210e      	movs	r1, #14
 80043b4:	187a      	adds	r2, r7, r1
 80043b6:	7812      	ldrb	r2, [r2, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d048      	beq.n	800444e <DMA_ProcessBuffer+0x11e>
      retry = 0;
 80043bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004470 <DMA_ProcessBuffer+0x140>)
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 80043c2:	4b2a      	ldr	r3, [pc, #168]	@ (800446c <DMA_ProcessBuffer+0x13c>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d917      	bls.n	8004400 <DMA_ProcessBuffer+0xd0>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 80043d0:	4b26      	ldr	r3, [pc, #152]	@ (800446c <DMA_ProcessBuffer+0x13c>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	001a      	movs	r2, r3
 80043d8:	4b28      	ldr	r3, [pc, #160]	@ (800447c <DMA_ProcessBuffer+0x14c>)
 80043da:	18d0      	adds	r0, r2, r3
 80043dc:	187b      	adds	r3, r7, r1
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	4a22      	ldr	r2, [pc, #136]	@ (800446c <DMA_ProcessBuffer+0x13c>)
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	b299      	uxth	r1, r3
 80043ec:	230f      	movs	r3, #15
 80043ee:	18fc      	adds	r4, r7, r3
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	001a      	movs	r2, r3
 80043f6:	f7ff fb39 	bl	8003a6c <ParseBuffer>
 80043fa:	0003      	movs	r3, r0
 80043fc:	7023      	strb	r3, [r4, #0]
 80043fe:	e026      	b.n	800444e <DMA_ProcessBuffer+0x11e>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004400:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <DMA_ProcessBuffer+0x13c>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	001a      	movs	r2, r3
 8004408:	4b1c      	ldr	r3, [pc, #112]	@ (800447c <DMA_ProcessBuffer+0x14c>)
 800440a:	18d0      	adds	r0, r2, r3
 800440c:	4b17      	ldr	r3, [pc, #92]	@ (800446c <DMA_ProcessBuffer+0x13c>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	001a      	movs	r2, r3
 8004414:	23ff      	movs	r3, #255	@ 0xff
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	b299      	uxth	r1, r3
 800441a:	250f      	movs	r5, #15
 800441c:	197c      	adds	r4, r7, r5
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	001a      	movs	r2, r3
 8004424:	f7ff fb22 	bl	8003a6c <ParseBuffer>
 8004428:	0003      	movs	r3, r0
 800442a:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 800442c:	220e      	movs	r2, #14
 800442e:	18bb      	adds	r3, r7, r2
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <DMA_ProcessBuffer+0x11e>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004436:	18bb      	adds	r3, r7, r2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	b299      	uxth	r1, r3
 800443c:	197c      	adds	r4, r7, r5
 800443e:	1dfb      	adds	r3, r7, #7
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	4b0e      	ldr	r3, [pc, #56]	@ (800447c <DMA_ProcessBuffer+0x14c>)
 8004444:	0018      	movs	r0, r3
 8004446:	f7ff fb11 	bl	8003a6c <ParseBuffer>
 800444a:	0003      	movs	r3, r0
 800444c:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 800444e:	4b07      	ldr	r3, [pc, #28]	@ (800446c <DMA_ProcessBuffer+0x13c>)
 8004450:	220e      	movs	r2, #14
 8004452:	18ba      	adds	r2, r7, r2
 8004454:	7812      	ldrb	r2, [r2, #0]
 8004456:	701a      	strb	r2, [r3, #0]
    return status;
 8004458:	230f      	movs	r3, #15
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	781b      	ldrb	r3, [r3, #0]
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b004      	add	sp, #16
 8004464:	bdb0      	pop	{r4, r5, r7, pc}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	20002a6c 	.word	0x20002a6c
 800446c:	200006e0 	.word	0x200006e0
 8004470:	200006e8 	.word	0x200006e8
 8004474:	200008ed 	.word	0x200008ed
 8004478:	200006e4 	.word	0x200006e4
 800447c:	2000034c 	.word	0x2000034c

08004480 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	0002      	movs	r2, r0
 8004488:	1dfb      	adds	r3, r7, #7
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	1dbb      	adds	r3, r7, #6
 800448e:	1c0a      	adds	r2, r1, #0
 8004490:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004492:	210f      	movs	r1, #15
 8004494:	187b      	adds	r3, r7, r1
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800449a:	1dbb      	adds	r3, r7, #6
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	1dfa      	adds	r2, r7, #7
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	4251      	negs	r1, r2
 80044aa:	414a      	adcs	r2, r1
 80044ac:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 80044ae:	1dbb      	adds	r3, r7, #6
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d107      	bne.n	80044c6 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 80044b6:	230f      	movs	r3, #15
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	1dfa      	adds	r2, r7, #7
 80044bc:	7812      	ldrb	r2, [r2, #0]
 80044be:	3a02      	subs	r2, #2
 80044c0:	4251      	negs	r1, r2
 80044c2:	414a      	adcs	r2, r1
 80044c4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80044c6:	1dbb      	adds	r3, r7, #6
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d107      	bne.n	80044de <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80044ce:	230f      	movs	r3, #15
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	1dfa      	adds	r2, r7, #7
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	3a05      	subs	r2, #5
 80044d8:	4251      	negs	r1, r2
 80044da:	414a      	adcs	r2, r1
 80044dc:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80044de:	230f      	movs	r3, #15
 80044e0:	18fb      	adds	r3, r7, r3
 80044e2:	781b      	ldrb	r3, [r3, #0]
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b004      	add	sp, #16
 80044ea:	bd80      	pop	{r7, pc}

080044ec <AT_Send>:

bool AT_Send(AT_Commands state){
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	0002      	movs	r2, r0
 80044f4:	1dfb      	adds	r3, r7, #7
 80044f6:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80044f8:	230f      	movs	r3, #15
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004500:	1dfb      	adds	r3, r7, #7
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b0e      	cmp	r3, #14
 8004506:	d900      	bls.n	800450a <AT_Send+0x1e>
 8004508:	e136      	b.n	8004778 <AT_Send+0x28c>
 800450a:	009a      	lsls	r2, r3, #2
 800450c:	4b9e      	ldr	r3, [pc, #632]	@ (8004788 <AT_Send+0x29c>)
 800450e:	18d3      	adds	r3, r2, r3
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004514:	4b9d      	ldr	r3, [pc, #628]	@ (800478c <AT_Send+0x2a0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0018      	movs	r0, r3
 800451a:	f003 fe85 	bl	8008228 <TimestampIsReached>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d100      	bne.n	8004524 <AT_Send+0x38>
 8004522:	e128      	b.n	8004776 <AT_Send+0x28a>
    ATCommandSend = PollAwake();
 8004524:	230f      	movs	r3, #15
 8004526:	18fc      	adds	r4, r7, r3
 8004528:	f7ff fbbc 	bl	8003ca4 <PollAwake>
 800452c:	0003      	movs	r3, r0
 800452e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004530:	f004 fac8 	bl	8008ac4 <HAL_GetTick>
 8004534:	0003      	movs	r3, r0
 8004536:	330a      	adds	r3, #10
 8004538:	001a      	movs	r2, r3
 800453a:	4b94      	ldr	r3, [pc, #592]	@ (800478c <AT_Send+0x2a0>)
 800453c:	601a      	str	r2, [r3, #0]
  }
  break;
 800453e:	e11a      	b.n	8004776 <AT_Send+0x28a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004540:	4a93      	ldr	r2, [pc, #588]	@ (8004790 <AT_Send+0x2a4>)
 8004542:	4b94      	ldr	r3, [pc, #592]	@ (8004794 <AT_Send+0x2a8>)
 8004544:	0019      	movs	r1, r3
 8004546:	2003      	movs	r0, #3
 8004548:	f003 fec4 	bl	80082d4 <CreateLine>
    ATCommandSend = RFPower();
 800454c:	230f      	movs	r3, #15
 800454e:	18fc      	adds	r4, r7, r3
 8004550:	f7ff fbc8 	bl	8003ce4 <RFPower>
 8004554:	0003      	movs	r3, r0
 8004556:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004558:	f004 fab4 	bl	8008ac4 <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	330a      	adds	r3, #10
 8004560:	001a      	movs	r2, r3
 8004562:	4b8a      	ldr	r3, [pc, #552]	@ (800478c <AT_Send+0x2a0>)
 8004564:	601a      	str	r2, [r3, #0]
    break;
 8004566:	e107      	b.n	8004778 <AT_Send+0x28c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004568:	4a8b      	ldr	r2, [pc, #556]	@ (8004798 <AT_Send+0x2ac>)
 800456a:	4b8a      	ldr	r3, [pc, #552]	@ (8004794 <AT_Send+0x2a8>)
 800456c:	0019      	movs	r1, r3
 800456e:	2003      	movs	r0, #3
 8004570:	f003 feb0 	bl	80082d4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004574:	230f      	movs	r3, #15
 8004576:	18fc      	adds	r4, r7, r3
 8004578:	f7ff fbd4 	bl	8003d24 <CheckRFPower>
 800457c:	0003      	movs	r3, r0
 800457e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004580:	f004 faa0 	bl	8008ac4 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	330a      	adds	r3, #10
 8004588:	001a      	movs	r2, r3
 800458a:	4b80      	ldr	r3, [pc, #512]	@ (800478c <AT_Send+0x2a0>)
 800458c:	601a      	str	r2, [r3, #0]
    break;
 800458e:	e0f3      	b.n	8004778 <AT_Send+0x28c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004590:	4a82      	ldr	r2, [pc, #520]	@ (800479c <AT_Send+0x2b0>)
 8004592:	4b80      	ldr	r3, [pc, #512]	@ (8004794 <AT_Send+0x2a8>)
 8004594:	0019      	movs	r1, r3
 8004596:	2003      	movs	r0, #3
 8004598:	f003 fe9c 	bl	80082d4 <CreateLine>
    ATCommandSend = ATRestore();
 800459c:	230f      	movs	r3, #15
 800459e:	18fc      	adds	r4, r7, r3
 80045a0:	f7ff fbe0 	bl	8003d64 <ATRestore>
 80045a4:	0003      	movs	r3, r0
 80045a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80045a8:	f004 fa8c 	bl	8008ac4 <HAL_GetTick>
 80045ac:	0003      	movs	r3, r0
 80045ae:	3332      	adds	r3, #50	@ 0x32
 80045b0:	001a      	movs	r2, r3
 80045b2:	4b76      	ldr	r3, [pc, #472]	@ (800478c <AT_Send+0x2a0>)
 80045b4:	601a      	str	r2, [r3, #0]
    break;
 80045b6:	e0df      	b.n	8004778 <AT_Send+0x28c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80045b8:	4a79      	ldr	r2, [pc, #484]	@ (80047a0 <AT_Send+0x2b4>)
 80045ba:	4b76      	ldr	r3, [pc, #472]	@ (8004794 <AT_Send+0x2a8>)
 80045bc:	0019      	movs	r1, r3
 80045be:	2003      	movs	r0, #3
 80045c0:	f003 fe88 	bl	80082d4 <CreateLine>
    ATCommandSend = CWINIT();
 80045c4:	230f      	movs	r3, #15
 80045c6:	18fc      	adds	r4, r7, r3
 80045c8:	f7ff fbec 	bl	8003da4 <CWINIT>
 80045cc:	0003      	movs	r3, r0
 80045ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80045d0:	f004 fa78 	bl	8008ac4 <HAL_GetTick>
 80045d4:	0003      	movs	r3, r0
 80045d6:	33f5      	adds	r3, #245	@ 0xf5
 80045d8:	33ff      	adds	r3, #255	@ 0xff
 80045da:	001a      	movs	r2, r3
 80045dc:	4b6b      	ldr	r3, [pc, #428]	@ (800478c <AT_Send+0x2a0>)
 80045de:	601a      	str	r2, [r3, #0]
    break;
 80045e0:	e0ca      	b.n	8004778 <AT_Send+0x28c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80045e2:	4a70      	ldr	r2, [pc, #448]	@ (80047a4 <AT_Send+0x2b8>)
 80045e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004794 <AT_Send+0x2a8>)
 80045e6:	0019      	movs	r1, r3
 80045e8:	2003      	movs	r0, #3
 80045ea:	f003 fe73 	bl	80082d4 <CreateLine>
    ATCommandSend = CWMODE1();
 80045ee:	230f      	movs	r3, #15
 80045f0:	18fc      	adds	r4, r7, r3
 80045f2:	f7ff fbf7 	bl	8003de4 <CWMODE1>
 80045f6:	0003      	movs	r3, r0
 80045f8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045fa:	f004 fa63 	bl	8008ac4 <HAL_GetTick>
 80045fe:	0003      	movs	r3, r0
 8004600:	330a      	adds	r3, #10
 8004602:	001a      	movs	r2, r3
 8004604:	4b61      	ldr	r3, [pc, #388]	@ (800478c <AT_Send+0x2a0>)
 8004606:	601a      	str	r2, [r3, #0]
    break;
 8004608:	e0b6      	b.n	8004778 <AT_Send+0x28c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 800460a:	4a67      	ldr	r2, [pc, #412]	@ (80047a8 <AT_Send+0x2bc>)
 800460c:	4b61      	ldr	r3, [pc, #388]	@ (8004794 <AT_Send+0x2a8>)
 800460e:	0019      	movs	r1, r3
 8004610:	2003      	movs	r0, #3
 8004612:	f003 fe5f 	bl	80082d4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004616:	230f      	movs	r3, #15
 8004618:	18fc      	adds	r4, r7, r3
 800461a:	f7ff fc03 	bl	8003e24 <CWAUTOCONN>
 800461e:	0003      	movs	r3, r0
 8004620:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004622:	f004 fa4f 	bl	8008ac4 <HAL_GetTick>
 8004626:	0003      	movs	r3, r0
 8004628:	330a      	adds	r3, #10
 800462a:	001a      	movs	r2, r3
 800462c:	4b57      	ldr	r3, [pc, #348]	@ (800478c <AT_Send+0x2a0>)
 800462e:	601a      	str	r2, [r3, #0]
    break;
 8004630:	e0a2      	b.n	8004778 <AT_Send+0x28c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004632:	4a5e      	ldr	r2, [pc, #376]	@ (80047ac <AT_Send+0x2c0>)
 8004634:	4b57      	ldr	r3, [pc, #348]	@ (8004794 <AT_Send+0x2a8>)
 8004636:	0019      	movs	r1, r3
 8004638:	2003      	movs	r0, #3
 800463a:	f003 fe4b 	bl	80082d4 <CreateLine>
    ATCommandSend = CWJAP();
 800463e:	230f      	movs	r3, #15
 8004640:	18fc      	adds	r4, r7, r3
 8004642:	f7ff fc0f 	bl	8003e64 <CWJAP>
 8004646:	0003      	movs	r3, r0
 8004648:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800464a:	f004 fa3b 	bl	8008ac4 <HAL_GetTick>
 800464e:	0003      	movs	r3, r0
 8004650:	3332      	adds	r3, #50	@ 0x32
 8004652:	001a      	movs	r2, r3
 8004654:	4b4d      	ldr	r3, [pc, #308]	@ (800478c <AT_Send+0x2a0>)
 8004656:	601a      	str	r2, [r3, #0]
    break;
 8004658:	e08e      	b.n	8004778 <AT_Send+0x28c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800465a:	4a55      	ldr	r2, [pc, #340]	@ (80047b0 <AT_Send+0x2c4>)
 800465c:	4b4d      	ldr	r3, [pc, #308]	@ (8004794 <AT_Send+0x2a8>)
 800465e:	0019      	movs	r1, r3
 8004660:	2003      	movs	r0, #3
 8004662:	f003 fe37 	bl	80082d4 <CreateLine>
    ATCommandSend = CWMODE3();
 8004666:	230f      	movs	r3, #15
 8004668:	18fc      	adds	r4, r7, r3
 800466a:	f7ff fc79 	bl	8003f60 <CWMODE3>
 800466e:	0003      	movs	r3, r0
 8004670:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004672:	f004 fa27 	bl	8008ac4 <HAL_GetTick>
 8004676:	0003      	movs	r3, r0
 8004678:	330a      	adds	r3, #10
 800467a:	001a      	movs	r2, r3
 800467c:	4b43      	ldr	r3, [pc, #268]	@ (800478c <AT_Send+0x2a0>)
 800467e:	601a      	str	r2, [r3, #0]
    break;
 8004680:	e07a      	b.n	8004778 <AT_Send+0x28c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004682:	4a4c      	ldr	r2, [pc, #304]	@ (80047b4 <AT_Send+0x2c8>)
 8004684:	4b43      	ldr	r3, [pc, #268]	@ (8004794 <AT_Send+0x2a8>)
 8004686:	0019      	movs	r1, r3
 8004688:	2003      	movs	r0, #3
 800468a:	f003 fe23 	bl	80082d4 <CreateLine>
    ATCommandSend = CWSAP();
 800468e:	230f      	movs	r3, #15
 8004690:	18fc      	adds	r4, r7, r3
 8004692:	f7ff fc85 	bl	8003fa0 <CWSAP>
 8004696:	0003      	movs	r3, r0
 8004698:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800469a:	f004 fa13 	bl	8008ac4 <HAL_GetTick>
 800469e:	0003      	movs	r3, r0
 80046a0:	330a      	adds	r3, #10
 80046a2:	001a      	movs	r2, r3
 80046a4:	4b39      	ldr	r3, [pc, #228]	@ (800478c <AT_Send+0x2a0>)
 80046a6:	601a      	str	r2, [r3, #0]
    break;
 80046a8:	e066      	b.n	8004778 <AT_Send+0x28c>

  case AT_CIPMUX:
    Debug("SET in station/soft-ap mode");
 80046aa:	4a41      	ldr	r2, [pc, #260]	@ (80047b0 <AT_Send+0x2c4>)
 80046ac:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <AT_Send+0x2a8>)
 80046ae:	0019      	movs	r1, r3
 80046b0:	2003      	movs	r0, #3
 80046b2:	f003 fe0f 	bl	80082d4 <CreateLine>
    ATCommandSend = CIPMUX();
 80046b6:	230f      	movs	r3, #15
 80046b8:	18fc      	adds	r4, r7, r3
 80046ba:	f7ff fc91 	bl	8003fe0 <CIPMUX>
 80046be:	0003      	movs	r3, r0
 80046c0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046c2:	f004 f9ff 	bl	8008ac4 <HAL_GetTick>
 80046c6:	0003      	movs	r3, r0
 80046c8:	330a      	adds	r3, #10
 80046ca:	001a      	movs	r2, r3
 80046cc:	4b2f      	ldr	r3, [pc, #188]	@ (800478c <AT_Send+0x2a0>)
 80046ce:	601a      	str	r2, [r3, #0]
    break;
 80046d0:	e052      	b.n	8004778 <AT_Send+0x28c>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 80046d2:	4a37      	ldr	r2, [pc, #220]	@ (80047b0 <AT_Send+0x2c4>)
 80046d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004794 <AT_Send+0x2a8>)
 80046d6:	0019      	movs	r1, r3
 80046d8:	2003      	movs	r0, #3
 80046da:	f003 fdfb 	bl	80082d4 <CreateLine>
    ATCommandSend = WEBSERVER();
 80046de:	230f      	movs	r3, #15
 80046e0:	18fc      	adds	r4, r7, r3
 80046e2:	f7ff fc9d 	bl	8004020 <WEBSERVER>
 80046e6:	0003      	movs	r3, r0
 80046e8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046ea:	f004 f9eb 	bl	8008ac4 <HAL_GetTick>
 80046ee:	0003      	movs	r3, r0
 80046f0:	330a      	adds	r3, #10
 80046f2:	001a      	movs	r2, r3
 80046f4:	4b25      	ldr	r3, [pc, #148]	@ (800478c <AT_Send+0x2a0>)
 80046f6:	601a      	str	r2, [r3, #0]
    break;
 80046f8:	e03e      	b.n	8004778 <AT_Send+0x28c>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80046fa:	4a2d      	ldr	r2, [pc, #180]	@ (80047b0 <AT_Send+0x2c4>)
 80046fc:	4b25      	ldr	r3, [pc, #148]	@ (8004794 <AT_Send+0x2a8>)
 80046fe:	0019      	movs	r1, r3
 8004700:	2003      	movs	r0, #3
 8004702:	f003 fde7 	bl	80082d4 <CreateLine>
    ATCommandSend = HTTPCPOST();
 8004706:	230f      	movs	r3, #15
 8004708:	18fc      	adds	r4, r7, r3
 800470a:	f7ff fca9 	bl	8004060 <HTTPCPOST>
 800470e:	0003      	movs	r3, r0
 8004710:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004712:	f004 f9d7 	bl	8008ac4 <HAL_GetTick>
 8004716:	0003      	movs	r3, r0
 8004718:	33f5      	adds	r3, #245	@ 0xf5
 800471a:	33ff      	adds	r3, #255	@ 0xff
 800471c:	001a      	movs	r2, r3
 800471e:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <AT_Send+0x2a0>)
 8004720:	601a      	str	r2, [r3, #0]
    break;
 8004722:	e029      	b.n	8004778 <AT_Send+0x28c>

  case AT_SENDDATA:
    Debug("Send the data");
 8004724:	4a24      	ldr	r2, [pc, #144]	@ (80047b8 <AT_Send+0x2cc>)
 8004726:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <AT_Send+0x2a8>)
 8004728:	0019      	movs	r1, r3
 800472a:	2003      	movs	r0, #3
 800472c:	f003 fdd2 	bl	80082d4 <CreateLine>
    ATCommandSend = SENDDATA();
 8004730:	230f      	movs	r3, #15
 8004732:	18fc      	adds	r4, r7, r3
 8004734:	f7ff fd30 	bl	8004198 <SENDDATA>
 8004738:	0003      	movs	r3, r0
 800473a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800473c:	f004 f9c2 	bl	8008ac4 <HAL_GetTick>
 8004740:	0003      	movs	r3, r0
 8004742:	33f5      	adds	r3, #245	@ 0xf5
 8004744:	33ff      	adds	r3, #255	@ 0xff
 8004746:	001a      	movs	r2, r3
 8004748:	4b10      	ldr	r3, [pc, #64]	@ (800478c <AT_Send+0x2a0>)
 800474a:	601a      	str	r2, [r3, #0]
    break;
 800474c:	e014      	b.n	8004778 <AT_Send+0x28c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800474e:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <AT_Send+0x2d0>)
 8004750:	4b10      	ldr	r3, [pc, #64]	@ (8004794 <AT_Send+0x2a8>)
 8004752:	0019      	movs	r1, r3
 8004754:	2003      	movs	r0, #3
 8004756:	f003 fdbd 	bl	80082d4 <CreateLine>
    ATCommandSend = SLEEP();
 800475a:	230f      	movs	r3, #15
 800475c:	18fc      	adds	r4, r7, r3
 800475e:	f7ff fdc7 	bl	80042f0 <SLEEP>
 8004762:	0003      	movs	r3, r0
 8004764:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004766:	f004 f9ad 	bl	8008ac4 <HAL_GetTick>
 800476a:	0003      	movs	r3, r0
 800476c:	330a      	adds	r3, #10
 800476e:	001a      	movs	r2, r3
 8004770:	4b06      	ldr	r3, [pc, #24]	@ (800478c <AT_Send+0x2a0>)
 8004772:	601a      	str	r2, [r3, #0]
    break;
 8004774:	e000      	b.n	8004778 <AT_Send+0x28c>
  break;
 8004776:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004778:	230f      	movs	r3, #15
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	781b      	ldrb	r3, [r3, #0]
}
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b005      	add	sp, #20
 8004784:	bd90      	pop	{r4, r7, pc}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	08014e3c 	.word	0x08014e3c
 800478c:	200006e4 	.word	0x200006e4
 8004790:	08014754 	.word	0x08014754
 8004794:	08014470 	.word	0x08014470
 8004798:	08014768 	.word	0x08014768
 800479c:	0801477c 	.word	0x0801477c
 80047a0:	0801478c 	.word	0x0801478c
 80047a4:	080147a0 	.word	0x080147a0
 80047a8:	080147b8 	.word	0x080147b8
 80047ac:	080147d0 	.word	0x080147d0
 80047b0:	080147e4 	.word	0x080147e4
 80047b4:	08014800 	.word	0x08014800
 80047b8:	0801481c 	.word	0x0801481c
 80047bc:	0801482c 	.word	0x0801482c

080047c0 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80047c6:	1dfb      	adds	r3, r7, #7
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
  uint8_t ATReceived = RECEIVE_STATUS_INCOMPLETE;
 80047cc:	1dbb      	adds	r3, r7, #6
 80047ce:	2203      	movs	r2, #3
 80047d0:	701a      	strb	r2, [r3, #0]
  switch (EspState) {
 80047d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004a00 <ESP_Upkeep+0x240>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b0a      	cmp	r3, #10
 80047d8:	d900      	bls.n	80047dc <ESP_Upkeep+0x1c>
 80047da:	e100      	b.n	80049de <ESP_Upkeep+0x21e>
 80047dc:	009a      	lsls	r2, r3, #2
 80047de:	4b89      	ldr	r3, [pc, #548]	@ (8004a04 <ESP_Upkeep+0x244>)
 80047e0:	18d3      	adds	r3, r2, r3
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80047e6:	4b86      	ldr	r3, [pc, #536]	@ (8004a00 <ESP_Upkeep+0x240>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
      break;
 80047ec:	e104      	b.n	80049f8 <ESP_Upkeep+0x238>
//      ATCommands[offset++] = (ATCommands) {};
      // TODO: Add turning on the ESP32 and wait for ready after, so we know for sure that the ESP is on.
      // Initialization state
//      StartUpTime = GetCurrentHalTicks() + ESP_START_UP_TIME;
//      StartUpDone = false;
      if(!EspTurnedOn) {
 80047ee:	4b86      	ldr	r3, [pc, #536]	@ (8004a08 <ESP_Upkeep+0x248>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2201      	movs	r2, #1
 80047f4:	4053      	eors	r3, r2
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01e      	beq.n	800483a <ESP_Upkeep+0x7a>

        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80047fc:	2380      	movs	r3, #128	@ 0x80
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	4882      	ldr	r0, [pc, #520]	@ (8004a0c <ESP_Upkeep+0x24c>)
 8004802:	2200      	movs	r2, #0
 8004804:	0019      	movs	r1, r3
 8004806:	f005 faf3 	bl	8009df0 <HAL_GPIO_WritePin>
//        // Turn ESP on.
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800480a:	2380      	movs	r3, #128	@ 0x80
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	487f      	ldr	r0, [pc, #508]	@ (8004a0c <ESP_Upkeep+0x24c>)
 8004810:	2201      	movs	r2, #1
 8004812:	0019      	movs	r1, r3
 8004814:	f005 faec 	bl	8009df0 <HAL_GPIO_WritePin>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004818:	4b7d      	ldr	r3, [pc, #500]	@ (8004a10 <ESP_Upkeep+0x250>)
 800481a:	2201      	movs	r2, #1
 800481c:	2101      	movs	r1, #1
 800481e:	0018      	movs	r0, r3
 8004820:	f005 fae6 	bl	8009df0 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004824:	f004 f94e 	bl	8008ac4 <HAL_GetTick>
 8004828:	0003      	movs	r3, r0
 800482a:	22af      	movs	r2, #175	@ 0xaf
 800482c:	0092      	lsls	r2, r2, #2
 800482e:	189a      	adds	r2, r3, r2
 8004830:	4b78      	ldr	r3, [pc, #480]	@ (8004a14 <ESP_Upkeep+0x254>)
 8004832:	601a      	str	r2, [r3, #0]

        EspTurnedOn = true;
 8004834:	4b74      	ldr	r3, [pc, #464]	@ (8004a08 <ESP_Upkeep+0x248>)
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800483a:	4b77      	ldr	r3, [pc, #476]	@ (8004a18 <ESP_Upkeep+0x258>)
 800483c:	21ff      	movs	r1, #255	@ 0xff
 800483e:	0018      	movs	r0, r3
 8004840:	f7fe ffb6 	bl	80037b0 <ESP_Receive>
 8004844:	1e03      	subs	r3, r0, #0
 8004846:	d100      	bne.n	800484a <ESP_Upkeep+0x8a>
 8004848:	e0cf      	b.n	80049ea <ESP_Upkeep+0x22a>
        EspState = ESP_STATE_SEND;
 800484a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a00 <ESP_Upkeep+0x240>)
 800484c:	2204      	movs	r2, #4
 800484e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004850:	e0cb      	b.n	80049ea <ESP_Upkeep+0x22a>

    case ESP_STATE_SEND:
        ATSend = AT_Send(nextATCommand);
 8004852:	4b72      	ldr	r3, [pc, #456]	@ (8004a1c <ESP_Upkeep+0x25c>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	1dfc      	adds	r4, r7, #7
 8004858:	0018      	movs	r0, r3
 800485a:	f7ff fe47 	bl	80044ec <AT_Send>
 800485e:	0003      	movs	r3, r0
 8004860:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004862:	1dfb      	adds	r3, r7, #7
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d100      	bne.n	800486c <ESP_Upkeep+0xac>
 800486a:	e0c0      	b.n	80049ee <ESP_Upkeep+0x22e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 800486c:	4b64      	ldr	r3, [pc, #400]	@ (8004a00 <ESP_Upkeep+0x240>)
 800486e:	2203      	movs	r2, #3
 8004870:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004872:	e0bc      	b.n	80049ee <ESP_Upkeep+0x22e>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004874:	4b67      	ldr	r3, [pc, #412]	@ (8004a14 <ESP_Upkeep+0x254>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	0018      	movs	r0, r3
 800487a:	f003 fcd5 	bl	8008228 <TimestampIsReached>
 800487e:	1e03      	subs	r3, r0, #0
 8004880:	d100      	bne.n	8004884 <ESP_Upkeep+0xc4>
 8004882:	e0b6      	b.n	80049f2 <ESP_Upkeep+0x232>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004884:	4b66      	ldr	r3, [pc, #408]	@ (8004a20 <ESP_Upkeep+0x260>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	1dbc      	adds	r4, r7, #6
 800488a:	0018      	movs	r0, r3
 800488c:	f7ff fd50 	bl	8004330 <DMA_ProcessBuffer>
 8004890:	0003      	movs	r3, r0
 8004892:	7023      	strb	r3, [r4, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004894:	4b62      	ldr	r3, [pc, #392]	@ (8004a20 <ESP_Upkeep+0x260>)
 8004896:	781a      	ldrb	r2, [r3, #0]
 8004898:	1d7c      	adds	r4, r7, #5
 800489a:	1dbb      	adds	r3, r7, #6
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	0011      	movs	r1, r2
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7ff fded 	bl	8004480 <ATCompare>
 80048a6:	0003      	movs	r3, r0
 80048a8:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80048aa:	1dbb      	adds	r3, r7, #6
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d102      	bne.n	80048b8 <ESP_Upkeep+0xf8>
          EspState = ESP_STATE_SEND;
 80048b2:	4b53      	ldr	r3, [pc, #332]	@ (8004a00 <ESP_Upkeep+0x240>)
 80048b4:	2204      	movs	r2, #4
 80048b6:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d106      	bne.n	80048ce <ESP_Upkeep+0x10e>
          ESPTimeStamp = HAL_GetTick() + 10;
 80048c0:	f004 f900 	bl	8008ac4 <HAL_GetTick>
 80048c4:	0003      	movs	r3, r0
 80048c6:	330a      	adds	r3, #10
 80048c8:	001a      	movs	r2, r3
 80048ca:	4b52      	ldr	r3, [pc, #328]	@ (8004a14 <ESP_Upkeep+0x254>)
 80048cc:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80048ce:	1dbb      	adds	r3, r7, #6
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b07      	cmp	r3, #7
 80048d4:	d101      	bne.n	80048da <ESP_Upkeep+0x11a>
          StartProg();
 80048d6:	f7ff f88f 	bl	80039f8 <StartProg>
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80048da:	1dbb      	adds	r3, r7, #6
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d113      	bne.n	800490a <ESP_Upkeep+0x14a>
          if(nextATCommand != AT_SENDDATA){
 80048e2:	4b4e      	ldr	r3, [pc, #312]	@ (8004a1c <ESP_Upkeep+0x25c>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b0d      	cmp	r3, #13
 80048e8:	d003      	beq.n	80048f2 <ESP_Upkeep+0x132>
            EspState = ESP_STATE_SEND;
 80048ea:	4b45      	ldr	r3, [pc, #276]	@ (8004a00 <ESP_Upkeep+0x240>)
 80048ec:	2204      	movs	r2, #4
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e00b      	b.n	800490a <ESP_Upkeep+0x14a>
          }
          else{
            nextATCommand = AT_HTTPCPOST;
 80048f2:	4b4a      	ldr	r3, [pc, #296]	@ (8004a1c <ESP_Upkeep+0x25c>)
 80048f4:	220c      	movs	r2, #12
 80048f6:	701a      	strb	r2, [r3, #0]
            ATCommands = AT_HTTPCPOST;
 80048f8:	4b4a      	ldr	r3, [pc, #296]	@ (8004a24 <ESP_Upkeep+0x264>)
 80048fa:	220c      	movs	r2, #12
 80048fc:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80048fe:	4b48      	ldr	r3, [pc, #288]	@ (8004a20 <ESP_Upkeep+0x260>)
 8004900:	2202      	movs	r2, #2
 8004902:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004904:	4b3e      	ldr	r3, [pc, #248]	@ (8004a00 <ESP_Upkeep+0x240>)
 8004906:	2204      	movs	r2, #4
 8004908:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800490a:	1d7b      	adds	r3, r7, #5
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d100      	bne.n	8004914 <ESP_Upkeep+0x154>
 8004912:	e06e      	b.n	80049f2 <ESP_Upkeep+0x232>
          EspState = ESP_STATE_NEXT_AT;
 8004914:	4b3a      	ldr	r3, [pc, #232]	@ (8004a00 <ESP_Upkeep+0x240>)
 8004916:	2205      	movs	r2, #5
 8004918:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800491a:	e06a      	b.n	80049f2 <ESP_Upkeep+0x232>

    case ESP_STATE_NEXT_AT:
      if(ATCommands < AT_SLEEP){
 800491c:	4b41      	ldr	r3, [pc, #260]	@ (8004a24 <ESP_Upkeep+0x264>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b0d      	cmp	r3, #13
 8004922:	d82a      	bhi.n	800497a <ESP_Upkeep+0x1ba>
        ATCommands = ATCommands+1;
 8004924:	4b3f      	ldr	r3, [pc, #252]	@ (8004a24 <ESP_Upkeep+0x264>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a24 <ESP_Upkeep+0x264>)
 800492e:	701a      	strb	r2, [r3, #0]
        if(ATCommands == AT_RESTORE){
 8004930:	4b3c      	ldr	r3, [pc, #240]	@ (8004a24 <ESP_Upkeep+0x264>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d102      	bne.n	800493e <ESP_Upkeep+0x17e>
            ATExpectation = RECEIVE_EXPECTATION_READY;
 8004938:	4b39      	ldr	r3, [pc, #228]	@ (8004a20 <ESP_Upkeep+0x260>)
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands == AT_HTTPCPOST){
 800493e:	4b39      	ldr	r3, [pc, #228]	@ (8004a24 <ESP_Upkeep+0x264>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d102      	bne.n	800494c <ESP_Upkeep+0x18c>
          ATExpectation = RECEIVE_EXPECTATION_START;
 8004946:	4b36      	ldr	r3, [pc, #216]	@ (8004a20 <ESP_Upkeep+0x260>)
 8004948:	2202      	movs	r2, #2
 800494a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands != AT_HTTPCPOST && ATCommands != AT_RESTORE){
 800494c:	4b35      	ldr	r3, [pc, #212]	@ (8004a24 <ESP_Upkeep+0x264>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b0c      	cmp	r3, #12
 8004952:	d006      	beq.n	8004962 <ESP_Upkeep+0x1a2>
 8004954:	4b33      	ldr	r3, [pc, #204]	@ (8004a24 <ESP_Upkeep+0x264>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b03      	cmp	r3, #3
 800495a:	d002      	beq.n	8004962 <ESP_Upkeep+0x1a2>
          ATExpectation = RECEIVE_EXPECTATION_OK;
 800495c:	4b30      	ldr	r3, [pc, #192]	@ (8004a20 <ESP_Upkeep+0x260>)
 800495e:	2200      	movs	r2, #0
 8004960:	701a      	strb	r2, [r3, #0]
        }
        EspState = EspState = ESP_STATE_SEND;
 8004962:	4b27      	ldr	r3, [pc, #156]	@ (8004a00 <ESP_Upkeep+0x240>)
 8004964:	2204      	movs	r2, #4
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	4b25      	ldr	r3, [pc, #148]	@ (8004a00 <ESP_Upkeep+0x240>)
 800496a:	781a      	ldrb	r2, [r3, #0]
 800496c:	4b24      	ldr	r3, [pc, #144]	@ (8004a00 <ESP_Upkeep+0x240>)
 800496e:	701a      	strb	r2, [r3, #0]
        nextATCommand = ATCommands;
 8004970:	4b2c      	ldr	r3, [pc, #176]	@ (8004a24 <ESP_Upkeep+0x264>)
 8004972:	781a      	ldrb	r2, [r3, #0]
 8004974:	4b29      	ldr	r3, [pc, #164]	@ (8004a1c <ESP_Upkeep+0x25c>)
 8004976:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
        break;
      }


    break;
 8004978:	e03e      	b.n	80049f8 <ESP_Upkeep+0x238>
        ESPTimeStamp = HAL_GetTick() + 300000;
 800497a:	f004 f8a3 	bl	8008ac4 <HAL_GetTick>
 800497e:	0003      	movs	r3, r0
 8004980:	4a29      	ldr	r2, [pc, #164]	@ (8004a28 <ESP_Upkeep+0x268>)
 8004982:	189a      	adds	r2, r3, r2
 8004984:	4b23      	ldr	r3, [pc, #140]	@ (8004a14 <ESP_Upkeep+0x254>)
 8004986:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
 8004988:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <ESP_Upkeep+0x240>)
 800498a:	2209      	movs	r2, #9
 800498c:	701a      	strb	r2, [r3, #0]
        break;
 800498e:	e033      	b.n	80049f8 <ESP_Upkeep+0x238>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 8004990:	4b20      	ldr	r3, [pc, #128]	@ (8004a14 <ESP_Upkeep+0x254>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0018      	movs	r0, r3
 8004996:	f003 fc47 	bl	8008228 <TimestampIsReached>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d02b      	beq.n	80049f6 <ESP_Upkeep+0x236>
        nextATCommand = AT_HTTPCPOST;
 800499e:	4b1f      	ldr	r3, [pc, #124]	@ (8004a1c <ESP_Upkeep+0x25c>)
 80049a0:	220c      	movs	r2, #12
 80049a2:	701a      	strb	r2, [r3, #0]
        ATCommands = AT_HTTPCPOST;
 80049a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a24 <ESP_Upkeep+0x264>)
 80049a6:	220c      	movs	r2, #12
 80049a8:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80049aa:	4b15      	ldr	r3, [pc, #84]	@ (8004a00 <ESP_Upkeep+0x240>)
 80049ac:	2204      	movs	r2, #4
 80049ae:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_START;
 80049b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <ESP_Upkeep+0x260>)
 80049b2:	2202      	movs	r2, #2
 80049b4:	701a      	strb	r2, [r3, #0]
      }

      break;
 80049b6:	e01e      	b.n	80049f6 <ESP_Upkeep+0x236>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80049b8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a2c <ESP_Upkeep+0x26c>)
 80049ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004a30 <ESP_Upkeep+0x270>)
 80049bc:	0019      	movs	r1, r3
 80049be:	2003      	movs	r0, #3
 80049c0:	f003 fc88 	bl	80082d4 <CreateLine>
      EspState = ESP_STATE_INIT;
 80049c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a00 <ESP_Upkeep+0x240>)
 80049c6:	2202      	movs	r2, #2
 80049c8:	701a      	strb	r2, [r3, #0]
      break;
 80049ca:	e015      	b.n	80049f8 <ESP_Upkeep+0x238>

    case ESP_STATE_BOOT:
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	23a0      	movs	r3, #160	@ 0xa0
 80049d2:	05db      	lsls	r3, r3, #23
 80049d4:	0011      	movs	r1, r2
 80049d6:	0018      	movs	r0, r3
 80049d8:	f005 fa27 	bl	8009e2a <HAL_GPIO_TogglePin>
      //WAIT FOR RESET;
      break;
 80049dc:	e00c      	b.n	80049f8 <ESP_Upkeep+0x238>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 80049de:	4b08      	ldr	r3, [pc, #32]	@ (8004a00 <ESP_Upkeep+0x240>)
 80049e0:	2207      	movs	r2, #7
 80049e2:	701a      	strb	r2, [r3, #0]
      break;
 80049e4:	e008      	b.n	80049f8 <ESP_Upkeep+0x238>
      break;
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	e006      	b.n	80049f8 <ESP_Upkeep+0x238>
      break;
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	e004      	b.n	80049f8 <ESP_Upkeep+0x238>
         break;
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	e002      	b.n	80049f8 <ESP_Upkeep+0x238>
      break;
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	e000      	b.n	80049f8 <ESP_Upkeep+0x238>
      break;
 80049f6:	46c0      	nop			@ (mov r8, r8)
  }
}
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b003      	add	sp, #12
 80049fe:	bd90      	pop	{r4, r7, pc}
 8004a00:	200000fb 	.word	0x200000fb
 8004a04:	08014e78 	.word	0x08014e78
 8004a08:	2000044b 	.word	0x2000044b
 8004a0c:	50000800 	.word	0x50000800
 8004a10:	50001c00 	.word	0x50001c00
 8004a14:	200006e4 	.word	0x200006e4
 8004a18:	2000034c 	.word	0x2000034c
 8004a1c:	200006ea 	.word	0x200006ea
 8004a20:	200006e9 	.word	0x200006e9
 8004a24:	200008ed 	.word	0x200008ed
 8004a28:	000493e0 	.word	0x000493e0
 8004a2c:	08014850 	.word	0x08014850
 8004a30:	08014470 	.word	0x08014470

08004a34 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004a3c:	4b09      	ldr	r3, [pc, #36]	@ (8004a64 <I2CSensors_Init+0x30>)
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004a42:	4a09      	ldr	r2, [pc, #36]	@ (8004a68 <I2CSensors_Init+0x34>)
 8004a44:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <I2CSensors_Init+0x38>)
 8004a46:	0011      	movs	r1, r2
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f000 fae1 	bl	8005010 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004a4e:	4a06      	ldr	r2, [pc, #24]	@ (8004a68 <I2CSensors_Init+0x34>)
 8004a50:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <I2CSensors_Init+0x38>)
 8004a52:	0011      	movs	r1, r2
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 f964 	bl	8004d22 <Gas_Init>
}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	200008f0 	.word	0x200008f0
 8004a68:	08004ac5 	.word	0x08004ac5
 8004a6c:	08004a71 	.word	0x08004a71

08004a70 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6039      	str	r1, [r7, #0]
 8004a78:	0011      	movs	r1, r2
 8004a7a:	1dfb      	adds	r3, r7, #7
 8004a7c:	1c02      	adds	r2, r0, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	1dbb      	adds	r3, r7, #6
 8004a82:	1c0a      	adds	r2, r1, #0
 8004a84:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004a86:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac0 <ReadI2C+0x50>)
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	1dfb      	adds	r3, r7, #7
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	18db      	adds	r3, r3, r3
 8004a92:	b299      	uxth	r1, r3
 8004a94:	1dbb      	adds	r3, r7, #6
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	250f      	movs	r5, #15
 8004a9c:	197c      	adds	r4, r7, r5
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	f005 fb7a 	bl	800a198 <HAL_I2C_Master_Receive_DMA>
 8004aa4:	0003      	movs	r3, r0
 8004aa6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004aa8:	197b      	adds	r3, r7, r5
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <ReadI2C+0x44>
        return false;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <ReadI2C+0x46>
    }
    return true;
 8004ab4:	2301      	movs	r3, #1
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b004      	add	sp, #16
 8004abc:	bdb0      	pop	{r4, r5, r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	200008f0 	.word	0x200008f0

08004ac4 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004ac4:	b5b0      	push	{r4, r5, r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6039      	str	r1, [r7, #0]
 8004acc:	0011      	movs	r1, r2
 8004ace:	1dfb      	adds	r3, r7, #7
 8004ad0:	1c02      	adds	r2, r0, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	1dbb      	adds	r3, r7, #6
 8004ad6:	1c0a      	adds	r2, r1, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004ada:	4b0e      	ldr	r3, [pc, #56]	@ (8004b14 <WriteI2C+0x50>)
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	1dfb      	adds	r3, r7, #7
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	18db      	adds	r3, r3, r3
 8004ae6:	b299      	uxth	r1, r3
 8004ae8:	1dbb      	adds	r3, r7, #6
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	250f      	movs	r5, #15
 8004af0:	197c      	adds	r4, r7, r5
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	f005 fa4a 	bl	8009f8c <HAL_I2C_Master_Transmit_DMA>
 8004af8:	0003      	movs	r3, r0
 8004afa:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004afc:	197b      	adds	r3, r7, r5
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <WriteI2C+0x44>
        return false;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <WriteI2C+0x46>
    }
    return true;
 8004b08:	2301      	movs	r3, #1
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b004      	add	sp, #16
 8004b10:	bdb0      	pop	{r4, r5, r7, pc}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	200008f0 	.word	0x200008f0

08004b18 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b1e:	003b      	movs	r3, r7
 8004b20:	0018      	movs	r0, r3
 8004b22:	2308      	movs	r3, #8
 8004b24:	001a      	movs	r2, r3
 8004b26:	2100      	movs	r1, #0
 8004b28:	f00c fea8 	bl	801187c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004b2c:	4b30      	ldr	r3, [pc, #192]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b2e:	4a31      	ldr	r2, [pc, #196]	@ (8004bf4 <MX_ADC_Init+0xdc>)
 8004b30:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004b32:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004b38:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b3a:	22c0      	movs	r2, #192	@ 0xc0
 8004b3c:	0612      	lsls	r2, r2, #24
 8004b3e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004b40:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004b46:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004b4c:	4b28      	ldr	r3, [pc, #160]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b52:	4b27      	ldr	r3, [pc, #156]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004b58:	4b25      	ldr	r3, [pc, #148]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004b60:	4b23      	ldr	r3, [pc, #140]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b62:	2221      	movs	r2, #33	@ 0x21
 8004b64:	2101      	movs	r1, #1
 8004b66:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b68:	4b21      	ldr	r3, [pc, #132]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b6e:	4b20      	ldr	r3, [pc, #128]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b70:	22c2      	movs	r2, #194	@ 0xc2
 8004b72:	32ff      	adds	r2, #255	@ 0xff
 8004b74:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004b76:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b78:	222c      	movs	r2, #44	@ 0x2c
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b80:	2204      	movs	r2, #4
 8004b82:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b84:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004b8a:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004b90:	4b17      	ldr	r3, [pc, #92]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004b96:	4b16      	ldr	r3, [pc, #88]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004b9c:	4b14      	ldr	r3, [pc, #80]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f003 ffbe 	bl	8008b20 <HAL_ADC_Init>
 8004ba4:	1e03      	subs	r3, r0, #0
 8004ba6:	d001      	beq.n	8004bac <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004ba8:	f000 fd64 	bl	8005674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004bac:	003b      	movs	r3, r7
 8004bae:	4a12      	ldr	r2, [pc, #72]	@ (8004bf8 <MX_ADC_Init+0xe0>)
 8004bb0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004bb2:	003b      	movs	r3, r7
 8004bb4:	2280      	movs	r2, #128	@ 0x80
 8004bb6:	0152      	lsls	r2, r2, #5
 8004bb8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004bba:	003a      	movs	r2, r7
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004bbe:	0011      	movs	r1, r2
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f004 fa1d 	bl	8009000 <HAL_ADC_ConfigChannel>
 8004bc6:	1e03      	subs	r3, r0, #0
 8004bc8:	d001      	beq.n	8004bce <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004bca:	f000 fd53 	bl	8005674 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004bce:	003b      	movs	r3, r7
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <MX_ADC_Init+0xe4>)
 8004bd2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004bd4:	003a      	movs	r2, r7
 8004bd6:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <MX_ADC_Init+0xd8>)
 8004bd8:	0011      	movs	r1, r2
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f004 fa10 	bl	8009000 <HAL_ADC_ConfigChannel>
 8004be0:	1e03      	subs	r3, r0, #0
 8004be2:	d001      	beq.n	8004be8 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004be4:	f000 fd46 	bl	8005674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004be8:	46c0      	nop			@ (mov r8, r8)
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b002      	add	sp, #8
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	200008f4 	.word	0x200008f4
 8004bf4:	40012400 	.word	0x40012400
 8004bf8:	38004000 	.word	0x38004000
 8004bfc:	3c008000 	.word	0x3c008000

08004c00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b089      	sub	sp, #36	@ 0x24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c08:	240c      	movs	r4, #12
 8004c0a:	193b      	adds	r3, r7, r4
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	2314      	movs	r3, #20
 8004c10:	001a      	movs	r2, r3
 8004c12:	2100      	movs	r1, #0
 8004c14:	f00c fe32 	bl	801187c <memset>
  if(adcHandle->Instance==ADC1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a14      	ldr	r2, [pc, #80]	@ (8004c70 <HAL_ADC_MspInit+0x70>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d121      	bne.n	8004c66 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c22:	4b14      	ldr	r3, [pc, #80]	@ (8004c74 <HAL_ADC_MspInit+0x74>)
 8004c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c26:	4b13      	ldr	r3, [pc, #76]	@ (8004c74 <HAL_ADC_MspInit+0x74>)
 8004c28:	2180      	movs	r1, #128	@ 0x80
 8004c2a:	0089      	lsls	r1, r1, #2
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c30:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <HAL_ADC_MspInit+0x74>)
 8004c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c34:	4b0f      	ldr	r3, [pc, #60]	@ (8004c74 <HAL_ADC_MspInit+0x74>)
 8004c36:	2104      	movs	r1, #4
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <HAL_ADC_MspInit+0x74>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c40:	2204      	movs	r2, #4
 8004c42:	4013      	ands	r3, r2
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8004c48:	193b      	adds	r3, r7, r4
 8004c4a:	2230      	movs	r2, #48	@ 0x30
 8004c4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c4e:	193b      	adds	r3, r7, r4
 8004c50:	2203      	movs	r2, #3
 8004c52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	193b      	adds	r3, r7, r4
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c5a:	193b      	adds	r3, r7, r4
 8004c5c:	4a06      	ldr	r2, [pc, #24]	@ (8004c78 <HAL_ADC_MspInit+0x78>)
 8004c5e:	0019      	movs	r1, r3
 8004c60:	0010      	movs	r0, r2
 8004c62:	f004 fe65 	bl	8009930 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b009      	add	sp, #36	@ 0x24
 8004c6c:	bd90      	pop	{r4, r7, pc}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	40012400 	.word	0x40012400
 8004c74:	40021000 	.word	0x40021000
 8004c78:	50000800 	.word	0x50000800

08004c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c82:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <MX_DMA_Init+0x48>)
 8004c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c86:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <MX_DMA_Init+0x48>)
 8004c88:	2101      	movs	r1, #1
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <MX_DMA_Init+0x48>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c92:	2201      	movs	r2, #1
 8004c94:	4013      	ands	r3, r2
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	200a      	movs	r0, #10
 8004ca0:	f004 fb68 	bl	8009374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004ca4:	200a      	movs	r0, #10
 8004ca6:	f004 fb7a 	bl	800939e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2103      	movs	r1, #3
 8004cae:	200b      	movs	r0, #11
 8004cb0:	f004 fb60 	bl	8009374 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004cb4:	200b      	movs	r0, #11
 8004cb6:	f004 fb72 	bl	800939e <HAL_NVIC_EnableIRQ>

}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b002      	add	sp, #8
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	40021000 	.word	0x40021000

08004cc8 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <Gadget_Init+0x40>)
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f000 ff4b 	bl	8005b74 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 fd15 	bl	8005714 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7fe fd23 	bl	8003738 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8004cf2:	4a06      	ldr	r2, [pc, #24]	@ (8004d0c <Gadget_Init+0x44>)
 8004cf4:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <Gadget_Init+0x48>)
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	2003      	movs	r0, #3
 8004cfa:	f003 faeb 	bl	80082d4 <CreateLine>
}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b004      	add	sp, #16
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	200000fc 	.word	0x200000fc
 8004d0c:	08014864 	.word	0x08014864
 8004d10:	08014878 	.word	0x08014878

08004d14 <UpkeepGadget>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void UpkeepGadget() {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 8004d18:	f000 feb8 	bl	8005a8c <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8004d1c:	46c0      	nop			@ (mov r8, r8)
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	0011      	movs	r1, r2
 8004d32:	0018      	movs	r0, r3
 8004d34:	f002 f9a6 	bl	8007084 <SGP_Init>
}
 8004d38:	46c0      	nop			@ (mov r8, r8)
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b002      	add	sp, #8
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8004d44:	f002 f9b8 	bl	80070b8 <SGP_StartMeasurement>
}
 8004d48:	46c0      	nop			@ (mov r8, r8)
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f002 fa1d 	bl	8007198 <SGP_GetMeasurementValues>
 8004d5e:	0003      	movs	r3, r0
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	b002      	add	sp, #8
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8004d6c:	f002 fc36 	bl	80075dc <SGP_DeviceConnected>
 8004d70:	0003      	movs	r3, r0
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b08b      	sub	sp, #44	@ 0x2c
 8004d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d7e:	2414      	movs	r4, #20
 8004d80:	193b      	adds	r3, r7, r4
 8004d82:	0018      	movs	r0, r3
 8004d84:	2314      	movs	r3, #20
 8004d86:	001a      	movs	r2, r3
 8004d88:	2100      	movs	r1, #0
 8004d8a:	f00c fd77 	bl	801187c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d8e:	4b70      	ldr	r3, [pc, #448]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d92:	4b6f      	ldr	r3, [pc, #444]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004d94:	2104      	movs	r1, #4
 8004d96:	430a      	orrs	r2, r1
 8004d98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	2204      	movs	r2, #4
 8004da0:	4013      	ands	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004da6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004daa:	4b69      	ldr	r3, [pc, #420]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004dac:	2180      	movs	r1, #128	@ 0x80
 8004dae:	430a      	orrs	r2, r1
 8004db0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004db2:	4b67      	ldr	r3, [pc, #412]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	2280      	movs	r2, #128	@ 0x80
 8004db8:	4013      	ands	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dbe:	4b64      	ldr	r3, [pc, #400]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc2:	4b63      	ldr	r3, [pc, #396]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dca:	4b61      	ldr	r3, [pc, #388]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd6:	4b5e      	ldr	r3, [pc, #376]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dda:	4b5d      	ldr	r3, [pc, #372]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004ddc:	2102      	movs	r1, #2
 8004dde:	430a      	orrs	r2, r1
 8004de0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004de2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	2202      	movs	r2, #2
 8004de8:	4013      	ands	r3, r2
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dee:	4b58      	ldr	r3, [pc, #352]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df2:	4b57      	ldr	r3, [pc, #348]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004df4:	2108      	movs	r1, #8
 8004df6:	430a      	orrs	r2, r1
 8004df8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dfa:	4b55      	ldr	r3, [pc, #340]	@ (8004f50 <MX_GPIO_Init+0x1d8>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	2208      	movs	r2, #8
 8004e00:	4013      	ands	r3, r2
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004e06:	4b53      	ldr	r3, [pc, #332]	@ (8004f54 <MX_GPIO_Init+0x1dc>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f004 ffef 	bl	8009df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8004e12:	4b50      	ldr	r3, [pc, #320]	@ (8004f54 <MX_GPIO_Init+0x1dc>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	2102      	movs	r1, #2
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f004 ffe9 	bl	8009df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8004e1e:	494e      	ldr	r1, [pc, #312]	@ (8004f58 <MX_GPIO_Init+0x1e0>)
 8004e20:	4b4e      	ldr	r3, [pc, #312]	@ (8004f5c <MX_GPIO_Init+0x1e4>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	0018      	movs	r0, r3
 8004e26:	f004 ffe3 	bl	8009df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004e2a:	2380      	movs	r3, #128	@ 0x80
 8004e2c:	011b      	lsls	r3, r3, #4
 8004e2e:	484c      	ldr	r0, [pc, #304]	@ (8004f60 <MX_GPIO_Init+0x1e8>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	0019      	movs	r1, r3
 8004e34:	f004 ffdc 	bl	8009df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f64 <MX_GPIO_Init+0x1ec>)
 8004e3c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e3e:	193b      	adds	r3, r7, r4
 8004e40:	2203      	movs	r2, #3
 8004e42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e44:	193b      	adds	r3, r7, r4
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e4a:	193b      	adds	r3, r7, r4
 8004e4c:	4a44      	ldr	r2, [pc, #272]	@ (8004f60 <MX_GPIO_Init+0x1e8>)
 8004e4e:	0019      	movs	r1, r3
 8004e50:	0010      	movs	r0, r2
 8004e52:	f004 fd6d 	bl	8009930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8004e56:	193b      	adds	r3, r7, r4
 8004e58:	2203      	movs	r2, #3
 8004e5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e5c:	193b      	adds	r3, r7, r4
 8004e5e:	2201      	movs	r2, #1
 8004e60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e62:	193b      	adds	r3, r7, r4
 8004e64:	2200      	movs	r2, #0
 8004e66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e68:	193b      	adds	r3, r7, r4
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004e6e:	193b      	adds	r3, r7, r4
 8004e70:	4a38      	ldr	r2, [pc, #224]	@ (8004f54 <MX_GPIO_Init+0x1dc>)
 8004e72:	0019      	movs	r1, r3
 8004e74:	0010      	movs	r0, r2
 8004e76:	f004 fd5b 	bl	8009930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8004e7a:	193b      	adds	r3, r7, r4
 8004e7c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f68 <MX_GPIO_Init+0x1f0>)
 8004e7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e80:	193b      	adds	r3, r7, r4
 8004e82:	2203      	movs	r2, #3
 8004e84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e86:	193b      	adds	r3, r7, r4
 8004e88:	2200      	movs	r2, #0
 8004e8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e8c:	193a      	adds	r2, r7, r4
 8004e8e:	23a0      	movs	r3, #160	@ 0xa0
 8004e90:	05db      	lsls	r3, r3, #23
 8004e92:	0011      	movs	r1, r2
 8004e94:	0018      	movs	r0, r3
 8004e96:	f004 fd4b 	bl	8009930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	22c0      	movs	r2, #192	@ 0xc0
 8004e9e:	0052      	lsls	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ea2:	193b      	adds	r3, r7, r4
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea8:	193b      	adds	r3, r7, r4
 8004eaa:	2200      	movs	r2, #0
 8004eac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eae:	193a      	adds	r2, r7, r4
 8004eb0:	23a0      	movs	r3, #160	@ 0xa0
 8004eb2:	05db      	lsls	r3, r3, #23
 8004eb4:	0011      	movs	r1, r2
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f004 fd3a 	bl	8009930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8004ebc:	193b      	adds	r3, r7, r4
 8004ebe:	4a26      	ldr	r2, [pc, #152]	@ (8004f58 <MX_GPIO_Init+0x1e0>)
 8004ec0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ec2:	193b      	adds	r3, r7, r4
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	193b      	adds	r3, r7, r4
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ed4:	193b      	adds	r3, r7, r4
 8004ed6:	4a21      	ldr	r2, [pc, #132]	@ (8004f5c <MX_GPIO_Init+0x1e4>)
 8004ed8:	0019      	movs	r1, r3
 8004eda:	0010      	movs	r0, r2
 8004edc:	f004 fd28 	bl	8009930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8004ee0:	193b      	adds	r3, r7, r4
 8004ee2:	4a22      	ldr	r2, [pc, #136]	@ (8004f6c <MX_GPIO_Init+0x1f4>)
 8004ee4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ee6:	193b      	adds	r3, r7, r4
 8004ee8:	2203      	movs	r2, #3
 8004eea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eec:	193b      	adds	r3, r7, r4
 8004eee:	2200      	movs	r2, #0
 8004ef0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	4a19      	ldr	r2, [pc, #100]	@ (8004f5c <MX_GPIO_Init+0x1e4>)
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	0010      	movs	r0, r2
 8004efa:	f004 fd19 	bl	8009930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8004efe:	0021      	movs	r1, r4
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	2280      	movs	r2, #128	@ 0x80
 8004f04:	0112      	lsls	r2, r2, #4
 8004f06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f08:	000c      	movs	r4, r1
 8004f0a:	193b      	adds	r3, r7, r4
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f10:	193b      	adds	r3, r7, r4
 8004f12:	2200      	movs	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f16:	193b      	adds	r3, r7, r4
 8004f18:	2200      	movs	r2, #0
 8004f1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8004f1c:	193b      	adds	r3, r7, r4
 8004f1e:	4a10      	ldr	r2, [pc, #64]	@ (8004f60 <MX_GPIO_Init+0x1e8>)
 8004f20:	0019      	movs	r1, r3
 8004f22:	0010      	movs	r0, r2
 8004f24:	f004 fd04 	bl	8009930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8004f28:	0021      	movs	r1, r4
 8004f2a:	187b      	adds	r3, r7, r1
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f30:	187b      	adds	r3, r7, r1
 8004f32:	2200      	movs	r2, #0
 8004f34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f36:	187b      	adds	r3, r7, r1
 8004f38:	2200      	movs	r2, #0
 8004f3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8004f3c:	187b      	adds	r3, r7, r1
 8004f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f70 <MX_GPIO_Init+0x1f8>)
 8004f40:	0019      	movs	r1, r3
 8004f42:	0010      	movs	r0, r2
 8004f44:	f004 fcf4 	bl	8009930 <HAL_GPIO_Init>

}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b00b      	add	sp, #44	@ 0x2c
 8004f4e:	bd90      	pop	{r4, r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	50001c00 	.word	0x50001c00
 8004f58:	00000301 	.word	0x00000301
 8004f5c:	50000400 	.word	0x50000400
 8004f60:	50000800 	.word	0x50000800
 8004f64:	0000320f 	.word	0x0000320f
 8004f68:	00008070 	.word	0x00008070
 8004f6c:	0000403e 	.word	0x0000403e
 8004f70:	50000c00 	.word	0x50000c00

08004f74 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2100      	movs	r1, #0
 8004f82:	0018      	movs	r0, r3
 8004f84:	f008 fb88 	bl	800d698 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2108      	movs	r1, #8
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f008 fb83 	bl	800d698 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	210c      	movs	r1, #12
 8004f96:	0018      	movs	r0, r3
 8004f98:	f008 fb7e 	bl	800d698 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8004f9c:	2380      	movs	r3, #128	@ 0x80
 8004f9e:	05db      	lsls	r3, r3, #23
 8004fa0:	22fa      	movs	r2, #250	@ 0xfa
 8004fa2:	0112      	lsls	r2, r2, #4
 8004fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8004fa6:	2380      	movs	r3, #128	@ 0x80
 8004fa8:	05db      	lsls	r3, r3, #23
 8004faa:	22fa      	movs	r2, #250	@ 0xfa
 8004fac:	0112      	lsls	r2, r2, #4
 8004fae:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	05db      	lsls	r3, r3, #23
 8004fb4:	22fa      	movs	r2, #250	@ 0xfa
 8004fb6:	0112      	lsls	r2, r2, #4
 8004fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8004fba:	2380      	movs	r3, #128	@ 0x80
 8004fbc:	05db      	lsls	r3, r3, #23
 8004fbe:	22fa      	movs	r2, #250	@ 0xfa
 8004fc0:	0112      	lsls	r2, r2, #4
 8004fc2:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f008 fb65 	bl	800d698 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2104      	movs	r1, #4
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f008 fb60 	bl	800d698 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2108      	movs	r1, #8
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f008 fb5b 	bl	800d698 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <GPIO_InitPWMLEDs+0x98>)
 8004fe4:	22fa      	movs	r2, #250	@ 0xfa
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8004fea:	4b08      	ldr	r3, [pc, #32]	@ (800500c <GPIO_InitPWMLEDs+0x98>)
 8004fec:	22fa      	movs	r2, #250	@ 0xfa
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <GPIO_InitPWMLEDs+0x98>)
 8004ff4:	22fa      	movs	r2, #250	@ 0xfa
 8004ff6:	0112      	lsls	r2, r2, #4
 8004ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8004ffa:	4b04      	ldr	r3, [pc, #16]	@ (800500c <GPIO_InitPWMLEDs+0x98>)
 8004ffc:	22fa      	movs	r2, #250	@ 0xfa
 8004ffe:	0112      	lsls	r2, r2, #4
 8005000:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005002:	46c0      	nop			@ (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	40000400 	.word	0x40000400

08005010 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	0011      	movs	r1, r2
 8005020:	0018      	movs	r0, r3
 8005022:	f003 faaf 	bl	8008584 <HIDS_Init>
}
 8005026:	46c0      	nop			@ (mov r8, r8)
 8005028:	46bd      	mov	sp, r7
 800502a:	b002      	add	sp, #8
 800502c:	bd80      	pop	{r7, pc}

0800502e <HT_StartMeasurement>:

void HT_StartMeasurement() {
 800502e:	b580      	push	{r7, lr}
 8005030:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005032:	f003 fac9 	bl	80085c8 <HIDS_StartMeasurement>
}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	0011      	movs	r1, r2
 800504c:	0018      	movs	r0, r3
 800504e:	f003 fb97 	bl	8008780 <HIDS_GetMeasurementValues>
 8005052:	0003      	movs	r3, r0
}
 8005054:	0018      	movs	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	b002      	add	sp, #8
 800505a:	bd80      	pop	{r7, pc}

0800505c <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005060:	f003 fb32 	bl	80086c8 <HIDS_DeviceConnected>
 8005064:	0003      	movs	r3, r0
}
 8005066:	0018      	movs	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005070:	4b1b      	ldr	r3, [pc, #108]	@ (80050e0 <MX_I2C1_Init+0x74>)
 8005072:	4a1c      	ldr	r2, [pc, #112]	@ (80050e4 <MX_I2C1_Init+0x78>)
 8005074:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <MX_I2C1_Init+0x74>)
 8005078:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <MX_I2C1_Init+0x7c>)
 800507a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800507c:	4b18      	ldr	r3, [pc, #96]	@ (80050e0 <MX_I2C1_Init+0x74>)
 800507e:	2200      	movs	r2, #0
 8005080:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005082:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <MX_I2C1_Init+0x74>)
 8005084:	2201      	movs	r2, #1
 8005086:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005088:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <MX_I2C1_Init+0x74>)
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800508e:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <MX_I2C1_Init+0x74>)
 8005090:	2200      	movs	r2, #0
 8005092:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005094:	4b12      	ldr	r3, [pc, #72]	@ (80050e0 <MX_I2C1_Init+0x74>)
 8005096:	2200      	movs	r2, #0
 8005098:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800509a:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <MX_I2C1_Init+0x74>)
 800509c:	2200      	movs	r2, #0
 800509e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050a0:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <MX_I2C1_Init+0x74>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80050a6:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <MX_I2C1_Init+0x74>)
 80050a8:	0018      	movs	r0, r3
 80050aa:	f004 fed9 	bl	8009e60 <HAL_I2C_Init>
 80050ae:	1e03      	subs	r3, r0, #0
 80050b0:	d001      	beq.n	80050b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80050b2:	f000 fadf 	bl	8005674 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80050b6:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <MX_I2C1_Init+0x74>)
 80050b8:	2100      	movs	r1, #0
 80050ba:	0018      	movs	r0, r3
 80050bc:	f006 fe48 	bl	800bd50 <HAL_I2CEx_ConfigAnalogFilter>
 80050c0:	1e03      	subs	r3, r0, #0
 80050c2:	d001      	beq.n	80050c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80050c4:	f000 fad6 	bl	8005674 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <MX_I2C1_Init+0x74>)
 80050ca:	2100      	movs	r1, #0
 80050cc:	0018      	movs	r0, r3
 80050ce:	f006 fe8b 	bl	800bde8 <HAL_I2CEx_ConfigDigitalFilter>
 80050d2:	1e03      	subs	r3, r0, #0
 80050d4:	d001      	beq.n	80050da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80050d6:	f000 facd 	bl	8005674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000950 	.word	0x20000950
 80050e4:	40005400 	.word	0x40005400
 80050e8:	00503d58 	.word	0x00503d58

080050ec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80050f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005160 <MX_I2C2_Init+0x74>)
 80050f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005164 <MX_I2C2_Init+0x78>)
 80050f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80050f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005160 <MX_I2C2_Init+0x74>)
 80050f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <MX_I2C2_Init+0x7c>)
 80050fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80050fc:	4b18      	ldr	r3, [pc, #96]	@ (8005160 <MX_I2C2_Init+0x74>)
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005102:	4b17      	ldr	r3, [pc, #92]	@ (8005160 <MX_I2C2_Init+0x74>)
 8005104:	2201      	movs	r2, #1
 8005106:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005108:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <MX_I2C2_Init+0x74>)
 800510a:	2200      	movs	r2, #0
 800510c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800510e:	4b14      	ldr	r3, [pc, #80]	@ (8005160 <MX_I2C2_Init+0x74>)
 8005110:	2200      	movs	r2, #0
 8005112:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005114:	4b12      	ldr	r3, [pc, #72]	@ (8005160 <MX_I2C2_Init+0x74>)
 8005116:	2200      	movs	r2, #0
 8005118:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800511a:	4b11      	ldr	r3, [pc, #68]	@ (8005160 <MX_I2C2_Init+0x74>)
 800511c:	2200      	movs	r2, #0
 800511e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005120:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <MX_I2C2_Init+0x74>)
 8005122:	2200      	movs	r2, #0
 8005124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005126:	4b0e      	ldr	r3, [pc, #56]	@ (8005160 <MX_I2C2_Init+0x74>)
 8005128:	0018      	movs	r0, r3
 800512a:	f004 fe99 	bl	8009e60 <HAL_I2C_Init>
 800512e:	1e03      	subs	r3, r0, #0
 8005130:	d001      	beq.n	8005136 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005132:	f000 fa9f 	bl	8005674 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005136:	4b0a      	ldr	r3, [pc, #40]	@ (8005160 <MX_I2C2_Init+0x74>)
 8005138:	2100      	movs	r1, #0
 800513a:	0018      	movs	r0, r3
 800513c:	f006 fe08 	bl	800bd50 <HAL_I2CEx_ConfigAnalogFilter>
 8005140:	1e03      	subs	r3, r0, #0
 8005142:	d001      	beq.n	8005148 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005144:	f000 fa96 	bl	8005674 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005148:	4b05      	ldr	r3, [pc, #20]	@ (8005160 <MX_I2C2_Init+0x74>)
 800514a:	2100      	movs	r1, #0
 800514c:	0018      	movs	r0, r3
 800514e:	f006 fe4b 	bl	800bde8 <HAL_I2CEx_ConfigDigitalFilter>
 8005152:	1e03      	subs	r3, r0, #0
 8005154:	d001      	beq.n	800515a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005156:	f000 fa8d 	bl	8005674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	200009a4 	.word	0x200009a4
 8005164:	40005800 	.word	0x40005800
 8005168:	00503d58 	.word	0x00503d58

0800516c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b08b      	sub	sp, #44	@ 0x2c
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005174:	2414      	movs	r4, #20
 8005176:	193b      	adds	r3, r7, r4
 8005178:	0018      	movs	r0, r3
 800517a:	2314      	movs	r3, #20
 800517c:	001a      	movs	r2, r3
 800517e:	2100      	movs	r1, #0
 8005180:	f00c fb7c 	bl	801187c <memset>
  if(i2cHandle->Instance==I2C1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5d      	ldr	r2, [pc, #372]	@ (8005300 <HAL_I2C_MspInit+0x194>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d000      	beq.n	8005190 <HAL_I2C_MspInit+0x24>
 800518e:	e083      	b.n	8005298 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005190:	4b5c      	ldr	r3, [pc, #368]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 8005192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005194:	4b5b      	ldr	r3, [pc, #364]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 8005196:	2102      	movs	r1, #2
 8005198:	430a      	orrs	r2, r1
 800519a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800519c:	4b59      	ldr	r3, [pc, #356]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 800519e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a0:	2202      	movs	r2, #2
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051a8:	0021      	movs	r1, r4
 80051aa:	187b      	adds	r3, r7, r1
 80051ac:	22c0      	movs	r2, #192	@ 0xc0
 80051ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051b0:	187b      	adds	r3, r7, r1
 80051b2:	2212      	movs	r2, #18
 80051b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b6:	187b      	adds	r3, r7, r1
 80051b8:	2200      	movs	r2, #0
 80051ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051bc:	187b      	adds	r3, r7, r1
 80051be:	2203      	movs	r2, #3
 80051c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80051c2:	187b      	adds	r3, r7, r1
 80051c4:	2201      	movs	r2, #1
 80051c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c8:	187b      	adds	r3, r7, r1
 80051ca:	4a4f      	ldr	r2, [pc, #316]	@ (8005308 <HAL_I2C_MspInit+0x19c>)
 80051cc:	0019      	movs	r1, r3
 80051ce:	0010      	movs	r0, r2
 80051d0:	f004 fbae 	bl	8009930 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 80051d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 80051da:	2180      	movs	r1, #128	@ 0x80
 80051dc:	0389      	lsls	r1, r1, #14
 80051de:	430a      	orrs	r2, r1
 80051e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80051e2:	4b4a      	ldr	r3, [pc, #296]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 80051e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005310 <HAL_I2C_MspInit+0x1a4>)
 80051e6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80051e8:	4b48      	ldr	r3, [pc, #288]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 80051ea:	2206      	movs	r2, #6
 80051ec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051ee:	4b47      	ldr	r3, [pc, #284]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051f4:	4b45      	ldr	r3, [pc, #276]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051fa:	4b44      	ldr	r3, [pc, #272]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 80051fc:	2280      	movs	r2, #128	@ 0x80
 80051fe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005200:	4b42      	ldr	r3, [pc, #264]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 8005202:	2200      	movs	r2, #0
 8005204:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005206:	4b41      	ldr	r3, [pc, #260]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 8005208:	2200      	movs	r2, #0
 800520a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800520c:	4b3f      	ldr	r3, [pc, #252]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 800520e:	2200      	movs	r2, #0
 8005210:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005212:	4b3e      	ldr	r3, [pc, #248]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 8005214:	2200      	movs	r2, #0
 8005216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005218:	4b3c      	ldr	r3, [pc, #240]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 800521a:	0018      	movs	r0, r3
 800521c:	f004 f8dc 	bl	80093d8 <HAL_DMA_Init>
 8005220:	1e03      	subs	r3, r0, #0
 8005222:	d001      	beq.n	8005228 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005224:	f000 fa26 	bl	8005674 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a38      	ldr	r2, [pc, #224]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 800522c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800522e:	4b37      	ldr	r3, [pc, #220]	@ (800530c <HAL_I2C_MspInit+0x1a0>)
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005234:	4b37      	ldr	r3, [pc, #220]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 8005236:	4a38      	ldr	r2, [pc, #224]	@ (8005318 <HAL_I2C_MspInit+0x1ac>)
 8005238:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800523a:	4b36      	ldr	r3, [pc, #216]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 800523c:	2206      	movs	r2, #6
 800523e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005240:	4b34      	ldr	r3, [pc, #208]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 8005242:	2210      	movs	r2, #16
 8005244:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005246:	4b33      	ldr	r3, [pc, #204]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 8005248:	2200      	movs	r2, #0
 800524a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800524c:	4b31      	ldr	r3, [pc, #196]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 800524e:	2280      	movs	r2, #128	@ 0x80
 8005250:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005252:	4b30      	ldr	r3, [pc, #192]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 8005254:	2200      	movs	r2, #0
 8005256:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005258:	4b2e      	ldr	r3, [pc, #184]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 800525a:	2200      	movs	r2, #0
 800525c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800525e:	4b2d      	ldr	r3, [pc, #180]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 8005260:	2200      	movs	r2, #0
 8005262:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005264:	4b2b      	ldr	r3, [pc, #172]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 8005266:	2200      	movs	r2, #0
 8005268:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800526a:	4b2a      	ldr	r3, [pc, #168]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 800526c:	0018      	movs	r0, r3
 800526e:	f004 f8b3 	bl	80093d8 <HAL_DMA_Init>
 8005272:	1e03      	subs	r3, r0, #0
 8005274:	d001      	beq.n	800527a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8005276:	f000 f9fd 	bl	8005674 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a25      	ldr	r2, [pc, #148]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005280:	4b24      	ldr	r3, [pc, #144]	@ (8005314 <HAL_I2C_MspInit+0x1a8>)
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005286:	2200      	movs	r2, #0
 8005288:	2100      	movs	r1, #0
 800528a:	2017      	movs	r0, #23
 800528c:	f004 f872 	bl	8009374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005290:	2017      	movs	r0, #23
 8005292:	f004 f884 	bl	800939e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005296:	e02e      	b.n	80052f6 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1f      	ldr	r2, [pc, #124]	@ (800531c <HAL_I2C_MspInit+0x1b0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d129      	bne.n	80052f6 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a2:	4b18      	ldr	r3, [pc, #96]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 80052a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a6:	4b17      	ldr	r3, [pc, #92]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 80052a8:	2102      	movs	r1, #2
 80052aa:	430a      	orrs	r2, r1
 80052ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80052ae:	4b15      	ldr	r3, [pc, #84]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	2202      	movs	r2, #2
 80052b4:	4013      	ands	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80052ba:	2114      	movs	r1, #20
 80052bc:	187b      	adds	r3, r7, r1
 80052be:	22c0      	movs	r2, #192	@ 0xc0
 80052c0:	0112      	lsls	r2, r2, #4
 80052c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	2212      	movs	r2, #18
 80052c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	2200      	movs	r2, #0
 80052ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d0:	187b      	adds	r3, r7, r1
 80052d2:	2203      	movs	r2, #3
 80052d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80052d6:	187b      	adds	r3, r7, r1
 80052d8:	2206      	movs	r2, #6
 80052da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052dc:	187b      	adds	r3, r7, r1
 80052de:	4a0a      	ldr	r2, [pc, #40]	@ (8005308 <HAL_I2C_MspInit+0x19c>)
 80052e0:	0019      	movs	r1, r3
 80052e2:	0010      	movs	r0, r2
 80052e4:	f004 fb24 	bl	8009930 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80052e8:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 80052ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <HAL_I2C_MspInit+0x198>)
 80052ee:	2180      	movs	r1, #128	@ 0x80
 80052f0:	03c9      	lsls	r1, r1, #15
 80052f2:	430a      	orrs	r2, r1
 80052f4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b00b      	add	sp, #44	@ 0x2c
 80052fc:	bd90      	pop	{r4, r7, pc}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	40005400 	.word	0x40005400
 8005304:	40021000 	.word	0x40021000
 8005308:	50000400 	.word	0x50000400
 800530c:	200009f8 	.word	0x200009f8
 8005310:	40020030 	.word	0x40020030
 8005314:	20000a40 	.word	0x20000a40
 8005318:	4002001c 	.word	0x4002001c
 800531c:	40005800 	.word	0x40005800

08005320 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005324:	4b11      	ldr	r3, [pc, #68]	@ (800536c <MX_I2S2_Init+0x4c>)
 8005326:	4a12      	ldr	r2, [pc, #72]	@ (8005370 <MX_I2S2_Init+0x50>)
 8005328:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800532a:	4b10      	ldr	r3, [pc, #64]	@ (800536c <MX_I2S2_Init+0x4c>)
 800532c:	22c0      	movs	r2, #192	@ 0xc0
 800532e:	0092      	lsls	r2, r2, #2
 8005330:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8005332:	4b0e      	ldr	r3, [pc, #56]	@ (800536c <MX_I2S2_Init+0x4c>)
 8005334:	2210      	movs	r2, #16
 8005336:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005338:	4b0c      	ldr	r3, [pc, #48]	@ (800536c <MX_I2S2_Init+0x4c>)
 800533a:	2205      	movs	r2, #5
 800533c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800533e:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <MX_I2S2_Init+0x4c>)
 8005340:	2280      	movs	r2, #128	@ 0x80
 8005342:	0092      	lsls	r2, r2, #2
 8005344:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005346:	4b09      	ldr	r3, [pc, #36]	@ (800536c <MX_I2S2_Init+0x4c>)
 8005348:	22fa      	movs	r2, #250	@ 0xfa
 800534a:	0152      	lsls	r2, r2, #5
 800534c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 800534e:	4b07      	ldr	r3, [pc, #28]	@ (800536c <MX_I2S2_Init+0x4c>)
 8005350:	2208      	movs	r2, #8
 8005352:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005354:	4b05      	ldr	r3, [pc, #20]	@ (800536c <MX_I2S2_Init+0x4c>)
 8005356:	0018      	movs	r0, r3
 8005358:	f006 fd92 	bl	800be80 <HAL_I2S_Init>
 800535c:	1e03      	subs	r3, r0, #0
 800535e:	d001      	beq.n	8005364 <MX_I2S2_Init+0x44>
  {
    Error_Handler();
 8005360:	f000 f988 	bl	8005674 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005364:	46c0      	nop			@ (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			@ (mov r8, r8)
 800536c:	20000a88 	.word	0x20000a88
 8005370:	40003800 	.word	0x40003800

08005374 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b08b      	sub	sp, #44	@ 0x2c
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800537c:	2414      	movs	r4, #20
 800537e:	193b      	adds	r3, r7, r4
 8005380:	0018      	movs	r0, r3
 8005382:	2314      	movs	r3, #20
 8005384:	001a      	movs	r2, r3
 8005386:	2100      	movs	r1, #0
 8005388:	f00c fa78 	bl	801187c <memset>
  if(i2sHandle->Instance==SPI2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a3e      	ldr	r2, [pc, #248]	@ (800548c <HAL_I2S_MspInit+0x118>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d175      	bne.n	8005482 <HAL_I2S_MspInit+0x10e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005396:	4b3e      	ldr	r3, [pc, #248]	@ (8005490 <HAL_I2S_MspInit+0x11c>)
 8005398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800539a:	4b3d      	ldr	r3, [pc, #244]	@ (8005490 <HAL_I2S_MspInit+0x11c>)
 800539c:	2180      	movs	r1, #128	@ 0x80
 800539e:	01c9      	lsls	r1, r1, #7
 80053a0:	430a      	orrs	r2, r1
 80053a2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005490 <HAL_I2S_MspInit+0x11c>)
 80053a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a8:	4b39      	ldr	r3, [pc, #228]	@ (8005490 <HAL_I2S_MspInit+0x11c>)
 80053aa:	2104      	movs	r1, #4
 80053ac:	430a      	orrs	r2, r1
 80053ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80053b0:	4b37      	ldr	r3, [pc, #220]	@ (8005490 <HAL_I2S_MspInit+0x11c>)
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	2204      	movs	r2, #4
 80053b6:	4013      	ands	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053bc:	4b34      	ldr	r3, [pc, #208]	@ (8005490 <HAL_I2S_MspInit+0x11c>)
 80053be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c0:	4b33      	ldr	r3, [pc, #204]	@ (8005490 <HAL_I2S_MspInit+0x11c>)
 80053c2:	2102      	movs	r1, #2
 80053c4:	430a      	orrs	r2, r1
 80053c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80053c8:	4b31      	ldr	r3, [pc, #196]	@ (8005490 <HAL_I2S_MspInit+0x11c>)
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	2202      	movs	r2, #2
 80053ce:	4013      	ands	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> I2S2_MCK
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80053d4:	193b      	adds	r3, r7, r4
 80053d6:	2204      	movs	r2, #4
 80053d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053da:	193b      	adds	r3, r7, r4
 80053dc:	2202      	movs	r2, #2
 80053de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e0:	193b      	adds	r3, r7, r4
 80053e2:	2200      	movs	r2, #0
 80053e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e6:	193b      	adds	r3, r7, r4
 80053e8:	2200      	movs	r2, #0
 80053ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_SPI2;
 80053ec:	193b      	adds	r3, r7, r4
 80053ee:	2202      	movs	r2, #2
 80053f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053f2:	193b      	adds	r3, r7, r4
 80053f4:	4a27      	ldr	r2, [pc, #156]	@ (8005494 <HAL_I2S_MspInit+0x120>)
 80053f6:	0019      	movs	r1, r3
 80053f8:	0010      	movs	r0, r2
 80053fa:	f004 fa99 	bl	8009930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80053fe:	0021      	movs	r1, r4
 8005400:	187b      	adds	r3, r7, r1
 8005402:	22b0      	movs	r2, #176	@ 0xb0
 8005404:	0212      	lsls	r2, r2, #8
 8005406:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005408:	187b      	adds	r3, r7, r1
 800540a:	2202      	movs	r2, #2
 800540c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540e:	187b      	adds	r3, r7, r1
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005414:	187b      	adds	r3, r7, r1
 8005416:	2200      	movs	r2, #0
 8005418:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800541a:	187b      	adds	r3, r7, r1
 800541c:	2200      	movs	r2, #0
 800541e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005420:	187b      	adds	r3, r7, r1
 8005422:	4a1d      	ldr	r2, [pc, #116]	@ (8005498 <HAL_I2S_MspInit+0x124>)
 8005424:	0019      	movs	r1, r3
 8005426:	0010      	movs	r0, r2
 8005428:	f004 fa82 	bl	8009930 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800542c:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <HAL_I2S_MspInit+0x128>)
 800542e:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <HAL_I2S_MspInit+0x12c>)
 8005430:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8005432:	4b1a      	ldr	r3, [pc, #104]	@ (800549c <HAL_I2S_MspInit+0x128>)
 8005434:	2202      	movs	r2, #2
 8005436:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005438:	4b18      	ldr	r3, [pc, #96]	@ (800549c <HAL_I2S_MspInit+0x128>)
 800543a:	2200      	movs	r2, #0
 800543c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800543e:	4b17      	ldr	r3, [pc, #92]	@ (800549c <HAL_I2S_MspInit+0x128>)
 8005440:	2200      	movs	r2, #0
 8005442:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005444:	4b15      	ldr	r3, [pc, #84]	@ (800549c <HAL_I2S_MspInit+0x128>)
 8005446:	2280      	movs	r2, #128	@ 0x80
 8005448:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800544a:	4b14      	ldr	r3, [pc, #80]	@ (800549c <HAL_I2S_MspInit+0x128>)
 800544c:	2280      	movs	r2, #128	@ 0x80
 800544e:	0052      	lsls	r2, r2, #1
 8005450:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005452:	4b12      	ldr	r3, [pc, #72]	@ (800549c <HAL_I2S_MspInit+0x128>)
 8005454:	2280      	movs	r2, #128	@ 0x80
 8005456:	00d2      	lsls	r2, r2, #3
 8005458:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800545a:	4b10      	ldr	r3, [pc, #64]	@ (800549c <HAL_I2S_MspInit+0x128>)
 800545c:	2220      	movs	r2, #32
 800545e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005460:	4b0e      	ldr	r3, [pc, #56]	@ (800549c <HAL_I2S_MspInit+0x128>)
 8005462:	2200      	movs	r2, #0
 8005464:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005466:	4b0d      	ldr	r3, [pc, #52]	@ (800549c <HAL_I2S_MspInit+0x128>)
 8005468:	0018      	movs	r0, r3
 800546a:	f003 ffb5 	bl	80093d8 <HAL_DMA_Init>
 800546e:	1e03      	subs	r3, r0, #0
 8005470:	d001      	beq.n	8005476 <HAL_I2S_MspInit+0x102>
    {
      Error_Handler();
 8005472:	f000 f8ff 	bl	8005674 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a08      	ldr	r2, [pc, #32]	@ (800549c <HAL_I2S_MspInit+0x128>)
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30
 800547c:	4b07      	ldr	r3, [pc, #28]	@ (800549c <HAL_I2S_MspInit+0x128>)
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	46bd      	mov	sp, r7
 8005486:	b00b      	add	sp, #44	@ 0x2c
 8005488:	bd90      	pop	{r4, r7, pc}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	40003800 	.word	0x40003800
 8005490:	40021000 	.word	0x40021000
 8005494:	50000800 	.word	0x50000800
 8005498:	50000400 	.word	0x50000400
 800549c:	20000ac4 	.word	0x20000ac4
 80054a0:	40020044 	.word	0x40020044

080054a4 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a0e      	ldr	r2, [pc, #56]	@ (80054ec <HAL_I2S_MspDeInit+0x48>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d116      	bne.n	80054e4 <HAL_I2S_MspDeInit+0x40>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80054b6:	4b0e      	ldr	r3, [pc, #56]	@ (80054f0 <HAL_I2S_MspDeInit+0x4c>)
 80054b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <HAL_I2S_MspDeInit+0x4c>)
 80054bc:	490d      	ldr	r1, [pc, #52]	@ (80054f4 <HAL_I2S_MspDeInit+0x50>)
 80054be:	400a      	ands	r2, r1
 80054c0:	639a      	str	r2, [r3, #56]	@ 0x38
    PC2     ------> I2S2_MCK
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 80054c2:	4b0d      	ldr	r3, [pc, #52]	@ (80054f8 <HAL_I2S_MspDeInit+0x54>)
 80054c4:	2104      	movs	r1, #4
 80054c6:	0018      	movs	r0, r3
 80054c8:	f004 fbb0 	bl	8009c2c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80054cc:	23b0      	movs	r3, #176	@ 0xb0
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <HAL_I2S_MspDeInit+0x58>)
 80054d2:	0019      	movs	r1, r3
 80054d4:	0010      	movs	r0, r2
 80054d6:	f004 fba9 	bl	8009c2c <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054de:	0018      	movs	r0, r3
 80054e0:	f003 fff2 	bl	80094c8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80054e4:	46c0      	nop			@ (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b002      	add	sp, #8
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40003800 	.word	0x40003800
 80054f0:	40021000 	.word	0x40021000
 80054f4:	ffffbfff 	.word	0xffffbfff
 80054f8:	50000800 	.word	0x50000800
 80054fc:	50000400 	.word	0x50000400

08005500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005506:	f003 fa77 	bl	80089f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800550a:	f000 f841 	bl	8005590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800550e:	f7ff fc33 	bl	8004d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8005512:	f7ff fbb3 	bl	8004c7c <MX_DMA_Init>
  MX_I2C1_Init();
 8005516:	f7ff fda9 	bl	800506c <MX_I2C1_Init>
  MX_I2S2_Init();
 800551a:	f7ff ff01 	bl	8005320 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800551e:	f002 fce3 	bl	8007ee8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8005522:	f7ff fde3 	bl	80050ec <MX_I2C2_Init>
  MX_USB_PCD_Init();
 8005526:	f002 fe41 	bl	80081ac <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800552a:	f002 fb5f 	bl	8007bec <MX_TIM2_Init>
  MX_TIM3_Init();
 800552e:	f002 fbd1 	bl	8007cd4 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8005532:	f002 fd0d 	bl	8007f50 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8005536:	f7ff faef 	bl	8004b18 <MX_ADC_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800553a:	4a0f      	ldr	r2, [pc, #60]	@ (8005578 <main+0x78>)
 800553c:	4b0f      	ldr	r3, [pc, #60]	@ (800557c <main+0x7c>)
 800553e:	0011      	movs	r1, r2
 8005540:	0018      	movs	r0, r3
 8005542:	f7ff fd17 	bl	8004f74 <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8005546:	f003 fabd 	bl	8008ac4 <HAL_GetTick>
 800554a:	0003      	movs	r3, r0
 800554c:	22fa      	movs	r2, #250	@ 0xfa
 800554e:	0092      	lsls	r2, r2, #2
 8005550:	4694      	mov	ip, r2
 8005552:	4463      	add	r3, ip
 8005554:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8005556:	2003      	movs	r0, #3
 8005558:	f002 ff38 	bl	80083cc <SetVerboseLevel>
  BinaryReleaseInfo();
 800555c:	f002 ff4e 	bl	80083fc <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8005560:	4b07      	ldr	r3, [pc, #28]	@ (8005580 <main+0x80>)
 8005562:	4a08      	ldr	r2, [pc, #32]	@ (8005584 <main+0x84>)
 8005564:	4908      	ldr	r1, [pc, #32]	@ (8005588 <main+0x88>)
 8005566:	4809      	ldr	r0, [pc, #36]	@ (800558c <main+0x8c>)
 8005568:	f7ff fbae 	bl	8004cc8 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    UpkeepGadget();
 800556c:	f7ff fbd2 	bl	8004d14 <UpkeepGadget>
    ESP_Upkeep();
 8005570:	f7ff f926 	bl	80047c0 <ESP_Upkeep>
    UpkeepGadget();
 8005574:	46c0      	nop			@ (mov r8, r8)
 8005576:	e7f9      	b.n	800556c <main+0x6c>
 8005578:	200028bc 	.word	0x200028bc
 800557c:	2000287c 	.word	0x2000287c
 8005580:	200008f4 	.word	0x200008f4
 8005584:	200029b4 	.word	0x200029b4
 8005588:	20000a88 	.word	0x20000a88
 800558c:	20000950 	.word	0x20000950

08005590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005590:	b590      	push	{r4, r7, lr}
 8005592:	b09d      	sub	sp, #116	@ 0x74
 8005594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005596:	2438      	movs	r4, #56	@ 0x38
 8005598:	193b      	adds	r3, r7, r4
 800559a:	0018      	movs	r0, r3
 800559c:	2338      	movs	r3, #56	@ 0x38
 800559e:	001a      	movs	r2, r3
 80055a0:	2100      	movs	r1, #0
 80055a2:	f00c f96b 	bl	801187c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055a6:	2324      	movs	r3, #36	@ 0x24
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	0018      	movs	r0, r3
 80055ac:	2314      	movs	r3, #20
 80055ae:	001a      	movs	r2, r3
 80055b0:	2100      	movs	r1, #0
 80055b2:	f00c f963 	bl	801187c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80055b6:	003b      	movs	r3, r7
 80055b8:	0018      	movs	r0, r3
 80055ba:	2324      	movs	r3, #36	@ 0x24
 80055bc:	001a      	movs	r2, r3
 80055be:	2100      	movs	r1, #0
 80055c0:	f00c f95c 	bl	801187c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055c4:	4b29      	ldr	r3, [pc, #164]	@ (800566c <SystemClock_Config+0xdc>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a29      	ldr	r2, [pc, #164]	@ (8005670 <SystemClock_Config+0xe0>)
 80055ca:	401a      	ands	r2, r3
 80055cc:	4b27      	ldr	r3, [pc, #156]	@ (800566c <SystemClock_Config+0xdc>)
 80055ce:	2180      	movs	r1, #128	@ 0x80
 80055d0:	0109      	lsls	r1, r1, #4
 80055d2:	430a      	orrs	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80055d6:	0021      	movs	r1, r4
 80055d8:	187b      	adds	r3, r7, r1
 80055da:	2222      	movs	r2, #34	@ 0x22
 80055dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80055de:	187b      	adds	r3, r7, r1
 80055e0:	2201      	movs	r2, #1
 80055e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80055e4:	187b      	adds	r3, r7, r1
 80055e6:	2210      	movs	r2, #16
 80055e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80055ea:	187b      	adds	r3, r7, r1
 80055ec:	2201      	movs	r2, #1
 80055ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80055f0:	187b      	adds	r3, r7, r1
 80055f2:	2200      	movs	r2, #0
 80055f4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055f6:	187b      	adds	r3, r7, r1
 80055f8:	0018      	movs	r0, r3
 80055fa:	f007 f8b9 	bl	800c770 <HAL_RCC_OscConfig>
 80055fe:	1e03      	subs	r3, r0, #0
 8005600:	d001      	beq.n	8005606 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005602:	f000 f837 	bl	8005674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005606:	2124      	movs	r1, #36	@ 0x24
 8005608:	187b      	adds	r3, r7, r1
 800560a:	220f      	movs	r2, #15
 800560c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800560e:	187b      	adds	r3, r7, r1
 8005610:	2201      	movs	r2, #1
 8005612:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005614:	187b      	adds	r3, r7, r1
 8005616:	2200      	movs	r2, #0
 8005618:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800561a:	187b      	adds	r3, r7, r1
 800561c:	2200      	movs	r2, #0
 800561e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005620:	187b      	adds	r3, r7, r1
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005626:	187b      	adds	r3, r7, r1
 8005628:	2100      	movs	r1, #0
 800562a:	0018      	movs	r0, r3
 800562c:	f007 fc74 	bl	800cf18 <HAL_RCC_ClockConfig>
 8005630:	1e03      	subs	r3, r0, #0
 8005632:	d001      	beq.n	8005638 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005634:	f000 f81e 	bl	8005674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005638:	003b      	movs	r3, r7
 800563a:	2249      	movs	r2, #73	@ 0x49
 800563c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800563e:	003b      	movs	r3, r7
 8005640:	2200      	movs	r2, #0
 8005642:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005644:	003b      	movs	r3, r7
 8005646:	2200      	movs	r2, #0
 8005648:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800564a:	003b      	movs	r3, r7
 800564c:	2280      	movs	r2, #128	@ 0x80
 800564e:	04d2      	lsls	r2, r2, #19
 8005650:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005652:	003b      	movs	r3, r7
 8005654:	0018      	movs	r0, r3
 8005656:	f007 fe83 	bl	800d360 <HAL_RCCEx_PeriphCLKConfig>
 800565a:	1e03      	subs	r3, r0, #0
 800565c:	d001      	beq.n	8005662 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800565e:	f000 f809 	bl	8005674 <Error_Handler>
  }
}
 8005662:	46c0      	nop			@ (mov r8, r8)
 8005664:	46bd      	mov	sp, r7
 8005666:	b01d      	add	sp, #116	@ 0x74
 8005668:	bd90      	pop	{r4, r7, pc}
 800566a:	46c0      	nop			@ (mov r8, r8)
 800566c:	40007000 	.word	0x40007000
 8005670:	ffffe7ff 	.word	0xffffe7ff

08005674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005678:	b672      	cpsid	i
}
 800567a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800567c:	46c0      	nop			@ (mov r8, r8)
 800567e:	e7fd      	b.n	800567c <Error_Handler+0x8>

08005680 <HT_StartMeasurementWrapper>:
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8005684:	f7ff fcd3 	bl	800502e <HT_StartMeasurement>
}
 8005688:	46c0      	nop			@ (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8005694:	4a04      	ldr	r2, [pc, #16]	@ (80056a8 <HT_IsMeasurementDoneWrapper+0x18>)
 8005696:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <HT_IsMeasurementDoneWrapper+0x1c>)
 8005698:	0011      	movs	r1, r2
 800569a:	0018      	movs	r0, r3
 800569c:	f7ff fcce 	bl	800503c <HT_GetMeasurementValues>
 80056a0:	0003      	movs	r3, r0
}
 80056a2:	0018      	movs	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000b10 	.word	0x20000b10
 80056ac:	20000b0c 	.word	0x20000b0c

080056b0 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 80056b4:	f7ff fb44 	bl	8004d40 <Gas_StartMeasurement>
}
 80056b8:	46c0      	nop			@ (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 80056c4:	4b03      	ldr	r3, [pc, #12]	@ (80056d4 <VOC_IsMeasurementDoneWrapper+0x14>)
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7ff fb41 	bl	8004d4e <Gas_GetMeasurementValues>
 80056cc:	0003      	movs	r3, r0
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000b14 	.word	0x20000b14

080056d8 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
}
 80056dc:	46c0      	nop			@ (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 80056e2:	b580      	push	{r7, lr}
 80056e4:	af00      	add	r7, sp, #0
  return true;
 80056e6:	2301      	movs	r3, #1
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 80056ee:	b580      	push	{r7, lr}
 80056f0:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128); // Dont init like this.
 80056f2:	23fa      	movs	r3, #250	@ 0xfa
 80056f4:	015b      	lsls	r3, r3, #5
 80056f6:	2180      	movs	r1, #128	@ 0x80
 80056f8:	0018      	movs	r0, r3
 80056fa:	f000 fc1b 	bl	8005f34 <MIC_Start>
}
 80056fe:	46c0      	nop			@ (mov r8, r8)
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8005708:	f000 fd4a 	bl	80061a0 <MIC_MeasurementDone>
 800570c:	0003      	movs	r3, r0
}
 800570e:	0018      	movs	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8005714:	b5b0      	push	{r4, r5, r7, lr}
 8005716:	b096      	sub	sp, #88	@ 0x58
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005720:	4b86      	ldr	r3, [pc, #536]	@ (800593c <Meas_Init+0x228>)
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
  batteryInit(ADC_HANDLER);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	0018      	movs	r0, r3
 800572a:	f7fd ff37 	bl	800359c <batteryInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 800572e:	4b84      	ldr	r3, [pc, #528]	@ (8005940 <Meas_Init+0x22c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d103      	bne.n	800573e <Meas_Init+0x2a>
 8005736:	4b82      	ldr	r3, [pc, #520]	@ (8005940 <Meas_Init+0x22c>)
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d079      	beq.n	8005832 <Meas_Init+0x11e>
    I2CSensors_Init(sensorI2C);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	0018      	movs	r0, r3
 8005742:	f7ff f977 	bl	8004a34 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8005746:	f7ff fc89 	bl	800505c <HT_DeviceConnected>
 800574a:	0003      	movs	r3, r0
 800574c:	001a      	movs	r2, r3
 800574e:	2301      	movs	r3, #1
 8005750:	4053      	eors	r3, r2
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d017      	beq.n	8005788 <Meas_Init+0x74>
       Error("Humidity / Temperature sensor NOT connected!");
 8005758:	4a7a      	ldr	r2, [pc, #488]	@ (8005944 <Meas_Init+0x230>)
 800575a:	4b7b      	ldr	r3, [pc, #492]	@ (8005948 <Meas_Init+0x234>)
 800575c:	0019      	movs	r1, r3
 800575e:	2001      	movs	r0, #1
 8005760:	f002 fdb8 	bl	80082d4 <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 8005764:	4b76      	ldr	r3, [pc, #472]	@ (8005940 <Meas_Init+0x22c>)
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]
       // HT Device NOT connected, turning LED on RED.
       // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
       TIM2 -> CCR1 = 0;
 800576a:	2380      	movs	r3, #128	@ 0x80
 800576c:	05db      	lsls	r3, r3, #23
 800576e:	2200      	movs	r2, #0
 8005770:	635a      	str	r2, [r3, #52]	@ 0x34
       TIM2 -> CCR3 = 4000;
 8005772:	2380      	movs	r3, #128	@ 0x80
 8005774:	05db      	lsls	r3, r3, #23
 8005776:	22fa      	movs	r2, #250	@ 0xfa
 8005778:	0112      	lsls	r2, r2, #4
 800577a:	63da      	str	r2, [r3, #60]	@ 0x3c
       TIM2 -> CCR4 = 4000;
 800577c:	2380      	movs	r3, #128	@ 0x80
 800577e:	05db      	lsls	r3, r3, #23
 8005780:	22fa      	movs	r2, #250	@ 0xfa
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	641a      	str	r2, [r3, #64]	@ 0x40
 8005786:	e013      	b.n	80057b0 <Meas_Init+0x9c>
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      Debug("Humidity / Temperature sensor initialised.");
 8005788:	4a70      	ldr	r2, [pc, #448]	@ (800594c <Meas_Init+0x238>)
 800578a:	4b71      	ldr	r3, [pc, #452]	@ (8005950 <Meas_Init+0x23c>)
 800578c:	0019      	movs	r1, r3
 800578e:	2003      	movs	r0, #3
 8005790:	f002 fda0 	bl	80082d4 <CreateLine>
      TIM2 -> CCR1 = 4000;
 8005794:	2380      	movs	r3, #128	@ 0x80
 8005796:	05db      	lsls	r3, r3, #23
 8005798:	22fa      	movs	r2, #250	@ 0xfa
 800579a:	0112      	lsls	r2, r2, #4
 800579c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 800579e:	2380      	movs	r3, #128	@ 0x80
 80057a0:	05db      	lsls	r3, r3, #23
 80057a2:	2200      	movs	r2, #0
 80057a4:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 80057a6:	2380      	movs	r3, #128	@ 0x80
 80057a8:	05db      	lsls	r3, r3, #23
 80057aa:	22fa      	movs	r2, #250	@ 0xfa
 80057ac:	0112      	lsls	r2, r2, #4
 80057ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    if(!Gas_DeviceConnected()) {
 80057b0:	f7ff fada 	bl	8004d68 <Gas_DeviceConnected>
 80057b4:	0003      	movs	r3, r0
 80057b6:	001a      	movs	r2, r3
 80057b8:	2301      	movs	r3, #1
 80057ba:	4053      	eors	r3, r2
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01d      	beq.n	80057fe <Meas_Init+0xea>
       Error("SGP device not connected!");
 80057c2:	4a64      	ldr	r2, [pc, #400]	@ (8005954 <Meas_Init+0x240>)
 80057c4:	4b60      	ldr	r3, [pc, #384]	@ (8005948 <Meas_Init+0x234>)
 80057c6:	0019      	movs	r1, r3
 80057c8:	2001      	movs	r0, #1
 80057ca:	f002 fd83 	bl	80082d4 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80057ce:	4b62      	ldr	r3, [pc, #392]	@ (8005958 <Meas_Init+0x244>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	2101      	movs	r1, #1
 80057d4:	0018      	movs	r0, r3
 80057d6:	f004 fb0b 	bl	8009df0 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80057da:	2380      	movs	r3, #128	@ 0x80
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	485e      	ldr	r0, [pc, #376]	@ (8005958 <Meas_Init+0x244>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	0019      	movs	r1, r3
 80057e4:	f004 fb04 	bl	8009df0 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80057e8:	2380      	movs	r3, #128	@ 0x80
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	485a      	ldr	r0, [pc, #360]	@ (8005958 <Meas_Init+0x244>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	0019      	movs	r1, r3
 80057f2:	f004 fafd 	bl	8009df0 <HAL_GPIO_WritePin>
       MeasEnabled.VOC_measurementEnabled = false;
 80057f6:	4b52      	ldr	r3, [pc, #328]	@ (8005940 <Meas_Init+0x22c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	705a      	strb	r2, [r3, #1]
 80057fc:	e019      	b.n	8005832 <Meas_Init+0x11e>
    }else{
      Debug("SGP sensor initialised.");
 80057fe:	4a57      	ldr	r2, [pc, #348]	@ (800595c <Meas_Init+0x248>)
 8005800:	4b53      	ldr	r3, [pc, #332]	@ (8005950 <Meas_Init+0x23c>)
 8005802:	0019      	movs	r1, r3
 8005804:	2003      	movs	r0, #3
 8005806:	f002 fd65 	bl	80082d4 <CreateLine>
      // HT Device is connected, turning led on GREEN.
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800580a:	4b53      	ldr	r3, [pc, #332]	@ (8005958 <Meas_Init+0x244>)
 800580c:	2201      	movs	r2, #1
 800580e:	2101      	movs	r1, #1
 8005810:	0018      	movs	r0, r3
 8005812:	f004 faed 	bl	8009df0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8005816:	2380      	movs	r3, #128	@ 0x80
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	484f      	ldr	r0, [pc, #316]	@ (8005958 <Meas_Init+0x244>)
 800581c:	2200      	movs	r2, #0
 800581e:	0019      	movs	r1, r3
 8005820:	f004 fae6 	bl	8009df0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005824:	2380      	movs	r3, #128	@ 0x80
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	484b      	ldr	r0, [pc, #300]	@ (8005958 <Meas_Init+0x244>)
 800582a:	2201      	movs	r2, #1
 800582c:	0019      	movs	r1, r3
 800582e:	f004 fadf 	bl	8009df0 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8005832:	4b43      	ldr	r3, [pc, #268]	@ (8005940 <Meas_Init+0x22c>)
 8005834:	78db      	ldrb	r3, [r3, #3]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <Meas_Init+0x12e>
    MIC_Init(micI2s);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	0018      	movs	r0, r3
 800583e:	f000 f9e7 	bl	8005c10 <MIC_Init>
  }
  uint8_t offset = 0;
 8005842:	2557      	movs	r5, #87	@ 0x57
 8005844:	197b      	adds	r3, r7, r5
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 800584a:	197b      	adds	r3, r7, r5
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	197a      	adds	r2, r7, r5
 8005850:	1c59      	adds	r1, r3, #1
 8005852:	7011      	strb	r1, [r2, #0]
 8005854:	4a3a      	ldr	r2, [pc, #232]	@ (8005940 <Meas_Init+0x22c>)
 8005856:	7814      	ldrb	r4, [r2, #0]
 8005858:	4a41      	ldr	r2, [pc, #260]	@ (8005960 <Meas_Init+0x24c>)
 800585a:	0119      	lsls	r1, r3, #4
 800585c:	4841      	ldr	r0, [pc, #260]	@ (8005964 <Meas_Init+0x250>)
 800585e:	5088      	str	r0, [r1, r2]
 8005860:	493f      	ldr	r1, [pc, #252]	@ (8005960 <Meas_Init+0x24c>)
 8005862:	011a      	lsls	r2, r3, #4
 8005864:	188a      	adds	r2, r1, r2
 8005866:	3204      	adds	r2, #4
 8005868:	493f      	ldr	r1, [pc, #252]	@ (8005968 <Meas_Init+0x254>)
 800586a:	6011      	str	r1, [r2, #0]
 800586c:	493c      	ldr	r1, [pc, #240]	@ (8005960 <Meas_Init+0x24c>)
 800586e:	011a      	lsls	r2, r3, #4
 8005870:	188a      	adds	r2, r1, r2
 8005872:	3208      	adds	r2, #8
 8005874:	493d      	ldr	r1, [pc, #244]	@ (800596c <Meas_Init+0x258>)
 8005876:	6011      	str	r1, [r2, #0]
 8005878:	4a39      	ldr	r2, [pc, #228]	@ (8005960 <Meas_Init+0x24c>)
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	18d3      	adds	r3, r2, r3
 800587e:	330c      	adds	r3, #12
 8005880:	1c22      	adds	r2, r4, #0
 8005882:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8005884:	197b      	adds	r3, r7, r5
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	197a      	adds	r2, r7, r5
 800588a:	1c59      	adds	r1, r3, #1
 800588c:	7011      	strb	r1, [r2, #0]
 800588e:	4a2c      	ldr	r2, [pc, #176]	@ (8005940 <Meas_Init+0x22c>)
 8005890:	7854      	ldrb	r4, [r2, #1]
 8005892:	4a33      	ldr	r2, [pc, #204]	@ (8005960 <Meas_Init+0x24c>)
 8005894:	0119      	lsls	r1, r3, #4
 8005896:	4836      	ldr	r0, [pc, #216]	@ (8005970 <Meas_Init+0x25c>)
 8005898:	5088      	str	r0, [r1, r2]
 800589a:	4931      	ldr	r1, [pc, #196]	@ (8005960 <Meas_Init+0x24c>)
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	188a      	adds	r2, r1, r2
 80058a0:	3204      	adds	r2, #4
 80058a2:	4934      	ldr	r1, [pc, #208]	@ (8005974 <Meas_Init+0x260>)
 80058a4:	6011      	str	r1, [r2, #0]
 80058a6:	492e      	ldr	r1, [pc, #184]	@ (8005960 <Meas_Init+0x24c>)
 80058a8:	011a      	lsls	r2, r3, #4
 80058aa:	188a      	adds	r2, r1, r2
 80058ac:	3208      	adds	r2, #8
 80058ae:	4932      	ldr	r1, [pc, #200]	@ (8005978 <Meas_Init+0x264>)
 80058b0:	6011      	str	r1, [r2, #0]
 80058b2:	4a2b      	ldr	r2, [pc, #172]	@ (8005960 <Meas_Init+0x24c>)
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	18d3      	adds	r3, r2, r3
 80058b8:	330c      	adds	r3, #12
 80058ba:	1c22      	adds	r2, r4, #0
 80058bc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 80058be:	197b      	adds	r3, r7, r5
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	197a      	adds	r2, r7, r5
 80058c4:	1c59      	adds	r1, r3, #1
 80058c6:	7011      	strb	r1, [r2, #0]
 80058c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005940 <Meas_Init+0x22c>)
 80058ca:	7894      	ldrb	r4, [r2, #2]
 80058cc:	4a24      	ldr	r2, [pc, #144]	@ (8005960 <Meas_Init+0x24c>)
 80058ce:	0119      	lsls	r1, r3, #4
 80058d0:	482a      	ldr	r0, [pc, #168]	@ (800597c <Meas_Init+0x268>)
 80058d2:	5088      	str	r0, [r1, r2]
 80058d4:	4922      	ldr	r1, [pc, #136]	@ (8005960 <Meas_Init+0x24c>)
 80058d6:	011a      	lsls	r2, r3, #4
 80058d8:	188a      	adds	r2, r1, r2
 80058da:	3204      	adds	r2, #4
 80058dc:	4928      	ldr	r1, [pc, #160]	@ (8005980 <Meas_Init+0x26c>)
 80058de:	6011      	str	r1, [r2, #0]
 80058e0:	491f      	ldr	r1, [pc, #124]	@ (8005960 <Meas_Init+0x24c>)
 80058e2:	011a      	lsls	r2, r3, #4
 80058e4:	188a      	adds	r2, r1, r2
 80058e6:	3208      	adds	r2, #8
 80058e8:	4926      	ldr	r1, [pc, #152]	@ (8005984 <Meas_Init+0x270>)
 80058ea:	6011      	str	r1, [r2, #0]
 80058ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005960 <Meas_Init+0x24c>)
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	18d3      	adds	r3, r2, r3
 80058f2:	330c      	adds	r3, #12
 80058f4:	1c22      	adds	r2, r4, #0
 80058f6:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 80058f8:	197b      	adds	r3, r7, r5
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	197a      	adds	r2, r7, r5
 80058fe:	1c59      	adds	r1, r3, #1
 8005900:	7011      	strb	r1, [r2, #0]
 8005902:	4a0f      	ldr	r2, [pc, #60]	@ (8005940 <Meas_Init+0x22c>)
 8005904:	78d4      	ldrb	r4, [r2, #3]
 8005906:	4a16      	ldr	r2, [pc, #88]	@ (8005960 <Meas_Init+0x24c>)
 8005908:	0119      	lsls	r1, r3, #4
 800590a:	481f      	ldr	r0, [pc, #124]	@ (8005988 <Meas_Init+0x274>)
 800590c:	5088      	str	r0, [r1, r2]
 800590e:	4914      	ldr	r1, [pc, #80]	@ (8005960 <Meas_Init+0x24c>)
 8005910:	011a      	lsls	r2, r3, #4
 8005912:	188a      	adds	r2, r1, r2
 8005914:	3204      	adds	r2, #4
 8005916:	491d      	ldr	r1, [pc, #116]	@ (800598c <Meas_Init+0x278>)
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	4911      	ldr	r1, [pc, #68]	@ (8005960 <Meas_Init+0x24c>)
 800591c:	011a      	lsls	r2, r3, #4
 800591e:	188a      	adds	r2, r1, r2
 8005920:	3208      	adds	r2, #8
 8005922:	491b      	ldr	r1, [pc, #108]	@ (8005990 <Meas_Init+0x27c>)
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	4a0e      	ldr	r2, [pc, #56]	@ (8005960 <Meas_Init+0x24c>)
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	18d3      	adds	r3, r2, r3
 800592c:	330c      	adds	r3, #12
 800592e:	1c22      	adds	r2, r4, #0
 8005930:	701a      	strb	r2, [r3, #0]
}
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	46bd      	mov	sp, r7
 8005936:	b016      	add	sp, #88	@ 0x58
 8005938:	bdb0      	pop	{r4, r5, r7, pc}
 800593a:	46c0      	nop			@ (mov r8, r8)
 800593c:	20000b60 	.word	0x20000b60
 8005940:	20000b5c 	.word	0x20000b5c
 8005944:	0801487c 	.word	0x0801487c
 8005948:	080148ac 	.word	0x080148ac
 800594c:	080148b0 	.word	0x080148b0
 8005950:	080148dc 	.word	0x080148dc
 8005954:	080148e0 	.word	0x080148e0
 8005958:	50000400 	.word	0x50000400
 800595c:	080148fc 	.word	0x080148fc
 8005960:	20000b1c 	.word	0x20000b1c
 8005964:	08005681 	.word	0x08005681
 8005968:	08005691 	.word	0x08005691
 800596c:	20000b18 	.word	0x20000b18
 8005970:	080056b1 	.word	0x080056b1
 8005974:	080056c1 	.word	0x080056c1
 8005978:	20000b19 	.word	0x20000b19
 800597c:	080056d9 	.word	0x080056d9
 8005980:	080056e3 	.word	0x080056e3
 8005984:	20000b1a 	.word	0x20000b1a
 8005988:	080056ef 	.word	0x080056ef
 800598c:	08005705 	.word	0x08005705
 8005990:	20000b1b 	.word	0x20000b1b

08005994 <StartMeasurements>:

void StartMeasurements(void) {
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005998:	4b10      	ldr	r3, [pc, #64]	@ (80059dc <StartMeasurements+0x48>)
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	e015      	b.n	80059cc <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80059a0:	4b0e      	ldr	r3, [pc, #56]	@ (80059dc <StartMeasurements+0x48>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	4a0e      	ldr	r2, [pc, #56]	@ (80059e0 <StartMeasurements+0x4c>)
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	18d3      	adds	r3, r2, r3
 80059aa:	330c      	adds	r3, #12
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80059b2:	4b0a      	ldr	r3, [pc, #40]	@ (80059dc <StartMeasurements+0x48>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	001a      	movs	r2, r3
 80059b8:	4b09      	ldr	r3, [pc, #36]	@ (80059e0 <StartMeasurements+0x4c>)
 80059ba:	0112      	lsls	r2, r2, #4
 80059bc:	58d3      	ldr	r3, [r2, r3]
 80059be:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80059c0:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <StartMeasurements+0x48>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <StartMeasurements+0x48>)
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	4b03      	ldr	r3, [pc, #12]	@ (80059dc <StartMeasurements+0x48>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d9e5      	bls.n	80059a0 <StartMeasurements+0xc>
    }
  }
}
 80059d4:	46c0      	nop			@ (mov r8, r8)
 80059d6:	46c0      	nop			@ (mov r8, r8)
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20000b61 	.word	0x20000b61
 80059e0:	20000b1c 	.word	0x20000b1c

080059e4 <ResetMeasurements>:

void ResetMeasurements(void) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 80059e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a18 <ResetMeasurements+0x34>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 80059ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005a18 <ResetMeasurements+0x34>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 80059f4:	4b08      	ldr	r3, [pc, #32]	@ (8005a18 <ResetMeasurements+0x34>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 80059fa:	4b07      	ldr	r3, [pc, #28]	@ (8005a18 <ResetMeasurements+0x34>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005a00:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <ResetMeasurements+0x34>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8005a06:	4b04      	ldr	r3, [pc, #16]	@ (8005a18 <ResetMeasurements+0x34>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005a0c:	4b02      	ldr	r3, [pc, #8]	@ (8005a18 <ResetMeasurements+0x34>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	73da      	strb	r2, [r3, #15]
}
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000b0c 	.word	0x20000b0c

08005a1c <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005a20:	4b18      	ldr	r3, [pc, #96]	@ (8005a84 <MeasurementsCompleted+0x68>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e024      	b.n	8005a72 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005a28:	4b16      	ldr	r3, [pc, #88]	@ (8005a84 <MeasurementsCompleted+0x68>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	4a16      	ldr	r2, [pc, #88]	@ (8005a88 <MeasurementsCompleted+0x6c>)
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	18d3      	adds	r3, r2, r3
 8005a32:	330c      	adds	r3, #12
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d015      	beq.n	8005a66 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005a3a:	4b12      	ldr	r3, [pc, #72]	@ (8005a84 <MeasurementsCompleted+0x68>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	@ (8005a88 <MeasurementsCompleted+0x6c>)
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	18d3      	adds	r3, r2, r3
 8005a44:	3304      	adds	r3, #4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4798      	blx	r3
 8005a4a:	1e03      	subs	r3, r0, #0
 8005a4c:	d009      	beq.n	8005a62 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <MeasurementsCompleted+0x68>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	4a0d      	ldr	r2, [pc, #52]	@ (8005a88 <MeasurementsCompleted+0x6c>)
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	18d3      	adds	r3, r2, r3
 8005a58:	3308      	adds	r3, #8
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e001      	b.n	8005a66 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e00a      	b.n	8005a7c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005a66:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <MeasurementsCompleted+0x68>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <MeasurementsCompleted+0x68>)
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <MeasurementsCompleted+0x68>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d9d6      	bls.n	8005a28 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8005a7a:	2301      	movs	r3, #1
}
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			@ (mov r8, r8)
 8005a84:	20000b61 	.word	0x20000b61
 8005a88:	20000b1c 	.word	0x20000b1c

08005a8c <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8005a92:	4b30      	ldr	r3, [pc, #192]	@ (8005b54 <Meas_Upkeep+0xc8>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b05      	cmp	r3, #5
 8005a98:	d854      	bhi.n	8005b44 <Meas_Upkeep+0xb8>
 8005a9a:	009a      	lsls	r2, r3, #2
 8005a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8005b58 <Meas_Upkeep+0xcc>)
 8005a9e:	18d3      	adds	r3, r2, r3
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 8005aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b5c <Meas_Upkeep+0xd0>)
 8005aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8005b60 <Meas_Upkeep+0xd4>)
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	2003      	movs	r0, #3
 8005aac:	f002 fc12 	bl	80082d4 <CreateLine>
    break;
 8005ab0:	e04d      	b.n	8005b4e <Meas_Upkeep+0xc2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8005ab2:	f7ff ff97 	bl	80059e4 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8005ab6:	4b27      	ldr	r3, [pc, #156]	@ (8005b54 <Meas_Upkeep+0xc8>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	701a      	strb	r2, [r3, #0]
    break;
 8005abc:	e047      	b.n	8005b4e <Meas_Upkeep+0xc2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8005abe:	f7ff ff69 	bl	8005994 <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8005ac2:	4b24      	ldr	r3, [pc, #144]	@ (8005b54 <Meas_Upkeep+0xc8>)
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	701a      	strb	r2, [r3, #0]
   break;
 8005ac8:	e041      	b.n	8005b4e <Meas_Upkeep+0xc2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8005aca:	f7ff ffa7 	bl	8005a1c <MeasurementsCompleted>
 8005ace:	1e03      	subs	r3, r0, #0
 8005ad0:	d03c      	beq.n	8005b4c <Meas_Upkeep+0xc0>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8005ad2:	4b20      	ldr	r3, [pc, #128]	@ (8005b54 <Meas_Upkeep+0xc8>)
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005ad8:	e038      	b.n	8005b4c <Meas_Upkeep+0xc0>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8005ada:	4a22      	ldr	r2, [pc, #136]	@ (8005b64 <Meas_Upkeep+0xd8>)
 8005adc:	4b20      	ldr	r3, [pc, #128]	@ (8005b60 <Meas_Upkeep+0xd4>)
 8005ade:	0019      	movs	r1, r3
 8005ae0:	2003      	movs	r0, #3
 8005ae2:	f002 fbf7 	bl	80082d4 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8005ae6:	4b20      	ldr	r3, [pc, #128]	@ (8005b68 <Meas_Upkeep+0xdc>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	4a20      	ldr	r2, [pc, #128]	@ (8005b6c <Meas_Upkeep+0xe0>)
 8005aec:	491c      	ldr	r1, [pc, #112]	@ (8005b60 <Meas_Upkeep+0xd4>)
 8005aee:	2003      	movs	r0, #3
 8005af0:	f002 fbf0 	bl	80082d4 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8005af4:	4b1c      	ldr	r3, [pc, #112]	@ (8005b68 <Meas_Upkeep+0xdc>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	1c18      	adds	r0, r3, #0
 8005afa:	f7fd fc77 	bl	80033ec <__aeabi_f2d>
 8005afe:	0004      	movs	r4, r0
 8005b00:	000d      	movs	r5, r1
 8005b02:	4b19      	ldr	r3, [pc, #100]	@ (8005b68 <Meas_Upkeep+0xdc>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	1c18      	adds	r0, r3, #0
 8005b08:	f7fd fc70 	bl	80033ec <__aeabi_f2d>
 8005b0c:	0002      	movs	r2, r0
 8005b0e:	000b      	movs	r3, r1
 8005b10:	4817      	ldr	r0, [pc, #92]	@ (8005b70 <Meas_Upkeep+0xe4>)
 8005b12:	4913      	ldr	r1, [pc, #76]	@ (8005b60 <Meas_Upkeep+0xd4>)
 8005b14:	9202      	str	r2, [sp, #8]
 8005b16:	9303      	str	r3, [sp, #12]
 8005b18:	9400      	str	r4, [sp, #0]
 8005b1a:	9501      	str	r5, [sp, #4]
 8005b1c:	0002      	movs	r2, r0
 8005b1e:	2003      	movs	r0, #3
 8005b20:	f002 fbd8 	bl	80082d4 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8005b24:	4b10      	ldr	r3, [pc, #64]	@ (8005b68 <Meas_Upkeep+0xdc>)
 8005b26:	6858      	ldr	r0, [r3, #4]
 8005b28:	4b0f      	ldr	r3, [pc, #60]	@ (8005b68 <Meas_Upkeep+0xdc>)
 8005b2a:	6819      	ldr	r1, [r3, #0]
 8005b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8005b68 <Meas_Upkeep+0xdc>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	001a      	movs	r2, r3
 8005b34:	f7fd fde4 	bl	8003700 <setMeasurement>
    checkCharges();
 8005b38:	f7fd fd3e 	bl	80035b8 <checkCharges>
    MeasState = MEAS_STATE_INIT;
 8005b3c:	4b05      	ldr	r3, [pc, #20]	@ (8005b54 <Meas_Upkeep+0xc8>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]
    break;
 8005b42:	e004      	b.n	8005b4e <Meas_Upkeep+0xc2>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8005b44:	4b03      	ldr	r3, [pc, #12]	@ (8005b54 <Meas_Upkeep+0xc8>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
    break;
 8005b4a:	e000      	b.n	8005b4e <Meas_Upkeep+0xc2>
    break;
 8005b4c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005b4e:	46c0      	nop			@ (mov r8, r8)
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bdb0      	pop	{r4, r5, r7, pc}
 8005b54:	20000b60 	.word	0x20000b60
 8005b58:	08014ea4 	.word	0x08014ea4
 8005b5c:	08014914 	.word	0x08014914
 8005b60:	080148dc 	.word	0x080148dc
 8005b64:	08014934 	.word	0x08014934
 8005b68:	20000b0c 	.word	0x20000b0c
 8005b6c:	08014948 	.word	0x08014948
 8005b70:	08014960 	.word	0x08014960

08005b74 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	1d3b      	adds	r3, r7, #4
 8005b7c:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8005b7e:	240f      	movs	r4, #15
 8005b80:	193b      	adds	r3, r7, r4
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8005b86:	4b20      	ldr	r3, [pc, #128]	@ (8005c08 <Meas_SetEnabledSensors+0x94>)
 8005b88:	1d3a      	adds	r2, r7, #4
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8005b8e:	193b      	adds	r3, r7, r4
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	193a      	adds	r2, r7, r4
 8005b94:	1c59      	adds	r1, r3, #1
 8005b96:	7011      	strb	r1, [r2, #0]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	1d3b      	adds	r3, r7, #4
 8005b9c:	7819      	ldrb	r1, [r3, #0]
 8005b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c0c <Meas_SetEnabledSensors+0x98>)
 8005ba0:	0103      	lsls	r3, r0, #4
 8005ba2:	18d3      	adds	r3, r2, r3
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	1c0a      	adds	r2, r1, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8005baa:	193b      	adds	r3, r7, r4
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	193a      	adds	r2, r7, r4
 8005bb0:	1c59      	adds	r1, r3, #1
 8005bb2:	7011      	strb	r1, [r2, #0]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	7859      	ldrb	r1, [r3, #1]
 8005bba:	4a14      	ldr	r2, [pc, #80]	@ (8005c0c <Meas_SetEnabledSensors+0x98>)
 8005bbc:	0103      	lsls	r3, r0, #4
 8005bbe:	18d3      	adds	r3, r2, r3
 8005bc0:	330c      	adds	r3, #12
 8005bc2:	1c0a      	adds	r2, r1, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8005bc6:	193b      	adds	r3, r7, r4
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	193a      	adds	r2, r7, r4
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	7011      	strb	r1, [r2, #0]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	1d3b      	adds	r3, r7, #4
 8005bd4:	7899      	ldrb	r1, [r3, #2]
 8005bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005c0c <Meas_SetEnabledSensors+0x98>)
 8005bd8:	0103      	lsls	r3, r0, #4
 8005bda:	18d3      	adds	r3, r2, r3
 8005bdc:	330c      	adds	r3, #12
 8005bde:	1c0a      	adds	r2, r1, #0
 8005be0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8005be2:	193b      	adds	r3, r7, r4
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	193a      	adds	r2, r7, r4
 8005be8:	1c59      	adds	r1, r3, #1
 8005bea:	7011      	strb	r1, [r2, #0]
 8005bec:	0018      	movs	r0, r3
 8005bee:	1d3b      	adds	r3, r7, #4
 8005bf0:	78d9      	ldrb	r1, [r3, #3]
 8005bf2:	4a06      	ldr	r2, [pc, #24]	@ (8005c0c <Meas_SetEnabledSensors+0x98>)
 8005bf4:	0103      	lsls	r3, r0, #4
 8005bf6:	18d3      	adds	r3, r2, r3
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	1c0a      	adds	r2, r1, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b005      	add	sp, #20
 8005c04:	bd90      	pop	{r4, r7, pc}
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	20000b5c 	.word	0x20000b5c
 8005c0c:	20000b1c 	.word	0x20000b1c

08005c10 <MIC_Init>:
q15_t sample[NR_SAMPLES_512];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	4b03      	ldr	r3, [pc, #12]	@ (8005c28 <MIC_Init+0x18>)
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	46c0      	nop			@ (mov r8, r8)
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b002      	add	sp, #8
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			@ (mov r8, r8)
 8005c28:	20000b64 	.word	0x20000b64

08005c2c <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8005c34:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <UpdateSampleRate+0x3c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d00e      	beq.n	8005c5e <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8005c40:	4b09      	ldr	r3, [pc, #36]	@ (8005c68 <UpdateSampleRate+0x3c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f006 fa0d 	bl	800c064 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8005c4a:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <UpdateSampleRate+0x3c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8005c52:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <UpdateSampleRate+0x3c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	0018      	movs	r0, r3
 8005c58:	f006 f912 	bl	800be80 <HAL_I2S_Init>
 8005c5c:	e000      	b.n	8005c60 <UpdateSampleRate+0x34>
    return;
 8005c5e:	46c0      	nop			@ (mov r8, r8)
}
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b002      	add	sp, #8
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	20000b64 	.word	0x20000b64

08005c6c <ConvertAudio>:

static q15_t ConvertAudio(uint16_t* data) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  bool Sign = 0;
 8005c74:	2317      	movs	r3, #23
 8005c76:	18fb      	adds	r3, r7, r3
 8005c78:	2200      	movs	r2, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
  //float dB = 0;
  float Division = 2147483647.0; //Reference?
 8005c7c:	239e      	movs	r3, #158	@ 0x9e
 8005c7e:	05db      	lsls	r3, r3, #23
 8005c80:	613b      	str	r3, [r7, #16]
  int32_t audioValue = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  //Sign = data[0] >> 14;
  audioValue = (data[0]<<17)|(data[1]<<1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	045a      	lsls	r2, r3, #17
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3302      	adds	r3, #2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  audioValue = (audioValue/Division)*0x7FFF;
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7fb fc5d 	bl	8001558 <__aeabi_i2f>
 8005c9e:	1c03      	adds	r3, r0, #0
 8005ca0:	6939      	ldr	r1, [r7, #16]
 8005ca2:	1c18      	adds	r0, r3, #0
 8005ca4:	f7fa ff5a 	bl	8000b5c <__aeabi_fdiv>
 8005ca8:	1c03      	adds	r3, r0, #0
 8005caa:	4908      	ldr	r1, [pc, #32]	@ (8005ccc <ConvertAudio+0x60>)
 8005cac:	1c18      	adds	r0, r3, #0
 8005cae:	f7fb f93b 	bl	8000f28 <__aeabi_fmul>
 8005cb2:	1c03      	adds	r3, r0, #0
 8005cb4:	1c18      	adds	r0, r3, #0
 8005cb6:	f7fb fc2f 	bl	8001518 <__aeabi_f2iz>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	60fb      	str	r3, [r7, #12]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return audioValue;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	b21b      	sxth	r3, r3
}
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b006      	add	sp, #24
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	46fffe00 	.word	0x46fffe00

08005cd0 <X2>:

q15_t X2(q15_t num){
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	1dbb      	adds	r3, r7, #6
 8005cda:	801a      	strh	r2, [r3, #0]
  q15_t result = num*num;
 8005cdc:	1dbb      	adds	r3, r7, #6
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	1dba      	adds	r2, r7, #6
 8005ce2:	8812      	ldrh	r2, [r2, #0]
 8005ce4:	4353      	muls	r3, r2
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	210e      	movs	r1, #14
 8005cea:	187b      	adds	r3, r7, r1
 8005cec:	801a      	strh	r2, [r3, #0]
  return(result);
 8005cee:	187b      	adds	r3, r7, r1
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	5e9b      	ldrsh	r3, [r3, r2]
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b004      	add	sp, #16
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <GetOctave>:

q15_t GetOctave(uint16_t width, uint16_t minFreq){
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	0002      	movs	r2, r0
 8005d04:	1dbb      	adds	r3, r7, #6
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	1d3b      	adds	r3, r7, #4
 8005d0a:	1c0a      	adds	r2, r1, #0
 8005d0c:	801a      	strh	r2, [r3, #0]
  q15_t retVal = 0;
 8005d0e:	230a      	movs	r3, #10
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	2200      	movs	r2, #0
 8005d14:	801a      	strh	r2, [r3, #0]
  q15_t buffer = 0;
 8005d16:	2316      	movs	r3, #22
 8005d18:	18fb      	adds	r3, r7, r3
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	801a      	strh	r2, [r3, #0]
  float dB;
  float Division = (32768.0)-1; //Reference?
 8005d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8005dd8 <GetOctave+0xdc>)
 8005d20:	613b      	str	r3, [r7, #16]
  for(uint16_t i = minFreq; i < minFreq+width; i++){
 8005d22:	2314      	movs	r3, #20
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	1d3a      	adds	r2, r7, #4
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	e016      	b.n	8005d5c <GetOctave+0x60>
    buffer += X2(output[i]);
 8005d2e:	2414      	movs	r4, #20
 8005d30:	193b      	adds	r3, r7, r4
 8005d32:	881a      	ldrh	r2, [r3, #0]
 8005d34:	4b29      	ldr	r3, [pc, #164]	@ (8005ddc <GetOctave+0xe0>)
 8005d36:	0052      	lsls	r2, r2, #1
 8005d38:	5ed3      	ldrsh	r3, [r2, r3]
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f7ff ffc8 	bl	8005cd0 <X2>
 8005d40:	0003      	movs	r3, r0
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	2116      	movs	r1, #22
 8005d46:	187b      	adds	r3, r7, r1
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	18d3      	adds	r3, r2, r3
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	801a      	strh	r2, [r3, #0]
  for(uint16_t i = minFreq; i < minFreq+width; i++){
 8005d52:	193b      	adds	r3, r7, r4
 8005d54:	881a      	ldrh	r2, [r3, #0]
 8005d56:	193b      	adds	r3, r7, r4
 8005d58:	3201      	adds	r2, #1
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	2314      	movs	r3, #20
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	881a      	ldrh	r2, [r3, #0]
 8005d62:	1d3b      	adds	r3, r7, #4
 8005d64:	8819      	ldrh	r1, [r3, #0]
 8005d66:	1dbb      	adds	r3, r7, #6
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	18cb      	adds	r3, r1, r3
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	dbde      	blt.n	8005d2e <GetOctave+0x32>
  }
  arm_sqrt_q15(buffer, &retVal);
 8005d70:	240a      	movs	r4, #10
 8005d72:	193a      	adds	r2, r7, r4
 8005d74:	2316      	movs	r3, #22
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	2100      	movs	r1, #0
 8005d7a:	5e5b      	ldrsh	r3, [r3, r1]
 8005d7c:	0011      	movs	r1, r2
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f009 fe70 	bl	800fa64 <arm_sqrt_q15>
  dB = 10*log10(retVal/Division);
 8005d84:	193b      	adds	r3, r7, r4
 8005d86:	2200      	movs	r2, #0
 8005d88:	5e9b      	ldrsh	r3, [r3, r2]
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f7fb fbe4 	bl	8001558 <__aeabi_i2f>
 8005d90:	1c03      	adds	r3, r0, #0
 8005d92:	6939      	ldr	r1, [r7, #16]
 8005d94:	1c18      	adds	r0, r3, #0
 8005d96:	f7fa fee1 	bl	8000b5c <__aeabi_fdiv>
 8005d9a:	1c03      	adds	r3, r0, #0
 8005d9c:	1c18      	adds	r0, r3, #0
 8005d9e:	f7fd fb25 	bl	80033ec <__aeabi_f2d>
 8005da2:	0002      	movs	r2, r0
 8005da4:	000b      	movs	r3, r1
 8005da6:	0010      	movs	r0, r2
 8005da8:	0019      	movs	r1, r3
 8005daa:	f00d ff05 	bl	8013bb8 <log10>
 8005dae:	2200      	movs	r2, #0
 8005db0:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <GetOctave+0xe4>)
 8005db2:	f7fc fc07 	bl	80025c4 <__aeabi_dmul>
 8005db6:	0002      	movs	r2, r0
 8005db8:	000b      	movs	r3, r1
 8005dba:	0010      	movs	r0, r2
 8005dbc:	0019      	movs	r1, r3
 8005dbe:	f7fd fb5d 	bl	800347c <__aeabi_d2f>
 8005dc2:	1c03      	adds	r3, r0, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  return(dB);
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7fb fba6 	bl	8001518 <__aeabi_f2iz>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	b21b      	sxth	r3, r3
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b007      	add	sp, #28
 8005dd6:	bd90      	pop	{r4, r7, pc}
 8005dd8:	46fffe00 	.word	0x46fffe00
 8005ddc:	20001b68 	.word	0x20001b68
 8005de0:	40240000 	.word	0x40240000

08005de4 <GetAllOctaves>:

void GetAllOctaves(){
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  OCT[0] = GetOctave(2, 3); // 31.5 centre should be at 4
 8005de8:	2103      	movs	r1, #3
 8005dea:	2002      	movs	r0, #2
 8005dec:	f7ff ff86 	bl	8005cfc <GetOctave>
 8005df0:	0003      	movs	r3, r0
 8005df2:	0018      	movs	r0, r3
 8005df4:	f7fb fbb0 	bl	8001558 <__aeabi_i2f>
 8005df8:	1c02      	adds	r2, r0, #0
 8005dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8005e74 <GetAllOctaves+0x90>)
 8005dfc:	601a      	str	r2, [r3, #0]
  OCT[1] = GetOctave(4, 6); // 63 centre should be at 8
 8005dfe:	2106      	movs	r1, #6
 8005e00:	2004      	movs	r0, #4
 8005e02:	f7ff ff7b 	bl	8005cfc <GetOctave>
 8005e06:	0003      	movs	r3, r0
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f7fb fba5 	bl	8001558 <__aeabi_i2f>
 8005e0e:	1c02      	adds	r2, r0, #0
 8005e10:	4b18      	ldr	r3, [pc, #96]	@ (8005e74 <GetAllOctaves+0x90>)
 8005e12:	605a      	str	r2, [r3, #4]
  OCT[2] = GetOctave(6, 13); // 125 centre should be at 16
 8005e14:	210d      	movs	r1, #13
 8005e16:	2006      	movs	r0, #6
 8005e18:	f7ff ff70 	bl	8005cfc <GetOctave>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f7fb fb9a 	bl	8001558 <__aeabi_i2f>
 8005e24:	1c02      	adds	r2, r0, #0
 8005e26:	4b13      	ldr	r3, [pc, #76]	@ (8005e74 <GetAllOctaves+0x90>)
 8005e28:	609a      	str	r2, [r3, #8]
  OCT[3] = GetOctave(13, 27); // 250 centre should be at 33
 8005e2a:	211b      	movs	r1, #27
 8005e2c:	200d      	movs	r0, #13
 8005e2e:	f7ff ff65 	bl	8005cfc <GetOctave>
 8005e32:	0003      	movs	r3, r0
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7fb fb8f 	bl	8001558 <__aeabi_i2f>
 8005e3a:	1c02      	adds	r2, r0, #0
 8005e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <GetAllOctaves+0x90>)
 8005e3e:	60da      	str	r2, [r3, #12]
  OCT[4] = GetOctave(22 ,55); // 500 centre should be at 66
 8005e40:	2137      	movs	r1, #55	@ 0x37
 8005e42:	2016      	movs	r0, #22
 8005e44:	f7ff ff5a 	bl	8005cfc <GetOctave>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7fb fb84 	bl	8001558 <__aeabi_i2f>
 8005e50:	1c02      	adds	r2, r0, #0
 8005e52:	4b08      	ldr	r3, [pc, #32]	@ (8005e74 <GetAllOctaves+0x90>)
 8005e54:	611a      	str	r2, [r3, #16]
  OCT[5] = GetOctave(46 , 109); // 1000 centre should be at 132
 8005e56:	216d      	movs	r1, #109	@ 0x6d
 8005e58:	202e      	movs	r0, #46	@ 0x2e
 8005e5a:	f7ff ff4f 	bl	8005cfc <GetOctave>
 8005e5e:	0003      	movs	r3, r0
 8005e60:	0018      	movs	r0, r3
 8005e62:	f7fb fb79 	bl	8001558 <__aeabi_i2f>
 8005e66:	1c02      	adds	r2, r0, #0
 8005e68:	4b02      	ldr	r3, [pc, #8]	@ (8005e74 <GetAllOctaves+0x90>)
 8005e6a:	615a      	str	r2, [r3, #20]
  //OCT[6] = output[64]*0; //2000

}
 8005e6c:	46c0      	nop			@ (mov r8, r8)
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	46c0      	nop			@ (mov r8, r8)
 8005e74:	20002374 	.word	0x20002374

08005e78 <Downscale>:
void Downscale(uint16_t downscaleFactor){
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	0002      	movs	r2, r0
 8005e80:	1dbb      	adds	r3, r7, #6
 8005e82:	801a      	strh	r2, [r3, #0]
  for(uint16_t i = 0; i <512; i++){
 8005e84:	230e      	movs	r3, #14
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	2200      	movs	r2, #0
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	e019      	b.n	8005ec2 <Downscale+0x4a>
    output[i] = output[i] / downscaleFactor;
 8005e8e:	240e      	movs	r4, #14
 8005e90:	193b      	adds	r3, r7, r4
 8005e92:	881a      	ldrh	r2, [r3, #0]
 8005e94:	4b11      	ldr	r3, [pc, #68]	@ (8005edc <Downscale+0x64>)
 8005e96:	0052      	lsls	r2, r2, #1
 8005e98:	5ed3      	ldrsh	r3, [r2, r3]
 8005e9a:	001a      	movs	r2, r3
 8005e9c:	1dbb      	adds	r3, r7, #6
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	0019      	movs	r1, r3
 8005ea2:	0010      	movs	r0, r2
 8005ea4:	f7fa f9fe 	bl	80002a4 <__divsi3>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	0019      	movs	r1, r3
 8005eac:	193b      	adds	r3, r7, r4
 8005eae:	881a      	ldrh	r2, [r3, #0]
 8005eb0:	b209      	sxth	r1, r1
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <Downscale+0x64>)
 8005eb4:	0052      	lsls	r2, r2, #1
 8005eb6:	52d1      	strh	r1, [r2, r3]
  for(uint16_t i = 0; i <512; i++){
 8005eb8:	193b      	adds	r3, r7, r4
 8005eba:	881a      	ldrh	r2, [r3, #0]
 8005ebc:	193b      	adds	r3, r7, r4
 8005ebe:	3201      	adds	r2, #1
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	230e      	movs	r3, #14
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	881a      	ldrh	r2, [r3, #0]
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d3de      	bcc.n	8005e8e <Downscale+0x16>
  }
}
 8005ed0:	46c0      	nop			@ (mov r8, r8)
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b005      	add	sp, #20
 8005ed8:	bd90      	pop	{r4, r7, pc}
 8005eda:	46c0      	nop			@ (mov r8, r8)
 8005edc:	20001b68 	.word	0x20001b68

08005ee0 <FFT>:

void FFT(){
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
  static arm_rfft_instance_q15 fft_instance;
  arm_status status;
  status = arm_rfft_init_q15(&fft_instance, 512, 1, 1);
 8005ee6:	1dfc      	adds	r4, r7, #7
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	0099      	lsls	r1, r3, #2
 8005eec:	480e      	ldr	r0, [pc, #56]	@ (8005f28 <FFT+0x48>)
 8005eee:	2301      	movs	r3, #1
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f009 fd3b 	bl	800f96c <arm_rfft_init_q15>
 8005ef6:	0003      	movs	r3, r0
 8005ef8:	7023      	strb	r3, [r4, #0]
  arm_rfft_q15(&fft_instance, sample, output);
 8005efa:	4a0c      	ldr	r2, [pc, #48]	@ (8005f2c <FFT+0x4c>)
 8005efc:	490c      	ldr	r1, [pc, #48]	@ (8005f30 <FFT+0x50>)
 8005efe:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <FFT+0x48>)
 8005f00:	0018      	movs	r0, r3
 8005f02:	f009 fc9f 	bl	800f844 <arm_rfft_q15>
  arm_abs_q15(output, output, 512);
 8005f06:	2380      	movs	r3, #128	@ 0x80
 8005f08:	009a      	lsls	r2, r3, #2
 8005f0a:	4908      	ldr	r1, [pc, #32]	@ (8005f2c <FFT+0x4c>)
 8005f0c:	4b07      	ldr	r3, [pc, #28]	@ (8005f2c <FFT+0x4c>)
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f009 fe0c 	bl	800fb2c <arm_abs_q15>
  Downscale(4);
 8005f14:	2004      	movs	r0, #4
 8005f16:	f7ff ffaf 	bl	8005e78 <Downscale>
  GetAllOctaves();
 8005f1a:	f7ff ff63 	bl	8005de4 <GetAllOctaves>
}
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b003      	add	sp, #12
 8005f24:	bd90      	pop	{r4, r7, pc}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	2000279c 	.word	0x2000279c
 8005f2c:	20001b68 	.word	0x20001b68
 8005f30:	2000239c 	.word	0x2000239c

08005f34 <MIC_Start>:

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8005f34:	b5b0      	push	{r4, r5, r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	000a      	movs	r2, r1
 8005f3e:	1cbb      	adds	r3, r7, #2
 8005f40:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8005f42:	4b20      	ldr	r3, [pc, #128]	@ (8005fc4 <MIC_Start+0x90>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8005f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc8 <MIC_Start+0x94>)
 8005f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8005fcc <MIC_Start+0x98>)
 8005f4e:	0019      	movs	r1, r3
 8005f50:	2001      	movs	r0, #1
 8005f52:	f002 f9bf 	bl	80082d4 <CreateLine>
    return;
 8005f56:	e031      	b.n	8005fbc <MIC_Start+0x88>
  }
  Debug("In mic start");
 8005f58:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <MIC_Start+0x9c>)
 8005f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd4 <MIC_Start+0xa0>)
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	2003      	movs	r0, #3
 8005f60:	f002 f9b8 	bl	80082d4 <CreateLine>
  UpdateSampleRate(sampleRate);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	0018      	movs	r0, r3
 8005f68:	f7ff fe60 	bl	8005c2c <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8005f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <MIC_Start+0xa4>)
 8005f6e:	1cba      	adds	r2, r7, #2
 8005f70:	8812      	ldrh	r2, [r2, #0]
 8005f72:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 8005f74:	f002 fa3a 	bl	80083ec <GetCurrentHalTicks>
 8005f78:	0002      	movs	r2, r0
 8005f7a:	4b18      	ldr	r3, [pc, #96]	@ (8005fdc <MIC_Start+0xa8>)
 8005f7c:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 8005f7e:	4b17      	ldr	r3, [pc, #92]	@ (8005fdc <MIC_Start+0xa8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	001a      	movs	r2, r3
 8005f86:	4b16      	ldr	r3, [pc, #88]	@ (8005fe0 <MIC_Start+0xac>)
 8005f88:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8005f8a:	4b16      	ldr	r3, [pc, #88]	@ (8005fe4 <MIC_Start+0xb0>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8005f90:	4b15      	ldr	r3, [pc, #84]	@ (8005fe8 <MIC_Start+0xb4>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NR_SAMPLES_512*2);
 8005f96:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <MIC_Start+0x90>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	250f      	movs	r5, #15
 8005f9c:	197c      	adds	r4, r7, r5
 8005f9e:	2280      	movs	r2, #128	@ 0x80
 8005fa0:	00d2      	lsls	r2, r2, #3
 8005fa2:	4912      	ldr	r1, [pc, #72]	@ (8005fec <MIC_Start+0xb8>)
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f006 f889 	bl	800c0bc <HAL_I2S_Receive_DMA>
 8005faa:	0003      	movs	r3, r0
 8005fac:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8005fae:	197b      	adds	r3, r7, r5
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8005ff0 <MIC_Start+0xbc>)
 8005fb4:	490f      	ldr	r1, [pc, #60]	@ (8005ff4 <MIC_Start+0xc0>)
 8005fb6:	2002      	movs	r0, #2
 8005fb8:	f002 f98c 	bl	80082d4 <CreateLine>
}
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	b004      	add	sp, #16
 8005fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fc2:	46c0      	nop			@ (mov r8, r8)
 8005fc4:	20000b64 	.word	0x20000b64
 8005fc8:	08014994 	.word	0x08014994
 8005fcc:	080149b4 	.word	0x080149b4
 8005fd0:	080149b8 	.word	0x080149b8
 8005fd4:	080149c8 	.word	0x080149c8
 8005fd8:	20000100 	.word	0x20000100
 8005fdc:	20002368 	.word	0x20002368
 8005fe0:	2000236c 	.word	0x2000236c
 8005fe4:	20002370 	.word	0x20002370
 8005fe8:	20002371 	.word	0x20002371
 8005fec:	20000b68 	.word	0x20000b68
 8005ff0:	080149cc 	.word	0x080149cc
 8005ff4:	080149d8 	.word	0x080149d8

08005ff8 <MinimalValue>:

//static void MIC_ProcessFFT() {
//  CalculateFFT();
//}
int16_t MinimalValue(uint16_t length){
 8005ff8:	b590      	push	{r4, r7, lr}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	0002      	movs	r2, r0
 8006000:	1dbb      	adds	r3, r7, #6
 8006002:	801a      	strh	r2, [r3, #0]
  int16_t MinVal = 32767;
 8006004:	230e      	movs	r3, #14
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	4a1a      	ldr	r2, [pc, #104]	@ (8006074 <MinimalValue+0x7c>)
 800600a:	801a      	strh	r2, [r3, #0]
  int16_t i;
  for(i =0; i<length;i++){
 800600c:	230c      	movs	r3, #12
 800600e:	18fb      	adds	r3, r7, r3
 8006010:	2200      	movs	r2, #0
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e01d      	b.n	8006052 <MinimalValue+0x5a>
    if(sample[i] < MinVal){
 8006016:	210c      	movs	r1, #12
 8006018:	187b      	adds	r3, r7, r1
 800601a:	2200      	movs	r2, #0
 800601c:	5e9a      	ldrsh	r2, [r3, r2]
 800601e:	4b16      	ldr	r3, [pc, #88]	@ (8006078 <MinimalValue+0x80>)
 8006020:	0052      	lsls	r2, r2, #1
 8006022:	5ed3      	ldrsh	r3, [r2, r3]
 8006024:	200e      	movs	r0, #14
 8006026:	183a      	adds	r2, r7, r0
 8006028:	2400      	movs	r4, #0
 800602a:	5f12      	ldrsh	r2, [r2, r4]
 800602c:	429a      	cmp	r2, r3
 800602e:	dd07      	ble.n	8006040 <MinimalValue+0x48>
      MinVal = sample[i];
 8006030:	187b      	adds	r3, r7, r1
 8006032:	2100      	movs	r1, #0
 8006034:	5e59      	ldrsh	r1, [r3, r1]
 8006036:	183b      	adds	r3, r7, r0
 8006038:	4a0f      	ldr	r2, [pc, #60]	@ (8006078 <MinimalValue+0x80>)
 800603a:	0049      	lsls	r1, r1, #1
 800603c:	5a8a      	ldrh	r2, [r1, r2]
 800603e:	801a      	strh	r2, [r3, #0]
  for(i =0; i<length;i++){
 8006040:	210c      	movs	r1, #12
 8006042:	187b      	adds	r3, r7, r1
 8006044:	2200      	movs	r2, #0
 8006046:	5e9b      	ldrsh	r3, [r3, r2]
 8006048:	b29b      	uxth	r3, r3
 800604a:	3301      	adds	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	187b      	adds	r3, r7, r1
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	230c      	movs	r3, #12
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	2200      	movs	r2, #0
 8006058:	5e9a      	ldrsh	r2, [r3, r2]
 800605a:	1dbb      	adds	r3, r7, #6
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	dbd9      	blt.n	8006016 <MinimalValue+0x1e>
    }
  }
  return(MinVal);
 8006062:	230e      	movs	r3, #14
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	2200      	movs	r2, #0
 8006068:	5e9b      	ldrsh	r3, [r3, r2]
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b005      	add	sp, #20
 8006070:	bd90      	pop	{r4, r7, pc}
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	00007fff 	.word	0x00007fff
 8006078:	2000239c 	.word	0x2000239c

0800607c <MaximalValue>:

int16_t MaximalValue(uint16_t length){
 800607c:	b590      	push	{r4, r7, lr}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	0002      	movs	r2, r0
 8006084:	1dbb      	adds	r3, r7, #6
 8006086:	801a      	strh	r2, [r3, #0]
  int16_t MaxVal = -32768;
 8006088:	230e      	movs	r3, #14
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	4a1a      	ldr	r2, [pc, #104]	@ (80060f8 <MaximalValue+0x7c>)
 800608e:	801a      	strh	r2, [r3, #0]
  int16_t i;
  for(i =0; i<length;i++){
 8006090:	230c      	movs	r3, #12
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	2200      	movs	r2, #0
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e01d      	b.n	80060d6 <MaximalValue+0x5a>
    if(sample[i] > MaxVal){
 800609a:	210c      	movs	r1, #12
 800609c:	187b      	adds	r3, r7, r1
 800609e:	2200      	movs	r2, #0
 80060a0:	5e9a      	ldrsh	r2, [r3, r2]
 80060a2:	4b16      	ldr	r3, [pc, #88]	@ (80060fc <MaximalValue+0x80>)
 80060a4:	0052      	lsls	r2, r2, #1
 80060a6:	5ed3      	ldrsh	r3, [r2, r3]
 80060a8:	200e      	movs	r0, #14
 80060aa:	183a      	adds	r2, r7, r0
 80060ac:	2400      	movs	r4, #0
 80060ae:	5f12      	ldrsh	r2, [r2, r4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	da07      	bge.n	80060c4 <MaximalValue+0x48>
      MaxVal = sample[i];
 80060b4:	187b      	adds	r3, r7, r1
 80060b6:	2100      	movs	r1, #0
 80060b8:	5e59      	ldrsh	r1, [r3, r1]
 80060ba:	183b      	adds	r3, r7, r0
 80060bc:	4a0f      	ldr	r2, [pc, #60]	@ (80060fc <MaximalValue+0x80>)
 80060be:	0049      	lsls	r1, r1, #1
 80060c0:	5a8a      	ldrh	r2, [r1, r2]
 80060c2:	801a      	strh	r2, [r3, #0]
  for(i =0; i<length;i++){
 80060c4:	210c      	movs	r1, #12
 80060c6:	187b      	adds	r3, r7, r1
 80060c8:	2200      	movs	r2, #0
 80060ca:	5e9b      	ldrsh	r3, [r3, r2]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3301      	adds	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	187b      	adds	r3, r7, r1
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	230c      	movs	r3, #12
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	2200      	movs	r2, #0
 80060dc:	5e9a      	ldrsh	r2, [r3, r2]
 80060de:	1dbb      	adds	r3, r7, #6
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	dbd9      	blt.n	800609a <MaximalValue+0x1e>
    }
  }
  return(MaxVal);
 80060e6:	230e      	movs	r3, #14
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	2200      	movs	r2, #0
 80060ec:	5e9b      	ldrsh	r3, [r3, r2]
}
 80060ee:	0018      	movs	r0, r3
 80060f0:	46bd      	mov	sp, r7
 80060f2:	b005      	add	sp, #20
 80060f4:	bd90      	pop	{r4, r7, pc}
 80060f6:	46c0      	nop			@ (mov r8, r8)
 80060f8:	ffff8000 	.word	0xffff8000
 80060fc:	2000239c 	.word	0x2000239c

08006100 <MIC_Print>:

void MIC_Print(void) {
 8006100:	b5b0      	push	{r4, r5, r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006106:	4a22      	ldr	r2, [pc, #136]	@ (8006190 <MIC_Print+0x90>)
 8006108:	4b22      	ldr	r3, [pc, #136]	@ (8006194 <MIC_Print+0x94>)
 800610a:	0019      	movs	r1, r3
 800610c:	2002      	movs	r0, #2
 800610e:	f002 f8e1 	bl	80082d4 <CreateLine>
  for (uint16_t i = 0; i < 512; i += 1) {
 8006112:	230e      	movs	r3, #14
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	2200      	movs	r2, #0
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e016      	b.n	800614a <MIC_Print+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 800611c:	250e      	movs	r5, #14
 800611e:	197b      	adds	r3, r7, r5
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	3302      	adds	r3, #2
 8006126:	005a      	lsls	r2, r3, #1
 8006128:	4b1b      	ldr	r3, [pc, #108]	@ (8006198 <MIC_Print+0x98>)
 800612a:	18d2      	adds	r2, r2, r3
 800612c:	197b      	adds	r3, r7, r5
 800612e:	881c      	ldrh	r4, [r3, #0]
 8006130:	0010      	movs	r0, r2
 8006132:	f7ff fd9b 	bl	8005c6c <ConvertAudio>
 8006136:	0003      	movs	r3, r0
 8006138:	0019      	movs	r1, r3
 800613a:	4b18      	ldr	r3, [pc, #96]	@ (800619c <MIC_Print+0x9c>)
 800613c:	0062      	lsls	r2, r4, #1
 800613e:	52d1      	strh	r1, [r2, r3]
  for (uint16_t i = 0; i < 512; i += 1) {
 8006140:	197b      	adds	r3, r7, r5
 8006142:	197a      	adds	r2, r7, r5
 8006144:	8812      	ldrh	r2, [r2, #0]
 8006146:	3201      	adds	r2, #1
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	230e      	movs	r3, #14
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	2380      	movs	r3, #128	@ 0x80
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	429a      	cmp	r2, r3
 8006156:	d3e1      	bcc.n	800611c <MIC_Print+0x1c>
    //Info("0x%08x", sample);
  }
  //filter();
  Min = MinimalValue(512);
 8006158:	2380      	movs	r3, #128	@ 0x80
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	0018      	movs	r0, r3
 800615e:	f7ff ff4b 	bl	8005ff8 <MinimalValue>
 8006162:	0003      	movs	r3, r0
 8006164:	0018      	movs	r0, r3
 8006166:	f7fb f9f7 	bl	8001558 <__aeabi_i2f>
 800616a:	1c03      	adds	r3, r0, #0
 800616c:	60bb      	str	r3, [r7, #8]
  Max = MaximalValue(512);
 800616e:	2380      	movs	r3, #128	@ 0x80
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	0018      	movs	r0, r3
 8006174:	f7ff ff82 	bl	800607c <MaximalValue>
 8006178:	0003      	movs	r3, r0
 800617a:	0018      	movs	r0, r3
 800617c:	f7fb f9ec 	bl	8001558 <__aeabi_i2f>
 8006180:	1c03      	adds	r3, r0, #0
 8006182:	607b      	str	r3, [r7, #4]
//    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
//  }

  FFT();
 8006184:	f7ff feac 	bl	8005ee0 <FFT>
}
 8006188:	46c0      	nop			@ (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b004      	add	sp, #16
 800618e:	bdb0      	pop	{r4, r5, r7, pc}
 8006190:	080149dc 	.word	0x080149dc
 8006194:	080149d8 	.word	0x080149d8
 8006198:	20000b68 	.word	0x20000b68
 800619c:	2000239c 	.word	0x2000239c

080061a0 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  if(DataReady) {
 80061a4:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <MIC_MeasurementDone+0x2c>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <MIC_MeasurementDone+0x24>
    MIC_Print();
 80061ae:	f7ff ffa7 	bl	8006100 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 80061b2:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <MIC_MeasurementDone+0x30>)
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	4a07      	ldr	r2, [pc, #28]	@ (80061d4 <MIC_MeasurementDone+0x34>)
 80061b8:	4907      	ldr	r1, [pc, #28]	@ (80061d8 <MIC_MeasurementDone+0x38>)
 80061ba:	2003      	movs	r0, #3
 80061bc:	f002 f88a 	bl	80082d4 <CreateLine>
    return true;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <MIC_MeasurementDone+0x26>
  }
  return false;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	0018      	movs	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20002371 	.word	0x20002371
 80061d0:	20000100 	.word	0x20000100
 80061d4:	080149e8 	.word	0x080149e8
 80061d8:	080149c8 	.word	0x080149c8

080061dc <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80061e4:	4b10      	ldr	r3, [pc, #64]	@ (8006228 <HAL_I2S_RxCpltCallback+0x4c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d118      	bne.n	8006220 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 80061ee:	4b0f      	ldr	r3, [pc, #60]	@ (800622c <HAL_I2S_RxCpltCallback+0x50>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 80061f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006228 <HAL_I2S_RxCpltCallback+0x4c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f006 f81f 	bl	800c240 <HAL_I2S_DMAStop>
    DataReady = true;
 8006202:	4b0b      	ldr	r3, [pc, #44]	@ (8006230 <HAL_I2S_RxCpltCallback+0x54>)
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e00b      	b.n	8006222 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 800620a:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <HAL_I2S_RxCpltCallback+0x58>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	0018      	movs	r0, r3
 8006210:	f002 f80a 	bl	8008228 <TimestampIsReached>
 8006214:	1e03      	subs	r3, r0, #0
 8006216:	d004      	beq.n	8006222 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8006218:	4b04      	ldr	r3, [pc, #16]	@ (800622c <HAL_I2S_RxCpltCallback+0x50>)
 800621a:	2201      	movs	r2, #1
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e000      	b.n	8006222 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8006220:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8006222:	46bd      	mov	sp, r7
 8006224:	b002      	add	sp, #8
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000b64 	.word	0x20000b64
 800622c:	20002370 	.word	0x20002370
 8006230:	20002371 	.word	0x20002371
 8006234:	2000236c 	.word	0x2000236c

08006238 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d113      	bne.n	800627e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	22fe      	movs	r2, #254	@ 0xfe
 800625a:	0592      	lsls	r2, r2, #22
 800625c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a1a      	ldr	r2, [pc, #104]	@ (80062cc <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8006262:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a1a      	ldr	r2, [pc, #104]	@ (80062d0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8006268:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a19      	ldr	r2, [pc, #100]	@ (80062d4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800626e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a19      	ldr	r2, [pc, #100]	@ (80062d8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8006274:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a18      	ldr	r2, [pc, #96]	@ (80062dc <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800627a:	61da      	str	r2, [r3, #28]
 800627c:	e011      	b.n	80062a2 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4a17      	ldr	r2, [pc, #92]	@ (80062e0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8006282:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a17      	ldr	r2, [pc, #92]	@ (80062e4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8006288:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a16      	ldr	r2, [pc, #88]	@ (80062e8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800628e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a16      	ldr	r2, [pc, #88]	@ (80062ec <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8006294:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4a15      	ldr	r2, [pc, #84]	@ (80062f0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800629a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a15      	ldr	r2, [pc, #84]	@ (80062f4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80062a0:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a14      	ldr	r2, [pc, #80]	@ (80062f8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80062a6:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a14      	ldr	r2, [pc, #80]	@ (80062fc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80062ac:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4a12      	ldr	r2, [pc, #72]	@ (80062fc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80062b2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a12      	ldr	r2, [pc, #72]	@ (8006300 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80062b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	0018      	movs	r0, r3
 80062be:	f000 f831 	bl	8006324 <GasIndexAlgorithm_reset>
}
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b004      	add	sp, #16
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			@ (mov r8, r8)
 80062cc:	00002710 	.word	0x00002710
 80062d0:	44340000 	.word	0x44340000
 80062d4:	46859800 	.word	0x46859800
 80062d8:	46a05000 	.word	0x46a05000
 80062dc:	41f00000 	.word	0x41f00000
 80062e0:	42c80000 	.word	0x42c80000
 80062e4:	00004e20 	.word	0x00004e20
 80062e8:	43340000 	.word	0x43340000
 80062ec:	4528c000 	.word	0x4528c000
 80062f0:	45a32000 	.word	0x45a32000
 80062f4:	43aa0000 	.word	0x43aa0000
 80062f8:	43660000 	.word	0x43660000
 80062fc:	41400000 	.word	0x41400000
 8006300:	42480000 	.word	0x42480000

08006304 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800630e:	22fe      	movs	r2, #254	@ 0xfe
 8006310:	0592      	lsls	r2, r2, #22
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	0018      	movs	r0, r3
 8006318:	f7ff ff8e 	bl	8006238 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800631c:	46c0      	nop			@ (mov r8, r8)
 800631e:	46bd      	mov	sp, r7
 8006320:	b002      	add	sp, #8
 8006322:	bd80      	pop	{r7, pc}

08006324 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0018      	movs	r0, r3
 8006342:	f000 f805 	bl	8006350 <GasIndexAlgorithm__init_instances>
}
 8006346:	46c0      	nop			@ (mov r8, r8)
 8006348:	46bd      	mov	sp, r7
 800634a:	b002      	add	sp, #8
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8006350:	b590      	push	{r4, r7, lr}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	0018      	movs	r0, r3
 800635c:	f000 f8e8 	bl	8006530 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	0018      	movs	r0, r3
 8006364:	f000 f9a6 	bl	80066b4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006368:	1c04      	adds	r4, r0, #0
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0018      	movs	r0, r3
 800636e:	f000 f9ab 	bl	80066c8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006372:	1c02      	adds	r2, r0, #0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	1c21      	adds	r1, r4, #0
 8006378:	0018      	movs	r0, r3
 800637a:	f000 fc3b 	bl	8006bf4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d107      	bne.n	8006396 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006386:	23fe      	movs	r3, #254	@ 0xfe
 8006388:	059b      	lsls	r3, r3, #22
 800638a:	4a0a      	ldr	r2, [pc, #40]	@ (80063b4 <GasIndexAlgorithm__init_instances+0x64>)
 800638c:	490a      	ldr	r1, [pc, #40]	@ (80063b8 <GasIndexAlgorithm__init_instances+0x68>)
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fc86 	bl	8006ca0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8006394:	e005      	b.n	80063a2 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006396:	4b09      	ldr	r3, [pc, #36]	@ (80063bc <GasIndexAlgorithm__init_instances+0x6c>)
 8006398:	4a09      	ldr	r2, [pc, #36]	@ (80063c0 <GasIndexAlgorithm__init_instances+0x70>)
 800639a:	490a      	ldr	r1, [pc, #40]	@ (80063c4 <GasIndexAlgorithm__init_instances+0x74>)
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fc7f 	bl	8006ca0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	0018      	movs	r0, r3
 80063a6:	f000 fd35 	bl	8006e14 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 80063aa:	46c0      	nop			@ (mov r8, r8)
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b003      	add	sp, #12
 80063b0:	bd90      	pop	{r4, r7, pc}
 80063b2:	46c0      	nop			@ (mov r8, r8)
 80063b4:	bc257a78 	.word	0xbc257a78
 80063b8:	44198000 	.word	0x44198000
 80063bc:	42c80000 	.word	0x42c80000
 80063c0:	bbd4fdf4 	.word	0xbbd4fdf4
 80063c4:	43550000 	.word	0x43550000

080063c8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d8:	4952      	ldr	r1, [pc, #328]	@ (8006524 <GasIndexAlgorithm_process+0x15c>)
 80063da:	1c18      	adds	r0, r3, #0
 80063dc:	f7fa f8a8 	bl	8000530 <__aeabi_fcmple>
 80063e0:	1e03      	subs	r3, r0, #0
 80063e2:	d00c      	beq.n	80063fe <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	1c19      	adds	r1, r3, #0
 80063ee:	1c10      	adds	r0, r2, #0
 80063f0:	f7fa fa2a 	bl	8000848 <__aeabi_fadd>
 80063f4:	1c03      	adds	r3, r0, #0
 80063f6:	1c1a      	adds	r2, r3, #0
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80063fc:	e080      	b.n	8006500 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	dd25      	ble.n	8006450 <GasIndexAlgorithm_process+0x88>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	4a48      	ldr	r2, [pc, #288]	@ (8006528 <GasIndexAlgorithm_process+0x160>)
 8006408:	4293      	cmp	r3, r2
 800640a:	dc21      	bgt.n	8006450 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	429a      	cmp	r2, r3
 8006414:	dc04      	bgt.n	8006420 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60bb      	str	r3, [r7, #8]
 800641e:	e00d      	b.n	800643c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4a41      	ldr	r2, [pc, #260]	@ (800652c <GasIndexAlgorithm_process+0x164>)
 8006426:	4694      	mov	ip, r2
 8006428:	4463      	add	r3, ip
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	429a      	cmp	r2, r3
 800642e:	dd05      	ble.n	800643c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	4a3d      	ldr	r2, [pc, #244]	@ (800652c <GasIndexAlgorithm_process+0x164>)
 8006436:	4694      	mov	ip, r2
 8006438:	4463      	add	r3, ip
 800643a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	0018      	movs	r0, r3
 8006446:	f7fb f887 	bl	8001558 <__aeabi_i2f>
 800644a:	1c02      	adds	r2, r0, #0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	0018      	movs	r0, r3
 800645c:	f000 f945 	bl	80066ea <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8006460:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8006462:	d014      	beq.n	800648e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1c11      	adds	r1, r2, #0
 800646c:	0018      	movs	r0, r3
 800646e:	f000 fbd1 	bl	8006c14 <GasIndexAlgorithm__mox_model__process>
 8006472:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1c11      	adds	r1, r2, #0
 8006480:	0018      	movs	r0, r3
 8006482:	f000 fc25 	bl	8006cd0 <GasIndexAlgorithm__sigmoid_scaled__process>
 8006486:	1c02      	adds	r2, r0, #0
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	639a      	str	r2, [r3, #56]	@ 0x38
 800648c:	e003      	b.n	8006496 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	1c11      	adds	r1, r2, #0
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 fcec 	bl	8006e7c <GasIndexAlgorithm__adaptive_lowpass__process>
 80064a4:	1c02      	adds	r2, r0, #0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ae:	21fc      	movs	r1, #252	@ 0xfc
 80064b0:	0589      	lsls	r1, r1, #22
 80064b2:	1c18      	adds	r0, r3, #0
 80064b4:	f7fa f832 	bl	800051c <__aeabi_fcmplt>
 80064b8:	1e03      	subs	r3, r0, #0
 80064ba:	d003      	beq.n	80064c4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	22fc      	movs	r2, #252	@ 0xfc
 80064c0:	0592      	lsls	r2, r2, #22
 80064c2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c8:	2100      	movs	r1, #0
 80064ca:	1c18      	adds	r0, r3, #0
 80064cc:	f7fa f83a 	bl	8000544 <__aeabi_fcmpgt>
 80064d0:	1e03      	subs	r3, r0, #0
 80064d2:	d015      	beq.n	8006500 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	1c11      	adds	r1, r2, #0
 80064dc:	0018      	movs	r0, r3
 80064de:	f000 fa4f 	bl	8006980 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	0018      	movs	r0, r3
 80064e6:	f000 f8e5 	bl	80066b4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80064ea:	1c04      	adds	r4, r0, #0
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	0018      	movs	r0, r3
 80064f0:	f000 f8ea 	bl	80066c8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80064f4:	1c02      	adds	r2, r0, #0
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1c21      	adds	r1, r4, #0
 80064fa:	0018      	movs	r0, r3
 80064fc:	f000 fb7a 	bl	8006bf4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006504:	21fc      	movs	r1, #252	@ 0xfc
 8006506:	0589      	lsls	r1, r1, #22
 8006508:	1c18      	adds	r0, r3, #0
 800650a:	f7fa f99d 	bl	8000848 <__aeabi_fadd>
 800650e:	1c03      	adds	r3, r0, #0
 8006510:	1c18      	adds	r0, r3, #0
 8006512:	f7fb f801 	bl	8001518 <__aeabi_f2iz>
 8006516:	0002      	movs	r2, r0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
    return;
 800651c:	46c0      	nop			@ (mov r8, r8)
}
 800651e:	46bd      	mov	sp, r7
 8006520:	b005      	add	sp, #20
 8006522:	bd90      	pop	{r4, r7, pc}
 8006524:	42340000 	.word	0x42340000
 8006528:	0000fde7 	.word	0x0000fde7
 800652c:	00007fff 	.word	0x00007fff

08006530 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006530:	b5b0      	push	{r4, r5, r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	223c      	movs	r2, #60	@ 0x3c
 800653c:	2100      	movs	r1, #0
 800653e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	4952      	ldr	r1, [pc, #328]	@ (80066a4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800655a:	1c18      	adds	r0, r3, #0
 800655c:	f7fa fafe 	bl	8000b5c <__aeabi_fdiv>
 8006560:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006562:	2188      	movs	r1, #136	@ 0x88
 8006564:	05c9      	lsls	r1, r1, #23
 8006566:	1c18      	adds	r0, r3, #0
 8006568:	f7fa fcde 	bl	8000f28 <__aeabi_fmul>
 800656c:	1c03      	adds	r3, r0, #0
 800656e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	494a      	ldr	r1, [pc, #296]	@ (80066a4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800657a:	1c18      	adds	r0, r3, #0
 800657c:	f7fa faee 	bl	8000b5c <__aeabi_fdiv>
 8006580:	1c03      	adds	r3, r0, #0
 8006582:	1c19      	adds	r1, r3, #0
 8006584:	1c20      	adds	r0, r4, #0
 8006586:	f7fa f95f 	bl	8000848 <__aeabi_fadd>
 800658a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800658c:	1c19      	adds	r1, r3, #0
 800658e:	1c28      	adds	r0, r5, #0
 8006590:	f7fa fae4 	bl	8000b5c <__aeabi_fdiv>
 8006594:	1c03      	adds	r3, r0, #0
 8006596:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	4940      	ldr	r1, [pc, #256]	@ (80066a4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80065a2:	1c18      	adds	r0, r3, #0
 80065a4:	f7fa fada 	bl	8000b5c <__aeabi_fdiv>
 80065a8:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80065aa:	2185      	movs	r1, #133	@ 0x85
 80065ac:	05c9      	lsls	r1, r1, #23
 80065ae:	1c18      	adds	r0, r3, #0
 80065b0:	f7fa fcba 	bl	8000f28 <__aeabi_fmul>
 80065b4:	1c03      	adds	r3, r0, #0
 80065b6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4938      	ldr	r1, [pc, #224]	@ (80066a4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80065c2:	1c18      	adds	r0, r3, #0
 80065c4:	f7fa faca 	bl	8000b5c <__aeabi_fdiv>
 80065c8:	1c03      	adds	r3, r0, #0
 80065ca:	1c19      	adds	r1, r3, #0
 80065cc:	1c20      	adds	r0, r4, #0
 80065ce:	f7fa f93b 	bl	8000848 <__aeabi_fadd>
 80065d2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80065d4:	1c19      	adds	r1, r3, #0
 80065d6:	1c28      	adds	r0, r5, #0
 80065d8:	f7fa fac0 	bl	8000b5c <__aeabi_fdiv>
 80065dc:	1c03      	adds	r3, r0, #0
 80065de:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d118      	bne.n	800661e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80065f0:	2188      	movs	r1, #136	@ 0x88
 80065f2:	05c9      	lsls	r1, r1, #23
 80065f4:	1c18      	adds	r0, r3, #0
 80065f6:	f7fa fc97 	bl	8000f28 <__aeabi_fmul>
 80065fa:	1c03      	adds	r3, r0, #0
 80065fc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8006602:	4929      	ldr	r1, [pc, #164]	@ (80066a8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8006604:	1c18      	adds	r0, r3, #0
 8006606:	f7fa f91f 	bl	8000848 <__aeabi_fadd>
 800660a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800660c:	1c19      	adds	r1, r3, #0
 800660e:	1c20      	adds	r0, r4, #0
 8006610:	f7fa faa4 	bl	8000b5c <__aeabi_fdiv>
 8006614:	1c03      	adds	r3, r0, #0
 8006616:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	655a      	str	r2, [r3, #84]	@ 0x54
 800661c:	e017      	b.n	800664e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006622:	2188      	movs	r1, #136	@ 0x88
 8006624:	05c9      	lsls	r1, r1, #23
 8006626:	1c18      	adds	r0, r3, #0
 8006628:	f7fa fc7e 	bl	8000f28 <__aeabi_fmul>
 800662c:	1c03      	adds	r3, r0, #0
 800662e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8006634:	491d      	ldr	r1, [pc, #116]	@ (80066ac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8006636:	1c18      	adds	r0, r3, #0
 8006638:	f7fa f906 	bl	8000848 <__aeabi_fadd>
 800663c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800663e:	1c19      	adds	r1, r3, #0
 8006640:	1c20      	adds	r0, r4, #0
 8006642:	f7fa fa8b 	bl	8000b5c <__aeabi_fdiv>
 8006646:	1c03      	adds	r3, r0, #0
 8006648:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006652:	2185      	movs	r1, #133	@ 0x85
 8006654:	05c9      	lsls	r1, r1, #23
 8006656:	1c18      	adds	r0, r3, #0
 8006658:	f7fa fc66 	bl	8000f28 <__aeabi_fmul>
 800665c:	1c03      	adds	r3, r0, #0
 800665e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	4912      	ldr	r1, [pc, #72]	@ (80066b0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8006666:	1c18      	adds	r0, r3, #0
 8006668:	f7fa f8ee 	bl	8000848 <__aeabi_fadd>
 800666c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800666e:	1c19      	adds	r1, r3, #0
 8006670:	1c20      	adds	r0, r4, #0
 8006672:	f7fa fa73 	bl	8000b5c <__aeabi_fdiv>
 8006676:	1c03      	adds	r3, r0, #0
 8006678:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800669c:	46c0      	nop			@ (mov r8, r8)
 800669e:	46bd      	mov	sp, r7
 80066a0:	b002      	add	sp, #8
 80066a2:	bdb0      	pop	{r4, r5, r7, pc}
 80066a4:	45610000 	.word	0x45610000
 80066a8:	44960000 	.word	0x44960000
 80066ac:	41a00000 	.word	0x41a00000
 80066b0:	451c4000 	.word	0x451c4000

080066b4 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 80066c0:	1c18      	adds	r0, r3, #0
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b002      	add	sp, #8
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 80066d8:	1c19      	adds	r1, r3, #0
 80066da:	1c10      	adds	r0, r2, #0
 80066dc:	f7fa f8b4 	bl	8000848 <__aeabi_fadd>
 80066e0:	1c03      	adds	r3, r0, #0
}
 80066e2:	1c18      	adds	r0, r3, #0
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b002      	add	sp, #8
 80066e8:	bd80      	pop	{r7, pc}

080066ea <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	223c      	movs	r2, #60	@ 0x3c
 80066f6:	5c9b      	ldrb	r3, [r3, r2]
}
 80066f8:	0018      	movs	r0, r3
 80066fa:	46bd      	mov	sp, r7
 80066fc:	b002      	add	sp, #8
 80066fe:	bd80      	pop	{r7, pc}

08006700 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006700:	b5b0      	push	{r4, r5, r7, lr}
 8006702:	b08c      	sub	sp, #48	@ 0x30
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800670c:	1c19      	adds	r1, r3, #0
 800670e:	4895      	ldr	r0, [pc, #596]	@ (8006964 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8006710:	f7fa fd48 	bl	80011a4 <__aeabi_fsub>
 8006714:	1c03      	adds	r3, r0, #0
 8006716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800671c:	1c19      	adds	r1, r3, #0
 800671e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006720:	f7f9 ff10 	bl	8000544 <__aeabi_fcmpgt>
 8006724:	1e03      	subs	r3, r0, #0
 8006726:	d00b      	beq.n	8006740 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006730:	1c19      	adds	r1, r3, #0
 8006732:	1c10      	adds	r0, r2, #0
 8006734:	f7fa f888 	bl	8000848 <__aeabi_fadd>
 8006738:	1c03      	adds	r3, r0, #0
 800673a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006744:	1c19      	adds	r1, r3, #0
 8006746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006748:	f7f9 fefc 	bl	8000544 <__aeabi_fcmpgt>
 800674c:	1e03      	subs	r3, r0, #0
 800674e:	d00b      	beq.n	8006768 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006758:	1c19      	adds	r1, r3, #0
 800675a:	1c10      	adds	r0, r2, #0
 800675c:	f7fa f874 	bl	8000848 <__aeabi_fadd>
 8006760:	1c03      	adds	r3, r0, #0
 8006762:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6959      	ldr	r1, [r3, #20]
 800676c:	4a7e      	ldr	r2, [pc, #504]	@ (8006968 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	0018      	movs	r0, r3
 8006772:	f000 f9f1 	bl	8006b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	1c11      	adds	r1, r2, #0
 800677e:	0018      	movs	r0, r3
 8006780:	f000 f9fa 	bl	8006b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006784:	1c03      	adds	r3, r0, #0
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006794:	1c19      	adds	r1, r3, #0
 8006796:	1c10      	adds	r0, r2, #0
 8006798:	f7fa fd04 	bl	80011a4 <__aeabi_fsub>
 800679c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800679e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067a0:	1c18      	adds	r0, r3, #0
 80067a2:	f7fa fbc1 	bl	8000f28 <__aeabi_fmul>
 80067a6:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80067a8:	1c19      	adds	r1, r3, #0
 80067aa:	1c20      	adds	r0, r4, #0
 80067ac:	f7fa f84c 	bl	8000848 <__aeabi_fadd>
 80067b0:	1c03      	adds	r3, r0, #0
 80067b2:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80067bc:	1c19      	adds	r1, r3, #0
 80067be:	486b      	ldr	r0, [pc, #428]	@ (800696c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80067c0:	f7fa fcf0 	bl	80011a4 <__aeabi_fsub>
 80067c4:	1c03      	adds	r3, r0, #0
 80067c6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	1c11      	adds	r1, r2, #0
 80067d0:	0018      	movs	r0, r3
 80067d2:	f000 f9d1 	bl	8006b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80067d6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80067d8:	1c19      	adds	r1, r3, #0
 80067da:	1c28      	adds	r0, r5, #0
 80067dc:	f7fa fba4 	bl	8000f28 <__aeabi_fmul>
 80067e0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 80067e2:	1c19      	adds	r1, r3, #0
 80067e4:	1c20      	adds	r0, r4, #0
 80067e6:	f7fa f82f 	bl	8000848 <__aeabi_fadd>
 80067ea:	1c03      	adds	r3, r0, #0
 80067ec:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80067ee:	4a60      	ldr	r2, [pc, #384]	@ (8006970 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80067f0:	6a39      	ldr	r1, [r7, #32]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 f9af 	bl	8006b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	1c11      	adds	r1, r2, #0
 8006802:	0018      	movs	r0, r3
 8006804:	f000 f9b8 	bl	8006b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006808:	1c03      	adds	r3, r0, #0
 800680a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800680c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800680e:	69f8      	ldr	r0, [r7, #28]
 8006810:	f7fa fb8a 	bl	8000f28 <__aeabi_fmul>
 8006814:	1c03      	adds	r3, r0, #0
 8006816:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6999      	ldr	r1, [r3, #24]
 8006820:	4a51      	ldr	r2, [pc, #324]	@ (8006968 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0018      	movs	r0, r3
 8006826:	f000 f997 	bl	8006b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	1c11      	adds	r1, r2, #0
 8006832:	0018      	movs	r0, r3
 8006834:	f000 f9a0 	bl	8006b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006838:	1c03      	adds	r3, r0, #0
 800683a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8006848:	1c19      	adds	r1, r3, #0
 800684a:	1c10      	adds	r0, r2, #0
 800684c:	f7fa fcaa 	bl	80011a4 <__aeabi_fsub>
 8006850:	1c03      	adds	r3, r0, #0
 8006852:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8006854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006856:	69b8      	ldr	r0, [r7, #24]
 8006858:	f7fa fca4 	bl	80011a4 <__aeabi_fsub>
 800685c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800685e:	1c19      	adds	r1, r3, #0
 8006860:	1c28      	adds	r0, r5, #0
 8006862:	f7fa fb61 	bl	8000f28 <__aeabi_fmul>
 8006866:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8006868:	1c19      	adds	r1, r3, #0
 800686a:	1c20      	adds	r0, r4, #0
 800686c:	f7f9 ffec 	bl	8000848 <__aeabi_fadd>
 8006870:	1c03      	adds	r3, r0, #0
 8006872:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800687c:	1c19      	adds	r1, r3, #0
 800687e:	483b      	ldr	r0, [pc, #236]	@ (800696c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006880:	f7fa fc90 	bl	80011a4 <__aeabi_fsub>
 8006884:	1c03      	adds	r3, r0, #0
 8006886:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	1c11      	adds	r1, r2, #0
 8006890:	0018      	movs	r0, r3
 8006892:	f000 f971 	bl	8006b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006896:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006898:	1c19      	adds	r1, r3, #0
 800689a:	1c28      	adds	r0, r5, #0
 800689c:	f7fa fb44 	bl	8000f28 <__aeabi_fmul>
 80068a0:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80068a2:	1c19      	adds	r1, r3, #0
 80068a4:	1c20      	adds	r0, r4, #0
 80068a6:	f7f9 ffcf 	bl	8000848 <__aeabi_fadd>
 80068aa:	1c03      	adds	r3, r0, #0
 80068ac:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80068ae:	4a30      	ldr	r2, [pc, #192]	@ (8006970 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80068b0:	6939      	ldr	r1, [r7, #16]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 f94f 	bl	8006b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	1c11      	adds	r1, r2, #0
 80068c2:	0018      	movs	r0, r3
 80068c4:	f000 f958 	bl	8006b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80068c8:	1c03      	adds	r3, r0, #0
 80068ca:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 80068cc:	6979      	ldr	r1, [r7, #20]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7fa fb2a 	bl	8000f28 <__aeabi_fmul>
 80068d4:	1c03      	adds	r3, r0, #0
 80068d6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	4923      	ldr	r1, [pc, #140]	@ (8006974 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 80068e6:	1c18      	adds	r0, r3, #0
 80068e8:	f7fa f938 	bl	8000b5c <__aeabi_fdiv>
 80068ec:	1c03      	adds	r3, r0, #0
 80068ee:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 80068f0:	69f9      	ldr	r1, [r7, #28]
 80068f2:	20fe      	movs	r0, #254	@ 0xfe
 80068f4:	0580      	lsls	r0, r0, #22
 80068f6:	f7fa fc55 	bl	80011a4 <__aeabi_fsub>
 80068fa:	1c03      	adds	r3, r0, #0
 80068fc:	491e      	ldr	r1, [pc, #120]	@ (8006978 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 80068fe:	1c18      	adds	r0, r3, #0
 8006900:	f7fa fb12 	bl	8000f28 <__aeabi_fmul>
 8006904:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8006906:	491d      	ldr	r1, [pc, #116]	@ (800697c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8006908:	1c18      	adds	r0, r3, #0
 800690a:	f7fa fc4b 	bl	80011a4 <__aeabi_fsub>
 800690e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8006910:	1c19      	adds	r1, r3, #0
 8006912:	1c28      	adds	r0, r5, #0
 8006914:	f7fa fb08 	bl	8000f28 <__aeabi_fmul>
 8006918:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800691a:	1c19      	adds	r1, r3, #0
 800691c:	1c20      	adds	r0, r4, #0
 800691e:	f7f9 ff93 	bl	8000848 <__aeabi_fadd>
 8006922:	1c03      	adds	r3, r0, #0
 8006924:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800692e:	2100      	movs	r1, #0
 8006930:	1c18      	adds	r0, r3, #0
 8006932:	f7f9 fdf3 	bl	800051c <__aeabi_fcmplt>
 8006936:	1e03      	subs	r3, r0, #0
 8006938:	d002      	beq.n	8006940 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8006948:	1c19      	adds	r1, r3, #0
 800694a:	1c10      	adds	r0, r2, #0
 800694c:	f7f9 fdfa 	bl	8000544 <__aeabi_fcmpgt>
 8006950:	1e03      	subs	r3, r0, #0
 8006952:	d100      	bne.n	8006956 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8006954:	e002      	b.n	800695c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800695c:	46c0      	nop			@ (mov r8, r8)
 800695e:	46bd      	mov	sp, r7
 8006960:	b00c      	add	sp, #48	@ 0x30
 8006962:	bdb0      	pop	{r4, r5, r7, pc}
 8006964:	46fffe00 	.word	0x46fffe00
 8006968:	3c23d70a 	.word	0x3c23d70a
 800696c:	43ff0000 	.word	0x43ff0000
 8006970:	3db851ec 	.word	0x3db851ec
 8006974:	42700000 	.word	0x42700000
 8006978:	3fa66666 	.word	0x3fa66666
 800697c:	3e99999a 	.word	0x3e99999a

08006980 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8006980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	223c      	movs	r2, #60	@ 0x3c
 800698e:	5c9b      	ldrb	r3, [r3, r2]
 8006990:	2201      	movs	r2, #1
 8006992:	4053      	eors	r3, r2
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	223c      	movs	r2, #60	@ 0x3c
 800699e:	2101      	movs	r1, #1
 80069a0:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 80069ae:	e0c8      	b.n	8006b42 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b4:	4965      	ldr	r1, [pc, #404]	@ (8006b4c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 80069b6:	1c18      	adds	r0, r3, #0
 80069b8:	f7f9 fdce 	bl	8000558 <__aeabi_fcmpge>
 80069bc:	1e03      	subs	r3, r0, #0
 80069be:	d107      	bne.n	80069d0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80069c4:	4962      	ldr	r1, [pc, #392]	@ (8006b50 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 80069c6:	1c18      	adds	r0, r3, #0
 80069c8:	f7f9 fdb2 	bl	8000530 <__aeabi_fcmple>
 80069cc:	1e03      	subs	r3, r0, #0
 80069ce:	d00e      	beq.n	80069ee <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80069d8:	1c19      	adds	r1, r3, #0
 80069da:	1c10      	adds	r0, r2, #0
 80069dc:	f7f9 ff34 	bl	8000848 <__aeabi_fadd>
 80069e0:	1c03      	adds	r3, r0, #0
 80069e2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f2:	1c19      	adds	r1, r3, #0
 80069f4:	6838      	ldr	r0, [r7, #0]
 80069f6:	f7fa fbd5 	bl	80011a4 <__aeabi_fsub>
 80069fa:	1c03      	adds	r3, r0, #0
 80069fc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7ff fe7d 	bl	8006700 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	1c19      	adds	r1, r3, #0
 8006a0c:	6838      	ldr	r0, [r7, #0]
 8006a0e:	f7fa fbc9 	bl	80011a4 <__aeabi_fsub>
 8006a12:	1c03      	adds	r3, r0, #0
 8006a14:	2185      	movs	r1, #133	@ 0x85
 8006a16:	05c9      	lsls	r1, r1, #23
 8006a18:	1c18      	adds	r0, r3, #0
 8006a1a:	f7fa f89f 	bl	8000b5c <__aeabi_fdiv>
 8006a1e:	1c03      	adds	r3, r0, #0
 8006a20:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8006a22:	2100      	movs	r1, #0
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7f9 fd79 	bl	800051c <__aeabi_fcmplt>
 8006a2a:	1e03      	subs	r3, r0, #0
 8006a2c:	d008      	beq.n	8006a40 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	1c18      	adds	r0, r3, #0
 8006a36:	f7fa fbb5 	bl	80011a4 <__aeabi_fsub>
 8006a3a:	1c03      	adds	r3, r0, #0
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e007      	b.n	8006a50 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a44:	1c19      	adds	r1, r3, #0
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7f9 fefe 	bl	8000848 <__aeabi_fadd>
 8006a4c:	1c03      	adds	r3, r0, #0
 8006a4e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8006a50:	23fe      	movs	r3, #254	@ 0xfe
 8006a52:	059b      	lsls	r3, r3, #22
 8006a54:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8006a56:	493f      	ldr	r1, [pc, #252]	@ (8006b54 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8006a58:	6978      	ldr	r0, [r7, #20]
 8006a5a:	f7f9 fd73 	bl	8000544 <__aeabi_fcmpgt>
 8006a5e:	1e03      	subs	r3, r0, #0
 8006a60:	d010      	beq.n	8006a84 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8006a62:	493c      	ldr	r1, [pc, #240]	@ (8006b54 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8006a64:	6978      	ldr	r0, [r7, #20]
 8006a66:	f7fa f879 	bl	8000b5c <__aeabi_fdiv>
 8006a6a:	1c03      	adds	r3, r0, #0
 8006a6c:	1c1c      	adds	r4, r3, #0
 8006a6e:	4939      	ldr	r1, [pc, #228]	@ (8006b54 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8006a70:	6978      	ldr	r0, [r7, #20]
 8006a72:	f7fa f873 	bl	8000b5c <__aeabi_fdiv>
 8006a76:	1c03      	adds	r3, r0, #0
 8006a78:	1c19      	adds	r1, r3, #0
 8006a7a:	1c20      	adds	r0, r4, #0
 8006a7c:	f7fa fa54 	bl	8000f28 <__aeabi_fmul>
 8006a80:	1c03      	adds	r3, r0, #0
 8006a82:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8006a88:	1c19      	adds	r1, r3, #0
 8006a8a:	2085      	movs	r0, #133	@ 0x85
 8006a8c:	05c0      	lsls	r0, r0, #23
 8006a8e:	f7fa fb89 	bl	80011a4 <__aeabi_fsub>
 8006a92:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8006a94:	6939      	ldr	r1, [r7, #16]
 8006a96:	1c18      	adds	r0, r3, #0
 8006a98:	f7fa fa46 	bl	8000f28 <__aeabi_fmul>
 8006a9c:	1c03      	adds	r3, r0, #0
 8006a9e:	1c18      	adds	r0, r3, #0
 8006aa0:	f00d f8e8 	bl	8013c74 <sqrtf>
 8006aa4:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006aae:	2185      	movs	r1, #133	@ 0x85
 8006ab0:	05c9      	lsls	r1, r1, #23
 8006ab2:	6938      	ldr	r0, [r7, #16]
 8006ab4:	f7fa fa38 	bl	8000f28 <__aeabi_fmul>
 8006ab8:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8006aba:	1c19      	adds	r1, r3, #0
 8006abc:	1c28      	adds	r0, r5, #0
 8006abe:	f7fa f84d 	bl	8000b5c <__aeabi_fdiv>
 8006ac2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8006ac4:	1c19      	adds	r1, r3, #0
 8006ac6:	1c20      	adds	r0, r4, #0
 8006ac8:	f7fa fa2e 	bl	8000f28 <__aeabi_fmul>
 8006acc:	1c03      	adds	r3, r0, #0
 8006ace:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ad4:	68f9      	ldr	r1, [r7, #12]
 8006ad6:	1c18      	adds	r0, r3, #0
 8006ad8:	f7fa fa26 	bl	8000f28 <__aeabi_fmul>
 8006adc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8006ade:	6939      	ldr	r1, [r7, #16]
 8006ae0:	1c18      	adds	r0, r3, #0
 8006ae2:	f7fa f83b 	bl	8000b5c <__aeabi_fdiv>
 8006ae6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	1c18      	adds	r0, r3, #0
 8006aec:	f7fa fa1c 	bl	8000f28 <__aeabi_fmul>
 8006af0:	1c03      	adds	r3, r0, #0
             sqrtf(
 8006af2:	1c19      	adds	r1, r3, #0
 8006af4:	1c20      	adds	r0, r4, #0
 8006af6:	f7f9 fea7 	bl	8000848 <__aeabi_fadd>
 8006afa:	1c03      	adds	r3, r0, #0
 8006afc:	1c18      	adds	r0, r3, #0
 8006afe:	f00d f8b9 	bl	8013c74 <sqrtf>
 8006b02:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8006b04:	1c19      	adds	r1, r3, #0
 8006b06:	1c30      	adds	r0, r6, #0
 8006b08:	f7fa fa0e 	bl	8000f28 <__aeabi_fmul>
 8006b0c:	1c03      	adds	r3, r0, #0
 8006b0e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	1c18      	adds	r0, r3, #0
 8006b20:	f7fa fa02 	bl	8000f28 <__aeabi_fmul>
 8006b24:	1c03      	adds	r3, r0, #0
 8006b26:	2182      	movs	r1, #130	@ 0x82
 8006b28:	05c9      	lsls	r1, r1, #23
 8006b2a:	1c18      	adds	r0, r3, #0
 8006b2c:	f7fa f816 	bl	8000b5c <__aeabi_fdiv>
 8006b30:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8006b32:	1c19      	adds	r1, r3, #0
 8006b34:	1c20      	adds	r0, r4, #0
 8006b36:	f7f9 fe87 	bl	8000848 <__aeabi_fadd>
 8006b3a:	1c03      	adds	r3, r0, #0
 8006b3c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006b42:	46c0      	nop			@ (mov r8, r8)
 8006b44:	46bd      	mov	sp, r7
 8006b46:	b007      	add	sp, #28
 8006b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b4a:	46c0      	nop			@ (mov r8, r8)
 8006b4c:	42c80000 	.word	0x42c80000
 8006b50:	c2c80000 	.word	0xc2c80000
 8006b54:	44b40000 	.word	0x44b40000

08006b58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b70:	46c0      	nop			@ (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b004      	add	sp, #16
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8006b78:	b590      	push	{r4, r7, lr}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b8a:	1c19      	adds	r1, r3, #0
 8006b8c:	6838      	ldr	r0, [r7, #0]
 8006b8e:	f7fa fb09 	bl	80011a4 <__aeabi_fsub>
 8006b92:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8006b94:	1c19      	adds	r1, r3, #0
 8006b96:	1c20      	adds	r0, r4, #0
 8006b98:	f7fa f9c6 	bl	8000f28 <__aeabi_fmul>
 8006b9c:	1c03      	adds	r3, r0, #0
 8006b9e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8006ba0:	4912      	ldr	r1, [pc, #72]	@ (8006bec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f7f9 fcba 	bl	800051c <__aeabi_fcmplt>
 8006ba8:	1e03      	subs	r3, r0, #0
 8006baa:	d002      	beq.n	8006bb2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8006bac:	23fe      	movs	r3, #254	@ 0xfe
 8006bae:	059b      	lsls	r3, r3, #22
 8006bb0:	e018      	b.n	8006be4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8006bb2:	490f      	ldr	r1, [pc, #60]	@ (8006bf0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7f9 fcc5 	bl	8000544 <__aeabi_fcmpgt>
 8006bba:	1e03      	subs	r3, r0, #0
 8006bbc:	d001      	beq.n	8006bc2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e010      	b.n	8006be4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1c18      	adds	r0, r3, #0
 8006bc6:	f00d f82d 	bl	8013c24 <expf>
 8006bca:	1c03      	adds	r3, r0, #0
 8006bcc:	21fe      	movs	r1, #254	@ 0xfe
 8006bce:	0589      	lsls	r1, r1, #22
 8006bd0:	1c18      	adds	r0, r3, #0
 8006bd2:	f7f9 fe39 	bl	8000848 <__aeabi_fadd>
 8006bd6:	1c03      	adds	r3, r0, #0
 8006bd8:	1c19      	adds	r1, r3, #0
 8006bda:	20fe      	movs	r0, #254	@ 0xfe
 8006bdc:	0580      	lsls	r0, r0, #22
 8006bde:	f7f9 ffbd 	bl	8000b5c <__aeabi_fdiv>
 8006be2:	1c03      	adds	r3, r0, #0
    }
}
 8006be4:	1c18      	adds	r0, r3, #0
 8006be6:	46bd      	mov	sp, r7
 8006be8:	b005      	add	sp, #20
 8006bea:	bd90      	pop	{r4, r7, pc}
 8006bec:	c2480000 	.word	0xc2480000
 8006bf0:	42480000 	.word	0x42480000

08006bf4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006c0c:	46c0      	nop			@ (mov r8, r8)
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b004      	add	sp, #16
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d114      	bne.n	8006c50 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c2a:	1c19      	adds	r1, r3, #0
 8006c2c:	6838      	ldr	r0, [r7, #0]
 8006c2e:	f7fa fab9 	bl	80011a4 <__aeabi_fsub>
 8006c32:	1c03      	adds	r3, r0, #0
 8006c34:	4918      	ldr	r1, [pc, #96]	@ (8006c98 <GasIndexAlgorithm__mox_model__process+0x84>)
 8006c36:	1c18      	adds	r0, r3, #0
 8006c38:	f7f9 ff90 	bl	8000b5c <__aeabi_fdiv>
 8006c3c:	1c03      	adds	r3, r0, #0
 8006c3e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8006c44:	1c19      	adds	r1, r3, #0
 8006c46:	1c10      	adds	r0, r2, #0
 8006c48:	f7fa f96e 	bl	8000f28 <__aeabi_fmul>
 8006c4c:	1c03      	adds	r3, r0, #0
 8006c4e:	e01f      	b.n	8006c90 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c54:	1c19      	adds	r1, r3, #0
 8006c56:	6838      	ldr	r0, [r7, #0]
 8006c58:	f7fa faa4 	bl	80011a4 <__aeabi_fsub>
 8006c5c:	1c03      	adds	r3, r0, #0
 8006c5e:	1c1a      	adds	r2, r3, #0
 8006c60:	2380      	movs	r3, #128	@ 0x80
 8006c62:	061b      	lsls	r3, r3, #24
 8006c64:	4053      	eors	r3, r2
 8006c66:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c6c:	490b      	ldr	r1, [pc, #44]	@ (8006c9c <GasIndexAlgorithm__mox_model__process+0x88>)
 8006c6e:	1c18      	adds	r0, r3, #0
 8006c70:	f7f9 fdea 	bl	8000848 <__aeabi_fadd>
 8006c74:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8006c76:	1c19      	adds	r1, r3, #0
 8006c78:	1c20      	adds	r0, r4, #0
 8006c7a:	f7f9 ff6f 	bl	8000b5c <__aeabi_fdiv>
 8006c7e:	1c03      	adds	r3, r0, #0
 8006c80:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8006c86:	1c19      	adds	r1, r3, #0
 8006c88:	1c10      	adds	r0, r2, #0
 8006c8a:	f7fa f94d 	bl	8000f28 <__aeabi_fmul>
 8006c8e:	1c03      	adds	r3, r0, #0
    }
}
 8006c90:	1c18      	adds	r0, r3, #0
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b003      	add	sp, #12
 8006c96:	bd90      	pop	{r4, r7, pc}
 8006c98:	44fa0000 	.word	0x44fa0000
 8006c9c:	435c0000 	.word	0x435c0000

08006ca0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2180      	movs	r1, #128	@ 0x80
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2184      	movs	r1, #132	@ 0x84
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2188      	movs	r1, #136	@ 0x88
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	505a      	str	r2, [r3, r1]
}
 8006cc6:	46c0      	nop			@ (mov r8, r8)
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	b004      	add	sp, #16
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2280      	movs	r2, #128	@ 0x80
 8006cde:	589c      	ldr	r4, [r3, r2]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2284      	movs	r2, #132	@ 0x84
 8006ce4:	589b      	ldr	r3, [r3, r2]
 8006ce6:	1c19      	adds	r1, r3, #0
 8006ce8:	6838      	ldr	r0, [r7, #0]
 8006cea:	f7fa fa5b 	bl	80011a4 <__aeabi_fsub>
 8006cee:	1c03      	adds	r3, r0, #0
 8006cf0:	1c19      	adds	r1, r3, #0
 8006cf2:	1c20      	adds	r0, r4, #0
 8006cf4:	f7fa f918 	bl	8000f28 <__aeabi_fmul>
 8006cf8:	1c03      	adds	r3, r0, #0
 8006cfa:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8006cfc:	4940      	ldr	r1, [pc, #256]	@ (8006e00 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8006cfe:	68b8      	ldr	r0, [r7, #8]
 8006d00:	f7f9 fc0c 	bl	800051c <__aeabi_fcmplt>
 8006d04:	1e03      	subs	r3, r0, #0
 8006d06:	d001      	beq.n	8006d0c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8006d08:	4b3e      	ldr	r3, [pc, #248]	@ (8006e04 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8006d0a:	e075      	b.n	8006df8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8006d0c:	493e      	ldr	r1, [pc, #248]	@ (8006e08 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8006d0e:	68b8      	ldr	r0, [r7, #8]
 8006d10:	f7f9 fc18 	bl	8000544 <__aeabi_fcmpgt>
 8006d14:	1e03      	subs	r3, r0, #0
 8006d16:	d001      	beq.n	8006d1c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e06d      	b.n	8006df8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	6838      	ldr	r0, [r7, #0]
 8006d20:	f7f9 fc1a 	bl	8000558 <__aeabi_fcmpge>
 8006d24:	1e03      	subs	r3, r0, #0
 8006d26:	d047      	beq.n	8006db8 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2288      	movs	r2, #136	@ 0x88
 8006d2c:	589b      	ldr	r3, [r3, r2]
 8006d2e:	21fe      	movs	r1, #254	@ 0xfe
 8006d30:	0589      	lsls	r1, r1, #22
 8006d32:	1c18      	adds	r0, r3, #0
 8006d34:	f7f9 fbec 	bl	8000510 <__aeabi_fcmpeq>
 8006d38:	1e03      	subs	r3, r0, #0
 8006d3a:	d00e      	beq.n	8006d5a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	1c19      	adds	r1, r3, #0
 8006d42:	20fe      	movs	r0, #254	@ 0xfe
 8006d44:	0580      	lsls	r0, r0, #22
 8006d46:	f7fa fa2d 	bl	80011a4 <__aeabi_fsub>
 8006d4a:	1c03      	adds	r3, r0, #0
 8006d4c:	492f      	ldr	r1, [pc, #188]	@ (8006e0c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8006d4e:	1c18      	adds	r0, r3, #0
 8006d50:	f7fa f8ea 	bl	8000f28 <__aeabi_fmul>
 8006d54:	1c03      	adds	r3, r0, #0
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e012      	b.n	8006d80 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	492c      	ldr	r1, [pc, #176]	@ (8006e10 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8006d60:	1c18      	adds	r0, r3, #0
 8006d62:	f7fa f8e1 	bl	8000f28 <__aeabi_fmul>
 8006d66:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8006d68:	1c19      	adds	r1, r3, #0
 8006d6a:	4826      	ldr	r0, [pc, #152]	@ (8006e04 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8006d6c:	f7fa fa1a 	bl	80011a4 <__aeabi_fsub>
 8006d70:	1c03      	adds	r3, r0, #0
 8006d72:	2181      	movs	r1, #129	@ 0x81
 8006d74:	05c9      	lsls	r1, r1, #23
 8006d76:	1c18      	adds	r0, r3, #0
 8006d78:	f7f9 fef0 	bl	8000b5c <__aeabi_fdiv>
 8006d7c:	1c03      	adds	r3, r0, #0
 8006d7e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8006d80:	4920      	ldr	r1, [pc, #128]	@ (8006e04 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7f9 fd60 	bl	8000848 <__aeabi_fadd>
 8006d88:	1c03      	adds	r3, r0, #0
 8006d8a:	1c1c      	adds	r4, r3, #0
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	1c18      	adds	r0, r3, #0
 8006d90:	f00c ff48 	bl	8013c24 <expf>
 8006d94:	1c03      	adds	r3, r0, #0
 8006d96:	21fe      	movs	r1, #254	@ 0xfe
 8006d98:	0589      	lsls	r1, r1, #22
 8006d9a:	1c18      	adds	r0, r3, #0
 8006d9c:	f7f9 fd54 	bl	8000848 <__aeabi_fadd>
 8006da0:	1c03      	adds	r3, r0, #0
 8006da2:	1c19      	adds	r1, r3, #0
 8006da4:	1c20      	adds	r0, r4, #0
 8006da6:	f7f9 fed9 	bl	8000b5c <__aeabi_fdiv>
 8006daa:	1c03      	adds	r3, r0, #0
 8006dac:	68f9      	ldr	r1, [r7, #12]
 8006dae:	1c18      	adds	r0, r3, #0
 8006db0:	f7fa f9f8 	bl	80011a4 <__aeabi_fsub>
 8006db4:	1c03      	adds	r3, r0, #0
 8006db6:	e01f      	b.n	8006df8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2188      	movs	r1, #136	@ 0x88
 8006dc0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8006dc2:	1c19      	adds	r1, r3, #0
 8006dc4:	1c10      	adds	r0, r2, #0
 8006dc6:	f7f9 fec9 	bl	8000b5c <__aeabi_fdiv>
 8006dca:	1c03      	adds	r3, r0, #0
 8006dcc:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	1c18      	adds	r0, r3, #0
 8006dd2:	f00c ff27 	bl	8013c24 <expf>
 8006dd6:	1c03      	adds	r3, r0, #0
 8006dd8:	21fe      	movs	r1, #254	@ 0xfe
 8006dda:	0589      	lsls	r1, r1, #22
 8006ddc:	1c18      	adds	r0, r3, #0
 8006dde:	f7f9 fd33 	bl	8000848 <__aeabi_fadd>
 8006de2:	1c03      	adds	r3, r0, #0
 8006de4:	1c19      	adds	r1, r3, #0
 8006de6:	4807      	ldr	r0, [pc, #28]	@ (8006e04 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8006de8:	f7f9 feb8 	bl	8000b5c <__aeabi_fdiv>
 8006dec:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8006dee:	1c19      	adds	r1, r3, #0
 8006df0:	1c20      	adds	r0, r4, #0
 8006df2:	f7fa f899 	bl	8000f28 <__aeabi_fmul>
 8006df6:	1c03      	adds	r3, r0, #0
        }
    }
}
 8006df8:	1c18      	adds	r0, r3, #0
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b005      	add	sp, #20
 8006dfe:	bd90      	pop	{r4, r7, pc}
 8006e00:	c2480000 	.word	0xc2480000
 8006e04:	43fa0000 	.word	0x43fa0000
 8006e08:	42480000 	.word	0x42480000
 8006e0c:	3f8041ab 	.word	0x3f8041ab
 8006e10:	40a00000 	.word	0x40a00000

08006e14 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006e14:	b590      	push	{r4, r7, lr}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	4913      	ldr	r1, [pc, #76]	@ (8006e74 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8006e26:	1c18      	adds	r0, r3, #0
 8006e28:	f7f9 fd0e 	bl	8000848 <__aeabi_fadd>
 8006e2c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8006e2e:	1c19      	adds	r1, r3, #0
 8006e30:	1c20      	adds	r0, r4, #0
 8006e32:	f7f9 fe93 	bl	8000b5c <__aeabi_fdiv>
 8006e36:	1c03      	adds	r3, r0, #0
 8006e38:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	228c      	movs	r2, #140	@ 0x8c
 8006e3e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	490b      	ldr	r1, [pc, #44]	@ (8006e78 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8006e4a:	1c18      	adds	r0, r3, #0
 8006e4c:	f7f9 fcfc 	bl	8000848 <__aeabi_fadd>
 8006e50:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8006e52:	1c19      	adds	r1, r3, #0
 8006e54:	1c20      	adds	r0, r4, #0
 8006e56:	f7f9 fe81 	bl	8000b5c <__aeabi_fdiv>
 8006e5a:	1c03      	adds	r3, r0, #0
 8006e5c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2290      	movs	r2, #144	@ 0x90
 8006e62:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2294      	movs	r2, #148	@ 0x94
 8006e68:	2100      	movs	r1, #0
 8006e6a:	5499      	strb	r1, [r3, r2]
}
 8006e6c:	46c0      	nop			@ (mov r8, r8)
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	b003      	add	sp, #12
 8006e72:	bd90      	pop	{r4, r7, pc}
 8006e74:	41a00000 	.word	0x41a00000
 8006e78:	43fa0000 	.word	0x43fa0000

08006e7c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8006e7c:	b590      	push	{r4, r7, lr}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2294      	movs	r2, #148	@ 0x94
 8006e8a:	5c9b      	ldrb	r3, [r3, r2]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	4053      	eors	r3, r2
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00f      	beq.n	8006eb6 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2198      	movs	r1, #152	@ 0x98
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	219c      	movs	r1, #156	@ 0x9c
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	21a0      	movs	r1, #160	@ 0xa0
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2294      	movs	r2, #148	@ 0x94
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	228c      	movs	r2, #140	@ 0x8c
 8006eba:	589b      	ldr	r3, [r3, r2]
 8006ebc:	1c19      	adds	r1, r3, #0
 8006ebe:	20fe      	movs	r0, #254	@ 0xfe
 8006ec0:	0580      	lsls	r0, r0, #22
 8006ec2:	f7fa f96f 	bl	80011a4 <__aeabi_fsub>
 8006ec6:	1c03      	adds	r3, r0, #0
 8006ec8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2298      	movs	r2, #152	@ 0x98
 8006ece:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8006ed0:	1c19      	adds	r1, r3, #0
 8006ed2:	f7fa f829 	bl	8000f28 <__aeabi_fmul>
 8006ed6:	1c03      	adds	r3, r0, #0
 8006ed8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	228c      	movs	r2, #140	@ 0x8c
 8006ede:	589b      	ldr	r3, [r3, r2]
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	1c18      	adds	r0, r3, #0
 8006ee4:	f7fa f820 	bl	8000f28 <__aeabi_fmul>
 8006ee8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8006eea:	1c19      	adds	r1, r3, #0
 8006eec:	1c20      	adds	r0, r4, #0
 8006eee:	f7f9 fcab 	bl	8000848 <__aeabi_fadd>
 8006ef2:	1c03      	adds	r3, r0, #0
 8006ef4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2298      	movs	r2, #152	@ 0x98
 8006efa:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2290      	movs	r2, #144	@ 0x90
 8006f00:	589b      	ldr	r3, [r3, r2]
 8006f02:	1c19      	adds	r1, r3, #0
 8006f04:	20fe      	movs	r0, #254	@ 0xfe
 8006f06:	0580      	lsls	r0, r0, #22
 8006f08:	f7fa f94c 	bl	80011a4 <__aeabi_fsub>
 8006f0c:	1c03      	adds	r3, r0, #0
 8006f0e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	229c      	movs	r2, #156	@ 0x9c
 8006f14:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8006f16:	1c19      	adds	r1, r3, #0
 8006f18:	f7fa f806 	bl	8000f28 <__aeabi_fmul>
 8006f1c:	1c03      	adds	r3, r0, #0
 8006f1e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2290      	movs	r2, #144	@ 0x90
 8006f24:	589b      	ldr	r3, [r3, r2]
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	1c18      	adds	r0, r3, #0
 8006f2a:	f7f9 fffd 	bl	8000f28 <__aeabi_fmul>
 8006f2e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8006f30:	1c19      	adds	r1, r3, #0
 8006f32:	1c20      	adds	r0, r4, #0
 8006f34:	f7f9 fc88 	bl	8000848 <__aeabi_fadd>
 8006f38:	1c03      	adds	r3, r0, #0
 8006f3a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	229c      	movs	r2, #156	@ 0x9c
 8006f40:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2298      	movs	r2, #152	@ 0x98
 8006f46:	589a      	ldr	r2, [r3, r2]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	219c      	movs	r1, #156	@ 0x9c
 8006f4c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8006f4e:	1c19      	adds	r1, r3, #0
 8006f50:	1c10      	adds	r0, r2, #0
 8006f52:	f7fa f927 	bl	80011a4 <__aeabi_fsub>
 8006f56:	1c03      	adds	r3, r0, #0
 8006f58:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	6978      	ldr	r0, [r7, #20]
 8006f5e:	f7f9 fadd 	bl	800051c <__aeabi_fcmplt>
 8006f62:	1e03      	subs	r3, r0, #0
 8006f64:	d004      	beq.n	8006f70 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2280      	movs	r2, #128	@ 0x80
 8006f6a:	0612      	lsls	r2, r2, #24
 8006f6c:	4053      	eors	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8006f70:	4923      	ldr	r1, [pc, #140]	@ (8007000 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8006f72:	6978      	ldr	r0, [r7, #20]
 8006f74:	f7f9 ffd8 	bl	8000f28 <__aeabi_fmul>
 8006f78:	1c03      	adds	r3, r0, #0
 8006f7a:	1c18      	adds	r0, r3, #0
 8006f7c:	f00c fe52 	bl	8013c24 <expf>
 8006f80:	1c03      	adds	r3, r0, #0
 8006f82:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8006f84:	491f      	ldr	r1, [pc, #124]	@ (8007004 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8006f86:	6938      	ldr	r0, [r7, #16]
 8006f88:	f7f9 ffce 	bl	8000f28 <__aeabi_fmul>
 8006f8c:	1c03      	adds	r3, r0, #0
 8006f8e:	491e      	ldr	r1, [pc, #120]	@ (8007008 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8006f90:	1c18      	adds	r0, r3, #0
 8006f92:	f7f9 fc59 	bl	8000848 <__aeabi_fadd>
 8006f96:	1c03      	adds	r3, r0, #0
 8006f98:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685c      	ldr	r4, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68f9      	ldr	r1, [r7, #12]
 8006fa4:	1c18      	adds	r0, r3, #0
 8006fa6:	f7f9 fc4f 	bl	8000848 <__aeabi_fadd>
 8006faa:	1c03      	adds	r3, r0, #0
 8006fac:	1c19      	adds	r1, r3, #0
 8006fae:	1c20      	adds	r0, r4, #0
 8006fb0:	f7f9 fdd4 	bl	8000b5c <__aeabi_fdiv>
 8006fb4:	1c03      	adds	r3, r0, #0
 8006fb6:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	20fe      	movs	r0, #254	@ 0xfe
 8006fbc:	0580      	lsls	r0, r0, #22
 8006fbe:	f7fa f8f1 	bl	80011a4 <__aeabi_fsub>
 8006fc2:	1c03      	adds	r3, r0, #0
 8006fc4:	1c18      	adds	r0, r3, #0
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	22a0      	movs	r2, #160	@ 0xa0
 8006fca:	589b      	ldr	r3, [r3, r2]
 8006fcc:	1c19      	adds	r1, r3, #0
 8006fce:	f7f9 ffab 	bl	8000f28 <__aeabi_fmul>
 8006fd2:	1c03      	adds	r3, r0, #0
 8006fd4:	1c1c      	adds	r4, r3, #0
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	68b8      	ldr	r0, [r7, #8]
 8006fda:	f7f9 ffa5 	bl	8000f28 <__aeabi_fmul>
 8006fde:	1c03      	adds	r3, r0, #0
 8006fe0:	1c19      	adds	r1, r3, #0
 8006fe2:	1c20      	adds	r0, r4, #0
 8006fe4:	f7f9 fc30 	bl	8000848 <__aeabi_fadd>
 8006fe8:	1c03      	adds	r3, r0, #0
 8006fea:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	22a0      	movs	r2, #160	@ 0xa0
 8006ff0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	22a0      	movs	r2, #160	@ 0xa0
 8006ff6:	589b      	ldr	r3, [r3, r2]
}
 8006ff8:	1c18      	adds	r0, r3, #0
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b007      	add	sp, #28
 8006ffe:	bd90      	pop	{r4, r7, pc}
 8007000:	be4ccccd 	.word	0xbe4ccccd
 8007004:	43f00000 	.word	0x43f00000
 8007008:	41a00000 	.word	0x41a00000

0800700c <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800700c:	b590      	push	{r4, r7, lr}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6039      	str	r1, [r7, #0]
 8007014:	0011      	movs	r1, r2
 8007016:	1dfb      	adds	r3, r7, #7
 8007018:	1c02      	adds	r2, r0, #0
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	1dbb      	adds	r3, r7, #6
 800701e:	1c0a      	adds	r2, r1, #0
 8007020:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8007022:	4b08      	ldr	r3, [pc, #32]	@ (8007044 <ReadRegister+0x38>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800702a:	4b06      	ldr	r3, [pc, #24]	@ (8007044 <ReadRegister+0x38>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	1dba      	adds	r2, r7, #6
 8007030:	7814      	ldrb	r4, [r2, #0]
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	1dfa      	adds	r2, r7, #7
 8007036:	7810      	ldrb	r0, [r2, #0]
 8007038:	0022      	movs	r2, r4
 800703a:	4798      	blx	r3
  }
}
 800703c:	46c0      	nop			@ (mov r8, r8)
 800703e:	46bd      	mov	sp, r7
 8007040:	b003      	add	sp, #12
 8007042:	bd90      	pop	{r4, r7, pc}
 8007044:	200027b4 	.word	0x200027b4

08007048 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8007048:	b590      	push	{r4, r7, lr}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6039      	str	r1, [r7, #0]
 8007050:	0011      	movs	r1, r2
 8007052:	1dfb      	adds	r3, r7, #7
 8007054:	1c02      	adds	r2, r0, #0
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	1dbb      	adds	r3, r7, #6
 800705a:	1c0a      	adds	r2, r1, #0
 800705c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800705e:	4b08      	ldr	r3, [pc, #32]	@ (8007080 <WriteRegister+0x38>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8007066:	4b06      	ldr	r3, [pc, #24]	@ (8007080 <WriteRegister+0x38>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	1dba      	adds	r2, r7, #6
 800706c:	7814      	ldrb	r4, [r2, #0]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	1dfa      	adds	r2, r7, #7
 8007072:	7810      	ldrb	r0, [r2, #0]
 8007074:	0022      	movs	r2, r4
 8007076:	4798      	blx	r3
  }
}
 8007078:	46c0      	nop			@ (mov r8, r8)
 800707a:	46bd      	mov	sp, r7
 800707c:	b003      	add	sp, #12
 800707e:	bd90      	pop	{r4, r7, pc}
 8007080:	200027b8 	.word	0x200027b8

08007084 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800708e:	4b07      	ldr	r3, [pc, #28]	@ (80070ac <SGP_Init+0x28>)
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8007094:	4b06      	ldr	r3, [pc, #24]	@ (80070b0 <SGP_Init+0x2c>)
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800709a:	4b06      	ldr	r3, [pc, #24]	@ (80070b4 <SGP_Init+0x30>)
 800709c:	2100      	movs	r1, #0
 800709e:	0018      	movs	r0, r3
 80070a0:	f7ff f930 	bl	8006304 <GasIndexAlgorithm_init>
}
 80070a4:	46c0      	nop			@ (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b002      	add	sp, #8
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	200027b4 	.word	0x200027b4
 80070b0:	200027b8 	.word	0x200027b8
 80070b4:	200027c8 	.word	0x200027c8

080070b8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80070bc:	4b13      	ldr	r3, [pc, #76]	@ (800710c <SGP_StartMeasurement+0x54>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00d      	beq.n	80070e0 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80070c4:	4b12      	ldr	r3, [pc, #72]	@ (8007110 <SGP_StartMeasurement+0x58>)
 80070c6:	2208      	movs	r2, #8
 80070c8:	0019      	movs	r1, r3
 80070ca:	2059      	movs	r0, #89	@ 0x59
 80070cc:	f7ff ffbc 	bl	8007048 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80070d0:	f001 f98c 	bl	80083ec <GetCurrentHalTicks>
 80070d4:	0003      	movs	r3, r0
 80070d6:	331e      	adds	r3, #30
 80070d8:	001a      	movs	r2, r3
 80070da:	4b0e      	ldr	r3, [pc, #56]	@ (8007114 <SGP_StartMeasurement+0x5c>)
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	e00c      	b.n	80070fa <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80070e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007118 <SGP_StartMeasurement+0x60>)
 80070e2:	2208      	movs	r2, #8
 80070e4:	0019      	movs	r1, r3
 80070e6:	2059      	movs	r0, #89	@ 0x59
 80070e8:	f7ff ffae 	bl	8007048 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80070ec:	f001 f97e 	bl	80083ec <GetCurrentHalTicks>
 80070f0:	0003      	movs	r3, r0
 80070f2:	33aa      	adds	r3, #170	@ 0xaa
 80070f4:	001a      	movs	r2, r3
 80070f6:	4b09      	ldr	r3, [pc, #36]	@ (800711c <SGP_StartMeasurement+0x64>)
 80070f8:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80070fa:	4b09      	ldr	r3, [pc, #36]	@ (8007120 <SGP_StartMeasurement+0x68>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8007100:	4b08      	ldr	r3, [pc, #32]	@ (8007124 <SGP_StartMeasurement+0x6c>)
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
}
 8007106:	46c0      	nop			@ (mov r8, r8)
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20002870 	.word	0x20002870
 8007110:	20000114 	.word	0x20000114
 8007114:	20000128 	.word	0x20000128
 8007118:	2000010c 	.word	0x2000010c
 800711c:	20000120 	.word	0x20000120
 8007120:	200027c6 	.word	0x200027c6
 8007124:	200027c7 	.word	0x200027c7

08007128 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <SGP_HeatedUp+0x18>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	0018      	movs	r0, r3
 8007132:	f001 f879 	bl	8008228 <TimestampIsReached>
 8007136:	0003      	movs	r3, r0
 8007138:	0018      	movs	r0, r3
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	46c0      	nop			@ (mov r8, r8)
 8007140:	20000120 	.word	0x20000120

08007144 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8007148:	4b04      	ldr	r3, [pc, #16]	@ (800715c <SGP_MeasurementReady+0x18>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	0018      	movs	r0, r3
 800714e:	f001 f86b 	bl	8008228 <TimestampIsReached>
 8007152:	0003      	movs	r3, r0
}
 8007154:	0018      	movs	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	20000128 	.word	0x20000128

08007160 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8007164:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <SGP_MeasurementDone+0x18>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	0018      	movs	r0, r3
 800716a:	f001 f85d 	bl	8008228 <TimestampIsReached>
 800716e:	0003      	movs	r3, r0
}
 8007170:	0018      	movs	r0, r3
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	46c0      	nop			@ (mov r8, r8)
 8007178:	20000124 	.word	0x20000124

0800717c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007180:	4b04      	ldr	r3, [pc, #16]	@ (8007194 <SGP_TurnHeaterOff+0x18>)
 8007182:	2202      	movs	r2, #2
 8007184:	0019      	movs	r1, r3
 8007186:	2059      	movs	r0, #89	@ 0x59
 8007188:	f7ff ff5e 	bl	8007048 <WriteRegister>
}
 800718c:	46c0      	nop			@ (mov r8, r8)
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	46c0      	nop			@ (mov r8, r8)
 8007194:	20000104 	.word	0x20000104

08007198 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8007198:	b5b0      	push	{r4, r5, r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af02      	add	r7, sp, #8
 800719e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80071a0:	f7ff ffc2 	bl	8007128 <SGP_HeatedUp>
 80071a4:	1e03      	subs	r3, r0, #0
 80071a6:	d038      	beq.n	800721a <SGP_GetMeasurementValues+0x82>
 80071a8:	4bdb      	ldr	r3, [pc, #876]	@ (8007518 <SGP_GetMeasurementValues+0x380>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2201      	movs	r2, #1
 80071ae:	4053      	eors	r3, r2
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d031      	beq.n	800721a <SGP_GetMeasurementValues+0x82>
 80071b6:	4bd9      	ldr	r3, [pc, #868]	@ (800751c <SGP_GetMeasurementValues+0x384>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2201      	movs	r2, #1
 80071bc:	4053      	eors	r3, r2
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d02a      	beq.n	800721a <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80071c4:	4ad6      	ldr	r2, [pc, #856]	@ (8007520 <SGP_GetMeasurementValues+0x388>)
 80071c6:	4bd7      	ldr	r3, [pc, #860]	@ (8007524 <SGP_GetMeasurementValues+0x38c>)
 80071c8:	0019      	movs	r1, r3
 80071ca:	2003      	movs	r0, #3
 80071cc:	f001 f882 	bl	80082d4 <CreateLine>
    HeatUpIsDone = true;
 80071d0:	4bd1      	ldr	r3, [pc, #836]	@ (8007518 <SGP_GetMeasurementValues+0x380>)
 80071d2:	2201      	movs	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80071d6:	4bd4      	ldr	r3, [pc, #848]	@ (8007528 <SGP_GetMeasurementValues+0x390>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00d      	beq.n	80071fa <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80071de:	4bd3      	ldr	r3, [pc, #844]	@ (800752c <SGP_GetMeasurementValues+0x394>)
 80071e0:	2208      	movs	r2, #8
 80071e2:	0019      	movs	r1, r3
 80071e4:	2059      	movs	r0, #89	@ 0x59
 80071e6:	f7ff ff2f 	bl	8007048 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80071ea:	f001 f8ff 	bl	80083ec <GetCurrentHalTicks>
 80071ee:	0003      	movs	r3, r0
 80071f0:	331e      	adds	r3, #30
 80071f2:	001a      	movs	r2, r3
 80071f4:	4bce      	ldr	r3, [pc, #824]	@ (8007530 <SGP_GetMeasurementValues+0x398>)
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	e00c      	b.n	8007214 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80071fa:	4bce      	ldr	r3, [pc, #824]	@ (8007534 <SGP_GetMeasurementValues+0x39c>)
 80071fc:	2208      	movs	r2, #8
 80071fe:	0019      	movs	r1, r3
 8007200:	2059      	movs	r0, #89	@ 0x59
 8007202:	f7ff ff21 	bl	8007048 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007206:	f001 f8f1 	bl	80083ec <GetCurrentHalTicks>
 800720a:	0003      	movs	r3, r0
 800720c:	331e      	adds	r3, #30
 800720e:	001a      	movs	r2, r3
 8007210:	4bc7      	ldr	r3, [pc, #796]	@ (8007530 <SGP_GetMeasurementValues+0x398>)
 8007212:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8007214:	4bc1      	ldr	r3, [pc, #772]	@ (800751c <SGP_GetMeasurementValues+0x384>)
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800721a:	4bbf      	ldr	r3, [pc, #764]	@ (8007518 <SGP_GetMeasurementValues+0x380>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d100      	bne.n	8007224 <SGP_GetMeasurementValues+0x8c>
 8007222:	e1b5      	b.n	8007590 <SGP_GetMeasurementValues+0x3f8>
 8007224:	f7ff ff8e 	bl	8007144 <SGP_MeasurementReady>
 8007228:	1e03      	subs	r3, r0, #0
 800722a:	d100      	bne.n	800722e <SGP_GetMeasurementValues+0x96>
 800722c:	e1b0      	b.n	8007590 <SGP_GetMeasurementValues+0x3f8>
 800722e:	4bc2      	ldr	r3, [pc, #776]	@ (8007538 <SGP_GetMeasurementValues+0x3a0>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2201      	movs	r2, #1
 8007234:	4053      	eors	r3, r2
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d100      	bne.n	800723e <SGP_GetMeasurementValues+0xa6>
 800723c:	e1a8      	b.n	8007590 <SGP_GetMeasurementValues+0x3f8>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800723e:	4bbf      	ldr	r3, [pc, #764]	@ (800753c <SGP_GetMeasurementValues+0x3a4>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	4abe      	ldr	r2, [pc, #760]	@ (8007540 <SGP_GetMeasurementValues+0x3a8>)
 8007246:	49b7      	ldr	r1, [pc, #732]	@ (8007524 <SGP_GetMeasurementValues+0x38c>)
 8007248:	2003      	movs	r0, #3
 800724a:	f001 f843 	bl	80082d4 <CreateLine>
    MeasurementIsReady = true;
 800724e:	4bba      	ldr	r3, [pc, #744]	@ (8007538 <SGP_GetMeasurementValues+0x3a0>)
 8007250:	2201      	movs	r2, #1
 8007252:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8007254:	4bbb      	ldr	r3, [pc, #748]	@ (8007544 <SGP_GetMeasurementValues+0x3ac>)
 8007256:	2203      	movs	r2, #3
 8007258:	0019      	movs	r1, r3
 800725a:	2059      	movs	r0, #89	@ 0x59
 800725c:	f7ff fed6 	bl	800700c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8007260:	4bb8      	ldr	r3, [pc, #736]	@ (8007544 <SGP_GetMeasurementValues+0x3ac>)
 8007262:	2203      	movs	r2, #3
 8007264:	2103      	movs	r1, #3
 8007266:	0018      	movs	r0, r3
 8007268:	f000 f9f8 	bl	800765c <CheckCRC>
 800726c:	0003      	movs	r3, r0
 800726e:	001a      	movs	r2, r3
 8007270:	2301      	movs	r3, #1
 8007272:	4053      	eors	r3, r2
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d02a      	beq.n	80072d0 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800727a:	4ab3      	ldr	r2, [pc, #716]	@ (8007548 <SGP_GetMeasurementValues+0x3b0>)
 800727c:	4bb3      	ldr	r3, [pc, #716]	@ (800754c <SGP_GetMeasurementValues+0x3b4>)
 800727e:	0019      	movs	r1, r3
 8007280:	2001      	movs	r0, #1
 8007282:	f001 f827 	bl	80082d4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8007286:	4ab2      	ldr	r2, [pc, #712]	@ (8007550 <SGP_GetMeasurementValues+0x3b8>)
 8007288:	4bb2      	ldr	r3, [pc, #712]	@ (8007554 <SGP_GetMeasurementValues+0x3bc>)
 800728a:	0019      	movs	r1, r3
 800728c:	2002      	movs	r0, #2
 800728e:	f001 f821 	bl	80082d4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007292:	230f      	movs	r3, #15
 8007294:	18fb      	adds	r3, r7, r3
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e012      	b.n	80072c2 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800729c:	240f      	movs	r4, #15
 800729e:	193b      	adds	r3, r7, r4
 80072a0:	7818      	ldrb	r0, [r3, #0]
 80072a2:	193b      	adds	r3, r7, r4
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	4aa7      	ldr	r2, [pc, #668]	@ (8007544 <SGP_GetMeasurementValues+0x3ac>)
 80072a8:	5cd3      	ldrb	r3, [r2, r3]
 80072aa:	4aab      	ldr	r2, [pc, #684]	@ (8007558 <SGP_GetMeasurementValues+0x3c0>)
 80072ac:	499d      	ldr	r1, [pc, #628]	@ (8007524 <SGP_GetMeasurementValues+0x38c>)
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	0003      	movs	r3, r0
 80072b2:	2003      	movs	r0, #3
 80072b4:	f001 f80e 	bl	80082d4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80072b8:	193b      	adds	r3, r7, r4
 80072ba:	781a      	ldrb	r2, [r3, #0]
 80072bc:	193b      	adds	r3, r7, r4
 80072be:	3201      	adds	r2, #1
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	230f      	movs	r3, #15
 80072c4:	18fb      	adds	r3, r7, r3
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d9e7      	bls.n	800729c <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80072cc:	2300      	movs	r3, #0
 80072ce:	e177      	b.n	80075c0 <SGP_GetMeasurementValues+0x428>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80072d0:	f001 f88c 	bl	80083ec <GetCurrentHalTicks>
 80072d4:	0003      	movs	r3, r0
 80072d6:	22fa      	movs	r2, #250	@ 0xfa
 80072d8:	0092      	lsls	r2, r2, #2
 80072da:	189a      	adds	r2, r3, r2
 80072dc:	4b9f      	ldr	r3, [pc, #636]	@ (800755c <SGP_GetMeasurementValues+0x3c4>)
 80072de:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80072e0:	f7ff ff4c 	bl	800717c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80072e4:	4b95      	ldr	r3, [pc, #596]	@ (800753c <SGP_GetMeasurementValues+0x3a4>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	3301      	adds	r3, #1
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	4b93      	ldr	r3, [pc, #588]	@ (800753c <SGP_GetMeasurementValues+0x3a4>)
 80072ee:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80072f0:	4b92      	ldr	r3, [pc, #584]	@ (800753c <SGP_GetMeasurementValues+0x3a4>)
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	4b9a      	ldr	r3, [pc, #616]	@ (8007560 <SGP_GetMeasurementValues+0x3c8>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d200      	bcs.n	80072fe <SGP_GetMeasurementValues+0x166>
 80072fc:	e148      	b.n	8007590 <SGP_GetMeasurementValues+0x3f8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80072fe:	4b91      	ldr	r3, [pc, #580]	@ (8007544 <SGP_GetMeasurementValues+0x3ac>)
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	b21a      	sxth	r2, r3
 8007306:	4b8f      	ldr	r3, [pc, #572]	@ (8007544 <SGP_GetMeasurementValues+0x3ac>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	b21b      	sxth	r3, r3
 800730c:	4313      	orrs	r3, r2
 800730e:	b21a      	sxth	r2, r3
 8007310:	240c      	movs	r4, #12
 8007312:	193b      	adds	r3, r7, r4
 8007314:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8007316:	193b      	adds	r3, r7, r4
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	4a92      	ldr	r2, [pc, #584]	@ (8007564 <SGP_GetMeasurementValues+0x3cc>)
 800731c:	4981      	ldr	r1, [pc, #516]	@ (8007524 <SGP_GetMeasurementValues+0x38c>)
 800731e:	2003      	movs	r0, #3
 8007320:	f000 ffd8 	bl	80082d4 <CreateLine>
      int32_t tempVocIndex = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8007328:	193b      	adds	r3, r7, r4
 800732a:	8819      	ldrh	r1, [r3, #0]
 800732c:	2308      	movs	r3, #8
 800732e:	18fa      	adds	r2, r7, r3
 8007330:	4b8d      	ldr	r3, [pc, #564]	@ (8007568 <SGP_GetMeasurementValues+0x3d0>)
 8007332:	0018      	movs	r0, r3
 8007334:	f7ff f848 	bl	80063c8 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4a8c      	ldr	r2, [pc, #560]	@ (800756c <SGP_GetMeasurementValues+0x3d4>)
 800733c:	4979      	ldr	r1, [pc, #484]	@ (8007524 <SGP_GetMeasurementValues+0x38c>)
 800733e:	2003      	movs	r0, #3
 8007340:	f000 ffc8 	bl	80082d4 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	dd60      	ble.n	8007414 <SGP_GetMeasurementValues+0x27c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b64      	cmp	r3, #100	@ 0x64
 8007358:	dc5c      	bgt.n	8007414 <SGP_GetMeasurementValues+0x27c>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	0018      	movs	r0, r3
 8007360:	f7fb fff2 	bl	8003348 <__aeabi_i2d>
 8007364:	2200      	movs	r2, #0
 8007366:	4b82      	ldr	r3, [pc, #520]	@ (8007570 <SGP_GetMeasurementValues+0x3d8>)
 8007368:	f7fa fce8 	bl	8001d3c <__aeabi_ddiv>
 800736c:	0002      	movs	r2, r0
 800736e:	000b      	movs	r3, r1
 8007370:	2000      	movs	r0, #0
 8007372:	4980      	ldr	r1, [pc, #512]	@ (8007574 <SGP_GetMeasurementValues+0x3dc>)
 8007374:	f7fb fbee 	bl	8002b54 <__aeabi_dsub>
 8007378:	0002      	movs	r2, r0
 800737a:	000b      	movs	r3, r1
 800737c:	0014      	movs	r4, r2
 800737e:	001d      	movs	r5, r3
 8007380:	4b7d      	ldr	r3, [pc, #500]	@ (8007578 <SGP_GetMeasurementValues+0x3e0>)
 8007382:	881b      	ldrh	r3, [r3, #0]
 8007384:	0018      	movs	r0, r3
 8007386:	f7fb ffdf 	bl	8003348 <__aeabi_i2d>
 800738a:	0002      	movs	r2, r0
 800738c:	000b      	movs	r3, r1
 800738e:	0020      	movs	r0, r4
 8007390:	0029      	movs	r1, r5
 8007392:	f7fb f917 	bl	80025c4 <__aeabi_dmul>
 8007396:	0002      	movs	r2, r0
 8007398:	000b      	movs	r3, r1
 800739a:	0010      	movs	r0, r2
 800739c:	0019      	movs	r1, r3
 800739e:	f7f9 f969 	bl	8000674 <__aeabi_d2uiz>
 80073a2:	0003      	movs	r3, r0
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	4b75      	ldr	r3, [pc, #468]	@ (800757c <SGP_GetMeasurementValues+0x3e4>)
 80073a8:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	0018      	movs	r0, r3
 80073b0:	f7fb ffca 	bl	8003348 <__aeabi_i2d>
 80073b4:	2200      	movs	r2, #0
 80073b6:	4b6e      	ldr	r3, [pc, #440]	@ (8007570 <SGP_GetMeasurementValues+0x3d8>)
 80073b8:	f7fa fcc0 	bl	8001d3c <__aeabi_ddiv>
 80073bc:	0002      	movs	r2, r0
 80073be:	000b      	movs	r3, r1
 80073c0:	0014      	movs	r4, r2
 80073c2:	001d      	movs	r5, r3
 80073c4:	4b6c      	ldr	r3, [pc, #432]	@ (8007578 <SGP_GetMeasurementValues+0x3e0>)
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	0018      	movs	r0, r3
 80073ca:	f7fb ffbd 	bl	8003348 <__aeabi_i2d>
 80073ce:	0002      	movs	r2, r0
 80073d0:	000b      	movs	r3, r1
 80073d2:	0020      	movs	r0, r4
 80073d4:	0029      	movs	r1, r5
 80073d6:	f7fb f8f5 	bl	80025c4 <__aeabi_dmul>
 80073da:	0002      	movs	r2, r0
 80073dc:	000b      	movs	r3, r1
 80073de:	0010      	movs	r0, r2
 80073e0:	0019      	movs	r1, r3
 80073e2:	f7f9 f947 	bl	8000674 <__aeabi_d2uiz>
 80073e6:	0003      	movs	r3, r0
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	4b65      	ldr	r3, [pc, #404]	@ (8007580 <SGP_GetMeasurementValues+0x3e8>)
 80073ec:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 80073ee:	4b62      	ldr	r3, [pc, #392]	@ (8007578 <SGP_GetMeasurementValues+0x3e0>)
 80073f0:	881a      	ldrh	r2, [r3, #0]
 80073f2:	4b64      	ldr	r3, [pc, #400]	@ (8007584 <SGP_GetMeasurementValues+0x3ec>)
 80073f4:	801a      	strh	r2, [r3, #0]
      TIM2->CCR1 = Red;
 80073f6:	4b63      	ldr	r3, [pc, #396]	@ (8007584 <SGP_GetMeasurementValues+0x3ec>)
 80073f8:	881a      	ldrh	r2, [r3, #0]
 80073fa:	2380      	movs	r3, #128	@ 0x80
 80073fc:	05db      	lsls	r3, r3, #23
 80073fe:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2->CCR3 = Green;
 8007400:	4b5e      	ldr	r3, [pc, #376]	@ (800757c <SGP_GetMeasurementValues+0x3e4>)
 8007402:	881a      	ldrh	r2, [r3, #0]
 8007404:	2380      	movs	r3, #128	@ 0x80
 8007406:	05db      	lsls	r3, r3, #23
 8007408:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = Blue;
 800740a:	4b5d      	ldr	r3, [pc, #372]	@ (8007580 <SGP_GetMeasurementValues+0x3e8>)
 800740c:	881a      	ldrh	r2, [r3, #0]
 800740e:	2380      	movs	r3, #128	@ 0x80
 8007410:	05db      	lsls	r3, r3, #23
 8007412:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      if(*vocIndex > 100){
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b64      	cmp	r3, #100	@ 0x64
 800741a:	dd6c      	ble.n	80074f6 <SGP_GetMeasurementValues+0x35e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	0018      	movs	r0, r3
 8007422:	f7fb ff91 	bl	8003348 <__aeabi_i2d>
 8007426:	2200      	movs	r2, #0
 8007428:	4b51      	ldr	r3, [pc, #324]	@ (8007570 <SGP_GetMeasurementValues+0x3d8>)
 800742a:	f7fb fb93 	bl	8002b54 <__aeabi_dsub>
 800742e:	0002      	movs	r2, r0
 8007430:	000b      	movs	r3, r1
 8007432:	0010      	movs	r0, r2
 8007434:	0019      	movs	r1, r3
 8007436:	2200      	movs	r2, #0
 8007438:	4b53      	ldr	r3, [pc, #332]	@ (8007588 <SGP_GetMeasurementValues+0x3f0>)
 800743a:	f7fa fc7f 	bl	8001d3c <__aeabi_ddiv>
 800743e:	0002      	movs	r2, r0
 8007440:	000b      	movs	r3, r1
 8007442:	0014      	movs	r4, r2
 8007444:	001d      	movs	r5, r3
 8007446:	4b4c      	ldr	r3, [pc, #304]	@ (8007578 <SGP_GetMeasurementValues+0x3e0>)
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	0018      	movs	r0, r3
 800744c:	f7fb ff7c 	bl	8003348 <__aeabi_i2d>
 8007450:	0002      	movs	r2, r0
 8007452:	000b      	movs	r3, r1
 8007454:	0020      	movs	r0, r4
 8007456:	0029      	movs	r1, r5
 8007458:	f7fb f8b4 	bl	80025c4 <__aeabi_dmul>
 800745c:	0002      	movs	r2, r0
 800745e:	000b      	movs	r3, r1
 8007460:	0010      	movs	r0, r2
 8007462:	0019      	movs	r1, r3
 8007464:	f7f9 f906 	bl	8000674 <__aeabi_d2uiz>
 8007468:	0003      	movs	r3, r0
 800746a:	b29a      	uxth	r2, r3
 800746c:	4b43      	ldr	r3, [pc, #268]	@ (800757c <SGP_GetMeasurementValues+0x3e4>)
 800746e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	0018      	movs	r0, r3
 8007476:	f7fb ff67 	bl	8003348 <__aeabi_i2d>
 800747a:	2200      	movs	r2, #0
 800747c:	4b3c      	ldr	r3, [pc, #240]	@ (8007570 <SGP_GetMeasurementValues+0x3d8>)
 800747e:	f7fb fb69 	bl	8002b54 <__aeabi_dsub>
 8007482:	0002      	movs	r2, r0
 8007484:	000b      	movs	r3, r1
 8007486:	0010      	movs	r0, r2
 8007488:	0019      	movs	r1, r3
 800748a:	2200      	movs	r2, #0
 800748c:	4b3e      	ldr	r3, [pc, #248]	@ (8007588 <SGP_GetMeasurementValues+0x3f0>)
 800748e:	f7fa fc55 	bl	8001d3c <__aeabi_ddiv>
 8007492:	0002      	movs	r2, r0
 8007494:	000b      	movs	r3, r1
 8007496:	2000      	movs	r0, #0
 8007498:	4936      	ldr	r1, [pc, #216]	@ (8007574 <SGP_GetMeasurementValues+0x3dc>)
 800749a:	f7fb fb5b 	bl	8002b54 <__aeabi_dsub>
 800749e:	0002      	movs	r2, r0
 80074a0:	000b      	movs	r3, r1
 80074a2:	0014      	movs	r4, r2
 80074a4:	001d      	movs	r5, r3
 80074a6:	4b34      	ldr	r3, [pc, #208]	@ (8007578 <SGP_GetMeasurementValues+0x3e0>)
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	0018      	movs	r0, r3
 80074ac:	f7fb ff4c 	bl	8003348 <__aeabi_i2d>
 80074b0:	0002      	movs	r2, r0
 80074b2:	000b      	movs	r3, r1
 80074b4:	0020      	movs	r0, r4
 80074b6:	0029      	movs	r1, r5
 80074b8:	f7fb f884 	bl	80025c4 <__aeabi_dmul>
 80074bc:	0002      	movs	r2, r0
 80074be:	000b      	movs	r3, r1
 80074c0:	0010      	movs	r0, r2
 80074c2:	0019      	movs	r1, r3
 80074c4:	f7f9 f8d6 	bl	8000674 <__aeabi_d2uiz>
 80074c8:	0003      	movs	r3, r0
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007584 <SGP_GetMeasurementValues+0x3ec>)
 80074ce:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 80074d0:	4b29      	ldr	r3, [pc, #164]	@ (8007578 <SGP_GetMeasurementValues+0x3e0>)
 80074d2:	881a      	ldrh	r2, [r3, #0]
 80074d4:	4b2a      	ldr	r3, [pc, #168]	@ (8007580 <SGP_GetMeasurementValues+0x3e8>)
 80074d6:	801a      	strh	r2, [r3, #0]
        TIM2->CCR1 = Red;
 80074d8:	4b2a      	ldr	r3, [pc, #168]	@ (8007584 <SGP_GetMeasurementValues+0x3ec>)
 80074da:	881a      	ldrh	r2, [r3, #0]
 80074dc:	2380      	movs	r3, #128	@ 0x80
 80074de:	05db      	lsls	r3, r3, #23
 80074e0:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2->CCR3 = Green;
 80074e2:	4b26      	ldr	r3, [pc, #152]	@ (800757c <SGP_GetMeasurementValues+0x3e4>)
 80074e4:	881a      	ldrh	r2, [r3, #0]
 80074e6:	2380      	movs	r3, #128	@ 0x80
 80074e8:	05db      	lsls	r3, r3, #23
 80074ea:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2->CCR4 = Blue;
 80074ec:	4b24      	ldr	r3, [pc, #144]	@ (8007580 <SGP_GetMeasurementValues+0x3e8>)
 80074ee:	881a      	ldrh	r2, [r3, #0]
 80074f0:	2380      	movs	r3, #128	@ 0x80
 80074f2:	05db      	lsls	r3, r3, #23
 80074f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      SGP_AmountOfSamplesDone = 0;
 80074f6:	4b11      	ldr	r3, [pc, #68]	@ (800753c <SGP_GetMeasurementValues+0x3a4>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 80074fc:	4a23      	ldr	r2, [pc, #140]	@ (800758c <SGP_GetMeasurementValues+0x3f4>)
 80074fe:	4b09      	ldr	r3, [pc, #36]	@ (8007524 <SGP_GetMeasurementValues+0x38c>)
 8007500:	0019      	movs	r1, r3
 8007502:	2003      	movs	r0, #3
 8007504:	f000 fee6 	bl	80082d4 <CreateLine>
      HT_MeasurementReceived = false;
 8007508:	4b07      	ldr	r3, [pc, #28]	@ (8007528 <SGP_GetMeasurementValues+0x390>)
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800750e:	4b03      	ldr	r3, [pc, #12]	@ (800751c <SGP_GetMeasurementValues+0x384>)
 8007510:	2200      	movs	r2, #0
 8007512:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8007514:	2301      	movs	r3, #1
 8007516:	e053      	b.n	80075c0 <SGP_GetMeasurementValues+0x428>
 8007518:	200027c6 	.word	0x200027c6
 800751c:	20002871 	.word	0x20002871
 8007520:	08014a14 	.word	0x08014a14
 8007524:	08014a40 	.word	0x08014a40
 8007528:	20002870 	.word	0x20002870
 800752c:	20000114 	.word	0x20000114
 8007530:	20000128 	.word	0x20000128
 8007534:	2000010c 	.word	0x2000010c
 8007538:	200027c7 	.word	0x200027c7
 800753c:	200027c5 	.word	0x200027c5
 8007540:	08014a44 	.word	0x08014a44
 8007544:	200027bc 	.word	0x200027bc
 8007548:	08014a74 	.word	0x08014a74
 800754c:	08014a98 	.word	0x08014a98
 8007550:	08014a9c 	.word	0x08014a9c
 8007554:	08014abc 	.word	0x08014abc
 8007558:	08014ac0 	.word	0x08014ac0
 800755c:	20000124 	.word	0x20000124
 8007560:	2000011c 	.word	0x2000011c
 8007564:	08014ae0 	.word	0x08014ae0
 8007568:	200027c8 	.word	0x200027c8
 800756c:	08014af4 	.word	0x08014af4
 8007570:	40590000 	.word	0x40590000
 8007574:	3ff00000 	.word	0x3ff00000
 8007578:	2000012c 	.word	0x2000012c
 800757c:	20002876 	.word	0x20002876
 8007580:	20002874 	.word	0x20002874
 8007584:	20002872 	.word	0x20002872
 8007588:	40790000 	.word	0x40790000
 800758c:	08014b08 	.word	0x08014b08
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007590:	f7ff fde6 	bl	8007160 <SGP_MeasurementDone>
 8007594:	1e03      	subs	r3, r0, #0
 8007596:	d012      	beq.n	80075be <SGP_GetMeasurementValues+0x426>
 8007598:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <SGP_GetMeasurementValues+0x430>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00e      	beq.n	80075be <SGP_GetMeasurementValues+0x426>
 80075a0:	4b0a      	ldr	r3, [pc, #40]	@ (80075cc <SGP_GetMeasurementValues+0x434>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <SGP_GetMeasurementValues+0x426>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80075a8:	4a09      	ldr	r2, [pc, #36]	@ (80075d0 <SGP_GetMeasurementValues+0x438>)
 80075aa:	4b0a      	ldr	r3, [pc, #40]	@ (80075d4 <SGP_GetMeasurementValues+0x43c>)
 80075ac:	0019      	movs	r1, r3
 80075ae:	2003      	movs	r0, #3
 80075b0:	f000 fe90 	bl	80082d4 <CreateLine>
    SGP_StartMeasurement();
 80075b4:	f7ff fd80 	bl	80070b8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80075b8:	4b07      	ldr	r3, [pc, #28]	@ (80075d8 <SGP_GetMeasurementValues+0x440>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	0018      	movs	r0, r3
 80075c2:	46bd      	mov	sp, r7
 80075c4:	b004      	add	sp, #16
 80075c6:	bdb0      	pop	{r4, r5, r7, pc}
 80075c8:	200027c6 	.word	0x200027c6
 80075cc:	200027c7 	.word	0x200027c7
 80075d0:	08014b2c 	.word	0x08014b2c
 80075d4:	08014a40 	.word	0x08014a40
 80075d8:	20002871 	.word	0x20002871

080075dc <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80075e2:	4b1a      	ldr	r3, [pc, #104]	@ (800764c <SGP_DeviceConnected+0x70>)
 80075e4:	2202      	movs	r2, #2
 80075e6:	0019      	movs	r1, r3
 80075e8:	2059      	movs	r0, #89	@ 0x59
 80075ea:	f7ff fd2d 	bl	8007048 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80075ee:	2001      	movs	r0, #1
 80075f0:	f001 fa72 	bl	8008ad8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80075f4:	4b16      	ldr	r3, [pc, #88]	@ (8007650 <SGP_DeviceConnected+0x74>)
 80075f6:	2209      	movs	r2, #9
 80075f8:	0019      	movs	r1, r3
 80075fa:	2059      	movs	r0, #89	@ 0x59
 80075fc:	f7ff fd06 	bl	800700c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007600:	1dfb      	adds	r3, r7, #7
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
 8007606:	e011      	b.n	800762c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8007608:	1dfb      	adds	r3, r7, #7
 800760a:	7818      	ldrb	r0, [r3, #0]
 800760c:	1dfb      	adds	r3, r7, #7
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	4a0f      	ldr	r2, [pc, #60]	@ (8007650 <SGP_DeviceConnected+0x74>)
 8007612:	5cd3      	ldrb	r3, [r2, r3]
 8007614:	4a0f      	ldr	r2, [pc, #60]	@ (8007654 <SGP_DeviceConnected+0x78>)
 8007616:	4910      	ldr	r1, [pc, #64]	@ (8007658 <SGP_DeviceConnected+0x7c>)
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	0003      	movs	r3, r0
 800761c:	2002      	movs	r0, #2
 800761e:	f000 fe59 	bl	80082d4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007622:	1dfb      	adds	r3, r7, #7
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	1dfb      	adds	r3, r7, #7
 8007628:	3201      	adds	r2, #1
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	1dfb      	adds	r3, r7, #7
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b08      	cmp	r3, #8
 8007632:	d9e9      	bls.n	8007608 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8007634:	4b06      	ldr	r3, [pc, #24]	@ (8007650 <SGP_DeviceConnected+0x74>)
 8007636:	2203      	movs	r2, #3
 8007638:	2109      	movs	r1, #9
 800763a:	0018      	movs	r0, r3
 800763c:	f000 f80e 	bl	800765c <CheckCRC>
 8007640:	0003      	movs	r3, r0
}
 8007642:	0018      	movs	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	b002      	add	sp, #8
 8007648:	bd80      	pop	{r7, pc}
 800764a:	46c0      	nop			@ (mov r8, r8)
 800764c:	20000108 	.word	0x20000108
 8007650:	200027bc 	.word	0x200027bc
 8007654:	08014b4c 	.word	0x08014b4c
 8007658:	08014abc 	.word	0x08014abc

0800765c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800765c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765e:	b08f      	sub	sp, #60	@ 0x3c
 8007660:	af00      	add	r7, sp, #0
 8007662:	6278      	str	r0, [r7, #36]	@ 0x24
 8007664:	0008      	movs	r0, r1
 8007666:	0011      	movs	r1, r2
 8007668:	2323      	movs	r3, #35	@ 0x23
 800766a:	18fb      	adds	r3, r7, r3
 800766c:	1c02      	adds	r2, r0, #0
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	2322      	movs	r3, #34	@ 0x22
 8007672:	18fb      	adds	r3, r7, r3
 8007674:	1c0a      	adds	r2, r1, #0
 8007676:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007678:	2317      	movs	r3, #23
 800767a:	2220      	movs	r2, #32
 800767c:	189b      	adds	r3, r3, r2
 800767e:	19db      	adds	r3, r3, r7
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	e09f      	b.n	80077c6 <CheckCRC+0x16a>
 8007686:	466b      	mov	r3, sp
 8007688:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800768a:	2322      	movs	r3, #34	@ 0x22
 800768c:	18fb      	adds	r3, r7, r3
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	001a      	movs	r2, r3
 8007692:	3a01      	subs	r2, #1
 8007694:	633a      	str	r2, [r7, #48]	@ 0x30
 8007696:	60bb      	str	r3, [r7, #8]
 8007698:	2200      	movs	r2, #0
 800769a:	60fa      	str	r2, [r7, #12]
 800769c:	68b8      	ldr	r0, [r7, #8]
 800769e:	68f9      	ldr	r1, [r7, #12]
 80076a0:	0002      	movs	r2, r0
 80076a2:	0f52      	lsrs	r2, r2, #29
 80076a4:	000c      	movs	r4, r1
 80076a6:	00e4      	lsls	r4, r4, #3
 80076a8:	61fc      	str	r4, [r7, #28]
 80076aa:	69fc      	ldr	r4, [r7, #28]
 80076ac:	4314      	orrs	r4, r2
 80076ae:	61fc      	str	r4, [r7, #28]
 80076b0:	0002      	movs	r2, r0
 80076b2:	00d2      	lsls	r2, r2, #3
 80076b4:	61ba      	str	r2, [r7, #24]
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	2200      	movs	r2, #0
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	6838      	ldr	r0, [r7, #0]
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	0002      	movs	r2, r0
 80076c2:	0f52      	lsrs	r2, r2, #29
 80076c4:	000c      	movs	r4, r1
 80076c6:	00e4      	lsls	r4, r4, #3
 80076c8:	617c      	str	r4, [r7, #20]
 80076ca:	697c      	ldr	r4, [r7, #20]
 80076cc:	4314      	orrs	r4, r2
 80076ce:	617c      	str	r4, [r7, #20]
 80076d0:	0002      	movs	r2, r0
 80076d2:	00d2      	lsls	r2, r2, #3
 80076d4:	613a      	str	r2, [r7, #16]
 80076d6:	3307      	adds	r3, #7
 80076d8:	08db      	lsrs	r3, r3, #3
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	466a      	mov	r2, sp
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	469d      	mov	sp, r3
 80076e2:	466b      	mov	r3, sp
 80076e4:	3300      	adds	r3, #0
 80076e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80076e8:	2316      	movs	r3, #22
 80076ea:	2220      	movs	r2, #32
 80076ec:	189b      	adds	r3, r3, r2
 80076ee:	19db      	adds	r3, r3, r7
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	e01e      	b.n	8007734 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80076f6:	2317      	movs	r3, #23
 80076f8:	2220      	movs	r2, #32
 80076fa:	189b      	adds	r3, r3, r2
 80076fc:	19db      	adds	r3, r3, r7
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	2116      	movs	r1, #22
 8007702:	2320      	movs	r3, #32
 8007704:	18cb      	adds	r3, r1, r3
 8007706:	19db      	adds	r3, r3, r7
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	18d3      	adds	r3, r2, r3
 800770c:	001a      	movs	r2, r3
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	189a      	adds	r2, r3, r2
 8007712:	0008      	movs	r0, r1
 8007714:	2320      	movs	r3, #32
 8007716:	18cb      	adds	r3, r1, r3
 8007718:	19db      	adds	r3, r3, r7
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	7811      	ldrb	r1, [r2, #0]
 800771e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007720:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8007722:	2320      	movs	r3, #32
 8007724:	18c3      	adds	r3, r0, r3
 8007726:	19db      	adds	r3, r3, r7
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	2320      	movs	r3, #32
 800772c:	18c3      	adds	r3, r0, r3
 800772e:	19db      	adds	r3, r3, r7
 8007730:	3201      	adds	r2, #1
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	2316      	movs	r3, #22
 8007736:	2220      	movs	r2, #32
 8007738:	189b      	adds	r3, r3, r2
 800773a:	19da      	adds	r2, r3, r7
 800773c:	2322      	movs	r3, #34	@ 0x22
 800773e:	18fb      	adds	r3, r7, r3
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d3d6      	bcc.n	80076f6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8007748:	2417      	movs	r4, #23
 800774a:	2320      	movs	r3, #32
 800774c:	18e3      	adds	r3, r4, r3
 800774e:	19db      	adds	r3, r3, r7
 8007750:	781a      	ldrb	r2, [r3, #0]
 8007752:	2322      	movs	r3, #34	@ 0x22
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	18d3      	adds	r3, r2, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800775e:	18d2      	adds	r2, r2, r3
 8007760:	250b      	movs	r5, #11
 8007762:	2320      	movs	r3, #32
 8007764:	18eb      	adds	r3, r5, r3
 8007766:	19db      	adds	r3, r3, r7
 8007768:	7812      	ldrb	r2, [r2, #0]
 800776a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800776c:	2322      	movs	r3, #34	@ 0x22
 800776e:	18fb      	adds	r3, r7, r3
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	3b01      	subs	r3, #1
 8007774:	b2da      	uxtb	r2, r3
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	0011      	movs	r1, r2
 800777a:	0018      	movs	r0, r3
 800777c:	f000 f838 	bl	80077f0 <CalculateCRC>
 8007780:	0003      	movs	r3, r0
 8007782:	001a      	movs	r2, r3
 8007784:	2320      	movs	r3, #32
 8007786:	18eb      	adds	r3, r5, r3
 8007788:	19db      	adds	r3, r3, r7
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	4293      	cmp	r3, r2
 800778e:	d00c      	beq.n	80077aa <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8007790:	2320      	movs	r3, #32
 8007792:	18e3      	adds	r3, r4, r3
 8007794:	19db      	adds	r3, r3, r7
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	3301      	adds	r3, #1
 800779a:	4a13      	ldr	r2, [pc, #76]	@ (80077e8 <CheckCRC+0x18c>)
 800779c:	4913      	ldr	r1, [pc, #76]	@ (80077ec <CheckCRC+0x190>)
 800779e:	2001      	movs	r0, #1
 80077a0:	f000 fd98 	bl	80082d4 <CreateLine>
      return false;
 80077a4:	2300      	movs	r3, #0
 80077a6:	46b5      	mov	sp, r6
 80077a8:	e019      	b.n	80077de <CheckCRC+0x182>
 80077aa:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80077ac:	2217      	movs	r2, #23
 80077ae:	2320      	movs	r3, #32
 80077b0:	18d3      	adds	r3, r2, r3
 80077b2:	19db      	adds	r3, r3, r7
 80077b4:	2120      	movs	r1, #32
 80077b6:	1852      	adds	r2, r2, r1
 80077b8:	19d1      	adds	r1, r2, r7
 80077ba:	2222      	movs	r2, #34	@ 0x22
 80077bc:	18ba      	adds	r2, r7, r2
 80077be:	7809      	ldrb	r1, [r1, #0]
 80077c0:	7812      	ldrb	r2, [r2, #0]
 80077c2:	188a      	adds	r2, r1, r2
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	2317      	movs	r3, #23
 80077c8:	2220      	movs	r2, #32
 80077ca:	189b      	adds	r3, r3, r2
 80077cc:	19da      	adds	r2, r3, r7
 80077ce:	2323      	movs	r3, #35	@ 0x23
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	7812      	ldrb	r2, [r2, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d200      	bcs.n	80077dc <CheckCRC+0x180>
 80077da:	e754      	b.n	8007686 <CheckCRC+0x2a>
    }
  }
  return true;
 80077dc:	2301      	movs	r3, #1
}
 80077de:	0018      	movs	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	b00f      	add	sp, #60	@ 0x3c
 80077e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e6:	46c0      	nop			@ (mov r8, r8)
 80077e8:	08014b6c 	.word	0x08014b6c
 80077ec:	08014a98 	.word	0x08014a98

080077f0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	000a      	movs	r2, r1
 80077fa:	1cfb      	adds	r3, r7, #3
 80077fc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 80077fe:	230f      	movs	r3, #15
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	22ff      	movs	r2, #255	@ 0xff
 8007804:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007806:	230e      	movs	r3, #14
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
 800780e:	e037      	b.n	8007880 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007810:	230e      	movs	r3, #14
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	18d3      	adds	r3, r2, r3
 800781a:	7819      	ldrb	r1, [r3, #0]
 800781c:	220f      	movs	r2, #15
 800781e:	18bb      	adds	r3, r7, r2
 8007820:	18ba      	adds	r2, r7, r2
 8007822:	7812      	ldrb	r2, [r2, #0]
 8007824:	404a      	eors	r2, r1
 8007826:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007828:	230d      	movs	r3, #13
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	e01b      	b.n	800786a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8007832:	210f      	movs	r1, #15
 8007834:	187b      	adds	r3, r7, r1
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b25b      	sxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	da09      	bge.n	8007852 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800783e:	187b      	adds	r3, r7, r1
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	b25b      	sxtb	r3, r3
 8007846:	2231      	movs	r2, #49	@ 0x31
 8007848:	4053      	eors	r3, r2
 800784a:	b25a      	sxtb	r2, r3
 800784c:	187b      	adds	r3, r7, r1
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e005      	b.n	800785e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8007852:	230f      	movs	r3, #15
 8007854:	18fa      	adds	r2, r7, r3
 8007856:	18fb      	adds	r3, r7, r3
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	18db      	adds	r3, r3, r3
 800785c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800785e:	210d      	movs	r1, #13
 8007860:	187b      	adds	r3, r7, r1
 8007862:	781a      	ldrb	r2, [r3, #0]
 8007864:	187b      	adds	r3, r7, r1
 8007866:	3201      	adds	r2, #1
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	230d      	movs	r3, #13
 800786c:	18fb      	adds	r3, r7, r3
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b07      	cmp	r3, #7
 8007872:	d9de      	bls.n	8007832 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8007874:	210e      	movs	r1, #14
 8007876:	187b      	adds	r3, r7, r1
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	187b      	adds	r3, r7, r1
 800787c:	3201      	adds	r2, #1
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	230e      	movs	r3, #14
 8007882:	18fa      	adds	r2, r7, r3
 8007884:	1cfb      	adds	r3, r7, #3
 8007886:	7812      	ldrb	r2, [r2, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d3c0      	bcc.n	8007810 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800788e:	230f      	movs	r3, #15
 8007890:	18fb      	adds	r3, r7, r3
 8007892:	781b      	ldrb	r3, [r3, #0]
}
 8007894:	0018      	movs	r0, r3
 8007896:	46bd      	mov	sp, r7
 8007898:	b004      	add	sp, #16
 800789a:	bd80      	pop	{r7, pc}

0800789c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4936      	ldr	r1, [pc, #216]	@ (8007984 <SGP_GetHT+0xe8>)
 80078ac:	1c18      	adds	r0, r3, #0
 80078ae:	f7f8 ffcb 	bl	8000848 <__aeabi_fadd>
 80078b2:	1c03      	adds	r3, r0, #0
 80078b4:	4934      	ldr	r1, [pc, #208]	@ (8007988 <SGP_GetHT+0xec>)
 80078b6:	1c18      	adds	r0, r3, #0
 80078b8:	f7f9 f950 	bl	8000b5c <__aeabi_fdiv>
 80078bc:	1c03      	adds	r3, r0, #0
 80078be:	4933      	ldr	r1, [pc, #204]	@ (800798c <SGP_GetHT+0xf0>)
 80078c0:	1c18      	adds	r0, r3, #0
 80078c2:	f7f9 fb31 	bl	8000f28 <__aeabi_fmul>
 80078c6:	1c03      	adds	r3, r0, #0
 80078c8:	1c18      	adds	r0, r3, #0
 80078ca:	f7f8 febb 	bl	8000644 <__aeabi_f2uiz>
 80078ce:	0003      	movs	r3, r0
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007990 <SGP_GetHT+0xf4>)
 80078d4:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	492e      	ldr	r1, [pc, #184]	@ (8007994 <SGP_GetHT+0xf8>)
 80078dc:	1c18      	adds	r0, r3, #0
 80078de:	f7f9 f93d 	bl	8000b5c <__aeabi_fdiv>
 80078e2:	1c03      	adds	r3, r0, #0
 80078e4:	4929      	ldr	r1, [pc, #164]	@ (800798c <SGP_GetHT+0xf0>)
 80078e6:	1c18      	adds	r0, r3, #0
 80078e8:	f7f9 fb1e 	bl	8000f28 <__aeabi_fmul>
 80078ec:	1c03      	adds	r3, r0, #0
 80078ee:	1c18      	adds	r0, r3, #0
 80078f0:	f7f8 fea8 	bl	8000644 <__aeabi_f2uiz>
 80078f4:	0003      	movs	r3, r0
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	4b27      	ldr	r3, [pc, #156]	@ (8007998 <SGP_GetHT+0xfc>)
 80078fa:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 80078fc:	4b26      	ldr	r3, [pc, #152]	@ (8007998 <SGP_GetHT+0xfc>)
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	0a1b      	lsrs	r3, r3, #8
 8007902:	b29b      	uxth	r3, r3
 8007904:	b2da      	uxtb	r2, r3
 8007906:	4b25      	ldr	r3, [pc, #148]	@ (800799c <SGP_GetHT+0x100>)
 8007908:	709a      	strb	r2, [r3, #2]
 800790a:	4b24      	ldr	r3, [pc, #144]	@ (800799c <SGP_GetHT+0x100>)
 800790c:	789a      	ldrb	r2, [r3, #2]
 800790e:	210c      	movs	r1, #12
 8007910:	187b      	adds	r3, r7, r1
 8007912:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8007914:	4b20      	ldr	r3, [pc, #128]	@ (8007998 <SGP_GetHT+0xfc>)
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4b20      	ldr	r3, [pc, #128]	@ (800799c <SGP_GetHT+0x100>)
 800791c:	70da      	strb	r2, [r3, #3]
 800791e:	4b1f      	ldr	r3, [pc, #124]	@ (800799c <SGP_GetHT+0x100>)
 8007920:	78da      	ldrb	r2, [r3, #3]
 8007922:	187b      	adds	r3, r7, r1
 8007924:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8007926:	187b      	adds	r3, r7, r1
 8007928:	2102      	movs	r1, #2
 800792a:	0018      	movs	r0, r3
 800792c:	f7ff ff60 	bl	80077f0 <CalculateCRC>
 8007930:	0003      	movs	r3, r0
 8007932:	001a      	movs	r2, r3
 8007934:	4b19      	ldr	r3, [pc, #100]	@ (800799c <SGP_GetHT+0x100>)
 8007936:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8007938:	4b15      	ldr	r3, [pc, #84]	@ (8007990 <SGP_GetHT+0xf4>)
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	0a1b      	lsrs	r3, r3, #8
 800793e:	b29b      	uxth	r3, r3
 8007940:	b2da      	uxtb	r2, r3
 8007942:	4b16      	ldr	r3, [pc, #88]	@ (800799c <SGP_GetHT+0x100>)
 8007944:	715a      	strb	r2, [r3, #5]
 8007946:	4b15      	ldr	r3, [pc, #84]	@ (800799c <SGP_GetHT+0x100>)
 8007948:	795a      	ldrb	r2, [r3, #5]
 800794a:	2108      	movs	r1, #8
 800794c:	187b      	adds	r3, r7, r1
 800794e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8007950:	4b0f      	ldr	r3, [pc, #60]	@ (8007990 <SGP_GetHT+0xf4>)
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b2da      	uxtb	r2, r3
 8007956:	4b11      	ldr	r3, [pc, #68]	@ (800799c <SGP_GetHT+0x100>)
 8007958:	719a      	strb	r2, [r3, #6]
 800795a:	4b10      	ldr	r3, [pc, #64]	@ (800799c <SGP_GetHT+0x100>)
 800795c:	799a      	ldrb	r2, [r3, #6]
 800795e:	187b      	adds	r3, r7, r1
 8007960:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8007962:	187b      	adds	r3, r7, r1
 8007964:	2102      	movs	r1, #2
 8007966:	0018      	movs	r0, r3
 8007968:	f7ff ff42 	bl	80077f0 <CalculateCRC>
 800796c:	0003      	movs	r3, r0
 800796e:	001a      	movs	r2, r3
 8007970:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <SGP_GetHT+0x100>)
 8007972:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8007974:	4b0a      	ldr	r3, [pc, #40]	@ (80079a0 <SGP_GetHT+0x104>)
 8007976:	2201      	movs	r2, #1
 8007978:	701a      	strb	r2, [r3, #0]
}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	46bd      	mov	sp, r7
 800797e:	b004      	add	sp, #16
 8007980:	bd80      	pop	{r7, pc}
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	42340000 	.word	0x42340000
 8007988:	432f0000 	.word	0x432f0000
 800798c:	477fff00 	.word	0x477fff00
 8007990:	2000286e 	.word	0x2000286e
 8007994:	42c80000 	.word	0x42c80000
 8007998:	2000286c 	.word	0x2000286c
 800799c:	20000114 	.word	0x20000114
 80079a0:	20002870 	.word	0x20002870

080079a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079a8:	4b07      	ldr	r3, [pc, #28]	@ (80079c8 <HAL_MspInit+0x24>)
 80079aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079ac:	4b06      	ldr	r3, [pc, #24]	@ (80079c8 <HAL_MspInit+0x24>)
 80079ae:	2101      	movs	r1, #1
 80079b0:	430a      	orrs	r2, r1
 80079b2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80079b4:	4b04      	ldr	r3, [pc, #16]	@ (80079c8 <HAL_MspInit+0x24>)
 80079b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079b8:	4b03      	ldr	r3, [pc, #12]	@ (80079c8 <HAL_MspInit+0x24>)
 80079ba:	2180      	movs	r1, #128	@ 0x80
 80079bc:	0549      	lsls	r1, r1, #21
 80079be:	430a      	orrs	r2, r1
 80079c0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079c2:	46c0      	nop			@ (mov r8, r8)
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	40021000 	.word	0x40021000

080079cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80079d0:	46c0      	nop			@ (mov r8, r8)
 80079d2:	e7fd      	b.n	80079d0 <NMI_Handler+0x4>

080079d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079d8:	46c0      	nop			@ (mov r8, r8)
 80079da:	e7fd      	b.n	80079d8 <HardFault_Handler+0x4>

080079dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80079e0:	46c0      	nop			@ (mov r8, r8)
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079ea:	46c0      	nop			@ (mov r8, r8)
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079f4:	f001 f854 	bl	8008aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079f8:	46c0      	nop			@ (mov r8, r8)
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007a04:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8007a06:	0018      	movs	r0, r3
 8007a08:	f001 fea9 	bl	800975e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007a0c:	4b04      	ldr	r3, [pc, #16]	@ (8007a20 <DMA1_Channel2_3_IRQHandler+0x20>)
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f001 fea5 	bl	800975e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007a14:	46c0      	nop			@ (mov r8, r8)
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			@ (mov r8, r8)
 8007a1c:	20000a40 	.word	0x20000a40
 8007a20:	200009f8 	.word	0x200009f8

08007a24 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8007a28:	4b07      	ldr	r3, [pc, #28]	@ (8007a48 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f001 fe97 	bl	800975e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8007a30:	4b06      	ldr	r3, [pc, #24]	@ (8007a4c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8007a32:	0018      	movs	r0, r3
 8007a34:	f001 fe93 	bl	800975e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8007a38:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f001 fe8f 	bl	800975e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8007a40:	46c0      	nop			@ (mov r8, r8)
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	20000ac4 	.word	0x20000ac4
 8007a4c:	20002a6c 	.word	0x20002a6c
 8007a50:	20002ab4 	.word	0x20002ab4

08007a54 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007a58:	4b03      	ldr	r3, [pc, #12]	@ (8007a68 <USART4_5_IRQHandler+0x14>)
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f006 fb6a 	bl	800e134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8007a60:	46c0      	nop			@ (mov r8, r8)
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	200029b4 	.word	0x200029b4

08007a6c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8007a70:	4b09      	ldr	r3, [pc, #36]	@ (8007a98 <I2C1_IRQHandler+0x2c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	23e0      	movs	r3, #224	@ 0xe0
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8007a7e:	4b06      	ldr	r3, [pc, #24]	@ (8007a98 <I2C1_IRQHandler+0x2c>)
 8007a80:	0018      	movs	r0, r3
 8007a82:	f002 fca9 	bl	800a3d8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8007a86:	e003      	b.n	8007a90 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8007a88:	4b03      	ldr	r3, [pc, #12]	@ (8007a98 <I2C1_IRQHandler+0x2c>)
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f002 fc8a 	bl	800a3a4 <HAL_I2C_EV_IRQHandler>
}
 8007a90:	46c0      	nop			@ (mov r8, r8)
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	20000950 	.word	0x20000950

08007a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  return 1;
 8007aa0:	2301      	movs	r3, #1
}
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <_kill>:

int _kill(int pid, int sig)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007ab2:	f009 ff67 	bl	8011984 <__errno>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	2216      	movs	r2, #22
 8007aba:	601a      	str	r2, [r3, #0]
  return -1;
 8007abc:	2301      	movs	r3, #1
 8007abe:	425b      	negs	r3, r3
}
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	b002      	add	sp, #8
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <_exit>:

void _exit (int status)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	425a      	negs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	0011      	movs	r1, r2
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f7ff ffe5 	bl	8007aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007ade:	46c0      	nop			@ (mov r8, r8)
 8007ae0:	e7fd      	b.n	8007ade <_exit+0x16>

08007ae2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b086      	sub	sp, #24
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007aee:	2300      	movs	r3, #0
 8007af0:	617b      	str	r3, [r7, #20]
 8007af2:	e00a      	b.n	8007b0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007af4:	e000      	b.n	8007af8 <_read+0x16>
 8007af6:	bf00      	nop
 8007af8:	0001      	movs	r1, r0
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	60ba      	str	r2, [r7, #8]
 8007b00:	b2ca      	uxtb	r2, r1
 8007b02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	3301      	adds	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	dbf0      	blt.n	8007af4 <_read+0x12>
  }

  return len;
 8007b12:	687b      	ldr	r3, [r7, #4]
}
 8007b14:	0018      	movs	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b006      	add	sp, #24
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <_close>:
  }
  return len;
}

int _close(int file)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007b24:	2301      	movs	r3, #1
 8007b26:	425b      	negs	r3, r3
}
 8007b28:	0018      	movs	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b002      	add	sp, #8
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2280      	movs	r2, #128	@ 0x80
 8007b3e:	0192      	lsls	r2, r2, #6
 8007b40:	605a      	str	r2, [r3, #4]
  return 0;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	0018      	movs	r0, r3
 8007b46:	46bd      	mov	sp, r7
 8007b48:	b002      	add	sp, #8
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <_isatty>:

int _isatty(int file)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007b54:	2301      	movs	r3, #1
}
 8007b56:	0018      	movs	r0, r3
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	b002      	add	sp, #8
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b004      	add	sp, #16
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007b7c:	4a14      	ldr	r2, [pc, #80]	@ (8007bd0 <_sbrk+0x5c>)
 8007b7e:	4b15      	ldr	r3, [pc, #84]	@ (8007bd4 <_sbrk+0x60>)
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007b88:	4b13      	ldr	r3, [pc, #76]	@ (8007bd8 <_sbrk+0x64>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007b90:	4b11      	ldr	r3, [pc, #68]	@ (8007bd8 <_sbrk+0x64>)
 8007b92:	4a12      	ldr	r2, [pc, #72]	@ (8007bdc <_sbrk+0x68>)
 8007b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007b96:	4b10      	ldr	r3, [pc, #64]	@ (8007bd8 <_sbrk+0x64>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	18d3      	adds	r3, r2, r3
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d207      	bcs.n	8007bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007ba4:	f009 feee 	bl	8011984 <__errno>
 8007ba8:	0003      	movs	r3, r0
 8007baa:	220c      	movs	r2, #12
 8007bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	425b      	negs	r3, r3
 8007bb2:	e009      	b.n	8007bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007bb4:	4b08      	ldr	r3, [pc, #32]	@ (8007bd8 <_sbrk+0x64>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007bba:	4b07      	ldr	r3, [pc, #28]	@ (8007bd8 <_sbrk+0x64>)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	18d2      	adds	r2, r2, r3
 8007bc2:	4b05      	ldr	r3, [pc, #20]	@ (8007bd8 <_sbrk+0x64>)
 8007bc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
}
 8007bc8:	0018      	movs	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b006      	add	sp, #24
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20005000 	.word	0x20005000
 8007bd4:	00000400 	.word	0x00000400
 8007bd8:	20002878 	.word	0x20002878
 8007bdc:	20003760 	.word	0x20003760

08007be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007be4:	46c0      	nop			@ (mov r8, r8)
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bf2:	2310      	movs	r3, #16
 8007bf4:	18fb      	adds	r3, r7, r3
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	001a      	movs	r2, r3
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	f009 fe3d 	bl	801187c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c02:	003b      	movs	r3, r7
 8007c04:	0018      	movs	r0, r3
 8007c06:	2310      	movs	r3, #16
 8007c08:	001a      	movs	r2, r3
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	f009 fe36 	bl	801187c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007c10:	4b2e      	ldr	r3, [pc, #184]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c12:	2280      	movs	r2, #128	@ 0x80
 8007c14:	05d2      	lsls	r2, r2, #23
 8007c16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007c18:	4b2c      	ldr	r3, [pc, #176]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007c24:	4b29      	ldr	r3, [pc, #164]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c26:	4a2a      	ldr	r2, [pc, #168]	@ (8007cd0 <MX_TIM2_Init+0xe4>)
 8007c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c2a:	4b28      	ldr	r3, [pc, #160]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c30:	4b26      	ldr	r3, [pc, #152]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007c36:	4b25      	ldr	r3, [pc, #148]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f005 fced 	bl	800d618 <HAL_TIM_PWM_Init>
 8007c3e:	1e03      	subs	r3, r0, #0
 8007c40:	d001      	beq.n	8007c46 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8007c42:	f7fd fd17 	bl	8005674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c46:	2110      	movs	r1, #16
 8007c48:	187b      	adds	r3, r7, r1
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c4e:	187b      	adds	r3, r7, r1
 8007c50:	2200      	movs	r2, #0
 8007c52:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007c54:	187a      	adds	r2, r7, r1
 8007c56:	4b1d      	ldr	r3, [pc, #116]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c58:	0011      	movs	r1, r2
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f005 fffa 	bl	800dc54 <HAL_TIMEx_MasterConfigSynchronization>
 8007c60:	1e03      	subs	r3, r0, #0
 8007c62:	d001      	beq.n	8007c68 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8007c64:	f7fd fd06 	bl	8005674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007c68:	003b      	movs	r3, r7
 8007c6a:	2260      	movs	r2, #96	@ 0x60
 8007c6c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8007c6e:	003b      	movs	r3, r7
 8007c70:	2200      	movs	r2, #0
 8007c72:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007c74:	003b      	movs	r3, r7
 8007c76:	2200      	movs	r2, #0
 8007c78:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007c7a:	003b      	movs	r3, r7
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007c80:	0039      	movs	r1, r7
 8007c82:	4b12      	ldr	r3, [pc, #72]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	0018      	movs	r0, r3
 8007c88:	f005 fd98 	bl	800d7bc <HAL_TIM_PWM_ConfigChannel>
 8007c8c:	1e03      	subs	r3, r0, #0
 8007c8e:	d001      	beq.n	8007c94 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8007c90:	f7fd fcf0 	bl	8005674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007c94:	0039      	movs	r1, r7
 8007c96:	4b0d      	ldr	r3, [pc, #52]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007c98:	2208      	movs	r2, #8
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	f005 fd8e 	bl	800d7bc <HAL_TIM_PWM_ConfigChannel>
 8007ca0:	1e03      	subs	r3, r0, #0
 8007ca2:	d001      	beq.n	8007ca8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8007ca4:	f7fd fce6 	bl	8005674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007ca8:	0039      	movs	r1, r7
 8007caa:	4b08      	ldr	r3, [pc, #32]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007cac:	220c      	movs	r2, #12
 8007cae:	0018      	movs	r0, r3
 8007cb0:	f005 fd84 	bl	800d7bc <HAL_TIM_PWM_ConfigChannel>
 8007cb4:	1e03      	subs	r3, r0, #0
 8007cb6:	d001      	beq.n	8007cbc <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8007cb8:	f7fd fcdc 	bl	8005674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007cbc:	4b03      	ldr	r3, [pc, #12]	@ (8007ccc <MX_TIM2_Init+0xe0>)
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f000 f8aa 	bl	8007e18 <HAL_TIM_MspPostInit>

}
 8007cc4:	46c0      	nop			@ (mov r8, r8)
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b006      	add	sp, #24
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	2000287c 	.word	0x2000287c
 8007cd0:	0000ffff 	.word	0x0000ffff

08007cd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cda:	2310      	movs	r3, #16
 8007cdc:	18fb      	adds	r3, r7, r3
 8007cde:	0018      	movs	r0, r3
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	001a      	movs	r2, r3
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	f009 fdc9 	bl	801187c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007cea:	003b      	movs	r3, r7
 8007cec:	0018      	movs	r0, r3
 8007cee:	2310      	movs	r3, #16
 8007cf0:	001a      	movs	r2, r3
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	f009 fdc2 	bl	801187c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007cf8:	4b32      	ldr	r3, [pc, #200]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007cfa:	4a33      	ldr	r2, [pc, #204]	@ (8007dc8 <MX_TIM3_Init+0xf4>)
 8007cfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007cfe:	4b31      	ldr	r3, [pc, #196]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d04:	4b2f      	ldr	r3, [pc, #188]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d0c:	4a2f      	ldr	r2, [pc, #188]	@ (8007dcc <MX_TIM3_Init+0xf8>)
 8007d0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d10:	4b2c      	ldr	r3, [pc, #176]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d16:	4b2b      	ldr	r3, [pc, #172]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007d1c:	4b29      	ldr	r3, [pc, #164]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d1e:	0018      	movs	r0, r3
 8007d20:	f005 fc7a 	bl	800d618 <HAL_TIM_PWM_Init>
 8007d24:	1e03      	subs	r3, r0, #0
 8007d26:	d001      	beq.n	8007d2c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8007d28:	f7fd fca4 	bl	8005674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d2c:	2110      	movs	r1, #16
 8007d2e:	187b      	adds	r3, r7, r1
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d34:	187b      	adds	r3, r7, r1
 8007d36:	2200      	movs	r2, #0
 8007d38:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007d3a:	187a      	adds	r2, r7, r1
 8007d3c:	4b21      	ldr	r3, [pc, #132]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d3e:	0011      	movs	r1, r2
 8007d40:	0018      	movs	r0, r3
 8007d42:	f005 ff87 	bl	800dc54 <HAL_TIMEx_MasterConfigSynchronization>
 8007d46:	1e03      	subs	r3, r0, #0
 8007d48:	d001      	beq.n	8007d4e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8007d4a:	f7fd fc93 	bl	8005674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007d4e:	003b      	movs	r3, r7
 8007d50:	2260      	movs	r2, #96	@ 0x60
 8007d52:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8007d54:	003b      	movs	r3, r7
 8007d56:	2200      	movs	r2, #0
 8007d58:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d5a:	003b      	movs	r3, r7
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007d60:	003b      	movs	r3, r7
 8007d62:	2200      	movs	r2, #0
 8007d64:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007d66:	0039      	movs	r1, r7
 8007d68:	4b16      	ldr	r3, [pc, #88]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f005 fd25 	bl	800d7bc <HAL_TIM_PWM_ConfigChannel>
 8007d72:	1e03      	subs	r3, r0, #0
 8007d74:	d001      	beq.n	8007d7a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8007d76:	f7fd fc7d 	bl	8005674 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8007d7a:	4b12      	ldr	r3, [pc, #72]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d7c:	2104      	movs	r1, #4
 8007d7e:	0018      	movs	r0, r3
 8007d80:	f005 ffc6 	bl	800dd10 <HAL_TIMEx_RemapConfig>
 8007d84:	1e03      	subs	r3, r0, #0
 8007d86:	d001      	beq.n	8007d8c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8007d88:	f7fd fc74 	bl	8005674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007d8c:	0039      	movs	r1, r7
 8007d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007d90:	2204      	movs	r2, #4
 8007d92:	0018      	movs	r0, r3
 8007d94:	f005 fd12 	bl	800d7bc <HAL_TIM_PWM_ConfigChannel>
 8007d98:	1e03      	subs	r3, r0, #0
 8007d9a:	d001      	beq.n	8007da0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8007d9c:	f7fd fc6a 	bl	8005674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007da0:	0039      	movs	r1, r7
 8007da2:	4b08      	ldr	r3, [pc, #32]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007da4:	2208      	movs	r2, #8
 8007da6:	0018      	movs	r0, r3
 8007da8:	f005 fd08 	bl	800d7bc <HAL_TIM_PWM_ConfigChannel>
 8007dac:	1e03      	subs	r3, r0, #0
 8007dae:	d001      	beq.n	8007db4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8007db0:	f7fd fc60 	bl	8005674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007db4:	4b03      	ldr	r3, [pc, #12]	@ (8007dc4 <MX_TIM3_Init+0xf0>)
 8007db6:	0018      	movs	r0, r3
 8007db8:	f000 f82e 	bl	8007e18 <HAL_TIM_MspPostInit>

}
 8007dbc:	46c0      	nop			@ (mov r8, r8)
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	b006      	add	sp, #24
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	200028bc 	.word	0x200028bc
 8007dc8:	40000400 	.word	0x40000400
 8007dcc:	0000ffff 	.word	0x0000ffff

08007dd0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	2380      	movs	r3, #128	@ 0x80
 8007dde:	05db      	lsls	r3, r3, #23
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d106      	bne.n	8007df2 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007de4:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <HAL_TIM_PWM_MspInit+0x40>)
 8007de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007de8:	4b09      	ldr	r3, [pc, #36]	@ (8007e10 <HAL_TIM_PWM_MspInit+0x40>)
 8007dea:	2101      	movs	r1, #1
 8007dec:	430a      	orrs	r2, r1
 8007dee:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007df0:	e00a      	b.n	8007e08 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a07      	ldr	r2, [pc, #28]	@ (8007e14 <HAL_TIM_PWM_MspInit+0x44>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d105      	bne.n	8007e08 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007dfc:	4b04      	ldr	r3, [pc, #16]	@ (8007e10 <HAL_TIM_PWM_MspInit+0x40>)
 8007dfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e00:	4b03      	ldr	r3, [pc, #12]	@ (8007e10 <HAL_TIM_PWM_MspInit+0x40>)
 8007e02:	2102      	movs	r1, #2
 8007e04:	430a      	orrs	r2, r1
 8007e06:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007e08:	46c0      	nop			@ (mov r8, r8)
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40021000 	.word	0x40021000
 8007e14:	40000400 	.word	0x40000400

08007e18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b08b      	sub	sp, #44	@ 0x2c
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e20:	2414      	movs	r4, #20
 8007e22:	193b      	adds	r3, r7, r4
 8007e24:	0018      	movs	r0, r3
 8007e26:	2314      	movs	r3, #20
 8007e28:	001a      	movs	r2, r3
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	f009 fd26 	bl	801187c <memset>
  if(timHandle->Instance==TIM2)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	2380      	movs	r3, #128	@ 0x80
 8007e36:	05db      	lsls	r3, r3, #23
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d123      	bne.n	8007e84 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e3c:	4b27      	ldr	r3, [pc, #156]	@ (8007edc <HAL_TIM_MspPostInit+0xc4>)
 8007e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e40:	4b26      	ldr	r3, [pc, #152]	@ (8007edc <HAL_TIM_MspPostInit+0xc4>)
 8007e42:	2101      	movs	r1, #1
 8007e44:	430a      	orrs	r2, r1
 8007e46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007e48:	4b24      	ldr	r3, [pc, #144]	@ (8007edc <HAL_TIM_MspPostInit+0xc4>)
 8007e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	4013      	ands	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]
 8007e52:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8007e54:	0021      	movs	r1, r4
 8007e56:	187b      	adds	r3, r7, r1
 8007e58:	220d      	movs	r2, #13
 8007e5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e5c:	187b      	adds	r3, r7, r1
 8007e5e:	2202      	movs	r2, #2
 8007e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e62:	187b      	adds	r3, r7, r1
 8007e64:	2200      	movs	r2, #0
 8007e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e68:	187b      	adds	r3, r7, r1
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007e6e:	187b      	adds	r3, r7, r1
 8007e70:	2202      	movs	r2, #2
 8007e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e74:	187a      	adds	r2, r7, r1
 8007e76:	23a0      	movs	r3, #160	@ 0xa0
 8007e78:	05db      	lsls	r3, r3, #23
 8007e7a:	0011      	movs	r1, r2
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f001 fd57 	bl	8009930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007e82:	e027      	b.n	8007ed4 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a15      	ldr	r2, [pc, #84]	@ (8007ee0 <HAL_TIM_MspPostInit+0xc8>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d122      	bne.n	8007ed4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e8e:	4b13      	ldr	r3, [pc, #76]	@ (8007edc <HAL_TIM_MspPostInit+0xc4>)
 8007e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e92:	4b12      	ldr	r3, [pc, #72]	@ (8007edc <HAL_TIM_MspPostInit+0xc4>)
 8007e94:	2104      	movs	r1, #4
 8007e96:	430a      	orrs	r2, r1
 8007e98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007e9a:	4b10      	ldr	r3, [pc, #64]	@ (8007edc <HAL_TIM_MspPostInit+0xc4>)
 8007e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9e:	2204      	movs	r2, #4
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8007ea6:	2114      	movs	r1, #20
 8007ea8:	187b      	adds	r3, r7, r1
 8007eaa:	22e0      	movs	r2, #224	@ 0xe0
 8007eac:	0052      	lsls	r2, r2, #1
 8007eae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb0:	187b      	adds	r3, r7, r1
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb6:	187b      	adds	r3, r7, r1
 8007eb8:	2200      	movs	r2, #0
 8007eba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ebc:	187b      	adds	r3, r7, r1
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007ec2:	187b      	adds	r3, r7, r1
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ec8:	187b      	adds	r3, r7, r1
 8007eca:	4a06      	ldr	r2, [pc, #24]	@ (8007ee4 <HAL_TIM_MspPostInit+0xcc>)
 8007ecc:	0019      	movs	r1, r3
 8007ece:	0010      	movs	r0, r2
 8007ed0:	f001 fd2e 	bl	8009930 <HAL_GPIO_Init>
}
 8007ed4:	46c0      	nop			@ (mov r8, r8)
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	b00b      	add	sp, #44	@ 0x2c
 8007eda:	bd90      	pop	{r4, r7, pc}
 8007edc:	40021000 	.word	0x40021000
 8007ee0:	40000400 	.word	0x40000400
 8007ee4:	50000800 	.word	0x50000800

08007ee8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007eec:	4b16      	ldr	r3, [pc, #88]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007eee:	4a17      	ldr	r2, [pc, #92]	@ (8007f4c <MX_USART1_UART_Init+0x64>)
 8007ef0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007ef2:	4b15      	ldr	r3, [pc, #84]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007ef4:	22e1      	movs	r2, #225	@ 0xe1
 8007ef6:	0252      	lsls	r2, r2, #9
 8007ef8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007efa:	4b13      	ldr	r3, [pc, #76]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007f00:	4b11      	ldr	r3, [pc, #68]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007f06:	4b10      	ldr	r3, [pc, #64]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007f0e:	220c      	movs	r2, #12
 8007f10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f12:	4b0d      	ldr	r3, [pc, #52]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f18:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8007f24:	4b08      	ldr	r3, [pc, #32]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007f26:	2208      	movs	r2, #8
 8007f28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8007f2a:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007f2c:	2280      	movs	r2, #128	@ 0x80
 8007f2e:	0212      	lsls	r2, r2, #8
 8007f30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f32:	4b05      	ldr	r3, [pc, #20]	@ (8007f48 <MX_USART1_UART_Init+0x60>)
 8007f34:	0018      	movs	r0, r3
 8007f36:	f005 ff09 	bl	800dd4c <HAL_UART_Init>
 8007f3a:	1e03      	subs	r3, r0, #0
 8007f3c:	d001      	beq.n	8007f42 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8007f3e:	f7fd fb99 	bl	8005674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f42:	46c0      	nop			@ (mov r8, r8)
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	200028fc 	.word	0x200028fc
 8007f4c:	40013800 	.word	0x40013800

08007f50 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8007f54:	4b14      	ldr	r3, [pc, #80]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f56:	4a15      	ldr	r2, [pc, #84]	@ (8007fac <MX_USART4_UART_Init+0x5c>)
 8007f58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007f5a:	4b13      	ldr	r3, [pc, #76]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f5c:	22e1      	movs	r2, #225	@ 0xe1
 8007f5e:	0252      	lsls	r2, r2, #9
 8007f60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007f62:	4b11      	ldr	r3, [pc, #68]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007f68:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007f74:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f76:	220c      	movs	r2, #12
 8007f78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f80:	4b09      	ldr	r3, [pc, #36]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007f86:	4b08      	ldr	r3, [pc, #32]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007f8c:	4b06      	ldr	r3, [pc, #24]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007f92:	4b05      	ldr	r3, [pc, #20]	@ (8007fa8 <MX_USART4_UART_Init+0x58>)
 8007f94:	0018      	movs	r0, r3
 8007f96:	f005 fed9 	bl	800dd4c <HAL_UART_Init>
 8007f9a:	1e03      	subs	r3, r0, #0
 8007f9c:	d001      	beq.n	8007fa2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8007f9e:	f7fd fb69 	bl	8005674 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007fa2:	46c0      	nop			@ (mov r8, r8)
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	200029b4 	.word	0x200029b4
 8007fac:	40004c00 	.word	0x40004c00

08007fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007fb0:	b590      	push	{r4, r7, lr}
 8007fb2:	b08b      	sub	sp, #44	@ 0x2c
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fb8:	2414      	movs	r4, #20
 8007fba:	193b      	adds	r3, r7, r4
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	2314      	movs	r3, #20
 8007fc0:	001a      	movs	r2, r3
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	f009 fc5a 	bl	801187c <memset>
  if(uartHandle->Instance==USART1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a6f      	ldr	r2, [pc, #444]	@ (800818c <HAL_UART_MspInit+0x1dc>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d12b      	bne.n	800802a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 8007fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 8007fd8:	2180      	movs	r1, #128	@ 0x80
 8007fda:	01c9      	lsls	r1, r1, #7
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 8007fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007fec:	4b68      	ldr	r3, [pc, #416]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
 8007ff6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007ff8:	193b      	adds	r3, r7, r4
 8007ffa:	22c0      	movs	r2, #192	@ 0xc0
 8007ffc:	00d2      	lsls	r2, r2, #3
 8007ffe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008000:	0021      	movs	r1, r4
 8008002:	187b      	adds	r3, r7, r1
 8008004:	2202      	movs	r2, #2
 8008006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008008:	187b      	adds	r3, r7, r1
 800800a:	2200      	movs	r2, #0
 800800c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800800e:	187b      	adds	r3, r7, r1
 8008010:	2203      	movs	r2, #3
 8008012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8008014:	187b      	adds	r3, r7, r1
 8008016:	2204      	movs	r2, #4
 8008018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800801a:	187a      	adds	r2, r7, r1
 800801c:	23a0      	movs	r3, #160	@ 0xa0
 800801e:	05db      	lsls	r3, r3, #23
 8008020:	0011      	movs	r1, r2
 8008022:	0018      	movs	r0, r3
 8008024:	f001 fc84 	bl	8009930 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8008028:	e0ac      	b.n	8008184 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a59      	ldr	r2, [pc, #356]	@ (8008194 <HAL_UART_MspInit+0x1e4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d000      	beq.n	8008036 <HAL_UART_MspInit+0x86>
 8008034:	e0a6      	b.n	8008184 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 8008036:	4b56      	ldr	r3, [pc, #344]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 8008038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800803a:	4b55      	ldr	r3, [pc, #340]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 800803c:	2180      	movs	r1, #128	@ 0x80
 800803e:	0309      	lsls	r1, r1, #12
 8008040:	430a      	orrs	r2, r1
 8008042:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008044:	4b52      	ldr	r3, [pc, #328]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 8008046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008048:	4b51      	ldr	r3, [pc, #324]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 800804a:	2101      	movs	r1, #1
 800804c:	430a      	orrs	r2, r1
 800804e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008050:	4b4f      	ldr	r3, [pc, #316]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 8008052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008054:	2201      	movs	r2, #1
 8008056:	4013      	ands	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800805c:	4b4c      	ldr	r3, [pc, #304]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 800805e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008060:	4b4b      	ldr	r3, [pc, #300]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 8008062:	2104      	movs	r1, #4
 8008064:	430a      	orrs	r2, r1
 8008066:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008068:	4b49      	ldr	r3, [pc, #292]	@ (8008190 <HAL_UART_MspInit+0x1e0>)
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	2204      	movs	r2, #4
 800806e:	4013      	ands	r3, r2
 8008070:	60bb      	str	r3, [r7, #8]
 8008072:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008074:	2414      	movs	r4, #20
 8008076:	193b      	adds	r3, r7, r4
 8008078:	2202      	movs	r2, #2
 800807a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800807c:	193b      	adds	r3, r7, r4
 800807e:	2202      	movs	r2, #2
 8008080:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008082:	193b      	adds	r3, r7, r4
 8008084:	2200      	movs	r2, #0
 8008086:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008088:	193b      	adds	r3, r7, r4
 800808a:	2203      	movs	r2, #3
 800808c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800808e:	193b      	adds	r3, r7, r4
 8008090:	2206      	movs	r2, #6
 8008092:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008094:	193a      	adds	r2, r7, r4
 8008096:	23a0      	movs	r3, #160	@ 0xa0
 8008098:	05db      	lsls	r3, r3, #23
 800809a:	0011      	movs	r1, r2
 800809c:	0018      	movs	r0, r3
 800809e:	f001 fc47 	bl	8009930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80080a2:	0021      	movs	r1, r4
 80080a4:	187b      	adds	r3, r7, r1
 80080a6:	2280      	movs	r2, #128	@ 0x80
 80080a8:	00d2      	lsls	r2, r2, #3
 80080aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080ac:	187b      	adds	r3, r7, r1
 80080ae:	2202      	movs	r2, #2
 80080b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080b2:	187b      	adds	r3, r7, r1
 80080b4:	2200      	movs	r2, #0
 80080b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	2203      	movs	r2, #3
 80080bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80080be:	187b      	adds	r3, r7, r1
 80080c0:	2206      	movs	r2, #6
 80080c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080c4:	187b      	adds	r3, r7, r1
 80080c6:	4a34      	ldr	r2, [pc, #208]	@ (8008198 <HAL_UART_MspInit+0x1e8>)
 80080c8:	0019      	movs	r1, r3
 80080ca:	0010      	movs	r0, r2
 80080cc:	f001 fc30 	bl	8009930 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80080d0:	4b32      	ldr	r3, [pc, #200]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 80080d2:	4a33      	ldr	r2, [pc, #204]	@ (80081a0 <HAL_UART_MspInit+0x1f0>)
 80080d4:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80080d6:	4b31      	ldr	r3, [pc, #196]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 80080d8:	220c      	movs	r2, #12
 80080da:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80080dc:	4b2f      	ldr	r3, [pc, #188]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 80080de:	2200      	movs	r2, #0
 80080e0:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80080e2:	4b2e      	ldr	r3, [pc, #184]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80080e8:	4b2c      	ldr	r3, [pc, #176]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 80080ea:	2280      	movs	r2, #128	@ 0x80
 80080ec:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80080ee:	4b2b      	ldr	r3, [pc, #172]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80080f4:	4b29      	ldr	r3, [pc, #164]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80080fa:	4b28      	ldr	r3, [pc, #160]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 80080fc:	2220      	movs	r2, #32
 80080fe:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008100:	4b26      	ldr	r3, [pc, #152]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 8008102:	2200      	movs	r2, #0
 8008104:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8008106:	4b25      	ldr	r3, [pc, #148]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 8008108:	0018      	movs	r0, r3
 800810a:	f001 f965 	bl	80093d8 <HAL_DMA_Init>
 800810e:	1e03      	subs	r3, r0, #0
 8008110:	d001      	beq.n	8008116 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8008112:	f7fd faaf 	bl	8005674 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a20      	ldr	r2, [pc, #128]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 800811a:	675a      	str	r2, [r3, #116]	@ 0x74
 800811c:	4b1f      	ldr	r3, [pc, #124]	@ (800819c <HAL_UART_MspInit+0x1ec>)
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8008122:	4b20      	ldr	r3, [pc, #128]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 8008124:	4a20      	ldr	r2, [pc, #128]	@ (80081a8 <HAL_UART_MspInit+0x1f8>)
 8008126:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8008128:	4b1e      	ldr	r3, [pc, #120]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 800812a:	220c      	movs	r2, #12
 800812c:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800812e:	4b1d      	ldr	r3, [pc, #116]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 8008130:	2210      	movs	r2, #16
 8008132:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008134:	4b1b      	ldr	r3, [pc, #108]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 8008136:	2200      	movs	r2, #0
 8008138:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800813a:	4b1a      	ldr	r3, [pc, #104]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 800813c:	2280      	movs	r2, #128	@ 0x80
 800813e:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008140:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 8008142:	2200      	movs	r2, #0
 8008144:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008146:	4b17      	ldr	r3, [pc, #92]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 8008148:	2200      	movs	r2, #0
 800814a:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800814c:	4b15      	ldr	r3, [pc, #84]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 800814e:	2200      	movs	r2, #0
 8008150:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008152:	4b14      	ldr	r3, [pc, #80]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 8008154:	2200      	movs	r2, #0
 8008156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8008158:	4b12      	ldr	r3, [pc, #72]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 800815a:	0018      	movs	r0, r3
 800815c:	f001 f93c 	bl	80093d8 <HAL_DMA_Init>
 8008160:	1e03      	subs	r3, r0, #0
 8008162:	d001      	beq.n	8008168 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8008164:	f7fd fa86 	bl	8005674 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a0e      	ldr	r2, [pc, #56]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 800816c:	671a      	str	r2, [r3, #112]	@ 0x70
 800816e:	4b0d      	ldr	r3, [pc, #52]	@ (80081a4 <HAL_UART_MspInit+0x1f4>)
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8008174:	2200      	movs	r2, #0
 8008176:	2100      	movs	r1, #0
 8008178:	200e      	movs	r0, #14
 800817a:	f001 f8fb 	bl	8009374 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800817e:	200e      	movs	r0, #14
 8008180:	f001 f90d 	bl	800939e <HAL_NVIC_EnableIRQ>
}
 8008184:	46c0      	nop			@ (mov r8, r8)
 8008186:	46bd      	mov	sp, r7
 8008188:	b00b      	add	sp, #44	@ 0x2c
 800818a:	bd90      	pop	{r4, r7, pc}
 800818c:	40013800 	.word	0x40013800
 8008190:	40021000 	.word	0x40021000
 8008194:	40004c00 	.word	0x40004c00
 8008198:	50000800 	.word	0x50000800
 800819c:	20002a6c 	.word	0x20002a6c
 80081a0:	4002006c 	.word	0x4002006c
 80081a4:	20002ab4 	.word	0x20002ab4
 80081a8:	40020080 	.word	0x40020080

080081ac <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80081b0:	4b0f      	ldr	r3, [pc, #60]	@ (80081f0 <MX_USB_PCD_Init+0x44>)
 80081b2:	4a10      	ldr	r2, [pc, #64]	@ (80081f4 <MX_USB_PCD_Init+0x48>)
 80081b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80081b6:	4b0e      	ldr	r3, [pc, #56]	@ (80081f0 <MX_USB_PCD_Init+0x44>)
 80081b8:	2208      	movs	r2, #8
 80081ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80081bc:	4b0c      	ldr	r3, [pc, #48]	@ (80081f0 <MX_USB_PCD_Init+0x44>)
 80081be:	2202      	movs	r2, #2
 80081c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80081c2:	4b0b      	ldr	r3, [pc, #44]	@ (80081f0 <MX_USB_PCD_Init+0x44>)
 80081c4:	2202      	movs	r2, #2
 80081c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80081c8:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <MX_USB_PCD_Init+0x44>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80081ce:	4b08      	ldr	r3, [pc, #32]	@ (80081f0 <MX_USB_PCD_Init+0x44>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80081d4:	4b06      	ldr	r3, [pc, #24]	@ (80081f0 <MX_USB_PCD_Init+0x44>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80081da:	4b05      	ldr	r3, [pc, #20]	@ (80081f0 <MX_USB_PCD_Init+0x44>)
 80081dc:	0018      	movs	r0, r3
 80081de:	f004 f99d 	bl	800c51c <HAL_PCD_Init>
 80081e2:	1e03      	subs	r3, r0, #0
 80081e4:	d001      	beq.n	80081ea <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80081e6:	f7fd fa45 	bl	8005674 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80081ea:	46c0      	nop			@ (mov r8, r8)
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20002afc 	.word	0x20002afc
 80081f4:	40005c00 	.word	0x40005c00

080081f8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a06      	ldr	r2, [pc, #24]	@ (8008220 <HAL_PCD_MspInit+0x28>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d106      	bne.n	8008218 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800820a:	4b06      	ldr	r3, [pc, #24]	@ (8008224 <HAL_PCD_MspInit+0x2c>)
 800820c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800820e:	4b05      	ldr	r3, [pc, #20]	@ (8008224 <HAL_PCD_MspInit+0x2c>)
 8008210:	2180      	movs	r1, #128	@ 0x80
 8008212:	0409      	lsls	r1, r1, #16
 8008214:	430a      	orrs	r2, r1
 8008216:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008218:	46c0      	nop			@ (mov r8, r8)
 800821a:	46bd      	mov	sp, r7
 800821c:	b002      	add	sp, #8
 800821e:	bd80      	pop	{r7, pc}
 8008220:	40005c00 	.word	0x40005c00
 8008224:	40021000 	.word	0x40021000

08008228 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8008230:	f000 fc48 	bl	8008ac4 <HAL_GetTick>
 8008234:	0003      	movs	r3, r0
 8008236:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8008238:	4b1c      	ldr	r3, [pc, #112]	@ (80082ac <TimestampIsReached+0x84>)
 800823a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d307      	bcc.n	8008254 <TimestampIsReached+0x2c>
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	429a      	cmp	r2, r3
 800824e:	d901      	bls.n	8008254 <TimestampIsReached+0x2c>
 8008250:	2201      	movs	r2, #1
 8008252:	e000      	b.n	8008256 <TimestampIsReached+0x2e>
 8008254:	2200      	movs	r2, #0
 8008256:	230f      	movs	r3, #15
 8008258:	18fb      	adds	r3, r7, r3
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	781a      	ldrb	r2, [r3, #0]
 800825e:	2101      	movs	r1, #1
 8008260:	400a      	ands	r2, r1
 8008262:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	429a      	cmp	r2, r3
 800826a:	d207      	bcs.n	800827c <TimestampIsReached+0x54>
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	429a      	cmp	r2, r3
 8008276:	d201      	bcs.n	800827c <TimestampIsReached+0x54>
 8008278:	2201      	movs	r2, #1
 800827a:	e000      	b.n	800827e <TimestampIsReached+0x56>
 800827c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800827e:	200e      	movs	r0, #14
 8008280:	183b      	adds	r3, r7, r0
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	781a      	ldrb	r2, [r3, #0]
 8008286:	2101      	movs	r1, #1
 8008288:	400a      	ands	r2, r1
 800828a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800828c:	230f      	movs	r3, #15
 800828e:	18fb      	adds	r3, r7, r3
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d103      	bne.n	800829e <TimestampIsReached+0x76>
 8008296:	183b      	adds	r3, r7, r0
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	0018      	movs	r0, r3
 80082a6:	46bd      	mov	sp, r7
 80082a8:	b006      	add	sp, #24
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	7fffffff 	.word	0x7fffffff

080082b0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80082b8:	f000 fc04 	bl	8008ac4 <HAL_GetTick>
 80082bc:	0002      	movs	r2, r0
 80082be:	4904      	ldr	r1, [pc, #16]	@ (80082d0 <AddTimestamp+0x20>)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	0018      	movs	r0, r3
 80082c4:	f009 fa36 	bl	8011734 <siprintf>
}
 80082c8:	46c0      	nop			@ (mov r8, r8)
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b002      	add	sp, #8
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	08014c14 	.word	0x08014c14

080082d4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80082d4:	b40c      	push	{r2, r3}
 80082d6:	b5b0      	push	{r4, r5, r7, lr}
 80082d8:	4c2b      	ldr	r4, [pc, #172]	@ (8008388 <CreateLine+0xb4>)
 80082da:	44a5      	add	sp, r4
 80082dc:	af00      	add	r7, sp, #0
 80082de:	0002      	movs	r2, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	4b2a      	ldr	r3, [pc, #168]	@ (800838c <CreateLine+0xb8>)
 80082e4:	2182      	movs	r1, #130	@ 0x82
 80082e6:	00c9      	lsls	r1, r1, #3
 80082e8:	185b      	adds	r3, r3, r1
 80082ea:	19db      	adds	r3, r3, r7
 80082ec:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80082ee:	4b28      	ldr	r3, [pc, #160]	@ (8008390 <CreateLine+0xbc>)
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	4a26      	ldr	r2, [pc, #152]	@ (800838c <CreateLine+0xb8>)
 80082f4:	1852      	adds	r2, r2, r1
 80082f6:	19d2      	adds	r2, r2, r7
 80082f8:	7812      	ldrb	r2, [r2, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d83b      	bhi.n	8008376 <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	4924      	ldr	r1, [pc, #144]	@ (8008394 <CreateLine+0xc0>)
 8008302:	240c      	movs	r4, #12
 8008304:	193b      	adds	r3, r7, r4
 8008306:	0018      	movs	r0, r3
 8008308:	f009 fa14 	bl	8011734 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800830c:	4b20      	ldr	r3, [pc, #128]	@ (8008390 <CreateLine+0xbc>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d909      	bls.n	8008328 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8008314:	193b      	adds	r3, r7, r4
 8008316:	0018      	movs	r0, r3
 8008318:	f7f7 ff1e 	bl	8000158 <strlen>
 800831c:	0002      	movs	r2, r0
 800831e:	193b      	adds	r3, r7, r4
 8008320:	189b      	adds	r3, r3, r2
 8008322:	0018      	movs	r0, r3
 8008324:	f7ff ffc4 	bl	80082b0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8008328:	240c      	movs	r4, #12
 800832a:	193b      	adds	r3, r7, r4
 800832c:	0018      	movs	r0, r3
 800832e:	f7f7 ff13 	bl	8000158 <strlen>
 8008332:	0003      	movs	r3, r0
 8008334:	4918      	ldr	r1, [pc, #96]	@ (8008398 <CreateLine+0xc4>)
 8008336:	187a      	adds	r2, r7, r1
 8008338:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800833a:	4b18      	ldr	r3, [pc, #96]	@ (800839c <CreateLine+0xc8>)
 800833c:	2508      	movs	r5, #8
 800833e:	195b      	adds	r3, r3, r5
 8008340:	19db      	adds	r3, r3, r7
 8008342:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8008344:	193a      	adds	r2, r7, r4
 8008346:	187b      	adds	r3, r7, r1
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	18d0      	adds	r0, r2, r3
 800834c:	187b      	adds	r3, r7, r1
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2280      	movs	r2, #128	@ 0x80
 8008352:	00d2      	lsls	r2, r2, #3
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	0019      	movs	r1, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2283      	movs	r2, #131	@ 0x83
 800835c:	00d2      	lsls	r2, r2, #3
 800835e:	1952      	adds	r2, r2, r5
 8008360:	19d2      	adds	r2, r2, r7
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	f009 fa7e 	bl	8011864 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8008368:	193a      	adds	r2, r7, r4
 800836a:	4b0d      	ldr	r3, [pc, #52]	@ (80083a0 <CreateLine+0xcc>)
 800836c:	0011      	movs	r1, r2
 800836e:	0018      	movs	r0, r3
 8008370:	f009 f9d0 	bl	8011714 <iprintf>
 8008374:	e000      	b.n	8008378 <CreateLine+0xa4>
    return;
 8008376:	46c0      	nop			@ (mov r8, r8)
}
 8008378:	46bd      	mov	sp, r7
 800837a:	2382      	movs	r3, #130	@ 0x82
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	449d      	add	sp, r3
 8008380:	bcb0      	pop	{r4, r5, r7}
 8008382:	bc08      	pop	{r3}
 8008384:	b002      	add	sp, #8
 8008386:	4718      	bx	r3
 8008388:	fffffbf0 	.word	0xfffffbf0
 800838c:	fffffbf7 	.word	0xfffffbf7
 8008390:	20000134 	.word	0x20000134
 8008394:	08014c20 	.word	0x08014c20
 8008398:	0000040c 	.word	0x0000040c
 800839c:	0000041c 	.word	0x0000041c
 80083a0:	08014c24 	.word	0x08014c24

080083a4 <_write>:

int _write(int fd, const void *buf, size_t count) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	4804      	ldr	r0, [pc, #16]	@ (80083c8 <_write+0x24>)
 80083b8:	2364      	movs	r3, #100	@ 0x64
 80083ba:	f005 fd2d 	bl	800de18 <HAL_UART_Transmit>
  return count;
 80083be:	687b      	ldr	r3, [r7, #4]
}
 80083c0:	0018      	movs	r0, r3
 80083c2:	46bd      	mov	sp, r7
 80083c4:	b004      	add	sp, #16
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	200028fc 	.word	0x200028fc

080083cc <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	0002      	movs	r2, r0
 80083d4:	1dfb      	adds	r3, r7, #7
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	4b03      	ldr	r3, [pc, #12]	@ (80083e8 <SetVerboseLevel+0x1c>)
 80083da:	1dfa      	adds	r2, r7, #7
 80083dc:	7812      	ldrb	r2, [r2, #0]
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	46c0      	nop			@ (mov r8, r8)
 80083e2:	46bd      	mov	sp, r7
 80083e4:	b002      	add	sp, #8
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20000134 	.word	0x20000134

080083ec <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80083f0:	f000 fb68 	bl	8008ac4 <HAL_GetTick>
 80083f4:	0003      	movs	r3, r0
}
 80083f6:	0018      	movs	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8008402:	4a0f      	ldr	r2, [pc, #60]	@ (8008440 <BinaryReleaseInfo+0x44>)
 8008404:	4b0f      	ldr	r3, [pc, #60]	@ (8008444 <BinaryReleaseInfo+0x48>)
 8008406:	0019      	movs	r1, r3
 8008408:	2002      	movs	r0, #2
 800840a:	f7ff ff63 	bl	80082d4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800840e:	480e      	ldr	r0, [pc, #56]	@ (8008448 <BinaryReleaseInfo+0x4c>)
 8008410:	4a0e      	ldr	r2, [pc, #56]	@ (800844c <BinaryReleaseInfo+0x50>)
 8008412:	490c      	ldr	r1, [pc, #48]	@ (8008444 <BinaryReleaseInfo+0x48>)
 8008414:	4b0e      	ldr	r3, [pc, #56]	@ (8008450 <BinaryReleaseInfo+0x54>)
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	0003      	movs	r3, r0
 800841a:	2002      	movs	r0, #2
 800841c:	f7ff ff5a 	bl	80082d4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8008420:	4a0c      	ldr	r2, [pc, #48]	@ (8008454 <BinaryReleaseInfo+0x58>)
 8008422:	4b08      	ldr	r3, [pc, #32]	@ (8008444 <BinaryReleaseInfo+0x48>)
 8008424:	0019      	movs	r1, r3
 8008426:	2002      	movs	r0, #2
 8008428:	f7ff ff54 	bl	80082d4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800842c:	4b0a      	ldr	r3, [pc, #40]	@ (8008458 <BinaryReleaseInfo+0x5c>)
 800842e:	4a0b      	ldr	r2, [pc, #44]	@ (800845c <BinaryReleaseInfo+0x60>)
 8008430:	4904      	ldr	r1, [pc, #16]	@ (8008444 <BinaryReleaseInfo+0x48>)
 8008432:	2002      	movs	r0, #2
 8008434:	f7ff ff4e 	bl	80082d4 <CreateLine>
}
 8008438:	46c0      	nop			@ (mov r8, r8)
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	46c0      	nop			@ (mov r8, r8)
 8008440:	08014c2c 	.word	0x08014c2c
 8008444:	08014c58 	.word	0x08014c58
 8008448:	08014c5c 	.word	0x08014c5c
 800844c:	08014c68 	.word	0x08014c68
 8008450:	08014c7c 	.word	0x08014c7c
 8008454:	08014c88 	.word	0x08014c88
 8008458:	08014c94 	.word	0x08014c94
 800845c:	08014c9c 	.word	0x08014c9c

08008460 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008460:	b590      	push	{r4, r7, lr}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6039      	str	r1, [r7, #0]
 8008468:	0011      	movs	r1, r2
 800846a:	1dfb      	adds	r3, r7, #7
 800846c:	1c02      	adds	r2, r0, #0
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	1dbb      	adds	r3, r7, #6
 8008472:	1c0a      	adds	r2, r1, #0
 8008474:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8008476:	4b08      	ldr	r3, [pc, #32]	@ (8008498 <ReadRegister+0x38>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d008      	beq.n	8008490 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 800847e:	4b06      	ldr	r3, [pc, #24]	@ (8008498 <ReadRegister+0x38>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	1dba      	adds	r2, r7, #6
 8008484:	7814      	ldrb	r4, [r2, #0]
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	1dfa      	adds	r2, r7, #7
 800848a:	7810      	ldrb	r0, [r2, #0]
 800848c:	0022      	movs	r2, r4
 800848e:	4798      	blx	r3
	}
}
 8008490:	46c0      	nop			@ (mov r8, r8)
 8008492:	46bd      	mov	sp, r7
 8008494:	b003      	add	sp, #12
 8008496:	bd90      	pop	{r4, r7, pc}
 8008498:	20002df0 	.word	0x20002df0

0800849c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800849c:	b590      	push	{r4, r7, lr}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6039      	str	r1, [r7, #0]
 80084a4:	0011      	movs	r1, r2
 80084a6:	1dfb      	adds	r3, r7, #7
 80084a8:	1c02      	adds	r2, r0, #0
 80084aa:	701a      	strb	r2, [r3, #0]
 80084ac:	1dbb      	adds	r3, r7, #6
 80084ae:	1c0a      	adds	r2, r1, #0
 80084b0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80084b2:	4b08      	ldr	r3, [pc, #32]	@ (80084d4 <WriteRegister+0x38>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d008      	beq.n	80084cc <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80084ba:	4b06      	ldr	r3, [pc, #24]	@ (80084d4 <WriteRegister+0x38>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	1dba      	adds	r2, r7, #6
 80084c0:	7814      	ldrb	r4, [r2, #0]
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	1dfa      	adds	r2, r7, #7
 80084c6:	7810      	ldrb	r0, [r2, #0]
 80084c8:	0022      	movs	r2, r4
 80084ca:	4798      	blx	r3
  }
}
 80084cc:	46c0      	nop			@ (mov r8, r8)
 80084ce:	46bd      	mov	sp, r7
 80084d0:	b003      	add	sp, #12
 80084d2:	bd90      	pop	{r4, r7, pc}
 80084d4:	20002df4 	.word	0x20002df4

080084d8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	000a      	movs	r2, r1
 80084e2:	1cfb      	adds	r3, r7, #3
 80084e4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80084e6:	230f      	movs	r3, #15
 80084e8:	18fb      	adds	r3, r7, r3
 80084ea:	22ff      	movs	r2, #255	@ 0xff
 80084ec:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80084ee:	230e      	movs	r3, #14
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	2200      	movs	r2, #0
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e037      	b.n	8008568 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80084f8:	230e      	movs	r3, #14
 80084fa:	18fb      	adds	r3, r7, r3
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	18d3      	adds	r3, r2, r3
 8008502:	7819      	ldrb	r1, [r3, #0]
 8008504:	220f      	movs	r2, #15
 8008506:	18bb      	adds	r3, r7, r2
 8008508:	18ba      	adds	r2, r7, r2
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	404a      	eors	r2, r1
 800850e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008510:	230d      	movs	r3, #13
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	2200      	movs	r2, #0
 8008516:	701a      	strb	r2, [r3, #0]
 8008518:	e01b      	b.n	8008552 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800851a:	210f      	movs	r1, #15
 800851c:	187b      	adds	r3, r7, r1
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	b25b      	sxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	da09      	bge.n	800853a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8008526:	187b      	adds	r3, r7, r1
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	b25b      	sxtb	r3, r3
 800852e:	2231      	movs	r2, #49	@ 0x31
 8008530:	4053      	eors	r3, r2
 8008532:	b25a      	sxtb	r2, r3
 8008534:	187b      	adds	r3, r7, r1
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	e005      	b.n	8008546 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800853a:	230f      	movs	r3, #15
 800853c:	18fa      	adds	r2, r7, r3
 800853e:	18fb      	adds	r3, r7, r3
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	18db      	adds	r3, r3, r3
 8008544:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008546:	210d      	movs	r1, #13
 8008548:	187b      	adds	r3, r7, r1
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	187b      	adds	r3, r7, r1
 800854e:	3201      	adds	r2, #1
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	230d      	movs	r3, #13
 8008554:	18fb      	adds	r3, r7, r3
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b07      	cmp	r3, #7
 800855a:	d9de      	bls.n	800851a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800855c:	210e      	movs	r1, #14
 800855e:	187b      	adds	r3, r7, r1
 8008560:	781a      	ldrb	r2, [r3, #0]
 8008562:	187b      	adds	r3, r7, r1
 8008564:	3201      	adds	r2, #1
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	230e      	movs	r3, #14
 800856a:	18fa      	adds	r2, r7, r3
 800856c:	1cfb      	adds	r3, r7, #3
 800856e:	7812      	ldrb	r2, [r2, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d3c0      	bcc.n	80084f8 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008576:	230f      	movs	r3, #15
 8008578:	18fb      	adds	r3, r7, r3
 800857a:	781b      	ldrb	r3, [r3, #0]
}
 800857c:	0018      	movs	r0, r3
 800857e:	46bd      	mov	sp, r7
 8008580:	b004      	add	sp, #16
 8008582:	bd80      	pop	{r7, pc}

08008584 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800858e:	4b0a      	ldr	r3, [pc, #40]	@ (80085b8 <HIDS_Init+0x34>)
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8008594:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <HIDS_Init+0x38>)
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800859a:	4b09      	ldr	r3, [pc, #36]	@ (80085c0 <HIDS_Init+0x3c>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	0018      	movs	r0, r3
 80085a0:	f000 f8d0 	bl	8008744 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 80085a4:	4b07      	ldr	r3, [pc, #28]	@ (80085c4 <HIDS_Init+0x40>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	0018      	movs	r0, r3
 80085aa:	f000 f82b 	bl	8008604 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 80085ae:	46c0      	nop			@ (mov r8, r8)
 80085b0:	46bd      	mov	sp, r7
 80085b2:	b002      	add	sp, #8
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	46c0      	nop			@ (mov r8, r8)
 80085b8:	20002df0 	.word	0x20002df0
 80085bc:	20002df4 	.word	0x20002df4
 80085c0:	20000136 	.word	0x20000136
 80085c4:	20000135 	.word	0x20000135

080085c8 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 80085cc:	f7ff ff0e 	bl	80083ec <GetCurrentHalTicks>
 80085d0:	0002      	movs	r2, r0
 80085d2:	4b08      	ldr	r3, [pc, #32]	@ (80085f4 <HIDS_StartMeasurement+0x2c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	18d2      	adds	r2, r2, r3
 80085d8:	4b07      	ldr	r3, [pc, #28]	@ (80085f8 <HIDS_StartMeasurement+0x30>)
 80085da:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80085dc:	4b07      	ldr	r3, [pc, #28]	@ (80085fc <HIDS_StartMeasurement+0x34>)
 80085de:	2201      	movs	r2, #1
 80085e0:	0019      	movs	r1, r3
 80085e2:	2044      	movs	r0, #68	@ 0x44
 80085e4:	f7ff ff5a 	bl	800849c <WriteRegister>
  MeasurementDone = false;
 80085e8:	4b05      	ldr	r3, [pc, #20]	@ (8008600 <HIDS_StartMeasurement+0x38>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	701a      	strb	r2, [r3, #0]
}
 80085ee:	46c0      	nop			@ (mov r8, r8)
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	2000013c 	.word	0x2000013c
 80085f8:	20000138 	.word	0x20000138
 80085fc:	20000136 	.word	0x20000136
 8008600:	20002e06 	.word	0x20002e06

08008604 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	0002      	movs	r2, r0
 800860c:	1dfb      	adds	r3, r7, #7
 800860e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8008610:	4b03      	ldr	r3, [pc, #12]	@ (8008620 <HIDS_SetHeaterMode+0x1c>)
 8008612:	1dfa      	adds	r2, r7, #7
 8008614:	7812      	ldrb	r2, [r2, #0]
 8008616:	701a      	strb	r2, [r3, #0]
}
 8008618:	46c0      	nop			@ (mov r8, r8)
 800861a:	46bd      	mov	sp, r7
 800861c:	b002      	add	sp, #8
 800861e:	bd80      	pop	{r7, pc}
 8008620:	20000135 	.word	0x20000135

08008624 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8008624:	b590      	push	{r4, r7, lr}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	781a      	ldrb	r2, [r3, #0]
 8008630:	210c      	movs	r1, #12
 8008632:	187b      	adds	r3, r7, r1
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	785a      	ldrb	r2, [r3, #1]
 800863a:	187b      	adds	r3, r7, r1
 800863c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800863e:	240f      	movs	r4, #15
 8008640:	193b      	adds	r3, r7, r4
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	7892      	ldrb	r2, [r2, #2]
 8008646:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8008648:	187b      	adds	r3, r7, r1
 800864a:	2102      	movs	r1, #2
 800864c:	0018      	movs	r0, r3
 800864e:	f7ff ff43 	bl	80084d8 <CalculateCRC>
 8008652:	0003      	movs	r3, r0
 8008654:	001a      	movs	r2, r3
 8008656:	193b      	adds	r3, r7, r4
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	4293      	cmp	r3, r2
 800865c:	d007      	beq.n	800866e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800865e:	4a17      	ldr	r2, [pc, #92]	@ (80086bc <CheckCRC+0x98>)
 8008660:	4b17      	ldr	r3, [pc, #92]	@ (80086c0 <CheckCRC+0x9c>)
 8008662:	0019      	movs	r1, r3
 8008664:	2001      	movs	r0, #1
 8008666:	f7ff fe35 	bl	80082d4 <CreateLine>
		return false;
 800866a:	2300      	movs	r3, #0
 800866c:	e021      	b.n	80086b2 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	78da      	ldrb	r2, [r3, #3]
 8008672:	2108      	movs	r1, #8
 8008674:	187b      	adds	r3, r7, r1
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	791a      	ldrb	r2, [r3, #4]
 800867c:	187b      	adds	r3, r7, r1
 800867e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008680:	240e      	movs	r4, #14
 8008682:	193b      	adds	r3, r7, r4
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	7952      	ldrb	r2, [r2, #5]
 8008688:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800868a:	187b      	adds	r3, r7, r1
 800868c:	2102      	movs	r1, #2
 800868e:	0018      	movs	r0, r3
 8008690:	f7ff ff22 	bl	80084d8 <CalculateCRC>
 8008694:	0003      	movs	r3, r0
 8008696:	001a      	movs	r2, r3
 8008698:	193b      	adds	r3, r7, r4
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	4293      	cmp	r3, r2
 800869e:	d007      	beq.n	80086b0 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 80086a0:	4a08      	ldr	r2, [pc, #32]	@ (80086c4 <CheckCRC+0xa0>)
 80086a2:	4b07      	ldr	r3, [pc, #28]	@ (80086c0 <CheckCRC+0x9c>)
 80086a4:	0019      	movs	r1, r3
 80086a6:	2001      	movs	r0, #1
 80086a8:	f7ff fe14 	bl	80082d4 <CreateLine>
		return false;
 80086ac:	2300      	movs	r3, #0
 80086ae:	e000      	b.n	80086b2 <CheckCRC+0x8e>
	}
	return true;
 80086b0:	2301      	movs	r3, #1
}
 80086b2:	0018      	movs	r0, r3
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b005      	add	sp, #20
 80086b8:	bd90      	pop	{r4, r7, pc}
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	08014cd8 	.word	0x08014cd8
 80086c0:	08014d00 	.word	0x08014d00
 80086c4:	08014d04 	.word	0x08014d04

080086c8 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80086ce:	1dbb      	adds	r3, r7, #6
 80086d0:	2289      	movs	r2, #137	@ 0x89
 80086d2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80086d4:	1dbb      	adds	r3, r7, #6
 80086d6:	2201      	movs	r2, #1
 80086d8:	0019      	movs	r1, r3
 80086da:	2044      	movs	r0, #68	@ 0x44
 80086dc:	f7ff fede 	bl	800849c <WriteRegister>
	HAL_Delay(30);
 80086e0:	201e      	movs	r0, #30
 80086e2:	f000 f9f9 	bl	8008ad8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80086e6:	4b14      	ldr	r3, [pc, #80]	@ (8008738 <HIDS_DeviceConnected+0x70>)
 80086e8:	2206      	movs	r2, #6
 80086ea:	0019      	movs	r1, r3
 80086ec:	2044      	movs	r0, #68	@ 0x44
 80086ee:	f7ff feb7 	bl	8008460 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80086f2:	1dfb      	adds	r3, r7, #7
 80086f4:	2200      	movs	r2, #0
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e011      	b.n	800871e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 80086fa:	1dfb      	adds	r3, r7, #7
 80086fc:	7818      	ldrb	r0, [r3, #0]
 80086fe:	1dfb      	adds	r3, r7, #7
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	4a0d      	ldr	r2, [pc, #52]	@ (8008738 <HIDS_DeviceConnected+0x70>)
 8008704:	5cd3      	ldrb	r3, [r2, r3]
 8008706:	4a0d      	ldr	r2, [pc, #52]	@ (800873c <HIDS_DeviceConnected+0x74>)
 8008708:	490d      	ldr	r1, [pc, #52]	@ (8008740 <HIDS_DeviceConnected+0x78>)
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	0003      	movs	r3, r0
 800870e:	2002      	movs	r0, #2
 8008710:	f7ff fde0 	bl	80082d4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008714:	1dfb      	adds	r3, r7, #7
 8008716:	781a      	ldrb	r2, [r3, #0]
 8008718:	1dfb      	adds	r3, r7, #7
 800871a:	3201      	adds	r2, #1
 800871c:	701a      	strb	r2, [r3, #0]
 800871e:	1dfb      	adds	r3, r7, #7
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	2b05      	cmp	r3, #5
 8008724:	d9e9      	bls.n	80086fa <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8008726:	4b04      	ldr	r3, [pc, #16]	@ (8008738 <HIDS_DeviceConnected+0x70>)
 8008728:	0018      	movs	r0, r3
 800872a:	f7ff ff7b 	bl	8008624 <CheckCRC>
 800872e:	0003      	movs	r3, r0
}
 8008730:	0018      	movs	r0, r3
 8008732:	46bd      	mov	sp, r7
 8008734:	b002      	add	sp, #8
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20002df8 	.word	0x20002df8
 800873c:	08014d30 	.word	0x08014d30
 8008740:	08014cd4 	.word	0x08014cd4

08008744 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	0002      	movs	r2, r0
 800874c:	1dfb      	adds	r3, r7, #7
 800874e:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8008750:	4b03      	ldr	r3, [pc, #12]	@ (8008760 <HIDS_SetMeasurementMode+0x1c>)
 8008752:	1dfa      	adds	r2, r7, #7
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	701a      	strb	r2, [r3, #0]
}
 8008758:	46c0      	nop			@ (mov r8, r8)
 800875a:	46bd      	mov	sp, r7
 800875c:	b002      	add	sp, #8
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000136 	.word	0x20000136

08008764 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8008768:	4b04      	ldr	r3, [pc, #16]	@ (800877c <HIDS_MeasurementReady+0x18>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	0018      	movs	r0, r3
 800876e:	f7ff fd5b 	bl	8008228 <TimestampIsReached>
 8008772:	0003      	movs	r3, r0
}
 8008774:	0018      	movs	r0, r3
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	46c0      	nop			@ (mov r8, r8)
 800877c:	20000138 	.word	0x20000138

08008780 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008780:	b580      	push	{r7, lr}
 8008782:	b08c      	sub	sp, #48	@ 0x30
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800878a:	4b7a      	ldr	r3, [pc, #488]	@ (8008974 <HIDS_GetMeasurementValues+0x1f4>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <HIDS_GetMeasurementValues+0x16>
 8008792:	2301      	movs	r3, #1
 8008794:	e0ea      	b.n	800896c <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8008796:	f7ff ffe5 	bl	8008764 <HIDS_MeasurementReady>
 800879a:	0003      	movs	r3, r0
 800879c:	001a      	movs	r2, r3
 800879e:	2301      	movs	r3, #1
 80087a0:	4053      	eors	r3, r2
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <HIDS_GetMeasurementValues+0x2c>
 80087a8:	2300      	movs	r3, #0
 80087aa:	e0df      	b.n	800896c <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 80087ac:	4b72      	ldr	r3, [pc, #456]	@ (8008978 <HIDS_GetMeasurementValues+0x1f8>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	4b72      	ldr	r3, [pc, #456]	@ (800897c <HIDS_GetMeasurementValues+0x1fc>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	0019      	movs	r1, r3
 80087b6:	0010      	movs	r0, r2
 80087b8:	f7f7 fcea 	bl	8000190 <__udivsi3>
 80087bc:	0003      	movs	r3, r0
 80087be:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 80087c0:	4b6f      	ldr	r3, [pc, #444]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	1c58      	adds	r0, r3, #1
 80087c6:	4a6f      	ldr	r2, [pc, #444]	@ (8008984 <HIDS_GetMeasurementValues+0x204>)
 80087c8:	496f      	ldr	r1, [pc, #444]	@ (8008988 <HIDS_GetMeasurementValues+0x208>)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	0003      	movs	r3, r0
 80087d0:	2003      	movs	r0, #3
 80087d2:	f7ff fd7f 	bl	80082d4 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 80087d6:	4b6d      	ldr	r3, [pc, #436]	@ (800898c <HIDS_GetMeasurementValues+0x20c>)
 80087d8:	2206      	movs	r2, #6
 80087da:	0019      	movs	r1, r3
 80087dc:	2044      	movs	r0, #68	@ 0x44
 80087de:	f7ff fe3f 	bl	8008460 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 80087e2:	4b6a      	ldr	r3, [pc, #424]	@ (800898c <HIDS_GetMeasurementValues+0x20c>)
 80087e4:	0018      	movs	r0, r3
 80087e6:	f7ff ff1d 	bl	8008624 <CheckCRC>
 80087ea:	0003      	movs	r3, r0
 80087ec:	001a      	movs	r2, r3
 80087ee:	2301      	movs	r3, #1
 80087f0:	4053      	eors	r3, r2
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d011      	beq.n	800881c <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 80087f8:	2327      	movs	r3, #39	@ 0x27
 80087fa:	18fb      	adds	r3, r7, r3
 80087fc:	2200      	movs	r2, #0
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	e005      	b.n	800880e <HIDS_GetMeasurementValues+0x8e>
 8008802:	2127      	movs	r1, #39	@ 0x27
 8008804:	187b      	adds	r3, r7, r1
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	187b      	adds	r3, r7, r1
 800880a:	3201      	adds	r2, #1
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	2327      	movs	r3, #39	@ 0x27
 8008810:	18fb      	adds	r3, r7, r3
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b05      	cmp	r3, #5
 8008816:	d9f4      	bls.n	8008802 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8008818:	2300      	movs	r3, #0
 800881a:	e0a7      	b.n	800896c <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 800881c:	4b5b      	ldr	r3, [pc, #364]	@ (800898c <HIDS_GetMeasurementValues+0x20c>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	021b      	lsls	r3, r3, #8
 8008822:	22af      	movs	r2, #175	@ 0xaf
 8008824:	4353      	muls	r3, r2
 8008826:	4a59      	ldr	r2, [pc, #356]	@ (800898c <HIDS_GetMeasurementValues+0x20c>)
 8008828:	7852      	ldrb	r2, [r2, #1]
 800882a:	4313      	orrs	r3, r2
 800882c:	0018      	movs	r0, r3
 800882e:	f7fa fd8b 	bl	8003348 <__aeabi_i2d>
 8008832:	2200      	movs	r2, #0
 8008834:	4b56      	ldr	r3, [pc, #344]	@ (8008990 <HIDS_GetMeasurementValues+0x210>)
 8008836:	f7f9 fa81 	bl	8001d3c <__aeabi_ddiv>
 800883a:	0002      	movs	r2, r0
 800883c:	000b      	movs	r3, r1
 800883e:	0010      	movs	r0, r2
 8008840:	0019      	movs	r1, r3
 8008842:	f7fa fe1b 	bl	800347c <__aeabi_d2f>
 8008846:	1c03      	adds	r3, r0, #0
 8008848:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800884a:	4952      	ldr	r1, [pc, #328]	@ (8008994 <HIDS_GetMeasurementValues+0x214>)
 800884c:	6938      	ldr	r0, [r7, #16]
 800884e:	f7f8 fca9 	bl	80011a4 <__aeabi_fsub>
 8008852:	1c03      	adds	r3, r0, #0
 8008854:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8008856:	4b4d      	ldr	r3, [pc, #308]	@ (800898c <HIDS_GetMeasurementValues+0x20c>)
 8008858:	78db      	ldrb	r3, [r3, #3]
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	4a4b      	ldr	r2, [pc, #300]	@ (800898c <HIDS_GetMeasurementValues+0x20c>)
 800885e:	7912      	ldrb	r2, [r2, #4]
 8008860:	431a      	orrs	r2, r3
 8008862:	0013      	movs	r3, r2
 8008864:	015b      	lsls	r3, r3, #5
 8008866:	1a9b      	subs	r3, r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	189b      	adds	r3, r3, r2
 800886c:	0018      	movs	r0, r3
 800886e:	f7fa fd6b 	bl	8003348 <__aeabi_i2d>
 8008872:	2200      	movs	r2, #0
 8008874:	4b46      	ldr	r3, [pc, #280]	@ (8008990 <HIDS_GetMeasurementValues+0x210>)
 8008876:	f7f9 fa61 	bl	8001d3c <__aeabi_ddiv>
 800887a:	0002      	movs	r2, r0
 800887c:	000b      	movs	r3, r1
 800887e:	0010      	movs	r0, r2
 8008880:	0019      	movs	r1, r3
 8008882:	f7fa fdfb 	bl	800347c <__aeabi_d2f>
 8008886:	1c03      	adds	r3, r0, #0
 8008888:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800888a:	4943      	ldr	r1, [pc, #268]	@ (8008998 <HIDS_GetMeasurementValues+0x218>)
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7f8 fc89 	bl	80011a4 <__aeabi_fsub>
 8008892:	1c03      	adds	r3, r0, #0
 8008894:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8008896:	4b3a      	ldr	r3, [pc, #232]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	429a      	cmp	r2, r3
 800889e:	d910      	bls.n	80088c2 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 80088a0:	4b37      	ldr	r3, [pc, #220]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	4b3d      	ldr	r3, [pc, #244]	@ (800899c <HIDS_GetMeasurementValues+0x21c>)
 80088a6:	0092      	lsls	r2, r2, #2
 80088a8:	6939      	ldr	r1, [r7, #16]
 80088aa:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 80088ac:	4b34      	ldr	r3, [pc, #208]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	4b3b      	ldr	r3, [pc, #236]	@ (80089a0 <HIDS_GetMeasurementValues+0x220>)
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	68f9      	ldr	r1, [r7, #12]
 80088b6:	50d1      	str	r1, [r2, r3]
	  measurements++;
 80088b8:	4b31      	ldr	r3, [pc, #196]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	4b30      	ldr	r3, [pc, #192]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 80088c0:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 80088c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d84c      	bhi.n	8008966 <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 80088d4:	2300      	movs	r3, #0
 80088d6:	61bb      	str	r3, [r7, #24]
 80088d8:	e016      	b.n	8008908 <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 80088da:	4b30      	ldr	r3, [pc, #192]	@ (800899c <HIDS_GetMeasurementValues+0x21c>)
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	0092      	lsls	r2, r2, #2
 80088e0:	58d3      	ldr	r3, [r2, r3]
 80088e2:	1c19      	adds	r1, r3, #0
 80088e4:	6a38      	ldr	r0, [r7, #32]
 80088e6:	f7f7 ffaf 	bl	8000848 <__aeabi_fadd>
 80088ea:	1c03      	adds	r3, r0, #0
 80088ec:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 80088ee:	4b2c      	ldr	r3, [pc, #176]	@ (80089a0 <HIDS_GetMeasurementValues+0x220>)
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	0092      	lsls	r2, r2, #2
 80088f4:	58d3      	ldr	r3, [r2, r3]
 80088f6:	1c19      	adds	r1, r3, #0
 80088f8:	69f8      	ldr	r0, [r7, #28]
 80088fa:	f7f7 ffa5 	bl	8000848 <__aeabi_fadd>
 80088fe:	1c03      	adds	r3, r0, #0
 8008900:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	3301      	adds	r3, #1
 8008906:	61bb      	str	r3, [r7, #24]
 8008908:	4b1d      	ldr	r3, [pc, #116]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	429a      	cmp	r2, r3
 8008910:	d3e3      	bcc.n	80088da <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 8008912:	4b1b      	ldr	r3, [pc, #108]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	0018      	movs	r0, r3
 8008918:	f7f8 fe6a 	bl	80015f0 <__aeabi_ui2f>
 800891c:	1c03      	adds	r3, r0, #0
 800891e:	1c19      	adds	r1, r3, #0
 8008920:	6a38      	ldr	r0, [r7, #32]
 8008922:	f7f8 f91b 	bl	8000b5c <__aeabi_fdiv>
 8008926:	1c03      	adds	r3, r0, #0
 8008928:	1c1a      	adds	r2, r3, #0
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 800892e:	4b14      	ldr	r3, [pc, #80]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	0018      	movs	r0, r3
 8008934:	f7f8 fe5c 	bl	80015f0 <__aeabi_ui2f>
 8008938:	1c03      	adds	r3, r0, #0
 800893a:	1c19      	adds	r1, r3, #0
 800893c:	69f8      	ldr	r0, [r7, #28]
 800893e:	f7f8 f90d 	bl	8000b5c <__aeabi_fdiv>
 8008942:	1c03      	adds	r3, r0, #0
 8008944:	1c1a      	adds	r2, r3, #0
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	0011      	movs	r1, r2
 8008950:	0018      	movs	r0, r3
 8008952:	f7fe ffa3 	bl	800789c <SGP_GetHT>

    measurements = 0;
 8008956:	4b0a      	ldr	r3, [pc, #40]	@ (8008980 <HIDS_GetMeasurementValues+0x200>)
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 800895c:	4b05      	ldr	r3, [pc, #20]	@ (8008974 <HIDS_GetMeasurementValues+0x1f4>)
 800895e:	2201      	movs	r2, #1
 8008960:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 8008962:	2301      	movs	r3, #1
 8008964:	e002      	b.n	800896c <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8008966:	f7ff fe2f 	bl	80085c8 <HIDS_StartMeasurement>
	return false;
 800896a:	2300      	movs	r3, #0
}
 800896c:	0018      	movs	r0, r3
 800896e:	46bd      	mov	sp, r7
 8008970:	b00a      	add	sp, #40	@ 0x28
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20002e06 	.word	0x20002e06
 8008978:	20000140 	.word	0x20000140
 800897c:	2000013c 	.word	0x2000013c
 8008980:	20002e08 	.word	0x20002e08
 8008984:	08014d50 	.word	0x08014d50
 8008988:	08014d7c 	.word	0x08014d7c
 800898c:	20002e00 	.word	0x20002e00
 8008990:	40efffe0 	.word	0x40efffe0
 8008994:	42340000 	.word	0x42340000
 8008998:	40c00000 	.word	0x40c00000
 800899c:	20002e0c 	.word	0x20002e0c
 80089a0:	2000320c 	.word	0x2000320c

080089a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80089a4:	480d      	ldr	r0, [pc, #52]	@ (80089dc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80089a6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80089a8:	f7ff f91a 	bl	8007be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80089ac:	480c      	ldr	r0, [pc, #48]	@ (80089e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80089ae:	490d      	ldr	r1, [pc, #52]	@ (80089e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80089b0:	4a0d      	ldr	r2, [pc, #52]	@ (80089e8 <LoopForever+0xe>)
  movs r3, #0
 80089b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80089b4:	e002      	b.n	80089bc <LoopCopyDataInit>

080089b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80089b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80089b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80089ba:	3304      	adds	r3, #4

080089bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80089bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80089be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80089c0:	d3f9      	bcc.n	80089b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80089c2:	4a0a      	ldr	r2, [pc, #40]	@ (80089ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80089c4:	4c0a      	ldr	r4, [pc, #40]	@ (80089f0 <LoopForever+0x16>)
  movs r3, #0
 80089c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80089c8:	e001      	b.n	80089ce <LoopFillZerobss>

080089ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80089ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80089cc:	3204      	adds	r2, #4

080089ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80089ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80089d0:	d3fb      	bcc.n	80089ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80089d2:	f008 ffdd 	bl	8011990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80089d6:	f7fc fd93 	bl	8005500 <main>

080089da <LoopForever>:

LoopForever:
    b LoopForever
 80089da:	e7fe      	b.n	80089da <LoopForever>
   ldr   r0, =_estack
 80089dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80089e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80089e4:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 80089e8:	08027118 	.word	0x08027118
  ldr r2, =_sbss
 80089ec:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 80089f0:	2000375c 	.word	0x2000375c

080089f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80089f4:	e7fe      	b.n	80089f4 <ADC1_COMP_IRQHandler>
	...

080089f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80089fe:	1dfb      	adds	r3, r7, #7
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8008a04:	4b0b      	ldr	r3, [pc, #44]	@ (8008a34 <HAL_Init+0x3c>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	4b0a      	ldr	r3, [pc, #40]	@ (8008a34 <HAL_Init+0x3c>)
 8008a0a:	2140      	movs	r1, #64	@ 0x40
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008a10:	2003      	movs	r0, #3
 8008a12:	f000 f811 	bl	8008a38 <HAL_InitTick>
 8008a16:	1e03      	subs	r3, r0, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8008a1a:	1dfb      	adds	r3, r7, #7
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	e001      	b.n	8008a26 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008a22:	f7fe ffbf 	bl	80079a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008a26:	1dfb      	adds	r3, r7, #7
 8008a28:	781b      	ldrb	r3, [r3, #0]
}
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	b002      	add	sp, #8
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	40022000 	.word	0x40022000

08008a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a40:	4b14      	ldr	r3, [pc, #80]	@ (8008a94 <HAL_InitTick+0x5c>)
 8008a42:	681c      	ldr	r4, [r3, #0]
 8008a44:	4b14      	ldr	r3, [pc, #80]	@ (8008a98 <HAL_InitTick+0x60>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	0019      	movs	r1, r3
 8008a4a:	23fa      	movs	r3, #250	@ 0xfa
 8008a4c:	0098      	lsls	r0, r3, #2
 8008a4e:	f7f7 fb9f 	bl	8000190 <__udivsi3>
 8008a52:	0003      	movs	r3, r0
 8008a54:	0019      	movs	r1, r3
 8008a56:	0020      	movs	r0, r4
 8008a58:	f7f7 fb9a 	bl	8000190 <__udivsi3>
 8008a5c:	0003      	movs	r3, r0
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f000 fcad 	bl	80093be <HAL_SYSTICK_Config>
 8008a64:	1e03      	subs	r3, r0, #0
 8008a66:	d001      	beq.n	8008a6c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e00f      	b.n	8008a8c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d80b      	bhi.n	8008a8a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	2301      	movs	r3, #1
 8008a76:	425b      	negs	r3, r3
 8008a78:	2200      	movs	r2, #0
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f000 fc7a 	bl	8009374 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a80:	4b06      	ldr	r3, [pc, #24]	@ (8008a9c <HAL_InitTick+0x64>)
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e000      	b.n	8008a8c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
}
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b003      	add	sp, #12
 8008a92:	bd90      	pop	{r4, r7, pc}
 8008a94:	20000130 	.word	0x20000130
 8008a98:	20000148 	.word	0x20000148
 8008a9c:	20000144 	.word	0x20000144

08008aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008aa4:	4b05      	ldr	r3, [pc, #20]	@ (8008abc <HAL_IncTick+0x1c>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	001a      	movs	r2, r3
 8008aaa:	4b05      	ldr	r3, [pc, #20]	@ (8008ac0 <HAL_IncTick+0x20>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	18d2      	adds	r2, r2, r3
 8008ab0:	4b03      	ldr	r3, [pc, #12]	@ (8008ac0 <HAL_IncTick+0x20>)
 8008ab2:	601a      	str	r2, [r3, #0]
}
 8008ab4:	46c0      	nop			@ (mov r8, r8)
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	46c0      	nop			@ (mov r8, r8)
 8008abc:	20000148 	.word	0x20000148
 8008ac0:	2000360c 	.word	0x2000360c

08008ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8008ac8:	4b02      	ldr	r3, [pc, #8]	@ (8008ad4 <HAL_GetTick+0x10>)
 8008aca:	681b      	ldr	r3, [r3, #0]
}
 8008acc:	0018      	movs	r0, r3
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	46c0      	nop			@ (mov r8, r8)
 8008ad4:	2000360c 	.word	0x2000360c

08008ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ae0:	f7ff fff0 	bl	8008ac4 <HAL_GetTick>
 8008ae4:	0003      	movs	r3, r0
 8008ae6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3301      	adds	r3, #1
 8008af0:	d005      	beq.n	8008afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008af2:	4b0a      	ldr	r3, [pc, #40]	@ (8008b1c <HAL_Delay+0x44>)
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	001a      	movs	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	189b      	adds	r3, r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008afe:	46c0      	nop			@ (mov r8, r8)
 8008b00:	f7ff ffe0 	bl	8008ac4 <HAL_GetTick>
 8008b04:	0002      	movs	r2, r0
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d8f7      	bhi.n	8008b00 <HAL_Delay+0x28>
  {
  }
}
 8008b10:	46c0      	nop			@ (mov r8, r8)
 8008b12:	46c0      	nop			@ (mov r8, r8)
 8008b14:	46bd      	mov	sp, r7
 8008b16:	b004      	add	sp, #16
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
 8008b1c:	20000148 	.word	0x20000148

08008b20 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e159      	b.n	8008de6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2250      	movs	r2, #80	@ 0x50
 8008b44:	2100      	movs	r1, #0
 8008b46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7fc f858 	bl	8004c00 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b54:	2210      	movs	r2, #16
 8008b56:	4013      	ands	r3, r2
 8008b58:	2b10      	cmp	r3, #16
 8008b5a:	d005      	beq.n	8008b68 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	2204      	movs	r2, #4
 8008b64:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8008b66:	d00b      	beq.n	8008b80 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b6c:	2210      	movs	r2, #16
 8008b6e:	431a      	orrs	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2250      	movs	r2, #80	@ 0x50
 8008b78:	2100      	movs	r1, #0
 8008b7a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e132      	b.n	8008de6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b84:	4a9a      	ldr	r2, [pc, #616]	@ (8008df0 <HAL_ADC_Init+0x2d0>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	2202      	movs	r2, #2
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	2203      	movs	r2, #3
 8008b98:	4013      	ands	r3, r2
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d108      	bne.n	8008bb0 <HAL_ADC_Init+0x90>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d101      	bne.n	8008bb0 <HAL_ADC_Init+0x90>
 8008bac:	2301      	movs	r3, #1
 8008bae:	e000      	b.n	8008bb2 <HAL_ADC_Init+0x92>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d149      	bne.n	8008c4a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	23c0      	movs	r3, #192	@ 0xc0
 8008bbc:	061b      	lsls	r3, r3, #24
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d00b      	beq.n	8008bda <HAL_ADC_Init+0xba>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	2380      	movs	r3, #128	@ 0x80
 8008bc8:	05db      	lsls	r3, r3, #23
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d005      	beq.n	8008bda <HAL_ADC_Init+0xba>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	2380      	movs	r3, #128	@ 0x80
 8008bd4:	061b      	lsls	r3, r3, #24
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d111      	bne.n	8008bfe <HAL_ADC_Init+0xde>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691a      	ldr	r2, [r3, #16]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	0092      	lsls	r2, r2, #2
 8008be6:	0892      	lsrs	r2, r2, #2
 8008be8:	611a      	str	r2, [r3, #16]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6919      	ldr	r1, [r3, #16]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	611a      	str	r2, [r3, #16]
 8008bfc:	e014      	b.n	8008c28 <HAL_ADC_Init+0x108>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	0092      	lsls	r2, r2, #2
 8008c0a:	0892      	lsrs	r2, r2, #2
 8008c0c:	611a      	str	r2, [r3, #16]
 8008c0e:	4b79      	ldr	r3, [pc, #484]	@ (8008df4 <HAL_ADC_Init+0x2d4>)
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	4b78      	ldr	r3, [pc, #480]	@ (8008df4 <HAL_ADC_Init+0x2d4>)
 8008c14:	4978      	ldr	r1, [pc, #480]	@ (8008df8 <HAL_ADC_Init+0x2d8>)
 8008c16:	400a      	ands	r2, r1
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	4b76      	ldr	r3, [pc, #472]	@ (8008df4 <HAL_ADC_Init+0x2d4>)
 8008c1c:	6819      	ldr	r1, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	4b74      	ldr	r3, [pc, #464]	@ (8008df4 <HAL_ADC_Init+0x2d4>)
 8008c24:	430a      	orrs	r2, r1
 8008c26:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2118      	movs	r1, #24
 8008c34:	438a      	bics	r2, r1
 8008c36:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68d9      	ldr	r1, [r3, #12]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8008c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8008df4 <HAL_ADC_Init+0x2d4>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4b69      	ldr	r3, [pc, #420]	@ (8008df4 <HAL_ADC_Init+0x2d4>)
 8008c50:	496a      	ldr	r1, [pc, #424]	@ (8008dfc <HAL_ADC_Init+0x2dc>)
 8008c52:	400a      	ands	r2, r1
 8008c54:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8008c56:	4b67      	ldr	r3, [pc, #412]	@ (8008df4 <HAL_ADC_Init+0x2d4>)
 8008c58:	6819      	ldr	r1, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5e:	065a      	lsls	r2, r3, #25
 8008c60:	4b64      	ldr	r3, [pc, #400]	@ (8008df4 <HAL_ADC_Init+0x2d4>)
 8008c62:	430a      	orrs	r2, r1
 8008c64:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	2380      	movs	r3, #128	@ 0x80
 8008c6e:	055b      	lsls	r3, r3, #21
 8008c70:	4013      	ands	r3, r2
 8008c72:	d108      	bne.n	8008c86 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689a      	ldr	r2, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2180      	movs	r1, #128	@ 0x80
 8008c80:	0549      	lsls	r1, r1, #21
 8008c82:	430a      	orrs	r2, r1
 8008c84:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	495b      	ldr	r1, [pc, #364]	@ (8008e00 <HAL_ADC_Init+0x2e0>)
 8008c92:	400a      	ands	r2, r1
 8008c94:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68d9      	ldr	r1, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d101      	bne.n	8008cac <HAL_ADC_Init+0x18c>
 8008ca8:	2304      	movs	r3, #4
 8008caa:	e000      	b.n	8008cae <HAL_ADC_Init+0x18e>
 8008cac:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008cae:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2020      	movs	r0, #32
 8008cb4:	5c1b      	ldrb	r3, [r3, r0]
 8008cb6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8008cb8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	202c      	movs	r0, #44	@ 0x2c
 8008cbe:	5c1b      	ldrb	r3, [r3, r0]
 8008cc0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008cc2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008cc8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8008cd0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8008cd8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ce6:	23c2      	movs	r3, #194	@ 0xc2
 8008ce8:	33ff      	adds	r3, #255	@ 0xff
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d00b      	beq.n	8008d06 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68d9      	ldr	r1, [r3, #12]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008cfc:	431a      	orrs	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2221      	movs	r2, #33	@ 0x21
 8008d0a:	5c9b      	ldrb	r3, [r3, r2]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d11a      	bne.n	8008d46 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2220      	movs	r2, #32
 8008d14:	5c9b      	ldrb	r3, [r3, r2]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d109      	bne.n	8008d2e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2180      	movs	r1, #128	@ 0x80
 8008d26:	0249      	lsls	r1, r1, #9
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	60da      	str	r2, [r3, #12]
 8008d2c:	e00b      	b.n	8008d46 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d32:	2220      	movs	r2, #32
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d3e:	2201      	movs	r2, #1
 8008d40:	431a      	orrs	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d11f      	bne.n	8008d8e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	691a      	ldr	r2, [r3, #16]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	492a      	ldr	r1, [pc, #168]	@ (8008e04 <HAL_ADC_Init+0x2e4>)
 8008d5a:	400a      	ands	r2, r1
 8008d5c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6919      	ldr	r1, [r3, #16]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8008d6c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8008d72:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	691a      	ldr	r2, [r3, #16]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2101      	movs	r1, #1
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	611a      	str	r2, [r3, #16]
 8008d8c:	e00e      	b.n	8008dac <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	2201      	movs	r2, #1
 8008d96:	4013      	ands	r3, r2
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d107      	bne.n	8008dac <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691a      	ldr	r2, [r3, #16]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2101      	movs	r1, #1
 8008da8:	438a      	bics	r2, r1
 8008daa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695a      	ldr	r2, [r3, #20]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2107      	movs	r1, #7
 8008db8:	438a      	bics	r2, r1
 8008dba:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6959      	ldr	r1, [r3, #20]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd8:	2203      	movs	r2, #3
 8008dda:	4393      	bics	r3, r2
 8008ddc:	2201      	movs	r2, #1
 8008dde:	431a      	orrs	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	0018      	movs	r0, r3
 8008de8:	46bd      	mov	sp, r7
 8008dea:	b002      	add	sp, #8
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	46c0      	nop			@ (mov r8, r8)
 8008df0:	fffffefd 	.word	0xfffffefd
 8008df4:	40012708 	.word	0x40012708
 8008df8:	ffc3ffff 	.word	0xffc3ffff
 8008dfc:	fdffffff 	.word	0xfdffffff
 8008e00:	fffe0219 	.word	0xfffe0219
 8008e04:	fffffc03 	.word	0xfffffc03

08008e08 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8008e08:	b590      	push	{r4, r7, lr}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e10:	230f      	movs	r3, #15
 8008e12:	18fb      	adds	r3, r7, r3
 8008e14:	2200      	movs	r2, #0
 8008e16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	2204      	movs	r2, #4
 8008e20:	4013      	ands	r3, r2
 8008e22:	d138      	bne.n	8008e96 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2250      	movs	r2, #80	@ 0x50
 8008e28:	5c9b      	ldrb	r3, [r3, r2]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <HAL_ADC_Start+0x2a>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e038      	b.n	8008ea4 <HAL_ADC_Start+0x9c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2250      	movs	r2, #80	@ 0x50
 8008e36:	2101      	movs	r1, #1
 8008e38:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d007      	beq.n	8008e52 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8008e42:	230f      	movs	r3, #15
 8008e44:	18fc      	adds	r4, r7, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f000 f95f 	bl	800910c <ADC_Enable>
 8008e4e:	0003      	movs	r3, r0
 8008e50:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008e52:	230f      	movs	r3, #15
 8008e54:	18fb      	adds	r3, r7, r3
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d120      	bne.n	8008e9e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e60:	4a12      	ldr	r2, [pc, #72]	@ (8008eac <HAL_ADC_Start+0xa4>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	2280      	movs	r2, #128	@ 0x80
 8008e66:	0052      	lsls	r2, r2, #1
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2250      	movs	r2, #80	@ 0x50
 8008e78:	2100      	movs	r1, #0
 8008e7a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	221c      	movs	r2, #28
 8008e82:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2104      	movs	r1, #4
 8008e90:	430a      	orrs	r2, r1
 8008e92:	609a      	str	r2, [r3, #8]
 8008e94:	e003      	b.n	8008e9e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008e96:	230f      	movs	r3, #15
 8008e98:	18fb      	adds	r3, r7, r3
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8008e9e:	230f      	movs	r3, #15
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	781b      	ldrb	r3, [r3, #0]
}
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	b005      	add	sp, #20
 8008eaa:	bd90      	pop	{r4, r7, pc}
 8008eac:	fffff0fe 	.word	0xfffff0fe

08008eb0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	d102      	bne.n	8008ed0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8008eca:	2308      	movs	r3, #8
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	e014      	b.n	8008efa <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	4013      	ands	r3, r2
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d10b      	bne.n	8008ef6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	431a      	orrs	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2250      	movs	r2, #80	@ 0x50
 8008eee:	2100      	movs	r1, #0
 8008ef0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e072      	b.n	8008fdc <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8008efa:	f7ff fde3 	bl	8008ac4 <HAL_GetTick>
 8008efe:	0003      	movs	r3, r0
 8008f00:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008f02:	e01f      	b.n	8008f44 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	3301      	adds	r3, #1
 8008f08:	d01c      	beq.n	8008f44 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d007      	beq.n	8008f20 <HAL_ADC_PollForConversion+0x70>
 8008f10:	f7ff fdd8 	bl	8008ac4 <HAL_GetTick>
 8008f14:	0002      	movs	r2, r0
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d211      	bcs.n	8008f44 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	d10b      	bne.n	8008f44 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f30:	2204      	movs	r2, #4
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2250      	movs	r2, #80	@ 0x50
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e04b      	b.n	8008fdc <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	d0d9      	beq.n	8008f04 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f54:	2280      	movs	r2, #128	@ 0x80
 8008f56:	0092      	lsls	r2, r2, #2
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	23c0      	movs	r3, #192	@ 0xc0
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	4013      	ands	r3, r2
 8008f6a:	d12e      	bne.n	8008fca <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d129      	bne.n	8008fca <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	4013      	ands	r3, r2
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d122      	bne.n	8008fca <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	2204      	movs	r2, #4
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	d110      	bne.n	8008fb2 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	210c      	movs	r1, #12
 8008f9c:	438a      	bics	r2, r1
 8008f9e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8008fe4 <HAL_ADC_PollForConversion+0x134>)
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	2201      	movs	r2, #1
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	655a      	str	r2, [r3, #84]	@ 0x54
 8008fb0:	e00b      	b.n	8008fca <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb6:	2220      	movs	r2, #32
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d103      	bne.n	8008fda <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	220c      	movs	r2, #12
 8008fd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	0018      	movs	r0, r3
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	b004      	add	sp, #16
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	fffffefe 	.word	0xfffffefe

08008fe8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	b002      	add	sp, #8
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2250      	movs	r2, #80	@ 0x50
 800900e:	5c9b      	ldrb	r3, [r3, r2]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_ADC_ConfigChannel+0x18>
 8009014:	2302      	movs	r3, #2
 8009016:	e06c      	b.n	80090f2 <HAL_ADC_ConfigChannel+0xf2>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2250      	movs	r2, #80	@ 0x50
 800901c:	2101      	movs	r1, #1
 800901e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	2204      	movs	r2, #4
 8009028:	4013      	ands	r3, r2
 800902a:	d00b      	beq.n	8009044 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009030:	2220      	movs	r2, #32
 8009032:	431a      	orrs	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2250      	movs	r2, #80	@ 0x50
 800903c:	2100      	movs	r1, #0
 800903e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e056      	b.n	80090f2 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	4a2c      	ldr	r2, [pc, #176]	@ (80090fc <HAL_ADC_ConfigChannel+0xfc>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d028      	beq.n	80090a0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	035b      	lsls	r3, r3, #13
 800905a:	0b5a      	lsrs	r2, r3, #13
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	2380      	movs	r3, #128	@ 0x80
 800906a:	02db      	lsls	r3, r3, #11
 800906c:	4013      	ands	r3, r2
 800906e:	d009      	beq.n	8009084 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8009070:	4b23      	ldr	r3, [pc, #140]	@ (8009100 <HAL_ADC_ConfigChannel+0x100>)
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	4b22      	ldr	r3, [pc, #136]	@ (8009100 <HAL_ADC_ConfigChannel+0x100>)
 8009076:	2180      	movs	r1, #128	@ 0x80
 8009078:	0409      	lsls	r1, r1, #16
 800907a:	430a      	orrs	r2, r1
 800907c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800907e:	200a      	movs	r0, #10
 8009080:	f000 f8ac 	bl	80091dc <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	2380      	movs	r3, #128	@ 0x80
 800908a:	029b      	lsls	r3, r3, #10
 800908c:	4013      	ands	r3, r2
 800908e:	d02b      	beq.n	80090e8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8009090:	4b1b      	ldr	r3, [pc, #108]	@ (8009100 <HAL_ADC_ConfigChannel+0x100>)
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	4b1a      	ldr	r3, [pc, #104]	@ (8009100 <HAL_ADC_ConfigChannel+0x100>)
 8009096:	2180      	movs	r1, #128	@ 0x80
 8009098:	03c9      	lsls	r1, r1, #15
 800909a:	430a      	orrs	r2, r1
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	e023      	b.n	80090e8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	035b      	lsls	r3, r3, #13
 80090ac:	0b5b      	lsrs	r3, r3, #13
 80090ae:	43d9      	mvns	r1, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	400a      	ands	r2, r1
 80090b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	2380      	movs	r3, #128	@ 0x80
 80090be:	02db      	lsls	r3, r3, #11
 80090c0:	4013      	ands	r3, r2
 80090c2:	d005      	beq.n	80090d0 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80090c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009100 <HAL_ADC_ConfigChannel+0x100>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	4b0d      	ldr	r3, [pc, #52]	@ (8009100 <HAL_ADC_ConfigChannel+0x100>)
 80090ca:	490e      	ldr	r1, [pc, #56]	@ (8009104 <HAL_ADC_ConfigChannel+0x104>)
 80090cc:	400a      	ands	r2, r1
 80090ce:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	2380      	movs	r3, #128	@ 0x80
 80090d6:	029b      	lsls	r3, r3, #10
 80090d8:	4013      	ands	r3, r2
 80090da:	d005      	beq.n	80090e8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80090dc:	4b08      	ldr	r3, [pc, #32]	@ (8009100 <HAL_ADC_ConfigChannel+0x100>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	4b07      	ldr	r3, [pc, #28]	@ (8009100 <HAL_ADC_ConfigChannel+0x100>)
 80090e2:	4909      	ldr	r1, [pc, #36]	@ (8009108 <HAL_ADC_ConfigChannel+0x108>)
 80090e4:	400a      	ands	r2, r1
 80090e6:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2250      	movs	r2, #80	@ 0x50
 80090ec:	2100      	movs	r1, #0
 80090ee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	0018      	movs	r0, r3
 80090f4:	46bd      	mov	sp, r7
 80090f6:	b002      	add	sp, #8
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	46c0      	nop			@ (mov r8, r8)
 80090fc:	00001001 	.word	0x00001001
 8009100:	40012708 	.word	0x40012708
 8009104:	ff7fffff 	.word	0xff7fffff
 8009108:	ffbfffff 	.word	0xffbfffff

0800910c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	2203      	movs	r2, #3
 8009120:	4013      	ands	r3, r2
 8009122:	2b01      	cmp	r3, #1
 8009124:	d108      	bne.n	8009138 <ADC_Enable+0x2c>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2201      	movs	r2, #1
 800912e:	4013      	ands	r3, r2
 8009130:	2b01      	cmp	r3, #1
 8009132:	d101      	bne.n	8009138 <ADC_Enable+0x2c>
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <ADC_Enable+0x2e>
 8009138:	2300      	movs	r3, #0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d146      	bne.n	80091cc <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	4a24      	ldr	r2, [pc, #144]	@ (80091d8 <ADC_Enable+0xcc>)
 8009146:	4013      	ands	r3, r2
 8009148:	d00d      	beq.n	8009166 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800914e:	2210      	movs	r2, #16
 8009150:	431a      	orrs	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800915a:	2201      	movs	r2, #1
 800915c:	431a      	orrs	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e033      	b.n	80091ce <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2101      	movs	r1, #1
 8009172:	430a      	orrs	r2, r1
 8009174:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8009176:	2001      	movs	r0, #1
 8009178:	f000 f830 	bl	80091dc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800917c:	f7ff fca2 	bl	8008ac4 <HAL_GetTick>
 8009180:	0003      	movs	r3, r0
 8009182:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009184:	e01b      	b.n	80091be <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009186:	f7ff fc9d 	bl	8008ac4 <HAL_GetTick>
 800918a:	0002      	movs	r2, r0
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	2b0a      	cmp	r3, #10
 8009192:	d914      	bls.n	80091be <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2201      	movs	r2, #1
 800919c:	4013      	ands	r3, r2
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d00d      	beq.n	80091be <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a6:	2210      	movs	r2, #16
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b2:	2201      	movs	r2, #1
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e007      	b.n	80091ce <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2201      	movs	r2, #1
 80091c6:	4013      	ands	r3, r2
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d1dc      	bne.n	8009186 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	0018      	movs	r0, r3
 80091d0:	46bd      	mov	sp, r7
 80091d2:	b004      	add	sp, #16
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	46c0      	nop			@ (mov r8, r8)
 80091d8:	80000017 	.word	0x80000017

080091dc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80091e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009214 <ADC_DelayMicroSecond+0x38>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	490b      	ldr	r1, [pc, #44]	@ (8009218 <ADC_DelayMicroSecond+0x3c>)
 80091ea:	0018      	movs	r0, r3
 80091ec:	f7f6 ffd0 	bl	8000190 <__udivsi3>
 80091f0:	0003      	movs	r3, r0
 80091f2:	001a      	movs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4353      	muls	r3, r2
 80091f8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80091fa:	e002      	b.n	8009202 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	3b01      	subs	r3, #1
 8009200:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1f9      	bne.n	80091fc <ADC_DelayMicroSecond+0x20>
  }
}
 8009208:	46c0      	nop			@ (mov r8, r8)
 800920a:	46c0      	nop			@ (mov r8, r8)
 800920c:	46bd      	mov	sp, r7
 800920e:	b004      	add	sp, #16
 8009210:	bd80      	pop	{r7, pc}
 8009212:	46c0      	nop			@ (mov r8, r8)
 8009214:	20000130 	.word	0x20000130
 8009218:	000f4240 	.word	0x000f4240

0800921c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	0002      	movs	r2, r0
 8009224:	1dfb      	adds	r3, r7, #7
 8009226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009228:	1dfb      	adds	r3, r7, #7
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b7f      	cmp	r3, #127	@ 0x7f
 800922e:	d809      	bhi.n	8009244 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009230:	1dfb      	adds	r3, r7, #7
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	001a      	movs	r2, r3
 8009236:	231f      	movs	r3, #31
 8009238:	401a      	ands	r2, r3
 800923a:	4b04      	ldr	r3, [pc, #16]	@ (800924c <__NVIC_EnableIRQ+0x30>)
 800923c:	2101      	movs	r1, #1
 800923e:	4091      	lsls	r1, r2
 8009240:	000a      	movs	r2, r1
 8009242:	601a      	str	r2, [r3, #0]
  }
}
 8009244:	46c0      	nop			@ (mov r8, r8)
 8009246:	46bd      	mov	sp, r7
 8009248:	b002      	add	sp, #8
 800924a:	bd80      	pop	{r7, pc}
 800924c:	e000e100 	.word	0xe000e100

08009250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009250:	b590      	push	{r4, r7, lr}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	0002      	movs	r2, r0
 8009258:	6039      	str	r1, [r7, #0]
 800925a:	1dfb      	adds	r3, r7, #7
 800925c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800925e:	1dfb      	adds	r3, r7, #7
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b7f      	cmp	r3, #127	@ 0x7f
 8009264:	d828      	bhi.n	80092b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009266:	4a2f      	ldr	r2, [pc, #188]	@ (8009324 <__NVIC_SetPriority+0xd4>)
 8009268:	1dfb      	adds	r3, r7, #7
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b25b      	sxtb	r3, r3
 800926e:	089b      	lsrs	r3, r3, #2
 8009270:	33c0      	adds	r3, #192	@ 0xc0
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	589b      	ldr	r3, [r3, r2]
 8009276:	1dfa      	adds	r2, r7, #7
 8009278:	7812      	ldrb	r2, [r2, #0]
 800927a:	0011      	movs	r1, r2
 800927c:	2203      	movs	r2, #3
 800927e:	400a      	ands	r2, r1
 8009280:	00d2      	lsls	r2, r2, #3
 8009282:	21ff      	movs	r1, #255	@ 0xff
 8009284:	4091      	lsls	r1, r2
 8009286:	000a      	movs	r2, r1
 8009288:	43d2      	mvns	r2, r2
 800928a:	401a      	ands	r2, r3
 800928c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	019b      	lsls	r3, r3, #6
 8009292:	22ff      	movs	r2, #255	@ 0xff
 8009294:	401a      	ands	r2, r3
 8009296:	1dfb      	adds	r3, r7, #7
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	0018      	movs	r0, r3
 800929c:	2303      	movs	r3, #3
 800929e:	4003      	ands	r3, r0
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80092a4:	481f      	ldr	r0, [pc, #124]	@ (8009324 <__NVIC_SetPriority+0xd4>)
 80092a6:	1dfb      	adds	r3, r7, #7
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	b25b      	sxtb	r3, r3
 80092ac:	089b      	lsrs	r3, r3, #2
 80092ae:	430a      	orrs	r2, r1
 80092b0:	33c0      	adds	r3, #192	@ 0xc0
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80092b6:	e031      	b.n	800931c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80092b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009328 <__NVIC_SetPriority+0xd8>)
 80092ba:	1dfb      	adds	r3, r7, #7
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	0019      	movs	r1, r3
 80092c0:	230f      	movs	r3, #15
 80092c2:	400b      	ands	r3, r1
 80092c4:	3b08      	subs	r3, #8
 80092c6:	089b      	lsrs	r3, r3, #2
 80092c8:	3306      	adds	r3, #6
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	18d3      	adds	r3, r2, r3
 80092ce:	3304      	adds	r3, #4
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	1dfa      	adds	r2, r7, #7
 80092d4:	7812      	ldrb	r2, [r2, #0]
 80092d6:	0011      	movs	r1, r2
 80092d8:	2203      	movs	r2, #3
 80092da:	400a      	ands	r2, r1
 80092dc:	00d2      	lsls	r2, r2, #3
 80092de:	21ff      	movs	r1, #255	@ 0xff
 80092e0:	4091      	lsls	r1, r2
 80092e2:	000a      	movs	r2, r1
 80092e4:	43d2      	mvns	r2, r2
 80092e6:	401a      	ands	r2, r3
 80092e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	019b      	lsls	r3, r3, #6
 80092ee:	22ff      	movs	r2, #255	@ 0xff
 80092f0:	401a      	ands	r2, r3
 80092f2:	1dfb      	adds	r3, r7, #7
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	0018      	movs	r0, r3
 80092f8:	2303      	movs	r3, #3
 80092fa:	4003      	ands	r3, r0
 80092fc:	00db      	lsls	r3, r3, #3
 80092fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009300:	4809      	ldr	r0, [pc, #36]	@ (8009328 <__NVIC_SetPriority+0xd8>)
 8009302:	1dfb      	adds	r3, r7, #7
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	001c      	movs	r4, r3
 8009308:	230f      	movs	r3, #15
 800930a:	4023      	ands	r3, r4
 800930c:	3b08      	subs	r3, #8
 800930e:	089b      	lsrs	r3, r3, #2
 8009310:	430a      	orrs	r2, r1
 8009312:	3306      	adds	r3, #6
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	18c3      	adds	r3, r0, r3
 8009318:	3304      	adds	r3, #4
 800931a:	601a      	str	r2, [r3, #0]
}
 800931c:	46c0      	nop			@ (mov r8, r8)
 800931e:	46bd      	mov	sp, r7
 8009320:	b003      	add	sp, #12
 8009322:	bd90      	pop	{r4, r7, pc}
 8009324:	e000e100 	.word	0xe000e100
 8009328:	e000ed00 	.word	0xe000ed00

0800932c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	1e5a      	subs	r2, r3, #1
 8009338:	2380      	movs	r3, #128	@ 0x80
 800933a:	045b      	lsls	r3, r3, #17
 800933c:	429a      	cmp	r2, r3
 800933e:	d301      	bcc.n	8009344 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009340:	2301      	movs	r3, #1
 8009342:	e010      	b.n	8009366 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009344:	4b0a      	ldr	r3, [pc, #40]	@ (8009370 <SysTick_Config+0x44>)
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	3a01      	subs	r2, #1
 800934a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800934c:	2301      	movs	r3, #1
 800934e:	425b      	negs	r3, r3
 8009350:	2103      	movs	r1, #3
 8009352:	0018      	movs	r0, r3
 8009354:	f7ff ff7c 	bl	8009250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009358:	4b05      	ldr	r3, [pc, #20]	@ (8009370 <SysTick_Config+0x44>)
 800935a:	2200      	movs	r2, #0
 800935c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800935e:	4b04      	ldr	r3, [pc, #16]	@ (8009370 <SysTick_Config+0x44>)
 8009360:	2207      	movs	r2, #7
 8009362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009364:	2300      	movs	r3, #0
}
 8009366:	0018      	movs	r0, r3
 8009368:	46bd      	mov	sp, r7
 800936a:	b002      	add	sp, #8
 800936c:	bd80      	pop	{r7, pc}
 800936e:	46c0      	nop			@ (mov r8, r8)
 8009370:	e000e010 	.word	0xe000e010

08009374 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	60b9      	str	r1, [r7, #8]
 800937c:	607a      	str	r2, [r7, #4]
 800937e:	210f      	movs	r1, #15
 8009380:	187b      	adds	r3, r7, r1
 8009382:	1c02      	adds	r2, r0, #0
 8009384:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	187b      	adds	r3, r7, r1
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b25b      	sxtb	r3, r3
 800938e:	0011      	movs	r1, r2
 8009390:	0018      	movs	r0, r3
 8009392:	f7ff ff5d 	bl	8009250 <__NVIC_SetPriority>
}
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	46bd      	mov	sp, r7
 800939a:	b004      	add	sp, #16
 800939c:	bd80      	pop	{r7, pc}

0800939e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	0002      	movs	r2, r0
 80093a6:	1dfb      	adds	r3, r7, #7
 80093a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80093aa:	1dfb      	adds	r3, r7, #7
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	b25b      	sxtb	r3, r3
 80093b0:	0018      	movs	r0, r3
 80093b2:	f7ff ff33 	bl	800921c <__NVIC_EnableIRQ>
}
 80093b6:	46c0      	nop			@ (mov r8, r8)
 80093b8:	46bd      	mov	sp, r7
 80093ba:	b002      	add	sp, #8
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	0018      	movs	r0, r3
 80093ca:	f7ff ffaf 	bl	800932c <SysTick_Config>
 80093ce:	0003      	movs	r3, r0
}
 80093d0:	0018      	movs	r0, r3
 80093d2:	46bd      	mov	sp, r7
 80093d4:	b002      	add	sp, #8
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e061      	b.n	80094ae <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a32      	ldr	r2, [pc, #200]	@ (80094b8 <HAL_DMA_Init+0xe0>)
 80093f0:	4694      	mov	ip, r2
 80093f2:	4463      	add	r3, ip
 80093f4:	2114      	movs	r1, #20
 80093f6:	0018      	movs	r0, r3
 80093f8:	f7f6 feca 	bl	8000190 <__udivsi3>
 80093fc:	0003      	movs	r3, r0
 80093fe:	009a      	lsls	r2, r3, #2
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a2d      	ldr	r2, [pc, #180]	@ (80094bc <HAL_DMA_Init+0xe4>)
 8009408:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2225      	movs	r2, #37	@ 0x25
 800940e:	2102      	movs	r1, #2
 8009410:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	4a28      	ldr	r2, [pc, #160]	@ (80094c0 <HAL_DMA_Init+0xe8>)
 800941e:	4013      	ands	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800942a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	4313      	orrs	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	2380      	movs	r3, #128	@ 0x80
 800945e:	01db      	lsls	r3, r3, #7
 8009460:	429a      	cmp	r2, r3
 8009462:	d018      	beq.n	8009496 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009464:	4b17      	ldr	r3, [pc, #92]	@ (80094c4 <HAL_DMA_Init+0xec>)
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800946c:	211c      	movs	r1, #28
 800946e:	400b      	ands	r3, r1
 8009470:	210f      	movs	r1, #15
 8009472:	4099      	lsls	r1, r3
 8009474:	000b      	movs	r3, r1
 8009476:	43d9      	mvns	r1, r3
 8009478:	4b12      	ldr	r3, [pc, #72]	@ (80094c4 <HAL_DMA_Init+0xec>)
 800947a:	400a      	ands	r2, r1
 800947c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800947e:	4b11      	ldr	r3, [pc, #68]	@ (80094c4 <HAL_DMA_Init+0xec>)
 8009480:	6819      	ldr	r1, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800948a:	201c      	movs	r0, #28
 800948c:	4003      	ands	r3, r0
 800948e:	409a      	lsls	r2, r3
 8009490:	4b0c      	ldr	r3, [pc, #48]	@ (80094c4 <HAL_DMA_Init+0xec>)
 8009492:	430a      	orrs	r2, r1
 8009494:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2225      	movs	r2, #37	@ 0x25
 80094a0:	2101      	movs	r1, #1
 80094a2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2224      	movs	r2, #36	@ 0x24
 80094a8:	2100      	movs	r1, #0
 80094aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	0018      	movs	r0, r3
 80094b0:	46bd      	mov	sp, r7
 80094b2:	b004      	add	sp, #16
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	46c0      	nop			@ (mov r8, r8)
 80094b8:	bffdfff8 	.word	0xbffdfff8
 80094bc:	40020000 	.word	0x40020000
 80094c0:	ffff800f 	.word	0xffff800f
 80094c4:	400200a8 	.word	0x400200a8

080094c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e04a      	b.n	8009570 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2101      	movs	r1, #1
 80094e6:	438a      	bics	r2, r1
 80094e8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a22      	ldr	r2, [pc, #136]	@ (8009578 <HAL_DMA_DeInit+0xb0>)
 80094f0:	4694      	mov	ip, r2
 80094f2:	4463      	add	r3, ip
 80094f4:	2114      	movs	r1, #20
 80094f6:	0018      	movs	r0, r3
 80094f8:	f7f6 fe4a 	bl	8000190 <__udivsi3>
 80094fc:	0003      	movs	r3, r0
 80094fe:	009a      	lsls	r2, r3, #2
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a1d      	ldr	r2, [pc, #116]	@ (800957c <HAL_DMA_DeInit+0xb4>)
 8009508:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009516:	221c      	movs	r2, #28
 8009518:	401a      	ands	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800951e:	2101      	movs	r1, #1
 8009520:	4091      	lsls	r1, r2
 8009522:	000a      	movs	r2, r1
 8009524:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009526:	4b16      	ldr	r3, [pc, #88]	@ (8009580 <HAL_DMA_DeInit+0xb8>)
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800952e:	211c      	movs	r1, #28
 8009530:	400b      	ands	r3, r1
 8009532:	210f      	movs	r1, #15
 8009534:	4099      	lsls	r1, r3
 8009536:	000b      	movs	r3, r1
 8009538:	43d9      	mvns	r1, r3
 800953a:	4b11      	ldr	r3, [pc, #68]	@ (8009580 <HAL_DMA_DeInit+0xb8>)
 800953c:	400a      	ands	r2, r1
 800953e:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2225      	movs	r2, #37	@ 0x25
 8009562:	2100      	movs	r1, #0
 8009564:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2224      	movs	r2, #36	@ 0x24
 800956a:	2100      	movs	r1, #0
 800956c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	0018      	movs	r0, r3
 8009572:	46bd      	mov	sp, r7
 8009574:	b002      	add	sp, #8
 8009576:	bd80      	pop	{r7, pc}
 8009578:	bffdfff8 	.word	0xbffdfff8
 800957c:	40020000 	.word	0x40020000
 8009580:	400200a8 	.word	0x400200a8

08009584 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009592:	2317      	movs	r3, #23
 8009594:	18fb      	adds	r3, r7, r3
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2224      	movs	r2, #36	@ 0x24
 800959e:	5c9b      	ldrb	r3, [r3, r2]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d101      	bne.n	80095a8 <HAL_DMA_Start_IT+0x24>
 80095a4:	2302      	movs	r3, #2
 80095a6:	e04f      	b.n	8009648 <HAL_DMA_Start_IT+0xc4>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2224      	movs	r2, #36	@ 0x24
 80095ac:	2101      	movs	r1, #1
 80095ae:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2225      	movs	r2, #37	@ 0x25
 80095b4:	5c9b      	ldrb	r3, [r3, r2]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d13a      	bne.n	8009632 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2225      	movs	r2, #37	@ 0x25
 80095c0:	2102      	movs	r1, #2
 80095c2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2101      	movs	r1, #1
 80095d6:	438a      	bics	r2, r1
 80095d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	68b9      	ldr	r1, [r7, #8]
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 f976 	bl	80098d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d008      	beq.n	8009600 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	210e      	movs	r1, #14
 80095fa:	430a      	orrs	r2, r1
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	e00f      	b.n	8009620 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2104      	movs	r1, #4
 800960c:	438a      	bics	r2, r1
 800960e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	210a      	movs	r1, #10
 800961c:	430a      	orrs	r2, r1
 800961e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2101      	movs	r1, #1
 800962c:	430a      	orrs	r2, r1
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	e007      	b.n	8009642 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2224      	movs	r2, #36	@ 0x24
 8009636:	2100      	movs	r1, #0
 8009638:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800963a:	2317      	movs	r3, #23
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	2202      	movs	r2, #2
 8009640:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009642:	2317      	movs	r3, #23
 8009644:	18fb      	adds	r3, r7, r3
 8009646:	781b      	ldrb	r3, [r3, #0]
}
 8009648:	0018      	movs	r0, r3
 800964a:	46bd      	mov	sp, r7
 800964c:	b006      	add	sp, #24
 800964e:	bd80      	pop	{r7, pc}

08009650 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009658:	230f      	movs	r3, #15
 800965a:	18fb      	adds	r3, r7, r3
 800965c:	2200      	movs	r2, #0
 800965e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2225      	movs	r2, #37	@ 0x25
 8009664:	5c9b      	ldrb	r3, [r3, r2]
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b02      	cmp	r3, #2
 800966a:	d008      	beq.n	800967e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2204      	movs	r2, #4
 8009670:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2224      	movs	r2, #36	@ 0x24
 8009676:	2100      	movs	r1, #0
 8009678:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e024      	b.n	80096c8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	210e      	movs	r1, #14
 800968a:	438a      	bics	r2, r1
 800968c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2101      	movs	r1, #1
 800969a:	438a      	bics	r2, r1
 800969c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096a2:	221c      	movs	r2, #28
 80096a4:	401a      	ands	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096aa:	2101      	movs	r1, #1
 80096ac:	4091      	lsls	r1, r2
 80096ae:	000a      	movs	r2, r1
 80096b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2225      	movs	r2, #37	@ 0x25
 80096b6:	2101      	movs	r1, #1
 80096b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2224      	movs	r2, #36	@ 0x24
 80096be:	2100      	movs	r1, #0
 80096c0:	5499      	strb	r1, [r3, r2]

    return status;
 80096c2:	230f      	movs	r3, #15
 80096c4:	18fb      	adds	r3, r7, r3
 80096c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096c8:	0018      	movs	r0, r3
 80096ca:	46bd      	mov	sp, r7
 80096cc:	b004      	add	sp, #16
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096d8:	210f      	movs	r1, #15
 80096da:	187b      	adds	r3, r7, r1
 80096dc:	2200      	movs	r2, #0
 80096de:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2225      	movs	r2, #37	@ 0x25
 80096e4:	5c9b      	ldrb	r3, [r3, r2]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d006      	beq.n	80096fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2204      	movs	r2, #4
 80096f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80096f2:	187b      	adds	r3, r7, r1
 80096f4:	2201      	movs	r2, #1
 80096f6:	701a      	strb	r2, [r3, #0]
 80096f8:	e02a      	b.n	8009750 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	210e      	movs	r1, #14
 8009706:	438a      	bics	r2, r1
 8009708:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2101      	movs	r1, #1
 8009716:	438a      	bics	r2, r1
 8009718:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800971e:	221c      	movs	r2, #28
 8009720:	401a      	ands	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009726:	2101      	movs	r1, #1
 8009728:	4091      	lsls	r1, r2
 800972a:	000a      	movs	r2, r1
 800972c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2225      	movs	r2, #37	@ 0x25
 8009732:	2101      	movs	r1, #1
 8009734:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2224      	movs	r2, #36	@ 0x24
 800973a:	2100      	movs	r1, #0
 800973c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009742:	2b00      	cmp	r3, #0
 8009744:	d004      	beq.n	8009750 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	0010      	movs	r0, r2
 800974e:	4798      	blx	r3
    }
  }
  return status;
 8009750:	230f      	movs	r3, #15
 8009752:	18fb      	adds	r3, r7, r3
 8009754:	781b      	ldrb	r3, [r3, #0]
}
 8009756:	0018      	movs	r0, r3
 8009758:	46bd      	mov	sp, r7
 800975a:	b004      	add	sp, #16
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800977a:	221c      	movs	r2, #28
 800977c:	4013      	ands	r3, r2
 800977e:	2204      	movs	r2, #4
 8009780:	409a      	lsls	r2, r3
 8009782:	0013      	movs	r3, r2
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	4013      	ands	r3, r2
 8009788:	d026      	beq.n	80097d8 <HAL_DMA_IRQHandler+0x7a>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2204      	movs	r2, #4
 800978e:	4013      	ands	r3, r2
 8009790:	d022      	beq.n	80097d8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2220      	movs	r2, #32
 800979a:	4013      	ands	r3, r2
 800979c:	d107      	bne.n	80097ae <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2104      	movs	r1, #4
 80097aa:	438a      	bics	r2, r1
 80097ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b2:	221c      	movs	r2, #28
 80097b4:	401a      	ands	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ba:	2104      	movs	r1, #4
 80097bc:	4091      	lsls	r1, r2
 80097be:	000a      	movs	r2, r1
 80097c0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d100      	bne.n	80097cc <HAL_DMA_IRQHandler+0x6e>
 80097ca:	e071      	b.n	80098b0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	0010      	movs	r0, r2
 80097d4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80097d6:	e06b      	b.n	80098b0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097dc:	221c      	movs	r2, #28
 80097de:	4013      	ands	r3, r2
 80097e0:	2202      	movs	r2, #2
 80097e2:	409a      	lsls	r2, r3
 80097e4:	0013      	movs	r3, r2
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	4013      	ands	r3, r2
 80097ea:	d02d      	beq.n	8009848 <HAL_DMA_IRQHandler+0xea>
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2202      	movs	r2, #2
 80097f0:	4013      	ands	r3, r2
 80097f2:	d029      	beq.n	8009848 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2220      	movs	r2, #32
 80097fc:	4013      	ands	r3, r2
 80097fe:	d10b      	bne.n	8009818 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	210a      	movs	r1, #10
 800980c:	438a      	bics	r2, r1
 800980e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2225      	movs	r2, #37	@ 0x25
 8009814:	2101      	movs	r1, #1
 8009816:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800981c:	221c      	movs	r2, #28
 800981e:	401a      	ands	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009824:	2102      	movs	r1, #2
 8009826:	4091      	lsls	r1, r2
 8009828:	000a      	movs	r2, r1
 800982a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2224      	movs	r2, #36	@ 0x24
 8009830:	2100      	movs	r1, #0
 8009832:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d039      	beq.n	80098b0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	0010      	movs	r0, r2
 8009844:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009846:	e033      	b.n	80098b0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800984c:	221c      	movs	r2, #28
 800984e:	4013      	ands	r3, r2
 8009850:	2208      	movs	r2, #8
 8009852:	409a      	lsls	r2, r3
 8009854:	0013      	movs	r3, r2
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4013      	ands	r3, r2
 800985a:	d02a      	beq.n	80098b2 <HAL_DMA_IRQHandler+0x154>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2208      	movs	r2, #8
 8009860:	4013      	ands	r3, r2
 8009862:	d026      	beq.n	80098b2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	210e      	movs	r1, #14
 8009870:	438a      	bics	r2, r1
 8009872:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009878:	221c      	movs	r2, #28
 800987a:	401a      	ands	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009880:	2101      	movs	r1, #1
 8009882:	4091      	lsls	r1, r2
 8009884:	000a      	movs	r2, r1
 8009886:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2225      	movs	r2, #37	@ 0x25
 8009892:	2101      	movs	r1, #1
 8009894:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2224      	movs	r2, #36	@ 0x24
 800989a:	2100      	movs	r1, #0
 800989c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d005      	beq.n	80098b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	0010      	movs	r0, r2
 80098ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80098b0:	46c0      	nop			@ (mov r8, r8)
 80098b2:	46c0      	nop			@ (mov r8, r8)
}
 80098b4:	46bd      	mov	sp, r7
 80098b6:	b004      	add	sp, #16
 80098b8:	bd80      	pop	{r7, pc}

080098ba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2225      	movs	r2, #37	@ 0x25
 80098c6:	5c9b      	ldrb	r3, [r3, r2]
 80098c8:	b2db      	uxtb	r3, r3
}
 80098ca:	0018      	movs	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	b002      	add	sp, #8
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b084      	sub	sp, #16
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098e4:	221c      	movs	r2, #28
 80098e6:	401a      	ands	r2, r3
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ec:	2101      	movs	r1, #1
 80098ee:	4091      	lsls	r1, r2
 80098f0:	000a      	movs	r2, r1
 80098f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	2b10      	cmp	r3, #16
 8009902:	d108      	bne.n	8009916 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009914:	e007      	b.n	8009926 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	60da      	str	r2, [r3, #12]
}
 8009926:	46c0      	nop			@ (mov r8, r8)
 8009928:	46bd      	mov	sp, r7
 800992a:	b004      	add	sp, #16
 800992c:	bd80      	pop	{r7, pc}
	...

08009930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800993a:	2300      	movs	r3, #0
 800993c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800993e:	2300      	movs	r3, #0
 8009940:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009946:	e155      	b.n	8009bf4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2101      	movs	r1, #1
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	4091      	lsls	r1, r2
 8009952:	000a      	movs	r2, r1
 8009954:	4013      	ands	r3, r2
 8009956:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d100      	bne.n	8009960 <HAL_GPIO_Init+0x30>
 800995e:	e146      	b.n	8009bee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	2203      	movs	r2, #3
 8009966:	4013      	ands	r3, r2
 8009968:	2b01      	cmp	r3, #1
 800996a:	d005      	beq.n	8009978 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	2203      	movs	r2, #3
 8009972:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009974:	2b02      	cmp	r3, #2
 8009976:	d130      	bne.n	80099da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	2203      	movs	r2, #3
 8009984:	409a      	lsls	r2, r3
 8009986:	0013      	movs	r3, r2
 8009988:	43da      	mvns	r2, r3
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	4013      	ands	r3, r2
 800998e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	409a      	lsls	r2, r3
 800999a:	0013      	movs	r3, r2
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	4313      	orrs	r3, r2
 80099a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099ae:	2201      	movs	r2, #1
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	409a      	lsls	r2, r3
 80099b4:	0013      	movs	r3, r2
 80099b6:	43da      	mvns	r2, r3
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	4013      	ands	r3, r2
 80099bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	091b      	lsrs	r3, r3, #4
 80099c4:	2201      	movs	r2, #1
 80099c6:	401a      	ands	r2, r3
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	409a      	lsls	r2, r3
 80099cc:	0013      	movs	r3, r2
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2203      	movs	r2, #3
 80099e0:	4013      	ands	r3, r2
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d017      	beq.n	8009a16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	2203      	movs	r2, #3
 80099f2:	409a      	lsls	r2, r3
 80099f4:	0013      	movs	r3, r2
 80099f6:	43da      	mvns	r2, r3
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	4013      	ands	r3, r2
 80099fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	409a      	lsls	r2, r3
 8009a08:	0013      	movs	r3, r2
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	2203      	movs	r2, #3
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d123      	bne.n	8009a6a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	08da      	lsrs	r2, r3, #3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3208      	adds	r2, #8
 8009a2a:	0092      	lsls	r2, r2, #2
 8009a2c:	58d3      	ldr	r3, [r2, r3]
 8009a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	2207      	movs	r2, #7
 8009a34:	4013      	ands	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	220f      	movs	r2, #15
 8009a3a:	409a      	lsls	r2, r3
 8009a3c:	0013      	movs	r3, r2
 8009a3e:	43da      	mvns	r2, r3
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	4013      	ands	r3, r2
 8009a44:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	691a      	ldr	r2, [r3, #16]
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2107      	movs	r1, #7
 8009a4e:	400b      	ands	r3, r1
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	409a      	lsls	r2, r3
 8009a54:	0013      	movs	r3, r2
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	08da      	lsrs	r2, r3, #3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3208      	adds	r2, #8
 8009a64:	0092      	lsls	r2, r2, #2
 8009a66:	6939      	ldr	r1, [r7, #16]
 8009a68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	2203      	movs	r2, #3
 8009a76:	409a      	lsls	r2, r3
 8009a78:	0013      	movs	r3, r2
 8009a7a:	43da      	mvns	r2, r3
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	2203      	movs	r2, #3
 8009a88:	401a      	ands	r2, r3
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	409a      	lsls	r2, r3
 8009a90:	0013      	movs	r3, r2
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	23c0      	movs	r3, #192	@ 0xc0
 8009aa4:	029b      	lsls	r3, r3, #10
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	d100      	bne.n	8009aac <HAL_GPIO_Init+0x17c>
 8009aaa:	e0a0      	b.n	8009bee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009aac:	4b57      	ldr	r3, [pc, #348]	@ (8009c0c <HAL_GPIO_Init+0x2dc>)
 8009aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ab0:	4b56      	ldr	r3, [pc, #344]	@ (8009c0c <HAL_GPIO_Init+0x2dc>)
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8009ab8:	4a55      	ldr	r2, [pc, #340]	@ (8009c10 <HAL_GPIO_Init+0x2e0>)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	089b      	lsrs	r3, r3, #2
 8009abe:	3302      	adds	r3, #2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	589b      	ldr	r3, [r3, r2]
 8009ac4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2203      	movs	r2, #3
 8009aca:	4013      	ands	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	220f      	movs	r2, #15
 8009ad0:	409a      	lsls	r2, r3
 8009ad2:	0013      	movs	r3, r2
 8009ad4:	43da      	mvns	r2, r3
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	23a0      	movs	r3, #160	@ 0xa0
 8009ae0:	05db      	lsls	r3, r3, #23
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d01f      	beq.n	8009b26 <HAL_GPIO_Init+0x1f6>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8009c14 <HAL_GPIO_Init+0x2e4>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d019      	beq.n	8009b22 <HAL_GPIO_Init+0x1f2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a49      	ldr	r2, [pc, #292]	@ (8009c18 <HAL_GPIO_Init+0x2e8>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d013      	beq.n	8009b1e <HAL_GPIO_Init+0x1ee>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a48      	ldr	r2, [pc, #288]	@ (8009c1c <HAL_GPIO_Init+0x2ec>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d00d      	beq.n	8009b1a <HAL_GPIO_Init+0x1ea>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a47      	ldr	r2, [pc, #284]	@ (8009c20 <HAL_GPIO_Init+0x2f0>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d007      	beq.n	8009b16 <HAL_GPIO_Init+0x1e6>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a46      	ldr	r2, [pc, #280]	@ (8009c24 <HAL_GPIO_Init+0x2f4>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d101      	bne.n	8009b12 <HAL_GPIO_Init+0x1e2>
 8009b0e:	2305      	movs	r3, #5
 8009b10:	e00a      	b.n	8009b28 <HAL_GPIO_Init+0x1f8>
 8009b12:	2306      	movs	r3, #6
 8009b14:	e008      	b.n	8009b28 <HAL_GPIO_Init+0x1f8>
 8009b16:	2304      	movs	r3, #4
 8009b18:	e006      	b.n	8009b28 <HAL_GPIO_Init+0x1f8>
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e004      	b.n	8009b28 <HAL_GPIO_Init+0x1f8>
 8009b1e:	2302      	movs	r3, #2
 8009b20:	e002      	b.n	8009b28 <HAL_GPIO_Init+0x1f8>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e000      	b.n	8009b28 <HAL_GPIO_Init+0x1f8>
 8009b26:	2300      	movs	r3, #0
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	2103      	movs	r1, #3
 8009b2c:	400a      	ands	r2, r1
 8009b2e:	0092      	lsls	r2, r2, #2
 8009b30:	4093      	lsls	r3, r2
 8009b32:	693a      	ldr	r2, [r7, #16]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009b38:	4935      	ldr	r1, [pc, #212]	@ (8009c10 <HAL_GPIO_Init+0x2e0>)
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	089b      	lsrs	r3, r3, #2
 8009b3e:	3302      	adds	r3, #2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009b46:	4b38      	ldr	r3, [pc, #224]	@ (8009c28 <HAL_GPIO_Init+0x2f8>)
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	43da      	mvns	r2, r3
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	4013      	ands	r3, r2
 8009b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	2380      	movs	r3, #128	@ 0x80
 8009b5c:	035b      	lsls	r3, r3, #13
 8009b5e:	4013      	ands	r3, r2
 8009b60:	d003      	beq.n	8009b6a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009c28 <HAL_GPIO_Init+0x2f8>)
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009b70:	4b2d      	ldr	r3, [pc, #180]	@ (8009c28 <HAL_GPIO_Init+0x2f8>)
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	43da      	mvns	r2, r3
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	2380      	movs	r3, #128	@ 0x80
 8009b86:	039b      	lsls	r3, r3, #14
 8009b88:	4013      	ands	r3, r2
 8009b8a:	d003      	beq.n	8009b94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009b94:	4b24      	ldr	r3, [pc, #144]	@ (8009c28 <HAL_GPIO_Init+0x2f8>)
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8009b9a:	4b23      	ldr	r3, [pc, #140]	@ (8009c28 <HAL_GPIO_Init+0x2f8>)
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	43da      	mvns	r2, r3
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	2380      	movs	r3, #128	@ 0x80
 8009bb0:	029b      	lsls	r3, r3, #10
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	d003      	beq.n	8009bbe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009c28 <HAL_GPIO_Init+0x2f8>)
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009bc4:	4b18      	ldr	r3, [pc, #96]	@ (8009c28 <HAL_GPIO_Init+0x2f8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	43da      	mvns	r2, r3
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	2380      	movs	r3, #128	@ 0x80
 8009bda:	025b      	lsls	r3, r3, #9
 8009bdc:	4013      	ands	r3, r2
 8009bde:	d003      	beq.n	8009be8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009be8:	4b0f      	ldr	r3, [pc, #60]	@ (8009c28 <HAL_GPIO_Init+0x2f8>)
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	40da      	lsrs	r2, r3
 8009bfc:	1e13      	subs	r3, r2, #0
 8009bfe:	d000      	beq.n	8009c02 <HAL_GPIO_Init+0x2d2>
 8009c00:	e6a2      	b.n	8009948 <HAL_GPIO_Init+0x18>
  }
}
 8009c02:	46c0      	nop			@ (mov r8, r8)
 8009c04:	46c0      	nop			@ (mov r8, r8)
 8009c06:	46bd      	mov	sp, r7
 8009c08:	b006      	add	sp, #24
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	40021000 	.word	0x40021000
 8009c10:	40010000 	.word	0x40010000
 8009c14:	50000400 	.word	0x50000400
 8009c18:	50000800 	.word	0x50000800
 8009c1c:	50000c00 	.word	0x50000c00
 8009c20:	50001000 	.word	0x50001000
 8009c24:	50001c00 	.word	0x50001c00
 8009c28:	40010400 	.word	0x40010400

08009c2c <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009c36:	2300      	movs	r3, #0
 8009c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8009c42:	e0bc      	b.n	8009dbe <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8009c44:	2201      	movs	r2, #1
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	409a      	lsls	r2, r3
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d100      	bne.n	8009c58 <HAL_GPIO_DeInit+0x2c>
 8009c56:	e0af      	b.n	8009db8 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8009c58:	4a5e      	ldr	r2, [pc, #376]	@ (8009dd4 <HAL_GPIO_DeInit+0x1a8>)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	089b      	lsrs	r3, r3, #2
 8009c5e:	3302      	adds	r3, #2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	589b      	ldr	r3, [r3, r2]
 8009c64:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2203      	movs	r2, #3
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	220f      	movs	r2, #15
 8009c70:	409a      	lsls	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4013      	ands	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	23a0      	movs	r3, #160	@ 0xa0
 8009c7c:	05db      	lsls	r3, r3, #23
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d01f      	beq.n	8009cc2 <HAL_GPIO_DeInit+0x96>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a54      	ldr	r2, [pc, #336]	@ (8009dd8 <HAL_GPIO_DeInit+0x1ac>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d019      	beq.n	8009cbe <HAL_GPIO_DeInit+0x92>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a53      	ldr	r2, [pc, #332]	@ (8009ddc <HAL_GPIO_DeInit+0x1b0>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d013      	beq.n	8009cba <HAL_GPIO_DeInit+0x8e>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a52      	ldr	r2, [pc, #328]	@ (8009de0 <HAL_GPIO_DeInit+0x1b4>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d00d      	beq.n	8009cb6 <HAL_GPIO_DeInit+0x8a>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a51      	ldr	r2, [pc, #324]	@ (8009de4 <HAL_GPIO_DeInit+0x1b8>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d007      	beq.n	8009cb2 <HAL_GPIO_DeInit+0x86>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a50      	ldr	r2, [pc, #320]	@ (8009de8 <HAL_GPIO_DeInit+0x1bc>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d101      	bne.n	8009cae <HAL_GPIO_DeInit+0x82>
 8009caa:	2305      	movs	r3, #5
 8009cac:	e00a      	b.n	8009cc4 <HAL_GPIO_DeInit+0x98>
 8009cae:	2306      	movs	r3, #6
 8009cb0:	e008      	b.n	8009cc4 <HAL_GPIO_DeInit+0x98>
 8009cb2:	2304      	movs	r3, #4
 8009cb4:	e006      	b.n	8009cc4 <HAL_GPIO_DeInit+0x98>
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e004      	b.n	8009cc4 <HAL_GPIO_DeInit+0x98>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e002      	b.n	8009cc4 <HAL_GPIO_DeInit+0x98>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e000      	b.n	8009cc4 <HAL_GPIO_DeInit+0x98>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	2103      	movs	r1, #3
 8009cc8:	400a      	ands	r2, r1
 8009cca:	0092      	lsls	r2, r2, #2
 8009ccc:	4093      	lsls	r3, r2
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d132      	bne.n	8009d3a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009cd4:	4b45      	ldr	r3, [pc, #276]	@ (8009dec <HAL_GPIO_DeInit+0x1c0>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	43d9      	mvns	r1, r3
 8009cdc:	4b43      	ldr	r3, [pc, #268]	@ (8009dec <HAL_GPIO_DeInit+0x1c0>)
 8009cde:	400a      	ands	r2, r1
 8009ce0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009ce2:	4b42      	ldr	r3, [pc, #264]	@ (8009dec <HAL_GPIO_DeInit+0x1c0>)
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	43d9      	mvns	r1, r3
 8009cea:	4b40      	ldr	r3, [pc, #256]	@ (8009dec <HAL_GPIO_DeInit+0x1c0>)
 8009cec:	400a      	ands	r2, r1
 8009cee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8009dec <HAL_GPIO_DeInit+0x1c0>)
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	43d9      	mvns	r1, r3
 8009cf8:	4b3c      	ldr	r3, [pc, #240]	@ (8009dec <HAL_GPIO_DeInit+0x1c0>)
 8009cfa:	400a      	ands	r2, r1
 8009cfc:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8009dec <HAL_GPIO_DeInit+0x1c0>)
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	43d9      	mvns	r1, r3
 8009d06:	4b39      	ldr	r3, [pc, #228]	@ (8009dec <HAL_GPIO_DeInit+0x1c0>)
 8009d08:	400a      	ands	r2, r1
 8009d0a:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2203      	movs	r2, #3
 8009d10:	4013      	ands	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	220f      	movs	r2, #15
 8009d16:	409a      	lsls	r2, r3
 8009d18:	0013      	movs	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8009dd4 <HAL_GPIO_DeInit+0x1a8>)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	089b      	lsrs	r3, r3, #2
 8009d22:	3302      	adds	r3, #2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	589a      	ldr	r2, [r3, r2]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	43d9      	mvns	r1, r3
 8009d2c:	4829      	ldr	r0, [pc, #164]	@ (8009dd4 <HAL_GPIO_DeInit+0x1a8>)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	089b      	lsrs	r3, r3, #2
 8009d32:	400a      	ands	r2, r1
 8009d34:	3302      	adds	r3, #2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	2103      	movs	r1, #3
 8009d44:	4099      	lsls	r1, r3
 8009d46:	000b      	movs	r3, r1
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	08da      	lsrs	r2, r3, #3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3208      	adds	r2, #8
 8009d56:	0092      	lsls	r2, r2, #2
 8009d58:	58d3      	ldr	r3, [r2, r3]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	2107      	movs	r1, #7
 8009d5e:	400a      	ands	r2, r1
 8009d60:	0092      	lsls	r2, r2, #2
 8009d62:	210f      	movs	r1, #15
 8009d64:	4091      	lsls	r1, r2
 8009d66:	000a      	movs	r2, r1
 8009d68:	43d1      	mvns	r1, r2
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	08d2      	lsrs	r2, r2, #3
 8009d6e:	4019      	ands	r1, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3208      	adds	r2, #8
 8009d74:	0092      	lsls	r2, r2, #2
 8009d76:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	0052      	lsls	r2, r2, #1
 8009d80:	2103      	movs	r1, #3
 8009d82:	4091      	lsls	r1, r2
 8009d84:	000a      	movs	r2, r1
 8009d86:	43d2      	mvns	r2, r2
 8009d88:	401a      	ands	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	2101      	movs	r1, #1
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	4091      	lsls	r1, r2
 8009d98:	000a      	movs	r2, r1
 8009d9a:	43d2      	mvns	r2, r2
 8009d9c:	401a      	ands	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	0052      	lsls	r2, r2, #1
 8009daa:	2103      	movs	r1, #3
 8009dac:	4091      	lsls	r1, r2
 8009dae:	000a      	movs	r2, r1
 8009db0:	43d2      	mvns	r2, r2
 8009db2:	401a      	ands	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	609a      	str	r2, [r3, #8]
    }
    position++;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	40da      	lsrs	r2, r3
 8009dc4:	1e13      	subs	r3, r2, #0
 8009dc6:	d000      	beq.n	8009dca <HAL_GPIO_DeInit+0x19e>
 8009dc8:	e73c      	b.n	8009c44 <HAL_GPIO_DeInit+0x18>
  }
}
 8009dca:	46c0      	nop			@ (mov r8, r8)
 8009dcc:	46c0      	nop			@ (mov r8, r8)
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	b006      	add	sp, #24
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	40010000 	.word	0x40010000
 8009dd8:	50000400 	.word	0x50000400
 8009ddc:	50000800 	.word	0x50000800
 8009de0:	50000c00 	.word	0x50000c00
 8009de4:	50001000 	.word	0x50001000
 8009de8:	50001c00 	.word	0x50001c00
 8009dec:	40010400 	.word	0x40010400

08009df0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	0008      	movs	r0, r1
 8009dfa:	0011      	movs	r1, r2
 8009dfc:	1cbb      	adds	r3, r7, #2
 8009dfe:	1c02      	adds	r2, r0, #0
 8009e00:	801a      	strh	r2, [r3, #0]
 8009e02:	1c7b      	adds	r3, r7, #1
 8009e04:	1c0a      	adds	r2, r1, #0
 8009e06:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e08:	1c7b      	adds	r3, r7, #1
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d004      	beq.n	8009e1a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e10:	1cbb      	adds	r3, r7, #2
 8009e12:	881a      	ldrh	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8009e18:	e003      	b.n	8009e22 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8009e1a:	1cbb      	adds	r3, r7, #2
 8009e1c:	881a      	ldrh	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009e22:	46c0      	nop			@ (mov r8, r8)
 8009e24:	46bd      	mov	sp, r7
 8009e26:	b002      	add	sp, #8
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	000a      	movs	r2, r1
 8009e34:	1cbb      	adds	r3, r7, #2
 8009e36:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e3e:	1cbb      	adds	r3, r7, #2
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4013      	ands	r3, r2
 8009e46:	041a      	lsls	r2, r3, #16
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	43db      	mvns	r3, r3
 8009e4c:	1cb9      	adds	r1, r7, #2
 8009e4e:	8809      	ldrh	r1, [r1, #0]
 8009e50:	400b      	ands	r3, r1
 8009e52:	431a      	orrs	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	619a      	str	r2, [r3, #24]
}
 8009e58:	46c0      	nop			@ (mov r8, r8)
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	b004      	add	sp, #16
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e082      	b.n	8009f78 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2241      	movs	r2, #65	@ 0x41
 8009e76:	5c9b      	ldrb	r3, [r3, r2]
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d107      	bne.n	8009e8e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2240      	movs	r2, #64	@ 0x40
 8009e82:	2100      	movs	r1, #0
 8009e84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	0018      	movs	r0, r3
 8009e8a:	f7fb f96f 	bl	800516c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2241      	movs	r2, #65	@ 0x41
 8009e92:	2124      	movs	r1, #36	@ 0x24
 8009e94:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	438a      	bics	r2, r1
 8009ea4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685a      	ldr	r2, [r3, #4]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4934      	ldr	r1, [pc, #208]	@ (8009f80 <HAL_I2C_Init+0x120>)
 8009eb0:	400a      	ands	r2, r1
 8009eb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4931      	ldr	r1, [pc, #196]	@ (8009f84 <HAL_I2C_Init+0x124>)
 8009ec0:	400a      	ands	r2, r1
 8009ec2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d108      	bne.n	8009ede <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689a      	ldr	r2, [r3, #8]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2180      	movs	r1, #128	@ 0x80
 8009ed6:	0209      	lsls	r1, r1, #8
 8009ed8:	430a      	orrs	r2, r1
 8009eda:	609a      	str	r2, [r3, #8]
 8009edc:	e007      	b.n	8009eee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	689a      	ldr	r2, [r3, #8]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2184      	movs	r1, #132	@ 0x84
 8009ee8:	0209      	lsls	r1, r1, #8
 8009eea:	430a      	orrs	r2, r1
 8009eec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d104      	bne.n	8009f00 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2280      	movs	r2, #128	@ 0x80
 8009efc:	0112      	lsls	r2, r2, #4
 8009efe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	491f      	ldr	r1, [pc, #124]	@ (8009f88 <HAL_I2C_Init+0x128>)
 8009f0c:	430a      	orrs	r2, r1
 8009f0e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	491a      	ldr	r1, [pc, #104]	@ (8009f84 <HAL_I2C_Init+0x124>)
 8009f1c:	400a      	ands	r2, r1
 8009f1e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	691a      	ldr	r2, [r3, #16]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	69d9      	ldr	r1, [r3, #28]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1a      	ldr	r2, [r3, #32]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2101      	movs	r1, #1
 8009f56:	430a      	orrs	r2, r1
 8009f58:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2241      	movs	r2, #65	@ 0x41
 8009f64:	2120      	movs	r1, #32
 8009f66:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2242      	movs	r2, #66	@ 0x42
 8009f72:	2100      	movs	r1, #0
 8009f74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	0018      	movs	r0, r3
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	b002      	add	sp, #8
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	f0ffffff 	.word	0xf0ffffff
 8009f84:	ffff7fff 	.word	0xffff7fff
 8009f88:	02008000 	.word	0x02008000

08009f8c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8009f8c:	b5b0      	push	{r4, r5, r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	0008      	movs	r0, r1
 8009f96:	607a      	str	r2, [r7, #4]
 8009f98:	0019      	movs	r1, r3
 8009f9a:	230a      	movs	r3, #10
 8009f9c:	18fb      	adds	r3, r7, r3
 8009f9e:	1c02      	adds	r2, r0, #0
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	2308      	movs	r3, #8
 8009fa4:	18fb      	adds	r3, r7, r3
 8009fa6:	1c0a      	adds	r2, r1, #0
 8009fa8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2241      	movs	r2, #65	@ 0x41
 8009fae:	5c9b      	ldrb	r3, [r3, r2]
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b20      	cmp	r3, #32
 8009fb4:	d000      	beq.n	8009fb8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8009fb6:	e0dd      	b.n	800a174 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	699a      	ldr	r2, [r3, #24]
 8009fbe:	2380      	movs	r3, #128	@ 0x80
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	401a      	ands	r2, r3
 8009fc4:	2380      	movs	r3, #128	@ 0x80
 8009fc6:	021b      	lsls	r3, r3, #8
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d101      	bne.n	8009fd0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e0d2      	b.n	800a176 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2240      	movs	r2, #64	@ 0x40
 8009fd4:	5c9b      	ldrb	r3, [r3, r2]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_I2C_Master_Transmit_DMA+0x52>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e0cb      	b.n	800a176 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2240      	movs	r2, #64	@ 0x40
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2241      	movs	r2, #65	@ 0x41
 8009fea:	2121      	movs	r1, #33	@ 0x21
 8009fec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2242      	movs	r2, #66	@ 0x42
 8009ff2:	2110      	movs	r1, #16
 8009ff4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2208      	movs	r2, #8
 800a006:	18ba      	adds	r2, r7, r2
 800a008:	8812      	ldrh	r2, [r2, #0]
 800a00a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4a5c      	ldr	r2, [pc, #368]	@ (800a180 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800a010:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4a5b      	ldr	r2, [pc, #364]	@ (800a184 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800a016:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	2bff      	cmp	r3, #255	@ 0xff
 800a020:	d906      	bls.n	800a030 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	22ff      	movs	r2, #255	@ 0xff
 800a026:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a028:	2380      	movs	r3, #128	@ 0x80
 800a02a:	045b      	lsls	r3, r3, #17
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	e007      	b.n	800a040 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a034:	b29a      	uxth	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a03a:	2380      	movs	r3, #128	@ 0x80
 800a03c:	049b      	lsls	r3, r3, #18
 800a03e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a044:	2b00      	cmp	r3, #0
 800a046:	d100      	bne.n	800a04a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800a048:	e078      	b.n	800a13c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d023      	beq.n	800a09a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a056:	4a4c      	ldr	r2, [pc, #304]	@ (800a188 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800a058:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a05e:	4a4b      	ldr	r2, [pc, #300]	@ (800a18c <HAL_I2C_Master_Transmit_DMA+0x200>)
 800a060:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a066:	2200      	movs	r2, #0
 800a068:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a06e:	2200      	movs	r2, #0
 800a070:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3328      	adds	r3, #40	@ 0x28
 800a07e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a084:	2513      	movs	r5, #19
 800a086:	197c      	adds	r4, r7, r5
 800a088:	f7ff fa7c 	bl	8009584 <HAL_DMA_Start_IT>
 800a08c:	0003      	movs	r3, r0
 800a08e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a090:	197b      	adds	r3, r7, r5
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d13d      	bne.n	800a114 <HAL_I2C_Master_Transmit_DMA+0x188>
 800a098:	e013      	b.n	800a0c2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2241      	movs	r2, #65	@ 0x41
 800a09e:	2120      	movs	r1, #32
 800a0a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2242      	movs	r2, #66	@ 0x42
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ae:	2280      	movs	r2, #128	@ 0x80
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2240      	movs	r2, #64	@ 0x40
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e059      	b.n	800a176 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	697c      	ldr	r4, [r7, #20]
 800a0ca:	230a      	movs	r3, #10
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	8819      	ldrh	r1, [r3, #0]
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	4b2f      	ldr	r3, [pc, #188]	@ (800a190 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	0023      	movs	r3, r4
 800a0d8:	f001 fd0e 	bl	800baf8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2240      	movs	r2, #64	@ 0x40
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2110      	movs	r1, #16
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f001 fd36 	bl	800bb6c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2180      	movs	r1, #128	@ 0x80
 800a10c:	01c9      	lsls	r1, r1, #7
 800a10e:	430a      	orrs	r2, r1
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	e02d      	b.n	800a170 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2241      	movs	r2, #65	@ 0x41
 800a118:	2120      	movs	r1, #32
 800a11a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2242      	movs	r2, #66	@ 0x42
 800a120:	2100      	movs	r1, #0
 800a122:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a128:	2210      	movs	r2, #16
 800a12a:	431a      	orrs	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2240      	movs	r2, #64	@ 0x40
 800a134:	2100      	movs	r1, #0
 800a136:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e01c      	b.n	800a176 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	4a15      	ldr	r2, [pc, #84]	@ (800a194 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800a140:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a146:	b2da      	uxtb	r2, r3
 800a148:	2380      	movs	r3, #128	@ 0x80
 800a14a:	049c      	lsls	r4, r3, #18
 800a14c:	230a      	movs	r3, #10
 800a14e:	18fb      	adds	r3, r7, r3
 800a150:	8819      	ldrh	r1, [r3, #0]
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	4b0e      	ldr	r3, [pc, #56]	@ (800a190 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	0023      	movs	r3, r4
 800a15a:	f001 fccd 	bl	800baf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2240      	movs	r2, #64	@ 0x40
 800a162:	2100      	movs	r1, #0
 800a164:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2101      	movs	r1, #1
 800a16a:	0018      	movs	r0, r3
 800a16c:	f001 fcfe 	bl	800bb6c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	e000      	b.n	800a176 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a174:	2302      	movs	r3, #2
  }
}
 800a176:	0018      	movs	r0, r3
 800a178:	46bd      	mov	sp, r7
 800a17a:	b006      	add	sp, #24
 800a17c:	bdb0      	pop	{r4, r5, r7, pc}
 800a17e:	46c0      	nop			@ (mov r8, r8)
 800a180:	ffff0000 	.word	0xffff0000
 800a184:	0800a991 	.word	0x0800a991
 800a188:	0800b949 	.word	0x0800b949
 800a18c:	0800ba89 	.word	0x0800ba89
 800a190:	80002000 	.word	0x80002000
 800a194:	0800a53d 	.word	0x0800a53d

0800a198 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a198:	b5b0      	push	{r4, r5, r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	0008      	movs	r0, r1
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	0019      	movs	r1, r3
 800a1a6:	230a      	movs	r3, #10
 800a1a8:	18fb      	adds	r3, r7, r3
 800a1aa:	1c02      	adds	r2, r0, #0
 800a1ac:	801a      	strh	r2, [r3, #0]
 800a1ae:	2308      	movs	r3, #8
 800a1b0:	18fb      	adds	r3, r7, r3
 800a1b2:	1c0a      	adds	r2, r1, #0
 800a1b4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2241      	movs	r2, #65	@ 0x41
 800a1ba:	5c9b      	ldrb	r3, [r3, r2]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b20      	cmp	r3, #32
 800a1c0:	d000      	beq.n	800a1c4 <HAL_I2C_Master_Receive_DMA+0x2c>
 800a1c2:	e0dd      	b.n	800a380 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	699a      	ldr	r2, [r3, #24]
 800a1ca:	2380      	movs	r3, #128	@ 0x80
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	401a      	ands	r2, r3
 800a1d0:	2380      	movs	r3, #128	@ 0x80
 800a1d2:	021b      	lsls	r3, r3, #8
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d101      	bne.n	800a1dc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e0d2      	b.n	800a382 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2240      	movs	r2, #64	@ 0x40
 800a1e0:	5c9b      	ldrb	r3, [r3, r2]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d101      	bne.n	800a1ea <HAL_I2C_Master_Receive_DMA+0x52>
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	e0cb      	b.n	800a382 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2240      	movs	r2, #64	@ 0x40
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2241      	movs	r2, #65	@ 0x41
 800a1f6:	2122      	movs	r1, #34	@ 0x22
 800a1f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2242      	movs	r2, #66	@ 0x42
 800a1fe:	2110      	movs	r1, #16
 800a200:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2208      	movs	r2, #8
 800a212:	18ba      	adds	r2, r7, r2
 800a214:	8812      	ldrh	r2, [r2, #0]
 800a216:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4a5c      	ldr	r2, [pc, #368]	@ (800a38c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800a21c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4a5b      	ldr	r2, [pc, #364]	@ (800a390 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800a222:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a228:	b29b      	uxth	r3, r3
 800a22a:	2bff      	cmp	r3, #255	@ 0xff
 800a22c:	d906      	bls.n	800a23c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	22ff      	movs	r2, #255	@ 0xff
 800a232:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a234:	2380      	movs	r3, #128	@ 0x80
 800a236:	045b      	lsls	r3, r3, #17
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	e007      	b.n	800a24c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a240:	b29a      	uxth	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a246:	2380      	movs	r3, #128	@ 0x80
 800a248:	049b      	lsls	r3, r3, #18
 800a24a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a250:	2b00      	cmp	r3, #0
 800a252:	d100      	bne.n	800a256 <HAL_I2C_Master_Receive_DMA+0xbe>
 800a254:	e078      	b.n	800a348 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d023      	beq.n	800a2a6 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a262:	4a4c      	ldr	r2, [pc, #304]	@ (800a394 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800a264:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a26a:	4a4b      	ldr	r2, [pc, #300]	@ (800a398 <HAL_I2C_Master_Receive_DMA+0x200>)
 800a26c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a272:	2200      	movs	r2, #0
 800a274:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a27a:	2200      	movs	r2, #0
 800a27c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3324      	adds	r3, #36	@ 0x24
 800a288:	0019      	movs	r1, r3
 800a28a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a290:	2513      	movs	r5, #19
 800a292:	197c      	adds	r4, r7, r5
 800a294:	f7ff f976 	bl	8009584 <HAL_DMA_Start_IT>
 800a298:	0003      	movs	r3, r0
 800a29a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a29c:	197b      	adds	r3, r7, r5
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d13d      	bne.n	800a320 <HAL_I2C_Master_Receive_DMA+0x188>
 800a2a4:	e013      	b.n	800a2ce <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2241      	movs	r2, #65	@ 0x41
 800a2aa:	2120      	movs	r1, #32
 800a2ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2242      	movs	r2, #66	@ 0x42
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2ba:	2280      	movs	r2, #128	@ 0x80
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2240      	movs	r2, #64	@ 0x40
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e059      	b.n	800a382 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	697c      	ldr	r4, [r7, #20]
 800a2d6:	230a      	movs	r3, #10
 800a2d8:	18fb      	adds	r3, r7, r3
 800a2da:	8819      	ldrh	r1, [r3, #0]
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	4b2f      	ldr	r3, [pc, #188]	@ (800a39c <HAL_I2C_Master_Receive_DMA+0x204>)
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	0023      	movs	r3, r4
 800a2e4:	f001 fc08 	bl	800baf8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2ec:	b29a      	uxth	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2240      	movs	r2, #64	@ 0x40
 800a2fe:	2100      	movs	r1, #0
 800a300:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2110      	movs	r1, #16
 800a306:	0018      	movs	r0, r3
 800a308:	f001 fc30 	bl	800bb6c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2180      	movs	r1, #128	@ 0x80
 800a318:	0209      	lsls	r1, r1, #8
 800a31a:	430a      	orrs	r2, r1
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e02d      	b.n	800a37c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2241      	movs	r2, #65	@ 0x41
 800a324:	2120      	movs	r1, #32
 800a326:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2242      	movs	r2, #66	@ 0x42
 800a32c:	2100      	movs	r1, #0
 800a32e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a334:	2210      	movs	r2, #16
 800a336:	431a      	orrs	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2240      	movs	r2, #64	@ 0x40
 800a340:	2100      	movs	r1, #0
 800a342:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e01c      	b.n	800a382 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	4a15      	ldr	r2, [pc, #84]	@ (800a3a0 <HAL_I2C_Master_Receive_DMA+0x208>)
 800a34c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a352:	b2da      	uxtb	r2, r3
 800a354:	2380      	movs	r3, #128	@ 0x80
 800a356:	049c      	lsls	r4, r3, #18
 800a358:	230a      	movs	r3, #10
 800a35a:	18fb      	adds	r3, r7, r3
 800a35c:	8819      	ldrh	r1, [r3, #0]
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	4b0e      	ldr	r3, [pc, #56]	@ (800a39c <HAL_I2C_Master_Receive_DMA+0x204>)
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	0023      	movs	r3, r4
 800a366:	f001 fbc7 	bl	800baf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2240      	movs	r2, #64	@ 0x40
 800a36e:	2100      	movs	r1, #0
 800a370:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2101      	movs	r1, #1
 800a376:	0018      	movs	r0, r3
 800a378:	f001 fbf8 	bl	800bb6c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	e000      	b.n	800a382 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a380:	2302      	movs	r3, #2
  }
}
 800a382:	0018      	movs	r0, r3
 800a384:	46bd      	mov	sp, r7
 800a386:	b006      	add	sp, #24
 800a388:	bdb0      	pop	{r4, r5, r7, pc}
 800a38a:	46c0      	nop			@ (mov r8, r8)
 800a38c:	ffff0000 	.word	0xffff0000
 800a390:	0800a991 	.word	0x0800a991
 800a394:	0800b9e9 	.word	0x0800b9e9
 800a398:	0800ba89 	.word	0x0800ba89
 800a39c:	80002400 	.word	0x80002400
 800a3a0:	0800a53d 	.word	0x0800a53d

0800a3a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d005      	beq.n	800a3d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	68f9      	ldr	r1, [r7, #12]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	4798      	blx	r3
  }
}
 800a3d0:	46c0      	nop			@ (mov r8, r8)
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	b004      	add	sp, #16
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	2380      	movs	r3, #128	@ 0x80
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	d00e      	beq.n	800a418 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	2280      	movs	r2, #128	@ 0x80
 800a3fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a400:	d00a      	beq.n	800a418 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a406:	2201      	movs	r2, #1
 800a408:	431a      	orrs	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2280      	movs	r2, #128	@ 0x80
 800a414:	0052      	lsls	r2, r2, #1
 800a416:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	2380      	movs	r3, #128	@ 0x80
 800a41c:	00db      	lsls	r3, r3, #3
 800a41e:	4013      	ands	r3, r2
 800a420:	d00e      	beq.n	800a440 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2280      	movs	r2, #128	@ 0x80
 800a426:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a428:	d00a      	beq.n	800a440 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a42e:	2208      	movs	r2, #8
 800a430:	431a      	orrs	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2280      	movs	r2, #128	@ 0x80
 800a43c:	00d2      	lsls	r2, r2, #3
 800a43e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	2380      	movs	r3, #128	@ 0x80
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4013      	ands	r3, r2
 800a448:	d00e      	beq.n	800a468 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	2280      	movs	r2, #128	@ 0x80
 800a44e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a450:	d00a      	beq.n	800a468 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a456:	2202      	movs	r2, #2
 800a458:	431a      	orrs	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2280      	movs	r2, #128	@ 0x80
 800a464:	0092      	lsls	r2, r2, #2
 800a466:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a46c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	220b      	movs	r2, #11
 800a472:	4013      	ands	r3, r2
 800a474:	d005      	beq.n	800a482 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	0011      	movs	r1, r2
 800a47c:	0018      	movs	r0, r3
 800a47e:	f001 f915 	bl	800b6ac <I2C_ITError>
  }
}
 800a482:	46c0      	nop			@ (mov r8, r8)
 800a484:	46bd      	mov	sp, r7
 800a486:	b006      	add	sp, #24
 800a488:	bd80      	pop	{r7, pc}

0800a48a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b082      	sub	sp, #8
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a492:	46c0      	nop			@ (mov r8, r8)
 800a494:	46bd      	mov	sp, r7
 800a496:	b002      	add	sp, #8
 800a498:	bd80      	pop	{r7, pc}

0800a49a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a4a2:	46c0      	nop			@ (mov r8, r8)
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	b002      	add	sp, #8
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a4b2:	46c0      	nop			@ (mov r8, r8)
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	b002      	add	sp, #8
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a4c2:	46c0      	nop			@ (mov r8, r8)
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	b002      	add	sp, #8
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	0008      	movs	r0, r1
 800a4d4:	0011      	movs	r1, r2
 800a4d6:	1cfb      	adds	r3, r7, #3
 800a4d8:	1c02      	adds	r2, r0, #0
 800a4da:	701a      	strb	r2, [r3, #0]
 800a4dc:	003b      	movs	r3, r7
 800a4de:	1c0a      	adds	r2, r1, #0
 800a4e0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a4e2:	46c0      	nop			@ (mov r8, r8)
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	b002      	add	sp, #8
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a4f2:	46c0      	nop			@ (mov r8, r8)
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	b002      	add	sp, #8
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a502:	46c0      	nop			@ (mov r8, r8)
 800a504:	46bd      	mov	sp, r7
 800a506:	b002      	add	sp, #8
 800a508:	bd80      	pop	{r7, pc}

0800a50a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b082      	sub	sp, #8
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a512:	46c0      	nop			@ (mov r8, r8)
 800a514:	46bd      	mov	sp, r7
 800a516:	b002      	add	sp, #8
 800a518:	bd80      	pop	{r7, pc}

0800a51a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a522:	46c0      	nop			@ (mov r8, r8)
 800a524:	46bd      	mov	sp, r7
 800a526:	b002      	add	sp, #8
 800a528:	bd80      	pop	{r7, pc}

0800a52a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b082      	sub	sp, #8
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a532:	46c0      	nop			@ (mov r8, r8)
 800a534:	46bd      	mov	sp, r7
 800a536:	b002      	add	sp, #8
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a53c:	b590      	push	{r4, r7, lr}
 800a53e:	b089      	sub	sp, #36	@ 0x24
 800a540:	af02      	add	r7, sp, #8
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2240      	movs	r2, #64	@ 0x40
 800a550:	5c9b      	ldrb	r3, [r3, r2]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d101      	bne.n	800a55a <I2C_Master_ISR_IT+0x1e>
 800a556:	2302      	movs	r3, #2
 800a558:	e113      	b.n	800a782 <I2C_Master_ISR_IT+0x246>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2240      	movs	r2, #64	@ 0x40
 800a55e:	2101      	movs	r1, #1
 800a560:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2210      	movs	r2, #16
 800a566:	4013      	ands	r3, r2
 800a568:	d012      	beq.n	800a590 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2210      	movs	r2, #16
 800a56e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a570:	d00e      	beq.n	800a590 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2210      	movs	r2, #16
 800a578:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a57e:	2204      	movs	r2, #4
 800a580:	431a      	orrs	r2, r3
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	0018      	movs	r0, r3
 800a58a:	f001 f9ba 	bl	800b902 <I2C_Flush_TXDR>
 800a58e:	e0e5      	b.n	800a75c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2204      	movs	r2, #4
 800a594:	4013      	ands	r3, r2
 800a596:	d021      	beq.n	800a5dc <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2204      	movs	r2, #4
 800a59c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a59e:	d01d      	beq.n	800a5dc <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	2204      	movs	r2, #4
 800a5a4:	4393      	bics	r3, r2
 800a5a6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a5da:	e0bf      	b.n	800a75c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	d01c      	beq.n	800a61e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a5ea:	d018      	beq.n	800a61e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f0:	781a      	ldrb	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a606:	3b01      	subs	r3, #1
 800a608:	b29a      	uxth	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a612:	b29b      	uxth	r3, r3
 800a614:	3b01      	subs	r3, #1
 800a616:	b29a      	uxth	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a61c:	e09e      	b.n	800a75c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2280      	movs	r2, #128	@ 0x80
 800a622:	4013      	ands	r3, r2
 800a624:	d100      	bne.n	800a628 <I2C_Master_ISR_IT+0xec>
 800a626:	e069      	b.n	800a6fc <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2240      	movs	r2, #64	@ 0x40
 800a62c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a62e:	d065      	beq.n	800a6fc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a634:	b29b      	uxth	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	d04a      	beq.n	800a6d0 <I2C_Master_ISR_IT+0x194>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d146      	bne.n	800a6d0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	b29a      	uxth	r2, r3
 800a64a:	2112      	movs	r1, #18
 800a64c:	187b      	adds	r3, r7, r1
 800a64e:	0592      	lsls	r2, r2, #22
 800a650:	0d92      	lsrs	r2, r2, #22
 800a652:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a658:	b29b      	uxth	r3, r3
 800a65a:	2bff      	cmp	r3, #255	@ 0xff
 800a65c:	d910      	bls.n	800a680 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	22ff      	movs	r2, #255	@ 0xff
 800a662:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	2380      	movs	r3, #128	@ 0x80
 800a66c:	045c      	lsls	r4, r3, #17
 800a66e:	187b      	adds	r3, r7, r1
 800a670:	8819      	ldrh	r1, [r3, #0]
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	2300      	movs	r3, #0
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	0023      	movs	r3, r4
 800a67a:	f001 fa3d 	bl	800baf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a67e:	e03c      	b.n	800a6fa <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a684:	b29a      	uxth	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68e:	4a3f      	ldr	r2, [pc, #252]	@ (800a78c <I2C_Master_ISR_IT+0x250>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d00e      	beq.n	800a6b2 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a698:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a69e:	2312      	movs	r3, #18
 800a6a0:	18fb      	adds	r3, r7, r3
 800a6a2:	8819      	ldrh	r1, [r3, #0]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	0023      	movs	r3, r4
 800a6ac:	f001 fa24 	bl	800baf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6b0:	e023      	b.n	800a6fa <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	2380      	movs	r3, #128	@ 0x80
 800a6ba:	049c      	lsls	r4, r3, #18
 800a6bc:	2312      	movs	r3, #18
 800a6be:	18fb      	adds	r3, r7, r3
 800a6c0:	8819      	ldrh	r1, [r3, #0]
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	0023      	movs	r3, r4
 800a6ca:	f001 fa15 	bl	800baf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6ce:	e014      	b.n	800a6fa <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	2380      	movs	r3, #128	@ 0x80
 800a6d8:	049b      	lsls	r3, r3, #18
 800a6da:	401a      	ands	r2, r3
 800a6dc:	2380      	movs	r3, #128	@ 0x80
 800a6de:	049b      	lsls	r3, r3, #18
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d004      	beq.n	800a6ee <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	f000 fcf4 	bl	800b0d4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a6ec:	e036      	b.n	800a75c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2140      	movs	r1, #64	@ 0x40
 800a6f2:	0018      	movs	r0, r3
 800a6f4:	f000 ffda 	bl	800b6ac <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a6f8:	e030      	b.n	800a75c <I2C_Master_ISR_IT+0x220>
 800a6fa:	e02f      	b.n	800a75c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2240      	movs	r2, #64	@ 0x40
 800a700:	4013      	ands	r3, r2
 800a702:	d02b      	beq.n	800a75c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2240      	movs	r2, #64	@ 0x40
 800a708:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a70a:	d027      	beq.n	800a75c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a710:	b29b      	uxth	r3, r3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d11d      	bne.n	800a752 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	2380      	movs	r3, #128	@ 0x80
 800a71e:	049b      	lsls	r3, r3, #18
 800a720:	401a      	ands	r2, r3
 800a722:	2380      	movs	r3, #128	@ 0x80
 800a724:	049b      	lsls	r3, r3, #18
 800a726:	429a      	cmp	r2, r3
 800a728:	d018      	beq.n	800a75c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72e:	4a17      	ldr	r2, [pc, #92]	@ (800a78c <I2C_Master_ISR_IT+0x250>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d109      	bne.n	800a748 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2180      	movs	r1, #128	@ 0x80
 800a740:	01c9      	lsls	r1, r1, #7
 800a742:	430a      	orrs	r2, r1
 800a744:	605a      	str	r2, [r3, #4]
 800a746:	e009      	b.n	800a75c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	0018      	movs	r0, r3
 800a74c:	f000 fcc2 	bl	800b0d4 <I2C_ITMasterSeqCplt>
 800a750:	e004      	b.n	800a75c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2140      	movs	r1, #64	@ 0x40
 800a756:	0018      	movs	r0, r3
 800a758:	f000 ffa8 	bl	800b6ac <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2220      	movs	r2, #32
 800a760:	4013      	ands	r3, r2
 800a762:	d009      	beq.n	800a778 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a76a:	d005      	beq.n	800a778 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	0011      	movs	r1, r2
 800a772:	0018      	movs	r0, r3
 800a774:	f000 fd54 	bl	800b220 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2240      	movs	r2, #64	@ 0x40
 800a77c:	2100      	movs	r1, #0
 800a77e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	0018      	movs	r0, r3
 800a784:	46bd      	mov	sp, r7
 800a786:	b007      	add	sp, #28
 800a788:	bd90      	pop	{r4, r7, pc}
 800a78a:	46c0      	nop			@ (mov r8, r8)
 800a78c:	ffff0000 	.word	0xffff0000

0800a790 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2240      	movs	r2, #64	@ 0x40
 800a7aa:	5c9b      	ldrb	r3, [r3, r2]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d101      	bne.n	800a7b4 <I2C_Slave_ISR_IT+0x24>
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	e0e6      	b.n	800a982 <I2C_Slave_ISR_IT+0x1f2>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2240      	movs	r2, #64	@ 0x40
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	d009      	beq.n	800a7d8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a7ca:	d005      	beq.n	800a7d8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	0011      	movs	r1, r2
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f000 fdf2 	bl	800b3bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	2210      	movs	r2, #16
 800a7dc:	4013      	ands	r3, r2
 800a7de:	d052      	beq.n	800a886 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2210      	movs	r2, #16
 800a7e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a7e6:	d04e      	beq.n	800a886 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d12d      	bne.n	800a84e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2241      	movs	r2, #65	@ 0x41
 800a7f6:	5c9b      	ldrb	r3, [r3, r2]
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b28      	cmp	r3, #40	@ 0x28
 800a7fc:	d10b      	bne.n	800a816 <I2C_Slave_ISR_IT+0x86>
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	2380      	movs	r3, #128	@ 0x80
 800a802:	049b      	lsls	r3, r3, #18
 800a804:	429a      	cmp	r2, r3
 800a806:	d106      	bne.n	800a816 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	0011      	movs	r1, r2
 800a80e:	0018      	movs	r0, r3
 800a810:	f000 fef4 	bl	800b5fc <I2C_ITListenCplt>
 800a814:	e036      	b.n	800a884 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2241      	movs	r2, #65	@ 0x41
 800a81a:	5c9b      	ldrb	r3, [r3, r2]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b29      	cmp	r3, #41	@ 0x29
 800a820:	d110      	bne.n	800a844 <I2C_Slave_ISR_IT+0xb4>
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	4a59      	ldr	r2, [pc, #356]	@ (800a98c <I2C_Slave_ISR_IT+0x1fc>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d00c      	beq.n	800a844 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2210      	movs	r2, #16
 800a830:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	0018      	movs	r0, r3
 800a836:	f001 f864 	bl	800b902 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	0018      	movs	r0, r3
 800a83e:	f000 fc8b 	bl	800b158 <I2C_ITSlaveSeqCplt>
 800a842:	e01f      	b.n	800a884 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2210      	movs	r2, #16
 800a84a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a84c:	e091      	b.n	800a972 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2210      	movs	r2, #16
 800a854:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a85a:	2204      	movs	r2, #4
 800a85c:	431a      	orrs	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d005      	beq.n	800a874 <I2C_Slave_ISR_IT+0xe4>
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	2380      	movs	r3, #128	@ 0x80
 800a86c:	045b      	lsls	r3, r3, #17
 800a86e:	429a      	cmp	r2, r3
 800a870:	d000      	beq.n	800a874 <I2C_Slave_ISR_IT+0xe4>
 800a872:	e07e      	b.n	800a972 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	0011      	movs	r1, r2
 800a87c:	0018      	movs	r0, r3
 800a87e:	f000 ff15 	bl	800b6ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a882:	e076      	b.n	800a972 <I2C_Slave_ISR_IT+0x1e2>
 800a884:	e075      	b.n	800a972 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2204      	movs	r2, #4
 800a88a:	4013      	ands	r3, r2
 800a88c:	d02f      	beq.n	800a8ee <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2204      	movs	r2, #4
 800a892:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a894:	d02b      	beq.n	800a8ee <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d018      	beq.n	800a8d2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8aa:	b2d2      	uxtb	r2, r2
 800a8ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b2:	1c5a      	adds	r2, r3, #1
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d14c      	bne.n	800a976 <I2C_Slave_ISR_IT+0x1e6>
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	4a2b      	ldr	r2, [pc, #172]	@ (800a98c <I2C_Slave_ISR_IT+0x1fc>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d048      	beq.n	800a976 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	0018      	movs	r0, r3
 800a8e8:	f000 fc36 	bl	800b158 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a8ec:	e043      	b.n	800a976 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	2208      	movs	r2, #8
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	d00a      	beq.n	800a90c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2208      	movs	r2, #8
 800a8fa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a8fc:	d006      	beq.n	800a90c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	0011      	movs	r1, r2
 800a904:	0018      	movs	r0, r3
 800a906:	f000 fb41 	bl	800af8c <I2C_ITAddrCplt>
 800a90a:	e035      	b.n	800a978 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2202      	movs	r2, #2
 800a910:	4013      	ands	r3, r2
 800a912:	d031      	beq.n	800a978 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2202      	movs	r2, #2
 800a918:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a91a:	d02d      	beq.n	800a978 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a920:	b29b      	uxth	r3, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d018      	beq.n	800a958 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92a:	781a      	ldrb	r2, [r3, #0]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a940:	b29b      	uxth	r3, r3
 800a942:	3b01      	subs	r3, #1
 800a944:	b29a      	uxth	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a94e:	3b01      	subs	r3, #1
 800a950:	b29a      	uxth	r2, r3
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a956:	e00f      	b.n	800a978 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	2380      	movs	r3, #128	@ 0x80
 800a95c:	045b      	lsls	r3, r3, #17
 800a95e:	429a      	cmp	r2, r3
 800a960:	d002      	beq.n	800a968 <I2C_Slave_ISR_IT+0x1d8>
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d107      	bne.n	800a978 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	0018      	movs	r0, r3
 800a96c:	f000 fbf4 	bl	800b158 <I2C_ITSlaveSeqCplt>
 800a970:	e002      	b.n	800a978 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800a972:	46c0      	nop			@ (mov r8, r8)
 800a974:	e000      	b.n	800a978 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800a976:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2240      	movs	r2, #64	@ 0x40
 800a97c:	2100      	movs	r1, #0
 800a97e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	0018      	movs	r0, r3
 800a984:	46bd      	mov	sp, r7
 800a986:	b006      	add	sp, #24
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	46c0      	nop			@ (mov r8, r8)
 800a98c:	ffff0000 	.word	0xffff0000

0800a990 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800a990:	b590      	push	{r4, r7, lr}
 800a992:	b089      	sub	sp, #36	@ 0x24
 800a994:	af02      	add	r7, sp, #8
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2240      	movs	r2, #64	@ 0x40
 800a9a0:	5c9b      	ldrb	r3, [r3, r2]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <I2C_Master_ISR_DMA+0x1a>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e0e7      	b.n	800ab7a <I2C_Master_ISR_DMA+0x1ea>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2240      	movs	r2, #64	@ 0x40
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2210      	movs	r2, #16
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	d017      	beq.n	800a9ea <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2210      	movs	r2, #16
 800a9be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a9c0:	d013      	beq.n	800a9ea <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2210      	movs	r2, #16
 800a9c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ce:	2204      	movs	r2, #4
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2120      	movs	r1, #32
 800a9da:	0018      	movs	r0, r3
 800a9dc:	f001 f8c6 	bl	800bb6c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	f000 ff8d 	bl	800b902 <I2C_Flush_TXDR>
 800a9e8:	e0c2      	b.n	800ab70 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2280      	movs	r2, #128	@ 0x80
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	d100      	bne.n	800a9f4 <I2C_Master_ISR_DMA+0x64>
 800a9f2:	e07c      	b.n	800aaee <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2240      	movs	r2, #64	@ 0x40
 800a9f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a9fa:	d100      	bne.n	800a9fe <I2C_Master_ISR_DMA+0x6e>
 800a9fc:	e077      	b.n	800aaee <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2140      	movs	r1, #64	@ 0x40
 800aa0a:	438a      	bics	r2, r1
 800aa0c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d055      	beq.n	800aac4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	2312      	movs	r3, #18
 800aa22:	18fb      	adds	r3, r7, r3
 800aa24:	0592      	lsls	r2, r2, #22
 800aa26:	0d92      	lsrs	r2, r2, #22
 800aa28:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	2bff      	cmp	r3, #255	@ 0xff
 800aa32:	d906      	bls.n	800aa42 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	22ff      	movs	r2, #255	@ 0xff
 800aa38:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800aa3a:	2380      	movs	r3, #128	@ 0x80
 800aa3c:	045b      	lsls	r3, r3, #17
 800aa3e:	617b      	str	r3, [r7, #20]
 800aa40:	e010      	b.n	800aa64 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa50:	4a4c      	ldr	r2, [pc, #304]	@ (800ab84 <I2C_Master_ISR_DMA+0x1f4>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d003      	beq.n	800aa5e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	e002      	b.n	800aa64 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800aa5e:	2380      	movs	r3, #128	@ 0x80
 800aa60:	049b      	lsls	r3, r3, #18
 800aa62:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	697c      	ldr	r4, [r7, #20]
 800aa6c:	2312      	movs	r3, #18
 800aa6e:	18fb      	adds	r3, r7, r3
 800aa70:	8819      	ldrh	r1, [r3, #0]
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	2300      	movs	r3, #0
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	0023      	movs	r3, r4
 800aa7a:	f001 f83d 	bl	800baf8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2241      	movs	r2, #65	@ 0x41
 800aa94:	5c9b      	ldrb	r3, [r3, r2]
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b22      	cmp	r3, #34	@ 0x22
 800aa9a:	d109      	bne.n	800aab0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2180      	movs	r1, #128	@ 0x80
 800aaa8:	0209      	lsls	r1, r1, #8
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800aaae:	e05f      	b.n	800ab70 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2180      	movs	r1, #128	@ 0x80
 800aabc:	01c9      	lsls	r1, r1, #7
 800aabe:	430a      	orrs	r2, r1
 800aac0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800aac2:	e055      	b.n	800ab70 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	2380      	movs	r3, #128	@ 0x80
 800aacc:	049b      	lsls	r3, r3, #18
 800aace:	401a      	ands	r2, r3
 800aad0:	2380      	movs	r3, #128	@ 0x80
 800aad2:	049b      	lsls	r3, r3, #18
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d004      	beq.n	800aae2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	0018      	movs	r0, r3
 800aadc:	f000 fafa 	bl	800b0d4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800aae0:	e046      	b.n	800ab70 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2140      	movs	r1, #64	@ 0x40
 800aae6:	0018      	movs	r0, r3
 800aae8:	f000 fde0 	bl	800b6ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800aaec:	e040      	b.n	800ab70 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2240      	movs	r2, #64	@ 0x40
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	d02c      	beq.n	800ab50 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2240      	movs	r2, #64	@ 0x40
 800aafa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800aafc:	d028      	beq.n	800ab50 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d11d      	bne.n	800ab44 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	2380      	movs	r3, #128	@ 0x80
 800ab10:	049b      	lsls	r3, r3, #18
 800ab12:	401a      	ands	r2, r3
 800ab14:	2380      	movs	r3, #128	@ 0x80
 800ab16:	049b      	lsls	r3, r3, #18
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d028      	beq.n	800ab6e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab20:	4a18      	ldr	r2, [pc, #96]	@ (800ab84 <I2C_Master_ISR_DMA+0x1f4>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d109      	bne.n	800ab3a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2180      	movs	r1, #128	@ 0x80
 800ab32:	01c9      	lsls	r1, r1, #7
 800ab34:	430a      	orrs	r2, r1
 800ab36:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800ab38:	e019      	b.n	800ab6e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	f000 fac9 	bl	800b0d4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800ab42:	e014      	b.n	800ab6e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2140      	movs	r1, #64	@ 0x40
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f000 fdaf 	bl	800b6ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ab4e:	e00e      	b.n	800ab6e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	2220      	movs	r2, #32
 800ab54:	4013      	ands	r3, r2
 800ab56:	d00b      	beq.n	800ab70 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ab5e:	d007      	beq.n	800ab70 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	0011      	movs	r1, r2
 800ab66:	0018      	movs	r0, r3
 800ab68:	f000 fb5a 	bl	800b220 <I2C_ITMasterCplt>
 800ab6c:	e000      	b.n	800ab70 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800ab6e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2240      	movs	r2, #64	@ 0x40
 800ab74:	2100      	movs	r1, #0
 800ab76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	0018      	movs	r0, r3
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	b007      	add	sp, #28
 800ab80:	bd90      	pop	{r4, r7, pc}
 800ab82:	46c0      	nop			@ (mov r8, r8)
 800ab84:	ffff0000 	.word	0xffff0000

0800ab88 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800ab88:	b590      	push	{r4, r7, lr}
 800ab8a:	b089      	sub	sp, #36	@ 0x24
 800ab8c:	af02      	add	r7, sp, #8
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800ab94:	4b88      	ldr	r3, [pc, #544]	@ (800adb8 <I2C_Mem_ISR_DMA+0x230>)
 800ab96:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2240      	movs	r2, #64	@ 0x40
 800ab9c:	5c9b      	ldrb	r3, [r3, r2]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d101      	bne.n	800aba6 <I2C_Mem_ISR_DMA+0x1e>
 800aba2:	2302      	movs	r3, #2
 800aba4:	e104      	b.n	800adb0 <I2C_Mem_ISR_DMA+0x228>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2240      	movs	r2, #64	@ 0x40
 800abaa:	2101      	movs	r1, #1
 800abac:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2210      	movs	r2, #16
 800abb2:	4013      	ands	r3, r2
 800abb4:	d017      	beq.n	800abe6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2210      	movs	r2, #16
 800abba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800abbc:	d013      	beq.n	800abe6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2210      	movs	r2, #16
 800abc4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abca:	2204      	movs	r2, #4
 800abcc:	431a      	orrs	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2120      	movs	r1, #32
 800abd6:	0018      	movs	r0, r3
 800abd8:	f000 ffc8 	bl	800bb6c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	0018      	movs	r0, r3
 800abe0:	f000 fe8f 	bl	800b902 <I2C_Flush_TXDR>
 800abe4:	e0df      	b.n	800ada6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2202      	movs	r2, #2
 800abea:	4013      	ands	r3, r2
 800abec:	d00d      	beq.n	800ac0a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800abf4:	d009      	beq.n	800ac0a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800abfe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2201      	movs	r2, #1
 800ac04:	4252      	negs	r2, r2
 800ac06:	651a      	str	r2, [r3, #80]	@ 0x50
 800ac08:	e0cd      	b.n	800ada6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2280      	movs	r2, #128	@ 0x80
 800ac0e:	4013      	ands	r3, r2
 800ac10:	d05e      	beq.n	800acd0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2240      	movs	r2, #64	@ 0x40
 800ac16:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ac18:	d05a      	beq.n	800acd0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2110      	movs	r1, #16
 800ac1e:	0018      	movs	r0, r3
 800ac20:	f000 ffa4 	bl	800bb6c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d04a      	beq.n	800acc4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	2bff      	cmp	r3, #255	@ 0xff
 800ac36:	d910      	bls.n	800ac5a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	22ff      	movs	r2, #255	@ 0xff
 800ac3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac42:	b299      	uxth	r1, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	2380      	movs	r3, #128	@ 0x80
 800ac4c:	045b      	lsls	r3, r3, #17
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	2400      	movs	r4, #0
 800ac52:	9400      	str	r4, [sp, #0]
 800ac54:	f000 ff50 	bl	800baf8 <I2C_TransferConfig>
 800ac58:	e011      	b.n	800ac7e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac68:	b299      	uxth	r1, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	2380      	movs	r3, #128	@ 0x80
 800ac72:	049b      	lsls	r3, r3, #18
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	2400      	movs	r4, #0
 800ac78:	9400      	str	r4, [sp, #0]
 800ac7a:	f000 ff3d 	bl	800baf8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2241      	movs	r2, #65	@ 0x41
 800ac94:	5c9b      	ldrb	r3, [r3, r2]
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b22      	cmp	r3, #34	@ 0x22
 800ac9a:	d109      	bne.n	800acb0 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2180      	movs	r1, #128	@ 0x80
 800aca8:	0209      	lsls	r1, r1, #8
 800acaa:	430a      	orrs	r2, r1
 800acac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800acae:	e07a      	b.n	800ada6 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2180      	movs	r1, #128	@ 0x80
 800acbc:	01c9      	lsls	r1, r1, #7
 800acbe:	430a      	orrs	r2, r1
 800acc0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800acc2:	e070      	b.n	800ada6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2140      	movs	r1, #64	@ 0x40
 800acc8:	0018      	movs	r0, r3
 800acca:	f000 fcef 	bl	800b6ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800acce:	e06a      	b.n	800ada6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2240      	movs	r2, #64	@ 0x40
 800acd4:	4013      	ands	r3, r2
 800acd6:	d058      	beq.n	800ad8a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2240      	movs	r2, #64	@ 0x40
 800acdc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800acde:	d054      	beq.n	800ad8a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2241      	movs	r2, #65	@ 0x41
 800ace4:	5c9b      	ldrb	r3, [r3, r2]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b22      	cmp	r3, #34	@ 0x22
 800acea:	d101      	bne.n	800acf0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800acec:	4b33      	ldr	r3, [pc, #204]	@ (800adbc <I2C_Mem_ISR_DMA+0x234>)
 800acee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	2bff      	cmp	r3, #255	@ 0xff
 800acf8:	d911      	bls.n	800ad1e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	22ff      	movs	r2, #255	@ 0xff
 800acfe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad04:	b299      	uxth	r1, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	2380      	movs	r3, #128	@ 0x80
 800ad0e:	045c      	lsls	r4, r3, #17
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	0023      	movs	r3, r4
 800ad18:	f000 feee 	bl	800baf8 <I2C_TransferConfig>
 800ad1c:	e012      	b.n	800ad44 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad2c:	b299      	uxth	r1, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	2380      	movs	r3, #128	@ 0x80
 800ad36:	049c      	lsls	r4, r3, #18
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	0023      	movs	r3, r4
 800ad40:	f000 feda 	bl	800baf8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2241      	movs	r2, #65	@ 0x41
 800ad5a:	5c9b      	ldrb	r3, [r3, r2]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b22      	cmp	r3, #34	@ 0x22
 800ad60:	d109      	bne.n	800ad76 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2180      	movs	r1, #128	@ 0x80
 800ad6e:	0209      	lsls	r1, r1, #8
 800ad70:	430a      	orrs	r2, r1
 800ad72:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ad74:	e017      	b.n	800ada6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2180      	movs	r1, #128	@ 0x80
 800ad82:	01c9      	lsls	r1, r1, #7
 800ad84:	430a      	orrs	r2, r1
 800ad86:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ad88:	e00d      	b.n	800ada6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	2220      	movs	r2, #32
 800ad8e:	4013      	ands	r3, r2
 800ad90:	d009      	beq.n	800ada6 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2220      	movs	r2, #32
 800ad96:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ad98:	d005      	beq.n	800ada6 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	0011      	movs	r1, r2
 800ada0:	0018      	movs	r0, r3
 800ada2:	f000 fa3d 	bl	800b220 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2240      	movs	r2, #64	@ 0x40
 800adaa:	2100      	movs	r1, #0
 800adac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	0018      	movs	r0, r3
 800adb2:	46bd      	mov	sp, r7
 800adb4:	b007      	add	sp, #28
 800adb6:	bd90      	pop	{r4, r7, pc}
 800adb8:	80002000 	.word	0x80002000
 800adbc:	80002400 	.word	0x80002400

0800adc0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2240      	movs	r2, #64	@ 0x40
 800adda:	5c9b      	ldrb	r3, [r3, r2]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d101      	bne.n	800ade4 <I2C_Slave_ISR_DMA+0x24>
 800ade0:	2302      	movs	r3, #2
 800ade2:	e0cd      	b.n	800af80 <I2C_Slave_ISR_DMA+0x1c0>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2240      	movs	r2, #64	@ 0x40
 800ade8:	2101      	movs	r1, #1
 800adea:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2220      	movs	r2, #32
 800adf0:	4013      	ands	r3, r2
 800adf2:	d009      	beq.n	800ae08 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2220      	movs	r2, #32
 800adf8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800adfa:	d005      	beq.n	800ae08 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	0011      	movs	r1, r2
 800ae02:	0018      	movs	r0, r3
 800ae04:	f000 fada 	bl	800b3bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2210      	movs	r2, #16
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	d100      	bne.n	800ae12 <I2C_Slave_ISR_DMA+0x52>
 800ae10:	e0a3      	b.n	800af5a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2210      	movs	r2, #16
 800ae16:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ae18:	d100      	bne.n	800ae1c <I2C_Slave_ISR_DMA+0x5c>
 800ae1a:	e09e      	b.n	800af5a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	2380      	movs	r3, #128	@ 0x80
 800ae20:	01db      	lsls	r3, r3, #7
 800ae22:	4013      	ands	r3, r2
 800ae24:	d105      	bne.n	800ae32 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	2380      	movs	r3, #128	@ 0x80
 800ae2a:	021b      	lsls	r3, r3, #8
 800ae2c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ae2e:	d100      	bne.n	800ae32 <I2C_Slave_ISR_DMA+0x72>
 800ae30:	e08c      	b.n	800af4c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00c      	beq.n	800ae54 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	2380      	movs	r3, #128	@ 0x80
 800ae3e:	021b      	lsls	r3, r3, #8
 800ae40:	4013      	ands	r3, r2
 800ae42:	d007      	beq.n	800ae54 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d101      	bne.n	800ae54 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800ae50:	2301      	movs	r3, #1
 800ae52:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00c      	beq.n	800ae76 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	2380      	movs	r3, #128	@ 0x80
 800ae60:	01db      	lsls	r3, r3, #7
 800ae62:	4013      	ands	r3, r2
 800ae64:	d007      	beq.n	800ae76 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800ae72:	2301      	movs	r3, #1
 800ae74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d12d      	bne.n	800aed8 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2241      	movs	r2, #65	@ 0x41
 800ae80:	5c9b      	ldrb	r3, [r3, r2]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b28      	cmp	r3, #40	@ 0x28
 800ae86:	d10b      	bne.n	800aea0 <I2C_Slave_ISR_DMA+0xe0>
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	2380      	movs	r3, #128	@ 0x80
 800ae8c:	049b      	lsls	r3, r3, #18
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d106      	bne.n	800aea0 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	0011      	movs	r1, r2
 800ae98:	0018      	movs	r0, r3
 800ae9a:	f000 fbaf 	bl	800b5fc <I2C_ITListenCplt>
 800ae9e:	e054      	b.n	800af4a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2241      	movs	r2, #65	@ 0x41
 800aea4:	5c9b      	ldrb	r3, [r3, r2]
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	2b29      	cmp	r3, #41	@ 0x29
 800aeaa:	d110      	bne.n	800aece <I2C_Slave_ISR_DMA+0x10e>
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	4a36      	ldr	r2, [pc, #216]	@ (800af88 <I2C_Slave_ISR_DMA+0x1c8>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d00c      	beq.n	800aece <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2210      	movs	r2, #16
 800aeba:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	0018      	movs	r0, r3
 800aec0:	f000 fd1f 	bl	800b902 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	0018      	movs	r0, r3
 800aec8:	f000 f946 	bl	800b158 <I2C_ITSlaveSeqCplt>
 800aecc:	e03d      	b.n	800af4a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2210      	movs	r2, #16
 800aed4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800aed6:	e03e      	b.n	800af56 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2210      	movs	r2, #16
 800aede:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aee4:	2204      	movs	r2, #4
 800aee6:	431a      	orrs	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800aeec:	2317      	movs	r3, #23
 800aeee:	18fb      	adds	r3, r7, r3
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	2141      	movs	r1, #65	@ 0x41
 800aef4:	5c52      	ldrb	r2, [r2, r1]
 800aef6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d004      	beq.n	800af08 <I2C_Slave_ISR_DMA+0x148>
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	2380      	movs	r3, #128	@ 0x80
 800af02:	045b      	lsls	r3, r3, #17
 800af04:	429a      	cmp	r2, r3
 800af06:	d126      	bne.n	800af56 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800af08:	2217      	movs	r2, #23
 800af0a:	18bb      	adds	r3, r7, r2
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2b21      	cmp	r3, #33	@ 0x21
 800af10:	d003      	beq.n	800af1a <I2C_Slave_ISR_DMA+0x15a>
 800af12:	18bb      	adds	r3, r7, r2
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	2b29      	cmp	r3, #41	@ 0x29
 800af18:	d103      	bne.n	800af22 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2221      	movs	r2, #33	@ 0x21
 800af1e:	631a      	str	r2, [r3, #48]	@ 0x30
 800af20:	e00b      	b.n	800af3a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800af22:	2217      	movs	r2, #23
 800af24:	18bb      	adds	r3, r7, r2
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b22      	cmp	r3, #34	@ 0x22
 800af2a:	d003      	beq.n	800af34 <I2C_Slave_ISR_DMA+0x174>
 800af2c:	18bb      	adds	r3, r7, r2
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	2b2a      	cmp	r3, #42	@ 0x2a
 800af32:	d102      	bne.n	800af3a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2222      	movs	r2, #34	@ 0x22
 800af38:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	0011      	movs	r1, r2
 800af42:	0018      	movs	r0, r3
 800af44:	f000 fbb2 	bl	800b6ac <I2C_ITError>
      if (treatdmanack == 1U)
 800af48:	e005      	b.n	800af56 <I2C_Slave_ISR_DMA+0x196>
 800af4a:	e004      	b.n	800af56 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2210      	movs	r2, #16
 800af52:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800af54:	e00f      	b.n	800af76 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800af56:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800af58:	e00d      	b.n	800af76 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2208      	movs	r2, #8
 800af5e:	4013      	ands	r3, r2
 800af60:	d009      	beq.n	800af76 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2208      	movs	r2, #8
 800af66:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800af68:	d005      	beq.n	800af76 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	0011      	movs	r1, r2
 800af70:	0018      	movs	r0, r3
 800af72:	f000 f80b 	bl	800af8c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2240      	movs	r2, #64	@ 0x40
 800af7a:	2100      	movs	r1, #0
 800af7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	0018      	movs	r0, r3
 800af82:	46bd      	mov	sp, r7
 800af84:	b008      	add	sp, #32
 800af86:	bd80      	pop	{r7, pc}
 800af88:	ffff0000 	.word	0xffff0000

0800af8c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800af8c:	b5b0      	push	{r4, r5, r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2241      	movs	r2, #65	@ 0x41
 800af9a:	5c9b      	ldrb	r3, [r3, r2]
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	001a      	movs	r2, r3
 800afa0:	2328      	movs	r3, #40	@ 0x28
 800afa2:	4013      	ands	r3, r2
 800afa4:	2b28      	cmp	r3, #40	@ 0x28
 800afa6:	d000      	beq.n	800afaa <I2C_ITAddrCplt+0x1e>
 800afa8:	e088      	b.n	800b0bc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	0c1b      	lsrs	r3, r3, #16
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	250f      	movs	r5, #15
 800afb6:	197b      	adds	r3, r7, r5
 800afb8:	2101      	movs	r1, #1
 800afba:	400a      	ands	r2, r1
 800afbc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	0c1b      	lsrs	r3, r3, #16
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	200c      	movs	r0, #12
 800afca:	183b      	adds	r3, r7, r0
 800afcc:	21fe      	movs	r1, #254	@ 0xfe
 800afce:	400a      	ands	r2, r1
 800afd0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	b29a      	uxth	r2, r3
 800afda:	240a      	movs	r4, #10
 800afdc:	193b      	adds	r3, r7, r4
 800afde:	0592      	lsls	r2, r2, #22
 800afe0:	0d92      	lsrs	r2, r2, #22
 800afe2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	b29a      	uxth	r2, r3
 800afec:	2308      	movs	r3, #8
 800afee:	18fb      	adds	r3, r7, r3
 800aff0:	21fe      	movs	r1, #254	@ 0xfe
 800aff2:	400a      	ands	r2, r1
 800aff4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	2b02      	cmp	r3, #2
 800affc:	d148      	bne.n	800b090 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800affe:	0021      	movs	r1, r4
 800b000:	187b      	adds	r3, r7, r1
 800b002:	881b      	ldrh	r3, [r3, #0]
 800b004:	09db      	lsrs	r3, r3, #7
 800b006:	b29a      	uxth	r2, r3
 800b008:	183b      	adds	r3, r7, r0
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	4053      	eors	r3, r2
 800b00e:	b29b      	uxth	r3, r3
 800b010:	001a      	movs	r2, r3
 800b012:	2306      	movs	r3, #6
 800b014:	4013      	ands	r3, r2
 800b016:	d120      	bne.n	800b05a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800b018:	183b      	adds	r3, r7, r0
 800b01a:	187a      	adds	r2, r7, r1
 800b01c:	8812      	ldrh	r2, [r2, #0]
 800b01e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d14c      	bne.n	800b0cc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2208      	movs	r2, #8
 800b03e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2240      	movs	r2, #64	@ 0x40
 800b044:	2100      	movs	r1, #0
 800b046:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b048:	183b      	adds	r3, r7, r0
 800b04a:	881a      	ldrh	r2, [r3, #0]
 800b04c:	197b      	adds	r3, r7, r5
 800b04e:	7819      	ldrb	r1, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	0018      	movs	r0, r3
 800b054:	f7ff fa39 	bl	800a4ca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b058:	e038      	b.n	800b0cc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800b05a:	240c      	movs	r4, #12
 800b05c:	193b      	adds	r3, r7, r4
 800b05e:	2208      	movs	r2, #8
 800b060:	18ba      	adds	r2, r7, r2
 800b062:	8812      	ldrh	r2, [r2, #0]
 800b064:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b066:	2380      	movs	r3, #128	@ 0x80
 800b068:	021a      	lsls	r2, r3, #8
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	0011      	movs	r1, r2
 800b06e:	0018      	movs	r0, r3
 800b070:	f000 fe0a 	bl	800bc88 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2240      	movs	r2, #64	@ 0x40
 800b078:	2100      	movs	r1, #0
 800b07a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b07c:	193b      	adds	r3, r7, r4
 800b07e:	881a      	ldrh	r2, [r3, #0]
 800b080:	230f      	movs	r3, #15
 800b082:	18fb      	adds	r3, r7, r3
 800b084:	7819      	ldrb	r1, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	0018      	movs	r0, r3
 800b08a:	f7ff fa1e 	bl	800a4ca <HAL_I2C_AddrCallback>
}
 800b08e:	e01d      	b.n	800b0cc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b090:	2380      	movs	r3, #128	@ 0x80
 800b092:	021a      	lsls	r2, r3, #8
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	0011      	movs	r1, r2
 800b098:	0018      	movs	r0, r3
 800b09a:	f000 fdf5 	bl	800bc88 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2240      	movs	r2, #64	@ 0x40
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b0a6:	230c      	movs	r3, #12
 800b0a8:	18fb      	adds	r3, r7, r3
 800b0aa:	881a      	ldrh	r2, [r3, #0]
 800b0ac:	230f      	movs	r3, #15
 800b0ae:	18fb      	adds	r3, r7, r3
 800b0b0:	7819      	ldrb	r1, [r3, #0]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	0018      	movs	r0, r3
 800b0b6:	f7ff fa08 	bl	800a4ca <HAL_I2C_AddrCallback>
}
 800b0ba:	e007      	b.n	800b0cc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2208      	movs	r2, #8
 800b0c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2240      	movs	r2, #64	@ 0x40
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	5499      	strb	r1, [r3, r2]
}
 800b0cc:	46c0      	nop			@ (mov r8, r8)
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	b004      	add	sp, #16
 800b0d2:	bdb0      	pop	{r4, r5, r7, pc}

0800b0d4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2242      	movs	r2, #66	@ 0x42
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2241      	movs	r2, #65	@ 0x41
 800b0e8:	5c9b      	ldrb	r3, [r3, r2]
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b21      	cmp	r3, #33	@ 0x21
 800b0ee:	d117      	bne.n	800b120 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2241      	movs	r2, #65	@ 0x41
 800b0f4:	2120      	movs	r1, #32
 800b0f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2211      	movs	r2, #17
 800b0fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2101      	movs	r1, #1
 800b108:	0018      	movs	r0, r3
 800b10a:	f000 fdbd 	bl	800bc88 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2240      	movs	r2, #64	@ 0x40
 800b112:	2100      	movs	r1, #0
 800b114:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	0018      	movs	r0, r3
 800b11a:	f7ff f9b6 	bl	800a48a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b11e:	e016      	b.n	800b14e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2241      	movs	r2, #65	@ 0x41
 800b124:	2120      	movs	r1, #32
 800b126:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2212      	movs	r2, #18
 800b12c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2102      	movs	r1, #2
 800b138:	0018      	movs	r0, r3
 800b13a:	f000 fda5 	bl	800bc88 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2240      	movs	r2, #64	@ 0x40
 800b142:	2100      	movs	r1, #0
 800b144:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	0018      	movs	r0, r3
 800b14a:	f7ff f9a6 	bl	800a49a <HAL_I2C_MasterRxCpltCallback>
}
 800b14e:	46c0      	nop			@ (mov r8, r8)
 800b150:	46bd      	mov	sp, r7
 800b152:	b002      	add	sp, #8
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2242      	movs	r2, #66	@ 0x42
 800b16c:	2100      	movs	r1, #0
 800b16e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	2380      	movs	r3, #128	@ 0x80
 800b174:	01db      	lsls	r3, r3, #7
 800b176:	4013      	ands	r3, r2
 800b178:	d008      	beq.n	800b18c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4924      	ldr	r1, [pc, #144]	@ (800b218 <I2C_ITSlaveSeqCplt+0xc0>)
 800b186:	400a      	ands	r2, r1
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	e00c      	b.n	800b1a6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	2380      	movs	r3, #128	@ 0x80
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	4013      	ands	r3, r2
 800b194:	d007      	beq.n	800b1a6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	491e      	ldr	r1, [pc, #120]	@ (800b21c <I2C_ITSlaveSeqCplt+0xc4>)
 800b1a2:	400a      	ands	r2, r1
 800b1a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2241      	movs	r2, #65	@ 0x41
 800b1aa:	5c9b      	ldrb	r3, [r3, r2]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b29      	cmp	r3, #41	@ 0x29
 800b1b0:	d114      	bne.n	800b1dc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2241      	movs	r2, #65	@ 0x41
 800b1b6:	2128      	movs	r1, #40	@ 0x28
 800b1b8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2221      	movs	r2, #33	@ 0x21
 800b1be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	f000 fd5f 	bl	800bc88 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2240      	movs	r2, #64	@ 0x40
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	0018      	movs	r0, r3
 800b1d6:	f7ff f968 	bl	800a4aa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b1da:	e019      	b.n	800b210 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2241      	movs	r2, #65	@ 0x41
 800b1e0:	5c9b      	ldrb	r3, [r3, r2]
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1e6:	d113      	bne.n	800b210 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2241      	movs	r2, #65	@ 0x41
 800b1ec:	2128      	movs	r1, #40	@ 0x28
 800b1ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2222      	movs	r2, #34	@ 0x22
 800b1f4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2102      	movs	r1, #2
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	f000 fd44 	bl	800bc88 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2240      	movs	r2, #64	@ 0x40
 800b204:	2100      	movs	r1, #0
 800b206:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	0018      	movs	r0, r3
 800b20c:	f7ff f955 	bl	800a4ba <HAL_I2C_SlaveRxCpltCallback>
}
 800b210:	46c0      	nop			@ (mov r8, r8)
 800b212:	46bd      	mov	sp, r7
 800b214:	b004      	add	sp, #16
 800b216:	bd80      	pop	{r7, pc}
 800b218:	ffffbfff 	.word	0xffffbfff
 800b21c:	ffff7fff 	.word	0xffff7fff

0800b220 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2220      	movs	r2, #32
 800b234:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2241      	movs	r2, #65	@ 0x41
 800b23a:	5c9b      	ldrb	r3, [r3, r2]
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b21      	cmp	r3, #33	@ 0x21
 800b240:	d108      	bne.n	800b254 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2101      	movs	r1, #1
 800b246:	0018      	movs	r0, r3
 800b248:	f000 fd1e 	bl	800bc88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2211      	movs	r2, #17
 800b250:	631a      	str	r2, [r3, #48]	@ 0x30
 800b252:	e00d      	b.n	800b270 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2241      	movs	r2, #65	@ 0x41
 800b258:	5c9b      	ldrb	r3, [r3, r2]
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	2b22      	cmp	r3, #34	@ 0x22
 800b25e:	d107      	bne.n	800b270 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2102      	movs	r1, #2
 800b264:	0018      	movs	r0, r3
 800b266:	f000 fd0f 	bl	800bc88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2212      	movs	r2, #18
 800b26e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	494e      	ldr	r1, [pc, #312]	@ (800b3b4 <I2C_ITMasterCplt+0x194>)
 800b27c:	400a      	ands	r2, r1
 800b27e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a4b      	ldr	r2, [pc, #300]	@ (800b3b8 <I2C_ITMasterCplt+0x198>)
 800b28a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	2210      	movs	r2, #16
 800b290:	4013      	ands	r3, r2
 800b292:	d009      	beq.n	800b2a8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2210      	movs	r2, #16
 800b29a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2a0:	2204      	movs	r2, #4
 800b2a2:	431a      	orrs	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2241      	movs	r2, #65	@ 0x41
 800b2ac:	5c9b      	ldrb	r3, [r3, r2]
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b60      	cmp	r3, #96	@ 0x60
 800b2b2:	d109      	bne.n	800b2c8 <I2C_ITMasterCplt+0xa8>
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2204      	movs	r2, #4
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	d005      	beq.n	800b2c8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	f000 fb19 	bl	800b902 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2d4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2241      	movs	r2, #65	@ 0x41
 800b2da:	5c9b      	ldrb	r3, [r3, r2]
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b60      	cmp	r3, #96	@ 0x60
 800b2e0:	d002      	beq.n	800b2e8 <I2C_ITMasterCplt+0xc8>
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d007      	beq.n	800b2f8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	0011      	movs	r1, r2
 800b2f0:	0018      	movs	r0, r3
 800b2f2:	f000 f9db 	bl	800b6ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b2f6:	e058      	b.n	800b3aa <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2241      	movs	r2, #65	@ 0x41
 800b2fc:	5c9b      	ldrb	r3, [r3, r2]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b21      	cmp	r3, #33	@ 0x21
 800b302:	d126      	bne.n	800b352 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2241      	movs	r2, #65	@ 0x41
 800b308:	2120      	movs	r1, #32
 800b30a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2242      	movs	r2, #66	@ 0x42
 800b316:	5c9b      	ldrb	r3, [r3, r2]
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b40      	cmp	r3, #64	@ 0x40
 800b31c:	d10c      	bne.n	800b338 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2242      	movs	r2, #66	@ 0x42
 800b322:	2100      	movs	r1, #0
 800b324:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2240      	movs	r2, #64	@ 0x40
 800b32a:	2100      	movs	r1, #0
 800b32c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	0018      	movs	r0, r3
 800b332:	f7ff f8e2 	bl	800a4fa <HAL_I2C_MemTxCpltCallback>
}
 800b336:	e038      	b.n	800b3aa <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2242      	movs	r2, #66	@ 0x42
 800b33c:	2100      	movs	r1, #0
 800b33e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2240      	movs	r2, #64	@ 0x40
 800b344:	2100      	movs	r1, #0
 800b346:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	0018      	movs	r0, r3
 800b34c:	f7ff f89d 	bl	800a48a <HAL_I2C_MasterTxCpltCallback>
}
 800b350:	e02b      	b.n	800b3aa <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2241      	movs	r2, #65	@ 0x41
 800b356:	5c9b      	ldrb	r3, [r3, r2]
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	2b22      	cmp	r3, #34	@ 0x22
 800b35c:	d125      	bne.n	800b3aa <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2241      	movs	r2, #65	@ 0x41
 800b362:	2120      	movs	r1, #32
 800b364:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2242      	movs	r2, #66	@ 0x42
 800b370:	5c9b      	ldrb	r3, [r3, r2]
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b40      	cmp	r3, #64	@ 0x40
 800b376:	d10c      	bne.n	800b392 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2242      	movs	r2, #66	@ 0x42
 800b37c:	2100      	movs	r1, #0
 800b37e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2240      	movs	r2, #64	@ 0x40
 800b384:	2100      	movs	r1, #0
 800b386:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	0018      	movs	r0, r3
 800b38c:	f7ff f8bd 	bl	800a50a <HAL_I2C_MemRxCpltCallback>
}
 800b390:	e00b      	b.n	800b3aa <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2242      	movs	r2, #66	@ 0x42
 800b396:	2100      	movs	r1, #0
 800b398:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2240      	movs	r2, #64	@ 0x40
 800b39e:	2100      	movs	r1, #0
 800b3a0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	0018      	movs	r0, r3
 800b3a6:	f7ff f878 	bl	800a49a <HAL_I2C_MasterRxCpltCallback>
}
 800b3aa:	46c0      	nop			@ (mov r8, r8)
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	b006      	add	sp, #24
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	46c0      	nop			@ (mov r8, r8)
 800b3b4:	fe00e800 	.word	0xfe00e800
 800b3b8:	ffff0000 	.word	0xffff0000

0800b3bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b3d2:	200f      	movs	r0, #15
 800b3d4:	183b      	adds	r3, r7, r0
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	2141      	movs	r1, #65	@ 0x41
 800b3da:	5c52      	ldrb	r2, [r2, r1]
 800b3dc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b3e6:	183b      	adds	r3, r7, r0
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	2b21      	cmp	r3, #33	@ 0x21
 800b3ec:	d003      	beq.n	800b3f6 <I2C_ITSlaveCplt+0x3a>
 800b3ee:	183b      	adds	r3, r7, r0
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	2b29      	cmp	r3, #41	@ 0x29
 800b3f4:	d109      	bne.n	800b40a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b3f6:	4a7b      	ldr	r2, [pc, #492]	@ (800b5e4 <I2C_ITSlaveCplt+0x228>)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	0011      	movs	r1, r2
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	f000 fc43 	bl	800bc88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2221      	movs	r2, #33	@ 0x21
 800b406:	631a      	str	r2, [r3, #48]	@ 0x30
 800b408:	e011      	b.n	800b42e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b40a:	220f      	movs	r2, #15
 800b40c:	18bb      	adds	r3, r7, r2
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b22      	cmp	r3, #34	@ 0x22
 800b412:	d003      	beq.n	800b41c <I2C_ITSlaveCplt+0x60>
 800b414:	18bb      	adds	r3, r7, r2
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b2a      	cmp	r3, #42	@ 0x2a
 800b41a:	d108      	bne.n	800b42e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b41c:	4a72      	ldr	r2, [pc, #456]	@ (800b5e8 <I2C_ITSlaveCplt+0x22c>)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	0011      	movs	r1, r2
 800b422:	0018      	movs	r0, r3
 800b424:	f000 fc30 	bl	800bc88 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2222      	movs	r2, #34	@ 0x22
 800b42c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2180      	movs	r1, #128	@ 0x80
 800b43a:	0209      	lsls	r1, r1, #8
 800b43c:	430a      	orrs	r2, r1
 800b43e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4968      	ldr	r1, [pc, #416]	@ (800b5ec <I2C_ITSlaveCplt+0x230>)
 800b44c:	400a      	ands	r2, r1
 800b44e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	0018      	movs	r0, r3
 800b454:	f000 fa55 	bl	800b902 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	2380      	movs	r3, #128	@ 0x80
 800b45c:	01db      	lsls	r3, r3, #7
 800b45e:	4013      	ands	r3, r2
 800b460:	d013      	beq.n	800b48a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4960      	ldr	r1, [pc, #384]	@ (800b5f0 <I2C_ITSlaveCplt+0x234>)
 800b46e:	400a      	ands	r2, r1
 800b470:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b476:	2b00      	cmp	r3, #0
 800b478:	d01f      	beq.n	800b4ba <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	b29a      	uxth	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b488:	e017      	b.n	800b4ba <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	2380      	movs	r3, #128	@ 0x80
 800b48e:	021b      	lsls	r3, r3, #8
 800b490:	4013      	ands	r3, r2
 800b492:	d012      	beq.n	800b4ba <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4955      	ldr	r1, [pc, #340]	@ (800b5f4 <I2C_ITSlaveCplt+0x238>)
 800b4a0:	400a      	ands	r2, r1
 800b4a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d006      	beq.n	800b4ba <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	2204      	movs	r2, #4
 800b4be:	4013      	ands	r3, r2
 800b4c0:	d020      	beq.n	800b504 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	4393      	bics	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d4:	b2d2      	uxtb	r2, r2
 800b4d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4dc:	1c5a      	adds	r2, r3, #1
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00c      	beq.n	800b504 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b508:	b29b      	uxth	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d005      	beq.n	800b51a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b512:	2204      	movs	r2, #4
 800b514:	431a      	orrs	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2242      	movs	r2, #66	@ 0x42
 800b51e:	2100      	movs	r1, #0
 800b520:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d013      	beq.n	800b558 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	0011      	movs	r1, r2
 800b538:	0018      	movs	r0, r3
 800b53a:	f000 f8b7 	bl	800b6ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2241      	movs	r2, #65	@ 0x41
 800b542:	5c9b      	ldrb	r3, [r3, r2]
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b28      	cmp	r3, #40	@ 0x28
 800b548:	d147      	bne.n	800b5da <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	0011      	movs	r1, r2
 800b550:	0018      	movs	r0, r3
 800b552:	f000 f853 	bl	800b5fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b556:	e040      	b.n	800b5da <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b55c:	4a26      	ldr	r2, [pc, #152]	@ (800b5f8 <I2C_ITSlaveCplt+0x23c>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d016      	beq.n	800b590 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	0018      	movs	r0, r3
 800b566:	f7ff fdf7 	bl	800b158 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a22      	ldr	r2, [pc, #136]	@ (800b5f8 <I2C_ITSlaveCplt+0x23c>)
 800b56e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2241      	movs	r2, #65	@ 0x41
 800b574:	2120      	movs	r1, #32
 800b576:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2240      	movs	r2, #64	@ 0x40
 800b582:	2100      	movs	r1, #0
 800b584:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	0018      	movs	r0, r3
 800b58a:	f7fe ffae 	bl	800a4ea <HAL_I2C_ListenCpltCallback>
}
 800b58e:	e024      	b.n	800b5da <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2241      	movs	r2, #65	@ 0x41
 800b594:	5c9b      	ldrb	r3, [r3, r2]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b22      	cmp	r3, #34	@ 0x22
 800b59a:	d10f      	bne.n	800b5bc <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2241      	movs	r2, #65	@ 0x41
 800b5a0:	2120      	movs	r1, #32
 800b5a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2240      	movs	r2, #64	@ 0x40
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	f7fe ff80 	bl	800a4ba <HAL_I2C_SlaveRxCpltCallback>
}
 800b5ba:	e00e      	b.n	800b5da <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2241      	movs	r2, #65	@ 0x41
 800b5c0:	2120      	movs	r1, #32
 800b5c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2240      	movs	r2, #64	@ 0x40
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	0018      	movs	r0, r3
 800b5d6:	f7fe ff68 	bl	800a4aa <HAL_I2C_SlaveTxCpltCallback>
}
 800b5da:	46c0      	nop			@ (mov r8, r8)
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	b006      	add	sp, #24
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	46c0      	nop			@ (mov r8, r8)
 800b5e4:	00008001 	.word	0x00008001
 800b5e8:	00008002 	.word	0x00008002
 800b5ec:	fe00e800 	.word	0xfe00e800
 800b5f0:	ffffbfff 	.word	0xffffbfff
 800b5f4:	ffff7fff 	.word	0xffff7fff
 800b5f8:	ffff0000 	.word	0xffff0000

0800b5fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a26      	ldr	r2, [pc, #152]	@ (800b6a4 <I2C_ITListenCplt+0xa8>)
 800b60a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2241      	movs	r2, #65	@ 0x41
 800b616:	2120      	movs	r1, #32
 800b618:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2242      	movs	r2, #66	@ 0x42
 800b61e:	2100      	movs	r1, #0
 800b620:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2204      	movs	r2, #4
 800b62c:	4013      	ands	r3, r2
 800b62e:	d022      	beq.n	800b676 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b63a:	b2d2      	uxtb	r2, r2
 800b63c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d012      	beq.n	800b676 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b654:	3b01      	subs	r3, #1
 800b656:	b29a      	uxth	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b660:	b29b      	uxth	r3, r3
 800b662:	3b01      	subs	r3, #1
 800b664:	b29a      	uxth	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b66e:	2204      	movs	r2, #4
 800b670:	431a      	orrs	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b676:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a8 <I2C_ITListenCplt+0xac>)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	0011      	movs	r1, r2
 800b67c:	0018      	movs	r0, r3
 800b67e:	f000 fb03 	bl	800bc88 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2210      	movs	r2, #16
 800b688:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2240      	movs	r2, #64	@ 0x40
 800b68e:	2100      	movs	r1, #0
 800b690:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	0018      	movs	r0, r3
 800b696:	f7fe ff28 	bl	800a4ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b69a:	46c0      	nop			@ (mov r8, r8)
 800b69c:	46bd      	mov	sp, r7
 800b69e:	b002      	add	sp, #8
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	46c0      	nop			@ (mov r8, r8)
 800b6a4:	ffff0000 	.word	0xffff0000
 800b6a8:	00008003 	.word	0x00008003

0800b6ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b6b6:	200f      	movs	r0, #15
 800b6b8:	183b      	adds	r3, r7, r0
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	2141      	movs	r1, #65	@ 0x41
 800b6be:	5c52      	ldrb	r2, [r2, r1]
 800b6c0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2242      	movs	r2, #66	@ 0x42
 800b6c6:	2100      	movs	r1, #0
 800b6c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a72      	ldr	r2, [pc, #456]	@ (800b898 <I2C_ITError+0x1ec>)
 800b6ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	431a      	orrs	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b6e2:	183b      	adds	r3, r7, r0
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	2b28      	cmp	r3, #40	@ 0x28
 800b6e8:	d007      	beq.n	800b6fa <I2C_ITError+0x4e>
 800b6ea:	183b      	adds	r3, r7, r0
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2b29      	cmp	r3, #41	@ 0x29
 800b6f0:	d003      	beq.n	800b6fa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b6f2:	183b      	adds	r3, r7, r0
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6f8:	d10c      	bne.n	800b714 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2103      	movs	r1, #3
 800b6fe:	0018      	movs	r0, r3
 800b700:	f000 fac2 	bl	800bc88 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2241      	movs	r2, #65	@ 0x41
 800b708:	2128      	movs	r1, #40	@ 0x28
 800b70a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a63      	ldr	r2, [pc, #396]	@ (800b89c <I2C_ITError+0x1f0>)
 800b710:	635a      	str	r2, [r3, #52]	@ 0x34
 800b712:	e032      	b.n	800b77a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b714:	4a62      	ldr	r2, [pc, #392]	@ (800b8a0 <I2C_ITError+0x1f4>)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	0011      	movs	r1, r2
 800b71a:	0018      	movs	r0, r3
 800b71c:	f000 fab4 	bl	800bc88 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	0018      	movs	r0, r3
 800b724:	f000 f8ed 	bl	800b902 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2241      	movs	r2, #65	@ 0x41
 800b72c:	5c9b      	ldrb	r3, [r3, r2]
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b60      	cmp	r3, #96	@ 0x60
 800b732:	d01f      	beq.n	800b774 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2241      	movs	r2, #65	@ 0x41
 800b738:	2120      	movs	r1, #32
 800b73a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	2220      	movs	r2, #32
 800b744:	4013      	ands	r3, r2
 800b746:	2b20      	cmp	r3, #32
 800b748:	d114      	bne.n	800b774 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	2210      	movs	r2, #16
 800b752:	4013      	ands	r3, r2
 800b754:	2b10      	cmp	r3, #16
 800b756:	d109      	bne.n	800b76c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2210      	movs	r2, #16
 800b75e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b764:	2204      	movs	r2, #4
 800b766:	431a      	orrs	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2220      	movs	r2, #32
 800b772:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b77e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b784:	2b00      	cmp	r3, #0
 800b786:	d03b      	beq.n	800b800 <I2C_ITError+0x154>
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2b11      	cmp	r3, #17
 800b78c:	d002      	beq.n	800b794 <I2C_ITError+0xe8>
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	2b21      	cmp	r3, #33	@ 0x21
 800b792:	d135      	bne.n	800b800 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	2380      	movs	r3, #128	@ 0x80
 800b79c:	01db      	lsls	r3, r3, #7
 800b79e:	401a      	ands	r2, r3
 800b7a0:	2380      	movs	r3, #128	@ 0x80
 800b7a2:	01db      	lsls	r3, r3, #7
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d107      	bne.n	800b7b8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	493c      	ldr	r1, [pc, #240]	@ (800b8a4 <I2C_ITError+0x1f8>)
 800b7b4:	400a      	ands	r2, r1
 800b7b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7bc:	0018      	movs	r0, r3
 800b7be:	f7fe f87c 	bl	80098ba <HAL_DMA_GetState>
 800b7c2:	0003      	movs	r3, r0
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d016      	beq.n	800b7f6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7cc:	4a36      	ldr	r2, [pc, #216]	@ (800b8a8 <I2C_ITError+0x1fc>)
 800b7ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2240      	movs	r2, #64	@ 0x40
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f7fd ff77 	bl	80096d0 <HAL_DMA_Abort_IT>
 800b7e2:	1e03      	subs	r3, r0, #0
 800b7e4:	d051      	beq.n	800b88a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f0:	0018      	movs	r0, r3
 800b7f2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b7f4:	e049      	b.n	800b88a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	0018      	movs	r0, r3
 800b7fa:	f000 f859 	bl	800b8b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b7fe:	e044      	b.n	800b88a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d03b      	beq.n	800b880 <I2C_ITError+0x1d4>
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b12      	cmp	r3, #18
 800b80c:	d002      	beq.n	800b814 <I2C_ITError+0x168>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b22      	cmp	r3, #34	@ 0x22
 800b812:	d135      	bne.n	800b880 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	2380      	movs	r3, #128	@ 0x80
 800b81c:	021b      	lsls	r3, r3, #8
 800b81e:	401a      	ands	r2, r3
 800b820:	2380      	movs	r3, #128	@ 0x80
 800b822:	021b      	lsls	r3, r3, #8
 800b824:	429a      	cmp	r2, r3
 800b826:	d107      	bne.n	800b838 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	491e      	ldr	r1, [pc, #120]	@ (800b8ac <I2C_ITError+0x200>)
 800b834:	400a      	ands	r2, r1
 800b836:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b83c:	0018      	movs	r0, r3
 800b83e:	f7fe f83c 	bl	80098ba <HAL_DMA_GetState>
 800b842:	0003      	movs	r3, r0
 800b844:	2b01      	cmp	r3, #1
 800b846:	d016      	beq.n	800b876 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b84c:	4a16      	ldr	r2, [pc, #88]	@ (800b8a8 <I2C_ITError+0x1fc>)
 800b84e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2240      	movs	r2, #64	@ 0x40
 800b854:	2100      	movs	r1, #0
 800b856:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b85c:	0018      	movs	r0, r3
 800b85e:	f7fd ff37 	bl	80096d0 <HAL_DMA_Abort_IT>
 800b862:	1e03      	subs	r3, r0, #0
 800b864:	d013      	beq.n	800b88e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b86a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b870:	0018      	movs	r0, r3
 800b872:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b874:	e00b      	b.n	800b88e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	0018      	movs	r0, r3
 800b87a:	f000 f819 	bl	800b8b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b87e:	e006      	b.n	800b88e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	0018      	movs	r0, r3
 800b884:	f000 f814 	bl	800b8b0 <I2C_TreatErrorCallback>
  }
}
 800b888:	e002      	b.n	800b890 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b88a:	46c0      	nop			@ (mov r8, r8)
 800b88c:	e000      	b.n	800b890 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b88e:	46c0      	nop			@ (mov r8, r8)
}
 800b890:	46c0      	nop			@ (mov r8, r8)
 800b892:	46bd      	mov	sp, r7
 800b894:	b004      	add	sp, #16
 800b896:	bd80      	pop	{r7, pc}
 800b898:	ffff0000 	.word	0xffff0000
 800b89c:	0800a791 	.word	0x0800a791
 800b8a0:	00008003 	.word	0x00008003
 800b8a4:	ffffbfff 	.word	0xffffbfff
 800b8a8:	0800babb 	.word	0x0800babb
 800b8ac:	ffff7fff 	.word	0xffff7fff

0800b8b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2241      	movs	r2, #65	@ 0x41
 800b8bc:	5c9b      	ldrb	r3, [r3, r2]
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	2b60      	cmp	r3, #96	@ 0x60
 800b8c2:	d10f      	bne.n	800b8e4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2241      	movs	r2, #65	@ 0x41
 800b8c8:	2120      	movs	r1, #32
 800b8ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2240      	movs	r2, #64	@ 0x40
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	0018      	movs	r0, r3
 800b8de:	f7fe fe24 	bl	800a52a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b8e2:	e00a      	b.n	800b8fa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2240      	movs	r2, #64	@ 0x40
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	0018      	movs	r0, r3
 800b8f6:	f7fe fe10 	bl	800a51a <HAL_I2C_ErrorCallback>
}
 800b8fa:	46c0      	nop			@ (mov r8, r8)
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	b002      	add	sp, #8
 800b900:	bd80      	pop	{r7, pc}

0800b902 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	2202      	movs	r2, #2
 800b912:	4013      	ands	r3, r2
 800b914:	2b02      	cmp	r3, #2
 800b916:	d103      	bne.n	800b920 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2200      	movs	r2, #0
 800b91e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	2201      	movs	r2, #1
 800b928:	4013      	ands	r3, r2
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d007      	beq.n	800b93e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	699a      	ldr	r2, [r3, #24]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2101      	movs	r1, #1
 800b93a:	430a      	orrs	r2, r1
 800b93c:	619a      	str	r2, [r3, #24]
  }
}
 800b93e:	46c0      	nop			@ (mov r8, r8)
 800b940:	46bd      	mov	sp, r7
 800b942:	b002      	add	sp, #8
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b954:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4920      	ldr	r1, [pc, #128]	@ (800b9e4 <I2C_DMAMasterTransmitCplt+0x9c>)
 800b962:	400a      	ands	r2, r1
 800b964:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d105      	bne.n	800b97c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2120      	movs	r1, #32
 800b974:	0018      	movs	r0, r3
 800b976:	f000 f8f9 	bl	800bb6c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b97a:	e02e      	b.n	800b9da <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b984:	189a      	adds	r2, r3, r2
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b98e:	b29b      	uxth	r3, r3
 800b990:	2bff      	cmp	r3, #255	@ 0xff
 800b992:	d903      	bls.n	800b99c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	22ff      	movs	r2, #255	@ 0xff
 800b998:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b99a:	e004      	b.n	800b9a6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ae:	0019      	movs	r1, r3
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3328      	adds	r3, #40	@ 0x28
 800b9b6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b9bc:	f7fd fde2 	bl	8009584 <HAL_DMA_Start_IT>
 800b9c0:	1e03      	subs	r3, r0, #0
 800b9c2:	d005      	beq.n	800b9d0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2110      	movs	r1, #16
 800b9c8:	0018      	movs	r0, r3
 800b9ca:	f7ff fe6f 	bl	800b6ac <I2C_ITError>
}
 800b9ce:	e004      	b.n	800b9da <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2140      	movs	r1, #64	@ 0x40
 800b9d4:	0018      	movs	r0, r3
 800b9d6:	f000 f8c9 	bl	800bb6c <I2C_Enable_IRQ>
}
 800b9da:	46c0      	nop			@ (mov r8, r8)
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	b004      	add	sp, #16
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	46c0      	nop			@ (mov r8, r8)
 800b9e4:	ffffbfff 	.word	0xffffbfff

0800b9e8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4920      	ldr	r1, [pc, #128]	@ (800ba84 <I2C_DMAMasterReceiveCplt+0x9c>)
 800ba02:	400a      	ands	r2, r1
 800ba04:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d105      	bne.n	800ba1c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2120      	movs	r1, #32
 800ba14:	0018      	movs	r0, r3
 800ba16:	f000 f8a9 	bl	800bb6c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ba1a:	e02e      	b.n	800ba7a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ba24:	189a      	adds	r2, r3, r2
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	2bff      	cmp	r3, #255	@ 0xff
 800ba32:	d903      	bls.n	800ba3c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	22ff      	movs	r2, #255	@ 0xff
 800ba38:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ba3a:	e004      	b.n	800ba46 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3324      	adds	r3, #36	@ 0x24
 800ba50:	0019      	movs	r1, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba56:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ba5c:	f7fd fd92 	bl	8009584 <HAL_DMA_Start_IT>
 800ba60:	1e03      	subs	r3, r0, #0
 800ba62:	d005      	beq.n	800ba70 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2110      	movs	r1, #16
 800ba68:	0018      	movs	r0, r3
 800ba6a:	f7ff fe1f 	bl	800b6ac <I2C_ITError>
}
 800ba6e:	e004      	b.n	800ba7a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2140      	movs	r1, #64	@ 0x40
 800ba74:	0018      	movs	r0, r3
 800ba76:	f000 f879 	bl	800bb6c <I2C_Enable_IRQ>
}
 800ba7a:	46c0      	nop			@ (mov r8, r8)
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	b004      	add	sp, #16
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	46c0      	nop			@ (mov r8, r8)
 800ba84:	ffff7fff 	.word	0xffff7fff

0800ba88 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba94:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2180      	movs	r1, #128	@ 0x80
 800baa2:	0209      	lsls	r1, r1, #8
 800baa4:	430a      	orrs	r2, r1
 800baa6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2110      	movs	r1, #16
 800baac:	0018      	movs	r0, r3
 800baae:	f7ff fdfd 	bl	800b6ac <I2C_ITError>
}
 800bab2:	46c0      	nop			@ (mov r8, r8)
 800bab4:	46bd      	mov	sp, r7
 800bab6:	b004      	add	sp, #16
 800bab8:	bd80      	pop	{r7, pc}

0800baba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bac6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d003      	beq.n	800bad8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bad4:	2200      	movs	r2, #0
 800bad6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800badc:	2b00      	cmp	r3, #0
 800bade:	d003      	beq.n	800bae8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bae4:	2200      	movs	r2, #0
 800bae6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	0018      	movs	r0, r3
 800baec:	f7ff fee0 	bl	800b8b0 <I2C_TreatErrorCallback>
}
 800baf0:	46c0      	nop			@ (mov r8, r8)
 800baf2:	46bd      	mov	sp, r7
 800baf4:	b004      	add	sp, #16
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800baf8:	b590      	push	{r4, r7, lr}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	0008      	movs	r0, r1
 800bb02:	0011      	movs	r1, r2
 800bb04:	607b      	str	r3, [r7, #4]
 800bb06:	240a      	movs	r4, #10
 800bb08:	193b      	adds	r3, r7, r4
 800bb0a:	1c02      	adds	r2, r0, #0
 800bb0c:	801a      	strh	r2, [r3, #0]
 800bb0e:	2009      	movs	r0, #9
 800bb10:	183b      	adds	r3, r7, r0
 800bb12:	1c0a      	adds	r2, r1, #0
 800bb14:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb16:	193b      	adds	r3, r7, r4
 800bb18:	881b      	ldrh	r3, [r3, #0]
 800bb1a:	059b      	lsls	r3, r3, #22
 800bb1c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bb1e:	183b      	adds	r3, r7, r0
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	0419      	lsls	r1, r3, #16
 800bb24:	23ff      	movs	r3, #255	@ 0xff
 800bb26:	041b      	lsls	r3, r3, #16
 800bb28:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb2a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb32:	4313      	orrs	r3, r2
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	085b      	lsrs	r3, r3, #1
 800bb38:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb42:	0d51      	lsrs	r1, r2, #21
 800bb44:	2280      	movs	r2, #128	@ 0x80
 800bb46:	00d2      	lsls	r2, r2, #3
 800bb48:	400a      	ands	r2, r1
 800bb4a:	4907      	ldr	r1, [pc, #28]	@ (800bb68 <I2C_TransferConfig+0x70>)
 800bb4c:	430a      	orrs	r2, r1
 800bb4e:	43d2      	mvns	r2, r2
 800bb50:	401a      	ands	r2, r3
 800bb52:	0011      	movs	r1, r2
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	430a      	orrs	r2, r1
 800bb5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bb5e:	46c0      	nop			@ (mov r8, r8)
 800bb60:	46bd      	mov	sp, r7
 800bb62:	b007      	add	sp, #28
 800bb64:	bd90      	pop	{r4, r7, pc}
 800bb66:	46c0      	nop			@ (mov r8, r8)
 800bb68:	03ff63ff 	.word	0x03ff63ff

0800bb6c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	000a      	movs	r2, r1
 800bb76:	1cbb      	adds	r3, r7, #2
 800bb78:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb82:	4b3e      	ldr	r3, [pc, #248]	@ (800bc7c <I2C_Enable_IRQ+0x110>)
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d035      	beq.n	800bbf4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800bb8c:	4b3c      	ldr	r3, [pc, #240]	@ (800bc80 <I2C_Enable_IRQ+0x114>)
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d030      	beq.n	800bbf4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800bb96:	4b3b      	ldr	r3, [pc, #236]	@ (800bc84 <I2C_Enable_IRQ+0x118>)
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d02b      	beq.n	800bbf4 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bb9c:	1cbb      	adds	r3, r7, #2
 800bb9e:	2200      	movs	r2, #0
 800bba0:	5e9b      	ldrsh	r3, [r3, r2]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	da03      	bge.n	800bbae <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	22b8      	movs	r2, #184	@ 0xb8
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bbae:	1cbb      	adds	r3, r7, #2
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	d003      	beq.n	800bbc0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	22f2      	movs	r2, #242	@ 0xf2
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bbc0:	1cbb      	adds	r3, r7, #2
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	d003      	beq.n	800bbd2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	22f4      	movs	r2, #244	@ 0xf4
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bbd2:	1cbb      	adds	r3, r7, #2
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	2b10      	cmp	r3, #16
 800bbd8:	d103      	bne.n	800bbe2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2290      	movs	r2, #144	@ 0x90
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bbe2:	1cbb      	adds	r3, r7, #2
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	2b20      	cmp	r3, #32
 800bbe8:	d13c      	bne.n	800bc64 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2220      	movs	r2, #32
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bbf2:	e037      	b.n	800bc64 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bbf4:	1cbb      	adds	r3, r7, #2
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	5e9b      	ldrsh	r3, [r3, r2]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	da03      	bge.n	800bc06 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	22b8      	movs	r2, #184	@ 0xb8
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bc06:	1cbb      	adds	r3, r7, #2
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	d003      	beq.n	800bc18 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	22f2      	movs	r2, #242	@ 0xf2
 800bc14:	4313      	orrs	r3, r2
 800bc16:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bc18:	1cbb      	adds	r3, r7, #2
 800bc1a:	881b      	ldrh	r3, [r3, #0]
 800bc1c:	2202      	movs	r2, #2
 800bc1e:	4013      	ands	r3, r2
 800bc20:	d003      	beq.n	800bc2a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	22f4      	movs	r2, #244	@ 0xf4
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bc2a:	1cbb      	adds	r3, r7, #2
 800bc2c:	881b      	ldrh	r3, [r3, #0]
 800bc2e:	2b10      	cmp	r3, #16
 800bc30:	d103      	bne.n	800bc3a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2290      	movs	r2, #144	@ 0x90
 800bc36:	4313      	orrs	r3, r2
 800bc38:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bc3a:	1cbb      	adds	r3, r7, #2
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	2b20      	cmp	r3, #32
 800bc40:	d103      	bne.n	800bc4a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2260      	movs	r2, #96	@ 0x60
 800bc46:	4313      	orrs	r3, r2
 800bc48:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc84 <I2C_Enable_IRQ+0x118>)
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d007      	beq.n	800bc64 <I2C_Enable_IRQ+0xf8>
 800bc54:	1cbb      	adds	r3, r7, #2
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	2b40      	cmp	r3, #64	@ 0x40
 800bc5a:	d103      	bne.n	800bc64 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2240      	movs	r2, #64	@ 0x40
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	6819      	ldr	r1, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	430a      	orrs	r2, r1
 800bc72:	601a      	str	r2, [r3, #0]
}
 800bc74:	46c0      	nop			@ (mov r8, r8)
 800bc76:	46bd      	mov	sp, r7
 800bc78:	b004      	add	sp, #16
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	0800a991 	.word	0x0800a991
 800bc80:	0800adc1 	.word	0x0800adc1
 800bc84:	0800ab89 	.word	0x0800ab89

0800bc88 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	000a      	movs	r2, r1
 800bc92:	1cbb      	adds	r3, r7, #2
 800bc94:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800bc96:	2300      	movs	r3, #0
 800bc98:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bc9a:	1cbb      	adds	r3, r7, #2
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	4013      	ands	r3, r2
 800bca2:	d010      	beq.n	800bcc6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2242      	movs	r2, #66	@ 0x42
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2241      	movs	r2, #65	@ 0x41
 800bcb0:	5c9b      	ldrb	r3, [r3, r2]
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	001a      	movs	r2, r3
 800bcb6:	2328      	movs	r3, #40	@ 0x28
 800bcb8:	4013      	ands	r3, r2
 800bcba:	2b28      	cmp	r3, #40	@ 0x28
 800bcbc:	d003      	beq.n	800bcc6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	22b0      	movs	r2, #176	@ 0xb0
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bcc6:	1cbb      	adds	r3, r7, #2
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	2202      	movs	r2, #2
 800bccc:	4013      	ands	r3, r2
 800bcce:	d010      	beq.n	800bcf2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2244      	movs	r2, #68	@ 0x44
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2241      	movs	r2, #65	@ 0x41
 800bcdc:	5c9b      	ldrb	r3, [r3, r2]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	001a      	movs	r2, r3
 800bce2:	2328      	movs	r3, #40	@ 0x28
 800bce4:	4013      	ands	r3, r2
 800bce6:	2b28      	cmp	r3, #40	@ 0x28
 800bce8:	d003      	beq.n	800bcf2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	22b0      	movs	r2, #176	@ 0xb0
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bcf2:	1cbb      	adds	r3, r7, #2
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	5e9b      	ldrsh	r3, [r3, r2]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	da03      	bge.n	800bd04 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	22b8      	movs	r2, #184	@ 0xb8
 800bd00:	4313      	orrs	r3, r2
 800bd02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bd04:	1cbb      	adds	r3, r7, #2
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	2b10      	cmp	r3, #16
 800bd0a:	d103      	bne.n	800bd14 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2290      	movs	r2, #144	@ 0x90
 800bd10:	4313      	orrs	r3, r2
 800bd12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bd14:	1cbb      	adds	r3, r7, #2
 800bd16:	881b      	ldrh	r3, [r3, #0]
 800bd18:	2b20      	cmp	r3, #32
 800bd1a:	d103      	bne.n	800bd24 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2220      	movs	r2, #32
 800bd20:	4313      	orrs	r3, r2
 800bd22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bd24:	1cbb      	adds	r3, r7, #2
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	2b40      	cmp	r3, #64	@ 0x40
 800bd2a:	d103      	bne.n	800bd34 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2240      	movs	r2, #64	@ 0x40
 800bd30:	4313      	orrs	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	43d9      	mvns	r1, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	400a      	ands	r2, r1
 800bd44:	601a      	str	r2, [r3, #0]
}
 800bd46:	46c0      	nop			@ (mov r8, r8)
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	b004      	add	sp, #16
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2241      	movs	r2, #65	@ 0x41
 800bd5e:	5c9b      	ldrb	r3, [r3, r2]
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	2b20      	cmp	r3, #32
 800bd64:	d138      	bne.n	800bdd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2240      	movs	r2, #64	@ 0x40
 800bd6a:	5c9b      	ldrb	r3, [r3, r2]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d101      	bne.n	800bd74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bd70:	2302      	movs	r3, #2
 800bd72:	e032      	b.n	800bdda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2240      	movs	r2, #64	@ 0x40
 800bd78:	2101      	movs	r1, #1
 800bd7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2241      	movs	r2, #65	@ 0x41
 800bd80:	2124      	movs	r1, #36	@ 0x24
 800bd82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2101      	movs	r1, #1
 800bd90:	438a      	bics	r2, r1
 800bd92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4911      	ldr	r1, [pc, #68]	@ (800bde4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800bda0:	400a      	ands	r2, r1
 800bda2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6819      	ldr	r1, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	430a      	orrs	r2, r1
 800bdb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	430a      	orrs	r2, r1
 800bdc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2241      	movs	r2, #65	@ 0x41
 800bdc8:	2120      	movs	r1, #32
 800bdca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2240      	movs	r2, #64	@ 0x40
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	e000      	b.n	800bdda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bdd8:	2302      	movs	r3, #2
  }
}
 800bdda:	0018      	movs	r0, r3
 800bddc:	46bd      	mov	sp, r7
 800bdde:	b002      	add	sp, #8
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	46c0      	nop			@ (mov r8, r8)
 800bde4:	ffffefff 	.word	0xffffefff

0800bde8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2241      	movs	r2, #65	@ 0x41
 800bdf6:	5c9b      	ldrb	r3, [r3, r2]
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b20      	cmp	r3, #32
 800bdfc:	d139      	bne.n	800be72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2240      	movs	r2, #64	@ 0x40
 800be02:	5c9b      	ldrb	r3, [r3, r2]
 800be04:	2b01      	cmp	r3, #1
 800be06:	d101      	bne.n	800be0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800be08:	2302      	movs	r3, #2
 800be0a:	e033      	b.n	800be74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2240      	movs	r2, #64	@ 0x40
 800be10:	2101      	movs	r1, #1
 800be12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2241      	movs	r2, #65	@ 0x41
 800be18:	2124      	movs	r1, #36	@ 0x24
 800be1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2101      	movs	r1, #1
 800be28:	438a      	bics	r2, r1
 800be2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4a11      	ldr	r2, [pc, #68]	@ (800be7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800be38:	4013      	ands	r3, r2
 800be3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	021b      	lsls	r3, r3, #8
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	4313      	orrs	r3, r2
 800be44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2101      	movs	r1, #1
 800be5a:	430a      	orrs	r2, r1
 800be5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2241      	movs	r2, #65	@ 0x41
 800be62:	2120      	movs	r1, #32
 800be64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2240      	movs	r2, #64	@ 0x40
 800be6a:	2100      	movs	r1, #0
 800be6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	e000      	b.n	800be74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800be72:	2302      	movs	r3, #2
  }
}
 800be74:	0018      	movs	r0, r3
 800be76:	46bd      	mov	sp, r7
 800be78:	b004      	add	sp, #16
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	fffff0ff 	.word	0xfffff0ff

0800be80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b088      	sub	sp, #32
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e0e1      	b.n	800c056 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2235      	movs	r2, #53	@ 0x35
 800be96:	5c9b      	ldrb	r3, [r3, r2]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d107      	bne.n	800beae <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2234      	movs	r2, #52	@ 0x34
 800bea2:	2100      	movs	r1, #0
 800bea4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	0018      	movs	r0, r3
 800beaa:	f7f9 fa63 	bl	8005374 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2235      	movs	r2, #53	@ 0x35
 800beb2:	2102      	movs	r1, #2
 800beb4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	69da      	ldr	r2, [r3, #28]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4967      	ldr	r1, [pc, #412]	@ (800c060 <HAL_I2S_Init+0x1e0>)
 800bec2:	400a      	ands	r2, r1
 800bec4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2202      	movs	r2, #2
 800becc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d073      	beq.n	800bfbe <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800bede:	2310      	movs	r3, #16
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	e001      	b.n	800bee8 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800bee4:	2320      	movs	r3, #32
 800bee6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	2b20      	cmp	r3, #32
 800beee:	d802      	bhi.n	800bef6 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	005b      	lsls	r3, r3, #1
 800bef4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800bef6:	f001 f957 	bl	800d1a8 <HAL_RCC_GetSysClockFreq>
 800befa:	0003      	movs	r3, r0
 800befc:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	691a      	ldr	r2, [r3, #16]
 800bf02:	2380      	movs	r3, #128	@ 0x80
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d131      	bne.n	800bf6e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d016      	beq.n	800bf40 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	0019      	movs	r1, r3
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f7f4 f939 	bl	8000190 <__udivsi3>
 800bf1e:	0003      	movs	r3, r0
 800bf20:	001a      	movs	r2, r3
 800bf22:	0013      	movs	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	189b      	adds	r3, r3, r2
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	001a      	movs	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	0019      	movs	r1, r3
 800bf32:	0010      	movs	r0, r2
 800bf34:	f7f4 f92c 	bl	8000190 <__udivsi3>
 800bf38:	0003      	movs	r3, r0
 800bf3a:	3305      	adds	r3, #5
 800bf3c:	613b      	str	r3, [r7, #16]
 800bf3e:	e02a      	b.n	800bf96 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	0019      	movs	r1, r3
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f7f4 f922 	bl	8000190 <__udivsi3>
 800bf4c:	0003      	movs	r3, r0
 800bf4e:	001a      	movs	r2, r3
 800bf50:	0013      	movs	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	189b      	adds	r3, r3, r2
 800bf56:	005b      	lsls	r3, r3, #1
 800bf58:	001a      	movs	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	0019      	movs	r1, r3
 800bf60:	0010      	movs	r0, r2
 800bf62:	f7f4 f915 	bl	8000190 <__udivsi3>
 800bf66:	0003      	movs	r3, r0
 800bf68:	3305      	adds	r3, #5
 800bf6a:	613b      	str	r3, [r7, #16]
 800bf6c:	e013      	b.n	800bf96 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800bf6e:	6979      	ldr	r1, [r7, #20]
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7f4 f90d 	bl	8000190 <__udivsi3>
 800bf76:	0003      	movs	r3, r0
 800bf78:	001a      	movs	r2, r3
 800bf7a:	0013      	movs	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	189b      	adds	r3, r3, r2
 800bf80:	005b      	lsls	r3, r3, #1
 800bf82:	001a      	movs	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	0019      	movs	r1, r3
 800bf8a:	0010      	movs	r0, r2
 800bf8c:	f7f4 f900 	bl	8000190 <__udivsi3>
 800bf90:	0003      	movs	r3, r0
 800bf92:	3305      	adds	r3, #5
 800bf94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	210a      	movs	r1, #10
 800bf9a:	0018      	movs	r0, r3
 800bf9c:	f7f4 f8f8 	bl	8000190 <__udivsi3>
 800bfa0:	0003      	movs	r3, r0
 800bfa2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	085b      	lsrs	r3, r3, #1
 800bfb4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	021b      	lsls	r3, r3, #8
 800bfba:	61bb      	str	r3, [r7, #24]
 800bfbc:	e003      	b.n	800bfc6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d902      	bls.n	800bfd2 <HAL_I2S_Init+0x152>
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	2bff      	cmp	r3, #255	@ 0xff
 800bfd0:	d907      	bls.n	800bfe2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd6:	2210      	movs	r2, #16
 800bfd8:	431a      	orrs	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e039      	b.n	800c056 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	691a      	ldr	r2, [r3, #16]
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	0011      	movs	r1, r2
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	69fa      	ldr	r2, [r7, #28]
 800bff2:	430a      	orrs	r2, r1
 800bff4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	69db      	ldr	r3, [r3, #28]
 800bffc:	4a18      	ldr	r2, [pc, #96]	@ (800c060 <HAL_I2S_Init+0x1e0>)
 800bffe:	401a      	ands	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6859      	ldr	r1, [r3, #4]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	4319      	orrs	r1, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	4319      	orrs	r1, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	430b      	orrs	r3, r1
 800c016:	431a      	orrs	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2180      	movs	r1, #128	@ 0x80
 800c01e:	0109      	lsls	r1, r1, #4
 800c020:	430a      	orrs	r2, r1
 800c022:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	2b30      	cmp	r3, #48	@ 0x30
 800c02a:	d003      	beq.n	800c034 <HAL_I2S_Init+0x1b4>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	2bb0      	cmp	r3, #176	@ 0xb0
 800c032:	d108      	bne.n	800c046 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	69da      	ldr	r2, [r3, #28]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2180      	movs	r1, #128	@ 0x80
 800c040:	0149      	lsls	r1, r1, #5
 800c042:	430a      	orrs	r2, r1
 800c044:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2235      	movs	r2, #53	@ 0x35
 800c050:	2101      	movs	r1, #1
 800c052:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	0018      	movs	r0, r3
 800c058:	46bd      	mov	sp, r7
 800c05a:	b008      	add	sp, #32
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	46c0      	nop			@ (mov r8, r8)
 800c060:	fffff040 	.word	0xfffff040

0800c064 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e01b      	b.n	800c0ae <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2235      	movs	r2, #53	@ 0x35
 800c07a:	2102      	movs	r1, #2
 800c07c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	69da      	ldr	r2, [r3, #28]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	490b      	ldr	r1, [pc, #44]	@ (800c0b8 <HAL_I2S_DeInit+0x54>)
 800c08a:	400a      	ands	r2, r1
 800c08c:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	0018      	movs	r0, r3
 800c092:	f7f9 fa07 	bl	80054a4 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2235      	movs	r2, #53	@ 0x35
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2234      	movs	r2, #52	@ 0x34
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	0018      	movs	r0, r3
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	b002      	add	sp, #8
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	46c0      	nop			@ (mov r8, r8)
 800c0b8:	fffffbff 	.word	0xfffffbff

0800c0bc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	1dbb      	adds	r3, r7, #6
 800c0c8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d003      	beq.n	800c0d8 <HAL_I2S_Receive_DMA+0x1c>
 800c0d0:	1dbb      	adds	r3, r7, #6
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d101      	bne.n	800c0dc <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e0a6      	b.n	800c22a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2234      	movs	r2, #52	@ 0x34
 800c0e0:	5c9b      	ldrb	r3, [r3, r2]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d101      	bne.n	800c0ec <HAL_I2S_Receive_DMA+0x30>
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	e09e      	b.n	800c22a <HAL_I2S_Receive_DMA+0x16e>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2234      	movs	r2, #52	@ 0x34
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2235      	movs	r2, #53	@ 0x35
 800c0f8:	5c9b      	ldrb	r3, [r3, r2]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d005      	beq.n	800c10c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2234      	movs	r2, #52	@ 0x34
 800c104:	2100      	movs	r1, #0
 800c106:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800c108:	2302      	movs	r3, #2
 800c10a:	e08e      	b.n	800c22a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2235      	movs	r2, #53	@ 0x35
 800c110:	2104      	movs	r1, #4
 800c112:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	69db      	ldr	r3, [r3, #28]
 800c126:	2207      	movs	r2, #7
 800c128:	4013      	ands	r3, r2
 800c12a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d002      	beq.n	800c138 <HAL_I2S_Receive_DMA+0x7c>
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	2b05      	cmp	r3, #5
 800c136:	d10c      	bne.n	800c152 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800c138:	1dbb      	adds	r3, r7, #6
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	18db      	adds	r3, r3, r3
 800c13e:	b29a      	uxth	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800c144:	1dbb      	adds	r3, r7, #6
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	18db      	adds	r3, r3, r3
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c150:	e007      	b.n	800c162 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	1dba      	adds	r2, r7, #6
 800c156:	8812      	ldrh	r2, [r2, #0]
 800c158:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	1dba      	adds	r2, r7, #6
 800c15e:	8812      	ldrh	r2, [r2, #0]
 800c160:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c166:	4a33      	ldr	r2, [pc, #204]	@ (800c234 <HAL_I2S_Receive_DMA+0x178>)
 800c168:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c16e:	4a32      	ldr	r2, [pc, #200]	@ (800c238 <HAL_I2S_Receive_DMA+0x17c>)
 800c170:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c176:	4a31      	ldr	r2, [pc, #196]	@ (800c23c <HAL_I2S_Receive_DMA+0x180>)
 800c178:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69da      	ldr	r2, [r3, #28]
 800c180:	23c0      	movs	r3, #192	@ 0xc0
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	401a      	ands	r2, r3
 800c186:	23c0      	movs	r3, #192	@ 0xc0
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d10a      	bne.n	800c1a4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c18e:	2300      	movs	r3, #0
 800c190:	613b      	str	r3, [r7, #16]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	613b      	str	r3, [r7, #16]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	613b      	str	r3, [r7, #16]
 800c1a2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	330c      	adds	r3, #12
 800c1ae:	0019      	movs	r1, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1b4:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c1bc:	f7fd f9e2 	bl	8009584 <HAL_DMA_Start_IT>
 800c1c0:	1e03      	subs	r3, r0, #0
 800c1c2:	d00f      	beq.n	800c1e4 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1c8:	2208      	movs	r2, #8
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2235      	movs	r2, #53	@ 0x35
 800c1d4:	2101      	movs	r1, #1
 800c1d6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2234      	movs	r2, #52	@ 0x34
 800c1dc:	2100      	movs	r1, #0
 800c1de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e022      	b.n	800c22a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	69da      	ldr	r2, [r3, #28]
 800c1ea:	2380      	movs	r3, #128	@ 0x80
 800c1ec:	00db      	lsls	r3, r3, #3
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	d108      	bne.n	800c204 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	69da      	ldr	r2, [r3, #28]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2180      	movs	r1, #128	@ 0x80
 800c1fe:	00c9      	lsls	r1, r1, #3
 800c200:	430a      	orrs	r2, r1
 800c202:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	4013      	ands	r3, r2
 800c20e:	d107      	bne.n	800c220 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2101      	movs	r1, #1
 800c21c:	430a      	orrs	r2, r1
 800c21e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2234      	movs	r2, #52	@ 0x34
 800c224:	2100      	movs	r1, #0
 800c226:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	0018      	movs	r0, r3
 800c22c:	46bd      	mov	sp, r7
 800c22e:	b006      	add	sp, #24
 800c230:	bd80      	pop	{r7, pc}
 800c232:	46c0      	nop			@ (mov r8, r8)
 800c234:	0800c43d 	.word	0x0800c43d
 800c238:	0800c3f9 	.word	0x0800c3f9
 800c23c:	0800c45b 	.word	0x0800c45b

0800c240 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c248:	2317      	movs	r3, #23
 800c24a:	18fb      	adds	r3, r7, r3
 800c24c:	2200      	movs	r2, #0
 800c24e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685a      	ldr	r2, [r3, #4]
 800c254:	2380      	movs	r3, #128	@ 0x80
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	429a      	cmp	r2, r3
 800c25a:	d003      	beq.n	800c264 <HAL_I2S_DMAStop+0x24>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d158      	bne.n	800c316 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d010      	beq.n	800c28e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c270:	0018      	movs	r0, r3
 800c272:	f7fd f9ed 	bl	8009650 <HAL_DMA_Abort>
 800c276:	1e03      	subs	r3, r0, #0
 800c278:	d009      	beq.n	800c28e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c27e:	2208      	movs	r2, #8
 800c280:	431a      	orrs	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c286:	2317      	movs	r3, #23
 800c288:	18fb      	adds	r3, r7, r3
 800c28a:	2201      	movs	r2, #1
 800c28c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	2364      	movs	r3, #100	@ 0x64
 800c292:	2201      	movs	r2, #1
 800c294:	2102      	movs	r1, #2
 800c296:	f000 f907 	bl	800c4a8 <I2S_WaitFlagStateUntilTimeout>
 800c29a:	1e03      	subs	r3, r0, #0
 800c29c:	d00d      	beq.n	800c2ba <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	431a      	orrs	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2235      	movs	r2, #53	@ 0x35
 800c2ae:	2101      	movs	r1, #1
 800c2b0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c2b2:	2317      	movs	r3, #23
 800c2b4:	18fb      	adds	r3, r7, r3
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	2364      	movs	r3, #100	@ 0x64
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2180      	movs	r1, #128	@ 0x80
 800c2c2:	f000 f8f1 	bl	800c4a8 <I2S_WaitFlagStateUntilTimeout>
 800c2c6:	1e03      	subs	r3, r0, #0
 800c2c8:	d00d      	beq.n	800c2e6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	431a      	orrs	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2235      	movs	r2, #53	@ 0x35
 800c2da:	2101      	movs	r1, #1
 800c2dc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c2de:	2317      	movs	r3, #23
 800c2e0:	18fb      	adds	r3, r7, r3
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	69da      	ldr	r2, [r3, #28]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4938      	ldr	r1, [pc, #224]	@ (800c3d4 <HAL_I2S_DMAStop+0x194>)
 800c2f2:	400a      	ands	r2, r1
 800c2f4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	613b      	str	r3, [r7, #16]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	613b      	str	r3, [r7, #16]
 800c302:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	685a      	ldr	r2, [r3, #4]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2102      	movs	r1, #2
 800c310:	438a      	bics	r2, r1
 800c312:	605a      	str	r2, [r3, #4]
 800c314:	e053      	b.n	800c3be <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	23c0      	movs	r3, #192	@ 0xc0
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	429a      	cmp	r2, r3
 800c320:	d005      	beq.n	800c32e <HAL_I2S_DMAStop+0xee>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	685a      	ldr	r2, [r3, #4]
 800c326:	2380      	movs	r3, #128	@ 0x80
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d147      	bne.n	800c3be <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c332:	2b00      	cmp	r3, #0
 800c334:	d010      	beq.n	800c358 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c33a:	0018      	movs	r0, r3
 800c33c:	f7fd f988 	bl	8009650 <HAL_DMA_Abort>
 800c340:	1e03      	subs	r3, r0, #0
 800c342:	d009      	beq.n	800c358 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c348:	2208      	movs	r2, #8
 800c34a:	431a      	orrs	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c350:	2317      	movs	r3, #23
 800c352:	18fb      	adds	r3, r7, r3
 800c354:	2201      	movs	r2, #1
 800c356:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	69da      	ldr	r2, [r3, #28]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	491c      	ldr	r1, [pc, #112]	@ (800c3d4 <HAL_I2S_DMAStop+0x194>)
 800c364:	400a      	ands	r2, r1
 800c366:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c368:	2300      	movs	r3, #0
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2101      	movs	r1, #1
 800c38a:	438a      	bics	r2, r1
 800c38c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	685a      	ldr	r2, [r3, #4]
 800c392:	2380      	movs	r3, #128	@ 0x80
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	429a      	cmp	r2, r3
 800c398:	d10e      	bne.n	800c3b8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c39e:	2240      	movs	r2, #64	@ 0x40
 800c3a0:	431a      	orrs	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2235      	movs	r2, #53	@ 0x35
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800c3ae:	2317      	movs	r3, #23
 800c3b0:	18fb      	adds	r3, r7, r3
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	701a      	strb	r2, [r3, #0]
 800c3b6:	e002      	b.n	800c3be <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2235      	movs	r2, #53	@ 0x35
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800c3c6:	2317      	movs	r3, #23
 800c3c8:	18fb      	adds	r3, r7, r3
 800c3ca:	781b      	ldrb	r3, [r3, #0]
}
 800c3cc:	0018      	movs	r0, r3
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	b006      	add	sp, #24
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	fffffbff 	.word	0xfffffbff

0800c3d8 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c3e0:	46c0      	nop			@ (mov r8, r8)
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	b002      	add	sp, #8
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800c3f0:	46c0      	nop			@ (mov r8, r8)
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	b002      	add	sp, #8
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c404:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	69db      	ldr	r3, [r3, #28]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10e      	bne.n	800c42c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	685a      	ldr	r2, [r3, #4]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2101      	movs	r1, #1
 800c41a:	438a      	bics	r2, r1
 800c41c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2235      	movs	r2, #53	@ 0x35
 800c428:	2101      	movs	r1, #1
 800c42a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	0018      	movs	r0, r3
 800c430:	f7f9 fed4 	bl	80061dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c434:	46c0      	nop			@ (mov r8, r8)
 800c436:	46bd      	mov	sp, r7
 800c438:	b004      	add	sp, #16
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c448:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	0018      	movs	r0, r3
 800c44e:	f7ff ffc3 	bl	800c3d8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c452:	46c0      	nop			@ (mov r8, r8)
 800c454:	46bd      	mov	sp, r7
 800c456:	b004      	add	sp, #16
 800c458:	bd80      	pop	{r7, pc}

0800c45a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b084      	sub	sp, #16
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c466:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	685a      	ldr	r2, [r3, #4]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2103      	movs	r1, #3
 800c474:	438a      	bics	r2, r1
 800c476:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2200      	movs	r2, #0
 800c47c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2235      	movs	r2, #53	@ 0x35
 800c488:	2101      	movs	r1, #1
 800c48a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c490:	2208      	movs	r2, #8
 800c492:	431a      	orrs	r2, r3
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	0018      	movs	r0, r3
 800c49c:	f7ff ffa4 	bl	800c3e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c4a0:	46c0      	nop			@ (mov r8, r8)
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	b004      	add	sp, #16
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	1dfb      	adds	r3, r7, #7
 800c4b6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800c4b8:	f7fc fb04 	bl	8008ac4 <HAL_GetTick>
 800c4bc:	0003      	movs	r3, r0
 800c4be:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800c4c0:	e017      	b.n	800c4f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	d014      	beq.n	800c4f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800c4c8:	f7fc fafc 	bl	8008ac4 <HAL_GetTick>
 800c4cc:	0002      	movs	r2, r0
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d902      	bls.n	800c4de <I2S_WaitFlagStateUntilTimeout+0x36>
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d109      	bne.n	800c4f2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2235      	movs	r2, #53	@ 0x35
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2234      	movs	r2, #52	@ 0x34
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	e00f      	b.n	800c512 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	425a      	negs	r2, r3
 800c502:	4153      	adcs	r3, r2
 800c504:	b2db      	uxtb	r3, r3
 800c506:	001a      	movs	r2, r3
 800c508:	1dfb      	adds	r3, r7, #7
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d1d8      	bne.n	800c4c2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	0018      	movs	r0, r3
 800c514:	46bd      	mov	sp, r7
 800c516:	b006      	add	sp, #24
 800c518:	bd80      	pop	{r7, pc}
	...

0800c51c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c51c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c51e:	b08b      	sub	sp, #44	@ 0x2c
 800c520:	af06      	add	r7, sp, #24
 800c522:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	e0f0      	b.n	800c710 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a79      	ldr	r2, [pc, #484]	@ (800c718 <HAL_PCD_Init+0x1fc>)
 800c532:	5c9b      	ldrb	r3, [r3, r2]
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b00      	cmp	r3, #0
 800c538:	d108      	bne.n	800c54c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	23aa      	movs	r3, #170	@ 0xaa
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	2100      	movs	r1, #0
 800c542:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	0018      	movs	r0, r3
 800c548:	f7fb fe56 	bl	80081f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a72      	ldr	r2, [pc, #456]	@ (800c718 <HAL_PCD_Init+0x1fc>)
 800c550:	2103      	movs	r1, #3
 800c552:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	0018      	movs	r0, r3
 800c55a:	f003 f893 	bl	800f684 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c55e:	230f      	movs	r3, #15
 800c560:	18fb      	adds	r3, r7, r3
 800c562:	2200      	movs	r2, #0
 800c564:	701a      	strb	r2, [r3, #0]
 800c566:	e049      	b.n	800c5fc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c568:	200f      	movs	r0, #15
 800c56a:	183b      	adds	r3, r7, r0
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	6879      	ldr	r1, [r7, #4]
 800c570:	1c5a      	adds	r2, r3, #1
 800c572:	0013      	movs	r3, r2
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	189b      	adds	r3, r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	18cb      	adds	r3, r1, r3
 800c57c:	3301      	adds	r3, #1
 800c57e:	2201      	movs	r2, #1
 800c580:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c582:	183b      	adds	r3, r7, r0
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	6879      	ldr	r1, [r7, #4]
 800c588:	1c5a      	adds	r2, r3, #1
 800c58a:	0013      	movs	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	189b      	adds	r3, r3, r2
 800c590:	00db      	lsls	r3, r3, #3
 800c592:	183a      	adds	r2, r7, r0
 800c594:	7812      	ldrb	r2, [r2, #0]
 800c596:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c598:	183b      	adds	r3, r7, r0
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	6879      	ldr	r1, [r7, #4]
 800c59e:	1c5a      	adds	r2, r3, #1
 800c5a0:	0013      	movs	r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	189b      	adds	r3, r3, r2
 800c5a6:	00db      	lsls	r3, r3, #3
 800c5a8:	18cb      	adds	r3, r1, r3
 800c5aa:	3303      	adds	r3, #3
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c5b0:	183b      	adds	r3, r7, r0
 800c5b2:	781a      	ldrb	r2, [r3, #0]
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	0013      	movs	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	189b      	adds	r3, r3, r2
 800c5bc:	00db      	lsls	r3, r3, #3
 800c5be:	18cb      	adds	r3, r1, r3
 800c5c0:	3338      	adds	r3, #56	@ 0x38
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c5c6:	183b      	adds	r3, r7, r0
 800c5c8:	781a      	ldrb	r2, [r3, #0]
 800c5ca:	6879      	ldr	r1, [r7, #4]
 800c5cc:	0013      	movs	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	189b      	adds	r3, r3, r2
 800c5d2:	00db      	lsls	r3, r3, #3
 800c5d4:	18cb      	adds	r3, r1, r3
 800c5d6:	333c      	adds	r3, #60	@ 0x3c
 800c5d8:	2200      	movs	r2, #0
 800c5da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c5dc:	183b      	adds	r3, r7, r0
 800c5de:	781a      	ldrb	r2, [r3, #0]
 800c5e0:	6879      	ldr	r1, [r7, #4]
 800c5e2:	0013      	movs	r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	189b      	adds	r3, r3, r2
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	18cb      	adds	r3, r1, r3
 800c5ec:	3340      	adds	r3, #64	@ 0x40
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c5f2:	183b      	adds	r3, r7, r0
 800c5f4:	781a      	ldrb	r2, [r3, #0]
 800c5f6:	183b      	adds	r3, r7, r0
 800c5f8:	3201      	adds	r2, #1
 800c5fa:	701a      	strb	r2, [r3, #0]
 800c5fc:	210f      	movs	r1, #15
 800c5fe:	187b      	adds	r3, r7, r1
 800c600:	781a      	ldrb	r2, [r3, #0]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	429a      	cmp	r2, r3
 800c608:	d3ae      	bcc.n	800c568 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c60a:	187b      	adds	r3, r7, r1
 800c60c:	2200      	movs	r2, #0
 800c60e:	701a      	strb	r2, [r3, #0]
 800c610:	e056      	b.n	800c6c0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c612:	240f      	movs	r4, #15
 800c614:	193b      	adds	r3, r7, r4
 800c616:	781a      	ldrb	r2, [r3, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	236a      	movs	r3, #106	@ 0x6a
 800c61c:	33ff      	adds	r3, #255	@ 0xff
 800c61e:	0019      	movs	r1, r3
 800c620:	0013      	movs	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	189b      	adds	r3, r3, r2
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	18c3      	adds	r3, r0, r3
 800c62a:	185b      	adds	r3, r3, r1
 800c62c:	2200      	movs	r2, #0
 800c62e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c630:	193b      	adds	r3, r7, r4
 800c632:	781a      	ldrb	r2, [r3, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	23b4      	movs	r3, #180	@ 0xb4
 800c638:	0059      	lsls	r1, r3, #1
 800c63a:	0013      	movs	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	189b      	adds	r3, r3, r2
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	18c3      	adds	r3, r0, r3
 800c644:	185b      	adds	r3, r3, r1
 800c646:	193a      	adds	r2, r7, r4
 800c648:	7812      	ldrb	r2, [r2, #0]
 800c64a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c64c:	193b      	adds	r3, r7, r4
 800c64e:	781a      	ldrb	r2, [r3, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	236c      	movs	r3, #108	@ 0x6c
 800c654:	33ff      	adds	r3, #255	@ 0xff
 800c656:	0019      	movs	r1, r3
 800c658:	0013      	movs	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	189b      	adds	r3, r3, r2
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	18c3      	adds	r3, r0, r3
 800c662:	185b      	adds	r3, r3, r1
 800c664:	2200      	movs	r2, #0
 800c666:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c668:	193b      	adds	r3, r7, r4
 800c66a:	781a      	ldrb	r2, [r3, #0]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	23bc      	movs	r3, #188	@ 0xbc
 800c670:	0059      	lsls	r1, r3, #1
 800c672:	0013      	movs	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	189b      	adds	r3, r3, r2
 800c678:	00db      	lsls	r3, r3, #3
 800c67a:	18c3      	adds	r3, r0, r3
 800c67c:	185b      	adds	r3, r3, r1
 800c67e:	2200      	movs	r2, #0
 800c680:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c682:	193b      	adds	r3, r7, r4
 800c684:	781a      	ldrb	r2, [r3, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	23be      	movs	r3, #190	@ 0xbe
 800c68a:	0059      	lsls	r1, r3, #1
 800c68c:	0013      	movs	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	189b      	adds	r3, r3, r2
 800c692:	00db      	lsls	r3, r3, #3
 800c694:	18c3      	adds	r3, r0, r3
 800c696:	185b      	adds	r3, r3, r1
 800c698:	2200      	movs	r2, #0
 800c69a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c69c:	193b      	adds	r3, r7, r4
 800c69e:	781a      	ldrb	r2, [r3, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	23c0      	movs	r3, #192	@ 0xc0
 800c6a4:	0059      	lsls	r1, r3, #1
 800c6a6:	0013      	movs	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	189b      	adds	r3, r3, r2
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	18c3      	adds	r3, r0, r3
 800c6b0:	185b      	adds	r3, r3, r1
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c6b6:	193b      	adds	r3, r7, r4
 800c6b8:	781a      	ldrb	r2, [r3, #0]
 800c6ba:	193b      	adds	r3, r7, r4
 800c6bc:	3201      	adds	r2, #1
 800c6be:	701a      	strb	r2, [r3, #0]
 800c6c0:	230f      	movs	r3, #15
 800c6c2:	18fb      	adds	r3, r7, r3
 800c6c4:	781a      	ldrb	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d3a1      	bcc.n	800c612 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6818      	ldr	r0, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	466a      	mov	r2, sp
 800c6d6:	0011      	movs	r1, r2
 800c6d8:	001a      	movs	r2, r3
 800c6da:	3210      	adds	r2, #16
 800c6dc:	ca70      	ldmia	r2!, {r4, r5, r6}
 800c6de:	c170      	stmia	r1!, {r4, r5, r6}
 800c6e0:	ca30      	ldmia	r2!, {r4, r5}
 800c6e2:	c130      	stmia	r1!, {r4, r5}
 800c6e4:	6859      	ldr	r1, [r3, #4]
 800c6e6:	689a      	ldr	r2, [r3, #8]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	f002 ffe5 	bl	800f6b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2224      	movs	r2, #36	@ 0x24
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a07      	ldr	r2, [pc, #28]	@ (800c718 <HAL_PCD_Init+0x1fc>)
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	69db      	ldr	r3, [r3, #28]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d103      	bne.n	800c70e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	0018      	movs	r0, r3
 800c70a:	f000 f807 	bl	800c71c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800c70e:	2300      	movs	r3, #0
}
 800c710:	0018      	movs	r0, r3
 800c712:	46bd      	mov	sp, r7
 800c714:	b005      	add	sp, #20
 800c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c718:	000002a9 	.word	0x000002a9

0800c71c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	23ba      	movs	r3, #186	@ 0xba
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	2101      	movs	r1, #1
 800c732:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	23b8      	movs	r3, #184	@ 0xb8
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	2100      	movs	r1, #0
 800c73c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2254      	movs	r2, #84	@ 0x54
 800c742:	5a9b      	ldrh	r3, [r3, r2]
 800c744:	b29b      	uxth	r3, r3
 800c746:	2201      	movs	r2, #1
 800c748:	4313      	orrs	r3, r2
 800c74a:	b299      	uxth	r1, r3
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2254      	movs	r2, #84	@ 0x54
 800c750:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2254      	movs	r2, #84	@ 0x54
 800c756:	5a9b      	ldrh	r3, [r3, r2]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	2202      	movs	r2, #2
 800c75c:	4313      	orrs	r3, r2
 800c75e:	b299      	uxth	r1, r3
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2254      	movs	r2, #84	@ 0x54
 800c764:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	0018      	movs	r0, r3
 800c76a:	46bd      	mov	sp, r7
 800c76c:	b004      	add	sp, #16
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c770:	b5b0      	push	{r4, r5, r7, lr}
 800c772:	b08a      	sub	sp, #40	@ 0x28
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d102      	bne.n	800c784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	f000 fbbf 	bl	800cf02 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c784:	4bc9      	ldr	r3, [pc, #804]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	220c      	movs	r2, #12
 800c78a:	4013      	ands	r3, r2
 800c78c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c78e:	4bc7      	ldr	r3, [pc, #796]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c790:	68da      	ldr	r2, [r3, #12]
 800c792:	2380      	movs	r3, #128	@ 0x80
 800c794:	025b      	lsls	r3, r3, #9
 800c796:	4013      	ands	r3, r2
 800c798:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	d100      	bne.n	800c7a6 <HAL_RCC_OscConfig+0x36>
 800c7a4:	e07e      	b.n	800c8a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	2b08      	cmp	r3, #8
 800c7aa:	d007      	beq.n	800c7bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	2b0c      	cmp	r3, #12
 800c7b0:	d112      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x68>
 800c7b2:	69ba      	ldr	r2, [r7, #24]
 800c7b4:	2380      	movs	r3, #128	@ 0x80
 800c7b6:	025b      	lsls	r3, r3, #9
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d10d      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7bc:	4bbb      	ldr	r3, [pc, #748]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	2380      	movs	r3, #128	@ 0x80
 800c7c2:	029b      	lsls	r3, r3, #10
 800c7c4:	4013      	ands	r3, r2
 800c7c6:	d100      	bne.n	800c7ca <HAL_RCC_OscConfig+0x5a>
 800c7c8:	e06b      	b.n	800c8a2 <HAL_RCC_OscConfig+0x132>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d167      	bne.n	800c8a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	f000 fb95 	bl	800cf02 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	2380      	movs	r3, #128	@ 0x80
 800c7de:	025b      	lsls	r3, r3, #9
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d107      	bne.n	800c7f4 <HAL_RCC_OscConfig+0x84>
 800c7e4:	4bb1      	ldr	r3, [pc, #708]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	4bb0      	ldr	r3, [pc, #704]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c7ea:	2180      	movs	r1, #128	@ 0x80
 800c7ec:	0249      	lsls	r1, r1, #9
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	601a      	str	r2, [r3, #0]
 800c7f2:	e027      	b.n	800c844 <HAL_RCC_OscConfig+0xd4>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	23a0      	movs	r3, #160	@ 0xa0
 800c7fa:	02db      	lsls	r3, r3, #11
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d10e      	bne.n	800c81e <HAL_RCC_OscConfig+0xae>
 800c800:	4baa      	ldr	r3, [pc, #680]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	4ba9      	ldr	r3, [pc, #676]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c806:	2180      	movs	r1, #128	@ 0x80
 800c808:	02c9      	lsls	r1, r1, #11
 800c80a:	430a      	orrs	r2, r1
 800c80c:	601a      	str	r2, [r3, #0]
 800c80e:	4ba7      	ldr	r3, [pc, #668]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	4ba6      	ldr	r3, [pc, #664]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c814:	2180      	movs	r1, #128	@ 0x80
 800c816:	0249      	lsls	r1, r1, #9
 800c818:	430a      	orrs	r2, r1
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	e012      	b.n	800c844 <HAL_RCC_OscConfig+0xd4>
 800c81e:	4ba3      	ldr	r3, [pc, #652]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	4ba2      	ldr	r3, [pc, #648]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c824:	49a2      	ldr	r1, [pc, #648]	@ (800cab0 <HAL_RCC_OscConfig+0x340>)
 800c826:	400a      	ands	r2, r1
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	4ba0      	ldr	r3, [pc, #640]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	2380      	movs	r3, #128	@ 0x80
 800c830:	025b      	lsls	r3, r3, #9
 800c832:	4013      	ands	r3, r2
 800c834:	60fb      	str	r3, [r7, #12]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	4b9c      	ldr	r3, [pc, #624]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	4b9b      	ldr	r3, [pc, #620]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c83e:	499d      	ldr	r1, [pc, #628]	@ (800cab4 <HAL_RCC_OscConfig+0x344>)
 800c840:	400a      	ands	r2, r1
 800c842:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d015      	beq.n	800c878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c84c:	f7fc f93a 	bl	8008ac4 <HAL_GetTick>
 800c850:	0003      	movs	r3, r0
 800c852:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c854:	e009      	b.n	800c86a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c856:	f7fc f935 	bl	8008ac4 <HAL_GetTick>
 800c85a:	0002      	movs	r2, r0
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	1ad3      	subs	r3, r2, r3
 800c860:	2b64      	cmp	r3, #100	@ 0x64
 800c862:	d902      	bls.n	800c86a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c864:	2303      	movs	r3, #3
 800c866:	f000 fb4c 	bl	800cf02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c86a:	4b90      	ldr	r3, [pc, #576]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	2380      	movs	r3, #128	@ 0x80
 800c870:	029b      	lsls	r3, r3, #10
 800c872:	4013      	ands	r3, r2
 800c874:	d0ef      	beq.n	800c856 <HAL_RCC_OscConfig+0xe6>
 800c876:	e015      	b.n	800c8a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c878:	f7fc f924 	bl	8008ac4 <HAL_GetTick>
 800c87c:	0003      	movs	r3, r0
 800c87e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c880:	e008      	b.n	800c894 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c882:	f7fc f91f 	bl	8008ac4 <HAL_GetTick>
 800c886:	0002      	movs	r2, r0
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b64      	cmp	r3, #100	@ 0x64
 800c88e:	d901      	bls.n	800c894 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	e336      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c894:	4b85      	ldr	r3, [pc, #532]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	2380      	movs	r3, #128	@ 0x80
 800c89a:	029b      	lsls	r3, r3, #10
 800c89c:	4013      	ands	r3, r2
 800c89e:	d1f0      	bne.n	800c882 <HAL_RCC_OscConfig+0x112>
 800c8a0:	e000      	b.n	800c8a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	d100      	bne.n	800c8b0 <HAL_RCC_OscConfig+0x140>
 800c8ae:	e099      	b.n	800c9e4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b8:	2220      	movs	r2, #32
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	d009      	beq.n	800c8d2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800c8be:	4b7b      	ldr	r3, [pc, #492]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	4b7a      	ldr	r3, [pc, #488]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c8c4:	2120      	movs	r1, #32
 800c8c6:	430a      	orrs	r2, r1
 800c8c8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8cc:	2220      	movs	r2, #32
 800c8ce:	4393      	bics	r3, r2
 800c8d0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	2b04      	cmp	r3, #4
 800c8d6:	d005      	beq.n	800c8e4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	2b0c      	cmp	r3, #12
 800c8dc:	d13e      	bne.n	800c95c <HAL_RCC_OscConfig+0x1ec>
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d13b      	bne.n	800c95c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800c8e4:	4b71      	ldr	r3, [pc, #452]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	d004      	beq.n	800c8f8 <HAL_RCC_OscConfig+0x188>
 800c8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e304      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8f8:	4b6c      	ldr	r3, [pc, #432]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	4a6e      	ldr	r2, [pc, #440]	@ (800cab8 <HAL_RCC_OscConfig+0x348>)
 800c8fe:	4013      	ands	r3, r2
 800c900:	0019      	movs	r1, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	021a      	lsls	r2, r3, #8
 800c908:	4b68      	ldr	r3, [pc, #416]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c90a:	430a      	orrs	r2, r1
 800c90c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800c90e:	4b67      	ldr	r3, [pc, #412]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2209      	movs	r2, #9
 800c914:	4393      	bics	r3, r2
 800c916:	0019      	movs	r1, r3
 800c918:	4b64      	ldr	r3, [pc, #400]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c91a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c91c:	430a      	orrs	r2, r1
 800c91e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c920:	f000 fc42 	bl	800d1a8 <HAL_RCC_GetSysClockFreq>
 800c924:	0001      	movs	r1, r0
 800c926:	4b61      	ldr	r3, [pc, #388]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	091b      	lsrs	r3, r3, #4
 800c92c:	220f      	movs	r2, #15
 800c92e:	4013      	ands	r3, r2
 800c930:	4a62      	ldr	r2, [pc, #392]	@ (800cabc <HAL_RCC_OscConfig+0x34c>)
 800c932:	5cd3      	ldrb	r3, [r2, r3]
 800c934:	000a      	movs	r2, r1
 800c936:	40da      	lsrs	r2, r3
 800c938:	4b61      	ldr	r3, [pc, #388]	@ (800cac0 <HAL_RCC_OscConfig+0x350>)
 800c93a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800c93c:	4b61      	ldr	r3, [pc, #388]	@ (800cac4 <HAL_RCC_OscConfig+0x354>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2513      	movs	r5, #19
 800c942:	197c      	adds	r4, r7, r5
 800c944:	0018      	movs	r0, r3
 800c946:	f7fc f877 	bl	8008a38 <HAL_InitTick>
 800c94a:	0003      	movs	r3, r0
 800c94c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800c94e:	197b      	adds	r3, r7, r5
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d046      	beq.n	800c9e4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800c956:	197b      	adds	r3, r7, r5
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	e2d2      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d027      	beq.n	800c9b2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800c962:	4b52      	ldr	r3, [pc, #328]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2209      	movs	r2, #9
 800c968:	4393      	bics	r3, r2
 800c96a:	0019      	movs	r1, r3
 800c96c:	4b4f      	ldr	r3, [pc, #316]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c970:	430a      	orrs	r2, r1
 800c972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c974:	f7fc f8a6 	bl	8008ac4 <HAL_GetTick>
 800c978:	0003      	movs	r3, r0
 800c97a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c97c:	e008      	b.n	800c990 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c97e:	f7fc f8a1 	bl	8008ac4 <HAL_GetTick>
 800c982:	0002      	movs	r2, r0
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d901      	bls.n	800c990 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e2b8      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c990:	4b46      	ldr	r3, [pc, #280]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2204      	movs	r2, #4
 800c996:	4013      	ands	r3, r2
 800c998:	d0f1      	beq.n	800c97e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c99a:	4b44      	ldr	r3, [pc, #272]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	4a46      	ldr	r2, [pc, #280]	@ (800cab8 <HAL_RCC_OscConfig+0x348>)
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	0019      	movs	r1, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	021a      	lsls	r2, r3, #8
 800c9aa:	4b40      	ldr	r3, [pc, #256]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c9ac:	430a      	orrs	r2, r1
 800c9ae:	605a      	str	r2, [r3, #4]
 800c9b0:	e018      	b.n	800c9e4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c9b2:	4b3e      	ldr	r3, [pc, #248]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	4b3d      	ldr	r3, [pc, #244]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c9b8:	2101      	movs	r1, #1
 800c9ba:	438a      	bics	r2, r1
 800c9bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9be:	f7fc f881 	bl	8008ac4 <HAL_GetTick>
 800c9c2:	0003      	movs	r3, r0
 800c9c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c9c6:	e008      	b.n	800c9da <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c9c8:	f7fc f87c 	bl	8008ac4 <HAL_GetTick>
 800c9cc:	0002      	movs	r2, r0
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d901      	bls.n	800c9da <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	e293      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c9da:	4b34      	ldr	r3, [pc, #208]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2204      	movs	r2, #4
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	d1f1      	bne.n	800c9c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2210      	movs	r2, #16
 800c9ea:	4013      	ands	r3, r2
 800c9ec:	d100      	bne.n	800c9f0 <HAL_RCC_OscConfig+0x280>
 800c9ee:	e0a2      	b.n	800cb36 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d140      	bne.n	800ca78 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c9f6:	4b2d      	ldr	r3, [pc, #180]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	2380      	movs	r3, #128	@ 0x80
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4013      	ands	r3, r2
 800ca00:	d005      	beq.n	800ca0e <HAL_RCC_OscConfig+0x29e>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	69db      	ldr	r3, [r3, #28]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e279      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ca0e:	4b27      	ldr	r3, [pc, #156]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	4a2d      	ldr	r2, [pc, #180]	@ (800cac8 <HAL_RCC_OscConfig+0x358>)
 800ca14:	4013      	ands	r3, r2
 800ca16:	0019      	movs	r1, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca1c:	4b23      	ldr	r3, [pc, #140]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800ca1e:	430a      	orrs	r2, r1
 800ca20:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ca22:	4b22      	ldr	r3, [pc, #136]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	021b      	lsls	r3, r3, #8
 800ca28:	0a19      	lsrs	r1, r3, #8
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a1b      	ldr	r3, [r3, #32]
 800ca2e:	061a      	lsls	r2, r3, #24
 800ca30:	4b1e      	ldr	r3, [pc, #120]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800ca32:	430a      	orrs	r2, r1
 800ca34:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca3a:	0b5b      	lsrs	r3, r3, #13
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	2280      	movs	r2, #128	@ 0x80
 800ca40:	0212      	lsls	r2, r2, #8
 800ca42:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800ca44:	4b19      	ldr	r3, [pc, #100]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	091b      	lsrs	r3, r3, #4
 800ca4a:	210f      	movs	r1, #15
 800ca4c:	400b      	ands	r3, r1
 800ca4e:	491b      	ldr	r1, [pc, #108]	@ (800cabc <HAL_RCC_OscConfig+0x34c>)
 800ca50:	5ccb      	ldrb	r3, [r1, r3]
 800ca52:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ca54:	4b1a      	ldr	r3, [pc, #104]	@ (800cac0 <HAL_RCC_OscConfig+0x350>)
 800ca56:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800ca58:	4b1a      	ldr	r3, [pc, #104]	@ (800cac4 <HAL_RCC_OscConfig+0x354>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2513      	movs	r5, #19
 800ca5e:	197c      	adds	r4, r7, r5
 800ca60:	0018      	movs	r0, r3
 800ca62:	f7fb ffe9 	bl	8008a38 <HAL_InitTick>
 800ca66:	0003      	movs	r3, r0
 800ca68:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800ca6a:	197b      	adds	r3, r7, r5
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d061      	beq.n	800cb36 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800ca72:	197b      	adds	r3, r7, r5
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	e244      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	69db      	ldr	r3, [r3, #28]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d040      	beq.n	800cb02 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ca80:	4b0a      	ldr	r3, [pc, #40]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	4b09      	ldr	r3, [pc, #36]	@ (800caac <HAL_RCC_OscConfig+0x33c>)
 800ca86:	2180      	movs	r1, #128	@ 0x80
 800ca88:	0049      	lsls	r1, r1, #1
 800ca8a:	430a      	orrs	r2, r1
 800ca8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca8e:	f7fc f819 	bl	8008ac4 <HAL_GetTick>
 800ca92:	0003      	movs	r3, r0
 800ca94:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ca96:	e019      	b.n	800cacc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ca98:	f7fc f814 	bl	8008ac4 <HAL_GetTick>
 800ca9c:	0002      	movs	r2, r0
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d912      	bls.n	800cacc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800caa6:	2303      	movs	r3, #3
 800caa8:	e22b      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
 800caaa:	46c0      	nop			@ (mov r8, r8)
 800caac:	40021000 	.word	0x40021000
 800cab0:	fffeffff 	.word	0xfffeffff
 800cab4:	fffbffff 	.word	0xfffbffff
 800cab8:	ffffe0ff 	.word	0xffffe0ff
 800cabc:	08014ebc 	.word	0x08014ebc
 800cac0:	20000130 	.word	0x20000130
 800cac4:	20000144 	.word	0x20000144
 800cac8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800cacc:	4bca      	ldr	r3, [pc, #808]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	2380      	movs	r3, #128	@ 0x80
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	4013      	ands	r3, r2
 800cad6:	d0df      	beq.n	800ca98 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800cad8:	4bc7      	ldr	r3, [pc, #796]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	4ac7      	ldr	r2, [pc, #796]	@ (800cdfc <HAL_RCC_OscConfig+0x68c>)
 800cade:	4013      	ands	r3, r2
 800cae0:	0019      	movs	r1, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cae6:	4bc4      	ldr	r3, [pc, #784]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cae8:	430a      	orrs	r2, r1
 800caea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800caec:	4bc2      	ldr	r3, [pc, #776]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	021b      	lsls	r3, r3, #8
 800caf2:	0a19      	lsrs	r1, r3, #8
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a1b      	ldr	r3, [r3, #32]
 800caf8:	061a      	lsls	r2, r3, #24
 800cafa:	4bbf      	ldr	r3, [pc, #764]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cafc:	430a      	orrs	r2, r1
 800cafe:	605a      	str	r2, [r3, #4]
 800cb00:	e019      	b.n	800cb36 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800cb02:	4bbd      	ldr	r3, [pc, #756]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	4bbc      	ldr	r3, [pc, #752]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cb08:	49bd      	ldr	r1, [pc, #756]	@ (800ce00 <HAL_RCC_OscConfig+0x690>)
 800cb0a:	400a      	ands	r2, r1
 800cb0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb0e:	f7fb ffd9 	bl	8008ac4 <HAL_GetTick>
 800cb12:	0003      	movs	r3, r0
 800cb14:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800cb16:	e008      	b.n	800cb2a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800cb18:	f7fb ffd4 	bl	8008ac4 <HAL_GetTick>
 800cb1c:	0002      	movs	r2, r0
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d901      	bls.n	800cb2a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e1eb      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800cb2a:	4bb3      	ldr	r3, [pc, #716]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	2380      	movs	r3, #128	@ 0x80
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4013      	ands	r3, r2
 800cb34:	d1f0      	bne.n	800cb18 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2208      	movs	r2, #8
 800cb3c:	4013      	ands	r3, r2
 800cb3e:	d036      	beq.n	800cbae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	695b      	ldr	r3, [r3, #20]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d019      	beq.n	800cb7c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb48:	4bab      	ldr	r3, [pc, #684]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cb4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb4c:	4baa      	ldr	r3, [pc, #680]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cb4e:	2101      	movs	r1, #1
 800cb50:	430a      	orrs	r2, r1
 800cb52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb54:	f7fb ffb6 	bl	8008ac4 <HAL_GetTick>
 800cb58:	0003      	movs	r3, r0
 800cb5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cb5c:	e008      	b.n	800cb70 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb5e:	f7fb ffb1 	bl	8008ac4 <HAL_GetTick>
 800cb62:	0002      	movs	r2, r0
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d901      	bls.n	800cb70 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e1c8      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cb70:	4ba1      	ldr	r3, [pc, #644]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cb72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb74:	2202      	movs	r2, #2
 800cb76:	4013      	ands	r3, r2
 800cb78:	d0f1      	beq.n	800cb5e <HAL_RCC_OscConfig+0x3ee>
 800cb7a:	e018      	b.n	800cbae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb7c:	4b9e      	ldr	r3, [pc, #632]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cb7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb80:	4b9d      	ldr	r3, [pc, #628]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cb82:	2101      	movs	r1, #1
 800cb84:	438a      	bics	r2, r1
 800cb86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb88:	f7fb ff9c 	bl	8008ac4 <HAL_GetTick>
 800cb8c:	0003      	movs	r3, r0
 800cb8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cb90:	e008      	b.n	800cba4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb92:	f7fb ff97 	bl	8008ac4 <HAL_GetTick>
 800cb96:	0002      	movs	r2, r0
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d901      	bls.n	800cba4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e1ae      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cba4:	4b94      	ldr	r3, [pc, #592]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cba8:	2202      	movs	r2, #2
 800cbaa:	4013      	ands	r3, r2
 800cbac:	d1f1      	bne.n	800cb92 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2204      	movs	r2, #4
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	d100      	bne.n	800cbba <HAL_RCC_OscConfig+0x44a>
 800cbb8:	e0ae      	b.n	800cd18 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cbba:	2023      	movs	r0, #35	@ 0x23
 800cbbc:	183b      	adds	r3, r7, r0
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cbc2:	4b8d      	ldr	r3, [pc, #564]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cbc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbc6:	2380      	movs	r3, #128	@ 0x80
 800cbc8:	055b      	lsls	r3, r3, #21
 800cbca:	4013      	ands	r3, r2
 800cbcc:	d109      	bne.n	800cbe2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cbce:	4b8a      	ldr	r3, [pc, #552]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cbd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbd2:	4b89      	ldr	r3, [pc, #548]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cbd4:	2180      	movs	r1, #128	@ 0x80
 800cbd6:	0549      	lsls	r1, r1, #21
 800cbd8:	430a      	orrs	r2, r1
 800cbda:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800cbdc:	183b      	adds	r3, r7, r0
 800cbde:	2201      	movs	r2, #1
 800cbe0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbe2:	4b88      	ldr	r3, [pc, #544]	@ (800ce04 <HAL_RCC_OscConfig+0x694>)
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	2380      	movs	r3, #128	@ 0x80
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	4013      	ands	r3, r2
 800cbec:	d11a      	bne.n	800cc24 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cbee:	4b85      	ldr	r3, [pc, #532]	@ (800ce04 <HAL_RCC_OscConfig+0x694>)
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	4b84      	ldr	r3, [pc, #528]	@ (800ce04 <HAL_RCC_OscConfig+0x694>)
 800cbf4:	2180      	movs	r1, #128	@ 0x80
 800cbf6:	0049      	lsls	r1, r1, #1
 800cbf8:	430a      	orrs	r2, r1
 800cbfa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbfc:	f7fb ff62 	bl	8008ac4 <HAL_GetTick>
 800cc00:	0003      	movs	r3, r0
 800cc02:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc04:	e008      	b.n	800cc18 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc06:	f7fb ff5d 	bl	8008ac4 <HAL_GetTick>
 800cc0a:	0002      	movs	r2, r0
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	2b64      	cmp	r3, #100	@ 0x64
 800cc12:	d901      	bls.n	800cc18 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800cc14:	2303      	movs	r3, #3
 800cc16:	e174      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc18:	4b7a      	ldr	r3, [pc, #488]	@ (800ce04 <HAL_RCC_OscConfig+0x694>)
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	2380      	movs	r3, #128	@ 0x80
 800cc1e:	005b      	lsls	r3, r3, #1
 800cc20:	4013      	ands	r3, r2
 800cc22:	d0f0      	beq.n	800cc06 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	689a      	ldr	r2, [r3, #8]
 800cc28:	2380      	movs	r3, #128	@ 0x80
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d107      	bne.n	800cc40 <HAL_RCC_OscConfig+0x4d0>
 800cc30:	4b71      	ldr	r3, [pc, #452]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc34:	4b70      	ldr	r3, [pc, #448]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc36:	2180      	movs	r1, #128	@ 0x80
 800cc38:	0049      	lsls	r1, r1, #1
 800cc3a:	430a      	orrs	r2, r1
 800cc3c:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc3e:	e031      	b.n	800cca4 <HAL_RCC_OscConfig+0x534>
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d10c      	bne.n	800cc62 <HAL_RCC_OscConfig+0x4f2>
 800cc48:	4b6b      	ldr	r3, [pc, #428]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc4c:	4b6a      	ldr	r3, [pc, #424]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc4e:	496c      	ldr	r1, [pc, #432]	@ (800ce00 <HAL_RCC_OscConfig+0x690>)
 800cc50:	400a      	ands	r2, r1
 800cc52:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc54:	4b68      	ldr	r3, [pc, #416]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc58:	4b67      	ldr	r3, [pc, #412]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc5a:	496b      	ldr	r1, [pc, #428]	@ (800ce08 <HAL_RCC_OscConfig+0x698>)
 800cc5c:	400a      	ands	r2, r1
 800cc5e:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc60:	e020      	b.n	800cca4 <HAL_RCC_OscConfig+0x534>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	689a      	ldr	r2, [r3, #8]
 800cc66:	23a0      	movs	r3, #160	@ 0xa0
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d10e      	bne.n	800cc8c <HAL_RCC_OscConfig+0x51c>
 800cc6e:	4b62      	ldr	r3, [pc, #392]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc72:	4b61      	ldr	r3, [pc, #388]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc74:	2180      	movs	r1, #128	@ 0x80
 800cc76:	00c9      	lsls	r1, r1, #3
 800cc78:	430a      	orrs	r2, r1
 800cc7a:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc7c:	4b5e      	ldr	r3, [pc, #376]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc80:	4b5d      	ldr	r3, [pc, #372]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc82:	2180      	movs	r1, #128	@ 0x80
 800cc84:	0049      	lsls	r1, r1, #1
 800cc86:	430a      	orrs	r2, r1
 800cc88:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc8a:	e00b      	b.n	800cca4 <HAL_RCC_OscConfig+0x534>
 800cc8c:	4b5a      	ldr	r3, [pc, #360]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc90:	4b59      	ldr	r3, [pc, #356]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc92:	495b      	ldr	r1, [pc, #364]	@ (800ce00 <HAL_RCC_OscConfig+0x690>)
 800cc94:	400a      	ands	r2, r1
 800cc96:	651a      	str	r2, [r3, #80]	@ 0x50
 800cc98:	4b57      	ldr	r3, [pc, #348]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cc9c:	4b56      	ldr	r3, [pc, #344]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cc9e:	495a      	ldr	r1, [pc, #360]	@ (800ce08 <HAL_RCC_OscConfig+0x698>)
 800cca0:	400a      	ands	r2, r1
 800cca2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d015      	beq.n	800ccd8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ccac:	f7fb ff0a 	bl	8008ac4 <HAL_GetTick>
 800ccb0:	0003      	movs	r3, r0
 800ccb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ccb4:	e009      	b.n	800ccca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ccb6:	f7fb ff05 	bl	8008ac4 <HAL_GetTick>
 800ccba:	0002      	movs	r2, r0
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	4a52      	ldr	r2, [pc, #328]	@ (800ce0c <HAL_RCC_OscConfig+0x69c>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d901      	bls.n	800ccca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	e11b      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ccca:	4b4b      	ldr	r3, [pc, #300]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cccc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ccce:	2380      	movs	r3, #128	@ 0x80
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	d0ef      	beq.n	800ccb6 <HAL_RCC_OscConfig+0x546>
 800ccd6:	e014      	b.n	800cd02 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ccd8:	f7fb fef4 	bl	8008ac4 <HAL_GetTick>
 800ccdc:	0003      	movs	r3, r0
 800ccde:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cce0:	e009      	b.n	800ccf6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cce2:	f7fb feef 	bl	8008ac4 <HAL_GetTick>
 800cce6:	0002      	movs	r2, r0
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	4a47      	ldr	r2, [pc, #284]	@ (800ce0c <HAL_RCC_OscConfig+0x69c>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e105      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ccf6:	4b40      	ldr	r3, [pc, #256]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800ccf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ccfa:	2380      	movs	r3, #128	@ 0x80
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4013      	ands	r3, r2
 800cd00:	d1ef      	bne.n	800cce2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800cd02:	2323      	movs	r3, #35	@ 0x23
 800cd04:	18fb      	adds	r3, r7, r3
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d105      	bne.n	800cd18 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd0c:	4b3a      	ldr	r3, [pc, #232]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cd0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd10:	4b39      	ldr	r3, [pc, #228]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cd12:	493f      	ldr	r1, [pc, #252]	@ (800ce10 <HAL_RCC_OscConfig+0x6a0>)
 800cd14:	400a      	ands	r2, r1
 800cd16:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2220      	movs	r2, #32
 800cd1e:	4013      	ands	r3, r2
 800cd20:	d049      	beq.n	800cdb6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d026      	beq.n	800cd78 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800cd2a:	4b33      	ldr	r3, [pc, #204]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cd2c:	689a      	ldr	r2, [r3, #8]
 800cd2e:	4b32      	ldr	r3, [pc, #200]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cd30:	2101      	movs	r1, #1
 800cd32:	430a      	orrs	r2, r1
 800cd34:	609a      	str	r2, [r3, #8]
 800cd36:	4b30      	ldr	r3, [pc, #192]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cd38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd3a:	4b2f      	ldr	r3, [pc, #188]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cd3c:	2101      	movs	r1, #1
 800cd3e:	430a      	orrs	r2, r1
 800cd40:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd42:	4b34      	ldr	r3, [pc, #208]	@ (800ce14 <HAL_RCC_OscConfig+0x6a4>)
 800cd44:	6a1a      	ldr	r2, [r3, #32]
 800cd46:	4b33      	ldr	r3, [pc, #204]	@ (800ce14 <HAL_RCC_OscConfig+0x6a4>)
 800cd48:	2180      	movs	r1, #128	@ 0x80
 800cd4a:	0189      	lsls	r1, r1, #6
 800cd4c:	430a      	orrs	r2, r1
 800cd4e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd50:	f7fb feb8 	bl	8008ac4 <HAL_GetTick>
 800cd54:	0003      	movs	r3, r0
 800cd56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cd58:	e008      	b.n	800cd6c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd5a:	f7fb feb3 	bl	8008ac4 <HAL_GetTick>
 800cd5e:	0002      	movs	r2, r0
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d901      	bls.n	800cd6c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e0ca      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cd6c:	4b22      	ldr	r3, [pc, #136]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	2202      	movs	r2, #2
 800cd72:	4013      	ands	r3, r2
 800cd74:	d0f1      	beq.n	800cd5a <HAL_RCC_OscConfig+0x5ea>
 800cd76:	e01e      	b.n	800cdb6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800cd78:	4b1f      	ldr	r3, [pc, #124]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cd7a:	689a      	ldr	r2, [r3, #8]
 800cd7c:	4b1e      	ldr	r3, [pc, #120]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cd7e:	2101      	movs	r1, #1
 800cd80:	438a      	bics	r2, r1
 800cd82:	609a      	str	r2, [r3, #8]
 800cd84:	4b23      	ldr	r3, [pc, #140]	@ (800ce14 <HAL_RCC_OscConfig+0x6a4>)
 800cd86:	6a1a      	ldr	r2, [r3, #32]
 800cd88:	4b22      	ldr	r3, [pc, #136]	@ (800ce14 <HAL_RCC_OscConfig+0x6a4>)
 800cd8a:	4923      	ldr	r1, [pc, #140]	@ (800ce18 <HAL_RCC_OscConfig+0x6a8>)
 800cd8c:	400a      	ands	r2, r1
 800cd8e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd90:	f7fb fe98 	bl	8008ac4 <HAL_GetTick>
 800cd94:	0003      	movs	r3, r0
 800cd96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cd98:	e008      	b.n	800cdac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd9a:	f7fb fe93 	bl	8008ac4 <HAL_GetTick>
 800cd9e:	0002      	movs	r2, r0
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d901      	bls.n	800cdac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e0aa      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cdac:	4b12      	ldr	r3, [pc, #72]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	d1f1      	bne.n	800cd9a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d100      	bne.n	800cdc0 <HAL_RCC_OscConfig+0x650>
 800cdbe:	e09f      	b.n	800cf00 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	2b0c      	cmp	r3, #12
 800cdc4:	d100      	bne.n	800cdc8 <HAL_RCC_OscConfig+0x658>
 800cdc6:	e078      	b.n	800ceba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d159      	bne.n	800ce84 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdd0:	4b09      	ldr	r3, [pc, #36]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	4b08      	ldr	r3, [pc, #32]	@ (800cdf8 <HAL_RCC_OscConfig+0x688>)
 800cdd6:	4911      	ldr	r1, [pc, #68]	@ (800ce1c <HAL_RCC_OscConfig+0x6ac>)
 800cdd8:	400a      	ands	r2, r1
 800cdda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cddc:	f7fb fe72 	bl	8008ac4 <HAL_GetTick>
 800cde0:	0003      	movs	r3, r0
 800cde2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800cde4:	e01c      	b.n	800ce20 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cde6:	f7fb fe6d 	bl	8008ac4 <HAL_GetTick>
 800cdea:	0002      	movs	r2, r0
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d915      	bls.n	800ce20 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e084      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
 800cdf8:	40021000 	.word	0x40021000
 800cdfc:	ffff1fff 	.word	0xffff1fff
 800ce00:	fffffeff 	.word	0xfffffeff
 800ce04:	40007000 	.word	0x40007000
 800ce08:	fffffbff 	.word	0xfffffbff
 800ce0c:	00001388 	.word	0x00001388
 800ce10:	efffffff 	.word	0xefffffff
 800ce14:	40010000 	.word	0x40010000
 800ce18:	ffffdfff 	.word	0xffffdfff
 800ce1c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ce20:	4b3a      	ldr	r3, [pc, #232]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	2380      	movs	r3, #128	@ 0x80
 800ce26:	049b      	lsls	r3, r3, #18
 800ce28:	4013      	ands	r3, r2
 800ce2a:	d1dc      	bne.n	800cde6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce2c:	4b37      	ldr	r3, [pc, #220]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	4a37      	ldr	r2, [pc, #220]	@ (800cf10 <HAL_RCC_OscConfig+0x7a0>)
 800ce32:	4013      	ands	r3, r2
 800ce34:	0019      	movs	r1, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce44:	431a      	orrs	r2, r3
 800ce46:	4b31      	ldr	r3, [pc, #196]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800ce48:	430a      	orrs	r2, r1
 800ce4a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce4c:	4b2f      	ldr	r3, [pc, #188]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	4b2e      	ldr	r3, [pc, #184]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800ce52:	2180      	movs	r1, #128	@ 0x80
 800ce54:	0449      	lsls	r1, r1, #17
 800ce56:	430a      	orrs	r2, r1
 800ce58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce5a:	f7fb fe33 	bl	8008ac4 <HAL_GetTick>
 800ce5e:	0003      	movs	r3, r0
 800ce60:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ce62:	e008      	b.n	800ce76 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce64:	f7fb fe2e 	bl	8008ac4 <HAL_GetTick>
 800ce68:	0002      	movs	r2, r0
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	1ad3      	subs	r3, r2, r3
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	d901      	bls.n	800ce76 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800ce72:	2303      	movs	r3, #3
 800ce74:	e045      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ce76:	4b25      	ldr	r3, [pc, #148]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	2380      	movs	r3, #128	@ 0x80
 800ce7c:	049b      	lsls	r3, r3, #18
 800ce7e:	4013      	ands	r3, r2
 800ce80:	d0f0      	beq.n	800ce64 <HAL_RCC_OscConfig+0x6f4>
 800ce82:	e03d      	b.n	800cf00 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce84:	4b21      	ldr	r3, [pc, #132]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	4b20      	ldr	r3, [pc, #128]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800ce8a:	4922      	ldr	r1, [pc, #136]	@ (800cf14 <HAL_RCC_OscConfig+0x7a4>)
 800ce8c:	400a      	ands	r2, r1
 800ce8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce90:	f7fb fe18 	bl	8008ac4 <HAL_GetTick>
 800ce94:	0003      	movs	r3, r0
 800ce96:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ce98:	e008      	b.n	800ceac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce9a:	f7fb fe13 	bl	8008ac4 <HAL_GetTick>
 800ce9e:	0002      	movs	r2, r0
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d901      	bls.n	800ceac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800cea8:	2303      	movs	r3, #3
 800ceaa:	e02a      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ceac:	4b17      	ldr	r3, [pc, #92]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	2380      	movs	r3, #128	@ 0x80
 800ceb2:	049b      	lsls	r3, r3, #18
 800ceb4:	4013      	ands	r3, r2
 800ceb6:	d1f0      	bne.n	800ce9a <HAL_RCC_OscConfig+0x72a>
 800ceb8:	e022      	b.n	800cf00 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d101      	bne.n	800cec6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e01d      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800cec6:	4b11      	ldr	r3, [pc, #68]	@ (800cf0c <HAL_RCC_OscConfig+0x79c>)
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cecc:	69ba      	ldr	r2, [r7, #24]
 800cece:	2380      	movs	r3, #128	@ 0x80
 800ced0:	025b      	lsls	r3, r3, #9
 800ced2:	401a      	ands	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d10f      	bne.n	800cefc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800cedc:	69ba      	ldr	r2, [r7, #24]
 800cede:	23f0      	movs	r3, #240	@ 0xf0
 800cee0:	039b      	lsls	r3, r3, #14
 800cee2:	401a      	ands	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d107      	bne.n	800cefc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ceec:	69ba      	ldr	r2, [r7, #24]
 800ceee:	23c0      	movs	r3, #192	@ 0xc0
 800cef0:	041b      	lsls	r3, r3, #16
 800cef2:	401a      	ands	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d001      	beq.n	800cf00 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	e000      	b.n	800cf02 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	0018      	movs	r0, r3
 800cf04:	46bd      	mov	sp, r7
 800cf06:	b00a      	add	sp, #40	@ 0x28
 800cf08:	bdb0      	pop	{r4, r5, r7, pc}
 800cf0a:	46c0      	nop			@ (mov r8, r8)
 800cf0c:	40021000 	.word	0x40021000
 800cf10:	ff02ffff 	.word	0xff02ffff
 800cf14:	feffffff 	.word	0xfeffffff

0800cf18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf18:	b5b0      	push	{r4, r5, r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d101      	bne.n	800cf2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e128      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cf2c:	4b96      	ldr	r3, [pc, #600]	@ (800d188 <HAL_RCC_ClockConfig+0x270>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2201      	movs	r2, #1
 800cf32:	4013      	ands	r3, r2
 800cf34:	683a      	ldr	r2, [r7, #0]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d91e      	bls.n	800cf78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf3a:	4b93      	ldr	r3, [pc, #588]	@ (800d188 <HAL_RCC_ClockConfig+0x270>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2201      	movs	r2, #1
 800cf40:	4393      	bics	r3, r2
 800cf42:	0019      	movs	r1, r3
 800cf44:	4b90      	ldr	r3, [pc, #576]	@ (800d188 <HAL_RCC_ClockConfig+0x270>)
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	430a      	orrs	r2, r1
 800cf4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cf4c:	f7fb fdba 	bl	8008ac4 <HAL_GetTick>
 800cf50:	0003      	movs	r3, r0
 800cf52:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf54:	e009      	b.n	800cf6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf56:	f7fb fdb5 	bl	8008ac4 <HAL_GetTick>
 800cf5a:	0002      	movs	r2, r0
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	4a8a      	ldr	r2, [pc, #552]	@ (800d18c <HAL_RCC_ClockConfig+0x274>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d901      	bls.n	800cf6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800cf66:	2303      	movs	r3, #3
 800cf68:	e109      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf6a:	4b87      	ldr	r3, [pc, #540]	@ (800d188 <HAL_RCC_ClockConfig+0x270>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	4013      	ands	r3, r2
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d1ee      	bne.n	800cf56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	4013      	ands	r3, r2
 800cf80:	d009      	beq.n	800cf96 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf82:	4b83      	ldr	r3, [pc, #524]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	22f0      	movs	r2, #240	@ 0xf0
 800cf88:	4393      	bics	r3, r2
 800cf8a:	0019      	movs	r1, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	689a      	ldr	r2, [r3, #8]
 800cf90:	4b7f      	ldr	r3, [pc, #508]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800cf92:	430a      	orrs	r2, r1
 800cf94:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	d100      	bne.n	800cfa2 <HAL_RCC_ClockConfig+0x8a>
 800cfa0:	e089      	b.n	800d0b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d107      	bne.n	800cfba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cfaa:	4b79      	ldr	r3, [pc, #484]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	2380      	movs	r3, #128	@ 0x80
 800cfb0:	029b      	lsls	r3, r3, #10
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	d120      	bne.n	800cff8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e0e1      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	2b03      	cmp	r3, #3
 800cfc0:	d107      	bne.n	800cfd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cfc2:	4b73      	ldr	r3, [pc, #460]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	2380      	movs	r3, #128	@ 0x80
 800cfc8:	049b      	lsls	r3, r3, #18
 800cfca:	4013      	ands	r3, r2
 800cfcc:	d114      	bne.n	800cff8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e0d5      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d106      	bne.n	800cfe8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cfda:	4b6d      	ldr	r3, [pc, #436]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2204      	movs	r2, #4
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	d109      	bne.n	800cff8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e0ca      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800cfe8:	4b69      	ldr	r3, [pc, #420]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	2380      	movs	r3, #128	@ 0x80
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	4013      	ands	r3, r2
 800cff2:	d101      	bne.n	800cff8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cff4:	2301      	movs	r3, #1
 800cff6:	e0c2      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cff8:	4b65      	ldr	r3, [pc, #404]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	2203      	movs	r2, #3
 800cffe:	4393      	bics	r3, r2
 800d000:	0019      	movs	r1, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685a      	ldr	r2, [r3, #4]
 800d006:	4b62      	ldr	r3, [pc, #392]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d008:	430a      	orrs	r2, r1
 800d00a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d00c:	f7fb fd5a 	bl	8008ac4 <HAL_GetTick>
 800d010:	0003      	movs	r3, r0
 800d012:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d111      	bne.n	800d040 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d01c:	e009      	b.n	800d032 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d01e:	f7fb fd51 	bl	8008ac4 <HAL_GetTick>
 800d022:	0002      	movs	r2, r0
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	4a58      	ldr	r2, [pc, #352]	@ (800d18c <HAL_RCC_ClockConfig+0x274>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d901      	bls.n	800d032 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800d02e:	2303      	movs	r3, #3
 800d030:	e0a5      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800d032:	4b57      	ldr	r3, [pc, #348]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	220c      	movs	r2, #12
 800d038:	4013      	ands	r3, r2
 800d03a:	2b08      	cmp	r3, #8
 800d03c:	d1ef      	bne.n	800d01e <HAL_RCC_ClockConfig+0x106>
 800d03e:	e03a      	b.n	800d0b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	2b03      	cmp	r3, #3
 800d046:	d111      	bne.n	800d06c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d048:	e009      	b.n	800d05e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d04a:	f7fb fd3b 	bl	8008ac4 <HAL_GetTick>
 800d04e:	0002      	movs	r2, r0
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	1ad3      	subs	r3, r2, r3
 800d054:	4a4d      	ldr	r2, [pc, #308]	@ (800d18c <HAL_RCC_ClockConfig+0x274>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d901      	bls.n	800d05e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800d05a:	2303      	movs	r3, #3
 800d05c:	e08f      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d05e:	4b4c      	ldr	r3, [pc, #304]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	220c      	movs	r2, #12
 800d064:	4013      	ands	r3, r2
 800d066:	2b0c      	cmp	r3, #12
 800d068:	d1ef      	bne.n	800d04a <HAL_RCC_ClockConfig+0x132>
 800d06a:	e024      	b.n	800d0b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d11b      	bne.n	800d0ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d074:	e009      	b.n	800d08a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d076:	f7fb fd25 	bl	8008ac4 <HAL_GetTick>
 800d07a:	0002      	movs	r2, r0
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	1ad3      	subs	r3, r2, r3
 800d080:	4a42      	ldr	r2, [pc, #264]	@ (800d18c <HAL_RCC_ClockConfig+0x274>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d901      	bls.n	800d08a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800d086:	2303      	movs	r3, #3
 800d088:	e079      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800d08a:	4b41      	ldr	r3, [pc, #260]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	220c      	movs	r2, #12
 800d090:	4013      	ands	r3, r2
 800d092:	2b04      	cmp	r3, #4
 800d094:	d1ef      	bne.n	800d076 <HAL_RCC_ClockConfig+0x15e>
 800d096:	e00e      	b.n	800d0b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d098:	f7fb fd14 	bl	8008ac4 <HAL_GetTick>
 800d09c:	0002      	movs	r2, r0
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	4a3a      	ldr	r2, [pc, #232]	@ (800d18c <HAL_RCC_ClockConfig+0x274>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d901      	bls.n	800d0ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e068      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800d0ac:	4b38      	ldr	r3, [pc, #224]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	220c      	movs	r2, #12
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	d1f0      	bne.n	800d098 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d0b6:	4b34      	ldr	r3, [pc, #208]	@ (800d188 <HAL_RCC_ClockConfig+0x270>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	4013      	ands	r3, r2
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d21e      	bcs.n	800d102 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0c4:	4b30      	ldr	r3, [pc, #192]	@ (800d188 <HAL_RCC_ClockConfig+0x270>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	4393      	bics	r3, r2
 800d0cc:	0019      	movs	r1, r3
 800d0ce:	4b2e      	ldr	r3, [pc, #184]	@ (800d188 <HAL_RCC_ClockConfig+0x270>)
 800d0d0:	683a      	ldr	r2, [r7, #0]
 800d0d2:	430a      	orrs	r2, r1
 800d0d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d0d6:	f7fb fcf5 	bl	8008ac4 <HAL_GetTick>
 800d0da:	0003      	movs	r3, r0
 800d0dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0de:	e009      	b.n	800d0f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0e0:	f7fb fcf0 	bl	8008ac4 <HAL_GetTick>
 800d0e4:	0002      	movs	r2, r0
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	4a28      	ldr	r2, [pc, #160]	@ (800d18c <HAL_RCC_ClockConfig+0x274>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d901      	bls.n	800d0f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800d0f0:	2303      	movs	r3, #3
 800d0f2:	e044      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0f4:	4b24      	ldr	r3, [pc, #144]	@ (800d188 <HAL_RCC_ClockConfig+0x270>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	683a      	ldr	r2, [r7, #0]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d1ee      	bne.n	800d0e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2204      	movs	r2, #4
 800d108:	4013      	ands	r3, r2
 800d10a:	d009      	beq.n	800d120 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d10c:	4b20      	ldr	r3, [pc, #128]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d10e:	68db      	ldr	r3, [r3, #12]
 800d110:	4a20      	ldr	r2, [pc, #128]	@ (800d194 <HAL_RCC_ClockConfig+0x27c>)
 800d112:	4013      	ands	r3, r2
 800d114:	0019      	movs	r1, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	68da      	ldr	r2, [r3, #12]
 800d11a:	4b1d      	ldr	r3, [pc, #116]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d11c:	430a      	orrs	r2, r1
 800d11e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2208      	movs	r2, #8
 800d126:	4013      	ands	r3, r2
 800d128:	d00a      	beq.n	800d140 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d12a:	4b19      	ldr	r3, [pc, #100]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	4a1a      	ldr	r2, [pc, #104]	@ (800d198 <HAL_RCC_ClockConfig+0x280>)
 800d130:	4013      	ands	r3, r2
 800d132:	0019      	movs	r1, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	00da      	lsls	r2, r3, #3
 800d13a:	4b15      	ldr	r3, [pc, #84]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d13c:	430a      	orrs	r2, r1
 800d13e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d140:	f000 f832 	bl	800d1a8 <HAL_RCC_GetSysClockFreq>
 800d144:	0001      	movs	r1, r0
 800d146:	4b12      	ldr	r3, [pc, #72]	@ (800d190 <HAL_RCC_ClockConfig+0x278>)
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	091b      	lsrs	r3, r3, #4
 800d14c:	220f      	movs	r2, #15
 800d14e:	4013      	ands	r3, r2
 800d150:	4a12      	ldr	r2, [pc, #72]	@ (800d19c <HAL_RCC_ClockConfig+0x284>)
 800d152:	5cd3      	ldrb	r3, [r2, r3]
 800d154:	000a      	movs	r2, r1
 800d156:	40da      	lsrs	r2, r3
 800d158:	4b11      	ldr	r3, [pc, #68]	@ (800d1a0 <HAL_RCC_ClockConfig+0x288>)
 800d15a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800d15c:	4b11      	ldr	r3, [pc, #68]	@ (800d1a4 <HAL_RCC_ClockConfig+0x28c>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	250b      	movs	r5, #11
 800d162:	197c      	adds	r4, r7, r5
 800d164:	0018      	movs	r0, r3
 800d166:	f7fb fc67 	bl	8008a38 <HAL_InitTick>
 800d16a:	0003      	movs	r3, r0
 800d16c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800d16e:	197b      	adds	r3, r7, r5
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800d176:	197b      	adds	r3, r7, r5
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	e000      	b.n	800d17e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800d17c:	2300      	movs	r3, #0
}
 800d17e:	0018      	movs	r0, r3
 800d180:	46bd      	mov	sp, r7
 800d182:	b004      	add	sp, #16
 800d184:	bdb0      	pop	{r4, r5, r7, pc}
 800d186:	46c0      	nop			@ (mov r8, r8)
 800d188:	40022000 	.word	0x40022000
 800d18c:	00001388 	.word	0x00001388
 800d190:	40021000 	.word	0x40021000
 800d194:	fffff8ff 	.word	0xfffff8ff
 800d198:	ffffc7ff 	.word	0xffffc7ff
 800d19c:	08014ebc 	.word	0x08014ebc
 800d1a0:	20000130 	.word	0x20000130
 800d1a4:	20000144 	.word	0x20000144

0800d1a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d1a8:	b5b0      	push	{r4, r5, r7, lr}
 800d1aa:	b08e      	sub	sp, #56	@ 0x38
 800d1ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800d1ae:	4b4c      	ldr	r3, [pc, #304]	@ (800d2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d1b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1b6:	230c      	movs	r3, #12
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	2b0c      	cmp	r3, #12
 800d1bc:	d014      	beq.n	800d1e8 <HAL_RCC_GetSysClockFreq+0x40>
 800d1be:	d900      	bls.n	800d1c2 <HAL_RCC_GetSysClockFreq+0x1a>
 800d1c0:	e07b      	b.n	800d2ba <HAL_RCC_GetSysClockFreq+0x112>
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d002      	beq.n	800d1cc <HAL_RCC_GetSysClockFreq+0x24>
 800d1c6:	2b08      	cmp	r3, #8
 800d1c8:	d00b      	beq.n	800d1e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800d1ca:	e076      	b.n	800d2ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800d1cc:	4b44      	ldr	r3, [pc, #272]	@ (800d2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2210      	movs	r2, #16
 800d1d2:	4013      	ands	r3, r2
 800d1d4:	d002      	beq.n	800d1dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800d1d6:	4b43      	ldr	r3, [pc, #268]	@ (800d2e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800d1d8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800d1da:	e07c      	b.n	800d2d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800d1dc:	4b42      	ldr	r3, [pc, #264]	@ (800d2e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800d1de:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d1e0:	e079      	b.n	800d2d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d1e2:	4b42      	ldr	r3, [pc, #264]	@ (800d2ec <HAL_RCC_GetSysClockFreq+0x144>)
 800d1e4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d1e6:	e076      	b.n	800d2d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800d1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ea:	0c9a      	lsrs	r2, r3, #18
 800d1ec:	230f      	movs	r3, #15
 800d1ee:	401a      	ands	r2, r3
 800d1f0:	4b3f      	ldr	r3, [pc, #252]	@ (800d2f0 <HAL_RCC_GetSysClockFreq+0x148>)
 800d1f2:	5c9b      	ldrb	r3, [r3, r2]
 800d1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800d1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f8:	0d9a      	lsrs	r2, r3, #22
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	3301      	adds	r3, #1
 800d200:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d202:	4b37      	ldr	r3, [pc, #220]	@ (800d2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d204:	68da      	ldr	r2, [r3, #12]
 800d206:	2380      	movs	r3, #128	@ 0x80
 800d208:	025b      	lsls	r3, r3, #9
 800d20a:	4013      	ands	r3, r2
 800d20c:	d01a      	beq.n	800d244 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800d20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d210:	61bb      	str	r3, [r7, #24]
 800d212:	2300      	movs	r3, #0
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	4a35      	ldr	r2, [pc, #212]	@ (800d2ec <HAL_RCC_GetSysClockFreq+0x144>)
 800d218:	2300      	movs	r3, #0
 800d21a:	69b8      	ldr	r0, [r7, #24]
 800d21c:	69f9      	ldr	r1, [r7, #28]
 800d21e:	f7f3 f9e3 	bl	80005e8 <__aeabi_lmul>
 800d222:	0002      	movs	r2, r0
 800d224:	000b      	movs	r3, r1
 800d226:	0010      	movs	r0, r2
 800d228:	0019      	movs	r1, r3
 800d22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22c:	613b      	str	r3, [r7, #16]
 800d22e:	2300      	movs	r3, #0
 800d230:	617b      	str	r3, [r7, #20]
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	f7f3 f9b7 	bl	80005a8 <__aeabi_uldivmod>
 800d23a:	0002      	movs	r2, r0
 800d23c:	000b      	movs	r3, r1
 800d23e:	0013      	movs	r3, r2
 800d240:	637b      	str	r3, [r7, #52]	@ 0x34
 800d242:	e037      	b.n	800d2b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800d244:	4b26      	ldr	r3, [pc, #152]	@ (800d2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2210      	movs	r2, #16
 800d24a:	4013      	ands	r3, r2
 800d24c:	d01a      	beq.n	800d284 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800d24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d250:	60bb      	str	r3, [r7, #8]
 800d252:	2300      	movs	r3, #0
 800d254:	60fb      	str	r3, [r7, #12]
 800d256:	4a23      	ldr	r2, [pc, #140]	@ (800d2e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800d258:	2300      	movs	r3, #0
 800d25a:	68b8      	ldr	r0, [r7, #8]
 800d25c:	68f9      	ldr	r1, [r7, #12]
 800d25e:	f7f3 f9c3 	bl	80005e8 <__aeabi_lmul>
 800d262:	0002      	movs	r2, r0
 800d264:	000b      	movs	r3, r1
 800d266:	0010      	movs	r0, r2
 800d268:	0019      	movs	r1, r3
 800d26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26c:	603b      	str	r3, [r7, #0]
 800d26e:	2300      	movs	r3, #0
 800d270:	607b      	str	r3, [r7, #4]
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f7f3 f997 	bl	80005a8 <__aeabi_uldivmod>
 800d27a:	0002      	movs	r2, r0
 800d27c:	000b      	movs	r3, r1
 800d27e:	0013      	movs	r3, r2
 800d280:	637b      	str	r3, [r7, #52]	@ 0x34
 800d282:	e017      	b.n	800d2b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800d284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d286:	0018      	movs	r0, r3
 800d288:	2300      	movs	r3, #0
 800d28a:	0019      	movs	r1, r3
 800d28c:	4a16      	ldr	r2, [pc, #88]	@ (800d2e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800d28e:	2300      	movs	r3, #0
 800d290:	f7f3 f9aa 	bl	80005e8 <__aeabi_lmul>
 800d294:	0002      	movs	r2, r0
 800d296:	000b      	movs	r3, r1
 800d298:	0010      	movs	r0, r2
 800d29a:	0019      	movs	r1, r3
 800d29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29e:	001c      	movs	r4, r3
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	001d      	movs	r5, r3
 800d2a4:	0022      	movs	r2, r4
 800d2a6:	002b      	movs	r3, r5
 800d2a8:	f7f3 f97e 	bl	80005a8 <__aeabi_uldivmod>
 800d2ac:	0002      	movs	r2, r0
 800d2ae:	000b      	movs	r3, r1
 800d2b0:	0013      	movs	r3, r2
 800d2b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800d2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d2b8:	e00d      	b.n	800d2d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800d2ba:	4b09      	ldr	r3, [pc, #36]	@ (800d2e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	0b5b      	lsrs	r3, r3, #13
 800d2c0:	2207      	movs	r2, #7
 800d2c2:	4013      	ands	r3, r2
 800d2c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	2280      	movs	r2, #128	@ 0x80
 800d2cc:	0212      	lsls	r2, r2, #8
 800d2ce:	409a      	lsls	r2, r3
 800d2d0:	0013      	movs	r3, r2
 800d2d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800d2d4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800d2d8:	0018      	movs	r0, r3
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	b00e      	add	sp, #56	@ 0x38
 800d2de:	bdb0      	pop	{r4, r5, r7, pc}
 800d2e0:	40021000 	.word	0x40021000
 800d2e4:	003d0900 	.word	0x003d0900
 800d2e8:	00f42400 	.word	0x00f42400
 800d2ec:	007a1200 	.word	0x007a1200
 800d2f0:	08014ed4 	.word	0x08014ed4

0800d2f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d2f8:	4b02      	ldr	r3, [pc, #8]	@ (800d304 <HAL_RCC_GetHCLKFreq+0x10>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
}
 800d2fc:	0018      	movs	r0, r3
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	46c0      	nop			@ (mov r8, r8)
 800d304:	20000130 	.word	0x20000130

0800d308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d30c:	f7ff fff2 	bl	800d2f4 <HAL_RCC_GetHCLKFreq>
 800d310:	0001      	movs	r1, r0
 800d312:	4b06      	ldr	r3, [pc, #24]	@ (800d32c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	0a1b      	lsrs	r3, r3, #8
 800d318:	2207      	movs	r2, #7
 800d31a:	4013      	ands	r3, r2
 800d31c:	4a04      	ldr	r2, [pc, #16]	@ (800d330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d31e:	5cd3      	ldrb	r3, [r2, r3]
 800d320:	40d9      	lsrs	r1, r3
 800d322:	000b      	movs	r3, r1
}
 800d324:	0018      	movs	r0, r3
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	46c0      	nop			@ (mov r8, r8)
 800d32c:	40021000 	.word	0x40021000
 800d330:	08014ecc 	.word	0x08014ecc

0800d334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d338:	f7ff ffdc 	bl	800d2f4 <HAL_RCC_GetHCLKFreq>
 800d33c:	0001      	movs	r1, r0
 800d33e:	4b06      	ldr	r3, [pc, #24]	@ (800d358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	0adb      	lsrs	r3, r3, #11
 800d344:	2207      	movs	r2, #7
 800d346:	4013      	ands	r3, r2
 800d348:	4a04      	ldr	r2, [pc, #16]	@ (800d35c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d34a:	5cd3      	ldrb	r3, [r2, r3]
 800d34c:	40d9      	lsrs	r1, r3
 800d34e:	000b      	movs	r3, r1
}
 800d350:	0018      	movs	r0, r3
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	46c0      	nop			@ (mov r8, r8)
 800d358:	40021000 	.word	0x40021000
 800d35c:	08014ecc 	.word	0x08014ecc

0800d360 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800d368:	2017      	movs	r0, #23
 800d36a:	183b      	adds	r3, r7, r0
 800d36c:	2200      	movs	r2, #0
 800d36e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2220      	movs	r2, #32
 800d376:	4013      	ands	r3, r2
 800d378:	d100      	bne.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800d37a:	e0c7      	b.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d37c:	4b9b      	ldr	r3, [pc, #620]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d37e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d380:	2380      	movs	r3, #128	@ 0x80
 800d382:	055b      	lsls	r3, r3, #21
 800d384:	4013      	ands	r3, r2
 800d386:	d109      	bne.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d388:	4b98      	ldr	r3, [pc, #608]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d38a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d38c:	4b97      	ldr	r3, [pc, #604]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d38e:	2180      	movs	r1, #128	@ 0x80
 800d390:	0549      	lsls	r1, r1, #21
 800d392:	430a      	orrs	r2, r1
 800d394:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800d396:	183b      	adds	r3, r7, r0
 800d398:	2201      	movs	r2, #1
 800d39a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d39c:	4b94      	ldr	r3, [pc, #592]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	2380      	movs	r3, #128	@ 0x80
 800d3a2:	005b      	lsls	r3, r3, #1
 800d3a4:	4013      	ands	r3, r2
 800d3a6:	d11a      	bne.n	800d3de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d3a8:	4b91      	ldr	r3, [pc, #580]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	4b90      	ldr	r3, [pc, #576]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d3ae:	2180      	movs	r1, #128	@ 0x80
 800d3b0:	0049      	lsls	r1, r1, #1
 800d3b2:	430a      	orrs	r2, r1
 800d3b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d3b6:	f7fb fb85 	bl	8008ac4 <HAL_GetTick>
 800d3ba:	0003      	movs	r3, r0
 800d3bc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d3be:	e008      	b.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3c0:	f7fb fb80 	bl	8008ac4 <HAL_GetTick>
 800d3c4:	0002      	movs	r2, r0
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	1ad3      	subs	r3, r2, r3
 800d3ca:	2b64      	cmp	r3, #100	@ 0x64
 800d3cc:	d901      	bls.n	800d3d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	e107      	b.n	800d5e2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d3d2:	4b87      	ldr	r3, [pc, #540]	@ (800d5f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	2380      	movs	r3, #128	@ 0x80
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	4013      	ands	r3, r2
 800d3dc:	d0f0      	beq.n	800d3c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800d3de:	4b83      	ldr	r3, [pc, #524]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	23c0      	movs	r3, #192	@ 0xc0
 800d3e4:	039b      	lsls	r3, r3, #14
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	23c0      	movs	r3, #192	@ 0xc0
 800d3f0:	039b      	lsls	r3, r3, #14
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d013      	beq.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685a      	ldr	r2, [r3, #4]
 800d3fe:	23c0      	movs	r3, #192	@ 0xc0
 800d400:	029b      	lsls	r3, r3, #10
 800d402:	401a      	ands	r2, r3
 800d404:	23c0      	movs	r3, #192	@ 0xc0
 800d406:	029b      	lsls	r3, r3, #10
 800d408:	429a      	cmp	r2, r3
 800d40a:	d10a      	bne.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d40c:	4b77      	ldr	r3, [pc, #476]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	2380      	movs	r3, #128	@ 0x80
 800d412:	029b      	lsls	r3, r3, #10
 800d414:	401a      	ands	r2, r3
 800d416:	2380      	movs	r3, #128	@ 0x80
 800d418:	029b      	lsls	r3, r3, #10
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d101      	bne.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	e0df      	b.n	800d5e2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800d422:	4b72      	ldr	r3, [pc, #456]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d424:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d426:	23c0      	movs	r3, #192	@ 0xc0
 800d428:	029b      	lsls	r3, r3, #10
 800d42a:	4013      	ands	r3, r2
 800d42c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d03b      	beq.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	685a      	ldr	r2, [r3, #4]
 800d438:	23c0      	movs	r3, #192	@ 0xc0
 800d43a:	029b      	lsls	r3, r3, #10
 800d43c:	4013      	ands	r3, r2
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	429a      	cmp	r2, r3
 800d442:	d033      	beq.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2220      	movs	r2, #32
 800d44a:	4013      	ands	r3, r2
 800d44c:	d02e      	beq.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800d44e:	4b67      	ldr	r3, [pc, #412]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d452:	4a68      	ldr	r2, [pc, #416]	@ (800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800d454:	4013      	ands	r3, r2
 800d456:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d458:	4b64      	ldr	r3, [pc, #400]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d45a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d45c:	4b63      	ldr	r3, [pc, #396]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d45e:	2180      	movs	r1, #128	@ 0x80
 800d460:	0309      	lsls	r1, r1, #12
 800d462:	430a      	orrs	r2, r1
 800d464:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d466:	4b61      	ldr	r3, [pc, #388]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d468:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d46a:	4b60      	ldr	r3, [pc, #384]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d46c:	4962      	ldr	r1, [pc, #392]	@ (800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800d46e:	400a      	ands	r2, r1
 800d470:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800d472:	4b5e      	ldr	r3, [pc, #376]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	2380      	movs	r3, #128	@ 0x80
 800d47c:	005b      	lsls	r3, r3, #1
 800d47e:	4013      	ands	r3, r2
 800d480:	d014      	beq.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d482:	f7fb fb1f 	bl	8008ac4 <HAL_GetTick>
 800d486:	0003      	movs	r3, r0
 800d488:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d48a:	e009      	b.n	800d4a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d48c:	f7fb fb1a 	bl	8008ac4 <HAL_GetTick>
 800d490:	0002      	movs	r2, r0
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	4a59      	ldr	r2, [pc, #356]	@ (800d5fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d901      	bls.n	800d4a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800d49c:	2303      	movs	r3, #3
 800d49e:	e0a0      	b.n	800d5e2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4a0:	4b52      	ldr	r3, [pc, #328]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d4a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d4a4:	2380      	movs	r3, #128	@ 0x80
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	d0ef      	beq.n	800d48c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2220      	movs	r2, #32
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	d01f      	beq.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	685a      	ldr	r2, [r3, #4]
 800d4ba:	23c0      	movs	r3, #192	@ 0xc0
 800d4bc:	029b      	lsls	r3, r3, #10
 800d4be:	401a      	ands	r2, r3
 800d4c0:	23c0      	movs	r3, #192	@ 0xc0
 800d4c2:	029b      	lsls	r3, r3, #10
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d10c      	bne.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800d4c8:	4b48      	ldr	r3, [pc, #288]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4a4c      	ldr	r2, [pc, #304]	@ (800d600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	0019      	movs	r1, r3
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	685a      	ldr	r2, [r3, #4]
 800d4d6:	23c0      	movs	r3, #192	@ 0xc0
 800d4d8:	039b      	lsls	r3, r3, #14
 800d4da:	401a      	ands	r2, r3
 800d4dc:	4b43      	ldr	r3, [pc, #268]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d4de:	430a      	orrs	r2, r1
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	4b42      	ldr	r3, [pc, #264]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d4e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	685a      	ldr	r2, [r3, #4]
 800d4ea:	23c0      	movs	r3, #192	@ 0xc0
 800d4ec:	029b      	lsls	r3, r3, #10
 800d4ee:	401a      	ands	r2, r3
 800d4f0:	4b3e      	ldr	r3, [pc, #248]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d4f2:	430a      	orrs	r2, r1
 800d4f4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d4f6:	2317      	movs	r3, #23
 800d4f8:	18fb      	adds	r3, r7, r3
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d105      	bne.n	800d50c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d500:	4b3a      	ldr	r3, [pc, #232]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d504:	4b39      	ldr	r3, [pc, #228]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d506:	493f      	ldr	r1, [pc, #252]	@ (800d604 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d508:	400a      	ands	r2, r1
 800d50a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2201      	movs	r2, #1
 800d512:	4013      	ands	r3, r2
 800d514:	d009      	beq.n	800d52a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d516:	4b35      	ldr	r3, [pc, #212]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d51a:	2203      	movs	r2, #3
 800d51c:	4393      	bics	r3, r2
 800d51e:	0019      	movs	r1, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	689a      	ldr	r2, [r3, #8]
 800d524:	4b31      	ldr	r3, [pc, #196]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d526:	430a      	orrs	r2, r1
 800d528:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2202      	movs	r2, #2
 800d530:	4013      	ands	r3, r2
 800d532:	d009      	beq.n	800d548 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d534:	4b2d      	ldr	r3, [pc, #180]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d538:	220c      	movs	r2, #12
 800d53a:	4393      	bics	r3, r2
 800d53c:	0019      	movs	r1, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	68da      	ldr	r2, [r3, #12]
 800d542:	4b2a      	ldr	r3, [pc, #168]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d544:	430a      	orrs	r2, r1
 800d546:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2204      	movs	r2, #4
 800d54e:	4013      	ands	r3, r2
 800d550:	d009      	beq.n	800d566 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d552:	4b26      	ldr	r3, [pc, #152]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d556:	4a2c      	ldr	r2, [pc, #176]	@ (800d608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800d558:	4013      	ands	r3, r2
 800d55a:	0019      	movs	r1, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	691a      	ldr	r2, [r3, #16]
 800d560:	4b22      	ldr	r3, [pc, #136]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d562:	430a      	orrs	r2, r1
 800d564:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2208      	movs	r2, #8
 800d56c:	4013      	ands	r3, r2
 800d56e:	d009      	beq.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d570:	4b1e      	ldr	r3, [pc, #120]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d574:	4a25      	ldr	r2, [pc, #148]	@ (800d60c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800d576:	4013      	ands	r3, r2
 800d578:	0019      	movs	r1, r3
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	695a      	ldr	r2, [r3, #20]
 800d57e:	4b1b      	ldr	r3, [pc, #108]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d580:	430a      	orrs	r2, r1
 800d582:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	2380      	movs	r3, #128	@ 0x80
 800d58a:	005b      	lsls	r3, r3, #1
 800d58c:	4013      	ands	r3, r2
 800d58e:	d009      	beq.n	800d5a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d590:	4b16      	ldr	r3, [pc, #88]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d594:	4a17      	ldr	r2, [pc, #92]	@ (800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800d596:	4013      	ands	r3, r2
 800d598:	0019      	movs	r1, r3
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	699a      	ldr	r2, [r3, #24]
 800d59e:	4b13      	ldr	r3, [pc, #76]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d5a0:	430a      	orrs	r2, r1
 800d5a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2240      	movs	r2, #64	@ 0x40
 800d5aa:	4013      	ands	r3, r2
 800d5ac:	d009      	beq.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d5ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d5b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5b2:	4a17      	ldr	r2, [pc, #92]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	0019      	movs	r1, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a1a      	ldr	r2, [r3, #32]
 800d5bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d5be:	430a      	orrs	r2, r1
 800d5c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2280      	movs	r2, #128	@ 0x80
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	d009      	beq.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800d5cc:	4b07      	ldr	r3, [pc, #28]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d5ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5d0:	4a10      	ldr	r2, [pc, #64]	@ (800d614 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800d5d2:	4013      	ands	r3, r2
 800d5d4:	0019      	movs	r1, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	69da      	ldr	r2, [r3, #28]
 800d5da:	4b04      	ldr	r3, [pc, #16]	@ (800d5ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d5dc:	430a      	orrs	r2, r1
 800d5de:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	0018      	movs	r0, r3
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	b006      	add	sp, #24
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	46c0      	nop			@ (mov r8, r8)
 800d5ec:	40021000 	.word	0x40021000
 800d5f0:	40007000 	.word	0x40007000
 800d5f4:	fffcffff 	.word	0xfffcffff
 800d5f8:	fff7ffff 	.word	0xfff7ffff
 800d5fc:	00001388 	.word	0x00001388
 800d600:	ffcfffff 	.word	0xffcfffff
 800d604:	efffffff 	.word	0xefffffff
 800d608:	fffff3ff 	.word	0xfffff3ff
 800d60c:	ffffcfff 	.word	0xffffcfff
 800d610:	fbffffff 	.word	0xfbffffff
 800d614:	fff3ffff 	.word	0xfff3ffff

0800d618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	e032      	b.n	800d690 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2239      	movs	r2, #57	@ 0x39
 800d62e:	5c9b      	ldrb	r3, [r3, r2]
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b00      	cmp	r3, #0
 800d634:	d107      	bne.n	800d646 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2238      	movs	r2, #56	@ 0x38
 800d63a:	2100      	movs	r1, #0
 800d63c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	0018      	movs	r0, r3
 800d642:	f7fa fbc5 	bl	8007dd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2239      	movs	r2, #57	@ 0x39
 800d64a:	2102      	movs	r1, #2
 800d64c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	3304      	adds	r3, #4
 800d656:	0019      	movs	r1, r3
 800d658:	0010      	movs	r0, r2
 800d65a:	f000 f975 	bl	800d948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	223e      	movs	r2, #62	@ 0x3e
 800d662:	2101      	movs	r1, #1
 800d664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	223a      	movs	r2, #58	@ 0x3a
 800d66a:	2101      	movs	r1, #1
 800d66c:	5499      	strb	r1, [r3, r2]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	223b      	movs	r2, #59	@ 0x3b
 800d672:	2101      	movs	r1, #1
 800d674:	5499      	strb	r1, [r3, r2]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	223c      	movs	r2, #60	@ 0x3c
 800d67a:	2101      	movs	r1, #1
 800d67c:	5499      	strb	r1, [r3, r2]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	223d      	movs	r2, #61	@ 0x3d
 800d682:	2101      	movs	r1, #1
 800d684:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2239      	movs	r2, #57	@ 0x39
 800d68a:	2101      	movs	r1, #1
 800d68c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	0018      	movs	r0, r3
 800d692:	46bd      	mov	sp, r7
 800d694:	b002      	add	sp, #8
 800d696:	bd80      	pop	{r7, pc}

0800d698 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d108      	bne.n	800d6ba <HAL_TIM_PWM_Start+0x22>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	223a      	movs	r2, #58	@ 0x3a
 800d6ac:	5c9b      	ldrb	r3, [r3, r2]
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	1e5a      	subs	r2, r3, #1
 800d6b4:	4193      	sbcs	r3, r2
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	e01f      	b.n	800d6fa <HAL_TIM_PWM_Start+0x62>
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	2b04      	cmp	r3, #4
 800d6be:	d108      	bne.n	800d6d2 <HAL_TIM_PWM_Start+0x3a>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	223b      	movs	r2, #59	@ 0x3b
 800d6c4:	5c9b      	ldrb	r3, [r3, r2]
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	1e5a      	subs	r2, r3, #1
 800d6cc:	4193      	sbcs	r3, r2
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	e013      	b.n	800d6fa <HAL_TIM_PWM_Start+0x62>
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	2b08      	cmp	r3, #8
 800d6d6:	d108      	bne.n	800d6ea <HAL_TIM_PWM_Start+0x52>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	223c      	movs	r2, #60	@ 0x3c
 800d6dc:	5c9b      	ldrb	r3, [r3, r2]
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	1e5a      	subs	r2, r3, #1
 800d6e4:	4193      	sbcs	r3, r2
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	e007      	b.n	800d6fa <HAL_TIM_PWM_Start+0x62>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	223d      	movs	r2, #61	@ 0x3d
 800d6ee:	5c9b      	ldrb	r3, [r3, r2]
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	1e5a      	subs	r2, r3, #1
 800d6f6:	4193      	sbcs	r3, r2
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e052      	b.n	800d7a8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d104      	bne.n	800d712 <HAL_TIM_PWM_Start+0x7a>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	223a      	movs	r2, #58	@ 0x3a
 800d70c:	2102      	movs	r1, #2
 800d70e:	5499      	strb	r1, [r3, r2]
 800d710:	e013      	b.n	800d73a <HAL_TIM_PWM_Start+0xa2>
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b04      	cmp	r3, #4
 800d716:	d104      	bne.n	800d722 <HAL_TIM_PWM_Start+0x8a>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	223b      	movs	r2, #59	@ 0x3b
 800d71c:	2102      	movs	r1, #2
 800d71e:	5499      	strb	r1, [r3, r2]
 800d720:	e00b      	b.n	800d73a <HAL_TIM_PWM_Start+0xa2>
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	2b08      	cmp	r3, #8
 800d726:	d104      	bne.n	800d732 <HAL_TIM_PWM_Start+0x9a>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	223c      	movs	r2, #60	@ 0x3c
 800d72c:	2102      	movs	r1, #2
 800d72e:	5499      	strb	r1, [r3, r2]
 800d730:	e003      	b.n	800d73a <HAL_TIM_PWM_Start+0xa2>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	223d      	movs	r2, #61	@ 0x3d
 800d736:	2102      	movs	r1, #2
 800d738:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	2201      	movs	r2, #1
 800d742:	0018      	movs	r0, r3
 800d744:	f000 fa62 	bl	800dc0c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681a      	ldr	r2, [r3, #0]
 800d74c:	2380      	movs	r3, #128	@ 0x80
 800d74e:	05db      	lsls	r3, r3, #23
 800d750:	429a      	cmp	r2, r3
 800d752:	d00e      	beq.n	800d772 <HAL_TIM_PWM_Start+0xda>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a15      	ldr	r2, [pc, #84]	@ (800d7b0 <HAL_TIM_PWM_Start+0x118>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d009      	beq.n	800d772 <HAL_TIM_PWM_Start+0xda>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a14      	ldr	r2, [pc, #80]	@ (800d7b4 <HAL_TIM_PWM_Start+0x11c>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d004      	beq.n	800d772 <HAL_TIM_PWM_Start+0xda>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a12      	ldr	r2, [pc, #72]	@ (800d7b8 <HAL_TIM_PWM_Start+0x120>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d111      	bne.n	800d796 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	2207      	movs	r2, #7
 800d77a:	4013      	ands	r3, r2
 800d77c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2b06      	cmp	r3, #6
 800d782:	d010      	beq.n	800d7a6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2101      	movs	r1, #1
 800d790:	430a      	orrs	r2, r1
 800d792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d794:	e007      	b.n	800d7a6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2101      	movs	r1, #1
 800d7a2:	430a      	orrs	r2, r1
 800d7a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	0018      	movs	r0, r3
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	b004      	add	sp, #16
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	40000400 	.word	0x40000400
 800d7b4:	40010800 	.word	0x40010800
 800d7b8:	40011400 	.word	0x40011400

0800d7bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b086      	sub	sp, #24
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7c8:	2317      	movs	r3, #23
 800d7ca:	18fb      	adds	r3, r7, r3
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2238      	movs	r2, #56	@ 0x38
 800d7d4:	5c9b      	ldrb	r3, [r3, r2]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d101      	bne.n	800d7de <HAL_TIM_PWM_ConfigChannel+0x22>
 800d7da:	2302      	movs	r3, #2
 800d7dc:	e0ad      	b.n	800d93a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2238      	movs	r2, #56	@ 0x38
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b0c      	cmp	r3, #12
 800d7ea:	d100      	bne.n	800d7ee <HAL_TIM_PWM_ConfigChannel+0x32>
 800d7ec:	e076      	b.n	800d8dc <HAL_TIM_PWM_ConfigChannel+0x120>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b0c      	cmp	r3, #12
 800d7f2:	d900      	bls.n	800d7f6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800d7f4:	e095      	b.n	800d922 <HAL_TIM_PWM_ConfigChannel+0x166>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b08      	cmp	r3, #8
 800d7fa:	d04e      	beq.n	800d89a <HAL_TIM_PWM_ConfigChannel+0xde>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b08      	cmp	r3, #8
 800d800:	d900      	bls.n	800d804 <HAL_TIM_PWM_ConfigChannel+0x48>
 800d802:	e08e      	b.n	800d922 <HAL_TIM_PWM_ConfigChannel+0x166>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d003      	beq.n	800d812 <HAL_TIM_PWM_ConfigChannel+0x56>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2b04      	cmp	r3, #4
 800d80e:	d021      	beq.n	800d854 <HAL_TIM_PWM_ConfigChannel+0x98>
 800d810:	e087      	b.n	800d922 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	0011      	movs	r1, r2
 800d81a:	0018      	movs	r0, r3
 800d81c:	f000 f8f2 	bl	800da04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	699a      	ldr	r2, [r3, #24]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2108      	movs	r1, #8
 800d82c:	430a      	orrs	r2, r1
 800d82e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	699a      	ldr	r2, [r3, #24]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2104      	movs	r1, #4
 800d83c:	438a      	bics	r2, r1
 800d83e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6999      	ldr	r1, [r3, #24]
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	68da      	ldr	r2, [r3, #12]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	430a      	orrs	r2, r1
 800d850:	619a      	str	r2, [r3, #24]
      break;
 800d852:	e06b      	b.n	800d92c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	68ba      	ldr	r2, [r7, #8]
 800d85a:	0011      	movs	r1, r2
 800d85c:	0018      	movs	r0, r3
 800d85e:	f000 f90d 	bl	800da7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	699a      	ldr	r2, [r3, #24]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2180      	movs	r1, #128	@ 0x80
 800d86e:	0109      	lsls	r1, r1, #4
 800d870:	430a      	orrs	r2, r1
 800d872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	699a      	ldr	r2, [r3, #24]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4931      	ldr	r1, [pc, #196]	@ (800d944 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800d880:	400a      	ands	r2, r1
 800d882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	6999      	ldr	r1, [r3, #24]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	021a      	lsls	r2, r3, #8
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	430a      	orrs	r2, r1
 800d896:	619a      	str	r2, [r3, #24]
      break;
 800d898:	e048      	b.n	800d92c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	68ba      	ldr	r2, [r7, #8]
 800d8a0:	0011      	movs	r1, r2
 800d8a2:	0018      	movs	r0, r3
 800d8a4:	f000 f92c 	bl	800db00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	69da      	ldr	r2, [r3, #28]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2108      	movs	r1, #8
 800d8b4:	430a      	orrs	r2, r1
 800d8b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	69da      	ldr	r2, [r3, #28]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2104      	movs	r1, #4
 800d8c4:	438a      	bics	r2, r1
 800d8c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	69d9      	ldr	r1, [r3, #28]
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	68da      	ldr	r2, [r3, #12]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	61da      	str	r2, [r3, #28]
      break;
 800d8da:	e027      	b.n	800d92c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	0011      	movs	r1, r2
 800d8e4:	0018      	movs	r0, r3
 800d8e6:	f000 f94b 	bl	800db80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	69da      	ldr	r2, [r3, #28]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2180      	movs	r1, #128	@ 0x80
 800d8f6:	0109      	lsls	r1, r1, #4
 800d8f8:	430a      	orrs	r2, r1
 800d8fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	69da      	ldr	r2, [r3, #28]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	490f      	ldr	r1, [pc, #60]	@ (800d944 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800d908:	400a      	ands	r2, r1
 800d90a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	69d9      	ldr	r1, [r3, #28]
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	021a      	lsls	r2, r3, #8
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	430a      	orrs	r2, r1
 800d91e:	61da      	str	r2, [r3, #28]
      break;
 800d920:	e004      	b.n	800d92c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800d922:	2317      	movs	r3, #23
 800d924:	18fb      	adds	r3, r7, r3
 800d926:	2201      	movs	r2, #1
 800d928:	701a      	strb	r2, [r3, #0]
      break;
 800d92a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2238      	movs	r2, #56	@ 0x38
 800d930:	2100      	movs	r1, #0
 800d932:	5499      	strb	r1, [r3, r2]

  return status;
 800d934:	2317      	movs	r3, #23
 800d936:	18fb      	adds	r3, r7, r3
 800d938:	781b      	ldrb	r3, [r3, #0]
}
 800d93a:	0018      	movs	r0, r3
 800d93c:	46bd      	mov	sp, r7
 800d93e:	b006      	add	sp, #24
 800d940:	bd80      	pop	{r7, pc}
 800d942:	46c0      	nop			@ (mov r8, r8)
 800d944:	fffffbff 	.word	0xfffffbff

0800d948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	2380      	movs	r3, #128	@ 0x80
 800d95c:	05db      	lsls	r3, r3, #23
 800d95e:	429a      	cmp	r2, r3
 800d960:	d00b      	beq.n	800d97a <TIM_Base_SetConfig+0x32>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4a23      	ldr	r2, [pc, #140]	@ (800d9f4 <TIM_Base_SetConfig+0xac>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d007      	beq.n	800d97a <TIM_Base_SetConfig+0x32>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4a22      	ldr	r2, [pc, #136]	@ (800d9f8 <TIM_Base_SetConfig+0xb0>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d003      	beq.n	800d97a <TIM_Base_SetConfig+0x32>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	4a21      	ldr	r2, [pc, #132]	@ (800d9fc <TIM_Base_SetConfig+0xb4>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d108      	bne.n	800d98c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2270      	movs	r2, #112	@ 0x70
 800d97e:	4393      	bics	r3, r2
 800d980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	4313      	orrs	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	2380      	movs	r3, #128	@ 0x80
 800d990:	05db      	lsls	r3, r3, #23
 800d992:	429a      	cmp	r2, r3
 800d994:	d00b      	beq.n	800d9ae <TIM_Base_SetConfig+0x66>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a16      	ldr	r2, [pc, #88]	@ (800d9f4 <TIM_Base_SetConfig+0xac>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d007      	beq.n	800d9ae <TIM_Base_SetConfig+0x66>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a15      	ldr	r2, [pc, #84]	@ (800d9f8 <TIM_Base_SetConfig+0xb0>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d003      	beq.n	800d9ae <TIM_Base_SetConfig+0x66>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a14      	ldr	r2, [pc, #80]	@ (800d9fc <TIM_Base_SetConfig+0xb4>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d108      	bne.n	800d9c0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	4a13      	ldr	r2, [pc, #76]	@ (800da00 <TIM_Base_SetConfig+0xb8>)
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2280      	movs	r2, #128	@ 0x80
 800d9c4:	4393      	bics	r3, r2
 800d9c6:	001a      	movs	r2, r3
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	691b      	ldr	r3, [r3, #16]
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	689a      	ldr	r2, [r3, #8]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	615a      	str	r2, [r3, #20]
}
 800d9ec:	46c0      	nop			@ (mov r8, r8)
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	b004      	add	sp, #16
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	40000400 	.word	0x40000400
 800d9f8:	40010800 	.word	0x40010800
 800d9fc:	40011400 	.word	0x40011400
 800da00:	fffffcff 	.word	0xfffffcff

0800da04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	2201      	movs	r2, #1
 800da14:	4393      	bics	r3, r2
 800da16:	001a      	movs	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6a1b      	ldr	r3, [r3, #32]
 800da20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	699b      	ldr	r3, [r3, #24]
 800da2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2270      	movs	r2, #112	@ 0x70
 800da32:	4393      	bics	r3, r2
 800da34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2203      	movs	r2, #3
 800da3a:	4393      	bics	r3, r2
 800da3c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	4313      	orrs	r3, r2
 800da46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2202      	movs	r2, #2
 800da4c:	4393      	bics	r3, r2
 800da4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	4313      	orrs	r3, r2
 800da58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	693a      	ldr	r2, [r7, #16]
 800da5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	685a      	ldr	r2, [r3, #4]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	697a      	ldr	r2, [r7, #20]
 800da72:	621a      	str	r2, [r3, #32]
}
 800da74:	46c0      	nop			@ (mov r8, r8)
 800da76:	46bd      	mov	sp, r7
 800da78:	b006      	add	sp, #24
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b086      	sub	sp, #24
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a1b      	ldr	r3, [r3, #32]
 800da8a:	2210      	movs	r2, #16
 800da8c:	4393      	bics	r3, r2
 800da8e:	001a      	movs	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a1b      	ldr	r3, [r3, #32]
 800da98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	4a13      	ldr	r2, [pc, #76]	@ (800daf8 <TIM_OC2_SetConfig+0x7c>)
 800daaa:	4013      	ands	r3, r2
 800daac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	4a12      	ldr	r2, [pc, #72]	@ (800dafc <TIM_OC2_SetConfig+0x80>)
 800dab2:	4013      	ands	r3, r2
 800dab4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	021b      	lsls	r3, r3, #8
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	2220      	movs	r2, #32
 800dac6:	4393      	bics	r3, r2
 800dac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	011b      	lsls	r3, r3, #4
 800dad0:	697a      	ldr	r2, [r7, #20]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	693a      	ldr	r2, [r7, #16]
 800dada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	685a      	ldr	r2, [r3, #4]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	697a      	ldr	r2, [r7, #20]
 800daee:	621a      	str	r2, [r3, #32]
}
 800daf0:	46c0      	nop			@ (mov r8, r8)
 800daf2:	46bd      	mov	sp, r7
 800daf4:	b006      	add	sp, #24
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	ffff8fff 	.word	0xffff8fff
 800dafc:	fffffcff 	.word	0xfffffcff

0800db00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	4a1a      	ldr	r2, [pc, #104]	@ (800db78 <TIM_OC3_SetConfig+0x78>)
 800db10:	401a      	ands	r2, r3
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6a1b      	ldr	r3, [r3, #32]
 800db1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	69db      	ldr	r3, [r3, #28]
 800db26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2270      	movs	r2, #112	@ 0x70
 800db2c:	4393      	bics	r3, r2
 800db2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2203      	movs	r2, #3
 800db34:	4393      	bics	r3, r2
 800db36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68fa      	ldr	r2, [r7, #12]
 800db3e:	4313      	orrs	r3, r2
 800db40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	4a0d      	ldr	r2, [pc, #52]	@ (800db7c <TIM_OC3_SetConfig+0x7c>)
 800db46:	4013      	ands	r3, r2
 800db48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	689b      	ldr	r3, [r3, #8]
 800db4e:	021b      	lsls	r3, r3, #8
 800db50:	697a      	ldr	r2, [r7, #20]
 800db52:	4313      	orrs	r3, r2
 800db54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	685a      	ldr	r2, [r3, #4]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	697a      	ldr	r2, [r7, #20]
 800db6e:	621a      	str	r2, [r3, #32]
}
 800db70:	46c0      	nop			@ (mov r8, r8)
 800db72:	46bd      	mov	sp, r7
 800db74:	b006      	add	sp, #24
 800db76:	bd80      	pop	{r7, pc}
 800db78:	fffffeff 	.word	0xfffffeff
 800db7c:	fffffdff 	.word	0xfffffdff

0800db80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	4a1b      	ldr	r2, [pc, #108]	@ (800dbfc <TIM_OC4_SetConfig+0x7c>)
 800db90:	401a      	ands	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	69db      	ldr	r3, [r3, #28]
 800dba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	4a15      	ldr	r2, [pc, #84]	@ (800dc00 <TIM_OC4_SetConfig+0x80>)
 800dbac:	4013      	ands	r3, r2
 800dbae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4a14      	ldr	r2, [pc, #80]	@ (800dc04 <TIM_OC4_SetConfig+0x84>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	021b      	lsls	r3, r3, #8
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	4a10      	ldr	r2, [pc, #64]	@ (800dc08 <TIM_OC4_SetConfig+0x88>)
 800dbc8:	4013      	ands	r3, r2
 800dbca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	031b      	lsls	r3, r3, #12
 800dbd2:	697a      	ldr	r2, [r7, #20]
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	685a      	ldr	r2, [r3, #4]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	621a      	str	r2, [r3, #32]
}
 800dbf2:	46c0      	nop			@ (mov r8, r8)
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	b006      	add	sp, #24
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	46c0      	nop			@ (mov r8, r8)
 800dbfc:	ffffefff 	.word	0xffffefff
 800dc00:	ffff8fff 	.word	0xffff8fff
 800dc04:	fffffcff 	.word	0xfffffcff
 800dc08:	ffffdfff 	.word	0xffffdfff

0800dc0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	221f      	movs	r2, #31
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	2201      	movs	r2, #1
 800dc20:	409a      	lsls	r2, r3
 800dc22:	0013      	movs	r3, r2
 800dc24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6a1b      	ldr	r3, [r3, #32]
 800dc2a:	697a      	ldr	r2, [r7, #20]
 800dc2c:	43d2      	mvns	r2, r2
 800dc2e:	401a      	ands	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6a1a      	ldr	r2, [r3, #32]
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	211f      	movs	r1, #31
 800dc3c:	400b      	ands	r3, r1
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	4099      	lsls	r1, r3
 800dc42:	000b      	movs	r3, r1
 800dc44:	431a      	orrs	r2, r3
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	621a      	str	r2, [r3, #32]
}
 800dc4a:	46c0      	nop			@ (mov r8, r8)
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	b006      	add	sp, #24
 800dc50:	bd80      	pop	{r7, pc}
	...

0800dc54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2238      	movs	r2, #56	@ 0x38
 800dc62:	5c9b      	ldrb	r3, [r3, r2]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d101      	bne.n	800dc6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc68:	2302      	movs	r3, #2
 800dc6a:	e047      	b.n	800dcfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2238      	movs	r2, #56	@ 0x38
 800dc70:	2101      	movs	r1, #1
 800dc72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2239      	movs	r2, #57	@ 0x39
 800dc78:	2102      	movs	r1, #2
 800dc7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2270      	movs	r2, #112	@ 0x70
 800dc90:	4393      	bics	r3, r2
 800dc92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	2380      	movs	r3, #128	@ 0x80
 800dcac:	05db      	lsls	r3, r3, #23
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d00e      	beq.n	800dcd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a13      	ldr	r2, [pc, #76]	@ (800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d009      	beq.n	800dcd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a11      	ldr	r2, [pc, #68]	@ (800dd08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d004      	beq.n	800dcd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a10      	ldr	r2, [pc, #64]	@ (800dd0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d10c      	bne.n	800dcea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2280      	movs	r2, #128	@ 0x80
 800dcd4:	4393      	bics	r3, r2
 800dcd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	4313      	orrs	r3, r2
 800dce0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2239      	movs	r2, #57	@ 0x39
 800dcee:	2101      	movs	r1, #1
 800dcf0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2238      	movs	r2, #56	@ 0x38
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	0018      	movs	r0, r3
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	b004      	add	sp, #16
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	40000400 	.word	0x40000400
 800dd08:	40010800 	.word	0x40010800
 800dd0c:	40011400 	.word	0x40011400

0800dd10 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2238      	movs	r2, #56	@ 0x38
 800dd1e:	5c9b      	ldrb	r3, [r3, r2]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d101      	bne.n	800dd28 <HAL_TIMEx_RemapConfig+0x18>
 800dd24:	2302      	movs	r3, #2
 800dd26:	e00c      	b.n	800dd42 <HAL_TIMEx_RemapConfig+0x32>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2238      	movs	r2, #56	@ 0x38
 800dd2c:	2101      	movs	r1, #1
 800dd2e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	683a      	ldr	r2, [r7, #0]
 800dd36:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2238      	movs	r2, #56	@ 0x38
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	0018      	movs	r0, r3
 800dd44:	46bd      	mov	sp, r7
 800dd46:	b002      	add	sp, #8
 800dd48:	bd80      	pop	{r7, pc}
	...

0800dd4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d101      	bne.n	800dd5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e053      	b.n	800de06 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d116      	bne.n	800dd94 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2278      	movs	r2, #120	@ 0x78
 800dd6a:	2100      	movs	r1, #0
 800dd6c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	0018      	movs	r0, r3
 800dd72:	f000 fd07 	bl	800e784 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	22b0      	movs	r2, #176	@ 0xb0
 800dd7a:	589b      	ldr	r3, [r3, r2]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d103      	bne.n	800dd88 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	21b0      	movs	r1, #176	@ 0xb0
 800dd84:	4a22      	ldr	r2, [pc, #136]	@ (800de10 <HAL_UART_Init+0xc4>)
 800dd86:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	22b0      	movs	r2, #176	@ 0xb0
 800dd8c:	589b      	ldr	r3, [r3, r2]
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	0010      	movs	r0, r2
 800dd92:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2224      	movs	r2, #36	@ 0x24
 800dd98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2101      	movs	r1, #1
 800dda6:	438a      	bics	r2, r1
 800dda8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	0018      	movs	r0, r3
 800ddae:	f000 fd2d 	bl	800e80c <UART_SetConfig>
 800ddb2:	0003      	movs	r3, r0
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d101      	bne.n	800ddbc <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e024      	b.n	800de06 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d003      	beq.n	800ddcc <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	0018      	movs	r0, r3
 800ddc8:	f000 ffbe 	bl	800ed48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	490f      	ldr	r1, [pc, #60]	@ (800de14 <HAL_UART_Init+0xc8>)
 800ddd8:	400a      	ands	r2, r1
 800ddda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	689a      	ldr	r2, [r3, #8]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	212a      	movs	r1, #42	@ 0x2a
 800dde8:	438a      	bics	r2, r1
 800ddea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	430a      	orrs	r2, r1
 800ddfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	0018      	movs	r0, r3
 800de00:	f001 f856 	bl	800eeb0 <UART_CheckIdleState>
 800de04:	0003      	movs	r3, r0
}
 800de06:	0018      	movs	r0, r3
 800de08:	46bd      	mov	sp, r7
 800de0a:	b002      	add	sp, #8
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	46c0      	nop			@ (mov r8, r8)
 800de10:	08007fb1 	.word	0x08007fb1
 800de14:	ffffb7ff 	.word	0xffffb7ff

0800de18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b08a      	sub	sp, #40	@ 0x28
 800de1c:	af02      	add	r7, sp, #8
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	603b      	str	r3, [r7, #0]
 800de24:	1dbb      	adds	r3, r7, #6
 800de26:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800de2c:	2b20      	cmp	r3, #32
 800de2e:	d000      	beq.n	800de32 <HAL_UART_Transmit+0x1a>
 800de30:	e08c      	b.n	800df4c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d003      	beq.n	800de40 <HAL_UART_Transmit+0x28>
 800de38:	1dbb      	adds	r3, r7, #6
 800de3a:	881b      	ldrh	r3, [r3, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d101      	bne.n	800de44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800de40:	2301      	movs	r3, #1
 800de42:	e084      	b.n	800df4e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	689a      	ldr	r2, [r3, #8]
 800de48:	2380      	movs	r3, #128	@ 0x80
 800de4a:	015b      	lsls	r3, r3, #5
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d109      	bne.n	800de64 <HAL_UART_Transmit+0x4c>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d105      	bne.n	800de64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2201      	movs	r2, #1
 800de5c:	4013      	ands	r3, r2
 800de5e:	d001      	beq.n	800de64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800de60:	2301      	movs	r3, #1
 800de62:	e074      	b.n	800df4e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2284      	movs	r2, #132	@ 0x84
 800de68:	2100      	movs	r1, #0
 800de6a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2221      	movs	r2, #33	@ 0x21
 800de70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de72:	f7fa fe27 	bl	8008ac4 <HAL_GetTick>
 800de76:	0003      	movs	r3, r0
 800de78:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	1dba      	adds	r2, r7, #6
 800de7e:	2150      	movs	r1, #80	@ 0x50
 800de80:	8812      	ldrh	r2, [r2, #0]
 800de82:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	1dba      	adds	r2, r7, #6
 800de88:	2152      	movs	r1, #82	@ 0x52
 800de8a:	8812      	ldrh	r2, [r2, #0]
 800de8c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	689a      	ldr	r2, [r3, #8]
 800de92:	2380      	movs	r3, #128	@ 0x80
 800de94:	015b      	lsls	r3, r3, #5
 800de96:	429a      	cmp	r2, r3
 800de98:	d108      	bne.n	800deac <HAL_UART_Transmit+0x94>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	691b      	ldr	r3, [r3, #16]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d104      	bne.n	800deac <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800dea2:	2300      	movs	r3, #0
 800dea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	61bb      	str	r3, [r7, #24]
 800deaa:	e003      	b.n	800deb4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800deb0:	2300      	movs	r3, #0
 800deb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800deb4:	e02f      	b.n	800df16 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	0013      	movs	r3, r2
 800dec0:	2200      	movs	r2, #0
 800dec2:	2180      	movs	r1, #128	@ 0x80
 800dec4:	f001 f89c 	bl	800f000 <UART_WaitOnFlagUntilTimeout>
 800dec8:	1e03      	subs	r3, r0, #0
 800deca:	d004      	beq.n	800ded6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2220      	movs	r2, #32
 800ded0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ded2:	2303      	movs	r3, #3
 800ded4:	e03b      	b.n	800df4e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10b      	bne.n	800def4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	881b      	ldrh	r3, [r3, #0]
 800dee0:	001a      	movs	r2, r3
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	05d2      	lsls	r2, r2, #23
 800dee8:	0dd2      	lsrs	r2, r2, #23
 800deea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	3302      	adds	r3, #2
 800def0:	61bb      	str	r3, [r7, #24]
 800def2:	e007      	b.n	800df04 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	781a      	ldrb	r2, [r3, #0]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	3301      	adds	r3, #1
 800df02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2252      	movs	r2, #82	@ 0x52
 800df08:	5a9b      	ldrh	r3, [r3, r2]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	3b01      	subs	r3, #1
 800df0e:	b299      	uxth	r1, r3
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2252      	movs	r2, #82	@ 0x52
 800df14:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2252      	movs	r2, #82	@ 0x52
 800df1a:	5a9b      	ldrh	r3, [r3, r2]
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1c9      	bne.n	800deb6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	0013      	movs	r3, r2
 800df2c:	2200      	movs	r2, #0
 800df2e:	2140      	movs	r1, #64	@ 0x40
 800df30:	f001 f866 	bl	800f000 <UART_WaitOnFlagUntilTimeout>
 800df34:	1e03      	subs	r3, r0, #0
 800df36:	d004      	beq.n	800df42 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2220      	movs	r2, #32
 800df3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800df3e:	2303      	movs	r3, #3
 800df40:	e005      	b.n	800df4e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2220      	movs	r2, #32
 800df46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800df48:	2300      	movs	r3, #0
 800df4a:	e000      	b.n	800df4e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800df4c:	2302      	movs	r3, #2
  }
}
 800df4e:	0018      	movs	r0, r3
 800df50:	46bd      	mov	sp, r7
 800df52:	b008      	add	sp, #32
 800df54:	bd80      	pop	{r7, pc}
	...

0800df58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b088      	sub	sp, #32
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	1dbb      	adds	r3, r7, #6
 800df64:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800df6a:	2b20      	cmp	r3, #32
 800df6c:	d000      	beq.n	800df70 <HAL_UART_Transmit_DMA+0x18>
 800df6e:	e077      	b.n	800e060 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d003      	beq.n	800df7e <HAL_UART_Transmit_DMA+0x26>
 800df76:	1dbb      	adds	r3, r7, #6
 800df78:	881b      	ldrh	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	e06f      	b.n	800e062 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	689a      	ldr	r2, [r3, #8]
 800df86:	2380      	movs	r3, #128	@ 0x80
 800df88:	015b      	lsls	r3, r3, #5
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d109      	bne.n	800dfa2 <HAL_UART_Transmit_DMA+0x4a>
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	691b      	ldr	r3, [r3, #16]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d105      	bne.n	800dfa2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2201      	movs	r2, #1
 800df9a:	4013      	ands	r3, r2
 800df9c:	d001      	beq.n	800dfa2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e05f      	b.n	800e062 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	1dba      	adds	r2, r7, #6
 800dfac:	2150      	movs	r1, #80	@ 0x50
 800dfae:	8812      	ldrh	r2, [r2, #0]
 800dfb0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	1dba      	adds	r2, r7, #6
 800dfb6:	2152      	movs	r1, #82	@ 0x52
 800dfb8:	8812      	ldrh	r2, [r2, #0]
 800dfba:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2284      	movs	r2, #132	@ 0x84
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2221      	movs	r2, #33	@ 0x21
 800dfc8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d027      	beq.n	800e022 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfd6:	4a25      	ldr	r2, [pc, #148]	@ (800e06c <HAL_UART_Transmit_DMA+0x114>)
 800dfd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfde:	4a24      	ldr	r2, [pc, #144]	@ (800e070 <HAL_UART_Transmit_DMA+0x118>)
 800dfe0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfe6:	4a23      	ldr	r2, [pc, #140]	@ (800e074 <HAL_UART_Transmit_DMA+0x11c>)
 800dfe8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfee:	2200      	movs	r2, #0
 800dff0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dffa:	0019      	movs	r1, r3
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	3328      	adds	r3, #40	@ 0x28
 800e002:	001a      	movs	r2, r3
 800e004:	1dbb      	adds	r3, r7, #6
 800e006:	881b      	ldrh	r3, [r3, #0]
 800e008:	f7fb fabc 	bl	8009584 <HAL_DMA_Start_IT>
 800e00c:	1e03      	subs	r3, r0, #0
 800e00e:	d008      	beq.n	800e022 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2284      	movs	r2, #132	@ 0x84
 800e014:	2110      	movs	r1, #16
 800e016:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2220      	movs	r2, #32
 800e01c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800e01e:	2301      	movs	r3, #1
 800e020:	e01f      	b.n	800e062 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2240      	movs	r2, #64	@ 0x40
 800e028:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e02a:	f3ef 8310 	mrs	r3, PRIMASK
 800e02e:	613b      	str	r3, [r7, #16]
  return(result);
 800e030:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e032:	61fb      	str	r3, [r7, #28]
 800e034:	2301      	movs	r3, #1
 800e036:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	f383 8810 	msr	PRIMASK, r3
}
 800e03e:	46c0      	nop			@ (mov r8, r8)
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	689a      	ldr	r2, [r3, #8]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2180      	movs	r1, #128	@ 0x80
 800e04c:	430a      	orrs	r2, r1
 800e04e:	609a      	str	r2, [r3, #8]
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	f383 8810 	msr	PRIMASK, r3
}
 800e05a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800e05c:	2300      	movs	r3, #0
 800e05e:	e000      	b.n	800e062 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e060:	2302      	movs	r3, #2
  }
}
 800e062:	0018      	movs	r0, r3
 800e064:	46bd      	mov	sp, r7
 800e066:	b008      	add	sp, #32
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	46c0      	nop			@ (mov r8, r8)
 800e06c:	0800f325 	.word	0x0800f325
 800e070:	0800f3c1 	.word	0x0800f3c1
 800e074:	0800f561 	.word	0x0800f561

0800e078 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b088      	sub	sp, #32
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	1dbb      	adds	r3, r7, #6
 800e084:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2280      	movs	r2, #128	@ 0x80
 800e08a:	589b      	ldr	r3, [r3, r2]
 800e08c:	2b20      	cmp	r3, #32
 800e08e:	d14a      	bne.n	800e126 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d003      	beq.n	800e09e <HAL_UART_Receive_DMA+0x26>
 800e096:	1dbb      	adds	r3, r7, #6
 800e098:	881b      	ldrh	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d101      	bne.n	800e0a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e042      	b.n	800e128 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	689a      	ldr	r2, [r3, #8]
 800e0a6:	2380      	movs	r3, #128	@ 0x80
 800e0a8:	015b      	lsls	r3, r3, #5
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d109      	bne.n	800e0c2 <HAL_UART_Receive_DMA+0x4a>
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d105      	bne.n	800e0c2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	4013      	ands	r3, r2
 800e0bc:	d001      	beq.n	800e0c2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e032      	b.n	800e128 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a18      	ldr	r2, [pc, #96]	@ (800e130 <HAL_UART_Receive_DMA+0xb8>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d020      	beq.n	800e114 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	685a      	ldr	r2, [r3, #4]
 800e0d8:	2380      	movs	r3, #128	@ 0x80
 800e0da:	041b      	lsls	r3, r3, #16
 800e0dc:	4013      	ands	r3, r2
 800e0de:	d019      	beq.n	800e114 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800e0e4:	613b      	str	r3, [r7, #16]
  return(result);
 800e0e6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e0e8:	61fb      	str	r3, [r7, #28]
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	f383 8810 	msr	PRIMASK, r3
}
 800e0f4:	46c0      	nop			@ (mov r8, r8)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2180      	movs	r1, #128	@ 0x80
 800e102:	04c9      	lsls	r1, r1, #19
 800e104:	430a      	orrs	r2, r1
 800e106:	601a      	str	r2, [r3, #0]
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	f383 8810 	msr	PRIMASK, r3
}
 800e112:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e114:	1dbb      	adds	r3, r7, #6
 800e116:	881a      	ldrh	r2, [r3, #0]
 800e118:	68b9      	ldr	r1, [r7, #8]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	0018      	movs	r0, r3
 800e11e:	f000 ffd9 	bl	800f0d4 <UART_Start_Receive_DMA>
 800e122:	0003      	movs	r3, r0
 800e124:	e000      	b.n	800e128 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800e126:	2302      	movs	r3, #2
  }
}
 800e128:	0018      	movs	r0, r3
 800e12a:	46bd      	mov	sp, r7
 800e12c:	b008      	add	sp, #32
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	40004800 	.word	0x40004800

0800e134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e134:	b590      	push	{r4, r7, lr}
 800e136:	b0ab      	sub	sp, #172	@ 0xac
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	69db      	ldr	r3, [r3, #28]
 800e142:	22a4      	movs	r2, #164	@ 0xa4
 800e144:	18b9      	adds	r1, r7, r2
 800e146:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	20a0      	movs	r0, #160	@ 0xa0
 800e150:	1839      	adds	r1, r7, r0
 800e152:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	219c      	movs	r1, #156	@ 0x9c
 800e15c:	1879      	adds	r1, r7, r1
 800e15e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e160:	0011      	movs	r1, r2
 800e162:	18bb      	adds	r3, r7, r2
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a9c      	ldr	r2, [pc, #624]	@ (800e3d8 <HAL_UART_IRQHandler+0x2a4>)
 800e168:	4013      	ands	r3, r2
 800e16a:	2298      	movs	r2, #152	@ 0x98
 800e16c:	18bc      	adds	r4, r7, r2
 800e16e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800e170:	18bb      	adds	r3, r7, r2
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d114      	bne.n	800e1a2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e178:	187b      	adds	r3, r7, r1
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2220      	movs	r2, #32
 800e17e:	4013      	ands	r3, r2
 800e180:	d00f      	beq.n	800e1a2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e182:	183b      	adds	r3, r7, r0
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2220      	movs	r2, #32
 800e188:	4013      	ands	r3, r2
 800e18a:	d00a      	beq.n	800e1a2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e190:	2b00      	cmp	r3, #0
 800e192:	d100      	bne.n	800e196 <HAL_UART_IRQHandler+0x62>
 800e194:	e2aa      	b.n	800e6ec <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	0010      	movs	r0, r2
 800e19e:	4798      	blx	r3
      }
      return;
 800e1a0:	e2a4      	b.n	800e6ec <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e1a2:	2398      	movs	r3, #152	@ 0x98
 800e1a4:	18fb      	adds	r3, r7, r3
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d100      	bne.n	800e1ae <HAL_UART_IRQHandler+0x7a>
 800e1ac:	e11a      	b.n	800e3e4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e1ae:	239c      	movs	r3, #156	@ 0x9c
 800e1b0:	18fb      	adds	r3, r7, r3
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	4013      	ands	r3, r2
 800e1b8:	d106      	bne.n	800e1c8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e1ba:	23a0      	movs	r3, #160	@ 0xa0
 800e1bc:	18fb      	adds	r3, r7, r3
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a86      	ldr	r2, [pc, #536]	@ (800e3dc <HAL_UART_IRQHandler+0x2a8>)
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	d100      	bne.n	800e1c8 <HAL_UART_IRQHandler+0x94>
 800e1c6:	e10d      	b.n	800e3e4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e1c8:	23a4      	movs	r3, #164	@ 0xa4
 800e1ca:	18fb      	adds	r3, r7, r3
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	d012      	beq.n	800e1fa <HAL_UART_IRQHandler+0xc6>
 800e1d4:	23a0      	movs	r3, #160	@ 0xa0
 800e1d6:	18fb      	adds	r3, r7, r3
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	2380      	movs	r3, #128	@ 0x80
 800e1dc:	005b      	lsls	r3, r3, #1
 800e1de:	4013      	ands	r3, r2
 800e1e0:	d00b      	beq.n	800e1fa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2284      	movs	r2, #132	@ 0x84
 800e1ee:	589b      	ldr	r3, [r3, r2]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2184      	movs	r1, #132	@ 0x84
 800e1f8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1fa:	23a4      	movs	r3, #164	@ 0xa4
 800e1fc:	18fb      	adds	r3, r7, r3
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2202      	movs	r2, #2
 800e202:	4013      	ands	r3, r2
 800e204:	d011      	beq.n	800e22a <HAL_UART_IRQHandler+0xf6>
 800e206:	239c      	movs	r3, #156	@ 0x9c
 800e208:	18fb      	adds	r3, r7, r3
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2201      	movs	r2, #1
 800e20e:	4013      	ands	r3, r2
 800e210:	d00b      	beq.n	800e22a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2202      	movs	r2, #2
 800e218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2284      	movs	r2, #132	@ 0x84
 800e21e:	589b      	ldr	r3, [r3, r2]
 800e220:	2204      	movs	r2, #4
 800e222:	431a      	orrs	r2, r3
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2184      	movs	r1, #132	@ 0x84
 800e228:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e22a:	23a4      	movs	r3, #164	@ 0xa4
 800e22c:	18fb      	adds	r3, r7, r3
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2204      	movs	r2, #4
 800e232:	4013      	ands	r3, r2
 800e234:	d011      	beq.n	800e25a <HAL_UART_IRQHandler+0x126>
 800e236:	239c      	movs	r3, #156	@ 0x9c
 800e238:	18fb      	adds	r3, r7, r3
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2201      	movs	r2, #1
 800e23e:	4013      	ands	r3, r2
 800e240:	d00b      	beq.n	800e25a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2204      	movs	r2, #4
 800e248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2284      	movs	r2, #132	@ 0x84
 800e24e:	589b      	ldr	r3, [r3, r2]
 800e250:	2202      	movs	r2, #2
 800e252:	431a      	orrs	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2184      	movs	r1, #132	@ 0x84
 800e258:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e25a:	23a4      	movs	r3, #164	@ 0xa4
 800e25c:	18fb      	adds	r3, r7, r3
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2208      	movs	r2, #8
 800e262:	4013      	ands	r3, r2
 800e264:	d017      	beq.n	800e296 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e266:	23a0      	movs	r3, #160	@ 0xa0
 800e268:	18fb      	adds	r3, r7, r3
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2220      	movs	r2, #32
 800e26e:	4013      	ands	r3, r2
 800e270:	d105      	bne.n	800e27e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e272:	239c      	movs	r3, #156	@ 0x9c
 800e274:	18fb      	adds	r3, r7, r3
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2201      	movs	r2, #1
 800e27a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e27c:	d00b      	beq.n	800e296 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2208      	movs	r2, #8
 800e284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2284      	movs	r2, #132	@ 0x84
 800e28a:	589b      	ldr	r3, [r3, r2]
 800e28c:	2208      	movs	r2, #8
 800e28e:	431a      	orrs	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2184      	movs	r1, #132	@ 0x84
 800e294:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e296:	23a4      	movs	r3, #164	@ 0xa4
 800e298:	18fb      	adds	r3, r7, r3
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	2380      	movs	r3, #128	@ 0x80
 800e29e:	011b      	lsls	r3, r3, #4
 800e2a0:	4013      	ands	r3, r2
 800e2a2:	d013      	beq.n	800e2cc <HAL_UART_IRQHandler+0x198>
 800e2a4:	23a0      	movs	r3, #160	@ 0xa0
 800e2a6:	18fb      	adds	r3, r7, r3
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	2380      	movs	r3, #128	@ 0x80
 800e2ac:	04db      	lsls	r3, r3, #19
 800e2ae:	4013      	ands	r3, r2
 800e2b0:	d00c      	beq.n	800e2cc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2280      	movs	r2, #128	@ 0x80
 800e2b8:	0112      	lsls	r2, r2, #4
 800e2ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2284      	movs	r2, #132	@ 0x84
 800e2c0:	589b      	ldr	r3, [r3, r2]
 800e2c2:	2220      	movs	r2, #32
 800e2c4:	431a      	orrs	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2184      	movs	r1, #132	@ 0x84
 800e2ca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2284      	movs	r2, #132	@ 0x84
 800e2d0:	589b      	ldr	r3, [r3, r2]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d100      	bne.n	800e2d8 <HAL_UART_IRQHandler+0x1a4>
 800e2d6:	e20b      	b.n	800e6f0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e2d8:	23a4      	movs	r3, #164	@ 0xa4
 800e2da:	18fb      	adds	r3, r7, r3
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2220      	movs	r2, #32
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	d00e      	beq.n	800e302 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e2e4:	23a0      	movs	r3, #160	@ 0xa0
 800e2e6:	18fb      	adds	r3, r7, r3
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2220      	movs	r2, #32
 800e2ec:	4013      	ands	r3, r2
 800e2ee:	d008      	beq.n	800e302 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d004      	beq.n	800e302 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	0010      	movs	r0, r2
 800e300:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2284      	movs	r2, #132	@ 0x84
 800e306:	589b      	ldr	r3, [r3, r2]
 800e308:	2194      	movs	r1, #148	@ 0x94
 800e30a:	187a      	adds	r2, r7, r1
 800e30c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	2240      	movs	r2, #64	@ 0x40
 800e316:	4013      	ands	r3, r2
 800e318:	2b40      	cmp	r3, #64	@ 0x40
 800e31a:	d004      	beq.n	800e326 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e31c:	187b      	adds	r3, r7, r1
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2228      	movs	r2, #40	@ 0x28
 800e322:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e324:	d04b      	beq.n	800e3be <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	0018      	movs	r0, r3
 800e32a:	f000 ff97 	bl	800f25c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	2240      	movs	r2, #64	@ 0x40
 800e336:	4013      	ands	r3, r2
 800e338:	2b40      	cmp	r3, #64	@ 0x40
 800e33a:	d139      	bne.n	800e3b0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e33c:	f3ef 8310 	mrs	r3, PRIMASK
 800e340:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800e342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e344:	2090      	movs	r0, #144	@ 0x90
 800e346:	183a      	adds	r2, r7, r0
 800e348:	6013      	str	r3, [r2, #0]
 800e34a:	2301      	movs	r3, #1
 800e34c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e34e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e350:	f383 8810 	msr	PRIMASK, r3
}
 800e354:	46c0      	nop			@ (mov r8, r8)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	689a      	ldr	r2, [r3, #8]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2140      	movs	r1, #64	@ 0x40
 800e362:	438a      	bics	r2, r1
 800e364:	609a      	str	r2, [r3, #8]
 800e366:	183b      	adds	r3, r7, r0
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e36c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e36e:	f383 8810 	msr	PRIMASK, r3
}
 800e372:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d012      	beq.n	800e3a2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e380:	4a17      	ldr	r2, [pc, #92]	@ (800e3e0 <HAL_UART_IRQHandler+0x2ac>)
 800e382:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e388:	0018      	movs	r0, r3
 800e38a:	f7fb f9a1 	bl	80096d0 <HAL_DMA_Abort_IT>
 800e38e:	1e03      	subs	r3, r0, #0
 800e390:	d020      	beq.n	800e3d4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e39c:	0018      	movs	r0, r3
 800e39e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3a0:	e018      	b.n	800e3d4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2298      	movs	r2, #152	@ 0x98
 800e3a6:	589b      	ldr	r3, [r3, r2]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	0010      	movs	r0, r2
 800e3ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3ae:	e011      	b.n	800e3d4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2298      	movs	r2, #152	@ 0x98
 800e3b4:	589b      	ldr	r3, [r3, r2]
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	0010      	movs	r0, r2
 800e3ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3bc:	e00a      	b.n	800e3d4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2298      	movs	r2, #152	@ 0x98
 800e3c2:	589b      	ldr	r3, [r3, r2]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	0010      	movs	r0, r2
 800e3c8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2284      	movs	r2, #132	@ 0x84
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800e3d2:	e18d      	b.n	800e6f0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3d4:	46c0      	nop			@ (mov r8, r8)
    return;
 800e3d6:	e18b      	b.n	800e6f0 <HAL_UART_IRQHandler+0x5bc>
 800e3d8:	0000080f 	.word	0x0000080f
 800e3dc:	04000120 	.word	0x04000120
 800e3e0:	0800f5e9 	.word	0x0800f5e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d000      	beq.n	800e3ee <HAL_UART_IRQHandler+0x2ba>
 800e3ec:	e13d      	b.n	800e66a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e3ee:	23a4      	movs	r3, #164	@ 0xa4
 800e3f0:	18fb      	adds	r3, r7, r3
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2210      	movs	r2, #16
 800e3f6:	4013      	ands	r3, r2
 800e3f8:	d100      	bne.n	800e3fc <HAL_UART_IRQHandler+0x2c8>
 800e3fa:	e136      	b.n	800e66a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e3fc:	23a0      	movs	r3, #160	@ 0xa0
 800e3fe:	18fb      	adds	r3, r7, r3
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2210      	movs	r2, #16
 800e404:	4013      	ands	r3, r2
 800e406:	d100      	bne.n	800e40a <HAL_UART_IRQHandler+0x2d6>
 800e408:	e12f      	b.n	800e66a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2210      	movs	r2, #16
 800e410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	2240      	movs	r2, #64	@ 0x40
 800e41a:	4013      	ands	r3, r2
 800e41c:	2b40      	cmp	r3, #64	@ 0x40
 800e41e:	d000      	beq.n	800e422 <HAL_UART_IRQHandler+0x2ee>
 800e420:	e0a2      	b.n	800e568 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	685a      	ldr	r2, [r3, #4]
 800e42a:	217e      	movs	r1, #126	@ 0x7e
 800e42c:	187b      	adds	r3, r7, r1
 800e42e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800e430:	187b      	adds	r3, r7, r1
 800e432:	881b      	ldrh	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d100      	bne.n	800e43a <HAL_UART_IRQHandler+0x306>
 800e438:	e15c      	b.n	800e6f4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2258      	movs	r2, #88	@ 0x58
 800e43e:	5a9b      	ldrh	r3, [r3, r2]
 800e440:	187a      	adds	r2, r7, r1
 800e442:	8812      	ldrh	r2, [r2, #0]
 800e444:	429a      	cmp	r2, r3
 800e446:	d300      	bcc.n	800e44a <HAL_UART_IRQHandler+0x316>
 800e448:	e154      	b.n	800e6f4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	187a      	adds	r2, r7, r1
 800e44e:	215a      	movs	r1, #90	@ 0x5a
 800e450:	8812      	ldrh	r2, [r2, #0]
 800e452:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2220      	movs	r2, #32
 800e45e:	4013      	ands	r3, r2
 800e460:	d16f      	bne.n	800e542 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e462:	f3ef 8310 	mrs	r3, PRIMASK
 800e466:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e46a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e46c:	2301      	movs	r3, #1
 800e46e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e472:	f383 8810 	msr	PRIMASK, r3
}
 800e476:	46c0      	nop			@ (mov r8, r8)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	49a0      	ldr	r1, [pc, #640]	@ (800e704 <HAL_UART_IRQHandler+0x5d0>)
 800e484:	400a      	ands	r2, r1
 800e486:	601a      	str	r2, [r3, #0]
 800e488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e48a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e48e:	f383 8810 	msr	PRIMASK, r3
}
 800e492:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e494:	f3ef 8310 	mrs	r3, PRIMASK
 800e498:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800e49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e49c:	677b      	str	r3, [r7, #116]	@ 0x74
 800e49e:	2301      	movs	r3, #1
 800e4a0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4a4:	f383 8810 	msr	PRIMASK, r3
}
 800e4a8:	46c0      	nop			@ (mov r8, r8)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	689a      	ldr	r2, [r3, #8]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	2101      	movs	r1, #1
 800e4b6:	438a      	bics	r2, r1
 800e4b8:	609a      	str	r2, [r3, #8]
 800e4ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e4bc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4c0:	f383 8810 	msr	PRIMASK, r3
}
 800e4c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e4ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800e4cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4ce:	673b      	str	r3, [r7, #112]	@ 0x70
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4d6:	f383 8810 	msr	PRIMASK, r3
}
 800e4da:	46c0      	nop			@ (mov r8, r8)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	689a      	ldr	r2, [r3, #8]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2140      	movs	r1, #64	@ 0x40
 800e4e8:	438a      	bics	r2, r1
 800e4ea:	609a      	str	r2, [r3, #8]
 800e4ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e4ee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4f2:	f383 8810 	msr	PRIMASK, r3
}
 800e4f6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2280      	movs	r2, #128	@ 0x80
 800e4fc:	2120      	movs	r1, #32
 800e4fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e506:	f3ef 8310 	mrs	r3, PRIMASK
 800e50a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800e50c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e50e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e510:	2301      	movs	r3, #1
 800e512:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e516:	f383 8810 	msr	PRIMASK, r3
}
 800e51a:	46c0      	nop			@ (mov r8, r8)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2110      	movs	r1, #16
 800e528:	438a      	bics	r2, r1
 800e52a:	601a      	str	r2, [r3, #0]
 800e52c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e52e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e532:	f383 8810 	msr	PRIMASK, r3
}
 800e536:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e53c:	0018      	movs	r0, r3
 800e53e:	f7fb f887 	bl	8009650 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2202      	movs	r2, #2
 800e546:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	22ac      	movs	r2, #172	@ 0xac
 800e54c:	589b      	ldr	r3, [r3, r2]
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	2158      	movs	r1, #88	@ 0x58
 800e552:	5a51      	ldrh	r1, [r2, r1]
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	205a      	movs	r0, #90	@ 0x5a
 800e558:	5a12      	ldrh	r2, [r2, r0]
 800e55a:	b292      	uxth	r2, r2
 800e55c:	1a8a      	subs	r2, r1, r2
 800e55e:	b291      	uxth	r1, r2
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	0010      	movs	r0, r2
 800e564:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e566:	e0c5      	b.n	800e6f4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2258      	movs	r2, #88	@ 0x58
 800e56c:	5a99      	ldrh	r1, [r3, r2]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	225a      	movs	r2, #90	@ 0x5a
 800e572:	5a9b      	ldrh	r3, [r3, r2]
 800e574:	b29a      	uxth	r2, r3
 800e576:	208e      	movs	r0, #142	@ 0x8e
 800e578:	183b      	adds	r3, r7, r0
 800e57a:	1a8a      	subs	r2, r1, r2
 800e57c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	225a      	movs	r2, #90	@ 0x5a
 800e582:	5a9b      	ldrh	r3, [r3, r2]
 800e584:	b29b      	uxth	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d100      	bne.n	800e58c <HAL_UART_IRQHandler+0x458>
 800e58a:	e0b5      	b.n	800e6f8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800e58c:	183b      	adds	r3, r7, r0
 800e58e:	881b      	ldrh	r3, [r3, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d100      	bne.n	800e596 <HAL_UART_IRQHandler+0x462>
 800e594:	e0b0      	b.n	800e6f8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e596:	f3ef 8310 	mrs	r3, PRIMASK
 800e59a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e59c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e59e:	2488      	movs	r4, #136	@ 0x88
 800e5a0:	193a      	adds	r2, r7, r4
 800e5a2:	6013      	str	r3, [r2, #0]
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	f383 8810 	msr	PRIMASK, r3
}
 800e5ae:	46c0      	nop			@ (mov r8, r8)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4953      	ldr	r1, [pc, #332]	@ (800e708 <HAL_UART_IRQHandler+0x5d4>)
 800e5bc:	400a      	ands	r2, r1
 800e5be:	601a      	str	r2, [r3, #0]
 800e5c0:	193b      	adds	r3, r7, r4
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	f383 8810 	msr	PRIMASK, r3
}
 800e5cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5ce:	f3ef 8310 	mrs	r3, PRIMASK
 800e5d2:	61bb      	str	r3, [r7, #24]
  return(result);
 800e5d4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5d6:	2484      	movs	r4, #132	@ 0x84
 800e5d8:	193a      	adds	r2, r7, r4
 800e5da:	6013      	str	r3, [r2, #0]
 800e5dc:	2301      	movs	r3, #1
 800e5de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	f383 8810 	msr	PRIMASK, r3
}
 800e5e6:	46c0      	nop			@ (mov r8, r8)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	689a      	ldr	r2, [r3, #8]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2101      	movs	r1, #1
 800e5f4:	438a      	bics	r2, r1
 800e5f6:	609a      	str	r2, [r3, #8]
 800e5f8:	193b      	adds	r3, r7, r4
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5fe:	6a3b      	ldr	r3, [r7, #32]
 800e600:	f383 8810 	msr	PRIMASK, r3
}
 800e604:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2280      	movs	r2, #128	@ 0x80
 800e60a:	2120      	movs	r1, #32
 800e60c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e61a:	f3ef 8310 	mrs	r3, PRIMASK
 800e61e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e622:	2480      	movs	r4, #128	@ 0x80
 800e624:	193a      	adds	r2, r7, r4
 800e626:	6013      	str	r3, [r2, #0]
 800e628:	2301      	movs	r3, #1
 800e62a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e62e:	f383 8810 	msr	PRIMASK, r3
}
 800e632:	46c0      	nop			@ (mov r8, r8)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2110      	movs	r1, #16
 800e640:	438a      	bics	r2, r1
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	193b      	adds	r3, r7, r4
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e64c:	f383 8810 	msr	PRIMASK, r3
}
 800e650:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2202      	movs	r2, #2
 800e656:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	22ac      	movs	r2, #172	@ 0xac
 800e65c:	589b      	ldr	r3, [r3, r2]
 800e65e:	183a      	adds	r2, r7, r0
 800e660:	8811      	ldrh	r1, [r2, #0]
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	0010      	movs	r0, r2
 800e666:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e668:	e046      	b.n	800e6f8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e66a:	23a4      	movs	r3, #164	@ 0xa4
 800e66c:	18fb      	adds	r3, r7, r3
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	2380      	movs	r3, #128	@ 0x80
 800e672:	035b      	lsls	r3, r3, #13
 800e674:	4013      	ands	r3, r2
 800e676:	d012      	beq.n	800e69e <HAL_UART_IRQHandler+0x56a>
 800e678:	239c      	movs	r3, #156	@ 0x9c
 800e67a:	18fb      	adds	r3, r7, r3
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	2380      	movs	r3, #128	@ 0x80
 800e680:	03db      	lsls	r3, r3, #15
 800e682:	4013      	ands	r3, r2
 800e684:	d00b      	beq.n	800e69e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2280      	movs	r2, #128	@ 0x80
 800e68c:	0352      	lsls	r2, r2, #13
 800e68e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	22a8      	movs	r2, #168	@ 0xa8
 800e694:	589b      	ldr	r3, [r3, r2]
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	0010      	movs	r0, r2
 800e69a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e69c:	e02f      	b.n	800e6fe <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e69e:	23a4      	movs	r3, #164	@ 0xa4
 800e6a0:	18fb      	adds	r3, r7, r3
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2280      	movs	r2, #128	@ 0x80
 800e6a6:	4013      	ands	r3, r2
 800e6a8:	d00f      	beq.n	800e6ca <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e6aa:	23a0      	movs	r3, #160	@ 0xa0
 800e6ac:	18fb      	adds	r3, r7, r3
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2280      	movs	r2, #128	@ 0x80
 800e6b2:	4013      	ands	r3, r2
 800e6b4:	d009      	beq.n	800e6ca <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d01e      	beq.n	800e6fc <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	0010      	movs	r0, r2
 800e6c6:	4798      	blx	r3
    }
    return;
 800e6c8:	e018      	b.n	800e6fc <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e6ca:	23a4      	movs	r3, #164	@ 0xa4
 800e6cc:	18fb      	adds	r3, r7, r3
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2240      	movs	r2, #64	@ 0x40
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	d013      	beq.n	800e6fe <HAL_UART_IRQHandler+0x5ca>
 800e6d6:	23a0      	movs	r3, #160	@ 0xa0
 800e6d8:	18fb      	adds	r3, r7, r3
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2240      	movs	r2, #64	@ 0x40
 800e6de:	4013      	ands	r3, r2
 800e6e0:	d00d      	beq.n	800e6fe <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	0018      	movs	r0, r3
 800e6e6:	f000 ff98 	bl	800f61a <UART_EndTransmit_IT>
    return;
 800e6ea:	e008      	b.n	800e6fe <HAL_UART_IRQHandler+0x5ca>
      return;
 800e6ec:	46c0      	nop			@ (mov r8, r8)
 800e6ee:	e006      	b.n	800e6fe <HAL_UART_IRQHandler+0x5ca>
    return;
 800e6f0:	46c0      	nop			@ (mov r8, r8)
 800e6f2:	e004      	b.n	800e6fe <HAL_UART_IRQHandler+0x5ca>
      return;
 800e6f4:	46c0      	nop			@ (mov r8, r8)
 800e6f6:	e002      	b.n	800e6fe <HAL_UART_IRQHandler+0x5ca>
      return;
 800e6f8:	46c0      	nop			@ (mov r8, r8)
 800e6fa:	e000      	b.n	800e6fe <HAL_UART_IRQHandler+0x5ca>
    return;
 800e6fc:	46c0      	nop			@ (mov r8, r8)
  }

}
 800e6fe:	46bd      	mov	sp, r7
 800e700:	b02b      	add	sp, #172	@ 0xac
 800e702:	bd90      	pop	{r4, r7, pc}
 800e704:	fffffeff 	.word	0xfffffeff
 800e708:	fffffedf 	.word	0xfffffedf

0800e70c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e714:	46c0      	nop			@ (mov r8, r8)
 800e716:	46bd      	mov	sp, r7
 800e718:	b002      	add	sp, #8
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e724:	46c0      	nop			@ (mov r8, r8)
 800e726:	46bd      	mov	sp, r7
 800e728:	b002      	add	sp, #8
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e734:	46c0      	nop			@ (mov r8, r8)
 800e736:	46bd      	mov	sp, r7
 800e738:	b002      	add	sp, #8
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800e744:	46c0      	nop			@ (mov r8, r8)
 800e746:	46bd      	mov	sp, r7
 800e748:	b002      	add	sp, #8
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800e754:	46c0      	nop			@ (mov r8, r8)
 800e756:	46bd      	mov	sp, r7
 800e758:	b002      	add	sp, #8
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e764:	46c0      	nop			@ (mov r8, r8)
 800e766:	46bd      	mov	sp, r7
 800e768:	b002      	add	sp, #8
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	000a      	movs	r2, r1
 800e776:	1cbb      	adds	r3, r7, #2
 800e778:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e77a:	46c0      	nop			@ (mov r8, r8)
 800e77c:	46bd      	mov	sp, r7
 800e77e:	b002      	add	sp, #8
 800e780:	bd80      	pop	{r7, pc}
	...

0800e784 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2188      	movs	r1, #136	@ 0x88
 800e790:	4a14      	ldr	r2, [pc, #80]	@ (800e7e4 <UART_InitCallbacksToDefault+0x60>)
 800e792:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	218c      	movs	r1, #140	@ 0x8c
 800e798:	4a13      	ldr	r2, [pc, #76]	@ (800e7e8 <UART_InitCallbacksToDefault+0x64>)
 800e79a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2190      	movs	r1, #144	@ 0x90
 800e7a0:	4a12      	ldr	r2, [pc, #72]	@ (800e7ec <UART_InitCallbacksToDefault+0x68>)
 800e7a2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2194      	movs	r1, #148	@ 0x94
 800e7a8:	4a11      	ldr	r2, [pc, #68]	@ (800e7f0 <UART_InitCallbacksToDefault+0x6c>)
 800e7aa:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2198      	movs	r1, #152	@ 0x98
 800e7b0:	4a10      	ldr	r2, [pc, #64]	@ (800e7f4 <UART_InitCallbacksToDefault+0x70>)
 800e7b2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	219c      	movs	r1, #156	@ 0x9c
 800e7b8:	4a0f      	ldr	r2, [pc, #60]	@ (800e7f8 <UART_InitCallbacksToDefault+0x74>)
 800e7ba:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	21a0      	movs	r1, #160	@ 0xa0
 800e7c0:	4a0e      	ldr	r2, [pc, #56]	@ (800e7fc <UART_InitCallbacksToDefault+0x78>)
 800e7c2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	21a4      	movs	r1, #164	@ 0xa4
 800e7c8:	4a0d      	ldr	r2, [pc, #52]	@ (800e800 <UART_InitCallbacksToDefault+0x7c>)
 800e7ca:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	21a8      	movs	r1, #168	@ 0xa8
 800e7d0:	4a0c      	ldr	r2, [pc, #48]	@ (800e804 <UART_InitCallbacksToDefault+0x80>)
 800e7d2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	21ac      	movs	r1, #172	@ 0xac
 800e7d8:	4a0b      	ldr	r2, [pc, #44]	@ (800e808 <UART_InitCallbacksToDefault+0x84>)
 800e7da:	505a      	str	r2, [r3, r1]

}
 800e7dc:	46c0      	nop			@ (mov r8, r8)
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	b002      	add	sp, #8
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	0800e71d 	.word	0x0800e71d
 800e7e8:	0800e70d 	.word	0x0800e70d
 800e7ec:	0800e72d 	.word	0x0800e72d
 800e7f0:	08003819 	.word	0x08003819
 800e7f4:	08003855 	.word	0x08003855
 800e7f8:	0800e73d 	.word	0x0800e73d
 800e7fc:	0800e74d 	.word	0x0800e74d
 800e800:	0800e75d 	.word	0x0800e75d
 800e804:	0800f675 	.word	0x0800f675
 800e808:	0800e76d 	.word	0x0800e76d

0800e80c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e80c:	b5b0      	push	{r4, r5, r7, lr}
 800e80e:	b08e      	sub	sp, #56	@ 0x38
 800e810:	af00      	add	r7, sp, #0
 800e812:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e814:	231a      	movs	r3, #26
 800e816:	2218      	movs	r2, #24
 800e818:	189b      	adds	r3, r3, r2
 800e81a:	19db      	adds	r3, r3, r7
 800e81c:	2200      	movs	r2, #0
 800e81e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	689a      	ldr	r2, [r3, #8]
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	691b      	ldr	r3, [r3, #16]
 800e828:	431a      	orrs	r2, r3
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	431a      	orrs	r2, r3
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	69db      	ldr	r3, [r3, #28]
 800e834:	4313      	orrs	r3, r2
 800e836:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4ac3      	ldr	r2, [pc, #780]	@ (800eb4c <UART_SetConfig+0x340>)
 800e840:	4013      	ands	r3, r2
 800e842:	0019      	movs	r1, r3
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e84a:	430a      	orrs	r2, r1
 800e84c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	4abe      	ldr	r2, [pc, #760]	@ (800eb50 <UART_SetConfig+0x344>)
 800e856:	4013      	ands	r3, r2
 800e858:	0019      	movs	r1, r3
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	68da      	ldr	r2, [r3, #12]
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	430a      	orrs	r2, r1
 800e864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4ab8      	ldr	r2, [pc, #736]	@ (800eb54 <UART_SetConfig+0x348>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d004      	beq.n	800e880 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	6a1b      	ldr	r3, [r3, #32]
 800e87a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e87c:	4313      	orrs	r3, r2
 800e87e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	4ab4      	ldr	r2, [pc, #720]	@ (800eb58 <UART_SetConfig+0x34c>)
 800e888:	4013      	ands	r3, r2
 800e88a:	0019      	movs	r1, r3
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e892:	430a      	orrs	r2, r1
 800e894:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4ab0      	ldr	r2, [pc, #704]	@ (800eb5c <UART_SetConfig+0x350>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d131      	bne.n	800e904 <UART_SetConfig+0xf8>
 800e8a0:	4baf      	ldr	r3, [pc, #700]	@ (800eb60 <UART_SetConfig+0x354>)
 800e8a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8a4:	2203      	movs	r2, #3
 800e8a6:	4013      	ands	r3, r2
 800e8a8:	2b03      	cmp	r3, #3
 800e8aa:	d01d      	beq.n	800e8e8 <UART_SetConfig+0xdc>
 800e8ac:	d823      	bhi.n	800e8f6 <UART_SetConfig+0xea>
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d00c      	beq.n	800e8cc <UART_SetConfig+0xc0>
 800e8b2:	d820      	bhi.n	800e8f6 <UART_SetConfig+0xea>
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d002      	beq.n	800e8be <UART_SetConfig+0xb2>
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d00e      	beq.n	800e8da <UART_SetConfig+0xce>
 800e8bc:	e01b      	b.n	800e8f6 <UART_SetConfig+0xea>
 800e8be:	231b      	movs	r3, #27
 800e8c0:	2218      	movs	r2, #24
 800e8c2:	189b      	adds	r3, r3, r2
 800e8c4:	19db      	adds	r3, r3, r7
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	701a      	strb	r2, [r3, #0]
 800e8ca:	e0b4      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e8cc:	231b      	movs	r3, #27
 800e8ce:	2218      	movs	r2, #24
 800e8d0:	189b      	adds	r3, r3, r2
 800e8d2:	19db      	adds	r3, r3, r7
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	701a      	strb	r2, [r3, #0]
 800e8d8:	e0ad      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e8da:	231b      	movs	r3, #27
 800e8dc:	2218      	movs	r2, #24
 800e8de:	189b      	adds	r3, r3, r2
 800e8e0:	19db      	adds	r3, r3, r7
 800e8e2:	2204      	movs	r2, #4
 800e8e4:	701a      	strb	r2, [r3, #0]
 800e8e6:	e0a6      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e8e8:	231b      	movs	r3, #27
 800e8ea:	2218      	movs	r2, #24
 800e8ec:	189b      	adds	r3, r3, r2
 800e8ee:	19db      	adds	r3, r3, r7
 800e8f0:	2208      	movs	r2, #8
 800e8f2:	701a      	strb	r2, [r3, #0]
 800e8f4:	e09f      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e8f6:	231b      	movs	r3, #27
 800e8f8:	2218      	movs	r2, #24
 800e8fa:	189b      	adds	r3, r3, r2
 800e8fc:	19db      	adds	r3, r3, r7
 800e8fe:	2210      	movs	r2, #16
 800e900:	701a      	strb	r2, [r3, #0]
 800e902:	e098      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4a96      	ldr	r2, [pc, #600]	@ (800eb64 <UART_SetConfig+0x358>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d131      	bne.n	800e972 <UART_SetConfig+0x166>
 800e90e:	4b94      	ldr	r3, [pc, #592]	@ (800eb60 <UART_SetConfig+0x354>)
 800e910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e912:	220c      	movs	r2, #12
 800e914:	4013      	ands	r3, r2
 800e916:	2b0c      	cmp	r3, #12
 800e918:	d01d      	beq.n	800e956 <UART_SetConfig+0x14a>
 800e91a:	d823      	bhi.n	800e964 <UART_SetConfig+0x158>
 800e91c:	2b08      	cmp	r3, #8
 800e91e:	d00c      	beq.n	800e93a <UART_SetConfig+0x12e>
 800e920:	d820      	bhi.n	800e964 <UART_SetConfig+0x158>
 800e922:	2b00      	cmp	r3, #0
 800e924:	d002      	beq.n	800e92c <UART_SetConfig+0x120>
 800e926:	2b04      	cmp	r3, #4
 800e928:	d00e      	beq.n	800e948 <UART_SetConfig+0x13c>
 800e92a:	e01b      	b.n	800e964 <UART_SetConfig+0x158>
 800e92c:	231b      	movs	r3, #27
 800e92e:	2218      	movs	r2, #24
 800e930:	189b      	adds	r3, r3, r2
 800e932:	19db      	adds	r3, r3, r7
 800e934:	2200      	movs	r2, #0
 800e936:	701a      	strb	r2, [r3, #0]
 800e938:	e07d      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e93a:	231b      	movs	r3, #27
 800e93c:	2218      	movs	r2, #24
 800e93e:	189b      	adds	r3, r3, r2
 800e940:	19db      	adds	r3, r3, r7
 800e942:	2202      	movs	r2, #2
 800e944:	701a      	strb	r2, [r3, #0]
 800e946:	e076      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e948:	231b      	movs	r3, #27
 800e94a:	2218      	movs	r2, #24
 800e94c:	189b      	adds	r3, r3, r2
 800e94e:	19db      	adds	r3, r3, r7
 800e950:	2204      	movs	r2, #4
 800e952:	701a      	strb	r2, [r3, #0]
 800e954:	e06f      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e956:	231b      	movs	r3, #27
 800e958:	2218      	movs	r2, #24
 800e95a:	189b      	adds	r3, r3, r2
 800e95c:	19db      	adds	r3, r3, r7
 800e95e:	2208      	movs	r2, #8
 800e960:	701a      	strb	r2, [r3, #0]
 800e962:	e068      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e964:	231b      	movs	r3, #27
 800e966:	2218      	movs	r2, #24
 800e968:	189b      	adds	r3, r3, r2
 800e96a:	19db      	adds	r3, r3, r7
 800e96c:	2210      	movs	r2, #16
 800e96e:	701a      	strb	r2, [r3, #0]
 800e970:	e061      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a7c      	ldr	r2, [pc, #496]	@ (800eb68 <UART_SetConfig+0x35c>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d106      	bne.n	800e98a <UART_SetConfig+0x17e>
 800e97c:	231b      	movs	r3, #27
 800e97e:	2218      	movs	r2, #24
 800e980:	189b      	adds	r3, r3, r2
 800e982:	19db      	adds	r3, r3, r7
 800e984:	2200      	movs	r2, #0
 800e986:	701a      	strb	r2, [r3, #0]
 800e988:	e055      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a77      	ldr	r2, [pc, #476]	@ (800eb6c <UART_SetConfig+0x360>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d106      	bne.n	800e9a2 <UART_SetConfig+0x196>
 800e994:	231b      	movs	r3, #27
 800e996:	2218      	movs	r2, #24
 800e998:	189b      	adds	r3, r3, r2
 800e99a:	19db      	adds	r3, r3, r7
 800e99c:	2200      	movs	r2, #0
 800e99e:	701a      	strb	r2, [r3, #0]
 800e9a0:	e049      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a6b      	ldr	r2, [pc, #428]	@ (800eb54 <UART_SetConfig+0x348>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d13e      	bne.n	800ea2a <UART_SetConfig+0x21e>
 800e9ac:	4b6c      	ldr	r3, [pc, #432]	@ (800eb60 <UART_SetConfig+0x354>)
 800e9ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e9b0:	23c0      	movs	r3, #192	@ 0xc0
 800e9b2:	011b      	lsls	r3, r3, #4
 800e9b4:	4013      	ands	r3, r2
 800e9b6:	22c0      	movs	r2, #192	@ 0xc0
 800e9b8:	0112      	lsls	r2, r2, #4
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d027      	beq.n	800ea0e <UART_SetConfig+0x202>
 800e9be:	22c0      	movs	r2, #192	@ 0xc0
 800e9c0:	0112      	lsls	r2, r2, #4
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d82a      	bhi.n	800ea1c <UART_SetConfig+0x210>
 800e9c6:	2280      	movs	r2, #128	@ 0x80
 800e9c8:	0112      	lsls	r2, r2, #4
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d011      	beq.n	800e9f2 <UART_SetConfig+0x1e6>
 800e9ce:	2280      	movs	r2, #128	@ 0x80
 800e9d0:	0112      	lsls	r2, r2, #4
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d822      	bhi.n	800ea1c <UART_SetConfig+0x210>
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d004      	beq.n	800e9e4 <UART_SetConfig+0x1d8>
 800e9da:	2280      	movs	r2, #128	@ 0x80
 800e9dc:	00d2      	lsls	r2, r2, #3
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d00e      	beq.n	800ea00 <UART_SetConfig+0x1f4>
 800e9e2:	e01b      	b.n	800ea1c <UART_SetConfig+0x210>
 800e9e4:	231b      	movs	r3, #27
 800e9e6:	2218      	movs	r2, #24
 800e9e8:	189b      	adds	r3, r3, r2
 800e9ea:	19db      	adds	r3, r3, r7
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	701a      	strb	r2, [r3, #0]
 800e9f0:	e021      	b.n	800ea36 <UART_SetConfig+0x22a>
 800e9f2:	231b      	movs	r3, #27
 800e9f4:	2218      	movs	r2, #24
 800e9f6:	189b      	adds	r3, r3, r2
 800e9f8:	19db      	adds	r3, r3, r7
 800e9fa:	2202      	movs	r2, #2
 800e9fc:	701a      	strb	r2, [r3, #0]
 800e9fe:	e01a      	b.n	800ea36 <UART_SetConfig+0x22a>
 800ea00:	231b      	movs	r3, #27
 800ea02:	2218      	movs	r2, #24
 800ea04:	189b      	adds	r3, r3, r2
 800ea06:	19db      	adds	r3, r3, r7
 800ea08:	2204      	movs	r2, #4
 800ea0a:	701a      	strb	r2, [r3, #0]
 800ea0c:	e013      	b.n	800ea36 <UART_SetConfig+0x22a>
 800ea0e:	231b      	movs	r3, #27
 800ea10:	2218      	movs	r2, #24
 800ea12:	189b      	adds	r3, r3, r2
 800ea14:	19db      	adds	r3, r3, r7
 800ea16:	2208      	movs	r2, #8
 800ea18:	701a      	strb	r2, [r3, #0]
 800ea1a:	e00c      	b.n	800ea36 <UART_SetConfig+0x22a>
 800ea1c:	231b      	movs	r3, #27
 800ea1e:	2218      	movs	r2, #24
 800ea20:	189b      	adds	r3, r3, r2
 800ea22:	19db      	adds	r3, r3, r7
 800ea24:	2210      	movs	r2, #16
 800ea26:	701a      	strb	r2, [r3, #0]
 800ea28:	e005      	b.n	800ea36 <UART_SetConfig+0x22a>
 800ea2a:	231b      	movs	r3, #27
 800ea2c:	2218      	movs	r2, #24
 800ea2e:	189b      	adds	r3, r3, r2
 800ea30:	19db      	adds	r3, r3, r7
 800ea32:	2210      	movs	r2, #16
 800ea34:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a46      	ldr	r2, [pc, #280]	@ (800eb54 <UART_SetConfig+0x348>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d000      	beq.n	800ea42 <UART_SetConfig+0x236>
 800ea40:	e09a      	b.n	800eb78 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ea42:	231b      	movs	r3, #27
 800ea44:	2218      	movs	r2, #24
 800ea46:	189b      	adds	r3, r3, r2
 800ea48:	19db      	adds	r3, r3, r7
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	2b08      	cmp	r3, #8
 800ea4e:	d01d      	beq.n	800ea8c <UART_SetConfig+0x280>
 800ea50:	dc20      	bgt.n	800ea94 <UART_SetConfig+0x288>
 800ea52:	2b04      	cmp	r3, #4
 800ea54:	d015      	beq.n	800ea82 <UART_SetConfig+0x276>
 800ea56:	dc1d      	bgt.n	800ea94 <UART_SetConfig+0x288>
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <UART_SetConfig+0x256>
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d005      	beq.n	800ea6c <UART_SetConfig+0x260>
 800ea60:	e018      	b.n	800ea94 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea62:	f7fe fc51 	bl	800d308 <HAL_RCC_GetPCLK1Freq>
 800ea66:	0003      	movs	r3, r0
 800ea68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ea6a:	e01c      	b.n	800eaa6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea6c:	4b3c      	ldr	r3, [pc, #240]	@ (800eb60 <UART_SetConfig+0x354>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2210      	movs	r2, #16
 800ea72:	4013      	ands	r3, r2
 800ea74:	d002      	beq.n	800ea7c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ea76:	4b3e      	ldr	r3, [pc, #248]	@ (800eb70 <UART_SetConfig+0x364>)
 800ea78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea7a:	e014      	b.n	800eaa6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800ea7c:	4b3d      	ldr	r3, [pc, #244]	@ (800eb74 <UART_SetConfig+0x368>)
 800ea7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ea80:	e011      	b.n	800eaa6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea82:	f7fe fb91 	bl	800d1a8 <HAL_RCC_GetSysClockFreq>
 800ea86:	0003      	movs	r3, r0
 800ea88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ea8a:	e00c      	b.n	800eaa6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea8c:	2380      	movs	r3, #128	@ 0x80
 800ea8e:	021b      	lsls	r3, r3, #8
 800ea90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ea92:	e008      	b.n	800eaa6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800ea94:	2300      	movs	r3, #0
 800ea96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800ea98:	231a      	movs	r3, #26
 800ea9a:	2218      	movs	r2, #24
 800ea9c:	189b      	adds	r3, r3, r2
 800ea9e:	19db      	adds	r3, r3, r7
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	701a      	strb	r2, [r3, #0]
        break;
 800eaa4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eaa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d100      	bne.n	800eaae <UART_SetConfig+0x2a2>
 800eaac:	e133      	b.n	800ed16 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	685a      	ldr	r2, [r3, #4]
 800eab2:	0013      	movs	r3, r2
 800eab4:	005b      	lsls	r3, r3, #1
 800eab6:	189b      	adds	r3, r3, r2
 800eab8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d305      	bcc.n	800eaca <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d906      	bls.n	800ead8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800eaca:	231a      	movs	r3, #26
 800eacc:	2218      	movs	r2, #24
 800eace:	189b      	adds	r3, r3, r2
 800ead0:	19db      	adds	r3, r3, r7
 800ead2:	2201      	movs	r2, #1
 800ead4:	701a      	strb	r2, [r3, #0]
 800ead6:	e11e      	b.n	800ed16 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ead8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eada:	613b      	str	r3, [r7, #16]
 800eadc:	2300      	movs	r3, #0
 800eade:	617b      	str	r3, [r7, #20]
 800eae0:	6939      	ldr	r1, [r7, #16]
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	000b      	movs	r3, r1
 800eae6:	0e1b      	lsrs	r3, r3, #24
 800eae8:	0010      	movs	r0, r2
 800eaea:	0205      	lsls	r5, r0, #8
 800eaec:	431d      	orrs	r5, r3
 800eaee:	000b      	movs	r3, r1
 800eaf0:	021c      	lsls	r4, r3, #8
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	085b      	lsrs	r3, r3, #1
 800eaf8:	60bb      	str	r3, [r7, #8]
 800eafa:	2300      	movs	r3, #0
 800eafc:	60fb      	str	r3, [r7, #12]
 800eafe:	68b8      	ldr	r0, [r7, #8]
 800eb00:	68f9      	ldr	r1, [r7, #12]
 800eb02:	1900      	adds	r0, r0, r4
 800eb04:	4169      	adcs	r1, r5
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	603b      	str	r3, [r7, #0]
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	607b      	str	r3, [r7, #4]
 800eb10:	683a      	ldr	r2, [r7, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f7f1 fd48 	bl	80005a8 <__aeabi_uldivmod>
 800eb18:	0002      	movs	r2, r0
 800eb1a:	000b      	movs	r3, r1
 800eb1c:	0013      	movs	r3, r2
 800eb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb22:	23c0      	movs	r3, #192	@ 0xc0
 800eb24:	009b      	lsls	r3, r3, #2
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d309      	bcc.n	800eb3e <UART_SetConfig+0x332>
 800eb2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb2c:	2380      	movs	r3, #128	@ 0x80
 800eb2e:	035b      	lsls	r3, r3, #13
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d204      	bcs.n	800eb3e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb3a:	60da      	str	r2, [r3, #12]
 800eb3c:	e0eb      	b.n	800ed16 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800eb3e:	231a      	movs	r3, #26
 800eb40:	2218      	movs	r2, #24
 800eb42:	189b      	adds	r3, r3, r2
 800eb44:	19db      	adds	r3, r3, r7
 800eb46:	2201      	movs	r2, #1
 800eb48:	701a      	strb	r2, [r3, #0]
 800eb4a:	e0e4      	b.n	800ed16 <UART_SetConfig+0x50a>
 800eb4c:	efff69f3 	.word	0xefff69f3
 800eb50:	ffffcfff 	.word	0xffffcfff
 800eb54:	40004800 	.word	0x40004800
 800eb58:	fffff4ff 	.word	0xfffff4ff
 800eb5c:	40013800 	.word	0x40013800
 800eb60:	40021000 	.word	0x40021000
 800eb64:	40004400 	.word	0x40004400
 800eb68:	40004c00 	.word	0x40004c00
 800eb6c:	40005000 	.word	0x40005000
 800eb70:	003d0900 	.word	0x003d0900
 800eb74:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	69da      	ldr	r2, [r3, #28]
 800eb7c:	2380      	movs	r3, #128	@ 0x80
 800eb7e:	021b      	lsls	r3, r3, #8
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d000      	beq.n	800eb86 <UART_SetConfig+0x37a>
 800eb84:	e070      	b.n	800ec68 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800eb86:	231b      	movs	r3, #27
 800eb88:	2218      	movs	r2, #24
 800eb8a:	189b      	adds	r3, r3, r2
 800eb8c:	19db      	adds	r3, r3, r7
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	2b08      	cmp	r3, #8
 800eb92:	d822      	bhi.n	800ebda <UART_SetConfig+0x3ce>
 800eb94:	009a      	lsls	r2, r3, #2
 800eb96:	4b67      	ldr	r3, [pc, #412]	@ (800ed34 <UART_SetConfig+0x528>)
 800eb98:	18d3      	adds	r3, r2, r3
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb9e:	f7fe fbb3 	bl	800d308 <HAL_RCC_GetPCLK1Freq>
 800eba2:	0003      	movs	r3, r0
 800eba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800eba6:	e021      	b.n	800ebec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eba8:	f7fe fbc4 	bl	800d334 <HAL_RCC_GetPCLK2Freq>
 800ebac:	0003      	movs	r3, r0
 800ebae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ebb0:	e01c      	b.n	800ebec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebb2:	4b61      	ldr	r3, [pc, #388]	@ (800ed38 <UART_SetConfig+0x52c>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2210      	movs	r2, #16
 800ebb8:	4013      	ands	r3, r2
 800ebba:	d002      	beq.n	800ebc2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ebbc:	4b5f      	ldr	r3, [pc, #380]	@ (800ed3c <UART_SetConfig+0x530>)
 800ebbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebc0:	e014      	b.n	800ebec <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800ebc2:	4b5f      	ldr	r3, [pc, #380]	@ (800ed40 <UART_SetConfig+0x534>)
 800ebc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ebc6:	e011      	b.n	800ebec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ebc8:	f7fe faee 	bl	800d1a8 <HAL_RCC_GetSysClockFreq>
 800ebcc:	0003      	movs	r3, r0
 800ebce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ebd0:	e00c      	b.n	800ebec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebd2:	2380      	movs	r3, #128	@ 0x80
 800ebd4:	021b      	lsls	r3, r3, #8
 800ebd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ebd8:	e008      	b.n	800ebec <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800ebde:	231a      	movs	r3, #26
 800ebe0:	2218      	movs	r2, #24
 800ebe2:	189b      	adds	r3, r3, r2
 800ebe4:	19db      	adds	r3, r3, r7
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	701a      	strb	r2, [r3, #0]
        break;
 800ebea:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d100      	bne.n	800ebf4 <UART_SetConfig+0x3e8>
 800ebf2:	e090      	b.n	800ed16 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ebf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf6:	005a      	lsls	r2, r3, #1
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	085b      	lsrs	r3, r3, #1
 800ebfe:	18d2      	adds	r2, r2, r3
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	0019      	movs	r1, r3
 800ec06:	0010      	movs	r0, r2
 800ec08:	f7f1 fac2 	bl	8000190 <__udivsi3>
 800ec0c:	0003      	movs	r3, r0
 800ec0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec12:	2b0f      	cmp	r3, #15
 800ec14:	d921      	bls.n	800ec5a <UART_SetConfig+0x44e>
 800ec16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec18:	2380      	movs	r3, #128	@ 0x80
 800ec1a:	025b      	lsls	r3, r3, #9
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d21c      	bcs.n	800ec5a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	200e      	movs	r0, #14
 800ec26:	2418      	movs	r4, #24
 800ec28:	1903      	adds	r3, r0, r4
 800ec2a:	19db      	adds	r3, r3, r7
 800ec2c:	210f      	movs	r1, #15
 800ec2e:	438a      	bics	r2, r1
 800ec30:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec34:	085b      	lsrs	r3, r3, #1
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	2207      	movs	r2, #7
 800ec3a:	4013      	ands	r3, r2
 800ec3c:	b299      	uxth	r1, r3
 800ec3e:	1903      	adds	r3, r0, r4
 800ec40:	19db      	adds	r3, r3, r7
 800ec42:	1902      	adds	r2, r0, r4
 800ec44:	19d2      	adds	r2, r2, r7
 800ec46:	8812      	ldrh	r2, [r2, #0]
 800ec48:	430a      	orrs	r2, r1
 800ec4a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	1902      	adds	r2, r0, r4
 800ec52:	19d2      	adds	r2, r2, r7
 800ec54:	8812      	ldrh	r2, [r2, #0]
 800ec56:	60da      	str	r2, [r3, #12]
 800ec58:	e05d      	b.n	800ed16 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800ec5a:	231a      	movs	r3, #26
 800ec5c:	2218      	movs	r2, #24
 800ec5e:	189b      	adds	r3, r3, r2
 800ec60:	19db      	adds	r3, r3, r7
 800ec62:	2201      	movs	r2, #1
 800ec64:	701a      	strb	r2, [r3, #0]
 800ec66:	e056      	b.n	800ed16 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec68:	231b      	movs	r3, #27
 800ec6a:	2218      	movs	r2, #24
 800ec6c:	189b      	adds	r3, r3, r2
 800ec6e:	19db      	adds	r3, r3, r7
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	2b08      	cmp	r3, #8
 800ec74:	d822      	bhi.n	800ecbc <UART_SetConfig+0x4b0>
 800ec76:	009a      	lsls	r2, r3, #2
 800ec78:	4b32      	ldr	r3, [pc, #200]	@ (800ed44 <UART_SetConfig+0x538>)
 800ec7a:	18d3      	adds	r3, r2, r3
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec80:	f7fe fb42 	bl	800d308 <HAL_RCC_GetPCLK1Freq>
 800ec84:	0003      	movs	r3, r0
 800ec86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ec88:	e021      	b.n	800ecce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec8a:	f7fe fb53 	bl	800d334 <HAL_RCC_GetPCLK2Freq>
 800ec8e:	0003      	movs	r3, r0
 800ec90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ec92:	e01c      	b.n	800ecce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec94:	4b28      	ldr	r3, [pc, #160]	@ (800ed38 <UART_SetConfig+0x52c>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2210      	movs	r2, #16
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	d002      	beq.n	800eca4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ec9e:	4b27      	ldr	r3, [pc, #156]	@ (800ed3c <UART_SetConfig+0x530>)
 800eca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eca2:	e014      	b.n	800ecce <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800eca4:	4b26      	ldr	r3, [pc, #152]	@ (800ed40 <UART_SetConfig+0x534>)
 800eca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800eca8:	e011      	b.n	800ecce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ecaa:	f7fe fa7d 	bl	800d1a8 <HAL_RCC_GetSysClockFreq>
 800ecae:	0003      	movs	r3, r0
 800ecb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ecb2:	e00c      	b.n	800ecce <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ecb4:	2380      	movs	r3, #128	@ 0x80
 800ecb6:	021b      	lsls	r3, r3, #8
 800ecb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ecba:	e008      	b.n	800ecce <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800ecc0:	231a      	movs	r3, #26
 800ecc2:	2218      	movs	r2, #24
 800ecc4:	189b      	adds	r3, r3, r2
 800ecc6:	19db      	adds	r3, r3, r7
 800ecc8:	2201      	movs	r2, #1
 800ecca:	701a      	strb	r2, [r3, #0]
        break;
 800eccc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800ecce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d020      	beq.n	800ed16 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	085a      	lsrs	r2, r3, #1
 800ecda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecdc:	18d2      	adds	r2, r2, r3
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	0019      	movs	r1, r3
 800ece4:	0010      	movs	r0, r2
 800ece6:	f7f1 fa53 	bl	8000190 <__udivsi3>
 800ecea:	0003      	movs	r3, r0
 800ecec:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf0:	2b0f      	cmp	r3, #15
 800ecf2:	d90a      	bls.n	800ed0a <UART_SetConfig+0x4fe>
 800ecf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecf6:	2380      	movs	r3, #128	@ 0x80
 800ecf8:	025b      	lsls	r3, r3, #9
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d205      	bcs.n	800ed0a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ecfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed00:	b29a      	uxth	r2, r3
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	60da      	str	r2, [r3, #12]
 800ed08:	e005      	b.n	800ed16 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800ed0a:	231a      	movs	r3, #26
 800ed0c:	2218      	movs	r2, #24
 800ed0e:	189b      	adds	r3, r3, r2
 800ed10:	19db      	adds	r3, r3, r7
 800ed12:	2201      	movs	r2, #1
 800ed14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ed22:	231a      	movs	r3, #26
 800ed24:	2218      	movs	r2, #24
 800ed26:	189b      	adds	r3, r3, r2
 800ed28:	19db      	adds	r3, r3, r7
 800ed2a:	781b      	ldrb	r3, [r3, #0]
}
 800ed2c:	0018      	movs	r0, r3
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	b00e      	add	sp, #56	@ 0x38
 800ed32:	bdb0      	pop	{r4, r5, r7, pc}
 800ed34:	08014ee0 	.word	0x08014ee0
 800ed38:	40021000 	.word	0x40021000
 800ed3c:	003d0900 	.word	0x003d0900
 800ed40:	00f42400 	.word	0x00f42400
 800ed44:	08014f04 	.word	0x08014f04

0800ed48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed54:	2201      	movs	r2, #1
 800ed56:	4013      	ands	r3, r2
 800ed58:	d00b      	beq.n	800ed72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	4a4a      	ldr	r2, [pc, #296]	@ (800ee8c <UART_AdvFeatureConfig+0x144>)
 800ed62:	4013      	ands	r3, r2
 800ed64:	0019      	movs	r1, r3
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	430a      	orrs	r2, r1
 800ed70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed76:	2202      	movs	r2, #2
 800ed78:	4013      	ands	r3, r2
 800ed7a:	d00b      	beq.n	800ed94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	4a43      	ldr	r2, [pc, #268]	@ (800ee90 <UART_AdvFeatureConfig+0x148>)
 800ed84:	4013      	ands	r3, r2
 800ed86:	0019      	movs	r1, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	430a      	orrs	r2, r1
 800ed92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed98:	2204      	movs	r2, #4
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	d00b      	beq.n	800edb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	4a3b      	ldr	r2, [pc, #236]	@ (800ee94 <UART_AdvFeatureConfig+0x14c>)
 800eda6:	4013      	ands	r3, r2
 800eda8:	0019      	movs	r1, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	430a      	orrs	r2, r1
 800edb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edba:	2208      	movs	r2, #8
 800edbc:	4013      	ands	r3, r2
 800edbe:	d00b      	beq.n	800edd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	4a34      	ldr	r2, [pc, #208]	@ (800ee98 <UART_AdvFeatureConfig+0x150>)
 800edc8:	4013      	ands	r3, r2
 800edca:	0019      	movs	r1, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	430a      	orrs	r2, r1
 800edd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eddc:	2210      	movs	r2, #16
 800edde:	4013      	ands	r3, r2
 800ede0:	d00b      	beq.n	800edfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	4a2c      	ldr	r2, [pc, #176]	@ (800ee9c <UART_AdvFeatureConfig+0x154>)
 800edea:	4013      	ands	r3, r2
 800edec:	0019      	movs	r1, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	430a      	orrs	r2, r1
 800edf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edfe:	2220      	movs	r2, #32
 800ee00:	4013      	ands	r3, r2
 800ee02:	d00b      	beq.n	800ee1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	689b      	ldr	r3, [r3, #8]
 800ee0a:	4a25      	ldr	r2, [pc, #148]	@ (800eea0 <UART_AdvFeatureConfig+0x158>)
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	0019      	movs	r1, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	430a      	orrs	r2, r1
 800ee1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee20:	2240      	movs	r2, #64	@ 0x40
 800ee22:	4013      	ands	r3, r2
 800ee24:	d01d      	beq.n	800ee62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	4a1d      	ldr	r2, [pc, #116]	@ (800eea4 <UART_AdvFeatureConfig+0x15c>)
 800ee2e:	4013      	ands	r3, r2
 800ee30:	0019      	movs	r1, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	430a      	orrs	r2, r1
 800ee3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ee42:	2380      	movs	r3, #128	@ 0x80
 800ee44:	035b      	lsls	r3, r3, #13
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d10b      	bne.n	800ee62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	4a15      	ldr	r2, [pc, #84]	@ (800eea8 <UART_AdvFeatureConfig+0x160>)
 800ee52:	4013      	ands	r3, r2
 800ee54:	0019      	movs	r1, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	430a      	orrs	r2, r1
 800ee60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee66:	2280      	movs	r2, #128	@ 0x80
 800ee68:	4013      	ands	r3, r2
 800ee6a:	d00b      	beq.n	800ee84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	4a0e      	ldr	r2, [pc, #56]	@ (800eeac <UART_AdvFeatureConfig+0x164>)
 800ee74:	4013      	ands	r3, r2
 800ee76:	0019      	movs	r1, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	430a      	orrs	r2, r1
 800ee82:	605a      	str	r2, [r3, #4]
  }
}
 800ee84:	46c0      	nop			@ (mov r8, r8)
 800ee86:	46bd      	mov	sp, r7
 800ee88:	b002      	add	sp, #8
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	fffdffff 	.word	0xfffdffff
 800ee90:	fffeffff 	.word	0xfffeffff
 800ee94:	fffbffff 	.word	0xfffbffff
 800ee98:	ffff7fff 	.word	0xffff7fff
 800ee9c:	ffffefff 	.word	0xffffefff
 800eea0:	ffffdfff 	.word	0xffffdfff
 800eea4:	ffefffff 	.word	0xffefffff
 800eea8:	ff9fffff 	.word	0xff9fffff
 800eeac:	fff7ffff 	.word	0xfff7ffff

0800eeb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b092      	sub	sp, #72	@ 0x48
 800eeb4:	af02      	add	r7, sp, #8
 800eeb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2284      	movs	r2, #132	@ 0x84
 800eebc:	2100      	movs	r1, #0
 800eebe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eec0:	f7f9 fe00 	bl	8008ac4 <HAL_GetTick>
 800eec4:	0003      	movs	r3, r0
 800eec6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2208      	movs	r2, #8
 800eed0:	4013      	ands	r3, r2
 800eed2:	2b08      	cmp	r3, #8
 800eed4:	d12c      	bne.n	800ef30 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eed8:	2280      	movs	r2, #128	@ 0x80
 800eeda:	0391      	lsls	r1, r2, #14
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	4a46      	ldr	r2, [pc, #280]	@ (800eff8 <UART_CheckIdleState+0x148>)
 800eee0:	9200      	str	r2, [sp, #0]
 800eee2:	2200      	movs	r2, #0
 800eee4:	f000 f88c 	bl	800f000 <UART_WaitOnFlagUntilTimeout>
 800eee8:	1e03      	subs	r3, r0, #0
 800eeea:	d021      	beq.n	800ef30 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeec:	f3ef 8310 	mrs	r3, PRIMASK
 800eef0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800eef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800eef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eef6:	2301      	movs	r3, #1
 800eef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefc:	f383 8810 	msr	PRIMASK, r3
}
 800ef00:	46c0      	nop			@ (mov r8, r8)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2180      	movs	r1, #128	@ 0x80
 800ef0e:	438a      	bics	r2, r1
 800ef10:	601a      	str	r2, [r3, #0]
 800ef12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef18:	f383 8810 	msr	PRIMASK, r3
}
 800ef1c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	2220      	movs	r2, #32
 800ef22:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2278      	movs	r2, #120	@ 0x78
 800ef28:	2100      	movs	r1, #0
 800ef2a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef2c:	2303      	movs	r3, #3
 800ef2e:	e05f      	b.n	800eff0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2204      	movs	r2, #4
 800ef38:	4013      	ands	r3, r2
 800ef3a:	2b04      	cmp	r3, #4
 800ef3c:	d146      	bne.n	800efcc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef40:	2280      	movs	r2, #128	@ 0x80
 800ef42:	03d1      	lsls	r1, r2, #15
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	4a2c      	ldr	r2, [pc, #176]	@ (800eff8 <UART_CheckIdleState+0x148>)
 800ef48:	9200      	str	r2, [sp, #0]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f000 f858 	bl	800f000 <UART_WaitOnFlagUntilTimeout>
 800ef50:	1e03      	subs	r3, r0, #0
 800ef52:	d03b      	beq.n	800efcc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef54:	f3ef 8310 	mrs	r3, PRIMASK
 800ef58:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ef5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef5e:	2301      	movs	r3, #1
 800ef60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	f383 8810 	msr	PRIMASK, r3
}
 800ef68:	46c0      	nop			@ (mov r8, r8)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4921      	ldr	r1, [pc, #132]	@ (800effc <UART_CheckIdleState+0x14c>)
 800ef76:	400a      	ands	r2, r1
 800ef78:	601a      	str	r2, [r3, #0]
 800ef7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	f383 8810 	msr	PRIMASK, r3
}
 800ef84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef86:	f3ef 8310 	mrs	r3, PRIMASK
 800ef8a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ef8c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef90:	2301      	movs	r3, #1
 800ef92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef94:	69fb      	ldr	r3, [r7, #28]
 800ef96:	f383 8810 	msr	PRIMASK, r3
}
 800ef9a:	46c0      	nop			@ (mov r8, r8)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	689a      	ldr	r2, [r3, #8]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2101      	movs	r1, #1
 800efa8:	438a      	bics	r2, r1
 800efaa:	609a      	str	r2, [r3, #8]
 800efac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efb0:	6a3b      	ldr	r3, [r7, #32]
 800efb2:	f383 8810 	msr	PRIMASK, r3
}
 800efb6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2280      	movs	r2, #128	@ 0x80
 800efbc:	2120      	movs	r1, #32
 800efbe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2278      	movs	r2, #120	@ 0x78
 800efc4:	2100      	movs	r1, #0
 800efc6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800efc8:	2303      	movs	r3, #3
 800efca:	e011      	b.n	800eff0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2220      	movs	r2, #32
 800efd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2280      	movs	r2, #128	@ 0x80
 800efd6:	2120      	movs	r1, #32
 800efd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2278      	movs	r2, #120	@ 0x78
 800efea:	2100      	movs	r1, #0
 800efec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	0018      	movs	r0, r3
 800eff2:	46bd      	mov	sp, r7
 800eff4:	b010      	add	sp, #64	@ 0x40
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	01ffffff 	.word	0x01ffffff
 800effc:	fffffedf 	.word	0xfffffedf

0800f000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	603b      	str	r3, [r7, #0]
 800f00c:	1dfb      	adds	r3, r7, #7
 800f00e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f010:	e04b      	b.n	800f0aa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	3301      	adds	r3, #1
 800f016:	d048      	beq.n	800f0aa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f018:	f7f9 fd54 	bl	8008ac4 <HAL_GetTick>
 800f01c:	0002      	movs	r2, r0
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	1ad3      	subs	r3, r2, r3
 800f022:	69ba      	ldr	r2, [r7, #24]
 800f024:	429a      	cmp	r2, r3
 800f026:	d302      	bcc.n	800f02e <UART_WaitOnFlagUntilTimeout+0x2e>
 800f028:	69bb      	ldr	r3, [r7, #24]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d101      	bne.n	800f032 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800f02e:	2303      	movs	r3, #3
 800f030:	e04b      	b.n	800f0ca <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2204      	movs	r2, #4
 800f03a:	4013      	ands	r3, r2
 800f03c:	d035      	beq.n	800f0aa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	69db      	ldr	r3, [r3, #28]
 800f044:	2208      	movs	r2, #8
 800f046:	4013      	ands	r3, r2
 800f048:	2b08      	cmp	r3, #8
 800f04a:	d111      	bne.n	800f070 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2208      	movs	r2, #8
 800f052:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	0018      	movs	r0, r3
 800f058:	f000 f900 	bl	800f25c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2284      	movs	r2, #132	@ 0x84
 800f060:	2108      	movs	r1, #8
 800f062:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2278      	movs	r2, #120	@ 0x78
 800f068:	2100      	movs	r1, #0
 800f06a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800f06c:	2301      	movs	r3, #1
 800f06e:	e02c      	b.n	800f0ca <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	69da      	ldr	r2, [r3, #28]
 800f076:	2380      	movs	r3, #128	@ 0x80
 800f078:	011b      	lsls	r3, r3, #4
 800f07a:	401a      	ands	r2, r3
 800f07c:	2380      	movs	r3, #128	@ 0x80
 800f07e:	011b      	lsls	r3, r3, #4
 800f080:	429a      	cmp	r2, r3
 800f082:	d112      	bne.n	800f0aa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2280      	movs	r2, #128	@ 0x80
 800f08a:	0112      	lsls	r2, r2, #4
 800f08c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	0018      	movs	r0, r3
 800f092:	f000 f8e3 	bl	800f25c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2284      	movs	r2, #132	@ 0x84
 800f09a:	2120      	movs	r1, #32
 800f09c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2278      	movs	r2, #120	@ 0x78
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f0a6:	2303      	movs	r3, #3
 800f0a8:	e00f      	b.n	800f0ca <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	69db      	ldr	r3, [r3, #28]
 800f0b0:	68ba      	ldr	r2, [r7, #8]
 800f0b2:	4013      	ands	r3, r2
 800f0b4:	68ba      	ldr	r2, [r7, #8]
 800f0b6:	1ad3      	subs	r3, r2, r3
 800f0b8:	425a      	negs	r2, r3
 800f0ba:	4153      	adcs	r3, r2
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	001a      	movs	r2, r3
 800f0c0:	1dfb      	adds	r3, r7, #7
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d0a4      	beq.n	800f012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	0018      	movs	r0, r3
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	b004      	add	sp, #16
 800f0d0:	bd80      	pop	{r7, pc}
	...

0800f0d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b090      	sub	sp, #64	@ 0x40
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	1dbb      	adds	r3, r7, #6
 800f0e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	68ba      	ldr	r2, [r7, #8]
 800f0e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	1dba      	adds	r2, r7, #6
 800f0ec:	2158      	movs	r1, #88	@ 0x58
 800f0ee:	8812      	ldrh	r2, [r2, #0]
 800f0f0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2284      	movs	r2, #132	@ 0x84
 800f0f6:	2100      	movs	r1, #0
 800f0f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2280      	movs	r2, #128	@ 0x80
 800f0fe:	2122      	movs	r1, #34	@ 0x22
 800f100:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f106:	2b00      	cmp	r3, #0
 800f108:	d028      	beq.n	800f15c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f10e:	4a3e      	ldr	r2, [pc, #248]	@ (800f208 <UART_Start_Receive_DMA+0x134>)
 800f110:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f116:	4a3d      	ldr	r2, [pc, #244]	@ (800f20c <UART_Start_Receive_DMA+0x138>)
 800f118:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f11e:	4a3c      	ldr	r2, [pc, #240]	@ (800f210 <UART_Start_Receive_DMA+0x13c>)
 800f120:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f126:	2200      	movs	r2, #0
 800f128:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	3324      	adds	r3, #36	@ 0x24
 800f134:	0019      	movs	r1, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f13a:	001a      	movs	r2, r3
 800f13c:	1dbb      	adds	r3, r7, #6
 800f13e:	881b      	ldrh	r3, [r3, #0]
 800f140:	f7fa fa20 	bl	8009584 <HAL_DMA_Start_IT>
 800f144:	1e03      	subs	r3, r0, #0
 800f146:	d009      	beq.n	800f15c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2284      	movs	r2, #132	@ 0x84
 800f14c:	2110      	movs	r1, #16
 800f14e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2280      	movs	r2, #128	@ 0x80
 800f154:	2120      	movs	r1, #32
 800f156:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800f158:	2301      	movs	r3, #1
 800f15a:	e050      	b.n	800f1fe <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	691b      	ldr	r3, [r3, #16]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d019      	beq.n	800f198 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f164:	f3ef 8310 	mrs	r3, PRIMASK
 800f168:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800f16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f16e:	2301      	movs	r3, #1
 800f170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f174:	f383 8810 	msr	PRIMASK, r3
}
 800f178:	46c0      	nop			@ (mov r8, r8)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	2180      	movs	r1, #128	@ 0x80
 800f186:	0049      	lsls	r1, r1, #1
 800f188:	430a      	orrs	r2, r1
 800f18a:	601a      	str	r2, [r3, #0]
 800f18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f18e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f192:	f383 8810 	msr	PRIMASK, r3
}
 800f196:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f198:	f3ef 8310 	mrs	r3, PRIMASK
 800f19c:	613b      	str	r3, [r7, #16]
  return(result);
 800f19e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	f383 8810 	msr	PRIMASK, r3
}
 800f1ac:	46c0      	nop			@ (mov r8, r8)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	689a      	ldr	r2, [r3, #8]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2101      	movs	r1, #1
 800f1ba:	430a      	orrs	r2, r1
 800f1bc:	609a      	str	r2, [r3, #8]
 800f1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	f383 8810 	msr	PRIMASK, r3
}
 800f1c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f1ca:	f3ef 8310 	mrs	r3, PRIMASK
 800f1ce:	61fb      	str	r3, [r7, #28]
  return(result);
 800f1d0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1d8:	6a3b      	ldr	r3, [r7, #32]
 800f1da:	f383 8810 	msr	PRIMASK, r3
}
 800f1de:	46c0      	nop			@ (mov r8, r8)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	689a      	ldr	r2, [r3, #8]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2140      	movs	r1, #64	@ 0x40
 800f1ec:	430a      	orrs	r2, r1
 800f1ee:	609a      	str	r2, [r3, #8]
 800f1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f6:	f383 8810 	msr	PRIMASK, r3
}
 800f1fa:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	0018      	movs	r0, r3
 800f200:	46bd      	mov	sp, r7
 800f202:	b010      	add	sp, #64	@ 0x40
 800f204:	bd80      	pop	{r7, pc}
 800f206:	46c0      	nop			@ (mov r8, r8)
 800f208:	0800f3e5 	.word	0x0800f3e5
 800f20c:	0800f519 	.word	0x0800f519
 800f210:	0800f561 	.word	0x0800f561

0800f214 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b086      	sub	sp, #24
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f21c:	f3ef 8310 	mrs	r3, PRIMASK
 800f220:	60bb      	str	r3, [r7, #8]
  return(result);
 800f222:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f224:	617b      	str	r3, [r7, #20]
 800f226:	2301      	movs	r3, #1
 800f228:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f383 8810 	msr	PRIMASK, r3
}
 800f230:	46c0      	nop			@ (mov r8, r8)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	21c0      	movs	r1, #192	@ 0xc0
 800f23e:	438a      	bics	r2, r1
 800f240:	601a      	str	r2, [r3, #0]
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	f383 8810 	msr	PRIMASK, r3
}
 800f24c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2220      	movs	r2, #32
 800f252:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f254:	46c0      	nop			@ (mov r8, r8)
 800f256:	46bd      	mov	sp, r7
 800f258:	b006      	add	sp, #24
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08e      	sub	sp, #56	@ 0x38
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f264:	f3ef 8310 	mrs	r3, PRIMASK
 800f268:	617b      	str	r3, [r7, #20]
  return(result);
 800f26a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f26c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f26e:	2301      	movs	r3, #1
 800f270:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f272:	69bb      	ldr	r3, [r7, #24]
 800f274:	f383 8810 	msr	PRIMASK, r3
}
 800f278:	46c0      	nop			@ (mov r8, r8)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4926      	ldr	r1, [pc, #152]	@ (800f320 <UART_EndRxTransfer+0xc4>)
 800f286:	400a      	ands	r2, r1
 800f288:	601a      	str	r2, [r3, #0]
 800f28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f28c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	f383 8810 	msr	PRIMASK, r3
}
 800f294:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f296:	f3ef 8310 	mrs	r3, PRIMASK
 800f29a:	623b      	str	r3, [r7, #32]
  return(result);
 800f29c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f29e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a6:	f383 8810 	msr	PRIMASK, r3
}
 800f2aa:	46c0      	nop			@ (mov r8, r8)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	689a      	ldr	r2, [r3, #8]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	438a      	bics	r2, r1
 800f2ba:	609a      	str	r2, [r3, #8]
 800f2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c2:	f383 8810 	msr	PRIMASK, r3
}
 800f2c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d118      	bne.n	800f302 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2d0:	f3ef 8310 	mrs	r3, PRIMASK
 800f2d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800f2d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2da:	2301      	movs	r3, #1
 800f2dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	f383 8810 	msr	PRIMASK, r3
}
 800f2e4:	46c0      	nop			@ (mov r8, r8)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2110      	movs	r1, #16
 800f2f2:	438a      	bics	r2, r1
 800f2f4:	601a      	str	r2, [r3, #0]
 800f2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f383 8810 	msr	PRIMASK, r3
}
 800f300:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2280      	movs	r2, #128	@ 0x80
 800f306:	2120      	movs	r1, #32
 800f308:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f316:	46c0      	nop			@ (mov r8, r8)
 800f318:	46bd      	mov	sp, r7
 800f31a:	b00e      	add	sp, #56	@ 0x38
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	46c0      	nop			@ (mov r8, r8)
 800f320:	fffffedf 	.word	0xfffffedf

0800f324 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b08c      	sub	sp, #48	@ 0x30
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f330:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2220      	movs	r2, #32
 800f33a:	4013      	ands	r3, r2
 800f33c:	d135      	bne.n	800f3aa <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800f33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f340:	2252      	movs	r2, #82	@ 0x52
 800f342:	2100      	movs	r1, #0
 800f344:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f346:	f3ef 8310 	mrs	r3, PRIMASK
 800f34a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f34c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f34e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f350:	2301      	movs	r3, #1
 800f352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	f383 8810 	msr	PRIMASK, r3
}
 800f35a:	46c0      	nop			@ (mov r8, r8)
 800f35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	689a      	ldr	r2, [r3, #8]
 800f362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2180      	movs	r1, #128	@ 0x80
 800f368:	438a      	bics	r2, r1
 800f36a:	609a      	str	r2, [r3, #8]
 800f36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f36e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	f383 8810 	msr	PRIMASK, r3
}
 800f376:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f378:	f3ef 8310 	mrs	r3, PRIMASK
 800f37c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f37e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f380:	627b      	str	r3, [r7, #36]	@ 0x24
 800f382:	2301      	movs	r3, #1
 800f384:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	f383 8810 	msr	PRIMASK, r3
}
 800f38c:	46c0      	nop			@ (mov r8, r8)
 800f38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	2140      	movs	r1, #64	@ 0x40
 800f39a:	430a      	orrs	r2, r1
 800f39c:	601a      	str	r2, [r3, #0]
 800f39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f3a2:	6a3b      	ldr	r3, [r7, #32]
 800f3a4:	f383 8810 	msr	PRIMASK, r3
}
 800f3a8:	e006      	b.n	800f3b8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800f3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ac:	228c      	movs	r2, #140	@ 0x8c
 800f3ae:	589b      	ldr	r3, [r3, r2]
 800f3b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3b2:	0010      	movs	r0, r2
 800f3b4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f3b6:	46c0      	nop			@ (mov r8, r8)
 800f3b8:	46c0      	nop			@ (mov r8, r8)
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	b00c      	add	sp, #48	@ 0x30
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2288      	movs	r2, #136	@ 0x88
 800f3d2:	589b      	ldr	r3, [r3, r2]
 800f3d4:	68fa      	ldr	r2, [r7, #12]
 800f3d6:	0010      	movs	r0, r2
 800f3d8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3da:	46c0      	nop			@ (mov r8, r8)
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	b004      	add	sp, #16
 800f3e0:	bd80      	pop	{r7, pc}
	...

0800f3e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b094      	sub	sp, #80	@ 0x50
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2220      	movs	r2, #32
 800f3fa:	4013      	ands	r3, r2
 800f3fc:	d16f      	bne.n	800f4de <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800f3fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f400:	225a      	movs	r2, #90	@ 0x5a
 800f402:	2100      	movs	r1, #0
 800f404:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f406:	f3ef 8310 	mrs	r3, PRIMASK
 800f40a:	61bb      	str	r3, [r7, #24]
  return(result);
 800f40c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f40e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f410:	2301      	movs	r3, #1
 800f412:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	f383 8810 	msr	PRIMASK, r3
}
 800f41a:	46c0      	nop			@ (mov r8, r8)
 800f41c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	493b      	ldr	r1, [pc, #236]	@ (800f514 <UART_DMAReceiveCplt+0x130>)
 800f428:	400a      	ands	r2, r1
 800f42a:	601a      	str	r2, [r3, #0]
 800f42c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f42e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f430:	6a3b      	ldr	r3, [r7, #32]
 800f432:	f383 8810 	msr	PRIMASK, r3
}
 800f436:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f438:	f3ef 8310 	mrs	r3, PRIMASK
 800f43c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800f43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f440:	647b      	str	r3, [r7, #68]	@ 0x44
 800f442:	2301      	movs	r3, #1
 800f444:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f448:	f383 8810 	msr	PRIMASK, r3
}
 800f44c:	46c0      	nop			@ (mov r8, r8)
 800f44e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	689a      	ldr	r2, [r3, #8]
 800f454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2101      	movs	r1, #1
 800f45a:	438a      	bics	r2, r1
 800f45c:	609a      	str	r2, [r3, #8]
 800f45e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f464:	f383 8810 	msr	PRIMASK, r3
}
 800f468:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f46a:	f3ef 8310 	mrs	r3, PRIMASK
 800f46e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800f470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f472:	643b      	str	r3, [r7, #64]	@ 0x40
 800f474:	2301      	movs	r3, #1
 800f476:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f47a:	f383 8810 	msr	PRIMASK, r3
}
 800f47e:	46c0      	nop			@ (mov r8, r8)
 800f480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	689a      	ldr	r2, [r3, #8]
 800f486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2140      	movs	r1, #64	@ 0x40
 800f48c:	438a      	bics	r2, r1
 800f48e:	609a      	str	r2, [r3, #8]
 800f490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f492:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f496:	f383 8810 	msr	PRIMASK, r3
}
 800f49a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f49e:	2280      	movs	r2, #128	@ 0x80
 800f4a0:	2120      	movs	r1, #32
 800f4a2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d118      	bne.n	800f4de <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4ac:	f3ef 8310 	mrs	r3, PRIMASK
 800f4b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	f383 8810 	msr	PRIMASK, r3
}
 800f4c0:	46c0      	nop			@ (mov r8, r8)
 800f4c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2110      	movs	r1, #16
 800f4ce:	438a      	bics	r2, r1
 800f4d0:	601a      	str	r2, [r3, #0]
 800f4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	f383 8810 	msr	PRIMASK, r3
}
 800f4dc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d109      	bne.n	800f500 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800f4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4ee:	22ac      	movs	r2, #172	@ 0xac
 800f4f0:	589b      	ldr	r3, [r3, r2]
 800f4f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f4f4:	2158      	movs	r1, #88	@ 0x58
 800f4f6:	5a51      	ldrh	r1, [r2, r1]
 800f4f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f4fa:	0010      	movs	r0, r2
 800f4fc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f4fe:	e005      	b.n	800f50c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800f500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f502:	2294      	movs	r2, #148	@ 0x94
 800f504:	589b      	ldr	r3, [r3, r2]
 800f506:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f508:	0010      	movs	r0, r2
 800f50a:	4798      	blx	r3
}
 800f50c:	46c0      	nop			@ (mov r8, r8)
 800f50e:	46bd      	mov	sp, r7
 800f510:	b014      	add	sp, #80	@ 0x50
 800f512:	bd80      	pop	{r7, pc}
 800f514:	fffffeff 	.word	0xfffffeff

0800f518 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f524:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2201      	movs	r2, #1
 800f52a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f530:	2b01      	cmp	r3, #1
 800f532:	d10b      	bne.n	800f54c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	22ac      	movs	r2, #172	@ 0xac
 800f538:	589b      	ldr	r3, [r3, r2]
 800f53a:	68fa      	ldr	r2, [r7, #12]
 800f53c:	2158      	movs	r1, #88	@ 0x58
 800f53e:	5a52      	ldrh	r2, [r2, r1]
 800f540:	0852      	lsrs	r2, r2, #1
 800f542:	b291      	uxth	r1, r2
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	0010      	movs	r0, r2
 800f548:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f54a:	e005      	b.n	800f558 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2290      	movs	r2, #144	@ 0x90
 800f550:	589b      	ldr	r3, [r3, r2]
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	0010      	movs	r0, r2
 800f556:	4798      	blx	r3
}
 800f558:	46c0      	nop			@ (mov r8, r8)
 800f55a:	46bd      	mov	sp, r7
 800f55c:	b004      	add	sp, #16
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b086      	sub	sp, #24
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f56c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f572:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	2280      	movs	r2, #128	@ 0x80
 800f578:	589b      	ldr	r3, [r3, r2]
 800f57a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	2280      	movs	r2, #128	@ 0x80
 800f584:	4013      	ands	r3, r2
 800f586:	2b80      	cmp	r3, #128	@ 0x80
 800f588:	d10a      	bne.n	800f5a0 <UART_DMAError+0x40>
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	2b21      	cmp	r3, #33	@ 0x21
 800f58e:	d107      	bne.n	800f5a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	2252      	movs	r2, #82	@ 0x52
 800f594:	2100      	movs	r1, #0
 800f596:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	0018      	movs	r0, r3
 800f59c:	f7ff fe3a 	bl	800f214 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	689b      	ldr	r3, [r3, #8]
 800f5a6:	2240      	movs	r2, #64	@ 0x40
 800f5a8:	4013      	ands	r3, r2
 800f5aa:	2b40      	cmp	r3, #64	@ 0x40
 800f5ac:	d10a      	bne.n	800f5c4 <UART_DMAError+0x64>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2b22      	cmp	r3, #34	@ 0x22
 800f5b2:	d107      	bne.n	800f5c4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	225a      	movs	r2, #90	@ 0x5a
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	0018      	movs	r0, r3
 800f5c0:	f7ff fe4c 	bl	800f25c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	2284      	movs	r2, #132	@ 0x84
 800f5c8:	589b      	ldr	r3, [r3, r2]
 800f5ca:	2210      	movs	r2, #16
 800f5cc:	431a      	orrs	r2, r3
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2184      	movs	r1, #132	@ 0x84
 800f5d2:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	2298      	movs	r2, #152	@ 0x98
 800f5d8:	589b      	ldr	r3, [r3, r2]
 800f5da:	697a      	ldr	r2, [r7, #20]
 800f5dc:	0010      	movs	r0, r2
 800f5de:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5e0:	46c0      	nop			@ (mov r8, r8)
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	b006      	add	sp, #24
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	225a      	movs	r2, #90	@ 0x5a
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2252      	movs	r2, #82	@ 0x52
 800f602:	2100      	movs	r1, #0
 800f604:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2298      	movs	r2, #152	@ 0x98
 800f60a:	589b      	ldr	r3, [r3, r2]
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	0010      	movs	r0, r2
 800f610:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f612:	46c0      	nop			@ (mov r8, r8)
 800f614:	46bd      	mov	sp, r7
 800f616:	b004      	add	sp, #16
 800f618:	bd80      	pop	{r7, pc}

0800f61a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b086      	sub	sp, #24
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f622:	f3ef 8310 	mrs	r3, PRIMASK
 800f626:	60bb      	str	r3, [r7, #8]
  return(result);
 800f628:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f62a:	617b      	str	r3, [r7, #20]
 800f62c:	2301      	movs	r3, #1
 800f62e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f383 8810 	msr	PRIMASK, r3
}
 800f636:	46c0      	nop			@ (mov r8, r8)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2140      	movs	r1, #64	@ 0x40
 800f644:	438a      	bics	r2, r1
 800f646:	601a      	str	r2, [r3, #0]
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	f383 8810 	msr	PRIMASK, r3
}
 800f652:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2220      	movs	r2, #32
 800f658:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2200      	movs	r2, #0
 800f65e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	228c      	movs	r2, #140	@ 0x8c
 800f664:	589b      	ldr	r3, [r3, r2]
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	0010      	movs	r0, r2
 800f66a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f66c:	46c0      	nop			@ (mov r8, r8)
 800f66e:	46bd      	mov	sp, r7
 800f670:	b006      	add	sp, #24
 800f672:	bd80      	pop	{r7, pc}

0800f674 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f67c:	46c0      	nop			@ (mov r8, r8)
 800f67e:	46bd      	mov	sp, r7
 800f680:	b002      	add	sp, #8
 800f682:	bd80      	pop	{r7, pc}

0800f684 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f68c:	4b09      	ldr	r3, [pc, #36]	@ (800f6b4 <USB_DisableGlobalInt+0x30>)
 800f68e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2240      	movs	r2, #64	@ 0x40
 800f694:	5a9b      	ldrh	r3, [r3, r2]
 800f696:	b29b      	uxth	r3, r3
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	b292      	uxth	r2, r2
 800f69c:	43d2      	mvns	r2, r2
 800f69e:	b292      	uxth	r2, r2
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	b299      	uxth	r1, r3
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2240      	movs	r2, #64	@ 0x40
 800f6a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f6aa:	2300      	movs	r3, #0
}
 800f6ac:	0018      	movs	r0, r3
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	b004      	add	sp, #16
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	0000bf80 	.word	0x0000bf80

0800f6b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f6b8:	b084      	sub	sp, #16
 800f6ba:	b590      	push	{r4, r7, lr}
 800f6bc:	b083      	sub	sp, #12
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
 800f6c2:	2004      	movs	r0, #4
 800f6c4:	2410      	movs	r4, #16
 800f6c6:	1900      	adds	r0, r0, r4
 800f6c8:	2408      	movs	r4, #8
 800f6ca:	46a4      	mov	ip, r4
 800f6cc:	44bc      	add	ip, r7
 800f6ce:	4460      	add	r0, ip
 800f6d0:	6001      	str	r1, [r0, #0]
 800f6d2:	6042      	str	r2, [r0, #4]
 800f6d4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2240      	movs	r2, #64	@ 0x40
 800f6da:	2101      	movs	r1, #1
 800f6dc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2240      	movs	r2, #64	@ 0x40
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2244      	movs	r2, #68	@ 0x44
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2250      	movs	r2, #80	@ 0x50
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f6f6:	2300      	movs	r3, #0
}
 800f6f8:	0018      	movs	r0, r3
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	b003      	add	sp, #12
 800f6fe:	bc90      	pop	{r4, r7}
 800f700:	bc08      	pop	{r3}
 800f702:	b004      	add	sp, #16
 800f704:	4718      	bx	r3
	...

0800f708 <arm_split_rfft_q15>:
 800f708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f70a:	4644      	mov	r4, r8
 800f70c:	465f      	mov	r7, fp
 800f70e:	4656      	mov	r6, sl
 800f710:	464d      	mov	r5, r9
 800f712:	b4f0      	push	{r4, r5, r6, r7}
 800f714:	b089      	sub	sp, #36	@ 0x24
 800f716:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f718:	9007      	str	r0, [sp, #28]
 800f71a:	00a4      	lsls	r4, r4, #2
 800f71c:	46a2      	mov	sl, r4
 800f71e:	449a      	add	sl, r3
 800f720:	0003      	movs	r3, r0
 800f722:	46a3      	mov	fp, r4
 800f724:	3304      	adds	r3, #4
 800f726:	4699      	mov	r9, r3
 800f728:	4b45      	ldr	r3, [pc, #276]	@ (800f840 <arm_split_rfft_q15+0x138>)
 800f72a:	4493      	add	fp, r2
 800f72c:	18cb      	adds	r3, r1, r3
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	0002      	movs	r2, r0
 800f732:	0018      	movs	r0, r3
 800f734:	9306      	str	r3, [sp, #24]
 800f736:	4684      	mov	ip, r0
 800f738:	0013      	movs	r3, r2
 800f73a:	4463      	add	r3, ip
 800f73c:	9404      	str	r4, [sp, #16]
 800f73e:	4698      	mov	r8, r3
 800f740:	2901      	cmp	r1, #1
 800f742:	d95d      	bls.n	800f800 <arm_split_rfft_q15+0xf8>
 800f744:	9a07      	ldr	r2, [sp, #28]
 800f746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f748:	4694      	mov	ip, r2
 800f74a:	00c9      	lsls	r1, r1, #3
 800f74c:	3904      	subs	r1, #4
 800f74e:	1d1d      	adds	r5, r3, #4
 800f750:	1858      	adds	r0, r3, r1
 800f752:	9b06      	ldr	r3, [sp, #24]
 800f754:	464e      	mov	r6, r9
 800f756:	3304      	adds	r3, #4
 800f758:	4463      	add	r3, ip
 800f75a:	46c1      	mov	r9, r8
 800f75c:	46ac      	mov	ip, r5
 800f75e:	4680      	mov	r8, r0
 800f760:	465d      	mov	r5, fp
 800f762:	4650      	mov	r0, sl
 800f764:	9305      	str	r3, [sp, #20]
 800f766:	2200      	movs	r2, #0
 800f768:	5eb3      	ldrsh	r3, [r6, r2]
 800f76a:	2100      	movs	r1, #0
 800f76c:	5e6a      	ldrsh	r2, [r5, r1]
 800f76e:	001c      	movs	r4, r3
 800f770:	9301      	str	r3, [sp, #4]
 800f772:	9202      	str	r2, [sp, #8]
 800f774:	2102      	movs	r1, #2
 800f776:	5e73      	ldrsh	r3, [r6, r1]
 800f778:	4354      	muls	r4, r2
 800f77a:	2102      	movs	r1, #2
 800f77c:	5e6a      	ldrsh	r2, [r5, r1]
 800f77e:	4649      	mov	r1, r9
 800f780:	2700      	movs	r7, #0
 800f782:	5fc9      	ldrsh	r1, [r1, r7]
 800f784:	9203      	str	r2, [sp, #12]
 800f786:	468b      	mov	fp, r1
 800f788:	2700      	movs	r7, #0
 800f78a:	5fc1      	ldrsh	r1, [r0, r7]
 800f78c:	435a      	muls	r2, r3
 800f78e:	468a      	mov	sl, r1
 800f790:	4649      	mov	r1, r9
 800f792:	1aa4      	subs	r4, r4, r2
 800f794:	2702      	movs	r7, #2
 800f796:	5fcf      	ldrsh	r7, [r1, r7]
 800f798:	2102      	movs	r1, #2
 800f79a:	5e42      	ldrsh	r2, [r0, r1]
 800f79c:	4651      	mov	r1, sl
 800f79e:	9200      	str	r2, [sp, #0]
 800f7a0:	465a      	mov	r2, fp
 800f7a2:	434a      	muls	r2, r1
 800f7a4:	4659      	mov	r1, fp
 800f7a6:	1914      	adds	r4, r2, r4
 800f7a8:	9a00      	ldr	r2, [sp, #0]
 800f7aa:	3604      	adds	r6, #4
 800f7ac:	437a      	muls	r2, r7
 800f7ae:	18a2      	adds	r2, r4, r2
 800f7b0:	9c00      	ldr	r4, [sp, #0]
 800f7b2:	1412      	asrs	r2, r2, #16
 800f7b4:	434c      	muls	r4, r1
 800f7b6:	0021      	movs	r1, r4
 800f7b8:	4654      	mov	r4, sl
 800f7ba:	4367      	muls	r7, r4
 800f7bc:	9c02      	ldr	r4, [sp, #8]
 800f7be:	1bc9      	subs	r1, r1, r7
 800f7c0:	4363      	muls	r3, r4
 800f7c2:	1859      	adds	r1, r3, r1
 800f7c4:	2304      	movs	r3, #4
 800f7c6:	425b      	negs	r3, r3
 800f7c8:	469a      	mov	sl, r3
 800f7ca:	4663      	mov	r3, ip
 800f7cc:	9f01      	ldr	r7, [sp, #4]
 800f7ce:	801a      	strh	r2, [r3, #0]
 800f7d0:	9b03      	ldr	r3, [sp, #12]
 800f7d2:	44d1      	add	r9, sl
 800f7d4:	435f      	muls	r7, r3
 800f7d6:	4663      	mov	r3, ip
 800f7d8:	1879      	adds	r1, r7, r1
 800f7da:	1409      	asrs	r1, r1, #16
 800f7dc:	8059      	strh	r1, [r3, #2]
 800f7de:	4643      	mov	r3, r8
 800f7e0:	801a      	strh	r2, [r3, #0]
 800f7e2:	9a04      	ldr	r2, [sp, #16]
 800f7e4:	4249      	negs	r1, r1
 800f7e6:	4692      	mov	sl, r2
 800f7e8:	8059      	strh	r1, [r3, #2]
 800f7ea:	2304      	movs	r3, #4
 800f7ec:	4450      	add	r0, sl
 800f7ee:	4455      	add	r5, sl
 800f7f0:	469a      	mov	sl, r3
 800f7f2:	3b08      	subs	r3, #8
 800f7f4:	44d4      	add	ip, sl
 800f7f6:	469a      	mov	sl, r3
 800f7f8:	9b05      	ldr	r3, [sp, #20]
 800f7fa:	44d0      	add	r8, sl
 800f7fc:	429e      	cmp	r6, r3
 800f7fe:	d1b2      	bne.n	800f766 <arm_split_rfft_q15+0x5e>
 800f800:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f802:	9b06      	ldr	r3, [sp, #24]
 800f804:	4694      	mov	ip, r2
 800f806:	4463      	add	r3, ip
 800f808:	0019      	movs	r1, r3
 800f80a:	9807      	ldr	r0, [sp, #28]
 800f80c:	2200      	movs	r2, #0
 800f80e:	5e83      	ldrsh	r3, [r0, r2]
 800f810:	2402      	movs	r4, #2
 800f812:	5f02      	ldrsh	r2, [r0, r4]
 800f814:	1a9b      	subs	r3, r3, r2
 800f816:	105b      	asrs	r3, r3, #1
 800f818:	2200      	movs	r2, #0
 800f81a:	808b      	strh	r3, [r1, #4]
 800f81c:	0003      	movs	r3, r0
 800f81e:	80ca      	strh	r2, [r1, #6]
 800f820:	2000      	movs	r0, #0
 800f822:	5e19      	ldrsh	r1, [r3, r0]
 800f824:	2002      	movs	r0, #2
 800f826:	5e1b      	ldrsh	r3, [r3, r0]
 800f828:	18cb      	adds	r3, r1, r3
 800f82a:	4661      	mov	r1, ip
 800f82c:	105b      	asrs	r3, r3, #1
 800f82e:	800b      	strh	r3, [r1, #0]
 800f830:	804a      	strh	r2, [r1, #2]
 800f832:	b009      	add	sp, #36	@ 0x24
 800f834:	bc3c      	pop	{r2, r3, r4, r5}
 800f836:	4690      	mov	r8, r2
 800f838:	4699      	mov	r9, r3
 800f83a:	46a2      	mov	sl, r4
 800f83c:	46ab      	mov	fp, r5
 800f83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f840:	3fffffff 	.word	0x3fffffff

0800f844 <arm_rfft_q15>:
 800f844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f846:	465f      	mov	r7, fp
 800f848:	4656      	mov	r6, sl
 800f84a:	464d      	mov	r5, r9
 800f84c:	4644      	mov	r4, r8
 800f84e:	b4f0      	push	{r4, r5, r6, r7}
 800f850:	6943      	ldr	r3, [r0, #20]
 800f852:	b08b      	sub	sp, #44	@ 0x2c
 800f854:	9308      	str	r3, [sp, #32]
 800f856:	6803      	ldr	r3, [r0, #0]
 800f858:	9207      	str	r2, [sp, #28]
 800f85a:	085b      	lsrs	r3, r3, #1
 800f85c:	9302      	str	r3, [sp, #8]
 800f85e:	7902      	ldrb	r2, [r0, #4]
 800f860:	0007      	movs	r7, r0
 800f862:	000e      	movs	r6, r1
 800f864:	2a01      	cmp	r2, #1
 800f866:	d013      	beq.n	800f890 <arm_rfft_q15+0x4c>
 800f868:	7943      	ldrb	r3, [r0, #5]
 800f86a:	3708      	adds	r7, #8
 800f86c:	9808      	ldr	r0, [sp, #32]
 800f86e:	f000 fa9d 	bl	800fdac <arm_cfft_q15>
 800f872:	cf0e      	ldmia	r7!, {r1, r2, r3}
 800f874:	9101      	str	r1, [sp, #4]
 800f876:	9907      	ldr	r1, [sp, #28]
 800f878:	0030      	movs	r0, r6
 800f87a:	9100      	str	r1, [sp, #0]
 800f87c:	9902      	ldr	r1, [sp, #8]
 800f87e:	f7ff ff43 	bl	800f708 <arm_split_rfft_q15>
 800f882:	b00b      	add	sp, #44	@ 0x2c
 800f884:	bc3c      	pop	{r2, r3, r4, r5}
 800f886:	4690      	mov	r8, r2
 800f888:	4699      	mov	r9, r3
 800f88a:	46a2      	mov	sl, r4
 800f88c:	46ab      	mov	fp, r5
 800f88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f890:	0019      	movs	r1, r3
 800f892:	68c3      	ldr	r3, [r0, #12]
 800f894:	6882      	ldr	r2, [r0, #8]
 800f896:	469b      	mov	fp, r3
 800f898:	6903      	ldr	r3, [r0, #16]
 800f89a:	4698      	mov	r8, r3
 800f89c:	008b      	lsls	r3, r1, #2
 800f89e:	18f0      	adds	r0, r6, r3
 800f8a0:	2900      	cmp	r1, #0
 800f8a2:	d060      	beq.n	800f966 <arm_rfft_q15+0x122>
 800f8a4:	46b4      	mov	ip, r6
 800f8a6:	4646      	mov	r6, r8
 800f8a8:	0093      	lsls	r3, r2, #2
 800f8aa:	9a07      	ldr	r2, [sp, #28]
 800f8ac:	9306      	str	r3, [sp, #24]
 800f8ae:	9709      	str	r7, [sp, #36]	@ 0x24
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	5e43      	ldrsh	r3, [r0, r1]
 800f8b4:	3804      	subs	r0, #4
 800f8b6:	4698      	mov	r8, r3
 800f8b8:	4645      	mov	r5, r8
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	5e73      	ldrsh	r3, [r6, r1]
 800f8be:	2406      	movs	r4, #6
 800f8c0:	5f01      	ldrsh	r1, [r0, r4]
 800f8c2:	9303      	str	r3, [sp, #12]
 800f8c4:	435d      	muls	r5, r3
 800f8c6:	2402      	movs	r4, #2
 800f8c8:	5f33      	ldrsh	r3, [r6, r4]
 800f8ca:	4664      	mov	r4, ip
 800f8cc:	9104      	str	r1, [sp, #16]
 800f8ce:	4359      	muls	r1, r3
 800f8d0:	1a6d      	subs	r5, r5, r1
 800f8d2:	9505      	str	r5, [sp, #20]
 800f8d4:	2500      	movs	r5, #0
 800f8d6:	5f64      	ldrsh	r4, [r4, r5]
 800f8d8:	46a1      	mov	r9, r4
 800f8da:	465c      	mov	r4, fp
 800f8dc:	2500      	movs	r5, #0
 800f8de:	5f64      	ldrsh	r4, [r4, r5]
 800f8e0:	46a2      	mov	sl, r4
 800f8e2:	4664      	mov	r4, ip
 800f8e4:	2102      	movs	r1, #2
 800f8e6:	5e61      	ldrsh	r1, [r4, r1]
 800f8e8:	465c      	mov	r4, fp
 800f8ea:	4655      	mov	r5, sl
 800f8ec:	2702      	movs	r7, #2
 800f8ee:	5fe7      	ldrsh	r7, [r4, r7]
 800f8f0:	464c      	mov	r4, r9
 800f8f2:	436c      	muls	r4, r5
 800f8f4:	9d05      	ldr	r5, [sp, #20]
 800f8f6:	1965      	adds	r5, r4, r5
 800f8f8:	003c      	movs	r4, r7
 800f8fa:	434c      	muls	r4, r1
 800f8fc:	192c      	adds	r4, r5, r4
 800f8fe:	4655      	mov	r5, sl
 800f900:	4369      	muls	r1, r5
 800f902:	464d      	mov	r5, r9
 800f904:	436f      	muls	r7, r5
 800f906:	4645      	mov	r5, r8
 800f908:	436b      	muls	r3, r5
 800f90a:	2504      	movs	r5, #4
 800f90c:	46a8      	mov	r8, r5
 800f90e:	1bc9      	subs	r1, r1, r7
 800f910:	1ac9      	subs	r1, r1, r3
 800f912:	9f03      	ldr	r7, [sp, #12]
 800f914:	9b04      	ldr	r3, [sp, #16]
 800f916:	44c4      	add	ip, r8
 800f918:	435f      	muls	r7, r3
 800f91a:	1bc9      	subs	r1, r1, r7
 800f91c:	1409      	asrs	r1, r1, #16
 800f91e:	8051      	strh	r1, [r2, #2]
 800f920:	9906      	ldr	r1, [sp, #24]
 800f922:	9b02      	ldr	r3, [sp, #8]
 800f924:	4688      	mov	r8, r1
 800f926:	1424      	asrs	r4, r4, #16
 800f928:	3b01      	subs	r3, #1
 800f92a:	8014      	strh	r4, [r2, #0]
 800f92c:	4446      	add	r6, r8
 800f92e:	44c3      	add	fp, r8
 800f930:	9302      	str	r3, [sp, #8]
 800f932:	3204      	adds	r2, #4
 800f934:	2b00      	cmp	r3, #0
 800f936:	d1bb      	bne.n	800f8b0 <arm_rfft_q15+0x6c>
 800f938:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800f93a:	793a      	ldrb	r2, [r7, #4]
 800f93c:	9c07      	ldr	r4, [sp, #28]
 800f93e:	797b      	ldrb	r3, [r7, #5]
 800f940:	0021      	movs	r1, r4
 800f942:	9808      	ldr	r0, [sp, #32]
 800f944:	f000 fa32 	bl	800fdac <arm_cfft_q15>
 800f948:	683a      	ldr	r2, [r7, #0]
 800f94a:	0023      	movs	r3, r4
 800f94c:	2100      	movs	r1, #0
 800f94e:	2a00      	cmp	r2, #0
 800f950:	d097      	beq.n	800f882 <arm_rfft_q15+0x3e>
 800f952:	2000      	movs	r0, #0
 800f954:	5e1a      	ldrsh	r2, [r3, r0]
 800f956:	3101      	adds	r1, #1
 800f958:	0052      	lsls	r2, r2, #1
 800f95a:	801a      	strh	r2, [r3, #0]
 800f95c:	683a      	ldr	r2, [r7, #0]
 800f95e:	3302      	adds	r3, #2
 800f960:	428a      	cmp	r2, r1
 800f962:	d8f6      	bhi.n	800f952 <arm_rfft_q15+0x10e>
 800f964:	e78d      	b.n	800f882 <arm_rfft_q15+0x3e>
 800f966:	2201      	movs	r2, #1
 800f968:	e7e8      	b.n	800f93c <arm_rfft_q15+0xf8>
 800f96a:	46c0      	nop			@ (mov r8, r8)

0800f96c <arm_rfft_init_q15>:
 800f96c:	b510      	push	{r4, lr}
 800f96e:	7143      	strb	r3, [r0, #5]
 800f970:	2380      	movs	r3, #128	@ 0x80
 800f972:	4c31      	ldr	r4, [pc, #196]	@ (800fa38 <arm_rfft_init_q15+0xcc>)
 800f974:	0409      	lsls	r1, r1, #16
 800f976:	60c4      	str	r4, [r0, #12]
 800f978:	4c30      	ldr	r4, [pc, #192]	@ (800fa3c <arm_rfft_init_q15+0xd0>)
 800f97a:	0c09      	lsrs	r1, r1, #16
 800f97c:	6001      	str	r1, [r0, #0]
 800f97e:	6104      	str	r4, [r0, #16]
 800f980:	7102      	strb	r2, [r0, #4]
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	4299      	cmp	r1, r3
 800f986:	d047      	beq.n	800fa18 <arm_rfft_init_q15+0xac>
 800f988:	d912      	bls.n	800f9b0 <arm_rfft_init_q15+0x44>
 800f98a:	2380      	movs	r3, #128	@ 0x80
 800f98c:	011b      	lsls	r3, r3, #4
 800f98e:	4299      	cmp	r1, r3
 800f990:	d048      	beq.n	800fa24 <arm_rfft_init_q15+0xb8>
 800f992:	d931      	bls.n	800f9f8 <arm_rfft_init_q15+0x8c>
 800f994:	2380      	movs	r3, #128	@ 0x80
 800f996:	015b      	lsls	r3, r3, #5
 800f998:	4299      	cmp	r1, r3
 800f99a:	d01e      	beq.n	800f9da <arm_rfft_init_q15+0x6e>
 800f99c:	2380      	movs	r3, #128	@ 0x80
 800f99e:	019b      	lsls	r3, r3, #6
 800f9a0:	4299      	cmp	r1, r3
 800f9a2:	d145      	bne.n	800fa30 <arm_rfft_init_q15+0xc4>
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	6083      	str	r3, [r0, #8]
 800f9a8:	4b25      	ldr	r3, [pc, #148]	@ (800fa40 <arm_rfft_init_q15+0xd4>)
 800f9aa:	6143      	str	r3, [r0, #20]
 800f9ac:	2000      	movs	r0, #0
 800f9ae:	bd10      	pop	{r4, pc}
 800f9b0:	2940      	cmp	r1, #64	@ 0x40
 800f9b2:	d02b      	beq.n	800fa0c <arm_rfft_init_q15+0xa0>
 800f9b4:	d917      	bls.n	800f9e6 <arm_rfft_init_q15+0x7a>
 800f9b6:	2980      	cmp	r1, #128	@ 0x80
 800f9b8:	d009      	beq.n	800f9ce <arm_rfft_init_q15+0x62>
 800f9ba:	2380      	movs	r3, #128	@ 0x80
 800f9bc:	005b      	lsls	r3, r3, #1
 800f9be:	4299      	cmp	r1, r3
 800f9c0:	d136      	bne.n	800fa30 <arm_rfft_init_q15+0xc4>
 800f9c2:	2320      	movs	r3, #32
 800f9c4:	6083      	str	r3, [r0, #8]
 800f9c6:	4b1f      	ldr	r3, [pc, #124]	@ (800fa44 <arm_rfft_init_q15+0xd8>)
 800f9c8:	6143      	str	r3, [r0, #20]
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	e7ef      	b.n	800f9ae <arm_rfft_init_q15+0x42>
 800f9ce:	2340      	movs	r3, #64	@ 0x40
 800f9d0:	6083      	str	r3, [r0, #8]
 800f9d2:	4b1d      	ldr	r3, [pc, #116]	@ (800fa48 <arm_rfft_init_q15+0xdc>)
 800f9d4:	6143      	str	r3, [r0, #20]
 800f9d6:	2000      	movs	r0, #0
 800f9d8:	e7e9      	b.n	800f9ae <arm_rfft_init_q15+0x42>
 800f9da:	2302      	movs	r3, #2
 800f9dc:	6083      	str	r3, [r0, #8]
 800f9de:	4b1b      	ldr	r3, [pc, #108]	@ (800fa4c <arm_rfft_init_q15+0xe0>)
 800f9e0:	6143      	str	r3, [r0, #20]
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	e7e3      	b.n	800f9ae <arm_rfft_init_q15+0x42>
 800f9e6:	2920      	cmp	r1, #32
 800f9e8:	d122      	bne.n	800fa30 <arm_rfft_init_q15+0xc4>
 800f9ea:	2380      	movs	r3, #128	@ 0x80
 800f9ec:	005b      	lsls	r3, r3, #1
 800f9ee:	6083      	str	r3, [r0, #8]
 800f9f0:	4b17      	ldr	r3, [pc, #92]	@ (800fa50 <arm_rfft_init_q15+0xe4>)
 800f9f2:	6143      	str	r3, [r0, #20]
 800f9f4:	2000      	movs	r0, #0
 800f9f6:	e7da      	b.n	800f9ae <arm_rfft_init_q15+0x42>
 800f9f8:	2380      	movs	r3, #128	@ 0x80
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	4299      	cmp	r1, r3
 800f9fe:	d117      	bne.n	800fa30 <arm_rfft_init_q15+0xc4>
 800fa00:	2308      	movs	r3, #8
 800fa02:	6083      	str	r3, [r0, #8]
 800fa04:	4b13      	ldr	r3, [pc, #76]	@ (800fa54 <arm_rfft_init_q15+0xe8>)
 800fa06:	6143      	str	r3, [r0, #20]
 800fa08:	2000      	movs	r0, #0
 800fa0a:	e7d0      	b.n	800f9ae <arm_rfft_init_q15+0x42>
 800fa0c:	2380      	movs	r3, #128	@ 0x80
 800fa0e:	6083      	str	r3, [r0, #8]
 800fa10:	4b11      	ldr	r3, [pc, #68]	@ (800fa58 <arm_rfft_init_q15+0xec>)
 800fa12:	6143      	str	r3, [r0, #20]
 800fa14:	2000      	movs	r0, #0
 800fa16:	e7ca      	b.n	800f9ae <arm_rfft_init_q15+0x42>
 800fa18:	2310      	movs	r3, #16
 800fa1a:	6083      	str	r3, [r0, #8]
 800fa1c:	4b0f      	ldr	r3, [pc, #60]	@ (800fa5c <arm_rfft_init_q15+0xf0>)
 800fa1e:	6143      	str	r3, [r0, #20]
 800fa20:	2000      	movs	r0, #0
 800fa22:	e7c4      	b.n	800f9ae <arm_rfft_init_q15+0x42>
 800fa24:	2304      	movs	r3, #4
 800fa26:	6083      	str	r3, [r0, #8]
 800fa28:	4b0d      	ldr	r3, [pc, #52]	@ (800fa60 <arm_rfft_init_q15+0xf4>)
 800fa2a:	6143      	str	r3, [r0, #20]
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	e7be      	b.n	800f9ae <arm_rfft_init_q15+0x42>
 800fa30:	2001      	movs	r0, #1
 800fa32:	4240      	negs	r0, r0
 800fa34:	e7bb      	b.n	800f9ae <arm_rfft_init_q15+0x42>
 800fa36:	46c0      	nop			@ (mov r8, r8)
 800fa38:	08014f28 	.word	0x08014f28
 800fa3c:	08018f28 	.word	0x08018f28
 800fa40:	0801cf88 	.word	0x0801cf88
 800fa44:	0801cf38 	.word	0x0801cf38
 800fa48:	0801cf68 	.word	0x0801cf68
 800fa4c:	0801cf78 	.word	0x0801cf78
 800fa50:	0801cf98 	.word	0x0801cf98
 800fa54:	0801cf48 	.word	0x0801cf48
 800fa58:	0801cfa8 	.word	0x0801cfa8
 800fa5c:	0801cf28 	.word	0x0801cf28
 800fa60:	0801cf58 	.word	0x0801cf58

0800fa64 <arm_sqrt_q15>:
 800fa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa66:	0004      	movs	r4, r0
 800fa68:	000f      	movs	r7, r1
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	dd56      	ble.n	800fb1c <arm_sqrt_q15+0xb8>
 800fa6e:	f7f0 fd7d 	bl	800056c <__clzsi2>
 800fa72:	2601      	movs	r6, #1
 800fa74:	3811      	subs	r0, #17
 800fa76:	b285      	uxth	r5, r0
 800fa78:	402e      	ands	r6, r5
 800fa7a:	d046      	beq.n	800fb0a <arm_sqrt_q15+0xa6>
 800fa7c:	1e6b      	subs	r3, r5, #1
 800fa7e:	409c      	lsls	r4, r3
 800fa80:	b224      	sxth	r4, r4
 800fa82:	0020      	movs	r0, r4
 800fa84:	f7f1 fd68 	bl	8001558 <__aeabi_i2f>
 800fa88:	21e0      	movs	r1, #224	@ 0xe0
 800fa8a:	0589      	lsls	r1, r1, #22
 800fa8c:	f7f1 fa4c 	bl	8000f28 <__aeabi_fmul>
 800fa90:	218d      	movs	r1, #141	@ 0x8d
 800fa92:	4b25      	ldr	r3, [pc, #148]	@ (800fb28 <arm_sqrt_q15+0xc4>)
 800fa94:	1040      	asrs	r0, r0, #1
 800fa96:	1a18      	subs	r0, r3, r0
 800fa98:	05c9      	lsls	r1, r1, #23
 800fa9a:	f7f1 fa45 	bl	8000f28 <__aeabi_fmul>
 800fa9e:	f7f1 fd3b 	bl	8001518 <__aeabi_f2iz>
 800faa2:	23c0      	movs	r3, #192	@ 0xc0
 800faa4:	b201      	sxth	r1, r0
 800faa6:	000a      	movs	r2, r1
 800faa8:	019b      	lsls	r3, r3, #6
 800faaa:	469c      	mov	ip, r3
 800faac:	434a      	muls	r2, r1
 800faae:	13d2      	asrs	r2, r2, #15
 800fab0:	1060      	asrs	r0, r4, #1
 800fab2:	b212      	sxth	r2, r2
 800fab4:	4342      	muls	r2, r0
 800fab6:	13d2      	asrs	r2, r2, #15
 800fab8:	1a9a      	subs	r2, r3, r2
 800faba:	434a      	muls	r2, r1
 800fabc:	13d2      	asrs	r2, r2, #15
 800fabe:	0092      	lsls	r2, r2, #2
 800fac0:	b212      	sxth	r2, r2
 800fac2:	0013      	movs	r3, r2
 800fac4:	4661      	mov	r1, ip
 800fac6:	4353      	muls	r3, r2
 800fac8:	13db      	asrs	r3, r3, #15
 800faca:	b21b      	sxth	r3, r3
 800facc:	4343      	muls	r3, r0
 800face:	13db      	asrs	r3, r3, #15
 800fad0:	1acb      	subs	r3, r1, r3
 800fad2:	435a      	muls	r2, r3
 800fad4:	13d2      	asrs	r2, r2, #15
 800fad6:	0092      	lsls	r2, r2, #2
 800fad8:	b213      	sxth	r3, r2
 800fada:	001a      	movs	r2, r3
 800fadc:	435a      	muls	r2, r3
 800fade:	13d2      	asrs	r2, r2, #15
 800fae0:	b212      	sxth	r2, r2
 800fae2:	4350      	muls	r0, r2
 800fae4:	13c0      	asrs	r0, r0, #15
 800fae6:	1a08      	subs	r0, r1, r0
 800fae8:	4343      	muls	r3, r0
 800faea:	13db      	asrs	r3, r3, #15
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	b21b      	sxth	r3, r3
 800faf0:	4363      	muls	r3, r4
 800faf2:	13db      	asrs	r3, r3, #15
 800faf4:	b21b      	sxth	r3, r3
 800faf6:	005b      	lsls	r3, r3, #1
 800faf8:	b21b      	sxth	r3, r3
 800fafa:	2e00      	cmp	r6, #0
 800fafc:	d108      	bne.n	800fb10 <arm_sqrt_q15+0xac>
 800fafe:	b22d      	sxth	r5, r5
 800fb00:	106d      	asrs	r5, r5, #1
 800fb02:	412b      	asrs	r3, r5
 800fb04:	2000      	movs	r0, #0
 800fb06:	803b      	strh	r3, [r7, #0]
 800fb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb0a:	40ac      	lsls	r4, r5
 800fb0c:	b224      	sxth	r4, r4
 800fb0e:	e7b8      	b.n	800fa82 <arm_sqrt_q15+0x1e>
 800fb10:	3d01      	subs	r5, #1
 800fb12:	0fe8      	lsrs	r0, r5, #31
 800fb14:	1945      	adds	r5, r0, r5
 800fb16:	106d      	asrs	r5, r5, #1
 800fb18:	412b      	asrs	r3, r5
 800fb1a:	e7f3      	b.n	800fb04 <arm_sqrt_q15+0xa0>
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	2001      	movs	r0, #1
 800fb20:	800b      	strh	r3, [r1, #0]
 800fb22:	4240      	negs	r0, r0
 800fb24:	e7f0      	b.n	800fb08 <arm_sqrt_q15+0xa4>
 800fb26:	46c0      	nop			@ (mov r8, r8)
 800fb28:	5f3759df 	.word	0x5f3759df

0800fb2c <arm_abs_q15>:
 800fb2c:	b570      	push	{r4, r5, r6, lr}
 800fb2e:	2400      	movs	r4, #0
 800fb30:	2a00      	cmp	r2, #0
 800fb32:	d012      	beq.n	800fb5a <arm_abs_q15+0x2e>
 800fb34:	4d0a      	ldr	r5, [pc, #40]	@ (800fb60 <arm_abs_q15+0x34>)
 800fb36:	e004      	b.n	800fb42 <arm_abs_q15+0x16>
 800fb38:	3a01      	subs	r2, #1
 800fb3a:	530b      	strh	r3, [r1, r4]
 800fb3c:	3402      	adds	r4, #2
 800fb3e:	2a00      	cmp	r2, #0
 800fb40:	d00b      	beq.n	800fb5a <arm_abs_q15+0x2e>
 800fb42:	5f03      	ldrsh	r3, [r0, r4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	dcf7      	bgt.n	800fb38 <arm_abs_q15+0xc>
 800fb48:	42ab      	cmp	r3, r5
 800fb4a:	d007      	beq.n	800fb5c <arm_abs_q15+0x30>
 800fb4c:	425b      	negs	r3, r3
 800fb4e:	b21b      	sxth	r3, r3
 800fb50:	3a01      	subs	r2, #1
 800fb52:	530b      	strh	r3, [r1, r4]
 800fb54:	3402      	adds	r4, #2
 800fb56:	2a00      	cmp	r2, #0
 800fb58:	d1f3      	bne.n	800fb42 <arm_abs_q15+0x16>
 800fb5a:	bd70      	pop	{r4, r5, r6, pc}
 800fb5c:	4b01      	ldr	r3, [pc, #4]	@ (800fb64 <arm_abs_q15+0x38>)
 800fb5e:	e7eb      	b.n	800fb38 <arm_abs_q15+0xc>
 800fb60:	ffff8000 	.word	0xffff8000
 800fb64:	00007fff 	.word	0x00007fff

0800fb68 <arm_cfft_radix4by2_q15>:
 800fb68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb6a:	465f      	mov	r7, fp
 800fb6c:	4644      	mov	r4, r8
 800fb6e:	4656      	mov	r6, sl
 800fb70:	464d      	mov	r5, r9
 800fb72:	b4f0      	push	{r4, r5, r6, r7}
 800fb74:	084b      	lsrs	r3, r1, #1
 800fb76:	b087      	sub	sp, #28
 800fb78:	9103      	str	r1, [sp, #12]
 800fb7a:	0007      	movs	r7, r0
 800fb7c:	9002      	str	r0, [sp, #8]
 800fb7e:	0014      	movs	r4, r2
 800fb80:	9204      	str	r2, [sp, #16]
 800fb82:	1e19      	subs	r1, r3, #0
 800fb84:	9305      	str	r3, [sp, #20]
 800fb86:	d06c      	beq.n	800fc62 <arm_cfft_radix4by2_q15+0xfa>
 800fb88:	008a      	lsls	r2, r1, #2
 800fb8a:	4691      	mov	r9, r2
 800fb8c:	0022      	movs	r2, r4
 800fb8e:	0003      	movs	r3, r0
 800fb90:	444a      	add	r2, r9
 800fb92:	4693      	mov	fp, r2
 800fb94:	0025      	movs	r5, r4
 800fb96:	4684      	mov	ip, r0
 800fb98:	464e      	mov	r6, r9
 800fb9a:	3302      	adds	r3, #2
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	5e6a      	ldrsh	r2, [r5, r1]
 800fba0:	4690      	mov	r8, r2
 800fba2:	2200      	movs	r2, #0
 800fba4:	5eb8      	ldrsh	r0, [r7, r2]
 800fba6:	2202      	movs	r2, #2
 800fba8:	5ea9      	ldrsh	r1, [r5, r2]
 800fbaa:	1042      	asrs	r2, r0, #1
 800fbac:	4691      	mov	r9, r2
 800fbae:	5fb8      	ldrsh	r0, [r7, r6]
 800fbb0:	9101      	str	r1, [sp, #4]
 800fbb2:	1041      	asrs	r1, r0, #1
 800fbb4:	468a      	mov	sl, r1
 800fbb6:	464a      	mov	r2, r9
 800fbb8:	4452      	add	r2, sl
 800fbba:	1052      	asrs	r2, r2, #1
 800fbbc:	803a      	strh	r2, [r7, #0]
 800fbbe:	000c      	movs	r4, r1
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	5e5a      	ldrsh	r2, [r3, r1]
 800fbc4:	5f99      	ldrsh	r1, [r3, r6]
 800fbc6:	1052      	asrs	r2, r2, #1
 800fbc8:	1049      	asrs	r1, r1, #1
 800fbca:	1888      	adds	r0, r1, r2
 800fbcc:	1040      	asrs	r0, r0, #1
 800fbce:	8018      	strh	r0, [r3, #0]
 800fbd0:	4648      	mov	r0, r9
 800fbd2:	1a52      	subs	r2, r2, r1
 800fbd4:	4641      	mov	r1, r8
 800fbd6:	1b00      	subs	r0, r0, r4
 800fbd8:	4341      	muls	r1, r0
 800fbda:	1409      	asrs	r1, r1, #16
 800fbdc:	4689      	mov	r9, r1
 800fbde:	9901      	ldr	r1, [sp, #4]
 800fbe0:	3504      	adds	r5, #4
 800fbe2:	4351      	muls	r1, r2
 800fbe4:	1409      	asrs	r1, r1, #16
 800fbe6:	4449      	add	r1, r9
 800fbe8:	53b9      	strh	r1, [r7, r6]
 800fbea:	4641      	mov	r1, r8
 800fbec:	434a      	muls	r2, r1
 800fbee:	1411      	asrs	r1, r2, #16
 800fbf0:	9a01      	ldr	r2, [sp, #4]
 800fbf2:	3704      	adds	r7, #4
 800fbf4:	4342      	muls	r2, r0
 800fbf6:	1410      	asrs	r0, r2, #16
 800fbf8:	1a0a      	subs	r2, r1, r0
 800fbfa:	539a      	strh	r2, [r3, r6]
 800fbfc:	3304      	adds	r3, #4
 800fbfe:	455d      	cmp	r5, fp
 800fc00:	d1cc      	bne.n	800fb9c <arm_cfft_radix4by2_q15+0x34>
 800fc02:	9d05      	ldr	r5, [sp, #20]
 800fc04:	9c02      	ldr	r4, [sp, #8]
 800fc06:	9f04      	ldr	r7, [sp, #16]
 800fc08:	2302      	movs	r3, #2
 800fc0a:	003a      	movs	r2, r7
 800fc0c:	0029      	movs	r1, r5
 800fc0e:	0020      	movs	r0, r4
 800fc10:	4666      	mov	r6, ip
 800fc12:	f000 f92f 	bl	800fe74 <arm_radix4_butterfly_q15>
 800fc16:	46a4      	mov	ip, r4
 800fc18:	9903      	ldr	r1, [sp, #12]
 800fc1a:	2302      	movs	r3, #2
 800fc1c:	0048      	lsls	r0, r1, #1
 800fc1e:	4460      	add	r0, ip
 800fc20:	003a      	movs	r2, r7
 800fc22:	0029      	movs	r1, r5
 800fc24:	f000 f926 	bl	800fe74 <arm_radix4_butterfly_q15>
 800fc28:	46a4      	mov	ip, r4
 800fc2a:	00e8      	lsls	r0, r5, #3
 800fc2c:	4460      	add	r0, ip
 800fc2e:	2300      	movs	r3, #0
 800fc30:	5ef4      	ldrsh	r4, [r6, r3]
 800fc32:	2302      	movs	r3, #2
 800fc34:	5ef1      	ldrsh	r1, [r6, r3]
 800fc36:	2304      	movs	r3, #4
 800fc38:	5ef2      	ldrsh	r2, [r6, r3]
 800fc3a:	2506      	movs	r5, #6
 800fc3c:	5f73      	ldrsh	r3, [r6, r5]
 800fc3e:	0064      	lsls	r4, r4, #1
 800fc40:	0049      	lsls	r1, r1, #1
 800fc42:	0052      	lsls	r2, r2, #1
 800fc44:	005b      	lsls	r3, r3, #1
 800fc46:	8034      	strh	r4, [r6, #0]
 800fc48:	8071      	strh	r1, [r6, #2]
 800fc4a:	80b2      	strh	r2, [r6, #4]
 800fc4c:	80f3      	strh	r3, [r6, #6]
 800fc4e:	3608      	adds	r6, #8
 800fc50:	42b0      	cmp	r0, r6
 800fc52:	d1ec      	bne.n	800fc2e <arm_cfft_radix4by2_q15+0xc6>
 800fc54:	b007      	add	sp, #28
 800fc56:	bc3c      	pop	{r2, r3, r4, r5}
 800fc58:	4690      	mov	r8, r2
 800fc5a:	4699      	mov	r9, r3
 800fc5c:	46a2      	mov	sl, r4
 800fc5e:	46ab      	mov	fp, r5
 800fc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc62:	9c02      	ldr	r4, [sp, #8]
 800fc64:	2302      	movs	r3, #2
 800fc66:	0020      	movs	r0, r4
 800fc68:	2100      	movs	r1, #0
 800fc6a:	0015      	movs	r5, r2
 800fc6c:	f000 f902 	bl	800fe74 <arm_radix4_butterfly_q15>
 800fc70:	46a4      	mov	ip, r4
 800fc72:	9b03      	ldr	r3, [sp, #12]
 800fc74:	002a      	movs	r2, r5
 800fc76:	0058      	lsls	r0, r3, #1
 800fc78:	4460      	add	r0, ip
 800fc7a:	2302      	movs	r3, #2
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	f000 f8f9 	bl	800fe74 <arm_radix4_butterfly_q15>
 800fc82:	e7e7      	b.n	800fc54 <arm_cfft_radix4by2_q15+0xec>

0800fc84 <arm_cfft_radix4by2_inverse_q15>:
 800fc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc86:	465f      	mov	r7, fp
 800fc88:	4644      	mov	r4, r8
 800fc8a:	4656      	mov	r6, sl
 800fc8c:	464d      	mov	r5, r9
 800fc8e:	b4f0      	push	{r4, r5, r6, r7}
 800fc90:	084b      	lsrs	r3, r1, #1
 800fc92:	b087      	sub	sp, #28
 800fc94:	9103      	str	r1, [sp, #12]
 800fc96:	0007      	movs	r7, r0
 800fc98:	9002      	str	r0, [sp, #8]
 800fc9a:	0014      	movs	r4, r2
 800fc9c:	9204      	str	r2, [sp, #16]
 800fc9e:	1e19      	subs	r1, r3, #0
 800fca0:	9305      	str	r3, [sp, #20]
 800fca2:	d100      	bne.n	800fca6 <arm_cfft_radix4by2_inverse_q15+0x22>
 800fca4:	e070      	b.n	800fd88 <arm_cfft_radix4by2_inverse_q15+0x104>
 800fca6:	008a      	lsls	r2, r1, #2
 800fca8:	4691      	mov	r9, r2
 800fcaa:	0022      	movs	r2, r4
 800fcac:	0003      	movs	r3, r0
 800fcae:	444a      	add	r2, r9
 800fcb0:	4692      	mov	sl, r2
 800fcb2:	464d      	mov	r5, r9
 800fcb4:	4684      	mov	ip, r0
 800fcb6:	3302      	adds	r3, #2
 800fcb8:	2200      	movs	r2, #0
 800fcba:	5eb9      	ldrsh	r1, [r7, r2]
 800fcbc:	2202      	movs	r2, #2
 800fcbe:	5ea0      	ldrsh	r0, [r4, r2]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	5ea6      	ldrsh	r6, [r4, r2]
 800fcc4:	104a      	asrs	r2, r1, #1
 800fcc6:	4691      	mov	r9, r2
 800fcc8:	5f79      	ldrsh	r1, [r7, r5]
 800fcca:	464a      	mov	r2, r9
 800fccc:	1049      	asrs	r1, r1, #1
 800fcce:	1852      	adds	r2, r2, r1
 800fcd0:	1052      	asrs	r2, r2, #1
 800fcd2:	803a      	strh	r2, [r7, #0]
 800fcd4:	9001      	str	r0, [sp, #4]
 800fcd6:	2000      	movs	r0, #0
 800fcd8:	5e1a      	ldrsh	r2, [r3, r0]
 800fcda:	3404      	adds	r4, #4
 800fcdc:	1052      	asrs	r2, r2, #1
 800fcde:	4690      	mov	r8, r2
 800fce0:	5f5a      	ldrsh	r2, [r3, r5]
 800fce2:	1052      	asrs	r2, r2, #1
 800fce4:	4693      	mov	fp, r2
 800fce6:	44c3      	add	fp, r8
 800fce8:	4658      	mov	r0, fp
 800fcea:	1040      	asrs	r0, r0, #1
 800fcec:	8018      	strh	r0, [r3, #0]
 800fcee:	4648      	mov	r0, r9
 800fcf0:	1a41      	subs	r1, r0, r1
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	1a82      	subs	r2, r0, r2
 800fcf6:	0030      	movs	r0, r6
 800fcf8:	4348      	muls	r0, r1
 800fcfa:	1400      	asrs	r0, r0, #16
 800fcfc:	4681      	mov	r9, r0
 800fcfe:	9801      	ldr	r0, [sp, #4]
 800fd00:	4693      	mov	fp, r2
 800fd02:	4350      	muls	r0, r2
 800fd04:	1400      	asrs	r0, r0, #16
 800fd06:	4680      	mov	r8, r0
 800fd08:	4648      	mov	r0, r9
 800fd0a:	4642      	mov	r2, r8
 800fd0c:	1a80      	subs	r0, r0, r2
 800fd0e:	465a      	mov	r2, fp
 800fd10:	5378      	strh	r0, [r7, r5]
 800fd12:	9801      	ldr	r0, [sp, #4]
 800fd14:	4372      	muls	r2, r6
 800fd16:	4348      	muls	r0, r1
 800fd18:	1412      	asrs	r2, r2, #16
 800fd1a:	1401      	asrs	r1, r0, #16
 800fd1c:	1852      	adds	r2, r2, r1
 800fd1e:	535a      	strh	r2, [r3, r5]
 800fd20:	3704      	adds	r7, #4
 800fd22:	3304      	adds	r3, #4
 800fd24:	4554      	cmp	r4, sl
 800fd26:	d1c7      	bne.n	800fcb8 <arm_cfft_radix4by2_inverse_q15+0x34>
 800fd28:	9d05      	ldr	r5, [sp, #20]
 800fd2a:	9c02      	ldr	r4, [sp, #8]
 800fd2c:	9f04      	ldr	r7, [sp, #16]
 800fd2e:	2302      	movs	r3, #2
 800fd30:	003a      	movs	r2, r7
 800fd32:	0029      	movs	r1, r5
 800fd34:	0020      	movs	r0, r4
 800fd36:	4666      	mov	r6, ip
 800fd38:	f000 fc3c 	bl	80105b4 <arm_radix4_butterfly_inverse_q15>
 800fd3c:	46a4      	mov	ip, r4
 800fd3e:	9903      	ldr	r1, [sp, #12]
 800fd40:	2302      	movs	r3, #2
 800fd42:	0048      	lsls	r0, r1, #1
 800fd44:	4460      	add	r0, ip
 800fd46:	003a      	movs	r2, r7
 800fd48:	0029      	movs	r1, r5
 800fd4a:	f000 fc33 	bl	80105b4 <arm_radix4_butterfly_inverse_q15>
 800fd4e:	46a4      	mov	ip, r4
 800fd50:	00e8      	lsls	r0, r5, #3
 800fd52:	4460      	add	r0, ip
 800fd54:	2300      	movs	r3, #0
 800fd56:	5ef4      	ldrsh	r4, [r6, r3]
 800fd58:	2302      	movs	r3, #2
 800fd5a:	5ef1      	ldrsh	r1, [r6, r3]
 800fd5c:	2304      	movs	r3, #4
 800fd5e:	5ef2      	ldrsh	r2, [r6, r3]
 800fd60:	2506      	movs	r5, #6
 800fd62:	5f73      	ldrsh	r3, [r6, r5]
 800fd64:	0064      	lsls	r4, r4, #1
 800fd66:	0049      	lsls	r1, r1, #1
 800fd68:	0052      	lsls	r2, r2, #1
 800fd6a:	005b      	lsls	r3, r3, #1
 800fd6c:	8034      	strh	r4, [r6, #0]
 800fd6e:	8071      	strh	r1, [r6, #2]
 800fd70:	80b2      	strh	r2, [r6, #4]
 800fd72:	80f3      	strh	r3, [r6, #6]
 800fd74:	3608      	adds	r6, #8
 800fd76:	42b0      	cmp	r0, r6
 800fd78:	d1ec      	bne.n	800fd54 <arm_cfft_radix4by2_inverse_q15+0xd0>
 800fd7a:	b007      	add	sp, #28
 800fd7c:	bc3c      	pop	{r2, r3, r4, r5}
 800fd7e:	4690      	mov	r8, r2
 800fd80:	4699      	mov	r9, r3
 800fd82:	46a2      	mov	sl, r4
 800fd84:	46ab      	mov	fp, r5
 800fd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd88:	9c02      	ldr	r4, [sp, #8]
 800fd8a:	2302      	movs	r3, #2
 800fd8c:	0020      	movs	r0, r4
 800fd8e:	2100      	movs	r1, #0
 800fd90:	0015      	movs	r5, r2
 800fd92:	f000 fc0f 	bl	80105b4 <arm_radix4_butterfly_inverse_q15>
 800fd96:	46a4      	mov	ip, r4
 800fd98:	9b03      	ldr	r3, [sp, #12]
 800fd9a:	002a      	movs	r2, r5
 800fd9c:	0058      	lsls	r0, r3, #1
 800fd9e:	4460      	add	r0, ip
 800fda0:	2302      	movs	r3, #2
 800fda2:	2100      	movs	r1, #0
 800fda4:	f000 fc06 	bl	80105b4 <arm_radix4_butterfly_inverse_q15>
 800fda8:	e7e7      	b.n	800fd7a <arm_cfft_radix4by2_inverse_q15+0xf6>
 800fdaa:	46c0      	nop			@ (mov r8, r8)

0800fdac <arm_cfft_q15>:
 800fdac:	b570      	push	{r4, r5, r6, lr}
 800fdae:	001e      	movs	r6, r3
 800fdb0:	2380      	movs	r3, #128	@ 0x80
 800fdb2:	000d      	movs	r5, r1
 800fdb4:	0004      	movs	r4, r0
 800fdb6:	8801      	ldrh	r1, [r0, #0]
 800fdb8:	005b      	lsls	r3, r3, #1
 800fdba:	2a01      	cmp	r2, #1
 800fdbc:	d028      	beq.n	800fe10 <arm_cfft_q15+0x64>
 800fdbe:	4299      	cmp	r1, r3
 800fdc0:	d020      	beq.n	800fe04 <arm_cfft_q15+0x58>
 800fdc2:	d812      	bhi.n	800fdea <arm_cfft_q15+0x3e>
 800fdc4:	2920      	cmp	r1, #32
 800fdc6:	d004      	beq.n	800fdd2 <arm_cfft_q15+0x26>
 800fdc8:	d949      	bls.n	800fe5e <arm_cfft_q15+0xb2>
 800fdca:	2940      	cmp	r1, #64	@ 0x40
 800fdcc:	d01a      	beq.n	800fe04 <arm_cfft_q15+0x58>
 800fdce:	2980      	cmp	r1, #128	@ 0x80
 800fdd0:	d103      	bne.n	800fdda <arm_cfft_q15+0x2e>
 800fdd2:	6862      	ldr	r2, [r4, #4]
 800fdd4:	0028      	movs	r0, r5
 800fdd6:	f7ff fec7 	bl	800fb68 <arm_cfft_radix4by2_q15>
 800fdda:	2e00      	cmp	r6, #0
 800fddc:	d004      	beq.n	800fde8 <arm_cfft_q15+0x3c>
 800fdde:	68a2      	ldr	r2, [r4, #8]
 800fde0:	89a1      	ldrh	r1, [r4, #12]
 800fde2:	0028      	movs	r0, r5
 800fde4:	f7f0 f9a5 	bl	8000132 <arm_bitreversal_16>
 800fde8:	bd70      	pop	{r4, r5, r6, pc}
 800fdea:	2380      	movs	r3, #128	@ 0x80
 800fdec:	00db      	lsls	r3, r3, #3
 800fdee:	4299      	cmp	r1, r3
 800fdf0:	d008      	beq.n	800fe04 <arm_cfft_q15+0x58>
 800fdf2:	d92f      	bls.n	800fe54 <arm_cfft_q15+0xa8>
 800fdf4:	2380      	movs	r3, #128	@ 0x80
 800fdf6:	011b      	lsls	r3, r3, #4
 800fdf8:	4299      	cmp	r1, r3
 800fdfa:	d0ea      	beq.n	800fdd2 <arm_cfft_q15+0x26>
 800fdfc:	2380      	movs	r3, #128	@ 0x80
 800fdfe:	015b      	lsls	r3, r3, #5
 800fe00:	4299      	cmp	r1, r3
 800fe02:	d1ea      	bne.n	800fdda <arm_cfft_q15+0x2e>
 800fe04:	2301      	movs	r3, #1
 800fe06:	6862      	ldr	r2, [r4, #4]
 800fe08:	0028      	movs	r0, r5
 800fe0a:	f000 f833 	bl	800fe74 <arm_radix4_butterfly_q15>
 800fe0e:	e7e4      	b.n	800fdda <arm_cfft_q15+0x2e>
 800fe10:	4299      	cmp	r1, r3
 800fe12:	d019      	beq.n	800fe48 <arm_cfft_q15+0x9c>
 800fe14:	d80b      	bhi.n	800fe2e <arm_cfft_q15+0x82>
 800fe16:	2920      	cmp	r1, #32
 800fe18:	d004      	beq.n	800fe24 <arm_cfft_q15+0x78>
 800fe1a:	d928      	bls.n	800fe6e <arm_cfft_q15+0xc2>
 800fe1c:	2940      	cmp	r1, #64	@ 0x40
 800fe1e:	d013      	beq.n	800fe48 <arm_cfft_q15+0x9c>
 800fe20:	2980      	cmp	r1, #128	@ 0x80
 800fe22:	d1da      	bne.n	800fdda <arm_cfft_q15+0x2e>
 800fe24:	6862      	ldr	r2, [r4, #4]
 800fe26:	0028      	movs	r0, r5
 800fe28:	f7ff ff2c 	bl	800fc84 <arm_cfft_radix4by2_inverse_q15>
 800fe2c:	e7d5      	b.n	800fdda <arm_cfft_q15+0x2e>
 800fe2e:	2380      	movs	r3, #128	@ 0x80
 800fe30:	00db      	lsls	r3, r3, #3
 800fe32:	4299      	cmp	r1, r3
 800fe34:	d008      	beq.n	800fe48 <arm_cfft_q15+0x9c>
 800fe36:	d915      	bls.n	800fe64 <arm_cfft_q15+0xb8>
 800fe38:	2380      	movs	r3, #128	@ 0x80
 800fe3a:	011b      	lsls	r3, r3, #4
 800fe3c:	4299      	cmp	r1, r3
 800fe3e:	d0f1      	beq.n	800fe24 <arm_cfft_q15+0x78>
 800fe40:	2380      	movs	r3, #128	@ 0x80
 800fe42:	015b      	lsls	r3, r3, #5
 800fe44:	4299      	cmp	r1, r3
 800fe46:	d1c8      	bne.n	800fdda <arm_cfft_q15+0x2e>
 800fe48:	2301      	movs	r3, #1
 800fe4a:	6862      	ldr	r2, [r4, #4]
 800fe4c:	0028      	movs	r0, r5
 800fe4e:	f000 fbb1 	bl	80105b4 <arm_radix4_butterfly_inverse_q15>
 800fe52:	e7c2      	b.n	800fdda <arm_cfft_q15+0x2e>
 800fe54:	2380      	movs	r3, #128	@ 0x80
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	4299      	cmp	r1, r3
 800fe5a:	d0ba      	beq.n	800fdd2 <arm_cfft_q15+0x26>
 800fe5c:	e7bd      	b.n	800fdda <arm_cfft_q15+0x2e>
 800fe5e:	2910      	cmp	r1, #16
 800fe60:	d1bb      	bne.n	800fdda <arm_cfft_q15+0x2e>
 800fe62:	e7cf      	b.n	800fe04 <arm_cfft_q15+0x58>
 800fe64:	2380      	movs	r3, #128	@ 0x80
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	4299      	cmp	r1, r3
 800fe6a:	d0db      	beq.n	800fe24 <arm_cfft_q15+0x78>
 800fe6c:	e7b5      	b.n	800fdda <arm_cfft_q15+0x2e>
 800fe6e:	2910      	cmp	r1, #16
 800fe70:	d1b3      	bne.n	800fdda <arm_cfft_q15+0x2e>
 800fe72:	e7e9      	b.n	800fe48 <arm_cfft_q15+0x9c>

0800fe74 <arm_radix4_butterfly_q15>:
 800fe74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe76:	4656      	mov	r6, sl
 800fe78:	464d      	mov	r5, r9
 800fe7a:	465f      	mov	r7, fp
 800fe7c:	4644      	mov	r4, r8
 800fe7e:	b4f0      	push	{r4, r5, r6, r7}
 800fe80:	b0ab      	sub	sp, #172	@ 0xac
 800fe82:	9114      	str	r1, [sp, #80]	@ 0x50
 800fe84:	0889      	lsrs	r1, r1, #2
 800fe86:	000d      	movs	r5, r1
 800fe88:	9122      	str	r1, [sp, #136]	@ 0x88
 800fe8a:	0001      	movs	r1, r0
 800fe8c:	9028      	str	r0, [sp, #160]	@ 0xa0
 800fe8e:	9020      	str	r0, [sp, #128]	@ 0x80
 800fe90:	00a8      	lsls	r0, r5, #2
 800fe92:	0004      	movs	r4, r0
 800fe94:	9003      	str	r0, [sp, #12]
 800fe96:	0008      	movs	r0, r1
 800fe98:	4682      	mov	sl, r0
 800fe9a:	0016      	movs	r6, r2
 800fe9c:	9229      	str	r2, [sp, #164]	@ 0xa4
 800fe9e:	1ca2      	adds	r2, r4, #2
 800fea0:	4689      	mov	r9, r1
 800fea2:	4492      	add	sl, r2
 800fea4:	00d9      	lsls	r1, r3, #3
 800fea6:	005a      	lsls	r2, r3, #1
 800fea8:	9108      	str	r1, [sp, #32]
 800feaa:	0099      	lsls	r1, r3, #2
 800feac:	18d3      	adds	r3, r2, r3
 800feae:	46a4      	mov	ip, r4
 800feb0:	9107      	str	r1, [sp, #28]
 800feb2:	0099      	lsls	r1, r3, #2
 800feb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800feb6:	00e9      	lsls	r1, r5, #3
 800feb8:	468b      	mov	fp, r1
 800feba:	44e1      	add	r9, ip
 800febc:	44cc      	add	ip, r9
 800febe:	4661      	mov	r1, ip
 800fec0:	465b      	mov	r3, fp
 800fec2:	9001      	str	r0, [sp, #4]
 800fec4:	464a      	mov	r2, r9
 800fec6:	4650      	mov	r0, sl
 800fec8:	910a      	str	r1, [sp, #40]	@ 0x28
 800feca:	9606      	str	r6, [sp, #24]
 800fecc:	9604      	str	r6, [sp, #16]
 800fece:	9605      	str	r6, [sp, #20]
 800fed0:	9302      	str	r3, [sp, #8]
 800fed2:	9c01      	ldr	r4, [sp, #4]
 800fed4:	9e03      	ldr	r6, [sp, #12]
 800fed6:	2300      	movs	r3, #0
 800fed8:	5ee1      	ldrsh	r1, [r4, r3]
 800feda:	2700      	movs	r7, #0
 800fedc:	5fd5      	ldrsh	r5, [r2, r7]
 800fede:	108b      	asrs	r3, r1, #2
 800fee0:	4698      	mov	r8, r3
 800fee2:	2102      	movs	r1, #2
 800fee4:	5e63      	ldrsh	r3, [r4, r1]
 800fee6:	109b      	asrs	r3, r3, #2
 800fee8:	469c      	mov	ip, r3
 800feea:	0033      	movs	r3, r6
 800feec:	5ed1      	ldrsh	r1, [r2, r3]
 800feee:	5f83      	ldrsh	r3, [r0, r6]
 800fef0:	4644      	mov	r4, r8
 800fef2:	1089      	asrs	r1, r1, #2
 800fef4:	1a64      	subs	r4, r4, r1
 800fef6:	46a3      	mov	fp, r4
 800fef8:	4664      	mov	r4, ip
 800fefa:	109b      	asrs	r3, r3, #2
 800fefc:	1ae4      	subs	r4, r4, r3
 800fefe:	9409      	str	r4, [sp, #36]	@ 0x24
 800ff00:	10ac      	asrs	r4, r5, #2
 800ff02:	46a2      	mov	sl, r4
 800ff04:	2700      	movs	r7, #0
 800ff06:	5fc4      	ldrsh	r4, [r0, r7]
 800ff08:	4441      	add	r1, r8
 800ff0a:	10a4      	asrs	r4, r4, #2
 800ff0c:	46a1      	mov	r9, r4
 800ff0e:	9c02      	ldr	r4, [sp, #8]
 800ff10:	4463      	add	r3, ip
 800ff12:	0027      	movs	r7, r4
 800ff14:	5fd5      	ldrsh	r5, [r2, r7]
 800ff16:	0027      	movs	r7, r4
 800ff18:	5fc4      	ldrsh	r4, [r0, r7]
 800ff1a:	10ad      	asrs	r5, r5, #2
 800ff1c:	4455      	add	r5, sl
 800ff1e:	104f      	asrs	r7, r1, #1
 800ff20:	10a4      	asrs	r4, r4, #2
 800ff22:	444c      	add	r4, r9
 800ff24:	46b9      	mov	r9, r7
 800ff26:	106f      	asrs	r7, r5, #1
 800ff28:	46b8      	mov	r8, r7
 800ff2a:	44c8      	add	r8, r9
 800ff2c:	4647      	mov	r7, r8
 800ff2e:	46a2      	mov	sl, r4
 800ff30:	9c01      	ldr	r4, [sp, #4]
 800ff32:	1b49      	subs	r1, r1, r5
 800ff34:	8027      	strh	r7, [r4, #0]
 800ff36:	105f      	asrs	r7, r3, #1
 800ff38:	46bc      	mov	ip, r7
 800ff3a:	4657      	mov	r7, sl
 800ff3c:	107f      	asrs	r7, r7, #1
 800ff3e:	46b8      	mov	r8, r7
 800ff40:	44e0      	add	r8, ip
 800ff42:	4647      	mov	r7, r8
 800ff44:	8067      	strh	r7, [r4, #2]
 800ff46:	4654      	mov	r4, sl
 800ff48:	1b1b      	subs	r3, r3, r4
 800ff4a:	9c05      	ldr	r4, [sp, #20]
 800ff4c:	2500      	movs	r5, #0
 800ff4e:	5f67      	ldrsh	r7, [r4, r5]
 800ff50:	46b9      	mov	r9, r7
 800ff52:	2702      	movs	r7, #2
 800ff54:	5fe5      	ldrsh	r5, [r4, r7]
 800ff56:	2700      	movs	r7, #0
 800ff58:	5fd4      	ldrsh	r4, [r2, r7]
 800ff5a:	10a7      	asrs	r7, r4, #2
 800ff5c:	46bc      	mov	ip, r7
 800ff5e:	2700      	movs	r7, #0
 800ff60:	5fc4      	ldrsh	r4, [r0, r7]
 800ff62:	10a7      	asrs	r7, r4, #2
 800ff64:	464c      	mov	r4, r9
 800ff66:	46ba      	mov	sl, r7
 800ff68:	464f      	mov	r7, r9
 800ff6a:	434c      	muls	r4, r1
 800ff6c:	46a0      	mov	r8, r4
 800ff6e:	001c      	movs	r4, r3
 800ff70:	4369      	muls	r1, r5
 800ff72:	437b      	muls	r3, r7
 800ff74:	9f02      	ldr	r7, [sp, #8]
 800ff76:	1a5b      	subs	r3, r3, r1
 800ff78:	0039      	movs	r1, r7
 800ff7a:	436c      	muls	r4, r5
 800ff7c:	4444      	add	r4, r8
 800ff7e:	1424      	asrs	r4, r4, #16
 800ff80:	141b      	asrs	r3, r3, #16
 800ff82:	8014      	strh	r4, [r2, #0]
 800ff84:	8003      	strh	r3, [r0, #0]
 800ff86:	5e53      	ldrsh	r3, [r2, r1]
 800ff88:	4661      	mov	r1, ip
 800ff8a:	109b      	asrs	r3, r3, #2
 800ff8c:	1acb      	subs	r3, r1, r3
 800ff8e:	0039      	movs	r1, r7
 800ff90:	5e41      	ldrsh	r1, [r0, r1]
 800ff92:	4657      	mov	r7, sl
 800ff94:	1089      	asrs	r1, r1, #2
 800ff96:	1a79      	subs	r1, r7, r1
 800ff98:	465f      	mov	r7, fp
 800ff9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ff9c:	1a7f      	subs	r7, r7, r1
 800ff9e:	195c      	adds	r4, r3, r5
 800ffa0:	1aed      	subs	r5, r5, r3
 800ffa2:	4459      	add	r1, fp
 800ffa4:	46ab      	mov	fp, r5
 800ffa6:	9d04      	ldr	r5, [sp, #16]
 800ffa8:	46b8      	mov	r8, r7
 800ffaa:	2302      	movs	r3, #2
 800ffac:	5eef      	ldrsh	r7, [r5, r3]
 800ffae:	46bc      	mov	ip, r7
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	5eef      	ldrsh	r7, [r5, r3]
 800ffb4:	4665      	mov	r5, ip
 800ffb6:	465b      	mov	r3, fp
 800ffb8:	435d      	muls	r5, r3
 800ffba:	46b9      	mov	r9, r7
 800ffbc:	46aa      	mov	sl, r5
 800ffbe:	003d      	movs	r5, r7
 800ffc0:	4667      	mov	r7, ip
 800ffc2:	434d      	muls	r5, r1
 800ffc4:	4379      	muls	r1, r7
 800ffc6:	464f      	mov	r7, r9
 800ffc8:	437b      	muls	r3, r7
 800ffca:	4455      	add	r5, sl
 800ffcc:	1a5b      	subs	r3, r3, r1
 800ffce:	142d      	asrs	r5, r5, #16
 800ffd0:	141b      	asrs	r3, r3, #16
 800ffd2:	5395      	strh	r5, [r2, r6]
 800ffd4:	5383      	strh	r3, [r0, r6]
 800ffd6:	9b06      	ldr	r3, [sp, #24]
 800ffd8:	2602      	movs	r6, #2
 800ffda:	5f99      	ldrsh	r1, [r3, r6]
 800ffdc:	001e      	movs	r6, r3
 800ffde:	2500      	movs	r5, #0
 800ffe0:	5f5d      	ldrsh	r5, [r3, r5]
 800ffe2:	0023      	movs	r3, r4
 800ffe4:	434b      	muls	r3, r1
 800ffe6:	469c      	mov	ip, r3
 800ffe8:	4643      	mov	r3, r8
 800ffea:	436b      	muls	r3, r5
 800ffec:	9f02      	ldr	r7, [sp, #8]
 800ffee:	4463      	add	r3, ip
 800fff0:	141b      	asrs	r3, r3, #16
 800fff2:	53d3      	strh	r3, [r2, r7]
 800fff4:	4643      	mov	r3, r8
 800fff6:	436c      	muls	r4, r5
 800fff8:	434b      	muls	r3, r1
 800fffa:	1ae3      	subs	r3, r4, r3
 800fffc:	141b      	asrs	r3, r3, #16
 800fffe:	53c3      	strh	r3, [r0, r7]
 8010000:	9b01      	ldr	r3, [sp, #4]
 8010002:	9c05      	ldr	r4, [sp, #20]
 8010004:	3304      	adds	r3, #4
 8010006:	9301      	str	r3, [sp, #4]
 8010008:	9b08      	ldr	r3, [sp, #32]
 801000a:	9d04      	ldr	r5, [sp, #16]
 801000c:	469c      	mov	ip, r3
 801000e:	9b07      	ldr	r3, [sp, #28]
 8010010:	4464      	add	r4, ip
 8010012:	469c      	mov	ip, r3
 8010014:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010016:	4465      	add	r5, ip
 8010018:	0033      	movs	r3, r6
 801001a:	468c      	mov	ip, r1
 801001c:	4463      	add	r3, ip
 801001e:	9306      	str	r3, [sp, #24]
 8010020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010022:	3204      	adds	r2, #4
 8010024:	3004      	adds	r0, #4
 8010026:	9405      	str	r4, [sp, #20]
 8010028:	9504      	str	r5, [sp, #16]
 801002a:	429a      	cmp	r2, r3
 801002c:	d000      	beq.n	8010030 <arm_radix4_butterfly_q15+0x1bc>
 801002e:	e750      	b.n	800fed2 <arm_radix4_butterfly_q15+0x5e>
 8010030:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010032:	9b07      	ldr	r3, [sp, #28]
 8010034:	2a04      	cmp	r2, #4
 8010036:	d800      	bhi.n	801003a <arm_radix4_butterfly_q15+0x1c6>
 8010038:	e198      	b.n	801036c <arm_radix4_butterfly_q15+0x4f8>
 801003a:	9219      	str	r2, [sp, #100]	@ 0x64
 801003c:	9227      	str	r2, [sp, #156]	@ 0x9c
 801003e:	4ad9      	ldr	r2, [pc, #868]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 8010040:	4692      	mov	sl, r2
 8010042:	4ad9      	ldr	r2, [pc, #868]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 8010044:	4693      	mov	fp, r2
 8010046:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010048:	0892      	lsrs	r2, r2, #2
 801004a:	0011      	movs	r1, r2
 801004c:	9222      	str	r2, [sp, #136]	@ 0x88
 801004e:	3a01      	subs	r2, #1
 8010050:	9224      	str	r2, [sp, #144]	@ 0x90
 8010052:	009a      	lsls	r2, r3, #2
 8010054:	9221      	str	r2, [sp, #132]	@ 0x84
 8010056:	00da      	lsls	r2, r3, #3
 8010058:	9223      	str	r2, [sp, #140]	@ 0x8c
 801005a:	005a      	lsls	r2, r3, #1
 801005c:	18d3      	adds	r3, r2, r3
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	9325      	str	r3, [sp, #148]	@ 0x94
 8010062:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	931a      	str	r3, [sp, #104]	@ 0x68
 8010068:	00cb      	lsls	r3, r1, #3
 801006a:	4699      	mov	r9, r3
 801006c:	008b      	lsls	r3, r1, #2
 801006e:	9303      	str	r3, [sp, #12]
 8010070:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010072:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010074:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8010076:	931e      	str	r3, [sp, #120]	@ 0x78
 8010078:	931d      	str	r3, [sp, #116]	@ 0x74
 801007a:	931c      	str	r3, [sp, #112]	@ 0x70
 801007c:	2300      	movs	r3, #0
 801007e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010080:	464b      	mov	r3, r9
 8010082:	3302      	adds	r3, #2
 8010084:	9326      	str	r3, [sp, #152]	@ 0x98
 8010086:	464b      	mov	r3, r9
 8010088:	9302      	str	r3, [sp, #8]
 801008a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801008c:	2100      	movs	r1, #0
 801008e:	5e5a      	ldrsh	r2, [r3, r1]
 8010090:	9208      	str	r2, [sp, #32]
 8010092:	2202      	movs	r2, #2
 8010094:	5e9b      	ldrsh	r3, [r3, r2]
 8010096:	9311      	str	r3, [sp, #68]	@ 0x44
 8010098:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801009a:	2100      	movs	r1, #0
 801009c:	5e5a      	ldrsh	r2, [r3, r1]
 801009e:	9209      	str	r2, [sp, #36]	@ 0x24
 80100a0:	2202      	movs	r2, #2
 80100a2:	5e9b      	ldrsh	r3, [r3, r2]
 80100a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80100a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80100a8:	2100      	movs	r1, #0
 80100aa:	5e5a      	ldrsh	r2, [r3, r1]
 80100ac:	9215      	str	r2, [sp, #84]	@ 0x54
 80100ae:	2202      	movs	r2, #2
 80100b0:	5e9b      	ldrsh	r3, [r3, r2]
 80100b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80100b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80100b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d800      	bhi.n	80100be <arm_radix4_butterfly_q15+0x24a>
 80100bc:	e134      	b.n	8010328 <arm_radix4_butterfly_q15+0x4b4>
 80100be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80100c0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80100c2:	425b      	negs	r3, r3
 80100c4:	9318      	str	r3, [sp, #96]	@ 0x60
 80100c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80100c8:	4694      	mov	ip, r2
 80100ca:	425b      	negs	r3, r3
 80100cc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80100ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80100d0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80100d2:	425b      	negs	r3, r3
 80100d4:	9316      	str	r3, [sp, #88]	@ 0x58
 80100d6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80100d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80100da:	0019      	movs	r1, r3
 80100dc:	9b03      	ldr	r3, [sp, #12]
 80100de:	4461      	add	r1, ip
 80100e0:	4698      	mov	r8, r3
 80100e2:	44e0      	add	r8, ip
 80100e4:	4643      	mov	r3, r8
 80100e6:	46e1      	mov	r9, ip
 80100e8:	9301      	str	r3, [sp, #4]
 80100ea:	4688      	mov	r8, r1
 80100ec:	e0a1      	b.n	8010232 <arm_radix4_butterfly_q15+0x3be>
 80100ee:	b200      	sxth	r0, r0
 80100f0:	1040      	asrs	r0, r0, #1
 80100f2:	2e00      	cmp	r6, #0
 80100f4:	dc00      	bgt.n	80100f8 <arm_radix4_butterfly_q15+0x284>
 80100f6:	e100      	b.n	80102fa <arm_radix4_butterfly_q15+0x486>
 80100f8:	b212      	sxth	r2, r2
 80100fa:	1052      	asrs	r2, r2, #1
 80100fc:	9e05      	ldr	r6, [sp, #20]
 80100fe:	2f00      	cmp	r7, #0
 8010100:	dc00      	bgt.n	8010104 <arm_radix4_butterfly_q15+0x290>
 8010102:	e101      	b.n	8010308 <arm_radix4_butterfly_q15+0x494>
 8010104:	b236      	sxth	r6, r6
 8010106:	1076      	asrs	r6, r6, #1
 8010108:	2d00      	cmp	r5, #0
 801010a:	dc00      	bgt.n	801010e <arm_radix4_butterfly_q15+0x29a>
 801010c:	e102      	b.n	8010314 <arm_radix4_butterfly_q15+0x4a0>
 801010e:	4649      	mov	r1, r9
 8010110:	1885      	adds	r5, r0, r2
 8010112:	b21b      	sxth	r3, r3
 8010114:	105b      	asrs	r3, r3, #1
 8010116:	106d      	asrs	r5, r5, #1
 8010118:	800d      	strh	r5, [r1, #0]
 801011a:	18f5      	adds	r5, r6, r3
 801011c:	106d      	asrs	r5, r5, #1
 801011e:	804d      	strh	r5, [r1, #2]
 8010120:	9901      	ldr	r1, [sp, #4]
 8010122:	1a80      	subs	r0, r0, r2
 8010124:	000a      	movs	r2, r1
 8010126:	2500      	movs	r5, #0
 8010128:	5f55      	ldrsh	r5, [r2, r5]
 801012a:	000a      	movs	r2, r1
 801012c:	1af3      	subs	r3, r6, r3
 801012e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8010130:	2602      	movs	r6, #2
 8010132:	5f96      	ldrsh	r6, [r2, r6]
 8010134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010136:	435f      	muls	r7, r3
 8010138:	4342      	muls	r2, r0
 801013a:	19d7      	adds	r7, r2, r7
 801013c:	143f      	asrs	r7, r7, #16
 801013e:	800f      	strh	r7, [r1, #0]
 8010140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010142:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8010144:	4353      	muls	r3, r2
 8010146:	4348      	muls	r0, r1
 8010148:	9a01      	ldr	r2, [sp, #4]
 801014a:	18c0      	adds	r0, r0, r3
 801014c:	1400      	asrs	r0, r0, #16
 801014e:	9b02      	ldr	r3, [sp, #8]
 8010150:	8050      	strh	r0, [r2, #2]
 8010152:	5ed3      	ldrsh	r3, [r2, r3]
 8010154:	1aed      	subs	r5, r5, r3
 8010156:	002b      	movs	r3, r5
 8010158:	4555      	cmp	r5, sl
 801015a:	dd00      	ble.n	801015e <arm_radix4_butterfly_q15+0x2ea>
 801015c:	4b91      	ldr	r3, [pc, #580]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 801015e:	002f      	movs	r7, r5
 8010160:	455d      	cmp	r5, fp
 8010162:	da00      	bge.n	8010166 <arm_radix4_butterfly_q15+0x2f2>
 8010164:	4f90      	ldr	r7, [pc, #576]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 8010166:	4642      	mov	r2, r8
 8010168:	9903      	ldr	r1, [sp, #12]
 801016a:	5e52      	ldrsh	r2, [r2, r1]
 801016c:	1ab6      	subs	r6, r6, r2
 801016e:	0030      	movs	r0, r6
 8010170:	4556      	cmp	r6, sl
 8010172:	dd00      	ble.n	8010176 <arm_radix4_butterfly_q15+0x302>
 8010174:	488b      	ldr	r0, [pc, #556]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 8010176:	46b4      	mov	ip, r6
 8010178:	455e      	cmp	r6, fp
 801017a:	da01      	bge.n	8010180 <arm_radix4_butterfly_q15+0x30c>
 801017c:	4a8a      	ldr	r2, [pc, #552]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 801017e:	4694      	mov	ip, r2
 8010180:	9a07      	ldr	r2, [sp, #28]
 8010182:	2c00      	cmp	r4, #0
 8010184:	dc00      	bgt.n	8010188 <arm_radix4_butterfly_q15+0x314>
 8010186:	e0cd      	b.n	8010324 <arm_radix4_butterfly_q15+0x4b0>
 8010188:	b212      	sxth	r2, r2
 801018a:	1052      	asrs	r2, r2, #1
 801018c:	b292      	uxth	r2, r2
 801018e:	2e00      	cmp	r6, #0
 8010190:	dc00      	bgt.n	8010194 <arm_radix4_butterfly_q15+0x320>
 8010192:	e0c5      	b.n	8010320 <arm_radix4_butterfly_q15+0x4ac>
 8010194:	b204      	sxth	r4, r0
 8010196:	9904      	ldr	r1, [sp, #16]
 8010198:	1064      	asrs	r4, r4, #1
 801019a:	b2a4      	uxth	r4, r4
 801019c:	9806      	ldr	r0, [sp, #24]
 801019e:	2900      	cmp	r1, #0
 80101a0:	dc00      	bgt.n	80101a4 <arm_radix4_butterfly_q15+0x330>
 80101a2:	e0bb      	b.n	801031c <arm_radix4_butterfly_q15+0x4a8>
 80101a4:	b200      	sxth	r0, r0
 80101a6:	1040      	asrs	r0, r0, #1
 80101a8:	b280      	uxth	r0, r0
 80101aa:	2d00      	cmp	r5, #0
 80101ac:	dc00      	bgt.n	80101b0 <arm_radix4_butterfly_q15+0x33c>
 80101ae:	e0b3      	b.n	8010318 <arm_radix4_butterfly_q15+0x4a4>
 80101b0:	1916      	adds	r6, r2, r4
 80101b2:	9f08      	ldr	r7, [sp, #32]
 80101b4:	b236      	sxth	r6, r6
 80101b6:	4377      	muls	r7, r6
 80101b8:	b21b      	sxth	r3, r3
 80101ba:	46bc      	mov	ip, r7
 80101bc:	105b      	asrs	r3, r3, #1
 80101be:	b29b      	uxth	r3, r3
 80101c0:	1ac5      	subs	r5, r0, r3
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	464b      	mov	r3, r9
 80101c6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80101c8:	b22d      	sxth	r5, r5
 80101ca:	436f      	muls	r7, r5
 80101cc:	9902      	ldr	r1, [sp, #8]
 80101ce:	4467      	add	r7, ip
 80101d0:	143f      	asrs	r7, r7, #16
 80101d2:	525f      	strh	r7, [r3, r1]
 80101d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80101d6:	9f08      	ldr	r7, [sp, #32]
 80101d8:	435e      	muls	r6, r3
 80101da:	4643      	mov	r3, r8
 80101dc:	437d      	muls	r5, r7
 80101de:	1976      	adds	r6, r6, r5
 80101e0:	1436      	asrs	r6, r6, #16
 80101e2:	801e      	strh	r6, [r3, #0]
 80101e4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80101e6:	9b04      	ldr	r3, [sp, #16]
 80101e8:	1b12      	subs	r2, r2, r4
 80101ea:	18c3      	adds	r3, r0, r3
 80101ec:	0028      	movs	r0, r5
 80101ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80101f0:	b21b      	sxth	r3, r3
 80101f2:	b212      	sxth	r2, r2
 80101f4:	435c      	muls	r4, r3
 80101f6:	4350      	muls	r0, r2
 80101f8:	1820      	adds	r0, r4, r0
 80101fa:	9c01      	ldr	r4, [sp, #4]
 80101fc:	1400      	asrs	r0, r0, #16
 80101fe:	5260      	strh	r0, [r4, r1]
 8010200:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8010202:	436b      	muls	r3, r5
 8010204:	434a      	muls	r2, r1
 8010206:	18d2      	adds	r2, r2, r3
 8010208:	4643      	mov	r3, r8
 801020a:	9903      	ldr	r1, [sp, #12]
 801020c:	1412      	asrs	r2, r2, #16
 801020e:	525a      	strh	r2, [r3, r1]
 8010210:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010214:	4694      	mov	ip, r2
 8010216:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010218:	4463      	add	r3, ip
 801021a:	0019      	movs	r1, r3
 801021c:	4694      	mov	ip, r2
 801021e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010220:	0023      	movs	r3, r4
 8010222:	4463      	add	r3, ip
 8010224:	9301      	str	r3, [sp, #4]
 8010226:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010228:	44e1      	add	r9, ip
 801022a:	44e0      	add	r8, ip
 801022c:	001a      	movs	r2, r3
 801022e:	428a      	cmp	r2, r1
 8010230:	d97a      	bls.n	8010328 <arm_radix4_butterfly_q15+0x4b4>
 8010232:	464b      	mov	r3, r9
 8010234:	2500      	movs	r5, #0
 8010236:	5f5d      	ldrsh	r5, [r3, r5]
 8010238:	464b      	mov	r3, r9
 801023a:	9a02      	ldr	r2, [sp, #8]
 801023c:	5e9c      	ldrsh	r4, [r3, r2]
 801023e:	192b      	adds	r3, r5, r4
 8010240:	469c      	mov	ip, r3
 8010242:	0018      	movs	r0, r3
 8010244:	4553      	cmp	r3, sl
 8010246:	dd00      	ble.n	801024a <arm_radix4_butterfly_q15+0x3d6>
 8010248:	4856      	ldr	r0, [pc, #344]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 801024a:	4663      	mov	r3, ip
 801024c:	930d      	str	r3, [sp, #52]	@ 0x34
 801024e:	45dc      	cmp	ip, fp
 8010250:	da01      	bge.n	8010256 <arm_radix4_butterfly_q15+0x3e2>
 8010252:	4b55      	ldr	r3, [pc, #340]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 8010254:	930d      	str	r3, [sp, #52]	@ 0x34
 8010256:	464b      	mov	r3, r9
 8010258:	2202      	movs	r2, #2
 801025a:	5e9a      	ldrsh	r2, [r3, r2]
 801025c:	4643      	mov	r3, r8
 801025e:	2100      	movs	r1, #0
 8010260:	5e5b      	ldrsh	r3, [r3, r1]
 8010262:	18d7      	adds	r7, r2, r3
 8010264:	9705      	str	r7, [sp, #20]
 8010266:	4557      	cmp	r7, sl
 8010268:	dd01      	ble.n	801026e <arm_radix4_butterfly_q15+0x3fa>
 801026a:	494e      	ldr	r1, [pc, #312]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 801026c:	9105      	str	r1, [sp, #20]
 801026e:	970c      	str	r7, [sp, #48]	@ 0x30
 8010270:	455f      	cmp	r7, fp
 8010272:	da01      	bge.n	8010278 <arm_radix4_butterfly_q15+0x404>
 8010274:	494c      	ldr	r1, [pc, #304]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 8010276:	910c      	str	r1, [sp, #48]	@ 0x30
 8010278:	1b2c      	subs	r4, r5, r4
 801027a:	9407      	str	r4, [sp, #28]
 801027c:	4554      	cmp	r4, sl
 801027e:	dd01      	ble.n	8010284 <arm_radix4_butterfly_q15+0x410>
 8010280:	4948      	ldr	r1, [pc, #288]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 8010282:	9107      	str	r1, [sp, #28]
 8010284:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010286:	455c      	cmp	r4, fp
 8010288:	da01      	bge.n	801028e <arm_radix4_butterfly_q15+0x41a>
 801028a:	4947      	ldr	r1, [pc, #284]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 801028c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	9304      	str	r3, [sp, #16]
 8010292:	9306      	str	r3, [sp, #24]
 8010294:	4553      	cmp	r3, sl
 8010296:	dd02      	ble.n	801029e <arm_radix4_butterfly_q15+0x42a>
 8010298:	4b42      	ldr	r3, [pc, #264]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 801029a:	9306      	str	r3, [sp, #24]
 801029c:	9b04      	ldr	r3, [sp, #16]
 801029e:	930e      	str	r3, [sp, #56]	@ 0x38
 80102a0:	455b      	cmp	r3, fp
 80102a2:	da01      	bge.n	80102a8 <arm_radix4_butterfly_q15+0x434>
 80102a4:	4b40      	ldr	r3, [pc, #256]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 80102a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80102a8:	9a01      	ldr	r2, [sp, #4]
 80102aa:	2300      	movs	r3, #0
 80102ac:	5ed6      	ldrsh	r6, [r2, r3]
 80102ae:	9b02      	ldr	r3, [sp, #8]
 80102b0:	5ed3      	ldrsh	r3, [r2, r3]
 80102b2:	18f6      	adds	r6, r6, r3
 80102b4:	0032      	movs	r2, r6
 80102b6:	4556      	cmp	r6, sl
 80102b8:	dd00      	ble.n	80102bc <arm_radix4_butterfly_q15+0x448>
 80102ba:	4a3a      	ldr	r2, [pc, #232]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 80102bc:	960f      	str	r6, [sp, #60]	@ 0x3c
 80102be:	455e      	cmp	r6, fp
 80102c0:	da01      	bge.n	80102c6 <arm_radix4_butterfly_q15+0x452>
 80102c2:	4b39      	ldr	r3, [pc, #228]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 80102c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102c6:	9b01      	ldr	r3, [sp, #4]
 80102c8:	9903      	ldr	r1, [sp, #12]
 80102ca:	2502      	movs	r5, #2
 80102cc:	5f5d      	ldrsh	r5, [r3, r5]
 80102ce:	4643      	mov	r3, r8
 80102d0:	5e5b      	ldrsh	r3, [r3, r1]
 80102d2:	18ed      	adds	r5, r5, r3
 80102d4:	002b      	movs	r3, r5
 80102d6:	4555      	cmp	r5, sl
 80102d8:	dd00      	ble.n	80102dc <arm_radix4_butterfly_q15+0x468>
 80102da:	4b32      	ldr	r3, [pc, #200]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 80102dc:	9510      	str	r5, [sp, #64]	@ 0x40
 80102de:	455d      	cmp	r5, fp
 80102e0:	da01      	bge.n	80102e6 <arm_radix4_butterfly_q15+0x472>
 80102e2:	4931      	ldr	r1, [pc, #196]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 80102e4:	9110      	str	r1, [sp, #64]	@ 0x40
 80102e6:	4661      	mov	r1, ip
 80102e8:	2900      	cmp	r1, #0
 80102ea:	dd00      	ble.n	80102ee <arm_radix4_butterfly_q15+0x47a>
 80102ec:	e6ff      	b.n	80100ee <arm_radix4_butterfly_q15+0x27a>
 80102ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80102f0:	b200      	sxth	r0, r0
 80102f2:	1040      	asrs	r0, r0, #1
 80102f4:	2e00      	cmp	r6, #0
 80102f6:	dd00      	ble.n	80102fa <arm_radix4_butterfly_q15+0x486>
 80102f8:	e6fe      	b.n	80100f8 <arm_radix4_butterfly_q15+0x284>
 80102fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80102fc:	9e05      	ldr	r6, [sp, #20]
 80102fe:	b212      	sxth	r2, r2
 8010300:	1052      	asrs	r2, r2, #1
 8010302:	2f00      	cmp	r7, #0
 8010304:	dd00      	ble.n	8010308 <arm_radix4_butterfly_q15+0x494>
 8010306:	e6fd      	b.n	8010104 <arm_radix4_butterfly_q15+0x290>
 8010308:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801030a:	b236      	sxth	r6, r6
 801030c:	1076      	asrs	r6, r6, #1
 801030e:	2d00      	cmp	r5, #0
 8010310:	dd00      	ble.n	8010314 <arm_radix4_butterfly_q15+0x4a0>
 8010312:	e6fc      	b.n	801010e <arm_radix4_butterfly_q15+0x29a>
 8010314:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010316:	e6fa      	b.n	801010e <arm_radix4_butterfly_q15+0x29a>
 8010318:	003b      	movs	r3, r7
 801031a:	e749      	b.n	80101b0 <arm_radix4_butterfly_q15+0x33c>
 801031c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801031e:	e741      	b.n	80101a4 <arm_radix4_butterfly_q15+0x330>
 8010320:	4660      	mov	r0, ip
 8010322:	e737      	b.n	8010194 <arm_radix4_butterfly_q15+0x320>
 8010324:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010326:	e72f      	b.n	8010188 <arm_radix4_butterfly_q15+0x314>
 8010328:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801032a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801032c:	468c      	mov	ip, r1
 801032e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8010330:	4462      	add	r2, ip
 8010332:	468c      	mov	ip, r1
 8010334:	921c      	str	r2, [sp, #112]	@ 0x70
 8010336:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8010338:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801033a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801033c:	4462      	add	r2, ip
 801033e:	468c      	mov	ip, r1
 8010340:	921d      	str	r2, [sp, #116]	@ 0x74
 8010342:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010344:	3301      	adds	r3, #1
 8010346:	4462      	add	r2, ip
 8010348:	921e      	str	r2, [sp, #120]	@ 0x78
 801034a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801034c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801034e:	3204      	adds	r2, #4
 8010350:	921f      	str	r2, [sp, #124]	@ 0x7c
 8010352:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010354:	4293      	cmp	r3, r2
 8010356:	d800      	bhi.n	801035a <arm_radix4_butterfly_q15+0x4e6>
 8010358:	e697      	b.n	801008a <arm_radix4_butterfly_q15+0x216>
 801035a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801035c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801035e:	0892      	lsrs	r2, r2, #2
 8010360:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010362:	9227      	str	r2, [sp, #156]	@ 0x9c
 8010364:	9119      	str	r1, [sp, #100]	@ 0x64
 8010366:	2a04      	cmp	r2, #4
 8010368:	d900      	bls.n	801036c <arm_radix4_butterfly_q15+0x4f8>
 801036a:	e66c      	b.n	8010046 <arm_radix4_butterfly_q15+0x1d2>
 801036c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801036e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010370:	0893      	lsrs	r3, r2, #2
 8010372:	0058      	lsls	r0, r3, #1
 8010374:	1a8a      	subs	r2, r1, r2
 8010376:	18c0      	adds	r0, r0, r3
 8010378:	920f      	str	r2, [sp, #60]	@ 0x3c
 801037a:	009a      	lsls	r2, r3, #2
 801037c:	00db      	lsls	r3, r3, #3
 801037e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010380:	2300      	movs	r3, #0
 8010382:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 8010384:	9305      	str	r3, [sp, #20]
 8010386:	46a1      	mov	r9, r4
 8010388:	4b06      	ldr	r3, [pc, #24]	@ (80103a4 <arm_radix4_butterfly_q15+0x530>)
 801038a:	9202      	str	r2, [sp, #8]
 801038c:	469b      	mov	fp, r3
 801038e:	3202      	adds	r2, #2
 8010390:	4b05      	ldr	r3, [pc, #20]	@ (80103a8 <arm_radix4_butterfly_q15+0x534>)
 8010392:	4491      	add	r9, r2
 8010394:	46a0      	mov	r8, r4
 8010396:	469a      	mov	sl, r3
 8010398:	464b      	mov	r3, r9
 801039a:	0080      	lsls	r0, r0, #2
 801039c:	4480      	add	r8, r0
 801039e:	4640      	mov	r0, r8
 80103a0:	9301      	str	r3, [sp, #4]
 80103a2:	e08a      	b.n	80104ba <arm_radix4_butterfly_q15+0x646>
 80103a4:	00007fff 	.word	0x00007fff
 80103a8:	ffff8000 	.word	0xffff8000
 80103ac:	b21b      	sxth	r3, r3
 80103ae:	105b      	asrs	r3, r3, #1
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	469c      	mov	ip, r3
 80103b4:	2d00      	cmp	r5, #0
 80103b6:	dc00      	bgt.n	80103ba <arm_radix4_butterfly_q15+0x546>
 80103b8:	e0e2      	b.n	8010580 <arm_radix4_butterfly_q15+0x70c>
 80103ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103bc:	b21b      	sxth	r3, r3
 80103be:	105b      	asrs	r3, r3, #1
 80103c0:	b29d      	uxth	r5, r3
 80103c2:	4663      	mov	r3, ip
 80103c4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80103c6:	195b      	adds	r3, r3, r5
 80103c8:	8033      	strh	r3, [r6, #0]
 80103ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103cc:	2f00      	cmp	r7, #0
 80103ce:	dc00      	bgt.n	80103d2 <arm_radix4_butterfly_q15+0x55e>
 80103d0:	e0ea      	b.n	80105a8 <arm_radix4_butterfly_q15+0x734>
 80103d2:	b21f      	sxth	r7, r3
 80103d4:	107f      	asrs	r7, r7, #1
 80103d6:	b2bf      	uxth	r7, r7
 80103d8:	464b      	mov	r3, r9
 80103da:	2c00      	cmp	r4, #0
 80103dc:	dc00      	bgt.n	80103e0 <arm_radix4_butterfly_q15+0x56c>
 80103de:	e0e1      	b.n	80105a4 <arm_radix4_butterfly_q15+0x730>
 80103e0:	b21c      	sxth	r4, r3
 80103e2:	1064      	asrs	r4, r4, #1
 80103e4:	b2a3      	uxth	r3, r4
 80103e6:	4699      	mov	r9, r3
 80103e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80103ea:	18fb      	adds	r3, r7, r3
 80103ec:	8073      	strh	r3, [r6, #2]
 80103ee:	9b02      	ldr	r3, [sp, #8]
 80103f0:	5ef3      	ldrsh	r3, [r6, r3]
 80103f2:	4698      	mov	r8, r3
 80103f4:	9b01      	ldr	r3, [sp, #4]
 80103f6:	2400      	movs	r4, #0
 80103f8:	5f1b      	ldrsh	r3, [r3, r4]
 80103fa:	464c      	mov	r4, r9
 80103fc:	9304      	str	r3, [sp, #16]
 80103fe:	4663      	mov	r3, ip
 8010400:	1b5b      	subs	r3, r3, r5
 8010402:	9d02      	ldr	r5, [sp, #8]
 8010404:	1b3f      	subs	r7, r7, r4
 8010406:	5373      	strh	r3, [r6, r5]
 8010408:	9b01      	ldr	r3, [sp, #4]
 801040a:	801f      	strh	r7, [r3, #0]
 801040c:	2300      	movs	r3, #0
 801040e:	5ec4      	ldrsh	r4, [r0, r3]
 8010410:	4643      	mov	r3, r8
 8010412:	1b1c      	subs	r4, r3, r4
 8010414:	46a0      	mov	r8, r4
 8010416:	455c      	cmp	r4, fp
 8010418:	dd01      	ble.n	801041e <arm_radix4_butterfly_q15+0x5aa>
 801041a:	4b64      	ldr	r3, [pc, #400]	@ (80105ac <arm_radix4_butterfly_q15+0x738>)
 801041c:	4698      	mov	r8, r3
 801041e:	46a1      	mov	r9, r4
 8010420:	4554      	cmp	r4, sl
 8010422:	da01      	bge.n	8010428 <arm_radix4_butterfly_q15+0x5b4>
 8010424:	4b62      	ldr	r3, [pc, #392]	@ (80105b0 <arm_radix4_butterfly_q15+0x73c>)
 8010426:	4699      	mov	r9, r3
 8010428:	2302      	movs	r3, #2
 801042a:	5ec5      	ldrsh	r5, [r0, r3]
 801042c:	9b04      	ldr	r3, [sp, #16]
 801042e:	1b5d      	subs	r5, r3, r5
 8010430:	002b      	movs	r3, r5
 8010432:	455d      	cmp	r5, fp
 8010434:	dd00      	ble.n	8010438 <arm_radix4_butterfly_q15+0x5c4>
 8010436:	4b5d      	ldr	r3, [pc, #372]	@ (80105ac <arm_radix4_butterfly_q15+0x738>)
 8010438:	002f      	movs	r7, r5
 801043a:	4555      	cmp	r5, sl
 801043c:	da00      	bge.n	8010440 <arm_radix4_butterfly_q15+0x5cc>
 801043e:	4f5c      	ldr	r7, [pc, #368]	@ (80105b0 <arm_radix4_butterfly_q15+0x73c>)
 8010440:	9e07      	ldr	r6, [sp, #28]
 8010442:	46b4      	mov	ip, r6
 8010444:	2900      	cmp	r1, #0
 8010446:	dc00      	bgt.n	801044a <arm_radix4_butterfly_q15+0x5d6>
 8010448:	e0a9      	b.n	801059e <arm_radix4_butterfly_q15+0x72a>
 801044a:	4661      	mov	r1, ip
 801044c:	b209      	sxth	r1, r1
 801044e:	1049      	asrs	r1, r1, #1
 8010450:	b289      	uxth	r1, r1
 8010452:	2d00      	cmp	r5, #0
 8010454:	dc00      	bgt.n	8010458 <arm_radix4_butterfly_q15+0x5e4>
 8010456:	e0a0      	b.n	801059a <arm_radix4_butterfly_q15+0x726>
 8010458:	b21b      	sxth	r3, r3
 801045a:	105b      	asrs	r3, r3, #1
 801045c:	b29b      	uxth	r3, r3
 801045e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010460:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8010462:	18cd      	adds	r5, r1, r3
 8010464:	53f5      	strh	r5, [r6, r7]
 8010466:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010468:	2a00      	cmp	r2, #0
 801046a:	dc00      	bgt.n	801046e <arm_radix4_butterfly_q15+0x5fa>
 801046c:	e093      	b.n	8010596 <arm_radix4_butterfly_q15+0x722>
 801046e:	b22d      	sxth	r5, r5
 8010470:	106d      	asrs	r5, r5, #1
 8010472:	b2ad      	uxth	r5, r5
 8010474:	2c00      	cmp	r4, #0
 8010476:	dc00      	bgt.n	801047a <arm_radix4_butterfly_q15+0x606>
 8010478:	e08b      	b.n	8010592 <arm_radix4_butterfly_q15+0x71e>
 801047a:	4642      	mov	r2, r8
 801047c:	b212      	sxth	r2, r2
 801047e:	1052      	asrs	r2, r2, #1
 8010480:	9f01      	ldr	r7, [sp, #4]
 8010482:	b292      	uxth	r2, r2
 8010484:	9e02      	ldr	r6, [sp, #8]
 8010486:	1aac      	subs	r4, r5, r2
 8010488:	18aa      	adds	r2, r5, r2
 801048a:	53bc      	strh	r4, [r7, r6]
 801048c:	8042      	strh	r2, [r0, #2]
 801048e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010490:	1ac9      	subs	r1, r1, r3
 8010492:	4694      	mov	ip, r2
 8010494:	9b05      	ldr	r3, [sp, #20]
 8010496:	8001      	strh	r1, [r0, #0]
 8010498:	4463      	add	r3, ip
 801049a:	9a03      	ldr	r2, [sp, #12]
 801049c:	0019      	movs	r1, r3
 801049e:	9305      	str	r3, [sp, #20]
 80104a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80104a2:	4694      	mov	ip, r2
 80104a4:	001c      	movs	r4, r3
 80104a6:	003b      	movs	r3, r7
 80104a8:	4463      	add	r3, ip
 80104aa:	9301      	str	r3, [sp, #4]
 80104ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104ae:	4464      	add	r4, ip
 80104b0:	9420      	str	r4, [sp, #128]	@ 0x80
 80104b2:	4460      	add	r0, ip
 80104b4:	001a      	movs	r2, r3
 80104b6:	428a      	cmp	r2, r1
 80104b8:	d364      	bcc.n	8010584 <arm_radix4_butterfly_q15+0x710>
 80104ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80104bc:	2200      	movs	r2, #0
 80104be:	5e9d      	ldrsh	r5, [r3, r2]
 80104c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80104c2:	5e99      	ldrsh	r1, [r3, r2]
 80104c4:	186b      	adds	r3, r5, r1
 80104c6:	469c      	mov	ip, r3
 80104c8:	455b      	cmp	r3, fp
 80104ca:	dd00      	ble.n	80104ce <arm_radix4_butterfly_q15+0x65a>
 80104cc:	4b37      	ldr	r3, [pc, #220]	@ (80105ac <arm_radix4_butterfly_q15+0x738>)
 80104ce:	46e0      	mov	r8, ip
 80104d0:	45d4      	cmp	ip, sl
 80104d2:	da01      	bge.n	80104d8 <arm_radix4_butterfly_q15+0x664>
 80104d4:	4a36      	ldr	r2, [pc, #216]	@ (80105b0 <arm_radix4_butterfly_q15+0x73c>)
 80104d6:	4690      	mov	r8, r2
 80104d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80104da:	9e01      	ldr	r6, [sp, #4]
 80104dc:	2402      	movs	r4, #2
 80104de:	5f14      	ldrsh	r4, [r2, r4]
 80104e0:	9a02      	ldr	r2, [sp, #8]
 80104e2:	5eb2      	ldrsh	r2, [r6, r2]
 80104e4:	18a7      	adds	r7, r4, r2
 80104e6:	9709      	str	r7, [sp, #36]	@ 0x24
 80104e8:	455f      	cmp	r7, fp
 80104ea:	dd01      	ble.n	80104f0 <arm_radix4_butterfly_q15+0x67c>
 80104ec:	4e2f      	ldr	r6, [pc, #188]	@ (80105ac <arm_radix4_butterfly_q15+0x738>)
 80104ee:	9609      	str	r6, [sp, #36]	@ 0x24
 80104f0:	9708      	str	r7, [sp, #32]
 80104f2:	4557      	cmp	r7, sl
 80104f4:	da01      	bge.n	80104fa <arm_radix4_butterfly_q15+0x686>
 80104f6:	4e2e      	ldr	r6, [pc, #184]	@ (80105b0 <arm_radix4_butterfly_q15+0x73c>)
 80104f8:	9608      	str	r6, [sp, #32]
 80104fa:	1a69      	subs	r1, r5, r1
 80104fc:	9107      	str	r1, [sp, #28]
 80104fe:	4559      	cmp	r1, fp
 8010500:	dd01      	ble.n	8010506 <arm_radix4_butterfly_q15+0x692>
 8010502:	4d2a      	ldr	r5, [pc, #168]	@ (80105ac <arm_radix4_butterfly_q15+0x738>)
 8010504:	9507      	str	r5, [sp, #28]
 8010506:	9106      	str	r1, [sp, #24]
 8010508:	4551      	cmp	r1, sl
 801050a:	da01      	bge.n	8010510 <arm_radix4_butterfly_q15+0x69c>
 801050c:	4d28      	ldr	r5, [pc, #160]	@ (80105b0 <arm_radix4_butterfly_q15+0x73c>)
 801050e:	9506      	str	r5, [sp, #24]
 8010510:	1aa2      	subs	r2, r4, r2
 8010512:	920d      	str	r2, [sp, #52]	@ 0x34
 8010514:	455a      	cmp	r2, fp
 8010516:	dd01      	ble.n	801051c <arm_radix4_butterfly_q15+0x6a8>
 8010518:	4c24      	ldr	r4, [pc, #144]	@ (80105ac <arm_radix4_butterfly_q15+0x738>)
 801051a:	940d      	str	r4, [sp, #52]	@ 0x34
 801051c:	920a      	str	r2, [sp, #40]	@ 0x28
 801051e:	4552      	cmp	r2, sl
 8010520:	da01      	bge.n	8010526 <arm_radix4_butterfly_q15+0x6b2>
 8010522:	4c23      	ldr	r4, [pc, #140]	@ (80105b0 <arm_radix4_butterfly_q15+0x73c>)
 8010524:	940a      	str	r4, [sp, #40]	@ 0x28
 8010526:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8010528:	9d02      	ldr	r5, [sp, #8]
 801052a:	5f65      	ldrsh	r5, [r4, r5]
 801052c:	2600      	movs	r6, #0
 801052e:	5f84      	ldrsh	r4, [r0, r6]
 8010530:	192d      	adds	r5, r5, r4
 8010532:	950b      	str	r5, [sp, #44]	@ 0x2c
 8010534:	455d      	cmp	r5, fp
 8010536:	dd01      	ble.n	801053c <arm_radix4_butterfly_q15+0x6c8>
 8010538:	4c1c      	ldr	r4, [pc, #112]	@ (80105ac <arm_radix4_butterfly_q15+0x738>)
 801053a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801053c:	950c      	str	r5, [sp, #48]	@ 0x30
 801053e:	4555      	cmp	r5, sl
 8010540:	da01      	bge.n	8010546 <arm_radix4_butterfly_q15+0x6d2>
 8010542:	4c1b      	ldr	r4, [pc, #108]	@ (80105b0 <arm_radix4_butterfly_q15+0x73c>)
 8010544:	940c      	str	r4, [sp, #48]	@ 0x30
 8010546:	9c01      	ldr	r4, [sp, #4]
 8010548:	2600      	movs	r6, #0
 801054a:	5fa4      	ldrsh	r4, [r4, r6]
 801054c:	46a1      	mov	r9, r4
 801054e:	2602      	movs	r6, #2
 8010550:	5f84      	ldrsh	r4, [r0, r6]
 8010552:	444c      	add	r4, r9
 8010554:	46a1      	mov	r9, r4
 8010556:	455c      	cmp	r4, fp
 8010558:	dd01      	ble.n	801055e <arm_radix4_butterfly_q15+0x6ea>
 801055a:	4e14      	ldr	r6, [pc, #80]	@ (80105ac <arm_radix4_butterfly_q15+0x738>)
 801055c:	46b1      	mov	r9, r6
 801055e:	9404      	str	r4, [sp, #16]
 8010560:	4554      	cmp	r4, sl
 8010562:	da01      	bge.n	8010568 <arm_radix4_butterfly_q15+0x6f4>
 8010564:	4e12      	ldr	r6, [pc, #72]	@ (80105b0 <arm_radix4_butterfly_q15+0x73c>)
 8010566:	9604      	str	r6, [sp, #16]
 8010568:	4666      	mov	r6, ip
 801056a:	2e00      	cmp	r6, #0
 801056c:	dd00      	ble.n	8010570 <arm_radix4_butterfly_q15+0x6fc>
 801056e:	e71d      	b.n	80103ac <arm_radix4_butterfly_q15+0x538>
 8010570:	4643      	mov	r3, r8
 8010572:	b21b      	sxth	r3, r3
 8010574:	105b      	asrs	r3, r3, #1
 8010576:	b29b      	uxth	r3, r3
 8010578:	469c      	mov	ip, r3
 801057a:	2d00      	cmp	r5, #0
 801057c:	dd00      	ble.n	8010580 <arm_radix4_butterfly_q15+0x70c>
 801057e:	e71c      	b.n	80103ba <arm_radix4_butterfly_q15+0x546>
 8010580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010582:	e71b      	b.n	80103bc <arm_radix4_butterfly_q15+0x548>
 8010584:	b02b      	add	sp, #172	@ 0xac
 8010586:	bc3c      	pop	{r2, r3, r4, r5}
 8010588:	4690      	mov	r8, r2
 801058a:	4699      	mov	r9, r3
 801058c:	46a2      	mov	sl, r4
 801058e:	46ab      	mov	fp, r5
 8010590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010592:	464a      	mov	r2, r9
 8010594:	e772      	b.n	801047c <arm_radix4_butterfly_q15+0x608>
 8010596:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010598:	e769      	b.n	801046e <arm_radix4_butterfly_q15+0x5fa>
 801059a:	003b      	movs	r3, r7
 801059c:	e75c      	b.n	8010458 <arm_radix4_butterfly_q15+0x5e4>
 801059e:	9906      	ldr	r1, [sp, #24]
 80105a0:	468c      	mov	ip, r1
 80105a2:	e752      	b.n	801044a <arm_radix4_butterfly_q15+0x5d6>
 80105a4:	9b04      	ldr	r3, [sp, #16]
 80105a6:	e71b      	b.n	80103e0 <arm_radix4_butterfly_q15+0x56c>
 80105a8:	9b08      	ldr	r3, [sp, #32]
 80105aa:	e712      	b.n	80103d2 <arm_radix4_butterfly_q15+0x55e>
 80105ac:	00007fff 	.word	0x00007fff
 80105b0:	ffff8000 	.word	0xffff8000

080105b4 <arm_radix4_butterfly_inverse_q15>:
 80105b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b6:	4656      	mov	r6, sl
 80105b8:	464d      	mov	r5, r9
 80105ba:	465f      	mov	r7, fp
 80105bc:	4644      	mov	r4, r8
 80105be:	b4f0      	push	{r4, r5, r6, r7}
 80105c0:	b0a7      	sub	sp, #156	@ 0x9c
 80105c2:	9111      	str	r1, [sp, #68]	@ 0x44
 80105c4:	0889      	lsrs	r1, r1, #2
 80105c6:	000d      	movs	r5, r1
 80105c8:	911e      	str	r1, [sp, #120]	@ 0x78
 80105ca:	0001      	movs	r1, r0
 80105cc:	9024      	str	r0, [sp, #144]	@ 0x90
 80105ce:	901c      	str	r0, [sp, #112]	@ 0x70
 80105d0:	00a8      	lsls	r0, r5, #2
 80105d2:	0004      	movs	r4, r0
 80105d4:	9002      	str	r0, [sp, #8]
 80105d6:	0008      	movs	r0, r1
 80105d8:	4682      	mov	sl, r0
 80105da:	0016      	movs	r6, r2
 80105dc:	9225      	str	r2, [sp, #148]	@ 0x94
 80105de:	1ca2      	adds	r2, r4, #2
 80105e0:	4689      	mov	r9, r1
 80105e2:	4492      	add	sl, r2
 80105e4:	00d9      	lsls	r1, r3, #3
 80105e6:	005a      	lsls	r2, r3, #1
 80105e8:	9106      	str	r1, [sp, #24]
 80105ea:	0099      	lsls	r1, r3, #2
 80105ec:	18d3      	adds	r3, r2, r3
 80105ee:	46a4      	mov	ip, r4
 80105f0:	9105      	str	r1, [sp, #20]
 80105f2:	0099      	lsls	r1, r3, #2
 80105f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80105f6:	00e9      	lsls	r1, r5, #3
 80105f8:	468b      	mov	fp, r1
 80105fa:	44e1      	add	r9, ip
 80105fc:	44cc      	add	ip, r9
 80105fe:	4661      	mov	r1, ip
 8010600:	465b      	mov	r3, fp
 8010602:	9601      	str	r6, [sp, #4]
 8010604:	9603      	str	r6, [sp, #12]
 8010606:	9604      	str	r6, [sp, #16]
 8010608:	464a      	mov	r2, r9
 801060a:	0006      	movs	r6, r0
 801060c:	4650      	mov	r0, sl
 801060e:	9108      	str	r1, [sp, #32]
 8010610:	9300      	str	r3, [sp, #0]
 8010612:	2300      	movs	r3, #0
 8010614:	5ef1      	ldrsh	r1, [r6, r3]
 8010616:	9c02      	ldr	r4, [sp, #8]
 8010618:	108b      	asrs	r3, r1, #2
 801061a:	4698      	mov	r8, r3
 801061c:	2102      	movs	r1, #2
 801061e:	5e73      	ldrsh	r3, [r6, r1]
 8010620:	0037      	movs	r7, r6
 8010622:	109b      	asrs	r3, r3, #2
 8010624:	469c      	mov	ip, r3
 8010626:	0023      	movs	r3, r4
 8010628:	5ed1      	ldrsh	r1, [r2, r3]
 801062a:	5f03      	ldrsh	r3, [r0, r4]
 801062c:	4645      	mov	r5, r8
 801062e:	1089      	asrs	r1, r1, #2
 8010630:	1a6d      	subs	r5, r5, r1
 8010632:	46ab      	mov	fp, r5
 8010634:	4665      	mov	r5, ip
 8010636:	109b      	asrs	r3, r3, #2
 8010638:	1aed      	subs	r5, r5, r3
 801063a:	9507      	str	r5, [sp, #28]
 801063c:	2600      	movs	r6, #0
 801063e:	5f95      	ldrsh	r5, [r2, r6]
 8010640:	4441      	add	r1, r8
 8010642:	10ae      	asrs	r6, r5, #2
 8010644:	46b2      	mov	sl, r6
 8010646:	2600      	movs	r6, #0
 8010648:	5f84      	ldrsh	r4, [r0, r6]
 801064a:	4463      	add	r3, ip
 801064c:	10a6      	asrs	r6, r4, #2
 801064e:	46b1      	mov	r9, r6
 8010650:	9c00      	ldr	r4, [sp, #0]
 8010652:	5f15      	ldrsh	r5, [r2, r4]
 8010654:	5f04      	ldrsh	r4, [r0, r4]
 8010656:	10ad      	asrs	r5, r5, #2
 8010658:	4455      	add	r5, sl
 801065a:	104e      	asrs	r6, r1, #1
 801065c:	10a4      	asrs	r4, r4, #2
 801065e:	444c      	add	r4, r9
 8010660:	46b1      	mov	r9, r6
 8010662:	106e      	asrs	r6, r5, #1
 8010664:	46b0      	mov	r8, r6
 8010666:	44c8      	add	r8, r9
 8010668:	4646      	mov	r6, r8
 801066a:	803e      	strh	r6, [r7, #0]
 801066c:	105e      	asrs	r6, r3, #1
 801066e:	46b4      	mov	ip, r6
 8010670:	1066      	asrs	r6, r4, #1
 8010672:	46b0      	mov	r8, r6
 8010674:	44e0      	add	r8, ip
 8010676:	4646      	mov	r6, r8
 8010678:	1b49      	subs	r1, r1, r5
 801067a:	9d04      	ldr	r5, [sp, #16]
 801067c:	807e      	strh	r6, [r7, #2]
 801067e:	1b1b      	subs	r3, r3, r4
 8010680:	2400      	movs	r4, #0
 8010682:	5f2e      	ldrsh	r6, [r5, r4]
 8010684:	46b1      	mov	r9, r6
 8010686:	2600      	movs	r6, #0
 8010688:	5f94      	ldrsh	r4, [r2, r6]
 801068a:	2602      	movs	r6, #2
 801068c:	5fad      	ldrsh	r5, [r5, r6]
 801068e:	10a6      	asrs	r6, r4, #2
 8010690:	46b4      	mov	ip, r6
 8010692:	2600      	movs	r6, #0
 8010694:	5f84      	ldrsh	r4, [r0, r6]
 8010696:	10a6      	asrs	r6, r4, #2
 8010698:	46b2      	mov	sl, r6
 801069a:	464c      	mov	r4, r9
 801069c:	001e      	movs	r6, r3
 801069e:	434c      	muls	r4, r1
 80106a0:	436e      	muls	r6, r5
 80106a2:	1ba4      	subs	r4, r4, r6
 80106a4:	464e      	mov	r6, r9
 80106a6:	4369      	muls	r1, r5
 80106a8:	4373      	muls	r3, r6
 80106aa:	18cb      	adds	r3, r1, r3
 80106ac:	1424      	asrs	r4, r4, #16
 80106ae:	141b      	asrs	r3, r3, #16
 80106b0:	8014      	strh	r4, [r2, #0]
 80106b2:	8003      	strh	r3, [r0, #0]
 80106b4:	9b00      	ldr	r3, [sp, #0]
 80106b6:	9d07      	ldr	r5, [sp, #28]
 80106b8:	5ed3      	ldrsh	r3, [r2, r3]
 80106ba:	4661      	mov	r1, ip
 80106bc:	109b      	asrs	r3, r3, #2
 80106be:	1acb      	subs	r3, r1, r3
 80106c0:	9900      	ldr	r1, [sp, #0]
 80106c2:	1aec      	subs	r4, r5, r3
 80106c4:	5e41      	ldrsh	r1, [r0, r1]
 80106c6:	4656      	mov	r6, sl
 80106c8:	1089      	asrs	r1, r1, #2
 80106ca:	1a71      	subs	r1, r6, r1
 80106cc:	465e      	mov	r6, fp
 80106ce:	9407      	str	r4, [sp, #28]
 80106d0:	9c03      	ldr	r4, [sp, #12]
 80106d2:	46ac      	mov	ip, r5
 80106d4:	4688      	mov	r8, r1
 80106d6:	1a71      	subs	r1, r6, r1
 80106d8:	2500      	movs	r5, #0
 80106da:	5f66      	ldrsh	r6, [r4, r5]
 80106dc:	4463      	add	r3, ip
 80106de:	46b1      	mov	r9, r6
 80106e0:	2502      	movs	r5, #2
 80106e2:	5f66      	ldrsh	r6, [r4, r5]
 80106e4:	9c02      	ldr	r4, [sp, #8]
 80106e6:	46b4      	mov	ip, r6
 80106e8:	464e      	mov	r6, r9
 80106ea:	434e      	muls	r6, r1
 80106ec:	0035      	movs	r5, r6
 80106ee:	4666      	mov	r6, ip
 80106f0:	435e      	muls	r6, r3
 80106f2:	1bad      	subs	r5, r5, r6
 80106f4:	4666      	mov	r6, ip
 80106f6:	4371      	muls	r1, r6
 80106f8:	464e      	mov	r6, r9
 80106fa:	4373      	muls	r3, r6
 80106fc:	18cb      	adds	r3, r1, r3
 80106fe:	142d      	asrs	r5, r5, #16
 8010700:	141b      	asrs	r3, r3, #16
 8010702:	5315      	strh	r5, [r2, r4]
 8010704:	5303      	strh	r3, [r0, r4]
 8010706:	9b01      	ldr	r3, [sp, #4]
 8010708:	44d8      	add	r8, fp
 801070a:	2600      	movs	r6, #0
 801070c:	5f99      	ldrsh	r1, [r3, r6]
 801070e:	2602      	movs	r6, #2
 8010710:	5f9d      	ldrsh	r5, [r3, r6]
 8010712:	4646      	mov	r6, r8
 8010714:	434e      	muls	r6, r1
 8010716:	9c07      	ldr	r4, [sp, #28]
 8010718:	0033      	movs	r3, r6
 801071a:	0026      	movs	r6, r4
 801071c:	436e      	muls	r6, r5
 801071e:	1b9b      	subs	r3, r3, r6
 8010720:	9e00      	ldr	r6, [sp, #0]
 8010722:	141b      	asrs	r3, r3, #16
 8010724:	5393      	strh	r3, [r2, r6]
 8010726:	4646      	mov	r6, r8
 8010728:	434c      	muls	r4, r1
 801072a:	436e      	muls	r6, r5
 801072c:	9900      	ldr	r1, [sp, #0]
 801072e:	1933      	adds	r3, r6, r4
 8010730:	141b      	asrs	r3, r3, #16
 8010732:	5243      	strh	r3, [r0, r1]
 8010734:	9906      	ldr	r1, [sp, #24]
 8010736:	9d04      	ldr	r5, [sp, #16]
 8010738:	468c      	mov	ip, r1
 801073a:	9905      	ldr	r1, [sp, #20]
 801073c:	4465      	add	r5, ip
 801073e:	468c      	mov	ip, r1
 8010740:	003b      	movs	r3, r7
 8010742:	9c03      	ldr	r4, [sp, #12]
 8010744:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010746:	4464      	add	r4, ip
 8010748:	468c      	mov	ip, r1
 801074a:	3304      	adds	r3, #4
 801074c:	001e      	movs	r6, r3
 801074e:	9b01      	ldr	r3, [sp, #4]
 8010750:	3204      	adds	r2, #4
 8010752:	4463      	add	r3, ip
 8010754:	9301      	str	r3, [sp, #4]
 8010756:	9b08      	ldr	r3, [sp, #32]
 8010758:	3004      	adds	r0, #4
 801075a:	9504      	str	r5, [sp, #16]
 801075c:	9403      	str	r4, [sp, #12]
 801075e:	429a      	cmp	r2, r3
 8010760:	d000      	beq.n	8010764 <arm_radix4_butterfly_inverse_q15+0x1b0>
 8010762:	e756      	b.n	8010612 <arm_radix4_butterfly_inverse_q15+0x5e>
 8010764:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010766:	9b05      	ldr	r3, [sp, #20]
 8010768:	2a04      	cmp	r2, #4
 801076a:	d800      	bhi.n	801076e <arm_radix4_butterfly_inverse_q15+0x1ba>
 801076c:	e188      	b.n	8010a80 <arm_radix4_butterfly_inverse_q15+0x4cc>
 801076e:	9215      	str	r2, [sp, #84]	@ 0x54
 8010770:	9223      	str	r2, [sp, #140]	@ 0x8c
 8010772:	4ad1      	ldr	r2, [pc, #836]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010774:	4692      	mov	sl, r2
 8010776:	4ad1      	ldr	r2, [pc, #836]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 8010778:	4693      	mov	fp, r2
 801077a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801077c:	0892      	lsrs	r2, r2, #2
 801077e:	0011      	movs	r1, r2
 8010780:	921e      	str	r2, [sp, #120]	@ 0x78
 8010782:	3a01      	subs	r2, #1
 8010784:	9220      	str	r2, [sp, #128]	@ 0x80
 8010786:	009a      	lsls	r2, r3, #2
 8010788:	921d      	str	r2, [sp, #116]	@ 0x74
 801078a:	00da      	lsls	r2, r3, #3
 801078c:	921f      	str	r2, [sp, #124]	@ 0x7c
 801078e:	005a      	lsls	r2, r3, #1
 8010790:	18d3      	adds	r3, r2, r3
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	9321      	str	r3, [sp, #132]	@ 0x84
 8010796:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010798:	009b      	lsls	r3, r3, #2
 801079a:	9316      	str	r3, [sp, #88]	@ 0x58
 801079c:	00cb      	lsls	r3, r1, #3
 801079e:	4699      	mov	r9, r3
 80107a0:	008b      	lsls	r3, r1, #2
 80107a2:	9302      	str	r3, [sp, #8]
 80107a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80107a6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80107a8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80107aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80107ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80107ae:	9318      	str	r3, [sp, #96]	@ 0x60
 80107b0:	2300      	movs	r3, #0
 80107b2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80107b4:	464b      	mov	r3, r9
 80107b6:	3302      	adds	r3, #2
 80107b8:	9322      	str	r3, [sp, #136]	@ 0x88
 80107ba:	464b      	mov	r3, r9
 80107bc:	9301      	str	r3, [sp, #4]
 80107be:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80107c0:	2100      	movs	r1, #0
 80107c2:	5e5a      	ldrsh	r2, [r3, r1]
 80107c4:	9207      	str	r2, [sp, #28]
 80107c6:	2202      	movs	r2, #2
 80107c8:	5e9b      	ldrsh	r3, [r3, r2]
 80107ca:	9308      	str	r3, [sp, #32]
 80107cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107ce:	2100      	movs	r1, #0
 80107d0:	5e5a      	ldrsh	r2, [r3, r1]
 80107d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80107d4:	2202      	movs	r2, #2
 80107d6:	5e9b      	ldrsh	r3, [r3, r2]
 80107d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80107da:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80107dc:	2100      	movs	r1, #0
 80107de:	5e5a      	ldrsh	r2, [r3, r1]
 80107e0:	9213      	str	r2, [sp, #76]	@ 0x4c
 80107e2:	2202      	movs	r2, #2
 80107e4:	5e9b      	ldrsh	r3, [r3, r2]
 80107e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80107e8:	9314      	str	r3, [sp, #80]	@ 0x50
 80107ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d800      	bhi.n	80107f2 <arm_radix4_butterfly_inverse_q15+0x23e>
 80107f0:	e124      	b.n	8010a3c <arm_radix4_butterfly_inverse_q15+0x488>
 80107f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80107f4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80107f6:	0019      	movs	r1, r3
 80107f8:	9b02      	ldr	r3, [sp, #8]
 80107fa:	4694      	mov	ip, r2
 80107fc:	4699      	mov	r9, r3
 80107fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010800:	44e1      	add	r9, ip
 8010802:	920a      	str	r2, [sp, #40]	@ 0x28
 8010804:	464a      	mov	r2, r9
 8010806:	4461      	add	r1, ip
 8010808:	4688      	mov	r8, r1
 801080a:	9200      	str	r2, [sp, #0]
 801080c:	46e1      	mov	r9, ip
 801080e:	e0a3      	b.n	8010958 <arm_radix4_butterfly_inverse_q15+0x3a4>
 8010810:	b200      	sxth	r0, r0
 8010812:	1040      	asrs	r0, r0, #1
 8010814:	2e00      	cmp	r6, #0
 8010816:	dc00      	bgt.n	801081a <arm_radix4_butterfly_inverse_q15+0x266>
 8010818:	e102      	b.n	8010a20 <arm_radix4_butterfly_inverse_q15+0x46c>
 801081a:	4649      	mov	r1, r9
 801081c:	b212      	sxth	r2, r2
 801081e:	1052      	asrs	r2, r2, #1
 8010820:	1886      	adds	r6, r0, r2
 8010822:	1076      	asrs	r6, r6, #1
 8010824:	800e      	strh	r6, [r1, #0]
 8010826:	9e04      	ldr	r6, [sp, #16]
 8010828:	2f00      	cmp	r7, #0
 801082a:	dc00      	bgt.n	801082e <arm_radix4_butterfly_inverse_q15+0x27a>
 801082c:	e104      	b.n	8010a38 <arm_radix4_butterfly_inverse_q15+0x484>
 801082e:	b236      	sxth	r6, r6
 8010830:	1076      	asrs	r6, r6, #1
 8010832:	2d00      	cmp	r5, #0
 8010834:	dc00      	bgt.n	8010838 <arm_radix4_butterfly_inverse_q15+0x284>
 8010836:	e0fd      	b.n	8010a34 <arm_radix4_butterfly_inverse_q15+0x480>
 8010838:	4649      	mov	r1, r9
 801083a:	b21b      	sxth	r3, r3
 801083c:	105b      	asrs	r3, r3, #1
 801083e:	18f5      	adds	r5, r6, r3
 8010840:	106d      	asrs	r5, r5, #1
 8010842:	804d      	strh	r5, [r1, #2]
 8010844:	9900      	ldr	r1, [sp, #0]
 8010846:	1a80      	subs	r0, r0, r2
 8010848:	000a      	movs	r2, r1
 801084a:	2500      	movs	r5, #0
 801084c:	5f55      	ldrsh	r5, [r2, r5]
 801084e:	000a      	movs	r2, r1
 8010850:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010852:	1af3      	subs	r3, r6, r3
 8010854:	2602      	movs	r6, #2
 8010856:	5f96      	ldrsh	r6, [r2, r6]
 8010858:	000a      	movs	r2, r1
 801085a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801085c:	435a      	muls	r2, r3
 801085e:	4347      	muls	r7, r0
 8010860:	1abf      	subs	r7, r7, r2
 8010862:	9a00      	ldr	r2, [sp, #0]
 8010864:	143f      	asrs	r7, r7, #16
 8010866:	8017      	strh	r7, [r2, #0]
 8010868:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801086a:	4348      	muls	r0, r1
 801086c:	437b      	muls	r3, r7
 801086e:	9a00      	ldr	r2, [sp, #0]
 8010870:	18c0      	adds	r0, r0, r3
 8010872:	1400      	asrs	r0, r0, #16
 8010874:	9b01      	ldr	r3, [sp, #4]
 8010876:	8050      	strh	r0, [r2, #2]
 8010878:	5ed3      	ldrsh	r3, [r2, r3]
 801087a:	1aed      	subs	r5, r5, r3
 801087c:	0028      	movs	r0, r5
 801087e:	4555      	cmp	r5, sl
 8010880:	dd00      	ble.n	8010884 <arm_radix4_butterfly_inverse_q15+0x2d0>
 8010882:	488d      	ldr	r0, [pc, #564]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010884:	002f      	movs	r7, r5
 8010886:	455d      	cmp	r5, fp
 8010888:	da00      	bge.n	801088c <arm_radix4_butterfly_inverse_q15+0x2d8>
 801088a:	4f8c      	ldr	r7, [pc, #560]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 801088c:	4643      	mov	r3, r8
 801088e:	9a02      	ldr	r2, [sp, #8]
 8010890:	5e9b      	ldrsh	r3, [r3, r2]
 8010892:	1af6      	subs	r6, r6, r3
 8010894:	0033      	movs	r3, r6
 8010896:	4556      	cmp	r6, sl
 8010898:	dd00      	ble.n	801089c <arm_radix4_butterfly_inverse_q15+0x2e8>
 801089a:	4b87      	ldr	r3, [pc, #540]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 801089c:	46b4      	mov	ip, r6
 801089e:	455e      	cmp	r6, fp
 80108a0:	da01      	bge.n	80108a6 <arm_radix4_butterfly_inverse_q15+0x2f2>
 80108a2:	4a86      	ldr	r2, [pc, #536]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 80108a4:	4694      	mov	ip, r2
 80108a6:	9a06      	ldr	r2, [sp, #24]
 80108a8:	2c00      	cmp	r4, #0
 80108aa:	dc00      	bgt.n	80108ae <arm_radix4_butterfly_inverse_q15+0x2fa>
 80108ac:	e0c0      	b.n	8010a30 <arm_radix4_butterfly_inverse_q15+0x47c>
 80108ae:	b212      	sxth	r2, r2
 80108b0:	1052      	asrs	r2, r2, #1
 80108b2:	b292      	uxth	r2, r2
 80108b4:	2e00      	cmp	r6, #0
 80108b6:	dc00      	bgt.n	80108ba <arm_radix4_butterfly_inverse_q15+0x306>
 80108b8:	e0b8      	b.n	8010a2c <arm_radix4_butterfly_inverse_q15+0x478>
 80108ba:	b21c      	sxth	r4, r3
 80108bc:	9903      	ldr	r1, [sp, #12]
 80108be:	1064      	asrs	r4, r4, #1
 80108c0:	b2a4      	uxth	r4, r4
 80108c2:	9b05      	ldr	r3, [sp, #20]
 80108c4:	2900      	cmp	r1, #0
 80108c6:	dc00      	bgt.n	80108ca <arm_radix4_butterfly_inverse_q15+0x316>
 80108c8:	e0ae      	b.n	8010a28 <arm_radix4_butterfly_inverse_q15+0x474>
 80108ca:	b21b      	sxth	r3, r3
 80108cc:	105b      	asrs	r3, r3, #1
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	9303      	str	r3, [sp, #12]
 80108d2:	2d00      	cmp	r5, #0
 80108d4:	dc00      	bgt.n	80108d8 <arm_radix4_butterfly_inverse_q15+0x324>
 80108d6:	e0a5      	b.n	8010a24 <arm_radix4_butterfly_inverse_q15+0x470>
 80108d8:	b200      	sxth	r0, r0
 80108da:	1040      	asrs	r0, r0, #1
 80108dc:	b280      	uxth	r0, r0
 80108de:	181d      	adds	r5, r3, r0
 80108e0:	464b      	mov	r3, r9
 80108e2:	1b16      	subs	r6, r2, r4
 80108e4:	9f07      	ldr	r7, [sp, #28]
 80108e6:	9908      	ldr	r1, [sp, #32]
 80108e8:	b236      	sxth	r6, r6
 80108ea:	b22d      	sxth	r5, r5
 80108ec:	4369      	muls	r1, r5
 80108ee:	4377      	muls	r7, r6
 80108f0:	1a7f      	subs	r7, r7, r1
 80108f2:	9901      	ldr	r1, [sp, #4]
 80108f4:	143f      	asrs	r7, r7, #16
 80108f6:	525f      	strh	r7, [r3, r1]
 80108f8:	4643      	mov	r3, r8
 80108fa:	9908      	ldr	r1, [sp, #32]
 80108fc:	9f07      	ldr	r7, [sp, #28]
 80108fe:	434e      	muls	r6, r1
 8010900:	437d      	muls	r5, r7
 8010902:	1976      	adds	r6, r6, r5
 8010904:	1436      	asrs	r6, r6, #16
 8010906:	801e      	strh	r6, [r3, #0]
 8010908:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801090a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801090c:	9b03      	ldr	r3, [sp, #12]
 801090e:	1912      	adds	r2, r2, r4
 8010910:	1a1b      	subs	r3, r3, r0
 8010912:	002c      	movs	r4, r5
 8010914:	0008      	movs	r0, r1
 8010916:	b212      	sxth	r2, r2
 8010918:	b21b      	sxth	r3, r3
 801091a:	435c      	muls	r4, r3
 801091c:	4350      	muls	r0, r2
 801091e:	434b      	muls	r3, r1
 8010920:	436a      	muls	r2, r5
 8010922:	18d2      	adds	r2, r2, r3
 8010924:	4643      	mov	r3, r8
 8010926:	9e00      	ldr	r6, [sp, #0]
 8010928:	1b00      	subs	r0, r0, r4
 801092a:	9902      	ldr	r1, [sp, #8]
 801092c:	9c01      	ldr	r4, [sp, #4]
 801092e:	1412      	asrs	r2, r2, #16
 8010930:	1400      	asrs	r0, r0, #16
 8010932:	5330      	strh	r0, [r6, r4]
 8010934:	525a      	strh	r2, [r3, r1]
 8010936:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801093a:	4694      	mov	ip, r2
 801093c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801093e:	4463      	add	r3, ip
 8010940:	0019      	movs	r1, r3
 8010942:	4694      	mov	ip, r2
 8010944:	930a      	str	r3, [sp, #40]	@ 0x28
 8010946:	0033      	movs	r3, r6
 8010948:	4463      	add	r3, ip
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801094e:	44e1      	add	r9, ip
 8010950:	44e0      	add	r8, ip
 8010952:	001a      	movs	r2, r3
 8010954:	428a      	cmp	r2, r1
 8010956:	d971      	bls.n	8010a3c <arm_radix4_butterfly_inverse_q15+0x488>
 8010958:	464b      	mov	r3, r9
 801095a:	2500      	movs	r5, #0
 801095c:	5f5d      	ldrsh	r5, [r3, r5]
 801095e:	464b      	mov	r3, r9
 8010960:	9a01      	ldr	r2, [sp, #4]
 8010962:	5e9c      	ldrsh	r4, [r3, r2]
 8010964:	192b      	adds	r3, r5, r4
 8010966:	469c      	mov	ip, r3
 8010968:	0018      	movs	r0, r3
 801096a:	4553      	cmp	r3, sl
 801096c:	dd00      	ble.n	8010970 <arm_radix4_butterfly_inverse_q15+0x3bc>
 801096e:	4852      	ldr	r0, [pc, #328]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010970:	4663      	mov	r3, ip
 8010972:	930d      	str	r3, [sp, #52]	@ 0x34
 8010974:	45dc      	cmp	ip, fp
 8010976:	da01      	bge.n	801097c <arm_radix4_butterfly_inverse_q15+0x3c8>
 8010978:	4b50      	ldr	r3, [pc, #320]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 801097a:	930d      	str	r3, [sp, #52]	@ 0x34
 801097c:	464b      	mov	r3, r9
 801097e:	2202      	movs	r2, #2
 8010980:	5e9a      	ldrsh	r2, [r3, r2]
 8010982:	4643      	mov	r3, r8
 8010984:	2100      	movs	r1, #0
 8010986:	5e5b      	ldrsh	r3, [r3, r1]
 8010988:	18d7      	adds	r7, r2, r3
 801098a:	9704      	str	r7, [sp, #16]
 801098c:	4557      	cmp	r7, sl
 801098e:	dd01      	ble.n	8010994 <arm_radix4_butterfly_inverse_q15+0x3e0>
 8010990:	4949      	ldr	r1, [pc, #292]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010992:	9104      	str	r1, [sp, #16]
 8010994:	970c      	str	r7, [sp, #48]	@ 0x30
 8010996:	455f      	cmp	r7, fp
 8010998:	da01      	bge.n	801099e <arm_radix4_butterfly_inverse_q15+0x3ea>
 801099a:	4948      	ldr	r1, [pc, #288]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 801099c:	910c      	str	r1, [sp, #48]	@ 0x30
 801099e:	1b2c      	subs	r4, r5, r4
 80109a0:	9406      	str	r4, [sp, #24]
 80109a2:	4554      	cmp	r4, sl
 80109a4:	dd01      	ble.n	80109aa <arm_radix4_butterfly_inverse_q15+0x3f6>
 80109a6:	4944      	ldr	r1, [pc, #272]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 80109a8:	9106      	str	r1, [sp, #24]
 80109aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80109ac:	455c      	cmp	r4, fp
 80109ae:	da01      	bge.n	80109b4 <arm_radix4_butterfly_inverse_q15+0x400>
 80109b0:	4942      	ldr	r1, [pc, #264]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 80109b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80109b4:	1ad3      	subs	r3, r2, r3
 80109b6:	9303      	str	r3, [sp, #12]
 80109b8:	9305      	str	r3, [sp, #20]
 80109ba:	4553      	cmp	r3, sl
 80109bc:	dd02      	ble.n	80109c4 <arm_radix4_butterfly_inverse_q15+0x410>
 80109be:	4b3e      	ldr	r3, [pc, #248]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 80109c0:	9305      	str	r3, [sp, #20]
 80109c2:	9b03      	ldr	r3, [sp, #12]
 80109c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80109c6:	455b      	cmp	r3, fp
 80109c8:	da01      	bge.n	80109ce <arm_radix4_butterfly_inverse_q15+0x41a>
 80109ca:	4b3c      	ldr	r3, [pc, #240]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 80109cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80109ce:	9a00      	ldr	r2, [sp, #0]
 80109d0:	2300      	movs	r3, #0
 80109d2:	5ed6      	ldrsh	r6, [r2, r3]
 80109d4:	9b01      	ldr	r3, [sp, #4]
 80109d6:	5ed3      	ldrsh	r3, [r2, r3]
 80109d8:	18f6      	adds	r6, r6, r3
 80109da:	0032      	movs	r2, r6
 80109dc:	4556      	cmp	r6, sl
 80109de:	dd00      	ble.n	80109e2 <arm_radix4_butterfly_inverse_q15+0x42e>
 80109e0:	4a35      	ldr	r2, [pc, #212]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 80109e2:	960f      	str	r6, [sp, #60]	@ 0x3c
 80109e4:	455e      	cmp	r6, fp
 80109e6:	da01      	bge.n	80109ec <arm_radix4_butterfly_inverse_q15+0x438>
 80109e8:	4b34      	ldr	r3, [pc, #208]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 80109ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80109ec:	9b00      	ldr	r3, [sp, #0]
 80109ee:	9902      	ldr	r1, [sp, #8]
 80109f0:	2502      	movs	r5, #2
 80109f2:	5f5d      	ldrsh	r5, [r3, r5]
 80109f4:	4643      	mov	r3, r8
 80109f6:	5e5b      	ldrsh	r3, [r3, r1]
 80109f8:	18ed      	adds	r5, r5, r3
 80109fa:	002b      	movs	r3, r5
 80109fc:	4555      	cmp	r5, sl
 80109fe:	dd00      	ble.n	8010a02 <arm_radix4_butterfly_inverse_q15+0x44e>
 8010a00:	4b2d      	ldr	r3, [pc, #180]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010a02:	9510      	str	r5, [sp, #64]	@ 0x40
 8010a04:	455d      	cmp	r5, fp
 8010a06:	da01      	bge.n	8010a0c <arm_radix4_butterfly_inverse_q15+0x458>
 8010a08:	492c      	ldr	r1, [pc, #176]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 8010a0a:	9110      	str	r1, [sp, #64]	@ 0x40
 8010a0c:	4661      	mov	r1, ip
 8010a0e:	2900      	cmp	r1, #0
 8010a10:	dd00      	ble.n	8010a14 <arm_radix4_butterfly_inverse_q15+0x460>
 8010a12:	e6fd      	b.n	8010810 <arm_radix4_butterfly_inverse_q15+0x25c>
 8010a14:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010a16:	b200      	sxth	r0, r0
 8010a18:	1040      	asrs	r0, r0, #1
 8010a1a:	2e00      	cmp	r6, #0
 8010a1c:	dd00      	ble.n	8010a20 <arm_radix4_butterfly_inverse_q15+0x46c>
 8010a1e:	e6fc      	b.n	801081a <arm_radix4_butterfly_inverse_q15+0x266>
 8010a20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010a22:	e6fa      	b.n	801081a <arm_radix4_butterfly_inverse_q15+0x266>
 8010a24:	0038      	movs	r0, r7
 8010a26:	e757      	b.n	80108d8 <arm_radix4_butterfly_inverse_q15+0x324>
 8010a28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a2a:	e74e      	b.n	80108ca <arm_radix4_butterfly_inverse_q15+0x316>
 8010a2c:	4663      	mov	r3, ip
 8010a2e:	e744      	b.n	80108ba <arm_radix4_butterfly_inverse_q15+0x306>
 8010a30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010a32:	e73c      	b.n	80108ae <arm_radix4_butterfly_inverse_q15+0x2fa>
 8010a34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a36:	e6ff      	b.n	8010838 <arm_radix4_butterfly_inverse_q15+0x284>
 8010a38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010a3a:	e6f8      	b.n	801082e <arm_radix4_butterfly_inverse_q15+0x27a>
 8010a3c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8010a3e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010a40:	468c      	mov	ip, r1
 8010a42:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8010a44:	4462      	add	r2, ip
 8010a46:	468c      	mov	ip, r1
 8010a48:	9218      	str	r2, [sp, #96]	@ 0x60
 8010a4a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8010a4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010a4e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010a50:	4462      	add	r2, ip
 8010a52:	468c      	mov	ip, r1
 8010a54:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a56:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010a58:	3301      	adds	r3, #1
 8010a5a:	4462      	add	r2, ip
 8010a5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8010a5e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010a60:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010a62:	3204      	adds	r2, #4
 8010a64:	921b      	str	r2, [sp, #108]	@ 0x6c
 8010a66:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d800      	bhi.n	8010a6e <arm_radix4_butterfly_inverse_q15+0x4ba>
 8010a6c:	e6a7      	b.n	80107be <arm_radix4_butterfly_inverse_q15+0x20a>
 8010a6e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010a70:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8010a72:	0892      	lsrs	r2, r2, #2
 8010a74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010a76:	9223      	str	r2, [sp, #140]	@ 0x8c
 8010a78:	9115      	str	r1, [sp, #84]	@ 0x54
 8010a7a:	2a04      	cmp	r2, #4
 8010a7c:	d900      	bls.n	8010a80 <arm_radix4_butterfly_inverse_q15+0x4cc>
 8010a7e:	e67c      	b.n	801077a <arm_radix4_butterfly_inverse_q15+0x1c6>
 8010a80:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010a82:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010a84:	0893      	lsrs	r3, r2, #2
 8010a86:	0058      	lsls	r0, r3, #1
 8010a88:	1a8a      	subs	r2, r1, r2
 8010a8a:	18c0      	adds	r0, r0, r3
 8010a8c:	920e      	str	r2, [sp, #56]	@ 0x38
 8010a8e:	009a      	lsls	r2, r3, #2
 8010a90:	00db      	lsls	r3, r3, #3
 8010a92:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a94:	2300      	movs	r3, #0
 8010a96:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8010a98:	9304      	str	r3, [sp, #16]
 8010a9a:	46a1      	mov	r9, r4
 8010a9c:	4b06      	ldr	r3, [pc, #24]	@ (8010ab8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8010a9e:	9201      	str	r2, [sp, #4]
 8010aa0:	469b      	mov	fp, r3
 8010aa2:	3202      	adds	r2, #2
 8010aa4:	4b05      	ldr	r3, [pc, #20]	@ (8010abc <arm_radix4_butterfly_inverse_q15+0x508>)
 8010aa6:	4491      	add	r9, r2
 8010aa8:	46a0      	mov	r8, r4
 8010aaa:	469a      	mov	sl, r3
 8010aac:	464b      	mov	r3, r9
 8010aae:	0080      	lsls	r0, r0, #2
 8010ab0:	4480      	add	r8, r0
 8010ab2:	4640      	mov	r0, r8
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	e08a      	b.n	8010bce <arm_radix4_butterfly_inverse_q15+0x61a>
 8010ab8:	00007fff 	.word	0x00007fff
 8010abc:	ffff8000 	.word	0xffff8000
 8010ac0:	b21b      	sxth	r3, r3
 8010ac2:	105b      	asrs	r3, r3, #1
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	469c      	mov	ip, r3
 8010ac8:	2d00      	cmp	r5, #0
 8010aca:	dc00      	bgt.n	8010ace <arm_radix4_butterfly_inverse_q15+0x51a>
 8010acc:	e0e2      	b.n	8010c94 <arm_radix4_butterfly_inverse_q15+0x6e0>
 8010ace:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ad0:	b21b      	sxth	r3, r3
 8010ad2:	105b      	asrs	r3, r3, #1
 8010ad4:	b29d      	uxth	r5, r3
 8010ad6:	4663      	mov	r3, ip
 8010ad8:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010ada:	195b      	adds	r3, r3, r5
 8010adc:	8033      	strh	r3, [r6, #0]
 8010ade:	9b08      	ldr	r3, [sp, #32]
 8010ae0:	2f00      	cmp	r7, #0
 8010ae2:	dc00      	bgt.n	8010ae6 <arm_radix4_butterfly_inverse_q15+0x532>
 8010ae4:	e0ea      	b.n	8010cbc <arm_radix4_butterfly_inverse_q15+0x708>
 8010ae6:	b21f      	sxth	r7, r3
 8010ae8:	107f      	asrs	r7, r7, #1
 8010aea:	b2bf      	uxth	r7, r7
 8010aec:	464b      	mov	r3, r9
 8010aee:	2c00      	cmp	r4, #0
 8010af0:	dc00      	bgt.n	8010af4 <arm_radix4_butterfly_inverse_q15+0x540>
 8010af2:	e0e1      	b.n	8010cb8 <arm_radix4_butterfly_inverse_q15+0x704>
 8010af4:	b21c      	sxth	r4, r3
 8010af6:	1064      	asrs	r4, r4, #1
 8010af8:	b2a3      	uxth	r3, r4
 8010afa:	4699      	mov	r9, r3
 8010afc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010afe:	18fb      	adds	r3, r7, r3
 8010b00:	8073      	strh	r3, [r6, #2]
 8010b02:	9b01      	ldr	r3, [sp, #4]
 8010b04:	5ef3      	ldrsh	r3, [r6, r3]
 8010b06:	4698      	mov	r8, r3
 8010b08:	9b00      	ldr	r3, [sp, #0]
 8010b0a:	2400      	movs	r4, #0
 8010b0c:	5f1b      	ldrsh	r3, [r3, r4]
 8010b0e:	464c      	mov	r4, r9
 8010b10:	9303      	str	r3, [sp, #12]
 8010b12:	4663      	mov	r3, ip
 8010b14:	1b5b      	subs	r3, r3, r5
 8010b16:	9d01      	ldr	r5, [sp, #4]
 8010b18:	1b3f      	subs	r7, r7, r4
 8010b1a:	5373      	strh	r3, [r6, r5]
 8010b1c:	9b00      	ldr	r3, [sp, #0]
 8010b1e:	801f      	strh	r7, [r3, #0]
 8010b20:	2300      	movs	r3, #0
 8010b22:	5ec4      	ldrsh	r4, [r0, r3]
 8010b24:	4643      	mov	r3, r8
 8010b26:	1b1c      	subs	r4, r3, r4
 8010b28:	46a0      	mov	r8, r4
 8010b2a:	455c      	cmp	r4, fp
 8010b2c:	dd01      	ble.n	8010b32 <arm_radix4_butterfly_inverse_q15+0x57e>
 8010b2e:	4b64      	ldr	r3, [pc, #400]	@ (8010cc0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8010b30:	4698      	mov	r8, r3
 8010b32:	46a1      	mov	r9, r4
 8010b34:	4554      	cmp	r4, sl
 8010b36:	da01      	bge.n	8010b3c <arm_radix4_butterfly_inverse_q15+0x588>
 8010b38:	4b62      	ldr	r3, [pc, #392]	@ (8010cc4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8010b3a:	4699      	mov	r9, r3
 8010b3c:	2302      	movs	r3, #2
 8010b3e:	5ec5      	ldrsh	r5, [r0, r3]
 8010b40:	9b03      	ldr	r3, [sp, #12]
 8010b42:	1b5d      	subs	r5, r3, r5
 8010b44:	002b      	movs	r3, r5
 8010b46:	455d      	cmp	r5, fp
 8010b48:	dd00      	ble.n	8010b4c <arm_radix4_butterfly_inverse_q15+0x598>
 8010b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8010cc0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8010b4c:	002f      	movs	r7, r5
 8010b4e:	4555      	cmp	r5, sl
 8010b50:	da00      	bge.n	8010b54 <arm_radix4_butterfly_inverse_q15+0x5a0>
 8010b52:	4f5c      	ldr	r7, [pc, #368]	@ (8010cc4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8010b54:	9e06      	ldr	r6, [sp, #24]
 8010b56:	46b4      	mov	ip, r6
 8010b58:	2900      	cmp	r1, #0
 8010b5a:	dc00      	bgt.n	8010b5e <arm_radix4_butterfly_inverse_q15+0x5aa>
 8010b5c:	e0a9      	b.n	8010cb2 <arm_radix4_butterfly_inverse_q15+0x6fe>
 8010b5e:	4661      	mov	r1, ip
 8010b60:	b209      	sxth	r1, r1
 8010b62:	1049      	asrs	r1, r1, #1
 8010b64:	b289      	uxth	r1, r1
 8010b66:	2d00      	cmp	r5, #0
 8010b68:	dc00      	bgt.n	8010b6c <arm_radix4_butterfly_inverse_q15+0x5b8>
 8010b6a:	e0a0      	b.n	8010cae <arm_radix4_butterfly_inverse_q15+0x6fa>
 8010b6c:	b21b      	sxth	r3, r3
 8010b6e:	105b      	asrs	r3, r3, #1
 8010b70:	b29b      	uxth	r3, r3
 8010b72:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010b74:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8010b76:	1acd      	subs	r5, r1, r3
 8010b78:	53f5      	strh	r5, [r6, r7]
 8010b7a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8010b7c:	2a00      	cmp	r2, #0
 8010b7e:	dc00      	bgt.n	8010b82 <arm_radix4_butterfly_inverse_q15+0x5ce>
 8010b80:	e093      	b.n	8010caa <arm_radix4_butterfly_inverse_q15+0x6f6>
 8010b82:	b22d      	sxth	r5, r5
 8010b84:	106d      	asrs	r5, r5, #1
 8010b86:	b2ad      	uxth	r5, r5
 8010b88:	2c00      	cmp	r4, #0
 8010b8a:	dc00      	bgt.n	8010b8e <arm_radix4_butterfly_inverse_q15+0x5da>
 8010b8c:	e08b      	b.n	8010ca6 <arm_radix4_butterfly_inverse_q15+0x6f2>
 8010b8e:	4642      	mov	r2, r8
 8010b90:	b212      	sxth	r2, r2
 8010b92:	1052      	asrs	r2, r2, #1
 8010b94:	9f00      	ldr	r7, [sp, #0]
 8010b96:	b292      	uxth	r2, r2
 8010b98:	9e01      	ldr	r6, [sp, #4]
 8010b9a:	18ac      	adds	r4, r5, r2
 8010b9c:	1aaa      	subs	r2, r5, r2
 8010b9e:	53bc      	strh	r4, [r7, r6]
 8010ba0:	8042      	strh	r2, [r0, #2]
 8010ba2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8010ba4:	18c9      	adds	r1, r1, r3
 8010ba6:	4694      	mov	ip, r2
 8010ba8:	9b04      	ldr	r3, [sp, #16]
 8010baa:	8001      	strh	r1, [r0, #0]
 8010bac:	4463      	add	r3, ip
 8010bae:	9a02      	ldr	r2, [sp, #8]
 8010bb0:	0019      	movs	r1, r3
 8010bb2:	9304      	str	r3, [sp, #16]
 8010bb4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010bb6:	4694      	mov	ip, r2
 8010bb8:	001c      	movs	r4, r3
 8010bba:	003b      	movs	r3, r7
 8010bbc:	4463      	add	r3, ip
 8010bbe:	9300      	str	r3, [sp, #0]
 8010bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bc2:	4464      	add	r4, ip
 8010bc4:	941c      	str	r4, [sp, #112]	@ 0x70
 8010bc6:	4460      	add	r0, ip
 8010bc8:	001a      	movs	r2, r3
 8010bca:	428a      	cmp	r2, r1
 8010bcc:	d364      	bcc.n	8010c98 <arm_radix4_butterfly_inverse_q15+0x6e4>
 8010bce:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	5e9d      	ldrsh	r5, [r3, r2]
 8010bd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010bd6:	5e99      	ldrsh	r1, [r3, r2]
 8010bd8:	186b      	adds	r3, r5, r1
 8010bda:	469c      	mov	ip, r3
 8010bdc:	455b      	cmp	r3, fp
 8010bde:	dd00      	ble.n	8010be2 <arm_radix4_butterfly_inverse_q15+0x62e>
 8010be0:	4b37      	ldr	r3, [pc, #220]	@ (8010cc0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8010be2:	46e0      	mov	r8, ip
 8010be4:	45d4      	cmp	ip, sl
 8010be6:	da01      	bge.n	8010bec <arm_radix4_butterfly_inverse_q15+0x638>
 8010be8:	4a36      	ldr	r2, [pc, #216]	@ (8010cc4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8010bea:	4690      	mov	r8, r2
 8010bec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010bee:	9e00      	ldr	r6, [sp, #0]
 8010bf0:	2402      	movs	r4, #2
 8010bf2:	5f14      	ldrsh	r4, [r2, r4]
 8010bf4:	9a01      	ldr	r2, [sp, #4]
 8010bf6:	5eb2      	ldrsh	r2, [r6, r2]
 8010bf8:	18a7      	adds	r7, r4, r2
 8010bfa:	9708      	str	r7, [sp, #32]
 8010bfc:	455f      	cmp	r7, fp
 8010bfe:	dd01      	ble.n	8010c04 <arm_radix4_butterfly_inverse_q15+0x650>
 8010c00:	4e2f      	ldr	r6, [pc, #188]	@ (8010cc0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8010c02:	9608      	str	r6, [sp, #32]
 8010c04:	9707      	str	r7, [sp, #28]
 8010c06:	4557      	cmp	r7, sl
 8010c08:	da01      	bge.n	8010c0e <arm_radix4_butterfly_inverse_q15+0x65a>
 8010c0a:	4e2e      	ldr	r6, [pc, #184]	@ (8010cc4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8010c0c:	9607      	str	r6, [sp, #28]
 8010c0e:	1a69      	subs	r1, r5, r1
 8010c10:	9106      	str	r1, [sp, #24]
 8010c12:	4559      	cmp	r1, fp
 8010c14:	dd01      	ble.n	8010c1a <arm_radix4_butterfly_inverse_q15+0x666>
 8010c16:	4d2a      	ldr	r5, [pc, #168]	@ (8010cc0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8010c18:	9506      	str	r5, [sp, #24]
 8010c1a:	9105      	str	r1, [sp, #20]
 8010c1c:	4551      	cmp	r1, sl
 8010c1e:	da01      	bge.n	8010c24 <arm_radix4_butterfly_inverse_q15+0x670>
 8010c20:	4d28      	ldr	r5, [pc, #160]	@ (8010cc4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8010c22:	9505      	str	r5, [sp, #20]
 8010c24:	1aa2      	subs	r2, r4, r2
 8010c26:	920c      	str	r2, [sp, #48]	@ 0x30
 8010c28:	455a      	cmp	r2, fp
 8010c2a:	dd01      	ble.n	8010c30 <arm_radix4_butterfly_inverse_q15+0x67c>
 8010c2c:	4c24      	ldr	r4, [pc, #144]	@ (8010cc0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8010c2e:	940c      	str	r4, [sp, #48]	@ 0x30
 8010c30:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c32:	4552      	cmp	r2, sl
 8010c34:	da01      	bge.n	8010c3a <arm_radix4_butterfly_inverse_q15+0x686>
 8010c36:	4c23      	ldr	r4, [pc, #140]	@ (8010cc4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8010c38:	9409      	str	r4, [sp, #36]	@ 0x24
 8010c3a:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8010c3c:	9d01      	ldr	r5, [sp, #4]
 8010c3e:	5f65      	ldrsh	r5, [r4, r5]
 8010c40:	2600      	movs	r6, #0
 8010c42:	5f84      	ldrsh	r4, [r0, r6]
 8010c44:	192d      	adds	r5, r5, r4
 8010c46:	950a      	str	r5, [sp, #40]	@ 0x28
 8010c48:	455d      	cmp	r5, fp
 8010c4a:	dd01      	ble.n	8010c50 <arm_radix4_butterfly_inverse_q15+0x69c>
 8010c4c:	4c1c      	ldr	r4, [pc, #112]	@ (8010cc0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8010c4e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010c50:	950b      	str	r5, [sp, #44]	@ 0x2c
 8010c52:	4555      	cmp	r5, sl
 8010c54:	da01      	bge.n	8010c5a <arm_radix4_butterfly_inverse_q15+0x6a6>
 8010c56:	4c1b      	ldr	r4, [pc, #108]	@ (8010cc4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8010c58:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010c5a:	9c00      	ldr	r4, [sp, #0]
 8010c5c:	2600      	movs	r6, #0
 8010c5e:	5fa4      	ldrsh	r4, [r4, r6]
 8010c60:	46a1      	mov	r9, r4
 8010c62:	2602      	movs	r6, #2
 8010c64:	5f84      	ldrsh	r4, [r0, r6]
 8010c66:	444c      	add	r4, r9
 8010c68:	46a1      	mov	r9, r4
 8010c6a:	455c      	cmp	r4, fp
 8010c6c:	dd01      	ble.n	8010c72 <arm_radix4_butterfly_inverse_q15+0x6be>
 8010c6e:	4e14      	ldr	r6, [pc, #80]	@ (8010cc0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8010c70:	46b1      	mov	r9, r6
 8010c72:	9403      	str	r4, [sp, #12]
 8010c74:	4554      	cmp	r4, sl
 8010c76:	da01      	bge.n	8010c7c <arm_radix4_butterfly_inverse_q15+0x6c8>
 8010c78:	4e12      	ldr	r6, [pc, #72]	@ (8010cc4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8010c7a:	9603      	str	r6, [sp, #12]
 8010c7c:	4666      	mov	r6, ip
 8010c7e:	2e00      	cmp	r6, #0
 8010c80:	dd00      	ble.n	8010c84 <arm_radix4_butterfly_inverse_q15+0x6d0>
 8010c82:	e71d      	b.n	8010ac0 <arm_radix4_butterfly_inverse_q15+0x50c>
 8010c84:	4643      	mov	r3, r8
 8010c86:	b21b      	sxth	r3, r3
 8010c88:	105b      	asrs	r3, r3, #1
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	469c      	mov	ip, r3
 8010c8e:	2d00      	cmp	r5, #0
 8010c90:	dd00      	ble.n	8010c94 <arm_radix4_butterfly_inverse_q15+0x6e0>
 8010c92:	e71c      	b.n	8010ace <arm_radix4_butterfly_inverse_q15+0x51a>
 8010c94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c96:	e71b      	b.n	8010ad0 <arm_radix4_butterfly_inverse_q15+0x51c>
 8010c98:	b027      	add	sp, #156	@ 0x9c
 8010c9a:	bc3c      	pop	{r2, r3, r4, r5}
 8010c9c:	4690      	mov	r8, r2
 8010c9e:	4699      	mov	r9, r3
 8010ca0:	46a2      	mov	sl, r4
 8010ca2:	46ab      	mov	fp, r5
 8010ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ca6:	464a      	mov	r2, r9
 8010ca8:	e772      	b.n	8010b90 <arm_radix4_butterfly_inverse_q15+0x5dc>
 8010caa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010cac:	e769      	b.n	8010b82 <arm_radix4_butterfly_inverse_q15+0x5ce>
 8010cae:	003b      	movs	r3, r7
 8010cb0:	e75c      	b.n	8010b6c <arm_radix4_butterfly_inverse_q15+0x5b8>
 8010cb2:	9905      	ldr	r1, [sp, #20]
 8010cb4:	468c      	mov	ip, r1
 8010cb6:	e752      	b.n	8010b5e <arm_radix4_butterfly_inverse_q15+0x5aa>
 8010cb8:	9b03      	ldr	r3, [sp, #12]
 8010cba:	e71b      	b.n	8010af4 <arm_radix4_butterfly_inverse_q15+0x540>
 8010cbc:	9b07      	ldr	r3, [sp, #28]
 8010cbe:	e712      	b.n	8010ae6 <arm_radix4_butterfly_inverse_q15+0x532>
 8010cc0:	00007fff 	.word	0x00007fff
 8010cc4:	ffff8000 	.word	0xffff8000

08010cc8 <__cvt>:
 8010cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cca:	001f      	movs	r7, r3
 8010ccc:	2300      	movs	r3, #0
 8010cce:	0016      	movs	r6, r2
 8010cd0:	b08b      	sub	sp, #44	@ 0x2c
 8010cd2:	429f      	cmp	r7, r3
 8010cd4:	da04      	bge.n	8010ce0 <__cvt+0x18>
 8010cd6:	2180      	movs	r1, #128	@ 0x80
 8010cd8:	0609      	lsls	r1, r1, #24
 8010cda:	187b      	adds	r3, r7, r1
 8010cdc:	001f      	movs	r7, r3
 8010cde:	232d      	movs	r3, #45	@ 0x2d
 8010ce0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010ce2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010ce4:	7013      	strb	r3, [r2, #0]
 8010ce6:	2320      	movs	r3, #32
 8010ce8:	2203      	movs	r2, #3
 8010cea:	439d      	bics	r5, r3
 8010cec:	2d46      	cmp	r5, #70	@ 0x46
 8010cee:	d007      	beq.n	8010d00 <__cvt+0x38>
 8010cf0:	002b      	movs	r3, r5
 8010cf2:	3b45      	subs	r3, #69	@ 0x45
 8010cf4:	4259      	negs	r1, r3
 8010cf6:	414b      	adcs	r3, r1
 8010cf8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010cfa:	3a01      	subs	r2, #1
 8010cfc:	18cb      	adds	r3, r1, r3
 8010cfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8010d00:	ab09      	add	r3, sp, #36	@ 0x24
 8010d02:	9304      	str	r3, [sp, #16]
 8010d04:	ab08      	add	r3, sp, #32
 8010d06:	9303      	str	r3, [sp, #12]
 8010d08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d0a:	9200      	str	r2, [sp, #0]
 8010d0c:	9302      	str	r3, [sp, #8]
 8010d0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010d10:	0032      	movs	r2, r6
 8010d12:	9301      	str	r3, [sp, #4]
 8010d14:	003b      	movs	r3, r7
 8010d16:	f000 fefb 	bl	8011b10 <_dtoa_r>
 8010d1a:	0004      	movs	r4, r0
 8010d1c:	2d47      	cmp	r5, #71	@ 0x47
 8010d1e:	d11b      	bne.n	8010d58 <__cvt+0x90>
 8010d20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010d22:	07db      	lsls	r3, r3, #31
 8010d24:	d511      	bpl.n	8010d4a <__cvt+0x82>
 8010d26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010d28:	18c3      	adds	r3, r0, r3
 8010d2a:	9307      	str	r3, [sp, #28]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	2300      	movs	r3, #0
 8010d30:	0030      	movs	r0, r6
 8010d32:	0039      	movs	r1, r7
 8010d34:	f7ef fbb2 	bl	800049c <__aeabi_dcmpeq>
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d001      	beq.n	8010d40 <__cvt+0x78>
 8010d3c:	9b07      	ldr	r3, [sp, #28]
 8010d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d40:	2230      	movs	r2, #48	@ 0x30
 8010d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d44:	9907      	ldr	r1, [sp, #28]
 8010d46:	428b      	cmp	r3, r1
 8010d48:	d320      	bcc.n	8010d8c <__cvt+0xc4>
 8010d4a:	0020      	movs	r0, r4
 8010d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d4e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010d50:	1b1b      	subs	r3, r3, r4
 8010d52:	6013      	str	r3, [r2, #0]
 8010d54:	b00b      	add	sp, #44	@ 0x2c
 8010d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010d5a:	18c3      	adds	r3, r0, r3
 8010d5c:	9307      	str	r3, [sp, #28]
 8010d5e:	2d46      	cmp	r5, #70	@ 0x46
 8010d60:	d1e4      	bne.n	8010d2c <__cvt+0x64>
 8010d62:	7803      	ldrb	r3, [r0, #0]
 8010d64:	2b30      	cmp	r3, #48	@ 0x30
 8010d66:	d10c      	bne.n	8010d82 <__cvt+0xba>
 8010d68:	2200      	movs	r2, #0
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	0030      	movs	r0, r6
 8010d6e:	0039      	movs	r1, r7
 8010d70:	f7ef fb94 	bl	800049c <__aeabi_dcmpeq>
 8010d74:	2800      	cmp	r0, #0
 8010d76:	d104      	bne.n	8010d82 <__cvt+0xba>
 8010d78:	2301      	movs	r3, #1
 8010d7a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8010d7c:	1a9b      	subs	r3, r3, r2
 8010d7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010d80:	6013      	str	r3, [r2, #0]
 8010d82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010d84:	9a07      	ldr	r2, [sp, #28]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	18d3      	adds	r3, r2, r3
 8010d8a:	e7ce      	b.n	8010d2a <__cvt+0x62>
 8010d8c:	1c59      	adds	r1, r3, #1
 8010d8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010d90:	701a      	strb	r2, [r3, #0]
 8010d92:	e7d6      	b.n	8010d42 <__cvt+0x7a>

08010d94 <__exponent>:
 8010d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d96:	232b      	movs	r3, #43	@ 0x2b
 8010d98:	0005      	movs	r5, r0
 8010d9a:	000c      	movs	r4, r1
 8010d9c:	b085      	sub	sp, #20
 8010d9e:	7002      	strb	r2, [r0, #0]
 8010da0:	2900      	cmp	r1, #0
 8010da2:	da01      	bge.n	8010da8 <__exponent+0x14>
 8010da4:	424c      	negs	r4, r1
 8010da6:	3302      	adds	r3, #2
 8010da8:	706b      	strb	r3, [r5, #1]
 8010daa:	2c09      	cmp	r4, #9
 8010dac:	dd2c      	ble.n	8010e08 <__exponent+0x74>
 8010dae:	ab02      	add	r3, sp, #8
 8010db0:	1dde      	adds	r6, r3, #7
 8010db2:	0020      	movs	r0, r4
 8010db4:	210a      	movs	r1, #10
 8010db6:	f7ef fb5b 	bl	8000470 <__aeabi_idivmod>
 8010dba:	0037      	movs	r7, r6
 8010dbc:	3130      	adds	r1, #48	@ 0x30
 8010dbe:	3e01      	subs	r6, #1
 8010dc0:	0020      	movs	r0, r4
 8010dc2:	7031      	strb	r1, [r6, #0]
 8010dc4:	210a      	movs	r1, #10
 8010dc6:	9401      	str	r4, [sp, #4]
 8010dc8:	f7ef fa6c 	bl	80002a4 <__divsi3>
 8010dcc:	9b01      	ldr	r3, [sp, #4]
 8010dce:	0004      	movs	r4, r0
 8010dd0:	2b63      	cmp	r3, #99	@ 0x63
 8010dd2:	dcee      	bgt.n	8010db2 <__exponent+0x1e>
 8010dd4:	1eba      	subs	r2, r7, #2
 8010dd6:	1ca8      	adds	r0, r5, #2
 8010dd8:	0001      	movs	r1, r0
 8010dda:	0013      	movs	r3, r2
 8010ddc:	3430      	adds	r4, #48	@ 0x30
 8010dde:	7014      	strb	r4, [r2, #0]
 8010de0:	ac02      	add	r4, sp, #8
 8010de2:	3407      	adds	r4, #7
 8010de4:	429c      	cmp	r4, r3
 8010de6:	d80a      	bhi.n	8010dfe <__exponent+0x6a>
 8010de8:	2300      	movs	r3, #0
 8010dea:	42a2      	cmp	r2, r4
 8010dec:	d803      	bhi.n	8010df6 <__exponent+0x62>
 8010dee:	3309      	adds	r3, #9
 8010df0:	aa02      	add	r2, sp, #8
 8010df2:	189b      	adds	r3, r3, r2
 8010df4:	1bdb      	subs	r3, r3, r7
 8010df6:	18c0      	adds	r0, r0, r3
 8010df8:	1b40      	subs	r0, r0, r5
 8010dfa:	b005      	add	sp, #20
 8010dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dfe:	781c      	ldrb	r4, [r3, #0]
 8010e00:	3301      	adds	r3, #1
 8010e02:	700c      	strb	r4, [r1, #0]
 8010e04:	3101      	adds	r1, #1
 8010e06:	e7eb      	b.n	8010de0 <__exponent+0x4c>
 8010e08:	2330      	movs	r3, #48	@ 0x30
 8010e0a:	18e4      	adds	r4, r4, r3
 8010e0c:	70ab      	strb	r3, [r5, #2]
 8010e0e:	1d28      	adds	r0, r5, #4
 8010e10:	70ec      	strb	r4, [r5, #3]
 8010e12:	e7f1      	b.n	8010df8 <__exponent+0x64>

08010e14 <_printf_float>:
 8010e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e16:	b097      	sub	sp, #92	@ 0x5c
 8010e18:	000d      	movs	r5, r1
 8010e1a:	920a      	str	r2, [sp, #40]	@ 0x28
 8010e1c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8010e1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e20:	9009      	str	r0, [sp, #36]	@ 0x24
 8010e22:	f000 fd5d 	bl	80118e0 <_localeconv_r>
 8010e26:	6803      	ldr	r3, [r0, #0]
 8010e28:	0018      	movs	r0, r3
 8010e2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8010e2c:	f7ef f994 	bl	8000158 <strlen>
 8010e30:	2300      	movs	r3, #0
 8010e32:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010e34:	9314      	str	r3, [sp, #80]	@ 0x50
 8010e36:	7e2b      	ldrb	r3, [r5, #24]
 8010e38:	2207      	movs	r2, #7
 8010e3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010e3c:	682b      	ldr	r3, [r5, #0]
 8010e3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010e40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010e42:	6823      	ldr	r3, [r4, #0]
 8010e44:	05c9      	lsls	r1, r1, #23
 8010e46:	d545      	bpl.n	8010ed4 <_printf_float+0xc0>
 8010e48:	189b      	adds	r3, r3, r2
 8010e4a:	4393      	bics	r3, r2
 8010e4c:	001a      	movs	r2, r3
 8010e4e:	3208      	adds	r2, #8
 8010e50:	6022      	str	r2, [r4, #0]
 8010e52:	2201      	movs	r2, #1
 8010e54:	681e      	ldr	r6, [r3, #0]
 8010e56:	685f      	ldr	r7, [r3, #4]
 8010e58:	007b      	lsls	r3, r7, #1
 8010e5a:	085b      	lsrs	r3, r3, #1
 8010e5c:	9311      	str	r3, [sp, #68]	@ 0x44
 8010e5e:	9610      	str	r6, [sp, #64]	@ 0x40
 8010e60:	64ae      	str	r6, [r5, #72]	@ 0x48
 8010e62:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8010e64:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010e66:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010e68:	4ba7      	ldr	r3, [pc, #668]	@ (8011108 <_printf_float+0x2f4>)
 8010e6a:	4252      	negs	r2, r2
 8010e6c:	f7f2 fa0e 	bl	800328c <__aeabi_dcmpun>
 8010e70:	2800      	cmp	r0, #0
 8010e72:	d131      	bne.n	8010ed8 <_printf_float+0xc4>
 8010e74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010e76:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010e78:	2201      	movs	r2, #1
 8010e7a:	4ba3      	ldr	r3, [pc, #652]	@ (8011108 <_printf_float+0x2f4>)
 8010e7c:	4252      	negs	r2, r2
 8010e7e:	f7ef fb1d 	bl	80004bc <__aeabi_dcmple>
 8010e82:	2800      	cmp	r0, #0
 8010e84:	d128      	bne.n	8010ed8 <_printf_float+0xc4>
 8010e86:	2200      	movs	r2, #0
 8010e88:	2300      	movs	r3, #0
 8010e8a:	0030      	movs	r0, r6
 8010e8c:	0039      	movs	r1, r7
 8010e8e:	f7ef fb0b 	bl	80004a8 <__aeabi_dcmplt>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d003      	beq.n	8010e9e <_printf_float+0x8a>
 8010e96:	002b      	movs	r3, r5
 8010e98:	222d      	movs	r2, #45	@ 0x2d
 8010e9a:	3343      	adds	r3, #67	@ 0x43
 8010e9c:	701a      	strb	r2, [r3, #0]
 8010e9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ea0:	4f9a      	ldr	r7, [pc, #616]	@ (801110c <_printf_float+0x2f8>)
 8010ea2:	2b47      	cmp	r3, #71	@ 0x47
 8010ea4:	d900      	bls.n	8010ea8 <_printf_float+0x94>
 8010ea6:	4f9a      	ldr	r7, [pc, #616]	@ (8011110 <_printf_float+0x2fc>)
 8010ea8:	2303      	movs	r3, #3
 8010eaa:	2400      	movs	r4, #0
 8010eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010eae:	612b      	str	r3, [r5, #16]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	439a      	bics	r2, r3
 8010eb4:	602a      	str	r2, [r5, #0]
 8010eb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010eb8:	0029      	movs	r1, r5
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ebe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ec0:	aa15      	add	r2, sp, #84	@ 0x54
 8010ec2:	f000 f9e5 	bl	8011290 <_printf_common>
 8010ec6:	3001      	adds	r0, #1
 8010ec8:	d000      	beq.n	8010ecc <_printf_float+0xb8>
 8010eca:	e09f      	b.n	801100c <_printf_float+0x1f8>
 8010ecc:	2001      	movs	r0, #1
 8010ece:	4240      	negs	r0, r0
 8010ed0:	b017      	add	sp, #92	@ 0x5c
 8010ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ed4:	3307      	adds	r3, #7
 8010ed6:	e7b8      	b.n	8010e4a <_printf_float+0x36>
 8010ed8:	0032      	movs	r2, r6
 8010eda:	003b      	movs	r3, r7
 8010edc:	0030      	movs	r0, r6
 8010ede:	0039      	movs	r1, r7
 8010ee0:	f7f2 f9d4 	bl	800328c <__aeabi_dcmpun>
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	d00b      	beq.n	8010f00 <_printf_float+0xec>
 8010ee8:	2f00      	cmp	r7, #0
 8010eea:	da03      	bge.n	8010ef4 <_printf_float+0xe0>
 8010eec:	002b      	movs	r3, r5
 8010eee:	222d      	movs	r2, #45	@ 0x2d
 8010ef0:	3343      	adds	r3, #67	@ 0x43
 8010ef2:	701a      	strb	r2, [r3, #0]
 8010ef4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ef6:	4f87      	ldr	r7, [pc, #540]	@ (8011114 <_printf_float+0x300>)
 8010ef8:	2b47      	cmp	r3, #71	@ 0x47
 8010efa:	d9d5      	bls.n	8010ea8 <_printf_float+0x94>
 8010efc:	4f86      	ldr	r7, [pc, #536]	@ (8011118 <_printf_float+0x304>)
 8010efe:	e7d3      	b.n	8010ea8 <_printf_float+0x94>
 8010f00:	2220      	movs	r2, #32
 8010f02:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8010f04:	686b      	ldr	r3, [r5, #4]
 8010f06:	4394      	bics	r4, r2
 8010f08:	1c5a      	adds	r2, r3, #1
 8010f0a:	d146      	bne.n	8010f9a <_printf_float+0x186>
 8010f0c:	3307      	adds	r3, #7
 8010f0e:	606b      	str	r3, [r5, #4]
 8010f10:	2380      	movs	r3, #128	@ 0x80
 8010f12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f14:	00db      	lsls	r3, r3, #3
 8010f16:	4313      	orrs	r3, r2
 8010f18:	2200      	movs	r2, #0
 8010f1a:	602b      	str	r3, [r5, #0]
 8010f1c:	9206      	str	r2, [sp, #24]
 8010f1e:	aa14      	add	r2, sp, #80	@ 0x50
 8010f20:	9205      	str	r2, [sp, #20]
 8010f22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010f24:	a90a      	add	r1, sp, #40	@ 0x28
 8010f26:	9204      	str	r2, [sp, #16]
 8010f28:	aa13      	add	r2, sp, #76	@ 0x4c
 8010f2a:	9203      	str	r2, [sp, #12]
 8010f2c:	2223      	movs	r2, #35	@ 0x23
 8010f2e:	1852      	adds	r2, r2, r1
 8010f30:	9202      	str	r2, [sp, #8]
 8010f32:	9301      	str	r3, [sp, #4]
 8010f34:	686b      	ldr	r3, [r5, #4]
 8010f36:	0032      	movs	r2, r6
 8010f38:	9300      	str	r3, [sp, #0]
 8010f3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f3c:	003b      	movs	r3, r7
 8010f3e:	f7ff fec3 	bl	8010cc8 <__cvt>
 8010f42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010f44:	0007      	movs	r7, r0
 8010f46:	2c47      	cmp	r4, #71	@ 0x47
 8010f48:	d12d      	bne.n	8010fa6 <_printf_float+0x192>
 8010f4a:	1cd3      	adds	r3, r2, #3
 8010f4c:	db02      	blt.n	8010f54 <_printf_float+0x140>
 8010f4e:	686b      	ldr	r3, [r5, #4]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	dd48      	ble.n	8010fe6 <_printf_float+0x1d2>
 8010f54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f56:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010f58:	3b02      	subs	r3, #2
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010f5e:	0028      	movs	r0, r5
 8010f60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010f62:	3901      	subs	r1, #1
 8010f64:	3050      	adds	r0, #80	@ 0x50
 8010f66:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010f68:	f7ff ff14 	bl	8010d94 <__exponent>
 8010f6c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010f6e:	0004      	movs	r4, r0
 8010f70:	1813      	adds	r3, r2, r0
 8010f72:	612b      	str	r3, [r5, #16]
 8010f74:	2a01      	cmp	r2, #1
 8010f76:	dc02      	bgt.n	8010f7e <_printf_float+0x16a>
 8010f78:	682a      	ldr	r2, [r5, #0]
 8010f7a:	07d2      	lsls	r2, r2, #31
 8010f7c:	d501      	bpl.n	8010f82 <_printf_float+0x16e>
 8010f7e:	3301      	adds	r3, #1
 8010f80:	612b      	str	r3, [r5, #16]
 8010f82:	2323      	movs	r3, #35	@ 0x23
 8010f84:	aa0a      	add	r2, sp, #40	@ 0x28
 8010f86:	189b      	adds	r3, r3, r2
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d100      	bne.n	8010f90 <_printf_float+0x17c>
 8010f8e:	e792      	b.n	8010eb6 <_printf_float+0xa2>
 8010f90:	002b      	movs	r3, r5
 8010f92:	222d      	movs	r2, #45	@ 0x2d
 8010f94:	3343      	adds	r3, #67	@ 0x43
 8010f96:	701a      	strb	r2, [r3, #0]
 8010f98:	e78d      	b.n	8010eb6 <_printf_float+0xa2>
 8010f9a:	2c47      	cmp	r4, #71	@ 0x47
 8010f9c:	d1b8      	bne.n	8010f10 <_printf_float+0xfc>
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d1b6      	bne.n	8010f10 <_printf_float+0xfc>
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	e7b3      	b.n	8010f0e <_printf_float+0xfa>
 8010fa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010fa8:	0011      	movs	r1, r2
 8010faa:	2b65      	cmp	r3, #101	@ 0x65
 8010fac:	d9d7      	bls.n	8010f5e <_printf_float+0x14a>
 8010fae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010fb0:	2b66      	cmp	r3, #102	@ 0x66
 8010fb2:	d11a      	bne.n	8010fea <_printf_float+0x1d6>
 8010fb4:	686b      	ldr	r3, [r5, #4]
 8010fb6:	2a00      	cmp	r2, #0
 8010fb8:	dd09      	ble.n	8010fce <_printf_float+0x1ba>
 8010fba:	612a      	str	r2, [r5, #16]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d102      	bne.n	8010fc6 <_printf_float+0x1b2>
 8010fc0:	6829      	ldr	r1, [r5, #0]
 8010fc2:	07c9      	lsls	r1, r1, #31
 8010fc4:	d50b      	bpl.n	8010fde <_printf_float+0x1ca>
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	189b      	adds	r3, r3, r2
 8010fca:	612b      	str	r3, [r5, #16]
 8010fcc:	e007      	b.n	8010fde <_printf_float+0x1ca>
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d103      	bne.n	8010fda <_printf_float+0x1c6>
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	6829      	ldr	r1, [r5, #0]
 8010fd6:	4211      	tst	r1, r2
 8010fd8:	d000      	beq.n	8010fdc <_printf_float+0x1c8>
 8010fda:	1c9a      	adds	r2, r3, #2
 8010fdc:	612a      	str	r2, [r5, #16]
 8010fde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010fe0:	2400      	movs	r4, #0
 8010fe2:	65ab      	str	r3, [r5, #88]	@ 0x58
 8010fe4:	e7cd      	b.n	8010f82 <_printf_float+0x16e>
 8010fe6:	2367      	movs	r3, #103	@ 0x67
 8010fe8:	930c      	str	r3, [sp, #48]	@ 0x30
 8010fea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010fec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010fee:	4299      	cmp	r1, r3
 8010ff0:	db06      	blt.n	8011000 <_printf_float+0x1ec>
 8010ff2:	682b      	ldr	r3, [r5, #0]
 8010ff4:	6129      	str	r1, [r5, #16]
 8010ff6:	07db      	lsls	r3, r3, #31
 8010ff8:	d5f1      	bpl.n	8010fde <_printf_float+0x1ca>
 8010ffa:	3101      	adds	r1, #1
 8010ffc:	6129      	str	r1, [r5, #16]
 8010ffe:	e7ee      	b.n	8010fde <_printf_float+0x1ca>
 8011000:	2201      	movs	r2, #1
 8011002:	2900      	cmp	r1, #0
 8011004:	dce0      	bgt.n	8010fc8 <_printf_float+0x1b4>
 8011006:	1892      	adds	r2, r2, r2
 8011008:	1a52      	subs	r2, r2, r1
 801100a:	e7dd      	b.n	8010fc8 <_printf_float+0x1b4>
 801100c:	682a      	ldr	r2, [r5, #0]
 801100e:	0553      	lsls	r3, r2, #21
 8011010:	d408      	bmi.n	8011024 <_printf_float+0x210>
 8011012:	692b      	ldr	r3, [r5, #16]
 8011014:	003a      	movs	r2, r7
 8011016:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011018:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801101a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801101c:	47a0      	blx	r4
 801101e:	3001      	adds	r0, #1
 8011020:	d129      	bne.n	8011076 <_printf_float+0x262>
 8011022:	e753      	b.n	8010ecc <_printf_float+0xb8>
 8011024:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011026:	2b65      	cmp	r3, #101	@ 0x65
 8011028:	d800      	bhi.n	801102c <_printf_float+0x218>
 801102a:	e0da      	b.n	80111e2 <_printf_float+0x3ce>
 801102c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801102e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011030:	2200      	movs	r2, #0
 8011032:	2300      	movs	r3, #0
 8011034:	f7ef fa32 	bl	800049c <__aeabi_dcmpeq>
 8011038:	2800      	cmp	r0, #0
 801103a:	d033      	beq.n	80110a4 <_printf_float+0x290>
 801103c:	2301      	movs	r3, #1
 801103e:	4a37      	ldr	r2, [pc, #220]	@ (801111c <_printf_float+0x308>)
 8011040:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011044:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8011046:	47a0      	blx	r4
 8011048:	3001      	adds	r0, #1
 801104a:	d100      	bne.n	801104e <_printf_float+0x23a>
 801104c:	e73e      	b.n	8010ecc <_printf_float+0xb8>
 801104e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8011050:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011052:	42b3      	cmp	r3, r6
 8011054:	db02      	blt.n	801105c <_printf_float+0x248>
 8011056:	682b      	ldr	r3, [r5, #0]
 8011058:	07db      	lsls	r3, r3, #31
 801105a:	d50c      	bpl.n	8011076 <_printf_float+0x262>
 801105c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801105e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011060:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011062:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011064:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011066:	47a0      	blx	r4
 8011068:	2400      	movs	r4, #0
 801106a:	3001      	adds	r0, #1
 801106c:	d100      	bne.n	8011070 <_printf_float+0x25c>
 801106e:	e72d      	b.n	8010ecc <_printf_float+0xb8>
 8011070:	1e73      	subs	r3, r6, #1
 8011072:	42a3      	cmp	r3, r4
 8011074:	dc0a      	bgt.n	801108c <_printf_float+0x278>
 8011076:	682b      	ldr	r3, [r5, #0]
 8011078:	079b      	lsls	r3, r3, #30
 801107a:	d500      	bpl.n	801107e <_printf_float+0x26a>
 801107c:	e105      	b.n	801128a <_printf_float+0x476>
 801107e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011080:	68e8      	ldr	r0, [r5, #12]
 8011082:	4298      	cmp	r0, r3
 8011084:	db00      	blt.n	8011088 <_printf_float+0x274>
 8011086:	e723      	b.n	8010ed0 <_printf_float+0xbc>
 8011088:	0018      	movs	r0, r3
 801108a:	e721      	b.n	8010ed0 <_printf_float+0xbc>
 801108c:	002a      	movs	r2, r5
 801108e:	2301      	movs	r3, #1
 8011090:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011094:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011096:	321a      	adds	r2, #26
 8011098:	47b8      	blx	r7
 801109a:	3001      	adds	r0, #1
 801109c:	d100      	bne.n	80110a0 <_printf_float+0x28c>
 801109e:	e715      	b.n	8010ecc <_printf_float+0xb8>
 80110a0:	3401      	adds	r4, #1
 80110a2:	e7e5      	b.n	8011070 <_printf_float+0x25c>
 80110a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	dc3a      	bgt.n	8011120 <_printf_float+0x30c>
 80110aa:	2301      	movs	r3, #1
 80110ac:	4a1b      	ldr	r2, [pc, #108]	@ (801111c <_printf_float+0x308>)
 80110ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80110b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80110b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80110b4:	47a0      	blx	r4
 80110b6:	3001      	adds	r0, #1
 80110b8:	d100      	bne.n	80110bc <_printf_float+0x2a8>
 80110ba:	e707      	b.n	8010ecc <_printf_float+0xb8>
 80110bc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80110be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80110c0:	4333      	orrs	r3, r6
 80110c2:	d102      	bne.n	80110ca <_printf_float+0x2b6>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	07db      	lsls	r3, r3, #31
 80110c8:	d5d5      	bpl.n	8011076 <_printf_float+0x262>
 80110ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80110ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80110d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80110d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80110d4:	47a0      	blx	r4
 80110d6:	2300      	movs	r3, #0
 80110d8:	3001      	adds	r0, #1
 80110da:	d100      	bne.n	80110de <_printf_float+0x2ca>
 80110dc:	e6f6      	b.n	8010ecc <_printf_float+0xb8>
 80110de:	930c      	str	r3, [sp, #48]	@ 0x30
 80110e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80110e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80110e4:	425b      	negs	r3, r3
 80110e6:	4293      	cmp	r3, r2
 80110e8:	dc01      	bgt.n	80110ee <_printf_float+0x2da>
 80110ea:	0033      	movs	r3, r6
 80110ec:	e792      	b.n	8011014 <_printf_float+0x200>
 80110ee:	002a      	movs	r2, r5
 80110f0:	2301      	movs	r3, #1
 80110f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80110f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80110f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80110f8:	321a      	adds	r2, #26
 80110fa:	47a0      	blx	r4
 80110fc:	3001      	adds	r0, #1
 80110fe:	d100      	bne.n	8011102 <_printf_float+0x2ee>
 8011100:	e6e4      	b.n	8010ecc <_printf_float+0xb8>
 8011102:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011104:	3301      	adds	r3, #1
 8011106:	e7ea      	b.n	80110de <_printf_float+0x2ca>
 8011108:	7fefffff 	.word	0x7fefffff
 801110c:	08026d80 	.word	0x08026d80
 8011110:	08026d84 	.word	0x08026d84
 8011114:	08026d88 	.word	0x08026d88
 8011118:	08026d8c 	.word	0x08026d8c
 801111c:	08026d90 	.word	0x08026d90
 8011120:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011122:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8011124:	930c      	str	r3, [sp, #48]	@ 0x30
 8011126:	429e      	cmp	r6, r3
 8011128:	dd00      	ble.n	801112c <_printf_float+0x318>
 801112a:	001e      	movs	r6, r3
 801112c:	2e00      	cmp	r6, #0
 801112e:	dc31      	bgt.n	8011194 <_printf_float+0x380>
 8011130:	43f3      	mvns	r3, r6
 8011132:	2400      	movs	r4, #0
 8011134:	17db      	asrs	r3, r3, #31
 8011136:	4033      	ands	r3, r6
 8011138:	930e      	str	r3, [sp, #56]	@ 0x38
 801113a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801113c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801113e:	1af3      	subs	r3, r6, r3
 8011140:	42a3      	cmp	r3, r4
 8011142:	dc30      	bgt.n	80111a6 <_printf_float+0x392>
 8011144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011146:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011148:	429a      	cmp	r2, r3
 801114a:	dc38      	bgt.n	80111be <_printf_float+0x3aa>
 801114c:	682b      	ldr	r3, [r5, #0]
 801114e:	07db      	lsls	r3, r3, #31
 8011150:	d435      	bmi.n	80111be <_printf_float+0x3aa>
 8011152:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8011154:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011156:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011158:	1b9b      	subs	r3, r3, r6
 801115a:	1b14      	subs	r4, r2, r4
 801115c:	429c      	cmp	r4, r3
 801115e:	dd00      	ble.n	8011162 <_printf_float+0x34e>
 8011160:	001c      	movs	r4, r3
 8011162:	2c00      	cmp	r4, #0
 8011164:	dc34      	bgt.n	80111d0 <_printf_float+0x3bc>
 8011166:	43e3      	mvns	r3, r4
 8011168:	2600      	movs	r6, #0
 801116a:	17db      	asrs	r3, r3, #31
 801116c:	401c      	ands	r4, r3
 801116e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011170:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	1b1b      	subs	r3, r3, r4
 8011176:	42b3      	cmp	r3, r6
 8011178:	dc00      	bgt.n	801117c <_printf_float+0x368>
 801117a:	e77c      	b.n	8011076 <_printf_float+0x262>
 801117c:	002a      	movs	r2, r5
 801117e:	2301      	movs	r3, #1
 8011180:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011184:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011186:	321a      	adds	r2, #26
 8011188:	47b8      	blx	r7
 801118a:	3001      	adds	r0, #1
 801118c:	d100      	bne.n	8011190 <_printf_float+0x37c>
 801118e:	e69d      	b.n	8010ecc <_printf_float+0xb8>
 8011190:	3601      	adds	r6, #1
 8011192:	e7ec      	b.n	801116e <_printf_float+0x35a>
 8011194:	0033      	movs	r3, r6
 8011196:	003a      	movs	r2, r7
 8011198:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801119a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801119c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801119e:	47a0      	blx	r4
 80111a0:	3001      	adds	r0, #1
 80111a2:	d1c5      	bne.n	8011130 <_printf_float+0x31c>
 80111a4:	e692      	b.n	8010ecc <_printf_float+0xb8>
 80111a6:	002a      	movs	r2, r5
 80111a8:	2301      	movs	r3, #1
 80111aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80111ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80111b0:	321a      	adds	r2, #26
 80111b2:	47b0      	blx	r6
 80111b4:	3001      	adds	r0, #1
 80111b6:	d100      	bne.n	80111ba <_printf_float+0x3a6>
 80111b8:	e688      	b.n	8010ecc <_printf_float+0xb8>
 80111ba:	3401      	adds	r4, #1
 80111bc:	e7bd      	b.n	801113a <_printf_float+0x326>
 80111be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80111c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80111c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80111c8:	47a0      	blx	r4
 80111ca:	3001      	adds	r0, #1
 80111cc:	d1c1      	bne.n	8011152 <_printf_float+0x33e>
 80111ce:	e67d      	b.n	8010ecc <_printf_float+0xb8>
 80111d0:	19ba      	adds	r2, r7, r6
 80111d2:	0023      	movs	r3, r4
 80111d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80111d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80111da:	47b0      	blx	r6
 80111dc:	3001      	adds	r0, #1
 80111de:	d1c2      	bne.n	8011166 <_printf_float+0x352>
 80111e0:	e674      	b.n	8010ecc <_printf_float+0xb8>
 80111e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80111e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	dc02      	bgt.n	80111f0 <_printf_float+0x3dc>
 80111ea:	2301      	movs	r3, #1
 80111ec:	421a      	tst	r2, r3
 80111ee:	d039      	beq.n	8011264 <_printf_float+0x450>
 80111f0:	2301      	movs	r3, #1
 80111f2:	003a      	movs	r2, r7
 80111f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80111f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80111fa:	47b0      	blx	r6
 80111fc:	3001      	adds	r0, #1
 80111fe:	d100      	bne.n	8011202 <_printf_float+0x3ee>
 8011200:	e664      	b.n	8010ecc <_printf_float+0xb8>
 8011202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011204:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011206:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011208:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801120a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801120c:	47b0      	blx	r6
 801120e:	3001      	adds	r0, #1
 8011210:	d100      	bne.n	8011214 <_printf_float+0x400>
 8011212:	e65b      	b.n	8010ecc <_printf_float+0xb8>
 8011214:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8011216:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801121a:	2200      	movs	r2, #0
 801121c:	3b01      	subs	r3, #1
 801121e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011220:	2300      	movs	r3, #0
 8011222:	f7ef f93b 	bl	800049c <__aeabi_dcmpeq>
 8011226:	2800      	cmp	r0, #0
 8011228:	d11a      	bne.n	8011260 <_printf_float+0x44c>
 801122a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801122c:	1c7a      	adds	r2, r7, #1
 801122e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011230:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011232:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011234:	47b0      	blx	r6
 8011236:	3001      	adds	r0, #1
 8011238:	d10e      	bne.n	8011258 <_printf_float+0x444>
 801123a:	e647      	b.n	8010ecc <_printf_float+0xb8>
 801123c:	002a      	movs	r2, r5
 801123e:	2301      	movs	r3, #1
 8011240:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011244:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011246:	321a      	adds	r2, #26
 8011248:	47b8      	blx	r7
 801124a:	3001      	adds	r0, #1
 801124c:	d100      	bne.n	8011250 <_printf_float+0x43c>
 801124e:	e63d      	b.n	8010ecc <_printf_float+0xb8>
 8011250:	3601      	adds	r6, #1
 8011252:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011254:	429e      	cmp	r6, r3
 8011256:	dbf1      	blt.n	801123c <_printf_float+0x428>
 8011258:	002a      	movs	r2, r5
 801125a:	0023      	movs	r3, r4
 801125c:	3250      	adds	r2, #80	@ 0x50
 801125e:	e6da      	b.n	8011016 <_printf_float+0x202>
 8011260:	2600      	movs	r6, #0
 8011262:	e7f6      	b.n	8011252 <_printf_float+0x43e>
 8011264:	003a      	movs	r2, r7
 8011266:	e7e2      	b.n	801122e <_printf_float+0x41a>
 8011268:	002a      	movs	r2, r5
 801126a:	2301      	movs	r3, #1
 801126c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801126e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011270:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011272:	3219      	adds	r2, #25
 8011274:	47b0      	blx	r6
 8011276:	3001      	adds	r0, #1
 8011278:	d100      	bne.n	801127c <_printf_float+0x468>
 801127a:	e627      	b.n	8010ecc <_printf_float+0xb8>
 801127c:	3401      	adds	r4, #1
 801127e:	68eb      	ldr	r3, [r5, #12]
 8011280:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011282:	1a9b      	subs	r3, r3, r2
 8011284:	42a3      	cmp	r3, r4
 8011286:	dcef      	bgt.n	8011268 <_printf_float+0x454>
 8011288:	e6f9      	b.n	801107e <_printf_float+0x26a>
 801128a:	2400      	movs	r4, #0
 801128c:	e7f7      	b.n	801127e <_printf_float+0x46a>
 801128e:	46c0      	nop			@ (mov r8, r8)

08011290 <_printf_common>:
 8011290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011292:	0016      	movs	r6, r2
 8011294:	9301      	str	r3, [sp, #4]
 8011296:	688a      	ldr	r2, [r1, #8]
 8011298:	690b      	ldr	r3, [r1, #16]
 801129a:	000c      	movs	r4, r1
 801129c:	9000      	str	r0, [sp, #0]
 801129e:	4293      	cmp	r3, r2
 80112a0:	da00      	bge.n	80112a4 <_printf_common+0x14>
 80112a2:	0013      	movs	r3, r2
 80112a4:	0022      	movs	r2, r4
 80112a6:	6033      	str	r3, [r6, #0]
 80112a8:	3243      	adds	r2, #67	@ 0x43
 80112aa:	7812      	ldrb	r2, [r2, #0]
 80112ac:	2a00      	cmp	r2, #0
 80112ae:	d001      	beq.n	80112b4 <_printf_common+0x24>
 80112b0:	3301      	adds	r3, #1
 80112b2:	6033      	str	r3, [r6, #0]
 80112b4:	6823      	ldr	r3, [r4, #0]
 80112b6:	069b      	lsls	r3, r3, #26
 80112b8:	d502      	bpl.n	80112c0 <_printf_common+0x30>
 80112ba:	6833      	ldr	r3, [r6, #0]
 80112bc:	3302      	adds	r3, #2
 80112be:	6033      	str	r3, [r6, #0]
 80112c0:	6822      	ldr	r2, [r4, #0]
 80112c2:	2306      	movs	r3, #6
 80112c4:	0015      	movs	r5, r2
 80112c6:	401d      	ands	r5, r3
 80112c8:	421a      	tst	r2, r3
 80112ca:	d027      	beq.n	801131c <_printf_common+0x8c>
 80112cc:	0023      	movs	r3, r4
 80112ce:	3343      	adds	r3, #67	@ 0x43
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	1e5a      	subs	r2, r3, #1
 80112d4:	4193      	sbcs	r3, r2
 80112d6:	6822      	ldr	r2, [r4, #0]
 80112d8:	0692      	lsls	r2, r2, #26
 80112da:	d430      	bmi.n	801133e <_printf_common+0xae>
 80112dc:	0022      	movs	r2, r4
 80112de:	9901      	ldr	r1, [sp, #4]
 80112e0:	9800      	ldr	r0, [sp, #0]
 80112e2:	9d08      	ldr	r5, [sp, #32]
 80112e4:	3243      	adds	r2, #67	@ 0x43
 80112e6:	47a8      	blx	r5
 80112e8:	3001      	adds	r0, #1
 80112ea:	d025      	beq.n	8011338 <_printf_common+0xa8>
 80112ec:	2206      	movs	r2, #6
 80112ee:	6823      	ldr	r3, [r4, #0]
 80112f0:	2500      	movs	r5, #0
 80112f2:	4013      	ands	r3, r2
 80112f4:	2b04      	cmp	r3, #4
 80112f6:	d105      	bne.n	8011304 <_printf_common+0x74>
 80112f8:	6833      	ldr	r3, [r6, #0]
 80112fa:	68e5      	ldr	r5, [r4, #12]
 80112fc:	1aed      	subs	r5, r5, r3
 80112fe:	43eb      	mvns	r3, r5
 8011300:	17db      	asrs	r3, r3, #31
 8011302:	401d      	ands	r5, r3
 8011304:	68a3      	ldr	r3, [r4, #8]
 8011306:	6922      	ldr	r2, [r4, #16]
 8011308:	4293      	cmp	r3, r2
 801130a:	dd01      	ble.n	8011310 <_printf_common+0x80>
 801130c:	1a9b      	subs	r3, r3, r2
 801130e:	18ed      	adds	r5, r5, r3
 8011310:	2600      	movs	r6, #0
 8011312:	42b5      	cmp	r5, r6
 8011314:	d120      	bne.n	8011358 <_printf_common+0xc8>
 8011316:	2000      	movs	r0, #0
 8011318:	e010      	b.n	801133c <_printf_common+0xac>
 801131a:	3501      	adds	r5, #1
 801131c:	68e3      	ldr	r3, [r4, #12]
 801131e:	6832      	ldr	r2, [r6, #0]
 8011320:	1a9b      	subs	r3, r3, r2
 8011322:	42ab      	cmp	r3, r5
 8011324:	ddd2      	ble.n	80112cc <_printf_common+0x3c>
 8011326:	0022      	movs	r2, r4
 8011328:	2301      	movs	r3, #1
 801132a:	9901      	ldr	r1, [sp, #4]
 801132c:	9800      	ldr	r0, [sp, #0]
 801132e:	9f08      	ldr	r7, [sp, #32]
 8011330:	3219      	adds	r2, #25
 8011332:	47b8      	blx	r7
 8011334:	3001      	adds	r0, #1
 8011336:	d1f0      	bne.n	801131a <_printf_common+0x8a>
 8011338:	2001      	movs	r0, #1
 801133a:	4240      	negs	r0, r0
 801133c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801133e:	2030      	movs	r0, #48	@ 0x30
 8011340:	18e1      	adds	r1, r4, r3
 8011342:	3143      	adds	r1, #67	@ 0x43
 8011344:	7008      	strb	r0, [r1, #0]
 8011346:	0021      	movs	r1, r4
 8011348:	1c5a      	adds	r2, r3, #1
 801134a:	3145      	adds	r1, #69	@ 0x45
 801134c:	7809      	ldrb	r1, [r1, #0]
 801134e:	18a2      	adds	r2, r4, r2
 8011350:	3243      	adds	r2, #67	@ 0x43
 8011352:	3302      	adds	r3, #2
 8011354:	7011      	strb	r1, [r2, #0]
 8011356:	e7c1      	b.n	80112dc <_printf_common+0x4c>
 8011358:	0022      	movs	r2, r4
 801135a:	2301      	movs	r3, #1
 801135c:	9901      	ldr	r1, [sp, #4]
 801135e:	9800      	ldr	r0, [sp, #0]
 8011360:	9f08      	ldr	r7, [sp, #32]
 8011362:	321a      	adds	r2, #26
 8011364:	47b8      	blx	r7
 8011366:	3001      	adds	r0, #1
 8011368:	d0e6      	beq.n	8011338 <_printf_common+0xa8>
 801136a:	3601      	adds	r6, #1
 801136c:	e7d1      	b.n	8011312 <_printf_common+0x82>
	...

08011370 <_printf_i>:
 8011370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011372:	b08b      	sub	sp, #44	@ 0x2c
 8011374:	9206      	str	r2, [sp, #24]
 8011376:	000a      	movs	r2, r1
 8011378:	3243      	adds	r2, #67	@ 0x43
 801137a:	9307      	str	r3, [sp, #28]
 801137c:	9005      	str	r0, [sp, #20]
 801137e:	9203      	str	r2, [sp, #12]
 8011380:	7e0a      	ldrb	r2, [r1, #24]
 8011382:	000c      	movs	r4, r1
 8011384:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011386:	2a78      	cmp	r2, #120	@ 0x78
 8011388:	d809      	bhi.n	801139e <_printf_i+0x2e>
 801138a:	2a62      	cmp	r2, #98	@ 0x62
 801138c:	d80b      	bhi.n	80113a6 <_printf_i+0x36>
 801138e:	2a00      	cmp	r2, #0
 8011390:	d100      	bne.n	8011394 <_printf_i+0x24>
 8011392:	e0bc      	b.n	801150e <_printf_i+0x19e>
 8011394:	497b      	ldr	r1, [pc, #492]	@ (8011584 <_printf_i+0x214>)
 8011396:	9104      	str	r1, [sp, #16]
 8011398:	2a58      	cmp	r2, #88	@ 0x58
 801139a:	d100      	bne.n	801139e <_printf_i+0x2e>
 801139c:	e090      	b.n	80114c0 <_printf_i+0x150>
 801139e:	0025      	movs	r5, r4
 80113a0:	3542      	adds	r5, #66	@ 0x42
 80113a2:	702a      	strb	r2, [r5, #0]
 80113a4:	e022      	b.n	80113ec <_printf_i+0x7c>
 80113a6:	0010      	movs	r0, r2
 80113a8:	3863      	subs	r0, #99	@ 0x63
 80113aa:	2815      	cmp	r0, #21
 80113ac:	d8f7      	bhi.n	801139e <_printf_i+0x2e>
 80113ae:	f7ee fee5 	bl	800017c <__gnu_thumb1_case_shi>
 80113b2:	0016      	.short	0x0016
 80113b4:	fff6001f 	.word	0xfff6001f
 80113b8:	fff6fff6 	.word	0xfff6fff6
 80113bc:	001ffff6 	.word	0x001ffff6
 80113c0:	fff6fff6 	.word	0xfff6fff6
 80113c4:	fff6fff6 	.word	0xfff6fff6
 80113c8:	003600a1 	.word	0x003600a1
 80113cc:	fff60080 	.word	0xfff60080
 80113d0:	00b2fff6 	.word	0x00b2fff6
 80113d4:	0036fff6 	.word	0x0036fff6
 80113d8:	fff6fff6 	.word	0xfff6fff6
 80113dc:	0084      	.short	0x0084
 80113de:	0025      	movs	r5, r4
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	3542      	adds	r5, #66	@ 0x42
 80113e4:	1d11      	adds	r1, r2, #4
 80113e6:	6019      	str	r1, [r3, #0]
 80113e8:	6813      	ldr	r3, [r2, #0]
 80113ea:	702b      	strb	r3, [r5, #0]
 80113ec:	2301      	movs	r3, #1
 80113ee:	e0a0      	b.n	8011532 <_printf_i+0x1c2>
 80113f0:	6818      	ldr	r0, [r3, #0]
 80113f2:	6809      	ldr	r1, [r1, #0]
 80113f4:	1d02      	adds	r2, r0, #4
 80113f6:	060d      	lsls	r5, r1, #24
 80113f8:	d50b      	bpl.n	8011412 <_printf_i+0xa2>
 80113fa:	6806      	ldr	r6, [r0, #0]
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	2e00      	cmp	r6, #0
 8011400:	da03      	bge.n	801140a <_printf_i+0x9a>
 8011402:	232d      	movs	r3, #45	@ 0x2d
 8011404:	9a03      	ldr	r2, [sp, #12]
 8011406:	4276      	negs	r6, r6
 8011408:	7013      	strb	r3, [r2, #0]
 801140a:	4b5e      	ldr	r3, [pc, #376]	@ (8011584 <_printf_i+0x214>)
 801140c:	270a      	movs	r7, #10
 801140e:	9304      	str	r3, [sp, #16]
 8011410:	e018      	b.n	8011444 <_printf_i+0xd4>
 8011412:	6806      	ldr	r6, [r0, #0]
 8011414:	601a      	str	r2, [r3, #0]
 8011416:	0649      	lsls	r1, r1, #25
 8011418:	d5f1      	bpl.n	80113fe <_printf_i+0x8e>
 801141a:	b236      	sxth	r6, r6
 801141c:	e7ef      	b.n	80113fe <_printf_i+0x8e>
 801141e:	6808      	ldr	r0, [r1, #0]
 8011420:	6819      	ldr	r1, [r3, #0]
 8011422:	c940      	ldmia	r1!, {r6}
 8011424:	0605      	lsls	r5, r0, #24
 8011426:	d402      	bmi.n	801142e <_printf_i+0xbe>
 8011428:	0640      	lsls	r0, r0, #25
 801142a:	d500      	bpl.n	801142e <_printf_i+0xbe>
 801142c:	b2b6      	uxth	r6, r6
 801142e:	6019      	str	r1, [r3, #0]
 8011430:	4b54      	ldr	r3, [pc, #336]	@ (8011584 <_printf_i+0x214>)
 8011432:	270a      	movs	r7, #10
 8011434:	9304      	str	r3, [sp, #16]
 8011436:	2a6f      	cmp	r2, #111	@ 0x6f
 8011438:	d100      	bne.n	801143c <_printf_i+0xcc>
 801143a:	3f02      	subs	r7, #2
 801143c:	0023      	movs	r3, r4
 801143e:	2200      	movs	r2, #0
 8011440:	3343      	adds	r3, #67	@ 0x43
 8011442:	701a      	strb	r2, [r3, #0]
 8011444:	6863      	ldr	r3, [r4, #4]
 8011446:	60a3      	str	r3, [r4, #8]
 8011448:	2b00      	cmp	r3, #0
 801144a:	db03      	blt.n	8011454 <_printf_i+0xe4>
 801144c:	2104      	movs	r1, #4
 801144e:	6822      	ldr	r2, [r4, #0]
 8011450:	438a      	bics	r2, r1
 8011452:	6022      	str	r2, [r4, #0]
 8011454:	2e00      	cmp	r6, #0
 8011456:	d102      	bne.n	801145e <_printf_i+0xee>
 8011458:	9d03      	ldr	r5, [sp, #12]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d00c      	beq.n	8011478 <_printf_i+0x108>
 801145e:	9d03      	ldr	r5, [sp, #12]
 8011460:	0030      	movs	r0, r6
 8011462:	0039      	movs	r1, r7
 8011464:	f7ee ff1a 	bl	800029c <__aeabi_uidivmod>
 8011468:	9b04      	ldr	r3, [sp, #16]
 801146a:	3d01      	subs	r5, #1
 801146c:	5c5b      	ldrb	r3, [r3, r1]
 801146e:	702b      	strb	r3, [r5, #0]
 8011470:	0033      	movs	r3, r6
 8011472:	0006      	movs	r6, r0
 8011474:	429f      	cmp	r7, r3
 8011476:	d9f3      	bls.n	8011460 <_printf_i+0xf0>
 8011478:	2f08      	cmp	r7, #8
 801147a:	d109      	bne.n	8011490 <_printf_i+0x120>
 801147c:	6823      	ldr	r3, [r4, #0]
 801147e:	07db      	lsls	r3, r3, #31
 8011480:	d506      	bpl.n	8011490 <_printf_i+0x120>
 8011482:	6862      	ldr	r2, [r4, #4]
 8011484:	6923      	ldr	r3, [r4, #16]
 8011486:	429a      	cmp	r2, r3
 8011488:	dc02      	bgt.n	8011490 <_printf_i+0x120>
 801148a:	2330      	movs	r3, #48	@ 0x30
 801148c:	3d01      	subs	r5, #1
 801148e:	702b      	strb	r3, [r5, #0]
 8011490:	9b03      	ldr	r3, [sp, #12]
 8011492:	1b5b      	subs	r3, r3, r5
 8011494:	6123      	str	r3, [r4, #16]
 8011496:	9b07      	ldr	r3, [sp, #28]
 8011498:	0021      	movs	r1, r4
 801149a:	9300      	str	r3, [sp, #0]
 801149c:	9805      	ldr	r0, [sp, #20]
 801149e:	9b06      	ldr	r3, [sp, #24]
 80114a0:	aa09      	add	r2, sp, #36	@ 0x24
 80114a2:	f7ff fef5 	bl	8011290 <_printf_common>
 80114a6:	3001      	adds	r0, #1
 80114a8:	d148      	bne.n	801153c <_printf_i+0x1cc>
 80114aa:	2001      	movs	r0, #1
 80114ac:	4240      	negs	r0, r0
 80114ae:	b00b      	add	sp, #44	@ 0x2c
 80114b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114b2:	2220      	movs	r2, #32
 80114b4:	6809      	ldr	r1, [r1, #0]
 80114b6:	430a      	orrs	r2, r1
 80114b8:	6022      	str	r2, [r4, #0]
 80114ba:	2278      	movs	r2, #120	@ 0x78
 80114bc:	4932      	ldr	r1, [pc, #200]	@ (8011588 <_printf_i+0x218>)
 80114be:	9104      	str	r1, [sp, #16]
 80114c0:	0021      	movs	r1, r4
 80114c2:	3145      	adds	r1, #69	@ 0x45
 80114c4:	700a      	strb	r2, [r1, #0]
 80114c6:	6819      	ldr	r1, [r3, #0]
 80114c8:	6822      	ldr	r2, [r4, #0]
 80114ca:	c940      	ldmia	r1!, {r6}
 80114cc:	0610      	lsls	r0, r2, #24
 80114ce:	d402      	bmi.n	80114d6 <_printf_i+0x166>
 80114d0:	0650      	lsls	r0, r2, #25
 80114d2:	d500      	bpl.n	80114d6 <_printf_i+0x166>
 80114d4:	b2b6      	uxth	r6, r6
 80114d6:	6019      	str	r1, [r3, #0]
 80114d8:	07d3      	lsls	r3, r2, #31
 80114da:	d502      	bpl.n	80114e2 <_printf_i+0x172>
 80114dc:	2320      	movs	r3, #32
 80114de:	4313      	orrs	r3, r2
 80114e0:	6023      	str	r3, [r4, #0]
 80114e2:	2e00      	cmp	r6, #0
 80114e4:	d001      	beq.n	80114ea <_printf_i+0x17a>
 80114e6:	2710      	movs	r7, #16
 80114e8:	e7a8      	b.n	801143c <_printf_i+0xcc>
 80114ea:	2220      	movs	r2, #32
 80114ec:	6823      	ldr	r3, [r4, #0]
 80114ee:	4393      	bics	r3, r2
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	e7f8      	b.n	80114e6 <_printf_i+0x176>
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	680d      	ldr	r5, [r1, #0]
 80114f8:	1d10      	adds	r0, r2, #4
 80114fa:	6949      	ldr	r1, [r1, #20]
 80114fc:	6018      	str	r0, [r3, #0]
 80114fe:	6813      	ldr	r3, [r2, #0]
 8011500:	062e      	lsls	r6, r5, #24
 8011502:	d501      	bpl.n	8011508 <_printf_i+0x198>
 8011504:	6019      	str	r1, [r3, #0]
 8011506:	e002      	b.n	801150e <_printf_i+0x19e>
 8011508:	066d      	lsls	r5, r5, #25
 801150a:	d5fb      	bpl.n	8011504 <_printf_i+0x194>
 801150c:	8019      	strh	r1, [r3, #0]
 801150e:	2300      	movs	r3, #0
 8011510:	9d03      	ldr	r5, [sp, #12]
 8011512:	6123      	str	r3, [r4, #16]
 8011514:	e7bf      	b.n	8011496 <_printf_i+0x126>
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	1d11      	adds	r1, r2, #4
 801151a:	6019      	str	r1, [r3, #0]
 801151c:	6815      	ldr	r5, [r2, #0]
 801151e:	2100      	movs	r1, #0
 8011520:	0028      	movs	r0, r5
 8011522:	6862      	ldr	r2, [r4, #4]
 8011524:	f000 fa5b 	bl	80119de <memchr>
 8011528:	2800      	cmp	r0, #0
 801152a:	d001      	beq.n	8011530 <_printf_i+0x1c0>
 801152c:	1b40      	subs	r0, r0, r5
 801152e:	6060      	str	r0, [r4, #4]
 8011530:	6863      	ldr	r3, [r4, #4]
 8011532:	6123      	str	r3, [r4, #16]
 8011534:	2300      	movs	r3, #0
 8011536:	9a03      	ldr	r2, [sp, #12]
 8011538:	7013      	strb	r3, [r2, #0]
 801153a:	e7ac      	b.n	8011496 <_printf_i+0x126>
 801153c:	002a      	movs	r2, r5
 801153e:	6923      	ldr	r3, [r4, #16]
 8011540:	9906      	ldr	r1, [sp, #24]
 8011542:	9805      	ldr	r0, [sp, #20]
 8011544:	9d07      	ldr	r5, [sp, #28]
 8011546:	47a8      	blx	r5
 8011548:	3001      	adds	r0, #1
 801154a:	d0ae      	beq.n	80114aa <_printf_i+0x13a>
 801154c:	6823      	ldr	r3, [r4, #0]
 801154e:	079b      	lsls	r3, r3, #30
 8011550:	d415      	bmi.n	801157e <_printf_i+0x20e>
 8011552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011554:	68e0      	ldr	r0, [r4, #12]
 8011556:	4298      	cmp	r0, r3
 8011558:	daa9      	bge.n	80114ae <_printf_i+0x13e>
 801155a:	0018      	movs	r0, r3
 801155c:	e7a7      	b.n	80114ae <_printf_i+0x13e>
 801155e:	0022      	movs	r2, r4
 8011560:	2301      	movs	r3, #1
 8011562:	9906      	ldr	r1, [sp, #24]
 8011564:	9805      	ldr	r0, [sp, #20]
 8011566:	9e07      	ldr	r6, [sp, #28]
 8011568:	3219      	adds	r2, #25
 801156a:	47b0      	blx	r6
 801156c:	3001      	adds	r0, #1
 801156e:	d09c      	beq.n	80114aa <_printf_i+0x13a>
 8011570:	3501      	adds	r5, #1
 8011572:	68e3      	ldr	r3, [r4, #12]
 8011574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011576:	1a9b      	subs	r3, r3, r2
 8011578:	42ab      	cmp	r3, r5
 801157a:	dcf0      	bgt.n	801155e <_printf_i+0x1ee>
 801157c:	e7e9      	b.n	8011552 <_printf_i+0x1e2>
 801157e:	2500      	movs	r5, #0
 8011580:	e7f7      	b.n	8011572 <_printf_i+0x202>
 8011582:	46c0      	nop			@ (mov r8, r8)
 8011584:	08026d92 	.word	0x08026d92
 8011588:	08026da3 	.word	0x08026da3

0801158c <std>:
 801158c:	2300      	movs	r3, #0
 801158e:	b510      	push	{r4, lr}
 8011590:	0004      	movs	r4, r0
 8011592:	6003      	str	r3, [r0, #0]
 8011594:	6043      	str	r3, [r0, #4]
 8011596:	6083      	str	r3, [r0, #8]
 8011598:	8181      	strh	r1, [r0, #12]
 801159a:	6643      	str	r3, [r0, #100]	@ 0x64
 801159c:	81c2      	strh	r2, [r0, #14]
 801159e:	6103      	str	r3, [r0, #16]
 80115a0:	6143      	str	r3, [r0, #20]
 80115a2:	6183      	str	r3, [r0, #24]
 80115a4:	0019      	movs	r1, r3
 80115a6:	2208      	movs	r2, #8
 80115a8:	305c      	adds	r0, #92	@ 0x5c
 80115aa:	f000 f967 	bl	801187c <memset>
 80115ae:	4b0b      	ldr	r3, [pc, #44]	@ (80115dc <std+0x50>)
 80115b0:	6224      	str	r4, [r4, #32]
 80115b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80115b4:	4b0a      	ldr	r3, [pc, #40]	@ (80115e0 <std+0x54>)
 80115b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80115b8:	4b0a      	ldr	r3, [pc, #40]	@ (80115e4 <std+0x58>)
 80115ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80115bc:	4b0a      	ldr	r3, [pc, #40]	@ (80115e8 <std+0x5c>)
 80115be:	6323      	str	r3, [r4, #48]	@ 0x30
 80115c0:	4b0a      	ldr	r3, [pc, #40]	@ (80115ec <std+0x60>)
 80115c2:	429c      	cmp	r4, r3
 80115c4:	d005      	beq.n	80115d2 <std+0x46>
 80115c6:	4b0a      	ldr	r3, [pc, #40]	@ (80115f0 <std+0x64>)
 80115c8:	429c      	cmp	r4, r3
 80115ca:	d002      	beq.n	80115d2 <std+0x46>
 80115cc:	4b09      	ldr	r3, [pc, #36]	@ (80115f4 <std+0x68>)
 80115ce:	429c      	cmp	r4, r3
 80115d0:	d103      	bne.n	80115da <std+0x4e>
 80115d2:	0020      	movs	r0, r4
 80115d4:	3058      	adds	r0, #88	@ 0x58
 80115d6:	f000 f9ff 	bl	80119d8 <__retarget_lock_init_recursive>
 80115da:	bd10      	pop	{r4, pc}
 80115dc:	08011775 	.word	0x08011775
 80115e0:	0801179d 	.word	0x0801179d
 80115e4:	080117d5 	.word	0x080117d5
 80115e8:	08011801 	.word	0x08011801
 80115ec:	20003610 	.word	0x20003610
 80115f0:	20003678 	.word	0x20003678
 80115f4:	200036e0 	.word	0x200036e0

080115f8 <stdio_exit_handler>:
 80115f8:	b510      	push	{r4, lr}
 80115fa:	4a03      	ldr	r2, [pc, #12]	@ (8011608 <stdio_exit_handler+0x10>)
 80115fc:	4903      	ldr	r1, [pc, #12]	@ (801160c <stdio_exit_handler+0x14>)
 80115fe:	4804      	ldr	r0, [pc, #16]	@ (8011610 <stdio_exit_handler+0x18>)
 8011600:	f000 f86c 	bl	80116dc <_fwalk_sglue>
 8011604:	bd10      	pop	{r4, pc}
 8011606:	46c0      	nop			@ (mov r8, r8)
 8011608:	2000014c 	.word	0x2000014c
 801160c:	0801369d 	.word	0x0801369d
 8011610:	2000015c 	.word	0x2000015c

08011614 <cleanup_stdio>:
 8011614:	6841      	ldr	r1, [r0, #4]
 8011616:	4b0b      	ldr	r3, [pc, #44]	@ (8011644 <cleanup_stdio+0x30>)
 8011618:	b510      	push	{r4, lr}
 801161a:	0004      	movs	r4, r0
 801161c:	4299      	cmp	r1, r3
 801161e:	d001      	beq.n	8011624 <cleanup_stdio+0x10>
 8011620:	f002 f83c 	bl	801369c <_fflush_r>
 8011624:	68a1      	ldr	r1, [r4, #8]
 8011626:	4b08      	ldr	r3, [pc, #32]	@ (8011648 <cleanup_stdio+0x34>)
 8011628:	4299      	cmp	r1, r3
 801162a:	d002      	beq.n	8011632 <cleanup_stdio+0x1e>
 801162c:	0020      	movs	r0, r4
 801162e:	f002 f835 	bl	801369c <_fflush_r>
 8011632:	68e1      	ldr	r1, [r4, #12]
 8011634:	4b05      	ldr	r3, [pc, #20]	@ (801164c <cleanup_stdio+0x38>)
 8011636:	4299      	cmp	r1, r3
 8011638:	d002      	beq.n	8011640 <cleanup_stdio+0x2c>
 801163a:	0020      	movs	r0, r4
 801163c:	f002 f82e 	bl	801369c <_fflush_r>
 8011640:	bd10      	pop	{r4, pc}
 8011642:	46c0      	nop			@ (mov r8, r8)
 8011644:	20003610 	.word	0x20003610
 8011648:	20003678 	.word	0x20003678
 801164c:	200036e0 	.word	0x200036e0

08011650 <global_stdio_init.part.0>:
 8011650:	b510      	push	{r4, lr}
 8011652:	4b09      	ldr	r3, [pc, #36]	@ (8011678 <global_stdio_init.part.0+0x28>)
 8011654:	4a09      	ldr	r2, [pc, #36]	@ (801167c <global_stdio_init.part.0+0x2c>)
 8011656:	2104      	movs	r1, #4
 8011658:	601a      	str	r2, [r3, #0]
 801165a:	4809      	ldr	r0, [pc, #36]	@ (8011680 <global_stdio_init.part.0+0x30>)
 801165c:	2200      	movs	r2, #0
 801165e:	f7ff ff95 	bl	801158c <std>
 8011662:	2201      	movs	r2, #1
 8011664:	2109      	movs	r1, #9
 8011666:	4807      	ldr	r0, [pc, #28]	@ (8011684 <global_stdio_init.part.0+0x34>)
 8011668:	f7ff ff90 	bl	801158c <std>
 801166c:	2202      	movs	r2, #2
 801166e:	2112      	movs	r1, #18
 8011670:	4805      	ldr	r0, [pc, #20]	@ (8011688 <global_stdio_init.part.0+0x38>)
 8011672:	f7ff ff8b 	bl	801158c <std>
 8011676:	bd10      	pop	{r4, pc}
 8011678:	20003748 	.word	0x20003748
 801167c:	080115f9 	.word	0x080115f9
 8011680:	20003610 	.word	0x20003610
 8011684:	20003678 	.word	0x20003678
 8011688:	200036e0 	.word	0x200036e0

0801168c <__sfp_lock_acquire>:
 801168c:	b510      	push	{r4, lr}
 801168e:	4802      	ldr	r0, [pc, #8]	@ (8011698 <__sfp_lock_acquire+0xc>)
 8011690:	f000 f9a3 	bl	80119da <__retarget_lock_acquire_recursive>
 8011694:	bd10      	pop	{r4, pc}
 8011696:	46c0      	nop			@ (mov r8, r8)
 8011698:	20003751 	.word	0x20003751

0801169c <__sfp_lock_release>:
 801169c:	b510      	push	{r4, lr}
 801169e:	4802      	ldr	r0, [pc, #8]	@ (80116a8 <__sfp_lock_release+0xc>)
 80116a0:	f000 f99c 	bl	80119dc <__retarget_lock_release_recursive>
 80116a4:	bd10      	pop	{r4, pc}
 80116a6:	46c0      	nop			@ (mov r8, r8)
 80116a8:	20003751 	.word	0x20003751

080116ac <__sinit>:
 80116ac:	b510      	push	{r4, lr}
 80116ae:	0004      	movs	r4, r0
 80116b0:	f7ff ffec 	bl	801168c <__sfp_lock_acquire>
 80116b4:	6a23      	ldr	r3, [r4, #32]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d002      	beq.n	80116c0 <__sinit+0x14>
 80116ba:	f7ff ffef 	bl	801169c <__sfp_lock_release>
 80116be:	bd10      	pop	{r4, pc}
 80116c0:	4b04      	ldr	r3, [pc, #16]	@ (80116d4 <__sinit+0x28>)
 80116c2:	6223      	str	r3, [r4, #32]
 80116c4:	4b04      	ldr	r3, [pc, #16]	@ (80116d8 <__sinit+0x2c>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d1f6      	bne.n	80116ba <__sinit+0xe>
 80116cc:	f7ff ffc0 	bl	8011650 <global_stdio_init.part.0>
 80116d0:	e7f3      	b.n	80116ba <__sinit+0xe>
 80116d2:	46c0      	nop			@ (mov r8, r8)
 80116d4:	08011615 	.word	0x08011615
 80116d8:	20003748 	.word	0x20003748

080116dc <_fwalk_sglue>:
 80116dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116de:	0014      	movs	r4, r2
 80116e0:	2600      	movs	r6, #0
 80116e2:	9000      	str	r0, [sp, #0]
 80116e4:	9101      	str	r1, [sp, #4]
 80116e6:	68a5      	ldr	r5, [r4, #8]
 80116e8:	6867      	ldr	r7, [r4, #4]
 80116ea:	3f01      	subs	r7, #1
 80116ec:	d504      	bpl.n	80116f8 <_fwalk_sglue+0x1c>
 80116ee:	6824      	ldr	r4, [r4, #0]
 80116f0:	2c00      	cmp	r4, #0
 80116f2:	d1f8      	bne.n	80116e6 <_fwalk_sglue+0xa>
 80116f4:	0030      	movs	r0, r6
 80116f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80116f8:	89ab      	ldrh	r3, [r5, #12]
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d908      	bls.n	8011710 <_fwalk_sglue+0x34>
 80116fe:	220e      	movs	r2, #14
 8011700:	5eab      	ldrsh	r3, [r5, r2]
 8011702:	3301      	adds	r3, #1
 8011704:	d004      	beq.n	8011710 <_fwalk_sglue+0x34>
 8011706:	0029      	movs	r1, r5
 8011708:	9800      	ldr	r0, [sp, #0]
 801170a:	9b01      	ldr	r3, [sp, #4]
 801170c:	4798      	blx	r3
 801170e:	4306      	orrs	r6, r0
 8011710:	3568      	adds	r5, #104	@ 0x68
 8011712:	e7ea      	b.n	80116ea <_fwalk_sglue+0xe>

08011714 <iprintf>:
 8011714:	b40f      	push	{r0, r1, r2, r3}
 8011716:	b507      	push	{r0, r1, r2, lr}
 8011718:	4905      	ldr	r1, [pc, #20]	@ (8011730 <iprintf+0x1c>)
 801171a:	ab04      	add	r3, sp, #16
 801171c:	6808      	ldr	r0, [r1, #0]
 801171e:	cb04      	ldmia	r3!, {r2}
 8011720:	6881      	ldr	r1, [r0, #8]
 8011722:	9301      	str	r3, [sp, #4]
 8011724:	f001 fe18 	bl	8013358 <_vfiprintf_r>
 8011728:	b003      	add	sp, #12
 801172a:	bc08      	pop	{r3}
 801172c:	b004      	add	sp, #16
 801172e:	4718      	bx	r3
 8011730:	20000158 	.word	0x20000158

08011734 <siprintf>:
 8011734:	b40e      	push	{r1, r2, r3}
 8011736:	b500      	push	{lr}
 8011738:	490b      	ldr	r1, [pc, #44]	@ (8011768 <siprintf+0x34>)
 801173a:	b09c      	sub	sp, #112	@ 0x70
 801173c:	ab1d      	add	r3, sp, #116	@ 0x74
 801173e:	9002      	str	r0, [sp, #8]
 8011740:	9006      	str	r0, [sp, #24]
 8011742:	9107      	str	r1, [sp, #28]
 8011744:	9104      	str	r1, [sp, #16]
 8011746:	4809      	ldr	r0, [pc, #36]	@ (801176c <siprintf+0x38>)
 8011748:	4909      	ldr	r1, [pc, #36]	@ (8011770 <siprintf+0x3c>)
 801174a:	cb04      	ldmia	r3!, {r2}
 801174c:	9105      	str	r1, [sp, #20]
 801174e:	6800      	ldr	r0, [r0, #0]
 8011750:	a902      	add	r1, sp, #8
 8011752:	9301      	str	r3, [sp, #4]
 8011754:	f001 fcda 	bl	801310c <_svfiprintf_r>
 8011758:	2200      	movs	r2, #0
 801175a:	9b02      	ldr	r3, [sp, #8]
 801175c:	701a      	strb	r2, [r3, #0]
 801175e:	b01c      	add	sp, #112	@ 0x70
 8011760:	bc08      	pop	{r3}
 8011762:	b003      	add	sp, #12
 8011764:	4718      	bx	r3
 8011766:	46c0      	nop			@ (mov r8, r8)
 8011768:	7fffffff 	.word	0x7fffffff
 801176c:	20000158 	.word	0x20000158
 8011770:	ffff0208 	.word	0xffff0208

08011774 <__sread>:
 8011774:	b570      	push	{r4, r5, r6, lr}
 8011776:	000c      	movs	r4, r1
 8011778:	250e      	movs	r5, #14
 801177a:	5f49      	ldrsh	r1, [r1, r5]
 801177c:	f000 f8da 	bl	8011934 <_read_r>
 8011780:	2800      	cmp	r0, #0
 8011782:	db03      	blt.n	801178c <__sread+0x18>
 8011784:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8011786:	181b      	adds	r3, r3, r0
 8011788:	6563      	str	r3, [r4, #84]	@ 0x54
 801178a:	bd70      	pop	{r4, r5, r6, pc}
 801178c:	89a3      	ldrh	r3, [r4, #12]
 801178e:	4a02      	ldr	r2, [pc, #8]	@ (8011798 <__sread+0x24>)
 8011790:	4013      	ands	r3, r2
 8011792:	81a3      	strh	r3, [r4, #12]
 8011794:	e7f9      	b.n	801178a <__sread+0x16>
 8011796:	46c0      	nop			@ (mov r8, r8)
 8011798:	ffffefff 	.word	0xffffefff

0801179c <__swrite>:
 801179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801179e:	001f      	movs	r7, r3
 80117a0:	898b      	ldrh	r3, [r1, #12]
 80117a2:	0005      	movs	r5, r0
 80117a4:	000c      	movs	r4, r1
 80117a6:	0016      	movs	r6, r2
 80117a8:	05db      	lsls	r3, r3, #23
 80117aa:	d505      	bpl.n	80117b8 <__swrite+0x1c>
 80117ac:	230e      	movs	r3, #14
 80117ae:	5ec9      	ldrsh	r1, [r1, r3]
 80117b0:	2200      	movs	r2, #0
 80117b2:	2302      	movs	r3, #2
 80117b4:	f000 f8aa 	bl	801190c <_lseek_r>
 80117b8:	89a3      	ldrh	r3, [r4, #12]
 80117ba:	4a05      	ldr	r2, [pc, #20]	@ (80117d0 <__swrite+0x34>)
 80117bc:	0028      	movs	r0, r5
 80117be:	4013      	ands	r3, r2
 80117c0:	81a3      	strh	r3, [r4, #12]
 80117c2:	0032      	movs	r2, r6
 80117c4:	230e      	movs	r3, #14
 80117c6:	5ee1      	ldrsh	r1, [r4, r3]
 80117c8:	003b      	movs	r3, r7
 80117ca:	f000 f8c7 	bl	801195c <_write_r>
 80117ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117d0:	ffffefff 	.word	0xffffefff

080117d4 <__sseek>:
 80117d4:	b570      	push	{r4, r5, r6, lr}
 80117d6:	000c      	movs	r4, r1
 80117d8:	250e      	movs	r5, #14
 80117da:	5f49      	ldrsh	r1, [r1, r5]
 80117dc:	f000 f896 	bl	801190c <_lseek_r>
 80117e0:	89a3      	ldrh	r3, [r4, #12]
 80117e2:	1c42      	adds	r2, r0, #1
 80117e4:	d103      	bne.n	80117ee <__sseek+0x1a>
 80117e6:	4a05      	ldr	r2, [pc, #20]	@ (80117fc <__sseek+0x28>)
 80117e8:	4013      	ands	r3, r2
 80117ea:	81a3      	strh	r3, [r4, #12]
 80117ec:	bd70      	pop	{r4, r5, r6, pc}
 80117ee:	2280      	movs	r2, #128	@ 0x80
 80117f0:	0152      	lsls	r2, r2, #5
 80117f2:	4313      	orrs	r3, r2
 80117f4:	81a3      	strh	r3, [r4, #12]
 80117f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80117f8:	e7f8      	b.n	80117ec <__sseek+0x18>
 80117fa:	46c0      	nop			@ (mov r8, r8)
 80117fc:	ffffefff 	.word	0xffffefff

08011800 <__sclose>:
 8011800:	b510      	push	{r4, lr}
 8011802:	230e      	movs	r3, #14
 8011804:	5ec9      	ldrsh	r1, [r1, r3]
 8011806:	f000 f86f 	bl	80118e8 <_close_r>
 801180a:	bd10      	pop	{r4, pc}

0801180c <_vsniprintf_r>:
 801180c:	b530      	push	{r4, r5, lr}
 801180e:	0014      	movs	r4, r2
 8011810:	0005      	movs	r5, r0
 8011812:	001a      	movs	r2, r3
 8011814:	b09b      	sub	sp, #108	@ 0x6c
 8011816:	2c00      	cmp	r4, #0
 8011818:	da05      	bge.n	8011826 <_vsniprintf_r+0x1a>
 801181a:	238b      	movs	r3, #139	@ 0x8b
 801181c:	6003      	str	r3, [r0, #0]
 801181e:	2001      	movs	r0, #1
 8011820:	4240      	negs	r0, r0
 8011822:	b01b      	add	sp, #108	@ 0x6c
 8011824:	bd30      	pop	{r4, r5, pc}
 8011826:	2382      	movs	r3, #130	@ 0x82
 8011828:	4668      	mov	r0, sp
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	8183      	strh	r3, [r0, #12]
 801182e:	2300      	movs	r3, #0
 8011830:	9100      	str	r1, [sp, #0]
 8011832:	9104      	str	r1, [sp, #16]
 8011834:	429c      	cmp	r4, r3
 8011836:	d000      	beq.n	801183a <_vsniprintf_r+0x2e>
 8011838:	1e63      	subs	r3, r4, #1
 801183a:	9302      	str	r3, [sp, #8]
 801183c:	9305      	str	r3, [sp, #20]
 801183e:	2301      	movs	r3, #1
 8011840:	4669      	mov	r1, sp
 8011842:	425b      	negs	r3, r3
 8011844:	81cb      	strh	r3, [r1, #14]
 8011846:	0028      	movs	r0, r5
 8011848:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801184a:	f001 fc5f 	bl	801310c <_svfiprintf_r>
 801184e:	1c43      	adds	r3, r0, #1
 8011850:	da01      	bge.n	8011856 <_vsniprintf_r+0x4a>
 8011852:	238b      	movs	r3, #139	@ 0x8b
 8011854:	602b      	str	r3, [r5, #0]
 8011856:	2c00      	cmp	r4, #0
 8011858:	d0e3      	beq.n	8011822 <_vsniprintf_r+0x16>
 801185a:	2200      	movs	r2, #0
 801185c:	9b00      	ldr	r3, [sp, #0]
 801185e:	701a      	strb	r2, [r3, #0]
 8011860:	e7df      	b.n	8011822 <_vsniprintf_r+0x16>
	...

08011864 <vsniprintf>:
 8011864:	b513      	push	{r0, r1, r4, lr}
 8011866:	4c04      	ldr	r4, [pc, #16]	@ (8011878 <vsniprintf+0x14>)
 8011868:	9300      	str	r3, [sp, #0]
 801186a:	0013      	movs	r3, r2
 801186c:	000a      	movs	r2, r1
 801186e:	0001      	movs	r1, r0
 8011870:	6820      	ldr	r0, [r4, #0]
 8011872:	f7ff ffcb 	bl	801180c <_vsniprintf_r>
 8011876:	bd16      	pop	{r1, r2, r4, pc}
 8011878:	20000158 	.word	0x20000158

0801187c <memset>:
 801187c:	0003      	movs	r3, r0
 801187e:	1882      	adds	r2, r0, r2
 8011880:	4293      	cmp	r3, r2
 8011882:	d100      	bne.n	8011886 <memset+0xa>
 8011884:	4770      	bx	lr
 8011886:	7019      	strb	r1, [r3, #0]
 8011888:	3301      	adds	r3, #1
 801188a:	e7f9      	b.n	8011880 <memset+0x4>

0801188c <strncpy>:
 801188c:	0003      	movs	r3, r0
 801188e:	b530      	push	{r4, r5, lr}
 8011890:	001d      	movs	r5, r3
 8011892:	2a00      	cmp	r2, #0
 8011894:	d006      	beq.n	80118a4 <strncpy+0x18>
 8011896:	780c      	ldrb	r4, [r1, #0]
 8011898:	3a01      	subs	r2, #1
 801189a:	3301      	adds	r3, #1
 801189c:	702c      	strb	r4, [r5, #0]
 801189e:	3101      	adds	r1, #1
 80118a0:	2c00      	cmp	r4, #0
 80118a2:	d1f5      	bne.n	8011890 <strncpy+0x4>
 80118a4:	2100      	movs	r1, #0
 80118a6:	189a      	adds	r2, r3, r2
 80118a8:	4293      	cmp	r3, r2
 80118aa:	d100      	bne.n	80118ae <strncpy+0x22>
 80118ac:	bd30      	pop	{r4, r5, pc}
 80118ae:	7019      	strb	r1, [r3, #0]
 80118b0:	3301      	adds	r3, #1
 80118b2:	e7f9      	b.n	80118a8 <strncpy+0x1c>

080118b4 <strstr>:
 80118b4:	780a      	ldrb	r2, [r1, #0]
 80118b6:	b530      	push	{r4, r5, lr}
 80118b8:	2a00      	cmp	r2, #0
 80118ba:	d10c      	bne.n	80118d6 <strstr+0x22>
 80118bc:	bd30      	pop	{r4, r5, pc}
 80118be:	429a      	cmp	r2, r3
 80118c0:	d108      	bne.n	80118d4 <strstr+0x20>
 80118c2:	2301      	movs	r3, #1
 80118c4:	5ccc      	ldrb	r4, [r1, r3]
 80118c6:	2c00      	cmp	r4, #0
 80118c8:	d0f8      	beq.n	80118bc <strstr+0x8>
 80118ca:	5cc5      	ldrb	r5, [r0, r3]
 80118cc:	42a5      	cmp	r5, r4
 80118ce:	d101      	bne.n	80118d4 <strstr+0x20>
 80118d0:	3301      	adds	r3, #1
 80118d2:	e7f7      	b.n	80118c4 <strstr+0x10>
 80118d4:	3001      	adds	r0, #1
 80118d6:	7803      	ldrb	r3, [r0, #0]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1f0      	bne.n	80118be <strstr+0xa>
 80118dc:	0018      	movs	r0, r3
 80118de:	e7ed      	b.n	80118bc <strstr+0x8>

080118e0 <_localeconv_r>:
 80118e0:	4800      	ldr	r0, [pc, #0]	@ (80118e4 <_localeconv_r+0x4>)
 80118e2:	4770      	bx	lr
 80118e4:	20000298 	.word	0x20000298

080118e8 <_close_r>:
 80118e8:	2300      	movs	r3, #0
 80118ea:	b570      	push	{r4, r5, r6, lr}
 80118ec:	4d06      	ldr	r5, [pc, #24]	@ (8011908 <_close_r+0x20>)
 80118ee:	0004      	movs	r4, r0
 80118f0:	0008      	movs	r0, r1
 80118f2:	602b      	str	r3, [r5, #0]
 80118f4:	f7f6 f912 	bl	8007b1c <_close>
 80118f8:	1c43      	adds	r3, r0, #1
 80118fa:	d103      	bne.n	8011904 <_close_r+0x1c>
 80118fc:	682b      	ldr	r3, [r5, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d000      	beq.n	8011904 <_close_r+0x1c>
 8011902:	6023      	str	r3, [r4, #0]
 8011904:	bd70      	pop	{r4, r5, r6, pc}
 8011906:	46c0      	nop			@ (mov r8, r8)
 8011908:	2000374c 	.word	0x2000374c

0801190c <_lseek_r>:
 801190c:	b570      	push	{r4, r5, r6, lr}
 801190e:	0004      	movs	r4, r0
 8011910:	0008      	movs	r0, r1
 8011912:	0011      	movs	r1, r2
 8011914:	001a      	movs	r2, r3
 8011916:	2300      	movs	r3, #0
 8011918:	4d05      	ldr	r5, [pc, #20]	@ (8011930 <_lseek_r+0x24>)
 801191a:	602b      	str	r3, [r5, #0]
 801191c:	f7f6 f91f 	bl	8007b5e <_lseek>
 8011920:	1c43      	adds	r3, r0, #1
 8011922:	d103      	bne.n	801192c <_lseek_r+0x20>
 8011924:	682b      	ldr	r3, [r5, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d000      	beq.n	801192c <_lseek_r+0x20>
 801192a:	6023      	str	r3, [r4, #0]
 801192c:	bd70      	pop	{r4, r5, r6, pc}
 801192e:	46c0      	nop			@ (mov r8, r8)
 8011930:	2000374c 	.word	0x2000374c

08011934 <_read_r>:
 8011934:	b570      	push	{r4, r5, r6, lr}
 8011936:	0004      	movs	r4, r0
 8011938:	0008      	movs	r0, r1
 801193a:	0011      	movs	r1, r2
 801193c:	001a      	movs	r2, r3
 801193e:	2300      	movs	r3, #0
 8011940:	4d05      	ldr	r5, [pc, #20]	@ (8011958 <_read_r+0x24>)
 8011942:	602b      	str	r3, [r5, #0]
 8011944:	f7f6 f8cd 	bl	8007ae2 <_read>
 8011948:	1c43      	adds	r3, r0, #1
 801194a:	d103      	bne.n	8011954 <_read_r+0x20>
 801194c:	682b      	ldr	r3, [r5, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d000      	beq.n	8011954 <_read_r+0x20>
 8011952:	6023      	str	r3, [r4, #0]
 8011954:	bd70      	pop	{r4, r5, r6, pc}
 8011956:	46c0      	nop			@ (mov r8, r8)
 8011958:	2000374c 	.word	0x2000374c

0801195c <_write_r>:
 801195c:	b570      	push	{r4, r5, r6, lr}
 801195e:	0004      	movs	r4, r0
 8011960:	0008      	movs	r0, r1
 8011962:	0011      	movs	r1, r2
 8011964:	001a      	movs	r2, r3
 8011966:	2300      	movs	r3, #0
 8011968:	4d05      	ldr	r5, [pc, #20]	@ (8011980 <_write_r+0x24>)
 801196a:	602b      	str	r3, [r5, #0]
 801196c:	f7f6 fd1a 	bl	80083a4 <_write>
 8011970:	1c43      	adds	r3, r0, #1
 8011972:	d103      	bne.n	801197c <_write_r+0x20>
 8011974:	682b      	ldr	r3, [r5, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d000      	beq.n	801197c <_write_r+0x20>
 801197a:	6023      	str	r3, [r4, #0]
 801197c:	bd70      	pop	{r4, r5, r6, pc}
 801197e:	46c0      	nop			@ (mov r8, r8)
 8011980:	2000374c 	.word	0x2000374c

08011984 <__errno>:
 8011984:	4b01      	ldr	r3, [pc, #4]	@ (801198c <__errno+0x8>)
 8011986:	6818      	ldr	r0, [r3, #0]
 8011988:	4770      	bx	lr
 801198a:	46c0      	nop			@ (mov r8, r8)
 801198c:	20000158 	.word	0x20000158

08011990 <__libc_init_array>:
 8011990:	b570      	push	{r4, r5, r6, lr}
 8011992:	2600      	movs	r6, #0
 8011994:	4c0c      	ldr	r4, [pc, #48]	@ (80119c8 <__libc_init_array+0x38>)
 8011996:	4d0d      	ldr	r5, [pc, #52]	@ (80119cc <__libc_init_array+0x3c>)
 8011998:	1b64      	subs	r4, r4, r5
 801199a:	10a4      	asrs	r4, r4, #2
 801199c:	42a6      	cmp	r6, r4
 801199e:	d109      	bne.n	80119b4 <__libc_init_array+0x24>
 80119a0:	2600      	movs	r6, #0
 80119a2:	f002 fd49 	bl	8014438 <_init>
 80119a6:	4c0a      	ldr	r4, [pc, #40]	@ (80119d0 <__libc_init_array+0x40>)
 80119a8:	4d0a      	ldr	r5, [pc, #40]	@ (80119d4 <__libc_init_array+0x44>)
 80119aa:	1b64      	subs	r4, r4, r5
 80119ac:	10a4      	asrs	r4, r4, #2
 80119ae:	42a6      	cmp	r6, r4
 80119b0:	d105      	bne.n	80119be <__libc_init_array+0x2e>
 80119b2:	bd70      	pop	{r4, r5, r6, pc}
 80119b4:	00b3      	lsls	r3, r6, #2
 80119b6:	58eb      	ldr	r3, [r5, r3]
 80119b8:	4798      	blx	r3
 80119ba:	3601      	adds	r6, #1
 80119bc:	e7ee      	b.n	801199c <__libc_init_array+0xc>
 80119be:	00b3      	lsls	r3, r6, #2
 80119c0:	58eb      	ldr	r3, [r5, r3]
 80119c2:	4798      	blx	r3
 80119c4:	3601      	adds	r6, #1
 80119c6:	e7f2      	b.n	80119ae <__libc_init_array+0x1e>
 80119c8:	08027110 	.word	0x08027110
 80119cc:	08027110 	.word	0x08027110
 80119d0:	08027114 	.word	0x08027114
 80119d4:	08027110 	.word	0x08027110

080119d8 <__retarget_lock_init_recursive>:
 80119d8:	4770      	bx	lr

080119da <__retarget_lock_acquire_recursive>:
 80119da:	4770      	bx	lr

080119dc <__retarget_lock_release_recursive>:
 80119dc:	4770      	bx	lr

080119de <memchr>:
 80119de:	b2c9      	uxtb	r1, r1
 80119e0:	1882      	adds	r2, r0, r2
 80119e2:	4290      	cmp	r0, r2
 80119e4:	d101      	bne.n	80119ea <memchr+0xc>
 80119e6:	2000      	movs	r0, #0
 80119e8:	4770      	bx	lr
 80119ea:	7803      	ldrb	r3, [r0, #0]
 80119ec:	428b      	cmp	r3, r1
 80119ee:	d0fb      	beq.n	80119e8 <memchr+0xa>
 80119f0:	3001      	adds	r0, #1
 80119f2:	e7f6      	b.n	80119e2 <memchr+0x4>

080119f4 <quorem>:
 80119f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119f6:	6902      	ldr	r2, [r0, #16]
 80119f8:	690f      	ldr	r7, [r1, #16]
 80119fa:	b087      	sub	sp, #28
 80119fc:	0006      	movs	r6, r0
 80119fe:	000b      	movs	r3, r1
 8011a00:	2000      	movs	r0, #0
 8011a02:	9102      	str	r1, [sp, #8]
 8011a04:	42ba      	cmp	r2, r7
 8011a06:	db6d      	blt.n	8011ae4 <quorem+0xf0>
 8011a08:	3f01      	subs	r7, #1
 8011a0a:	00bc      	lsls	r4, r7, #2
 8011a0c:	3314      	adds	r3, #20
 8011a0e:	9305      	str	r3, [sp, #20]
 8011a10:	191b      	adds	r3, r3, r4
 8011a12:	9303      	str	r3, [sp, #12]
 8011a14:	0033      	movs	r3, r6
 8011a16:	3314      	adds	r3, #20
 8011a18:	191c      	adds	r4, r3, r4
 8011a1a:	9301      	str	r3, [sp, #4]
 8011a1c:	6823      	ldr	r3, [r4, #0]
 8011a1e:	9304      	str	r3, [sp, #16]
 8011a20:	9b03      	ldr	r3, [sp, #12]
 8011a22:	9804      	ldr	r0, [sp, #16]
 8011a24:	681d      	ldr	r5, [r3, #0]
 8011a26:	3501      	adds	r5, #1
 8011a28:	0029      	movs	r1, r5
 8011a2a:	f7ee fbb1 	bl	8000190 <__udivsi3>
 8011a2e:	9b04      	ldr	r3, [sp, #16]
 8011a30:	9000      	str	r0, [sp, #0]
 8011a32:	42ab      	cmp	r3, r5
 8011a34:	d32b      	bcc.n	8011a8e <quorem+0x9a>
 8011a36:	9b05      	ldr	r3, [sp, #20]
 8011a38:	9d01      	ldr	r5, [sp, #4]
 8011a3a:	469c      	mov	ip, r3
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	9305      	str	r3, [sp, #20]
 8011a40:	9304      	str	r3, [sp, #16]
 8011a42:	4662      	mov	r2, ip
 8011a44:	ca08      	ldmia	r2!, {r3}
 8011a46:	6828      	ldr	r0, [r5, #0]
 8011a48:	4694      	mov	ip, r2
 8011a4a:	9a00      	ldr	r2, [sp, #0]
 8011a4c:	b299      	uxth	r1, r3
 8011a4e:	4351      	muls	r1, r2
 8011a50:	9a05      	ldr	r2, [sp, #20]
 8011a52:	0c1b      	lsrs	r3, r3, #16
 8011a54:	1889      	adds	r1, r1, r2
 8011a56:	9a00      	ldr	r2, [sp, #0]
 8011a58:	4353      	muls	r3, r2
 8011a5a:	0c0a      	lsrs	r2, r1, #16
 8011a5c:	189b      	adds	r3, r3, r2
 8011a5e:	0c1a      	lsrs	r2, r3, #16
 8011a60:	b289      	uxth	r1, r1
 8011a62:	9205      	str	r2, [sp, #20]
 8011a64:	b282      	uxth	r2, r0
 8011a66:	1a52      	subs	r2, r2, r1
 8011a68:	9904      	ldr	r1, [sp, #16]
 8011a6a:	0c00      	lsrs	r0, r0, #16
 8011a6c:	1852      	adds	r2, r2, r1
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	1411      	asrs	r1, r2, #16
 8011a72:	1ac3      	subs	r3, r0, r3
 8011a74:	185b      	adds	r3, r3, r1
 8011a76:	1419      	asrs	r1, r3, #16
 8011a78:	b292      	uxth	r2, r2
 8011a7a:	041b      	lsls	r3, r3, #16
 8011a7c:	431a      	orrs	r2, r3
 8011a7e:	9b03      	ldr	r3, [sp, #12]
 8011a80:	9104      	str	r1, [sp, #16]
 8011a82:	c504      	stmia	r5!, {r2}
 8011a84:	4563      	cmp	r3, ip
 8011a86:	d2dc      	bcs.n	8011a42 <quorem+0x4e>
 8011a88:	6823      	ldr	r3, [r4, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d030      	beq.n	8011af0 <quorem+0xfc>
 8011a8e:	0030      	movs	r0, r6
 8011a90:	9902      	ldr	r1, [sp, #8]
 8011a92:	f001 f9c5 	bl	8012e20 <__mcmp>
 8011a96:	2800      	cmp	r0, #0
 8011a98:	db23      	blt.n	8011ae2 <quorem+0xee>
 8011a9a:	0034      	movs	r4, r6
 8011a9c:	2500      	movs	r5, #0
 8011a9e:	9902      	ldr	r1, [sp, #8]
 8011aa0:	3414      	adds	r4, #20
 8011aa2:	3114      	adds	r1, #20
 8011aa4:	6823      	ldr	r3, [r4, #0]
 8011aa6:	c901      	ldmia	r1!, {r0}
 8011aa8:	9302      	str	r3, [sp, #8]
 8011aaa:	466b      	mov	r3, sp
 8011aac:	891b      	ldrh	r3, [r3, #8]
 8011aae:	b282      	uxth	r2, r0
 8011ab0:	1a9a      	subs	r2, r3, r2
 8011ab2:	9b02      	ldr	r3, [sp, #8]
 8011ab4:	1952      	adds	r2, r2, r5
 8011ab6:	0c00      	lsrs	r0, r0, #16
 8011ab8:	0c1b      	lsrs	r3, r3, #16
 8011aba:	1a1b      	subs	r3, r3, r0
 8011abc:	1410      	asrs	r0, r2, #16
 8011abe:	181b      	adds	r3, r3, r0
 8011ac0:	141d      	asrs	r5, r3, #16
 8011ac2:	b292      	uxth	r2, r2
 8011ac4:	041b      	lsls	r3, r3, #16
 8011ac6:	431a      	orrs	r2, r3
 8011ac8:	9b03      	ldr	r3, [sp, #12]
 8011aca:	c404      	stmia	r4!, {r2}
 8011acc:	428b      	cmp	r3, r1
 8011ace:	d2e9      	bcs.n	8011aa4 <quorem+0xb0>
 8011ad0:	9a01      	ldr	r2, [sp, #4]
 8011ad2:	00bb      	lsls	r3, r7, #2
 8011ad4:	18d3      	adds	r3, r2, r3
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	2a00      	cmp	r2, #0
 8011ada:	d013      	beq.n	8011b04 <quorem+0x110>
 8011adc:	9b00      	ldr	r3, [sp, #0]
 8011ade:	3301      	adds	r3, #1
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	9800      	ldr	r0, [sp, #0]
 8011ae4:	b007      	add	sp, #28
 8011ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ae8:	6823      	ldr	r3, [r4, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d104      	bne.n	8011af8 <quorem+0x104>
 8011aee:	3f01      	subs	r7, #1
 8011af0:	9b01      	ldr	r3, [sp, #4]
 8011af2:	3c04      	subs	r4, #4
 8011af4:	42a3      	cmp	r3, r4
 8011af6:	d3f7      	bcc.n	8011ae8 <quorem+0xf4>
 8011af8:	6137      	str	r7, [r6, #16]
 8011afa:	e7c8      	b.n	8011a8e <quorem+0x9a>
 8011afc:	681a      	ldr	r2, [r3, #0]
 8011afe:	2a00      	cmp	r2, #0
 8011b00:	d104      	bne.n	8011b0c <quorem+0x118>
 8011b02:	3f01      	subs	r7, #1
 8011b04:	9a01      	ldr	r2, [sp, #4]
 8011b06:	3b04      	subs	r3, #4
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d3f7      	bcc.n	8011afc <quorem+0x108>
 8011b0c:	6137      	str	r7, [r6, #16]
 8011b0e:	e7e5      	b.n	8011adc <quorem+0xe8>

08011b10 <_dtoa_r>:
 8011b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b12:	0014      	movs	r4, r2
 8011b14:	001d      	movs	r5, r3
 8011b16:	69c6      	ldr	r6, [r0, #28]
 8011b18:	b09d      	sub	sp, #116	@ 0x74
 8011b1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8011b1c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8011b1e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8011b20:	9003      	str	r0, [sp, #12]
 8011b22:	2e00      	cmp	r6, #0
 8011b24:	d10f      	bne.n	8011b46 <_dtoa_r+0x36>
 8011b26:	2010      	movs	r0, #16
 8011b28:	f000 fe30 	bl	801278c <malloc>
 8011b2c:	9b03      	ldr	r3, [sp, #12]
 8011b2e:	1e02      	subs	r2, r0, #0
 8011b30:	61d8      	str	r0, [r3, #28]
 8011b32:	d104      	bne.n	8011b3e <_dtoa_r+0x2e>
 8011b34:	21ef      	movs	r1, #239	@ 0xef
 8011b36:	4bc7      	ldr	r3, [pc, #796]	@ (8011e54 <_dtoa_r+0x344>)
 8011b38:	48c7      	ldr	r0, [pc, #796]	@ (8011e58 <_dtoa_r+0x348>)
 8011b3a:	f001 feab 	bl	8013894 <__assert_func>
 8011b3e:	6046      	str	r6, [r0, #4]
 8011b40:	6086      	str	r6, [r0, #8]
 8011b42:	6006      	str	r6, [r0, #0]
 8011b44:	60c6      	str	r6, [r0, #12]
 8011b46:	9b03      	ldr	r3, [sp, #12]
 8011b48:	69db      	ldr	r3, [r3, #28]
 8011b4a:	6819      	ldr	r1, [r3, #0]
 8011b4c:	2900      	cmp	r1, #0
 8011b4e:	d00b      	beq.n	8011b68 <_dtoa_r+0x58>
 8011b50:	685a      	ldr	r2, [r3, #4]
 8011b52:	2301      	movs	r3, #1
 8011b54:	4093      	lsls	r3, r2
 8011b56:	604a      	str	r2, [r1, #4]
 8011b58:	608b      	str	r3, [r1, #8]
 8011b5a:	9803      	ldr	r0, [sp, #12]
 8011b5c:	f000 ff16 	bl	801298c <_Bfree>
 8011b60:	2200      	movs	r2, #0
 8011b62:	9b03      	ldr	r3, [sp, #12]
 8011b64:	69db      	ldr	r3, [r3, #28]
 8011b66:	601a      	str	r2, [r3, #0]
 8011b68:	2d00      	cmp	r5, #0
 8011b6a:	da1e      	bge.n	8011baa <_dtoa_r+0x9a>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	603b      	str	r3, [r7, #0]
 8011b70:	006b      	lsls	r3, r5, #1
 8011b72:	085b      	lsrs	r3, r3, #1
 8011b74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b76:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011b78:	4bb8      	ldr	r3, [pc, #736]	@ (8011e5c <_dtoa_r+0x34c>)
 8011b7a:	4ab8      	ldr	r2, [pc, #736]	@ (8011e5c <_dtoa_r+0x34c>)
 8011b7c:	403b      	ands	r3, r7
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d116      	bne.n	8011bb0 <_dtoa_r+0xa0>
 8011b82:	4bb7      	ldr	r3, [pc, #732]	@ (8011e60 <_dtoa_r+0x350>)
 8011b84:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011b86:	6013      	str	r3, [r2, #0]
 8011b88:	033b      	lsls	r3, r7, #12
 8011b8a:	0b1b      	lsrs	r3, r3, #12
 8011b8c:	4323      	orrs	r3, r4
 8011b8e:	d101      	bne.n	8011b94 <_dtoa_r+0x84>
 8011b90:	f000 fd83 	bl	801269a <_dtoa_r+0xb8a>
 8011b94:	4bb3      	ldr	r3, [pc, #716]	@ (8011e64 <_dtoa_r+0x354>)
 8011b96:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8011b98:	9308      	str	r3, [sp, #32]
 8011b9a:	2a00      	cmp	r2, #0
 8011b9c:	d002      	beq.n	8011ba4 <_dtoa_r+0x94>
 8011b9e:	4bb2      	ldr	r3, [pc, #712]	@ (8011e68 <_dtoa_r+0x358>)
 8011ba0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8011ba2:	6013      	str	r3, [r2, #0]
 8011ba4:	9808      	ldr	r0, [sp, #32]
 8011ba6:	b01d      	add	sp, #116	@ 0x74
 8011ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011baa:	2300      	movs	r3, #0
 8011bac:	603b      	str	r3, [r7, #0]
 8011bae:	e7e2      	b.n	8011b76 <_dtoa_r+0x66>
 8011bb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011bb4:	9212      	str	r2, [sp, #72]	@ 0x48
 8011bb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011bb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011bba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	f7ee fc6c 	bl	800049c <__aeabi_dcmpeq>
 8011bc4:	1e06      	subs	r6, r0, #0
 8011bc6:	d00b      	beq.n	8011be0 <_dtoa_r+0xd0>
 8011bc8:	2301      	movs	r3, #1
 8011bca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011bcc:	6013      	str	r3, [r2, #0]
 8011bce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d002      	beq.n	8011bda <_dtoa_r+0xca>
 8011bd4:	4ba5      	ldr	r3, [pc, #660]	@ (8011e6c <_dtoa_r+0x35c>)
 8011bd6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8011bd8:	6013      	str	r3, [r2, #0]
 8011bda:	4ba5      	ldr	r3, [pc, #660]	@ (8011e70 <_dtoa_r+0x360>)
 8011bdc:	9308      	str	r3, [sp, #32]
 8011bde:	e7e1      	b.n	8011ba4 <_dtoa_r+0x94>
 8011be0:	ab1a      	add	r3, sp, #104	@ 0x68
 8011be2:	9301      	str	r3, [sp, #4]
 8011be4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011be6:	9300      	str	r3, [sp, #0]
 8011be8:	9803      	ldr	r0, [sp, #12]
 8011bea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011bec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011bee:	f001 f9cd 	bl	8012f8c <__d2b>
 8011bf2:	007a      	lsls	r2, r7, #1
 8011bf4:	9005      	str	r0, [sp, #20]
 8011bf6:	0d52      	lsrs	r2, r2, #21
 8011bf8:	d100      	bne.n	8011bfc <_dtoa_r+0xec>
 8011bfa:	e07b      	b.n	8011cf4 <_dtoa_r+0x1e4>
 8011bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011bfe:	9618      	str	r6, [sp, #96]	@ 0x60
 8011c00:	0319      	lsls	r1, r3, #12
 8011c02:	4b9c      	ldr	r3, [pc, #624]	@ (8011e74 <_dtoa_r+0x364>)
 8011c04:	0b09      	lsrs	r1, r1, #12
 8011c06:	430b      	orrs	r3, r1
 8011c08:	499b      	ldr	r1, [pc, #620]	@ (8011e78 <_dtoa_r+0x368>)
 8011c0a:	1857      	adds	r7, r2, r1
 8011c0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011c0e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011c10:	0019      	movs	r1, r3
 8011c12:	2200      	movs	r2, #0
 8011c14:	4b99      	ldr	r3, [pc, #612]	@ (8011e7c <_dtoa_r+0x36c>)
 8011c16:	f7f0 ff9d 	bl	8002b54 <__aeabi_dsub>
 8011c1a:	4a99      	ldr	r2, [pc, #612]	@ (8011e80 <_dtoa_r+0x370>)
 8011c1c:	4b99      	ldr	r3, [pc, #612]	@ (8011e84 <_dtoa_r+0x374>)
 8011c1e:	f7f0 fcd1 	bl	80025c4 <__aeabi_dmul>
 8011c22:	4a99      	ldr	r2, [pc, #612]	@ (8011e88 <_dtoa_r+0x378>)
 8011c24:	4b99      	ldr	r3, [pc, #612]	@ (8011e8c <_dtoa_r+0x37c>)
 8011c26:	f7ef fd25 	bl	8001674 <__aeabi_dadd>
 8011c2a:	0004      	movs	r4, r0
 8011c2c:	0038      	movs	r0, r7
 8011c2e:	000d      	movs	r5, r1
 8011c30:	f7f1 fb8a 	bl	8003348 <__aeabi_i2d>
 8011c34:	4a96      	ldr	r2, [pc, #600]	@ (8011e90 <_dtoa_r+0x380>)
 8011c36:	4b97      	ldr	r3, [pc, #604]	@ (8011e94 <_dtoa_r+0x384>)
 8011c38:	f7f0 fcc4 	bl	80025c4 <__aeabi_dmul>
 8011c3c:	0002      	movs	r2, r0
 8011c3e:	000b      	movs	r3, r1
 8011c40:	0020      	movs	r0, r4
 8011c42:	0029      	movs	r1, r5
 8011c44:	f7ef fd16 	bl	8001674 <__aeabi_dadd>
 8011c48:	0004      	movs	r4, r0
 8011c4a:	000d      	movs	r5, r1
 8011c4c:	f7f1 fb40 	bl	80032d0 <__aeabi_d2iz>
 8011c50:	2200      	movs	r2, #0
 8011c52:	9004      	str	r0, [sp, #16]
 8011c54:	2300      	movs	r3, #0
 8011c56:	0020      	movs	r0, r4
 8011c58:	0029      	movs	r1, r5
 8011c5a:	f7ee fc25 	bl	80004a8 <__aeabi_dcmplt>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	d00b      	beq.n	8011c7a <_dtoa_r+0x16a>
 8011c62:	9804      	ldr	r0, [sp, #16]
 8011c64:	f7f1 fb70 	bl	8003348 <__aeabi_i2d>
 8011c68:	002b      	movs	r3, r5
 8011c6a:	0022      	movs	r2, r4
 8011c6c:	f7ee fc16 	bl	800049c <__aeabi_dcmpeq>
 8011c70:	4243      	negs	r3, r0
 8011c72:	4158      	adcs	r0, r3
 8011c74:	9b04      	ldr	r3, [sp, #16]
 8011c76:	1a1b      	subs	r3, r3, r0
 8011c78:	9304      	str	r3, [sp, #16]
 8011c7a:	2301      	movs	r3, #1
 8011c7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011c7e:	9b04      	ldr	r3, [sp, #16]
 8011c80:	2b16      	cmp	r3, #22
 8011c82:	d810      	bhi.n	8011ca6 <_dtoa_r+0x196>
 8011c84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011c86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011c88:	9a04      	ldr	r2, [sp, #16]
 8011c8a:	4b83      	ldr	r3, [pc, #524]	@ (8011e98 <_dtoa_r+0x388>)
 8011c8c:	00d2      	lsls	r2, r2, #3
 8011c8e:	189b      	adds	r3, r3, r2
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	f7ee fc08 	bl	80004a8 <__aeabi_dcmplt>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	d047      	beq.n	8011d2c <_dtoa_r+0x21c>
 8011c9c:	9b04      	ldr	r3, [sp, #16]
 8011c9e:	3b01      	subs	r3, #1
 8011ca0:	9304      	str	r3, [sp, #16]
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	9315      	str	r3, [sp, #84]	@ 0x54
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011caa:	9206      	str	r2, [sp, #24]
 8011cac:	1bdb      	subs	r3, r3, r7
 8011cae:	1e5a      	subs	r2, r3, #1
 8011cb0:	d53e      	bpl.n	8011d30 <_dtoa_r+0x220>
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	9306      	str	r3, [sp, #24]
 8011cb8:	2300      	movs	r3, #0
 8011cba:	930d      	str	r3, [sp, #52]	@ 0x34
 8011cbc:	9b04      	ldr	r3, [sp, #16]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	db38      	blt.n	8011d34 <_dtoa_r+0x224>
 8011cc2:	9a04      	ldr	r2, [sp, #16]
 8011cc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011cc6:	4694      	mov	ip, r2
 8011cc8:	4463      	add	r3, ip
 8011cca:	930d      	str	r3, [sp, #52]	@ 0x34
 8011ccc:	2300      	movs	r3, #0
 8011cce:	9214      	str	r2, [sp, #80]	@ 0x50
 8011cd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011cd2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011cd4:	2401      	movs	r4, #1
 8011cd6:	2b09      	cmp	r3, #9
 8011cd8:	d867      	bhi.n	8011daa <_dtoa_r+0x29a>
 8011cda:	2b05      	cmp	r3, #5
 8011cdc:	dd02      	ble.n	8011ce4 <_dtoa_r+0x1d4>
 8011cde:	2400      	movs	r4, #0
 8011ce0:	3b04      	subs	r3, #4
 8011ce2:	9322      	str	r3, [sp, #136]	@ 0x88
 8011ce4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011ce6:	1e98      	subs	r0, r3, #2
 8011ce8:	2803      	cmp	r0, #3
 8011cea:	d867      	bhi.n	8011dbc <_dtoa_r+0x2ac>
 8011cec:	f7ee fa3c 	bl	8000168 <__gnu_thumb1_case_uqi>
 8011cf0:	5b383a2b 	.word	0x5b383a2b
 8011cf4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011cf6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8011cf8:	18f6      	adds	r6, r6, r3
 8011cfa:	4b68      	ldr	r3, [pc, #416]	@ (8011e9c <_dtoa_r+0x38c>)
 8011cfc:	18f2      	adds	r2, r6, r3
 8011cfe:	2a20      	cmp	r2, #32
 8011d00:	dd0f      	ble.n	8011d22 <_dtoa_r+0x212>
 8011d02:	2340      	movs	r3, #64	@ 0x40
 8011d04:	1a9b      	subs	r3, r3, r2
 8011d06:	409f      	lsls	r7, r3
 8011d08:	4b65      	ldr	r3, [pc, #404]	@ (8011ea0 <_dtoa_r+0x390>)
 8011d0a:	0038      	movs	r0, r7
 8011d0c:	18f3      	adds	r3, r6, r3
 8011d0e:	40dc      	lsrs	r4, r3
 8011d10:	4320      	orrs	r0, r4
 8011d12:	f7f1 fb47 	bl	80033a4 <__aeabi_ui2d>
 8011d16:	2201      	movs	r2, #1
 8011d18:	4b62      	ldr	r3, [pc, #392]	@ (8011ea4 <_dtoa_r+0x394>)
 8011d1a:	1e77      	subs	r7, r6, #1
 8011d1c:	18cb      	adds	r3, r1, r3
 8011d1e:	9218      	str	r2, [sp, #96]	@ 0x60
 8011d20:	e776      	b.n	8011c10 <_dtoa_r+0x100>
 8011d22:	2320      	movs	r3, #32
 8011d24:	0020      	movs	r0, r4
 8011d26:	1a9b      	subs	r3, r3, r2
 8011d28:	4098      	lsls	r0, r3
 8011d2a:	e7f2      	b.n	8011d12 <_dtoa_r+0x202>
 8011d2c:	9015      	str	r0, [sp, #84]	@ 0x54
 8011d2e:	e7ba      	b.n	8011ca6 <_dtoa_r+0x196>
 8011d30:	920d      	str	r2, [sp, #52]	@ 0x34
 8011d32:	e7c3      	b.n	8011cbc <_dtoa_r+0x1ac>
 8011d34:	9b06      	ldr	r3, [sp, #24]
 8011d36:	9a04      	ldr	r2, [sp, #16]
 8011d38:	1a9b      	subs	r3, r3, r2
 8011d3a:	9306      	str	r3, [sp, #24]
 8011d3c:	4253      	negs	r3, r2
 8011d3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011d40:	2300      	movs	r3, #0
 8011d42:	9314      	str	r3, [sp, #80]	@ 0x50
 8011d44:	e7c5      	b.n	8011cd2 <_dtoa_r+0x1c2>
 8011d46:	2300      	movs	r3, #0
 8011d48:	9310      	str	r3, [sp, #64]	@ 0x40
 8011d4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011d4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8011d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	dc13      	bgt.n	8011d7c <_dtoa_r+0x26c>
 8011d54:	2301      	movs	r3, #1
 8011d56:	001a      	movs	r2, r3
 8011d58:	930e      	str	r3, [sp, #56]	@ 0x38
 8011d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d5c:	9223      	str	r2, [sp, #140]	@ 0x8c
 8011d5e:	e00d      	b.n	8011d7c <_dtoa_r+0x26c>
 8011d60:	2301      	movs	r3, #1
 8011d62:	e7f1      	b.n	8011d48 <_dtoa_r+0x238>
 8011d64:	2300      	movs	r3, #0
 8011d66:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011d68:	9310      	str	r3, [sp, #64]	@ 0x40
 8011d6a:	4694      	mov	ip, r2
 8011d6c:	9b04      	ldr	r3, [sp, #16]
 8011d6e:	4463      	add	r3, ip
 8011d70:	930e      	str	r3, [sp, #56]	@ 0x38
 8011d72:	3301      	adds	r3, #1
 8011d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	dc00      	bgt.n	8011d7c <_dtoa_r+0x26c>
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	9a03      	ldr	r2, [sp, #12]
 8011d7e:	2100      	movs	r1, #0
 8011d80:	69d0      	ldr	r0, [r2, #28]
 8011d82:	2204      	movs	r2, #4
 8011d84:	0015      	movs	r5, r2
 8011d86:	3514      	adds	r5, #20
 8011d88:	429d      	cmp	r5, r3
 8011d8a:	d91b      	bls.n	8011dc4 <_dtoa_r+0x2b4>
 8011d8c:	6041      	str	r1, [r0, #4]
 8011d8e:	9803      	ldr	r0, [sp, #12]
 8011d90:	f000 fdb8 	bl	8012904 <_Balloc>
 8011d94:	9008      	str	r0, [sp, #32]
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d117      	bne.n	8011dca <_dtoa_r+0x2ba>
 8011d9a:	21b0      	movs	r1, #176	@ 0xb0
 8011d9c:	4b42      	ldr	r3, [pc, #264]	@ (8011ea8 <_dtoa_r+0x398>)
 8011d9e:	482e      	ldr	r0, [pc, #184]	@ (8011e58 <_dtoa_r+0x348>)
 8011da0:	9a08      	ldr	r2, [sp, #32]
 8011da2:	31ff      	adds	r1, #255	@ 0xff
 8011da4:	e6c9      	b.n	8011b3a <_dtoa_r+0x2a>
 8011da6:	2301      	movs	r3, #1
 8011da8:	e7dd      	b.n	8011d66 <_dtoa_r+0x256>
 8011daa:	2300      	movs	r3, #0
 8011dac:	9410      	str	r4, [sp, #64]	@ 0x40
 8011dae:	9322      	str	r3, [sp, #136]	@ 0x88
 8011db0:	3b01      	subs	r3, #1
 8011db2:	930e      	str	r3, [sp, #56]	@ 0x38
 8011db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011db6:	2200      	movs	r2, #0
 8011db8:	3313      	adds	r3, #19
 8011dba:	e7cf      	b.n	8011d5c <_dtoa_r+0x24c>
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8011dc0:	3b02      	subs	r3, #2
 8011dc2:	e7f6      	b.n	8011db2 <_dtoa_r+0x2a2>
 8011dc4:	3101      	adds	r1, #1
 8011dc6:	0052      	lsls	r2, r2, #1
 8011dc8:	e7dc      	b.n	8011d84 <_dtoa_r+0x274>
 8011dca:	9b03      	ldr	r3, [sp, #12]
 8011dcc:	9a08      	ldr	r2, [sp, #32]
 8011dce:	69db      	ldr	r3, [r3, #28]
 8011dd0:	601a      	str	r2, [r3, #0]
 8011dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011dd4:	2b0e      	cmp	r3, #14
 8011dd6:	d900      	bls.n	8011dda <_dtoa_r+0x2ca>
 8011dd8:	e0d9      	b.n	8011f8e <_dtoa_r+0x47e>
 8011dda:	2c00      	cmp	r4, #0
 8011ddc:	d100      	bne.n	8011de0 <_dtoa_r+0x2d0>
 8011dde:	e0d6      	b.n	8011f8e <_dtoa_r+0x47e>
 8011de0:	9b04      	ldr	r3, [sp, #16]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	dd64      	ble.n	8011eb0 <_dtoa_r+0x3a0>
 8011de6:	210f      	movs	r1, #15
 8011de8:	9a04      	ldr	r2, [sp, #16]
 8011dea:	4b2b      	ldr	r3, [pc, #172]	@ (8011e98 <_dtoa_r+0x388>)
 8011dec:	400a      	ands	r2, r1
 8011dee:	00d2      	lsls	r2, r2, #3
 8011df0:	189b      	adds	r3, r3, r2
 8011df2:	681e      	ldr	r6, [r3, #0]
 8011df4:	685f      	ldr	r7, [r3, #4]
 8011df6:	9b04      	ldr	r3, [sp, #16]
 8011df8:	2402      	movs	r4, #2
 8011dfa:	111d      	asrs	r5, r3, #4
 8011dfc:	05db      	lsls	r3, r3, #23
 8011dfe:	d50a      	bpl.n	8011e16 <_dtoa_r+0x306>
 8011e00:	4b2a      	ldr	r3, [pc, #168]	@ (8011eac <_dtoa_r+0x39c>)
 8011e02:	400d      	ands	r5, r1
 8011e04:	6a1a      	ldr	r2, [r3, #32]
 8011e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011e0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011e0c:	f7ef ff96 	bl	8001d3c <__aeabi_ddiv>
 8011e10:	900a      	str	r0, [sp, #40]	@ 0x28
 8011e12:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011e14:	3401      	adds	r4, #1
 8011e16:	4b25      	ldr	r3, [pc, #148]	@ (8011eac <_dtoa_r+0x39c>)
 8011e18:	930c      	str	r3, [sp, #48]	@ 0x30
 8011e1a:	2d00      	cmp	r5, #0
 8011e1c:	d108      	bne.n	8011e30 <_dtoa_r+0x320>
 8011e1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011e20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011e22:	0032      	movs	r2, r6
 8011e24:	003b      	movs	r3, r7
 8011e26:	f7ef ff89 	bl	8001d3c <__aeabi_ddiv>
 8011e2a:	900a      	str	r0, [sp, #40]	@ 0x28
 8011e2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011e2e:	e05a      	b.n	8011ee6 <_dtoa_r+0x3d6>
 8011e30:	2301      	movs	r3, #1
 8011e32:	421d      	tst	r5, r3
 8011e34:	d009      	beq.n	8011e4a <_dtoa_r+0x33a>
 8011e36:	18e4      	adds	r4, r4, r3
 8011e38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e3a:	0030      	movs	r0, r6
 8011e3c:	681a      	ldr	r2, [r3, #0]
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	0039      	movs	r1, r7
 8011e42:	f7f0 fbbf 	bl	80025c4 <__aeabi_dmul>
 8011e46:	0006      	movs	r6, r0
 8011e48:	000f      	movs	r7, r1
 8011e4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e4c:	106d      	asrs	r5, r5, #1
 8011e4e:	3308      	adds	r3, #8
 8011e50:	e7e2      	b.n	8011e18 <_dtoa_r+0x308>
 8011e52:	46c0      	nop			@ (mov r8, r8)
 8011e54:	08026dc1 	.word	0x08026dc1
 8011e58:	08026dd8 	.word	0x08026dd8
 8011e5c:	7ff00000 	.word	0x7ff00000
 8011e60:	0000270f 	.word	0x0000270f
 8011e64:	08026dbd 	.word	0x08026dbd
 8011e68:	08026dc0 	.word	0x08026dc0
 8011e6c:	08026d91 	.word	0x08026d91
 8011e70:	08026d90 	.word	0x08026d90
 8011e74:	3ff00000 	.word	0x3ff00000
 8011e78:	fffffc01 	.word	0xfffffc01
 8011e7c:	3ff80000 	.word	0x3ff80000
 8011e80:	636f4361 	.word	0x636f4361
 8011e84:	3fd287a7 	.word	0x3fd287a7
 8011e88:	8b60c8b3 	.word	0x8b60c8b3
 8011e8c:	3fc68a28 	.word	0x3fc68a28
 8011e90:	509f79fb 	.word	0x509f79fb
 8011e94:	3fd34413 	.word	0x3fd34413
 8011e98:	08026ed0 	.word	0x08026ed0
 8011e9c:	00000432 	.word	0x00000432
 8011ea0:	00000412 	.word	0x00000412
 8011ea4:	fe100000 	.word	0xfe100000
 8011ea8:	08026e30 	.word	0x08026e30
 8011eac:	08026ea8 	.word	0x08026ea8
 8011eb0:	9b04      	ldr	r3, [sp, #16]
 8011eb2:	2402      	movs	r4, #2
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d016      	beq.n	8011ee6 <_dtoa_r+0x3d6>
 8011eb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011eba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011ebc:	220f      	movs	r2, #15
 8011ebe:	425d      	negs	r5, r3
 8011ec0:	402a      	ands	r2, r5
 8011ec2:	4bd7      	ldr	r3, [pc, #860]	@ (8012220 <_dtoa_r+0x710>)
 8011ec4:	00d2      	lsls	r2, r2, #3
 8011ec6:	189b      	adds	r3, r3, r2
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	f7f0 fb7a 	bl	80025c4 <__aeabi_dmul>
 8011ed0:	2701      	movs	r7, #1
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	900a      	str	r0, [sp, #40]	@ 0x28
 8011ed6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011ed8:	4ed2      	ldr	r6, [pc, #840]	@ (8012224 <_dtoa_r+0x714>)
 8011eda:	112d      	asrs	r5, r5, #4
 8011edc:	2d00      	cmp	r5, #0
 8011ede:	d000      	beq.n	8011ee2 <_dtoa_r+0x3d2>
 8011ee0:	e0ba      	b.n	8012058 <_dtoa_r+0x548>
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d1a1      	bne.n	8011e2a <_dtoa_r+0x31a>
 8011ee6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011ee8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011eea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d100      	bne.n	8011ef2 <_dtoa_r+0x3e2>
 8011ef0:	e0bd      	b.n	801206e <_dtoa_r+0x55e>
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	0030      	movs	r0, r6
 8011ef6:	0039      	movs	r1, r7
 8011ef8:	4bcb      	ldr	r3, [pc, #812]	@ (8012228 <_dtoa_r+0x718>)
 8011efa:	f7ee fad5 	bl	80004a8 <__aeabi_dcmplt>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d100      	bne.n	8011f04 <_dtoa_r+0x3f4>
 8011f02:	e0b4      	b.n	801206e <_dtoa_r+0x55e>
 8011f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d100      	bne.n	8011f0c <_dtoa_r+0x3fc>
 8011f0a:	e0b0      	b.n	801206e <_dtoa_r+0x55e>
 8011f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	dd39      	ble.n	8011f86 <_dtoa_r+0x476>
 8011f12:	9b04      	ldr	r3, [sp, #16]
 8011f14:	2200      	movs	r2, #0
 8011f16:	3b01      	subs	r3, #1
 8011f18:	930c      	str	r3, [sp, #48]	@ 0x30
 8011f1a:	0030      	movs	r0, r6
 8011f1c:	4bc3      	ldr	r3, [pc, #780]	@ (801222c <_dtoa_r+0x71c>)
 8011f1e:	0039      	movs	r1, r7
 8011f20:	f7f0 fb50 	bl	80025c4 <__aeabi_dmul>
 8011f24:	900a      	str	r0, [sp, #40]	@ 0x28
 8011f26:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011f28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f2a:	3401      	adds	r4, #1
 8011f2c:	0020      	movs	r0, r4
 8011f2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8011f30:	f7f1 fa0a 	bl	8003348 <__aeabi_i2d>
 8011f34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f38:	f7f0 fb44 	bl	80025c4 <__aeabi_dmul>
 8011f3c:	4bbc      	ldr	r3, [pc, #752]	@ (8012230 <_dtoa_r+0x720>)
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f7ef fb98 	bl	8001674 <__aeabi_dadd>
 8011f44:	4bbb      	ldr	r3, [pc, #748]	@ (8012234 <_dtoa_r+0x724>)
 8011f46:	0006      	movs	r6, r0
 8011f48:	18cf      	adds	r7, r1, r3
 8011f4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d000      	beq.n	8011f52 <_dtoa_r+0x442>
 8011f50:	e091      	b.n	8012076 <_dtoa_r+0x566>
 8011f52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011f54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011f56:	2200      	movs	r2, #0
 8011f58:	4bb7      	ldr	r3, [pc, #732]	@ (8012238 <_dtoa_r+0x728>)
 8011f5a:	f7f0 fdfb 	bl	8002b54 <__aeabi_dsub>
 8011f5e:	0032      	movs	r2, r6
 8011f60:	003b      	movs	r3, r7
 8011f62:	0004      	movs	r4, r0
 8011f64:	000d      	movs	r5, r1
 8011f66:	f7ee fab3 	bl	80004d0 <__aeabi_dcmpgt>
 8011f6a:	2800      	cmp	r0, #0
 8011f6c:	d000      	beq.n	8011f70 <_dtoa_r+0x460>
 8011f6e:	e29d      	b.n	80124ac <_dtoa_r+0x99c>
 8011f70:	2180      	movs	r1, #128	@ 0x80
 8011f72:	0609      	lsls	r1, r1, #24
 8011f74:	187b      	adds	r3, r7, r1
 8011f76:	0032      	movs	r2, r6
 8011f78:	0020      	movs	r0, r4
 8011f7a:	0029      	movs	r1, r5
 8011f7c:	f7ee fa94 	bl	80004a8 <__aeabi_dcmplt>
 8011f80:	2800      	cmp	r0, #0
 8011f82:	d000      	beq.n	8011f86 <_dtoa_r+0x476>
 8011f84:	e130      	b.n	80121e8 <_dtoa_r+0x6d8>
 8011f86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011f88:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8011f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f8c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011f8e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	da00      	bge.n	8011f96 <_dtoa_r+0x486>
 8011f94:	e177      	b.n	8012286 <_dtoa_r+0x776>
 8011f96:	9a04      	ldr	r2, [sp, #16]
 8011f98:	2a0e      	cmp	r2, #14
 8011f9a:	dd00      	ble.n	8011f9e <_dtoa_r+0x48e>
 8011f9c:	e173      	b.n	8012286 <_dtoa_r+0x776>
 8011f9e:	4ba0      	ldr	r3, [pc, #640]	@ (8012220 <_dtoa_r+0x710>)
 8011fa0:	00d2      	lsls	r2, r2, #3
 8011fa2:	189b      	adds	r3, r3, r2
 8011fa4:	685c      	ldr	r4, [r3, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	9306      	str	r3, [sp, #24]
 8011faa:	9407      	str	r4, [sp, #28]
 8011fac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	da03      	bge.n	8011fba <_dtoa_r+0x4aa>
 8011fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	dc00      	bgt.n	8011fba <_dtoa_r+0x4aa>
 8011fb8:	e106      	b.n	80121c8 <_dtoa_r+0x6b8>
 8011fba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011fbc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fc0:	9d08      	ldr	r5, [sp, #32]
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	195b      	adds	r3, r3, r5
 8011fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011fc8:	9a06      	ldr	r2, [sp, #24]
 8011fca:	9b07      	ldr	r3, [sp, #28]
 8011fcc:	0030      	movs	r0, r6
 8011fce:	0039      	movs	r1, r7
 8011fd0:	f7ef feb4 	bl	8001d3c <__aeabi_ddiv>
 8011fd4:	f7f1 f97c 	bl	80032d0 <__aeabi_d2iz>
 8011fd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8011fda:	f7f1 f9b5 	bl	8003348 <__aeabi_i2d>
 8011fde:	9a06      	ldr	r2, [sp, #24]
 8011fe0:	9b07      	ldr	r3, [sp, #28]
 8011fe2:	f7f0 faef 	bl	80025c4 <__aeabi_dmul>
 8011fe6:	0002      	movs	r2, r0
 8011fe8:	000b      	movs	r3, r1
 8011fea:	0030      	movs	r0, r6
 8011fec:	0039      	movs	r1, r7
 8011fee:	f7f0 fdb1 	bl	8002b54 <__aeabi_dsub>
 8011ff2:	002b      	movs	r3, r5
 8011ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ff6:	3501      	adds	r5, #1
 8011ff8:	3230      	adds	r2, #48	@ 0x30
 8011ffa:	701a      	strb	r2, [r3, #0]
 8011ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011ffe:	002c      	movs	r4, r5
 8012000:	429a      	cmp	r2, r3
 8012002:	d000      	beq.n	8012006 <_dtoa_r+0x4f6>
 8012004:	e131      	b.n	801226a <_dtoa_r+0x75a>
 8012006:	0002      	movs	r2, r0
 8012008:	000b      	movs	r3, r1
 801200a:	f7ef fb33 	bl	8001674 <__aeabi_dadd>
 801200e:	9a06      	ldr	r2, [sp, #24]
 8012010:	9b07      	ldr	r3, [sp, #28]
 8012012:	0006      	movs	r6, r0
 8012014:	000f      	movs	r7, r1
 8012016:	f7ee fa5b 	bl	80004d0 <__aeabi_dcmpgt>
 801201a:	2800      	cmp	r0, #0
 801201c:	d000      	beq.n	8012020 <_dtoa_r+0x510>
 801201e:	e10f      	b.n	8012240 <_dtoa_r+0x730>
 8012020:	9a06      	ldr	r2, [sp, #24]
 8012022:	9b07      	ldr	r3, [sp, #28]
 8012024:	0030      	movs	r0, r6
 8012026:	0039      	movs	r1, r7
 8012028:	f7ee fa38 	bl	800049c <__aeabi_dcmpeq>
 801202c:	2800      	cmp	r0, #0
 801202e:	d003      	beq.n	8012038 <_dtoa_r+0x528>
 8012030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012032:	07dd      	lsls	r5, r3, #31
 8012034:	d500      	bpl.n	8012038 <_dtoa_r+0x528>
 8012036:	e103      	b.n	8012240 <_dtoa_r+0x730>
 8012038:	9905      	ldr	r1, [sp, #20]
 801203a:	9803      	ldr	r0, [sp, #12]
 801203c:	f000 fca6 	bl	801298c <_Bfree>
 8012040:	2300      	movs	r3, #0
 8012042:	7023      	strb	r3, [r4, #0]
 8012044:	9b04      	ldr	r3, [sp, #16]
 8012046:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8012048:	3301      	adds	r3, #1
 801204a:	6013      	str	r3, [r2, #0]
 801204c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801204e:	2b00      	cmp	r3, #0
 8012050:	d100      	bne.n	8012054 <_dtoa_r+0x544>
 8012052:	e5a7      	b.n	8011ba4 <_dtoa_r+0x94>
 8012054:	601c      	str	r4, [r3, #0]
 8012056:	e5a5      	b.n	8011ba4 <_dtoa_r+0x94>
 8012058:	423d      	tst	r5, r7
 801205a:	d005      	beq.n	8012068 <_dtoa_r+0x558>
 801205c:	6832      	ldr	r2, [r6, #0]
 801205e:	6873      	ldr	r3, [r6, #4]
 8012060:	f7f0 fab0 	bl	80025c4 <__aeabi_dmul>
 8012064:	003b      	movs	r3, r7
 8012066:	3401      	adds	r4, #1
 8012068:	106d      	asrs	r5, r5, #1
 801206a:	3608      	adds	r6, #8
 801206c:	e736      	b.n	8011edc <_dtoa_r+0x3cc>
 801206e:	9b04      	ldr	r3, [sp, #16]
 8012070:	930c      	str	r3, [sp, #48]	@ 0x30
 8012072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012074:	e75a      	b.n	8011f2c <_dtoa_r+0x41c>
 8012076:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012078:	4b69      	ldr	r3, [pc, #420]	@ (8012220 <_dtoa_r+0x710>)
 801207a:	3a01      	subs	r2, #1
 801207c:	00d2      	lsls	r2, r2, #3
 801207e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8012080:	189b      	adds	r3, r3, r2
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	2900      	cmp	r1, #0
 8012088:	d04c      	beq.n	8012124 <_dtoa_r+0x614>
 801208a:	2000      	movs	r0, #0
 801208c:	496b      	ldr	r1, [pc, #428]	@ (801223c <_dtoa_r+0x72c>)
 801208e:	f7ef fe55 	bl	8001d3c <__aeabi_ddiv>
 8012092:	0032      	movs	r2, r6
 8012094:	003b      	movs	r3, r7
 8012096:	f7f0 fd5d 	bl	8002b54 <__aeabi_dsub>
 801209a:	9a08      	ldr	r2, [sp, #32]
 801209c:	0006      	movs	r6, r0
 801209e:	4694      	mov	ip, r2
 80120a0:	000f      	movs	r7, r1
 80120a2:	9b08      	ldr	r3, [sp, #32]
 80120a4:	9316      	str	r3, [sp, #88]	@ 0x58
 80120a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80120a8:	4463      	add	r3, ip
 80120aa:	9311      	str	r3, [sp, #68]	@ 0x44
 80120ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80120ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80120b0:	f7f1 f90e 	bl	80032d0 <__aeabi_d2iz>
 80120b4:	0005      	movs	r5, r0
 80120b6:	f7f1 f947 	bl	8003348 <__aeabi_i2d>
 80120ba:	0002      	movs	r2, r0
 80120bc:	000b      	movs	r3, r1
 80120be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80120c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80120c2:	f7f0 fd47 	bl	8002b54 <__aeabi_dsub>
 80120c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80120c8:	3530      	adds	r5, #48	@ 0x30
 80120ca:	1c5c      	adds	r4, r3, #1
 80120cc:	701d      	strb	r5, [r3, #0]
 80120ce:	0032      	movs	r2, r6
 80120d0:	003b      	movs	r3, r7
 80120d2:	900a      	str	r0, [sp, #40]	@ 0x28
 80120d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80120d6:	f7ee f9e7 	bl	80004a8 <__aeabi_dcmplt>
 80120da:	2800      	cmp	r0, #0
 80120dc:	d16a      	bne.n	80121b4 <_dtoa_r+0x6a4>
 80120de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120e2:	2000      	movs	r0, #0
 80120e4:	4950      	ldr	r1, [pc, #320]	@ (8012228 <_dtoa_r+0x718>)
 80120e6:	f7f0 fd35 	bl	8002b54 <__aeabi_dsub>
 80120ea:	0032      	movs	r2, r6
 80120ec:	003b      	movs	r3, r7
 80120ee:	f7ee f9db 	bl	80004a8 <__aeabi_dcmplt>
 80120f2:	2800      	cmp	r0, #0
 80120f4:	d000      	beq.n	80120f8 <_dtoa_r+0x5e8>
 80120f6:	e0a5      	b.n	8012244 <_dtoa_r+0x734>
 80120f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80120fa:	42a3      	cmp	r3, r4
 80120fc:	d100      	bne.n	8012100 <_dtoa_r+0x5f0>
 80120fe:	e742      	b.n	8011f86 <_dtoa_r+0x476>
 8012100:	2200      	movs	r2, #0
 8012102:	0030      	movs	r0, r6
 8012104:	0039      	movs	r1, r7
 8012106:	4b49      	ldr	r3, [pc, #292]	@ (801222c <_dtoa_r+0x71c>)
 8012108:	f7f0 fa5c 	bl	80025c4 <__aeabi_dmul>
 801210c:	2200      	movs	r2, #0
 801210e:	0006      	movs	r6, r0
 8012110:	000f      	movs	r7, r1
 8012112:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012116:	4b45      	ldr	r3, [pc, #276]	@ (801222c <_dtoa_r+0x71c>)
 8012118:	f7f0 fa54 	bl	80025c4 <__aeabi_dmul>
 801211c:	9416      	str	r4, [sp, #88]	@ 0x58
 801211e:	900a      	str	r0, [sp, #40]	@ 0x28
 8012120:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012122:	e7c3      	b.n	80120ac <_dtoa_r+0x59c>
 8012124:	0030      	movs	r0, r6
 8012126:	0039      	movs	r1, r7
 8012128:	f7f0 fa4c 	bl	80025c4 <__aeabi_dmul>
 801212c:	9d08      	ldr	r5, [sp, #32]
 801212e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012130:	002b      	movs	r3, r5
 8012132:	4694      	mov	ip, r2
 8012134:	9016      	str	r0, [sp, #88]	@ 0x58
 8012136:	9117      	str	r1, [sp, #92]	@ 0x5c
 8012138:	4463      	add	r3, ip
 801213a:	9319      	str	r3, [sp, #100]	@ 0x64
 801213c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801213e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012140:	f7f1 f8c6 	bl	80032d0 <__aeabi_d2iz>
 8012144:	0004      	movs	r4, r0
 8012146:	f7f1 f8ff 	bl	8003348 <__aeabi_i2d>
 801214a:	000b      	movs	r3, r1
 801214c:	0002      	movs	r2, r0
 801214e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012152:	f7f0 fcff 	bl	8002b54 <__aeabi_dsub>
 8012156:	3430      	adds	r4, #48	@ 0x30
 8012158:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801215a:	702c      	strb	r4, [r5, #0]
 801215c:	3501      	adds	r5, #1
 801215e:	0006      	movs	r6, r0
 8012160:	000f      	movs	r7, r1
 8012162:	42ab      	cmp	r3, r5
 8012164:	d129      	bne.n	80121ba <_dtoa_r+0x6aa>
 8012166:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8012168:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801216a:	9b08      	ldr	r3, [sp, #32]
 801216c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801216e:	469c      	mov	ip, r3
 8012170:	2200      	movs	r2, #0
 8012172:	4b32      	ldr	r3, [pc, #200]	@ (801223c <_dtoa_r+0x72c>)
 8012174:	4464      	add	r4, ip
 8012176:	f7ef fa7d 	bl	8001674 <__aeabi_dadd>
 801217a:	0002      	movs	r2, r0
 801217c:	000b      	movs	r3, r1
 801217e:	0030      	movs	r0, r6
 8012180:	0039      	movs	r1, r7
 8012182:	f7ee f9a5 	bl	80004d0 <__aeabi_dcmpgt>
 8012186:	2800      	cmp	r0, #0
 8012188:	d15c      	bne.n	8012244 <_dtoa_r+0x734>
 801218a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801218c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801218e:	2000      	movs	r0, #0
 8012190:	492a      	ldr	r1, [pc, #168]	@ (801223c <_dtoa_r+0x72c>)
 8012192:	f7f0 fcdf 	bl	8002b54 <__aeabi_dsub>
 8012196:	0002      	movs	r2, r0
 8012198:	000b      	movs	r3, r1
 801219a:	0030      	movs	r0, r6
 801219c:	0039      	movs	r1, r7
 801219e:	f7ee f983 	bl	80004a8 <__aeabi_dcmplt>
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d100      	bne.n	80121a8 <_dtoa_r+0x698>
 80121a6:	e6ee      	b.n	8011f86 <_dtoa_r+0x476>
 80121a8:	0023      	movs	r3, r4
 80121aa:	3c01      	subs	r4, #1
 80121ac:	7822      	ldrb	r2, [r4, #0]
 80121ae:	2a30      	cmp	r2, #48	@ 0x30
 80121b0:	d0fa      	beq.n	80121a8 <_dtoa_r+0x698>
 80121b2:	001c      	movs	r4, r3
 80121b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121b6:	9304      	str	r3, [sp, #16]
 80121b8:	e73e      	b.n	8012038 <_dtoa_r+0x528>
 80121ba:	2200      	movs	r2, #0
 80121bc:	4b1b      	ldr	r3, [pc, #108]	@ (801222c <_dtoa_r+0x71c>)
 80121be:	f7f0 fa01 	bl	80025c4 <__aeabi_dmul>
 80121c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80121c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80121c6:	e7b9      	b.n	801213c <_dtoa_r+0x62c>
 80121c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d10c      	bne.n	80121e8 <_dtoa_r+0x6d8>
 80121ce:	9806      	ldr	r0, [sp, #24]
 80121d0:	9907      	ldr	r1, [sp, #28]
 80121d2:	2200      	movs	r2, #0
 80121d4:	4b18      	ldr	r3, [pc, #96]	@ (8012238 <_dtoa_r+0x728>)
 80121d6:	f7f0 f9f5 	bl	80025c4 <__aeabi_dmul>
 80121da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121de:	f7ee f981 	bl	80004e4 <__aeabi_dcmpge>
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d100      	bne.n	80121e8 <_dtoa_r+0x6d8>
 80121e6:	e164      	b.n	80124b2 <_dtoa_r+0x9a2>
 80121e8:	2600      	movs	r6, #0
 80121ea:	0037      	movs	r7, r6
 80121ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80121ee:	9c08      	ldr	r4, [sp, #32]
 80121f0:	43db      	mvns	r3, r3
 80121f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80121f4:	2300      	movs	r3, #0
 80121f6:	9304      	str	r3, [sp, #16]
 80121f8:	0031      	movs	r1, r6
 80121fa:	9803      	ldr	r0, [sp, #12]
 80121fc:	f000 fbc6 	bl	801298c <_Bfree>
 8012200:	2f00      	cmp	r7, #0
 8012202:	d0d7      	beq.n	80121b4 <_dtoa_r+0x6a4>
 8012204:	9b04      	ldr	r3, [sp, #16]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d005      	beq.n	8012216 <_dtoa_r+0x706>
 801220a:	42bb      	cmp	r3, r7
 801220c:	d003      	beq.n	8012216 <_dtoa_r+0x706>
 801220e:	0019      	movs	r1, r3
 8012210:	9803      	ldr	r0, [sp, #12]
 8012212:	f000 fbbb 	bl	801298c <_Bfree>
 8012216:	0039      	movs	r1, r7
 8012218:	9803      	ldr	r0, [sp, #12]
 801221a:	f000 fbb7 	bl	801298c <_Bfree>
 801221e:	e7c9      	b.n	80121b4 <_dtoa_r+0x6a4>
 8012220:	08026ed0 	.word	0x08026ed0
 8012224:	08026ea8 	.word	0x08026ea8
 8012228:	3ff00000 	.word	0x3ff00000
 801222c:	40240000 	.word	0x40240000
 8012230:	401c0000 	.word	0x401c0000
 8012234:	fcc00000 	.word	0xfcc00000
 8012238:	40140000 	.word	0x40140000
 801223c:	3fe00000 	.word	0x3fe00000
 8012240:	9b04      	ldr	r3, [sp, #16]
 8012242:	930c      	str	r3, [sp, #48]	@ 0x30
 8012244:	0023      	movs	r3, r4
 8012246:	001c      	movs	r4, r3
 8012248:	3b01      	subs	r3, #1
 801224a:	781a      	ldrb	r2, [r3, #0]
 801224c:	2a39      	cmp	r2, #57	@ 0x39
 801224e:	d108      	bne.n	8012262 <_dtoa_r+0x752>
 8012250:	9a08      	ldr	r2, [sp, #32]
 8012252:	429a      	cmp	r2, r3
 8012254:	d1f7      	bne.n	8012246 <_dtoa_r+0x736>
 8012256:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012258:	9908      	ldr	r1, [sp, #32]
 801225a:	3201      	adds	r2, #1
 801225c:	920c      	str	r2, [sp, #48]	@ 0x30
 801225e:	2230      	movs	r2, #48	@ 0x30
 8012260:	700a      	strb	r2, [r1, #0]
 8012262:	781a      	ldrb	r2, [r3, #0]
 8012264:	3201      	adds	r2, #1
 8012266:	701a      	strb	r2, [r3, #0]
 8012268:	e7a4      	b.n	80121b4 <_dtoa_r+0x6a4>
 801226a:	2200      	movs	r2, #0
 801226c:	4bc6      	ldr	r3, [pc, #792]	@ (8012588 <_dtoa_r+0xa78>)
 801226e:	f7f0 f9a9 	bl	80025c4 <__aeabi_dmul>
 8012272:	2200      	movs	r2, #0
 8012274:	2300      	movs	r3, #0
 8012276:	0006      	movs	r6, r0
 8012278:	000f      	movs	r7, r1
 801227a:	f7ee f90f 	bl	800049c <__aeabi_dcmpeq>
 801227e:	2800      	cmp	r0, #0
 8012280:	d100      	bne.n	8012284 <_dtoa_r+0x774>
 8012282:	e6a1      	b.n	8011fc8 <_dtoa_r+0x4b8>
 8012284:	e6d8      	b.n	8012038 <_dtoa_r+0x528>
 8012286:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012288:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801228a:	9c06      	ldr	r4, [sp, #24]
 801228c:	2f00      	cmp	r7, #0
 801228e:	d014      	beq.n	80122ba <_dtoa_r+0x7aa>
 8012290:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012292:	2a01      	cmp	r2, #1
 8012294:	dd00      	ble.n	8012298 <_dtoa_r+0x788>
 8012296:	e0c8      	b.n	801242a <_dtoa_r+0x91a>
 8012298:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801229a:	2a00      	cmp	r2, #0
 801229c:	d100      	bne.n	80122a0 <_dtoa_r+0x790>
 801229e:	e0be      	b.n	801241e <_dtoa_r+0x90e>
 80122a0:	4aba      	ldr	r2, [pc, #744]	@ (801258c <_dtoa_r+0xa7c>)
 80122a2:	189b      	adds	r3, r3, r2
 80122a4:	9a06      	ldr	r2, [sp, #24]
 80122a6:	2101      	movs	r1, #1
 80122a8:	18d2      	adds	r2, r2, r3
 80122aa:	9206      	str	r2, [sp, #24]
 80122ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122ae:	9803      	ldr	r0, [sp, #12]
 80122b0:	18d3      	adds	r3, r2, r3
 80122b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80122b4:	f000 fc22 	bl	8012afc <__i2b>
 80122b8:	0007      	movs	r7, r0
 80122ba:	2c00      	cmp	r4, #0
 80122bc:	d00e      	beq.n	80122dc <_dtoa_r+0x7cc>
 80122be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	dd0b      	ble.n	80122dc <_dtoa_r+0x7cc>
 80122c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122c6:	0023      	movs	r3, r4
 80122c8:	4294      	cmp	r4, r2
 80122ca:	dd00      	ble.n	80122ce <_dtoa_r+0x7be>
 80122cc:	0013      	movs	r3, r2
 80122ce:	9a06      	ldr	r2, [sp, #24]
 80122d0:	1ae4      	subs	r4, r4, r3
 80122d2:	1ad2      	subs	r2, r2, r3
 80122d4:	9206      	str	r2, [sp, #24]
 80122d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122d8:	1ad3      	subs	r3, r2, r3
 80122da:	930d      	str	r3, [sp, #52]	@ 0x34
 80122dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d01f      	beq.n	8012322 <_dtoa_r+0x812>
 80122e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d100      	bne.n	80122ea <_dtoa_r+0x7da>
 80122e8:	e0b5      	b.n	8012456 <_dtoa_r+0x946>
 80122ea:	2d00      	cmp	r5, #0
 80122ec:	d010      	beq.n	8012310 <_dtoa_r+0x800>
 80122ee:	0039      	movs	r1, r7
 80122f0:	002a      	movs	r2, r5
 80122f2:	9803      	ldr	r0, [sp, #12]
 80122f4:	f000 fccc 	bl	8012c90 <__pow5mult>
 80122f8:	9a05      	ldr	r2, [sp, #20]
 80122fa:	0001      	movs	r1, r0
 80122fc:	0007      	movs	r7, r0
 80122fe:	9803      	ldr	r0, [sp, #12]
 8012300:	f000 fc14 	bl	8012b2c <__multiply>
 8012304:	0006      	movs	r6, r0
 8012306:	9905      	ldr	r1, [sp, #20]
 8012308:	9803      	ldr	r0, [sp, #12]
 801230a:	f000 fb3f 	bl	801298c <_Bfree>
 801230e:	9605      	str	r6, [sp, #20]
 8012310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012312:	1b5a      	subs	r2, r3, r5
 8012314:	42ab      	cmp	r3, r5
 8012316:	d004      	beq.n	8012322 <_dtoa_r+0x812>
 8012318:	9905      	ldr	r1, [sp, #20]
 801231a:	9803      	ldr	r0, [sp, #12]
 801231c:	f000 fcb8 	bl	8012c90 <__pow5mult>
 8012320:	9005      	str	r0, [sp, #20]
 8012322:	2101      	movs	r1, #1
 8012324:	9803      	ldr	r0, [sp, #12]
 8012326:	f000 fbe9 	bl	8012afc <__i2b>
 801232a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801232c:	0006      	movs	r6, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d100      	bne.n	8012334 <_dtoa_r+0x824>
 8012332:	e1bc      	b.n	80126ae <_dtoa_r+0xb9e>
 8012334:	001a      	movs	r2, r3
 8012336:	0001      	movs	r1, r0
 8012338:	9803      	ldr	r0, [sp, #12]
 801233a:	f000 fca9 	bl	8012c90 <__pow5mult>
 801233e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012340:	0006      	movs	r6, r0
 8012342:	2500      	movs	r5, #0
 8012344:	2b01      	cmp	r3, #1
 8012346:	dc16      	bgt.n	8012376 <_dtoa_r+0x866>
 8012348:	2500      	movs	r5, #0
 801234a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801234c:	42ab      	cmp	r3, r5
 801234e:	d10e      	bne.n	801236e <_dtoa_r+0x85e>
 8012350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012352:	031b      	lsls	r3, r3, #12
 8012354:	42ab      	cmp	r3, r5
 8012356:	d10a      	bne.n	801236e <_dtoa_r+0x85e>
 8012358:	4b8d      	ldr	r3, [pc, #564]	@ (8012590 <_dtoa_r+0xa80>)
 801235a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801235c:	4213      	tst	r3, r2
 801235e:	d006      	beq.n	801236e <_dtoa_r+0x85e>
 8012360:	9b06      	ldr	r3, [sp, #24]
 8012362:	3501      	adds	r5, #1
 8012364:	3301      	adds	r3, #1
 8012366:	9306      	str	r3, [sp, #24]
 8012368:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801236a:	3301      	adds	r3, #1
 801236c:	930d      	str	r3, [sp, #52]	@ 0x34
 801236e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012370:	2001      	movs	r0, #1
 8012372:	2b00      	cmp	r3, #0
 8012374:	d008      	beq.n	8012388 <_dtoa_r+0x878>
 8012376:	6933      	ldr	r3, [r6, #16]
 8012378:	3303      	adds	r3, #3
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	18f3      	adds	r3, r6, r3
 801237e:	6858      	ldr	r0, [r3, #4]
 8012380:	f000 fb6c 	bl	8012a5c <__hi0bits>
 8012384:	2320      	movs	r3, #32
 8012386:	1a18      	subs	r0, r3, r0
 8012388:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801238a:	1818      	adds	r0, r3, r0
 801238c:	0002      	movs	r2, r0
 801238e:	231f      	movs	r3, #31
 8012390:	401a      	ands	r2, r3
 8012392:	4218      	tst	r0, r3
 8012394:	d065      	beq.n	8012462 <_dtoa_r+0x952>
 8012396:	3301      	adds	r3, #1
 8012398:	1a9b      	subs	r3, r3, r2
 801239a:	2b04      	cmp	r3, #4
 801239c:	dd5d      	ble.n	801245a <_dtoa_r+0x94a>
 801239e:	231c      	movs	r3, #28
 80123a0:	1a9b      	subs	r3, r3, r2
 80123a2:	9a06      	ldr	r2, [sp, #24]
 80123a4:	18e4      	adds	r4, r4, r3
 80123a6:	18d2      	adds	r2, r2, r3
 80123a8:	9206      	str	r2, [sp, #24]
 80123aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80123ac:	18d3      	adds	r3, r2, r3
 80123ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80123b0:	9b06      	ldr	r3, [sp, #24]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	dd05      	ble.n	80123c2 <_dtoa_r+0x8b2>
 80123b6:	001a      	movs	r2, r3
 80123b8:	9905      	ldr	r1, [sp, #20]
 80123ba:	9803      	ldr	r0, [sp, #12]
 80123bc:	f000 fcc4 	bl	8012d48 <__lshift>
 80123c0:	9005      	str	r0, [sp, #20]
 80123c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	dd05      	ble.n	80123d4 <_dtoa_r+0x8c4>
 80123c8:	0031      	movs	r1, r6
 80123ca:	001a      	movs	r2, r3
 80123cc:	9803      	ldr	r0, [sp, #12]
 80123ce:	f000 fcbb 	bl	8012d48 <__lshift>
 80123d2:	0006      	movs	r6, r0
 80123d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d045      	beq.n	8012466 <_dtoa_r+0x956>
 80123da:	0031      	movs	r1, r6
 80123dc:	9805      	ldr	r0, [sp, #20]
 80123de:	f000 fd1f 	bl	8012e20 <__mcmp>
 80123e2:	2800      	cmp	r0, #0
 80123e4:	da3f      	bge.n	8012466 <_dtoa_r+0x956>
 80123e6:	9b04      	ldr	r3, [sp, #16]
 80123e8:	220a      	movs	r2, #10
 80123ea:	3b01      	subs	r3, #1
 80123ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80123ee:	9905      	ldr	r1, [sp, #20]
 80123f0:	2300      	movs	r3, #0
 80123f2:	9803      	ldr	r0, [sp, #12]
 80123f4:	f000 faee 	bl	80129d4 <__multadd>
 80123f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80123fa:	9005      	str	r0, [sp, #20]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d100      	bne.n	8012402 <_dtoa_r+0x8f2>
 8012400:	e15c      	b.n	80126bc <_dtoa_r+0xbac>
 8012402:	2300      	movs	r3, #0
 8012404:	0039      	movs	r1, r7
 8012406:	220a      	movs	r2, #10
 8012408:	9803      	ldr	r0, [sp, #12]
 801240a:	f000 fae3 	bl	80129d4 <__multadd>
 801240e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012410:	0007      	movs	r7, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	dc55      	bgt.n	80124c2 <_dtoa_r+0x9b2>
 8012416:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012418:	2b02      	cmp	r3, #2
 801241a:	dc2d      	bgt.n	8012478 <_dtoa_r+0x968>
 801241c:	e051      	b.n	80124c2 <_dtoa_r+0x9b2>
 801241e:	2336      	movs	r3, #54	@ 0x36
 8012420:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012422:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8012424:	9c06      	ldr	r4, [sp, #24]
 8012426:	1a9b      	subs	r3, r3, r2
 8012428:	e73c      	b.n	80122a4 <_dtoa_r+0x794>
 801242a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801242c:	1e5d      	subs	r5, r3, #1
 801242e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012430:	42ab      	cmp	r3, r5
 8012432:	db08      	blt.n	8012446 <_dtoa_r+0x936>
 8012434:	1b5d      	subs	r5, r3, r5
 8012436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012438:	9c06      	ldr	r4, [sp, #24]
 801243a:	2b00      	cmp	r3, #0
 801243c:	db00      	blt.n	8012440 <_dtoa_r+0x930>
 801243e:	e731      	b.n	80122a4 <_dtoa_r+0x794>
 8012440:	1ae4      	subs	r4, r4, r3
 8012442:	2300      	movs	r3, #0
 8012444:	e72e      	b.n	80122a4 <_dtoa_r+0x794>
 8012446:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012448:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801244a:	1aeb      	subs	r3, r5, r3
 801244c:	18d3      	adds	r3, r2, r3
 801244e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8012450:	9314      	str	r3, [sp, #80]	@ 0x50
 8012452:	2500      	movs	r5, #0
 8012454:	e7ef      	b.n	8012436 <_dtoa_r+0x926>
 8012456:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012458:	e75e      	b.n	8012318 <_dtoa_r+0x808>
 801245a:	2b04      	cmp	r3, #4
 801245c:	d0a8      	beq.n	80123b0 <_dtoa_r+0x8a0>
 801245e:	331c      	adds	r3, #28
 8012460:	e79f      	b.n	80123a2 <_dtoa_r+0x892>
 8012462:	0013      	movs	r3, r2
 8012464:	e7fb      	b.n	801245e <_dtoa_r+0x94e>
 8012466:	9b04      	ldr	r3, [sp, #16]
 8012468:	930c      	str	r3, [sp, #48]	@ 0x30
 801246a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801246c:	930e      	str	r3, [sp, #56]	@ 0x38
 801246e:	2b00      	cmp	r3, #0
 8012470:	dc23      	bgt.n	80124ba <_dtoa_r+0x9aa>
 8012472:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012474:	2b02      	cmp	r3, #2
 8012476:	dd20      	ble.n	80124ba <_dtoa_r+0x9aa>
 8012478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801247a:	2b00      	cmp	r3, #0
 801247c:	d000      	beq.n	8012480 <_dtoa_r+0x970>
 801247e:	e6b5      	b.n	80121ec <_dtoa_r+0x6dc>
 8012480:	0031      	movs	r1, r6
 8012482:	2205      	movs	r2, #5
 8012484:	9803      	ldr	r0, [sp, #12]
 8012486:	f000 faa5 	bl	80129d4 <__multadd>
 801248a:	0006      	movs	r6, r0
 801248c:	0001      	movs	r1, r0
 801248e:	9805      	ldr	r0, [sp, #20]
 8012490:	f000 fcc6 	bl	8012e20 <__mcmp>
 8012494:	2800      	cmp	r0, #0
 8012496:	dc00      	bgt.n	801249a <_dtoa_r+0x98a>
 8012498:	e6a8      	b.n	80121ec <_dtoa_r+0x6dc>
 801249a:	9b08      	ldr	r3, [sp, #32]
 801249c:	9a08      	ldr	r2, [sp, #32]
 801249e:	1c5c      	adds	r4, r3, #1
 80124a0:	2331      	movs	r3, #49	@ 0x31
 80124a2:	7013      	strb	r3, [r2, #0]
 80124a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124a6:	3301      	adds	r3, #1
 80124a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80124aa:	e6a3      	b.n	80121f4 <_dtoa_r+0x6e4>
 80124ac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80124ae:	0037      	movs	r7, r6
 80124b0:	e7f3      	b.n	801249a <_dtoa_r+0x98a>
 80124b2:	9b04      	ldr	r3, [sp, #16]
 80124b4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80124b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80124b8:	e7f9      	b.n	80124ae <_dtoa_r+0x99e>
 80124ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d100      	bne.n	80124c2 <_dtoa_r+0x9b2>
 80124c0:	e100      	b.n	80126c4 <_dtoa_r+0xbb4>
 80124c2:	2c00      	cmp	r4, #0
 80124c4:	dd05      	ble.n	80124d2 <_dtoa_r+0x9c2>
 80124c6:	0039      	movs	r1, r7
 80124c8:	0022      	movs	r2, r4
 80124ca:	9803      	ldr	r0, [sp, #12]
 80124cc:	f000 fc3c 	bl	8012d48 <__lshift>
 80124d0:	0007      	movs	r7, r0
 80124d2:	0038      	movs	r0, r7
 80124d4:	2d00      	cmp	r5, #0
 80124d6:	d018      	beq.n	801250a <_dtoa_r+0x9fa>
 80124d8:	6879      	ldr	r1, [r7, #4]
 80124da:	9803      	ldr	r0, [sp, #12]
 80124dc:	f000 fa12 	bl	8012904 <_Balloc>
 80124e0:	1e04      	subs	r4, r0, #0
 80124e2:	d105      	bne.n	80124f0 <_dtoa_r+0x9e0>
 80124e4:	0022      	movs	r2, r4
 80124e6:	4b2b      	ldr	r3, [pc, #172]	@ (8012594 <_dtoa_r+0xa84>)
 80124e8:	482b      	ldr	r0, [pc, #172]	@ (8012598 <_dtoa_r+0xa88>)
 80124ea:	492c      	ldr	r1, [pc, #176]	@ (801259c <_dtoa_r+0xa8c>)
 80124ec:	f7ff fb25 	bl	8011b3a <_dtoa_r+0x2a>
 80124f0:	0039      	movs	r1, r7
 80124f2:	693a      	ldr	r2, [r7, #16]
 80124f4:	310c      	adds	r1, #12
 80124f6:	3202      	adds	r2, #2
 80124f8:	0092      	lsls	r2, r2, #2
 80124fa:	300c      	adds	r0, #12
 80124fc:	f001 f9c0 	bl	8013880 <memcpy>
 8012500:	2201      	movs	r2, #1
 8012502:	0021      	movs	r1, r4
 8012504:	9803      	ldr	r0, [sp, #12]
 8012506:	f000 fc1f 	bl	8012d48 <__lshift>
 801250a:	9b08      	ldr	r3, [sp, #32]
 801250c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801250e:	9306      	str	r3, [sp, #24]
 8012510:	3b01      	subs	r3, #1
 8012512:	189b      	adds	r3, r3, r2
 8012514:	2201      	movs	r2, #1
 8012516:	9704      	str	r7, [sp, #16]
 8012518:	0007      	movs	r7, r0
 801251a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801251c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801251e:	4013      	ands	r3, r2
 8012520:	930e      	str	r3, [sp, #56]	@ 0x38
 8012522:	0031      	movs	r1, r6
 8012524:	9805      	ldr	r0, [sp, #20]
 8012526:	f7ff fa65 	bl	80119f4 <quorem>
 801252a:	9904      	ldr	r1, [sp, #16]
 801252c:	0005      	movs	r5, r0
 801252e:	900a      	str	r0, [sp, #40]	@ 0x28
 8012530:	9805      	ldr	r0, [sp, #20]
 8012532:	f000 fc75 	bl	8012e20 <__mcmp>
 8012536:	003a      	movs	r2, r7
 8012538:	900d      	str	r0, [sp, #52]	@ 0x34
 801253a:	0031      	movs	r1, r6
 801253c:	9803      	ldr	r0, [sp, #12]
 801253e:	f000 fc8b 	bl	8012e58 <__mdiff>
 8012542:	2201      	movs	r2, #1
 8012544:	68c3      	ldr	r3, [r0, #12]
 8012546:	0004      	movs	r4, r0
 8012548:	3530      	adds	r5, #48	@ 0x30
 801254a:	9209      	str	r2, [sp, #36]	@ 0x24
 801254c:	2b00      	cmp	r3, #0
 801254e:	d104      	bne.n	801255a <_dtoa_r+0xa4a>
 8012550:	0001      	movs	r1, r0
 8012552:	9805      	ldr	r0, [sp, #20]
 8012554:	f000 fc64 	bl	8012e20 <__mcmp>
 8012558:	9009      	str	r0, [sp, #36]	@ 0x24
 801255a:	0021      	movs	r1, r4
 801255c:	9803      	ldr	r0, [sp, #12]
 801255e:	f000 fa15 	bl	801298c <_Bfree>
 8012562:	9b06      	ldr	r3, [sp, #24]
 8012564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012566:	1c5c      	adds	r4, r3, #1
 8012568:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801256a:	4313      	orrs	r3, r2
 801256c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801256e:	4313      	orrs	r3, r2
 8012570:	d116      	bne.n	80125a0 <_dtoa_r+0xa90>
 8012572:	2d39      	cmp	r5, #57	@ 0x39
 8012574:	d02f      	beq.n	80125d6 <_dtoa_r+0xac6>
 8012576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012578:	2b00      	cmp	r3, #0
 801257a:	dd01      	ble.n	8012580 <_dtoa_r+0xa70>
 801257c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801257e:	3531      	adds	r5, #49	@ 0x31
 8012580:	9b06      	ldr	r3, [sp, #24]
 8012582:	701d      	strb	r5, [r3, #0]
 8012584:	e638      	b.n	80121f8 <_dtoa_r+0x6e8>
 8012586:	46c0      	nop			@ (mov r8, r8)
 8012588:	40240000 	.word	0x40240000
 801258c:	00000433 	.word	0x00000433
 8012590:	7ff00000 	.word	0x7ff00000
 8012594:	08026e30 	.word	0x08026e30
 8012598:	08026dd8 	.word	0x08026dd8
 801259c:	000002ef 	.word	0x000002ef
 80125a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	db04      	blt.n	80125b0 <_dtoa_r+0xaa0>
 80125a6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80125a8:	4313      	orrs	r3, r2
 80125aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80125ac:	4313      	orrs	r3, r2
 80125ae:	d11e      	bne.n	80125ee <_dtoa_r+0xade>
 80125b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	dde4      	ble.n	8012580 <_dtoa_r+0xa70>
 80125b6:	9905      	ldr	r1, [sp, #20]
 80125b8:	2201      	movs	r2, #1
 80125ba:	9803      	ldr	r0, [sp, #12]
 80125bc:	f000 fbc4 	bl	8012d48 <__lshift>
 80125c0:	0031      	movs	r1, r6
 80125c2:	9005      	str	r0, [sp, #20]
 80125c4:	f000 fc2c 	bl	8012e20 <__mcmp>
 80125c8:	2800      	cmp	r0, #0
 80125ca:	dc02      	bgt.n	80125d2 <_dtoa_r+0xac2>
 80125cc:	d1d8      	bne.n	8012580 <_dtoa_r+0xa70>
 80125ce:	07eb      	lsls	r3, r5, #31
 80125d0:	d5d6      	bpl.n	8012580 <_dtoa_r+0xa70>
 80125d2:	2d39      	cmp	r5, #57	@ 0x39
 80125d4:	d1d2      	bne.n	801257c <_dtoa_r+0xa6c>
 80125d6:	2339      	movs	r3, #57	@ 0x39
 80125d8:	9a06      	ldr	r2, [sp, #24]
 80125da:	7013      	strb	r3, [r2, #0]
 80125dc:	0023      	movs	r3, r4
 80125de:	001c      	movs	r4, r3
 80125e0:	3b01      	subs	r3, #1
 80125e2:	781a      	ldrb	r2, [r3, #0]
 80125e4:	2a39      	cmp	r2, #57	@ 0x39
 80125e6:	d04f      	beq.n	8012688 <_dtoa_r+0xb78>
 80125e8:	3201      	adds	r2, #1
 80125ea:	701a      	strb	r2, [r3, #0]
 80125ec:	e604      	b.n	80121f8 <_dtoa_r+0x6e8>
 80125ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	dd03      	ble.n	80125fc <_dtoa_r+0xaec>
 80125f4:	2d39      	cmp	r5, #57	@ 0x39
 80125f6:	d0ee      	beq.n	80125d6 <_dtoa_r+0xac6>
 80125f8:	3501      	adds	r5, #1
 80125fa:	e7c1      	b.n	8012580 <_dtoa_r+0xa70>
 80125fc:	9b06      	ldr	r3, [sp, #24]
 80125fe:	9a06      	ldr	r2, [sp, #24]
 8012600:	701d      	strb	r5, [r3, #0]
 8012602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012604:	4293      	cmp	r3, r2
 8012606:	d02a      	beq.n	801265e <_dtoa_r+0xb4e>
 8012608:	2300      	movs	r3, #0
 801260a:	220a      	movs	r2, #10
 801260c:	9905      	ldr	r1, [sp, #20]
 801260e:	9803      	ldr	r0, [sp, #12]
 8012610:	f000 f9e0 	bl	80129d4 <__multadd>
 8012614:	9b04      	ldr	r3, [sp, #16]
 8012616:	9005      	str	r0, [sp, #20]
 8012618:	42bb      	cmp	r3, r7
 801261a:	d109      	bne.n	8012630 <_dtoa_r+0xb20>
 801261c:	2300      	movs	r3, #0
 801261e:	220a      	movs	r2, #10
 8012620:	9904      	ldr	r1, [sp, #16]
 8012622:	9803      	ldr	r0, [sp, #12]
 8012624:	f000 f9d6 	bl	80129d4 <__multadd>
 8012628:	9004      	str	r0, [sp, #16]
 801262a:	0007      	movs	r7, r0
 801262c:	9406      	str	r4, [sp, #24]
 801262e:	e778      	b.n	8012522 <_dtoa_r+0xa12>
 8012630:	9904      	ldr	r1, [sp, #16]
 8012632:	2300      	movs	r3, #0
 8012634:	220a      	movs	r2, #10
 8012636:	9803      	ldr	r0, [sp, #12]
 8012638:	f000 f9cc 	bl	80129d4 <__multadd>
 801263c:	2300      	movs	r3, #0
 801263e:	9004      	str	r0, [sp, #16]
 8012640:	220a      	movs	r2, #10
 8012642:	0039      	movs	r1, r7
 8012644:	9803      	ldr	r0, [sp, #12]
 8012646:	f000 f9c5 	bl	80129d4 <__multadd>
 801264a:	e7ee      	b.n	801262a <_dtoa_r+0xb1a>
 801264c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801264e:	2401      	movs	r4, #1
 8012650:	2b00      	cmp	r3, #0
 8012652:	dd00      	ble.n	8012656 <_dtoa_r+0xb46>
 8012654:	001c      	movs	r4, r3
 8012656:	9b08      	ldr	r3, [sp, #32]
 8012658:	191c      	adds	r4, r3, r4
 801265a:	2300      	movs	r3, #0
 801265c:	9304      	str	r3, [sp, #16]
 801265e:	9905      	ldr	r1, [sp, #20]
 8012660:	2201      	movs	r2, #1
 8012662:	9803      	ldr	r0, [sp, #12]
 8012664:	f000 fb70 	bl	8012d48 <__lshift>
 8012668:	0031      	movs	r1, r6
 801266a:	9005      	str	r0, [sp, #20]
 801266c:	f000 fbd8 	bl	8012e20 <__mcmp>
 8012670:	2800      	cmp	r0, #0
 8012672:	dcb3      	bgt.n	80125dc <_dtoa_r+0xacc>
 8012674:	d101      	bne.n	801267a <_dtoa_r+0xb6a>
 8012676:	07ed      	lsls	r5, r5, #31
 8012678:	d4b0      	bmi.n	80125dc <_dtoa_r+0xacc>
 801267a:	0023      	movs	r3, r4
 801267c:	001c      	movs	r4, r3
 801267e:	3b01      	subs	r3, #1
 8012680:	781a      	ldrb	r2, [r3, #0]
 8012682:	2a30      	cmp	r2, #48	@ 0x30
 8012684:	d0fa      	beq.n	801267c <_dtoa_r+0xb6c>
 8012686:	e5b7      	b.n	80121f8 <_dtoa_r+0x6e8>
 8012688:	9a08      	ldr	r2, [sp, #32]
 801268a:	429a      	cmp	r2, r3
 801268c:	d1a7      	bne.n	80125de <_dtoa_r+0xace>
 801268e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012690:	3301      	adds	r3, #1
 8012692:	930c      	str	r3, [sp, #48]	@ 0x30
 8012694:	2331      	movs	r3, #49	@ 0x31
 8012696:	7013      	strb	r3, [r2, #0]
 8012698:	e5ae      	b.n	80121f8 <_dtoa_r+0x6e8>
 801269a:	4b15      	ldr	r3, [pc, #84]	@ (80126f0 <_dtoa_r+0xbe0>)
 801269c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801269e:	9308      	str	r3, [sp, #32]
 80126a0:	4b14      	ldr	r3, [pc, #80]	@ (80126f4 <_dtoa_r+0xbe4>)
 80126a2:	2a00      	cmp	r2, #0
 80126a4:	d001      	beq.n	80126aa <_dtoa_r+0xb9a>
 80126a6:	f7ff fa7b 	bl	8011ba0 <_dtoa_r+0x90>
 80126aa:	f7ff fa7b 	bl	8011ba4 <_dtoa_r+0x94>
 80126ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	dc00      	bgt.n	80126b6 <_dtoa_r+0xba6>
 80126b4:	e648      	b.n	8012348 <_dtoa_r+0x838>
 80126b6:	2001      	movs	r0, #1
 80126b8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80126ba:	e665      	b.n	8012388 <_dtoa_r+0x878>
 80126bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126be:	2b00      	cmp	r3, #0
 80126c0:	dc00      	bgt.n	80126c4 <_dtoa_r+0xbb4>
 80126c2:	e6d6      	b.n	8012472 <_dtoa_r+0x962>
 80126c4:	2400      	movs	r4, #0
 80126c6:	0031      	movs	r1, r6
 80126c8:	9805      	ldr	r0, [sp, #20]
 80126ca:	f7ff f993 	bl	80119f4 <quorem>
 80126ce:	9b08      	ldr	r3, [sp, #32]
 80126d0:	3030      	adds	r0, #48	@ 0x30
 80126d2:	5518      	strb	r0, [r3, r4]
 80126d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126d6:	3401      	adds	r4, #1
 80126d8:	0005      	movs	r5, r0
 80126da:	429c      	cmp	r4, r3
 80126dc:	dab6      	bge.n	801264c <_dtoa_r+0xb3c>
 80126de:	2300      	movs	r3, #0
 80126e0:	220a      	movs	r2, #10
 80126e2:	9905      	ldr	r1, [sp, #20]
 80126e4:	9803      	ldr	r0, [sp, #12]
 80126e6:	f000 f975 	bl	80129d4 <__multadd>
 80126ea:	9005      	str	r0, [sp, #20]
 80126ec:	e7eb      	b.n	80126c6 <_dtoa_r+0xbb6>
 80126ee:	46c0      	nop			@ (mov r8, r8)
 80126f0:	08026db4 	.word	0x08026db4
 80126f4:	08026dbc 	.word	0x08026dbc

080126f8 <_free_r>:
 80126f8:	b570      	push	{r4, r5, r6, lr}
 80126fa:	0005      	movs	r5, r0
 80126fc:	1e0c      	subs	r4, r1, #0
 80126fe:	d010      	beq.n	8012722 <_free_r+0x2a>
 8012700:	3c04      	subs	r4, #4
 8012702:	6823      	ldr	r3, [r4, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	da00      	bge.n	801270a <_free_r+0x12>
 8012708:	18e4      	adds	r4, r4, r3
 801270a:	0028      	movs	r0, r5
 801270c:	f000 f8ea 	bl	80128e4 <__malloc_lock>
 8012710:	4a1d      	ldr	r2, [pc, #116]	@ (8012788 <_free_r+0x90>)
 8012712:	6813      	ldr	r3, [r2, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d105      	bne.n	8012724 <_free_r+0x2c>
 8012718:	6063      	str	r3, [r4, #4]
 801271a:	6014      	str	r4, [r2, #0]
 801271c:	0028      	movs	r0, r5
 801271e:	f000 f8e9 	bl	80128f4 <__malloc_unlock>
 8012722:	bd70      	pop	{r4, r5, r6, pc}
 8012724:	42a3      	cmp	r3, r4
 8012726:	d908      	bls.n	801273a <_free_r+0x42>
 8012728:	6820      	ldr	r0, [r4, #0]
 801272a:	1821      	adds	r1, r4, r0
 801272c:	428b      	cmp	r3, r1
 801272e:	d1f3      	bne.n	8012718 <_free_r+0x20>
 8012730:	6819      	ldr	r1, [r3, #0]
 8012732:	685b      	ldr	r3, [r3, #4]
 8012734:	1809      	adds	r1, r1, r0
 8012736:	6021      	str	r1, [r4, #0]
 8012738:	e7ee      	b.n	8012718 <_free_r+0x20>
 801273a:	001a      	movs	r2, r3
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d001      	beq.n	8012746 <_free_r+0x4e>
 8012742:	42a3      	cmp	r3, r4
 8012744:	d9f9      	bls.n	801273a <_free_r+0x42>
 8012746:	6811      	ldr	r1, [r2, #0]
 8012748:	1850      	adds	r0, r2, r1
 801274a:	42a0      	cmp	r0, r4
 801274c:	d10b      	bne.n	8012766 <_free_r+0x6e>
 801274e:	6820      	ldr	r0, [r4, #0]
 8012750:	1809      	adds	r1, r1, r0
 8012752:	1850      	adds	r0, r2, r1
 8012754:	6011      	str	r1, [r2, #0]
 8012756:	4283      	cmp	r3, r0
 8012758:	d1e0      	bne.n	801271c <_free_r+0x24>
 801275a:	6818      	ldr	r0, [r3, #0]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	1841      	adds	r1, r0, r1
 8012760:	6011      	str	r1, [r2, #0]
 8012762:	6053      	str	r3, [r2, #4]
 8012764:	e7da      	b.n	801271c <_free_r+0x24>
 8012766:	42a0      	cmp	r0, r4
 8012768:	d902      	bls.n	8012770 <_free_r+0x78>
 801276a:	230c      	movs	r3, #12
 801276c:	602b      	str	r3, [r5, #0]
 801276e:	e7d5      	b.n	801271c <_free_r+0x24>
 8012770:	6820      	ldr	r0, [r4, #0]
 8012772:	1821      	adds	r1, r4, r0
 8012774:	428b      	cmp	r3, r1
 8012776:	d103      	bne.n	8012780 <_free_r+0x88>
 8012778:	6819      	ldr	r1, [r3, #0]
 801277a:	685b      	ldr	r3, [r3, #4]
 801277c:	1809      	adds	r1, r1, r0
 801277e:	6021      	str	r1, [r4, #0]
 8012780:	6063      	str	r3, [r4, #4]
 8012782:	6054      	str	r4, [r2, #4]
 8012784:	e7ca      	b.n	801271c <_free_r+0x24>
 8012786:	46c0      	nop			@ (mov r8, r8)
 8012788:	20003758 	.word	0x20003758

0801278c <malloc>:
 801278c:	b510      	push	{r4, lr}
 801278e:	4b03      	ldr	r3, [pc, #12]	@ (801279c <malloc+0x10>)
 8012790:	0001      	movs	r1, r0
 8012792:	6818      	ldr	r0, [r3, #0]
 8012794:	f000 f826 	bl	80127e4 <_malloc_r>
 8012798:	bd10      	pop	{r4, pc}
 801279a:	46c0      	nop			@ (mov r8, r8)
 801279c:	20000158 	.word	0x20000158

080127a0 <sbrk_aligned>:
 80127a0:	b570      	push	{r4, r5, r6, lr}
 80127a2:	4e0f      	ldr	r6, [pc, #60]	@ (80127e0 <sbrk_aligned+0x40>)
 80127a4:	000d      	movs	r5, r1
 80127a6:	6831      	ldr	r1, [r6, #0]
 80127a8:	0004      	movs	r4, r0
 80127aa:	2900      	cmp	r1, #0
 80127ac:	d102      	bne.n	80127b4 <sbrk_aligned+0x14>
 80127ae:	f001 f855 	bl	801385c <_sbrk_r>
 80127b2:	6030      	str	r0, [r6, #0]
 80127b4:	0029      	movs	r1, r5
 80127b6:	0020      	movs	r0, r4
 80127b8:	f001 f850 	bl	801385c <_sbrk_r>
 80127bc:	1c43      	adds	r3, r0, #1
 80127be:	d103      	bne.n	80127c8 <sbrk_aligned+0x28>
 80127c0:	2501      	movs	r5, #1
 80127c2:	426d      	negs	r5, r5
 80127c4:	0028      	movs	r0, r5
 80127c6:	bd70      	pop	{r4, r5, r6, pc}
 80127c8:	2303      	movs	r3, #3
 80127ca:	1cc5      	adds	r5, r0, #3
 80127cc:	439d      	bics	r5, r3
 80127ce:	42a8      	cmp	r0, r5
 80127d0:	d0f8      	beq.n	80127c4 <sbrk_aligned+0x24>
 80127d2:	1a29      	subs	r1, r5, r0
 80127d4:	0020      	movs	r0, r4
 80127d6:	f001 f841 	bl	801385c <_sbrk_r>
 80127da:	3001      	adds	r0, #1
 80127dc:	d1f2      	bne.n	80127c4 <sbrk_aligned+0x24>
 80127de:	e7ef      	b.n	80127c0 <sbrk_aligned+0x20>
 80127e0:	20003754 	.word	0x20003754

080127e4 <_malloc_r>:
 80127e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127e6:	2203      	movs	r2, #3
 80127e8:	1ccb      	adds	r3, r1, #3
 80127ea:	4393      	bics	r3, r2
 80127ec:	3308      	adds	r3, #8
 80127ee:	0005      	movs	r5, r0
 80127f0:	001f      	movs	r7, r3
 80127f2:	2b0c      	cmp	r3, #12
 80127f4:	d234      	bcs.n	8012860 <_malloc_r+0x7c>
 80127f6:	270c      	movs	r7, #12
 80127f8:	42b9      	cmp	r1, r7
 80127fa:	d833      	bhi.n	8012864 <_malloc_r+0x80>
 80127fc:	0028      	movs	r0, r5
 80127fe:	f000 f871 	bl	80128e4 <__malloc_lock>
 8012802:	4e37      	ldr	r6, [pc, #220]	@ (80128e0 <_malloc_r+0xfc>)
 8012804:	6833      	ldr	r3, [r6, #0]
 8012806:	001c      	movs	r4, r3
 8012808:	2c00      	cmp	r4, #0
 801280a:	d12f      	bne.n	801286c <_malloc_r+0x88>
 801280c:	0039      	movs	r1, r7
 801280e:	0028      	movs	r0, r5
 8012810:	f7ff ffc6 	bl	80127a0 <sbrk_aligned>
 8012814:	0004      	movs	r4, r0
 8012816:	1c43      	adds	r3, r0, #1
 8012818:	d15f      	bne.n	80128da <_malloc_r+0xf6>
 801281a:	6834      	ldr	r4, [r6, #0]
 801281c:	9400      	str	r4, [sp, #0]
 801281e:	9b00      	ldr	r3, [sp, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d14a      	bne.n	80128ba <_malloc_r+0xd6>
 8012824:	2c00      	cmp	r4, #0
 8012826:	d052      	beq.n	80128ce <_malloc_r+0xea>
 8012828:	6823      	ldr	r3, [r4, #0]
 801282a:	0028      	movs	r0, r5
 801282c:	18e3      	adds	r3, r4, r3
 801282e:	9900      	ldr	r1, [sp, #0]
 8012830:	9301      	str	r3, [sp, #4]
 8012832:	f001 f813 	bl	801385c <_sbrk_r>
 8012836:	9b01      	ldr	r3, [sp, #4]
 8012838:	4283      	cmp	r3, r0
 801283a:	d148      	bne.n	80128ce <_malloc_r+0xea>
 801283c:	6823      	ldr	r3, [r4, #0]
 801283e:	0028      	movs	r0, r5
 8012840:	1aff      	subs	r7, r7, r3
 8012842:	0039      	movs	r1, r7
 8012844:	f7ff ffac 	bl	80127a0 <sbrk_aligned>
 8012848:	3001      	adds	r0, #1
 801284a:	d040      	beq.n	80128ce <_malloc_r+0xea>
 801284c:	6823      	ldr	r3, [r4, #0]
 801284e:	19db      	adds	r3, r3, r7
 8012850:	6023      	str	r3, [r4, #0]
 8012852:	6833      	ldr	r3, [r6, #0]
 8012854:	685a      	ldr	r2, [r3, #4]
 8012856:	2a00      	cmp	r2, #0
 8012858:	d133      	bne.n	80128c2 <_malloc_r+0xde>
 801285a:	9b00      	ldr	r3, [sp, #0]
 801285c:	6033      	str	r3, [r6, #0]
 801285e:	e019      	b.n	8012894 <_malloc_r+0xb0>
 8012860:	2b00      	cmp	r3, #0
 8012862:	dac9      	bge.n	80127f8 <_malloc_r+0x14>
 8012864:	230c      	movs	r3, #12
 8012866:	602b      	str	r3, [r5, #0]
 8012868:	2000      	movs	r0, #0
 801286a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801286c:	6821      	ldr	r1, [r4, #0]
 801286e:	1bc9      	subs	r1, r1, r7
 8012870:	d420      	bmi.n	80128b4 <_malloc_r+0xd0>
 8012872:	290b      	cmp	r1, #11
 8012874:	d90a      	bls.n	801288c <_malloc_r+0xa8>
 8012876:	19e2      	adds	r2, r4, r7
 8012878:	6027      	str	r7, [r4, #0]
 801287a:	42a3      	cmp	r3, r4
 801287c:	d104      	bne.n	8012888 <_malloc_r+0xa4>
 801287e:	6032      	str	r2, [r6, #0]
 8012880:	6863      	ldr	r3, [r4, #4]
 8012882:	6011      	str	r1, [r2, #0]
 8012884:	6053      	str	r3, [r2, #4]
 8012886:	e005      	b.n	8012894 <_malloc_r+0xb0>
 8012888:	605a      	str	r2, [r3, #4]
 801288a:	e7f9      	b.n	8012880 <_malloc_r+0x9c>
 801288c:	6862      	ldr	r2, [r4, #4]
 801288e:	42a3      	cmp	r3, r4
 8012890:	d10e      	bne.n	80128b0 <_malloc_r+0xcc>
 8012892:	6032      	str	r2, [r6, #0]
 8012894:	0028      	movs	r0, r5
 8012896:	f000 f82d 	bl	80128f4 <__malloc_unlock>
 801289a:	0020      	movs	r0, r4
 801289c:	2207      	movs	r2, #7
 801289e:	300b      	adds	r0, #11
 80128a0:	1d23      	adds	r3, r4, #4
 80128a2:	4390      	bics	r0, r2
 80128a4:	1ac2      	subs	r2, r0, r3
 80128a6:	4298      	cmp	r0, r3
 80128a8:	d0df      	beq.n	801286a <_malloc_r+0x86>
 80128aa:	1a1b      	subs	r3, r3, r0
 80128ac:	50a3      	str	r3, [r4, r2]
 80128ae:	e7dc      	b.n	801286a <_malloc_r+0x86>
 80128b0:	605a      	str	r2, [r3, #4]
 80128b2:	e7ef      	b.n	8012894 <_malloc_r+0xb0>
 80128b4:	0023      	movs	r3, r4
 80128b6:	6864      	ldr	r4, [r4, #4]
 80128b8:	e7a6      	b.n	8012808 <_malloc_r+0x24>
 80128ba:	9c00      	ldr	r4, [sp, #0]
 80128bc:	6863      	ldr	r3, [r4, #4]
 80128be:	9300      	str	r3, [sp, #0]
 80128c0:	e7ad      	b.n	801281e <_malloc_r+0x3a>
 80128c2:	001a      	movs	r2, r3
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	42a3      	cmp	r3, r4
 80128c8:	d1fb      	bne.n	80128c2 <_malloc_r+0xde>
 80128ca:	2300      	movs	r3, #0
 80128cc:	e7da      	b.n	8012884 <_malloc_r+0xa0>
 80128ce:	230c      	movs	r3, #12
 80128d0:	0028      	movs	r0, r5
 80128d2:	602b      	str	r3, [r5, #0]
 80128d4:	f000 f80e 	bl	80128f4 <__malloc_unlock>
 80128d8:	e7c6      	b.n	8012868 <_malloc_r+0x84>
 80128da:	6007      	str	r7, [r0, #0]
 80128dc:	e7da      	b.n	8012894 <_malloc_r+0xb0>
 80128de:	46c0      	nop			@ (mov r8, r8)
 80128e0:	20003758 	.word	0x20003758

080128e4 <__malloc_lock>:
 80128e4:	b510      	push	{r4, lr}
 80128e6:	4802      	ldr	r0, [pc, #8]	@ (80128f0 <__malloc_lock+0xc>)
 80128e8:	f7ff f877 	bl	80119da <__retarget_lock_acquire_recursive>
 80128ec:	bd10      	pop	{r4, pc}
 80128ee:	46c0      	nop			@ (mov r8, r8)
 80128f0:	20003750 	.word	0x20003750

080128f4 <__malloc_unlock>:
 80128f4:	b510      	push	{r4, lr}
 80128f6:	4802      	ldr	r0, [pc, #8]	@ (8012900 <__malloc_unlock+0xc>)
 80128f8:	f7ff f870 	bl	80119dc <__retarget_lock_release_recursive>
 80128fc:	bd10      	pop	{r4, pc}
 80128fe:	46c0      	nop			@ (mov r8, r8)
 8012900:	20003750 	.word	0x20003750

08012904 <_Balloc>:
 8012904:	b570      	push	{r4, r5, r6, lr}
 8012906:	69c5      	ldr	r5, [r0, #28]
 8012908:	0006      	movs	r6, r0
 801290a:	000c      	movs	r4, r1
 801290c:	2d00      	cmp	r5, #0
 801290e:	d10e      	bne.n	801292e <_Balloc+0x2a>
 8012910:	2010      	movs	r0, #16
 8012912:	f7ff ff3b 	bl	801278c <malloc>
 8012916:	1e02      	subs	r2, r0, #0
 8012918:	61f0      	str	r0, [r6, #28]
 801291a:	d104      	bne.n	8012926 <_Balloc+0x22>
 801291c:	216b      	movs	r1, #107	@ 0x6b
 801291e:	4b19      	ldr	r3, [pc, #100]	@ (8012984 <_Balloc+0x80>)
 8012920:	4819      	ldr	r0, [pc, #100]	@ (8012988 <_Balloc+0x84>)
 8012922:	f000 ffb7 	bl	8013894 <__assert_func>
 8012926:	6045      	str	r5, [r0, #4]
 8012928:	6085      	str	r5, [r0, #8]
 801292a:	6005      	str	r5, [r0, #0]
 801292c:	60c5      	str	r5, [r0, #12]
 801292e:	69f5      	ldr	r5, [r6, #28]
 8012930:	68eb      	ldr	r3, [r5, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d013      	beq.n	801295e <_Balloc+0x5a>
 8012936:	69f3      	ldr	r3, [r6, #28]
 8012938:	00a2      	lsls	r2, r4, #2
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	189b      	adds	r3, r3, r2
 801293e:	6818      	ldr	r0, [r3, #0]
 8012940:	2800      	cmp	r0, #0
 8012942:	d118      	bne.n	8012976 <_Balloc+0x72>
 8012944:	2101      	movs	r1, #1
 8012946:	000d      	movs	r5, r1
 8012948:	40a5      	lsls	r5, r4
 801294a:	1d6a      	adds	r2, r5, #5
 801294c:	0030      	movs	r0, r6
 801294e:	0092      	lsls	r2, r2, #2
 8012950:	f000 ffbe 	bl	80138d0 <_calloc_r>
 8012954:	2800      	cmp	r0, #0
 8012956:	d00c      	beq.n	8012972 <_Balloc+0x6e>
 8012958:	6044      	str	r4, [r0, #4]
 801295a:	6085      	str	r5, [r0, #8]
 801295c:	e00d      	b.n	801297a <_Balloc+0x76>
 801295e:	2221      	movs	r2, #33	@ 0x21
 8012960:	2104      	movs	r1, #4
 8012962:	0030      	movs	r0, r6
 8012964:	f000 ffb4 	bl	80138d0 <_calloc_r>
 8012968:	69f3      	ldr	r3, [r6, #28]
 801296a:	60e8      	str	r0, [r5, #12]
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d1e1      	bne.n	8012936 <_Balloc+0x32>
 8012972:	2000      	movs	r0, #0
 8012974:	bd70      	pop	{r4, r5, r6, pc}
 8012976:	6802      	ldr	r2, [r0, #0]
 8012978:	601a      	str	r2, [r3, #0]
 801297a:	2300      	movs	r3, #0
 801297c:	6103      	str	r3, [r0, #16]
 801297e:	60c3      	str	r3, [r0, #12]
 8012980:	e7f8      	b.n	8012974 <_Balloc+0x70>
 8012982:	46c0      	nop			@ (mov r8, r8)
 8012984:	08026dc1 	.word	0x08026dc1
 8012988:	08026e41 	.word	0x08026e41

0801298c <_Bfree>:
 801298c:	b570      	push	{r4, r5, r6, lr}
 801298e:	69c6      	ldr	r6, [r0, #28]
 8012990:	0005      	movs	r5, r0
 8012992:	000c      	movs	r4, r1
 8012994:	2e00      	cmp	r6, #0
 8012996:	d10e      	bne.n	80129b6 <_Bfree+0x2a>
 8012998:	2010      	movs	r0, #16
 801299a:	f7ff fef7 	bl	801278c <malloc>
 801299e:	1e02      	subs	r2, r0, #0
 80129a0:	61e8      	str	r0, [r5, #28]
 80129a2:	d104      	bne.n	80129ae <_Bfree+0x22>
 80129a4:	218f      	movs	r1, #143	@ 0x8f
 80129a6:	4b09      	ldr	r3, [pc, #36]	@ (80129cc <_Bfree+0x40>)
 80129a8:	4809      	ldr	r0, [pc, #36]	@ (80129d0 <_Bfree+0x44>)
 80129aa:	f000 ff73 	bl	8013894 <__assert_func>
 80129ae:	6046      	str	r6, [r0, #4]
 80129b0:	6086      	str	r6, [r0, #8]
 80129b2:	6006      	str	r6, [r0, #0]
 80129b4:	60c6      	str	r6, [r0, #12]
 80129b6:	2c00      	cmp	r4, #0
 80129b8:	d007      	beq.n	80129ca <_Bfree+0x3e>
 80129ba:	69eb      	ldr	r3, [r5, #28]
 80129bc:	6862      	ldr	r2, [r4, #4]
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	0092      	lsls	r2, r2, #2
 80129c2:	189b      	adds	r3, r3, r2
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	6022      	str	r2, [r4, #0]
 80129c8:	601c      	str	r4, [r3, #0]
 80129ca:	bd70      	pop	{r4, r5, r6, pc}
 80129cc:	08026dc1 	.word	0x08026dc1
 80129d0:	08026e41 	.word	0x08026e41

080129d4 <__multadd>:
 80129d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129d6:	000f      	movs	r7, r1
 80129d8:	9001      	str	r0, [sp, #4]
 80129da:	000c      	movs	r4, r1
 80129dc:	001e      	movs	r6, r3
 80129de:	2000      	movs	r0, #0
 80129e0:	690d      	ldr	r5, [r1, #16]
 80129e2:	3714      	adds	r7, #20
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	3001      	adds	r0, #1
 80129e8:	b299      	uxth	r1, r3
 80129ea:	4351      	muls	r1, r2
 80129ec:	0c1b      	lsrs	r3, r3, #16
 80129ee:	4353      	muls	r3, r2
 80129f0:	1989      	adds	r1, r1, r6
 80129f2:	0c0e      	lsrs	r6, r1, #16
 80129f4:	199b      	adds	r3, r3, r6
 80129f6:	0c1e      	lsrs	r6, r3, #16
 80129f8:	b289      	uxth	r1, r1
 80129fa:	041b      	lsls	r3, r3, #16
 80129fc:	185b      	adds	r3, r3, r1
 80129fe:	c708      	stmia	r7!, {r3}
 8012a00:	4285      	cmp	r5, r0
 8012a02:	dcef      	bgt.n	80129e4 <__multadd+0x10>
 8012a04:	2e00      	cmp	r6, #0
 8012a06:	d022      	beq.n	8012a4e <__multadd+0x7a>
 8012a08:	68a3      	ldr	r3, [r4, #8]
 8012a0a:	42ab      	cmp	r3, r5
 8012a0c:	dc19      	bgt.n	8012a42 <__multadd+0x6e>
 8012a0e:	6861      	ldr	r1, [r4, #4]
 8012a10:	9801      	ldr	r0, [sp, #4]
 8012a12:	3101      	adds	r1, #1
 8012a14:	f7ff ff76 	bl	8012904 <_Balloc>
 8012a18:	1e07      	subs	r7, r0, #0
 8012a1a:	d105      	bne.n	8012a28 <__multadd+0x54>
 8012a1c:	003a      	movs	r2, r7
 8012a1e:	21ba      	movs	r1, #186	@ 0xba
 8012a20:	4b0c      	ldr	r3, [pc, #48]	@ (8012a54 <__multadd+0x80>)
 8012a22:	480d      	ldr	r0, [pc, #52]	@ (8012a58 <__multadd+0x84>)
 8012a24:	f000 ff36 	bl	8013894 <__assert_func>
 8012a28:	0021      	movs	r1, r4
 8012a2a:	6922      	ldr	r2, [r4, #16]
 8012a2c:	310c      	adds	r1, #12
 8012a2e:	3202      	adds	r2, #2
 8012a30:	0092      	lsls	r2, r2, #2
 8012a32:	300c      	adds	r0, #12
 8012a34:	f000 ff24 	bl	8013880 <memcpy>
 8012a38:	0021      	movs	r1, r4
 8012a3a:	9801      	ldr	r0, [sp, #4]
 8012a3c:	f7ff ffa6 	bl	801298c <_Bfree>
 8012a40:	003c      	movs	r4, r7
 8012a42:	1d2b      	adds	r3, r5, #4
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	18e3      	adds	r3, r4, r3
 8012a48:	3501      	adds	r5, #1
 8012a4a:	605e      	str	r6, [r3, #4]
 8012a4c:	6125      	str	r5, [r4, #16]
 8012a4e:	0020      	movs	r0, r4
 8012a50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012a52:	46c0      	nop			@ (mov r8, r8)
 8012a54:	08026e30 	.word	0x08026e30
 8012a58:	08026e41 	.word	0x08026e41

08012a5c <__hi0bits>:
 8012a5c:	2280      	movs	r2, #128	@ 0x80
 8012a5e:	0003      	movs	r3, r0
 8012a60:	0252      	lsls	r2, r2, #9
 8012a62:	2000      	movs	r0, #0
 8012a64:	4293      	cmp	r3, r2
 8012a66:	d201      	bcs.n	8012a6c <__hi0bits+0x10>
 8012a68:	041b      	lsls	r3, r3, #16
 8012a6a:	3010      	adds	r0, #16
 8012a6c:	2280      	movs	r2, #128	@ 0x80
 8012a6e:	0452      	lsls	r2, r2, #17
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d201      	bcs.n	8012a78 <__hi0bits+0x1c>
 8012a74:	3008      	adds	r0, #8
 8012a76:	021b      	lsls	r3, r3, #8
 8012a78:	2280      	movs	r2, #128	@ 0x80
 8012a7a:	0552      	lsls	r2, r2, #21
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	d201      	bcs.n	8012a84 <__hi0bits+0x28>
 8012a80:	3004      	adds	r0, #4
 8012a82:	011b      	lsls	r3, r3, #4
 8012a84:	2280      	movs	r2, #128	@ 0x80
 8012a86:	05d2      	lsls	r2, r2, #23
 8012a88:	4293      	cmp	r3, r2
 8012a8a:	d201      	bcs.n	8012a90 <__hi0bits+0x34>
 8012a8c:	3002      	adds	r0, #2
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	db03      	blt.n	8012a9c <__hi0bits+0x40>
 8012a94:	3001      	adds	r0, #1
 8012a96:	4213      	tst	r3, r2
 8012a98:	d100      	bne.n	8012a9c <__hi0bits+0x40>
 8012a9a:	2020      	movs	r0, #32
 8012a9c:	4770      	bx	lr

08012a9e <__lo0bits>:
 8012a9e:	6803      	ldr	r3, [r0, #0]
 8012aa0:	0001      	movs	r1, r0
 8012aa2:	2207      	movs	r2, #7
 8012aa4:	0018      	movs	r0, r3
 8012aa6:	4010      	ands	r0, r2
 8012aa8:	4213      	tst	r3, r2
 8012aaa:	d00d      	beq.n	8012ac8 <__lo0bits+0x2a>
 8012aac:	3a06      	subs	r2, #6
 8012aae:	2000      	movs	r0, #0
 8012ab0:	4213      	tst	r3, r2
 8012ab2:	d105      	bne.n	8012ac0 <__lo0bits+0x22>
 8012ab4:	3002      	adds	r0, #2
 8012ab6:	4203      	tst	r3, r0
 8012ab8:	d003      	beq.n	8012ac2 <__lo0bits+0x24>
 8012aba:	40d3      	lsrs	r3, r2
 8012abc:	0010      	movs	r0, r2
 8012abe:	600b      	str	r3, [r1, #0]
 8012ac0:	4770      	bx	lr
 8012ac2:	089b      	lsrs	r3, r3, #2
 8012ac4:	600b      	str	r3, [r1, #0]
 8012ac6:	e7fb      	b.n	8012ac0 <__lo0bits+0x22>
 8012ac8:	b29a      	uxth	r2, r3
 8012aca:	2a00      	cmp	r2, #0
 8012acc:	d101      	bne.n	8012ad2 <__lo0bits+0x34>
 8012ace:	2010      	movs	r0, #16
 8012ad0:	0c1b      	lsrs	r3, r3, #16
 8012ad2:	b2da      	uxtb	r2, r3
 8012ad4:	2a00      	cmp	r2, #0
 8012ad6:	d101      	bne.n	8012adc <__lo0bits+0x3e>
 8012ad8:	3008      	adds	r0, #8
 8012ada:	0a1b      	lsrs	r3, r3, #8
 8012adc:	071a      	lsls	r2, r3, #28
 8012ade:	d101      	bne.n	8012ae4 <__lo0bits+0x46>
 8012ae0:	3004      	adds	r0, #4
 8012ae2:	091b      	lsrs	r3, r3, #4
 8012ae4:	079a      	lsls	r2, r3, #30
 8012ae6:	d101      	bne.n	8012aec <__lo0bits+0x4e>
 8012ae8:	3002      	adds	r0, #2
 8012aea:	089b      	lsrs	r3, r3, #2
 8012aec:	07da      	lsls	r2, r3, #31
 8012aee:	d4e9      	bmi.n	8012ac4 <__lo0bits+0x26>
 8012af0:	3001      	adds	r0, #1
 8012af2:	085b      	lsrs	r3, r3, #1
 8012af4:	d1e6      	bne.n	8012ac4 <__lo0bits+0x26>
 8012af6:	2020      	movs	r0, #32
 8012af8:	e7e2      	b.n	8012ac0 <__lo0bits+0x22>
	...

08012afc <__i2b>:
 8012afc:	b510      	push	{r4, lr}
 8012afe:	000c      	movs	r4, r1
 8012b00:	2101      	movs	r1, #1
 8012b02:	f7ff feff 	bl	8012904 <_Balloc>
 8012b06:	2800      	cmp	r0, #0
 8012b08:	d107      	bne.n	8012b1a <__i2b+0x1e>
 8012b0a:	2146      	movs	r1, #70	@ 0x46
 8012b0c:	4c05      	ldr	r4, [pc, #20]	@ (8012b24 <__i2b+0x28>)
 8012b0e:	0002      	movs	r2, r0
 8012b10:	4b05      	ldr	r3, [pc, #20]	@ (8012b28 <__i2b+0x2c>)
 8012b12:	0020      	movs	r0, r4
 8012b14:	31ff      	adds	r1, #255	@ 0xff
 8012b16:	f000 febd 	bl	8013894 <__assert_func>
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	6144      	str	r4, [r0, #20]
 8012b1e:	6103      	str	r3, [r0, #16]
 8012b20:	bd10      	pop	{r4, pc}
 8012b22:	46c0      	nop			@ (mov r8, r8)
 8012b24:	08026e41 	.word	0x08026e41
 8012b28:	08026e30 	.word	0x08026e30

08012b2c <__multiply>:
 8012b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b2e:	0014      	movs	r4, r2
 8012b30:	690a      	ldr	r2, [r1, #16]
 8012b32:	6923      	ldr	r3, [r4, #16]
 8012b34:	000d      	movs	r5, r1
 8012b36:	b08b      	sub	sp, #44	@ 0x2c
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	db02      	blt.n	8012b42 <__multiply+0x16>
 8012b3c:	0023      	movs	r3, r4
 8012b3e:	000c      	movs	r4, r1
 8012b40:	001d      	movs	r5, r3
 8012b42:	6927      	ldr	r7, [r4, #16]
 8012b44:	692e      	ldr	r6, [r5, #16]
 8012b46:	6861      	ldr	r1, [r4, #4]
 8012b48:	19bb      	adds	r3, r7, r6
 8012b4a:	9303      	str	r3, [sp, #12]
 8012b4c:	68a3      	ldr	r3, [r4, #8]
 8012b4e:	19ba      	adds	r2, r7, r6
 8012b50:	4293      	cmp	r3, r2
 8012b52:	da00      	bge.n	8012b56 <__multiply+0x2a>
 8012b54:	3101      	adds	r1, #1
 8012b56:	f7ff fed5 	bl	8012904 <_Balloc>
 8012b5a:	9002      	str	r0, [sp, #8]
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	d106      	bne.n	8012b6e <__multiply+0x42>
 8012b60:	21b1      	movs	r1, #177	@ 0xb1
 8012b62:	4b49      	ldr	r3, [pc, #292]	@ (8012c88 <__multiply+0x15c>)
 8012b64:	4849      	ldr	r0, [pc, #292]	@ (8012c8c <__multiply+0x160>)
 8012b66:	9a02      	ldr	r2, [sp, #8]
 8012b68:	0049      	lsls	r1, r1, #1
 8012b6a:	f000 fe93 	bl	8013894 <__assert_func>
 8012b6e:	9b02      	ldr	r3, [sp, #8]
 8012b70:	2200      	movs	r2, #0
 8012b72:	3314      	adds	r3, #20
 8012b74:	469c      	mov	ip, r3
 8012b76:	19bb      	adds	r3, r7, r6
 8012b78:	009b      	lsls	r3, r3, #2
 8012b7a:	4463      	add	r3, ip
 8012b7c:	9304      	str	r3, [sp, #16]
 8012b7e:	4663      	mov	r3, ip
 8012b80:	9904      	ldr	r1, [sp, #16]
 8012b82:	428b      	cmp	r3, r1
 8012b84:	d32a      	bcc.n	8012bdc <__multiply+0xb0>
 8012b86:	0023      	movs	r3, r4
 8012b88:	00bf      	lsls	r7, r7, #2
 8012b8a:	3314      	adds	r3, #20
 8012b8c:	3514      	adds	r5, #20
 8012b8e:	9308      	str	r3, [sp, #32]
 8012b90:	00b6      	lsls	r6, r6, #2
 8012b92:	19db      	adds	r3, r3, r7
 8012b94:	9305      	str	r3, [sp, #20]
 8012b96:	19ab      	adds	r3, r5, r6
 8012b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b9a:	2304      	movs	r3, #4
 8012b9c:	9306      	str	r3, [sp, #24]
 8012b9e:	0023      	movs	r3, r4
 8012ba0:	9a05      	ldr	r2, [sp, #20]
 8012ba2:	3315      	adds	r3, #21
 8012ba4:	9501      	str	r5, [sp, #4]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d305      	bcc.n	8012bb6 <__multiply+0x8a>
 8012baa:	1b13      	subs	r3, r2, r4
 8012bac:	3b15      	subs	r3, #21
 8012bae:	089b      	lsrs	r3, r3, #2
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	009b      	lsls	r3, r3, #2
 8012bb4:	9306      	str	r3, [sp, #24]
 8012bb6:	9b01      	ldr	r3, [sp, #4]
 8012bb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d310      	bcc.n	8012be0 <__multiply+0xb4>
 8012bbe:	9b03      	ldr	r3, [sp, #12]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	dd05      	ble.n	8012bd0 <__multiply+0xa4>
 8012bc4:	9b04      	ldr	r3, [sp, #16]
 8012bc6:	3b04      	subs	r3, #4
 8012bc8:	9304      	str	r3, [sp, #16]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d056      	beq.n	8012c7e <__multiply+0x152>
 8012bd0:	9b02      	ldr	r3, [sp, #8]
 8012bd2:	9a03      	ldr	r2, [sp, #12]
 8012bd4:	0018      	movs	r0, r3
 8012bd6:	611a      	str	r2, [r3, #16]
 8012bd8:	b00b      	add	sp, #44	@ 0x2c
 8012bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bdc:	c304      	stmia	r3!, {r2}
 8012bde:	e7cf      	b.n	8012b80 <__multiply+0x54>
 8012be0:	9b01      	ldr	r3, [sp, #4]
 8012be2:	6818      	ldr	r0, [r3, #0]
 8012be4:	b280      	uxth	r0, r0
 8012be6:	2800      	cmp	r0, #0
 8012be8:	d01e      	beq.n	8012c28 <__multiply+0xfc>
 8012bea:	4667      	mov	r7, ip
 8012bec:	2500      	movs	r5, #0
 8012bee:	9e08      	ldr	r6, [sp, #32]
 8012bf0:	ce02      	ldmia	r6!, {r1}
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	9307      	str	r3, [sp, #28]
 8012bf6:	b28b      	uxth	r3, r1
 8012bf8:	4343      	muls	r3, r0
 8012bfa:	001a      	movs	r2, r3
 8012bfc:	466b      	mov	r3, sp
 8012bfe:	0c09      	lsrs	r1, r1, #16
 8012c00:	8b9b      	ldrh	r3, [r3, #28]
 8012c02:	4341      	muls	r1, r0
 8012c04:	18d3      	adds	r3, r2, r3
 8012c06:	9a07      	ldr	r2, [sp, #28]
 8012c08:	195b      	adds	r3, r3, r5
 8012c0a:	0c12      	lsrs	r2, r2, #16
 8012c0c:	1889      	adds	r1, r1, r2
 8012c0e:	0c1a      	lsrs	r2, r3, #16
 8012c10:	188a      	adds	r2, r1, r2
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	0c15      	lsrs	r5, r2, #16
 8012c16:	0412      	lsls	r2, r2, #16
 8012c18:	431a      	orrs	r2, r3
 8012c1a:	9b05      	ldr	r3, [sp, #20]
 8012c1c:	c704      	stmia	r7!, {r2}
 8012c1e:	42b3      	cmp	r3, r6
 8012c20:	d8e6      	bhi.n	8012bf0 <__multiply+0xc4>
 8012c22:	4663      	mov	r3, ip
 8012c24:	9a06      	ldr	r2, [sp, #24]
 8012c26:	509d      	str	r5, [r3, r2]
 8012c28:	9b01      	ldr	r3, [sp, #4]
 8012c2a:	6818      	ldr	r0, [r3, #0]
 8012c2c:	0c00      	lsrs	r0, r0, #16
 8012c2e:	d020      	beq.n	8012c72 <__multiply+0x146>
 8012c30:	4663      	mov	r3, ip
 8012c32:	0025      	movs	r5, r4
 8012c34:	4661      	mov	r1, ip
 8012c36:	2700      	movs	r7, #0
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	3514      	adds	r5, #20
 8012c3c:	682a      	ldr	r2, [r5, #0]
 8012c3e:	680e      	ldr	r6, [r1, #0]
 8012c40:	b292      	uxth	r2, r2
 8012c42:	4342      	muls	r2, r0
 8012c44:	0c36      	lsrs	r6, r6, #16
 8012c46:	1992      	adds	r2, r2, r6
 8012c48:	19d2      	adds	r2, r2, r7
 8012c4a:	0416      	lsls	r6, r2, #16
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	431e      	orrs	r6, r3
 8012c50:	600e      	str	r6, [r1, #0]
 8012c52:	cd40      	ldmia	r5!, {r6}
 8012c54:	684b      	ldr	r3, [r1, #4]
 8012c56:	0c36      	lsrs	r6, r6, #16
 8012c58:	4346      	muls	r6, r0
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	0c12      	lsrs	r2, r2, #16
 8012c5e:	18f3      	adds	r3, r6, r3
 8012c60:	189b      	adds	r3, r3, r2
 8012c62:	9a05      	ldr	r2, [sp, #20]
 8012c64:	0c1f      	lsrs	r7, r3, #16
 8012c66:	3104      	adds	r1, #4
 8012c68:	42aa      	cmp	r2, r5
 8012c6a:	d8e7      	bhi.n	8012c3c <__multiply+0x110>
 8012c6c:	4662      	mov	r2, ip
 8012c6e:	9906      	ldr	r1, [sp, #24]
 8012c70:	5053      	str	r3, [r2, r1]
 8012c72:	9b01      	ldr	r3, [sp, #4]
 8012c74:	3304      	adds	r3, #4
 8012c76:	9301      	str	r3, [sp, #4]
 8012c78:	2304      	movs	r3, #4
 8012c7a:	449c      	add	ip, r3
 8012c7c:	e79b      	b.n	8012bb6 <__multiply+0x8a>
 8012c7e:	9b03      	ldr	r3, [sp, #12]
 8012c80:	3b01      	subs	r3, #1
 8012c82:	9303      	str	r3, [sp, #12]
 8012c84:	e79b      	b.n	8012bbe <__multiply+0x92>
 8012c86:	46c0      	nop			@ (mov r8, r8)
 8012c88:	08026e30 	.word	0x08026e30
 8012c8c:	08026e41 	.word	0x08026e41

08012c90 <__pow5mult>:
 8012c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c92:	2303      	movs	r3, #3
 8012c94:	0015      	movs	r5, r2
 8012c96:	0007      	movs	r7, r0
 8012c98:	000e      	movs	r6, r1
 8012c9a:	401a      	ands	r2, r3
 8012c9c:	421d      	tst	r5, r3
 8012c9e:	d008      	beq.n	8012cb2 <__pow5mult+0x22>
 8012ca0:	4925      	ldr	r1, [pc, #148]	@ (8012d38 <__pow5mult+0xa8>)
 8012ca2:	3a01      	subs	r2, #1
 8012ca4:	0092      	lsls	r2, r2, #2
 8012ca6:	5852      	ldr	r2, [r2, r1]
 8012ca8:	2300      	movs	r3, #0
 8012caa:	0031      	movs	r1, r6
 8012cac:	f7ff fe92 	bl	80129d4 <__multadd>
 8012cb0:	0006      	movs	r6, r0
 8012cb2:	10ad      	asrs	r5, r5, #2
 8012cb4:	d03d      	beq.n	8012d32 <__pow5mult+0xa2>
 8012cb6:	69fc      	ldr	r4, [r7, #28]
 8012cb8:	2c00      	cmp	r4, #0
 8012cba:	d10f      	bne.n	8012cdc <__pow5mult+0x4c>
 8012cbc:	2010      	movs	r0, #16
 8012cbe:	f7ff fd65 	bl	801278c <malloc>
 8012cc2:	1e02      	subs	r2, r0, #0
 8012cc4:	61f8      	str	r0, [r7, #28]
 8012cc6:	d105      	bne.n	8012cd4 <__pow5mult+0x44>
 8012cc8:	21b4      	movs	r1, #180	@ 0xb4
 8012cca:	4b1c      	ldr	r3, [pc, #112]	@ (8012d3c <__pow5mult+0xac>)
 8012ccc:	481c      	ldr	r0, [pc, #112]	@ (8012d40 <__pow5mult+0xb0>)
 8012cce:	31ff      	adds	r1, #255	@ 0xff
 8012cd0:	f000 fde0 	bl	8013894 <__assert_func>
 8012cd4:	6044      	str	r4, [r0, #4]
 8012cd6:	6084      	str	r4, [r0, #8]
 8012cd8:	6004      	str	r4, [r0, #0]
 8012cda:	60c4      	str	r4, [r0, #12]
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	689c      	ldr	r4, [r3, #8]
 8012ce0:	9301      	str	r3, [sp, #4]
 8012ce2:	2c00      	cmp	r4, #0
 8012ce4:	d108      	bne.n	8012cf8 <__pow5mult+0x68>
 8012ce6:	0038      	movs	r0, r7
 8012ce8:	4916      	ldr	r1, [pc, #88]	@ (8012d44 <__pow5mult+0xb4>)
 8012cea:	f7ff ff07 	bl	8012afc <__i2b>
 8012cee:	9b01      	ldr	r3, [sp, #4]
 8012cf0:	0004      	movs	r4, r0
 8012cf2:	6098      	str	r0, [r3, #8]
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	6003      	str	r3, [r0, #0]
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	421d      	tst	r5, r3
 8012cfc:	d00a      	beq.n	8012d14 <__pow5mult+0x84>
 8012cfe:	0031      	movs	r1, r6
 8012d00:	0022      	movs	r2, r4
 8012d02:	0038      	movs	r0, r7
 8012d04:	f7ff ff12 	bl	8012b2c <__multiply>
 8012d08:	0031      	movs	r1, r6
 8012d0a:	9001      	str	r0, [sp, #4]
 8012d0c:	0038      	movs	r0, r7
 8012d0e:	f7ff fe3d 	bl	801298c <_Bfree>
 8012d12:	9e01      	ldr	r6, [sp, #4]
 8012d14:	106d      	asrs	r5, r5, #1
 8012d16:	d00c      	beq.n	8012d32 <__pow5mult+0xa2>
 8012d18:	6820      	ldr	r0, [r4, #0]
 8012d1a:	2800      	cmp	r0, #0
 8012d1c:	d107      	bne.n	8012d2e <__pow5mult+0x9e>
 8012d1e:	0022      	movs	r2, r4
 8012d20:	0021      	movs	r1, r4
 8012d22:	0038      	movs	r0, r7
 8012d24:	f7ff ff02 	bl	8012b2c <__multiply>
 8012d28:	2300      	movs	r3, #0
 8012d2a:	6020      	str	r0, [r4, #0]
 8012d2c:	6003      	str	r3, [r0, #0]
 8012d2e:	0004      	movs	r4, r0
 8012d30:	e7e2      	b.n	8012cf8 <__pow5mult+0x68>
 8012d32:	0030      	movs	r0, r6
 8012d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012d36:	46c0      	nop			@ (mov r8, r8)
 8012d38:	08026e9c 	.word	0x08026e9c
 8012d3c:	08026dc1 	.word	0x08026dc1
 8012d40:	08026e41 	.word	0x08026e41
 8012d44:	00000271 	.word	0x00000271

08012d48 <__lshift>:
 8012d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d4a:	000c      	movs	r4, r1
 8012d4c:	0016      	movs	r6, r2
 8012d4e:	6923      	ldr	r3, [r4, #16]
 8012d50:	1157      	asrs	r7, r2, #5
 8012d52:	b085      	sub	sp, #20
 8012d54:	18fb      	adds	r3, r7, r3
 8012d56:	9301      	str	r3, [sp, #4]
 8012d58:	3301      	adds	r3, #1
 8012d5a:	9300      	str	r3, [sp, #0]
 8012d5c:	6849      	ldr	r1, [r1, #4]
 8012d5e:	68a3      	ldr	r3, [r4, #8]
 8012d60:	9002      	str	r0, [sp, #8]
 8012d62:	9a00      	ldr	r2, [sp, #0]
 8012d64:	4293      	cmp	r3, r2
 8012d66:	db10      	blt.n	8012d8a <__lshift+0x42>
 8012d68:	9802      	ldr	r0, [sp, #8]
 8012d6a:	f7ff fdcb 	bl	8012904 <_Balloc>
 8012d6e:	2300      	movs	r3, #0
 8012d70:	0001      	movs	r1, r0
 8012d72:	0005      	movs	r5, r0
 8012d74:	001a      	movs	r2, r3
 8012d76:	3114      	adds	r1, #20
 8012d78:	4298      	cmp	r0, r3
 8012d7a:	d10c      	bne.n	8012d96 <__lshift+0x4e>
 8012d7c:	21ef      	movs	r1, #239	@ 0xef
 8012d7e:	002a      	movs	r2, r5
 8012d80:	4b25      	ldr	r3, [pc, #148]	@ (8012e18 <__lshift+0xd0>)
 8012d82:	4826      	ldr	r0, [pc, #152]	@ (8012e1c <__lshift+0xd4>)
 8012d84:	0049      	lsls	r1, r1, #1
 8012d86:	f000 fd85 	bl	8013894 <__assert_func>
 8012d8a:	3101      	adds	r1, #1
 8012d8c:	005b      	lsls	r3, r3, #1
 8012d8e:	e7e8      	b.n	8012d62 <__lshift+0x1a>
 8012d90:	0098      	lsls	r0, r3, #2
 8012d92:	500a      	str	r2, [r1, r0]
 8012d94:	3301      	adds	r3, #1
 8012d96:	42bb      	cmp	r3, r7
 8012d98:	dbfa      	blt.n	8012d90 <__lshift+0x48>
 8012d9a:	43fb      	mvns	r3, r7
 8012d9c:	17db      	asrs	r3, r3, #31
 8012d9e:	401f      	ands	r7, r3
 8012da0:	00bf      	lsls	r7, r7, #2
 8012da2:	0023      	movs	r3, r4
 8012da4:	201f      	movs	r0, #31
 8012da6:	19c9      	adds	r1, r1, r7
 8012da8:	0037      	movs	r7, r6
 8012daa:	6922      	ldr	r2, [r4, #16]
 8012dac:	3314      	adds	r3, #20
 8012dae:	0092      	lsls	r2, r2, #2
 8012db0:	189a      	adds	r2, r3, r2
 8012db2:	4007      	ands	r7, r0
 8012db4:	4206      	tst	r6, r0
 8012db6:	d029      	beq.n	8012e0c <__lshift+0xc4>
 8012db8:	3001      	adds	r0, #1
 8012dba:	1bc0      	subs	r0, r0, r7
 8012dbc:	9003      	str	r0, [sp, #12]
 8012dbe:	468c      	mov	ip, r1
 8012dc0:	2000      	movs	r0, #0
 8012dc2:	681e      	ldr	r6, [r3, #0]
 8012dc4:	40be      	lsls	r6, r7
 8012dc6:	4306      	orrs	r6, r0
 8012dc8:	4660      	mov	r0, ip
 8012dca:	c040      	stmia	r0!, {r6}
 8012dcc:	4684      	mov	ip, r0
 8012dce:	9e03      	ldr	r6, [sp, #12]
 8012dd0:	cb01      	ldmia	r3!, {r0}
 8012dd2:	40f0      	lsrs	r0, r6
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d8f4      	bhi.n	8012dc2 <__lshift+0x7a>
 8012dd8:	0026      	movs	r6, r4
 8012dda:	3615      	adds	r6, #21
 8012ddc:	2304      	movs	r3, #4
 8012dde:	42b2      	cmp	r2, r6
 8012de0:	d304      	bcc.n	8012dec <__lshift+0xa4>
 8012de2:	1b13      	subs	r3, r2, r4
 8012de4:	3b15      	subs	r3, #21
 8012de6:	089b      	lsrs	r3, r3, #2
 8012de8:	3301      	adds	r3, #1
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	50c8      	str	r0, [r1, r3]
 8012dee:	2800      	cmp	r0, #0
 8012df0:	d002      	beq.n	8012df8 <__lshift+0xb0>
 8012df2:	9b01      	ldr	r3, [sp, #4]
 8012df4:	3302      	adds	r3, #2
 8012df6:	9300      	str	r3, [sp, #0]
 8012df8:	9b00      	ldr	r3, [sp, #0]
 8012dfa:	9802      	ldr	r0, [sp, #8]
 8012dfc:	3b01      	subs	r3, #1
 8012dfe:	0021      	movs	r1, r4
 8012e00:	612b      	str	r3, [r5, #16]
 8012e02:	f7ff fdc3 	bl	801298c <_Bfree>
 8012e06:	0028      	movs	r0, r5
 8012e08:	b005      	add	sp, #20
 8012e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e0c:	cb01      	ldmia	r3!, {r0}
 8012e0e:	c101      	stmia	r1!, {r0}
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d8fb      	bhi.n	8012e0c <__lshift+0xc4>
 8012e14:	e7f0      	b.n	8012df8 <__lshift+0xb0>
 8012e16:	46c0      	nop			@ (mov r8, r8)
 8012e18:	08026e30 	.word	0x08026e30
 8012e1c:	08026e41 	.word	0x08026e41

08012e20 <__mcmp>:
 8012e20:	b530      	push	{r4, r5, lr}
 8012e22:	690b      	ldr	r3, [r1, #16]
 8012e24:	6904      	ldr	r4, [r0, #16]
 8012e26:	0002      	movs	r2, r0
 8012e28:	1ae0      	subs	r0, r4, r3
 8012e2a:	429c      	cmp	r4, r3
 8012e2c:	d10f      	bne.n	8012e4e <__mcmp+0x2e>
 8012e2e:	3214      	adds	r2, #20
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	3114      	adds	r1, #20
 8012e34:	0014      	movs	r4, r2
 8012e36:	18c9      	adds	r1, r1, r3
 8012e38:	18d2      	adds	r2, r2, r3
 8012e3a:	3a04      	subs	r2, #4
 8012e3c:	3904      	subs	r1, #4
 8012e3e:	6815      	ldr	r5, [r2, #0]
 8012e40:	680b      	ldr	r3, [r1, #0]
 8012e42:	429d      	cmp	r5, r3
 8012e44:	d004      	beq.n	8012e50 <__mcmp+0x30>
 8012e46:	2001      	movs	r0, #1
 8012e48:	429d      	cmp	r5, r3
 8012e4a:	d200      	bcs.n	8012e4e <__mcmp+0x2e>
 8012e4c:	3802      	subs	r0, #2
 8012e4e:	bd30      	pop	{r4, r5, pc}
 8012e50:	4294      	cmp	r4, r2
 8012e52:	d3f2      	bcc.n	8012e3a <__mcmp+0x1a>
 8012e54:	e7fb      	b.n	8012e4e <__mcmp+0x2e>
	...

08012e58 <__mdiff>:
 8012e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e5a:	000c      	movs	r4, r1
 8012e5c:	b087      	sub	sp, #28
 8012e5e:	9000      	str	r0, [sp, #0]
 8012e60:	0011      	movs	r1, r2
 8012e62:	0020      	movs	r0, r4
 8012e64:	0017      	movs	r7, r2
 8012e66:	f7ff ffdb 	bl	8012e20 <__mcmp>
 8012e6a:	1e05      	subs	r5, r0, #0
 8012e6c:	d110      	bne.n	8012e90 <__mdiff+0x38>
 8012e6e:	0001      	movs	r1, r0
 8012e70:	9800      	ldr	r0, [sp, #0]
 8012e72:	f7ff fd47 	bl	8012904 <_Balloc>
 8012e76:	1e02      	subs	r2, r0, #0
 8012e78:	d104      	bne.n	8012e84 <__mdiff+0x2c>
 8012e7a:	4b40      	ldr	r3, [pc, #256]	@ (8012f7c <__mdiff+0x124>)
 8012e7c:	4840      	ldr	r0, [pc, #256]	@ (8012f80 <__mdiff+0x128>)
 8012e7e:	4941      	ldr	r1, [pc, #260]	@ (8012f84 <__mdiff+0x12c>)
 8012e80:	f000 fd08 	bl	8013894 <__assert_func>
 8012e84:	2301      	movs	r3, #1
 8012e86:	6145      	str	r5, [r0, #20]
 8012e88:	6103      	str	r3, [r0, #16]
 8012e8a:	0010      	movs	r0, r2
 8012e8c:	b007      	add	sp, #28
 8012e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e90:	2600      	movs	r6, #0
 8012e92:	42b0      	cmp	r0, r6
 8012e94:	da03      	bge.n	8012e9e <__mdiff+0x46>
 8012e96:	0023      	movs	r3, r4
 8012e98:	003c      	movs	r4, r7
 8012e9a:	001f      	movs	r7, r3
 8012e9c:	3601      	adds	r6, #1
 8012e9e:	6861      	ldr	r1, [r4, #4]
 8012ea0:	9800      	ldr	r0, [sp, #0]
 8012ea2:	f7ff fd2f 	bl	8012904 <_Balloc>
 8012ea6:	1e02      	subs	r2, r0, #0
 8012ea8:	d103      	bne.n	8012eb2 <__mdiff+0x5a>
 8012eaa:	4b34      	ldr	r3, [pc, #208]	@ (8012f7c <__mdiff+0x124>)
 8012eac:	4834      	ldr	r0, [pc, #208]	@ (8012f80 <__mdiff+0x128>)
 8012eae:	4936      	ldr	r1, [pc, #216]	@ (8012f88 <__mdiff+0x130>)
 8012eb0:	e7e6      	b.n	8012e80 <__mdiff+0x28>
 8012eb2:	6923      	ldr	r3, [r4, #16]
 8012eb4:	3414      	adds	r4, #20
 8012eb6:	9300      	str	r3, [sp, #0]
 8012eb8:	009b      	lsls	r3, r3, #2
 8012eba:	18e3      	adds	r3, r4, r3
 8012ebc:	0021      	movs	r1, r4
 8012ebe:	9401      	str	r4, [sp, #4]
 8012ec0:	003c      	movs	r4, r7
 8012ec2:	9302      	str	r3, [sp, #8]
 8012ec4:	693b      	ldr	r3, [r7, #16]
 8012ec6:	3414      	adds	r4, #20
 8012ec8:	009b      	lsls	r3, r3, #2
 8012eca:	18e3      	adds	r3, r4, r3
 8012ecc:	9303      	str	r3, [sp, #12]
 8012ece:	0003      	movs	r3, r0
 8012ed0:	60c6      	str	r6, [r0, #12]
 8012ed2:	468c      	mov	ip, r1
 8012ed4:	2000      	movs	r0, #0
 8012ed6:	3314      	adds	r3, #20
 8012ed8:	9304      	str	r3, [sp, #16]
 8012eda:	9305      	str	r3, [sp, #20]
 8012edc:	4663      	mov	r3, ip
 8012ede:	cb20      	ldmia	r3!, {r5}
 8012ee0:	b2a9      	uxth	r1, r5
 8012ee2:	000e      	movs	r6, r1
 8012ee4:	469c      	mov	ip, r3
 8012ee6:	cc08      	ldmia	r4!, {r3}
 8012ee8:	0c2d      	lsrs	r5, r5, #16
 8012eea:	b299      	uxth	r1, r3
 8012eec:	1a71      	subs	r1, r6, r1
 8012eee:	1809      	adds	r1, r1, r0
 8012ef0:	0c1b      	lsrs	r3, r3, #16
 8012ef2:	1408      	asrs	r0, r1, #16
 8012ef4:	1aeb      	subs	r3, r5, r3
 8012ef6:	181b      	adds	r3, r3, r0
 8012ef8:	1418      	asrs	r0, r3, #16
 8012efa:	b289      	uxth	r1, r1
 8012efc:	041b      	lsls	r3, r3, #16
 8012efe:	4319      	orrs	r1, r3
 8012f00:	9b05      	ldr	r3, [sp, #20]
 8012f02:	c302      	stmia	r3!, {r1}
 8012f04:	9305      	str	r3, [sp, #20]
 8012f06:	9b03      	ldr	r3, [sp, #12]
 8012f08:	42a3      	cmp	r3, r4
 8012f0a:	d8e7      	bhi.n	8012edc <__mdiff+0x84>
 8012f0c:	0039      	movs	r1, r7
 8012f0e:	9c03      	ldr	r4, [sp, #12]
 8012f10:	3115      	adds	r1, #21
 8012f12:	2304      	movs	r3, #4
 8012f14:	428c      	cmp	r4, r1
 8012f16:	d304      	bcc.n	8012f22 <__mdiff+0xca>
 8012f18:	1be3      	subs	r3, r4, r7
 8012f1a:	3b15      	subs	r3, #21
 8012f1c:	089b      	lsrs	r3, r3, #2
 8012f1e:	3301      	adds	r3, #1
 8012f20:	009b      	lsls	r3, r3, #2
 8012f22:	9901      	ldr	r1, [sp, #4]
 8012f24:	18cd      	adds	r5, r1, r3
 8012f26:	9904      	ldr	r1, [sp, #16]
 8012f28:	002e      	movs	r6, r5
 8012f2a:	18cb      	adds	r3, r1, r3
 8012f2c:	001f      	movs	r7, r3
 8012f2e:	9902      	ldr	r1, [sp, #8]
 8012f30:	428e      	cmp	r6, r1
 8012f32:	d311      	bcc.n	8012f58 <__mdiff+0x100>
 8012f34:	9c02      	ldr	r4, [sp, #8]
 8012f36:	1ee9      	subs	r1, r5, #3
 8012f38:	2000      	movs	r0, #0
 8012f3a:	428c      	cmp	r4, r1
 8012f3c:	d304      	bcc.n	8012f48 <__mdiff+0xf0>
 8012f3e:	0021      	movs	r1, r4
 8012f40:	3103      	adds	r1, #3
 8012f42:	1b49      	subs	r1, r1, r5
 8012f44:	0889      	lsrs	r1, r1, #2
 8012f46:	0088      	lsls	r0, r1, #2
 8012f48:	181b      	adds	r3, r3, r0
 8012f4a:	3b04      	subs	r3, #4
 8012f4c:	6819      	ldr	r1, [r3, #0]
 8012f4e:	2900      	cmp	r1, #0
 8012f50:	d010      	beq.n	8012f74 <__mdiff+0x11c>
 8012f52:	9b00      	ldr	r3, [sp, #0]
 8012f54:	6113      	str	r3, [r2, #16]
 8012f56:	e798      	b.n	8012e8a <__mdiff+0x32>
 8012f58:	4684      	mov	ip, r0
 8012f5a:	ce02      	ldmia	r6!, {r1}
 8012f5c:	b288      	uxth	r0, r1
 8012f5e:	4460      	add	r0, ip
 8012f60:	1400      	asrs	r0, r0, #16
 8012f62:	0c0c      	lsrs	r4, r1, #16
 8012f64:	1904      	adds	r4, r0, r4
 8012f66:	4461      	add	r1, ip
 8012f68:	1420      	asrs	r0, r4, #16
 8012f6a:	b289      	uxth	r1, r1
 8012f6c:	0424      	lsls	r4, r4, #16
 8012f6e:	4321      	orrs	r1, r4
 8012f70:	c702      	stmia	r7!, {r1}
 8012f72:	e7dc      	b.n	8012f2e <__mdiff+0xd6>
 8012f74:	9900      	ldr	r1, [sp, #0]
 8012f76:	3901      	subs	r1, #1
 8012f78:	9100      	str	r1, [sp, #0]
 8012f7a:	e7e6      	b.n	8012f4a <__mdiff+0xf2>
 8012f7c:	08026e30 	.word	0x08026e30
 8012f80:	08026e41 	.word	0x08026e41
 8012f84:	00000237 	.word	0x00000237
 8012f88:	00000245 	.word	0x00000245

08012f8c <__d2b>:
 8012f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f8e:	2101      	movs	r1, #1
 8012f90:	0016      	movs	r6, r2
 8012f92:	001f      	movs	r7, r3
 8012f94:	f7ff fcb6 	bl	8012904 <_Balloc>
 8012f98:	1e04      	subs	r4, r0, #0
 8012f9a:	d105      	bne.n	8012fa8 <__d2b+0x1c>
 8012f9c:	0022      	movs	r2, r4
 8012f9e:	4b25      	ldr	r3, [pc, #148]	@ (8013034 <__d2b+0xa8>)
 8012fa0:	4825      	ldr	r0, [pc, #148]	@ (8013038 <__d2b+0xac>)
 8012fa2:	4926      	ldr	r1, [pc, #152]	@ (801303c <__d2b+0xb0>)
 8012fa4:	f000 fc76 	bl	8013894 <__assert_func>
 8012fa8:	033b      	lsls	r3, r7, #12
 8012faa:	007d      	lsls	r5, r7, #1
 8012fac:	0b1b      	lsrs	r3, r3, #12
 8012fae:	0d6d      	lsrs	r5, r5, #21
 8012fb0:	d002      	beq.n	8012fb8 <__d2b+0x2c>
 8012fb2:	2280      	movs	r2, #128	@ 0x80
 8012fb4:	0352      	lsls	r2, r2, #13
 8012fb6:	4313      	orrs	r3, r2
 8012fb8:	9301      	str	r3, [sp, #4]
 8012fba:	2e00      	cmp	r6, #0
 8012fbc:	d025      	beq.n	801300a <__d2b+0x7e>
 8012fbe:	4668      	mov	r0, sp
 8012fc0:	9600      	str	r6, [sp, #0]
 8012fc2:	f7ff fd6c 	bl	8012a9e <__lo0bits>
 8012fc6:	9b01      	ldr	r3, [sp, #4]
 8012fc8:	9900      	ldr	r1, [sp, #0]
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d01b      	beq.n	8013006 <__d2b+0x7a>
 8012fce:	2220      	movs	r2, #32
 8012fd0:	001e      	movs	r6, r3
 8012fd2:	1a12      	subs	r2, r2, r0
 8012fd4:	4096      	lsls	r6, r2
 8012fd6:	0032      	movs	r2, r6
 8012fd8:	40c3      	lsrs	r3, r0
 8012fda:	430a      	orrs	r2, r1
 8012fdc:	6162      	str	r2, [r4, #20]
 8012fde:	9301      	str	r3, [sp, #4]
 8012fe0:	9e01      	ldr	r6, [sp, #4]
 8012fe2:	61a6      	str	r6, [r4, #24]
 8012fe4:	1e73      	subs	r3, r6, #1
 8012fe6:	419e      	sbcs	r6, r3
 8012fe8:	3601      	adds	r6, #1
 8012fea:	6126      	str	r6, [r4, #16]
 8012fec:	2d00      	cmp	r5, #0
 8012fee:	d014      	beq.n	801301a <__d2b+0x8e>
 8012ff0:	2635      	movs	r6, #53	@ 0x35
 8012ff2:	4b13      	ldr	r3, [pc, #76]	@ (8013040 <__d2b+0xb4>)
 8012ff4:	18ed      	adds	r5, r5, r3
 8012ff6:	9b08      	ldr	r3, [sp, #32]
 8012ff8:	182d      	adds	r5, r5, r0
 8012ffa:	601d      	str	r5, [r3, #0]
 8012ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ffe:	1a36      	subs	r6, r6, r0
 8013000:	601e      	str	r6, [r3, #0]
 8013002:	0020      	movs	r0, r4
 8013004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013006:	6161      	str	r1, [r4, #20]
 8013008:	e7ea      	b.n	8012fe0 <__d2b+0x54>
 801300a:	a801      	add	r0, sp, #4
 801300c:	f7ff fd47 	bl	8012a9e <__lo0bits>
 8013010:	9b01      	ldr	r3, [sp, #4]
 8013012:	2601      	movs	r6, #1
 8013014:	6163      	str	r3, [r4, #20]
 8013016:	3020      	adds	r0, #32
 8013018:	e7e7      	b.n	8012fea <__d2b+0x5e>
 801301a:	4b0a      	ldr	r3, [pc, #40]	@ (8013044 <__d2b+0xb8>)
 801301c:	18c0      	adds	r0, r0, r3
 801301e:	9b08      	ldr	r3, [sp, #32]
 8013020:	6018      	str	r0, [r3, #0]
 8013022:	4b09      	ldr	r3, [pc, #36]	@ (8013048 <__d2b+0xbc>)
 8013024:	18f3      	adds	r3, r6, r3
 8013026:	009b      	lsls	r3, r3, #2
 8013028:	18e3      	adds	r3, r4, r3
 801302a:	6958      	ldr	r0, [r3, #20]
 801302c:	f7ff fd16 	bl	8012a5c <__hi0bits>
 8013030:	0176      	lsls	r6, r6, #5
 8013032:	e7e3      	b.n	8012ffc <__d2b+0x70>
 8013034:	08026e30 	.word	0x08026e30
 8013038:	08026e41 	.word	0x08026e41
 801303c:	0000030f 	.word	0x0000030f
 8013040:	fffffbcd 	.word	0xfffffbcd
 8013044:	fffffbce 	.word	0xfffffbce
 8013048:	3fffffff 	.word	0x3fffffff

0801304c <__ssputs_r>:
 801304c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801304e:	688e      	ldr	r6, [r1, #8]
 8013050:	b085      	sub	sp, #20
 8013052:	001f      	movs	r7, r3
 8013054:	000c      	movs	r4, r1
 8013056:	680b      	ldr	r3, [r1, #0]
 8013058:	9002      	str	r0, [sp, #8]
 801305a:	9203      	str	r2, [sp, #12]
 801305c:	42be      	cmp	r6, r7
 801305e:	d830      	bhi.n	80130c2 <__ssputs_r+0x76>
 8013060:	210c      	movs	r1, #12
 8013062:	5e62      	ldrsh	r2, [r4, r1]
 8013064:	2190      	movs	r1, #144	@ 0x90
 8013066:	00c9      	lsls	r1, r1, #3
 8013068:	420a      	tst	r2, r1
 801306a:	d028      	beq.n	80130be <__ssputs_r+0x72>
 801306c:	2003      	movs	r0, #3
 801306e:	6921      	ldr	r1, [r4, #16]
 8013070:	1a5b      	subs	r3, r3, r1
 8013072:	9301      	str	r3, [sp, #4]
 8013074:	6963      	ldr	r3, [r4, #20]
 8013076:	4343      	muls	r3, r0
 8013078:	9801      	ldr	r0, [sp, #4]
 801307a:	0fdd      	lsrs	r5, r3, #31
 801307c:	18ed      	adds	r5, r5, r3
 801307e:	1c7b      	adds	r3, r7, #1
 8013080:	181b      	adds	r3, r3, r0
 8013082:	106d      	asrs	r5, r5, #1
 8013084:	42ab      	cmp	r3, r5
 8013086:	d900      	bls.n	801308a <__ssputs_r+0x3e>
 8013088:	001d      	movs	r5, r3
 801308a:	0552      	lsls	r2, r2, #21
 801308c:	d528      	bpl.n	80130e0 <__ssputs_r+0x94>
 801308e:	0029      	movs	r1, r5
 8013090:	9802      	ldr	r0, [sp, #8]
 8013092:	f7ff fba7 	bl	80127e4 <_malloc_r>
 8013096:	1e06      	subs	r6, r0, #0
 8013098:	d02c      	beq.n	80130f4 <__ssputs_r+0xa8>
 801309a:	9a01      	ldr	r2, [sp, #4]
 801309c:	6921      	ldr	r1, [r4, #16]
 801309e:	f000 fbef 	bl	8013880 <memcpy>
 80130a2:	89a2      	ldrh	r2, [r4, #12]
 80130a4:	4b18      	ldr	r3, [pc, #96]	@ (8013108 <__ssputs_r+0xbc>)
 80130a6:	401a      	ands	r2, r3
 80130a8:	2380      	movs	r3, #128	@ 0x80
 80130aa:	4313      	orrs	r3, r2
 80130ac:	81a3      	strh	r3, [r4, #12]
 80130ae:	9b01      	ldr	r3, [sp, #4]
 80130b0:	6126      	str	r6, [r4, #16]
 80130b2:	18f6      	adds	r6, r6, r3
 80130b4:	6026      	str	r6, [r4, #0]
 80130b6:	003e      	movs	r6, r7
 80130b8:	6165      	str	r5, [r4, #20]
 80130ba:	1aed      	subs	r5, r5, r3
 80130bc:	60a5      	str	r5, [r4, #8]
 80130be:	42be      	cmp	r6, r7
 80130c0:	d900      	bls.n	80130c4 <__ssputs_r+0x78>
 80130c2:	003e      	movs	r6, r7
 80130c4:	0032      	movs	r2, r6
 80130c6:	9903      	ldr	r1, [sp, #12]
 80130c8:	6820      	ldr	r0, [r4, #0]
 80130ca:	f000 fbb3 	bl	8013834 <memmove>
 80130ce:	2000      	movs	r0, #0
 80130d0:	68a3      	ldr	r3, [r4, #8]
 80130d2:	1b9b      	subs	r3, r3, r6
 80130d4:	60a3      	str	r3, [r4, #8]
 80130d6:	6823      	ldr	r3, [r4, #0]
 80130d8:	199b      	adds	r3, r3, r6
 80130da:	6023      	str	r3, [r4, #0]
 80130dc:	b005      	add	sp, #20
 80130de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130e0:	002a      	movs	r2, r5
 80130e2:	9802      	ldr	r0, [sp, #8]
 80130e4:	f000 fc33 	bl	801394e <_realloc_r>
 80130e8:	1e06      	subs	r6, r0, #0
 80130ea:	d1e0      	bne.n	80130ae <__ssputs_r+0x62>
 80130ec:	6921      	ldr	r1, [r4, #16]
 80130ee:	9802      	ldr	r0, [sp, #8]
 80130f0:	f7ff fb02 	bl	80126f8 <_free_r>
 80130f4:	230c      	movs	r3, #12
 80130f6:	2001      	movs	r0, #1
 80130f8:	9a02      	ldr	r2, [sp, #8]
 80130fa:	4240      	negs	r0, r0
 80130fc:	6013      	str	r3, [r2, #0]
 80130fe:	89a2      	ldrh	r2, [r4, #12]
 8013100:	3334      	adds	r3, #52	@ 0x34
 8013102:	4313      	orrs	r3, r2
 8013104:	81a3      	strh	r3, [r4, #12]
 8013106:	e7e9      	b.n	80130dc <__ssputs_r+0x90>
 8013108:	fffffb7f 	.word	0xfffffb7f

0801310c <_svfiprintf_r>:
 801310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801310e:	b0a1      	sub	sp, #132	@ 0x84
 8013110:	9003      	str	r0, [sp, #12]
 8013112:	001d      	movs	r5, r3
 8013114:	898b      	ldrh	r3, [r1, #12]
 8013116:	000f      	movs	r7, r1
 8013118:	0016      	movs	r6, r2
 801311a:	061b      	lsls	r3, r3, #24
 801311c:	d511      	bpl.n	8013142 <_svfiprintf_r+0x36>
 801311e:	690b      	ldr	r3, [r1, #16]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d10e      	bne.n	8013142 <_svfiprintf_r+0x36>
 8013124:	2140      	movs	r1, #64	@ 0x40
 8013126:	f7ff fb5d 	bl	80127e4 <_malloc_r>
 801312a:	6038      	str	r0, [r7, #0]
 801312c:	6138      	str	r0, [r7, #16]
 801312e:	2800      	cmp	r0, #0
 8013130:	d105      	bne.n	801313e <_svfiprintf_r+0x32>
 8013132:	230c      	movs	r3, #12
 8013134:	9a03      	ldr	r2, [sp, #12]
 8013136:	6013      	str	r3, [r2, #0]
 8013138:	2001      	movs	r0, #1
 801313a:	4240      	negs	r0, r0
 801313c:	e0cf      	b.n	80132de <_svfiprintf_r+0x1d2>
 801313e:	2340      	movs	r3, #64	@ 0x40
 8013140:	617b      	str	r3, [r7, #20]
 8013142:	2300      	movs	r3, #0
 8013144:	ac08      	add	r4, sp, #32
 8013146:	6163      	str	r3, [r4, #20]
 8013148:	3320      	adds	r3, #32
 801314a:	7663      	strb	r3, [r4, #25]
 801314c:	3310      	adds	r3, #16
 801314e:	76a3      	strb	r3, [r4, #26]
 8013150:	9507      	str	r5, [sp, #28]
 8013152:	0035      	movs	r5, r6
 8013154:	782b      	ldrb	r3, [r5, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d001      	beq.n	801315e <_svfiprintf_r+0x52>
 801315a:	2b25      	cmp	r3, #37	@ 0x25
 801315c:	d148      	bne.n	80131f0 <_svfiprintf_r+0xe4>
 801315e:	1bab      	subs	r3, r5, r6
 8013160:	9305      	str	r3, [sp, #20]
 8013162:	42b5      	cmp	r5, r6
 8013164:	d00b      	beq.n	801317e <_svfiprintf_r+0x72>
 8013166:	0032      	movs	r2, r6
 8013168:	0039      	movs	r1, r7
 801316a:	9803      	ldr	r0, [sp, #12]
 801316c:	f7ff ff6e 	bl	801304c <__ssputs_r>
 8013170:	3001      	adds	r0, #1
 8013172:	d100      	bne.n	8013176 <_svfiprintf_r+0x6a>
 8013174:	e0ae      	b.n	80132d4 <_svfiprintf_r+0x1c8>
 8013176:	6963      	ldr	r3, [r4, #20]
 8013178:	9a05      	ldr	r2, [sp, #20]
 801317a:	189b      	adds	r3, r3, r2
 801317c:	6163      	str	r3, [r4, #20]
 801317e:	782b      	ldrb	r3, [r5, #0]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d100      	bne.n	8013186 <_svfiprintf_r+0x7a>
 8013184:	e0a6      	b.n	80132d4 <_svfiprintf_r+0x1c8>
 8013186:	2201      	movs	r2, #1
 8013188:	2300      	movs	r3, #0
 801318a:	4252      	negs	r2, r2
 801318c:	6062      	str	r2, [r4, #4]
 801318e:	a904      	add	r1, sp, #16
 8013190:	3254      	adds	r2, #84	@ 0x54
 8013192:	1852      	adds	r2, r2, r1
 8013194:	1c6e      	adds	r6, r5, #1
 8013196:	6023      	str	r3, [r4, #0]
 8013198:	60e3      	str	r3, [r4, #12]
 801319a:	60a3      	str	r3, [r4, #8]
 801319c:	7013      	strb	r3, [r2, #0]
 801319e:	65a3      	str	r3, [r4, #88]	@ 0x58
 80131a0:	4b54      	ldr	r3, [pc, #336]	@ (80132f4 <_svfiprintf_r+0x1e8>)
 80131a2:	2205      	movs	r2, #5
 80131a4:	0018      	movs	r0, r3
 80131a6:	7831      	ldrb	r1, [r6, #0]
 80131a8:	9305      	str	r3, [sp, #20]
 80131aa:	f7fe fc18 	bl	80119de <memchr>
 80131ae:	1c75      	adds	r5, r6, #1
 80131b0:	2800      	cmp	r0, #0
 80131b2:	d11f      	bne.n	80131f4 <_svfiprintf_r+0xe8>
 80131b4:	6822      	ldr	r2, [r4, #0]
 80131b6:	06d3      	lsls	r3, r2, #27
 80131b8:	d504      	bpl.n	80131c4 <_svfiprintf_r+0xb8>
 80131ba:	2353      	movs	r3, #83	@ 0x53
 80131bc:	a904      	add	r1, sp, #16
 80131be:	185b      	adds	r3, r3, r1
 80131c0:	2120      	movs	r1, #32
 80131c2:	7019      	strb	r1, [r3, #0]
 80131c4:	0713      	lsls	r3, r2, #28
 80131c6:	d504      	bpl.n	80131d2 <_svfiprintf_r+0xc6>
 80131c8:	2353      	movs	r3, #83	@ 0x53
 80131ca:	a904      	add	r1, sp, #16
 80131cc:	185b      	adds	r3, r3, r1
 80131ce:	212b      	movs	r1, #43	@ 0x2b
 80131d0:	7019      	strb	r1, [r3, #0]
 80131d2:	7833      	ldrb	r3, [r6, #0]
 80131d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80131d6:	d016      	beq.n	8013206 <_svfiprintf_r+0xfa>
 80131d8:	0035      	movs	r5, r6
 80131da:	2100      	movs	r1, #0
 80131dc:	200a      	movs	r0, #10
 80131de:	68e3      	ldr	r3, [r4, #12]
 80131e0:	782a      	ldrb	r2, [r5, #0]
 80131e2:	1c6e      	adds	r6, r5, #1
 80131e4:	3a30      	subs	r2, #48	@ 0x30
 80131e6:	2a09      	cmp	r2, #9
 80131e8:	d950      	bls.n	801328c <_svfiprintf_r+0x180>
 80131ea:	2900      	cmp	r1, #0
 80131ec:	d111      	bne.n	8013212 <_svfiprintf_r+0x106>
 80131ee:	e017      	b.n	8013220 <_svfiprintf_r+0x114>
 80131f0:	3501      	adds	r5, #1
 80131f2:	e7af      	b.n	8013154 <_svfiprintf_r+0x48>
 80131f4:	9b05      	ldr	r3, [sp, #20]
 80131f6:	6822      	ldr	r2, [r4, #0]
 80131f8:	1ac0      	subs	r0, r0, r3
 80131fa:	2301      	movs	r3, #1
 80131fc:	4083      	lsls	r3, r0
 80131fe:	4313      	orrs	r3, r2
 8013200:	002e      	movs	r6, r5
 8013202:	6023      	str	r3, [r4, #0]
 8013204:	e7cc      	b.n	80131a0 <_svfiprintf_r+0x94>
 8013206:	9b07      	ldr	r3, [sp, #28]
 8013208:	1d19      	adds	r1, r3, #4
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	9107      	str	r1, [sp, #28]
 801320e:	2b00      	cmp	r3, #0
 8013210:	db01      	blt.n	8013216 <_svfiprintf_r+0x10a>
 8013212:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013214:	e004      	b.n	8013220 <_svfiprintf_r+0x114>
 8013216:	425b      	negs	r3, r3
 8013218:	60e3      	str	r3, [r4, #12]
 801321a:	2302      	movs	r3, #2
 801321c:	4313      	orrs	r3, r2
 801321e:	6023      	str	r3, [r4, #0]
 8013220:	782b      	ldrb	r3, [r5, #0]
 8013222:	2b2e      	cmp	r3, #46	@ 0x2e
 8013224:	d10c      	bne.n	8013240 <_svfiprintf_r+0x134>
 8013226:	786b      	ldrb	r3, [r5, #1]
 8013228:	2b2a      	cmp	r3, #42	@ 0x2a
 801322a:	d134      	bne.n	8013296 <_svfiprintf_r+0x18a>
 801322c:	9b07      	ldr	r3, [sp, #28]
 801322e:	3502      	adds	r5, #2
 8013230:	1d1a      	adds	r2, r3, #4
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	9207      	str	r2, [sp, #28]
 8013236:	2b00      	cmp	r3, #0
 8013238:	da01      	bge.n	801323e <_svfiprintf_r+0x132>
 801323a:	2301      	movs	r3, #1
 801323c:	425b      	negs	r3, r3
 801323e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013240:	4e2d      	ldr	r6, [pc, #180]	@ (80132f8 <_svfiprintf_r+0x1ec>)
 8013242:	2203      	movs	r2, #3
 8013244:	0030      	movs	r0, r6
 8013246:	7829      	ldrb	r1, [r5, #0]
 8013248:	f7fe fbc9 	bl	80119de <memchr>
 801324c:	2800      	cmp	r0, #0
 801324e:	d006      	beq.n	801325e <_svfiprintf_r+0x152>
 8013250:	2340      	movs	r3, #64	@ 0x40
 8013252:	1b80      	subs	r0, r0, r6
 8013254:	4083      	lsls	r3, r0
 8013256:	6822      	ldr	r2, [r4, #0]
 8013258:	3501      	adds	r5, #1
 801325a:	4313      	orrs	r3, r2
 801325c:	6023      	str	r3, [r4, #0]
 801325e:	7829      	ldrb	r1, [r5, #0]
 8013260:	2206      	movs	r2, #6
 8013262:	4826      	ldr	r0, [pc, #152]	@ (80132fc <_svfiprintf_r+0x1f0>)
 8013264:	1c6e      	adds	r6, r5, #1
 8013266:	7621      	strb	r1, [r4, #24]
 8013268:	f7fe fbb9 	bl	80119de <memchr>
 801326c:	2800      	cmp	r0, #0
 801326e:	d038      	beq.n	80132e2 <_svfiprintf_r+0x1d6>
 8013270:	4b23      	ldr	r3, [pc, #140]	@ (8013300 <_svfiprintf_r+0x1f4>)
 8013272:	2b00      	cmp	r3, #0
 8013274:	d122      	bne.n	80132bc <_svfiprintf_r+0x1b0>
 8013276:	2207      	movs	r2, #7
 8013278:	9b07      	ldr	r3, [sp, #28]
 801327a:	3307      	adds	r3, #7
 801327c:	4393      	bics	r3, r2
 801327e:	3308      	adds	r3, #8
 8013280:	9307      	str	r3, [sp, #28]
 8013282:	6963      	ldr	r3, [r4, #20]
 8013284:	9a04      	ldr	r2, [sp, #16]
 8013286:	189b      	adds	r3, r3, r2
 8013288:	6163      	str	r3, [r4, #20]
 801328a:	e762      	b.n	8013152 <_svfiprintf_r+0x46>
 801328c:	4343      	muls	r3, r0
 801328e:	0035      	movs	r5, r6
 8013290:	2101      	movs	r1, #1
 8013292:	189b      	adds	r3, r3, r2
 8013294:	e7a4      	b.n	80131e0 <_svfiprintf_r+0xd4>
 8013296:	2300      	movs	r3, #0
 8013298:	200a      	movs	r0, #10
 801329a:	0019      	movs	r1, r3
 801329c:	3501      	adds	r5, #1
 801329e:	6063      	str	r3, [r4, #4]
 80132a0:	782a      	ldrb	r2, [r5, #0]
 80132a2:	1c6e      	adds	r6, r5, #1
 80132a4:	3a30      	subs	r2, #48	@ 0x30
 80132a6:	2a09      	cmp	r2, #9
 80132a8:	d903      	bls.n	80132b2 <_svfiprintf_r+0x1a6>
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d0c8      	beq.n	8013240 <_svfiprintf_r+0x134>
 80132ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80132b0:	e7c6      	b.n	8013240 <_svfiprintf_r+0x134>
 80132b2:	4341      	muls	r1, r0
 80132b4:	0035      	movs	r5, r6
 80132b6:	2301      	movs	r3, #1
 80132b8:	1889      	adds	r1, r1, r2
 80132ba:	e7f1      	b.n	80132a0 <_svfiprintf_r+0x194>
 80132bc:	aa07      	add	r2, sp, #28
 80132be:	9200      	str	r2, [sp, #0]
 80132c0:	0021      	movs	r1, r4
 80132c2:	003a      	movs	r2, r7
 80132c4:	4b0f      	ldr	r3, [pc, #60]	@ (8013304 <_svfiprintf_r+0x1f8>)
 80132c6:	9803      	ldr	r0, [sp, #12]
 80132c8:	f7fd fda4 	bl	8010e14 <_printf_float>
 80132cc:	9004      	str	r0, [sp, #16]
 80132ce:	9b04      	ldr	r3, [sp, #16]
 80132d0:	3301      	adds	r3, #1
 80132d2:	d1d6      	bne.n	8013282 <_svfiprintf_r+0x176>
 80132d4:	89bb      	ldrh	r3, [r7, #12]
 80132d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80132d8:	065b      	lsls	r3, r3, #25
 80132da:	d500      	bpl.n	80132de <_svfiprintf_r+0x1d2>
 80132dc:	e72c      	b.n	8013138 <_svfiprintf_r+0x2c>
 80132de:	b021      	add	sp, #132	@ 0x84
 80132e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132e2:	aa07      	add	r2, sp, #28
 80132e4:	9200      	str	r2, [sp, #0]
 80132e6:	0021      	movs	r1, r4
 80132e8:	003a      	movs	r2, r7
 80132ea:	4b06      	ldr	r3, [pc, #24]	@ (8013304 <_svfiprintf_r+0x1f8>)
 80132ec:	9803      	ldr	r0, [sp, #12]
 80132ee:	f7fe f83f 	bl	8011370 <_printf_i>
 80132f2:	e7eb      	b.n	80132cc <_svfiprintf_r+0x1c0>
 80132f4:	08026f98 	.word	0x08026f98
 80132f8:	08026f9e 	.word	0x08026f9e
 80132fc:	08026fa2 	.word	0x08026fa2
 8013300:	08010e15 	.word	0x08010e15
 8013304:	0801304d 	.word	0x0801304d

08013308 <__sfputc_r>:
 8013308:	6893      	ldr	r3, [r2, #8]
 801330a:	b510      	push	{r4, lr}
 801330c:	3b01      	subs	r3, #1
 801330e:	6093      	str	r3, [r2, #8]
 8013310:	2b00      	cmp	r3, #0
 8013312:	da04      	bge.n	801331e <__sfputc_r+0x16>
 8013314:	6994      	ldr	r4, [r2, #24]
 8013316:	42a3      	cmp	r3, r4
 8013318:	db07      	blt.n	801332a <__sfputc_r+0x22>
 801331a:	290a      	cmp	r1, #10
 801331c:	d005      	beq.n	801332a <__sfputc_r+0x22>
 801331e:	6813      	ldr	r3, [r2, #0]
 8013320:	1c58      	adds	r0, r3, #1
 8013322:	6010      	str	r0, [r2, #0]
 8013324:	7019      	strb	r1, [r3, #0]
 8013326:	0008      	movs	r0, r1
 8013328:	bd10      	pop	{r4, pc}
 801332a:	f000 f9e2 	bl	80136f2 <__swbuf_r>
 801332e:	0001      	movs	r1, r0
 8013330:	e7f9      	b.n	8013326 <__sfputc_r+0x1e>

08013332 <__sfputs_r>:
 8013332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013334:	0006      	movs	r6, r0
 8013336:	000f      	movs	r7, r1
 8013338:	0014      	movs	r4, r2
 801333a:	18d5      	adds	r5, r2, r3
 801333c:	42ac      	cmp	r4, r5
 801333e:	d101      	bne.n	8013344 <__sfputs_r+0x12>
 8013340:	2000      	movs	r0, #0
 8013342:	e007      	b.n	8013354 <__sfputs_r+0x22>
 8013344:	7821      	ldrb	r1, [r4, #0]
 8013346:	003a      	movs	r2, r7
 8013348:	0030      	movs	r0, r6
 801334a:	f7ff ffdd 	bl	8013308 <__sfputc_r>
 801334e:	3401      	adds	r4, #1
 8013350:	1c43      	adds	r3, r0, #1
 8013352:	d1f3      	bne.n	801333c <__sfputs_r+0xa>
 8013354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013358 <_vfiprintf_r>:
 8013358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801335a:	b0a1      	sub	sp, #132	@ 0x84
 801335c:	000f      	movs	r7, r1
 801335e:	0015      	movs	r5, r2
 8013360:	001e      	movs	r6, r3
 8013362:	9003      	str	r0, [sp, #12]
 8013364:	2800      	cmp	r0, #0
 8013366:	d004      	beq.n	8013372 <_vfiprintf_r+0x1a>
 8013368:	6a03      	ldr	r3, [r0, #32]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d101      	bne.n	8013372 <_vfiprintf_r+0x1a>
 801336e:	f7fe f99d 	bl	80116ac <__sinit>
 8013372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013374:	07db      	lsls	r3, r3, #31
 8013376:	d405      	bmi.n	8013384 <_vfiprintf_r+0x2c>
 8013378:	89bb      	ldrh	r3, [r7, #12]
 801337a:	059b      	lsls	r3, r3, #22
 801337c:	d402      	bmi.n	8013384 <_vfiprintf_r+0x2c>
 801337e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013380:	f7fe fb2b 	bl	80119da <__retarget_lock_acquire_recursive>
 8013384:	89bb      	ldrh	r3, [r7, #12]
 8013386:	071b      	lsls	r3, r3, #28
 8013388:	d502      	bpl.n	8013390 <_vfiprintf_r+0x38>
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d113      	bne.n	80133b8 <_vfiprintf_r+0x60>
 8013390:	0039      	movs	r1, r7
 8013392:	9803      	ldr	r0, [sp, #12]
 8013394:	f000 f9f0 	bl	8013778 <__swsetup_r>
 8013398:	2800      	cmp	r0, #0
 801339a:	d00d      	beq.n	80133b8 <_vfiprintf_r+0x60>
 801339c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801339e:	07db      	lsls	r3, r3, #31
 80133a0:	d503      	bpl.n	80133aa <_vfiprintf_r+0x52>
 80133a2:	2001      	movs	r0, #1
 80133a4:	4240      	negs	r0, r0
 80133a6:	b021      	add	sp, #132	@ 0x84
 80133a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133aa:	89bb      	ldrh	r3, [r7, #12]
 80133ac:	059b      	lsls	r3, r3, #22
 80133ae:	d4f8      	bmi.n	80133a2 <_vfiprintf_r+0x4a>
 80133b0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80133b2:	f7fe fb13 	bl	80119dc <__retarget_lock_release_recursive>
 80133b6:	e7f4      	b.n	80133a2 <_vfiprintf_r+0x4a>
 80133b8:	2300      	movs	r3, #0
 80133ba:	ac08      	add	r4, sp, #32
 80133bc:	6163      	str	r3, [r4, #20]
 80133be:	3320      	adds	r3, #32
 80133c0:	7663      	strb	r3, [r4, #25]
 80133c2:	3310      	adds	r3, #16
 80133c4:	76a3      	strb	r3, [r4, #26]
 80133c6:	9607      	str	r6, [sp, #28]
 80133c8:	002e      	movs	r6, r5
 80133ca:	7833      	ldrb	r3, [r6, #0]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d001      	beq.n	80133d4 <_vfiprintf_r+0x7c>
 80133d0:	2b25      	cmp	r3, #37	@ 0x25
 80133d2:	d148      	bne.n	8013466 <_vfiprintf_r+0x10e>
 80133d4:	1b73      	subs	r3, r6, r5
 80133d6:	9305      	str	r3, [sp, #20]
 80133d8:	42ae      	cmp	r6, r5
 80133da:	d00b      	beq.n	80133f4 <_vfiprintf_r+0x9c>
 80133dc:	002a      	movs	r2, r5
 80133de:	0039      	movs	r1, r7
 80133e0:	9803      	ldr	r0, [sp, #12]
 80133e2:	f7ff ffa6 	bl	8013332 <__sfputs_r>
 80133e6:	3001      	adds	r0, #1
 80133e8:	d100      	bne.n	80133ec <_vfiprintf_r+0x94>
 80133ea:	e0ae      	b.n	801354a <_vfiprintf_r+0x1f2>
 80133ec:	6963      	ldr	r3, [r4, #20]
 80133ee:	9a05      	ldr	r2, [sp, #20]
 80133f0:	189b      	adds	r3, r3, r2
 80133f2:	6163      	str	r3, [r4, #20]
 80133f4:	7833      	ldrb	r3, [r6, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d100      	bne.n	80133fc <_vfiprintf_r+0xa4>
 80133fa:	e0a6      	b.n	801354a <_vfiprintf_r+0x1f2>
 80133fc:	2201      	movs	r2, #1
 80133fe:	2300      	movs	r3, #0
 8013400:	4252      	negs	r2, r2
 8013402:	6062      	str	r2, [r4, #4]
 8013404:	a904      	add	r1, sp, #16
 8013406:	3254      	adds	r2, #84	@ 0x54
 8013408:	1852      	adds	r2, r2, r1
 801340a:	1c75      	adds	r5, r6, #1
 801340c:	6023      	str	r3, [r4, #0]
 801340e:	60e3      	str	r3, [r4, #12]
 8013410:	60a3      	str	r3, [r4, #8]
 8013412:	7013      	strb	r3, [r2, #0]
 8013414:	65a3      	str	r3, [r4, #88]	@ 0x58
 8013416:	4b59      	ldr	r3, [pc, #356]	@ (801357c <_vfiprintf_r+0x224>)
 8013418:	2205      	movs	r2, #5
 801341a:	0018      	movs	r0, r3
 801341c:	7829      	ldrb	r1, [r5, #0]
 801341e:	9305      	str	r3, [sp, #20]
 8013420:	f7fe fadd 	bl	80119de <memchr>
 8013424:	1c6e      	adds	r6, r5, #1
 8013426:	2800      	cmp	r0, #0
 8013428:	d11f      	bne.n	801346a <_vfiprintf_r+0x112>
 801342a:	6822      	ldr	r2, [r4, #0]
 801342c:	06d3      	lsls	r3, r2, #27
 801342e:	d504      	bpl.n	801343a <_vfiprintf_r+0xe2>
 8013430:	2353      	movs	r3, #83	@ 0x53
 8013432:	a904      	add	r1, sp, #16
 8013434:	185b      	adds	r3, r3, r1
 8013436:	2120      	movs	r1, #32
 8013438:	7019      	strb	r1, [r3, #0]
 801343a:	0713      	lsls	r3, r2, #28
 801343c:	d504      	bpl.n	8013448 <_vfiprintf_r+0xf0>
 801343e:	2353      	movs	r3, #83	@ 0x53
 8013440:	a904      	add	r1, sp, #16
 8013442:	185b      	adds	r3, r3, r1
 8013444:	212b      	movs	r1, #43	@ 0x2b
 8013446:	7019      	strb	r1, [r3, #0]
 8013448:	782b      	ldrb	r3, [r5, #0]
 801344a:	2b2a      	cmp	r3, #42	@ 0x2a
 801344c:	d016      	beq.n	801347c <_vfiprintf_r+0x124>
 801344e:	002e      	movs	r6, r5
 8013450:	2100      	movs	r1, #0
 8013452:	200a      	movs	r0, #10
 8013454:	68e3      	ldr	r3, [r4, #12]
 8013456:	7832      	ldrb	r2, [r6, #0]
 8013458:	1c75      	adds	r5, r6, #1
 801345a:	3a30      	subs	r2, #48	@ 0x30
 801345c:	2a09      	cmp	r2, #9
 801345e:	d950      	bls.n	8013502 <_vfiprintf_r+0x1aa>
 8013460:	2900      	cmp	r1, #0
 8013462:	d111      	bne.n	8013488 <_vfiprintf_r+0x130>
 8013464:	e017      	b.n	8013496 <_vfiprintf_r+0x13e>
 8013466:	3601      	adds	r6, #1
 8013468:	e7af      	b.n	80133ca <_vfiprintf_r+0x72>
 801346a:	9b05      	ldr	r3, [sp, #20]
 801346c:	6822      	ldr	r2, [r4, #0]
 801346e:	1ac0      	subs	r0, r0, r3
 8013470:	2301      	movs	r3, #1
 8013472:	4083      	lsls	r3, r0
 8013474:	4313      	orrs	r3, r2
 8013476:	0035      	movs	r5, r6
 8013478:	6023      	str	r3, [r4, #0]
 801347a:	e7cc      	b.n	8013416 <_vfiprintf_r+0xbe>
 801347c:	9b07      	ldr	r3, [sp, #28]
 801347e:	1d19      	adds	r1, r3, #4
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	9107      	str	r1, [sp, #28]
 8013484:	2b00      	cmp	r3, #0
 8013486:	db01      	blt.n	801348c <_vfiprintf_r+0x134>
 8013488:	930b      	str	r3, [sp, #44]	@ 0x2c
 801348a:	e004      	b.n	8013496 <_vfiprintf_r+0x13e>
 801348c:	425b      	negs	r3, r3
 801348e:	60e3      	str	r3, [r4, #12]
 8013490:	2302      	movs	r3, #2
 8013492:	4313      	orrs	r3, r2
 8013494:	6023      	str	r3, [r4, #0]
 8013496:	7833      	ldrb	r3, [r6, #0]
 8013498:	2b2e      	cmp	r3, #46	@ 0x2e
 801349a:	d10c      	bne.n	80134b6 <_vfiprintf_r+0x15e>
 801349c:	7873      	ldrb	r3, [r6, #1]
 801349e:	2b2a      	cmp	r3, #42	@ 0x2a
 80134a0:	d134      	bne.n	801350c <_vfiprintf_r+0x1b4>
 80134a2:	9b07      	ldr	r3, [sp, #28]
 80134a4:	3602      	adds	r6, #2
 80134a6:	1d1a      	adds	r2, r3, #4
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	9207      	str	r2, [sp, #28]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	da01      	bge.n	80134b4 <_vfiprintf_r+0x15c>
 80134b0:	2301      	movs	r3, #1
 80134b2:	425b      	negs	r3, r3
 80134b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80134b6:	4d32      	ldr	r5, [pc, #200]	@ (8013580 <_vfiprintf_r+0x228>)
 80134b8:	2203      	movs	r2, #3
 80134ba:	0028      	movs	r0, r5
 80134bc:	7831      	ldrb	r1, [r6, #0]
 80134be:	f7fe fa8e 	bl	80119de <memchr>
 80134c2:	2800      	cmp	r0, #0
 80134c4:	d006      	beq.n	80134d4 <_vfiprintf_r+0x17c>
 80134c6:	2340      	movs	r3, #64	@ 0x40
 80134c8:	1b40      	subs	r0, r0, r5
 80134ca:	4083      	lsls	r3, r0
 80134cc:	6822      	ldr	r2, [r4, #0]
 80134ce:	3601      	adds	r6, #1
 80134d0:	4313      	orrs	r3, r2
 80134d2:	6023      	str	r3, [r4, #0]
 80134d4:	7831      	ldrb	r1, [r6, #0]
 80134d6:	2206      	movs	r2, #6
 80134d8:	482a      	ldr	r0, [pc, #168]	@ (8013584 <_vfiprintf_r+0x22c>)
 80134da:	1c75      	adds	r5, r6, #1
 80134dc:	7621      	strb	r1, [r4, #24]
 80134de:	f7fe fa7e 	bl	80119de <memchr>
 80134e2:	2800      	cmp	r0, #0
 80134e4:	d040      	beq.n	8013568 <_vfiprintf_r+0x210>
 80134e6:	4b28      	ldr	r3, [pc, #160]	@ (8013588 <_vfiprintf_r+0x230>)
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d122      	bne.n	8013532 <_vfiprintf_r+0x1da>
 80134ec:	2207      	movs	r2, #7
 80134ee:	9b07      	ldr	r3, [sp, #28]
 80134f0:	3307      	adds	r3, #7
 80134f2:	4393      	bics	r3, r2
 80134f4:	3308      	adds	r3, #8
 80134f6:	9307      	str	r3, [sp, #28]
 80134f8:	6963      	ldr	r3, [r4, #20]
 80134fa:	9a04      	ldr	r2, [sp, #16]
 80134fc:	189b      	adds	r3, r3, r2
 80134fe:	6163      	str	r3, [r4, #20]
 8013500:	e762      	b.n	80133c8 <_vfiprintf_r+0x70>
 8013502:	4343      	muls	r3, r0
 8013504:	002e      	movs	r6, r5
 8013506:	2101      	movs	r1, #1
 8013508:	189b      	adds	r3, r3, r2
 801350a:	e7a4      	b.n	8013456 <_vfiprintf_r+0xfe>
 801350c:	2300      	movs	r3, #0
 801350e:	200a      	movs	r0, #10
 8013510:	0019      	movs	r1, r3
 8013512:	3601      	adds	r6, #1
 8013514:	6063      	str	r3, [r4, #4]
 8013516:	7832      	ldrb	r2, [r6, #0]
 8013518:	1c75      	adds	r5, r6, #1
 801351a:	3a30      	subs	r2, #48	@ 0x30
 801351c:	2a09      	cmp	r2, #9
 801351e:	d903      	bls.n	8013528 <_vfiprintf_r+0x1d0>
 8013520:	2b00      	cmp	r3, #0
 8013522:	d0c8      	beq.n	80134b6 <_vfiprintf_r+0x15e>
 8013524:	9109      	str	r1, [sp, #36]	@ 0x24
 8013526:	e7c6      	b.n	80134b6 <_vfiprintf_r+0x15e>
 8013528:	4341      	muls	r1, r0
 801352a:	002e      	movs	r6, r5
 801352c:	2301      	movs	r3, #1
 801352e:	1889      	adds	r1, r1, r2
 8013530:	e7f1      	b.n	8013516 <_vfiprintf_r+0x1be>
 8013532:	aa07      	add	r2, sp, #28
 8013534:	9200      	str	r2, [sp, #0]
 8013536:	0021      	movs	r1, r4
 8013538:	003a      	movs	r2, r7
 801353a:	4b14      	ldr	r3, [pc, #80]	@ (801358c <_vfiprintf_r+0x234>)
 801353c:	9803      	ldr	r0, [sp, #12]
 801353e:	f7fd fc69 	bl	8010e14 <_printf_float>
 8013542:	9004      	str	r0, [sp, #16]
 8013544:	9b04      	ldr	r3, [sp, #16]
 8013546:	3301      	adds	r3, #1
 8013548:	d1d6      	bne.n	80134f8 <_vfiprintf_r+0x1a0>
 801354a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801354c:	07db      	lsls	r3, r3, #31
 801354e:	d405      	bmi.n	801355c <_vfiprintf_r+0x204>
 8013550:	89bb      	ldrh	r3, [r7, #12]
 8013552:	059b      	lsls	r3, r3, #22
 8013554:	d402      	bmi.n	801355c <_vfiprintf_r+0x204>
 8013556:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013558:	f7fe fa40 	bl	80119dc <__retarget_lock_release_recursive>
 801355c:	89bb      	ldrh	r3, [r7, #12]
 801355e:	065b      	lsls	r3, r3, #25
 8013560:	d500      	bpl.n	8013564 <_vfiprintf_r+0x20c>
 8013562:	e71e      	b.n	80133a2 <_vfiprintf_r+0x4a>
 8013564:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8013566:	e71e      	b.n	80133a6 <_vfiprintf_r+0x4e>
 8013568:	aa07      	add	r2, sp, #28
 801356a:	9200      	str	r2, [sp, #0]
 801356c:	0021      	movs	r1, r4
 801356e:	003a      	movs	r2, r7
 8013570:	4b06      	ldr	r3, [pc, #24]	@ (801358c <_vfiprintf_r+0x234>)
 8013572:	9803      	ldr	r0, [sp, #12]
 8013574:	f7fd fefc 	bl	8011370 <_printf_i>
 8013578:	e7e3      	b.n	8013542 <_vfiprintf_r+0x1ea>
 801357a:	46c0      	nop			@ (mov r8, r8)
 801357c:	08026f98 	.word	0x08026f98
 8013580:	08026f9e 	.word	0x08026f9e
 8013584:	08026fa2 	.word	0x08026fa2
 8013588:	08010e15 	.word	0x08010e15
 801358c:	08013333 	.word	0x08013333

08013590 <__sflush_r>:
 8013590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013592:	220c      	movs	r2, #12
 8013594:	5e8b      	ldrsh	r3, [r1, r2]
 8013596:	0005      	movs	r5, r0
 8013598:	000c      	movs	r4, r1
 801359a:	071a      	lsls	r2, r3, #28
 801359c:	d456      	bmi.n	801364c <__sflush_r+0xbc>
 801359e:	684a      	ldr	r2, [r1, #4]
 80135a0:	2a00      	cmp	r2, #0
 80135a2:	dc02      	bgt.n	80135aa <__sflush_r+0x1a>
 80135a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80135a6:	2a00      	cmp	r2, #0
 80135a8:	dd4e      	ble.n	8013648 <__sflush_r+0xb8>
 80135aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80135ac:	2f00      	cmp	r7, #0
 80135ae:	d04b      	beq.n	8013648 <__sflush_r+0xb8>
 80135b0:	2200      	movs	r2, #0
 80135b2:	2080      	movs	r0, #128	@ 0x80
 80135b4:	682e      	ldr	r6, [r5, #0]
 80135b6:	602a      	str	r2, [r5, #0]
 80135b8:	001a      	movs	r2, r3
 80135ba:	0140      	lsls	r0, r0, #5
 80135bc:	6a21      	ldr	r1, [r4, #32]
 80135be:	4002      	ands	r2, r0
 80135c0:	4203      	tst	r3, r0
 80135c2:	d033      	beq.n	801362c <__sflush_r+0x9c>
 80135c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80135c6:	89a3      	ldrh	r3, [r4, #12]
 80135c8:	075b      	lsls	r3, r3, #29
 80135ca:	d506      	bpl.n	80135da <__sflush_r+0x4a>
 80135cc:	6863      	ldr	r3, [r4, #4]
 80135ce:	1ad2      	subs	r2, r2, r3
 80135d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d001      	beq.n	80135da <__sflush_r+0x4a>
 80135d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80135d8:	1ad2      	subs	r2, r2, r3
 80135da:	2300      	movs	r3, #0
 80135dc:	0028      	movs	r0, r5
 80135de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80135e0:	6a21      	ldr	r1, [r4, #32]
 80135e2:	47b8      	blx	r7
 80135e4:	89a2      	ldrh	r2, [r4, #12]
 80135e6:	1c43      	adds	r3, r0, #1
 80135e8:	d106      	bne.n	80135f8 <__sflush_r+0x68>
 80135ea:	6829      	ldr	r1, [r5, #0]
 80135ec:	291d      	cmp	r1, #29
 80135ee:	d846      	bhi.n	801367e <__sflush_r+0xee>
 80135f0:	4b29      	ldr	r3, [pc, #164]	@ (8013698 <__sflush_r+0x108>)
 80135f2:	410b      	asrs	r3, r1
 80135f4:	07db      	lsls	r3, r3, #31
 80135f6:	d442      	bmi.n	801367e <__sflush_r+0xee>
 80135f8:	2300      	movs	r3, #0
 80135fa:	6063      	str	r3, [r4, #4]
 80135fc:	6923      	ldr	r3, [r4, #16]
 80135fe:	6023      	str	r3, [r4, #0]
 8013600:	04d2      	lsls	r2, r2, #19
 8013602:	d505      	bpl.n	8013610 <__sflush_r+0x80>
 8013604:	1c43      	adds	r3, r0, #1
 8013606:	d102      	bne.n	801360e <__sflush_r+0x7e>
 8013608:	682b      	ldr	r3, [r5, #0]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d100      	bne.n	8013610 <__sflush_r+0x80>
 801360e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013612:	602e      	str	r6, [r5, #0]
 8013614:	2900      	cmp	r1, #0
 8013616:	d017      	beq.n	8013648 <__sflush_r+0xb8>
 8013618:	0023      	movs	r3, r4
 801361a:	3344      	adds	r3, #68	@ 0x44
 801361c:	4299      	cmp	r1, r3
 801361e:	d002      	beq.n	8013626 <__sflush_r+0x96>
 8013620:	0028      	movs	r0, r5
 8013622:	f7ff f869 	bl	80126f8 <_free_r>
 8013626:	2300      	movs	r3, #0
 8013628:	6363      	str	r3, [r4, #52]	@ 0x34
 801362a:	e00d      	b.n	8013648 <__sflush_r+0xb8>
 801362c:	2301      	movs	r3, #1
 801362e:	0028      	movs	r0, r5
 8013630:	47b8      	blx	r7
 8013632:	0002      	movs	r2, r0
 8013634:	1c43      	adds	r3, r0, #1
 8013636:	d1c6      	bne.n	80135c6 <__sflush_r+0x36>
 8013638:	682b      	ldr	r3, [r5, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d0c3      	beq.n	80135c6 <__sflush_r+0x36>
 801363e:	2b1d      	cmp	r3, #29
 8013640:	d001      	beq.n	8013646 <__sflush_r+0xb6>
 8013642:	2b16      	cmp	r3, #22
 8013644:	d11a      	bne.n	801367c <__sflush_r+0xec>
 8013646:	602e      	str	r6, [r5, #0]
 8013648:	2000      	movs	r0, #0
 801364a:	e01e      	b.n	801368a <__sflush_r+0xfa>
 801364c:	690e      	ldr	r6, [r1, #16]
 801364e:	2e00      	cmp	r6, #0
 8013650:	d0fa      	beq.n	8013648 <__sflush_r+0xb8>
 8013652:	680f      	ldr	r7, [r1, #0]
 8013654:	600e      	str	r6, [r1, #0]
 8013656:	1bba      	subs	r2, r7, r6
 8013658:	9201      	str	r2, [sp, #4]
 801365a:	2200      	movs	r2, #0
 801365c:	079b      	lsls	r3, r3, #30
 801365e:	d100      	bne.n	8013662 <__sflush_r+0xd2>
 8013660:	694a      	ldr	r2, [r1, #20]
 8013662:	60a2      	str	r2, [r4, #8]
 8013664:	9b01      	ldr	r3, [sp, #4]
 8013666:	2b00      	cmp	r3, #0
 8013668:	ddee      	ble.n	8013648 <__sflush_r+0xb8>
 801366a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801366c:	0032      	movs	r2, r6
 801366e:	001f      	movs	r7, r3
 8013670:	0028      	movs	r0, r5
 8013672:	9b01      	ldr	r3, [sp, #4]
 8013674:	6a21      	ldr	r1, [r4, #32]
 8013676:	47b8      	blx	r7
 8013678:	2800      	cmp	r0, #0
 801367a:	dc07      	bgt.n	801368c <__sflush_r+0xfc>
 801367c:	89a2      	ldrh	r2, [r4, #12]
 801367e:	2340      	movs	r3, #64	@ 0x40
 8013680:	2001      	movs	r0, #1
 8013682:	4313      	orrs	r3, r2
 8013684:	b21b      	sxth	r3, r3
 8013686:	81a3      	strh	r3, [r4, #12]
 8013688:	4240      	negs	r0, r0
 801368a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801368c:	9b01      	ldr	r3, [sp, #4]
 801368e:	1836      	adds	r6, r6, r0
 8013690:	1a1b      	subs	r3, r3, r0
 8013692:	9301      	str	r3, [sp, #4]
 8013694:	e7e6      	b.n	8013664 <__sflush_r+0xd4>
 8013696:	46c0      	nop			@ (mov r8, r8)
 8013698:	dfbffffe 	.word	0xdfbffffe

0801369c <_fflush_r>:
 801369c:	690b      	ldr	r3, [r1, #16]
 801369e:	b570      	push	{r4, r5, r6, lr}
 80136a0:	0005      	movs	r5, r0
 80136a2:	000c      	movs	r4, r1
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d102      	bne.n	80136ae <_fflush_r+0x12>
 80136a8:	2500      	movs	r5, #0
 80136aa:	0028      	movs	r0, r5
 80136ac:	bd70      	pop	{r4, r5, r6, pc}
 80136ae:	2800      	cmp	r0, #0
 80136b0:	d004      	beq.n	80136bc <_fflush_r+0x20>
 80136b2:	6a03      	ldr	r3, [r0, #32]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d101      	bne.n	80136bc <_fflush_r+0x20>
 80136b8:	f7fd fff8 	bl	80116ac <__sinit>
 80136bc:	220c      	movs	r2, #12
 80136be:	5ea3      	ldrsh	r3, [r4, r2]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d0f1      	beq.n	80136a8 <_fflush_r+0xc>
 80136c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80136c6:	07d2      	lsls	r2, r2, #31
 80136c8:	d404      	bmi.n	80136d4 <_fflush_r+0x38>
 80136ca:	059b      	lsls	r3, r3, #22
 80136cc:	d402      	bmi.n	80136d4 <_fflush_r+0x38>
 80136ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136d0:	f7fe f983 	bl	80119da <__retarget_lock_acquire_recursive>
 80136d4:	0028      	movs	r0, r5
 80136d6:	0021      	movs	r1, r4
 80136d8:	f7ff ff5a 	bl	8013590 <__sflush_r>
 80136dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80136de:	0005      	movs	r5, r0
 80136e0:	07db      	lsls	r3, r3, #31
 80136e2:	d4e2      	bmi.n	80136aa <_fflush_r+0xe>
 80136e4:	89a3      	ldrh	r3, [r4, #12]
 80136e6:	059b      	lsls	r3, r3, #22
 80136e8:	d4df      	bmi.n	80136aa <_fflush_r+0xe>
 80136ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136ec:	f7fe f976 	bl	80119dc <__retarget_lock_release_recursive>
 80136f0:	e7db      	b.n	80136aa <_fflush_r+0xe>

080136f2 <__swbuf_r>:
 80136f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136f4:	0006      	movs	r6, r0
 80136f6:	000d      	movs	r5, r1
 80136f8:	0014      	movs	r4, r2
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d004      	beq.n	8013708 <__swbuf_r+0x16>
 80136fe:	6a03      	ldr	r3, [r0, #32]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d101      	bne.n	8013708 <__swbuf_r+0x16>
 8013704:	f7fd ffd2 	bl	80116ac <__sinit>
 8013708:	69a3      	ldr	r3, [r4, #24]
 801370a:	60a3      	str	r3, [r4, #8]
 801370c:	89a3      	ldrh	r3, [r4, #12]
 801370e:	071b      	lsls	r3, r3, #28
 8013710:	d502      	bpl.n	8013718 <__swbuf_r+0x26>
 8013712:	6923      	ldr	r3, [r4, #16]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d109      	bne.n	801372c <__swbuf_r+0x3a>
 8013718:	0021      	movs	r1, r4
 801371a:	0030      	movs	r0, r6
 801371c:	f000 f82c 	bl	8013778 <__swsetup_r>
 8013720:	2800      	cmp	r0, #0
 8013722:	d003      	beq.n	801372c <__swbuf_r+0x3a>
 8013724:	2501      	movs	r5, #1
 8013726:	426d      	negs	r5, r5
 8013728:	0028      	movs	r0, r5
 801372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801372c:	6923      	ldr	r3, [r4, #16]
 801372e:	6820      	ldr	r0, [r4, #0]
 8013730:	b2ef      	uxtb	r7, r5
 8013732:	1ac0      	subs	r0, r0, r3
 8013734:	6963      	ldr	r3, [r4, #20]
 8013736:	b2ed      	uxtb	r5, r5
 8013738:	4283      	cmp	r3, r0
 801373a:	dc05      	bgt.n	8013748 <__swbuf_r+0x56>
 801373c:	0021      	movs	r1, r4
 801373e:	0030      	movs	r0, r6
 8013740:	f7ff ffac 	bl	801369c <_fflush_r>
 8013744:	2800      	cmp	r0, #0
 8013746:	d1ed      	bne.n	8013724 <__swbuf_r+0x32>
 8013748:	68a3      	ldr	r3, [r4, #8]
 801374a:	3001      	adds	r0, #1
 801374c:	3b01      	subs	r3, #1
 801374e:	60a3      	str	r3, [r4, #8]
 8013750:	6823      	ldr	r3, [r4, #0]
 8013752:	1c5a      	adds	r2, r3, #1
 8013754:	6022      	str	r2, [r4, #0]
 8013756:	701f      	strb	r7, [r3, #0]
 8013758:	6963      	ldr	r3, [r4, #20]
 801375a:	4283      	cmp	r3, r0
 801375c:	d004      	beq.n	8013768 <__swbuf_r+0x76>
 801375e:	89a3      	ldrh	r3, [r4, #12]
 8013760:	07db      	lsls	r3, r3, #31
 8013762:	d5e1      	bpl.n	8013728 <__swbuf_r+0x36>
 8013764:	2d0a      	cmp	r5, #10
 8013766:	d1df      	bne.n	8013728 <__swbuf_r+0x36>
 8013768:	0021      	movs	r1, r4
 801376a:	0030      	movs	r0, r6
 801376c:	f7ff ff96 	bl	801369c <_fflush_r>
 8013770:	2800      	cmp	r0, #0
 8013772:	d0d9      	beq.n	8013728 <__swbuf_r+0x36>
 8013774:	e7d6      	b.n	8013724 <__swbuf_r+0x32>
	...

08013778 <__swsetup_r>:
 8013778:	4b2d      	ldr	r3, [pc, #180]	@ (8013830 <__swsetup_r+0xb8>)
 801377a:	b570      	push	{r4, r5, r6, lr}
 801377c:	0005      	movs	r5, r0
 801377e:	6818      	ldr	r0, [r3, #0]
 8013780:	000c      	movs	r4, r1
 8013782:	2800      	cmp	r0, #0
 8013784:	d004      	beq.n	8013790 <__swsetup_r+0x18>
 8013786:	6a03      	ldr	r3, [r0, #32]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d101      	bne.n	8013790 <__swsetup_r+0x18>
 801378c:	f7fd ff8e 	bl	80116ac <__sinit>
 8013790:	230c      	movs	r3, #12
 8013792:	5ee2      	ldrsh	r2, [r4, r3]
 8013794:	0713      	lsls	r3, r2, #28
 8013796:	d423      	bmi.n	80137e0 <__swsetup_r+0x68>
 8013798:	06d3      	lsls	r3, r2, #27
 801379a:	d407      	bmi.n	80137ac <__swsetup_r+0x34>
 801379c:	2309      	movs	r3, #9
 801379e:	602b      	str	r3, [r5, #0]
 80137a0:	2340      	movs	r3, #64	@ 0x40
 80137a2:	2001      	movs	r0, #1
 80137a4:	4313      	orrs	r3, r2
 80137a6:	81a3      	strh	r3, [r4, #12]
 80137a8:	4240      	negs	r0, r0
 80137aa:	e03a      	b.n	8013822 <__swsetup_r+0xaa>
 80137ac:	0752      	lsls	r2, r2, #29
 80137ae:	d513      	bpl.n	80137d8 <__swsetup_r+0x60>
 80137b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137b2:	2900      	cmp	r1, #0
 80137b4:	d008      	beq.n	80137c8 <__swsetup_r+0x50>
 80137b6:	0023      	movs	r3, r4
 80137b8:	3344      	adds	r3, #68	@ 0x44
 80137ba:	4299      	cmp	r1, r3
 80137bc:	d002      	beq.n	80137c4 <__swsetup_r+0x4c>
 80137be:	0028      	movs	r0, r5
 80137c0:	f7fe ff9a 	bl	80126f8 <_free_r>
 80137c4:	2300      	movs	r3, #0
 80137c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80137c8:	2224      	movs	r2, #36	@ 0x24
 80137ca:	89a3      	ldrh	r3, [r4, #12]
 80137cc:	4393      	bics	r3, r2
 80137ce:	81a3      	strh	r3, [r4, #12]
 80137d0:	2300      	movs	r3, #0
 80137d2:	6063      	str	r3, [r4, #4]
 80137d4:	6923      	ldr	r3, [r4, #16]
 80137d6:	6023      	str	r3, [r4, #0]
 80137d8:	2308      	movs	r3, #8
 80137da:	89a2      	ldrh	r2, [r4, #12]
 80137dc:	4313      	orrs	r3, r2
 80137de:	81a3      	strh	r3, [r4, #12]
 80137e0:	6923      	ldr	r3, [r4, #16]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d10b      	bne.n	80137fe <__swsetup_r+0x86>
 80137e6:	21a0      	movs	r1, #160	@ 0xa0
 80137e8:	2280      	movs	r2, #128	@ 0x80
 80137ea:	89a3      	ldrh	r3, [r4, #12]
 80137ec:	0089      	lsls	r1, r1, #2
 80137ee:	0092      	lsls	r2, r2, #2
 80137f0:	400b      	ands	r3, r1
 80137f2:	4293      	cmp	r3, r2
 80137f4:	d003      	beq.n	80137fe <__swsetup_r+0x86>
 80137f6:	0021      	movs	r1, r4
 80137f8:	0028      	movs	r0, r5
 80137fa:	f000 f91f 	bl	8013a3c <__smakebuf_r>
 80137fe:	230c      	movs	r3, #12
 8013800:	5ee2      	ldrsh	r2, [r4, r3]
 8013802:	2101      	movs	r1, #1
 8013804:	0013      	movs	r3, r2
 8013806:	400b      	ands	r3, r1
 8013808:	420a      	tst	r2, r1
 801380a:	d00b      	beq.n	8013824 <__swsetup_r+0xac>
 801380c:	2300      	movs	r3, #0
 801380e:	60a3      	str	r3, [r4, #8]
 8013810:	6963      	ldr	r3, [r4, #20]
 8013812:	425b      	negs	r3, r3
 8013814:	61a3      	str	r3, [r4, #24]
 8013816:	2000      	movs	r0, #0
 8013818:	6923      	ldr	r3, [r4, #16]
 801381a:	4283      	cmp	r3, r0
 801381c:	d101      	bne.n	8013822 <__swsetup_r+0xaa>
 801381e:	0613      	lsls	r3, r2, #24
 8013820:	d4be      	bmi.n	80137a0 <__swsetup_r+0x28>
 8013822:	bd70      	pop	{r4, r5, r6, pc}
 8013824:	0791      	lsls	r1, r2, #30
 8013826:	d400      	bmi.n	801382a <__swsetup_r+0xb2>
 8013828:	6963      	ldr	r3, [r4, #20]
 801382a:	60a3      	str	r3, [r4, #8]
 801382c:	e7f3      	b.n	8013816 <__swsetup_r+0x9e>
 801382e:	46c0      	nop			@ (mov r8, r8)
 8013830:	20000158 	.word	0x20000158

08013834 <memmove>:
 8013834:	b510      	push	{r4, lr}
 8013836:	4288      	cmp	r0, r1
 8013838:	d806      	bhi.n	8013848 <memmove+0x14>
 801383a:	2300      	movs	r3, #0
 801383c:	429a      	cmp	r2, r3
 801383e:	d008      	beq.n	8013852 <memmove+0x1e>
 8013840:	5ccc      	ldrb	r4, [r1, r3]
 8013842:	54c4      	strb	r4, [r0, r3]
 8013844:	3301      	adds	r3, #1
 8013846:	e7f9      	b.n	801383c <memmove+0x8>
 8013848:	188b      	adds	r3, r1, r2
 801384a:	4298      	cmp	r0, r3
 801384c:	d2f5      	bcs.n	801383a <memmove+0x6>
 801384e:	3a01      	subs	r2, #1
 8013850:	d200      	bcs.n	8013854 <memmove+0x20>
 8013852:	bd10      	pop	{r4, pc}
 8013854:	5c8b      	ldrb	r3, [r1, r2]
 8013856:	5483      	strb	r3, [r0, r2]
 8013858:	e7f9      	b.n	801384e <memmove+0x1a>
	...

0801385c <_sbrk_r>:
 801385c:	2300      	movs	r3, #0
 801385e:	b570      	push	{r4, r5, r6, lr}
 8013860:	4d06      	ldr	r5, [pc, #24]	@ (801387c <_sbrk_r+0x20>)
 8013862:	0004      	movs	r4, r0
 8013864:	0008      	movs	r0, r1
 8013866:	602b      	str	r3, [r5, #0]
 8013868:	f7f4 f984 	bl	8007b74 <_sbrk>
 801386c:	1c43      	adds	r3, r0, #1
 801386e:	d103      	bne.n	8013878 <_sbrk_r+0x1c>
 8013870:	682b      	ldr	r3, [r5, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d000      	beq.n	8013878 <_sbrk_r+0x1c>
 8013876:	6023      	str	r3, [r4, #0]
 8013878:	bd70      	pop	{r4, r5, r6, pc}
 801387a:	46c0      	nop			@ (mov r8, r8)
 801387c:	2000374c 	.word	0x2000374c

08013880 <memcpy>:
 8013880:	2300      	movs	r3, #0
 8013882:	b510      	push	{r4, lr}
 8013884:	429a      	cmp	r2, r3
 8013886:	d100      	bne.n	801388a <memcpy+0xa>
 8013888:	bd10      	pop	{r4, pc}
 801388a:	5ccc      	ldrb	r4, [r1, r3]
 801388c:	54c4      	strb	r4, [r0, r3]
 801388e:	3301      	adds	r3, #1
 8013890:	e7f8      	b.n	8013884 <memcpy+0x4>
	...

08013894 <__assert_func>:
 8013894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013896:	0014      	movs	r4, r2
 8013898:	001a      	movs	r2, r3
 801389a:	4b09      	ldr	r3, [pc, #36]	@ (80138c0 <__assert_func+0x2c>)
 801389c:	0005      	movs	r5, r0
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	000e      	movs	r6, r1
 80138a2:	68d8      	ldr	r0, [r3, #12]
 80138a4:	4b07      	ldr	r3, [pc, #28]	@ (80138c4 <__assert_func+0x30>)
 80138a6:	2c00      	cmp	r4, #0
 80138a8:	d101      	bne.n	80138ae <__assert_func+0x1a>
 80138aa:	4b07      	ldr	r3, [pc, #28]	@ (80138c8 <__assert_func+0x34>)
 80138ac:	001c      	movs	r4, r3
 80138ae:	4907      	ldr	r1, [pc, #28]	@ (80138cc <__assert_func+0x38>)
 80138b0:	9301      	str	r3, [sp, #4]
 80138b2:	9402      	str	r4, [sp, #8]
 80138b4:	002b      	movs	r3, r5
 80138b6:	9600      	str	r6, [sp, #0]
 80138b8:	f000 f886 	bl	80139c8 <fiprintf>
 80138bc:	f000 f924 	bl	8013b08 <abort>
 80138c0:	20000158 	.word	0x20000158
 80138c4:	08026fb3 	.word	0x08026fb3
 80138c8:	08026fee 	.word	0x08026fee
 80138cc:	08026fc0 	.word	0x08026fc0

080138d0 <_calloc_r>:
 80138d0:	b570      	push	{r4, r5, r6, lr}
 80138d2:	0c0b      	lsrs	r3, r1, #16
 80138d4:	0c15      	lsrs	r5, r2, #16
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d11e      	bne.n	8013918 <_calloc_r+0x48>
 80138da:	2d00      	cmp	r5, #0
 80138dc:	d10c      	bne.n	80138f8 <_calloc_r+0x28>
 80138de:	b289      	uxth	r1, r1
 80138e0:	b294      	uxth	r4, r2
 80138e2:	434c      	muls	r4, r1
 80138e4:	0021      	movs	r1, r4
 80138e6:	f7fe ff7d 	bl	80127e4 <_malloc_r>
 80138ea:	1e05      	subs	r5, r0, #0
 80138ec:	d01a      	beq.n	8013924 <_calloc_r+0x54>
 80138ee:	0022      	movs	r2, r4
 80138f0:	2100      	movs	r1, #0
 80138f2:	f7fd ffc3 	bl	801187c <memset>
 80138f6:	e016      	b.n	8013926 <_calloc_r+0x56>
 80138f8:	1c2b      	adds	r3, r5, #0
 80138fa:	1c0c      	adds	r4, r1, #0
 80138fc:	b289      	uxth	r1, r1
 80138fe:	b292      	uxth	r2, r2
 8013900:	434a      	muls	r2, r1
 8013902:	b29b      	uxth	r3, r3
 8013904:	b2a1      	uxth	r1, r4
 8013906:	4359      	muls	r1, r3
 8013908:	0c14      	lsrs	r4, r2, #16
 801390a:	190c      	adds	r4, r1, r4
 801390c:	0c23      	lsrs	r3, r4, #16
 801390e:	d107      	bne.n	8013920 <_calloc_r+0x50>
 8013910:	0424      	lsls	r4, r4, #16
 8013912:	b292      	uxth	r2, r2
 8013914:	4314      	orrs	r4, r2
 8013916:	e7e5      	b.n	80138e4 <_calloc_r+0x14>
 8013918:	2d00      	cmp	r5, #0
 801391a:	d101      	bne.n	8013920 <_calloc_r+0x50>
 801391c:	1c14      	adds	r4, r2, #0
 801391e:	e7ed      	b.n	80138fc <_calloc_r+0x2c>
 8013920:	230c      	movs	r3, #12
 8013922:	6003      	str	r3, [r0, #0]
 8013924:	2500      	movs	r5, #0
 8013926:	0028      	movs	r0, r5
 8013928:	bd70      	pop	{r4, r5, r6, pc}

0801392a <__ascii_mbtowc>:
 801392a:	b082      	sub	sp, #8
 801392c:	2900      	cmp	r1, #0
 801392e:	d100      	bne.n	8013932 <__ascii_mbtowc+0x8>
 8013930:	a901      	add	r1, sp, #4
 8013932:	1e10      	subs	r0, r2, #0
 8013934:	d006      	beq.n	8013944 <__ascii_mbtowc+0x1a>
 8013936:	2b00      	cmp	r3, #0
 8013938:	d006      	beq.n	8013948 <__ascii_mbtowc+0x1e>
 801393a:	7813      	ldrb	r3, [r2, #0]
 801393c:	600b      	str	r3, [r1, #0]
 801393e:	7810      	ldrb	r0, [r2, #0]
 8013940:	1e43      	subs	r3, r0, #1
 8013942:	4198      	sbcs	r0, r3
 8013944:	b002      	add	sp, #8
 8013946:	4770      	bx	lr
 8013948:	2002      	movs	r0, #2
 801394a:	4240      	negs	r0, r0
 801394c:	e7fa      	b.n	8013944 <__ascii_mbtowc+0x1a>

0801394e <_realloc_r>:
 801394e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013950:	0006      	movs	r6, r0
 8013952:	000c      	movs	r4, r1
 8013954:	0015      	movs	r5, r2
 8013956:	2900      	cmp	r1, #0
 8013958:	d105      	bne.n	8013966 <_realloc_r+0x18>
 801395a:	0011      	movs	r1, r2
 801395c:	f7fe ff42 	bl	80127e4 <_malloc_r>
 8013960:	0004      	movs	r4, r0
 8013962:	0020      	movs	r0, r4
 8013964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013966:	2a00      	cmp	r2, #0
 8013968:	d103      	bne.n	8013972 <_realloc_r+0x24>
 801396a:	f7fe fec5 	bl	80126f8 <_free_r>
 801396e:	2400      	movs	r4, #0
 8013970:	e7f7      	b.n	8013962 <_realloc_r+0x14>
 8013972:	f000 f8d0 	bl	8013b16 <_malloc_usable_size_r>
 8013976:	0007      	movs	r7, r0
 8013978:	4285      	cmp	r5, r0
 801397a:	d802      	bhi.n	8013982 <_realloc_r+0x34>
 801397c:	0843      	lsrs	r3, r0, #1
 801397e:	42ab      	cmp	r3, r5
 8013980:	d3ef      	bcc.n	8013962 <_realloc_r+0x14>
 8013982:	0029      	movs	r1, r5
 8013984:	0030      	movs	r0, r6
 8013986:	f7fe ff2d 	bl	80127e4 <_malloc_r>
 801398a:	9001      	str	r0, [sp, #4]
 801398c:	2800      	cmp	r0, #0
 801398e:	d0ee      	beq.n	801396e <_realloc_r+0x20>
 8013990:	002a      	movs	r2, r5
 8013992:	42bd      	cmp	r5, r7
 8013994:	d900      	bls.n	8013998 <_realloc_r+0x4a>
 8013996:	003a      	movs	r2, r7
 8013998:	0021      	movs	r1, r4
 801399a:	9801      	ldr	r0, [sp, #4]
 801399c:	f7ff ff70 	bl	8013880 <memcpy>
 80139a0:	0021      	movs	r1, r4
 80139a2:	0030      	movs	r0, r6
 80139a4:	f7fe fea8 	bl	80126f8 <_free_r>
 80139a8:	9c01      	ldr	r4, [sp, #4]
 80139aa:	e7da      	b.n	8013962 <_realloc_r+0x14>

080139ac <__ascii_wctomb>:
 80139ac:	0003      	movs	r3, r0
 80139ae:	1e08      	subs	r0, r1, #0
 80139b0:	d005      	beq.n	80139be <__ascii_wctomb+0x12>
 80139b2:	2aff      	cmp	r2, #255	@ 0xff
 80139b4:	d904      	bls.n	80139c0 <__ascii_wctomb+0x14>
 80139b6:	228a      	movs	r2, #138	@ 0x8a
 80139b8:	2001      	movs	r0, #1
 80139ba:	601a      	str	r2, [r3, #0]
 80139bc:	4240      	negs	r0, r0
 80139be:	4770      	bx	lr
 80139c0:	2001      	movs	r0, #1
 80139c2:	700a      	strb	r2, [r1, #0]
 80139c4:	e7fb      	b.n	80139be <__ascii_wctomb+0x12>
	...

080139c8 <fiprintf>:
 80139c8:	b40e      	push	{r1, r2, r3}
 80139ca:	b517      	push	{r0, r1, r2, r4, lr}
 80139cc:	4c05      	ldr	r4, [pc, #20]	@ (80139e4 <fiprintf+0x1c>)
 80139ce:	ab05      	add	r3, sp, #20
 80139d0:	cb04      	ldmia	r3!, {r2}
 80139d2:	0001      	movs	r1, r0
 80139d4:	6820      	ldr	r0, [r4, #0]
 80139d6:	9301      	str	r3, [sp, #4]
 80139d8:	f7ff fcbe 	bl	8013358 <_vfiprintf_r>
 80139dc:	bc1e      	pop	{r1, r2, r3, r4}
 80139de:	bc08      	pop	{r3}
 80139e0:	b003      	add	sp, #12
 80139e2:	4718      	bx	r3
 80139e4:	20000158 	.word	0x20000158

080139e8 <__swhatbuf_r>:
 80139e8:	b570      	push	{r4, r5, r6, lr}
 80139ea:	000e      	movs	r6, r1
 80139ec:	001d      	movs	r5, r3
 80139ee:	230e      	movs	r3, #14
 80139f0:	5ec9      	ldrsh	r1, [r1, r3]
 80139f2:	0014      	movs	r4, r2
 80139f4:	b096      	sub	sp, #88	@ 0x58
 80139f6:	2900      	cmp	r1, #0
 80139f8:	da0c      	bge.n	8013a14 <__swhatbuf_r+0x2c>
 80139fa:	89b2      	ldrh	r2, [r6, #12]
 80139fc:	2380      	movs	r3, #128	@ 0x80
 80139fe:	0011      	movs	r1, r2
 8013a00:	4019      	ands	r1, r3
 8013a02:	421a      	tst	r2, r3
 8013a04:	d114      	bne.n	8013a30 <__swhatbuf_r+0x48>
 8013a06:	2380      	movs	r3, #128	@ 0x80
 8013a08:	00db      	lsls	r3, r3, #3
 8013a0a:	2000      	movs	r0, #0
 8013a0c:	6029      	str	r1, [r5, #0]
 8013a0e:	6023      	str	r3, [r4, #0]
 8013a10:	b016      	add	sp, #88	@ 0x58
 8013a12:	bd70      	pop	{r4, r5, r6, pc}
 8013a14:	466a      	mov	r2, sp
 8013a16:	f000 f853 	bl	8013ac0 <_fstat_r>
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	dbed      	blt.n	80139fa <__swhatbuf_r+0x12>
 8013a1e:	23f0      	movs	r3, #240	@ 0xf0
 8013a20:	9901      	ldr	r1, [sp, #4]
 8013a22:	021b      	lsls	r3, r3, #8
 8013a24:	4019      	ands	r1, r3
 8013a26:	4b04      	ldr	r3, [pc, #16]	@ (8013a38 <__swhatbuf_r+0x50>)
 8013a28:	18c9      	adds	r1, r1, r3
 8013a2a:	424b      	negs	r3, r1
 8013a2c:	4159      	adcs	r1, r3
 8013a2e:	e7ea      	b.n	8013a06 <__swhatbuf_r+0x1e>
 8013a30:	2100      	movs	r1, #0
 8013a32:	2340      	movs	r3, #64	@ 0x40
 8013a34:	e7e9      	b.n	8013a0a <__swhatbuf_r+0x22>
 8013a36:	46c0      	nop			@ (mov r8, r8)
 8013a38:	ffffe000 	.word	0xffffe000

08013a3c <__smakebuf_r>:
 8013a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a3e:	2602      	movs	r6, #2
 8013a40:	898b      	ldrh	r3, [r1, #12]
 8013a42:	0005      	movs	r5, r0
 8013a44:	000c      	movs	r4, r1
 8013a46:	b085      	sub	sp, #20
 8013a48:	4233      	tst	r3, r6
 8013a4a:	d007      	beq.n	8013a5c <__smakebuf_r+0x20>
 8013a4c:	0023      	movs	r3, r4
 8013a4e:	3347      	adds	r3, #71	@ 0x47
 8013a50:	6023      	str	r3, [r4, #0]
 8013a52:	6123      	str	r3, [r4, #16]
 8013a54:	2301      	movs	r3, #1
 8013a56:	6163      	str	r3, [r4, #20]
 8013a58:	b005      	add	sp, #20
 8013a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a5c:	ab03      	add	r3, sp, #12
 8013a5e:	aa02      	add	r2, sp, #8
 8013a60:	f7ff ffc2 	bl	80139e8 <__swhatbuf_r>
 8013a64:	9f02      	ldr	r7, [sp, #8]
 8013a66:	9001      	str	r0, [sp, #4]
 8013a68:	0039      	movs	r1, r7
 8013a6a:	0028      	movs	r0, r5
 8013a6c:	f7fe feba 	bl	80127e4 <_malloc_r>
 8013a70:	2800      	cmp	r0, #0
 8013a72:	d108      	bne.n	8013a86 <__smakebuf_r+0x4a>
 8013a74:	220c      	movs	r2, #12
 8013a76:	5ea3      	ldrsh	r3, [r4, r2]
 8013a78:	059a      	lsls	r2, r3, #22
 8013a7a:	d4ed      	bmi.n	8013a58 <__smakebuf_r+0x1c>
 8013a7c:	2203      	movs	r2, #3
 8013a7e:	4393      	bics	r3, r2
 8013a80:	431e      	orrs	r6, r3
 8013a82:	81a6      	strh	r6, [r4, #12]
 8013a84:	e7e2      	b.n	8013a4c <__smakebuf_r+0x10>
 8013a86:	2380      	movs	r3, #128	@ 0x80
 8013a88:	89a2      	ldrh	r2, [r4, #12]
 8013a8a:	6020      	str	r0, [r4, #0]
 8013a8c:	4313      	orrs	r3, r2
 8013a8e:	81a3      	strh	r3, [r4, #12]
 8013a90:	9b03      	ldr	r3, [sp, #12]
 8013a92:	6120      	str	r0, [r4, #16]
 8013a94:	6167      	str	r7, [r4, #20]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d00c      	beq.n	8013ab4 <__smakebuf_r+0x78>
 8013a9a:	0028      	movs	r0, r5
 8013a9c:	230e      	movs	r3, #14
 8013a9e:	5ee1      	ldrsh	r1, [r4, r3]
 8013aa0:	f000 f820 	bl	8013ae4 <_isatty_r>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	d005      	beq.n	8013ab4 <__smakebuf_r+0x78>
 8013aa8:	2303      	movs	r3, #3
 8013aaa:	89a2      	ldrh	r2, [r4, #12]
 8013aac:	439a      	bics	r2, r3
 8013aae:	3b02      	subs	r3, #2
 8013ab0:	4313      	orrs	r3, r2
 8013ab2:	81a3      	strh	r3, [r4, #12]
 8013ab4:	89a3      	ldrh	r3, [r4, #12]
 8013ab6:	9a01      	ldr	r2, [sp, #4]
 8013ab8:	4313      	orrs	r3, r2
 8013aba:	81a3      	strh	r3, [r4, #12]
 8013abc:	e7cc      	b.n	8013a58 <__smakebuf_r+0x1c>
	...

08013ac0 <_fstat_r>:
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	b570      	push	{r4, r5, r6, lr}
 8013ac4:	4d06      	ldr	r5, [pc, #24]	@ (8013ae0 <_fstat_r+0x20>)
 8013ac6:	0004      	movs	r4, r0
 8013ac8:	0008      	movs	r0, r1
 8013aca:	0011      	movs	r1, r2
 8013acc:	602b      	str	r3, [r5, #0]
 8013ace:	f7f4 f82f 	bl	8007b30 <_fstat>
 8013ad2:	1c43      	adds	r3, r0, #1
 8013ad4:	d103      	bne.n	8013ade <_fstat_r+0x1e>
 8013ad6:	682b      	ldr	r3, [r5, #0]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d000      	beq.n	8013ade <_fstat_r+0x1e>
 8013adc:	6023      	str	r3, [r4, #0]
 8013ade:	bd70      	pop	{r4, r5, r6, pc}
 8013ae0:	2000374c 	.word	0x2000374c

08013ae4 <_isatty_r>:
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	b570      	push	{r4, r5, r6, lr}
 8013ae8:	4d06      	ldr	r5, [pc, #24]	@ (8013b04 <_isatty_r+0x20>)
 8013aea:	0004      	movs	r4, r0
 8013aec:	0008      	movs	r0, r1
 8013aee:	602b      	str	r3, [r5, #0]
 8013af0:	f7f4 f82c 	bl	8007b4c <_isatty>
 8013af4:	1c43      	adds	r3, r0, #1
 8013af6:	d103      	bne.n	8013b00 <_isatty_r+0x1c>
 8013af8:	682b      	ldr	r3, [r5, #0]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d000      	beq.n	8013b00 <_isatty_r+0x1c>
 8013afe:	6023      	str	r3, [r4, #0]
 8013b00:	bd70      	pop	{r4, r5, r6, pc}
 8013b02:	46c0      	nop			@ (mov r8, r8)
 8013b04:	2000374c 	.word	0x2000374c

08013b08 <abort>:
 8013b08:	2006      	movs	r0, #6
 8013b0a:	b510      	push	{r4, lr}
 8013b0c:	f000 f834 	bl	8013b78 <raise>
 8013b10:	2001      	movs	r0, #1
 8013b12:	f7f3 ffd9 	bl	8007ac8 <_exit>

08013b16 <_malloc_usable_size_r>:
 8013b16:	1f0b      	subs	r3, r1, #4
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	1f18      	subs	r0, r3, #4
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	da01      	bge.n	8013b24 <_malloc_usable_size_r+0xe>
 8013b20:	580b      	ldr	r3, [r1, r0]
 8013b22:	18c0      	adds	r0, r0, r3
 8013b24:	4770      	bx	lr

08013b26 <_raise_r>:
 8013b26:	b570      	push	{r4, r5, r6, lr}
 8013b28:	0004      	movs	r4, r0
 8013b2a:	000d      	movs	r5, r1
 8013b2c:	291f      	cmp	r1, #31
 8013b2e:	d904      	bls.n	8013b3a <_raise_r+0x14>
 8013b30:	2316      	movs	r3, #22
 8013b32:	6003      	str	r3, [r0, #0]
 8013b34:	2001      	movs	r0, #1
 8013b36:	4240      	negs	r0, r0
 8013b38:	bd70      	pop	{r4, r5, r6, pc}
 8013b3a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d004      	beq.n	8013b4a <_raise_r+0x24>
 8013b40:	008a      	lsls	r2, r1, #2
 8013b42:	189b      	adds	r3, r3, r2
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	2a00      	cmp	r2, #0
 8013b48:	d108      	bne.n	8013b5c <_raise_r+0x36>
 8013b4a:	0020      	movs	r0, r4
 8013b4c:	f000 f830 	bl	8013bb0 <_getpid_r>
 8013b50:	002a      	movs	r2, r5
 8013b52:	0001      	movs	r1, r0
 8013b54:	0020      	movs	r0, r4
 8013b56:	f000 f819 	bl	8013b8c <_kill_r>
 8013b5a:	e7ed      	b.n	8013b38 <_raise_r+0x12>
 8013b5c:	2a01      	cmp	r2, #1
 8013b5e:	d009      	beq.n	8013b74 <_raise_r+0x4e>
 8013b60:	1c51      	adds	r1, r2, #1
 8013b62:	d103      	bne.n	8013b6c <_raise_r+0x46>
 8013b64:	2316      	movs	r3, #22
 8013b66:	6003      	str	r3, [r0, #0]
 8013b68:	2001      	movs	r0, #1
 8013b6a:	e7e5      	b.n	8013b38 <_raise_r+0x12>
 8013b6c:	2100      	movs	r1, #0
 8013b6e:	0028      	movs	r0, r5
 8013b70:	6019      	str	r1, [r3, #0]
 8013b72:	4790      	blx	r2
 8013b74:	2000      	movs	r0, #0
 8013b76:	e7df      	b.n	8013b38 <_raise_r+0x12>

08013b78 <raise>:
 8013b78:	b510      	push	{r4, lr}
 8013b7a:	4b03      	ldr	r3, [pc, #12]	@ (8013b88 <raise+0x10>)
 8013b7c:	0001      	movs	r1, r0
 8013b7e:	6818      	ldr	r0, [r3, #0]
 8013b80:	f7ff ffd1 	bl	8013b26 <_raise_r>
 8013b84:	bd10      	pop	{r4, pc}
 8013b86:	46c0      	nop			@ (mov r8, r8)
 8013b88:	20000158 	.word	0x20000158

08013b8c <_kill_r>:
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	b570      	push	{r4, r5, r6, lr}
 8013b90:	4d06      	ldr	r5, [pc, #24]	@ (8013bac <_kill_r+0x20>)
 8013b92:	0004      	movs	r4, r0
 8013b94:	0008      	movs	r0, r1
 8013b96:	0011      	movs	r1, r2
 8013b98:	602b      	str	r3, [r5, #0]
 8013b9a:	f7f3 ff85 	bl	8007aa8 <_kill>
 8013b9e:	1c43      	adds	r3, r0, #1
 8013ba0:	d103      	bne.n	8013baa <_kill_r+0x1e>
 8013ba2:	682b      	ldr	r3, [r5, #0]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d000      	beq.n	8013baa <_kill_r+0x1e>
 8013ba8:	6023      	str	r3, [r4, #0]
 8013baa:	bd70      	pop	{r4, r5, r6, pc}
 8013bac:	2000374c 	.word	0x2000374c

08013bb0 <_getpid_r>:
 8013bb0:	b510      	push	{r4, lr}
 8013bb2:	f7f3 ff73 	bl	8007a9c <_getpid>
 8013bb6:	bd10      	pop	{r4, pc}

08013bb8 <log10>:
 8013bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bba:	0004      	movs	r4, r0
 8013bbc:	000d      	movs	r5, r1
 8013bbe:	f000 f8fd 	bl	8013dbc <__ieee754_log10>
 8013bc2:	0022      	movs	r2, r4
 8013bc4:	0006      	movs	r6, r0
 8013bc6:	000f      	movs	r7, r1
 8013bc8:	002b      	movs	r3, r5
 8013bca:	0020      	movs	r0, r4
 8013bcc:	0029      	movs	r1, r5
 8013bce:	f7ef fb5d 	bl	800328c <__aeabi_dcmpun>
 8013bd2:	2800      	cmp	r0, #0
 8013bd4:	d115      	bne.n	8013c02 <log10+0x4a>
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	2300      	movs	r3, #0
 8013bda:	0020      	movs	r0, r4
 8013bdc:	0029      	movs	r1, r5
 8013bde:	f7ec fc6d 	bl	80004bc <__aeabi_dcmple>
 8013be2:	2800      	cmp	r0, #0
 8013be4:	d00d      	beq.n	8013c02 <log10+0x4a>
 8013be6:	2200      	movs	r2, #0
 8013be8:	2300      	movs	r3, #0
 8013bea:	0020      	movs	r0, r4
 8013bec:	0029      	movs	r1, r5
 8013bee:	f7ec fc55 	bl	800049c <__aeabi_dcmpeq>
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	d008      	beq.n	8013c08 <log10+0x50>
 8013bf6:	f7fd fec5 	bl	8011984 <__errno>
 8013bfa:	2322      	movs	r3, #34	@ 0x22
 8013bfc:	2600      	movs	r6, #0
 8013bfe:	4f07      	ldr	r7, [pc, #28]	@ (8013c1c <log10+0x64>)
 8013c00:	6003      	str	r3, [r0, #0]
 8013c02:	0030      	movs	r0, r6
 8013c04:	0039      	movs	r1, r7
 8013c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c08:	f7fd febc 	bl	8011984 <__errno>
 8013c0c:	2321      	movs	r3, #33	@ 0x21
 8013c0e:	6003      	str	r3, [r0, #0]
 8013c10:	4803      	ldr	r0, [pc, #12]	@ (8013c20 <log10+0x68>)
 8013c12:	f000 f84b 	bl	8013cac <nan>
 8013c16:	0006      	movs	r6, r0
 8013c18:	000f      	movs	r7, r1
 8013c1a:	e7f2      	b.n	8013c02 <log10+0x4a>
 8013c1c:	fff00000 	.word	0xfff00000
 8013c20:	08026fee 	.word	0x08026fee

08013c24 <expf>:
 8013c24:	b570      	push	{r4, r5, r6, lr}
 8013c26:	1c04      	adds	r4, r0, #0
 8013c28:	f000 f942 	bl	8013eb0 <__ieee754_expf>
 8013c2c:	1c05      	adds	r5, r0, #0
 8013c2e:	1c20      	adds	r0, r4, #0
 8013c30:	f000 f842 	bl	8013cb8 <finitef>
 8013c34:	2800      	cmp	r0, #0
 8013c36:	d00b      	beq.n	8013c50 <expf+0x2c>
 8013c38:	490c      	ldr	r1, [pc, #48]	@ (8013c6c <expf+0x48>)
 8013c3a:	1c20      	adds	r0, r4, #0
 8013c3c:	f7ec fc82 	bl	8000544 <__aeabi_fcmpgt>
 8013c40:	2800      	cmp	r0, #0
 8013c42:	d007      	beq.n	8013c54 <expf+0x30>
 8013c44:	f7fd fe9e 	bl	8011984 <__errno>
 8013c48:	25ff      	movs	r5, #255	@ 0xff
 8013c4a:	2322      	movs	r3, #34	@ 0x22
 8013c4c:	05ed      	lsls	r5, r5, #23
 8013c4e:	6003      	str	r3, [r0, #0]
 8013c50:	1c28      	adds	r0, r5, #0
 8013c52:	bd70      	pop	{r4, r5, r6, pc}
 8013c54:	4906      	ldr	r1, [pc, #24]	@ (8013c70 <expf+0x4c>)
 8013c56:	1c20      	adds	r0, r4, #0
 8013c58:	f7ec fc60 	bl	800051c <__aeabi_fcmplt>
 8013c5c:	2800      	cmp	r0, #0
 8013c5e:	d0f7      	beq.n	8013c50 <expf+0x2c>
 8013c60:	f7fd fe90 	bl	8011984 <__errno>
 8013c64:	2322      	movs	r3, #34	@ 0x22
 8013c66:	2500      	movs	r5, #0
 8013c68:	6003      	str	r3, [r0, #0]
 8013c6a:	e7f1      	b.n	8013c50 <expf+0x2c>
 8013c6c:	42b17217 	.word	0x42b17217
 8013c70:	c2cff1b5 	.word	0xc2cff1b5

08013c74 <sqrtf>:
 8013c74:	b570      	push	{r4, r5, r6, lr}
 8013c76:	1c05      	adds	r5, r0, #0
 8013c78:	f000 f828 	bl	8013ccc <__ieee754_sqrtf>
 8013c7c:	1c29      	adds	r1, r5, #0
 8013c7e:	1c04      	adds	r4, r0, #0
 8013c80:	1c28      	adds	r0, r5, #0
 8013c82:	f7ed fc33 	bl	80014ec <__aeabi_fcmpun>
 8013c86:	2800      	cmp	r0, #0
 8013c88:	d10e      	bne.n	8013ca8 <sqrtf+0x34>
 8013c8a:	2100      	movs	r1, #0
 8013c8c:	1c28      	adds	r0, r5, #0
 8013c8e:	f7ec fc45 	bl	800051c <__aeabi_fcmplt>
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d008      	beq.n	8013ca8 <sqrtf+0x34>
 8013c96:	f7fd fe75 	bl	8011984 <__errno>
 8013c9a:	2321      	movs	r3, #33	@ 0x21
 8013c9c:	2100      	movs	r1, #0
 8013c9e:	6003      	str	r3, [r0, #0]
 8013ca0:	1c08      	adds	r0, r1, #0
 8013ca2:	f7ec ff5b 	bl	8000b5c <__aeabi_fdiv>
 8013ca6:	1c04      	adds	r4, r0, #0
 8013ca8:	1c20      	adds	r0, r4, #0
 8013caa:	bd70      	pop	{r4, r5, r6, pc}

08013cac <nan>:
 8013cac:	2000      	movs	r0, #0
 8013cae:	4901      	ldr	r1, [pc, #4]	@ (8013cb4 <nan+0x8>)
 8013cb0:	4770      	bx	lr
 8013cb2:	46c0      	nop			@ (mov r8, r8)
 8013cb4:	7ff80000 	.word	0x7ff80000

08013cb8 <finitef>:
 8013cb8:	22ff      	movs	r2, #255	@ 0xff
 8013cba:	0043      	lsls	r3, r0, #1
 8013cbc:	085b      	lsrs	r3, r3, #1
 8013cbe:	2001      	movs	r0, #1
 8013cc0:	05d2      	lsls	r2, r2, #23
 8013cc2:	4293      	cmp	r3, r2
 8013cc4:	db00      	blt.n	8013cc8 <finitef+0x10>
 8013cc6:	2000      	movs	r0, #0
 8013cc8:	4770      	bx	lr
	...

08013ccc <__ieee754_sqrtf>:
 8013ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cce:	0003      	movs	r3, r0
 8013cd0:	0042      	lsls	r2, r0, #1
 8013cd2:	1c04      	adds	r4, r0, #0
 8013cd4:	20ff      	movs	r0, #255	@ 0xff
 8013cd6:	0852      	lsrs	r2, r2, #1
 8013cd8:	05c0      	lsls	r0, r0, #23
 8013cda:	4282      	cmp	r2, r0
 8013cdc:	d30a      	bcc.n	8013cf4 <__ieee754_sqrtf+0x28>
 8013cde:	1c21      	adds	r1, r4, #0
 8013ce0:	1c20      	adds	r0, r4, #0
 8013ce2:	f7ed f921 	bl	8000f28 <__aeabi_fmul>
 8013ce6:	1c01      	adds	r1, r0, #0
 8013ce8:	1c20      	adds	r0, r4, #0
 8013cea:	f7ec fdad 	bl	8000848 <__aeabi_fadd>
 8013cee:	1c04      	adds	r4, r0, #0
 8013cf0:	1c20      	adds	r0, r4, #0
 8013cf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013cf4:	2a00      	cmp	r2, #0
 8013cf6:	d0fb      	beq.n	8013cf0 <__ieee754_sqrtf+0x24>
 8013cf8:	2c00      	cmp	r4, #0
 8013cfa:	da07      	bge.n	8013d0c <__ieee754_sqrtf+0x40>
 8013cfc:	1c21      	adds	r1, r4, #0
 8013cfe:	1c20      	adds	r0, r4, #0
 8013d00:	f7ed fa50 	bl	80011a4 <__aeabi_fsub>
 8013d04:	1c01      	adds	r1, r0, #0
 8013d06:	f7ec ff29 	bl	8000b5c <__aeabi_fdiv>
 8013d0a:	e7f0      	b.n	8013cee <__ieee754_sqrtf+0x22>
 8013d0c:	0022      	movs	r2, r4
 8013d0e:	15e1      	asrs	r1, r4, #23
 8013d10:	4002      	ands	r2, r0
 8013d12:	4204      	tst	r4, r0
 8013d14:	d046      	beq.n	8013da4 <__ieee754_sqrtf+0xd8>
 8013d16:	2280      	movs	r2, #128	@ 0x80
 8013d18:	000f      	movs	r7, r1
 8013d1a:	025b      	lsls	r3, r3, #9
 8013d1c:	0a5b      	lsrs	r3, r3, #9
 8013d1e:	0412      	lsls	r2, r2, #16
 8013d20:	3f7f      	subs	r7, #127	@ 0x7f
 8013d22:	4313      	orrs	r3, r2
 8013d24:	07c9      	lsls	r1, r1, #31
 8013d26:	d400      	bmi.n	8013d2a <__ieee754_sqrtf+0x5e>
 8013d28:	005b      	lsls	r3, r3, #1
 8013d2a:	2400      	movs	r4, #0
 8013d2c:	2180      	movs	r1, #128	@ 0x80
 8013d2e:	2019      	movs	r0, #25
 8013d30:	0026      	movs	r6, r4
 8013d32:	107f      	asrs	r7, r7, #1
 8013d34:	005b      	lsls	r3, r3, #1
 8013d36:	0449      	lsls	r1, r1, #17
 8013d38:	1875      	adds	r5, r6, r1
 8013d3a:	001a      	movs	r2, r3
 8013d3c:	429d      	cmp	r5, r3
 8013d3e:	dc02      	bgt.n	8013d46 <__ieee754_sqrtf+0x7a>
 8013d40:	186e      	adds	r6, r5, r1
 8013d42:	1b5a      	subs	r2, r3, r5
 8013d44:	1864      	adds	r4, r4, r1
 8013d46:	3801      	subs	r0, #1
 8013d48:	0053      	lsls	r3, r2, #1
 8013d4a:	0849      	lsrs	r1, r1, #1
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	d1f3      	bne.n	8013d38 <__ieee754_sqrtf+0x6c>
 8013d50:	2a00      	cmp	r2, #0
 8013d52:	d019      	beq.n	8013d88 <__ieee754_sqrtf+0xbc>
 8013d54:	4d17      	ldr	r5, [pc, #92]	@ (8013db4 <__ieee754_sqrtf+0xe8>)
 8013d56:	4e18      	ldr	r6, [pc, #96]	@ (8013db8 <__ieee754_sqrtf+0xec>)
 8013d58:	6828      	ldr	r0, [r5, #0]
 8013d5a:	6831      	ldr	r1, [r6, #0]
 8013d5c:	682b      	ldr	r3, [r5, #0]
 8013d5e:	9301      	str	r3, [sp, #4]
 8013d60:	f7ed fa20 	bl	80011a4 <__aeabi_fsub>
 8013d64:	1c01      	adds	r1, r0, #0
 8013d66:	9801      	ldr	r0, [sp, #4]
 8013d68:	f7ec fbe2 	bl	8000530 <__aeabi_fcmple>
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	d00b      	beq.n	8013d88 <__ieee754_sqrtf+0xbc>
 8013d70:	6828      	ldr	r0, [r5, #0]
 8013d72:	6831      	ldr	r1, [r6, #0]
 8013d74:	f7ec fd68 	bl	8000848 <__aeabi_fadd>
 8013d78:	682d      	ldr	r5, [r5, #0]
 8013d7a:	1c01      	adds	r1, r0, #0
 8013d7c:	1c28      	adds	r0, r5, #0
 8013d7e:	f7ec fbcd 	bl	800051c <__aeabi_fcmplt>
 8013d82:	2800      	cmp	r0, #0
 8013d84:	d011      	beq.n	8013daa <__ieee754_sqrtf+0xde>
 8013d86:	3402      	adds	r4, #2
 8013d88:	23fc      	movs	r3, #252	@ 0xfc
 8013d8a:	1064      	asrs	r4, r4, #1
 8013d8c:	059b      	lsls	r3, r3, #22
 8013d8e:	18e3      	adds	r3, r4, r3
 8013d90:	05fc      	lsls	r4, r7, #23
 8013d92:	18e4      	adds	r4, r4, r3
 8013d94:	e7ac      	b.n	8013cf0 <__ieee754_sqrtf+0x24>
 8013d96:	005b      	lsls	r3, r3, #1
 8013d98:	3201      	adds	r2, #1
 8013d9a:	4203      	tst	r3, r0
 8013d9c:	d0fb      	beq.n	8013d96 <__ieee754_sqrtf+0xca>
 8013d9e:	3a01      	subs	r2, #1
 8013da0:	1a89      	subs	r1, r1, r2
 8013da2:	e7b8      	b.n	8013d16 <__ieee754_sqrtf+0x4a>
 8013da4:	2080      	movs	r0, #128	@ 0x80
 8013da6:	0400      	lsls	r0, r0, #16
 8013da8:	e7f7      	b.n	8013d9a <__ieee754_sqrtf+0xce>
 8013daa:	2301      	movs	r3, #1
 8013dac:	3401      	adds	r4, #1
 8013dae:	439c      	bics	r4, r3
 8013db0:	e7ea      	b.n	8013d88 <__ieee754_sqrtf+0xbc>
 8013db2:	46c0      	nop			@ (mov r8, r8)
 8013db4:	20000318 	.word	0x20000318
 8013db8:	20000314 	.word	0x20000314

08013dbc <__ieee754_log10>:
 8013dbc:	2280      	movs	r2, #128	@ 0x80
 8013dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dc0:	000b      	movs	r3, r1
 8013dc2:	0004      	movs	r4, r0
 8013dc4:	000d      	movs	r5, r1
 8013dc6:	b085      	sub	sp, #20
 8013dc8:	0352      	lsls	r2, r2, #13
 8013dca:	4291      	cmp	r1, r2
 8013dcc:	da26      	bge.n	8013e1c <__ieee754_log10+0x60>
 8013dce:	004a      	lsls	r2, r1, #1
 8013dd0:	0852      	lsrs	r2, r2, #1
 8013dd2:	4302      	orrs	r2, r0
 8013dd4:	d107      	bne.n	8013de6 <__ieee754_log10+0x2a>
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	2300      	movs	r3, #0
 8013dda:	2000      	movs	r0, #0
 8013ddc:	4929      	ldr	r1, [pc, #164]	@ (8013e84 <__ieee754_log10+0xc8>)
 8013dde:	f7ed ffad 	bl	8001d3c <__aeabi_ddiv>
 8013de2:	b005      	add	sp, #20
 8013de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013de6:	2900      	cmp	r1, #0
 8013de8:	da05      	bge.n	8013df6 <__ieee754_log10+0x3a>
 8013dea:	0002      	movs	r2, r0
 8013dec:	f7ee feb2 	bl	8002b54 <__aeabi_dsub>
 8013df0:	2200      	movs	r2, #0
 8013df2:	2300      	movs	r3, #0
 8013df4:	e7f3      	b.n	8013dde <__ieee754_log10+0x22>
 8013df6:	2200      	movs	r2, #0
 8013df8:	4b23      	ldr	r3, [pc, #140]	@ (8013e88 <__ieee754_log10+0xcc>)
 8013dfa:	f7ee fbe3 	bl	80025c4 <__aeabi_dmul>
 8013dfe:	2236      	movs	r2, #54	@ 0x36
 8013e00:	0004      	movs	r4, r0
 8013e02:	000d      	movs	r5, r1
 8013e04:	000b      	movs	r3, r1
 8013e06:	4252      	negs	r2, r2
 8013e08:	4920      	ldr	r1, [pc, #128]	@ (8013e8c <__ieee754_log10+0xd0>)
 8013e0a:	428b      	cmp	r3, r1
 8013e0c:	dd08      	ble.n	8013e20 <__ieee754_log10+0x64>
 8013e0e:	0022      	movs	r2, r4
 8013e10:	002b      	movs	r3, r5
 8013e12:	0020      	movs	r0, r4
 8013e14:	0029      	movs	r1, r5
 8013e16:	f7ed fc2d 	bl	8001674 <__aeabi_dadd>
 8013e1a:	e7e2      	b.n	8013de2 <__ieee754_log10+0x26>
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	e7f3      	b.n	8013e08 <__ieee754_log10+0x4c>
 8013e20:	491b      	ldr	r1, [pc, #108]	@ (8013e90 <__ieee754_log10+0xd4>)
 8013e22:	1518      	asrs	r0, r3, #20
 8013e24:	1840      	adds	r0, r0, r1
 8013e26:	1880      	adds	r0, r0, r2
 8013e28:	0fc2      	lsrs	r2, r0, #31
 8013e2a:	031b      	lsls	r3, r3, #12
 8013e2c:	0b1b      	lsrs	r3, r3, #12
 8013e2e:	1880      	adds	r0, r0, r2
 8013e30:	9203      	str	r2, [sp, #12]
 8013e32:	9300      	str	r3, [sp, #0]
 8013e34:	f7ef fa88 	bl	8003348 <__aeabi_i2d>
 8013e38:	9a03      	ldr	r2, [sp, #12]
 8013e3a:	4b16      	ldr	r3, [pc, #88]	@ (8013e94 <__ieee754_log10+0xd8>)
 8013e3c:	0006      	movs	r6, r0
 8013e3e:	1a9b      	subs	r3, r3, r2
 8013e40:	9a00      	ldr	r2, [sp, #0]
 8013e42:	051b      	lsls	r3, r3, #20
 8013e44:	431a      	orrs	r2, r3
 8013e46:	0015      	movs	r5, r2
 8013e48:	4b13      	ldr	r3, [pc, #76]	@ (8013e98 <__ieee754_log10+0xdc>)
 8013e4a:	4a14      	ldr	r2, [pc, #80]	@ (8013e9c <__ieee754_log10+0xe0>)
 8013e4c:	000f      	movs	r7, r1
 8013e4e:	f7ee fbb9 	bl	80025c4 <__aeabi_dmul>
 8013e52:	9000      	str	r0, [sp, #0]
 8013e54:	9101      	str	r1, [sp, #4]
 8013e56:	0020      	movs	r0, r4
 8013e58:	0029      	movs	r1, r5
 8013e5a:	f000 f93b 	bl	80140d4 <__ieee754_log>
 8013e5e:	4a10      	ldr	r2, [pc, #64]	@ (8013ea0 <__ieee754_log10+0xe4>)
 8013e60:	4b10      	ldr	r3, [pc, #64]	@ (8013ea4 <__ieee754_log10+0xe8>)
 8013e62:	f7ee fbaf 	bl	80025c4 <__aeabi_dmul>
 8013e66:	9a00      	ldr	r2, [sp, #0]
 8013e68:	9b01      	ldr	r3, [sp, #4]
 8013e6a:	f7ed fc03 	bl	8001674 <__aeabi_dadd>
 8013e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8013ea8 <__ieee754_log10+0xec>)
 8013e70:	4b0e      	ldr	r3, [pc, #56]	@ (8013eac <__ieee754_log10+0xf0>)
 8013e72:	0004      	movs	r4, r0
 8013e74:	000d      	movs	r5, r1
 8013e76:	0030      	movs	r0, r6
 8013e78:	0039      	movs	r1, r7
 8013e7a:	f7ee fba3 	bl	80025c4 <__aeabi_dmul>
 8013e7e:	0002      	movs	r2, r0
 8013e80:	000b      	movs	r3, r1
 8013e82:	e7c6      	b.n	8013e12 <__ieee754_log10+0x56>
 8013e84:	c3500000 	.word	0xc3500000
 8013e88:	43500000 	.word	0x43500000
 8013e8c:	7fefffff 	.word	0x7fefffff
 8013e90:	fffffc01 	.word	0xfffffc01
 8013e94:	000003ff 	.word	0x000003ff
 8013e98:	3d59fef3 	.word	0x3d59fef3
 8013e9c:	11f12b36 	.word	0x11f12b36
 8013ea0:	1526e50e 	.word	0x1526e50e
 8013ea4:	3fdbcb7b 	.word	0x3fdbcb7b
 8013ea8:	509f6000 	.word	0x509f6000
 8013eac:	3fd34413 	.word	0x3fd34413

08013eb0 <__ieee754_expf>:
 8013eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013eb2:	21ff      	movs	r1, #255	@ 0xff
 8013eb4:	0043      	lsls	r3, r0, #1
 8013eb6:	1c04      	adds	r4, r0, #0
 8013eb8:	085b      	lsrs	r3, r3, #1
 8013eba:	05c9      	lsls	r1, r1, #23
 8013ebc:	428b      	cmp	r3, r1
 8013ebe:	d904      	bls.n	8013eca <__ieee754_expf+0x1a>
 8013ec0:	1c01      	adds	r1, r0, #0
 8013ec2:	1c20      	adds	r0, r4, #0
 8013ec4:	f7ec fcc0 	bl	8000848 <__aeabi_fadd>
 8013ec8:	e00d      	b.n	8013ee6 <__ieee754_expf+0x36>
 8013eca:	0fc6      	lsrs	r6, r0, #31
 8013ecc:	428b      	cmp	r3, r1
 8013ece:	d104      	bne.n	8013eda <__ieee754_expf+0x2a>
 8013ed0:	2e00      	cmp	r6, #0
 8013ed2:	d000      	beq.n	8013ed6 <__ieee754_expf+0x26>
 8013ed4:	e0ba      	b.n	801404c <__ieee754_expf+0x19c>
 8013ed6:	1c20      	adds	r0, r4, #0
 8013ed8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013eda:	495d      	ldr	r1, [pc, #372]	@ (8014050 <__ieee754_expf+0x1a0>)
 8013edc:	4288      	cmp	r0, r1
 8013ede:	dd04      	ble.n	8013eea <__ieee754_expf+0x3a>
 8013ee0:	2000      	movs	r0, #0
 8013ee2:	f000 f8f1 	bl	80140c8 <__math_oflowf>
 8013ee6:	1c04      	adds	r4, r0, #0
 8013ee8:	e7f5      	b.n	8013ed6 <__ieee754_expf+0x26>
 8013eea:	2800      	cmp	r0, #0
 8013eec:	da06      	bge.n	8013efc <__ieee754_expf+0x4c>
 8013eee:	4a59      	ldr	r2, [pc, #356]	@ (8014054 <__ieee754_expf+0x1a4>)
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d903      	bls.n	8013efc <__ieee754_expf+0x4c>
 8013ef4:	2000      	movs	r0, #0
 8013ef6:	f000 f8e1 	bl	80140bc <__math_uflowf>
 8013efa:	e7f4      	b.n	8013ee6 <__ieee754_expf+0x36>
 8013efc:	4a56      	ldr	r2, [pc, #344]	@ (8014058 <__ieee754_expf+0x1a8>)
 8013efe:	4293      	cmp	r3, r2
 8013f00:	d96e      	bls.n	8013fe0 <__ieee754_expf+0x130>
 8013f02:	4a56      	ldr	r2, [pc, #344]	@ (801405c <__ieee754_expf+0x1ac>)
 8013f04:	00b5      	lsls	r5, r6, #2
 8013f06:	4293      	cmp	r3, r2
 8013f08:	d84e      	bhi.n	8013fa8 <__ieee754_expf+0xf8>
 8013f0a:	4b55      	ldr	r3, [pc, #340]	@ (8014060 <__ieee754_expf+0x1b0>)
 8013f0c:	1c20      	adds	r0, r4, #0
 8013f0e:	5959      	ldr	r1, [r3, r5]
 8013f10:	f7ed f948 	bl	80011a4 <__aeabi_fsub>
 8013f14:	4b53      	ldr	r3, [pc, #332]	@ (8014064 <__ieee754_expf+0x1b4>)
 8013f16:	1c07      	adds	r7, r0, #0
 8013f18:	595b      	ldr	r3, [r3, r5]
 8013f1a:	2501      	movs	r5, #1
 8013f1c:	1bad      	subs	r5, r5, r6
 8013f1e:	9300      	str	r3, [sp, #0]
 8013f20:	1bad      	subs	r5, r5, r6
 8013f22:	9900      	ldr	r1, [sp, #0]
 8013f24:	1c38      	adds	r0, r7, #0
 8013f26:	f7ed f93d 	bl	80011a4 <__aeabi_fsub>
 8013f2a:	1c04      	adds	r4, r0, #0
 8013f2c:	1c21      	adds	r1, r4, #0
 8013f2e:	1c20      	adds	r0, r4, #0
 8013f30:	f7ec fffa 	bl	8000f28 <__aeabi_fmul>
 8013f34:	494c      	ldr	r1, [pc, #304]	@ (8014068 <__ieee754_expf+0x1b8>)
 8013f36:	1c06      	adds	r6, r0, #0
 8013f38:	f7ec fff6 	bl	8000f28 <__aeabi_fmul>
 8013f3c:	494b      	ldr	r1, [pc, #300]	@ (801406c <__ieee754_expf+0x1bc>)
 8013f3e:	f7ed f931 	bl	80011a4 <__aeabi_fsub>
 8013f42:	1c31      	adds	r1, r6, #0
 8013f44:	f7ec fff0 	bl	8000f28 <__aeabi_fmul>
 8013f48:	4949      	ldr	r1, [pc, #292]	@ (8014070 <__ieee754_expf+0x1c0>)
 8013f4a:	f7ec fc7d 	bl	8000848 <__aeabi_fadd>
 8013f4e:	1c31      	adds	r1, r6, #0
 8013f50:	f7ec ffea 	bl	8000f28 <__aeabi_fmul>
 8013f54:	4947      	ldr	r1, [pc, #284]	@ (8014074 <__ieee754_expf+0x1c4>)
 8013f56:	f7ed f925 	bl	80011a4 <__aeabi_fsub>
 8013f5a:	1c31      	adds	r1, r6, #0
 8013f5c:	f7ec ffe4 	bl	8000f28 <__aeabi_fmul>
 8013f60:	4945      	ldr	r1, [pc, #276]	@ (8014078 <__ieee754_expf+0x1c8>)
 8013f62:	f7ec fc71 	bl	8000848 <__aeabi_fadd>
 8013f66:	1c31      	adds	r1, r6, #0
 8013f68:	f7ec ffde 	bl	8000f28 <__aeabi_fmul>
 8013f6c:	1c01      	adds	r1, r0, #0
 8013f6e:	1c20      	adds	r0, r4, #0
 8013f70:	f7ed f918 	bl	80011a4 <__aeabi_fsub>
 8013f74:	1c01      	adds	r1, r0, #0
 8013f76:	1c06      	adds	r6, r0, #0
 8013f78:	1c20      	adds	r0, r4, #0
 8013f7a:	f7ec ffd5 	bl	8000f28 <__aeabi_fmul>
 8013f7e:	9001      	str	r0, [sp, #4]
 8013f80:	2d00      	cmp	r5, #0
 8013f82:	d140      	bne.n	8014006 <__ieee754_expf+0x156>
 8013f84:	2180      	movs	r1, #128	@ 0x80
 8013f86:	1c30      	adds	r0, r6, #0
 8013f88:	05c9      	lsls	r1, r1, #23
 8013f8a:	f7ed f90b 	bl	80011a4 <__aeabi_fsub>
 8013f8e:	1c01      	adds	r1, r0, #0
 8013f90:	9801      	ldr	r0, [sp, #4]
 8013f92:	f7ec fde3 	bl	8000b5c <__aeabi_fdiv>
 8013f96:	1c21      	adds	r1, r4, #0
 8013f98:	f7ed f904 	bl	80011a4 <__aeabi_fsub>
 8013f9c:	1c01      	adds	r1, r0, #0
 8013f9e:	20fe      	movs	r0, #254	@ 0xfe
 8013fa0:	0580      	lsls	r0, r0, #22
 8013fa2:	f7ed f8ff 	bl	80011a4 <__aeabi_fsub>
 8013fa6:	e79e      	b.n	8013ee6 <__ieee754_expf+0x36>
 8013fa8:	4934      	ldr	r1, [pc, #208]	@ (801407c <__ieee754_expf+0x1cc>)
 8013faa:	1c20      	adds	r0, r4, #0
 8013fac:	f7ec ffbc 	bl	8000f28 <__aeabi_fmul>
 8013fb0:	4b33      	ldr	r3, [pc, #204]	@ (8014080 <__ieee754_expf+0x1d0>)
 8013fb2:	5959      	ldr	r1, [r3, r5]
 8013fb4:	f7ec fc48 	bl	8000848 <__aeabi_fadd>
 8013fb8:	f7ed faae 	bl	8001518 <__aeabi_f2iz>
 8013fbc:	0005      	movs	r5, r0
 8013fbe:	f7ed facb 	bl	8001558 <__aeabi_i2f>
 8013fc2:	4930      	ldr	r1, [pc, #192]	@ (8014084 <__ieee754_expf+0x1d4>)
 8013fc4:	1c06      	adds	r6, r0, #0
 8013fc6:	f7ec ffaf 	bl	8000f28 <__aeabi_fmul>
 8013fca:	1c01      	adds	r1, r0, #0
 8013fcc:	1c20      	adds	r0, r4, #0
 8013fce:	f7ed f8e9 	bl	80011a4 <__aeabi_fsub>
 8013fd2:	492d      	ldr	r1, [pc, #180]	@ (8014088 <__ieee754_expf+0x1d8>)
 8013fd4:	1c07      	adds	r7, r0, #0
 8013fd6:	1c30      	adds	r0, r6, #0
 8013fd8:	f7ec ffa6 	bl	8000f28 <__aeabi_fmul>
 8013fdc:	9000      	str	r0, [sp, #0]
 8013fde:	e7a0      	b.n	8013f22 <__ieee754_expf+0x72>
 8013fe0:	22d0      	movs	r2, #208	@ 0xd0
 8013fe2:	0592      	lsls	r2, r2, #22
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	d20c      	bcs.n	8014002 <__ieee754_expf+0x152>
 8013fe8:	4928      	ldr	r1, [pc, #160]	@ (801408c <__ieee754_expf+0x1dc>)
 8013fea:	1c20      	adds	r0, r4, #0
 8013fec:	f7ec fc2c 	bl	8000848 <__aeabi_fadd>
 8013ff0:	21fe      	movs	r1, #254	@ 0xfe
 8013ff2:	0589      	lsls	r1, r1, #22
 8013ff4:	f7ec faa6 	bl	8000544 <__aeabi_fcmpgt>
 8013ff8:	1e05      	subs	r5, r0, #0
 8013ffa:	d097      	beq.n	8013f2c <__ieee754_expf+0x7c>
 8013ffc:	21fe      	movs	r1, #254	@ 0xfe
 8013ffe:	0589      	lsls	r1, r1, #22
 8014000:	e75f      	b.n	8013ec2 <__ieee754_expf+0x12>
 8014002:	2500      	movs	r5, #0
 8014004:	e792      	b.n	8013f2c <__ieee754_expf+0x7c>
 8014006:	2080      	movs	r0, #128	@ 0x80
 8014008:	1c31      	adds	r1, r6, #0
 801400a:	05c0      	lsls	r0, r0, #23
 801400c:	f7ed f8ca 	bl	80011a4 <__aeabi_fsub>
 8014010:	1c01      	adds	r1, r0, #0
 8014012:	9801      	ldr	r0, [sp, #4]
 8014014:	f7ec fda2 	bl	8000b5c <__aeabi_fdiv>
 8014018:	1c01      	adds	r1, r0, #0
 801401a:	9800      	ldr	r0, [sp, #0]
 801401c:	f7ed f8c2 	bl	80011a4 <__aeabi_fsub>
 8014020:	1c39      	adds	r1, r7, #0
 8014022:	f7ed f8bf 	bl	80011a4 <__aeabi_fsub>
 8014026:	1c01      	adds	r1, r0, #0
 8014028:	20fe      	movs	r0, #254	@ 0xfe
 801402a:	0580      	lsls	r0, r0, #22
 801402c:	f7ed f8ba 	bl	80011a4 <__aeabi_fsub>
 8014030:	002b      	movs	r3, r5
 8014032:	337d      	adds	r3, #125	@ 0x7d
 8014034:	db02      	blt.n	801403c <__ieee754_expf+0x18c>
 8014036:	05ec      	lsls	r4, r5, #23
 8014038:	1824      	adds	r4, r4, r0
 801403a:	e74c      	b.n	8013ed6 <__ieee754_expf+0x26>
 801403c:	21d8      	movs	r1, #216	@ 0xd8
 801403e:	3564      	adds	r5, #100	@ 0x64
 8014040:	05ed      	lsls	r5, r5, #23
 8014042:	1828      	adds	r0, r5, r0
 8014044:	0509      	lsls	r1, r1, #20
 8014046:	f7ec ff6f 	bl	8000f28 <__aeabi_fmul>
 801404a:	e74c      	b.n	8013ee6 <__ieee754_expf+0x36>
 801404c:	2400      	movs	r4, #0
 801404e:	e742      	b.n	8013ed6 <__ieee754_expf+0x26>
 8014050:	42b17217 	.word	0x42b17217
 8014054:	42cff1b5 	.word	0x42cff1b5
 8014058:	3eb17218 	.word	0x3eb17218
 801405c:	3f851591 	.word	0x3f851591
 8014060:	080270f8 	.word	0x080270f8
 8014064:	080270f0 	.word	0x080270f0
 8014068:	3331bb4c 	.word	0x3331bb4c
 801406c:	35ddea0e 	.word	0x35ddea0e
 8014070:	388ab355 	.word	0x388ab355
 8014074:	3b360b61 	.word	0x3b360b61
 8014078:	3e2aaaab 	.word	0x3e2aaaab
 801407c:	3fb8aa3b 	.word	0x3fb8aa3b
 8014080:	08027100 	.word	0x08027100
 8014084:	3f317180 	.word	0x3f317180
 8014088:	3717f7d1 	.word	0x3717f7d1
 801408c:	7149f2ca 	.word	0x7149f2ca

08014090 <with_errnof>:
 8014090:	b570      	push	{r4, r5, r6, lr}
 8014092:	000d      	movs	r5, r1
 8014094:	1c04      	adds	r4, r0, #0
 8014096:	f7fd fc75 	bl	8011984 <__errno>
 801409a:	6005      	str	r5, [r0, #0]
 801409c:	1c20      	adds	r0, r4, #0
 801409e:	bd70      	pop	{r4, r5, r6, pc}

080140a0 <xflowf>:
 80140a0:	b510      	push	{r4, lr}
 80140a2:	1c0b      	adds	r3, r1, #0
 80140a4:	2800      	cmp	r0, #0
 80140a6:	d002      	beq.n	80140ae <xflowf+0xe>
 80140a8:	2380      	movs	r3, #128	@ 0x80
 80140aa:	061b      	lsls	r3, r3, #24
 80140ac:	18cb      	adds	r3, r1, r3
 80140ae:	1c18      	adds	r0, r3, #0
 80140b0:	f7ec ff3a 	bl	8000f28 <__aeabi_fmul>
 80140b4:	2122      	movs	r1, #34	@ 0x22
 80140b6:	f7ff ffeb 	bl	8014090 <with_errnof>
 80140ba:	bd10      	pop	{r4, pc}

080140bc <__math_uflowf>:
 80140bc:	2180      	movs	r1, #128	@ 0x80
 80140be:	b510      	push	{r4, lr}
 80140c0:	0549      	lsls	r1, r1, #21
 80140c2:	f7ff ffed 	bl	80140a0 <xflowf>
 80140c6:	bd10      	pop	{r4, pc}

080140c8 <__math_oflowf>:
 80140c8:	21e0      	movs	r1, #224	@ 0xe0
 80140ca:	b510      	push	{r4, lr}
 80140cc:	05c9      	lsls	r1, r1, #23
 80140ce:	f7ff ffe7 	bl	80140a0 <xflowf>
 80140d2:	bd10      	pop	{r4, pc}

080140d4 <__ieee754_log>:
 80140d4:	2380      	movs	r3, #128	@ 0x80
 80140d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140d8:	035b      	lsls	r3, r3, #13
 80140da:	000e      	movs	r6, r1
 80140dc:	b08d      	sub	sp, #52	@ 0x34
 80140de:	4299      	cmp	r1, r3
 80140e0:	da23      	bge.n	801412a <__ieee754_log+0x56>
 80140e2:	004b      	lsls	r3, r1, #1
 80140e4:	085b      	lsrs	r3, r3, #1
 80140e6:	4303      	orrs	r3, r0
 80140e8:	d107      	bne.n	80140fa <__ieee754_log+0x26>
 80140ea:	2200      	movs	r2, #0
 80140ec:	2300      	movs	r3, #0
 80140ee:	2000      	movs	r0, #0
 80140f0:	49b4      	ldr	r1, [pc, #720]	@ (80143c4 <__ieee754_log+0x2f0>)
 80140f2:	f7ed fe23 	bl	8001d3c <__aeabi_ddiv>
 80140f6:	b00d      	add	sp, #52	@ 0x34
 80140f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140fa:	2900      	cmp	r1, #0
 80140fc:	da06      	bge.n	801410c <__ieee754_log+0x38>
 80140fe:	0002      	movs	r2, r0
 8014100:	000b      	movs	r3, r1
 8014102:	f7ee fd27 	bl	8002b54 <__aeabi_dsub>
 8014106:	2200      	movs	r2, #0
 8014108:	2300      	movs	r3, #0
 801410a:	e7f2      	b.n	80140f2 <__ieee754_log+0x1e>
 801410c:	4bae      	ldr	r3, [pc, #696]	@ (80143c8 <__ieee754_log+0x2f4>)
 801410e:	2200      	movs	r2, #0
 8014110:	f7ee fa58 	bl	80025c4 <__aeabi_dmul>
 8014114:	2336      	movs	r3, #54	@ 0x36
 8014116:	000e      	movs	r6, r1
 8014118:	425b      	negs	r3, r3
 801411a:	4aac      	ldr	r2, [pc, #688]	@ (80143cc <__ieee754_log+0x2f8>)
 801411c:	4296      	cmp	r6, r2
 801411e:	dd06      	ble.n	801412e <__ieee754_log+0x5a>
 8014120:	0002      	movs	r2, r0
 8014122:	000b      	movs	r3, r1
 8014124:	f7ed faa6 	bl	8001674 <__aeabi_dadd>
 8014128:	e7e5      	b.n	80140f6 <__ieee754_log+0x22>
 801412a:	2300      	movs	r3, #0
 801412c:	e7f5      	b.n	801411a <__ieee754_log+0x46>
 801412e:	4ca8      	ldr	r4, [pc, #672]	@ (80143d0 <__ieee754_log+0x2fc>)
 8014130:	1532      	asrs	r2, r6, #20
 8014132:	1912      	adds	r2, r2, r4
 8014134:	0336      	lsls	r6, r6, #12
 8014136:	4ca7      	ldr	r4, [pc, #668]	@ (80143d4 <__ieee754_log+0x300>)
 8014138:	18d2      	adds	r2, r2, r3
 801413a:	0b33      	lsrs	r3, r6, #12
 801413c:	9302      	str	r3, [sp, #8]
 801413e:	191b      	adds	r3, r3, r4
 8014140:	2480      	movs	r4, #128	@ 0x80
 8014142:	0364      	lsls	r4, r4, #13
 8014144:	4023      	ands	r3, r4
 8014146:	4ca4      	ldr	r4, [pc, #656]	@ (80143d8 <__ieee754_log+0x304>)
 8014148:	9d02      	ldr	r5, [sp, #8]
 801414a:	405c      	eors	r4, r3
 801414c:	151b      	asrs	r3, r3, #20
 801414e:	189b      	adds	r3, r3, r2
 8014150:	4325      	orrs	r5, r4
 8014152:	2200      	movs	r2, #0
 8014154:	9300      	str	r3, [sp, #0]
 8014156:	0029      	movs	r1, r5
 8014158:	4b9f      	ldr	r3, [pc, #636]	@ (80143d8 <__ieee754_log+0x304>)
 801415a:	f7ee fcfb 	bl	8002b54 <__aeabi_dsub>
 801415e:	9b02      	ldr	r3, [sp, #8]
 8014160:	0006      	movs	r6, r0
 8014162:	3302      	adds	r3, #2
 8014164:	031b      	lsls	r3, r3, #12
 8014166:	000f      	movs	r7, r1
 8014168:	2200      	movs	r2, #0
 801416a:	0b1b      	lsrs	r3, r3, #12
 801416c:	2b02      	cmp	r3, #2
 801416e:	dc64      	bgt.n	801423a <__ieee754_log+0x166>
 8014170:	2300      	movs	r3, #0
 8014172:	f7ec f993 	bl	800049c <__aeabi_dcmpeq>
 8014176:	2800      	cmp	r0, #0
 8014178:	d019      	beq.n	80141ae <__ieee754_log+0xda>
 801417a:	9b00      	ldr	r3, [sp, #0]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d100      	bne.n	8014182 <__ieee754_log+0xae>
 8014180:	e11c      	b.n	80143bc <__ieee754_log+0x2e8>
 8014182:	0018      	movs	r0, r3
 8014184:	f7ef f8e0 	bl	8003348 <__aeabi_i2d>
 8014188:	4a94      	ldr	r2, [pc, #592]	@ (80143dc <__ieee754_log+0x308>)
 801418a:	4b95      	ldr	r3, [pc, #596]	@ (80143e0 <__ieee754_log+0x30c>)
 801418c:	0004      	movs	r4, r0
 801418e:	000d      	movs	r5, r1
 8014190:	f7ee fa18 	bl	80025c4 <__aeabi_dmul>
 8014194:	4a93      	ldr	r2, [pc, #588]	@ (80143e4 <__ieee754_log+0x310>)
 8014196:	0006      	movs	r6, r0
 8014198:	000f      	movs	r7, r1
 801419a:	4b93      	ldr	r3, [pc, #588]	@ (80143e8 <__ieee754_log+0x314>)
 801419c:	0020      	movs	r0, r4
 801419e:	0029      	movs	r1, r5
 80141a0:	f7ee fa10 	bl	80025c4 <__aeabi_dmul>
 80141a4:	0002      	movs	r2, r0
 80141a6:	000b      	movs	r3, r1
 80141a8:	0030      	movs	r0, r6
 80141aa:	0039      	movs	r1, r7
 80141ac:	e7ba      	b.n	8014124 <__ieee754_log+0x50>
 80141ae:	4a8f      	ldr	r2, [pc, #572]	@ (80143ec <__ieee754_log+0x318>)
 80141b0:	4b8f      	ldr	r3, [pc, #572]	@ (80143f0 <__ieee754_log+0x31c>)
 80141b2:	0030      	movs	r0, r6
 80141b4:	0039      	movs	r1, r7
 80141b6:	f7ee fa05 	bl	80025c4 <__aeabi_dmul>
 80141ba:	0002      	movs	r2, r0
 80141bc:	000b      	movs	r3, r1
 80141be:	2000      	movs	r0, #0
 80141c0:	498c      	ldr	r1, [pc, #560]	@ (80143f4 <__ieee754_log+0x320>)
 80141c2:	f7ee fcc7 	bl	8002b54 <__aeabi_dsub>
 80141c6:	0032      	movs	r2, r6
 80141c8:	0004      	movs	r4, r0
 80141ca:	000d      	movs	r5, r1
 80141cc:	003b      	movs	r3, r7
 80141ce:	0030      	movs	r0, r6
 80141d0:	0039      	movs	r1, r7
 80141d2:	f7ee f9f7 	bl	80025c4 <__aeabi_dmul>
 80141d6:	000b      	movs	r3, r1
 80141d8:	0002      	movs	r2, r0
 80141da:	0029      	movs	r1, r5
 80141dc:	0020      	movs	r0, r4
 80141de:	f7ee f9f1 	bl	80025c4 <__aeabi_dmul>
 80141e2:	9b00      	ldr	r3, [sp, #0]
 80141e4:	9002      	str	r0, [sp, #8]
 80141e6:	9103      	str	r1, [sp, #12]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d106      	bne.n	80141fa <__ieee754_log+0x126>
 80141ec:	0002      	movs	r2, r0
 80141ee:	000b      	movs	r3, r1
 80141f0:	0030      	movs	r0, r6
 80141f2:	0039      	movs	r1, r7
 80141f4:	f7ee fcae 	bl	8002b54 <__aeabi_dsub>
 80141f8:	e77d      	b.n	80140f6 <__ieee754_log+0x22>
 80141fa:	9800      	ldr	r0, [sp, #0]
 80141fc:	f7ef f8a4 	bl	8003348 <__aeabi_i2d>
 8014200:	4a76      	ldr	r2, [pc, #472]	@ (80143dc <__ieee754_log+0x308>)
 8014202:	4b77      	ldr	r3, [pc, #476]	@ (80143e0 <__ieee754_log+0x30c>)
 8014204:	0004      	movs	r4, r0
 8014206:	000d      	movs	r5, r1
 8014208:	f7ee f9dc 	bl	80025c4 <__aeabi_dmul>
 801420c:	4a75      	ldr	r2, [pc, #468]	@ (80143e4 <__ieee754_log+0x310>)
 801420e:	9000      	str	r0, [sp, #0]
 8014210:	9101      	str	r1, [sp, #4]
 8014212:	4b75      	ldr	r3, [pc, #468]	@ (80143e8 <__ieee754_log+0x314>)
 8014214:	0020      	movs	r0, r4
 8014216:	0029      	movs	r1, r5
 8014218:	f7ee f9d4 	bl	80025c4 <__aeabi_dmul>
 801421c:	0002      	movs	r2, r0
 801421e:	000b      	movs	r3, r1
 8014220:	9802      	ldr	r0, [sp, #8]
 8014222:	9903      	ldr	r1, [sp, #12]
 8014224:	f7ee fc96 	bl	8002b54 <__aeabi_dsub>
 8014228:	0032      	movs	r2, r6
 801422a:	003b      	movs	r3, r7
 801422c:	f7ee fc92 	bl	8002b54 <__aeabi_dsub>
 8014230:	0002      	movs	r2, r0
 8014232:	000b      	movs	r3, r1
 8014234:	9800      	ldr	r0, [sp, #0]
 8014236:	9901      	ldr	r1, [sp, #4]
 8014238:	e7dc      	b.n	80141f4 <__ieee754_log+0x120>
 801423a:	2380      	movs	r3, #128	@ 0x80
 801423c:	05db      	lsls	r3, r3, #23
 801423e:	f7ed fa19 	bl	8001674 <__aeabi_dadd>
 8014242:	0002      	movs	r2, r0
 8014244:	000b      	movs	r3, r1
 8014246:	0030      	movs	r0, r6
 8014248:	0039      	movs	r1, r7
 801424a:	f7ed fd77 	bl	8001d3c <__aeabi_ddiv>
 801424e:	9004      	str	r0, [sp, #16]
 8014250:	9105      	str	r1, [sp, #20]
 8014252:	9800      	ldr	r0, [sp, #0]
 8014254:	f7ef f878 	bl	8003348 <__aeabi_i2d>
 8014258:	9a04      	ldr	r2, [sp, #16]
 801425a:	9b05      	ldr	r3, [sp, #20]
 801425c:	9006      	str	r0, [sp, #24]
 801425e:	9107      	str	r1, [sp, #28]
 8014260:	0010      	movs	r0, r2
 8014262:	0019      	movs	r1, r3
 8014264:	f7ee f9ae 	bl	80025c4 <__aeabi_dmul>
 8014268:	4a63      	ldr	r2, [pc, #396]	@ (80143f8 <__ieee754_log+0x324>)
 801426a:	9b02      	ldr	r3, [sp, #8]
 801426c:	4694      	mov	ip, r2
 801426e:	4463      	add	r3, ip
 8014270:	0002      	movs	r2, r0
 8014272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014274:	000b      	movs	r3, r1
 8014276:	9008      	str	r0, [sp, #32]
 8014278:	9109      	str	r1, [sp, #36]	@ 0x24
 801427a:	f7ee f9a3 	bl	80025c4 <__aeabi_dmul>
 801427e:	0004      	movs	r4, r0
 8014280:	000d      	movs	r5, r1
 8014282:	4a5e      	ldr	r2, [pc, #376]	@ (80143fc <__ieee754_log+0x328>)
 8014284:	4b5e      	ldr	r3, [pc, #376]	@ (8014400 <__ieee754_log+0x32c>)
 8014286:	f7ee f99d 	bl	80025c4 <__aeabi_dmul>
 801428a:	4a5e      	ldr	r2, [pc, #376]	@ (8014404 <__ieee754_log+0x330>)
 801428c:	4b5e      	ldr	r3, [pc, #376]	@ (8014408 <__ieee754_log+0x334>)
 801428e:	f7ed f9f1 	bl	8001674 <__aeabi_dadd>
 8014292:	0022      	movs	r2, r4
 8014294:	002b      	movs	r3, r5
 8014296:	f7ee f995 	bl	80025c4 <__aeabi_dmul>
 801429a:	4a5c      	ldr	r2, [pc, #368]	@ (801440c <__ieee754_log+0x338>)
 801429c:	4b5c      	ldr	r3, [pc, #368]	@ (8014410 <__ieee754_log+0x33c>)
 801429e:	f7ed f9e9 	bl	8001674 <__aeabi_dadd>
 80142a2:	0022      	movs	r2, r4
 80142a4:	002b      	movs	r3, r5
 80142a6:	f7ee f98d 	bl	80025c4 <__aeabi_dmul>
 80142aa:	4a5a      	ldr	r2, [pc, #360]	@ (8014414 <__ieee754_log+0x340>)
 80142ac:	4b5a      	ldr	r3, [pc, #360]	@ (8014418 <__ieee754_log+0x344>)
 80142ae:	f7ed f9e1 	bl	8001674 <__aeabi_dadd>
 80142b2:	9a08      	ldr	r2, [sp, #32]
 80142b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142b6:	f7ee f985 	bl	80025c4 <__aeabi_dmul>
 80142ba:	4a58      	ldr	r2, [pc, #352]	@ (801441c <__ieee754_log+0x348>)
 80142bc:	9008      	str	r0, [sp, #32]
 80142be:	9109      	str	r1, [sp, #36]	@ 0x24
 80142c0:	4b57      	ldr	r3, [pc, #348]	@ (8014420 <__ieee754_log+0x34c>)
 80142c2:	0020      	movs	r0, r4
 80142c4:	0029      	movs	r1, r5
 80142c6:	f7ee f97d 	bl	80025c4 <__aeabi_dmul>
 80142ca:	4a56      	ldr	r2, [pc, #344]	@ (8014424 <__ieee754_log+0x350>)
 80142cc:	4b56      	ldr	r3, [pc, #344]	@ (8014428 <__ieee754_log+0x354>)
 80142ce:	f7ed f9d1 	bl	8001674 <__aeabi_dadd>
 80142d2:	0022      	movs	r2, r4
 80142d4:	002b      	movs	r3, r5
 80142d6:	f7ee f975 	bl	80025c4 <__aeabi_dmul>
 80142da:	4a54      	ldr	r2, [pc, #336]	@ (801442c <__ieee754_log+0x358>)
 80142dc:	4b54      	ldr	r3, [pc, #336]	@ (8014430 <__ieee754_log+0x35c>)
 80142de:	f7ed f9c9 	bl	8001674 <__aeabi_dadd>
 80142e2:	0022      	movs	r2, r4
 80142e4:	002b      	movs	r3, r5
 80142e6:	f7ee f96d 	bl	80025c4 <__aeabi_dmul>
 80142ea:	0002      	movs	r2, r0
 80142ec:	000b      	movs	r3, r1
 80142ee:	9808      	ldr	r0, [sp, #32]
 80142f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80142f2:	f7ed f9bf 	bl	8001674 <__aeabi_dadd>
 80142f6:	9a02      	ldr	r2, [sp, #8]
 80142f8:	4b4e      	ldr	r3, [pc, #312]	@ (8014434 <__ieee754_log+0x360>)
 80142fa:	0004      	movs	r4, r0
 80142fc:	1a9b      	subs	r3, r3, r2
 80142fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014300:	000d      	movs	r5, r1
 8014302:	4313      	orrs	r3, r2
 8014304:	2b00      	cmp	r3, #0
 8014306:	dd34      	ble.n	8014372 <__ieee754_log+0x29e>
 8014308:	2200      	movs	r2, #0
 801430a:	4b3a      	ldr	r3, [pc, #232]	@ (80143f4 <__ieee754_log+0x320>)
 801430c:	0030      	movs	r0, r6
 801430e:	0039      	movs	r1, r7
 8014310:	f7ee f958 	bl	80025c4 <__aeabi_dmul>
 8014314:	0032      	movs	r2, r6
 8014316:	003b      	movs	r3, r7
 8014318:	f7ee f954 	bl	80025c4 <__aeabi_dmul>
 801431c:	0002      	movs	r2, r0
 801431e:	000b      	movs	r3, r1
 8014320:	9002      	str	r0, [sp, #8]
 8014322:	9103      	str	r1, [sp, #12]
 8014324:	0020      	movs	r0, r4
 8014326:	0029      	movs	r1, r5
 8014328:	f7ed f9a4 	bl	8001674 <__aeabi_dadd>
 801432c:	9a04      	ldr	r2, [sp, #16]
 801432e:	9b05      	ldr	r3, [sp, #20]
 8014330:	f7ee f948 	bl	80025c4 <__aeabi_dmul>
 8014334:	9b00      	ldr	r3, [sp, #0]
 8014336:	0004      	movs	r4, r0
 8014338:	000d      	movs	r5, r1
 801433a:	2b00      	cmp	r3, #0
 801433c:	d106      	bne.n	801434c <__ieee754_log+0x278>
 801433e:	0002      	movs	r2, r0
 8014340:	000b      	movs	r3, r1
 8014342:	9802      	ldr	r0, [sp, #8]
 8014344:	9903      	ldr	r1, [sp, #12]
 8014346:	f7ee fc05 	bl	8002b54 <__aeabi_dsub>
 801434a:	e74f      	b.n	80141ec <__ieee754_log+0x118>
 801434c:	4a23      	ldr	r2, [pc, #140]	@ (80143dc <__ieee754_log+0x308>)
 801434e:	4b24      	ldr	r3, [pc, #144]	@ (80143e0 <__ieee754_log+0x30c>)
 8014350:	9806      	ldr	r0, [sp, #24]
 8014352:	9907      	ldr	r1, [sp, #28]
 8014354:	f7ee f936 	bl	80025c4 <__aeabi_dmul>
 8014358:	4a22      	ldr	r2, [pc, #136]	@ (80143e4 <__ieee754_log+0x310>)
 801435a:	9000      	str	r0, [sp, #0]
 801435c:	9101      	str	r1, [sp, #4]
 801435e:	9806      	ldr	r0, [sp, #24]
 8014360:	9907      	ldr	r1, [sp, #28]
 8014362:	4b21      	ldr	r3, [pc, #132]	@ (80143e8 <__ieee754_log+0x314>)
 8014364:	f7ee f92e 	bl	80025c4 <__aeabi_dmul>
 8014368:	0022      	movs	r2, r4
 801436a:	002b      	movs	r3, r5
 801436c:	f7ed f982 	bl	8001674 <__aeabi_dadd>
 8014370:	e754      	b.n	801421c <__ieee754_log+0x148>
 8014372:	0002      	movs	r2, r0
 8014374:	000b      	movs	r3, r1
 8014376:	0030      	movs	r0, r6
 8014378:	0039      	movs	r1, r7
 801437a:	f7ee fbeb 	bl	8002b54 <__aeabi_dsub>
 801437e:	9a04      	ldr	r2, [sp, #16]
 8014380:	9b05      	ldr	r3, [sp, #20]
 8014382:	f7ee f91f 	bl	80025c4 <__aeabi_dmul>
 8014386:	9b00      	ldr	r3, [sp, #0]
 8014388:	0004      	movs	r4, r0
 801438a:	000d      	movs	r5, r1
 801438c:	2b00      	cmp	r3, #0
 801438e:	d102      	bne.n	8014396 <__ieee754_log+0x2c2>
 8014390:	0002      	movs	r2, r0
 8014392:	000b      	movs	r3, r1
 8014394:	e72c      	b.n	80141f0 <__ieee754_log+0x11c>
 8014396:	4a11      	ldr	r2, [pc, #68]	@ (80143dc <__ieee754_log+0x308>)
 8014398:	4b11      	ldr	r3, [pc, #68]	@ (80143e0 <__ieee754_log+0x30c>)
 801439a:	9806      	ldr	r0, [sp, #24]
 801439c:	9907      	ldr	r1, [sp, #28]
 801439e:	f7ee f911 	bl	80025c4 <__aeabi_dmul>
 80143a2:	4a10      	ldr	r2, [pc, #64]	@ (80143e4 <__ieee754_log+0x310>)
 80143a4:	9000      	str	r0, [sp, #0]
 80143a6:	9101      	str	r1, [sp, #4]
 80143a8:	9806      	ldr	r0, [sp, #24]
 80143aa:	9907      	ldr	r1, [sp, #28]
 80143ac:	4b0e      	ldr	r3, [pc, #56]	@ (80143e8 <__ieee754_log+0x314>)
 80143ae:	f7ee f909 	bl	80025c4 <__aeabi_dmul>
 80143b2:	0002      	movs	r2, r0
 80143b4:	000b      	movs	r3, r1
 80143b6:	0020      	movs	r0, r4
 80143b8:	0029      	movs	r1, r5
 80143ba:	e733      	b.n	8014224 <__ieee754_log+0x150>
 80143bc:	2000      	movs	r0, #0
 80143be:	2100      	movs	r1, #0
 80143c0:	e699      	b.n	80140f6 <__ieee754_log+0x22>
 80143c2:	46c0      	nop			@ (mov r8, r8)
 80143c4:	c3500000 	.word	0xc3500000
 80143c8:	43500000 	.word	0x43500000
 80143cc:	7fefffff 	.word	0x7fefffff
 80143d0:	fffffc01 	.word	0xfffffc01
 80143d4:	00095f64 	.word	0x00095f64
 80143d8:	3ff00000 	.word	0x3ff00000
 80143dc:	fee00000 	.word	0xfee00000
 80143e0:	3fe62e42 	.word	0x3fe62e42
 80143e4:	35793c76 	.word	0x35793c76
 80143e8:	3dea39ef 	.word	0x3dea39ef
 80143ec:	55555555 	.word	0x55555555
 80143f0:	3fd55555 	.word	0x3fd55555
 80143f4:	3fe00000 	.word	0x3fe00000
 80143f8:	fff9eb86 	.word	0xfff9eb86
 80143fc:	df3e5244 	.word	0xdf3e5244
 8014400:	3fc2f112 	.word	0x3fc2f112
 8014404:	96cb03de 	.word	0x96cb03de
 8014408:	3fc74664 	.word	0x3fc74664
 801440c:	94229359 	.word	0x94229359
 8014410:	3fd24924 	.word	0x3fd24924
 8014414:	55555593 	.word	0x55555593
 8014418:	3fe55555 	.word	0x3fe55555
 801441c:	d078c69f 	.word	0xd078c69f
 8014420:	3fc39a09 	.word	0x3fc39a09
 8014424:	1d8e78af 	.word	0x1d8e78af
 8014428:	3fcc71c5 	.word	0x3fcc71c5
 801442c:	9997fa04 	.word	0x9997fa04
 8014430:	3fd99999 	.word	0x3fd99999
 8014434:	0006b851 	.word	0x0006b851

08014438 <_init>:
 8014438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801443a:	46c0      	nop			@ (mov r8, r8)
 801443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801443e:	bc08      	pop	{r3}
 8014440:	469e      	mov	lr, r3
 8014442:	4770      	bx	lr

08014444 <_fini>:
 8014444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014446:	46c0      	nop			@ (mov r8, r8)
 8014448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801444a:	bc08      	pop	{r3}
 801444c:	469e      	mov	lr, r3
 801444e:	4770      	bx	lr
