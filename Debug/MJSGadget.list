
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001971c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001090  080197e0  080197e0  0001a7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a870  0801a870  0001c4b0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a870  0801a870  0001b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a878  0801a878  0001c4b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a878  0801a878  0001b878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a87c  0801a87c  0001b87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004b0  20000000  0801a880  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f4c  200004b0  0801ad30  0001c4b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200043fc  0801ad30  0001d3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001c4b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027bfc  00000000  00000000  0001c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ee0  00000000  00000000  000440d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002088  00000000  00000000  0004afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018bc  00000000  00000000  0004d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a99f  00000000  00000000  0004e8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032897  00000000  00000000  0005929b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bf44  00000000  00000000  0008bb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127a76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e8  00000000  00000000  00127abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001303a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004b0 	.word	0x200004b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080197c4 	.word	0x080197c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004b4 	.word	0x200004b4
 8000104:	080197c4 	.word	0x080197c4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801a230 	.word	0x0801a230
 8000d08:	0801a270 	.word	0x0801a270
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801a2ac 	.word	0x0801a2ac
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <setMeasurement>:
} ATCommandsParameters;
void setCharges(float battery, float solar){
  batteryCharge = battery;
  solarCharge = solar;
}
void setMeasurement(float temp, float humid, uint16_t voc){
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 800355a:	4b07      	ldr	r3, [pc, #28]	@ (8003578 <setMeasurement+0x2c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003560:	4b06      	ldr	r3, [pc, #24]	@ (800357c <setMeasurement+0x30>)
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 8003566:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <setMeasurement+0x34>)
 8003568:	1dba      	adds	r2, r7, #6
 800356a:	8812      	ldrh	r2, [r2, #0]
 800356c:	801a      	strh	r2, [r3, #0]
}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b004      	add	sp, #16
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	200005e4 	.word	0x200005e4
 800357c:	200005e8 	.word	0x200005e8
 8003580:	200005f0 	.word	0x200005f0

08003584 <setMic>:
void setMic(float dB){
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  dBC = dB;
 800358c:	4b03      	ldr	r3, [pc, #12]	@ (800359c <setMic+0x18>)
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	601a      	str	r2, [r3, #0]
}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	46bd      	mov	sp, r7
 8003596:	b002      	add	sp, #8
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	200005f4 	.word	0x200005f4

080035a0 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80035a4:	f005 feac 	bl	8009300 <HAL_GetUIDw0>
 80035a8:	0002      	movs	r2, r0
 80035aa:	4b07      	ldr	r3, [pc, #28]	@ (80035c8 <ESP_GetUID+0x28>)
 80035ac:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80035ae:	f005 feb1 	bl	8009314 <HAL_GetUIDw1>
 80035b2:	0002      	movs	r2, r0
 80035b4:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <ESP_GetUID+0x28>)
 80035b6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80035b8:	f005 feb6 	bl	8009328 <HAL_GetUIDw2>
 80035bc:	0002      	movs	r2, r0
 80035be:	4b02      	ldr	r3, [pc, #8]	@ (80035c8 <ESP_GetUID+0x28>)
 80035c0:	609a      	str	r2, [r3, #8]
}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200005d8 	.word	0x200005d8

080035cc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <ESP_Init+0x20>)
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <ESP_Init+0x24>)
 80035dc:	2202      	movs	r2, #2
 80035de:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80035e0:	f7ff ffde 	bl	80035a0 <ESP_GetUID>
}
 80035e4:	46c0      	nop			@ (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	200004cc 	.word	0x200004cc
 80035f0:	20000108 	.word	0x20000108

080035f4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80035f4:	b5b0      	push	{r4, r5, r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	000a      	movs	r2, r1
 80035fe:	1cbb      	adds	r3, r7, #2
 8003600:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003602:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <ESP_Send+0x48>)
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	250f      	movs	r5, #15
 8003608:	197c      	adds	r4, r7, r5
 800360a:	1cbb      	adds	r3, r7, #2
 800360c:	881a      	ldrh	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0019      	movs	r1, r3
 8003612:	f00c fd99 	bl	8010148 <HAL_UART_Transmit_DMA>
 8003616:	0003      	movs	r3, r0
 8003618:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800361a:	197b      	adds	r3, r7, r5
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 8003622:	4a07      	ldr	r2, [pc, #28]	@ (8003640 <ESP_Send+0x4c>)
 8003624:	4b07      	ldr	r3, [pc, #28]	@ (8003644 <ESP_Send+0x50>)
 8003626:	0019      	movs	r1, r3
 8003628:	2003      	movs	r0, #3
 800362a:	f005 fa39 	bl	8008aa0 <CreateLine>
    return false;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <ESP_Send+0x40>
  }
  return true;
 8003632:	2301      	movs	r3, #1
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b004      	add	sp, #16
 800363a:	bdb0      	pop	{r4, r5, r7, pc}
 800363c:	200004cc 	.word	0x200004cc
 8003640:	080197e0 	.word	0x080197e0
 8003644:	08019800 	.word	0x08019800

08003648 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 8003648:	b5b0      	push	{r4, r5, r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cfb      	adds	r3, r7, #3
 8003654:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003656:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <ESP_Receive+0x58>)
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 800365c:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <ESP_Receive+0x5c>)
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	1cfb      	adds	r3, r7, #3
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b29a      	uxth	r2, r3
 8003666:	250f      	movs	r5, #15
 8003668:	197c      	adds	r4, r7, r5
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0019      	movs	r1, r3
 800366e:	f00c fdfb 	bl	8010268 <HAL_UART_Receive_DMA>
 8003672:	0003      	movs	r3, r0
 8003674:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003676:	197b      	adds	r3, r7, r5
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <ESP_Receive+0x60>)
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <ESP_Receive+0x64>)
 8003682:	0019      	movs	r1, r3
 8003684:	2003      	movs	r0, #3
 8003686:	f005 fa0b 	bl	8008aa0 <CreateLine>
    RxComplete = true;
 800368a:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <ESP_Receive+0x58>)
 800368c:	2201      	movs	r2, #1
 800368e:	701a      	strb	r2, [r3, #0]
    return false;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <ESP_Receive+0x4e>
  }
  return true;
 8003694:	2301      	movs	r3, #1
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b004      	add	sp, #16
 800369c:	bdb0      	pop	{r4, r5, r7, pc}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	200004d0 	.word	0x200004d0
 80036a4:	200004cc 	.word	0x200004cc
 80036a8:	08019804 	.word	0x08019804
 80036ac:	08019800 	.word	0x08019800

080036b0 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80036b8:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <HAL_UART_RxCpltCallback+0x2c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d108      	bne.n	80036d4 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 80036c2:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <HAL_UART_RxCpltCallback+0x30>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 80036c8:	4a06      	ldr	r2, [pc, #24]	@ (80036e4 <HAL_UART_RxCpltCallback+0x34>)
 80036ca:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <HAL_UART_RxCpltCallback+0x38>)
 80036cc:	0019      	movs	r1, r3
 80036ce:	2003      	movs	r0, #3
 80036d0:	f005 f9e6 	bl	8008aa0 <CreateLine>
  }
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	200004cc 	.word	0x200004cc
 80036e0:	200004d0 	.word	0x200004d0
 80036e4:	08019824 	.word	0x08019824
 80036e8:	08019800 	.word	0x08019800

080036ec <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <HAL_UART_ErrorCallback+0x20>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d102      	bne.n	8003704 <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 80036fe:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <HAL_UART_ErrorCallback+0x24>)
 8003700:	2207      	movs	r2, #7
 8003702:	701a      	strb	r2, [r3, #0]
  }
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200004cc 	.word	0x200004cc
 8003710:	20000108 	.word	0x20000108

08003714 <CreateMessage>:
uint16_t CreateMessage(){
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b085      	sub	sp, #20
 8003718:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 800371a:	1dbb      	adds	r3, r7, #6
 800371c:	2200      	movs	r2, #0
 800371e:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"graden\"", sensorID1, Temperature);
 8003720:	4b42      	ldr	r3, [pc, #264]	@ (800382c <CreateMessage+0x118>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	1c18      	adds	r0, r3, #0
 8003726:	f7ff fe1b 	bl	8003360 <__aeabi_f2d>
 800372a:	0002      	movs	r2, r0
 800372c:	000b      	movs	r3, r1
 800372e:	4c40      	ldr	r4, [pc, #256]	@ (8003830 <CreateMessage+0x11c>)
 8003730:	4940      	ldr	r1, [pc, #256]	@ (8003834 <CreateMessage+0x120>)
 8003732:	4841      	ldr	r0, [pc, #260]	@ (8003838 <CreateMessage+0x124>)
 8003734:	9200      	str	r2, [sp, #0]
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	0022      	movs	r2, r4
 800373a:	f013 f8b3 	bl	80168a4 <siprintf>
  messageLength += strlen(messagePart1);
 800373e:	4b3e      	ldr	r3, [pc, #248]	@ (8003838 <CreateMessage+0x124>)
 8003740:	0018      	movs	r0, r3
 8003742:	f7fc fce1 	bl	8000108 <strlen>
 8003746:	0003      	movs	r3, r0
 8003748:	b299      	uxth	r1, r3
 800374a:	1dbb      	adds	r3, r7, #6
 800374c:	1dba      	adds	r2, r7, #6
 800374e:	8812      	ldrh	r2, [r2, #0]
 8003750:	188a      	adds	r2, r1, r2
 8003752:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"%%\"", sensorID2, Humidity);
 8003754:	4b39      	ldr	r3, [pc, #228]	@ (800383c <CreateMessage+0x128>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	1c18      	adds	r0, r3, #0
 800375a:	f7ff fe01 	bl	8003360 <__aeabi_f2d>
 800375e:	0002      	movs	r2, r0
 8003760:	000b      	movs	r3, r1
 8003762:	4c37      	ldr	r4, [pc, #220]	@ (8003840 <CreateMessage+0x12c>)
 8003764:	4937      	ldr	r1, [pc, #220]	@ (8003844 <CreateMessage+0x130>)
 8003766:	4838      	ldr	r0, [pc, #224]	@ (8003848 <CreateMessage+0x134>)
 8003768:	9200      	str	r2, [sp, #0]
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	0022      	movs	r2, r4
 800376e:	f013 f899 	bl	80168a4 <siprintf>
  messageLength += strlen(messagePart2);
 8003772:	4b35      	ldr	r3, [pc, #212]	@ (8003848 <CreateMessage+0x134>)
 8003774:	0018      	movs	r0, r3
 8003776:	f7fc fcc7 	bl	8000108 <strlen>
 800377a:	0003      	movs	r3, r0
 800377c:	b299      	uxth	r1, r3
 800377e:	1dbb      	adds	r3, r7, #6
 8003780:	1dba      	adds	r2, r7, #6
 8003782:	8812      	ldrh	r2, [r2, #0]
 8003784:	188a      	adds	r2, r1, r2
 8003786:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"dBC\"", sensorID3, dBC);
 8003788:	4b30      	ldr	r3, [pc, #192]	@ (800384c <CreateMessage+0x138>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	1c18      	adds	r0, r3, #0
 800378e:	f7ff fde7 	bl	8003360 <__aeabi_f2d>
 8003792:	0002      	movs	r2, r0
 8003794:	000b      	movs	r3, r1
 8003796:	4c2e      	ldr	r4, [pc, #184]	@ (8003850 <CreateMessage+0x13c>)
 8003798:	492e      	ldr	r1, [pc, #184]	@ (8003854 <CreateMessage+0x140>)
 800379a:	482f      	ldr	r0, [pc, #188]	@ (8003858 <CreateMessage+0x144>)
 800379c:	9200      	str	r2, [sp, #0]
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	0022      	movs	r2, r4
 80037a2:	f013 f87f 	bl	80168a4 <siprintf>
  messageLength += strlen(messagePart3);
 80037a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003858 <CreateMessage+0x144>)
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7fc fcad 	bl	8000108 <strlen>
 80037ae:	0003      	movs	r3, r0
 80037b0:	b299      	uxth	r1, r3
 80037b2:	1dbb      	adds	r3, r7, #6
 80037b4:	1dba      	adds	r2, r7, #6
 80037b6:	8812      	ldrh	r2, [r2, #0]
 80037b8:	188a      	adds	r2, r1, r2
 80037ba:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d, \"unit\": \"VOC index\"", sensorID4, VOCIndex);
 80037bc:	4b27      	ldr	r3, [pc, #156]	@ (800385c <CreateMessage+0x148>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	4a27      	ldr	r2, [pc, #156]	@ (8003860 <CreateMessage+0x14c>)
 80037c2:	4928      	ldr	r1, [pc, #160]	@ (8003864 <CreateMessage+0x150>)
 80037c4:	4828      	ldr	r0, [pc, #160]	@ (8003868 <CreateMessage+0x154>)
 80037c6:	f013 f86d 	bl	80168a4 <siprintf>
  messageLength += strlen(messagePart4);
 80037ca:	4b27      	ldr	r3, [pc, #156]	@ (8003868 <CreateMessage+0x154>)
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fc fc9b 	bl	8000108 <strlen>
 80037d2:	0003      	movs	r3, r0
 80037d4:	b299      	uxth	r1, r3
 80037d6:	1dbb      	adds	r3, r7, #6
 80037d8:	1dba      	adds	r2, r7, #6
 80037da:	8812      	ldrh	r2, [r2, #0]
 80037dc:	188a      	adds	r2, r1, r2
 80037de:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"Volt\"", sensorID5, batteryCharge);
 80037e0:	4b22      	ldr	r3, [pc, #136]	@ (800386c <CreateMessage+0x158>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1c18      	adds	r0, r3, #0
 80037e6:	f7ff fdbb 	bl	8003360 <__aeabi_f2d>
 80037ea:	0002      	movs	r2, r0
 80037ec:	000b      	movs	r3, r1
 80037ee:	4c20      	ldr	r4, [pc, #128]	@ (8003870 <CreateMessage+0x15c>)
 80037f0:	4920      	ldr	r1, [pc, #128]	@ (8003874 <CreateMessage+0x160>)
 80037f2:	4821      	ldr	r0, [pc, #132]	@ (8003878 <CreateMessage+0x164>)
 80037f4:	9200      	str	r2, [sp, #0]
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	0022      	movs	r2, r4
 80037fa:	f013 f853 	bl	80168a4 <siprintf>
  messageLength += strlen(messagePart5);
 80037fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <CreateMessage+0x164>)
 8003800:	0018      	movs	r0, r3
 8003802:	f7fc fc81 	bl	8000108 <strlen>
 8003806:	0003      	movs	r3, r0
 8003808:	b299      	uxth	r1, r3
 800380a:	1dbb      	adds	r3, r7, #6
 800380c:	1dba      	adds	r2, r7, #6
 800380e:	8812      	ldrh	r2, [r2, #0]
 8003810:	188a      	adds	r2, r1, r2
 8003812:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 8003814:	1dbb      	adds	r3, r7, #6
 8003816:	1dba      	adds	r2, r7, #6
 8003818:	8812      	ldrh	r2, [r2, #0]
 800381a:	3214      	adds	r2, #20
 800381c:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 800381e:	1dbb      	adds	r3, r7, #6
 8003820:	881b      	ldrh	r3, [r3, #0]
}
 8003822:	0018      	movs	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	b003      	add	sp, #12
 8003828:	bd90      	pop	{r4, r7, pc}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	200005e4 	.word	0x200005e4
 8003830:	20000064 	.word	0x20000064
 8003834:	08019830 	.word	0x08019830
 8003838:	200005f8 	.word	0x200005f8
 800383c:	200005e8 	.word	0x200005e8
 8003840:	20000080 	.word	0x20000080
 8003844:	08019888 	.word	0x08019888
 8003848:	20000678 	.word	0x20000678
 800384c:	200005f4 	.word	0x200005f4
 8003850:	2000009c 	.word	0x2000009c
 8003854:	080198dc 	.word	0x080198dc
 8003858:	200006f8 	.word	0x200006f8
 800385c:	200005f0 	.word	0x200005f0
 8003860:	200000b8 	.word	0x200000b8
 8003864:	08019934 	.word	0x08019934
 8003868:	20000778 	.word	0x20000778
 800386c:	200005ec 	.word	0x200005ec
 8003870:	200000d4 	.word	0x200000d4
 8003874:	0801998c 	.word	0x0801998c
 8003878:	200007f8 	.word	0x200007f8

0800387c <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <SetCommandBuffer+0x24>)
 800388c:	0018      	movs	r0, r3
 800388e:	f013 f8b5 	bl	80169fc <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003892:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <SetCommandBuffer+0x28>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
}
 8003898:	46c0      	nop			@ (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	2000088c 	.word	0x2000088c
 80038a4:	20000a8c 	.word	0x20000a8c

080038a8 <StartProg>:
void StartProg(){
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 80038ac:	2064      	movs	r0, #100	@ 0x64
 80038ae:	f005 fd03 	bl	80092b8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80038b2:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <StartProg+0x60>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	2101      	movs	r1, #1
 80038b8:	0018      	movs	r0, r3
 80038ba:	f006 fd43 	bl	800a344 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80038be:	2064      	movs	r0, #100	@ 0x64
 80038c0:	f005 fcfa 	bl	80092b8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80038c4:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <StartProg+0x60>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	2102      	movs	r1, #2
 80038ca:	0018      	movs	r0, r3
 80038cc:	f006 fd3a 	bl	800a344 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80038d0:	23fa      	movs	r3, #250	@ 0xfa
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	0018      	movs	r0, r3
 80038d6:	f005 fcef 	bl	80092b8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80038da:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <StartProg+0x60>)
 80038dc:	2201      	movs	r2, #1
 80038de:	2101      	movs	r1, #1
 80038e0:	0018      	movs	r0, r3
 80038e2:	f006 fd2f 	bl	800a344 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80038e6:	23fa      	movs	r3, #250	@ 0xfa
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	0018      	movs	r0, r3
 80038ec:	f005 fce4 	bl	80092b8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <StartProg+0x60>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	2102      	movs	r1, #2
 80038f6:	0018      	movs	r0, r3
 80038f8:	f006 fd24 	bl	800a344 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80038fc:	2028      	movs	r0, #40	@ 0x28
 80038fe:	f005 fcdb 	bl	80092b8 <HAL_Delay>
}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	50001c00 	.word	0x50001c00

0800390c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 800390c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800390e:	46c6      	mov	lr, r8
 8003910:	b500      	push	{lr}
 8003912:	b09a      	sub	sp, #104	@ 0x68
 8003914:	af00      	add	r7, sp, #0
 8003916:	61f8      	str	r0, [r7, #28]
 8003918:	0008      	movs	r0, r1
 800391a:	0011      	movs	r1, r2
 800391c:	261a      	movs	r6, #26
 800391e:	19bb      	adds	r3, r7, r6
 8003920:	1c02      	adds	r2, r0, #0
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	2319      	movs	r3, #25
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	1c0a      	adds	r2, r1, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	466b      	mov	r3, sp
 800392e:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003930:	19bb      	adds	r3, r7, r6
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	1e5a      	subs	r2, r3, #1
 8003938:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800393a:	001a      	movs	r2, r3
 800393c:	60ba      	str	r2, [r7, #8]
 800393e:	2200      	movs	r2, #0
 8003940:	60fa      	str	r2, [r7, #12]
 8003942:	68b8      	ldr	r0, [r7, #8]
 8003944:	68f9      	ldr	r1, [r7, #12]
 8003946:	0002      	movs	r2, r0
 8003948:	0f52      	lsrs	r2, r2, #29
 800394a:	000e      	movs	r6, r1
 800394c:	00f6      	lsls	r6, r6, #3
 800394e:	617e      	str	r6, [r7, #20]
 8003950:	697e      	ldr	r6, [r7, #20]
 8003952:	4316      	orrs	r6, r2
 8003954:	617e      	str	r6, [r7, #20]
 8003956:	0002      	movs	r2, r0
 8003958:	00d2      	lsls	r2, r2, #3
 800395a:	613a      	str	r2, [r7, #16]
 800395c:	001a      	movs	r2, r3
 800395e:	603a      	str	r2, [r7, #0]
 8003960:	2200      	movs	r2, #0
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	6838      	ldr	r0, [r7, #0]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	0002      	movs	r2, r0
 800396a:	0f52      	lsrs	r2, r2, #29
 800396c:	000e      	movs	r6, r1
 800396e:	00f5      	lsls	r5, r6, #3
 8003970:	4315      	orrs	r5, r2
 8003972:	0002      	movs	r2, r0
 8003974:	00d4      	lsls	r4, r2, #3
 8003976:	3307      	adds	r3, #7
 8003978:	08db      	lsrs	r3, r3, #3
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	466a      	mov	r2, sp
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	469d      	mov	sp, r3
 8003982:	466b      	mov	r3, sp
 8003984:	3300      	adds	r3, #0
 8003986:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003988:	234f      	movs	r3, #79	@ 0x4f
 800398a:	2118      	movs	r1, #24
 800398c:	185b      	adds	r3, r3, r1
 800398e:	19db      	adds	r3, r3, r7
 8003990:	2203      	movs	r2, #3
 8003992:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003994:	234c      	movs	r3, #76	@ 0x4c
 8003996:	185b      	adds	r3, r3, r1
 8003998:	19db      	adds	r3, r3, r7
 800399a:	2200      	movs	r2, #0
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	e013      	b.n	80039c8 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 80039a0:	204c      	movs	r0, #76	@ 0x4c
 80039a2:	2418      	movs	r4, #24
 80039a4:	1903      	adds	r3, r0, r4
 80039a6:	19db      	adds	r3, r3, r7
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	18d2      	adds	r2, r2, r3
 80039ae:	1903      	adds	r3, r0, r4
 80039b0:	19db      	adds	r3, r3, r7
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	7811      	ldrb	r1, [r2, #0]
 80039b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039b8:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80039ba:	1903      	adds	r3, r0, r4
 80039bc:	19db      	adds	r3, r3, r7
 80039be:	881a      	ldrh	r2, [r3, #0]
 80039c0:	1903      	adds	r3, r0, r4
 80039c2:	19db      	adds	r3, r3, r7
 80039c4:	3201      	adds	r2, #1
 80039c6:	801a      	strh	r2, [r3, #0]
 80039c8:	234c      	movs	r3, #76	@ 0x4c
 80039ca:	2018      	movs	r0, #24
 80039cc:	181b      	adds	r3, r3, r0
 80039ce:	19da      	adds	r2, r3, r7
 80039d0:	211a      	movs	r1, #26
 80039d2:	187b      	adds	r3, r7, r1
 80039d4:	8812      	ldrh	r2, [r2, #0]
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d3e1      	bcc.n	80039a0 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039e2:	2100      	movs	r1, #0
 80039e4:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 80039e6:	233f      	movs	r3, #63	@ 0x3f
 80039e8:	0006      	movs	r6, r0
 80039ea:	199b      	adds	r3, r3, r6
 80039ec:	19db      	adds	r3, r3, r7
 80039ee:	224e      	movs	r2, #78	@ 0x4e
 80039f0:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 80039f2:	2530      	movs	r5, #48	@ 0x30
 80039f4:	19ab      	adds	r3, r5, r6
 80039f6:	19db      	adds	r3, r3, r7
 80039f8:	4a60      	ldr	r2, [pc, #384]	@ (8003b7c <ParseBuffer+0x270>)
 80039fa:	8811      	ldrh	r1, [r2, #0]
 80039fc:	8019      	strh	r1, [r3, #0]
 80039fe:	7892      	ldrb	r2, [r2, #2]
 8003a00:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003a02:	2328      	movs	r3, #40	@ 0x28
 8003a04:	199b      	adds	r3, r3, r6
 8003a06:	19db      	adds	r3, r3, r7
 8003a08:	4a5d      	ldr	r2, [pc, #372]	@ (8003b80 <ParseBuffer+0x274>)
 8003a0a:	6811      	ldr	r1, [r2, #0]
 8003a0c:	6019      	str	r1, [r3, #0]
 8003a0e:	8892      	ldrh	r2, [r2, #4]
 8003a10:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003a12:	2320      	movs	r3, #32
 8003a14:	199b      	adds	r3, r3, r6
 8003a16:	19db      	adds	r3, r3, r7
 8003a18:	4a5a      	ldr	r2, [pc, #360]	@ (8003b84 <ParseBuffer+0x278>)
 8003a1a:	6811      	ldr	r1, [r2, #0]
 8003a1c:	6019      	str	r1, [r3, #0]
 8003a1e:	8892      	ldrh	r2, [r2, #4]
 8003a20:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003a22:	231c      	movs	r3, #28
 8003a24:	199b      	adds	r3, r3, r6
 8003a26:	19db      	adds	r3, r3, r7
 8003a28:	223e      	movs	r2, #62	@ 0x3e
 8003a2a:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	199b      	adds	r3, r3, r6
 8003a30:	19db      	adds	r3, r3, r7
 8003a32:	4a55      	ldr	r2, [pc, #340]	@ (8003b88 <ParseBuffer+0x27c>)
 8003a34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a36:	c313      	stmia	r3!, {r0, r1, r4}
 8003a38:	8811      	ldrh	r1, [r2, #0]
 8003a3a:	8019      	strh	r1, [r3, #0]
 8003a3c:	7892      	ldrb	r2, [r2, #2]
 8003a3e:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003a40:	2319      	movs	r3, #25
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d108      	bne.n	8003a5c <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003a4a:	19ab      	adds	r3, r5, r6
 8003a4c:	19da      	adds	r2, r3, r7
 8003a4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f012 ffe6 	bl	8016a24 <strstr>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003a5c:	2319      	movs	r3, #25
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d10a      	bne.n	8003a7c <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003a66:	2320      	movs	r3, #32
 8003a68:	2218      	movs	r2, #24
 8003a6a:	189b      	adds	r3, r3, r2
 8003a6c:	19da      	adds	r2, r3, r7
 8003a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a70:	0011      	movs	r1, r2
 8003a72:	0018      	movs	r0, r3
 8003a74:	f012 ffd6 	bl	8016a24 <strstr>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003a7c:	2319      	movs	r3, #25
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d10a      	bne.n	8003a9c <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003a86:	231c      	movs	r3, #28
 8003a88:	2218      	movs	r2, #24
 8003a8a:	189b      	adds	r3, r3, r2
 8003a8c:	19da      	adds	r2, r3, r7
 8003a8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a90:	0011      	movs	r1, r2
 8003a92:	0018      	movs	r0, r3
 8003a94:	f012 ffc6 	bl	8016a24 <strstr>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003a9c:	2328      	movs	r3, #40	@ 0x28
 8003a9e:	2418      	movs	r4, #24
 8003aa0:	191b      	adds	r3, r3, r4
 8003aa2:	19da      	adds	r2, r3, r7
 8003aa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f012 ffbb 	bl	8016a24 <strstr>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	191b      	adds	r3, r3, r4
 8003ab6:	19da      	adds	r2, r3, r7
 8003ab8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aba:	0011      	movs	r1, r2
 8003abc:	0018      	movs	r0, r3
 8003abe:	f012 ffb1 	bl	8016a24 <strstr>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003ac6:	231a      	movs	r3, #26
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d948      	bls.n	8003b62 <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003ad0:	213f      	movs	r1, #63	@ 0x3f
 8003ad2:	190b      	adds	r3, r1, r4
 8003ad4:	19db      	adds	r3, r3, r7
 8003ad6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ad8:	7812      	ldrb	r2, [r2, #0]
 8003ada:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003adc:	190b      	adds	r3, r1, r4
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b4f      	cmp	r3, #79	@ 0x4f
 8003ae4:	d104      	bne.n	8003af0 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003ae6:	234f      	movs	r3, #79	@ 0x4f
 8003ae8:	191b      	adds	r3, r3, r4
 8003aea:	19db      	adds	r3, r3, r7
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003af0:	233f      	movs	r3, #63	@ 0x3f
 8003af2:	2218      	movs	r2, #24
 8003af4:	189b      	adds	r3, r3, r2
 8003af6:	19db      	adds	r3, r3, r7
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b72      	cmp	r3, #114	@ 0x72
 8003afc:	d104      	bne.n	8003b08 <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003afe:	234f      	movs	r3, #79	@ 0x4f
 8003b00:	189b      	adds	r3, r3, r2
 8003b02:	19db      	adds	r3, r3, r7
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003b08:	233f      	movs	r3, #63	@ 0x3f
 8003b0a:	2218      	movs	r2, #24
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	19db      	adds	r3, r3, r7
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b14:	d104      	bne.n	8003b20 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003b16:	234f      	movs	r3, #79	@ 0x4f
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	19db      	adds	r3, r3, r7
 8003b1c:	2205      	movs	r2, #5
 8003b1e:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003b20:	213f      	movs	r1, #63	@ 0x3f
 8003b22:	2018      	movs	r0, #24
 8003b24:	180b      	adds	r3, r1, r0
 8003b26:	19db      	adds	r3, r3, r7
 8003b28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003b2a:	7812      	ldrb	r2, [r2, #0]
 8003b2c:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003b2e:	0002      	movs	r2, r0
 8003b30:	188b      	adds	r3, r1, r2
 8003b32:	19db      	adds	r3, r3, r7
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b45      	cmp	r3, #69	@ 0x45
 8003b38:	d104      	bne.n	8003b44 <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003b3a:	234f      	movs	r3, #79	@ 0x4f
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003b44:	213f      	movs	r1, #63	@ 0x3f
 8003b46:	2018      	movs	r0, #24
 8003b48:	180b      	adds	r3, r1, r0
 8003b4a:	19db      	adds	r3, r3, r7
 8003b4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b4e:	7812      	ldrb	r2, [r2, #0]
 8003b50:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003b52:	180b      	adds	r3, r1, r0
 8003b54:	19db      	adds	r3, r3, r7
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b57      	cmp	r3, #87	@ 0x57
 8003b5a:	d102      	bne.n	8003b62 <ParseBuffer+0x256>
      ConnectionMade = true;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <ParseBuffer+0x280>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003b62:	234f      	movs	r3, #79	@ 0x4f
 8003b64:	2218      	movs	r2, #24
 8003b66:	189b      	adds	r3, r3, r2
 8003b68:	19db      	adds	r3, r3, r7
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	46c5      	mov	sp, r8

}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b01a      	add	sp, #104	@ 0x68
 8003b74:	bc80      	pop	{r7}
 8003b76:	46b8      	mov	r8, r7
 8003b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	080199e4 	.word	0x080199e4
 8003b80:	080199e8 	.word	0x080199e8
 8003b84:	080199f0 	.word	0x080199f0
 8003b88:	080199f8 	.word	0x080199f8
 8003b8c:	200005d7 	.word	0x200005d7

08003b90 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003b96:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <PollAwake+0x3c>)
 8003b98:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7ff fe6d 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7fc faaf 	bl	8000108 <strlen>
 8003baa:	0003      	movs	r3, r0
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0011      	movs	r1, r2
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7ff fd1e 	bl	80035f4 <ESP_Send>
 8003bb8:	1e03      	subs	r3, r0, #0
 8003bba:	d001      	beq.n	8003bc0 <PollAwake+0x30>
    return true;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <PollAwake+0x32>
  }
  else{
    return false;
 8003bc0:	2300      	movs	r3, #0
  }
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	08019a08 	.word	0x08019a08

08003bd0 <RFPower>:
bool RFPower(){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <RFPower+0x3c>)
 8003bd8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff fe4d 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fc fa8f 	bl	8000108 <strlen>
 8003bea:	0003      	movs	r3, r0
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7ff fcfe 	bl	80035f4 <ESP_Send>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d001      	beq.n	8003c00 <RFPower+0x30>
    return true;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <RFPower+0x32>
  }
  else{
    return false;
 8003c00:	2300      	movs	r3, #0
  }
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	08019a10 	.word	0x08019a10

08003c10 <CheckRFPower>:
bool CheckRFPower(){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <CheckRFPower+0x3c>)
 8003c18:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7ff fe2d 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7fc fa6f 	bl	8000108 <strlen>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	0011      	movs	r1, r2
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7ff fcde 	bl	80035f4 <ESP_Send>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d001      	beq.n	8003c40 <CheckRFPower+0x30>
    return true;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <CheckRFPower+0x32>
  }
  else{
    return false;
 8003c40:	2300      	movs	r3, #0
  }
}
 8003c42:	0018      	movs	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b002      	add	sp, #8
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	08019a20 	.word	0x08019a20

08003c50 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <ATRestore+0x3c>)
 8003c58:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff fe0d 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7fc fa4f 	bl	8000108 <strlen>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	0011      	movs	r1, r2
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7ff fcbe 	bl	80035f4 <ESP_Send>
 8003c78:	1e03      	subs	r3, r0, #0
 8003c7a:	d001      	beq.n	8003c80 <ATRestore+0x30>
    return true;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <ATRestore+0x32>
  }
  else{
    return false;
 8003c80:	2300      	movs	r3, #0
  }
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b002      	add	sp, #8
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	08019a30 	.word	0x08019a30

08003c90 <CWINIT>:
bool CWINIT(){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <CWINIT+0x3c>)
 8003c98:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff fded 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7fc fa2f 	bl	8000108 <strlen>
 8003caa:	0003      	movs	r3, r0
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0011      	movs	r1, r2
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7ff fc9e 	bl	80035f4 <ESP_Send>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d001      	beq.n	8003cc0 <CWINIT+0x30>
    return true;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <CWINIT+0x32>
  }
  else{
    return false;
 8003cc0:	2300      	movs	r3, #0
  }
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	08019a40 	.word	0x08019a40

08003cd0 <CWMODE1>:
bool CWMODE1(){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <CWMODE1+0x3c>)
 8003cd8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7ff fdcd 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7fc fa0f 	bl	8000108 <strlen>
 8003cea:	0003      	movs	r3, r0
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0011      	movs	r1, r2
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7ff fc7e 	bl	80035f4 <ESP_Send>
 8003cf8:	1e03      	subs	r3, r0, #0
 8003cfa:	d001      	beq.n	8003d00 <CWMODE1+0x30>
    return true;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <CWMODE1+0x32>
  }
  else{
    return false;
 8003d00:	2300      	movs	r3, #0
  }
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	08019a50 	.word	0x08019a50

08003d10 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <CWAUTOCONN+0x3c>)
 8003d18:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7ff fdad 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7fc f9ef 	bl	8000108 <strlen>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7ff fc5e 	bl	80035f4 <ESP_Send>
 8003d38:	1e03      	subs	r3, r0, #0
 8003d3a:	d001      	beq.n	8003d40 <CWAUTOCONN+0x30>
    return true;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003d40:	2300      	movs	r3, #0
  }
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	08019a60 	.word	0x08019a60

08003d50 <CWJAP>:
bool CWJAP(){
 8003d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d52:	46c6      	mov	lr, r8
 8003d54:	b500      	push	{lr}
 8003d56:	b0a2      	sub	sp, #136	@ 0x88
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	466b      	mov	r3, sp
 8003d5c:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003d5e:	2618      	movs	r6, #24
 8003d60:	19bb      	adds	r3, r7, r6
 8003d62:	2264      	movs	r2, #100	@ 0x64
 8003d64:	2100      	movs	r1, #0
 8003d66:	0018      	movs	r0, r3
 8003d68:	f012 fe40 	bl	80169ec <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003d6c:	4b35      	ldr	r3, [pc, #212]	@ (8003e44 <CWJAP+0xf4>)
 8003d6e:	4a36      	ldr	r2, [pc, #216]	@ (8003e48 <CWJAP+0xf8>)
 8003d70:	4936      	ldr	r1, [pc, #216]	@ (8003e4c <CWJAP+0xfc>)
 8003d72:	19b8      	adds	r0, r7, r6
 8003d74:	f012 fd96 	bl	80168a4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003d78:	19bb      	adds	r3, r7, r6
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7fc f9c4 	bl	8000108 <strlen>
 8003d80:	0002      	movs	r2, r0
 8003d82:	216f      	movs	r1, #111	@ 0x6f
 8003d84:	0030      	movs	r0, r6
 8003d86:	180b      	adds	r3, r1, r0
 8003d88:	19db      	adds	r3, r3, r7
 8003d8a:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003d8c:	180b      	adds	r3, r1, r0
 8003d8e:	19db      	adds	r3, r3, r7
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	2180      	movs	r1, #128	@ 0x80
 8003d98:	1879      	adds	r1, r7, r1
 8003d9a:	600a      	str	r2, [r1, #0]
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	60ba      	str	r2, [r7, #8]
 8003da0:	2200      	movs	r2, #0
 8003da2:	60fa      	str	r2, [r7, #12]
 8003da4:	68b8      	ldr	r0, [r7, #8]
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	0002      	movs	r2, r0
 8003daa:	0f52      	lsrs	r2, r2, #29
 8003dac:	000e      	movs	r6, r1
 8003dae:	00f6      	lsls	r6, r6, #3
 8003db0:	617e      	str	r6, [r7, #20]
 8003db2:	697e      	ldr	r6, [r7, #20]
 8003db4:	4316      	orrs	r6, r2
 8003db6:	617e      	str	r6, [r7, #20]
 8003db8:	0002      	movs	r2, r0
 8003dba:	00d2      	lsls	r2, r2, #3
 8003dbc:	613a      	str	r2, [r7, #16]
 8003dbe:	001a      	movs	r2, r3
 8003dc0:	603a      	str	r2, [r7, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	6838      	ldr	r0, [r7, #0]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	0002      	movs	r2, r0
 8003dcc:	0f52      	lsrs	r2, r2, #29
 8003dce:	000e      	movs	r6, r1
 8003dd0:	00f5      	lsls	r5, r6, #3
 8003dd2:	4315      	orrs	r5, r2
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	00d4      	lsls	r4, r2, #3
 8003dd8:	3307      	adds	r3, #7
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	466a      	mov	r2, sp
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	469d      	mov	sp, r3
 8003de4:	466b      	mov	r3, sp
 8003de6:	3300      	adds	r3, #0
 8003de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003dea:	246f      	movs	r4, #111	@ 0x6f
 8003dec:	2518      	movs	r5, #24
 8003dee:	1963      	adds	r3, r4, r5
 8003df0:	19db      	adds	r3, r3, r7
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	001a      	movs	r2, r3
 8003df8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f012 fdf5 	bl	80169ec <memset>
  strncpy(atCommand, atCommandBuff, len);
 8003e02:	1963      	adds	r3, r4, r5
 8003e04:	19db      	adds	r3, r3, r7
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	1979      	adds	r1, r7, r5
 8003e0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f012 fdf5 	bl	80169fc <strncpy>
  SetCommandBuffer(atCommand);
 8003e12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7ff fd31 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003e1a:	1963      	adds	r3, r4, r5
 8003e1c:	19db      	adds	r3, r3, r7
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e24:	0011      	movs	r1, r2
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7ff fbe4 	bl	80035f4 <ESP_Send>
 8003e2c:	1e03      	subs	r3, r0, #0
 8003e2e:	d001      	beq.n	8003e34 <CWJAP+0xe4>
    return true;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <CWJAP+0xe6>
  }
  else{
    return false;
 8003e34:	2300      	movs	r3, #0
 8003e36:	46c5      	mov	sp, r8
  }
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b022      	add	sp, #136	@ 0x88
 8003e3e:	bc80      	pop	{r7}
 8003e40:	46b8      	mov	r8, r7
 8003e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e44:	20000010 	.word	0x20000010
 8003e48:	20000004 	.word	0x20000004
 8003e4c:	08019a74 	.word	0x08019a74

08003e50 <CWMODE3>:
bool CWMODE3(){
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <CWMODE3+0x3c>)
 8003e58:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7ff fd0d 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7fc f94f 	bl	8000108 <strlen>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0011      	movs	r1, r2
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7ff fbbe 	bl	80035f4 <ESP_Send>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d001      	beq.n	8003e80 <CWMODE3+0x30>
    return true;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <CWMODE3+0x32>
  }
  else{
    return false;
 8003e80:	2300      	movs	r3, #0
  }
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b002      	add	sp, #8
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	08019a8c 	.word	0x08019a8c

08003e90 <CWSAP>:
bool CWSAP(){
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <CWSAP+0x3c>)
 8003e98:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7ff fced 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7fc f92f 	bl	8000108 <strlen>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0011      	movs	r1, r2
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7ff fb9e 	bl	80035f4 <ESP_Send>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d001      	beq.n	8003ec0 <CWSAP+0x30>
    return true;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <CWSAP+0x32>
  }
  else{
    return false;
 8003ec0:	2300      	movs	r3, #0
  }
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	08019a9c 	.word	0x08019a9c

08003ed0 <CIPMUX>:
bool CIPMUX(){
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <CIPMUX+0x3c>)
 8003ed8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff fccd 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7fc f90f 	bl	8000108 <strlen>
 8003eea:	0003      	movs	r3, r0
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0011      	movs	r1, r2
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7ff fb7e 	bl	80035f4 <ESP_Send>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d001      	beq.n	8003f00 <CIPMUX+0x30>
    return true;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <CIPMUX+0x32>
  }
  else{
    return false;
 8003f00:	2300      	movs	r3, #0
  }
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b002      	add	sp, #8
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	08019ac0 	.word	0x08019ac0

08003f10 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8003f16:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <WEBSERVER+0x3c>)
 8003f18:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff fcad 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7fc f8ef 	bl	8000108 <strlen>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0011      	movs	r1, r2
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7ff fb5e 	bl	80035f4 <ESP_Send>
 8003f38:	1e03      	subs	r3, r0, #0
 8003f3a:	d001      	beq.n	8003f40 <WEBSERVER+0x30>
    return true;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <WEBSERVER+0x32>
  }
  else{
    return false;
 8003f40:	2300      	movs	r3, #0
  }
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	08019ad0 	.word	0x08019ad0

08003f50 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f52:	46c6      	mov	lr, r8
 8003f54:	b500      	push	{lr}
 8003f56:	4c47      	ldr	r4, [pc, #284]	@ (8004074 <HTTPCPOST+0x124>)
 8003f58:	44a5      	add	sp, r4
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	466b      	mov	r3, sp
 8003f5e:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8003f60:	4b45      	ldr	r3, [pc, #276]	@ (8004078 <HTTPCPOST+0x128>)
 8003f62:	2218      	movs	r2, #24
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	19dc      	adds	r4, r3, r7
 8003f68:	f7ff fbd4 	bl	8003714 <CreateMessage>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8003f70:	4b41      	ldr	r3, [pc, #260]	@ (8004078 <HTTPCPOST+0x128>)
 8003f72:	2218      	movs	r2, #24
 8003f74:	189b      	adds	r3, r3, r2
 8003f76:	19db      	adds	r3, r3, r7
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	4a40      	ldr	r2, [pc, #256]	@ (800407c <HTTPCPOST+0x12c>)
 8003f7c:	4940      	ldr	r1, [pc, #256]	@ (8004080 <HTTPCPOST+0x130>)
 8003f7e:	201c      	movs	r0, #28
 8003f80:	1838      	adds	r0, r7, r0
 8003f82:	f012 fc8f 	bl	80168a4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003f86:	231c      	movs	r3, #28
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7fc f8bc 	bl	8000108 <strlen>
 8003f90:	0002      	movs	r2, r0
 8003f92:	4c3c      	ldr	r4, [pc, #240]	@ (8004084 <HTTPCPOST+0x134>)
 8003f94:	2318      	movs	r3, #24
 8003f96:	18e3      	adds	r3, r4, r3
 8003f98:	19db      	adds	r3, r3, r7
 8003f9a:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003f9c:	2318      	movs	r3, #24
 8003f9e:	18e3      	adds	r3, r4, r3
 8003fa0:	19db      	adds	r3, r3, r7
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	1e5a      	subs	r2, r3, #1
 8003fa8:	2198      	movs	r1, #152	@ 0x98
 8003faa:	0089      	lsls	r1, r1, #2
 8003fac:	2018      	movs	r0, #24
 8003fae:	1809      	adds	r1, r1, r0
 8003fb0:	19c9      	adds	r1, r1, r7
 8003fb2:	600a      	str	r2, [r1, #0]
 8003fb4:	001a      	movs	r2, r3
 8003fb6:	0015      	movs	r5, r2
 8003fb8:	2200      	movs	r2, #0
 8003fba:	0016      	movs	r6, r2
 8003fbc:	0028      	movs	r0, r5
 8003fbe:	0031      	movs	r1, r6
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	0f52      	lsrs	r2, r2, #29
 8003fc4:	000d      	movs	r5, r1
 8003fc6:	00ed      	lsls	r5, r5, #3
 8003fc8:	617d      	str	r5, [r7, #20]
 8003fca:	697d      	ldr	r5, [r7, #20]
 8003fcc:	4315      	orrs	r5, r2
 8003fce:	617d      	str	r5, [r7, #20]
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	00d2      	lsls	r2, r2, #3
 8003fd4:	613a      	str	r2, [r7, #16]
 8003fd6:	001a      	movs	r2, r3
 8003fd8:	603a      	str	r2, [r7, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	6838      	ldr	r0, [r7, #0]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	0f52      	lsrs	r2, r2, #29
 8003fe6:	000d      	movs	r5, r1
 8003fe8:	00ed      	lsls	r5, r5, #3
 8003fea:	60fd      	str	r5, [r7, #12]
 8003fec:	68fd      	ldr	r5, [r7, #12]
 8003fee:	4315      	orrs	r5, r2
 8003ff0:	60fd      	str	r5, [r7, #12]
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	00d2      	lsls	r2, r2, #3
 8003ff6:	60ba      	str	r2, [r7, #8]
 8003ff8:	3307      	adds	r3, #7
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	466a      	mov	r2, sp
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	469d      	mov	sp, r3
 8004004:	466b      	mov	r3, sp
 8004006:	3300      	adds	r3, #0
 8004008:	2597      	movs	r5, #151	@ 0x97
 800400a:	00ad      	lsls	r5, r5, #2
 800400c:	2218      	movs	r2, #24
 800400e:	18aa      	adds	r2, r5, r2
 8004010:	19d2      	adds	r2, r2, r7
 8004012:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 8004014:	2318      	movs	r3, #24
 8004016:	18e3      	adds	r3, r4, r3
 8004018:	19db      	adds	r3, r3, r7
 800401a:	781a      	ldrb	r2, [r3, #0]
 800401c:	231c      	movs	r3, #28
 800401e:	18f9      	adds	r1, r7, r3
 8004020:	2318      	movs	r3, #24
 8004022:	18eb      	adds	r3, r5, r3
 8004024:	19db      	adds	r3, r3, r7
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	0018      	movs	r0, r3
 800402a:	f012 fce7 	bl	80169fc <strncpy>
  SetCommandBuffer(atCommand);
 800402e:	2318      	movs	r3, #24
 8004030:	18eb      	adds	r3, r5, r3
 8004032:	19db      	adds	r3, r3, r7
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	0018      	movs	r0, r3
 8004038:	f7ff fc20 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 800403c:	2318      	movs	r3, #24
 800403e:	18e3      	adds	r3, r4, r3
 8004040:	19db      	adds	r3, r3, r7
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b29a      	uxth	r2, r3
 8004046:	2318      	movs	r3, #24
 8004048:	18eb      	adds	r3, r5, r3
 800404a:	19db      	adds	r3, r3, r7
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f7ff facf 	bl	80035f4 <ESP_Send>
 8004056:	1e03      	subs	r3, r0, #0
 8004058:	d001      	beq.n	800405e <HTTPCPOST+0x10e>
    return true;
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <HTTPCPOST+0x110>
  }
  else{
    return false;
 800405e:	2300      	movs	r3, #0
 8004060:	46c5      	mov	sp, r8
  }
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	23a0      	movs	r3, #160	@ 0xa0
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	449d      	add	sp, r3
 800406c:	bc80      	pop	{r7}
 800406e:	46b8      	mov	r8, r7
 8004070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	fffffd80 	.word	0xfffffd80
 8004078:	00000266 	.word	0x00000266
 800407c:	20000028 	.word	0x20000028
 8004080:	08019ae8 	.word	0x08019ae8
 8004084:	00000265 	.word	0x00000265

08004088 <SENDDATA>:
bool SENDDATA(){
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	46c6      	mov	lr, r8
 800408c:	b500      	push	{lr}
 800408e:	4c4c      	ldr	r4, [pc, #304]	@ (80041c0 <SENDDATA+0x138>)
 8004090:	44a5      	add	sp, r4
 8004092:	af04      	add	r7, sp, #16
 8004094:	466b      	mov	r3, sp
 8004096:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 8004098:	23a4      	movs	r3, #164	@ 0xa4
 800409a:	009a      	lsls	r2, r3, #2
 800409c:	261c      	movs	r6, #28
 800409e:	19bb      	adds	r3, r7, r6
 80040a0:	2100      	movs	r1, #0
 80040a2:	0018      	movs	r0, r3
 80040a4:	f012 fca2 	bl	80169ec <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 80040a8:	4a46      	ldr	r2, [pc, #280]	@ (80041c4 <SENDDATA+0x13c>)
 80040aa:	4947      	ldr	r1, [pc, #284]	@ (80041c8 <SENDDATA+0x140>)
 80040ac:	4847      	ldr	r0, [pc, #284]	@ (80041cc <SENDDATA+0x144>)
 80040ae:	19be      	adds	r6, r7, r6
 80040b0:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <SENDDATA+0x148>)
 80040b2:	9302      	str	r3, [sp, #8]
 80040b4:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <SENDDATA+0x14c>)
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	4b47      	ldr	r3, [pc, #284]	@ (80041d8 <SENDDATA+0x150>)
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	0013      	movs	r3, r2
 80040be:	000a      	movs	r2, r1
 80040c0:	0001      	movs	r1, r0
 80040c2:	0030      	movs	r0, r6
 80040c4:	f012 fbee 	bl	80168a4 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 80040c8:	231c      	movs	r3, #28
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7fc f81b 	bl	8000108 <strlen>
 80040d2:	0002      	movs	r2, r0
 80040d4:	4e41      	ldr	r6, [pc, #260]	@ (80041dc <SENDDATA+0x154>)
 80040d6:	2018      	movs	r0, #24
 80040d8:	1831      	adds	r1, r6, r0
 80040da:	19cb      	adds	r3, r1, r7
 80040dc:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 80040de:	1832      	adds	r2, r6, r0
 80040e0:	19d3      	adds	r3, r2, r7
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	1e5a      	subs	r2, r3, #1
 80040e8:	21a6      	movs	r1, #166	@ 0xa6
 80040ea:	0089      	lsls	r1, r1, #2
 80040ec:	1809      	adds	r1, r1, r0
 80040ee:	19c9      	adds	r1, r1, r7
 80040f0:	600a      	str	r2, [r1, #0]
 80040f2:	001a      	movs	r2, r3
 80040f4:	60ba      	str	r2, [r7, #8]
 80040f6:	2200      	movs	r2, #0
 80040f8:	60fa      	str	r2, [r7, #12]
 80040fa:	68b8      	ldr	r0, [r7, #8]
 80040fc:	68f9      	ldr	r1, [r7, #12]
 80040fe:	0002      	movs	r2, r0
 8004100:	0f52      	lsrs	r2, r2, #29
 8004102:	000e      	movs	r6, r1
 8004104:	00f6      	lsls	r6, r6, #3
 8004106:	617e      	str	r6, [r7, #20]
 8004108:	697e      	ldr	r6, [r7, #20]
 800410a:	4316      	orrs	r6, r2
 800410c:	617e      	str	r6, [r7, #20]
 800410e:	0002      	movs	r2, r0
 8004110:	00d2      	lsls	r2, r2, #3
 8004112:	613a      	str	r2, [r7, #16]
 8004114:	001a      	movs	r2, r3
 8004116:	603a      	str	r2, [r7, #0]
 8004118:	2200      	movs	r2, #0
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	0002      	movs	r2, r0
 8004122:	0f52      	lsrs	r2, r2, #29
 8004124:	000e      	movs	r6, r1
 8004126:	00f5      	lsls	r5, r6, #3
 8004128:	4315      	orrs	r5, r2
 800412a:	0002      	movs	r2, r0
 800412c:	00d4      	lsls	r4, r2, #3
 800412e:	3307      	adds	r3, #7
 8004130:	08db      	lsrs	r3, r3, #3
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	466a      	mov	r2, sp
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	469d      	mov	sp, r3
 800413a:	ab04      	add	r3, sp, #16
 800413c:	3300      	adds	r3, #0
 800413e:	21a5      	movs	r1, #165	@ 0xa5
 8004140:	0089      	lsls	r1, r1, #2
 8004142:	2018      	movs	r0, #24
 8004144:	180a      	adds	r2, r1, r0
 8004146:	19d2      	adds	r2, r2, r7
 8004148:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 800414a:	4e24      	ldr	r6, [pc, #144]	@ (80041dc <SENDDATA+0x154>)
 800414c:	1832      	adds	r2, r6, r0
 800414e:	19d3      	adds	r3, r2, r7
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	001a      	movs	r2, r3
 8004156:	000c      	movs	r4, r1
 8004158:	0005      	movs	r5, r0
 800415a:	1821      	adds	r1, r4, r0
 800415c:	19cb      	adds	r3, r1, r7
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2100      	movs	r1, #0
 8004162:	0018      	movs	r0, r3
 8004164:	f012 fc42 	bl	80169ec <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004168:	0028      	movs	r0, r5
 800416a:	1832      	adds	r2, r6, r0
 800416c:	19d3      	adds	r3, r2, r7
 800416e:	881a      	ldrh	r2, [r3, #0]
 8004170:	231c      	movs	r3, #28
 8004172:	18f9      	adds	r1, r7, r3
 8004174:	0005      	movs	r5, r0
 8004176:	1963      	adds	r3, r4, r5
 8004178:	19db      	adds	r3, r3, r7
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0018      	movs	r0, r3
 800417e:	f012 fc3d 	bl	80169fc <strncpy>
  SetCommandBuffer(atCommand);
 8004182:	1963      	adds	r3, r4, r5
 8004184:	19db      	adds	r3, r3, r7
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff fb77 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800418e:	0028      	movs	r0, r5
 8004190:	1833      	adds	r3, r6, r0
 8004192:	19db      	adds	r3, r3, r7
 8004194:	881a      	ldrh	r2, [r3, #0]
 8004196:	1823      	adds	r3, r4, r0
 8004198:	19db      	adds	r3, r3, r7
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	0011      	movs	r1, r2
 800419e:	0018      	movs	r0, r3
 80041a0:	f7ff fa28 	bl	80035f4 <ESP_Send>
 80041a4:	1e03      	subs	r3, r0, #0
 80041a6:	d001      	beq.n	80041ac <SENDDATA+0x124>
    return true;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <SENDDATA+0x126>
  }
  else{
    return false;
 80041ac:	2300      	movs	r3, #0
 80041ae:	46c5      	mov	sp, r8
  }
}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	23ae      	movs	r3, #174	@ 0xae
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	449d      	add	sp, r3
 80041ba:	bc80      	pop	{r7}
 80041bc:	46b8      	mov	r8, r7
 80041be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c0:	fffffd38 	.word	0xfffffd38
 80041c4:	20000678 	.word	0x20000678
 80041c8:	200005f8 	.word	0x200005f8
 80041cc:	08019b20 	.word	0x08019b20
 80041d0:	200007f8 	.word	0x200007f8
 80041d4:	20000778 	.word	0x20000778
 80041d8:	200006f8 	.word	0x200006f8
 80041dc:	0000029e 	.word	0x0000029e

080041e0 <SLEEP>:
bool SLEEP(){
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80041e6:	4b0d      	ldr	r3, [pc, #52]	@ (800421c <SLEEP+0x3c>)
 80041e8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7ff fb45 	bl	800387c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7fb ff87 	bl	8000108 <strlen>
 80041fa:	0003      	movs	r3, r0
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f7ff f9f6 	bl	80035f4 <ESP_Send>
 8004208:	1e03      	subs	r3, r0, #0
 800420a:	d001      	beq.n	8004210 <SLEEP+0x30>
    return true;
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <SLEEP+0x32>
  }
  else{
    return false;
 8004210:	2300      	movs	r3, #0
  }
}
 8004212:	0018      	movs	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	b002      	add	sp, #8
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	08019b40 	.word	0x08019b40

08004220 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 8004220:	b5b0      	push	{r4, r5, r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	0002      	movs	r2, r0
 8004228:	1dfb      	adds	r3, r7, #7
 800422a:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 800422c:	4b4c      	ldr	r3, [pc, #304]	@ (8004360 <DMA_ProcessBuffer+0x140>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	210e      	movs	r1, #14
 8004236:	187b      	adds	r3, r7, r1
 8004238:	43d2      	mvns	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 800423c:	200f      	movs	r0, #15
 800423e:	183b      	adds	r3, r7, r0
 8004240:	2203      	movs	r2, #3
 8004242:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 8004244:	4b47      	ldr	r3, [pc, #284]	@ (8004364 <DMA_ProcessBuffer+0x144>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	187a      	adds	r2, r7, r1
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d129      	bne.n	80042a6 <DMA_ProcessBuffer+0x86>
      if(retry >4){
 8004252:	4b45      	ldr	r3, [pc, #276]	@ (8004368 <DMA_ProcessBuffer+0x148>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d913      	bls.n	8004282 <DMA_ProcessBuffer+0x62>
        retry = 0;
 800425a:	4b43      	ldr	r3, [pc, #268]	@ (8004368 <DMA_ProcessBuffer+0x148>)
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004260:	4b42      	ldr	r3, [pc, #264]	@ (800436c <DMA_ProcessBuffer+0x14c>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <DMA_ProcessBuffer+0x58>
 8004268:	4b41      	ldr	r3, [pc, #260]	@ (8004370 <DMA_ProcessBuffer+0x150>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <DMA_ProcessBuffer+0x58>
          status = RECEIVE_STATUS_UNPROGGED;
 8004270:	183b      	adds	r3, r7, r0
 8004272:	2207      	movs	r2, #7
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e016      	b.n	80042a6 <DMA_ProcessBuffer+0x86>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004278:	230f      	movs	r3, #15
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	2206      	movs	r2, #6
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e011      	b.n	80042a6 <DMA_ProcessBuffer+0x86>
        }
      }
     else{
       retry ++;
 8004282:	4b39      	ldr	r3, [pc, #228]	@ (8004368 <DMA_ProcessBuffer+0x148>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	3301      	adds	r3, #1
 8004288:	b2da      	uxtb	r2, r3
 800428a:	4b37      	ldr	r3, [pc, #220]	@ (8004368 <DMA_ProcessBuffer+0x148>)
 800428c:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800428e:	f005 f809 	bl	80092a4 <HAL_GetTick>
 8004292:	0003      	movs	r3, r0
 8004294:	33f5      	adds	r3, #245	@ 0xf5
 8004296:	33ff      	adds	r3, #255	@ 0xff
 8004298:	001a      	movs	r2, r3
 800429a:	4b36      	ldr	r3, [pc, #216]	@ (8004374 <DMA_ProcessBuffer+0x154>)
 800429c:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 800429e:	230f      	movs	r3, #15
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	2204      	movs	r2, #4
 80042a4:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80042a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004364 <DMA_ProcessBuffer+0x144>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	210e      	movs	r1, #14
 80042ae:	187a      	adds	r2, r7, r1
 80042b0:	7812      	ldrb	r2, [r2, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d048      	beq.n	8004348 <DMA_ProcessBuffer+0x128>
      retry = 0;
 80042b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004368 <DMA_ProcessBuffer+0x148>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 80042bc:	4b29      	ldr	r3, [pc, #164]	@ (8004364 <DMA_ProcessBuffer+0x144>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	187a      	adds	r2, r7, r1
 80042c4:	7812      	ldrb	r2, [r2, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d917      	bls.n	80042fa <DMA_ProcessBuffer+0xda>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 80042ca:	4b26      	ldr	r3, [pc, #152]	@ (8004364 <DMA_ProcessBuffer+0x144>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	001a      	movs	r2, r3
 80042d2:	4b29      	ldr	r3, [pc, #164]	@ (8004378 <DMA_ProcessBuffer+0x158>)
 80042d4:	18d0      	adds	r0, r2, r3
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4a21      	ldr	r2, [pc, #132]	@ (8004364 <DMA_ProcessBuffer+0x144>)
 80042de:	7812      	ldrb	r2, [r2, #0]
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	b299      	uxth	r1, r3
 80042e6:	230f      	movs	r3, #15
 80042e8:	18fc      	adds	r4, r7, r3
 80042ea:	1dfb      	adds	r3, r7, #7
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	001a      	movs	r2, r3
 80042f0:	f7ff fb0c 	bl	800390c <ParseBuffer>
 80042f4:	0003      	movs	r3, r0
 80042f6:	7023      	strb	r3, [r4, #0]
 80042f8:	e026      	b.n	8004348 <DMA_ProcessBuffer+0x128>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80042fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <DMA_ProcessBuffer+0x144>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	001a      	movs	r2, r3
 8004302:	4b1d      	ldr	r3, [pc, #116]	@ (8004378 <DMA_ProcessBuffer+0x158>)
 8004304:	18d0      	adds	r0, r2, r3
 8004306:	4b17      	ldr	r3, [pc, #92]	@ (8004364 <DMA_ProcessBuffer+0x144>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	001a      	movs	r2, r3
 800430e:	23ff      	movs	r3, #255	@ 0xff
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	b299      	uxth	r1, r3
 8004314:	250f      	movs	r5, #15
 8004316:	197c      	adds	r4, r7, r5
 8004318:	1dfb      	adds	r3, r7, #7
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	001a      	movs	r2, r3
 800431e:	f7ff faf5 	bl	800390c <ParseBuffer>
 8004322:	0003      	movs	r3, r0
 8004324:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 8004326:	220e      	movs	r2, #14
 8004328:	18bb      	adds	r3, r7, r2
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <DMA_ProcessBuffer+0x128>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004330:	18bb      	adds	r3, r7, r2
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	b299      	uxth	r1, r3
 8004336:	197c      	adds	r4, r7, r5
 8004338:	1dfb      	adds	r3, r7, #7
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	4b0e      	ldr	r3, [pc, #56]	@ (8004378 <DMA_ProcessBuffer+0x158>)
 800433e:	0018      	movs	r0, r3
 8004340:	f7ff fae4 	bl	800390c <ParseBuffer>
 8004344:	0003      	movs	r3, r0
 8004346:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <DMA_ProcessBuffer+0x144>)
 800434a:	220e      	movs	r2, #14
 800434c:	18ba      	adds	r2, r7, r2
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	701a      	strb	r2, [r3, #0]
    return status;
 8004352:	230f      	movs	r3, #15
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	781b      	ldrb	r3, [r3, #0]
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	b004      	add	sp, #16
 800435e:	bdb0      	pop	{r4, r5, r7, pc}
 8004360:	20002824 	.word	0x20002824
 8004364:	20000883 	.word	0x20000883
 8004368:	20000888 	.word	0x20000888
 800436c:	20000a8e 	.word	0x20000a8e
 8004370:	20000000 	.word	0x20000000
 8004374:	20000884 	.word	0x20000884
 8004378:	200004d4 	.word	0x200004d4

0800437c <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	0002      	movs	r2, r0
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	1dbb      	adds	r3, r7, #6
 800438a:	1c0a      	adds	r2, r1, #0
 800438c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800438e:	210f      	movs	r1, #15
 8004390:	187b      	adds	r3, r7, r1
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d105      	bne.n	80043aa <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	1dfa      	adds	r2, r7, #7
 80043a2:	7812      	ldrb	r2, [r2, #0]
 80043a4:	4251      	negs	r1, r2
 80043a6:	414a      	adcs	r2, r1
 80043a8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 80043aa:	1dbb      	adds	r3, r7, #6
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d107      	bne.n	80043c2 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 80043b2:	230f      	movs	r3, #15
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	1dfa      	adds	r2, r7, #7
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	3a02      	subs	r2, #2
 80043bc:	4251      	negs	r1, r2
 80043be:	414a      	adcs	r2, r1
 80043c0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80043c2:	1dbb      	adds	r3, r7, #6
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d107      	bne.n	80043da <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80043ca:	230f      	movs	r3, #15
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	1dfa      	adds	r2, r7, #7
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	3a05      	subs	r2, #5
 80043d4:	4251      	negs	r1, r2
 80043d6:	414a      	adcs	r2, r1
 80043d8:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80043da:	230f      	movs	r3, #15
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	781b      	ldrb	r3, [r3, #0]
}
 80043e0:	0018      	movs	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b004      	add	sp, #16
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <AT_Send>:

bool AT_Send(AT_Commands state){
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	0002      	movs	r2, r0
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80043f4:	230f      	movs	r3, #15
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
  switch (state){
 80043fc:	1dfb      	adds	r3, r7, #7
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b0e      	cmp	r3, #14
 8004402:	d900      	bls.n	8004406 <AT_Send+0x1e>
 8004404:	e136      	b.n	8004674 <AT_Send+0x28c>
 8004406:	009a      	lsls	r2, r3, #2
 8004408:	4b9e      	ldr	r3, [pc, #632]	@ (8004684 <AT_Send+0x29c>)
 800440a:	18d3      	adds	r3, r2, r3
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004410:	4b9d      	ldr	r3, [pc, #628]	@ (8004688 <AT_Send+0x2a0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0018      	movs	r0, r3
 8004416:	f004 faed 	bl	80089f4 <TimestampIsReached>
 800441a:	1e03      	subs	r3, r0, #0
 800441c:	d100      	bne.n	8004420 <AT_Send+0x38>
 800441e:	e128      	b.n	8004672 <AT_Send+0x28a>
    ATCommandSend = PollAwake();
 8004420:	230f      	movs	r3, #15
 8004422:	18fc      	adds	r4, r7, r3
 8004424:	f7ff fbb4 	bl	8003b90 <PollAwake>
 8004428:	0003      	movs	r3, r0
 800442a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800442c:	f004 ff3a 	bl	80092a4 <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	3332      	adds	r3, #50	@ 0x32
 8004434:	001a      	movs	r2, r3
 8004436:	4b94      	ldr	r3, [pc, #592]	@ (8004688 <AT_Send+0x2a0>)
 8004438:	601a      	str	r2, [r3, #0]
  }
  break;
 800443a:	e11a      	b.n	8004672 <AT_Send+0x28a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 800443c:	4a93      	ldr	r2, [pc, #588]	@ (800468c <AT_Send+0x2a4>)
 800443e:	4b94      	ldr	r3, [pc, #592]	@ (8004690 <AT_Send+0x2a8>)
 8004440:	0019      	movs	r1, r3
 8004442:	2003      	movs	r0, #3
 8004444:	f004 fb2c 	bl	8008aa0 <CreateLine>
    ATCommandSend = RFPower();
 8004448:	230f      	movs	r3, #15
 800444a:	18fc      	adds	r4, r7, r3
 800444c:	f7ff fbc0 	bl	8003bd0 <RFPower>
 8004450:	0003      	movs	r3, r0
 8004452:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004454:	f004 ff26 	bl	80092a4 <HAL_GetTick>
 8004458:	0003      	movs	r3, r0
 800445a:	330a      	adds	r3, #10
 800445c:	001a      	movs	r2, r3
 800445e:	4b8a      	ldr	r3, [pc, #552]	@ (8004688 <AT_Send+0x2a0>)
 8004460:	601a      	str	r2, [r3, #0]
    break;
 8004462:	e107      	b.n	8004674 <AT_Send+0x28c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004464:	4a8b      	ldr	r2, [pc, #556]	@ (8004694 <AT_Send+0x2ac>)
 8004466:	4b8a      	ldr	r3, [pc, #552]	@ (8004690 <AT_Send+0x2a8>)
 8004468:	0019      	movs	r1, r3
 800446a:	2003      	movs	r0, #3
 800446c:	f004 fb18 	bl	8008aa0 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004470:	230f      	movs	r3, #15
 8004472:	18fc      	adds	r4, r7, r3
 8004474:	f7ff fbcc 	bl	8003c10 <CheckRFPower>
 8004478:	0003      	movs	r3, r0
 800447a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800447c:	f004 ff12 	bl	80092a4 <HAL_GetTick>
 8004480:	0003      	movs	r3, r0
 8004482:	330a      	adds	r3, #10
 8004484:	001a      	movs	r2, r3
 8004486:	4b80      	ldr	r3, [pc, #512]	@ (8004688 <AT_Send+0x2a0>)
 8004488:	601a      	str	r2, [r3, #0]
    break;
 800448a:	e0f3      	b.n	8004674 <AT_Send+0x28c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 800448c:	4a82      	ldr	r2, [pc, #520]	@ (8004698 <AT_Send+0x2b0>)
 800448e:	4b80      	ldr	r3, [pc, #512]	@ (8004690 <AT_Send+0x2a8>)
 8004490:	0019      	movs	r1, r3
 8004492:	2003      	movs	r0, #3
 8004494:	f004 fb04 	bl	8008aa0 <CreateLine>
    ATCommandSend = ATRestore();
 8004498:	230f      	movs	r3, #15
 800449a:	18fc      	adds	r4, r7, r3
 800449c:	f7ff fbd8 	bl	8003c50 <ATRestore>
 80044a0:	0003      	movs	r3, r0
 80044a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80044a4:	f004 fefe 	bl	80092a4 <HAL_GetTick>
 80044a8:	0003      	movs	r3, r0
 80044aa:	3332      	adds	r3, #50	@ 0x32
 80044ac:	001a      	movs	r2, r3
 80044ae:	4b76      	ldr	r3, [pc, #472]	@ (8004688 <AT_Send+0x2a0>)
 80044b0:	601a      	str	r2, [r3, #0]
    break;
 80044b2:	e0df      	b.n	8004674 <AT_Send+0x28c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80044b4:	4a79      	ldr	r2, [pc, #484]	@ (800469c <AT_Send+0x2b4>)
 80044b6:	4b76      	ldr	r3, [pc, #472]	@ (8004690 <AT_Send+0x2a8>)
 80044b8:	0019      	movs	r1, r3
 80044ba:	2003      	movs	r0, #3
 80044bc:	f004 faf0 	bl	8008aa0 <CreateLine>
    ATCommandSend = CWINIT();
 80044c0:	230f      	movs	r3, #15
 80044c2:	18fc      	adds	r4, r7, r3
 80044c4:	f7ff fbe4 	bl	8003c90 <CWINIT>
 80044c8:	0003      	movs	r3, r0
 80044ca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80044cc:	f004 feea 	bl	80092a4 <HAL_GetTick>
 80044d0:	0003      	movs	r3, r0
 80044d2:	33f5      	adds	r3, #245	@ 0xf5
 80044d4:	33ff      	adds	r3, #255	@ 0xff
 80044d6:	001a      	movs	r2, r3
 80044d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004688 <AT_Send+0x2a0>)
 80044da:	601a      	str	r2, [r3, #0]
    break;
 80044dc:	e0ca      	b.n	8004674 <AT_Send+0x28c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80044de:	4a70      	ldr	r2, [pc, #448]	@ (80046a0 <AT_Send+0x2b8>)
 80044e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004690 <AT_Send+0x2a8>)
 80044e2:	0019      	movs	r1, r3
 80044e4:	2003      	movs	r0, #3
 80044e6:	f004 fadb 	bl	8008aa0 <CreateLine>
    ATCommandSend = CWMODE1();
 80044ea:	230f      	movs	r3, #15
 80044ec:	18fc      	adds	r4, r7, r3
 80044ee:	f7ff fbef 	bl	8003cd0 <CWMODE1>
 80044f2:	0003      	movs	r3, r0
 80044f4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80044f6:	f004 fed5 	bl	80092a4 <HAL_GetTick>
 80044fa:	0003      	movs	r3, r0
 80044fc:	330a      	adds	r3, #10
 80044fe:	001a      	movs	r2, r3
 8004500:	4b61      	ldr	r3, [pc, #388]	@ (8004688 <AT_Send+0x2a0>)
 8004502:	601a      	str	r2, [r3, #0]
    break;
 8004504:	e0b6      	b.n	8004674 <AT_Send+0x28c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004506:	4a67      	ldr	r2, [pc, #412]	@ (80046a4 <AT_Send+0x2bc>)
 8004508:	4b61      	ldr	r3, [pc, #388]	@ (8004690 <AT_Send+0x2a8>)
 800450a:	0019      	movs	r1, r3
 800450c:	2003      	movs	r0, #3
 800450e:	f004 fac7 	bl	8008aa0 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004512:	230f      	movs	r3, #15
 8004514:	18fc      	adds	r4, r7, r3
 8004516:	f7ff fbfb 	bl	8003d10 <CWAUTOCONN>
 800451a:	0003      	movs	r3, r0
 800451c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800451e:	f004 fec1 	bl	80092a4 <HAL_GetTick>
 8004522:	0003      	movs	r3, r0
 8004524:	330a      	adds	r3, #10
 8004526:	001a      	movs	r2, r3
 8004528:	4b57      	ldr	r3, [pc, #348]	@ (8004688 <AT_Send+0x2a0>)
 800452a:	601a      	str	r2, [r3, #0]
    break;
 800452c:	e0a2      	b.n	8004674 <AT_Send+0x28c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800452e:	4a5e      	ldr	r2, [pc, #376]	@ (80046a8 <AT_Send+0x2c0>)
 8004530:	4b57      	ldr	r3, [pc, #348]	@ (8004690 <AT_Send+0x2a8>)
 8004532:	0019      	movs	r1, r3
 8004534:	2003      	movs	r0, #3
 8004536:	f004 fab3 	bl	8008aa0 <CreateLine>
    ATCommandSend = CWJAP();
 800453a:	230f      	movs	r3, #15
 800453c:	18fc      	adds	r4, r7, r3
 800453e:	f7ff fc07 	bl	8003d50 <CWJAP>
 8004542:	0003      	movs	r3, r0
 8004544:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004546:	f004 fead 	bl	80092a4 <HAL_GetTick>
 800454a:	0003      	movs	r3, r0
 800454c:	3332      	adds	r3, #50	@ 0x32
 800454e:	001a      	movs	r2, r3
 8004550:	4b4d      	ldr	r3, [pc, #308]	@ (8004688 <AT_Send+0x2a0>)
 8004552:	601a      	str	r2, [r3, #0]
    break;
 8004554:	e08e      	b.n	8004674 <AT_Send+0x28c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004556:	4a55      	ldr	r2, [pc, #340]	@ (80046ac <AT_Send+0x2c4>)
 8004558:	4b4d      	ldr	r3, [pc, #308]	@ (8004690 <AT_Send+0x2a8>)
 800455a:	0019      	movs	r1, r3
 800455c:	2003      	movs	r0, #3
 800455e:	f004 fa9f 	bl	8008aa0 <CreateLine>
    ATCommandSend = CWMODE3();
 8004562:	230f      	movs	r3, #15
 8004564:	18fc      	adds	r4, r7, r3
 8004566:	f7ff fc73 	bl	8003e50 <CWMODE3>
 800456a:	0003      	movs	r3, r0
 800456c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800456e:	f004 fe99 	bl	80092a4 <HAL_GetTick>
 8004572:	0003      	movs	r3, r0
 8004574:	330a      	adds	r3, #10
 8004576:	001a      	movs	r2, r3
 8004578:	4b43      	ldr	r3, [pc, #268]	@ (8004688 <AT_Send+0x2a0>)
 800457a:	601a      	str	r2, [r3, #0]
    break;
 800457c:	e07a      	b.n	8004674 <AT_Send+0x28c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800457e:	4a4c      	ldr	r2, [pc, #304]	@ (80046b0 <AT_Send+0x2c8>)
 8004580:	4b43      	ldr	r3, [pc, #268]	@ (8004690 <AT_Send+0x2a8>)
 8004582:	0019      	movs	r1, r3
 8004584:	2003      	movs	r0, #3
 8004586:	f004 fa8b 	bl	8008aa0 <CreateLine>
    ATCommandSend = CWSAP();
 800458a:	230f      	movs	r3, #15
 800458c:	18fc      	adds	r4, r7, r3
 800458e:	f7ff fc7f 	bl	8003e90 <CWSAP>
 8004592:	0003      	movs	r3, r0
 8004594:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004596:	f004 fe85 	bl	80092a4 <HAL_GetTick>
 800459a:	0003      	movs	r3, r0
 800459c:	330a      	adds	r3, #10
 800459e:	001a      	movs	r2, r3
 80045a0:	4b39      	ldr	r3, [pc, #228]	@ (8004688 <AT_Send+0x2a0>)
 80045a2:	601a      	str	r2, [r3, #0]
    break;
 80045a4:	e066      	b.n	8004674 <AT_Send+0x28c>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 80045a6:	4a43      	ldr	r2, [pc, #268]	@ (80046b4 <AT_Send+0x2cc>)
 80045a8:	4b39      	ldr	r3, [pc, #228]	@ (8004690 <AT_Send+0x2a8>)
 80045aa:	0019      	movs	r1, r3
 80045ac:	2003      	movs	r0, #3
 80045ae:	f004 fa77 	bl	8008aa0 <CreateLine>
    ATCommandSend = CIPMUX();
 80045b2:	230f      	movs	r3, #15
 80045b4:	18fc      	adds	r4, r7, r3
 80045b6:	f7ff fc8b 	bl	8003ed0 <CIPMUX>
 80045ba:	0003      	movs	r3, r0
 80045bc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045be:	f004 fe71 	bl	80092a4 <HAL_GetTick>
 80045c2:	0003      	movs	r3, r0
 80045c4:	330a      	adds	r3, #10
 80045c6:	001a      	movs	r2, r3
 80045c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004688 <AT_Send+0x2a0>)
 80045ca:	601a      	str	r2, [r3, #0]
    break;
 80045cc:	e052      	b.n	8004674 <AT_Send+0x28c>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 80045ce:	4a37      	ldr	r2, [pc, #220]	@ (80046ac <AT_Send+0x2c4>)
 80045d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004690 <AT_Send+0x2a8>)
 80045d2:	0019      	movs	r1, r3
 80045d4:	2003      	movs	r0, #3
 80045d6:	f004 fa63 	bl	8008aa0 <CreateLine>
    ATCommandSend = WEBSERVER();
 80045da:	230f      	movs	r3, #15
 80045dc:	18fc      	adds	r4, r7, r3
 80045de:	f7ff fc97 	bl	8003f10 <WEBSERVER>
 80045e2:	0003      	movs	r3, r0
 80045e4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045e6:	f004 fe5d 	bl	80092a4 <HAL_GetTick>
 80045ea:	0003      	movs	r3, r0
 80045ec:	330a      	adds	r3, #10
 80045ee:	001a      	movs	r2, r3
 80045f0:	4b25      	ldr	r3, [pc, #148]	@ (8004688 <AT_Send+0x2a0>)
 80045f2:	601a      	str	r2, [r3, #0]
    break;
 80045f4:	e03e      	b.n	8004674 <AT_Send+0x28c>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80045f6:	4a2d      	ldr	r2, [pc, #180]	@ (80046ac <AT_Send+0x2c4>)
 80045f8:	4b25      	ldr	r3, [pc, #148]	@ (8004690 <AT_Send+0x2a8>)
 80045fa:	0019      	movs	r1, r3
 80045fc:	2003      	movs	r0, #3
 80045fe:	f004 fa4f 	bl	8008aa0 <CreateLine>
    ATCommandSend = HTTPCPOST();
 8004602:	230f      	movs	r3, #15
 8004604:	18fc      	adds	r4, r7, r3
 8004606:	f7ff fca3 	bl	8003f50 <HTTPCPOST>
 800460a:	0003      	movs	r3, r0
 800460c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800460e:	f004 fe49 	bl	80092a4 <HAL_GetTick>
 8004612:	0003      	movs	r3, r0
 8004614:	33f5      	adds	r3, #245	@ 0xf5
 8004616:	33ff      	adds	r3, #255	@ 0xff
 8004618:	001a      	movs	r2, r3
 800461a:	4b1b      	ldr	r3, [pc, #108]	@ (8004688 <AT_Send+0x2a0>)
 800461c:	601a      	str	r2, [r3, #0]
    break;
 800461e:	e029      	b.n	8004674 <AT_Send+0x28c>

  case AT_SENDDATA:
    Debug("Send the data");
 8004620:	4a25      	ldr	r2, [pc, #148]	@ (80046b8 <AT_Send+0x2d0>)
 8004622:	4b1b      	ldr	r3, [pc, #108]	@ (8004690 <AT_Send+0x2a8>)
 8004624:	0019      	movs	r1, r3
 8004626:	2003      	movs	r0, #3
 8004628:	f004 fa3a 	bl	8008aa0 <CreateLine>
    ATCommandSend = SENDDATA();
 800462c:	230f      	movs	r3, #15
 800462e:	18fc      	adds	r4, r7, r3
 8004630:	f7ff fd2a 	bl	8004088 <SENDDATA>
 8004634:	0003      	movs	r3, r0
 8004636:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004638:	f004 fe34 	bl	80092a4 <HAL_GetTick>
 800463c:	0003      	movs	r3, r0
 800463e:	33f5      	adds	r3, #245	@ 0xf5
 8004640:	33ff      	adds	r3, #255	@ 0xff
 8004642:	001a      	movs	r2, r3
 8004644:	4b10      	ldr	r3, [pc, #64]	@ (8004688 <AT_Send+0x2a0>)
 8004646:	601a      	str	r2, [r3, #0]
    break;
 8004648:	e014      	b.n	8004674 <AT_Send+0x28c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800464a:	4a1c      	ldr	r2, [pc, #112]	@ (80046bc <AT_Send+0x2d4>)
 800464c:	4b10      	ldr	r3, [pc, #64]	@ (8004690 <AT_Send+0x2a8>)
 800464e:	0019      	movs	r1, r3
 8004650:	2003      	movs	r0, #3
 8004652:	f004 fa25 	bl	8008aa0 <CreateLine>
    ATCommandSend = SLEEP();
 8004656:	230f      	movs	r3, #15
 8004658:	18fc      	adds	r4, r7, r3
 800465a:	f7ff fdc1 	bl	80041e0 <SLEEP>
 800465e:	0003      	movs	r3, r0
 8004660:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004662:	f004 fe1f 	bl	80092a4 <HAL_GetTick>
 8004666:	0003      	movs	r3, r0
 8004668:	330a      	adds	r3, #10
 800466a:	001a      	movs	r2, r3
 800466c:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <AT_Send+0x2a0>)
 800466e:	601a      	str	r2, [r3, #0]
    break;
 8004670:	e000      	b.n	8004674 <AT_Send+0x28c>
  break;
 8004672:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004674:	230f      	movs	r3, #15
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	781b      	ldrb	r3, [r3, #0]
}
 800467a:	0018      	movs	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	b005      	add	sp, #20
 8004680:	bd90      	pop	{r4, r7, pc}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	0801a2ec 	.word	0x0801a2ec
 8004688:	20000884 	.word	0x20000884
 800468c:	08019b50 	.word	0x08019b50
 8004690:	08019800 	.word	0x08019800
 8004694:	08019b64 	.word	0x08019b64
 8004698:	08019b78 	.word	0x08019b78
 800469c:	08019b88 	.word	0x08019b88
 80046a0:	08019b9c 	.word	0x08019b9c
 80046a4:	08019bb4 	.word	0x08019bb4
 80046a8:	08019bcc 	.word	0x08019bcc
 80046ac:	08019be0 	.word	0x08019be0
 80046b0:	08019bfc 	.word	0x08019bfc
 80046b4:	08019c18 	.word	0x08019c18
 80046b8:	08019c3c 	.word	0x08019c3c
 80046bc:	08019c4c 	.word	0x08019c4c

080046c0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80046cc:	4b79      	ldr	r3, [pc, #484]	@ (80048b4 <ESP_WakeTest+0x1f4>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b05      	cmp	r3, #5
 80046d2:	d900      	bls.n	80046d6 <ESP_WakeTest+0x16>
 80046d4:	e0d4      	b.n	8004880 <ESP_WakeTest+0x1c0>
 80046d6:	009a      	lsls	r2, r3, #2
 80046d8:	4b77      	ldr	r3, [pc, #476]	@ (80048b8 <ESP_WakeTest+0x1f8>)
 80046da:	18d3      	adds	r3, r2, r3
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80046e0:	4b76      	ldr	r3, [pc, #472]	@ (80048bc <ESP_WakeTest+0x1fc>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	4053      	eors	r3, r2
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d036      	beq.n	800475c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80046ee:	2380      	movs	r3, #128	@ 0x80
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	4873      	ldr	r0, [pc, #460]	@ (80048c0 <ESP_WakeTest+0x200>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	0019      	movs	r1, r3
 80046f8:	f005 fe24 	bl	800a344 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80046fc:	2032      	movs	r0, #50	@ 0x32
 80046fe:	f004 fddb 	bl	80092b8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004702:	2380      	movs	r3, #128	@ 0x80
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	486e      	ldr	r0, [pc, #440]	@ (80048c0 <ESP_WakeTest+0x200>)
 8004708:	2201      	movs	r2, #1
 800470a:	0019      	movs	r1, r3
 800470c:	f005 fe1a 	bl	800a344 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004710:	200a      	movs	r0, #10
 8004712:	f004 fdd1 	bl	80092b8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004716:	4b6b      	ldr	r3, [pc, #428]	@ (80048c4 <ESP_WakeTest+0x204>)
 8004718:	2200      	movs	r2, #0
 800471a:	2101      	movs	r1, #1
 800471c:	0018      	movs	r0, r3
 800471e:	f005 fe11 	bl	800a344 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004722:	200a      	movs	r0, #10
 8004724:	f004 fdc8 	bl	80092b8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004728:	4b66      	ldr	r3, [pc, #408]	@ (80048c4 <ESP_WakeTest+0x204>)
 800472a:	2201      	movs	r2, #1
 800472c:	2102      	movs	r1, #2
 800472e:	0018      	movs	r0, r3
 8004730:	f005 fe08 	bl	800a344 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004734:	200a      	movs	r0, #10
 8004736:	f004 fdbf 	bl	80092b8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800473a:	4b62      	ldr	r3, [pc, #392]	@ (80048c4 <ESP_WakeTest+0x204>)
 800473c:	2201      	movs	r2, #1
 800473e:	2101      	movs	r1, #1
 8004740:	0018      	movs	r0, r3
 8004742:	f005 fdff 	bl	800a344 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004746:	f004 fdad 	bl	80092a4 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	22af      	movs	r2, #175	@ 0xaf
 800474e:	0092      	lsls	r2, r2, #2
 8004750:	189a      	adds	r2, r3, r2
 8004752:	4b5d      	ldr	r3, [pc, #372]	@ (80048c8 <ESP_WakeTest+0x208>)
 8004754:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004756:	4b59      	ldr	r3, [pc, #356]	@ (80048bc <ESP_WakeTest+0x1fc>)
 8004758:	2201      	movs	r2, #1
 800475a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800475c:	4b5b      	ldr	r3, [pc, #364]	@ (80048cc <ESP_WakeTest+0x20c>)
 800475e:	21ff      	movs	r1, #255	@ 0xff
 8004760:	0018      	movs	r0, r3
 8004762:	f7fe ff71 	bl	8003648 <ESP_Receive>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d100      	bne.n	800476c <ESP_WakeTest+0xac>
 800476a:	e099      	b.n	80048a0 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 800476c:	4b51      	ldr	r3, [pc, #324]	@ (80048b4 <ESP_WakeTest+0x1f4>)
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004772:	e095      	b.n	80048a0 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004774:	4b54      	ldr	r3, [pc, #336]	@ (80048c8 <ESP_WakeTest+0x208>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	0018      	movs	r0, r3
 800477a:	f004 f93b 	bl	80089f4 <TimestampIsReached>
 800477e:	1e03      	subs	r3, r0, #0
 8004780:	d100      	bne.n	8004784 <ESP_WakeTest+0xc4>
 8004782:	e08f      	b.n	80048a4 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004784:	4b52      	ldr	r3, [pc, #328]	@ (80048d0 <ESP_WakeTest+0x210>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	1dfc      	adds	r4, r7, #7
 800478a:	0018      	movs	r0, r3
 800478c:	f7ff fe2c 	bl	80043e8 <AT_Send>
 8004790:	0003      	movs	r3, r0
 8004792:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004794:	1dfb      	adds	r3, r7, #7
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d100      	bne.n	800479e <ESP_WakeTest+0xde>
 800479c:	e082      	b.n	80048a4 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 800479e:	4b45      	ldr	r3, [pc, #276]	@ (80048b4 <ESP_WakeTest+0x1f4>)
 80047a0:	2202      	movs	r2, #2
 80047a2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80047a4:	e07e      	b.n	80048a4 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80047a6:	4b48      	ldr	r3, [pc, #288]	@ (80048c8 <ESP_WakeTest+0x208>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f004 f922 	bl	80089f4 <TimestampIsReached>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d100      	bne.n	80047b6 <ESP_WakeTest+0xf6>
 80047b4:	e078      	b.n	80048a8 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80047b6:	4b47      	ldr	r3, [pc, #284]	@ (80048d4 <ESP_WakeTest+0x214>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7ff fd30 	bl	8004220 <DMA_ProcessBuffer>
 80047c0:	0003      	movs	r3, r0
 80047c2:	001a      	movs	r2, r3
 80047c4:	4b44      	ldr	r3, [pc, #272]	@ (80048d8 <ESP_WakeTest+0x218>)
 80047c6:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80047c8:	4b43      	ldr	r3, [pc, #268]	@ (80048d8 <ESP_WakeTest+0x218>)
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	4b41      	ldr	r3, [pc, #260]	@ (80048d4 <ESP_WakeTest+0x214>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	1dbc      	adds	r4, r7, #6
 80047d2:	0019      	movs	r1, r3
 80047d4:	0010      	movs	r0, r2
 80047d6:	f7ff fdd1 	bl	800437c <ATCompare>
 80047da:	0003      	movs	r3, r0
 80047dc:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80047de:	4b3e      	ldr	r3, [pc, #248]	@ (80048d8 <ESP_WakeTest+0x218>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d102      	bne.n	80047ec <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 80047e6:	4b33      	ldr	r3, [pc, #204]	@ (80048b4 <ESP_WakeTest+0x1f4>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80047ec:	4b3a      	ldr	r3, [pc, #232]	@ (80048d8 <ESP_WakeTest+0x218>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b07      	cmp	r3, #7
 80047f2:	d104      	bne.n	80047fe <ESP_WakeTest+0x13e>
          StartProg();
 80047f4:	f7ff f858 	bl	80038a8 <StartProg>
          TestState = ESP_TEST_BOOT;
 80047f8:	4b2e      	ldr	r3, [pc, #184]	@ (80048b4 <ESP_WakeTest+0x1f4>)
 80047fa:	2205      	movs	r2, #5
 80047fc:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80047fe:	4b36      	ldr	r3, [pc, #216]	@ (80048d8 <ESP_WakeTest+0x218>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b03      	cmp	r3, #3
 8004804:	d109      	bne.n	800481a <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004806:	f004 fd4d 	bl	80092a4 <HAL_GetTick>
 800480a:	0003      	movs	r3, r0
 800480c:	3332      	adds	r3, #50	@ 0x32
 800480e:	001a      	movs	r2, r3
 8004810:	4b2d      	ldr	r3, [pc, #180]	@ (80048c8 <ESP_WakeTest+0x208>)
 8004812:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004814:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <ESP_WakeTest+0x1f4>)
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800481a:	1dbb      	adds	r3, r7, #6
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d042      	beq.n	80048a8 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004822:	4b24      	ldr	r3, [pc, #144]	@ (80048b4 <ESP_WakeTest+0x1f4>)
 8004824:	2203      	movs	r2, #3
 8004826:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004828:	e03e      	b.n	80048a8 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 800482a:	4b2c      	ldr	r3, [pc, #176]	@ (80048dc <ESP_WakeTest+0x21c>)
 800482c:	22fa      	movs	r2, #250	@ 0xfa
 800482e:	0112      	lsls	r2, r2, #4
 8004830:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004832:	4b2a      	ldr	r3, [pc, #168]	@ (80048dc <ESP_WakeTest+0x21c>)
 8004834:	2200      	movs	r2, #0
 8004836:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004838:	4b28      	ldr	r3, [pc, #160]	@ (80048dc <ESP_WakeTest+0x21c>)
 800483a:	22fa      	movs	r2, #250	@ 0xfa
 800483c:	0112      	lsls	r2, r2, #4
 800483e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004840:	4b1c      	ldr	r3, [pc, #112]	@ (80048b4 <ESP_WakeTest+0x1f4>)
 8004842:	2204      	movs	r2, #4
 8004844:	701a      	strb	r2, [r3, #0]

      break;
 8004846:	e030      	b.n	80048aa <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004848:	4b25      	ldr	r3, [pc, #148]	@ (80048e0 <ESP_WakeTest+0x220>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800484e:	4b1b      	ldr	r3, [pc, #108]	@ (80048bc <ESP_WakeTest+0x1fc>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004854:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <ESP_WakeTest+0x204>)
 8004856:	2200      	movs	r2, #0
 8004858:	2101      	movs	r1, #1
 800485a:	0018      	movs	r0, r3
 800485c:	f005 fd72 	bl	800a344 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004860:	2380      	movs	r3, #128	@ 0x80
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	4816      	ldr	r0, [pc, #88]	@ (80048c0 <ESP_WakeTest+0x200>)
 8004866:	2200      	movs	r2, #0
 8004868:	0019      	movs	r1, r3
 800486a:	f005 fd6b 	bl	800a344 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800486e:	4b15      	ldr	r3, [pc, #84]	@ (80048c4 <ESP_WakeTest+0x204>)
 8004870:	2200      	movs	r2, #0
 8004872:	2102      	movs	r1, #2
 8004874:	0018      	movs	r0, r3
 8004876:	f005 fd65 	bl	800a344 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 800487a:	f001 fc9b 	bl	80061b4 <SetESPMeasurementDone>
      break;
 800487e:	e014      	b.n	80048aa <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004880:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <ESP_WakeTest+0x1f4>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
      break;
 8004886:	e010      	b.n	80048aa <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004888:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <ESP_WakeTest+0x21c>)
 800488a:	22fa      	movs	r2, #250	@ 0xfa
 800488c:	0112      	lsls	r2, r2, #4
 800488e:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004890:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <ESP_WakeTest+0x21c>)
 8004892:	22fa      	movs	r2, #250	@ 0xfa
 8004894:	0112      	lsls	r2, r2, #4
 8004896:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004898:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <ESP_WakeTest+0x21c>)
 800489a:	2200      	movs	r2, #0
 800489c:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 800489e:	e004      	b.n	80048aa <ESP_WakeTest+0x1ea>
      break;
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	e002      	b.n	80048aa <ESP_WakeTest+0x1ea>
      break;
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	e000      	b.n	80048aa <ESP_WakeTest+0x1ea>
      break;
 80048a8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80048aa:	46c0      	nop			@ (mov r8, r8)
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b003      	add	sp, #12
 80048b0:	bd90      	pop	{r4, r7, pc}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	20000a90 	.word	0x20000a90
 80048b8:	0801a328 	.word	0x0801a328
 80048bc:	200005d3 	.word	0x200005d3
 80048c0:	50000800 	.word	0x50000800
 80048c4:	50001c00 	.word	0x50001c00
 80048c8:	20000884 	.word	0x20000884
 80048cc:	200004d4 	.word	0x200004d4
 80048d0:	20000a8e 	.word	0x20000a8e
 80048d4:	20000a8d 	.word	0x20000a8d
 80048d8:	20000109 	.word	0x20000109
 80048dc:	40000400 	.word	0x40000400
 80048e0:	20000000 	.word	0x20000000

080048e4 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80048ea:	1dfb      	adds	r3, r7, #7
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 80048f0:	4bcd      	ldr	r3, [pc, #820]	@ (8004c28 <ESP_Upkeep+0x344>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b0b      	cmp	r3, #11
 80048f6:	d900      	bls.n	80048fa <ESP_Upkeep+0x16>
 80048f8:	e1f7      	b.n	8004cea <ESP_Upkeep+0x406>
 80048fa:	009a      	lsls	r2, r3, #2
 80048fc:	4bcb      	ldr	r3, [pc, #812]	@ (8004c2c <ESP_Upkeep+0x348>)
 80048fe:	18d3      	adds	r3, r2, r3
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004904:	4bc8      	ldr	r3, [pc, #800]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
      break;
 800490a:	e1ff      	b.n	8004d0c <ESP_Upkeep+0x428>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 800490c:	4bc8      	ldr	r3, [pc, #800]	@ (8004c30 <ESP_Upkeep+0x34c>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2201      	movs	r2, #1
 8004912:	4053      	eors	r3, r2
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d036      	beq.n	8004988 <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800491a:	2380      	movs	r3, #128	@ 0x80
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	48c5      	ldr	r0, [pc, #788]	@ (8004c34 <ESP_Upkeep+0x350>)
 8004920:	2200      	movs	r2, #0
 8004922:	0019      	movs	r1, r3
 8004924:	f005 fd0e 	bl	800a344 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004928:	2032      	movs	r0, #50	@ 0x32
 800492a:	f004 fcc5 	bl	80092b8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	48c0      	ldr	r0, [pc, #768]	@ (8004c34 <ESP_Upkeep+0x350>)
 8004934:	2201      	movs	r2, #1
 8004936:	0019      	movs	r1, r3
 8004938:	f005 fd04 	bl	800a344 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800493c:	200a      	movs	r0, #10
 800493e:	f004 fcbb 	bl	80092b8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004942:	4bbd      	ldr	r3, [pc, #756]	@ (8004c38 <ESP_Upkeep+0x354>)
 8004944:	2200      	movs	r2, #0
 8004946:	2101      	movs	r1, #1
 8004948:	0018      	movs	r0, r3
 800494a:	f005 fcfb 	bl	800a344 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800494e:	200a      	movs	r0, #10
 8004950:	f004 fcb2 	bl	80092b8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004954:	4bb8      	ldr	r3, [pc, #736]	@ (8004c38 <ESP_Upkeep+0x354>)
 8004956:	2201      	movs	r2, #1
 8004958:	2102      	movs	r1, #2
 800495a:	0018      	movs	r0, r3
 800495c:	f005 fcf2 	bl	800a344 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004960:	200a      	movs	r0, #10
 8004962:	f004 fca9 	bl	80092b8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004966:	4bb4      	ldr	r3, [pc, #720]	@ (8004c38 <ESP_Upkeep+0x354>)
 8004968:	2201      	movs	r2, #1
 800496a:	2101      	movs	r1, #1
 800496c:	0018      	movs	r0, r3
 800496e:	f005 fce9 	bl	800a344 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004972:	f004 fc97 	bl	80092a4 <HAL_GetTick>
 8004976:	0003      	movs	r3, r0
 8004978:	22af      	movs	r2, #175	@ 0xaf
 800497a:	0092      	lsls	r2, r2, #2
 800497c:	189a      	adds	r2, r3, r2
 800497e:	4baf      	ldr	r3, [pc, #700]	@ (8004c3c <ESP_Upkeep+0x358>)
 8004980:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004982:	4bab      	ldr	r3, [pc, #684]	@ (8004c30 <ESP_Upkeep+0x34c>)
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004988:	4bad      	ldr	r3, [pc, #692]	@ (8004c40 <ESP_Upkeep+0x35c>)
 800498a:	21ff      	movs	r1, #255	@ 0xff
 800498c:	0018      	movs	r0, r3
 800498e:	f7fe fe5b 	bl	8003648 <ESP_Receive>
 8004992:	1e03      	subs	r3, r0, #0
 8004994:	d100      	bne.n	8004998 <ESP_Upkeep+0xb4>
 8004996:	e1ae      	b.n	8004cf6 <ESP_Upkeep+0x412>
        EspState = ESP_STATE_MODE_SELECT;
 8004998:	4ba3      	ldr	r3, [pc, #652]	@ (8004c28 <ESP_Upkeep+0x344>)
 800499a:	220b      	movs	r2, #11
 800499c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800499e:	e1aa      	b.n	8004cf6 <ESP_Upkeep+0x412>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 10);
 80049a0:	4ba8      	ldr	r3, [pc, #672]	@ (8004c44 <ESP_Upkeep+0x360>)
 80049a2:	220a      	movs	r2, #10
 80049a4:	210f      	movs	r1, #15
 80049a6:	0018      	movs	r0, r3
 80049a8:	f012 f820 	bl	80169ec <memset>
      if(!InitIsDone || WifiReset){
 80049ac:	4ba6      	ldr	r3, [pc, #664]	@ (8004c48 <ESP_Upkeep+0x364>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2201      	movs	r2, #1
 80049b2:	4053      	eors	r3, r2
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <ESP_Upkeep+0xde>
 80049ba:	4ba4      	ldr	r3, [pc, #656]	@ (8004c4c <ESP_Upkeep+0x368>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01a      	beq.n	80049f8 <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 7);
 80049c2:	4ba0      	ldr	r3, [pc, #640]	@ (8004c44 <ESP_Upkeep+0x360>)
 80049c4:	4aa2      	ldr	r2, [pc, #648]	@ (8004c50 <ESP_Upkeep+0x36c>)
 80049c6:	6811      	ldr	r1, [r2, #0]
 80049c8:	6019      	str	r1, [r3, #0]
 80049ca:	8891      	ldrh	r1, [r2, #4]
 80049cc:	8099      	strh	r1, [r3, #4]
 80049ce:	7992      	ldrb	r2, [r2, #6]
 80049d0:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80049d2:	4b95      	ldr	r3, [pc, #596]	@ (8004c28 <ESP_Upkeep+0x344>)
 80049d4:	2204      	movs	r2, #4
 80049d6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80049d8:	4b9e      	ldr	r3, [pc, #632]	@ (8004c54 <ESP_Upkeep+0x370>)
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80049de:	4b9e      	ldr	r3, [pc, #632]	@ (8004c58 <ESP_Upkeep+0x374>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80049e4:	4b9b      	ldr	r3, [pc, #620]	@ (8004c54 <ESP_Upkeep+0x370>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	001a      	movs	r2, r3
 80049ea:	4b96      	ldr	r3, [pc, #600]	@ (8004c44 <ESP_Upkeep+0x360>)
 80049ec:	5c9a      	ldrb	r2, [r3, r2]
 80049ee:	4b9b      	ldr	r3, [pc, #620]	@ (8004c5c <ESP_Upkeep+0x378>)
 80049f0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80049f2:	4b9b      	ldr	r3, [pc, #620]	@ (8004c60 <ESP_Upkeep+0x37c>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80049f8:	4b93      	ldr	r3, [pc, #588]	@ (8004c48 <ESP_Upkeep+0x364>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01f      	beq.n	8004a40 <ESP_Upkeep+0x15c>
 8004a00:	4b98      	ldr	r3, [pc, #608]	@ (8004c64 <ESP_Upkeep+0x380>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2201      	movs	r2, #1
 8004a06:	4053      	eors	r3, r2
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d018      	beq.n	8004a40 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8004c44 <ESP_Upkeep+0x360>)
 8004a10:	4a95      	ldr	r2, [pc, #596]	@ (8004c68 <ESP_Upkeep+0x384>)
 8004a12:	6811      	ldr	r1, [r2, #0]
 8004a14:	6019      	str	r1, [r3, #0]
 8004a16:	8892      	ldrh	r2, [r2, #4]
 8004a18:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004a1a:	4b83      	ldr	r3, [pc, #524]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004a20:	4b8c      	ldr	r3, [pc, #560]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004a26:	4b8c      	ldr	r3, [pc, #560]	@ (8004c58 <ESP_Upkeep+0x374>)
 8004a28:	2201      	movs	r2, #1
 8004a2a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004a2c:	4b89      	ldr	r3, [pc, #548]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	001a      	movs	r2, r3
 8004a32:	4b84      	ldr	r3, [pc, #528]	@ (8004c44 <ESP_Upkeep+0x360>)
 8004a34:	5c9a      	ldrb	r2, [r3, r2]
 8004a36:	4b89      	ldr	r3, [pc, #548]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004a38:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004a3a:	4b89      	ldr	r3, [pc, #548]	@ (8004c60 <ESP_Upkeep+0x37c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004a40:	4b81      	ldr	r3, [pc, #516]	@ (8004c48 <ESP_Upkeep+0x364>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d027      	beq.n	8004a98 <ESP_Upkeep+0x1b4>
 8004a48:	4b86      	ldr	r3, [pc, #536]	@ (8004c64 <ESP_Upkeep+0x380>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d023      	beq.n	8004a98 <ESP_Upkeep+0x1b4>
 8004a50:	4b7e      	ldr	r3, [pc, #504]	@ (8004c4c <ESP_Upkeep+0x368>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2201      	movs	r2, #1
 8004a56:	4053      	eors	r3, r2
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01c      	beq.n	8004a98 <ESP_Upkeep+0x1b4>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004a5e:	4b79      	ldr	r3, [pc, #484]	@ (8004c44 <ESP_Upkeep+0x360>)
 8004a60:	4a82      	ldr	r2, [pc, #520]	@ (8004c6c <ESP_Upkeep+0x388>)
 8004a62:	8811      	ldrh	r1, [r2, #0]
 8004a64:	8019      	strh	r1, [r3, #0]
 8004a66:	7892      	ldrb	r2, [r2, #2]
 8004a68:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004a70:	4b78      	ldr	r3, [pc, #480]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004a76:	4b78      	ldr	r3, [pc, #480]	@ (8004c58 <ESP_Upkeep+0x374>)
 8004a78:	2202      	movs	r2, #2
 8004a7a:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004a7c:	2380      	movs	r3, #128	@ 0x80
 8004a7e:	05db      	lsls	r3, r3, #23
 8004a80:	4a7b      	ldr	r2, [pc, #492]	@ (8004c70 <ESP_Upkeep+0x38c>)
 8004a82:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004a84:	4b73      	ldr	r3, [pc, #460]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	001a      	movs	r2, r3
 8004a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004c44 <ESP_Upkeep+0x360>)
 8004a8c:	5c9a      	ldrb	r2, [r3, r2]
 8004a8e:	4b73      	ldr	r3, [pc, #460]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004a90:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004a92:	4b73      	ldr	r3, [pc, #460]	@ (8004c60 <ESP_Upkeep+0x37c>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004a98:	4b76      	ldr	r3, [pc, #472]	@ (8004c74 <ESP_Upkeep+0x390>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d100      	bne.n	8004aa2 <ESP_Upkeep+0x1be>
 8004aa0:	e12b      	b.n	8004cfa <ESP_Upkeep+0x416>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 3);
 8004aa2:	4975      	ldr	r1, [pc, #468]	@ (8004c78 <ESP_Upkeep+0x394>)
 8004aa4:	4b67      	ldr	r3, [pc, #412]	@ (8004c44 <ESP_Upkeep+0x360>)
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f012 f85b 	bl	8016b64 <memcpy>
        EspState = ESP_STATE_SEND;
 8004aae:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004ab4:	4b67      	ldr	r3, [pc, #412]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004aba:	4b67      	ldr	r3, [pc, #412]	@ (8004c58 <ESP_Upkeep+0x374>)
 8004abc:	2202      	movs	r2, #2
 8004abe:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004ac0:	2380      	movs	r3, #128	@ 0x80
 8004ac2:	05db      	lsls	r3, r3, #23
 8004ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8004c70 <ESP_Upkeep+0x38c>)
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004ac8:	4b62      	ldr	r3, [pc, #392]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	001a      	movs	r2, r3
 8004ace:	4b5d      	ldr	r3, [pc, #372]	@ (8004c44 <ESP_Upkeep+0x360>)
 8004ad0:	5c9a      	ldrb	r2, [r3, r2]
 8004ad2:	4b62      	ldr	r3, [pc, #392]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004ad4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004ad6:	4b62      	ldr	r3, [pc, #392]	@ (8004c60 <ESP_Upkeep+0x37c>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004adc:	e10d      	b.n	8004cfa <ESP_Upkeep+0x416>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004ade:	4b5f      	ldr	r3, [pc, #380]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	1dfc      	adds	r4, r7, #7
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7ff fc7f 	bl	80043e8 <AT_Send>
 8004aea:	0003      	movs	r3, r0
 8004aec:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004aee:	1dfb      	adds	r3, r7, #7
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d100      	bne.n	8004af8 <ESP_Upkeep+0x214>
 8004af6:	e102      	b.n	8004cfe <ESP_Upkeep+0x41a>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004af8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004afa:	2203      	movs	r2, #3
 8004afc:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004afe:	e0fe      	b.n	8004cfe <ESP_Upkeep+0x41a>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004b00:	4b4e      	ldr	r3, [pc, #312]	@ (8004c3c <ESP_Upkeep+0x358>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f003 ff75 	bl	80089f4 <TimestampIsReached>
 8004b0a:	1e03      	subs	r3, r0, #0
 8004b0c:	d100      	bne.n	8004b10 <ESP_Upkeep+0x22c>
 8004b0e:	e0f8      	b.n	8004d02 <ESP_Upkeep+0x41e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004b10:	4b53      	ldr	r3, [pc, #332]	@ (8004c60 <ESP_Upkeep+0x37c>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7ff fb83 	bl	8004220 <DMA_ProcessBuffer>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	4b57      	ldr	r3, [pc, #348]	@ (8004c7c <ESP_Upkeep+0x398>)
 8004b20:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004b22:	4b56      	ldr	r3, [pc, #344]	@ (8004c7c <ESP_Upkeep+0x398>)
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	4b4e      	ldr	r3, [pc, #312]	@ (8004c60 <ESP_Upkeep+0x37c>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	1dbc      	adds	r4, r7, #6
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	0010      	movs	r0, r2
 8004b30:	f7ff fc24 	bl	800437c <ATCompare>
 8004b34:	0003      	movs	r3, r0
 8004b36:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004b38:	4b50      	ldr	r3, [pc, #320]	@ (8004c7c <ESP_Upkeep+0x398>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d102      	bne.n	8004b46 <ESP_Upkeep+0x262>
          EspState = ESP_STATE_SEND;
 8004b40:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004b42:	2204      	movs	r2, #4
 8004b44:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004b46:	4b4d      	ldr	r3, [pc, #308]	@ (8004c7c <ESP_Upkeep+0x398>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d106      	bne.n	8004b5c <ESP_Upkeep+0x278>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004b4e:	f004 fba9 	bl	80092a4 <HAL_GetTick>
 8004b52:	0003      	movs	r3, r0
 8004b54:	330a      	adds	r3, #10
 8004b56:	001a      	movs	r2, r3
 8004b58:	4b38      	ldr	r3, [pc, #224]	@ (8004c3c <ESP_Upkeep+0x358>)
 8004b5a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004b5c:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <ESP_Upkeep+0x398>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b06      	cmp	r3, #6
 8004b62:	d116      	bne.n	8004b92 <ESP_Upkeep+0x2ae>
          if(ATCommand != AT_SENDDATA){
 8004b64:	4b3d      	ldr	r3, [pc, #244]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b0d      	cmp	r3, #13
 8004b6a:	d003      	beq.n	8004b74 <ESP_Upkeep+0x290>
            EspState = ESP_STATE_SEND;
 8004b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004b6e:	2204      	movs	r2, #4
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	e00e      	b.n	8004b92 <ESP_Upkeep+0x2ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004b74:	4b39      	ldr	r3, [pc, #228]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004b76:	220c      	movs	r2, #12
 8004b78:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004b7a:	4b36      	ldr	r3, [pc, #216]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4b34      	ldr	r3, [pc, #208]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004b84:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004b86:	4b36      	ldr	r3, [pc, #216]	@ (8004c60 <ESP_Upkeep+0x37c>)
 8004b88:	2202      	movs	r2, #2
 8004b8a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004b8c:	4b26      	ldr	r3, [pc, #152]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004b8e:	2204      	movs	r2, #4
 8004b90:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004b92:	1dbb      	adds	r3, r7, #6
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d100      	bne.n	8004b9c <ESP_Upkeep+0x2b8>
 8004b9a:	e0b2      	b.n	8004d02 <ESP_Upkeep+0x41e>
          EspState = ESP_STATE_NEXT_AT;
 8004b9c:	4b22      	ldr	r3, [pc, #136]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004b9e:	2205      	movs	r2, #5
 8004ba0:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004ba2:	e0ae      	b.n	8004d02 <ESP_Upkeep+0x41e>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	4b29      	ldr	r3, [pc, #164]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004bae:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004bb0:	4b28      	ldr	r3, [pc, #160]	@ (8004c54 <ESP_Upkeep+0x370>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	4b23      	ldr	r3, [pc, #140]	@ (8004c44 <ESP_Upkeep+0x360>)
 8004bb8:	5c9a      	ldrb	r2, [r3, r2]
 8004bba:	4b28      	ldr	r3, [pc, #160]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004bbc:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004bbe:	4b27      	ldr	r3, [pc, #156]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d102      	bne.n	8004bcc <ESP_Upkeep+0x2e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004bc6:	4b26      	ldr	r3, [pc, #152]	@ (8004c60 <ESP_Upkeep+0x37c>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004bcc:	4b23      	ldr	r3, [pc, #140]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	d102      	bne.n	8004bda <ESP_Upkeep+0x2f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004bd4:	4b22      	ldr	r3, [pc, #136]	@ (8004c60 <ESP_Upkeep+0x37c>)
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004bda:	4b20      	ldr	r3, [pc, #128]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d006      	beq.n	8004bf0 <ESP_Upkeep+0x30c>
 8004be2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d002      	beq.n	8004bf0 <ESP_Upkeep+0x30c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004bea:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <ESP_Upkeep+0x37c>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004bf6:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <ESP_Upkeep+0x378>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b0f      	cmp	r3, #15
 8004bfc:	d000      	beq.n	8004c00 <ESP_Upkeep+0x31c>
 8004bfe:	e082      	b.n	8004d06 <ESP_Upkeep+0x422>
        if(Mode == AT_MODE_SEND){
 8004c00:	4b15      	ldr	r3, [pc, #84]	@ (8004c58 <ESP_Upkeep+0x374>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d10b      	bne.n	8004c20 <ESP_Upkeep+0x33c>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004c08:	f004 fb4c 	bl	80092a4 <HAL_GetTick>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c80 <ESP_Upkeep+0x39c>)
 8004c10:	189a      	adds	r2, r3, r2
 8004c12:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <ESP_Upkeep+0x358>)
 8004c14:	601a      	str	r2, [r3, #0]
          TIM2 -> CCR4 = 4000;
 8004c16:	2380      	movs	r3, #128	@ 0x80
 8004c18:	05db      	lsls	r3, r3, #23
 8004c1a:	22fa      	movs	r2, #250	@ 0xfa
 8004c1c:	0112      	lsls	r2, r2, #4
 8004c1e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        EspState = ESP_STATE_RESET;
 8004c20:	4b01      	ldr	r3, [pc, #4]	@ (8004c28 <ESP_Upkeep+0x344>)
 8004c22:	2209      	movs	r2, #9
 8004c24:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004c26:	e06e      	b.n	8004d06 <ESP_Upkeep+0x422>
 8004c28:	20000108 	.word	0x20000108
 8004c2c:	0801a340 	.word	0x0801a340
 8004c30:	200005d3 	.word	0x200005d3
 8004c34:	50000800 	.word	0x50000800
 8004c38:	50001c00 	.word	0x50001c00
 8004c3c:	20000884 	.word	0x20000884
 8004c40:	200004d4 	.word	0x200004d4
 8004c44:	20000878 	.word	0x20000878
 8004c48:	200005d4 	.word	0x200005d4
 8004c4c:	200005d5 	.word	0x200005d5
 8004c50:	200000f0 	.word	0x200000f0
 8004c54:	20000882 	.word	0x20000882
 8004c58:	20000a8f 	.word	0x20000a8f
 8004c5c:	20000a8e 	.word	0x20000a8e
 8004c60:	20000a8d 	.word	0x20000a8d
 8004c64:	200005d7 	.word	0x200005d7
 8004c68:	200000fc 	.word	0x200000fc
 8004c6c:	200000f8 	.word	0x200000f8
 8004c70:	00000bb8 	.word	0x00000bb8
 8004c74:	200005d6 	.word	0x200005d6
 8004c78:	20000104 	.word	0x20000104
 8004c7c:	2000010a 	.word	0x2000010a
 8004c80:	000493e0 	.word	0x000493e0

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8004c84:	4b23      	ldr	r3, [pc, #140]	@ (8004d14 <ESP_Upkeep+0x430>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f003 feb3 	bl	80089f4 <TimestampIsReached>
 8004c8e:	1e03      	subs	r3, r0, #0
 8004c90:	d103      	bne.n	8004c9a <ESP_Upkeep+0x3b6>
 8004c92:	4b21      	ldr	r3, [pc, #132]	@ (8004d18 <ESP_Upkeep+0x434>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d037      	beq.n	8004d0a <ESP_Upkeep+0x426>
        if(Mode == AT_MODE_INIT){
 8004c9a:	4b20      	ldr	r3, [pc, #128]	@ (8004d1c <ESP_Upkeep+0x438>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <ESP_Upkeep+0x3c4>
          InitIsDone = true;
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d20 <ESP_Upkeep+0x43c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d1c <ESP_Upkeep+0x438>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d102      	bne.n	8004cb6 <ESP_Upkeep+0x3d2>
          ConnectionMade = true;
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d24 <ESP_Upkeep+0x440>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
        }
        TIM2 -> CCR1 = 40000;
 8004cb6:	2380      	movs	r3, #128	@ 0x80
 8004cb8:	05db      	lsls	r3, r3, #23
 8004cba:	4a1b      	ldr	r2, [pc, #108]	@ (8004d28 <ESP_Upkeep+0x444>)
 8004cbc:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2 -> CCR3 = 40000;
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	05db      	lsls	r3, r3, #23
 8004cc2:	4a19      	ldr	r2, [pc, #100]	@ (8004d28 <ESP_Upkeep+0x444>)
 8004cc4:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2 -> CCR4 = 40000;
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	05db      	lsls	r3, r3, #23
 8004cca:	4a17      	ldr	r2, [pc, #92]	@ (8004d28 <ESP_Upkeep+0x444>)
 8004ccc:	641a      	str	r2, [r3, #64]	@ 0x40
        EspState = ESP_STATE_MODE_SELECT;
 8004cce:	4b17      	ldr	r3, [pc, #92]	@ (8004d2c <ESP_Upkeep+0x448>)
 8004cd0:	220b      	movs	r2, #11
 8004cd2:	701a      	strb	r2, [r3, #0]
      }

      break;
 8004cd4:	e019      	b.n	8004d0a <ESP_Upkeep+0x426>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004cd6:	4a16      	ldr	r2, [pc, #88]	@ (8004d30 <ESP_Upkeep+0x44c>)
 8004cd8:	4b16      	ldr	r3, [pc, #88]	@ (8004d34 <ESP_Upkeep+0x450>)
 8004cda:	0019      	movs	r1, r3
 8004cdc:	2003      	movs	r0, #3
 8004cde:	f003 fedf 	bl	8008aa0 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004ce2:	4b12      	ldr	r3, [pc, #72]	@ (8004d2c <ESP_Upkeep+0x448>)
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	701a      	strb	r2, [r3, #0]
      break;
 8004ce8:	e010      	b.n	8004d0c <ESP_Upkeep+0x428>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 8004cea:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <ESP_Upkeep+0x448>)
 8004cec:	2207      	movs	r2, #7
 8004cee:	701a      	strb	r2, [r3, #0]
      break;
 8004cf0:	e00c      	b.n	8004d0c <ESP_Upkeep+0x428>
      break;
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	e00a      	b.n	8004d0c <ESP_Upkeep+0x428>
      break;
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	e008      	b.n	8004d0c <ESP_Upkeep+0x428>
    break;
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	e006      	b.n	8004d0c <ESP_Upkeep+0x428>
         break;
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	e004      	b.n	8004d0c <ESP_Upkeep+0x428>
      break;
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	e002      	b.n	8004d0c <ESP_Upkeep+0x428>
    break;
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	e000      	b.n	8004d0c <ESP_Upkeep+0x428>
      break;
 8004d0a:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004d0c:	46c0      	nop			@ (mov r8, r8)
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b003      	add	sp, #12
 8004d12:	bd90      	pop	{r4, r7, pc}
 8004d14:	20000884 	.word	0x20000884
 8004d18:	200005d6 	.word	0x200005d6
 8004d1c:	20000a8f 	.word	0x20000a8f
 8004d20:	200005d4 	.word	0x200005d4
 8004d24:	200005d7 	.word	0x200005d7
 8004d28:	00009c40 	.word	0x00009c40
 8004d2c:	20000108 	.word	0x20000108
 8004d30:	08019c70 	.word	0x08019c70
 8004d34:	08019800 	.word	0x08019800

08004d38 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004d40:	4b09      	ldr	r3, [pc, #36]	@ (8004d68 <I2CSensors_Init+0x30>)
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004d46:	4a09      	ldr	r2, [pc, #36]	@ (8004d6c <I2CSensors_Init+0x34>)
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <I2CSensors_Init+0x38>)
 8004d4a:	0011      	movs	r1, r2
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 fb03 	bl	8005358 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004d52:	4a06      	ldr	r2, [pc, #24]	@ (8004d6c <I2CSensors_Init+0x34>)
 8004d54:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <I2CSensors_Init+0x38>)
 8004d56:	0011      	movs	r1, r2
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f000 f96d 	bl	8005038 <Gas_Init>
}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b002      	add	sp, #8
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	20000a94 	.word	0x20000a94
 8004d6c:	08004dc9 	.word	0x08004dc9
 8004d70:	08004d75 	.word	0x08004d75

08004d74 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004d74:	b5b0      	push	{r4, r5, r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6039      	str	r1, [r7, #0]
 8004d7c:	0011      	movs	r1, r2
 8004d7e:	1dfb      	adds	r3, r7, #7
 8004d80:	1c02      	adds	r2, r0, #0
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	1dbb      	adds	r3, r7, #6
 8004d86:	1c0a      	adds	r2, r1, #0
 8004d88:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <ReadI2C+0x50>)
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	1dfb      	adds	r3, r7, #7
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	18db      	adds	r3, r3, r3
 8004d96:	b299      	uxth	r1, r3
 8004d98:	1dbb      	adds	r3, r7, #6
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	250f      	movs	r5, #15
 8004da0:	197c      	adds	r4, r7, r5
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	f005 fc88 	bl	800a6b8 <HAL_I2C_Master_Receive_DMA>
 8004da8:	0003      	movs	r3, r0
 8004daa:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004dac:	197b      	adds	r3, r7, r5
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <ReadI2C+0x44>
        return false;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <ReadI2C+0x46>
    }
    return true;
 8004db8:	2301      	movs	r3, #1
}
 8004dba:	0018      	movs	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b004      	add	sp, #16
 8004dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	20000a94 	.word	0x20000a94

08004dc8 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004dc8:	b5b0      	push	{r4, r5, r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6039      	str	r1, [r7, #0]
 8004dd0:	0011      	movs	r1, r2
 8004dd2:	1dfb      	adds	r3, r7, #7
 8004dd4:	1c02      	adds	r2, r0, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	1dbb      	adds	r3, r7, #6
 8004dda:	1c0a      	adds	r2, r1, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004dde:	4b0e      	ldr	r3, [pc, #56]	@ (8004e18 <WriteI2C+0x50>)
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	1dfb      	adds	r3, r7, #7
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	18db      	adds	r3, r3, r3
 8004dea:	b299      	uxth	r1, r3
 8004dec:	1dbb      	adds	r3, r7, #6
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	250f      	movs	r5, #15
 8004df4:	197c      	adds	r4, r7, r5
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	f005 fb58 	bl	800a4ac <HAL_I2C_Master_Transmit_DMA>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004e00:	197b      	adds	r3, r7, r5
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <WriteI2C+0x44>
        return false;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <WriteI2C+0x46>
    }
    return true;
 8004e0c:	2301      	movs	r3, #1
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b004      	add	sp, #16
 8004e14:	bdb0      	pop	{r4, r5, r7, pc}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	20000a94 	.word	0x20000a94

08004e1c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004e22:	003b      	movs	r3, r7
 8004e24:	0018      	movs	r0, r3
 8004e26:	2308      	movs	r3, #8
 8004e28:	001a      	movs	r2, r3
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	f011 fdde 	bl	80169ec <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004e30:	4b30      	ldr	r3, [pc, #192]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e32:	4a31      	ldr	r2, [pc, #196]	@ (8004ef8 <MX_ADC_Init+0xdc>)
 8004e34:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004e36:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e3e:	22c0      	movs	r2, #192	@ 0xc0
 8004e40:	0612      	lsls	r2, r2, #24
 8004e42:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004e44:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004e50:	4b28      	ldr	r3, [pc, #160]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e56:	4b27      	ldr	r3, [pc, #156]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004e5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e5e:	2220      	movs	r2, #32
 8004e60:	2100      	movs	r1, #0
 8004e62:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004e64:	4b23      	ldr	r3, [pc, #140]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e66:	2221      	movs	r2, #33	@ 0x21
 8004e68:	2101      	movs	r1, #1
 8004e6a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e6c:	4b21      	ldr	r3, [pc, #132]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e72:	4b20      	ldr	r3, [pc, #128]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e74:	22c2      	movs	r2, #194	@ 0xc2
 8004e76:	32ff      	adds	r2, #255	@ 0xff
 8004e78:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e7c:	222c      	movs	r2, #44	@ 0x2c
 8004e7e:	2100      	movs	r1, #0
 8004e80:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e82:	4b1c      	ldr	r3, [pc, #112]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e84:	2204      	movs	r2, #4
 8004e86:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004e88:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004e8e:	4b19      	ldr	r3, [pc, #100]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004e94:	4b17      	ldr	r3, [pc, #92]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004e9a:	4b16      	ldr	r3, [pc, #88]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004ea0:	4b14      	ldr	r3, [pc, #80]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f004 fa4a 	bl	800933c <HAL_ADC_Init>
 8004ea8:	1e03      	subs	r3, r0, #0
 8004eaa:	d001      	beq.n	8004eb0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004eac:	f000 fdea 	bl	8005a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004eb0:	003b      	movs	r3, r7
 8004eb2:	4a12      	ldr	r2, [pc, #72]	@ (8004efc <MX_ADC_Init+0xe0>)
 8004eb4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004eb6:	003b      	movs	r3, r7
 8004eb8:	2280      	movs	r2, #128	@ 0x80
 8004eba:	0152      	lsls	r2, r2, #5
 8004ebc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ebe:	003a      	movs	r2, r7
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004ec2:	0011      	movs	r1, r2
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f004 fbad 	bl	8009624 <HAL_ADC_ConfigChannel>
 8004eca:	1e03      	subs	r3, r0, #0
 8004ecc:	d001      	beq.n	8004ed2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004ece:	f000 fdd9 	bl	8005a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004ed2:	003b      	movs	r3, r7
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8004f00 <MX_ADC_Init+0xe4>)
 8004ed6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ed8:	003a      	movs	r2, r7
 8004eda:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <MX_ADC_Init+0xd8>)
 8004edc:	0011      	movs	r1, r2
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f004 fba0 	bl	8009624 <HAL_ADC_ConfigChannel>
 8004ee4:	1e03      	subs	r3, r0, #0
 8004ee6:	d001      	beq.n	8004eec <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004ee8:	f000 fdcc 	bl	8005a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004eec:	46c0      	nop			@ (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	b002      	add	sp, #8
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000a98 	.word	0x20000a98
 8004ef8:	40012400 	.word	0x40012400
 8004efc:	38004000 	.word	0x38004000
 8004f00:	3c008000 	.word	0x3c008000

08004f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b089      	sub	sp, #36	@ 0x24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f0c:	240c      	movs	r4, #12
 8004f0e:	193b      	adds	r3, r7, r4
 8004f10:	0018      	movs	r0, r3
 8004f12:	2314      	movs	r3, #20
 8004f14:	001a      	movs	r2, r3
 8004f16:	2100      	movs	r1, #0
 8004f18:	f011 fd68 	bl	80169ec <memset>
  if(adcHandle->Instance==ADC1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a14      	ldr	r2, [pc, #80]	@ (8004f74 <HAL_ADC_MspInit+0x70>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d121      	bne.n	8004f6a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f26:	4b14      	ldr	r3, [pc, #80]	@ (8004f78 <HAL_ADC_MspInit+0x74>)
 8004f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f2a:	4b13      	ldr	r3, [pc, #76]	@ (8004f78 <HAL_ADC_MspInit+0x74>)
 8004f2c:	2180      	movs	r1, #128	@ 0x80
 8004f2e:	0089      	lsls	r1, r1, #2
 8004f30:	430a      	orrs	r2, r1
 8004f32:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f34:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <HAL_ADC_MspInit+0x74>)
 8004f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f38:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <HAL_ADC_MspInit+0x74>)
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004f40:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <HAL_ADC_MspInit+0x74>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	2204      	movs	r2, #4
 8004f46:	4013      	ands	r3, r2
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8004f4c:	193b      	adds	r3, r7, r4
 8004f4e:	2230      	movs	r2, #48	@ 0x30
 8004f50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f52:	193b      	adds	r3, r7, r4
 8004f54:	2203      	movs	r2, #3
 8004f56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f58:	193b      	adds	r3, r7, r4
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f5e:	193b      	adds	r3, r7, r4
 8004f60:	4a06      	ldr	r2, [pc, #24]	@ (8004f7c <HAL_ADC_MspInit+0x78>)
 8004f62:	0019      	movs	r1, r3
 8004f64:	0010      	movs	r0, r2
 8004f66:	f004 ff8d 	bl	8009e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b009      	add	sp, #36	@ 0x24
 8004f70:	bd90      	pop	{r4, r7, pc}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	40012400 	.word	0x40012400
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	50000800 	.word	0x50000800

08004f80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f86:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <MX_DMA_Init+0x48>)
 8004f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc8 <MX_DMA_Init+0x48>)
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <MX_DMA_Init+0x48>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	2201      	movs	r2, #1
 8004f98:	4013      	ands	r3, r2
 8004f9a:	607b      	str	r3, [r7, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	200a      	movs	r0, #10
 8004fa4:	f004 fc90 	bl	80098c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004fa8:	200a      	movs	r0, #10
 8004faa:	f004 fca2 	bl	80098f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2103      	movs	r1, #3
 8004fb2:	200b      	movs	r0, #11
 8004fb4:	f004 fc88 	bl	80098c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004fb8:	200b      	movs	r0, #11
 8004fba:	f004 fc9a 	bl	80098f2 <HAL_NVIC_EnableIRQ>

}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b002      	add	sp, #8
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	40021000 	.word	0x40021000

08004fcc <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8004fda:	4b0c      	ldr	r3, [pc, #48]	@ (800500c <Gadget_Init+0x40>)
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f001 f89b 	bl	8006118 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f000 fdbf 	bl	8005b6c <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f7fe faeb 	bl	80035cc <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8004ff6:	4a06      	ldr	r2, [pc, #24]	@ (8005010 <Gadget_Init+0x44>)
 8004ff8:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <Gadget_Init+0x48>)
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	2003      	movs	r0, #3
 8004ffe:	f003 fd4f 	bl	8008aa0 <CreateLine>
}
 8005002:	46c0      	nop			@ (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b004      	add	sp, #16
 8005008:	bd80      	pop	{r7, pc}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	2000010c 	.word	0x2000010c
 8005010:	08019c84 	.word	0x08019c84
 8005014:	08019c98 	.word	0x08019c98

08005018 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  Meas_Test();
 800501c:	f000 fee6 	bl	8005dec <Meas_Test>
}
 8005020:	46c0      	nop			@ (mov r8, r8)
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <UpkeepGadget>:

void UpkeepGadget() {
 8005026:	b580      	push	{r7, lr}
 8005028:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 800502a:	f000 ffd7 	bl	8005fdc <Meas_Upkeep>
  Mic_Upkeep();
 800502e:	f000 ff89 	bl	8005f44 <Mic_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005032:	46c0      	nop			@ (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0011      	movs	r1, r2
 8005048:	0018      	movs	r0, r3
 800504a:	f002 fc37 	bl	80078bc <SGP_Init>
}
 800504e:	46c0      	nop			@ (mov r8, r8)
 8005050:	46bd      	mov	sp, r7
 8005052:	b002      	add	sp, #8
 8005054:	bd80      	pop	{r7, pc}

08005056 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005056:	b580      	push	{r7, lr}
 8005058:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 800505a:	f002 fc49 	bl	80078f0 <SGP_StartMeasurement>
}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	0018      	movs	r0, r3
 8005070:	f002 fcae 	bl	80079d0 <SGP_GetMeasurementValues>
 8005074:	0003      	movs	r3, r0
}
 8005076:	0018      	movs	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	b002      	add	sp, #8
 800507c:	bd80      	pop	{r7, pc}

0800507e <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800507e:	b580      	push	{r7, lr}
 8005080:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8005082:	f002 fec3 	bl	8007e0c <SGP_DeviceConnected>
 8005086:	0003      	movs	r3, r0
}
 8005088:	0018      	movs	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b08b      	sub	sp, #44	@ 0x2c
 8005094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005096:	2414      	movs	r4, #20
 8005098:	193b      	adds	r3, r7, r4
 800509a:	0018      	movs	r0, r3
 800509c:	2314      	movs	r3, #20
 800509e:	001a      	movs	r2, r3
 80050a0:	2100      	movs	r1, #0
 80050a2:	f011 fca3 	bl	80169ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050ac:	2104      	movs	r1, #4
 80050ae:	430a      	orrs	r2, r1
 80050b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80050b2:	4b79      	ldr	r3, [pc, #484]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	2204      	movs	r2, #4
 80050b8:	4013      	ands	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050be:	4b76      	ldr	r3, [pc, #472]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c2:	4b75      	ldr	r3, [pc, #468]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050c4:	2180      	movs	r1, #128	@ 0x80
 80050c6:	430a      	orrs	r2, r1
 80050c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80050ca:	4b73      	ldr	r3, [pc, #460]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	2280      	movs	r2, #128	@ 0x80
 80050d0:	4013      	ands	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d6:	4b70      	ldr	r3, [pc, #448]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050da:	4b6f      	ldr	r3, [pc, #444]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050dc:	2101      	movs	r1, #1
 80050de:	430a      	orrs	r2, r1
 80050e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80050e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	2201      	movs	r2, #1
 80050e8:	4013      	ands	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f2:	4b69      	ldr	r3, [pc, #420]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050f4:	2102      	movs	r1, #2
 80050f6:	430a      	orrs	r2, r1
 80050f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80050fa:	4b67      	ldr	r3, [pc, #412]	@ (8005298 <MX_GPIO_Init+0x208>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	2202      	movs	r2, #2
 8005100:	4013      	ands	r3, r2
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005106:	4b64      	ldr	r3, [pc, #400]	@ (8005298 <MX_GPIO_Init+0x208>)
 8005108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510a:	4b63      	ldr	r3, [pc, #396]	@ (8005298 <MX_GPIO_Init+0x208>)
 800510c:	2108      	movs	r1, #8
 800510e:	430a      	orrs	r2, r1
 8005110:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005112:	4b61      	ldr	r3, [pc, #388]	@ (8005298 <MX_GPIO_Init+0x208>)
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	2208      	movs	r2, #8
 8005118:	4013      	ands	r3, r2
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800511e:	4b5f      	ldr	r3, [pc, #380]	@ (800529c <MX_GPIO_Init+0x20c>)
 8005120:	2201      	movs	r2, #1
 8005122:	2101      	movs	r1, #1
 8005124:	0018      	movs	r0, r3
 8005126:	f005 f90d 	bl	800a344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800512a:	4b5c      	ldr	r3, [pc, #368]	@ (800529c <MX_GPIO_Init+0x20c>)
 800512c:	2200      	movs	r2, #0
 800512e:	2102      	movs	r1, #2
 8005130:	0018      	movs	r0, r3
 8005132:	f005 f907 	bl	800a344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005136:	495a      	ldr	r1, [pc, #360]	@ (80052a0 <MX_GPIO_Init+0x210>)
 8005138:	4b5a      	ldr	r3, [pc, #360]	@ (80052a4 <MX_GPIO_Init+0x214>)
 800513a:	2201      	movs	r2, #1
 800513c:	0018      	movs	r0, r3
 800513e:	f005 f901 	bl	800a344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005142:	2380      	movs	r3, #128	@ 0x80
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	4858      	ldr	r0, [pc, #352]	@ (80052a8 <MX_GPIO_Init+0x218>)
 8005148:	2201      	movs	r2, #1
 800514a:	0019      	movs	r1, r3
 800514c:	f005 f8fa 	bl	800a344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8005150:	2380      	movs	r3, #128	@ 0x80
 8005152:	015b      	lsls	r3, r3, #5
 8005154:	4854      	ldr	r0, [pc, #336]	@ (80052a8 <MX_GPIO_Init+0x218>)
 8005156:	2200      	movs	r2, #0
 8005158:	0019      	movs	r1, r3
 800515a:	f005 f8f3 	bl	800a344 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800515e:	193b      	adds	r3, r7, r4
 8005160:	4a52      	ldr	r2, [pc, #328]	@ (80052ac <MX_GPIO_Init+0x21c>)
 8005162:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005164:	193b      	adds	r3, r7, r4
 8005166:	2203      	movs	r2, #3
 8005168:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	193b      	adds	r3, r7, r4
 800516c:	2200      	movs	r2, #0
 800516e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005170:	193b      	adds	r3, r7, r4
 8005172:	4a4d      	ldr	r2, [pc, #308]	@ (80052a8 <MX_GPIO_Init+0x218>)
 8005174:	0019      	movs	r1, r3
 8005176:	0010      	movs	r0, r2
 8005178:	f004 fe84 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800517c:	193b      	adds	r3, r7, r4
 800517e:	2203      	movs	r2, #3
 8005180:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005182:	193b      	adds	r3, r7, r4
 8005184:	2201      	movs	r2, #1
 8005186:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	193b      	adds	r3, r7, r4
 800518a:	2200      	movs	r2, #0
 800518c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518e:	193b      	adds	r3, r7, r4
 8005190:	2200      	movs	r2, #0
 8005192:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005194:	193b      	adds	r3, r7, r4
 8005196:	4a41      	ldr	r2, [pc, #260]	@ (800529c <MX_GPIO_Init+0x20c>)
 8005198:	0019      	movs	r1, r3
 800519a:	0010      	movs	r0, r2
 800519c:	f004 fe72 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80051a0:	193b      	adds	r3, r7, r4
 80051a2:	2270      	movs	r2, #112	@ 0x70
 80051a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051a6:	193b      	adds	r3, r7, r4
 80051a8:	2203      	movs	r2, #3
 80051aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	193b      	adds	r3, r7, r4
 80051ae:	2200      	movs	r2, #0
 80051b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b2:	193a      	adds	r2, r7, r4
 80051b4:	23a0      	movs	r3, #160	@ 0xa0
 80051b6:	05db      	lsls	r3, r3, #23
 80051b8:	0011      	movs	r1, r2
 80051ba:	0018      	movs	r0, r3
 80051bc:	f004 fe62 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 80051c0:	193b      	adds	r3, r7, r4
 80051c2:	4a3b      	ldr	r2, [pc, #236]	@ (80052b0 <MX_GPIO_Init+0x220>)
 80051c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051c6:	193b      	adds	r3, r7, r4
 80051c8:	2200      	movs	r2, #0
 80051ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051cc:	193b      	adds	r3, r7, r4
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051d2:	193a      	adds	r2, r7, r4
 80051d4:	23a0      	movs	r3, #160	@ 0xa0
 80051d6:	05db      	lsls	r3, r3, #23
 80051d8:	0011      	movs	r1, r2
 80051da:	0018      	movs	r0, r3
 80051dc:	f004 fe52 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80051e0:	193b      	adds	r3, r7, r4
 80051e2:	4a2f      	ldr	r2, [pc, #188]	@ (80052a0 <MX_GPIO_Init+0x210>)
 80051e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051e6:	193b      	adds	r3, r7, r4
 80051e8:	2201      	movs	r2, #1
 80051ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	193b      	adds	r3, r7, r4
 80051ee:	2200      	movs	r2, #0
 80051f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f2:	193b      	adds	r3, r7, r4
 80051f4:	2200      	movs	r2, #0
 80051f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051f8:	193b      	adds	r3, r7, r4
 80051fa:	4a2a      	ldr	r2, [pc, #168]	@ (80052a4 <MX_GPIO_Init+0x214>)
 80051fc:	0019      	movs	r1, r3
 80051fe:	0010      	movs	r0, r2
 8005200:	f004 fe40 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005204:	193b      	adds	r3, r7, r4
 8005206:	4a2b      	ldr	r2, [pc, #172]	@ (80052b4 <MX_GPIO_Init+0x224>)
 8005208:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800520a:	193b      	adds	r3, r7, r4
 800520c:	2203      	movs	r2, #3
 800520e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005210:	193b      	adds	r3, r7, r4
 8005212:	2200      	movs	r2, #0
 8005214:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005216:	193b      	adds	r3, r7, r4
 8005218:	4a22      	ldr	r2, [pc, #136]	@ (80052a4 <MX_GPIO_Init+0x214>)
 800521a:	0019      	movs	r1, r3
 800521c:	0010      	movs	r0, r2
 800521e:	f004 fe31 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005222:	0021      	movs	r1, r4
 8005224:	187b      	adds	r3, r7, r1
 8005226:	2280      	movs	r2, #128	@ 0x80
 8005228:	0092      	lsls	r2, r2, #2
 800522a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800522c:	000c      	movs	r4, r1
 800522e:	193b      	adds	r3, r7, r4
 8005230:	2200      	movs	r2, #0
 8005232:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005234:	193b      	adds	r3, r7, r4
 8005236:	2200      	movs	r2, #0
 8005238:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800523a:	193b      	adds	r3, r7, r4
 800523c:	4a1a      	ldr	r2, [pc, #104]	@ (80052a8 <MX_GPIO_Init+0x218>)
 800523e:	0019      	movs	r1, r3
 8005240:	0010      	movs	r0, r2
 8005242:	f004 fe1f 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005246:	0021      	movs	r1, r4
 8005248:	187b      	adds	r3, r7, r1
 800524a:	22c0      	movs	r2, #192	@ 0xc0
 800524c:	0152      	lsls	r2, r2, #5
 800524e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005250:	000c      	movs	r4, r1
 8005252:	193b      	adds	r3, r7, r4
 8005254:	2201      	movs	r2, #1
 8005256:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005258:	193b      	adds	r3, r7, r4
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800525e:	193b      	adds	r3, r7, r4
 8005260:	2200      	movs	r2, #0
 8005262:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005264:	193b      	adds	r3, r7, r4
 8005266:	4a10      	ldr	r2, [pc, #64]	@ (80052a8 <MX_GPIO_Init+0x218>)
 8005268:	0019      	movs	r1, r3
 800526a:	0010      	movs	r0, r2
 800526c:	f004 fe0a 	bl	8009e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005270:	0021      	movs	r1, r4
 8005272:	187b      	adds	r3, r7, r1
 8005274:	2204      	movs	r2, #4
 8005276:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005278:	187b      	adds	r3, r7, r1
 800527a:	2200      	movs	r2, #0
 800527c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800527e:	187b      	adds	r3, r7, r1
 8005280:	2201      	movs	r2, #1
 8005282:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005284:	187b      	adds	r3, r7, r1
 8005286:	4a0c      	ldr	r2, [pc, #48]	@ (80052b8 <MX_GPIO_Init+0x228>)
 8005288:	0019      	movs	r1, r3
 800528a:	0010      	movs	r0, r2
 800528c:	f004 fdfa 	bl	8009e84 <HAL_GPIO_Init>

}
 8005290:	46c0      	nop			@ (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b00b      	add	sp, #44	@ 0x2c
 8005296:	bd90      	pop	{r4, r7, pc}
 8005298:	40021000 	.word	0x40021000
 800529c:	50001c00 	.word	0x50001c00
 80052a0:	00000301 	.word	0x00000301
 80052a4:	50000400 	.word	0x50000400
 80052a8:	50000800 	.word	0x50000800
 80052ac:	0000200f 	.word	0x0000200f
 80052b0:	00008180 	.word	0x00008180
 80052b4:	0000403e 	.word	0x0000403e
 80052b8:	50000c00 	.word	0x50000c00

080052bc <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2100      	movs	r1, #0
 80052ca:	0018      	movs	r0, r3
 80052cc:	f00a fadc 	bl	800f888 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2108      	movs	r1, #8
 80052d4:	0018      	movs	r0, r3
 80052d6:	f00a fad7 	bl	800f888 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	210c      	movs	r1, #12
 80052de:	0018      	movs	r0, r3
 80052e0:	f00a fad2 	bl	800f888 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80052e4:	2380      	movs	r3, #128	@ 0x80
 80052e6:	05db      	lsls	r3, r3, #23
 80052e8:	22fa      	movs	r2, #250	@ 0xfa
 80052ea:	0112      	lsls	r2, r2, #4
 80052ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	05db      	lsls	r3, r3, #23
 80052f2:	22fa      	movs	r2, #250	@ 0xfa
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80052f8:	2380      	movs	r3, #128	@ 0x80
 80052fa:	05db      	lsls	r3, r3, #23
 80052fc:	22fa      	movs	r2, #250	@ 0xfa
 80052fe:	0112      	lsls	r2, r2, #4
 8005300:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005302:	2380      	movs	r3, #128	@ 0x80
 8005304:	05db      	lsls	r3, r3, #23
 8005306:	22fa      	movs	r2, #250	@ 0xfa
 8005308:	0112      	lsls	r2, r2, #4
 800530a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2100      	movs	r1, #0
 8005310:	0018      	movs	r0, r3
 8005312:	f00a fab9 	bl	800f888 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2104      	movs	r1, #4
 800531a:	0018      	movs	r0, r3
 800531c:	f00a fab4 	bl	800f888 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2108      	movs	r1, #8
 8005324:	0018      	movs	r0, r3
 8005326:	f00a faaf 	bl	800f888 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800532a:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <GPIO_InitPWMLEDs+0x98>)
 800532c:	22fa      	movs	r2, #250	@ 0xfa
 800532e:	0112      	lsls	r2, r2, #4
 8005330:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005332:	4b08      	ldr	r3, [pc, #32]	@ (8005354 <GPIO_InitPWMLEDs+0x98>)
 8005334:	22fa      	movs	r2, #250	@ 0xfa
 8005336:	0112      	lsls	r2, r2, #4
 8005338:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800533a:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <GPIO_InitPWMLEDs+0x98>)
 800533c:	22fa      	movs	r2, #250	@ 0xfa
 800533e:	0112      	lsls	r2, r2, #4
 8005340:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005342:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <GPIO_InitPWMLEDs+0x98>)
 8005344:	22fa      	movs	r2, #250	@ 0xfa
 8005346:	0112      	lsls	r2, r2, #4
 8005348:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	46bd      	mov	sp, r7
 800534e:	b002      	add	sp, #8
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	40000400 	.word	0x40000400

08005358 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	0011      	movs	r1, r2
 8005368:	0018      	movs	r0, r3
 800536a:	f003 fcf1 	bl	8008d50 <HIDS_Init>
}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b002      	add	sp, #8
 8005374:	bd80      	pop	{r7, pc}

08005376 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005376:	b580      	push	{r7, lr}
 8005378:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 800537a:	f003 fd0b 	bl	8008d94 <HIDS_StartMeasurement>
}
 800537e:	46c0      	nop			@ (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	0011      	movs	r1, r2
 8005394:	0018      	movs	r0, r3
 8005396:	f003 fdd9 	bl	8008f4c <HIDS_GetMeasurementValues>
 800539a:	0003      	movs	r3, r0
}
 800539c:	0018      	movs	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	b002      	add	sp, #8
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 80053a8:	f003 fd74 	bl	8008e94 <HIDS_DeviceConnected>
 80053ac:	0003      	movs	r3, r0
}
 80053ae:	0018      	movs	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80053b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053ba:	4a1c      	ldr	r2, [pc, #112]	@ (800542c <MX_I2C1_Init+0x78>)
 80053bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80053be:	4b1a      	ldr	r3, [pc, #104]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005430 <MX_I2C1_Init+0x7c>)
 80053c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80053c4:	4b18      	ldr	r3, [pc, #96]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053ca:	4b17      	ldr	r3, [pc, #92]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053d0:	4b15      	ldr	r3, [pc, #84]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80053d6:	4b14      	ldr	r3, [pc, #80]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053d8:	2200      	movs	r2, #0
 80053da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80053dc:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053de:	2200      	movs	r2, #0
 80053e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053e2:	4b11      	ldr	r3, [pc, #68]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80053ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005428 <MX_I2C1_Init+0x74>)
 80053f0:	0018      	movs	r0, r3
 80053f2:	f004 ffc5 	bl	800a380 <HAL_I2C_Init>
 80053f6:	1e03      	subs	r3, r0, #0
 80053f8:	d001      	beq.n	80053fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80053fa:	f000 fb43 	bl	8005a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80053fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <MX_I2C1_Init+0x74>)
 8005400:	2100      	movs	r1, #0
 8005402:	0018      	movs	r0, r3
 8005404:	f006 ff34 	bl	800c270 <HAL_I2CEx_ConfigAnalogFilter>
 8005408:	1e03      	subs	r3, r0, #0
 800540a:	d001      	beq.n	8005410 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800540c:	f000 fb3a 	bl	8005a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005410:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <MX_I2C1_Init+0x74>)
 8005412:	2100      	movs	r1, #0
 8005414:	0018      	movs	r0, r3
 8005416:	f006 ff77 	bl	800c308 <HAL_I2CEx_ConfigDigitalFilter>
 800541a:	1e03      	subs	r3, r0, #0
 800541c:	d001      	beq.n	8005422 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800541e:	f000 fb31 	bl	8005a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000af4 	.word	0x20000af4
 800542c:	40005400 	.word	0x40005400
 8005430:	00503d58 	.word	0x00503d58

08005434 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005438:	4b1b      	ldr	r3, [pc, #108]	@ (80054a8 <MX_I2C2_Init+0x74>)
 800543a:	4a1c      	ldr	r2, [pc, #112]	@ (80054ac <MX_I2C2_Init+0x78>)
 800543c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800543e:	4b1a      	ldr	r3, [pc, #104]	@ (80054a8 <MX_I2C2_Init+0x74>)
 8005440:	4a1b      	ldr	r2, [pc, #108]	@ (80054b0 <MX_I2C2_Init+0x7c>)
 8005442:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005444:	4b18      	ldr	r3, [pc, #96]	@ (80054a8 <MX_I2C2_Init+0x74>)
 8005446:	2200      	movs	r2, #0
 8005448:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800544a:	4b17      	ldr	r3, [pc, #92]	@ (80054a8 <MX_I2C2_Init+0x74>)
 800544c:	2201      	movs	r2, #1
 800544e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005450:	4b15      	ldr	r3, [pc, #84]	@ (80054a8 <MX_I2C2_Init+0x74>)
 8005452:	2200      	movs	r2, #0
 8005454:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005456:	4b14      	ldr	r3, [pc, #80]	@ (80054a8 <MX_I2C2_Init+0x74>)
 8005458:	2200      	movs	r2, #0
 800545a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800545c:	4b12      	ldr	r3, [pc, #72]	@ (80054a8 <MX_I2C2_Init+0x74>)
 800545e:	2200      	movs	r2, #0
 8005460:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005462:	4b11      	ldr	r3, [pc, #68]	@ (80054a8 <MX_I2C2_Init+0x74>)
 8005464:	2200      	movs	r2, #0
 8005466:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005468:	4b0f      	ldr	r3, [pc, #60]	@ (80054a8 <MX_I2C2_Init+0x74>)
 800546a:	2200      	movs	r2, #0
 800546c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800546e:	4b0e      	ldr	r3, [pc, #56]	@ (80054a8 <MX_I2C2_Init+0x74>)
 8005470:	0018      	movs	r0, r3
 8005472:	f004 ff85 	bl	800a380 <HAL_I2C_Init>
 8005476:	1e03      	subs	r3, r0, #0
 8005478:	d001      	beq.n	800547e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800547a:	f000 fb03 	bl	8005a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800547e:	4b0a      	ldr	r3, [pc, #40]	@ (80054a8 <MX_I2C2_Init+0x74>)
 8005480:	2100      	movs	r1, #0
 8005482:	0018      	movs	r0, r3
 8005484:	f006 fef4 	bl	800c270 <HAL_I2CEx_ConfigAnalogFilter>
 8005488:	1e03      	subs	r3, r0, #0
 800548a:	d001      	beq.n	8005490 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800548c:	f000 fafa 	bl	8005a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005490:	4b05      	ldr	r3, [pc, #20]	@ (80054a8 <MX_I2C2_Init+0x74>)
 8005492:	2100      	movs	r1, #0
 8005494:	0018      	movs	r0, r3
 8005496:	f006 ff37 	bl	800c308 <HAL_I2CEx_ConfigDigitalFilter>
 800549a:	1e03      	subs	r3, r0, #0
 800549c:	d001      	beq.n	80054a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800549e:	f000 faf1 	bl	8005a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80054a2:	46c0      	nop			@ (mov r8, r8)
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000b48 	.word	0x20000b48
 80054ac:	40005800 	.word	0x40005800
 80054b0:	00503d58 	.word	0x00503d58

080054b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b08b      	sub	sp, #44	@ 0x2c
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054bc:	2414      	movs	r4, #20
 80054be:	193b      	adds	r3, r7, r4
 80054c0:	0018      	movs	r0, r3
 80054c2:	2314      	movs	r3, #20
 80054c4:	001a      	movs	r2, r3
 80054c6:	2100      	movs	r1, #0
 80054c8:	f011 fa90 	bl	80169ec <memset>
  if(i2cHandle->Instance==I2C1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005648 <HAL_I2C_MspInit+0x194>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d000      	beq.n	80054d8 <HAL_I2C_MspInit+0x24>
 80054d6:	e083      	b.n	80055e0 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d8:	4b5c      	ldr	r3, [pc, #368]	@ (800564c <HAL_I2C_MspInit+0x198>)
 80054da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054dc:	4b5b      	ldr	r3, [pc, #364]	@ (800564c <HAL_I2C_MspInit+0x198>)
 80054de:	2102      	movs	r1, #2
 80054e0:	430a      	orrs	r2, r1
 80054e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80054e4:	4b59      	ldr	r3, [pc, #356]	@ (800564c <HAL_I2C_MspInit+0x198>)
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	2202      	movs	r2, #2
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054f0:	0021      	movs	r1, r4
 80054f2:	187b      	adds	r3, r7, r1
 80054f4:	22c0      	movs	r2, #192	@ 0xc0
 80054f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054f8:	187b      	adds	r3, r7, r1
 80054fa:	2212      	movs	r2, #18
 80054fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fe:	187b      	adds	r3, r7, r1
 8005500:	2200      	movs	r2, #0
 8005502:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005504:	187b      	adds	r3, r7, r1
 8005506:	2203      	movs	r2, #3
 8005508:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800550a:	187b      	adds	r3, r7, r1
 800550c:	2201      	movs	r2, #1
 800550e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005510:	187b      	adds	r3, r7, r1
 8005512:	4a4f      	ldr	r2, [pc, #316]	@ (8005650 <HAL_I2C_MspInit+0x19c>)
 8005514:	0019      	movs	r1, r3
 8005516:	0010      	movs	r0, r2
 8005518:	f004 fcb4 	bl	8009e84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800551c:	4b4b      	ldr	r3, [pc, #300]	@ (800564c <HAL_I2C_MspInit+0x198>)
 800551e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005520:	4b4a      	ldr	r3, [pc, #296]	@ (800564c <HAL_I2C_MspInit+0x198>)
 8005522:	2180      	movs	r1, #128	@ 0x80
 8005524:	0389      	lsls	r1, r1, #14
 8005526:	430a      	orrs	r2, r1
 8005528:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800552a:	4b4a      	ldr	r3, [pc, #296]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 800552c:	4a4a      	ldr	r2, [pc, #296]	@ (8005658 <HAL_I2C_MspInit+0x1a4>)
 800552e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005530:	4b48      	ldr	r3, [pc, #288]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 8005532:	2206      	movs	r2, #6
 8005534:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005536:	4b47      	ldr	r3, [pc, #284]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 8005538:	2200      	movs	r2, #0
 800553a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800553c:	4b45      	ldr	r3, [pc, #276]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 800553e:	2200      	movs	r2, #0
 8005540:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005542:	4b44      	ldr	r3, [pc, #272]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 8005544:	2280      	movs	r2, #128	@ 0x80
 8005546:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005548:	4b42      	ldr	r3, [pc, #264]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 800554a:	2200      	movs	r2, #0
 800554c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800554e:	4b41      	ldr	r3, [pc, #260]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 8005550:	2200      	movs	r2, #0
 8005552:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005554:	4b3f      	ldr	r3, [pc, #252]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 8005556:	2200      	movs	r2, #0
 8005558:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800555a:	4b3e      	ldr	r3, [pc, #248]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 800555c:	2200      	movs	r2, #0
 800555e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005560:	4b3c      	ldr	r3, [pc, #240]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 8005562:	0018      	movs	r0, r3
 8005564:	f004 f9e2 	bl	800992c <HAL_DMA_Init>
 8005568:	1e03      	subs	r3, r0, #0
 800556a:	d001      	beq.n	8005570 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800556c:	f000 fa8a 	bl	8005a84 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a38      	ldr	r2, [pc, #224]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 8005574:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005576:	4b37      	ldr	r3, [pc, #220]	@ (8005654 <HAL_I2C_MspInit+0x1a0>)
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800557c:	4b37      	ldr	r3, [pc, #220]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 800557e:	4a38      	ldr	r2, [pc, #224]	@ (8005660 <HAL_I2C_MspInit+0x1ac>)
 8005580:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8005582:	4b36      	ldr	r3, [pc, #216]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 8005584:	2206      	movs	r2, #6
 8005586:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005588:	4b34      	ldr	r3, [pc, #208]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 800558a:	2210      	movs	r2, #16
 800558c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800558e:	4b33      	ldr	r3, [pc, #204]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 8005590:	2200      	movs	r2, #0
 8005592:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005594:	4b31      	ldr	r3, [pc, #196]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 8005596:	2280      	movs	r2, #128	@ 0x80
 8005598:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800559a:	4b30      	ldr	r3, [pc, #192]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 800559c:	2200      	movs	r2, #0
 800559e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055a0:	4b2e      	ldr	r3, [pc, #184]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80055a6:	4b2d      	ldr	r3, [pc, #180]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80055ac:	4b2b      	ldr	r3, [pc, #172]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80055b2:	4b2a      	ldr	r3, [pc, #168]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 80055b4:	0018      	movs	r0, r3
 80055b6:	f004 f9b9 	bl	800992c <HAL_DMA_Init>
 80055ba:	1e03      	subs	r3, r0, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80055be:	f000 fa61 	bl	8005a84 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a25      	ldr	r2, [pc, #148]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 80055c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80055c8:	4b24      	ldr	r3, [pc, #144]	@ (800565c <HAL_I2C_MspInit+0x1a8>)
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80055ce:	2200      	movs	r2, #0
 80055d0:	2100      	movs	r1, #0
 80055d2:	2017      	movs	r0, #23
 80055d4:	f004 f978 	bl	80098c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80055d8:	2017      	movs	r0, #23
 80055da:	f004 f98a 	bl	80098f2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80055de:	e02e      	b.n	800563e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005664 <HAL_I2C_MspInit+0x1b0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d129      	bne.n	800563e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ea:	4b18      	ldr	r3, [pc, #96]	@ (800564c <HAL_I2C_MspInit+0x198>)
 80055ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ee:	4b17      	ldr	r3, [pc, #92]	@ (800564c <HAL_I2C_MspInit+0x198>)
 80055f0:	2102      	movs	r1, #2
 80055f2:	430a      	orrs	r2, r1
 80055f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055f6:	4b15      	ldr	r3, [pc, #84]	@ (800564c <HAL_I2C_MspInit+0x198>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fa:	2202      	movs	r2, #2
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005602:	2114      	movs	r1, #20
 8005604:	187b      	adds	r3, r7, r1
 8005606:	22c0      	movs	r2, #192	@ 0xc0
 8005608:	0112      	lsls	r2, r2, #4
 800560a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800560c:	187b      	adds	r3, r7, r1
 800560e:	2212      	movs	r2, #18
 8005610:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005612:	187b      	adds	r3, r7, r1
 8005614:	2200      	movs	r2, #0
 8005616:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005618:	187b      	adds	r3, r7, r1
 800561a:	2203      	movs	r2, #3
 800561c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800561e:	187b      	adds	r3, r7, r1
 8005620:	2206      	movs	r2, #6
 8005622:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005624:	187b      	adds	r3, r7, r1
 8005626:	4a0a      	ldr	r2, [pc, #40]	@ (8005650 <HAL_I2C_MspInit+0x19c>)
 8005628:	0019      	movs	r1, r3
 800562a:	0010      	movs	r0, r2
 800562c:	f004 fc2a 	bl	8009e84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005630:	4b06      	ldr	r3, [pc, #24]	@ (800564c <HAL_I2C_MspInit+0x198>)
 8005632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005634:	4b05      	ldr	r3, [pc, #20]	@ (800564c <HAL_I2C_MspInit+0x198>)
 8005636:	2180      	movs	r1, #128	@ 0x80
 8005638:	03c9      	lsls	r1, r1, #15
 800563a:	430a      	orrs	r2, r1
 800563c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800563e:	46c0      	nop			@ (mov r8, r8)
 8005640:	46bd      	mov	sp, r7
 8005642:	b00b      	add	sp, #44	@ 0x2c
 8005644:	bd90      	pop	{r4, r7, pc}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	40005400 	.word	0x40005400
 800564c:	40021000 	.word	0x40021000
 8005650:	50000400 	.word	0x50000400
 8005654:	20000b9c 	.word	0x20000b9c
 8005658:	40020030 	.word	0x40020030
 800565c:	20000be4 	.word	0x20000be4
 8005660:	4002001c 	.word	0x4002001c
 8005664:	40005800 	.word	0x40005800

08005668 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800566c:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <MX_I2S2_Init+0x48>)
 800566e:	4a11      	ldr	r2, [pc, #68]	@ (80056b4 <MX_I2S2_Init+0x4c>)
 8005670:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8005672:	4b0f      	ldr	r3, [pc, #60]	@ (80056b0 <MX_I2S2_Init+0x48>)
 8005674:	22c0      	movs	r2, #192	@ 0xc0
 8005676:	0092      	lsls	r2, r2, #2
 8005678:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <MX_I2S2_Init+0x48>)
 800567c:	2210      	movs	r2, #16
 800567e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005680:	4b0b      	ldr	r3, [pc, #44]	@ (80056b0 <MX_I2S2_Init+0x48>)
 8005682:	2205      	movs	r2, #5
 8005684:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005686:	4b0a      	ldr	r3, [pc, #40]	@ (80056b0 <MX_I2S2_Init+0x48>)
 8005688:	2200      	movs	r2, #0
 800568a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800568c:	4b08      	ldr	r3, [pc, #32]	@ (80056b0 <MX_I2S2_Init+0x48>)
 800568e:	22fa      	movs	r2, #250	@ 0xfa
 8005690:	0152      	lsls	r2, r2, #5
 8005692:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005694:	4b06      	ldr	r3, [pc, #24]	@ (80056b0 <MX_I2S2_Init+0x48>)
 8005696:	2208      	movs	r2, #8
 8005698:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800569a:	4b05      	ldr	r3, [pc, #20]	@ (80056b0 <MX_I2S2_Init+0x48>)
 800569c:	0018      	movs	r0, r3
 800569e:	f006 fe7f 	bl	800c3a0 <HAL_I2S_Init>
 80056a2:	1e03      	subs	r3, r0, #0
 80056a4:	d001      	beq.n	80056aa <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80056a6:	f000 f9ed 	bl	8005a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000c2c 	.word	0x20000c2c
 80056b4:	40003800 	.word	0x40003800

080056b8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b089      	sub	sp, #36	@ 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c0:	240c      	movs	r4, #12
 80056c2:	193b      	adds	r3, r7, r4
 80056c4:	0018      	movs	r0, r3
 80056c6:	2314      	movs	r3, #20
 80056c8:	001a      	movs	r2, r3
 80056ca:	2100      	movs	r1, #0
 80056cc:	f011 f98e 	bl	80169ec <memset>
  if(i2sHandle->Instance==SPI2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2d      	ldr	r2, [pc, #180]	@ (800578c <HAL_I2S_MspInit+0xd4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d154      	bne.n	8005784 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80056da:	4b2d      	ldr	r3, [pc, #180]	@ (8005790 <HAL_I2S_MspInit+0xd8>)
 80056dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056de:	4b2c      	ldr	r3, [pc, #176]	@ (8005790 <HAL_I2S_MspInit+0xd8>)
 80056e0:	2180      	movs	r1, #128	@ 0x80
 80056e2:	01c9      	lsls	r1, r1, #7
 80056e4:	430a      	orrs	r2, r1
 80056e6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056e8:	4b29      	ldr	r3, [pc, #164]	@ (8005790 <HAL_I2S_MspInit+0xd8>)
 80056ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ec:	4b28      	ldr	r3, [pc, #160]	@ (8005790 <HAL_I2S_MspInit+0xd8>)
 80056ee:	2102      	movs	r1, #2
 80056f0:	430a      	orrs	r2, r1
 80056f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80056f4:	4b26      	ldr	r3, [pc, #152]	@ (8005790 <HAL_I2S_MspInit+0xd8>)
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	2202      	movs	r2, #2
 80056fa:	4013      	ands	r3, r2
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8005700:	193b      	adds	r3, r7, r4
 8005702:	22b0      	movs	r2, #176	@ 0xb0
 8005704:	0212      	lsls	r2, r2, #8
 8005706:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005708:	0021      	movs	r1, r4
 800570a:	187b      	adds	r3, r7, r1
 800570c:	2202      	movs	r2, #2
 800570e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005710:	187b      	adds	r3, r7, r1
 8005712:	2200      	movs	r2, #0
 8005714:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005716:	187b      	adds	r3, r7, r1
 8005718:	2200      	movs	r2, #0
 800571a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800571c:	187b      	adds	r3, r7, r1
 800571e:	2200      	movs	r2, #0
 8005720:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005722:	187b      	adds	r3, r7, r1
 8005724:	4a1b      	ldr	r2, [pc, #108]	@ (8005794 <HAL_I2S_MspInit+0xdc>)
 8005726:	0019      	movs	r1, r3
 8005728:	0010      	movs	r0, r2
 800572a:	f004 fbab 	bl	8009e84 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800572e:	4b1a      	ldr	r3, [pc, #104]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 8005730:	4a1a      	ldr	r2, [pc, #104]	@ (800579c <HAL_I2S_MspInit+0xe4>)
 8005732:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8005734:	4b18      	ldr	r3, [pc, #96]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 8005736:	2202      	movs	r2, #2
 8005738:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800573a:	4b17      	ldr	r3, [pc, #92]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 800573c:	2200      	movs	r2, #0
 800573e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005740:	4b15      	ldr	r3, [pc, #84]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 8005742:	2200      	movs	r2, #0
 8005744:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005746:	4b14      	ldr	r3, [pc, #80]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 8005748:	2280      	movs	r2, #128	@ 0x80
 800574a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800574c:	4b12      	ldr	r3, [pc, #72]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 800574e:	2280      	movs	r2, #128	@ 0x80
 8005750:	0052      	lsls	r2, r2, #1
 8005752:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005754:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 8005756:	2280      	movs	r2, #128	@ 0x80
 8005758:	00d2      	lsls	r2, r2, #3
 800575a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800575c:	4b0e      	ldr	r3, [pc, #56]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 800575e:	2220      	movs	r2, #32
 8005760:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 8005764:	2200      	movs	r2, #0
 8005766:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005768:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 800576a:	0018      	movs	r0, r3
 800576c:	f004 f8de 	bl	800992c <HAL_DMA_Init>
 8005770:	1e03      	subs	r3, r0, #0
 8005772:	d001      	beq.n	8005778 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8005774:	f000 f986 	bl	8005a84 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a07      	ldr	r2, [pc, #28]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 800577c:	631a      	str	r2, [r3, #48]	@ 0x30
 800577e:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <HAL_I2S_MspInit+0xe0>)
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005784:	46c0      	nop			@ (mov r8, r8)
 8005786:	46bd      	mov	sp, r7
 8005788:	b009      	add	sp, #36	@ 0x24
 800578a:	bd90      	pop	{r4, r7, pc}
 800578c:	40003800 	.word	0x40003800
 8005790:	40021000 	.word	0x40021000
 8005794:	50000400 	.word	0x50000400
 8005798:	20000c68 	.word	0x20000c68
 800579c:	40020044 	.word	0x40020044

080057a0 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a0c      	ldr	r2, [pc, #48]	@ (80057e0 <HAL_I2S_MspDeInit+0x40>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d111      	bne.n	80057d6 <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80057b2:	4b0c      	ldr	r3, [pc, #48]	@ (80057e4 <HAL_I2S_MspDeInit+0x44>)
 80057b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b6:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <HAL_I2S_MspDeInit+0x44>)
 80057b8:	490b      	ldr	r1, [pc, #44]	@ (80057e8 <HAL_I2S_MspDeInit+0x48>)
 80057ba:	400a      	ands	r2, r1
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80057be:	23b0      	movs	r3, #176	@ 0xb0
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	4a0a      	ldr	r2, [pc, #40]	@ (80057ec <HAL_I2S_MspDeInit+0x4c>)
 80057c4:	0019      	movs	r1, r3
 80057c6:	0010      	movs	r0, r2
 80057c8:	f004 fcda 	bl	800a180 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d0:	0018      	movs	r0, r3
 80057d2:	f004 f923 	bl	8009a1c <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	46bd      	mov	sp, r7
 80057da:	b002      	add	sp, #8
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	40003800 	.word	0x40003800
 80057e4:	40021000 	.word	0x40021000
 80057e8:	ffffbfff 	.word	0xffffbfff
 80057ec:	50000400 	.word	0x50000400

080057f0 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  testDone = true;
 80057f4:	4b35      	ldr	r3, [pc, #212]	@ (80058cc <SetTestDone+0xdc>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80057fa:	23fa      	movs	r3, #250	@ 0xfa
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	0018      	movs	r0, r3
 8005800:	f003 fd5a 	bl	80092b8 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005804:	4b32      	ldr	r3, [pc, #200]	@ (80058d0 <SetTestDone+0xe0>)
 8005806:	2201      	movs	r2, #1
 8005808:	2101      	movs	r1, #1
 800580a:	0018      	movs	r0, r3
 800580c:	f004 fd9a 	bl	800a344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005810:	2380      	movs	r3, #128	@ 0x80
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	482e      	ldr	r0, [pc, #184]	@ (80058d0 <SetTestDone+0xe0>)
 8005816:	2201      	movs	r2, #1
 8005818:	0019      	movs	r1, r3
 800581a:	f004 fd93 	bl	800a344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 800581e:	2380      	movs	r3, #128	@ 0x80
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	482b      	ldr	r0, [pc, #172]	@ (80058d0 <SetTestDone+0xe0>)
 8005824:	2200      	movs	r2, #0
 8005826:	0019      	movs	r1, r3
 8005828:	f004 fd8c 	bl	800a344 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 800582c:	2380      	movs	r3, #128	@ 0x80
 800582e:	05db      	lsls	r3, r3, #23
 8005830:	22fa      	movs	r2, #250	@ 0xfa
 8005832:	0112      	lsls	r2, r2, #4
 8005834:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005836:	2380      	movs	r3, #128	@ 0x80
 8005838:	05db      	lsls	r3, r3, #23
 800583a:	22fa      	movs	r2, #250	@ 0xfa
 800583c:	0112      	lsls	r2, r2, #4
 800583e:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 8005840:	2380      	movs	r3, #128	@ 0x80
 8005842:	05db      	lsls	r3, r3, #23
 8005844:	2200      	movs	r2, #0
 8005846:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8005848:	4b22      	ldr	r3, [pc, #136]	@ (80058d4 <SetTestDone+0xe4>)
 800584a:	22fa      	movs	r2, #250	@ 0xfa
 800584c:	0112      	lsls	r2, r2, #4
 800584e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005850:	4b20      	ldr	r3, [pc, #128]	@ (80058d4 <SetTestDone+0xe4>)
 8005852:	22fa      	movs	r2, #250	@ 0xfa
 8005854:	0112      	lsls	r2, r2, #4
 8005856:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 8005858:	4b1e      	ldr	r3, [pc, #120]	@ (80058d4 <SetTestDone+0xe4>)
 800585a:	2200      	movs	r2, #0
 800585c:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 800585e:	23fa      	movs	r3, #250	@ 0xfa
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	0018      	movs	r0, r3
 8005864:	f003 fd28 	bl	80092b8 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005868:	4b19      	ldr	r3, [pc, #100]	@ (80058d0 <SetTestDone+0xe0>)
 800586a:	2201      	movs	r2, #1
 800586c:	2101      	movs	r1, #1
 800586e:	0018      	movs	r0, r3
 8005870:	f004 fd68 	bl	800a344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005874:	2380      	movs	r3, #128	@ 0x80
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	4815      	ldr	r0, [pc, #84]	@ (80058d0 <SetTestDone+0xe0>)
 800587a:	2201      	movs	r2, #1
 800587c:	0019      	movs	r1, r3
 800587e:	f004 fd61 	bl	800a344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005882:	2380      	movs	r3, #128	@ 0x80
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4812      	ldr	r0, [pc, #72]	@ (80058d0 <SetTestDone+0xe0>)
 8005888:	2201      	movs	r2, #1
 800588a:	0019      	movs	r1, r3
 800588c:	f004 fd5a 	bl	800a344 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 8005890:	2380      	movs	r3, #128	@ 0x80
 8005892:	05db      	lsls	r3, r3, #23
 8005894:	22fa      	movs	r2, #250	@ 0xfa
 8005896:	0112      	lsls	r2, r2, #4
 8005898:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800589a:	2380      	movs	r3, #128	@ 0x80
 800589c:	05db      	lsls	r3, r3, #23
 800589e:	22fa      	movs	r2, #250	@ 0xfa
 80058a0:	0112      	lsls	r2, r2, #4
 80058a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80058a4:	2380      	movs	r3, #128	@ 0x80
 80058a6:	05db      	lsls	r3, r3, #23
 80058a8:	22fa      	movs	r2, #250	@ 0xfa
 80058aa:	0112      	lsls	r2, r2, #4
 80058ac:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 80058ae:	4b09      	ldr	r3, [pc, #36]	@ (80058d4 <SetTestDone+0xe4>)
 80058b0:	22fa      	movs	r2, #250	@ 0xfa
 80058b2:	0112      	lsls	r2, r2, #4
 80058b4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80058b6:	4b07      	ldr	r3, [pc, #28]	@ (80058d4 <SetTestDone+0xe4>)
 80058b8:	22fa      	movs	r2, #250	@ 0xfa
 80058ba:	0112      	lsls	r2, r2, #4
 80058bc:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80058be:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <SetTestDone+0xe4>)
 80058c0:	22fa      	movs	r2, #250	@ 0xfa
 80058c2:	0112      	lsls	r2, r2, #4
 80058c4:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000cb0 	.word	0x20000cb0
 80058d0:	50000400 	.word	0x50000400
 80058d4:	40000400 	.word	0x40000400

080058d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058de:	f003 fc7b 	bl	80091d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058e2:	f000 f84b 	bl	800597c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058e6:	f7ff fbd3 	bl	8005090 <MX_GPIO_Init>
  MX_DMA_Init();
 80058ea:	f7ff fb49 	bl	8004f80 <MX_DMA_Init>
  MX_I2C1_Init();
 80058ee:	f7ff fd61 	bl	80053b4 <MX_I2C1_Init>
  MX_I2S2_Init();
 80058f2:	f7ff feb9 	bl	8005668 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80058f6:	f002 ff1b 	bl	8008730 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80058fa:	f7ff fd9b 	bl	8005434 <MX_I2C2_Init>
  MX_TIM2_Init();
 80058fe:	f002 fd99 	bl	8008434 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005902:	f002 fe0b 	bl	800851c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8005906:	f002 ff47 	bl	8008798 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800590a:	f7ff fa87 	bl	8004e1c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800590e:	f00f fd8b 	bl	8015428 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8005912:	f001 f86b 	bl	80069ec <MX_RTC_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8005916:	4a12      	ldr	r2, [pc, #72]	@ (8005960 <main+0x88>)
 8005918:	4b12      	ldr	r3, [pc, #72]	@ (8005964 <main+0x8c>)
 800591a:	0011      	movs	r1, r2
 800591c:	0018      	movs	r0, r3
 800591e:	f7ff fccd 	bl	80052bc <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8005922:	f003 fcbf 	bl	80092a4 <HAL_GetTick>
 8005926:	0003      	movs	r3, r0
 8005928:	22fa      	movs	r2, #250	@ 0xfa
 800592a:	0092      	lsls	r2, r2, #2
 800592c:	4694      	mov	ip, r2
 800592e:	4463      	add	r3, ip
 8005930:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8005932:	2003      	movs	r0, #3
 8005934:	f003 f930 	bl	8008b98 <SetVerboseLevel>
  BinaryReleaseInfo();
 8005938:	f003 f946 	bl	8008bc8 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 800593c:	4b0a      	ldr	r3, [pc, #40]	@ (8005968 <main+0x90>)
 800593e:	4a0b      	ldr	r2, [pc, #44]	@ (800596c <main+0x94>)
 8005940:	490b      	ldr	r1, [pc, #44]	@ (8005970 <main+0x98>)
 8005942:	480c      	ldr	r0, [pc, #48]	@ (8005974 <main+0x9c>)
 8005944:	f7ff fb42 	bl	8004fcc <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone){
 8005948:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <main+0xa0>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d004      	beq.n	800595a <main+0x82>
      UpkeepGadget();
 8005950:	f7ff fb69 	bl	8005026 <UpkeepGadget>
      ESP_Upkeep();
 8005954:	f7fe ffc6 	bl	80048e4 <ESP_Upkeep>
 8005958:	e7f6      	b.n	8005948 <main+0x70>
    }
    else{
      Gadget_Test();
 800595a:	f7ff fb5d 	bl	8005018 <Gadget_Test>
    if(testDone){
 800595e:	e7f3      	b.n	8005948 <main+0x70>
 8005960:	20002674 	.word	0x20002674
 8005964:	20002634 	.word	0x20002634
 8005968:	20000a98 	.word	0x20000a98
 800596c:	2000276c 	.word	0x2000276c
 8005970:	20000c2c 	.word	0x20000c2c
 8005974:	20000af4 	.word	0x20000af4
 8005978:	20000cb0 	.word	0x20000cb0

0800597c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800597c:	b590      	push	{r4, r7, lr}
 800597e:	b09d      	sub	sp, #116	@ 0x74
 8005980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005982:	2438      	movs	r4, #56	@ 0x38
 8005984:	193b      	adds	r3, r7, r4
 8005986:	0018      	movs	r0, r3
 8005988:	2338      	movs	r3, #56	@ 0x38
 800598a:	001a      	movs	r2, r3
 800598c:	2100      	movs	r1, #0
 800598e:	f011 f82d 	bl	80169ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005992:	2324      	movs	r3, #36	@ 0x24
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	0018      	movs	r0, r3
 8005998:	2314      	movs	r3, #20
 800599a:	001a      	movs	r2, r3
 800599c:	2100      	movs	r1, #0
 800599e:	f011 f825 	bl	80169ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80059a2:	003b      	movs	r3, r7
 80059a4:	0018      	movs	r0, r3
 80059a6:	2324      	movs	r3, #36	@ 0x24
 80059a8:	001a      	movs	r2, r3
 80059aa:	2100      	movs	r1, #0
 80059ac:	f011 f81e 	bl	80169ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80059b0:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <SystemClock_Config+0xfc>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a31      	ldr	r2, [pc, #196]	@ (8005a7c <SystemClock_Config+0x100>)
 80059b6:	401a      	ands	r2, r3
 80059b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005a78 <SystemClock_Config+0xfc>)
 80059ba:	2180      	movs	r1, #128	@ 0x80
 80059bc:	0109      	lsls	r1, r1, #4
 80059be:	430a      	orrs	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80059c2:	f008 fe8d 	bl	800e6e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80059c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005a80 <SystemClock_Config+0x104>)
 80059c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005a80 <SystemClock_Config+0x104>)
 80059cc:	492b      	ldr	r1, [pc, #172]	@ (8005a7c <SystemClock_Config+0x100>)
 80059ce:	400a      	ands	r2, r1
 80059d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80059d2:	193b      	adds	r3, r7, r4
 80059d4:	2226      	movs	r2, #38	@ 0x26
 80059d6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80059d8:	193b      	adds	r3, r7, r4
 80059da:	2280      	movs	r2, #128	@ 0x80
 80059dc:	0052      	lsls	r2, r2, #1
 80059de:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059e0:	0021      	movs	r1, r4
 80059e2:	187b      	adds	r3, r7, r1
 80059e4:	2201      	movs	r2, #1
 80059e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80059e8:	187b      	adds	r3, r7, r1
 80059ea:	2210      	movs	r2, #16
 80059ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80059ee:	187b      	adds	r3, r7, r1
 80059f0:	2201      	movs	r2, #1
 80059f2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80059f4:	187b      	adds	r3, r7, r1
 80059f6:	2200      	movs	r2, #0
 80059f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059fa:	187b      	adds	r3, r7, r1
 80059fc:	0018      	movs	r0, r3
 80059fe:	f008 fe7d 	bl	800e6fc <HAL_RCC_OscConfig>
 8005a02:	1e03      	subs	r3, r0, #0
 8005a04:	d001      	beq.n	8005a0a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8005a06:	f000 f83d 	bl	8005a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a0a:	2124      	movs	r1, #36	@ 0x24
 8005a0c:	187b      	adds	r3, r7, r1
 8005a0e:	220f      	movs	r2, #15
 8005a10:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005a12:	187b      	adds	r3, r7, r1
 8005a14:	2201      	movs	r2, #1
 8005a16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a18:	187b      	adds	r3, r7, r1
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a1e:	187b      	adds	r3, r7, r1
 8005a20:	2200      	movs	r2, #0
 8005a22:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a24:	187b      	adds	r3, r7, r1
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005a2a:	187b      	adds	r3, r7, r1
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f009 fa38 	bl	800eea4 <HAL_RCC_ClockConfig>
 8005a34:	1e03      	subs	r3, r0, #0
 8005a36:	d001      	beq.n	8005a3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005a38:	f000 f824 	bl	8005a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005a3c:	003b      	movs	r3, r7
 8005a3e:	2269      	movs	r2, #105	@ 0x69
 8005a40:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005a42:	003b      	movs	r3, r7
 8005a44:	2200      	movs	r2, #0
 8005a46:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005a48:	003b      	movs	r3, r7
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005a4e:	003b      	movs	r3, r7
 8005a50:	2280      	movs	r2, #128	@ 0x80
 8005a52:	0252      	lsls	r2, r2, #9
 8005a54:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005a56:	003b      	movs	r3, r7
 8005a58:	2280      	movs	r2, #128	@ 0x80
 8005a5a:	04d2      	lsls	r2, r2, #19
 8005a5c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a5e:	003b      	movs	r3, r7
 8005a60:	0018      	movs	r0, r3
 8005a62:	f009 fc43 	bl	800f2ec <HAL_RCCEx_PeriphCLKConfig>
 8005a66:	1e03      	subs	r3, r0, #0
 8005a68:	d001      	beq.n	8005a6e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8005a6a:	f000 f80b 	bl	8005a84 <Error_Handler>
  }
}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b01d      	add	sp, #116	@ 0x74
 8005a74:	bd90      	pop	{r4, r7, pc}
 8005a76:	46c0      	nop			@ (mov r8, r8)
 8005a78:	40007000 	.word	0x40007000
 8005a7c:	ffffe7ff 	.word	0xffffe7ff
 8005a80:	40021000 	.word	0x40021000

08005a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a88:	b672      	cpsid	i
}
 8005a8a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a8c:	46c0      	nop			@ (mov r8, r8)
 8005a8e:	e7fd      	b.n	8005a8c <Error_Handler+0x8>

08005a90 <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8005a94:	f7ff fc6f 	bl	8005376 <HT_StartMeasurement>
}
 8005a98:	46c0      	nop			@ (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8005aa4:	4a04      	ldr	r2, [pc, #16]	@ (8005ab8 <HT_IsMeasurementDoneWrapper+0x18>)
 8005aa6:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <HT_IsMeasurementDoneWrapper+0x1c>)
 8005aa8:	0011      	movs	r1, r2
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f7ff fc6a 	bl	8005384 <HT_GetMeasurementValues>
 8005ab0:	0003      	movs	r3, r0
}
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000cb8 	.word	0x20000cb8
 8005abc:	20000cb4 	.word	0x20000cb4

08005ac0 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8005ac4:	f7ff fac7 	bl	8005056 <Gas_StartMeasurement>
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8005ad4:	4b03      	ldr	r3, [pc, #12]	@ (8005ae4 <VOC_IsMeasurementDoneWrapper+0x14>)
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f7ff fac4 	bl	8005064 <Gas_GetMeasurementValues>
 8005adc:	0003      	movs	r3, r0
}
 8005ade:	0018      	movs	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20000cbc 	.word	0x20000cbc

08005ae8 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
}
 8005aec:	46c0      	nop			@ (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8005af2:	b580      	push	{r7, lr}
 8005af4:	af00      	add	r7, sp, #0
  return true;
 8005af6:	2301      	movs	r3, #1
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005afe:	b580      	push	{r7, lr}
 8005b00:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 8005b02:	23fa      	movs	r3, #250	@ 0xfa
 8005b04:	015b      	lsls	r3, r3, #5
 8005b06:	2180      	movs	r1, #128	@ 0x80
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 fbc3 	bl	8006294 <MIC_Start>
}
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8005b18:	f000 fe8c 	bl	8006834 <MIC_MeasurementDone>
 8005b1c:	0003      	movs	r3, r0
}
 8005b1e:	0018      	movs	r0, r3
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <Meas_TestStart>:
void Meas_TestStart(){
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8005b28:	f7ff ffe9 	bl	8005afe <MIC_StartMeasurementWrapper>
}
 8005b2c:	46c0      	nop			@ (mov r8, r8)
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8005b32:	b580      	push	{r7, lr}
 8005b34:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8005b36:	f000 fea1 	bl	800687c <MIC_TestMeasurementDone>
 8005b3a:	0003      	movs	r3, r0
}
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <testInit>:
void testInit(){
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8005b48:	4b07      	ldr	r3, [pc, #28]	@ (8005b68 <testInit+0x24>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8005b4e:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <testInit+0x24>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8005b54:	4b04      	ldr	r3, [pc, #16]	@ (8005b68 <testInit+0x24>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8005b5a:	4b03      	ldr	r3, [pc, #12]	@ (8005b68 <testInit+0x24>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	705a      	strb	r2, [r3, #1]
}
 8005b60:	46c0      	nop			@ (mov r8, r8)
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	20000cf8 	.word	0x20000cf8

08005b6c <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8005b6c:	b5b0      	push	{r4, r5, r7, lr}
 8005b6e:	b092      	sub	sp, #72	@ 0x48
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005b78:	4b74      	ldr	r3, [pc, #464]	@ (8005d4c <Meas_Init+0x1e0>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
  testInit();
 8005b7e:	f7ff ffe1 	bl	8005b44 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005b82:	4b73      	ldr	r3, [pc, #460]	@ (8005d50 <Meas_Init+0x1e4>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <Meas_Init+0x26>
 8005b8a:	4b71      	ldr	r3, [pc, #452]	@ (8005d50 <Meas_Init+0x1e4>)
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d072      	beq.n	8005c78 <Meas_Init+0x10c>
    I2CSensors_Init(sensorI2C);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7ff f8cf 	bl	8004d38 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8005b9a:	f7ff fc03 	bl	80053a4 <HT_DeviceConnected>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4053      	eors	r3, r2
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00c      	beq.n	8005bc6 <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 8005bac:	4a69      	ldr	r2, [pc, #420]	@ (8005d54 <Meas_Init+0x1e8>)
 8005bae:	4b6a      	ldr	r3, [pc, #424]	@ (8005d58 <Meas_Init+0x1ec>)
 8005bb0:	0019      	movs	r1, r3
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	f002 ff74 	bl	8008aa0 <CreateLine>
       MeasTest.HT_Tested = false;
 8005bb8:	4b68      	ldr	r3, [pc, #416]	@ (8005d5c <Meas_Init+0x1f0>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8005bbe:	4b64      	ldr	r3, [pc, #400]	@ (8005d50 <Meas_Init+0x1e4>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	e008      	b.n	8005bd8 <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 8005bc6:	4b65      	ldr	r3, [pc, #404]	@ (8005d5c <Meas_Init+0x1f0>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8005bcc:	4a64      	ldr	r2, [pc, #400]	@ (8005d60 <Meas_Init+0x1f4>)
 8005bce:	4b65      	ldr	r3, [pc, #404]	@ (8005d64 <Meas_Init+0x1f8>)
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	2003      	movs	r0, #3
 8005bd4:	f002 ff64 	bl	8008aa0 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8005bd8:	f7ff fa51 	bl	800507e <Gas_DeviceConnected>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	001a      	movs	r2, r3
 8005be0:	2301      	movs	r3, #1
 8005be2:	4053      	eors	r3, r2
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00c      	beq.n	8005c04 <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 8005bea:	4b5c      	ldr	r3, [pc, #368]	@ (8005d5c <Meas_Init+0x1f0>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8005bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8005d68 <Meas_Init+0x1fc>)
 8005bf2:	4b59      	ldr	r3, [pc, #356]	@ (8005d58 <Meas_Init+0x1ec>)
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f002 ff52 	bl	8008aa0 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
//       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
//       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
       MeasEnabled.VOC_measurementEnabled = false;
 8005bfc:	4b54      	ldr	r3, [pc, #336]	@ (8005d50 <Meas_Init+0x1e4>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	705a      	strb	r2, [r3, #1]
 8005c02:	e008      	b.n	8005c16 <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 8005c04:	4b55      	ldr	r3, [pc, #340]	@ (8005d5c <Meas_Init+0x1f0>)
 8005c06:	2201      	movs	r2, #1
 8005c08:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8005c0a:	4a58      	ldr	r2, [pc, #352]	@ (8005d6c <Meas_Init+0x200>)
 8005c0c:	4b55      	ldr	r3, [pc, #340]	@ (8005d64 <Meas_Init+0x1f8>)
 8005c0e:	0019      	movs	r1, r3
 8005c10:	2003      	movs	r0, #3
 8005c12:	f002 ff45 	bl	8008aa0 <CreateLine>
      // HT Device is connected, turning led on GREEN.
//      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8005c16:	4b51      	ldr	r3, [pc, #324]	@ (8005d5c <Meas_Init+0x1f0>)
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d018      	beq.n	8005c50 <Meas_Init+0xe4>
 8005c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8005d5c <Meas_Init+0x1f0>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d014      	beq.n	8005c50 <Meas_Init+0xe4>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005c26:	4b52      	ldr	r3, [pc, #328]	@ (8005d70 <Meas_Init+0x204>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f004 fb89 	bl	800a344 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8005c32:	2380      	movs	r3, #128	@ 0x80
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	484e      	ldr	r0, [pc, #312]	@ (8005d70 <Meas_Init+0x204>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	0019      	movs	r1, r3
 8005c3c:	f004 fb82 	bl	800a344 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005c40:	2380      	movs	r3, #128	@ 0x80
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	484a      	ldr	r0, [pc, #296]	@ (8005d70 <Meas_Init+0x204>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	0019      	movs	r1, r3
 8005c4a:	f004 fb7b 	bl	800a344 <HAL_GPIO_WritePin>
 8005c4e:	e013      	b.n	8005c78 <Meas_Init+0x10c>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005c50:	4b47      	ldr	r3, [pc, #284]	@ (8005d70 <Meas_Init+0x204>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	2101      	movs	r1, #1
 8005c56:	0018      	movs	r0, r3
 8005c58:	f004 fb74 	bl	800a344 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4843      	ldr	r0, [pc, #268]	@ (8005d70 <Meas_Init+0x204>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	0019      	movs	r1, r3
 8005c66:	f004 fb6d 	bl	800a344 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005c6a:	2380      	movs	r3, #128	@ 0x80
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4840      	ldr	r0, [pc, #256]	@ (8005d70 <Meas_Init+0x204>)
 8005c70:	2201      	movs	r2, #1
 8005c72:	0019      	movs	r1, r3
 8005c74:	f004 fb66 	bl	800a344 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8005c78:	4b35      	ldr	r3, [pc, #212]	@ (8005d50 <Meas_Init+0x1e4>)
 8005c7a:	78db      	ldrb	r3, [r3, #3]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <Meas_Init+0x120>
    MIC_Init(micI2s);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	0018      	movs	r0, r3
 8005c84:	f000 faa0 	bl	80061c8 <MIC_Init>
    Meas_TestStart();
 8005c88:	f7ff ff4c 	bl	8005b24 <Meas_TestStart>
  }
  uint8_t offset = 0;
 8005c8c:	2547      	movs	r5, #71	@ 0x47
 8005c8e:	197b      	adds	r3, r7, r5
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8005c94:	197b      	adds	r3, r7, r5
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	197a      	adds	r2, r7, r5
 8005c9a:	1c59      	adds	r1, r3, #1
 8005c9c:	7011      	strb	r1, [r2, #0]
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d50 <Meas_Init+0x1e4>)
 8005ca0:	7814      	ldrb	r4, [r2, #0]
 8005ca2:	4a34      	ldr	r2, [pc, #208]	@ (8005d74 <Meas_Init+0x208>)
 8005ca4:	0119      	lsls	r1, r3, #4
 8005ca6:	4834      	ldr	r0, [pc, #208]	@ (8005d78 <Meas_Init+0x20c>)
 8005ca8:	5088      	str	r0, [r1, r2]
 8005caa:	4932      	ldr	r1, [pc, #200]	@ (8005d74 <Meas_Init+0x208>)
 8005cac:	011a      	lsls	r2, r3, #4
 8005cae:	188a      	adds	r2, r1, r2
 8005cb0:	3204      	adds	r2, #4
 8005cb2:	4932      	ldr	r1, [pc, #200]	@ (8005d7c <Meas_Init+0x210>)
 8005cb4:	6011      	str	r1, [r2, #0]
 8005cb6:	492f      	ldr	r1, [pc, #188]	@ (8005d74 <Meas_Init+0x208>)
 8005cb8:	011a      	lsls	r2, r3, #4
 8005cba:	188a      	adds	r2, r1, r2
 8005cbc:	3208      	adds	r2, #8
 8005cbe:	4930      	ldr	r1, [pc, #192]	@ (8005d80 <Meas_Init+0x214>)
 8005cc0:	6011      	str	r1, [r2, #0]
 8005cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d74 <Meas_Init+0x208>)
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	18d3      	adds	r3, r2, r3
 8005cc8:	330c      	adds	r3, #12
 8005cca:	1c22      	adds	r2, r4, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8005cce:	197b      	adds	r3, r7, r5
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	197a      	adds	r2, r7, r5
 8005cd4:	1c59      	adds	r1, r3, #1
 8005cd6:	7011      	strb	r1, [r2, #0]
 8005cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d50 <Meas_Init+0x1e4>)
 8005cda:	7854      	ldrb	r4, [r2, #1]
 8005cdc:	4a25      	ldr	r2, [pc, #148]	@ (8005d74 <Meas_Init+0x208>)
 8005cde:	0119      	lsls	r1, r3, #4
 8005ce0:	4828      	ldr	r0, [pc, #160]	@ (8005d84 <Meas_Init+0x218>)
 8005ce2:	5088      	str	r0, [r1, r2]
 8005ce4:	4923      	ldr	r1, [pc, #140]	@ (8005d74 <Meas_Init+0x208>)
 8005ce6:	011a      	lsls	r2, r3, #4
 8005ce8:	188a      	adds	r2, r1, r2
 8005cea:	3204      	adds	r2, #4
 8005cec:	4926      	ldr	r1, [pc, #152]	@ (8005d88 <Meas_Init+0x21c>)
 8005cee:	6011      	str	r1, [r2, #0]
 8005cf0:	4920      	ldr	r1, [pc, #128]	@ (8005d74 <Meas_Init+0x208>)
 8005cf2:	011a      	lsls	r2, r3, #4
 8005cf4:	188a      	adds	r2, r1, r2
 8005cf6:	3208      	adds	r2, #8
 8005cf8:	4924      	ldr	r1, [pc, #144]	@ (8005d8c <Meas_Init+0x220>)
 8005cfa:	6011      	str	r1, [r2, #0]
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d74 <Meas_Init+0x208>)
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	18d3      	adds	r3, r2, r3
 8005d02:	330c      	adds	r3, #12
 8005d04:	1c22      	adds	r2, r4, #0
 8005d06:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8005d08:	197b      	adds	r3, r7, r5
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	197a      	adds	r2, r7, r5
 8005d0e:	1c59      	adds	r1, r3, #1
 8005d10:	7011      	strb	r1, [r2, #0]
 8005d12:	4a0f      	ldr	r2, [pc, #60]	@ (8005d50 <Meas_Init+0x1e4>)
 8005d14:	7894      	ldrb	r4, [r2, #2]
 8005d16:	4a17      	ldr	r2, [pc, #92]	@ (8005d74 <Meas_Init+0x208>)
 8005d18:	0119      	lsls	r1, r3, #4
 8005d1a:	481d      	ldr	r0, [pc, #116]	@ (8005d90 <Meas_Init+0x224>)
 8005d1c:	5088      	str	r0, [r1, r2]
 8005d1e:	4915      	ldr	r1, [pc, #84]	@ (8005d74 <Meas_Init+0x208>)
 8005d20:	011a      	lsls	r2, r3, #4
 8005d22:	188a      	adds	r2, r1, r2
 8005d24:	3204      	adds	r2, #4
 8005d26:	491b      	ldr	r1, [pc, #108]	@ (8005d94 <Meas_Init+0x228>)
 8005d28:	6011      	str	r1, [r2, #0]
 8005d2a:	4912      	ldr	r1, [pc, #72]	@ (8005d74 <Meas_Init+0x208>)
 8005d2c:	011a      	lsls	r2, r3, #4
 8005d2e:	188a      	adds	r2, r1, r2
 8005d30:	3208      	adds	r2, #8
 8005d32:	4919      	ldr	r1, [pc, #100]	@ (8005d98 <Meas_Init+0x22c>)
 8005d34:	6011      	str	r1, [r2, #0]
 8005d36:	4a0f      	ldr	r2, [pc, #60]	@ (8005d74 <Meas_Init+0x208>)
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	18d3      	adds	r3, r2, r3
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	1c22      	adds	r2, r4, #0
 8005d40:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b012      	add	sp, #72	@ 0x48
 8005d48:	bdb0      	pop	{r4, r5, r7, pc}
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	20000cfc 	.word	0x20000cfc
 8005d50:	20000cf4 	.word	0x20000cf4
 8005d54:	08019c9c 	.word	0x08019c9c
 8005d58:	08019ccc 	.word	0x08019ccc
 8005d5c:	20000cf8 	.word	0x20000cf8
 8005d60:	08019cd0 	.word	0x08019cd0
 8005d64:	08019cfc 	.word	0x08019cfc
 8005d68:	08019d00 	.word	0x08019d00
 8005d6c:	08019d1c 	.word	0x08019d1c
 8005d70:	50000400 	.word	0x50000400
 8005d74:	20000cc4 	.word	0x20000cc4
 8005d78:	08005a91 	.word	0x08005a91
 8005d7c:	08005aa1 	.word	0x08005aa1
 8005d80:	20000cc0 	.word	0x20000cc0
 8005d84:	08005ac1 	.word	0x08005ac1
 8005d88:	08005ad1 	.word	0x08005ad1
 8005d8c:	20000cc1 	.word	0x20000cc1
 8005d90:	08005ae9 	.word	0x08005ae9
 8005d94:	08005af3 	.word	0x08005af3
 8005d98:	20000cc2 	.word	0x20000cc2

08005d9c <StartMeasurements>:

void StartMeasurements(void) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005da0:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <StartMeasurements+0x48>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e015      	b.n	8005dd4 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005da8:	4b0e      	ldr	r3, [pc, #56]	@ (8005de4 <StartMeasurements+0x48>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	4a0e      	ldr	r2, [pc, #56]	@ (8005de8 <StartMeasurements+0x4c>)
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	18d3      	adds	r3, r2, r3
 8005db2:	330c      	adds	r3, #12
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d006      	beq.n	8005dc8 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8005dba:	4b0a      	ldr	r3, [pc, #40]	@ (8005de4 <StartMeasurements+0x48>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	001a      	movs	r2, r3
 8005dc0:	4b09      	ldr	r3, [pc, #36]	@ (8005de8 <StartMeasurements+0x4c>)
 8005dc2:	0112      	lsls	r2, r2, #4
 8005dc4:	58d3      	ldr	r3, [r2, r3]
 8005dc6:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005dc8:	4b06      	ldr	r3, [pc, #24]	@ (8005de4 <StartMeasurements+0x48>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	4b04      	ldr	r3, [pc, #16]	@ (8005de4 <StartMeasurements+0x48>)
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	4b03      	ldr	r3, [pc, #12]	@ (8005de4 <StartMeasurements+0x48>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d9e5      	bls.n	8005da8 <StartMeasurements+0xc>
    }
  }
}
 8005ddc:	46c0      	nop			@ (mov r8, r8)
 8005dde:	46c0      	nop			@ (mov r8, r8)
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000cfe 	.word	0x20000cfe
 8005de8:	20000cc4 	.word	0x20000cc4

08005dec <Meas_Test>:

void Meas_Test(){
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8005df0:	4b27      	ldr	r3, [pc, #156]	@ (8005e90 <Meas_Test+0xa4>)
 8005df2:	78db      	ldrb	r3, [r3, #3]
 8005df4:	2201      	movs	r2, #1
 8005df6:	4053      	eors	r3, r2
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <Meas_Test+0x16>
    ESP_WakeTest();
 8005dfe:	f7fe fc5f 	bl	80046c0 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 8005e02:	4b23      	ldr	r3, [pc, #140]	@ (8005e90 <Meas_Test+0xa4>)
 8005e04:	789b      	ldrb	r3, [r3, #2]
 8005e06:	2201      	movs	r2, #1
 8005e08:	4053      	eors	r3, r2
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d023      	beq.n	8005e58 <Meas_Test+0x6c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8005e10:	f7ff fe8f 	bl	8005b32 <MIC_IsTestMeasurementDoneWrapper>
 8005e14:	1e03      	subs	r3, r0, #0
 8005e16:	d011      	beq.n	8005e3c <Meas_Test+0x50>
      MeasTest.MIC_Tested = true;
 8005e18:	4b1d      	ldr	r3, [pc, #116]	@ (8005e90 <Meas_Test+0xa4>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 4000;
 8005e1e:	2380      	movs	r3, #128	@ 0x80
 8005e20:	05db      	lsls	r3, r3, #23
 8005e22:	22fa      	movs	r2, #250	@ 0xfa
 8005e24:	0112      	lsls	r2, r2, #4
 8005e26:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 8005e28:	2380      	movs	r3, #128	@ 0x80
 8005e2a:	05db      	lsls	r3, r3, #23
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8005e30:	2380      	movs	r3, #128	@ 0x80
 8005e32:	05db      	lsls	r3, r3, #23
 8005e34:	22fa      	movs	r2, #250	@ 0xfa
 8005e36:	0112      	lsls	r2, r2, #4
 8005e38:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e3a:	e00d      	b.n	8005e58 <Meas_Test+0x6c>
    }
    else{
      TIM2 -> CCR1 = 0;
 8005e3c:	2380      	movs	r3, #128	@ 0x80
 8005e3e:	05db      	lsls	r3, r3, #23
 8005e40:	2200      	movs	r2, #0
 8005e42:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 8005e44:	2380      	movs	r3, #128	@ 0x80
 8005e46:	05db      	lsls	r3, r3, #23
 8005e48:	22fa      	movs	r2, #250	@ 0xfa
 8005e4a:	0112      	lsls	r2, r2, #4
 8005e4c:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8005e4e:	2380      	movs	r3, #128	@ 0x80
 8005e50:	05db      	lsls	r3, r3, #23
 8005e52:	22fa      	movs	r2, #250	@ 0xfa
 8005e54:	0112      	lsls	r2, r2, #4
 8005e56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8005e58:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <Meas_Test+0xa4>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d013      	beq.n	8005e88 <Meas_Test+0x9c>
 8005e60:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <Meas_Test+0xa4>)
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00f      	beq.n	8005e88 <Meas_Test+0x9c>
 8005e68:	4b09      	ldr	r3, [pc, #36]	@ (8005e90 <Meas_Test+0xa4>)
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <Meas_Test+0x9c>
 8005e70:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <Meas_Test+0xa4>)
 8005e72:	789b      	ldrb	r3, [r3, #2]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <Meas_Test+0x9c>
    Debug("Test completed");
 8005e78:	4a06      	ldr	r2, [pc, #24]	@ (8005e94 <Meas_Test+0xa8>)
 8005e7a:	4b07      	ldr	r3, [pc, #28]	@ (8005e98 <Meas_Test+0xac>)
 8005e7c:	0019      	movs	r1, r3
 8005e7e:	2003      	movs	r0, #3
 8005e80:	f002 fe0e 	bl	8008aa0 <CreateLine>
    SetTestDone();
 8005e84:	f7ff fcb4 	bl	80057f0 <SetTestDone>
  }
}
 8005e88:	46c0      	nop			@ (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	20000cf8 	.word	0x20000cf8
 8005e94:	08019d34 	.word	0x08019d34
 8005e98:	08019cfc 	.word	0x08019cfc

08005e9c <ResetMeasurements>:
void ResetMeasurements(void) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed0 <ResetMeasurements+0x34>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <ResetMeasurements+0x34>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8005eac:	4b08      	ldr	r3, [pc, #32]	@ (8005ed0 <ResetMeasurements+0x34>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8005eb2:	4b07      	ldr	r3, [pc, #28]	@ (8005ed0 <ResetMeasurements+0x34>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <ResetMeasurements+0x34>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8005ebe:	4b04      	ldr	r3, [pc, #16]	@ (8005ed0 <ResetMeasurements+0x34>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005ec4:	4b02      	ldr	r3, [pc, #8]	@ (8005ed0 <ResetMeasurements+0x34>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	73da      	strb	r2, [r3, #15]
}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000cb4 	.word	0x20000cb4

08005ed4 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005ed8:	4b18      	ldr	r3, [pc, #96]	@ (8005f3c <MeasurementsCompleted+0x68>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	e024      	b.n	8005f2a <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005ee0:	4b16      	ldr	r3, [pc, #88]	@ (8005f3c <MeasurementsCompleted+0x68>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	4a16      	ldr	r2, [pc, #88]	@ (8005f40 <MeasurementsCompleted+0x6c>)
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	18d3      	adds	r3, r2, r3
 8005eea:	330c      	adds	r3, #12
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d015      	beq.n	8005f1e <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005ef2:	4b12      	ldr	r3, [pc, #72]	@ (8005f3c <MeasurementsCompleted+0x68>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	4a12      	ldr	r2, [pc, #72]	@ (8005f40 <MeasurementsCompleted+0x6c>)
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	18d3      	adds	r3, r2, r3
 8005efc:	3304      	adds	r3, #4
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4798      	blx	r3
 8005f02:	1e03      	subs	r3, r0, #0
 8005f04:	d009      	beq.n	8005f1a <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005f06:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <MeasurementsCompleted+0x68>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8005f40 <MeasurementsCompleted+0x6c>)
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	18d3      	adds	r3, r2, r3
 8005f10:	3308      	adds	r3, #8
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2201      	movs	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e001      	b.n	8005f1e <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e00a      	b.n	8005f34 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f1e:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <MeasurementsCompleted+0x68>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	3301      	adds	r3, #1
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	4b05      	ldr	r3, [pc, #20]	@ (8005f3c <MeasurementsCompleted+0x68>)
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	4b04      	ldr	r3, [pc, #16]	@ (8005f3c <MeasurementsCompleted+0x68>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d9d6      	bls.n	8005ee0 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8005f32:	2301      	movs	r3, #1
}
 8005f34:	0018      	movs	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	20000cfe 	.word	0x20000cfe
 8005f40:	20000cc4 	.word	0x20000cc4

08005f44 <Mic_Upkeep>:

void Mic_Upkeep(){
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  switch(MicState){
 8005f48:	4b20      	ldr	r3, [pc, #128]	@ (8005fcc <Mic_Upkeep+0x88>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d022      	beq.n	8005f96 <Mic_Upkeep+0x52>
 8005f50:	dc2c      	bgt.n	8005fac <Mic_Upkeep+0x68>
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d00f      	beq.n	8005f76 <Mic_Upkeep+0x32>
 8005f56:	dc29      	bgt.n	8005fac <Mic_Upkeep+0x68>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <Mic_Upkeep+0x1e>
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d004      	beq.n	8005f6a <Mic_Upkeep+0x26>
 8005f60:	e024      	b.n	8005fac <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 8005f62:	4b1a      	ldr	r3, [pc, #104]	@ (8005fcc <Mic_Upkeep+0x88>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
    break;
 8005f68:	e02d      	b.n	8005fc6 <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 8005f6a:	f7ff fdc8 	bl	8005afe <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8005f6e:	4b17      	ldr	r3, [pc, #92]	@ (8005fcc <Mic_Upkeep+0x88>)
 8005f70:	2202      	movs	r2, #2
 8005f72:	701a      	strb	r2, [r3, #0]
    break;
 8005f74:	e027      	b.n	8005fc6 <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 8005f76:	f7ff fdcd 	bl	8005b14 <MIC_IsMeasurementDoneWrapper>
 8005f7a:	1e03      	subs	r3, r0, #0
 8005f7c:	d020      	beq.n	8005fc0 <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 8005f7e:	4b13      	ldr	r3, [pc, #76]	@ (8005fcc <Mic_Upkeep+0x88>)
 8005f80:	2203      	movs	r2, #3
 8005f82:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 8005f84:	f003 f98e 	bl	80092a4 <HAL_GetTick>
 8005f88:	0003      	movs	r3, r0
 8005f8a:	22fa      	movs	r2, #250	@ 0xfa
 8005f8c:	0092      	lsls	r2, r2, #2
 8005f8e:	189a      	adds	r2, r3, r2
 8005f90:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd0 <Mic_Upkeep+0x8c>)
 8005f92:	601a      	str	r2, [r3, #0]
    }
    break;
 8005f94:	e014      	b.n	8005fc0 <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8005f96:	4b0e      	ldr	r3, [pc, #56]	@ (8005fd0 <Mic_Upkeep+0x8c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f002 fd2a 	bl	80089f4 <TimestampIsReached>
 8005fa0:	1e03      	subs	r3, r0, #0
 8005fa2:	d00f      	beq.n	8005fc4 <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 8005fa4:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <Mic_Upkeep+0x88>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005faa:	e00b      	b.n	8005fc4 <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8005fac:	4a09      	ldr	r2, [pc, #36]	@ (8005fd4 <Mic_Upkeep+0x90>)
 8005fae:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <Mic_Upkeep+0x94>)
 8005fb0:	0019      	movs	r1, r3
 8005fb2:	2003      	movs	r0, #3
 8005fb4:	f002 fd74 	bl	8008aa0 <CreateLine>
    MicState = MIC_STATE_INIT;
 8005fb8:	4b04      	ldr	r3, [pc, #16]	@ (8005fcc <Mic_Upkeep+0x88>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
    break;
 8005fbe:	e002      	b.n	8005fc6 <Mic_Upkeep+0x82>
    break;
 8005fc0:	46c0      	nop			@ (mov r8, r8)
 8005fc2:	e000      	b.n	8005fc6 <Mic_Upkeep+0x82>
    break;
 8005fc4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005fc6:	46c0      	nop			@ (mov r8, r8)
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20000cfd 	.word	0x20000cfd
 8005fd0:	20000d04 	.word	0x20000d04
 8005fd4:	08019d44 	.word	0x08019d44
 8005fd8:	08019cfc 	.word	0x08019cfc

08005fdc <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8005fdc:	b5b0      	push	{r4, r5, r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8005fe2:	4b41      	ldr	r3, [pc, #260]	@ (80060e8 <Meas_Upkeep+0x10c>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b06      	cmp	r3, #6
 8005fe8:	d873      	bhi.n	80060d2 <Meas_Upkeep+0xf6>
 8005fea:	009a      	lsls	r2, r3, #2
 8005fec:	4b3f      	ldr	r3, [pc, #252]	@ (80060ec <Meas_Upkeep+0x110>)
 8005fee:	18d3      	adds	r3, r2, r3
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8005ff4:	4a3e      	ldr	r2, [pc, #248]	@ (80060f0 <Meas_Upkeep+0x114>)
 8005ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80060f4 <Meas_Upkeep+0x118>)
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	2003      	movs	r0, #3
 8005ffc:	f002 fd50 	bl	8008aa0 <CreateLine>
    break;
 8006000:	e06e      	b.n	80060e0 <Meas_Upkeep+0x104>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8006002:	f7ff ff4b 	bl	8005e9c <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8006006:	4b38      	ldr	r3, [pc, #224]	@ (80060e8 <Meas_Upkeep+0x10c>)
 8006008:	2201      	movs	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
    break;
 800600c:	e068      	b.n	80060e0 <Meas_Upkeep+0x104>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 800600e:	f7ff fec5 	bl	8005d9c <StartMeasurements>
    TIM2 -> CCR3 = 3000;
 8006012:	2380      	movs	r3, #128	@ 0x80
 8006014:	05db      	lsls	r3, r3, #23
 8006016:	4a38      	ldr	r2, [pc, #224]	@ (80060f8 <Meas_Upkeep+0x11c>)
 8006018:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 800601a:	4b33      	ldr	r3, [pc, #204]	@ (80060e8 <Meas_Upkeep+0x10c>)
 800601c:	2202      	movs	r2, #2
 800601e:	701a      	strb	r2, [r3, #0]
   break;
 8006020:	e05e      	b.n	80060e0 <Meas_Upkeep+0x104>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8006022:	f7ff ff57 	bl	8005ed4 <MeasurementsCompleted>
 8006026:	1e03      	subs	r3, r0, #0
 8006028:	d057      	beq.n	80060da <Meas_Upkeep+0xfe>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 800602a:	4b2f      	ldr	r3, [pc, #188]	@ (80060e8 <Meas_Upkeep+0x10c>)
 800602c:	2203      	movs	r2, #3
 800602e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006030:	e053      	b.n	80060da <Meas_Upkeep+0xfe>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8006032:	4a32      	ldr	r2, [pc, #200]	@ (80060fc <Meas_Upkeep+0x120>)
 8006034:	4b2f      	ldr	r3, [pc, #188]	@ (80060f4 <Meas_Upkeep+0x118>)
 8006036:	0019      	movs	r1, r3
 8006038:	2003      	movs	r0, #3
 800603a:	f002 fd31 	bl	8008aa0 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 800603e:	4b30      	ldr	r3, [pc, #192]	@ (8006100 <Meas_Upkeep+0x124>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	4a30      	ldr	r2, [pc, #192]	@ (8006104 <Meas_Upkeep+0x128>)
 8006044:	492b      	ldr	r1, [pc, #172]	@ (80060f4 <Meas_Upkeep+0x118>)
 8006046:	2003      	movs	r0, #3
 8006048:	f002 fd2a 	bl	8008aa0 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 800604c:	4b2c      	ldr	r3, [pc, #176]	@ (8006100 <Meas_Upkeep+0x124>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	1c18      	adds	r0, r3, #0
 8006052:	f7fd f985 	bl	8003360 <__aeabi_f2d>
 8006056:	0004      	movs	r4, r0
 8006058:	000d      	movs	r5, r1
 800605a:	4b29      	ldr	r3, [pc, #164]	@ (8006100 <Meas_Upkeep+0x124>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	1c18      	adds	r0, r3, #0
 8006060:	f7fd f97e 	bl	8003360 <__aeabi_f2d>
 8006064:	0002      	movs	r2, r0
 8006066:	000b      	movs	r3, r1
 8006068:	4827      	ldr	r0, [pc, #156]	@ (8006108 <Meas_Upkeep+0x12c>)
 800606a:	4922      	ldr	r1, [pc, #136]	@ (80060f4 <Meas_Upkeep+0x118>)
 800606c:	9202      	str	r2, [sp, #8]
 800606e:	9303      	str	r3, [sp, #12]
 8006070:	9400      	str	r4, [sp, #0]
 8006072:	9501      	str	r5, [sp, #4]
 8006074:	0002      	movs	r2, r0
 8006076:	2003      	movs	r0, #3
 8006078:	f002 fd12 	bl	8008aa0 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 800607c:	4b20      	ldr	r3, [pc, #128]	@ (8006100 <Meas_Upkeep+0x124>)
 800607e:	6858      	ldr	r0, [r3, #4]
 8006080:	4b1f      	ldr	r3, [pc, #124]	@ (8006100 <Meas_Upkeep+0x124>)
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	4b1e      	ldr	r3, [pc, #120]	@ (8006100 <Meas_Upkeep+0x124>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	b29b      	uxth	r3, r3
 800608a:	001a      	movs	r2, r3
 800608c:	f7fd fa5e 	bl	800354c <setMeasurement>
    TIM2 -> CCR3 = 4000;
 8006090:	2380      	movs	r3, #128	@ 0x80
 8006092:	05db      	lsls	r3, r3, #23
 8006094:	22fa      	movs	r2, #250	@ 0xfa
 8006096:	0112      	lsls	r2, r2, #4
 8006098:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasStamp = HAL_GetTick() + 10000;
 800609a:	f003 f903 	bl	80092a4 <HAL_GetTick>
 800609e:	0003      	movs	r3, r0
 80060a0:	4a1a      	ldr	r2, [pc, #104]	@ (800610c <Meas_Upkeep+0x130>)
 80060a2:	189a      	adds	r2, r3, r2
 80060a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006110 <Meas_Upkeep+0x134>)
 80060a6:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 80060a8:	4b0f      	ldr	r3, [pc, #60]	@ (80060e8 <Meas_Upkeep+0x10c>)
 80060aa:	2206      	movs	r2, #6
 80060ac:	701a      	strb	r2, [r3, #0]
    break;
 80060ae:	e017      	b.n	80060e0 <Meas_Upkeep+0x104>

  case MEAS_STATE_WAIT:
    Debug("Waiting until next loop");
 80060b0:	4a18      	ldr	r2, [pc, #96]	@ (8006114 <Meas_Upkeep+0x138>)
 80060b2:	4b10      	ldr	r3, [pc, #64]	@ (80060f4 <Meas_Upkeep+0x118>)
 80060b4:	0019      	movs	r1, r3
 80060b6:	2003      	movs	r0, #3
 80060b8:	f002 fcf2 	bl	8008aa0 <CreateLine>
    if(TimestampIsReached(MeasStamp)){
 80060bc:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <Meas_Upkeep+0x134>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	0018      	movs	r0, r3
 80060c2:	f002 fc97 	bl	80089f4 <TimestampIsReached>
 80060c6:	1e03      	subs	r3, r0, #0
 80060c8:	d009      	beq.n	80060de <Meas_Upkeep+0x102>
      MeasState = MEAS_STATE_INIT;
 80060ca:	4b07      	ldr	r3, [pc, #28]	@ (80060e8 <Meas_Upkeep+0x10c>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	701a      	strb	r2, [r3, #0]
    }

    break;
 80060d0:	e005      	b.n	80060de <Meas_Upkeep+0x102>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 80060d2:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <Meas_Upkeep+0x10c>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
    break;
 80060d8:	e002      	b.n	80060e0 <Meas_Upkeep+0x104>
    break;
 80060da:	46c0      	nop			@ (mov r8, r8)
 80060dc:	e000      	b.n	80060e0 <Meas_Upkeep+0x104>
    break;
 80060de:	46c0      	nop			@ (mov r8, r8)
  }
}
 80060e0:	46c0      	nop			@ (mov r8, r8)
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bdb0      	pop	{r4, r5, r7, pc}
 80060e6:	46c0      	nop			@ (mov r8, r8)
 80060e8:	20000cfc 	.word	0x20000cfc
 80060ec:	0801a370 	.word	0x0801a370
 80060f0:	08019d64 	.word	0x08019d64
 80060f4:	08019cfc 	.word	0x08019cfc
 80060f8:	00000bb8 	.word	0x00000bb8
 80060fc:	08019d84 	.word	0x08019d84
 8006100:	20000cb4 	.word	0x20000cb4
 8006104:	08019d98 	.word	0x08019d98
 8006108:	08019db0 	.word	0x08019db0
 800610c:	00002710 	.word	0x00002710
 8006110:	20000d00 	.word	0x20000d00
 8006114:	08019de4 	.word	0x08019de4

08006118 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	1d3b      	adds	r3, r7, #4
 8006120:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8006122:	240f      	movs	r4, #15
 8006124:	193b      	adds	r3, r7, r4
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 800612a:	4b20      	ldr	r3, [pc, #128]	@ (80061ac <Meas_SetEnabledSensors+0x94>)
 800612c:	1d3a      	adds	r2, r7, #4
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8006132:	193b      	adds	r3, r7, r4
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	193a      	adds	r2, r7, r4
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	7011      	strb	r1, [r2, #0]
 800613c:	0018      	movs	r0, r3
 800613e:	1d3b      	adds	r3, r7, #4
 8006140:	7819      	ldrb	r1, [r3, #0]
 8006142:	4a1b      	ldr	r2, [pc, #108]	@ (80061b0 <Meas_SetEnabledSensors+0x98>)
 8006144:	0103      	lsls	r3, r0, #4
 8006146:	18d3      	adds	r3, r2, r3
 8006148:	330c      	adds	r3, #12
 800614a:	1c0a      	adds	r2, r1, #0
 800614c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 800614e:	193b      	adds	r3, r7, r4
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	193a      	adds	r2, r7, r4
 8006154:	1c59      	adds	r1, r3, #1
 8006156:	7011      	strb	r1, [r2, #0]
 8006158:	0018      	movs	r0, r3
 800615a:	1d3b      	adds	r3, r7, #4
 800615c:	7859      	ldrb	r1, [r3, #1]
 800615e:	4a14      	ldr	r2, [pc, #80]	@ (80061b0 <Meas_SetEnabledSensors+0x98>)
 8006160:	0103      	lsls	r3, r0, #4
 8006162:	18d3      	adds	r3, r2, r3
 8006164:	330c      	adds	r3, #12
 8006166:	1c0a      	adds	r2, r1, #0
 8006168:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 800616a:	193b      	adds	r3, r7, r4
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	193a      	adds	r2, r7, r4
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	7011      	strb	r1, [r2, #0]
 8006174:	0018      	movs	r0, r3
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	7899      	ldrb	r1, [r3, #2]
 800617a:	4a0d      	ldr	r2, [pc, #52]	@ (80061b0 <Meas_SetEnabledSensors+0x98>)
 800617c:	0103      	lsls	r3, r0, #4
 800617e:	18d3      	adds	r3, r2, r3
 8006180:	330c      	adds	r3, #12
 8006182:	1c0a      	adds	r2, r1, #0
 8006184:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8006186:	193b      	adds	r3, r7, r4
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	193a      	adds	r2, r7, r4
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	7011      	strb	r1, [r2, #0]
 8006190:	0018      	movs	r0, r3
 8006192:	1d3b      	adds	r3, r7, #4
 8006194:	78d9      	ldrb	r1, [r3, #3]
 8006196:	4a06      	ldr	r2, [pc, #24]	@ (80061b0 <Meas_SetEnabledSensors+0x98>)
 8006198:	0103      	lsls	r3, r0, #4
 800619a:	18d3      	adds	r3, r2, r3
 800619c:	330c      	adds	r3, #12
 800619e:	1c0a      	adds	r2, r1, #0
 80061a0:	701a      	strb	r2, [r3, #0]
}
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b005      	add	sp, #20
 80061a8:	bd90      	pop	{r4, r7, pc}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	20000cf4 	.word	0x20000cf4
 80061b0:	20000cc4 	.word	0x20000cc4

080061b4 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 80061b8:	4b02      	ldr	r3, [pc, #8]	@ (80061c4 <SetESPMeasurementDone+0x10>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	70da      	strb	r2, [r3, #3]
}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000cf8 	.word	0x20000cf8

080061c8 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	4b03      	ldr	r3, [pc, #12]	@ (80061e0 <MIC_Init+0x18>)
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	46c0      	nop			@ (mov r8, r8)
 80061d8:	46bd      	mov	sp, r7
 80061da:	b002      	add	sp, #8
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	46c0      	nop			@ (mov r8, r8)
 80061e0:	20000d08 	.word	0x20000d08

080061e4 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 80061ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006220 <UpdateSampleRate+0x3c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d00e      	beq.n	8006216 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 80061f8:	4b09      	ldr	r3, [pc, #36]	@ (8006220 <UpdateSampleRate+0x3c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f006 f9c1 	bl	800c584 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006202:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <UpdateSampleRate+0x3c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 800620a:	4b05      	ldr	r3, [pc, #20]	@ (8006220 <UpdateSampleRate+0x3c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	0018      	movs	r0, r3
 8006210:	f006 f8c6 	bl	800c3a0 <HAL_I2S_Init>
 8006214:	e000      	b.n	8006218 <UpdateSampleRate+0x34>
    return;
 8006216:	46c0      	nop			@ (mov r8, r8)
}
 8006218:	46bd      	mov	sp, r7
 800621a:	b002      	add	sp, #8
 800621c:	bd80      	pop	{r7, pc}
 800621e:	46c0      	nop			@ (mov r8, r8)
 8006220:	20000d08 	.word	0x20000d08

08006224 <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 800622c:	4b18      	ldr	r3, [pc, #96]	@ (8006290 <ConvertAudio+0x6c>)
 800622e:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	5e9b      	ldrsh	r3, [r3, r2]
 800623e:	025b      	lsls	r3, r3, #9
 8006240:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3302      	adds	r3, #2
 8006246:	2200      	movs	r2, #0
 8006248:	5e9b      	ldrsh	r3, [r3, r2]
 800624a:	11db      	asrs	r3, r3, #7
 800624c:	05db      	lsls	r3, r3, #23
 800624e:	0ddb      	lsrs	r3, r3, #23
 8006250:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	2380      	movs	r3, #128	@ 0x80
 800625e:	041b      	lsls	r3, r3, #16
 8006260:	4013      	ands	r3, r2
 8006262:	d004      	beq.n	800626e <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	22ff      	movs	r2, #255	@ 0xff
 8006268:	0612      	lsls	r2, r2, #24
 800626a:	4313      	orrs	r3, r2
 800626c:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006272:	68b8      	ldr	r0, [r7, #8]
 8006274:	f7fb f92a 	bl	80014cc <__aeabi_i2f>
 8006278:	1c03      	adds	r3, r0, #0
 800627a:	69b9      	ldr	r1, [r7, #24]
 800627c:	1c18      	adds	r0, r3, #0
 800627e:	f7fa fc27 	bl	8000ad0 <__aeabi_fdiv>
 8006282:	1c03      	adds	r3, r0, #0
 8006284:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006286:	697b      	ldr	r3, [r7, #20]
}
 8006288:	1c18      	adds	r0, r3, #0
 800628a:	46bd      	mov	sp, r7
 800628c:	b008      	add	sp, #32
 800628e:	bd80      	pop	{r7, pc}
 8006290:	4afffffe 	.word	0x4afffffe

08006294 <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006294:	b5b0      	push	{r4, r5, r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	000a      	movs	r2, r1
 800629e:	1cbb      	adds	r3, r7, #2
 80062a0:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 80062a2:	4b20      	ldr	r3, [pc, #128]	@ (8006324 <MIC_Start+0x90>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 80062aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006328 <MIC_Start+0x94>)
 80062ac:	4b1f      	ldr	r3, [pc, #124]	@ (800632c <MIC_Start+0x98>)
 80062ae:	0019      	movs	r1, r3
 80062b0:	2001      	movs	r0, #1
 80062b2:	f002 fbf5 	bl	8008aa0 <CreateLine>
    return;
 80062b6:	e031      	b.n	800631c <MIC_Start+0x88>
  }
  TIM2 -> CCR1 = 3000;
 80062b8:	2380      	movs	r3, #128	@ 0x80
 80062ba:	05db      	lsls	r3, r3, #23
 80062bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006330 <MIC_Start+0x9c>)
 80062be:	635a      	str	r2, [r3, #52]	@ 0x34
  Debug("In mic start");
 80062c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006334 <MIC_Start+0xa0>)
 80062c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006338 <MIC_Start+0xa4>)
 80062c4:	0019      	movs	r1, r3
 80062c6:	2003      	movs	r0, #3
 80062c8:	f002 fbea 	bl	8008aa0 <CreateLine>
  UpdateSampleRate(sampleRate);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f7ff ff88 	bl	80061e4 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 80062d4:	4b19      	ldr	r3, [pc, #100]	@ (800633c <MIC_Start+0xa8>)
 80062d6:	1cba      	adds	r2, r7, #2
 80062d8:	8812      	ldrh	r2, [r2, #0]
 80062da:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 80062dc:	f002 ffe2 	bl	80092a4 <HAL_GetTick>
 80062e0:	0003      	movs	r3, r0
 80062e2:	3314      	adds	r3, #20
 80062e4:	001a      	movs	r2, r3
 80062e6:	4b16      	ldr	r3, [pc, #88]	@ (8006340 <MIC_Start+0xac>)
 80062e8:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 80062ea:	4b16      	ldr	r3, [pc, #88]	@ (8006344 <MIC_Start+0xb0>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 80062f0:	4b15      	ldr	r3, [pc, #84]	@ (8006348 <MIC_Start+0xb4>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 80062f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006324 <MIC_Start+0x90>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	250f      	movs	r5, #15
 80062fc:	197c      	adds	r4, r7, r5
 80062fe:	2280      	movs	r2, #128	@ 0x80
 8006300:	00d2      	lsls	r2, r2, #3
 8006302:	4912      	ldr	r1, [pc, #72]	@ (800634c <MIC_Start+0xb8>)
 8006304:	0018      	movs	r0, r3
 8006306:	f006 f969 	bl	800c5dc <HAL_I2S_Receive_DMA>
 800630a:	0003      	movs	r3, r0
 800630c:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 800630e:	197b      	adds	r3, r7, r5
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	4a0f      	ldr	r2, [pc, #60]	@ (8006350 <MIC_Start+0xbc>)
 8006314:	490f      	ldr	r1, [pc, #60]	@ (8006354 <MIC_Start+0xc0>)
 8006316:	2002      	movs	r0, #2
 8006318:	f002 fbc2 	bl	8008aa0 <CreateLine>
}
 800631c:	46bd      	mov	sp, r7
 800631e:	b004      	add	sp, #16
 8006320:	bdb0      	pop	{r4, r5, r7, pc}
 8006322:	46c0      	nop			@ (mov r8, r8)
 8006324:	20000d08 	.word	0x20000d08
 8006328:	08019dfc 	.word	0x08019dfc
 800632c:	08019e1c 	.word	0x08019e1c
 8006330:	00000bb8 	.word	0x00000bb8
 8006334:	08019e20 	.word	0x08019e20
 8006338:	08019e30 	.word	0x08019e30
 800633c:	20000110 	.word	0x20000110
 8006340:	20001d0c 	.word	0x20001d0c
 8006344:	20001d10 	.word	0x20001d10
 8006348:	20001d11 	.word	0x20001d11
 800634c:	20000d0c 	.word	0x20000d0c
 8006350:	08019e34 	.word	0x08019e34
 8006354:	08019e40 	.word	0x08019e40

08006358 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	0002      	movs	r2, r0
 8006360:	1dbb      	adds	r3, r7, #6
 8006362:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006364:	23fe      	movs	r3, #254	@ 0xfe
 8006366:	059b      	lsls	r3, r3, #22
 8006368:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 800636a:	230a      	movs	r3, #10
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	2200      	movs	r2, #0
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e01c      	b.n	80063ae <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006374:	240a      	movs	r4, #10
 8006376:	193b      	adds	r3, r7, r4
 8006378:	2200      	movs	r2, #0
 800637a:	5e9a      	ldrsh	r2, [r3, r2]
 800637c:	4b12      	ldr	r3, [pc, #72]	@ (80063c8 <MinimalValue+0x70>)
 800637e:	0092      	lsls	r2, r2, #2
 8006380:	58d3      	ldr	r3, [r2, r3]
 8006382:	1c19      	adds	r1, r3, #0
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f7fa f8b5 	bl	80004f4 <__aeabi_fcmpgt>
 800638a:	1e03      	subs	r3, r0, #0
 800638c:	d006      	beq.n	800639c <MinimalValue+0x44>
      MinVal = sample[i];
 800638e:	193b      	adds	r3, r7, r4
 8006390:	2200      	movs	r2, #0
 8006392:	5e9a      	ldrsh	r2, [r3, r2]
 8006394:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <MinimalValue+0x70>)
 8006396:	0092      	lsls	r2, r2, #2
 8006398:	58d3      	ldr	r3, [r2, r3]
 800639a:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 800639c:	210a      	movs	r1, #10
 800639e:	187b      	adds	r3, r7, r1
 80063a0:	2200      	movs	r2, #0
 80063a2:	5e9b      	ldrsh	r3, [r3, r2]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3301      	adds	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	187b      	adds	r3, r7, r1
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	230a      	movs	r3, #10
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	2200      	movs	r2, #0
 80063b4:	5e9a      	ldrsh	r2, [r3, r2]
 80063b6:	1dbb      	adds	r3, r7, #6
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	dbda      	blt.n	8006374 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 80063be:	68fb      	ldr	r3, [r7, #12]
}
 80063c0:	1c18      	adds	r0, r3, #0
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b005      	add	sp, #20
 80063c6:	bd90      	pop	{r4, r7, pc}
 80063c8:	20001d48 	.word	0x20001d48

080063cc <MaximalValue>:

float MaximalValue(uint16_t length){
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	0002      	movs	r2, r0
 80063d4:	1dbb      	adds	r3, r7, #6
 80063d6:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 80063d8:	4b18      	ldr	r3, [pc, #96]	@ (800643c <MaximalValue+0x70>)
 80063da:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 80063dc:	230a      	movs	r3, #10
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	2200      	movs	r2, #0
 80063e2:	801a      	strh	r2, [r3, #0]
 80063e4:	e01c      	b.n	8006420 <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 80063e6:	240a      	movs	r4, #10
 80063e8:	193b      	adds	r3, r7, r4
 80063ea:	2200      	movs	r2, #0
 80063ec:	5e9a      	ldrsh	r2, [r3, r2]
 80063ee:	4b14      	ldr	r3, [pc, #80]	@ (8006440 <MaximalValue+0x74>)
 80063f0:	0092      	lsls	r2, r2, #2
 80063f2:	58d3      	ldr	r3, [r2, r3]
 80063f4:	1c19      	adds	r1, r3, #0
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7fa f868 	bl	80004cc <__aeabi_fcmplt>
 80063fc:	1e03      	subs	r3, r0, #0
 80063fe:	d006      	beq.n	800640e <MaximalValue+0x42>
      MaxVal = sample[i];
 8006400:	193b      	adds	r3, r7, r4
 8006402:	2200      	movs	r2, #0
 8006404:	5e9a      	ldrsh	r2, [r3, r2]
 8006406:	4b0e      	ldr	r3, [pc, #56]	@ (8006440 <MaximalValue+0x74>)
 8006408:	0092      	lsls	r2, r2, #2
 800640a:	58d3      	ldr	r3, [r2, r3]
 800640c:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 800640e:	210a      	movs	r1, #10
 8006410:	187b      	adds	r3, r7, r1
 8006412:	2200      	movs	r2, #0
 8006414:	5e9b      	ldrsh	r3, [r3, r2]
 8006416:	b29b      	uxth	r3, r3
 8006418:	3301      	adds	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	187b      	adds	r3, r7, r1
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	230a      	movs	r3, #10
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	2200      	movs	r2, #0
 8006426:	5e9a      	ldrsh	r2, [r3, r2]
 8006428:	1dbb      	adds	r3, r7, #6
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	dbda      	blt.n	80063e6 <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8006430:	68fb      	ldr	r3, [r7, #12]
}
 8006432:	1c18      	adds	r0, r3, #0
 8006434:	46bd      	mov	sp, r7
 8006436:	b005      	add	sp, #20
 8006438:	bd90      	pop	{r4, r7, pc}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	bf800000 	.word	0xbf800000
 8006440:	20001d48 	.word	0x20001d48

08006444 <MIC_Check>:
bool MIC_Check(void) {
 8006444:	b5b0      	push	{r4, r5, r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 800644a:	4a25      	ldr	r2, [pc, #148]	@ (80064e0 <MIC_Check+0x9c>)
 800644c:	4b25      	ldr	r3, [pc, #148]	@ (80064e4 <MIC_Check+0xa0>)
 800644e:	0019      	movs	r1, r3
 8006450:	2002      	movs	r0, #2
 8006452:	f002 fb25 	bl	8008aa0 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006456:	230e      	movs	r3, #14
 8006458:	18fb      	adds	r3, r7, r3
 800645a:	2200      	movs	r2, #0
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	e016      	b.n	800648e <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006460:	210e      	movs	r1, #14
 8006462:	187b      	adds	r3, r7, r1
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	3302      	adds	r3, #2
 800646a:	005a      	lsls	r2, r3, #1
 800646c:	4b1e      	ldr	r3, [pc, #120]	@ (80064e8 <MIC_Check+0xa4>)
 800646e:	18d2      	adds	r2, r2, r3
 8006470:	000d      	movs	r5, r1
 8006472:	187b      	adds	r3, r7, r1
 8006474:	881c      	ldrh	r4, [r3, #0]
 8006476:	0010      	movs	r0, r2
 8006478:	f7ff fed4 	bl	8006224 <ConvertAudio>
 800647c:	1c01      	adds	r1, r0, #0
 800647e:	4b1b      	ldr	r3, [pc, #108]	@ (80064ec <MIC_Check+0xa8>)
 8006480:	00a2      	lsls	r2, r4, #2
 8006482:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006484:	197b      	adds	r3, r7, r5
 8006486:	197a      	adds	r2, r7, r5
 8006488:	8812      	ldrh	r2, [r2, #0]
 800648a:	3201      	adds	r2, #1
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	230e      	movs	r3, #14
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	881a      	ldrh	r2, [r3, #0]
 8006494:	2380      	movs	r3, #128	@ 0x80
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	429a      	cmp	r2, r3
 800649a:	d3e1      	bcc.n	8006460 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 800649c:	2380      	movs	r3, #128	@ 0x80
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	0018      	movs	r0, r3
 80064a2:	f7ff ff93 	bl	80063cc <MaximalValue>
 80064a6:	1c03      	adds	r3, r0, #0
 80064a8:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 80064aa:	2380      	movs	r3, #128	@ 0x80
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	0018      	movs	r0, r3
 80064b0:	f7ff ff52 	bl	8006358 <MinimalValue>
 80064b4:	1c03      	adds	r3, r0, #0
 80064b6:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 80064b8:	2100      	movs	r1, #0
 80064ba:	68b8      	ldr	r0, [r7, #8]
 80064bc:	f7fa f81a 	bl	80004f4 <__aeabi_fcmpgt>
 80064c0:	1e03      	subs	r3, r0, #0
 80064c2:	d105      	bne.n	80064d0 <MIC_Check+0x8c>
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fa f800 	bl	80004cc <__aeabi_fcmplt>
 80064cc:	1e03      	subs	r3, r0, #0
 80064ce:	d001      	beq.n	80064d4 <MIC_Check+0x90>
    return(true);
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <MIC_Check+0x92>
  }
  return(false);
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	0018      	movs	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	b004      	add	sp, #16
 80064dc:	bdb0      	pop	{r4, r5, r7, pc}
 80064de:	46c0      	nop			@ (mov r8, r8)
 80064e0:	08019e44 	.word	0x08019e44
 80064e4:	08019e40 	.word	0x08019e40
 80064e8:	20000d0c 	.word	0x20000d0c
 80064ec:	20001d48 	.word	0x20001d48

080064f0 <MIC_Print>:
void MIC_Print(void) {
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
  Info("New samples");
 80064f6:	4abe      	ldr	r2, [pc, #760]	@ (80067f0 <MIC_Print+0x300>)
 80064f8:	4bbe      	ldr	r3, [pc, #760]	@ (80067f4 <MIC_Print+0x304>)
 80064fa:	0019      	movs	r1, r3
 80064fc:	2002      	movs	r0, #2
 80064fe:	f002 facf 	bl	8008aa0 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006502:	1dbb      	adds	r3, r7, #6
 8006504:	2200      	movs	r2, #0
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	e014      	b.n	8006534 <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 800650a:	1dbb      	adds	r3, r7, #6
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	3302      	adds	r3, #2
 8006512:	005a      	lsls	r2, r3, #1
 8006514:	4bb8      	ldr	r3, [pc, #736]	@ (80067f8 <MIC_Print+0x308>)
 8006516:	18d2      	adds	r2, r2, r3
 8006518:	1dbb      	adds	r3, r7, #6
 800651a:	881c      	ldrh	r4, [r3, #0]
 800651c:	0010      	movs	r0, r2
 800651e:	f7ff fe81 	bl	8006224 <ConvertAudio>
 8006522:	1c01      	adds	r1, r0, #0
 8006524:	4bb5      	ldr	r3, [pc, #724]	@ (80067fc <MIC_Print+0x30c>)
 8006526:	00a2      	lsls	r2, r4, #2
 8006528:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800652a:	1dbb      	adds	r3, r7, #6
 800652c:	1dba      	adds	r2, r7, #6
 800652e:	8812      	ldrh	r2, [r2, #0]
 8006530:	3201      	adds	r2, #1
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	1dbb      	adds	r3, r7, #6
 8006536:	881a      	ldrh	r2, [r3, #0]
 8006538:	2380      	movs	r3, #128	@ 0x80
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	429a      	cmp	r2, r3
 800653e:	d3e4      	bcc.n	800650a <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 8006540:	f000 f9e6 	bl	8006910 <MIC_GetDB>
 8006544:	1c02      	adds	r2, r0, #0
 8006546:	4bae      	ldr	r3, [pc, #696]	@ (8006800 <MIC_Print+0x310>)
 8006548:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 800654a:	4bae      	ldr	r3, [pc, #696]	@ (8006804 <MIC_Print+0x314>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b09      	cmp	r3, #9
 8006550:	d80e      	bhi.n	8006570 <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 8006552:	4bac      	ldr	r3, [pc, #688]	@ (8006804 <MIC_Print+0x314>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	001a      	movs	r2, r3
 8006558:	4ba9      	ldr	r3, [pc, #676]	@ (8006800 <MIC_Print+0x310>)
 800655a:	6819      	ldr	r1, [r3, #0]
 800655c:	4baa      	ldr	r3, [pc, #680]	@ (8006808 <MIC_Print+0x318>)
 800655e:	0092      	lsls	r2, r2, #2
 8006560:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006562:	4ba8      	ldr	r3, [pc, #672]	@ (8006804 <MIC_Print+0x314>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	3301      	adds	r3, #1
 8006568:	b2da      	uxtb	r2, r3
 800656a:	4ba6      	ldr	r3, [pc, #664]	@ (8006804 <MIC_Print+0x314>)
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e013      	b.n	8006598 <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 8006570:	4ba4      	ldr	r3, [pc, #656]	@ (8006804 <MIC_Print+0x314>)
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8006576:	4ba3      	ldr	r3, [pc, #652]	@ (8006804 <MIC_Print+0x314>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	001a      	movs	r2, r3
 800657c:	4ba0      	ldr	r3, [pc, #640]	@ (8006800 <MIC_Print+0x310>)
 800657e:	6819      	ldr	r1, [r3, #0]
 8006580:	4ba1      	ldr	r3, [pc, #644]	@ (8006808 <MIC_Print+0x318>)
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006586:	4b9f      	ldr	r3, [pc, #636]	@ (8006804 <MIC_Print+0x314>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	b2da      	uxtb	r2, r3
 800658e:	4b9d      	ldr	r3, [pc, #628]	@ (8006804 <MIC_Print+0x314>)
 8006590:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8006592:	4b9e      	ldr	r3, [pc, #632]	@ (800680c <MIC_Print+0x31c>)
 8006594:	2201      	movs	r2, #1
 8006596:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8006598:	4b9c      	ldr	r3, [pc, #624]	@ (800680c <MIC_Print+0x31c>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2201      	movs	r2, #1
 800659e:	4053      	eors	r3, r2
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <MIC_Print+0xc2>
    setMic(dBc);
 80065a6:	4b96      	ldr	r3, [pc, #600]	@ (8006800 <MIC_Print+0x310>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	1c18      	adds	r0, r3, #0
 80065ac:	f7fc ffea 	bl	8003584 <setMic>
 80065b0:	e02d      	b.n	800660e <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 80065b2:	4b97      	ldr	r3, [pc, #604]	@ (8006810 <MIC_Print+0x320>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 80065b8:	1d7b      	adds	r3, r7, #5
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e013      	b.n	80065e8 <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 80065c0:	1d7b      	adds	r3, r7, #5
 80065c2:	781a      	ldrb	r2, [r3, #0]
 80065c4:	4b90      	ldr	r3, [pc, #576]	@ (8006808 <MIC_Print+0x318>)
 80065c6:	0092      	lsls	r2, r2, #2
 80065c8:	58d2      	ldr	r2, [r2, r3]
 80065ca:	4b91      	ldr	r3, [pc, #580]	@ (8006810 <MIC_Print+0x320>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	1c19      	adds	r1, r3, #0
 80065d0:	1c10      	adds	r0, r2, #0
 80065d2:	f7fa f8f3 	bl	80007bc <__aeabi_fadd>
 80065d6:	1c03      	adds	r3, r0, #0
 80065d8:	1c1a      	adds	r2, r3, #0
 80065da:	4b8d      	ldr	r3, [pc, #564]	@ (8006810 <MIC_Print+0x320>)
 80065dc:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 80065de:	1d7b      	adds	r3, r7, #5
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	1d7b      	adds	r3, r7, #5
 80065e4:	3201      	adds	r2, #1
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	1d7b      	adds	r3, r7, #5
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d9e7      	bls.n	80065c0 <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 80065f0:	4b87      	ldr	r3, [pc, #540]	@ (8006810 <MIC_Print+0x320>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4987      	ldr	r1, [pc, #540]	@ (8006814 <MIC_Print+0x324>)
 80065f6:	1c18      	adds	r0, r3, #0
 80065f8:	f7fa fa6a 	bl	8000ad0 <__aeabi_fdiv>
 80065fc:	1c03      	adds	r3, r0, #0
 80065fe:	1c1a      	adds	r2, r3, #0
 8006600:	4b83      	ldr	r3, [pc, #524]	@ (8006810 <MIC_Print+0x320>)
 8006602:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 8006604:	4b82      	ldr	r3, [pc, #520]	@ (8006810 <MIC_Print+0x320>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	1c18      	adds	r0, r3, #0
 800660a:	f7fc ffbb 	bl	8003584 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 800660e:	4b7c      	ldr	r3, [pc, #496]	@ (8006800 <MIC_Print+0x310>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4981      	ldr	r1, [pc, #516]	@ (8006818 <MIC_Print+0x328>)
 8006614:	1c18      	adds	r0, r3, #0
 8006616:	f7f9 ff6d 	bl	80004f4 <__aeabi_fcmpgt>
 800661a:	1e03      	subs	r3, r0, #0
 800661c:	d013      	beq.n	8006646 <MIC_Print+0x156>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800661e:	4b7f      	ldr	r3, [pc, #508]	@ (800681c <MIC_Print+0x32c>)
 8006620:	2200      	movs	r2, #0
 8006622:	2101      	movs	r1, #1
 8006624:	0018      	movs	r0, r3
 8006626:	f003 fe8d 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	487b      	ldr	r0, [pc, #492]	@ (800681c <MIC_Print+0x32c>)
 8006630:	2200      	movs	r2, #0
 8006632:	0019      	movs	r1, r3
 8006634:	f003 fe86 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006638:	2380      	movs	r3, #128	@ 0x80
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4877      	ldr	r0, [pc, #476]	@ (800681c <MIC_Print+0x32c>)
 800663e:	2200      	movs	r2, #0
 8006640:	0019      	movs	r1, r3
 8006642:	f003 fe7f 	bl	800a344 <HAL_GPIO_WritePin>
  }
  if(dBc < 85 && dBc >= 80){ //red
 8006646:	4b6e      	ldr	r3, [pc, #440]	@ (8006800 <MIC_Print+0x310>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4973      	ldr	r1, [pc, #460]	@ (8006818 <MIC_Print+0x328>)
 800664c:	1c18      	adds	r0, r3, #0
 800664e:	f7f9 ff3d 	bl	80004cc <__aeabi_fcmplt>
 8006652:	1e03      	subs	r3, r0, #0
 8006654:	d01b      	beq.n	800668e <MIC_Print+0x19e>
 8006656:	4b6a      	ldr	r3, [pc, #424]	@ (8006800 <MIC_Print+0x310>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4971      	ldr	r1, [pc, #452]	@ (8006820 <MIC_Print+0x330>)
 800665c:	1c18      	adds	r0, r3, #0
 800665e:	f7f9 ff53 	bl	8000508 <__aeabi_fcmpge>
 8006662:	1e03      	subs	r3, r0, #0
 8006664:	d013      	beq.n	800668e <MIC_Print+0x19e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006666:	4b6d      	ldr	r3, [pc, #436]	@ (800681c <MIC_Print+0x32c>)
 8006668:	2200      	movs	r2, #0
 800666a:	2101      	movs	r1, #1
 800666c:	0018      	movs	r0, r3
 800666e:	f003 fe69 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006672:	2380      	movs	r3, #128	@ 0x80
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	4869      	ldr	r0, [pc, #420]	@ (800681c <MIC_Print+0x32c>)
 8006678:	2201      	movs	r2, #1
 800667a:	0019      	movs	r1, r3
 800667c:	f003 fe62 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006680:	2380      	movs	r3, #128	@ 0x80
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4865      	ldr	r0, [pc, #404]	@ (800681c <MIC_Print+0x32c>)
 8006686:	2201      	movs	r2, #1
 8006688:	0019      	movs	r1, r3
 800668a:	f003 fe5b 	bl	800a344 <HAL_GPIO_WritePin>
  }
  if(dBc < 80 && dBc >= 75){//purple
 800668e:	4b5c      	ldr	r3, [pc, #368]	@ (8006800 <MIC_Print+0x310>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4963      	ldr	r1, [pc, #396]	@ (8006820 <MIC_Print+0x330>)
 8006694:	1c18      	adds	r0, r3, #0
 8006696:	f7f9 ff19 	bl	80004cc <__aeabi_fcmplt>
 800669a:	1e03      	subs	r3, r0, #0
 800669c:	d01b      	beq.n	80066d6 <MIC_Print+0x1e6>
 800669e:	4b58      	ldr	r3, [pc, #352]	@ (8006800 <MIC_Print+0x310>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4960      	ldr	r1, [pc, #384]	@ (8006824 <MIC_Print+0x334>)
 80066a4:	1c18      	adds	r0, r3, #0
 80066a6:	f7f9 ff2f 	bl	8000508 <__aeabi_fcmpge>
 80066aa:	1e03      	subs	r3, r0, #0
 80066ac:	d013      	beq.n	80066d6 <MIC_Print+0x1e6>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80066ae:	4b5b      	ldr	r3, [pc, #364]	@ (800681c <MIC_Print+0x32c>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	2101      	movs	r1, #1
 80066b4:	0018      	movs	r0, r3
 80066b6:	f003 fe45 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80066ba:	2380      	movs	r3, #128	@ 0x80
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	4857      	ldr	r0, [pc, #348]	@ (800681c <MIC_Print+0x32c>)
 80066c0:	2201      	movs	r2, #1
 80066c2:	0019      	movs	r1, r3
 80066c4:	f003 fe3e 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80066c8:	2380      	movs	r3, #128	@ 0x80
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4853      	ldr	r0, [pc, #332]	@ (800681c <MIC_Print+0x32c>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	0019      	movs	r1, r3
 80066d2:	f003 fe37 	bl	800a344 <HAL_GPIO_WritePin>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 80066d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006800 <MIC_Print+0x310>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4952      	ldr	r1, [pc, #328]	@ (8006824 <MIC_Print+0x334>)
 80066dc:	1c18      	adds	r0, r3, #0
 80066de:	f7f9 fef5 	bl	80004cc <__aeabi_fcmplt>
 80066e2:	1e03      	subs	r3, r0, #0
 80066e4:	d01b      	beq.n	800671e <MIC_Print+0x22e>
 80066e6:	4b46      	ldr	r3, [pc, #280]	@ (8006800 <MIC_Print+0x310>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	494f      	ldr	r1, [pc, #316]	@ (8006828 <MIC_Print+0x338>)
 80066ec:	1c18      	adds	r0, r3, #0
 80066ee:	f7f9 ff0b 	bl	8000508 <__aeabi_fcmpge>
 80066f2:	1e03      	subs	r3, r0, #0
 80066f4:	d013      	beq.n	800671e <MIC_Print+0x22e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80066f6:	4b49      	ldr	r3, [pc, #292]	@ (800681c <MIC_Print+0x32c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	2101      	movs	r1, #1
 80066fc:	0018      	movs	r0, r3
 80066fe:	f003 fe21 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006702:	2380      	movs	r3, #128	@ 0x80
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	4845      	ldr	r0, [pc, #276]	@ (800681c <MIC_Print+0x32c>)
 8006708:	2200      	movs	r2, #0
 800670a:	0019      	movs	r1, r3
 800670c:	f003 fe1a 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006710:	2380      	movs	r3, #128	@ 0x80
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4841      	ldr	r0, [pc, #260]	@ (800681c <MIC_Print+0x32c>)
 8006716:	2201      	movs	r2, #1
 8006718:	0019      	movs	r1, r3
 800671a:	f003 fe13 	bl	800a344 <HAL_GPIO_WritePin>
  }
  if(dBc < 70 && dBc >= 65){//Green
 800671e:	4b38      	ldr	r3, [pc, #224]	@ (8006800 <MIC_Print+0x310>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4941      	ldr	r1, [pc, #260]	@ (8006828 <MIC_Print+0x338>)
 8006724:	1c18      	adds	r0, r3, #0
 8006726:	f7f9 fed1 	bl	80004cc <__aeabi_fcmplt>
 800672a:	1e03      	subs	r3, r0, #0
 800672c:	d01b      	beq.n	8006766 <MIC_Print+0x276>
 800672e:	4b34      	ldr	r3, [pc, #208]	@ (8006800 <MIC_Print+0x310>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	493e      	ldr	r1, [pc, #248]	@ (800682c <MIC_Print+0x33c>)
 8006734:	1c18      	adds	r0, r3, #0
 8006736:	f7f9 fee7 	bl	8000508 <__aeabi_fcmpge>
 800673a:	1e03      	subs	r3, r0, #0
 800673c:	d013      	beq.n	8006766 <MIC_Print+0x276>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800673e:	4b37      	ldr	r3, [pc, #220]	@ (800681c <MIC_Print+0x32c>)
 8006740:	2201      	movs	r2, #1
 8006742:	2101      	movs	r1, #1
 8006744:	0018      	movs	r0, r3
 8006746:	f003 fdfd 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 800674a:	2380      	movs	r3, #128	@ 0x80
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	4833      	ldr	r0, [pc, #204]	@ (800681c <MIC_Print+0x32c>)
 8006750:	2200      	movs	r2, #0
 8006752:	0019      	movs	r1, r3
 8006754:	f003 fdf6 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006758:	2380      	movs	r3, #128	@ 0x80
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	482f      	ldr	r0, [pc, #188]	@ (800681c <MIC_Print+0x32c>)
 800675e:	2201      	movs	r2, #1
 8006760:	0019      	movs	r1, r3
 8006762:	f003 fdef 	bl	800a344 <HAL_GPIO_WritePin>
  }
  if(dBc < 65 && dBc >= 60){//blue
 8006766:	4b26      	ldr	r3, [pc, #152]	@ (8006800 <MIC_Print+0x310>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4930      	ldr	r1, [pc, #192]	@ (800682c <MIC_Print+0x33c>)
 800676c:	1c18      	adds	r0, r3, #0
 800676e:	f7f9 fead 	bl	80004cc <__aeabi_fcmplt>
 8006772:	1e03      	subs	r3, r0, #0
 8006774:	d01b      	beq.n	80067ae <MIC_Print+0x2be>
 8006776:	4b22      	ldr	r3, [pc, #136]	@ (8006800 <MIC_Print+0x310>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	492d      	ldr	r1, [pc, #180]	@ (8006830 <MIC_Print+0x340>)
 800677c:	1c18      	adds	r0, r3, #0
 800677e:	f7f9 fec3 	bl	8000508 <__aeabi_fcmpge>
 8006782:	1e03      	subs	r3, r0, #0
 8006784:	d013      	beq.n	80067ae <MIC_Print+0x2be>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006786:	4b25      	ldr	r3, [pc, #148]	@ (800681c <MIC_Print+0x32c>)
 8006788:	2201      	movs	r2, #1
 800678a:	2101      	movs	r1, #1
 800678c:	0018      	movs	r0, r3
 800678e:	f003 fdd9 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006792:	2380      	movs	r3, #128	@ 0x80
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	4821      	ldr	r0, [pc, #132]	@ (800681c <MIC_Print+0x32c>)
 8006798:	2201      	movs	r2, #1
 800679a:	0019      	movs	r1, r3
 800679c:	f003 fdd2 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80067a0:	2380      	movs	r3, #128	@ 0x80
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	481d      	ldr	r0, [pc, #116]	@ (800681c <MIC_Print+0x32c>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	0019      	movs	r1, r3
 80067aa:	f003 fdcb 	bl	800a344 <HAL_GPIO_WritePin>
  }
  if(dBc < 60){//light blue
 80067ae:	4b14      	ldr	r3, [pc, #80]	@ (8006800 <MIC_Print+0x310>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	491f      	ldr	r1, [pc, #124]	@ (8006830 <MIC_Print+0x340>)
 80067b4:	1c18      	adds	r0, r3, #0
 80067b6:	f7f9 fe89 	bl	80004cc <__aeabi_fcmplt>
 80067ba:	1e03      	subs	r3, r0, #0
 80067bc:	d100      	bne.n	80067c0 <MIC_Print+0x2d0>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
  }


  //FFT();
}
 80067be:	e013      	b.n	80067e8 <MIC_Print+0x2f8>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80067c0:	4b16      	ldr	r3, [pc, #88]	@ (800681c <MIC_Print+0x32c>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	2101      	movs	r1, #1
 80067c6:	0018      	movs	r0, r3
 80067c8:	f003 fdbc 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 80067cc:	2380      	movs	r3, #128	@ 0x80
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	4812      	ldr	r0, [pc, #72]	@ (800681c <MIC_Print+0x32c>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	0019      	movs	r1, r3
 80067d6:	f003 fdb5 	bl	800a344 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80067da:	2380      	movs	r3, #128	@ 0x80
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	480f      	ldr	r0, [pc, #60]	@ (800681c <MIC_Print+0x32c>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	0019      	movs	r1, r3
 80067e4:	f003 fdae 	bl	800a344 <HAL_GPIO_WritePin>
}
 80067e8:	46c0      	nop			@ (mov r8, r8)
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b003      	add	sp, #12
 80067ee:	bd90      	pop	{r4, r7, pc}
 80067f0:	08019e44 	.word	0x08019e44
 80067f4:	08019e40 	.word	0x08019e40
 80067f8:	20000d0c 	.word	0x20000d0c
 80067fc:	20001d48 	.word	0x20001d48
 8006800:	20001d14 	.word	0x20001d14
 8006804:	20001d44 	.word	0x20001d44
 8006808:	20001d18 	.word	0x20001d18
 800680c:	20001d45 	.word	0x20001d45
 8006810:	20001d40 	.word	0x20001d40
 8006814:	41200000 	.word	0x41200000
 8006818:	42aa0000 	.word	0x42aa0000
 800681c:	50000400 	.word	0x50000400
 8006820:	42a00000 	.word	0x42a00000
 8006824:	42960000 	.word	0x42960000
 8006828:	428c0000 	.word	0x428c0000
 800682c:	42820000 	.word	0x42820000
 8006830:	42700000 	.word	0x42700000

08006834 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  if(DataReady) {
 8006838:	4b0c      	ldr	r3, [pc, #48]	@ (800686c <MIC_MeasurementDone+0x38>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00f      	beq.n	8006862 <MIC_MeasurementDone+0x2e>
    MIC_Print();
 8006842:	f7ff fe55 	bl	80064f0 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 8006846:	4b0a      	ldr	r3, [pc, #40]	@ (8006870 <MIC_MeasurementDone+0x3c>)
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	4a0a      	ldr	r2, [pc, #40]	@ (8006874 <MIC_MeasurementDone+0x40>)
 800684c:	490a      	ldr	r1, [pc, #40]	@ (8006878 <MIC_MeasurementDone+0x44>)
 800684e:	2003      	movs	r0, #3
 8006850:	f002 f926 	bl	8008aa0 <CreateLine>
    TIM2 -> CCR1 = 4000;
 8006854:	2380      	movs	r3, #128	@ 0x80
 8006856:	05db      	lsls	r3, r3, #23
 8006858:	22fa      	movs	r2, #250	@ 0xfa
 800685a:	0112      	lsls	r2, r2, #4
 800685c:	635a      	str	r2, [r3, #52]	@ 0x34
    return true;
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <MIC_MeasurementDone+0x30>
  }
  return false;
 8006862:	2300      	movs	r3, #0
}
 8006864:	0018      	movs	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	46c0      	nop			@ (mov r8, r8)
 800686c:	20001d11 	.word	0x20001d11
 8006870:	20000110 	.word	0x20000110
 8006874:	08019e50 	.word	0x08019e50
 8006878:	08019e30 	.word	0x08019e30

0800687c <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 800687c:	b590      	push	{r4, r7, lr}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 8006882:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <MIC_TestMeasurementDone+0x34>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00c      	beq.n	80068a6 <MIC_TestMeasurementDone+0x2a>
    Check = MIC_Check();
 800688c:	1dfc      	adds	r4, r7, #7
 800688e:	f7ff fdd9 	bl	8006444 <MIC_Check>
 8006892:	0003      	movs	r3, r0
 8006894:	7023      	strb	r3, [r4, #0]
    TIM2 -> CCR1 = 4000;
 8006896:	2380      	movs	r3, #128	@ 0x80
 8006898:	05db      	lsls	r3, r3, #23
 800689a:	22fa      	movs	r2, #250	@ 0xfa
 800689c:	0112      	lsls	r2, r2, #4
 800689e:	635a      	str	r2, [r3, #52]	@ 0x34
    return Check;
 80068a0:	1dfb      	adds	r3, r7, #7
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	e000      	b.n	80068a8 <MIC_TestMeasurementDone+0x2c>
  }
  return false;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	0018      	movs	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b003      	add	sp, #12
 80068ae:	bd90      	pop	{r4, r7, pc}
 80068b0:	20001d11 	.word	0x20001d11

080068b4 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80068bc:	4b10      	ldr	r3, [pc, #64]	@ (8006900 <HAL_I2S_RxCpltCallback+0x4c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d118      	bne.n	80068f8 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 80068c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006904 <HAL_I2S_RxCpltCallback+0x50>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 80068d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <HAL_I2S_RxCpltCallback+0x4c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	0018      	movs	r0, r3
 80068d6:	f005 ff43 	bl	800c760 <HAL_I2S_DMAStop>
    DataReady = true;
 80068da:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <HAL_I2S_RxCpltCallback+0x54>)
 80068dc:	2201      	movs	r2, #1
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	e00b      	b.n	80068fa <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 80068e2:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <HAL_I2S_RxCpltCallback+0x58>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	0018      	movs	r0, r3
 80068e8:	f002 f884 	bl	80089f4 <TimestampIsReached>
 80068ec:	1e03      	subs	r3, r0, #0
 80068ee:	d004      	beq.n	80068fa <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 80068f0:	4b04      	ldr	r3, [pc, #16]	@ (8006904 <HAL_I2S_RxCpltCallback+0x50>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	e000      	b.n	80068fa <HAL_I2S_RxCpltCallback+0x46>
    return;
 80068f8:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b002      	add	sp, #8
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	20000d08 	.word	0x20000d08
 8006904:	20001d10 	.word	0x20001d10
 8006908:	20001d11 	.word	0x20001d11
 800690c:	20001d0c 	.word	0x20001d0c

08006910 <MIC_GetDB>:

float MIC_GetDB(void) {
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 800691a:	2300      	movs	r3, #0
 800691c:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 800691e:	230a      	movs	r3, #10
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	2280      	movs	r2, #128	@ 0x80
 8006924:	0052      	lsls	r2, r2, #1
 8006926:	801a      	strh	r2, [r3, #0]
 8006928:	e019      	b.n	800695e <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 800692a:	240a      	movs	r4, #10
 800692c:	193b      	adds	r3, r7, r4
 800692e:	881a      	ldrh	r2, [r3, #0]
 8006930:	4b2b      	ldr	r3, [pc, #172]	@ (80069e0 <MIC_GetDB+0xd0>)
 8006932:	0092      	lsls	r2, r2, #2
 8006934:	58d0      	ldr	r0, [r2, r3]
 8006936:	193b      	adds	r3, r7, r4
 8006938:	881a      	ldrh	r2, [r3, #0]
 800693a:	4b29      	ldr	r3, [pc, #164]	@ (80069e0 <MIC_GetDB+0xd0>)
 800693c:	0092      	lsls	r2, r2, #2
 800693e:	58d3      	ldr	r3, [r2, r3]
 8006940:	1c19      	adds	r1, r3, #0
 8006942:	f7fa faab 	bl	8000e9c <__aeabi_fmul>
 8006946:	1c03      	adds	r3, r0, #0
 8006948:	1c19      	adds	r1, r3, #0
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f7f9 ff36 	bl	80007bc <__aeabi_fadd>
 8006950:	1c03      	adds	r3, r0, #0
 8006952:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 8006954:	193b      	adds	r3, r7, r4
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	193b      	adds	r3, r7, r4
 800695a:	3201      	adds	r2, #1
 800695c:	801a      	strh	r2, [r3, #0]
 800695e:	230a      	movs	r3, #10
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	2380      	movs	r3, #128	@ 0x80
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	429a      	cmp	r2, r3
 800696a:	d3de      	bcc.n	800692a <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 800696c:	2187      	movs	r1, #135	@ 0x87
 800696e:	05c9      	lsls	r1, r1, #23
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7fa f8ad 	bl	8000ad0 <__aeabi_fdiv>
 8006976:	1c03      	adds	r3, r0, #0
 8006978:	1c18      	adds	r0, r3, #0
 800697a:	f7fc fcf1 	bl	8003360 <__aeabi_f2d>
 800697e:	0002      	movs	r2, r0
 8006980:	000b      	movs	r3, r1
 8006982:	0010      	movs	r0, r2
 8006984:	0019      	movs	r1, r3
 8006986:	f012 fa05 	bl	8018d94 <sqrt>
 800698a:	0002      	movs	r2, r0
 800698c:	000b      	movs	r3, r1
 800698e:	0010      	movs	r0, r2
 8006990:	0019      	movs	r1, r3
 8006992:	f7fc fd2d 	bl	80033f0 <__aeabi_d2f>
 8006996:	1c03      	adds	r3, r0, #0
 8006998:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 800699a:	6838      	ldr	r0, [r7, #0]
 800699c:	f7fc fce0 	bl	8003360 <__aeabi_f2d>
 80069a0:	0002      	movs	r2, r0
 80069a2:	000b      	movs	r3, r1
 80069a4:	0010      	movs	r0, r2
 80069a6:	0019      	movs	r1, r3
 80069a8:	f012 f9be 	bl	8018d28 <log10>
 80069ac:	2200      	movs	r2, #0
 80069ae:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <MIC_GetDB+0xd4>)
 80069b0:	f7fb fdc2 	bl	8002538 <__aeabi_dmul>
 80069b4:	0002      	movs	r2, r0
 80069b6:	000b      	movs	r3, r1
 80069b8:	0010      	movs	r0, r2
 80069ba:	0019      	movs	r1, r3
 80069bc:	2200      	movs	r2, #0
 80069be:	4b0a      	ldr	r3, [pc, #40]	@ (80069e8 <MIC_GetDB+0xd8>)
 80069c0:	f7fa fe12 	bl	80015e8 <__aeabi_dadd>
 80069c4:	0002      	movs	r2, r0
 80069c6:	000b      	movs	r3, r1
 80069c8:	0010      	movs	r0, r2
 80069ca:	0019      	movs	r1, r3
 80069cc:	f7fc fd10 	bl	80033f0 <__aeabi_d2f>
 80069d0:	1c03      	adds	r3, r0, #0
 80069d2:	607b      	str	r3, [r7, #4]

    return dBValue;
 80069d4:	687b      	ldr	r3, [r7, #4]
}
 80069d6:	1c18      	adds	r0, r3, #0
 80069d8:	46bd      	mov	sp, r7
 80069da:	b005      	add	sp, #20
 80069dc:	bd90      	pop	{r4, r7, pc}
 80069de:	46c0      	nop			@ (mov r8, r8)
 80069e0:	20001d48 	.word	0x20001d48
 80069e4:	40340000 	.word	0x40340000
 80069e8:	405e0000 	.word	0x405e0000

080069ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80069f0:	4b11      	ldr	r3, [pc, #68]	@ (8006a38 <MX_RTC_Init+0x4c>)
 80069f2:	4a12      	ldr	r2, [pc, #72]	@ (8006a3c <MX_RTC_Init+0x50>)
 80069f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80069f6:	4b10      	ldr	r3, [pc, #64]	@ (8006a38 <MX_RTC_Init+0x4c>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80069fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006a38 <MX_RTC_Init+0x4c>)
 80069fe:	227f      	movs	r2, #127	@ 0x7f
 8006a00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006a02:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <MX_RTC_Init+0x4c>)
 8006a04:	22ff      	movs	r2, #255	@ 0xff
 8006a06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006a08:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <MX_RTC_Init+0x4c>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a38 <MX_RTC_Init+0x4c>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006a14:	4b08      	ldr	r3, [pc, #32]	@ (8006a38 <MX_RTC_Init+0x4c>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006a1a:	4b07      	ldr	r3, [pc, #28]	@ (8006a38 <MX_RTC_Init+0x4c>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006a20:	4b05      	ldr	r3, [pc, #20]	@ (8006a38 <MX_RTC_Init+0x4c>)
 8006a22:	0018      	movs	r0, r3
 8006a24:	f008 fdbe 	bl	800f5a4 <HAL_RTC_Init>
 8006a28:	1e03      	subs	r3, r0, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006a2c:	f7ff f82a 	bl	8005a84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006a30:	46c0      	nop			@ (mov r8, r8)
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	46c0      	nop			@ (mov r8, r8)
 8006a38:	20002548 	.word	0x20002548
 8006a3c:	40002800 	.word	0x40002800

08006a40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a06      	ldr	r2, [pc, #24]	@ (8006a68 <HAL_RTC_MspInit+0x28>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d106      	bne.n	8006a60 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006a52:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <HAL_RTC_MspInit+0x2c>)
 8006a54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a56:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <HAL_RTC_MspInit+0x2c>)
 8006a58:	2180      	movs	r1, #128	@ 0x80
 8006a5a:	02c9      	lsls	r1, r1, #11
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006a60:	46c0      	nop			@ (mov r8, r8)
 8006a62:	46bd      	mov	sp, r7
 8006a64:	b002      	add	sp, #8
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40002800 	.word	0x40002800
 8006a6c:	40021000 	.word	0x40021000

08006a70 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d113      	bne.n	8006ab6 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	22fe      	movs	r2, #254	@ 0xfe
 8006a92:	0592      	lsls	r2, r2, #22
 8006a94:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4a1a      	ldr	r2, [pc, #104]	@ (8006b04 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8006a9a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b08 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8006aa0:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	@ (8006b0c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8006aa6:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4a19      	ldr	r2, [pc, #100]	@ (8006b10 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8006aac:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4a18      	ldr	r2, [pc, #96]	@ (8006b14 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8006ab2:	61da      	str	r2, [r3, #28]
 8006ab4:	e011      	b.n	8006ada <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a17      	ldr	r2, [pc, #92]	@ (8006b18 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8006aba:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4a17      	ldr	r2, [pc, #92]	@ (8006b1c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8006ac0:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4a16      	ldr	r2, [pc, #88]	@ (8006b20 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8006ac6:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a16      	ldr	r2, [pc, #88]	@ (8006b24 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8006acc:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a15      	ldr	r2, [pc, #84]	@ (8006b28 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8006ad2:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4a15      	ldr	r2, [pc, #84]	@ (8006b2c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8006ad8:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a14      	ldr	r2, [pc, #80]	@ (8006b30 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8006ade:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a14      	ldr	r2, [pc, #80]	@ (8006b34 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8006ae4:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a12      	ldr	r2, [pc, #72]	@ (8006b34 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8006aea:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a12      	ldr	r2, [pc, #72]	@ (8006b38 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8006af0:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 f831 	bl	8006b5c <GasIndexAlgorithm_reset>
}
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b004      	add	sp, #16
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	46c0      	nop			@ (mov r8, r8)
 8006b04:	00002710 	.word	0x00002710
 8006b08:	44340000 	.word	0x44340000
 8006b0c:	46859800 	.word	0x46859800
 8006b10:	46a05000 	.word	0x46a05000
 8006b14:	41f00000 	.word	0x41f00000
 8006b18:	42c80000 	.word	0x42c80000
 8006b1c:	00004e20 	.word	0x00004e20
 8006b20:	43340000 	.word	0x43340000
 8006b24:	4528c000 	.word	0x4528c000
 8006b28:	45a32000 	.word	0x45a32000
 8006b2c:	43aa0000 	.word	0x43aa0000
 8006b30:	43660000 	.word	0x43660000
 8006b34:	41400000 	.word	0x41400000
 8006b38:	42480000 	.word	0x42480000

08006b3c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8006b46:	22fe      	movs	r2, #254	@ 0xfe
 8006b48:	0592      	lsls	r2, r2, #22
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f7ff ff8e 	bl	8006a70 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8006b54:	46c0      	nop			@ (mov r8, r8)
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f000 f805 	bl	8006b88 <GasIndexAlgorithm__init_instances>
}
 8006b7e:	46c0      	nop			@ (mov r8, r8)
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b002      	add	sp, #8
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8006b88:	b590      	push	{r4, r7, lr}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	0018      	movs	r0, r3
 8006b94:	f000 f8e8 	bl	8006d68 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f000 f9a6 	bl	8006eec <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006ba0:	1c04      	adds	r4, r0, #0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f000 f9ab 	bl	8006f00 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006baa:	1c02      	adds	r2, r0, #0
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1c21      	adds	r1, r4, #0
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f000 fc3b 	bl	800742c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d107      	bne.n	8006bce <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006bbe:	23fe      	movs	r3, #254	@ 0xfe
 8006bc0:	059b      	lsls	r3, r3, #22
 8006bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8006bec <GasIndexAlgorithm__init_instances+0x64>)
 8006bc4:	490a      	ldr	r1, [pc, #40]	@ (8006bf0 <GasIndexAlgorithm__init_instances+0x68>)
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fc86 	bl	80074d8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8006bcc:	e005      	b.n	8006bda <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006bce:	4b09      	ldr	r3, [pc, #36]	@ (8006bf4 <GasIndexAlgorithm__init_instances+0x6c>)
 8006bd0:	4a09      	ldr	r2, [pc, #36]	@ (8006bf8 <GasIndexAlgorithm__init_instances+0x70>)
 8006bd2:	490a      	ldr	r1, [pc, #40]	@ (8006bfc <GasIndexAlgorithm__init_instances+0x74>)
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fc7f 	bl	80074d8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 fd35 	bl	800764c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8006be2:	46c0      	nop			@ (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b003      	add	sp, #12
 8006be8:	bd90      	pop	{r4, r7, pc}
 8006bea:	46c0      	nop			@ (mov r8, r8)
 8006bec:	bc257a78 	.word	0xbc257a78
 8006bf0:	44198000 	.word	0x44198000
 8006bf4:	42c80000 	.word	0x42c80000
 8006bf8:	bbd4fdf4 	.word	0xbbd4fdf4
 8006bfc:	43550000 	.word	0x43550000

08006c00 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8006c00:	b590      	push	{r4, r7, lr}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c10:	4952      	ldr	r1, [pc, #328]	@ (8006d5c <GasIndexAlgorithm_process+0x15c>)
 8006c12:	1c18      	adds	r0, r3, #0
 8006c14:	f7f9 fc64 	bl	80004e0 <__aeabi_fcmple>
 8006c18:	1e03      	subs	r3, r0, #0
 8006c1a:	d00c      	beq.n	8006c36 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	1c19      	adds	r1, r3, #0
 8006c26:	1c10      	adds	r0, r2, #0
 8006c28:	f7f9 fdc8 	bl	80007bc <__aeabi_fadd>
 8006c2c:	1c03      	adds	r3, r0, #0
 8006c2e:	1c1a      	adds	r2, r3, #0
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c34:	e080      	b.n	8006d38 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	dd25      	ble.n	8006c88 <GasIndexAlgorithm_process+0x88>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4a48      	ldr	r2, [pc, #288]	@ (8006d60 <GasIndexAlgorithm_process+0x160>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	dc21      	bgt.n	8006c88 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	dc04      	bgt.n	8006c58 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	3301      	adds	r3, #1
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	e00d      	b.n	8006c74 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4a41      	ldr	r2, [pc, #260]	@ (8006d64 <GasIndexAlgorithm_process+0x164>)
 8006c5e:	4694      	mov	ip, r2
 8006c60:	4463      	add	r3, ip
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	dd05      	ble.n	8006c74 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d64 <GasIndexAlgorithm_process+0x164>)
 8006c6e:	4694      	mov	ip, r2
 8006c70:	4463      	add	r3, ip
 8006c72:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f7fa fc25 	bl	80014cc <__aeabi_i2f>
 8006c82:	1c02      	adds	r2, r0, #0
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0018      	movs	r0, r3
 8006c94:	f000 f945 	bl	8006f22 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8006c98:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8006c9a:	d014      	beq.n	8006cc6 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	1c11      	adds	r1, r2, #0
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f000 fbd1 	bl	800744c <GasIndexAlgorithm__mox_model__process>
 8006caa:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	1c11      	adds	r1, r2, #0
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f000 fc25 	bl	8007508 <GasIndexAlgorithm__sigmoid_scaled__process>
 8006cbe:	1c02      	adds	r2, r0, #0
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cc4:	e003      	b.n	8006cce <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1c11      	adds	r1, r2, #0
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f000 fcec 	bl	80076b4 <GasIndexAlgorithm__adaptive_lowpass__process>
 8006cdc:	1c02      	adds	r2, r0, #0
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce6:	21fc      	movs	r1, #252	@ 0xfc
 8006ce8:	0589      	lsls	r1, r1, #22
 8006cea:	1c18      	adds	r0, r3, #0
 8006cec:	f7f9 fbee 	bl	80004cc <__aeabi_fcmplt>
 8006cf0:	1e03      	subs	r3, r0, #0
 8006cf2:	d003      	beq.n	8006cfc <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	22fc      	movs	r2, #252	@ 0xfc
 8006cf8:	0592      	lsls	r2, r2, #22
 8006cfa:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d00:	2100      	movs	r1, #0
 8006d02:	1c18      	adds	r0, r3, #0
 8006d04:	f7f9 fbf6 	bl	80004f4 <__aeabi_fcmpgt>
 8006d08:	1e03      	subs	r3, r0, #0
 8006d0a:	d015      	beq.n	8006d38 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	1c11      	adds	r1, r2, #0
 8006d14:	0018      	movs	r0, r3
 8006d16:	f000 fa4f 	bl	80071b8 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f000 f8e5 	bl	8006eec <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006d22:	1c04      	adds	r4, r0, #0
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	0018      	movs	r0, r3
 8006d28:	f000 f8ea 	bl	8006f00 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006d2c:	1c02      	adds	r2, r0, #0
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1c21      	adds	r1, r4, #0
 8006d32:	0018      	movs	r0, r3
 8006d34:	f000 fb7a 	bl	800742c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	21fc      	movs	r1, #252	@ 0xfc
 8006d3e:	0589      	lsls	r1, r1, #22
 8006d40:	1c18      	adds	r0, r3, #0
 8006d42:	f7f9 fd3b 	bl	80007bc <__aeabi_fadd>
 8006d46:	1c03      	adds	r3, r0, #0
 8006d48:	1c18      	adds	r0, r3, #0
 8006d4a:	f7fa fb9f 	bl	800148c <__aeabi_f2iz>
 8006d4e:	0002      	movs	r2, r0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
    return;
 8006d54:	46c0      	nop			@ (mov r8, r8)
}
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b005      	add	sp, #20
 8006d5a:	bd90      	pop	{r4, r7, pc}
 8006d5c:	42340000 	.word	0x42340000
 8006d60:	0000fde7 	.word	0x0000fde7
 8006d64:	00007fff 	.word	0x00007fff

08006d68 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006d68:	b5b0      	push	{r4, r5, r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	223c      	movs	r2, #60	@ 0x3c
 8006d74:	2100      	movs	r1, #0
 8006d76:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4952      	ldr	r1, [pc, #328]	@ (8006edc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006d92:	1c18      	adds	r0, r3, #0
 8006d94:	f7f9 fe9c 	bl	8000ad0 <__aeabi_fdiv>
 8006d98:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006d9a:	2188      	movs	r1, #136	@ 0x88
 8006d9c:	05c9      	lsls	r1, r1, #23
 8006d9e:	1c18      	adds	r0, r3, #0
 8006da0:	f7fa f87c 	bl	8000e9c <__aeabi_fmul>
 8006da4:	1c03      	adds	r3, r0, #0
 8006da6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	494a      	ldr	r1, [pc, #296]	@ (8006edc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006db2:	1c18      	adds	r0, r3, #0
 8006db4:	f7f9 fe8c 	bl	8000ad0 <__aeabi_fdiv>
 8006db8:	1c03      	adds	r3, r0, #0
 8006dba:	1c19      	adds	r1, r3, #0
 8006dbc:	1c20      	adds	r0, r4, #0
 8006dbe:	f7f9 fcfd 	bl	80007bc <__aeabi_fadd>
 8006dc2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006dc4:	1c19      	adds	r1, r3, #0
 8006dc6:	1c28      	adds	r0, r5, #0
 8006dc8:	f7f9 fe82 	bl	8000ad0 <__aeabi_fdiv>
 8006dcc:	1c03      	adds	r3, r0, #0
 8006dce:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4940      	ldr	r1, [pc, #256]	@ (8006edc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006dda:	1c18      	adds	r0, r3, #0
 8006ddc:	f7f9 fe78 	bl	8000ad0 <__aeabi_fdiv>
 8006de0:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006de2:	2185      	movs	r1, #133	@ 0x85
 8006de4:	05c9      	lsls	r1, r1, #23
 8006de6:	1c18      	adds	r0, r3, #0
 8006de8:	f7fa f858 	bl	8000e9c <__aeabi_fmul>
 8006dec:	1c03      	adds	r3, r0, #0
 8006dee:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4938      	ldr	r1, [pc, #224]	@ (8006edc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006dfa:	1c18      	adds	r0, r3, #0
 8006dfc:	f7f9 fe68 	bl	8000ad0 <__aeabi_fdiv>
 8006e00:	1c03      	adds	r3, r0, #0
 8006e02:	1c19      	adds	r1, r3, #0
 8006e04:	1c20      	adds	r0, r4, #0
 8006e06:	f7f9 fcd9 	bl	80007bc <__aeabi_fadd>
 8006e0a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006e0c:	1c19      	adds	r1, r3, #0
 8006e0e:	1c28      	adds	r0, r5, #0
 8006e10:	f7f9 fe5e 	bl	8000ad0 <__aeabi_fdiv>
 8006e14:	1c03      	adds	r3, r0, #0
 8006e16:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d118      	bne.n	8006e56 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006e28:	2188      	movs	r1, #136	@ 0x88
 8006e2a:	05c9      	lsls	r1, r1, #23
 8006e2c:	1c18      	adds	r0, r3, #0
 8006e2e:	f7fa f835 	bl	8000e9c <__aeabi_fmul>
 8006e32:	1c03      	adds	r3, r0, #0
 8006e34:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8006e3a:	4929      	ldr	r1, [pc, #164]	@ (8006ee0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8006e3c:	1c18      	adds	r0, r3, #0
 8006e3e:	f7f9 fcbd 	bl	80007bc <__aeabi_fadd>
 8006e42:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006e44:	1c19      	adds	r1, r3, #0
 8006e46:	1c20      	adds	r0, r4, #0
 8006e48:	f7f9 fe42 	bl	8000ad0 <__aeabi_fdiv>
 8006e4c:	1c03      	adds	r3, r0, #0
 8006e4e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e54:	e017      	b.n	8006e86 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006e5a:	2188      	movs	r1, #136	@ 0x88
 8006e5c:	05c9      	lsls	r1, r1, #23
 8006e5e:	1c18      	adds	r0, r3, #0
 8006e60:	f7fa f81c 	bl	8000e9c <__aeabi_fmul>
 8006e64:	1c03      	adds	r3, r0, #0
 8006e66:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8006e6c:	491d      	ldr	r1, [pc, #116]	@ (8006ee4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8006e6e:	1c18      	adds	r0, r3, #0
 8006e70:	f7f9 fca4 	bl	80007bc <__aeabi_fadd>
 8006e74:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006e76:	1c19      	adds	r1, r3, #0
 8006e78:	1c20      	adds	r0, r4, #0
 8006e7a:	f7f9 fe29 	bl	8000ad0 <__aeabi_fdiv>
 8006e7e:	1c03      	adds	r3, r0, #0
 8006e80:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006e8a:	2185      	movs	r1, #133	@ 0x85
 8006e8c:	05c9      	lsls	r1, r1, #23
 8006e8e:	1c18      	adds	r0, r3, #0
 8006e90:	f7fa f804 	bl	8000e9c <__aeabi_fmul>
 8006e94:	1c03      	adds	r3, r0, #0
 8006e96:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	4912      	ldr	r1, [pc, #72]	@ (8006ee8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8006e9e:	1c18      	adds	r0, r3, #0
 8006ea0:	f7f9 fc8c 	bl	80007bc <__aeabi_fadd>
 8006ea4:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8006ea6:	1c19      	adds	r1, r3, #0
 8006ea8:	1c20      	adds	r0, r4, #0
 8006eaa:	f7f9 fe11 	bl	8000ad0 <__aeabi_fdiv>
 8006eae:	1c03      	adds	r3, r0, #0
 8006eb0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006ed4:	46c0      	nop			@ (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b002      	add	sp, #8
 8006eda:	bdb0      	pop	{r4, r5, r7, pc}
 8006edc:	45610000 	.word	0x45610000
 8006ee0:	44960000 	.word	0x44960000
 8006ee4:	41a00000 	.word	0x41a00000
 8006ee8:	451c4000 	.word	0x451c4000

08006eec <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8006ef8:	1c18      	adds	r0, r3, #0
 8006efa:	46bd      	mov	sp, r7
 8006efc:	b002      	add	sp, #8
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8006f10:	1c19      	adds	r1, r3, #0
 8006f12:	1c10      	adds	r0, r2, #0
 8006f14:	f7f9 fc52 	bl	80007bc <__aeabi_fadd>
 8006f18:	1c03      	adds	r3, r0, #0
}
 8006f1a:	1c18      	adds	r0, r3, #0
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	b002      	add	sp, #8
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	223c      	movs	r2, #60	@ 0x3c
 8006f2e:	5c9b      	ldrb	r3, [r3, r2]
}
 8006f30:	0018      	movs	r0, r3
 8006f32:	46bd      	mov	sp, r7
 8006f34:	b002      	add	sp, #8
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006f38:	b5b0      	push	{r4, r5, r7, lr}
 8006f3a:	b08c      	sub	sp, #48	@ 0x30
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8006f44:	1c19      	adds	r1, r3, #0
 8006f46:	4895      	ldr	r0, [pc, #596]	@ (800719c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8006f48:	f7fa f8e6 	bl	8001118 <__aeabi_fsub>
 8006f4c:	1c03      	adds	r3, r0, #0
 8006f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f54:	1c19      	adds	r1, r3, #0
 8006f56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f58:	f7f9 facc 	bl	80004f4 <__aeabi_fcmpgt>
 8006f5c:	1e03      	subs	r3, r0, #0
 8006f5e:	d00b      	beq.n	8006f78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006f68:	1c19      	adds	r1, r3, #0
 8006f6a:	1c10      	adds	r0, r2, #0
 8006f6c:	f7f9 fc26 	bl	80007bc <__aeabi_fadd>
 8006f70:	1c03      	adds	r3, r0, #0
 8006f72:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f7c:	1c19      	adds	r1, r3, #0
 8006f7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f80:	f7f9 fab8 	bl	80004f4 <__aeabi_fcmpgt>
 8006f84:	1e03      	subs	r3, r0, #0
 8006f86:	d00b      	beq.n	8006fa0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006f90:	1c19      	adds	r1, r3, #0
 8006f92:	1c10      	adds	r0, r2, #0
 8006f94:	f7f9 fc12 	bl	80007bc <__aeabi_fadd>
 8006f98:	1c03      	adds	r3, r0, #0
 8006f9a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6959      	ldr	r1, [r3, #20]
 8006fa4:	4a7e      	ldr	r2, [pc, #504]	@ (80071a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f000 f9f1 	bl	8007390 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	1c11      	adds	r1, r2, #0
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f000 f9fa 	bl	80073b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006fbc:	1c03      	adds	r3, r0, #0
 8006fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006fcc:	1c19      	adds	r1, r3, #0
 8006fce:	1c10      	adds	r0, r2, #0
 8006fd0:	f7fa f8a2 	bl	8001118 <__aeabi_fsub>
 8006fd4:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fd8:	1c18      	adds	r0, r3, #0
 8006fda:	f7f9 ff5f 	bl	8000e9c <__aeabi_fmul>
 8006fde:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006fe0:	1c19      	adds	r1, r3, #0
 8006fe2:	1c20      	adds	r0, r4, #0
 8006fe4:	f7f9 fbea 	bl	80007bc <__aeabi_fadd>
 8006fe8:	1c03      	adds	r3, r0, #0
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006ff4:	1c19      	adds	r1, r3, #0
 8006ff6:	486b      	ldr	r0, [pc, #428]	@ (80071a4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006ff8:	f7fa f88e 	bl	8001118 <__aeabi_fsub>
 8006ffc:	1c03      	adds	r3, r0, #0
 8006ffe:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	1c11      	adds	r1, r2, #0
 8007008:	0018      	movs	r0, r3
 800700a:	f000 f9d1 	bl	80073b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800700e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007010:	1c19      	adds	r1, r3, #0
 8007012:	1c28      	adds	r0, r5, #0
 8007014:	f7f9 ff42 	bl	8000e9c <__aeabi_fmul>
 8007018:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800701a:	1c19      	adds	r1, r3, #0
 800701c:	1c20      	adds	r0, r4, #0
 800701e:	f7f9 fbcd 	bl	80007bc <__aeabi_fadd>
 8007022:	1c03      	adds	r3, r0, #0
 8007024:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007026:	4a60      	ldr	r2, [pc, #384]	@ (80071a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007028:	6a39      	ldr	r1, [r7, #32]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	0018      	movs	r0, r3
 800702e:	f000 f9af 	bl	8007390 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	1c11      	adds	r1, r2, #0
 800703a:	0018      	movs	r0, r3
 800703c:	f000 f9b8 	bl	80073b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007040:	1c03      	adds	r3, r0, #0
 8007042:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007044:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007046:	69f8      	ldr	r0, [r7, #28]
 8007048:	f7f9 ff28 	bl	8000e9c <__aeabi_fmul>
 800704c:	1c03      	adds	r3, r0, #0
 800704e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6999      	ldr	r1, [r3, #24]
 8007058:	4a51      	ldr	r2, [pc, #324]	@ (80071a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	0018      	movs	r0, r3
 800705e:	f000 f997 	bl	8007390 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	1c11      	adds	r1, r2, #0
 800706a:	0018      	movs	r0, r3
 800706c:	f000 f9a0 	bl	80073b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007070:	1c03      	adds	r3, r0, #0
 8007072:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007080:	1c19      	adds	r1, r3, #0
 8007082:	1c10      	adds	r0, r2, #0
 8007084:	f7fa f848 	bl	8001118 <__aeabi_fsub>
 8007088:	1c03      	adds	r3, r0, #0
 800708a:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800708c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800708e:	69b8      	ldr	r0, [r7, #24]
 8007090:	f7fa f842 	bl	8001118 <__aeabi_fsub>
 8007094:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007096:	1c19      	adds	r1, r3, #0
 8007098:	1c28      	adds	r0, r5, #0
 800709a:	f7f9 feff 	bl	8000e9c <__aeabi_fmul>
 800709e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80070a0:	1c19      	adds	r1, r3, #0
 80070a2:	1c20      	adds	r0, r4, #0
 80070a4:	f7f9 fb8a 	bl	80007bc <__aeabi_fadd>
 80070a8:	1c03      	adds	r3, r0, #0
 80070aa:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80070b4:	1c19      	adds	r1, r3, #0
 80070b6:	483b      	ldr	r0, [pc, #236]	@ (80071a4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80070b8:	f7fa f82e 	bl	8001118 <__aeabi_fsub>
 80070bc:	1c03      	adds	r3, r0, #0
 80070be:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	1c11      	adds	r1, r2, #0
 80070c8:	0018      	movs	r0, r3
 80070ca:	f000 f971 	bl	80073b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80070ce:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80070d0:	1c19      	adds	r1, r3, #0
 80070d2:	1c28      	adds	r0, r5, #0
 80070d4:	f7f9 fee2 	bl	8000e9c <__aeabi_fmul>
 80070d8:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80070da:	1c19      	adds	r1, r3, #0
 80070dc:	1c20      	adds	r0, r4, #0
 80070de:	f7f9 fb6d 	bl	80007bc <__aeabi_fadd>
 80070e2:	1c03      	adds	r3, r0, #0
 80070e4:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80070e6:	4a30      	ldr	r2, [pc, #192]	@ (80071a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80070e8:	6939      	ldr	r1, [r7, #16]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	0018      	movs	r0, r3
 80070ee:	f000 f94f 	bl	8007390 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	1c11      	adds	r1, r2, #0
 80070fa:	0018      	movs	r0, r3
 80070fc:	f000 f958 	bl	80073b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007100:	1c03      	adds	r3, r0, #0
 8007102:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007104:	6979      	ldr	r1, [r7, #20]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7f9 fec8 	bl	8000e9c <__aeabi_fmul>
 800710c:	1c03      	adds	r3, r0, #0
 800710e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4923      	ldr	r1, [pc, #140]	@ (80071ac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800711e:	1c18      	adds	r0, r3, #0
 8007120:	f7f9 fcd6 	bl	8000ad0 <__aeabi_fdiv>
 8007124:	1c03      	adds	r3, r0, #0
 8007126:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007128:	69f9      	ldr	r1, [r7, #28]
 800712a:	20fe      	movs	r0, #254	@ 0xfe
 800712c:	0580      	lsls	r0, r0, #22
 800712e:	f7f9 fff3 	bl	8001118 <__aeabi_fsub>
 8007132:	1c03      	adds	r3, r0, #0
 8007134:	491e      	ldr	r1, [pc, #120]	@ (80071b0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007136:	1c18      	adds	r0, r3, #0
 8007138:	f7f9 feb0 	bl	8000e9c <__aeabi_fmul>
 800713c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800713e:	491d      	ldr	r1, [pc, #116]	@ (80071b4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007140:	1c18      	adds	r0, r3, #0
 8007142:	f7f9 ffe9 	bl	8001118 <__aeabi_fsub>
 8007146:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007148:	1c19      	adds	r1, r3, #0
 800714a:	1c28      	adds	r0, r5, #0
 800714c:	f7f9 fea6 	bl	8000e9c <__aeabi_fmul>
 8007150:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007152:	1c19      	adds	r1, r3, #0
 8007154:	1c20      	adds	r0, r4, #0
 8007156:	f7f9 fb31 	bl	80007bc <__aeabi_fadd>
 800715a:	1c03      	adds	r3, r0, #0
 800715c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007166:	2100      	movs	r1, #0
 8007168:	1c18      	adds	r0, r3, #0
 800716a:	f7f9 f9af 	bl	80004cc <__aeabi_fcmplt>
 800716e:	1e03      	subs	r3, r0, #0
 8007170:	d002      	beq.n	8007178 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007180:	1c19      	adds	r1, r3, #0
 8007182:	1c10      	adds	r0, r2, #0
 8007184:	f7f9 f9b6 	bl	80004f4 <__aeabi_fcmpgt>
 8007188:	1e03      	subs	r3, r0, #0
 800718a:	d100      	bne.n	800718e <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800718c:	e002      	b.n	8007194 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007194:	46c0      	nop			@ (mov r8, r8)
 8007196:	46bd      	mov	sp, r7
 8007198:	b00c      	add	sp, #48	@ 0x30
 800719a:	bdb0      	pop	{r4, r5, r7, pc}
 800719c:	46fffe00 	.word	0x46fffe00
 80071a0:	3c23d70a 	.word	0x3c23d70a
 80071a4:	43ff0000 	.word	0x43ff0000
 80071a8:	3db851ec 	.word	0x3db851ec
 80071ac:	42700000 	.word	0x42700000
 80071b0:	3fa66666 	.word	0x3fa66666
 80071b4:	3e99999a 	.word	0x3e99999a

080071b8 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80071b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	223c      	movs	r2, #60	@ 0x3c
 80071c6:	5c9b      	ldrb	r3, [r3, r2]
 80071c8:	2201      	movs	r2, #1
 80071ca:	4053      	eors	r3, r2
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	223c      	movs	r2, #60	@ 0x3c
 80071d6:	2101      	movs	r1, #1
 80071d8:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 80071e6:	e0c8      	b.n	800737a <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	4965      	ldr	r1, [pc, #404]	@ (8007384 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 80071ee:	1c18      	adds	r0, r3, #0
 80071f0:	f7f9 f98a 	bl	8000508 <__aeabi_fcmpge>
 80071f4:	1e03      	subs	r3, r0, #0
 80071f6:	d107      	bne.n	8007208 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80071fc:	4962      	ldr	r1, [pc, #392]	@ (8007388 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 80071fe:	1c18      	adds	r0, r3, #0
 8007200:	f7f9 f96e 	bl	80004e0 <__aeabi_fcmple>
 8007204:	1e03      	subs	r3, r0, #0
 8007206:	d00e      	beq.n	8007226 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007210:	1c19      	adds	r1, r3, #0
 8007212:	1c10      	adds	r0, r2, #0
 8007214:	f7f9 fad2 	bl	80007bc <__aeabi_fadd>
 8007218:	1c03      	adds	r3, r0, #0
 800721a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722a:	1c19      	adds	r1, r3, #0
 800722c:	6838      	ldr	r0, [r7, #0]
 800722e:	f7f9 ff73 	bl	8001118 <__aeabi_fsub>
 8007232:	1c03      	adds	r3, r0, #0
 8007234:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	0018      	movs	r0, r3
 800723a:	f7ff fe7d 	bl	8006f38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	1c19      	adds	r1, r3, #0
 8007244:	6838      	ldr	r0, [r7, #0]
 8007246:	f7f9 ff67 	bl	8001118 <__aeabi_fsub>
 800724a:	1c03      	adds	r3, r0, #0
 800724c:	2185      	movs	r1, #133	@ 0x85
 800724e:	05c9      	lsls	r1, r1, #23
 8007250:	1c18      	adds	r0, r3, #0
 8007252:	f7f9 fc3d 	bl	8000ad0 <__aeabi_fdiv>
 8007256:	1c03      	adds	r3, r0, #0
 8007258:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800725a:	2100      	movs	r1, #0
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7f9 f935 	bl	80004cc <__aeabi_fcmplt>
 8007262:	1e03      	subs	r3, r0, #0
 8007264:	d008      	beq.n	8007278 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800726a:	68f9      	ldr	r1, [r7, #12]
 800726c:	1c18      	adds	r0, r3, #0
 800726e:	f7f9 ff53 	bl	8001118 <__aeabi_fsub>
 8007272:	1c03      	adds	r3, r0, #0
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e007      	b.n	8007288 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800727c:	1c19      	adds	r1, r3, #0
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7f9 fa9c 	bl	80007bc <__aeabi_fadd>
 8007284:	1c03      	adds	r3, r0, #0
 8007286:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007288:	23fe      	movs	r3, #254	@ 0xfe
 800728a:	059b      	lsls	r3, r3, #22
 800728c:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800728e:	493f      	ldr	r1, [pc, #252]	@ (800738c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007290:	6978      	ldr	r0, [r7, #20]
 8007292:	f7f9 f92f 	bl	80004f4 <__aeabi_fcmpgt>
 8007296:	1e03      	subs	r3, r0, #0
 8007298:	d010      	beq.n	80072bc <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800729a:	493c      	ldr	r1, [pc, #240]	@ (800738c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800729c:	6978      	ldr	r0, [r7, #20]
 800729e:	f7f9 fc17 	bl	8000ad0 <__aeabi_fdiv>
 80072a2:	1c03      	adds	r3, r0, #0
 80072a4:	1c1c      	adds	r4, r3, #0
 80072a6:	4939      	ldr	r1, [pc, #228]	@ (800738c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80072a8:	6978      	ldr	r0, [r7, #20]
 80072aa:	f7f9 fc11 	bl	8000ad0 <__aeabi_fdiv>
 80072ae:	1c03      	adds	r3, r0, #0
 80072b0:	1c19      	adds	r1, r3, #0
 80072b2:	1c20      	adds	r0, r4, #0
 80072b4:	f7f9 fdf2 	bl	8000e9c <__aeabi_fmul>
 80072b8:	1c03      	adds	r3, r0, #0
 80072ba:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 80072c0:	1c19      	adds	r1, r3, #0
 80072c2:	2085      	movs	r0, #133	@ 0x85
 80072c4:	05c0      	lsls	r0, r0, #23
 80072c6:	f7f9 ff27 	bl	8001118 <__aeabi_fsub>
 80072ca:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 80072cc:	6939      	ldr	r1, [r7, #16]
 80072ce:	1c18      	adds	r0, r3, #0
 80072d0:	f7f9 fde4 	bl	8000e9c <__aeabi_fmul>
 80072d4:	1c03      	adds	r3, r0, #0
 80072d6:	1c18      	adds	r0, r3, #0
 80072d8:	f011 fdaa 	bl	8018e30 <sqrtf>
 80072dc:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80072e6:	2185      	movs	r1, #133	@ 0x85
 80072e8:	05c9      	lsls	r1, r1, #23
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f7f9 fdd6 	bl	8000e9c <__aeabi_fmul>
 80072f0:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 80072f2:	1c19      	adds	r1, r3, #0
 80072f4:	1c28      	adds	r0, r5, #0
 80072f6:	f7f9 fbeb 	bl	8000ad0 <__aeabi_fdiv>
 80072fa:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80072fc:	1c19      	adds	r1, r3, #0
 80072fe:	1c20      	adds	r0, r4, #0
 8007300:	f7f9 fdcc 	bl	8000e9c <__aeabi_fmul>
 8007304:	1c03      	adds	r3, r0, #0
 8007306:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800730c:	68f9      	ldr	r1, [r7, #12]
 800730e:	1c18      	adds	r0, r3, #0
 8007310:	f7f9 fdc4 	bl	8000e9c <__aeabi_fmul>
 8007314:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007316:	6939      	ldr	r1, [r7, #16]
 8007318:	1c18      	adds	r0, r3, #0
 800731a:	f7f9 fbd9 	bl	8000ad0 <__aeabi_fdiv>
 800731e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007320:	68f9      	ldr	r1, [r7, #12]
 8007322:	1c18      	adds	r0, r3, #0
 8007324:	f7f9 fdba 	bl	8000e9c <__aeabi_fmul>
 8007328:	1c03      	adds	r3, r0, #0
             sqrtf(
 800732a:	1c19      	adds	r1, r3, #0
 800732c:	1c20      	adds	r0, r4, #0
 800732e:	f7f9 fa45 	bl	80007bc <__aeabi_fadd>
 8007332:	1c03      	adds	r3, r0, #0
 8007334:	1c18      	adds	r0, r3, #0
 8007336:	f011 fd7b 	bl	8018e30 <sqrtf>
 800733a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800733c:	1c19      	adds	r1, r3, #0
 800733e:	1c30      	adds	r0, r6, #0
 8007340:	f7f9 fdac 	bl	8000e9c <__aeabi_fmul>
 8007344:	1c03      	adds	r3, r0, #0
 8007346:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007354:	68f9      	ldr	r1, [r7, #12]
 8007356:	1c18      	adds	r0, r3, #0
 8007358:	f7f9 fda0 	bl	8000e9c <__aeabi_fmul>
 800735c:	1c03      	adds	r3, r0, #0
 800735e:	2182      	movs	r1, #130	@ 0x82
 8007360:	05c9      	lsls	r1, r1, #23
 8007362:	1c18      	adds	r0, r3, #0
 8007364:	f7f9 fbb4 	bl	8000ad0 <__aeabi_fdiv>
 8007368:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800736a:	1c19      	adds	r1, r3, #0
 800736c:	1c20      	adds	r0, r4, #0
 800736e:	f7f9 fa25 	bl	80007bc <__aeabi_fadd>
 8007372:	1c03      	adds	r3, r0, #0
 8007374:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800737a:	46c0      	nop			@ (mov r8, r8)
 800737c:	46bd      	mov	sp, r7
 800737e:	b007      	add	sp, #28
 8007380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007382:	46c0      	nop			@ (mov r8, r8)
 8007384:	42c80000 	.word	0x42c80000
 8007388:	c2c80000 	.word	0xc2c80000
 800738c:	44b40000 	.word	0x44b40000

08007390 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073a8:	46c0      	nop			@ (mov r8, r8)
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b004      	add	sp, #16
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073c2:	1c19      	adds	r1, r3, #0
 80073c4:	6838      	ldr	r0, [r7, #0]
 80073c6:	f7f9 fea7 	bl	8001118 <__aeabi_fsub>
 80073ca:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80073cc:	1c19      	adds	r1, r3, #0
 80073ce:	1c20      	adds	r0, r4, #0
 80073d0:	f7f9 fd64 	bl	8000e9c <__aeabi_fmul>
 80073d4:	1c03      	adds	r3, r0, #0
 80073d6:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 80073d8:	4912      	ldr	r1, [pc, #72]	@ (8007424 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7f9 f876 	bl	80004cc <__aeabi_fcmplt>
 80073e0:	1e03      	subs	r3, r0, #0
 80073e2:	d002      	beq.n	80073ea <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 80073e4:	23fe      	movs	r3, #254	@ 0xfe
 80073e6:	059b      	lsls	r3, r3, #22
 80073e8:	e018      	b.n	800741c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 80073ea:	490f      	ldr	r1, [pc, #60]	@ (8007428 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7f9 f881 	bl	80004f4 <__aeabi_fcmpgt>
 80073f2:	1e03      	subs	r3, r0, #0
 80073f4:	d001      	beq.n	80073fa <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e010      	b.n	800741c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1c18      	adds	r0, r3, #0
 80073fe:	f011 fcef 	bl	8018de0 <expf>
 8007402:	1c03      	adds	r3, r0, #0
 8007404:	21fe      	movs	r1, #254	@ 0xfe
 8007406:	0589      	lsls	r1, r1, #22
 8007408:	1c18      	adds	r0, r3, #0
 800740a:	f7f9 f9d7 	bl	80007bc <__aeabi_fadd>
 800740e:	1c03      	adds	r3, r0, #0
 8007410:	1c19      	adds	r1, r3, #0
 8007412:	20fe      	movs	r0, #254	@ 0xfe
 8007414:	0580      	lsls	r0, r0, #22
 8007416:	f7f9 fb5b 	bl	8000ad0 <__aeabi_fdiv>
 800741a:	1c03      	adds	r3, r0, #0
    }
}
 800741c:	1c18      	adds	r0, r3, #0
 800741e:	46bd      	mov	sp, r7
 8007420:	b005      	add	sp, #20
 8007422:	bd90      	pop	{r4, r7, pc}
 8007424:	c2480000 	.word	0xc2480000
 8007428:	42480000 	.word	0x42480000

0800742c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007444:	46c0      	nop			@ (mov r8, r8)
 8007446:	46bd      	mov	sp, r7
 8007448:	b004      	add	sp, #16
 800744a:	bd80      	pop	{r7, pc}

0800744c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800744c:	b590      	push	{r4, r7, lr}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d114      	bne.n	8007488 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007462:	1c19      	adds	r1, r3, #0
 8007464:	6838      	ldr	r0, [r7, #0]
 8007466:	f7f9 fe57 	bl	8001118 <__aeabi_fsub>
 800746a:	1c03      	adds	r3, r0, #0
 800746c:	4918      	ldr	r1, [pc, #96]	@ (80074d0 <GasIndexAlgorithm__mox_model__process+0x84>)
 800746e:	1c18      	adds	r0, r3, #0
 8007470:	f7f9 fb2e 	bl	8000ad0 <__aeabi_fdiv>
 8007474:	1c03      	adds	r3, r0, #0
 8007476:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800747c:	1c19      	adds	r1, r3, #0
 800747e:	1c10      	adds	r0, r2, #0
 8007480:	f7f9 fd0c 	bl	8000e9c <__aeabi_fmul>
 8007484:	1c03      	adds	r3, r0, #0
 8007486:	e01f      	b.n	80074c8 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800748c:	1c19      	adds	r1, r3, #0
 800748e:	6838      	ldr	r0, [r7, #0]
 8007490:	f7f9 fe42 	bl	8001118 <__aeabi_fsub>
 8007494:	1c03      	adds	r3, r0, #0
 8007496:	1c1a      	adds	r2, r3, #0
 8007498:	2380      	movs	r3, #128	@ 0x80
 800749a:	061b      	lsls	r3, r3, #24
 800749c:	4053      	eors	r3, r2
 800749e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074a4:	490b      	ldr	r1, [pc, #44]	@ (80074d4 <GasIndexAlgorithm__mox_model__process+0x88>)
 80074a6:	1c18      	adds	r0, r3, #0
 80074a8:	f7f9 f988 	bl	80007bc <__aeabi_fadd>
 80074ac:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80074ae:	1c19      	adds	r1, r3, #0
 80074b0:	1c20      	adds	r0, r4, #0
 80074b2:	f7f9 fb0d 	bl	8000ad0 <__aeabi_fdiv>
 80074b6:	1c03      	adds	r3, r0, #0
 80074b8:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 80074be:	1c19      	adds	r1, r3, #0
 80074c0:	1c10      	adds	r0, r2, #0
 80074c2:	f7f9 fceb 	bl	8000e9c <__aeabi_fmul>
 80074c6:	1c03      	adds	r3, r0, #0
    }
}
 80074c8:	1c18      	adds	r0, r3, #0
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b003      	add	sp, #12
 80074ce:	bd90      	pop	{r4, r7, pc}
 80074d0:	44fa0000 	.word	0x44fa0000
 80074d4:	435c0000 	.word	0x435c0000

080074d8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2180      	movs	r1, #128	@ 0x80
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2184      	movs	r1, #132	@ 0x84
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2188      	movs	r1, #136	@ 0x88
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	505a      	str	r2, [r3, r1]
}
 80074fe:	46c0      	nop			@ (mov r8, r8)
 8007500:	46bd      	mov	sp, r7
 8007502:	b004      	add	sp, #16
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8007508:	b590      	push	{r4, r7, lr}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2280      	movs	r2, #128	@ 0x80
 8007516:	589c      	ldr	r4, [r3, r2]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2284      	movs	r2, #132	@ 0x84
 800751c:	589b      	ldr	r3, [r3, r2]
 800751e:	1c19      	adds	r1, r3, #0
 8007520:	6838      	ldr	r0, [r7, #0]
 8007522:	f7f9 fdf9 	bl	8001118 <__aeabi_fsub>
 8007526:	1c03      	adds	r3, r0, #0
 8007528:	1c19      	adds	r1, r3, #0
 800752a:	1c20      	adds	r0, r4, #0
 800752c:	f7f9 fcb6 	bl	8000e9c <__aeabi_fmul>
 8007530:	1c03      	adds	r3, r0, #0
 8007532:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007534:	4940      	ldr	r1, [pc, #256]	@ (8007638 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007536:	68b8      	ldr	r0, [r7, #8]
 8007538:	f7f8 ffc8 	bl	80004cc <__aeabi_fcmplt>
 800753c:	1e03      	subs	r3, r0, #0
 800753e:	d001      	beq.n	8007544 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007540:	4b3e      	ldr	r3, [pc, #248]	@ (800763c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007542:	e075      	b.n	8007630 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007544:	493e      	ldr	r1, [pc, #248]	@ (8007640 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007546:	68b8      	ldr	r0, [r7, #8]
 8007548:	f7f8 ffd4 	bl	80004f4 <__aeabi_fcmpgt>
 800754c:	1e03      	subs	r3, r0, #0
 800754e:	d001      	beq.n	8007554 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007550:	2300      	movs	r3, #0
 8007552:	e06d      	b.n	8007630 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007554:	2100      	movs	r1, #0
 8007556:	6838      	ldr	r0, [r7, #0]
 8007558:	f7f8 ffd6 	bl	8000508 <__aeabi_fcmpge>
 800755c:	1e03      	subs	r3, r0, #0
 800755e:	d047      	beq.n	80075f0 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2288      	movs	r2, #136	@ 0x88
 8007564:	589b      	ldr	r3, [r3, r2]
 8007566:	21fe      	movs	r1, #254	@ 0xfe
 8007568:	0589      	lsls	r1, r1, #22
 800756a:	1c18      	adds	r0, r3, #0
 800756c:	f7f8 ffa8 	bl	80004c0 <__aeabi_fcmpeq>
 8007570:	1e03      	subs	r3, r0, #0
 8007572:	d00e      	beq.n	8007592 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	1c19      	adds	r1, r3, #0
 800757a:	20fe      	movs	r0, #254	@ 0xfe
 800757c:	0580      	lsls	r0, r0, #22
 800757e:	f7f9 fdcb 	bl	8001118 <__aeabi_fsub>
 8007582:	1c03      	adds	r3, r0, #0
 8007584:	492f      	ldr	r1, [pc, #188]	@ (8007644 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8007586:	1c18      	adds	r0, r3, #0
 8007588:	f7f9 fc88 	bl	8000e9c <__aeabi_fmul>
 800758c:	1c03      	adds	r3, r0, #0
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e012      	b.n	80075b8 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	492c      	ldr	r1, [pc, #176]	@ (8007648 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007598:	1c18      	adds	r0, r3, #0
 800759a:	f7f9 fc7f 	bl	8000e9c <__aeabi_fmul>
 800759e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80075a0:	1c19      	adds	r1, r3, #0
 80075a2:	4826      	ldr	r0, [pc, #152]	@ (800763c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80075a4:	f7f9 fdb8 	bl	8001118 <__aeabi_fsub>
 80075a8:	1c03      	adds	r3, r0, #0
 80075aa:	2181      	movs	r1, #129	@ 0x81
 80075ac:	05c9      	lsls	r1, r1, #23
 80075ae:	1c18      	adds	r0, r3, #0
 80075b0:	f7f9 fa8e 	bl	8000ad0 <__aeabi_fdiv>
 80075b4:	1c03      	adds	r3, r0, #0
 80075b6:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 80075b8:	4920      	ldr	r1, [pc, #128]	@ (800763c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7f9 f8fe 	bl	80007bc <__aeabi_fadd>
 80075c0:	1c03      	adds	r3, r0, #0
 80075c2:	1c1c      	adds	r4, r3, #0
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	1c18      	adds	r0, r3, #0
 80075c8:	f011 fc0a 	bl	8018de0 <expf>
 80075cc:	1c03      	adds	r3, r0, #0
 80075ce:	21fe      	movs	r1, #254	@ 0xfe
 80075d0:	0589      	lsls	r1, r1, #22
 80075d2:	1c18      	adds	r0, r3, #0
 80075d4:	f7f9 f8f2 	bl	80007bc <__aeabi_fadd>
 80075d8:	1c03      	adds	r3, r0, #0
 80075da:	1c19      	adds	r1, r3, #0
 80075dc:	1c20      	adds	r0, r4, #0
 80075de:	f7f9 fa77 	bl	8000ad0 <__aeabi_fdiv>
 80075e2:	1c03      	adds	r3, r0, #0
 80075e4:	68f9      	ldr	r1, [r7, #12]
 80075e6:	1c18      	adds	r0, r3, #0
 80075e8:	f7f9 fd96 	bl	8001118 <__aeabi_fsub>
 80075ec:	1c03      	adds	r3, r0, #0
 80075ee:	e01f      	b.n	8007630 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2188      	movs	r1, #136	@ 0x88
 80075f8:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 80075fa:	1c19      	adds	r1, r3, #0
 80075fc:	1c10      	adds	r0, r2, #0
 80075fe:	f7f9 fa67 	bl	8000ad0 <__aeabi_fdiv>
 8007602:	1c03      	adds	r3, r0, #0
 8007604:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	1c18      	adds	r0, r3, #0
 800760a:	f011 fbe9 	bl	8018de0 <expf>
 800760e:	1c03      	adds	r3, r0, #0
 8007610:	21fe      	movs	r1, #254	@ 0xfe
 8007612:	0589      	lsls	r1, r1, #22
 8007614:	1c18      	adds	r0, r3, #0
 8007616:	f7f9 f8d1 	bl	80007bc <__aeabi_fadd>
 800761a:	1c03      	adds	r3, r0, #0
 800761c:	1c19      	adds	r1, r3, #0
 800761e:	4807      	ldr	r0, [pc, #28]	@ (800763c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007620:	f7f9 fa56 	bl	8000ad0 <__aeabi_fdiv>
 8007624:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007626:	1c19      	adds	r1, r3, #0
 8007628:	1c20      	adds	r0, r4, #0
 800762a:	f7f9 fc37 	bl	8000e9c <__aeabi_fmul>
 800762e:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007630:	1c18      	adds	r0, r3, #0
 8007632:	46bd      	mov	sp, r7
 8007634:	b005      	add	sp, #20
 8007636:	bd90      	pop	{r4, r7, pc}
 8007638:	c2480000 	.word	0xc2480000
 800763c:	43fa0000 	.word	0x43fa0000
 8007640:	42480000 	.word	0x42480000
 8007644:	3f8041ab 	.word	0x3f8041ab
 8007648:	40a00000 	.word	0x40a00000

0800764c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	4913      	ldr	r1, [pc, #76]	@ (80076ac <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800765e:	1c18      	adds	r0, r3, #0
 8007660:	f7f9 f8ac 	bl	80007bc <__aeabi_fadd>
 8007664:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007666:	1c19      	adds	r1, r3, #0
 8007668:	1c20      	adds	r0, r4, #0
 800766a:	f7f9 fa31 	bl	8000ad0 <__aeabi_fdiv>
 800766e:	1c03      	adds	r3, r0, #0
 8007670:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	228c      	movs	r2, #140	@ 0x8c
 8007676:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	490b      	ldr	r1, [pc, #44]	@ (80076b0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8007682:	1c18      	adds	r0, r3, #0
 8007684:	f7f9 f89a 	bl	80007bc <__aeabi_fadd>
 8007688:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800768a:	1c19      	adds	r1, r3, #0
 800768c:	1c20      	adds	r0, r4, #0
 800768e:	f7f9 fa1f 	bl	8000ad0 <__aeabi_fdiv>
 8007692:	1c03      	adds	r3, r0, #0
 8007694:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2290      	movs	r2, #144	@ 0x90
 800769a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2294      	movs	r2, #148	@ 0x94
 80076a0:	2100      	movs	r1, #0
 80076a2:	5499      	strb	r1, [r3, r2]
}
 80076a4:	46c0      	nop			@ (mov r8, r8)
 80076a6:	46bd      	mov	sp, r7
 80076a8:	b003      	add	sp, #12
 80076aa:	bd90      	pop	{r4, r7, pc}
 80076ac:	41a00000 	.word	0x41a00000
 80076b0:	43fa0000 	.word	0x43fa0000

080076b4 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80076b4:	b590      	push	{r4, r7, lr}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2294      	movs	r2, #148	@ 0x94
 80076c2:	5c9b      	ldrb	r3, [r3, r2]
 80076c4:	2201      	movs	r2, #1
 80076c6:	4053      	eors	r3, r2
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00f      	beq.n	80076ee <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2198      	movs	r1, #152	@ 0x98
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	219c      	movs	r1, #156	@ 0x9c
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	21a0      	movs	r1, #160	@ 0xa0
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2294      	movs	r2, #148	@ 0x94
 80076ea:	2101      	movs	r1, #1
 80076ec:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	228c      	movs	r2, #140	@ 0x8c
 80076f2:	589b      	ldr	r3, [r3, r2]
 80076f4:	1c19      	adds	r1, r3, #0
 80076f6:	20fe      	movs	r0, #254	@ 0xfe
 80076f8:	0580      	lsls	r0, r0, #22
 80076fa:	f7f9 fd0d 	bl	8001118 <__aeabi_fsub>
 80076fe:	1c03      	adds	r3, r0, #0
 8007700:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2298      	movs	r2, #152	@ 0x98
 8007706:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007708:	1c19      	adds	r1, r3, #0
 800770a:	f7f9 fbc7 	bl	8000e9c <__aeabi_fmul>
 800770e:	1c03      	adds	r3, r0, #0
 8007710:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	228c      	movs	r2, #140	@ 0x8c
 8007716:	589b      	ldr	r3, [r3, r2]
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	1c18      	adds	r0, r3, #0
 800771c:	f7f9 fbbe 	bl	8000e9c <__aeabi_fmul>
 8007720:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8007722:	1c19      	adds	r1, r3, #0
 8007724:	1c20      	adds	r0, r4, #0
 8007726:	f7f9 f849 	bl	80007bc <__aeabi_fadd>
 800772a:	1c03      	adds	r3, r0, #0
 800772c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2298      	movs	r2, #152	@ 0x98
 8007732:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2290      	movs	r2, #144	@ 0x90
 8007738:	589b      	ldr	r3, [r3, r2]
 800773a:	1c19      	adds	r1, r3, #0
 800773c:	20fe      	movs	r0, #254	@ 0xfe
 800773e:	0580      	lsls	r0, r0, #22
 8007740:	f7f9 fcea 	bl	8001118 <__aeabi_fsub>
 8007744:	1c03      	adds	r3, r0, #0
 8007746:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	229c      	movs	r2, #156	@ 0x9c
 800774c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800774e:	1c19      	adds	r1, r3, #0
 8007750:	f7f9 fba4 	bl	8000e9c <__aeabi_fmul>
 8007754:	1c03      	adds	r3, r0, #0
 8007756:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2290      	movs	r2, #144	@ 0x90
 800775c:	589b      	ldr	r3, [r3, r2]
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	1c18      	adds	r0, r3, #0
 8007762:	f7f9 fb9b 	bl	8000e9c <__aeabi_fmul>
 8007766:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8007768:	1c19      	adds	r1, r3, #0
 800776a:	1c20      	adds	r0, r4, #0
 800776c:	f7f9 f826 	bl	80007bc <__aeabi_fadd>
 8007770:	1c03      	adds	r3, r0, #0
 8007772:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	229c      	movs	r2, #156	@ 0x9c
 8007778:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2298      	movs	r2, #152	@ 0x98
 800777e:	589a      	ldr	r2, [r3, r2]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	219c      	movs	r1, #156	@ 0x9c
 8007784:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8007786:	1c19      	adds	r1, r3, #0
 8007788:	1c10      	adds	r0, r2, #0
 800778a:	f7f9 fcc5 	bl	8001118 <__aeabi_fsub>
 800778e:	1c03      	adds	r3, r0, #0
 8007790:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8007792:	2100      	movs	r1, #0
 8007794:	6978      	ldr	r0, [r7, #20]
 8007796:	f7f8 fe99 	bl	80004cc <__aeabi_fcmplt>
 800779a:	1e03      	subs	r3, r0, #0
 800779c:	d004      	beq.n	80077a8 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2280      	movs	r2, #128	@ 0x80
 80077a2:	0612      	lsls	r2, r2, #24
 80077a4:	4053      	eors	r3, r2
 80077a6:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80077a8:	4923      	ldr	r1, [pc, #140]	@ (8007838 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80077aa:	6978      	ldr	r0, [r7, #20]
 80077ac:	f7f9 fb76 	bl	8000e9c <__aeabi_fmul>
 80077b0:	1c03      	adds	r3, r0, #0
 80077b2:	1c18      	adds	r0, r3, #0
 80077b4:	f011 fb14 	bl	8018de0 <expf>
 80077b8:	1c03      	adds	r3, r0, #0
 80077ba:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 80077bc:	491f      	ldr	r1, [pc, #124]	@ (800783c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 80077be:	6938      	ldr	r0, [r7, #16]
 80077c0:	f7f9 fb6c 	bl	8000e9c <__aeabi_fmul>
 80077c4:	1c03      	adds	r3, r0, #0
 80077c6:	491e      	ldr	r1, [pc, #120]	@ (8007840 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80077c8:	1c18      	adds	r0, r3, #0
 80077ca:	f7f8 fff7 	bl	80007bc <__aeabi_fadd>
 80077ce:	1c03      	adds	r3, r0, #0
 80077d0:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685c      	ldr	r4, [r3, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	68f9      	ldr	r1, [r7, #12]
 80077dc:	1c18      	adds	r0, r3, #0
 80077de:	f7f8 ffed 	bl	80007bc <__aeabi_fadd>
 80077e2:	1c03      	adds	r3, r0, #0
 80077e4:	1c19      	adds	r1, r3, #0
 80077e6:	1c20      	adds	r0, r4, #0
 80077e8:	f7f9 f972 	bl	8000ad0 <__aeabi_fdiv>
 80077ec:	1c03      	adds	r3, r0, #0
 80077ee:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	20fe      	movs	r0, #254	@ 0xfe
 80077f4:	0580      	lsls	r0, r0, #22
 80077f6:	f7f9 fc8f 	bl	8001118 <__aeabi_fsub>
 80077fa:	1c03      	adds	r3, r0, #0
 80077fc:	1c18      	adds	r0, r3, #0
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	22a0      	movs	r2, #160	@ 0xa0
 8007802:	589b      	ldr	r3, [r3, r2]
 8007804:	1c19      	adds	r1, r3, #0
 8007806:	f7f9 fb49 	bl	8000e9c <__aeabi_fmul>
 800780a:	1c03      	adds	r3, r0, #0
 800780c:	1c1c      	adds	r4, r3, #0
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f7f9 fb43 	bl	8000e9c <__aeabi_fmul>
 8007816:	1c03      	adds	r3, r0, #0
 8007818:	1c19      	adds	r1, r3, #0
 800781a:	1c20      	adds	r0, r4, #0
 800781c:	f7f8 ffce 	bl	80007bc <__aeabi_fadd>
 8007820:	1c03      	adds	r3, r0, #0
 8007822:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	22a0      	movs	r2, #160	@ 0xa0
 8007828:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	22a0      	movs	r2, #160	@ 0xa0
 800782e:	589b      	ldr	r3, [r3, r2]
}
 8007830:	1c18      	adds	r0, r3, #0
 8007832:	46bd      	mov	sp, r7
 8007834:	b007      	add	sp, #28
 8007836:	bd90      	pop	{r4, r7, pc}
 8007838:	be4ccccd 	.word	0xbe4ccccd
 800783c:	43f00000 	.word	0x43f00000
 8007840:	41a00000 	.word	0x41a00000

08007844 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6039      	str	r1, [r7, #0]
 800784c:	0011      	movs	r1, r2
 800784e:	1dfb      	adds	r3, r7, #7
 8007850:	1c02      	adds	r2, r0, #0
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	1dbb      	adds	r3, r7, #6
 8007856:	1c0a      	adds	r2, r1, #0
 8007858:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800785a:	4b08      	ldr	r3, [pc, #32]	@ (800787c <ReadRegister+0x38>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d008      	beq.n	8007874 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8007862:	4b06      	ldr	r3, [pc, #24]	@ (800787c <ReadRegister+0x38>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	1dba      	adds	r2, r7, #6
 8007868:	7814      	ldrb	r4, [r2, #0]
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	1dfa      	adds	r2, r7, #7
 800786e:	7810      	ldrb	r0, [r2, #0]
 8007870:	0022      	movs	r2, r4
 8007872:	4798      	blx	r3
  }
}
 8007874:	46c0      	nop			@ (mov r8, r8)
 8007876:	46bd      	mov	sp, r7
 8007878:	b003      	add	sp, #12
 800787a:	bd90      	pop	{r4, r7, pc}
 800787c:	2000256c 	.word	0x2000256c

08007880 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8007880:	b590      	push	{r4, r7, lr}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6039      	str	r1, [r7, #0]
 8007888:	0011      	movs	r1, r2
 800788a:	1dfb      	adds	r3, r7, #7
 800788c:	1c02      	adds	r2, r0, #0
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	1dbb      	adds	r3, r7, #6
 8007892:	1c0a      	adds	r2, r1, #0
 8007894:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8007896:	4b08      	ldr	r3, [pc, #32]	@ (80078b8 <WriteRegister+0x38>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d008      	beq.n	80078b0 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800789e:	4b06      	ldr	r3, [pc, #24]	@ (80078b8 <WriteRegister+0x38>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	1dba      	adds	r2, r7, #6
 80078a4:	7814      	ldrb	r4, [r2, #0]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	1dfa      	adds	r2, r7, #7
 80078aa:	7810      	ldrb	r0, [r2, #0]
 80078ac:	0022      	movs	r2, r4
 80078ae:	4798      	blx	r3
  }
}
 80078b0:	46c0      	nop			@ (mov r8, r8)
 80078b2:	46bd      	mov	sp, r7
 80078b4:	b003      	add	sp, #12
 80078b6:	bd90      	pop	{r4, r7, pc}
 80078b8:	20002570 	.word	0x20002570

080078bc <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80078c6:	4b07      	ldr	r3, [pc, #28]	@ (80078e4 <SGP_Init+0x28>)
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80078cc:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <SGP_Init+0x2c>)
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80078d2:	4b06      	ldr	r3, [pc, #24]	@ (80078ec <SGP_Init+0x30>)
 80078d4:	2100      	movs	r1, #0
 80078d6:	0018      	movs	r0, r3
 80078d8:	f7ff f930 	bl	8006b3c <GasIndexAlgorithm_init>
}
 80078dc:	46c0      	nop			@ (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	b002      	add	sp, #8
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	2000256c 	.word	0x2000256c
 80078e8:	20002570 	.word	0x20002570
 80078ec:	20002580 	.word	0x20002580

080078f0 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80078f4:	4b13      	ldr	r3, [pc, #76]	@ (8007944 <SGP_StartMeasurement+0x54>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00d      	beq.n	8007918 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80078fc:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <SGP_StartMeasurement+0x58>)
 80078fe:	2208      	movs	r2, #8
 8007900:	0019      	movs	r1, r3
 8007902:	2059      	movs	r0, #89	@ 0x59
 8007904:	f7ff ffbc 	bl	8007880 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007908:	f001 f956 	bl	8008bb8 <GetCurrentHalTicks>
 800790c:	0003      	movs	r3, r0
 800790e:	331e      	adds	r3, #30
 8007910:	001a      	movs	r2, r3
 8007912:	4b0e      	ldr	r3, [pc, #56]	@ (800794c <SGP_StartMeasurement+0x5c>)
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	e00c      	b.n	8007932 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007918:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <SGP_StartMeasurement+0x60>)
 800791a:	2208      	movs	r2, #8
 800791c:	0019      	movs	r1, r3
 800791e:	2059      	movs	r0, #89	@ 0x59
 8007920:	f7ff ffae 	bl	8007880 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8007924:	f001 f948 	bl	8008bb8 <GetCurrentHalTicks>
 8007928:	0003      	movs	r3, r0
 800792a:	33aa      	adds	r3, #170	@ 0xaa
 800792c:	001a      	movs	r2, r3
 800792e:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <SGP_StartMeasurement+0x64>)
 8007930:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8007932:	4b09      	ldr	r3, [pc, #36]	@ (8007958 <SGP_StartMeasurement+0x68>)
 8007934:	2200      	movs	r2, #0
 8007936:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8007938:	4b08      	ldr	r3, [pc, #32]	@ (800795c <SGP_StartMeasurement+0x6c>)
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
}
 800793e:	46c0      	nop			@ (mov r8, r8)
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20002628 	.word	0x20002628
 8007948:	20000124 	.word	0x20000124
 800794c:	20000138 	.word	0x20000138
 8007950:	2000011c 	.word	0x2000011c
 8007954:	20000130 	.word	0x20000130
 8007958:	2000257e 	.word	0x2000257e
 800795c:	2000257f 	.word	0x2000257f

08007960 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
 8007964:	4b04      	ldr	r3, [pc, #16]	@ (8007978 <SGP_HeatedUp+0x18>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	0018      	movs	r0, r3
 800796a:	f001 f843 	bl	80089f4 <TimestampIsReached>
 800796e:	0003      	movs	r3, r0
 8007970:	0018      	movs	r0, r3
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	46c0      	nop			@ (mov r8, r8)
 8007978:	20000130 	.word	0x20000130

0800797c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8007980:	4b04      	ldr	r3, [pc, #16]	@ (8007994 <SGP_MeasurementReady+0x18>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	0018      	movs	r0, r3
 8007986:	f001 f835 	bl	80089f4 <TimestampIsReached>
 800798a:	0003      	movs	r3, r0
}
 800798c:	0018      	movs	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	46c0      	nop			@ (mov r8, r8)
 8007994:	20000138 	.word	0x20000138

08007998 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800799c:	4b04      	ldr	r3, [pc, #16]	@ (80079b0 <SGP_MeasurementDone+0x18>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	0018      	movs	r0, r3
 80079a2:	f001 f827 	bl	80089f4 <TimestampIsReached>
 80079a6:	0003      	movs	r3, r0
}
 80079a8:	0018      	movs	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			@ (mov r8, r8)
 80079b0:	20000134 	.word	0x20000134

080079b4 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80079b8:	4b04      	ldr	r3, [pc, #16]	@ (80079cc <SGP_TurnHeaterOff+0x18>)
 80079ba:	2202      	movs	r2, #2
 80079bc:	0019      	movs	r1, r3
 80079be:	2059      	movs	r0, #89	@ 0x59
 80079c0:	f7ff ff5e 	bl	8007880 <WriteRegister>
}
 80079c4:	46c0      	nop			@ (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	20000114 	.word	0x20000114

080079d0 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80079d0:	b5b0      	push	{r4, r5, r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80079d8:	f7ff ffc2 	bl	8007960 <SGP_HeatedUp>
 80079dc:	1e03      	subs	r3, r0, #0
 80079de:	d038      	beq.n	8007a52 <SGP_GetMeasurementValues+0x82>
 80079e0:	4bd8      	ldr	r3, [pc, #864]	@ (8007d44 <SGP_GetMeasurementValues+0x374>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2201      	movs	r2, #1
 80079e6:	4053      	eors	r3, r2
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d031      	beq.n	8007a52 <SGP_GetMeasurementValues+0x82>
 80079ee:	4bd6      	ldr	r3, [pc, #856]	@ (8007d48 <SGP_GetMeasurementValues+0x378>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2201      	movs	r2, #1
 80079f4:	4053      	eors	r3, r2
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d02a      	beq.n	8007a52 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80079fc:	4ad3      	ldr	r2, [pc, #844]	@ (8007d4c <SGP_GetMeasurementValues+0x37c>)
 80079fe:	4bd4      	ldr	r3, [pc, #848]	@ (8007d50 <SGP_GetMeasurementValues+0x380>)
 8007a00:	0019      	movs	r1, r3
 8007a02:	2003      	movs	r0, #3
 8007a04:	f001 f84c 	bl	8008aa0 <CreateLine>
    HeatUpIsDone = true;
 8007a08:	4bce      	ldr	r3, [pc, #824]	@ (8007d44 <SGP_GetMeasurementValues+0x374>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8007a0e:	4bd1      	ldr	r3, [pc, #836]	@ (8007d54 <SGP_GetMeasurementValues+0x384>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00d      	beq.n	8007a32 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007a16:	4bd0      	ldr	r3, [pc, #832]	@ (8007d58 <SGP_GetMeasurementValues+0x388>)
 8007a18:	2208      	movs	r2, #8
 8007a1a:	0019      	movs	r1, r3
 8007a1c:	2059      	movs	r0, #89	@ 0x59
 8007a1e:	f7ff ff2f 	bl	8007880 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007a22:	f001 f8c9 	bl	8008bb8 <GetCurrentHalTicks>
 8007a26:	0003      	movs	r3, r0
 8007a28:	331e      	adds	r3, #30
 8007a2a:	001a      	movs	r2, r3
 8007a2c:	4bcb      	ldr	r3, [pc, #812]	@ (8007d5c <SGP_GetMeasurementValues+0x38c>)
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	e00c      	b.n	8007a4c <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007a32:	4bcb      	ldr	r3, [pc, #812]	@ (8007d60 <SGP_GetMeasurementValues+0x390>)
 8007a34:	2208      	movs	r2, #8
 8007a36:	0019      	movs	r1, r3
 8007a38:	2059      	movs	r0, #89	@ 0x59
 8007a3a:	f7ff ff21 	bl	8007880 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007a3e:	f001 f8bb 	bl	8008bb8 <GetCurrentHalTicks>
 8007a42:	0003      	movs	r3, r0
 8007a44:	331e      	adds	r3, #30
 8007a46:	001a      	movs	r2, r3
 8007a48:	4bc4      	ldr	r3, [pc, #784]	@ (8007d5c <SGP_GetMeasurementValues+0x38c>)
 8007a4a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8007a4c:	4bbe      	ldr	r3, [pc, #760]	@ (8007d48 <SGP_GetMeasurementValues+0x378>)
 8007a4e:	2201      	movs	r2, #1
 8007a50:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8007a52:	4bbc      	ldr	r3, [pc, #752]	@ (8007d44 <SGP_GetMeasurementValues+0x374>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d100      	bne.n	8007a5c <SGP_GetMeasurementValues+0x8c>
 8007a5a:	e1b1      	b.n	8007dc0 <SGP_GetMeasurementValues+0x3f0>
 8007a5c:	f7ff ff8e 	bl	800797c <SGP_MeasurementReady>
 8007a60:	1e03      	subs	r3, r0, #0
 8007a62:	d100      	bne.n	8007a66 <SGP_GetMeasurementValues+0x96>
 8007a64:	e1ac      	b.n	8007dc0 <SGP_GetMeasurementValues+0x3f0>
 8007a66:	4bbf      	ldr	r3, [pc, #764]	@ (8007d64 <SGP_GetMeasurementValues+0x394>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	4053      	eors	r3, r2
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d100      	bne.n	8007a76 <SGP_GetMeasurementValues+0xa6>
 8007a74:	e1a4      	b.n	8007dc0 <SGP_GetMeasurementValues+0x3f0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8007a76:	4bbc      	ldr	r3, [pc, #752]	@ (8007d68 <SGP_GetMeasurementValues+0x398>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	4abb      	ldr	r2, [pc, #748]	@ (8007d6c <SGP_GetMeasurementValues+0x39c>)
 8007a7e:	49b4      	ldr	r1, [pc, #720]	@ (8007d50 <SGP_GetMeasurementValues+0x380>)
 8007a80:	2003      	movs	r0, #3
 8007a82:	f001 f80d 	bl	8008aa0 <CreateLine>
    MeasurementIsReady = true;
 8007a86:	4bb7      	ldr	r3, [pc, #732]	@ (8007d64 <SGP_GetMeasurementValues+0x394>)
 8007a88:	2201      	movs	r2, #1
 8007a8a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8007a8c:	4bb8      	ldr	r3, [pc, #736]	@ (8007d70 <SGP_GetMeasurementValues+0x3a0>)
 8007a8e:	2203      	movs	r2, #3
 8007a90:	0019      	movs	r1, r3
 8007a92:	2059      	movs	r0, #89	@ 0x59
 8007a94:	f7ff fed6 	bl	8007844 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8007a98:	4bb5      	ldr	r3, [pc, #724]	@ (8007d70 <SGP_GetMeasurementValues+0x3a0>)
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	2103      	movs	r1, #3
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f000 f9f4 	bl	8007e8c <CheckCRC>
 8007aa4:	0003      	movs	r3, r0
 8007aa6:	001a      	movs	r2, r3
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4053      	eors	r3, r2
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d02a      	beq.n	8007b08 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8007ab2:	4ab0      	ldr	r2, [pc, #704]	@ (8007d74 <SGP_GetMeasurementValues+0x3a4>)
 8007ab4:	4bb0      	ldr	r3, [pc, #704]	@ (8007d78 <SGP_GetMeasurementValues+0x3a8>)
 8007ab6:	0019      	movs	r1, r3
 8007ab8:	2001      	movs	r0, #1
 8007aba:	f000 fff1 	bl	8008aa0 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8007abe:	4aaf      	ldr	r2, [pc, #700]	@ (8007d7c <SGP_GetMeasurementValues+0x3ac>)
 8007ac0:	4baf      	ldr	r3, [pc, #700]	@ (8007d80 <SGP_GetMeasurementValues+0x3b0>)
 8007ac2:	0019      	movs	r1, r3
 8007ac4:	2002      	movs	r0, #2
 8007ac6:	f000 ffeb 	bl	8008aa0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007aca:	230f      	movs	r3, #15
 8007acc:	18fb      	adds	r3, r7, r3
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	e012      	b.n	8007afa <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8007ad4:	240f      	movs	r4, #15
 8007ad6:	193b      	adds	r3, r7, r4
 8007ad8:	7818      	ldrb	r0, [r3, #0]
 8007ada:	193b      	adds	r3, r7, r4
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	4aa4      	ldr	r2, [pc, #656]	@ (8007d70 <SGP_GetMeasurementValues+0x3a0>)
 8007ae0:	5cd3      	ldrb	r3, [r2, r3]
 8007ae2:	4aa8      	ldr	r2, [pc, #672]	@ (8007d84 <SGP_GetMeasurementValues+0x3b4>)
 8007ae4:	499a      	ldr	r1, [pc, #616]	@ (8007d50 <SGP_GetMeasurementValues+0x380>)
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	0003      	movs	r3, r0
 8007aea:	2003      	movs	r0, #3
 8007aec:	f000 ffd8 	bl	8008aa0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007af0:	193b      	adds	r3, r7, r4
 8007af2:	781a      	ldrb	r2, [r3, #0]
 8007af4:	193b      	adds	r3, r7, r4
 8007af6:	3201      	adds	r2, #1
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	230f      	movs	r3, #15
 8007afc:	18fb      	adds	r3, r7, r3
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d9e7      	bls.n	8007ad4 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8007b04:	2300      	movs	r3, #0
 8007b06:	e173      	b.n	8007df0 <SGP_GetMeasurementValues+0x420>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8007b08:	f001 f856 	bl	8008bb8 <GetCurrentHalTicks>
 8007b0c:	0003      	movs	r3, r0
 8007b0e:	22fa      	movs	r2, #250	@ 0xfa
 8007b10:	0092      	lsls	r2, r2, #2
 8007b12:	189a      	adds	r2, r3, r2
 8007b14:	4b9c      	ldr	r3, [pc, #624]	@ (8007d88 <SGP_GetMeasurementValues+0x3b8>)
 8007b16:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8007b18:	f7ff ff4c 	bl	80079b4 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8007b1c:	4b92      	ldr	r3, [pc, #584]	@ (8007d68 <SGP_GetMeasurementValues+0x398>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	3301      	adds	r3, #1
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	4b90      	ldr	r3, [pc, #576]	@ (8007d68 <SGP_GetMeasurementValues+0x398>)
 8007b26:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8007b28:	4b8f      	ldr	r3, [pc, #572]	@ (8007d68 <SGP_GetMeasurementValues+0x398>)
 8007b2a:	781a      	ldrb	r2, [r3, #0]
 8007b2c:	4b97      	ldr	r3, [pc, #604]	@ (8007d8c <SGP_GetMeasurementValues+0x3bc>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d200      	bcs.n	8007b36 <SGP_GetMeasurementValues+0x166>
 8007b34:	e144      	b.n	8007dc0 <SGP_GetMeasurementValues+0x3f0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8007b36:	4b8e      	ldr	r3, [pc, #568]	@ (8007d70 <SGP_GetMeasurementValues+0x3a0>)
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	b21a      	sxth	r2, r3
 8007b3e:	4b8c      	ldr	r3, [pc, #560]	@ (8007d70 <SGP_GetMeasurementValues+0x3a0>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b21b      	sxth	r3, r3
 8007b44:	4313      	orrs	r3, r2
 8007b46:	b21a      	sxth	r2, r3
 8007b48:	240c      	movs	r4, #12
 8007b4a:	193b      	adds	r3, r7, r4
 8007b4c:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8007b4e:	193b      	adds	r3, r7, r4
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	4a8f      	ldr	r2, [pc, #572]	@ (8007d90 <SGP_GetMeasurementValues+0x3c0>)
 8007b54:	497e      	ldr	r1, [pc, #504]	@ (8007d50 <SGP_GetMeasurementValues+0x380>)
 8007b56:	2003      	movs	r0, #3
 8007b58:	f000 ffa2 	bl	8008aa0 <CreateLine>
      int32_t tempVocIndex = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8007b60:	193b      	adds	r3, r7, r4
 8007b62:	8819      	ldrh	r1, [r3, #0]
 8007b64:	2308      	movs	r3, #8
 8007b66:	18fa      	adds	r2, r7, r3
 8007b68:	4b8a      	ldr	r3, [pc, #552]	@ (8007d94 <SGP_GetMeasurementValues+0x3c4>)
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	f7ff f848 	bl	8006c00 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4a89      	ldr	r2, [pc, #548]	@ (8007d98 <SGP_GetMeasurementValues+0x3c8>)
 8007b74:	4976      	ldr	r1, [pc, #472]	@ (8007d50 <SGP_GetMeasurementValues+0x380>)
 8007b76:	2003      	movs	r0, #3
 8007b78:	f000 ff92 	bl	8008aa0 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	dd5d      	ble.n	8007c46 <SGP_GetMeasurementValues+0x276>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b64      	cmp	r3, #100	@ 0x64
 8007b90:	dc59      	bgt.n	8007c46 <SGP_GetMeasurementValues+0x276>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	0018      	movs	r0, r3
 8007b98:	f7fb fb90 	bl	80032bc <__aeabi_i2d>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d9c <SGP_GetMeasurementValues+0x3cc>)
 8007ba0:	f7fa f886 	bl	8001cb0 <__aeabi_ddiv>
 8007ba4:	0002      	movs	r2, r0
 8007ba6:	000b      	movs	r3, r1
 8007ba8:	2000      	movs	r0, #0
 8007baa:	497d      	ldr	r1, [pc, #500]	@ (8007da0 <SGP_GetMeasurementValues+0x3d0>)
 8007bac:	f7fa ff8c 	bl	8002ac8 <__aeabi_dsub>
 8007bb0:	0002      	movs	r2, r0
 8007bb2:	000b      	movs	r3, r1
 8007bb4:	0014      	movs	r4, r2
 8007bb6:	001d      	movs	r5, r3
 8007bb8:	4b7a      	ldr	r3, [pc, #488]	@ (8007da4 <SGP_GetMeasurementValues+0x3d4>)
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	f7fb fb7d 	bl	80032bc <__aeabi_i2d>
 8007bc2:	0002      	movs	r2, r0
 8007bc4:	000b      	movs	r3, r1
 8007bc6:	0020      	movs	r0, r4
 8007bc8:	0029      	movs	r1, r5
 8007bca:	f7fa fcb5 	bl	8002538 <__aeabi_dmul>
 8007bce:	0002      	movs	r2, r0
 8007bd0:	000b      	movs	r3, r1
 8007bd2:	0010      	movs	r0, r2
 8007bd4:	0019      	movs	r1, r3
 8007bd6:	f7f8 fd07 	bl	80005e8 <__aeabi_d2uiz>
 8007bda:	0003      	movs	r3, r0
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	4b72      	ldr	r3, [pc, #456]	@ (8007da8 <SGP_GetMeasurementValues+0x3d8>)
 8007be0:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	0018      	movs	r0, r3
 8007be8:	f7fb fb68 	bl	80032bc <__aeabi_i2d>
 8007bec:	2200      	movs	r2, #0
 8007bee:	4b6b      	ldr	r3, [pc, #428]	@ (8007d9c <SGP_GetMeasurementValues+0x3cc>)
 8007bf0:	f7fa f85e 	bl	8001cb0 <__aeabi_ddiv>
 8007bf4:	0002      	movs	r2, r0
 8007bf6:	000b      	movs	r3, r1
 8007bf8:	0014      	movs	r4, r2
 8007bfa:	001d      	movs	r5, r3
 8007bfc:	4b69      	ldr	r3, [pc, #420]	@ (8007da4 <SGP_GetMeasurementValues+0x3d4>)
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	0018      	movs	r0, r3
 8007c02:	f7fb fb5b 	bl	80032bc <__aeabi_i2d>
 8007c06:	0002      	movs	r2, r0
 8007c08:	000b      	movs	r3, r1
 8007c0a:	0020      	movs	r0, r4
 8007c0c:	0029      	movs	r1, r5
 8007c0e:	f7fa fc93 	bl	8002538 <__aeabi_dmul>
 8007c12:	0002      	movs	r2, r0
 8007c14:	000b      	movs	r3, r1
 8007c16:	0010      	movs	r0, r2
 8007c18:	0019      	movs	r1, r3
 8007c1a:	f7f8 fce5 	bl	80005e8 <__aeabi_d2uiz>
 8007c1e:	0003      	movs	r3, r0
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	4b62      	ldr	r3, [pc, #392]	@ (8007dac <SGP_GetMeasurementValues+0x3dc>)
 8007c24:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8007c26:	4b5f      	ldr	r3, [pc, #380]	@ (8007da4 <SGP_GetMeasurementValues+0x3d4>)
 8007c28:	881a      	ldrh	r2, [r3, #0]
 8007c2a:	4b61      	ldr	r3, [pc, #388]	@ (8007db0 <SGP_GetMeasurementValues+0x3e0>)
 8007c2c:	801a      	strh	r2, [r3, #0]
      TIM3->CCR1 = Red;
 8007c2e:	4b60      	ldr	r3, [pc, #384]	@ (8007db0 <SGP_GetMeasurementValues+0x3e0>)
 8007c30:	881a      	ldrh	r2, [r3, #0]
 8007c32:	4b60      	ldr	r3, [pc, #384]	@ (8007db4 <SGP_GetMeasurementValues+0x3e4>)
 8007c34:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3->CCR2 = Green;
 8007c36:	4b5c      	ldr	r3, [pc, #368]	@ (8007da8 <SGP_GetMeasurementValues+0x3d8>)
 8007c38:	881a      	ldrh	r2, [r3, #0]
 8007c3a:	4b5e      	ldr	r3, [pc, #376]	@ (8007db4 <SGP_GetMeasurementValues+0x3e4>)
 8007c3c:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3->CCR3 = Blue;
 8007c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8007dac <SGP_GetMeasurementValues+0x3dc>)
 8007c40:	881a      	ldrh	r2, [r3, #0]
 8007c42:	4b5c      	ldr	r3, [pc, #368]	@ (8007db4 <SGP_GetMeasurementValues+0x3e4>)
 8007c44:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      if(*vocIndex > 100){
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b64      	cmp	r3, #100	@ 0x64
 8007c4c:	dd69      	ble.n	8007d22 <SGP_GetMeasurementValues+0x352>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	0018      	movs	r0, r3
 8007c54:	f7fb fb32 	bl	80032bc <__aeabi_i2d>
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4b50      	ldr	r3, [pc, #320]	@ (8007d9c <SGP_GetMeasurementValues+0x3cc>)
 8007c5c:	f7fa ff34 	bl	8002ac8 <__aeabi_dsub>
 8007c60:	0002      	movs	r2, r0
 8007c62:	000b      	movs	r3, r1
 8007c64:	0010      	movs	r0, r2
 8007c66:	0019      	movs	r1, r3
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4b53      	ldr	r3, [pc, #332]	@ (8007db8 <SGP_GetMeasurementValues+0x3e8>)
 8007c6c:	f7fa f820 	bl	8001cb0 <__aeabi_ddiv>
 8007c70:	0002      	movs	r2, r0
 8007c72:	000b      	movs	r3, r1
 8007c74:	0014      	movs	r4, r2
 8007c76:	001d      	movs	r5, r3
 8007c78:	4b4a      	ldr	r3, [pc, #296]	@ (8007da4 <SGP_GetMeasurementValues+0x3d4>)
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	f7fb fb1d 	bl	80032bc <__aeabi_i2d>
 8007c82:	0002      	movs	r2, r0
 8007c84:	000b      	movs	r3, r1
 8007c86:	0020      	movs	r0, r4
 8007c88:	0029      	movs	r1, r5
 8007c8a:	f7fa fc55 	bl	8002538 <__aeabi_dmul>
 8007c8e:	0002      	movs	r2, r0
 8007c90:	000b      	movs	r3, r1
 8007c92:	0010      	movs	r0, r2
 8007c94:	0019      	movs	r1, r3
 8007c96:	f7f8 fca7 	bl	80005e8 <__aeabi_d2uiz>
 8007c9a:	0003      	movs	r3, r0
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	4b42      	ldr	r3, [pc, #264]	@ (8007da8 <SGP_GetMeasurementValues+0x3d8>)
 8007ca0:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	0018      	movs	r0, r3
 8007ca8:	f7fb fb08 	bl	80032bc <__aeabi_i2d>
 8007cac:	2200      	movs	r2, #0
 8007cae:	4b3b      	ldr	r3, [pc, #236]	@ (8007d9c <SGP_GetMeasurementValues+0x3cc>)
 8007cb0:	f7fa ff0a 	bl	8002ac8 <__aeabi_dsub>
 8007cb4:	0002      	movs	r2, r0
 8007cb6:	000b      	movs	r3, r1
 8007cb8:	0010      	movs	r0, r2
 8007cba:	0019      	movs	r1, r3
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8007db8 <SGP_GetMeasurementValues+0x3e8>)
 8007cc0:	f7f9 fff6 	bl	8001cb0 <__aeabi_ddiv>
 8007cc4:	0002      	movs	r2, r0
 8007cc6:	000b      	movs	r3, r1
 8007cc8:	2000      	movs	r0, #0
 8007cca:	4935      	ldr	r1, [pc, #212]	@ (8007da0 <SGP_GetMeasurementValues+0x3d0>)
 8007ccc:	f7fa fefc 	bl	8002ac8 <__aeabi_dsub>
 8007cd0:	0002      	movs	r2, r0
 8007cd2:	000b      	movs	r3, r1
 8007cd4:	0014      	movs	r4, r2
 8007cd6:	001d      	movs	r5, r3
 8007cd8:	4b32      	ldr	r3, [pc, #200]	@ (8007da4 <SGP_GetMeasurementValues+0x3d4>)
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7fb faed 	bl	80032bc <__aeabi_i2d>
 8007ce2:	0002      	movs	r2, r0
 8007ce4:	000b      	movs	r3, r1
 8007ce6:	0020      	movs	r0, r4
 8007ce8:	0029      	movs	r1, r5
 8007cea:	f7fa fc25 	bl	8002538 <__aeabi_dmul>
 8007cee:	0002      	movs	r2, r0
 8007cf0:	000b      	movs	r3, r1
 8007cf2:	0010      	movs	r0, r2
 8007cf4:	0019      	movs	r1, r3
 8007cf6:	f7f8 fc77 	bl	80005e8 <__aeabi_d2uiz>
 8007cfa:	0003      	movs	r3, r0
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8007db0 <SGP_GetMeasurementValues+0x3e0>)
 8007d00:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8007d02:	4b28      	ldr	r3, [pc, #160]	@ (8007da4 <SGP_GetMeasurementValues+0x3d4>)
 8007d04:	881a      	ldrh	r2, [r3, #0]
 8007d06:	4b29      	ldr	r3, [pc, #164]	@ (8007dac <SGP_GetMeasurementValues+0x3dc>)
 8007d08:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = Red;
 8007d0a:	4b29      	ldr	r3, [pc, #164]	@ (8007db0 <SGP_GetMeasurementValues+0x3e0>)
 8007d0c:	881a      	ldrh	r2, [r3, #0]
 8007d0e:	4b29      	ldr	r3, [pc, #164]	@ (8007db4 <SGP_GetMeasurementValues+0x3e4>)
 8007d10:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = Green;
 8007d12:	4b25      	ldr	r3, [pc, #148]	@ (8007da8 <SGP_GetMeasurementValues+0x3d8>)
 8007d14:	881a      	ldrh	r2, [r3, #0]
 8007d16:	4b27      	ldr	r3, [pc, #156]	@ (8007db4 <SGP_GetMeasurementValues+0x3e4>)
 8007d18:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = Blue;
 8007d1a:	4b24      	ldr	r3, [pc, #144]	@ (8007dac <SGP_GetMeasurementValues+0x3dc>)
 8007d1c:	881a      	ldrh	r2, [r3, #0]
 8007d1e:	4b25      	ldr	r3, [pc, #148]	@ (8007db4 <SGP_GetMeasurementValues+0x3e4>)
 8007d20:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      SGP_AmountOfSamplesDone = 0;
 8007d22:	4b11      	ldr	r3, [pc, #68]	@ (8007d68 <SGP_GetMeasurementValues+0x398>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8007d28:	4a24      	ldr	r2, [pc, #144]	@ (8007dbc <SGP_GetMeasurementValues+0x3ec>)
 8007d2a:	4b09      	ldr	r3, [pc, #36]	@ (8007d50 <SGP_GetMeasurementValues+0x380>)
 8007d2c:	0019      	movs	r1, r3
 8007d2e:	2003      	movs	r0, #3
 8007d30:	f000 feb6 	bl	8008aa0 <CreateLine>
      HT_MeasurementReceived = false;
 8007d34:	4b07      	ldr	r3, [pc, #28]	@ (8007d54 <SGP_GetMeasurementValues+0x384>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8007d3a:	4b03      	ldr	r3, [pc, #12]	@ (8007d48 <SGP_GetMeasurementValues+0x378>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e055      	b.n	8007df0 <SGP_GetMeasurementValues+0x420>
 8007d44:	2000257e 	.word	0x2000257e
 8007d48:	20002629 	.word	0x20002629
 8007d4c:	08019e7c 	.word	0x08019e7c
 8007d50:	08019ea8 	.word	0x08019ea8
 8007d54:	20002628 	.word	0x20002628
 8007d58:	20000124 	.word	0x20000124
 8007d5c:	20000138 	.word	0x20000138
 8007d60:	2000011c 	.word	0x2000011c
 8007d64:	2000257f 	.word	0x2000257f
 8007d68:	2000257d 	.word	0x2000257d
 8007d6c:	08019eac 	.word	0x08019eac
 8007d70:	20002574 	.word	0x20002574
 8007d74:	08019edc 	.word	0x08019edc
 8007d78:	08019f00 	.word	0x08019f00
 8007d7c:	08019f04 	.word	0x08019f04
 8007d80:	08019f24 	.word	0x08019f24
 8007d84:	08019f28 	.word	0x08019f28
 8007d88:	20000134 	.word	0x20000134
 8007d8c:	2000012c 	.word	0x2000012c
 8007d90:	08019f48 	.word	0x08019f48
 8007d94:	20002580 	.word	0x20002580
 8007d98:	08019f5c 	.word	0x08019f5c
 8007d9c:	40590000 	.word	0x40590000
 8007da0:	3ff00000 	.word	0x3ff00000
 8007da4:	2000013c 	.word	0x2000013c
 8007da8:	2000262e 	.word	0x2000262e
 8007dac:	2000262c 	.word	0x2000262c
 8007db0:	2000262a 	.word	0x2000262a
 8007db4:	40000400 	.word	0x40000400
 8007db8:	40790000 	.word	0x40790000
 8007dbc:	08019f70 	.word	0x08019f70
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007dc0:	f7ff fdea 	bl	8007998 <SGP_MeasurementDone>
 8007dc4:	1e03      	subs	r3, r0, #0
 8007dc6:	d012      	beq.n	8007dee <SGP_GetMeasurementValues+0x41e>
 8007dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007df8 <SGP_GetMeasurementValues+0x428>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00e      	beq.n	8007dee <SGP_GetMeasurementValues+0x41e>
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007dfc <SGP_GetMeasurementValues+0x42c>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00a      	beq.n	8007dee <SGP_GetMeasurementValues+0x41e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8007dd8:	4a09      	ldr	r2, [pc, #36]	@ (8007e00 <SGP_GetMeasurementValues+0x430>)
 8007dda:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <SGP_GetMeasurementValues+0x434>)
 8007ddc:	0019      	movs	r1, r3
 8007dde:	2003      	movs	r0, #3
 8007de0:	f000 fe5e 	bl	8008aa0 <CreateLine>
    SGP_StartMeasurement();
 8007de4:	f7ff fd84 	bl	80078f0 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8007de8:	4b07      	ldr	r3, [pc, #28]	@ (8007e08 <SGP_GetMeasurementValues+0x438>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	0018      	movs	r0, r3
 8007df2:	46bd      	mov	sp, r7
 8007df4:	b004      	add	sp, #16
 8007df6:	bdb0      	pop	{r4, r5, r7, pc}
 8007df8:	2000257e 	.word	0x2000257e
 8007dfc:	2000257f 	.word	0x2000257f
 8007e00:	08019f94 	.word	0x08019f94
 8007e04:	08019ea8 	.word	0x08019ea8
 8007e08:	20002629 	.word	0x20002629

08007e0c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007e12:	4b1a      	ldr	r3, [pc, #104]	@ (8007e7c <SGP_DeviceConnected+0x70>)
 8007e14:	2202      	movs	r2, #2
 8007e16:	0019      	movs	r1, r3
 8007e18:	2059      	movs	r0, #89	@ 0x59
 8007e1a:	f7ff fd31 	bl	8007880 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f001 fa4a 	bl	80092b8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8007e24:	4b16      	ldr	r3, [pc, #88]	@ (8007e80 <SGP_DeviceConnected+0x74>)
 8007e26:	2209      	movs	r2, #9
 8007e28:	0019      	movs	r1, r3
 8007e2a:	2059      	movs	r0, #89	@ 0x59
 8007e2c:	f7ff fd0a 	bl	8007844 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007e30:	1dfb      	adds	r3, r7, #7
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	e011      	b.n	8007e5c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8007e38:	1dfb      	adds	r3, r7, #7
 8007e3a:	7818      	ldrb	r0, [r3, #0]
 8007e3c:	1dfb      	adds	r3, r7, #7
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	4a0f      	ldr	r2, [pc, #60]	@ (8007e80 <SGP_DeviceConnected+0x74>)
 8007e42:	5cd3      	ldrb	r3, [r2, r3]
 8007e44:	4a0f      	ldr	r2, [pc, #60]	@ (8007e84 <SGP_DeviceConnected+0x78>)
 8007e46:	4910      	ldr	r1, [pc, #64]	@ (8007e88 <SGP_DeviceConnected+0x7c>)
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	0003      	movs	r3, r0
 8007e4c:	2002      	movs	r0, #2
 8007e4e:	f000 fe27 	bl	8008aa0 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007e52:	1dfb      	adds	r3, r7, #7
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	1dfb      	adds	r3, r7, #7
 8007e58:	3201      	adds	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	1dfb      	adds	r3, r7, #7
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d9e9      	bls.n	8007e38 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8007e64:	4b06      	ldr	r3, [pc, #24]	@ (8007e80 <SGP_DeviceConnected+0x74>)
 8007e66:	2203      	movs	r2, #3
 8007e68:	2109      	movs	r1, #9
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f000 f80e 	bl	8007e8c <CheckCRC>
 8007e70:	0003      	movs	r3, r0
}
 8007e72:	0018      	movs	r0, r3
 8007e74:	46bd      	mov	sp, r7
 8007e76:	b002      	add	sp, #8
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	46c0      	nop			@ (mov r8, r8)
 8007e7c:	20000118 	.word	0x20000118
 8007e80:	20002574 	.word	0x20002574
 8007e84:	08019fb4 	.word	0x08019fb4
 8007e88:	08019f24 	.word	0x08019f24

08007e8c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	b08f      	sub	sp, #60	@ 0x3c
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e94:	0008      	movs	r0, r1
 8007e96:	0011      	movs	r1, r2
 8007e98:	2323      	movs	r3, #35	@ 0x23
 8007e9a:	18fb      	adds	r3, r7, r3
 8007e9c:	1c02      	adds	r2, r0, #0
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	2322      	movs	r3, #34	@ 0x22
 8007ea2:	18fb      	adds	r3, r7, r3
 8007ea4:	1c0a      	adds	r2, r1, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007ea8:	2317      	movs	r3, #23
 8007eaa:	2220      	movs	r2, #32
 8007eac:	189b      	adds	r3, r3, r2
 8007eae:	19db      	adds	r3, r3, r7
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	e09f      	b.n	8007ff6 <CheckCRC+0x16a>
 8007eb6:	466b      	mov	r3, sp
 8007eb8:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8007eba:	2322      	movs	r3, #34	@ 0x22
 8007ebc:	18fb      	adds	r3, r7, r3
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	001a      	movs	r2, r3
 8007ec2:	3a01      	subs	r2, #1
 8007ec4:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ec6:	60bb      	str	r3, [r7, #8]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	60fa      	str	r2, [r7, #12]
 8007ecc:	68b8      	ldr	r0, [r7, #8]
 8007ece:	68f9      	ldr	r1, [r7, #12]
 8007ed0:	0002      	movs	r2, r0
 8007ed2:	0f52      	lsrs	r2, r2, #29
 8007ed4:	000c      	movs	r4, r1
 8007ed6:	00e4      	lsls	r4, r4, #3
 8007ed8:	61fc      	str	r4, [r7, #28]
 8007eda:	69fc      	ldr	r4, [r7, #28]
 8007edc:	4314      	orrs	r4, r2
 8007ede:	61fc      	str	r4, [r7, #28]
 8007ee0:	0002      	movs	r2, r0
 8007ee2:	00d2      	lsls	r2, r2, #3
 8007ee4:	61ba      	str	r2, [r7, #24]
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	6838      	ldr	r0, [r7, #0]
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	0002      	movs	r2, r0
 8007ef2:	0f52      	lsrs	r2, r2, #29
 8007ef4:	000c      	movs	r4, r1
 8007ef6:	00e4      	lsls	r4, r4, #3
 8007ef8:	617c      	str	r4, [r7, #20]
 8007efa:	697c      	ldr	r4, [r7, #20]
 8007efc:	4314      	orrs	r4, r2
 8007efe:	617c      	str	r4, [r7, #20]
 8007f00:	0002      	movs	r2, r0
 8007f02:	00d2      	lsls	r2, r2, #3
 8007f04:	613a      	str	r2, [r7, #16]
 8007f06:	3307      	adds	r3, #7
 8007f08:	08db      	lsrs	r3, r3, #3
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	466a      	mov	r2, sp
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	469d      	mov	sp, r3
 8007f12:	466b      	mov	r3, sp
 8007f14:	3300      	adds	r3, #0
 8007f16:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8007f18:	2316      	movs	r3, #22
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	189b      	adds	r3, r3, r2
 8007f1e:	19db      	adds	r3, r3, r7
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e01e      	b.n	8007f64 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8007f26:	2317      	movs	r3, #23
 8007f28:	2220      	movs	r2, #32
 8007f2a:	189b      	adds	r3, r3, r2
 8007f2c:	19db      	adds	r3, r3, r7
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	2116      	movs	r1, #22
 8007f32:	2320      	movs	r3, #32
 8007f34:	18cb      	adds	r3, r1, r3
 8007f36:	19db      	adds	r3, r3, r7
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	18d3      	adds	r3, r2, r3
 8007f3c:	001a      	movs	r2, r3
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f40:	189a      	adds	r2, r3, r2
 8007f42:	0008      	movs	r0, r1
 8007f44:	2320      	movs	r3, #32
 8007f46:	18cb      	adds	r3, r1, r3
 8007f48:	19db      	adds	r3, r3, r7
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	7811      	ldrb	r1, [r2, #0]
 8007f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f50:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8007f52:	2320      	movs	r3, #32
 8007f54:	18c3      	adds	r3, r0, r3
 8007f56:	19db      	adds	r3, r3, r7
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	2320      	movs	r3, #32
 8007f5c:	18c3      	adds	r3, r0, r3
 8007f5e:	19db      	adds	r3, r3, r7
 8007f60:	3201      	adds	r2, #1
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	2316      	movs	r3, #22
 8007f66:	2220      	movs	r2, #32
 8007f68:	189b      	adds	r3, r3, r2
 8007f6a:	19da      	adds	r2, r3, r7
 8007f6c:	2322      	movs	r3, #34	@ 0x22
 8007f6e:	18fb      	adds	r3, r7, r3
 8007f70:	7812      	ldrb	r2, [r2, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d3d6      	bcc.n	8007f26 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8007f78:	2417      	movs	r4, #23
 8007f7a:	2320      	movs	r3, #32
 8007f7c:	18e3      	adds	r3, r4, r3
 8007f7e:	19db      	adds	r3, r3, r7
 8007f80:	781a      	ldrb	r2, [r3, #0]
 8007f82:	2322      	movs	r3, #34	@ 0x22
 8007f84:	18fb      	adds	r3, r7, r3
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	18d3      	adds	r3, r2, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f8e:	18d2      	adds	r2, r2, r3
 8007f90:	250b      	movs	r5, #11
 8007f92:	2320      	movs	r3, #32
 8007f94:	18eb      	adds	r3, r5, r3
 8007f96:	19db      	adds	r3, r3, r7
 8007f98:	7812      	ldrb	r2, [r2, #0]
 8007f9a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8007f9c:	2322      	movs	r3, #34	@ 0x22
 8007f9e:	18fb      	adds	r3, r7, r3
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa8:	0011      	movs	r1, r2
 8007faa:	0018      	movs	r0, r3
 8007fac:	f000 f838 	bl	8008020 <CalculateCRC>
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	001a      	movs	r2, r3
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	18eb      	adds	r3, r5, r3
 8007fb8:	19db      	adds	r3, r3, r7
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00c      	beq.n	8007fda <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	18e3      	adds	r3, r4, r3
 8007fc4:	19db      	adds	r3, r3, r7
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	4a13      	ldr	r2, [pc, #76]	@ (8008018 <CheckCRC+0x18c>)
 8007fcc:	4913      	ldr	r1, [pc, #76]	@ (800801c <CheckCRC+0x190>)
 8007fce:	2001      	movs	r0, #1
 8007fd0:	f000 fd66 	bl	8008aa0 <CreateLine>
      return false;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	46b5      	mov	sp, r6
 8007fd8:	e019      	b.n	800800e <CheckCRC+0x182>
 8007fda:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007fdc:	2217      	movs	r2, #23
 8007fde:	2320      	movs	r3, #32
 8007fe0:	18d3      	adds	r3, r2, r3
 8007fe2:	19db      	adds	r3, r3, r7
 8007fe4:	2120      	movs	r1, #32
 8007fe6:	1852      	adds	r2, r2, r1
 8007fe8:	19d1      	adds	r1, r2, r7
 8007fea:	2222      	movs	r2, #34	@ 0x22
 8007fec:	18ba      	adds	r2, r7, r2
 8007fee:	7809      	ldrb	r1, [r1, #0]
 8007ff0:	7812      	ldrb	r2, [r2, #0]
 8007ff2:	188a      	adds	r2, r1, r2
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	2317      	movs	r3, #23
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	189b      	adds	r3, r3, r2
 8007ffc:	19da      	adds	r2, r3, r7
 8007ffe:	2323      	movs	r3, #35	@ 0x23
 8008000:	18fb      	adds	r3, r7, r3
 8008002:	7812      	ldrb	r2, [r2, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	429a      	cmp	r2, r3
 8008008:	d200      	bcs.n	800800c <CheckCRC+0x180>
 800800a:	e754      	b.n	8007eb6 <CheckCRC+0x2a>
    }
  }
  return true;
 800800c:	2301      	movs	r3, #1
}
 800800e:	0018      	movs	r0, r3
 8008010:	46bd      	mov	sp, r7
 8008012:	b00f      	add	sp, #60	@ 0x3c
 8008014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008016:	46c0      	nop			@ (mov r8, r8)
 8008018:	08019fd4 	.word	0x08019fd4
 800801c:	08019f00 	.word	0x08019f00

08008020 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	000a      	movs	r2, r1
 800802a:	1cfb      	adds	r3, r7, #3
 800802c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800802e:	230f      	movs	r3, #15
 8008030:	18fb      	adds	r3, r7, r3
 8008032:	22ff      	movs	r2, #255	@ 0xff
 8008034:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008036:	230e      	movs	r3, #14
 8008038:	18fb      	adds	r3, r7, r3
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e037      	b.n	80080b0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008040:	230e      	movs	r3, #14
 8008042:	18fb      	adds	r3, r7, r3
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	18d3      	adds	r3, r2, r3
 800804a:	7819      	ldrb	r1, [r3, #0]
 800804c:	220f      	movs	r2, #15
 800804e:	18bb      	adds	r3, r7, r2
 8008050:	18ba      	adds	r2, r7, r2
 8008052:	7812      	ldrb	r2, [r2, #0]
 8008054:	404a      	eors	r2, r1
 8008056:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008058:	230d      	movs	r3, #13
 800805a:	18fb      	adds	r3, r7, r3
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
 8008060:	e01b      	b.n	800809a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8008062:	210f      	movs	r1, #15
 8008064:	187b      	adds	r3, r7, r1
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	b25b      	sxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	da09      	bge.n	8008082 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800806e:	187b      	adds	r3, r7, r1
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	b25b      	sxtb	r3, r3
 8008076:	2231      	movs	r2, #49	@ 0x31
 8008078:	4053      	eors	r3, r2
 800807a:	b25a      	sxtb	r2, r3
 800807c:	187b      	adds	r3, r7, r1
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	e005      	b.n	800808e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8008082:	230f      	movs	r3, #15
 8008084:	18fa      	adds	r2, r7, r3
 8008086:	18fb      	adds	r3, r7, r3
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	18db      	adds	r3, r3, r3
 800808c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800808e:	210d      	movs	r1, #13
 8008090:	187b      	adds	r3, r7, r1
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	187b      	adds	r3, r7, r1
 8008096:	3201      	adds	r2, #1
 8008098:	701a      	strb	r2, [r3, #0]
 800809a:	230d      	movs	r3, #13
 800809c:	18fb      	adds	r3, r7, r3
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b07      	cmp	r3, #7
 80080a2:	d9de      	bls.n	8008062 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80080a4:	210e      	movs	r1, #14
 80080a6:	187b      	adds	r3, r7, r1
 80080a8:	781a      	ldrb	r2, [r3, #0]
 80080aa:	187b      	adds	r3, r7, r1
 80080ac:	3201      	adds	r2, #1
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	230e      	movs	r3, #14
 80080b2:	18fa      	adds	r2, r7, r3
 80080b4:	1cfb      	adds	r3, r7, #3
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d3c0      	bcc.n	8008040 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80080be:	230f      	movs	r3, #15
 80080c0:	18fb      	adds	r3, r7, r3
 80080c2:	781b      	ldrb	r3, [r3, #0]
}
 80080c4:	0018      	movs	r0, r3
 80080c6:	46bd      	mov	sp, r7
 80080c8:	b004      	add	sp, #16
 80080ca:	bd80      	pop	{r7, pc}

080080cc <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4936      	ldr	r1, [pc, #216]	@ (80081b4 <SGP_GetHT+0xe8>)
 80080dc:	1c18      	adds	r0, r3, #0
 80080de:	f7f8 fb6d 	bl	80007bc <__aeabi_fadd>
 80080e2:	1c03      	adds	r3, r0, #0
 80080e4:	4934      	ldr	r1, [pc, #208]	@ (80081b8 <SGP_GetHT+0xec>)
 80080e6:	1c18      	adds	r0, r3, #0
 80080e8:	f7f8 fcf2 	bl	8000ad0 <__aeabi_fdiv>
 80080ec:	1c03      	adds	r3, r0, #0
 80080ee:	4933      	ldr	r1, [pc, #204]	@ (80081bc <SGP_GetHT+0xf0>)
 80080f0:	1c18      	adds	r0, r3, #0
 80080f2:	f7f8 fed3 	bl	8000e9c <__aeabi_fmul>
 80080f6:	1c03      	adds	r3, r0, #0
 80080f8:	1c18      	adds	r0, r3, #0
 80080fa:	f7f8 fa5d 	bl	80005b8 <__aeabi_f2uiz>
 80080fe:	0003      	movs	r3, r0
 8008100:	b29a      	uxth	r2, r3
 8008102:	4b2f      	ldr	r3, [pc, #188]	@ (80081c0 <SGP_GetHT+0xf4>)
 8008104:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	492e      	ldr	r1, [pc, #184]	@ (80081c4 <SGP_GetHT+0xf8>)
 800810c:	1c18      	adds	r0, r3, #0
 800810e:	f7f8 fcdf 	bl	8000ad0 <__aeabi_fdiv>
 8008112:	1c03      	adds	r3, r0, #0
 8008114:	4929      	ldr	r1, [pc, #164]	@ (80081bc <SGP_GetHT+0xf0>)
 8008116:	1c18      	adds	r0, r3, #0
 8008118:	f7f8 fec0 	bl	8000e9c <__aeabi_fmul>
 800811c:	1c03      	adds	r3, r0, #0
 800811e:	1c18      	adds	r0, r3, #0
 8008120:	f7f8 fa4a 	bl	80005b8 <__aeabi_f2uiz>
 8008124:	0003      	movs	r3, r0
 8008126:	b29a      	uxth	r2, r3
 8008128:	4b27      	ldr	r3, [pc, #156]	@ (80081c8 <SGP_GetHT+0xfc>)
 800812a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800812c:	4b26      	ldr	r3, [pc, #152]	@ (80081c8 <SGP_GetHT+0xfc>)
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	0a1b      	lsrs	r3, r3, #8
 8008132:	b29b      	uxth	r3, r3
 8008134:	b2da      	uxtb	r2, r3
 8008136:	4b25      	ldr	r3, [pc, #148]	@ (80081cc <SGP_GetHT+0x100>)
 8008138:	709a      	strb	r2, [r3, #2]
 800813a:	4b24      	ldr	r3, [pc, #144]	@ (80081cc <SGP_GetHT+0x100>)
 800813c:	789a      	ldrb	r2, [r3, #2]
 800813e:	210c      	movs	r1, #12
 8008140:	187b      	adds	r3, r7, r1
 8008142:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008144:	4b20      	ldr	r3, [pc, #128]	@ (80081c8 <SGP_GetHT+0xfc>)
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b20      	ldr	r3, [pc, #128]	@ (80081cc <SGP_GetHT+0x100>)
 800814c:	70da      	strb	r2, [r3, #3]
 800814e:	4b1f      	ldr	r3, [pc, #124]	@ (80081cc <SGP_GetHT+0x100>)
 8008150:	78da      	ldrb	r2, [r3, #3]
 8008152:	187b      	adds	r3, r7, r1
 8008154:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8008156:	187b      	adds	r3, r7, r1
 8008158:	2102      	movs	r1, #2
 800815a:	0018      	movs	r0, r3
 800815c:	f7ff ff60 	bl	8008020 <CalculateCRC>
 8008160:	0003      	movs	r3, r0
 8008162:	001a      	movs	r2, r3
 8008164:	4b19      	ldr	r3, [pc, #100]	@ (80081cc <SGP_GetHT+0x100>)
 8008166:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008168:	4b15      	ldr	r3, [pc, #84]	@ (80081c0 <SGP_GetHT+0xf4>)
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	b29b      	uxth	r3, r3
 8008170:	b2da      	uxtb	r2, r3
 8008172:	4b16      	ldr	r3, [pc, #88]	@ (80081cc <SGP_GetHT+0x100>)
 8008174:	715a      	strb	r2, [r3, #5]
 8008176:	4b15      	ldr	r3, [pc, #84]	@ (80081cc <SGP_GetHT+0x100>)
 8008178:	795a      	ldrb	r2, [r3, #5]
 800817a:	2108      	movs	r1, #8
 800817c:	187b      	adds	r3, r7, r1
 800817e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008180:	4b0f      	ldr	r3, [pc, #60]	@ (80081c0 <SGP_GetHT+0xf4>)
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	b2da      	uxtb	r2, r3
 8008186:	4b11      	ldr	r3, [pc, #68]	@ (80081cc <SGP_GetHT+0x100>)
 8008188:	719a      	strb	r2, [r3, #6]
 800818a:	4b10      	ldr	r3, [pc, #64]	@ (80081cc <SGP_GetHT+0x100>)
 800818c:	799a      	ldrb	r2, [r3, #6]
 800818e:	187b      	adds	r3, r7, r1
 8008190:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008192:	187b      	adds	r3, r7, r1
 8008194:	2102      	movs	r1, #2
 8008196:	0018      	movs	r0, r3
 8008198:	f7ff ff42 	bl	8008020 <CalculateCRC>
 800819c:	0003      	movs	r3, r0
 800819e:	001a      	movs	r2, r3
 80081a0:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <SGP_GetHT+0x100>)
 80081a2:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80081a4:	4b0a      	ldr	r3, [pc, #40]	@ (80081d0 <SGP_GetHT+0x104>)
 80081a6:	2201      	movs	r2, #1
 80081a8:	701a      	strb	r2, [r3, #0]
}
 80081aa:	46c0      	nop			@ (mov r8, r8)
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b004      	add	sp, #16
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	46c0      	nop			@ (mov r8, r8)
 80081b4:	42340000 	.word	0x42340000
 80081b8:	432f0000 	.word	0x432f0000
 80081bc:	477fff00 	.word	0x477fff00
 80081c0:	20002626 	.word	0x20002626
 80081c4:	42c80000 	.word	0x42c80000
 80081c8:	20002624 	.word	0x20002624
 80081cc:	20000124 	.word	0x20000124
 80081d0:	20002628 	.word	0x20002628

080081d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081d8:	4b07      	ldr	r3, [pc, #28]	@ (80081f8 <HAL_MspInit+0x24>)
 80081da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081dc:	4b06      	ldr	r3, [pc, #24]	@ (80081f8 <HAL_MspInit+0x24>)
 80081de:	2101      	movs	r1, #1
 80081e0:	430a      	orrs	r2, r1
 80081e2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80081e4:	4b04      	ldr	r3, [pc, #16]	@ (80081f8 <HAL_MspInit+0x24>)
 80081e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081e8:	4b03      	ldr	r3, [pc, #12]	@ (80081f8 <HAL_MspInit+0x24>)
 80081ea:	2180      	movs	r1, #128	@ 0x80
 80081ec:	0549      	lsls	r1, r1, #21
 80081ee:	430a      	orrs	r2, r1
 80081f0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081f2:	46c0      	nop			@ (mov r8, r8)
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	40021000 	.word	0x40021000

080081fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008200:	46c0      	nop			@ (mov r8, r8)
 8008202:	e7fd      	b.n	8008200 <NMI_Handler+0x4>

08008204 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008208:	46c0      	nop			@ (mov r8, r8)
 800820a:	e7fd      	b.n	8008208 <HardFault_Handler+0x4>

0800820c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008210:	46c0      	nop			@ (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008224:	f001 f82c 	bl	8009280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008228:	46c0      	nop			@ (mov r8, r8)
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
	...

08008230 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008234:	4b05      	ldr	r3, [pc, #20]	@ (800824c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8008236:	0018      	movs	r0, r3
 8008238:	f001 fd3b 	bl	8009cb2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800823c:	4b04      	ldr	r3, [pc, #16]	@ (8008250 <DMA1_Channel2_3_IRQHandler+0x20>)
 800823e:	0018      	movs	r0, r3
 8008240:	f001 fd37 	bl	8009cb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008244:	46c0      	nop			@ (mov r8, r8)
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	46c0      	nop			@ (mov r8, r8)
 800824c:	20000be4 	.word	0x20000be4
 8008250:	20000b9c 	.word	0x20000b9c

08008254 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008258:	4b07      	ldr	r3, [pc, #28]	@ (8008278 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800825a:	0018      	movs	r0, r3
 800825c:	f001 fd29 	bl	8009cb2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8008260:	4b06      	ldr	r3, [pc, #24]	@ (800827c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8008262:	0018      	movs	r0, r3
 8008264:	f001 fd25 	bl	8009cb2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800826a:	0018      	movs	r0, r3
 800826c:	f001 fd21 	bl	8009cb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008270:	46c0      	nop			@ (mov r8, r8)
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	46c0      	nop			@ (mov r8, r8)
 8008278:	20000c68 	.word	0x20000c68
 800827c:	20002824 	.word	0x20002824
 8008280:	2000286c 	.word	0x2000286c

08008284 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008288:	4b03      	ldr	r3, [pc, #12]	@ (8008298 <USART4_5_IRQHandler+0x14>)
 800828a:	0018      	movs	r0, r3
 800828c:	f008 f84a 	bl	8010324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8008290:	46c0      	nop			@ (mov r8, r8)
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	46c0      	nop			@ (mov r8, r8)
 8008298:	2000276c 	.word	0x2000276c

0800829c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80082a0:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <I2C1_IRQHandler+0x2c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	23e0      	movs	r3, #224	@ 0xe0
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	4013      	ands	r3, r2
 80082ac:	d004      	beq.n	80082b8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80082ae:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <I2C1_IRQHandler+0x2c>)
 80082b0:	0018      	movs	r0, r3
 80082b2:	f002 fb21 	bl	800a8f8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80082b6:	e003      	b.n	80082c0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80082b8:	4b03      	ldr	r3, [pc, #12]	@ (80082c8 <I2C1_IRQHandler+0x2c>)
 80082ba:	0018      	movs	r0, r3
 80082bc:	f002 fb02 	bl	800a8c4 <HAL_I2C_EV_IRQHandler>
}
 80082c0:	46c0      	nop			@ (mov r8, r8)
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	20000af4 	.word	0x20000af4

080082cc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80082d0:	4b03      	ldr	r3, [pc, #12]	@ (80082e0 <USB_IRQHandler+0x14>)
 80082d2:	0018      	movs	r0, r3
 80082d4:	f004 fcd8 	bl	800cc88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80082d8:	46c0      	nop			@ (mov r8, r8)
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	46c0      	nop			@ (mov r8, r8)
 80082e0:	20003d9c 	.word	0x20003d9c

080082e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  return 1;
 80082e8:	2301      	movs	r3, #1
}
 80082ea:	0018      	movs	r0, r3
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <_kill>:

int _kill(int pid, int sig)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80082fa:	f00e fbfb 	bl	8016af4 <__errno>
 80082fe:	0003      	movs	r3, r0
 8008300:	2216      	movs	r2, #22
 8008302:	601a      	str	r2, [r3, #0]
  return -1;
 8008304:	2301      	movs	r3, #1
 8008306:	425b      	negs	r3, r3
}
 8008308:	0018      	movs	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	b002      	add	sp, #8
 800830e:	bd80      	pop	{r7, pc}

08008310 <_exit>:

void _exit (int status)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008318:	2301      	movs	r3, #1
 800831a:	425a      	negs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	0011      	movs	r1, r2
 8008320:	0018      	movs	r0, r3
 8008322:	f7ff ffe5 	bl	80082f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	e7fd      	b.n	8008326 <_exit+0x16>

0800832a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b086      	sub	sp, #24
 800832e:	af00      	add	r7, sp, #0
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008336:	2300      	movs	r3, #0
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	e00a      	b.n	8008352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800833c:	e000      	b.n	8008340 <_read+0x16>
 800833e:	bf00      	nop
 8008340:	0001      	movs	r1, r0
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	60ba      	str	r2, [r7, #8]
 8008348:	b2ca      	uxtb	r2, r1
 800834a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	3301      	adds	r3, #1
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	429a      	cmp	r2, r3
 8008358:	dbf0      	blt.n	800833c <_read+0x12>
  }

  return len;
 800835a:	687b      	ldr	r3, [r7, #4]
}
 800835c:	0018      	movs	r0, r3
 800835e:	46bd      	mov	sp, r7
 8008360:	b006      	add	sp, #24
 8008362:	bd80      	pop	{r7, pc}

08008364 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800836c:	2301      	movs	r3, #1
 800836e:	425b      	negs	r3, r3
}
 8008370:	0018      	movs	r0, r3
 8008372:	46bd      	mov	sp, r7
 8008374:	b002      	add	sp, #8
 8008376:	bd80      	pop	{r7, pc}

08008378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2280      	movs	r2, #128	@ 0x80
 8008386:	0192      	lsls	r2, r2, #6
 8008388:	605a      	str	r2, [r3, #4]
  return 0;
 800838a:	2300      	movs	r3, #0
}
 800838c:	0018      	movs	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	b002      	add	sp, #8
 8008392:	bd80      	pop	{r7, pc}

08008394 <_isatty>:

int _isatty(int file)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800839c:	2301      	movs	r3, #1
}
 800839e:	0018      	movs	r0, r3
 80083a0:	46bd      	mov	sp, r7
 80083a2:	b002      	add	sp, #8
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	0018      	movs	r0, r3
 80083b6:	46bd      	mov	sp, r7
 80083b8:	b004      	add	sp, #16
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083c4:	4a14      	ldr	r2, [pc, #80]	@ (8008418 <_sbrk+0x5c>)
 80083c6:	4b15      	ldr	r3, [pc, #84]	@ (800841c <_sbrk+0x60>)
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083d0:	4b13      	ldr	r3, [pc, #76]	@ (8008420 <_sbrk+0x64>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d102      	bne.n	80083de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083d8:	4b11      	ldr	r3, [pc, #68]	@ (8008420 <_sbrk+0x64>)
 80083da:	4a12      	ldr	r2, [pc, #72]	@ (8008424 <_sbrk+0x68>)
 80083dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083de:	4b10      	ldr	r3, [pc, #64]	@ (8008420 <_sbrk+0x64>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	18d3      	adds	r3, r2, r3
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d207      	bcs.n	80083fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083ec:	f00e fb82 	bl	8016af4 <__errno>
 80083f0:	0003      	movs	r3, r0
 80083f2:	220c      	movs	r2, #12
 80083f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083f6:	2301      	movs	r3, #1
 80083f8:	425b      	negs	r3, r3
 80083fa:	e009      	b.n	8008410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083fc:	4b08      	ldr	r3, [pc, #32]	@ (8008420 <_sbrk+0x64>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008402:	4b07      	ldr	r3, [pc, #28]	@ (8008420 <_sbrk+0x64>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	18d2      	adds	r2, r2, r3
 800840a:	4b05      	ldr	r3, [pc, #20]	@ (8008420 <_sbrk+0x64>)
 800840c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800840e:	68fb      	ldr	r3, [r7, #12]
}
 8008410:	0018      	movs	r0, r3
 8008412:	46bd      	mov	sp, r7
 8008414:	b006      	add	sp, #24
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20005000 	.word	0x20005000
 800841c:	00000400 	.word	0x00000400
 8008420:	20002630 	.word	0x20002630
 8008424:	20004400 	.word	0x20004400

08008428 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800842c:	46c0      	nop			@ (mov r8, r8)
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800843a:	2310      	movs	r3, #16
 800843c:	18fb      	adds	r3, r7, r3
 800843e:	0018      	movs	r0, r3
 8008440:	2308      	movs	r3, #8
 8008442:	001a      	movs	r2, r3
 8008444:	2100      	movs	r1, #0
 8008446:	f00e fad1 	bl	80169ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800844a:	003b      	movs	r3, r7
 800844c:	0018      	movs	r0, r3
 800844e:	2310      	movs	r3, #16
 8008450:	001a      	movs	r2, r3
 8008452:	2100      	movs	r1, #0
 8008454:	f00e faca 	bl	80169ec <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008458:	4b2e      	ldr	r3, [pc, #184]	@ (8008514 <MX_TIM2_Init+0xe0>)
 800845a:	2280      	movs	r2, #128	@ 0x80
 800845c:	05d2      	lsls	r2, r2, #23
 800845e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008460:	4b2c      	ldr	r3, [pc, #176]	@ (8008514 <MX_TIM2_Init+0xe0>)
 8008462:	2200      	movs	r2, #0
 8008464:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008466:	4b2b      	ldr	r3, [pc, #172]	@ (8008514 <MX_TIM2_Init+0xe0>)
 8008468:	2200      	movs	r2, #0
 800846a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800846c:	4b29      	ldr	r3, [pc, #164]	@ (8008514 <MX_TIM2_Init+0xe0>)
 800846e:	4a2a      	ldr	r2, [pc, #168]	@ (8008518 <MX_TIM2_Init+0xe4>)
 8008470:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008472:	4b28      	ldr	r3, [pc, #160]	@ (8008514 <MX_TIM2_Init+0xe0>)
 8008474:	2200      	movs	r2, #0
 8008476:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008478:	4b26      	ldr	r3, [pc, #152]	@ (8008514 <MX_TIM2_Init+0xe0>)
 800847a:	2200      	movs	r2, #0
 800847c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800847e:	4b25      	ldr	r3, [pc, #148]	@ (8008514 <MX_TIM2_Init+0xe0>)
 8008480:	0018      	movs	r0, r3
 8008482:	f007 f9c1 	bl	800f808 <HAL_TIM_PWM_Init>
 8008486:	1e03      	subs	r3, r0, #0
 8008488:	d001      	beq.n	800848e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800848a:	f7fd fafb 	bl	8005a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800848e:	2110      	movs	r1, #16
 8008490:	187b      	adds	r3, r7, r1
 8008492:	2200      	movs	r2, #0
 8008494:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008496:	187b      	adds	r3, r7, r1
 8008498:	2200      	movs	r2, #0
 800849a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800849c:	187a      	adds	r2, r7, r1
 800849e:	4b1d      	ldr	r3, [pc, #116]	@ (8008514 <MX_TIM2_Init+0xe0>)
 80084a0:	0011      	movs	r1, r2
 80084a2:	0018      	movs	r0, r3
 80084a4:	f007 fcce 	bl	800fe44 <HAL_TIMEx_MasterConfigSynchronization>
 80084a8:	1e03      	subs	r3, r0, #0
 80084aa:	d001      	beq.n	80084b0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80084ac:	f7fd faea 	bl	8005a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80084b0:	003b      	movs	r3, r7
 80084b2:	2260      	movs	r2, #96	@ 0x60
 80084b4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80084b6:	003b      	movs	r3, r7
 80084b8:	2200      	movs	r2, #0
 80084ba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084bc:	003b      	movs	r3, r7
 80084be:	2200      	movs	r2, #0
 80084c0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80084c2:	003b      	movs	r3, r7
 80084c4:	2200      	movs	r2, #0
 80084c6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084c8:	0039      	movs	r1, r7
 80084ca:	4b12      	ldr	r3, [pc, #72]	@ (8008514 <MX_TIM2_Init+0xe0>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	0018      	movs	r0, r3
 80084d0:	f007 fa6c 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 80084d4:	1e03      	subs	r3, r0, #0
 80084d6:	d001      	beq.n	80084dc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80084d8:	f7fd fad4 	bl	8005a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80084dc:	0039      	movs	r1, r7
 80084de:	4b0d      	ldr	r3, [pc, #52]	@ (8008514 <MX_TIM2_Init+0xe0>)
 80084e0:	2208      	movs	r2, #8
 80084e2:	0018      	movs	r0, r3
 80084e4:	f007 fa62 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 80084e8:	1e03      	subs	r3, r0, #0
 80084ea:	d001      	beq.n	80084f0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80084ec:	f7fd faca 	bl	8005a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80084f0:	0039      	movs	r1, r7
 80084f2:	4b08      	ldr	r3, [pc, #32]	@ (8008514 <MX_TIM2_Init+0xe0>)
 80084f4:	220c      	movs	r2, #12
 80084f6:	0018      	movs	r0, r3
 80084f8:	f007 fa58 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 80084fc:	1e03      	subs	r3, r0, #0
 80084fe:	d001      	beq.n	8008504 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8008500:	f7fd fac0 	bl	8005a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008504:	4b03      	ldr	r3, [pc, #12]	@ (8008514 <MX_TIM2_Init+0xe0>)
 8008506:	0018      	movs	r0, r3
 8008508:	f000 f8aa 	bl	8008660 <HAL_TIM_MspPostInit>

}
 800850c:	46c0      	nop			@ (mov r8, r8)
 800850e:	46bd      	mov	sp, r7
 8008510:	b006      	add	sp, #24
 8008512:	bd80      	pop	{r7, pc}
 8008514:	20002634 	.word	0x20002634
 8008518:	0000ffff 	.word	0x0000ffff

0800851c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008522:	2310      	movs	r3, #16
 8008524:	18fb      	adds	r3, r7, r3
 8008526:	0018      	movs	r0, r3
 8008528:	2308      	movs	r3, #8
 800852a:	001a      	movs	r2, r3
 800852c:	2100      	movs	r1, #0
 800852e:	f00e fa5d 	bl	80169ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008532:	003b      	movs	r3, r7
 8008534:	0018      	movs	r0, r3
 8008536:	2310      	movs	r3, #16
 8008538:	001a      	movs	r2, r3
 800853a:	2100      	movs	r1, #0
 800853c:	f00e fa56 	bl	80169ec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008540:	4b32      	ldr	r3, [pc, #200]	@ (800860c <MX_TIM3_Init+0xf0>)
 8008542:	4a33      	ldr	r2, [pc, #204]	@ (8008610 <MX_TIM3_Init+0xf4>)
 8008544:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008546:	4b31      	ldr	r3, [pc, #196]	@ (800860c <MX_TIM3_Init+0xf0>)
 8008548:	2200      	movs	r2, #0
 800854a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800854c:	4b2f      	ldr	r3, [pc, #188]	@ (800860c <MX_TIM3_Init+0xf0>)
 800854e:	2200      	movs	r2, #0
 8008550:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008552:	4b2e      	ldr	r3, [pc, #184]	@ (800860c <MX_TIM3_Init+0xf0>)
 8008554:	4a2f      	ldr	r2, [pc, #188]	@ (8008614 <MX_TIM3_Init+0xf8>)
 8008556:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008558:	4b2c      	ldr	r3, [pc, #176]	@ (800860c <MX_TIM3_Init+0xf0>)
 800855a:	2200      	movs	r2, #0
 800855c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800855e:	4b2b      	ldr	r3, [pc, #172]	@ (800860c <MX_TIM3_Init+0xf0>)
 8008560:	2200      	movs	r2, #0
 8008562:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008564:	4b29      	ldr	r3, [pc, #164]	@ (800860c <MX_TIM3_Init+0xf0>)
 8008566:	0018      	movs	r0, r3
 8008568:	f007 f94e 	bl	800f808 <HAL_TIM_PWM_Init>
 800856c:	1e03      	subs	r3, r0, #0
 800856e:	d001      	beq.n	8008574 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8008570:	f7fd fa88 	bl	8005a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008574:	2110      	movs	r1, #16
 8008576:	187b      	adds	r3, r7, r1
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800857c:	187b      	adds	r3, r7, r1
 800857e:	2200      	movs	r2, #0
 8008580:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008582:	187a      	adds	r2, r7, r1
 8008584:	4b21      	ldr	r3, [pc, #132]	@ (800860c <MX_TIM3_Init+0xf0>)
 8008586:	0011      	movs	r1, r2
 8008588:	0018      	movs	r0, r3
 800858a:	f007 fc5b 	bl	800fe44 <HAL_TIMEx_MasterConfigSynchronization>
 800858e:	1e03      	subs	r3, r0, #0
 8008590:	d001      	beq.n	8008596 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8008592:	f7fd fa77 	bl	8005a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008596:	003b      	movs	r3, r7
 8008598:	2260      	movs	r2, #96	@ 0x60
 800859a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800859c:	003b      	movs	r3, r7
 800859e:	2200      	movs	r2, #0
 80085a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085a2:	003b      	movs	r3, r7
 80085a4:	2200      	movs	r2, #0
 80085a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085a8:	003b      	movs	r3, r7
 80085aa:	2200      	movs	r2, #0
 80085ac:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80085ae:	0039      	movs	r1, r7
 80085b0:	4b16      	ldr	r3, [pc, #88]	@ (800860c <MX_TIM3_Init+0xf0>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	0018      	movs	r0, r3
 80085b6:	f007 f9f9 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 80085ba:	1e03      	subs	r3, r0, #0
 80085bc:	d001      	beq.n	80085c2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80085be:	f7fd fa61 	bl	8005a84 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80085c2:	4b12      	ldr	r3, [pc, #72]	@ (800860c <MX_TIM3_Init+0xf0>)
 80085c4:	2104      	movs	r1, #4
 80085c6:	0018      	movs	r0, r3
 80085c8:	f007 fc9a 	bl	800ff00 <HAL_TIMEx_RemapConfig>
 80085cc:	1e03      	subs	r3, r0, #0
 80085ce:	d001      	beq.n	80085d4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80085d0:	f7fd fa58 	bl	8005a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80085d4:	0039      	movs	r1, r7
 80085d6:	4b0d      	ldr	r3, [pc, #52]	@ (800860c <MX_TIM3_Init+0xf0>)
 80085d8:	2204      	movs	r2, #4
 80085da:	0018      	movs	r0, r3
 80085dc:	f007 f9e6 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 80085e0:	1e03      	subs	r3, r0, #0
 80085e2:	d001      	beq.n	80085e8 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80085e4:	f7fd fa4e 	bl	8005a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80085e8:	0039      	movs	r1, r7
 80085ea:	4b08      	ldr	r3, [pc, #32]	@ (800860c <MX_TIM3_Init+0xf0>)
 80085ec:	2208      	movs	r2, #8
 80085ee:	0018      	movs	r0, r3
 80085f0:	f007 f9dc 	bl	800f9ac <HAL_TIM_PWM_ConfigChannel>
 80085f4:	1e03      	subs	r3, r0, #0
 80085f6:	d001      	beq.n	80085fc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80085f8:	f7fd fa44 	bl	8005a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80085fc:	4b03      	ldr	r3, [pc, #12]	@ (800860c <MX_TIM3_Init+0xf0>)
 80085fe:	0018      	movs	r0, r3
 8008600:	f000 f82e 	bl	8008660 <HAL_TIM_MspPostInit>

}
 8008604:	46c0      	nop			@ (mov r8, r8)
 8008606:	46bd      	mov	sp, r7
 8008608:	b006      	add	sp, #24
 800860a:	bd80      	pop	{r7, pc}
 800860c:	20002674 	.word	0x20002674
 8008610:	40000400 	.word	0x40000400
 8008614:	0000ffff 	.word	0x0000ffff

08008618 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	2380      	movs	r3, #128	@ 0x80
 8008626:	05db      	lsls	r3, r3, #23
 8008628:	429a      	cmp	r2, r3
 800862a:	d106      	bne.n	800863a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800862c:	4b0a      	ldr	r3, [pc, #40]	@ (8008658 <HAL_TIM_PWM_MspInit+0x40>)
 800862e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008630:	4b09      	ldr	r3, [pc, #36]	@ (8008658 <HAL_TIM_PWM_MspInit+0x40>)
 8008632:	2101      	movs	r1, #1
 8008634:	430a      	orrs	r2, r1
 8008636:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008638:	e00a      	b.n	8008650 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a07      	ldr	r2, [pc, #28]	@ (800865c <HAL_TIM_PWM_MspInit+0x44>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d105      	bne.n	8008650 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008644:	4b04      	ldr	r3, [pc, #16]	@ (8008658 <HAL_TIM_PWM_MspInit+0x40>)
 8008646:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008648:	4b03      	ldr	r3, [pc, #12]	@ (8008658 <HAL_TIM_PWM_MspInit+0x40>)
 800864a:	2102      	movs	r1, #2
 800864c:	430a      	orrs	r2, r1
 800864e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008650:	46c0      	nop			@ (mov r8, r8)
 8008652:	46bd      	mov	sp, r7
 8008654:	b002      	add	sp, #8
 8008656:	bd80      	pop	{r7, pc}
 8008658:	40021000 	.word	0x40021000
 800865c:	40000400 	.word	0x40000400

08008660 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008660:	b590      	push	{r4, r7, lr}
 8008662:	b08b      	sub	sp, #44	@ 0x2c
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008668:	2414      	movs	r4, #20
 800866a:	193b      	adds	r3, r7, r4
 800866c:	0018      	movs	r0, r3
 800866e:	2314      	movs	r3, #20
 8008670:	001a      	movs	r2, r3
 8008672:	2100      	movs	r1, #0
 8008674:	f00e f9ba 	bl	80169ec <memset>
  if(timHandle->Instance==TIM2)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	2380      	movs	r3, #128	@ 0x80
 800867e:	05db      	lsls	r3, r3, #23
 8008680:	429a      	cmp	r2, r3
 8008682:	d123      	bne.n	80086cc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008684:	4b27      	ldr	r3, [pc, #156]	@ (8008724 <HAL_TIM_MspPostInit+0xc4>)
 8008686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008688:	4b26      	ldr	r3, [pc, #152]	@ (8008724 <HAL_TIM_MspPostInit+0xc4>)
 800868a:	2101      	movs	r1, #1
 800868c:	430a      	orrs	r2, r1
 800868e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008690:	4b24      	ldr	r3, [pc, #144]	@ (8008724 <HAL_TIM_MspPostInit+0xc4>)
 8008692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008694:	2201      	movs	r2, #1
 8008696:	4013      	ands	r3, r2
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800869c:	0021      	movs	r1, r4
 800869e:	187b      	adds	r3, r7, r1
 80086a0:	220d      	movs	r2, #13
 80086a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a4:	187b      	adds	r3, r7, r1
 80086a6:	2202      	movs	r2, #2
 80086a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086aa:	187b      	adds	r3, r7, r1
 80086ac:	2200      	movs	r2, #0
 80086ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086b0:	187b      	adds	r3, r7, r1
 80086b2:	2200      	movs	r2, #0
 80086b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80086b6:	187b      	adds	r3, r7, r1
 80086b8:	2202      	movs	r2, #2
 80086ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086bc:	187a      	adds	r2, r7, r1
 80086be:	23a0      	movs	r3, #160	@ 0xa0
 80086c0:	05db      	lsls	r3, r3, #23
 80086c2:	0011      	movs	r1, r2
 80086c4:	0018      	movs	r0, r3
 80086c6:	f001 fbdd 	bl	8009e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80086ca:	e027      	b.n	800871c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a15      	ldr	r2, [pc, #84]	@ (8008728 <HAL_TIM_MspPostInit+0xc8>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d122      	bne.n	800871c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086d6:	4b13      	ldr	r3, [pc, #76]	@ (8008724 <HAL_TIM_MspPostInit+0xc4>)
 80086d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086da:	4b12      	ldr	r3, [pc, #72]	@ (8008724 <HAL_TIM_MspPostInit+0xc4>)
 80086dc:	2104      	movs	r1, #4
 80086de:	430a      	orrs	r2, r1
 80086e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80086e2:	4b10      	ldr	r3, [pc, #64]	@ (8008724 <HAL_TIM_MspPostInit+0xc4>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e6:	2204      	movs	r2, #4
 80086e8:	4013      	ands	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80086ee:	2114      	movs	r1, #20
 80086f0:	187b      	adds	r3, r7, r1
 80086f2:	22e0      	movs	r2, #224	@ 0xe0
 80086f4:	0052      	lsls	r2, r2, #1
 80086f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086f8:	187b      	adds	r3, r7, r1
 80086fa:	2202      	movs	r2, #2
 80086fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086fe:	187b      	adds	r3, r7, r1
 8008700:	2200      	movs	r2, #0
 8008702:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008704:	187b      	adds	r3, r7, r1
 8008706:	2200      	movs	r2, #0
 8008708:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800870a:	187b      	adds	r3, r7, r1
 800870c:	2202      	movs	r2, #2
 800870e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008710:	187b      	adds	r3, r7, r1
 8008712:	4a06      	ldr	r2, [pc, #24]	@ (800872c <HAL_TIM_MspPostInit+0xcc>)
 8008714:	0019      	movs	r1, r3
 8008716:	0010      	movs	r0, r2
 8008718:	f001 fbb4 	bl	8009e84 <HAL_GPIO_Init>
}
 800871c:	46c0      	nop			@ (mov r8, r8)
 800871e:	46bd      	mov	sp, r7
 8008720:	b00b      	add	sp, #44	@ 0x2c
 8008722:	bd90      	pop	{r4, r7, pc}
 8008724:	40021000 	.word	0x40021000
 8008728:	40000400 	.word	0x40000400
 800872c:	50000800 	.word	0x50000800

08008730 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008734:	4b16      	ldr	r3, [pc, #88]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 8008736:	4a17      	ldr	r2, [pc, #92]	@ (8008794 <MX_USART1_UART_Init+0x64>)
 8008738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800873a:	4b15      	ldr	r3, [pc, #84]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 800873c:	22e1      	movs	r2, #225	@ 0xe1
 800873e:	0252      	lsls	r2, r2, #9
 8008740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008742:	4b13      	ldr	r3, [pc, #76]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 8008744:	2200      	movs	r2, #0
 8008746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008748:	4b11      	ldr	r3, [pc, #68]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800874e:	4b10      	ldr	r3, [pc, #64]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 8008750:	2200      	movs	r2, #0
 8008752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008754:	4b0e      	ldr	r3, [pc, #56]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 8008756:	220c      	movs	r2, #12
 8008758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800875a:	4b0d      	ldr	r3, [pc, #52]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 800875c:	2200      	movs	r2, #0
 800875e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008760:	4b0b      	ldr	r3, [pc, #44]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 8008762:	2200      	movs	r2, #0
 8008764:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008766:	4b0a      	ldr	r3, [pc, #40]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 8008768:	2200      	movs	r2, #0
 800876a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800876c:	4b08      	ldr	r3, [pc, #32]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 800876e:	2208      	movs	r2, #8
 8008770:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8008772:	4b07      	ldr	r3, [pc, #28]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 8008774:	2280      	movs	r2, #128	@ 0x80
 8008776:	0212      	lsls	r2, r2, #8
 8008778:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800877a:	4b05      	ldr	r3, [pc, #20]	@ (8008790 <MX_USART1_UART_Init+0x60>)
 800877c:	0018      	movs	r0, r3
 800877e:	f007 fbdd 	bl	800ff3c <HAL_UART_Init>
 8008782:	1e03      	subs	r3, r0, #0
 8008784:	d001      	beq.n	800878a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8008786:	f7fd f97d 	bl	8005a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800878a:	46c0      	nop			@ (mov r8, r8)
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	200026b4 	.word	0x200026b4
 8008794:	40013800 	.word	0x40013800

08008798 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800879c:	4b14      	ldr	r3, [pc, #80]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 800879e:	4a15      	ldr	r2, [pc, #84]	@ (80087f4 <MX_USART4_UART_Init+0x5c>)
 80087a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80087a2:	4b13      	ldr	r3, [pc, #76]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087a4:	22e1      	movs	r2, #225	@ 0xe1
 80087a6:	0252      	lsls	r2, r2, #9
 80087a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80087aa:	4b11      	ldr	r3, [pc, #68]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80087b0:	4b0f      	ldr	r3, [pc, #60]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80087b6:	4b0e      	ldr	r3, [pc, #56]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80087bc:	4b0c      	ldr	r3, [pc, #48]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087be:	220c      	movs	r2, #12
 80087c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087c2:	4b0b      	ldr	r3, [pc, #44]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80087c8:	4b09      	ldr	r3, [pc, #36]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80087ce:	4b08      	ldr	r3, [pc, #32]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80087d4:	4b06      	ldr	r3, [pc, #24]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80087da:	4b05      	ldr	r3, [pc, #20]	@ (80087f0 <MX_USART4_UART_Init+0x58>)
 80087dc:	0018      	movs	r0, r3
 80087de:	f007 fbad 	bl	800ff3c <HAL_UART_Init>
 80087e2:	1e03      	subs	r3, r0, #0
 80087e4:	d001      	beq.n	80087ea <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80087e6:	f7fd f94d 	bl	8005a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80087ea:	46c0      	nop			@ (mov r8, r8)
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	2000276c 	.word	0x2000276c
 80087f4:	40004c00 	.word	0x40004c00

080087f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80087f8:	b590      	push	{r4, r7, lr}
 80087fa:	b08b      	sub	sp, #44	@ 0x2c
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008800:	2414      	movs	r4, #20
 8008802:	193b      	adds	r3, r7, r4
 8008804:	0018      	movs	r0, r3
 8008806:	2314      	movs	r3, #20
 8008808:	001a      	movs	r2, r3
 800880a:	2100      	movs	r1, #0
 800880c:	f00e f8ee 	bl	80169ec <memset>
  if(uartHandle->Instance==USART1)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a6f      	ldr	r2, [pc, #444]	@ (80089d4 <HAL_UART_MspInit+0x1dc>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d12b      	bne.n	8008872 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800881a:	4b6f      	ldr	r3, [pc, #444]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 800881c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800881e:	4b6e      	ldr	r3, [pc, #440]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 8008820:	2180      	movs	r1, #128	@ 0x80
 8008822:	01c9      	lsls	r1, r1, #7
 8008824:	430a      	orrs	r2, r1
 8008826:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008828:	4b6b      	ldr	r3, [pc, #428]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 800882a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800882c:	4b6a      	ldr	r3, [pc, #424]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 800882e:	2101      	movs	r1, #1
 8008830:	430a      	orrs	r2, r1
 8008832:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008834:	4b68      	ldr	r3, [pc, #416]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 8008836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008838:	2201      	movs	r2, #1
 800883a:	4013      	ands	r3, r2
 800883c:	613b      	str	r3, [r7, #16]
 800883e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008840:	193b      	adds	r3, r7, r4
 8008842:	22c0      	movs	r2, #192	@ 0xc0
 8008844:	00d2      	lsls	r2, r2, #3
 8008846:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008848:	0021      	movs	r1, r4
 800884a:	187b      	adds	r3, r7, r1
 800884c:	2202      	movs	r2, #2
 800884e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008850:	187b      	adds	r3, r7, r1
 8008852:	2200      	movs	r2, #0
 8008854:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008856:	187b      	adds	r3, r7, r1
 8008858:	2203      	movs	r2, #3
 800885a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800885c:	187b      	adds	r3, r7, r1
 800885e:	2204      	movs	r2, #4
 8008860:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008862:	187a      	adds	r2, r7, r1
 8008864:	23a0      	movs	r3, #160	@ 0xa0
 8008866:	05db      	lsls	r3, r3, #23
 8008868:	0011      	movs	r1, r2
 800886a:	0018      	movs	r0, r3
 800886c:	f001 fb0a 	bl	8009e84 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8008870:	e0ac      	b.n	80089cc <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a59      	ldr	r2, [pc, #356]	@ (80089dc <HAL_UART_MspInit+0x1e4>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d000      	beq.n	800887e <HAL_UART_MspInit+0x86>
 800887c:	e0a6      	b.n	80089cc <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 800887e:	4b56      	ldr	r3, [pc, #344]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 8008880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008882:	4b55      	ldr	r3, [pc, #340]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 8008884:	2180      	movs	r1, #128	@ 0x80
 8008886:	0309      	lsls	r1, r1, #12
 8008888:	430a      	orrs	r2, r1
 800888a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800888c:	4b52      	ldr	r3, [pc, #328]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 800888e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008890:	4b51      	ldr	r3, [pc, #324]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 8008892:	2101      	movs	r1, #1
 8008894:	430a      	orrs	r2, r1
 8008896:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008898:	4b4f      	ldr	r3, [pc, #316]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889c:	2201      	movs	r2, #1
 800889e:	4013      	ands	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80088a4:	4b4c      	ldr	r3, [pc, #304]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 80088a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a8:	4b4b      	ldr	r3, [pc, #300]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 80088aa:	2104      	movs	r1, #4
 80088ac:	430a      	orrs	r2, r1
 80088ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80088b0:	4b49      	ldr	r3, [pc, #292]	@ (80089d8 <HAL_UART_MspInit+0x1e0>)
 80088b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b4:	2204      	movs	r2, #4
 80088b6:	4013      	ands	r3, r2
 80088b8:	60bb      	str	r3, [r7, #8]
 80088ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80088bc:	2414      	movs	r4, #20
 80088be:	193b      	adds	r3, r7, r4
 80088c0:	2202      	movs	r2, #2
 80088c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c4:	193b      	adds	r3, r7, r4
 80088c6:	2202      	movs	r2, #2
 80088c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ca:	193b      	adds	r3, r7, r4
 80088cc:	2200      	movs	r2, #0
 80088ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088d0:	193b      	adds	r3, r7, r4
 80088d2:	2203      	movs	r2, #3
 80088d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80088d6:	193b      	adds	r3, r7, r4
 80088d8:	2206      	movs	r2, #6
 80088da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088dc:	193a      	adds	r2, r7, r4
 80088de:	23a0      	movs	r3, #160	@ 0xa0
 80088e0:	05db      	lsls	r3, r3, #23
 80088e2:	0011      	movs	r1, r2
 80088e4:	0018      	movs	r0, r3
 80088e6:	f001 facd 	bl	8009e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80088ea:	0021      	movs	r1, r4
 80088ec:	187b      	adds	r3, r7, r1
 80088ee:	2280      	movs	r2, #128	@ 0x80
 80088f0:	00d2      	lsls	r2, r2, #3
 80088f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088f4:	187b      	adds	r3, r7, r1
 80088f6:	2202      	movs	r2, #2
 80088f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088fa:	187b      	adds	r3, r7, r1
 80088fc:	2200      	movs	r2, #0
 80088fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008900:	187b      	adds	r3, r7, r1
 8008902:	2203      	movs	r2, #3
 8008904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8008906:	187b      	adds	r3, r7, r1
 8008908:	2206      	movs	r2, #6
 800890a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800890c:	187b      	adds	r3, r7, r1
 800890e:	4a34      	ldr	r2, [pc, #208]	@ (80089e0 <HAL_UART_MspInit+0x1e8>)
 8008910:	0019      	movs	r1, r3
 8008912:	0010      	movs	r0, r2
 8008914:	f001 fab6 	bl	8009e84 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8008918:	4b32      	ldr	r3, [pc, #200]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 800891a:	4a33      	ldr	r2, [pc, #204]	@ (80089e8 <HAL_UART_MspInit+0x1f0>)
 800891c:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800891e:	4b31      	ldr	r3, [pc, #196]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 8008920:	220c      	movs	r2, #12
 8008922:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008924:	4b2f      	ldr	r3, [pc, #188]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 8008926:	2200      	movs	r2, #0
 8008928:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800892a:	4b2e      	ldr	r3, [pc, #184]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 800892c:	2200      	movs	r2, #0
 800892e:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008930:	4b2c      	ldr	r3, [pc, #176]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 8008932:	2280      	movs	r2, #128	@ 0x80
 8008934:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008936:	4b2b      	ldr	r3, [pc, #172]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 8008938:	2200      	movs	r2, #0
 800893a:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800893c:	4b29      	ldr	r3, [pc, #164]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 800893e:	2200      	movs	r2, #0
 8008940:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8008942:	4b28      	ldr	r3, [pc, #160]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 8008944:	2220      	movs	r2, #32
 8008946:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008948:	4b26      	ldr	r3, [pc, #152]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 800894a:	2200      	movs	r2, #0
 800894c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800894e:	4b25      	ldr	r3, [pc, #148]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 8008950:	0018      	movs	r0, r3
 8008952:	f000 ffeb 	bl	800992c <HAL_DMA_Init>
 8008956:	1e03      	subs	r3, r0, #0
 8008958:	d001      	beq.n	800895e <HAL_UART_MspInit+0x166>
      Error_Handler();
 800895a:	f7fd f893 	bl	8005a84 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a20      	ldr	r2, [pc, #128]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 8008962:	675a      	str	r2, [r3, #116]	@ 0x74
 8008964:	4b1f      	ldr	r3, [pc, #124]	@ (80089e4 <HAL_UART_MspInit+0x1ec>)
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800896a:	4b20      	ldr	r3, [pc, #128]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 800896c:	4a20      	ldr	r2, [pc, #128]	@ (80089f0 <HAL_UART_MspInit+0x1f8>)
 800896e:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8008970:	4b1e      	ldr	r3, [pc, #120]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 8008972:	220c      	movs	r2, #12
 8008974:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008976:	4b1d      	ldr	r3, [pc, #116]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 8008978:	2210      	movs	r2, #16
 800897a:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800897c:	4b1b      	ldr	r3, [pc, #108]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 800897e:	2200      	movs	r2, #0
 8008980:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008982:	4b1a      	ldr	r3, [pc, #104]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 8008984:	2280      	movs	r2, #128	@ 0x80
 8008986:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008988:	4b18      	ldr	r3, [pc, #96]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 800898a:	2200      	movs	r2, #0
 800898c:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800898e:	4b17      	ldr	r3, [pc, #92]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 8008990:	2200      	movs	r2, #0
 8008992:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8008994:	4b15      	ldr	r3, [pc, #84]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 8008996:	2200      	movs	r2, #0
 8008998:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800899a:	4b14      	ldr	r3, [pc, #80]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 800899c:	2200      	movs	r2, #0
 800899e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80089a0:	4b12      	ldr	r3, [pc, #72]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 80089a2:	0018      	movs	r0, r3
 80089a4:	f000 ffc2 	bl	800992c <HAL_DMA_Init>
 80089a8:	1e03      	subs	r3, r0, #0
 80089aa:	d001      	beq.n	80089b0 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80089ac:	f7fd f86a 	bl	8005a84 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a0e      	ldr	r2, [pc, #56]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 80089b4:	671a      	str	r2, [r3, #112]	@ 0x70
 80089b6:	4b0d      	ldr	r3, [pc, #52]	@ (80089ec <HAL_UART_MspInit+0x1f4>)
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80089bc:	2200      	movs	r2, #0
 80089be:	2100      	movs	r1, #0
 80089c0:	200e      	movs	r0, #14
 80089c2:	f000 ff81 	bl	80098c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80089c6:	200e      	movs	r0, #14
 80089c8:	f000 ff93 	bl	80098f2 <HAL_NVIC_EnableIRQ>
}
 80089cc:	46c0      	nop			@ (mov r8, r8)
 80089ce:	46bd      	mov	sp, r7
 80089d0:	b00b      	add	sp, #44	@ 0x2c
 80089d2:	bd90      	pop	{r4, r7, pc}
 80089d4:	40013800 	.word	0x40013800
 80089d8:	40021000 	.word	0x40021000
 80089dc:	40004c00 	.word	0x40004c00
 80089e0:	50000800 	.word	0x50000800
 80089e4:	20002824 	.word	0x20002824
 80089e8:	4002006c 	.word	0x4002006c
 80089ec:	2000286c 	.word	0x2000286c
 80089f0:	40020080 	.word	0x40020080

080089f4 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80089fc:	f000 fc52 	bl	80092a4 <HAL_GetTick>
 8008a00:	0003      	movs	r3, r0
 8008a02:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8008a04:	4b1c      	ldr	r3, [pc, #112]	@ (8008a78 <TimestampIsReached+0x84>)
 8008a06:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d307      	bcc.n	8008a20 <TimestampIsReached+0x2c>
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d901      	bls.n	8008a20 <TimestampIsReached+0x2c>
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	e000      	b.n	8008a22 <TimestampIsReached+0x2e>
 8008a20:	2200      	movs	r2, #0
 8008a22:	230f      	movs	r3, #15
 8008a24:	18fb      	adds	r3, r7, r3
 8008a26:	701a      	strb	r2, [r3, #0]
 8008a28:	781a      	ldrb	r2, [r3, #0]
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	400a      	ands	r2, r1
 8008a2e:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d207      	bcs.n	8008a48 <TimestampIsReached+0x54>
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d201      	bcs.n	8008a48 <TimestampIsReached+0x54>
 8008a44:	2201      	movs	r2, #1
 8008a46:	e000      	b.n	8008a4a <TimestampIsReached+0x56>
 8008a48:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8008a4a:	200e      	movs	r0, #14
 8008a4c:	183b      	adds	r3, r7, r0
 8008a4e:	701a      	strb	r2, [r3, #0]
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	2101      	movs	r1, #1
 8008a54:	400a      	ands	r2, r1
 8008a56:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8008a58:	230f      	movs	r3, #15
 8008a5a:	18fb      	adds	r3, r7, r3
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <TimestampIsReached+0x76>
 8008a62:	183b      	adds	r3, r7, r0
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	0018      	movs	r0, r3
 8008a72:	46bd      	mov	sp, r7
 8008a74:	b006      	add	sp, #24
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	7fffffff 	.word	0x7fffffff

08008a7c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8008a84:	f000 fc0e 	bl	80092a4 <HAL_GetTick>
 8008a88:	0002      	movs	r2, r0
 8008a8a:	4904      	ldr	r1, [pc, #16]	@ (8008a9c <AddTimestamp+0x20>)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	0018      	movs	r0, r3
 8008a90:	f00d ff08 	bl	80168a4 <siprintf>
}
 8008a94:	46c0      	nop			@ (mov r8, r8)
 8008a96:	46bd      	mov	sp, r7
 8008a98:	b002      	add	sp, #8
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	0801a07c 	.word	0x0801a07c

08008aa0 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8008aa0:	b40c      	push	{r2, r3}
 8008aa2:	b5b0      	push	{r4, r5, r7, lr}
 8008aa4:	4c2b      	ldr	r4, [pc, #172]	@ (8008b54 <CreateLine+0xb4>)
 8008aa6:	44a5      	add	sp, r4
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	0002      	movs	r2, r0
 8008aac:	6039      	str	r1, [r7, #0]
 8008aae:	4b2a      	ldr	r3, [pc, #168]	@ (8008b58 <CreateLine+0xb8>)
 8008ab0:	2182      	movs	r1, #130	@ 0x82
 8008ab2:	00c9      	lsls	r1, r1, #3
 8008ab4:	185b      	adds	r3, r3, r1
 8008ab6:	19db      	adds	r3, r3, r7
 8008ab8:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8008aba:	4b28      	ldr	r3, [pc, #160]	@ (8008b5c <CreateLine+0xbc>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	4a26      	ldr	r2, [pc, #152]	@ (8008b58 <CreateLine+0xb8>)
 8008ac0:	1852      	adds	r2, r2, r1
 8008ac2:	19d2      	adds	r2, r2, r7
 8008ac4:	7812      	ldrb	r2, [r2, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d83b      	bhi.n	8008b42 <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	4924      	ldr	r1, [pc, #144]	@ (8008b60 <CreateLine+0xc0>)
 8008ace:	240c      	movs	r4, #12
 8008ad0:	193b      	adds	r3, r7, r4
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f00d fee6 	bl	80168a4 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8008ad8:	4b20      	ldr	r3, [pc, #128]	@ (8008b5c <CreateLine+0xbc>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d909      	bls.n	8008af4 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8008ae0:	193b      	adds	r3, r7, r4
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	f7f7 fb10 	bl	8000108 <strlen>
 8008ae8:	0002      	movs	r2, r0
 8008aea:	193b      	adds	r3, r7, r4
 8008aec:	189b      	adds	r3, r3, r2
 8008aee:	0018      	movs	r0, r3
 8008af0:	f7ff ffc4 	bl	8008a7c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8008af4:	240c      	movs	r4, #12
 8008af6:	193b      	adds	r3, r7, r4
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7f7 fb05 	bl	8000108 <strlen>
 8008afe:	0003      	movs	r3, r0
 8008b00:	4918      	ldr	r1, [pc, #96]	@ (8008b64 <CreateLine+0xc4>)
 8008b02:	187a      	adds	r2, r7, r1
 8008b04:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8008b06:	4b18      	ldr	r3, [pc, #96]	@ (8008b68 <CreateLine+0xc8>)
 8008b08:	2508      	movs	r5, #8
 8008b0a:	195b      	adds	r3, r3, r5
 8008b0c:	19db      	adds	r3, r3, r7
 8008b0e:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8008b10:	193a      	adds	r2, r7, r4
 8008b12:	187b      	adds	r3, r7, r1
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	18d0      	adds	r0, r2, r3
 8008b18:	187b      	adds	r3, r7, r1
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2280      	movs	r2, #128	@ 0x80
 8008b1e:	00d2      	lsls	r2, r2, #3
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	0019      	movs	r1, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2283      	movs	r2, #131	@ 0x83
 8008b28:	00d2      	lsls	r2, r2, #3
 8008b2a:	1952      	adds	r2, r2, r5
 8008b2c:	19d2      	adds	r2, r2, r7
 8008b2e:	6812      	ldr	r2, [r2, #0]
 8008b30:	f00d ff50 	bl	80169d4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8008b34:	193a      	adds	r2, r7, r4
 8008b36:	4b0d      	ldr	r3, [pc, #52]	@ (8008b6c <CreateLine+0xcc>)
 8008b38:	0011      	movs	r1, r2
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f00d fea2 	bl	8016884 <iprintf>
 8008b40:	e000      	b.n	8008b44 <CreateLine+0xa4>
    return;
 8008b42:	46c0      	nop			@ (mov r8, r8)
}
 8008b44:	46bd      	mov	sp, r7
 8008b46:	2382      	movs	r3, #130	@ 0x82
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	449d      	add	sp, r3
 8008b4c:	bcb0      	pop	{r4, r5, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	b002      	add	sp, #8
 8008b52:	4718      	bx	r3
 8008b54:	fffffbf0 	.word	0xfffffbf0
 8008b58:	fffffbf7 	.word	0xfffffbf7
 8008b5c:	20000144 	.word	0x20000144
 8008b60:	0801a088 	.word	0x0801a088
 8008b64:	0000040c 	.word	0x0000040c
 8008b68:	0000041c 	.word	0x0000041c
 8008b6c:	0801a08c 	.word	0x0801a08c

08008b70 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	4804      	ldr	r0, [pc, #16]	@ (8008b94 <_write+0x24>)
 8008b84:	2364      	movs	r3, #100	@ 0x64
 8008b86:	f007 fa3f 	bl	8010008 <HAL_UART_Transmit>
  return count;
 8008b8a:	687b      	ldr	r3, [r7, #4]
}
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b004      	add	sp, #16
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	200026b4 	.word	0x200026b4

08008b98 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	0002      	movs	r2, r0
 8008ba0:	1dfb      	adds	r3, r7, #7
 8008ba2:	701a      	strb	r2, [r3, #0]
 8008ba4:	4b03      	ldr	r3, [pc, #12]	@ (8008bb4 <SetVerboseLevel+0x1c>)
 8008ba6:	1dfa      	adds	r2, r7, #7
 8008ba8:	7812      	ldrb	r2, [r2, #0]
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	46c0      	nop			@ (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b002      	add	sp, #8
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	20000144 	.word	0x20000144

08008bb8 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008bbc:	f000 fb72 	bl	80092a4 <HAL_GetTick>
 8008bc0:	0003      	movs	r3, r0
}
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8008bce:	4a0f      	ldr	r2, [pc, #60]	@ (8008c0c <BinaryReleaseInfo+0x44>)
 8008bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8008c10 <BinaryReleaseInfo+0x48>)
 8008bd2:	0019      	movs	r1, r3
 8008bd4:	2002      	movs	r0, #2
 8008bd6:	f7ff ff63 	bl	8008aa0 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8008bda:	480e      	ldr	r0, [pc, #56]	@ (8008c14 <BinaryReleaseInfo+0x4c>)
 8008bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8008c18 <BinaryReleaseInfo+0x50>)
 8008bde:	490c      	ldr	r1, [pc, #48]	@ (8008c10 <BinaryReleaseInfo+0x48>)
 8008be0:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <BinaryReleaseInfo+0x54>)
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	0003      	movs	r3, r0
 8008be6:	2002      	movs	r0, #2
 8008be8:	f7ff ff5a 	bl	8008aa0 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8008bec:	4a0c      	ldr	r2, [pc, #48]	@ (8008c20 <BinaryReleaseInfo+0x58>)
 8008bee:	4b08      	ldr	r3, [pc, #32]	@ (8008c10 <BinaryReleaseInfo+0x48>)
 8008bf0:	0019      	movs	r1, r3
 8008bf2:	2002      	movs	r0, #2
 8008bf4:	f7ff ff54 	bl	8008aa0 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8008c24 <BinaryReleaseInfo+0x5c>)
 8008bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8008c28 <BinaryReleaseInfo+0x60>)
 8008bfc:	4904      	ldr	r1, [pc, #16]	@ (8008c10 <BinaryReleaseInfo+0x48>)
 8008bfe:	2002      	movs	r0, #2
 8008c00:	f7ff ff4e 	bl	8008aa0 <CreateLine>
}
 8008c04:	46c0      	nop			@ (mov r8, r8)
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	46c0      	nop			@ (mov r8, r8)
 8008c0c:	0801a094 	.word	0x0801a094
 8008c10:	0801a0c0 	.word	0x0801a0c0
 8008c14:	0801a0c4 	.word	0x0801a0c4
 8008c18:	0801a0d0 	.word	0x0801a0d0
 8008c1c:	0801a0e4 	.word	0x0801a0e4
 8008c20:	0801a0f0 	.word	0x0801a0f0
 8008c24:	0801a0fc 	.word	0x0801a0fc
 8008c28:	0801a104 	.word	0x0801a104

08008c2c <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c2c:	b590      	push	{r4, r7, lr}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6039      	str	r1, [r7, #0]
 8008c34:	0011      	movs	r1, r2
 8008c36:	1dfb      	adds	r3, r7, #7
 8008c38:	1c02      	adds	r2, r0, #0
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	1dbb      	adds	r3, r7, #6
 8008c3e:	1c0a      	adds	r2, r1, #0
 8008c40:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8008c42:	4b08      	ldr	r3, [pc, #32]	@ (8008c64 <ReadRegister+0x38>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d008      	beq.n	8008c5c <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8008c4a:	4b06      	ldr	r3, [pc, #24]	@ (8008c64 <ReadRegister+0x38>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	1dba      	adds	r2, r7, #6
 8008c50:	7814      	ldrb	r4, [r2, #0]
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	1dfa      	adds	r2, r7, #7
 8008c56:	7810      	ldrb	r0, [r2, #0]
 8008c58:	0022      	movs	r2, r4
 8008c5a:	4798      	blx	r3
	}
}
 8008c5c:	46c0      	nop			@ (mov r8, r8)
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	b003      	add	sp, #12
 8008c62:	bd90      	pop	{r4, r7, pc}
 8008c64:	200028b4 	.word	0x200028b4

08008c68 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c68:	b590      	push	{r4, r7, lr}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6039      	str	r1, [r7, #0]
 8008c70:	0011      	movs	r1, r2
 8008c72:	1dfb      	adds	r3, r7, #7
 8008c74:	1c02      	adds	r2, r0, #0
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	1dbb      	adds	r3, r7, #6
 8008c7a:	1c0a      	adds	r2, r1, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008c7e:	4b08      	ldr	r3, [pc, #32]	@ (8008ca0 <WriteRegister+0x38>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d008      	beq.n	8008c98 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008c86:	4b06      	ldr	r3, [pc, #24]	@ (8008ca0 <WriteRegister+0x38>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	1dba      	adds	r2, r7, #6
 8008c8c:	7814      	ldrb	r4, [r2, #0]
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	1dfa      	adds	r2, r7, #7
 8008c92:	7810      	ldrb	r0, [r2, #0]
 8008c94:	0022      	movs	r2, r4
 8008c96:	4798      	blx	r3
  }
}
 8008c98:	46c0      	nop			@ (mov r8, r8)
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	b003      	add	sp, #12
 8008c9e:	bd90      	pop	{r4, r7, pc}
 8008ca0:	200028b8 	.word	0x200028b8

08008ca4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	000a      	movs	r2, r1
 8008cae:	1cfb      	adds	r3, r7, #3
 8008cb0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8008cb2:	230f      	movs	r3, #15
 8008cb4:	18fb      	adds	r3, r7, r3
 8008cb6:	22ff      	movs	r2, #255	@ 0xff
 8008cb8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008cba:	230e      	movs	r3, #14
 8008cbc:	18fb      	adds	r3, r7, r3
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	701a      	strb	r2, [r3, #0]
 8008cc2:	e037      	b.n	8008d34 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008cc4:	230e      	movs	r3, #14
 8008cc6:	18fb      	adds	r3, r7, r3
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	18d3      	adds	r3, r2, r3
 8008cce:	7819      	ldrb	r1, [r3, #0]
 8008cd0:	220f      	movs	r2, #15
 8008cd2:	18bb      	adds	r3, r7, r2
 8008cd4:	18ba      	adds	r2, r7, r2
 8008cd6:	7812      	ldrb	r2, [r2, #0]
 8008cd8:	404a      	eors	r2, r1
 8008cda:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008cdc:	230d      	movs	r3, #13
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	701a      	strb	r2, [r3, #0]
 8008ce4:	e01b      	b.n	8008d1e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8008ce6:	210f      	movs	r1, #15
 8008ce8:	187b      	adds	r3, r7, r1
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	b25b      	sxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	da09      	bge.n	8008d06 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8008cf2:	187b      	adds	r3, r7, r1
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	b25b      	sxtb	r3, r3
 8008cfa:	2231      	movs	r2, #49	@ 0x31
 8008cfc:	4053      	eors	r3, r2
 8008cfe:	b25a      	sxtb	r2, r3
 8008d00:	187b      	adds	r3, r7, r1
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	e005      	b.n	8008d12 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008d06:	230f      	movs	r3, #15
 8008d08:	18fa      	adds	r2, r7, r3
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	18db      	adds	r3, r3, r3
 8008d10:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008d12:	210d      	movs	r1, #13
 8008d14:	187b      	adds	r3, r7, r1
 8008d16:	781a      	ldrb	r2, [r3, #0]
 8008d18:	187b      	adds	r3, r7, r1
 8008d1a:	3201      	adds	r2, #1
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	230d      	movs	r3, #13
 8008d20:	18fb      	adds	r3, r7, r3
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	2b07      	cmp	r3, #7
 8008d26:	d9de      	bls.n	8008ce6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008d28:	210e      	movs	r1, #14
 8008d2a:	187b      	adds	r3, r7, r1
 8008d2c:	781a      	ldrb	r2, [r3, #0]
 8008d2e:	187b      	adds	r3, r7, r1
 8008d30:	3201      	adds	r2, #1
 8008d32:	701a      	strb	r2, [r3, #0]
 8008d34:	230e      	movs	r3, #14
 8008d36:	18fa      	adds	r2, r7, r3
 8008d38:	1cfb      	adds	r3, r7, #3
 8008d3a:	7812      	ldrb	r2, [r2, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d3c0      	bcc.n	8008cc4 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008d42:	230f      	movs	r3, #15
 8008d44:	18fb      	adds	r3, r7, r3
 8008d46:	781b      	ldrb	r3, [r3, #0]
}
 8008d48:	0018      	movs	r0, r3
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	b004      	add	sp, #16
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8008d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d84 <HIDS_Init+0x34>)
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8008d60:	4b09      	ldr	r3, [pc, #36]	@ (8008d88 <HIDS_Init+0x38>)
 8008d62:	683a      	ldr	r2, [r7, #0]
 8008d64:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8008d66:	4b09      	ldr	r3, [pc, #36]	@ (8008d8c <HIDS_Init+0x3c>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f000 f8d0 	bl	8008f10 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8008d70:	4b07      	ldr	r3, [pc, #28]	@ (8008d90 <HIDS_Init+0x40>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	0018      	movs	r0, r3
 8008d76:	f000 f82b 	bl	8008dd0 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8008d7a:	46c0      	nop			@ (mov r8, r8)
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	b002      	add	sp, #8
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	46c0      	nop			@ (mov r8, r8)
 8008d84:	200028b4 	.word	0x200028b4
 8008d88:	200028b8 	.word	0x200028b8
 8008d8c:	20000146 	.word	0x20000146
 8008d90:	20000145 	.word	0x20000145

08008d94 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8008d98:	f7ff ff0e 	bl	8008bb8 <GetCurrentHalTicks>
 8008d9c:	0002      	movs	r2, r0
 8008d9e:	4b08      	ldr	r3, [pc, #32]	@ (8008dc0 <HIDS_StartMeasurement+0x2c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	18d2      	adds	r2, r2, r3
 8008da4:	4b07      	ldr	r3, [pc, #28]	@ (8008dc4 <HIDS_StartMeasurement+0x30>)
 8008da6:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8008da8:	4b07      	ldr	r3, [pc, #28]	@ (8008dc8 <HIDS_StartMeasurement+0x34>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	0019      	movs	r1, r3
 8008dae:	2044      	movs	r0, #68	@ 0x44
 8008db0:	f7ff ff5a 	bl	8008c68 <WriteRegister>
  MeasurementDone = false;
 8008db4:	4b05      	ldr	r3, [pc, #20]	@ (8008dcc <HIDS_StartMeasurement+0x38>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	701a      	strb	r2, [r3, #0]
}
 8008dba:	46c0      	nop			@ (mov r8, r8)
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	2000014c 	.word	0x2000014c
 8008dc4:	20000148 	.word	0x20000148
 8008dc8:	20000146 	.word	0x20000146
 8008dcc:	200028ca 	.word	0x200028ca

08008dd0 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	0002      	movs	r2, r0
 8008dd8:	1dfb      	adds	r3, r7, #7
 8008dda:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8008ddc:	4b03      	ldr	r3, [pc, #12]	@ (8008dec <HIDS_SetHeaterMode+0x1c>)
 8008dde:	1dfa      	adds	r2, r7, #7
 8008de0:	7812      	ldrb	r2, [r2, #0]
 8008de2:	701a      	strb	r2, [r3, #0]
}
 8008de4:	46c0      	nop			@ (mov r8, r8)
 8008de6:	46bd      	mov	sp, r7
 8008de8:	b002      	add	sp, #8
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	20000145 	.word	0x20000145

08008df0 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8008df0:	b590      	push	{r4, r7, lr}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	781a      	ldrb	r2, [r3, #0]
 8008dfc:	210c      	movs	r1, #12
 8008dfe:	187b      	adds	r3, r7, r1
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	785a      	ldrb	r2, [r3, #1]
 8008e06:	187b      	adds	r3, r7, r1
 8008e08:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8008e0a:	240f      	movs	r4, #15
 8008e0c:	193b      	adds	r3, r7, r4
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	7892      	ldrb	r2, [r2, #2]
 8008e12:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8008e14:	187b      	adds	r3, r7, r1
 8008e16:	2102      	movs	r1, #2
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f7ff ff43 	bl	8008ca4 <CalculateCRC>
 8008e1e:	0003      	movs	r3, r0
 8008e20:	001a      	movs	r2, r3
 8008e22:	193b      	adds	r3, r7, r4
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d007      	beq.n	8008e3a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8008e2a:	4a17      	ldr	r2, [pc, #92]	@ (8008e88 <CheckCRC+0x98>)
 8008e2c:	4b17      	ldr	r3, [pc, #92]	@ (8008e8c <CheckCRC+0x9c>)
 8008e2e:	0019      	movs	r1, r3
 8008e30:	2001      	movs	r0, #1
 8008e32:	f7ff fe35 	bl	8008aa0 <CreateLine>
		return false;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e021      	b.n	8008e7e <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	78da      	ldrb	r2, [r3, #3]
 8008e3e:	2108      	movs	r1, #8
 8008e40:	187b      	adds	r3, r7, r1
 8008e42:	701a      	strb	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	791a      	ldrb	r2, [r3, #4]
 8008e48:	187b      	adds	r3, r7, r1
 8008e4a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008e4c:	240e      	movs	r4, #14
 8008e4e:	193b      	adds	r3, r7, r4
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	7952      	ldrb	r2, [r2, #5]
 8008e54:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8008e56:	187b      	adds	r3, r7, r1
 8008e58:	2102      	movs	r1, #2
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	f7ff ff22 	bl	8008ca4 <CalculateCRC>
 8008e60:	0003      	movs	r3, r0
 8008e62:	001a      	movs	r2, r3
 8008e64:	193b      	adds	r3, r7, r4
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d007      	beq.n	8008e7c <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8008e6c:	4a08      	ldr	r2, [pc, #32]	@ (8008e90 <CheckCRC+0xa0>)
 8008e6e:	4b07      	ldr	r3, [pc, #28]	@ (8008e8c <CheckCRC+0x9c>)
 8008e70:	0019      	movs	r1, r3
 8008e72:	2001      	movs	r0, #1
 8008e74:	f7ff fe14 	bl	8008aa0 <CreateLine>
		return false;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	e000      	b.n	8008e7e <CheckCRC+0x8e>
	}
	return true;
 8008e7c:	2301      	movs	r3, #1
}
 8008e7e:	0018      	movs	r0, r3
 8008e80:	46bd      	mov	sp, r7
 8008e82:	b005      	add	sp, #20
 8008e84:	bd90      	pop	{r4, r7, pc}
 8008e86:	46c0      	nop			@ (mov r8, r8)
 8008e88:	0801a140 	.word	0x0801a140
 8008e8c:	0801a168 	.word	0x0801a168
 8008e90:	0801a16c 	.word	0x0801a16c

08008e94 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8008e9a:	1dbb      	adds	r3, r7, #6
 8008e9c:	2289      	movs	r2, #137	@ 0x89
 8008e9e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8008ea0:	1dbb      	adds	r3, r7, #6
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	0019      	movs	r1, r3
 8008ea6:	2044      	movs	r0, #68	@ 0x44
 8008ea8:	f7ff fede 	bl	8008c68 <WriteRegister>
	HAL_Delay(30);
 8008eac:	201e      	movs	r0, #30
 8008eae:	f000 fa03 	bl	80092b8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8008eb2:	4b14      	ldr	r3, [pc, #80]	@ (8008f04 <HIDS_DeviceConnected+0x70>)
 8008eb4:	2206      	movs	r2, #6
 8008eb6:	0019      	movs	r1, r3
 8008eb8:	2044      	movs	r0, #68	@ 0x44
 8008eba:	f7ff feb7 	bl	8008c2c <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008ebe:	1dfb      	adds	r3, r7, #7
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	701a      	strb	r2, [r3, #0]
 8008ec4:	e011      	b.n	8008eea <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8008ec6:	1dfb      	adds	r3, r7, #7
 8008ec8:	7818      	ldrb	r0, [r3, #0]
 8008eca:	1dfb      	adds	r3, r7, #7
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	4a0d      	ldr	r2, [pc, #52]	@ (8008f04 <HIDS_DeviceConnected+0x70>)
 8008ed0:	5cd3      	ldrb	r3, [r2, r3]
 8008ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8008f08 <HIDS_DeviceConnected+0x74>)
 8008ed4:	490d      	ldr	r1, [pc, #52]	@ (8008f0c <HIDS_DeviceConnected+0x78>)
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	0003      	movs	r3, r0
 8008eda:	2002      	movs	r0, #2
 8008edc:	f7ff fde0 	bl	8008aa0 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008ee0:	1dfb      	adds	r3, r7, #7
 8008ee2:	781a      	ldrb	r2, [r3, #0]
 8008ee4:	1dfb      	adds	r3, r7, #7
 8008ee6:	3201      	adds	r2, #1
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	1dfb      	adds	r3, r7, #7
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	d9e9      	bls.n	8008ec6 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8008ef2:	4b04      	ldr	r3, [pc, #16]	@ (8008f04 <HIDS_DeviceConnected+0x70>)
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	f7ff ff7b 	bl	8008df0 <CheckCRC>
 8008efa:	0003      	movs	r3, r0
}
 8008efc:	0018      	movs	r0, r3
 8008efe:	46bd      	mov	sp, r7
 8008f00:	b002      	add	sp, #8
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	200028bc 	.word	0x200028bc
 8008f08:	0801a198 	.word	0x0801a198
 8008f0c:	0801a13c 	.word	0x0801a13c

08008f10 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	0002      	movs	r2, r0
 8008f18:	1dfb      	adds	r3, r7, #7
 8008f1a:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8008f1c:	4b03      	ldr	r3, [pc, #12]	@ (8008f2c <HIDS_SetMeasurementMode+0x1c>)
 8008f1e:	1dfa      	adds	r2, r7, #7
 8008f20:	7812      	ldrb	r2, [r2, #0]
 8008f22:	701a      	strb	r2, [r3, #0]
}
 8008f24:	46c0      	nop			@ (mov r8, r8)
 8008f26:	46bd      	mov	sp, r7
 8008f28:	b002      	add	sp, #8
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	20000146 	.word	0x20000146

08008f30 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8008f34:	4b04      	ldr	r3, [pc, #16]	@ (8008f48 <HIDS_MeasurementReady+0x18>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	0018      	movs	r0, r3
 8008f3a:	f7ff fd5b 	bl	80089f4 <TimestampIsReached>
 8008f3e:	0003      	movs	r3, r0
}
 8008f40:	0018      	movs	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	46c0      	nop			@ (mov r8, r8)
 8008f48:	20000148 	.word	0x20000148

08008f4c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008f4c:	b590      	push	{r4, r7, lr}
 8008f4e:	b08d      	sub	sp, #52	@ 0x34
 8008f50:	af02      	add	r7, sp, #8
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8008f56:	4b7f      	ldr	r3, [pc, #508]	@ (8009154 <HIDS_GetMeasurementValues+0x208>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <HIDS_GetMeasurementValues+0x16>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e0f3      	b.n	800914a <HIDS_GetMeasurementValues+0x1fe>
  if(!HIDS_MeasurementReady()) return false;
 8008f62:	f7ff ffe5 	bl	8008f30 <HIDS_MeasurementReady>
 8008f66:	0003      	movs	r3, r0
 8008f68:	001a      	movs	r2, r3
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	4053      	eors	r3, r2
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <HIDS_GetMeasurementValues+0x2c>
 8008f74:	2300      	movs	r3, #0
 8008f76:	e0e8      	b.n	800914a <HIDS_GetMeasurementValues+0x1fe>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8008f78:	4b77      	ldr	r3, [pc, #476]	@ (8009158 <HIDS_GetMeasurementValues+0x20c>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	4b77      	ldr	r3, [pc, #476]	@ (800915c <HIDS_GetMeasurementValues+0x210>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	0019      	movs	r1, r3
 8008f82:	0010      	movs	r0, r2
 8008f84:	f7f7 f8dc 	bl	8000140 <__udivsi3>
 8008f88:	0003      	movs	r3, r0
 8008f8a:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008f8c:	4b74      	ldr	r3, [pc, #464]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	1c58      	adds	r0, r3, #1
 8008f92:	4a74      	ldr	r2, [pc, #464]	@ (8009164 <HIDS_GetMeasurementValues+0x218>)
 8008f94:	4974      	ldr	r1, [pc, #464]	@ (8009168 <HIDS_GetMeasurementValues+0x21c>)
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	0003      	movs	r3, r0
 8008f9c:	2003      	movs	r0, #3
 8008f9e:	f7ff fd7f 	bl	8008aa0 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8008fa2:	4b72      	ldr	r3, [pc, #456]	@ (800916c <HIDS_GetMeasurementValues+0x220>)
 8008fa4:	2206      	movs	r2, #6
 8008fa6:	0019      	movs	r1, r3
 8008fa8:	2044      	movs	r0, #68	@ 0x44
 8008faa:	f7ff fe3f 	bl	8008c2c <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8008fae:	4b6f      	ldr	r3, [pc, #444]	@ (800916c <HIDS_GetMeasurementValues+0x220>)
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f7ff ff1d 	bl	8008df0 <CheckCRC>
 8008fb6:	0003      	movs	r3, r0
 8008fb8:	001a      	movs	r2, r3
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4053      	eors	r3, r2
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d011      	beq.n	8008fe8 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8008fc4:	2327      	movs	r3, #39	@ 0x27
 8008fc6:	18fb      	adds	r3, r7, r3
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
 8008fcc:	e005      	b.n	8008fda <HIDS_GetMeasurementValues+0x8e>
 8008fce:	2127      	movs	r1, #39	@ 0x27
 8008fd0:	187b      	adds	r3, r7, r1
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	187b      	adds	r3, r7, r1
 8008fd6:	3201      	adds	r2, #1
 8008fd8:	701a      	strb	r2, [r3, #0]
 8008fda:	2327      	movs	r3, #39	@ 0x27
 8008fdc:	18fb      	adds	r3, r7, r3
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b05      	cmp	r3, #5
 8008fe2:	d9f4      	bls.n	8008fce <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e0b0      	b.n	800914a <HIDS_GetMeasurementValues+0x1fe>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8008fe8:	4b60      	ldr	r3, [pc, #384]	@ (800916c <HIDS_GetMeasurementValues+0x220>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	021b      	lsls	r3, r3, #8
 8008fee:	22af      	movs	r2, #175	@ 0xaf
 8008ff0:	4353      	muls	r3, r2
 8008ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800916c <HIDS_GetMeasurementValues+0x220>)
 8008ff4:	7852      	ldrb	r2, [r2, #1]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	0018      	movs	r0, r3
 8008ffa:	f7fa f95f 	bl	80032bc <__aeabi_i2d>
 8008ffe:	2200      	movs	r2, #0
 8009000:	4b5b      	ldr	r3, [pc, #364]	@ (8009170 <HIDS_GetMeasurementValues+0x224>)
 8009002:	f7f8 fe55 	bl	8001cb0 <__aeabi_ddiv>
 8009006:	0002      	movs	r2, r0
 8009008:	000b      	movs	r3, r1
 800900a:	0010      	movs	r0, r2
 800900c:	0019      	movs	r1, r3
 800900e:	f7fa f9ef 	bl	80033f0 <__aeabi_d2f>
 8009012:	1c03      	adds	r3, r0, #0
 8009014:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8009016:	4957      	ldr	r1, [pc, #348]	@ (8009174 <HIDS_GetMeasurementValues+0x228>)
 8009018:	6938      	ldr	r0, [r7, #16]
 800901a:	f7f8 f87d 	bl	8001118 <__aeabi_fsub>
 800901e:	1c03      	adds	r3, r0, #0
 8009020:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8009022:	4b52      	ldr	r3, [pc, #328]	@ (800916c <HIDS_GetMeasurementValues+0x220>)
 8009024:	78db      	ldrb	r3, [r3, #3]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	4a50      	ldr	r2, [pc, #320]	@ (800916c <HIDS_GetMeasurementValues+0x220>)
 800902a:	7912      	ldrb	r2, [r2, #4]
 800902c:	431a      	orrs	r2, r3
 800902e:	0013      	movs	r3, r2
 8009030:	015b      	lsls	r3, r3, #5
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	189b      	adds	r3, r3, r2
 8009038:	0018      	movs	r0, r3
 800903a:	f7fa f93f 	bl	80032bc <__aeabi_i2d>
 800903e:	2200      	movs	r2, #0
 8009040:	4b4b      	ldr	r3, [pc, #300]	@ (8009170 <HIDS_GetMeasurementValues+0x224>)
 8009042:	f7f8 fe35 	bl	8001cb0 <__aeabi_ddiv>
 8009046:	0002      	movs	r2, r0
 8009048:	000b      	movs	r3, r1
 800904a:	0010      	movs	r0, r2
 800904c:	0019      	movs	r1, r3
 800904e:	f7fa f9cf 	bl	80033f0 <__aeabi_d2f>
 8009052:	1c03      	adds	r3, r0, #0
 8009054:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8009056:	4948      	ldr	r1, [pc, #288]	@ (8009178 <HIDS_GetMeasurementValues+0x22c>)
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7f8 f85d 	bl	8001118 <__aeabi_fsub>
 800905e:	1c03      	adds	r3, r0, #0
 8009060:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8009062:	4b3f      	ldr	r3, [pc, #252]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	429a      	cmp	r2, r3
 800906a:	d910      	bls.n	800908e <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 800906c:	4b3c      	ldr	r3, [pc, #240]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	4b42      	ldr	r3, [pc, #264]	@ (800917c <HIDS_GetMeasurementValues+0x230>)
 8009072:	0092      	lsls	r2, r2, #2
 8009074:	6939      	ldr	r1, [r7, #16]
 8009076:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8009078:	4b39      	ldr	r3, [pc, #228]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	4b40      	ldr	r3, [pc, #256]	@ (8009180 <HIDS_GetMeasurementValues+0x234>)
 800907e:	0092      	lsls	r2, r2, #2
 8009080:	68f9      	ldr	r1, [r7, #12]
 8009082:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8009084:	4b36      	ldr	r3, [pc, #216]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	4b35      	ldr	r3, [pc, #212]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 800908c:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 800908e:	4b34      	ldr	r3, [pc, #208]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	429a      	cmp	r2, r3
 8009096:	d855      	bhi.n	8009144 <HIDS_GetMeasurementValues+0x1f8>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8009098:	2300      	movs	r3, #0
 800909a:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 800909c:	2300      	movs	r3, #0
 800909e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < measurements; i++) {
 80090a0:	231b      	movs	r3, #27
 80090a2:	18fb      	adds	r3, r7, r3
 80090a4:	2200      	movs	r2, #0
 80090a6:	701a      	strb	r2, [r3, #0]
 80090a8:	e01b      	b.n	80090e2 <HIDS_GetMeasurementValues+0x196>
        sumTemperature += temperatures[i];
 80090aa:	241b      	movs	r4, #27
 80090ac:	193b      	adds	r3, r7, r4
 80090ae:	781a      	ldrb	r2, [r3, #0]
 80090b0:	4b32      	ldr	r3, [pc, #200]	@ (800917c <HIDS_GetMeasurementValues+0x230>)
 80090b2:	0092      	lsls	r2, r2, #2
 80090b4:	58d3      	ldr	r3, [r2, r3]
 80090b6:	1c19      	adds	r1, r3, #0
 80090b8:	6a38      	ldr	r0, [r7, #32]
 80090ba:	f7f7 fb7f 	bl	80007bc <__aeabi_fadd>
 80090be:	1c03      	adds	r3, r0, #0
 80090c0:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 80090c2:	193b      	adds	r3, r7, r4
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	4b2e      	ldr	r3, [pc, #184]	@ (8009180 <HIDS_GetMeasurementValues+0x234>)
 80090c8:	0092      	lsls	r2, r2, #2
 80090ca:	58d3      	ldr	r3, [r2, r3]
 80090cc:	1c19      	adds	r1, r3, #0
 80090ce:	69f8      	ldr	r0, [r7, #28]
 80090d0:	f7f7 fb74 	bl	80007bc <__aeabi_fadd>
 80090d4:	1c03      	adds	r3, r0, #0
 80090d6:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < measurements; i++) {
 80090d8:	193b      	adds	r3, r7, r4
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	193b      	adds	r3, r7, r4
 80090de:	3201      	adds	r2, #1
 80090e0:	701a      	strb	r2, [r3, #0]
 80090e2:	231b      	movs	r3, #27
 80090e4:	18fb      	adds	r3, r7, r3
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d3dc      	bcc.n	80090aa <HIDS_GetMeasurementValues+0x15e>
    }

    *temperature = sumTemperature / measurements;
 80090f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	0018      	movs	r0, r3
 80090f6:	f7f8 fa35 	bl	8001564 <__aeabi_ui2f>
 80090fa:	1c03      	adds	r3, r0, #0
 80090fc:	1c19      	adds	r1, r3, #0
 80090fe:	6a38      	ldr	r0, [r7, #32]
 8009100:	f7f7 fce6 	bl	8000ad0 <__aeabi_fdiv>
 8009104:	1c03      	adds	r3, r0, #0
 8009106:	1c1a      	adds	r2, r3, #0
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 800910c:	4b14      	ldr	r3, [pc, #80]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	0018      	movs	r0, r3
 8009112:	f7f8 fa27 	bl	8001564 <__aeabi_ui2f>
 8009116:	1c03      	adds	r3, r0, #0
 8009118:	1c19      	adds	r1, r3, #0
 800911a:	69f8      	ldr	r0, [r7, #28]
 800911c:	f7f7 fcd8 	bl	8000ad0 <__aeabi_fdiv>
 8009120:	1c03      	adds	r3, r0, #0
 8009122:	1c1a      	adds	r2, r3, #0
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	0011      	movs	r1, r2
 800912e:	0018      	movs	r0, r3
 8009130:	f7fe ffcc 	bl	80080cc <SGP_GetHT>

    measurements = 0;
 8009134:	4b0a      	ldr	r3, [pc, #40]	@ (8009160 <HIDS_GetMeasurementValues+0x214>)
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 800913a:	4b06      	ldr	r3, [pc, #24]	@ (8009154 <HIDS_GetMeasurementValues+0x208>)
 800913c:	2201      	movs	r2, #1
 800913e:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 8009140:	2301      	movs	r3, #1
 8009142:	e002      	b.n	800914a <HIDS_GetMeasurementValues+0x1fe>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8009144:	f7ff fe26 	bl	8008d94 <HIDS_StartMeasurement>
	return false;
 8009148:	2300      	movs	r3, #0
}
 800914a:	0018      	movs	r0, r3
 800914c:	46bd      	mov	sp, r7
 800914e:	b00b      	add	sp, #44	@ 0x2c
 8009150:	bd90      	pop	{r4, r7, pc}
 8009152:	46c0      	nop			@ (mov r8, r8)
 8009154:	200028ca 	.word	0x200028ca
 8009158:	20000150 	.word	0x20000150
 800915c:	2000014c 	.word	0x2000014c
 8009160:	200028cc 	.word	0x200028cc
 8009164:	0801a1b8 	.word	0x0801a1b8
 8009168:	0801a1e4 	.word	0x0801a1e4
 800916c:	200028c4 	.word	0x200028c4
 8009170:	40efffe0 	.word	0x40efffe0
 8009174:	42340000 	.word	0x42340000
 8009178:	40c00000 	.word	0x40c00000
 800917c:	200028d0 	.word	0x200028d0
 8009180:	20002cd0 	.word	0x20002cd0

08009184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009184:	480d      	ldr	r0, [pc, #52]	@ (80091bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009186:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009188:	f7ff f94e 	bl	8008428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800918c:	480c      	ldr	r0, [pc, #48]	@ (80091c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800918e:	490d      	ldr	r1, [pc, #52]	@ (80091c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009190:	4a0d      	ldr	r2, [pc, #52]	@ (80091c8 <LoopForever+0xe>)
  movs r3, #0
 8009192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009194:	e002      	b.n	800919c <LoopCopyDataInit>

08009196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800919a:	3304      	adds	r3, #4

0800919c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800919c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800919e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091a0:	d3f9      	bcc.n	8009196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091a2:	4a0a      	ldr	r2, [pc, #40]	@ (80091cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80091a4:	4c0a      	ldr	r4, [pc, #40]	@ (80091d0 <LoopForever+0x16>)
  movs r3, #0
 80091a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091a8:	e001      	b.n	80091ae <LoopFillZerobss>

080091aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091ac:	3204      	adds	r2, #4

080091ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091b0:	d3fb      	bcc.n	80091aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80091b2:	f00d fca5 	bl	8016b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80091b6:	f7fc fb8f 	bl	80058d8 <main>

080091ba <LoopForever>:

LoopForever:
    b LoopForever
 80091ba:	e7fe      	b.n	80091ba <LoopForever>
   ldr   r0, =_estack
 80091bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80091c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091c4:	200004b0 	.word	0x200004b0
  ldr r2, =_sidata
 80091c8:	0801a880 	.word	0x0801a880
  ldr r2, =_sbss
 80091cc:	200004b0 	.word	0x200004b0
  ldr r4, =_ebss
 80091d0:	200043fc 	.word	0x200043fc

080091d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80091d4:	e7fe      	b.n	80091d4 <ADC1_COMP_IRQHandler>
	...

080091d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80091de:	1dfb      	adds	r3, r7, #7
 80091e0:	2200      	movs	r2, #0
 80091e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80091e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009214 <HAL_Init+0x3c>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009214 <HAL_Init+0x3c>)
 80091ea:	2140      	movs	r1, #64	@ 0x40
 80091ec:	430a      	orrs	r2, r1
 80091ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80091f0:	2003      	movs	r0, #3
 80091f2:	f000 f811 	bl	8009218 <HAL_InitTick>
 80091f6:	1e03      	subs	r3, r0, #0
 80091f8:	d003      	beq.n	8009202 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80091fa:	1dfb      	adds	r3, r7, #7
 80091fc:	2201      	movs	r2, #1
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	e001      	b.n	8009206 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009202:	f7fe ffe7 	bl	80081d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009206:	1dfb      	adds	r3, r7, #7
 8009208:	781b      	ldrb	r3, [r3, #0]
}
 800920a:	0018      	movs	r0, r3
 800920c:	46bd      	mov	sp, r7
 800920e:	b002      	add	sp, #8
 8009210:	bd80      	pop	{r7, pc}
 8009212:	46c0      	nop			@ (mov r8, r8)
 8009214:	40022000 	.word	0x40022000

08009218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009220:	4b14      	ldr	r3, [pc, #80]	@ (8009274 <HAL_InitTick+0x5c>)
 8009222:	681c      	ldr	r4, [r3, #0]
 8009224:	4b14      	ldr	r3, [pc, #80]	@ (8009278 <HAL_InitTick+0x60>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	0019      	movs	r1, r3
 800922a:	23fa      	movs	r3, #250	@ 0xfa
 800922c:	0098      	lsls	r0, r3, #2
 800922e:	f7f6 ff87 	bl	8000140 <__udivsi3>
 8009232:	0003      	movs	r3, r0
 8009234:	0019      	movs	r1, r3
 8009236:	0020      	movs	r0, r4
 8009238:	f7f6 ff82 	bl	8000140 <__udivsi3>
 800923c:	0003      	movs	r3, r0
 800923e:	0018      	movs	r0, r3
 8009240:	f000 fb67 	bl	8009912 <HAL_SYSTICK_Config>
 8009244:	1e03      	subs	r3, r0, #0
 8009246:	d001      	beq.n	800924c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e00f      	b.n	800926c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b03      	cmp	r3, #3
 8009250:	d80b      	bhi.n	800926a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	2301      	movs	r3, #1
 8009256:	425b      	negs	r3, r3
 8009258:	2200      	movs	r2, #0
 800925a:	0018      	movs	r0, r3
 800925c:	f000 fb34 	bl	80098c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009260:	4b06      	ldr	r3, [pc, #24]	@ (800927c <HAL_InitTick+0x64>)
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	e000      	b.n	800926c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
}
 800926c:	0018      	movs	r0, r3
 800926e:	46bd      	mov	sp, r7
 8009270:	b003      	add	sp, #12
 8009272:	bd90      	pop	{r4, r7, pc}
 8009274:	20000140 	.word	0x20000140
 8009278:	20000158 	.word	0x20000158
 800927c:	20000154 	.word	0x20000154

08009280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009284:	4b05      	ldr	r3, [pc, #20]	@ (800929c <HAL_IncTick+0x1c>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	001a      	movs	r2, r3
 800928a:	4b05      	ldr	r3, [pc, #20]	@ (80092a0 <HAL_IncTick+0x20>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	18d2      	adds	r2, r2, r3
 8009290:	4b03      	ldr	r3, [pc, #12]	@ (80092a0 <HAL_IncTick+0x20>)
 8009292:	601a      	str	r2, [r3, #0]
}
 8009294:	46c0      	nop			@ (mov r8, r8)
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	46c0      	nop			@ (mov r8, r8)
 800929c:	20000158 	.word	0x20000158
 80092a0:	200030d0 	.word	0x200030d0

080092a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	af00      	add	r7, sp, #0
  return uwTick;
 80092a8:	4b02      	ldr	r3, [pc, #8]	@ (80092b4 <HAL_GetTick+0x10>)
 80092aa:	681b      	ldr	r3, [r3, #0]
}
 80092ac:	0018      	movs	r0, r3
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	46c0      	nop			@ (mov r8, r8)
 80092b4:	200030d0 	.word	0x200030d0

080092b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092c0:	f7ff fff0 	bl	80092a4 <HAL_GetTick>
 80092c4:	0003      	movs	r3, r0
 80092c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3301      	adds	r3, #1
 80092d0:	d005      	beq.n	80092de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80092d2:	4b0a      	ldr	r3, [pc, #40]	@ (80092fc <HAL_Delay+0x44>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	001a      	movs	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	189b      	adds	r3, r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80092de:	46c0      	nop			@ (mov r8, r8)
 80092e0:	f7ff ffe0 	bl	80092a4 <HAL_GetTick>
 80092e4:	0002      	movs	r2, r0
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d8f7      	bhi.n	80092e0 <HAL_Delay+0x28>
  {
  }
}
 80092f0:	46c0      	nop			@ (mov r8, r8)
 80092f2:	46c0      	nop			@ (mov r8, r8)
 80092f4:	46bd      	mov	sp, r7
 80092f6:	b004      	add	sp, #16
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	46c0      	nop			@ (mov r8, r8)
 80092fc:	20000158 	.word	0x20000158

08009300 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8009304:	4b02      	ldr	r3, [pc, #8]	@ (8009310 <HAL_GetUIDw0+0x10>)
 8009306:	681b      	ldr	r3, [r3, #0]
}
 8009308:	0018      	movs	r0, r3
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	46c0      	nop			@ (mov r8, r8)
 8009310:	1ff80050 	.word	0x1ff80050

08009314 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8009318:	4b02      	ldr	r3, [pc, #8]	@ (8009324 <HAL_GetUIDw1+0x10>)
 800931a:	681b      	ldr	r3, [r3, #0]
}
 800931c:	0018      	movs	r0, r3
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	46c0      	nop			@ (mov r8, r8)
 8009324:	1ff80054 	.word	0x1ff80054

08009328 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800932c:	4b02      	ldr	r3, [pc, #8]	@ (8009338 <HAL_GetUIDw2+0x10>)
 800932e:	681b      	ldr	r3, [r3, #0]
}
 8009330:	0018      	movs	r0, r3
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	46c0      	nop			@ (mov r8, r8)
 8009338:	1ff80064 	.word	0x1ff80064

0800933c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e159      	b.n	8009602 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10a      	bne.n	800936c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2250      	movs	r2, #80	@ 0x50
 8009360:	2100      	movs	r1, #0
 8009362:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	0018      	movs	r0, r3
 8009368:	f7fb fdcc 	bl	8004f04 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009370:	2210      	movs	r2, #16
 8009372:	4013      	ands	r3, r2
 8009374:	2b10      	cmp	r3, #16
 8009376:	d005      	beq.n	8009384 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	2204      	movs	r2, #4
 8009380:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009382:	d00b      	beq.n	800939c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009388:	2210      	movs	r2, #16
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2250      	movs	r2, #80	@ 0x50
 8009394:	2100      	movs	r1, #0
 8009396:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e132      	b.n	8009602 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a0:	4a9a      	ldr	r2, [pc, #616]	@ (800960c <HAL_ADC_Init+0x2d0>)
 80093a2:	4013      	ands	r3, r2
 80093a4:	2202      	movs	r2, #2
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2203      	movs	r2, #3
 80093b4:	4013      	ands	r3, r2
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d108      	bne.n	80093cc <HAL_ADC_Init+0x90>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2201      	movs	r2, #1
 80093c2:	4013      	ands	r3, r2
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_ADC_Init+0x90>
 80093c8:	2301      	movs	r3, #1
 80093ca:	e000      	b.n	80093ce <HAL_ADC_Init+0x92>
 80093cc:	2300      	movs	r3, #0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d149      	bne.n	8009466 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	23c0      	movs	r3, #192	@ 0xc0
 80093d8:	061b      	lsls	r3, r3, #24
 80093da:	429a      	cmp	r2, r3
 80093dc:	d00b      	beq.n	80093f6 <HAL_ADC_Init+0xba>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	2380      	movs	r3, #128	@ 0x80
 80093e4:	05db      	lsls	r3, r3, #23
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d005      	beq.n	80093f6 <HAL_ADC_Init+0xba>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	2380      	movs	r3, #128	@ 0x80
 80093f0:	061b      	lsls	r3, r3, #24
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d111      	bne.n	800941a <HAL_ADC_Init+0xde>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	691a      	ldr	r2, [r3, #16]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	0092      	lsls	r2, r2, #2
 8009402:	0892      	lsrs	r2, r2, #2
 8009404:	611a      	str	r2, [r3, #16]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6919      	ldr	r1, [r3, #16]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	611a      	str	r2, [r3, #16]
 8009418:	e014      	b.n	8009444 <HAL_ADC_Init+0x108>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	691a      	ldr	r2, [r3, #16]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	0092      	lsls	r2, r2, #2
 8009426:	0892      	lsrs	r2, r2, #2
 8009428:	611a      	str	r2, [r3, #16]
 800942a:	4b79      	ldr	r3, [pc, #484]	@ (8009610 <HAL_ADC_Init+0x2d4>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	4b78      	ldr	r3, [pc, #480]	@ (8009610 <HAL_ADC_Init+0x2d4>)
 8009430:	4978      	ldr	r1, [pc, #480]	@ (8009614 <HAL_ADC_Init+0x2d8>)
 8009432:	400a      	ands	r2, r1
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	4b76      	ldr	r3, [pc, #472]	@ (8009610 <HAL_ADC_Init+0x2d4>)
 8009438:	6819      	ldr	r1, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	4b74      	ldr	r3, [pc, #464]	@ (8009610 <HAL_ADC_Init+0x2d4>)
 8009440:	430a      	orrs	r2, r1
 8009442:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2118      	movs	r1, #24
 8009450:	438a      	bics	r2, r1
 8009452:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68d9      	ldr	r1, [r3, #12]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8009466:	4b6a      	ldr	r3, [pc, #424]	@ (8009610 <HAL_ADC_Init+0x2d4>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	4b69      	ldr	r3, [pc, #420]	@ (8009610 <HAL_ADC_Init+0x2d4>)
 800946c:	496a      	ldr	r1, [pc, #424]	@ (8009618 <HAL_ADC_Init+0x2dc>)
 800946e:	400a      	ands	r2, r1
 8009470:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8009472:	4b67      	ldr	r3, [pc, #412]	@ (8009610 <HAL_ADC_Init+0x2d4>)
 8009474:	6819      	ldr	r1, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800947a:	065a      	lsls	r2, r3, #25
 800947c:	4b64      	ldr	r3, [pc, #400]	@ (8009610 <HAL_ADC_Init+0x2d4>)
 800947e:	430a      	orrs	r2, r1
 8009480:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	2380      	movs	r3, #128	@ 0x80
 800948a:	055b      	lsls	r3, r3, #21
 800948c:	4013      	ands	r3, r2
 800948e:	d108      	bne.n	80094a2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	689a      	ldr	r2, [r3, #8]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2180      	movs	r1, #128	@ 0x80
 800949c:	0549      	lsls	r1, r1, #21
 800949e:	430a      	orrs	r2, r1
 80094a0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	495b      	ldr	r1, [pc, #364]	@ (800961c <HAL_ADC_Init+0x2e0>)
 80094ae:	400a      	ands	r2, r1
 80094b0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68d9      	ldr	r1, [r3, #12]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d101      	bne.n	80094c8 <HAL_ADC_Init+0x18c>
 80094c4:	2304      	movs	r3, #4
 80094c6:	e000      	b.n	80094ca <HAL_ADC_Init+0x18e>
 80094c8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80094ca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2020      	movs	r0, #32
 80094d0:	5c1b      	ldrb	r3, [r3, r0]
 80094d2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80094d4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	202c      	movs	r0, #44	@ 0x2c
 80094da:	5c1b      	ldrb	r3, [r3, r0]
 80094dc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80094de:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80094e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80094ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80094f4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009502:	23c2      	movs	r3, #194	@ 0xc2
 8009504:	33ff      	adds	r3, #255	@ 0xff
 8009506:	429a      	cmp	r2, r3
 8009508:	d00b      	beq.n	8009522 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68d9      	ldr	r1, [r3, #12]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009518:	431a      	orrs	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	430a      	orrs	r2, r1
 8009520:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2221      	movs	r2, #33	@ 0x21
 8009526:	5c9b      	ldrb	r3, [r3, r2]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d11a      	bne.n	8009562 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2220      	movs	r2, #32
 8009530:	5c9b      	ldrb	r3, [r3, r2]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d109      	bne.n	800954a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2180      	movs	r1, #128	@ 0x80
 8009542:	0249      	lsls	r1, r1, #9
 8009544:	430a      	orrs	r2, r1
 8009546:	60da      	str	r2, [r3, #12]
 8009548:	e00b      	b.n	8009562 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800954e:	2220      	movs	r2, #32
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800955a:	2201      	movs	r2, #1
 800955c:	431a      	orrs	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009566:	2b01      	cmp	r3, #1
 8009568:	d11f      	bne.n	80095aa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	691a      	ldr	r2, [r3, #16]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	492a      	ldr	r1, [pc, #168]	@ (8009620 <HAL_ADC_Init+0x2e4>)
 8009576:	400a      	ands	r2, r1
 8009578:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6919      	ldr	r1, [r3, #16]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009588:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800958e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691a      	ldr	r2, [r3, #16]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2101      	movs	r1, #1
 80095a4:	430a      	orrs	r2, r1
 80095a6:	611a      	str	r2, [r3, #16]
 80095a8:	e00e      	b.n	80095c8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	2201      	movs	r2, #1
 80095b2:	4013      	ands	r3, r2
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d107      	bne.n	80095c8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	691a      	ldr	r2, [r3, #16]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2101      	movs	r1, #1
 80095c4:	438a      	bics	r2, r1
 80095c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	695a      	ldr	r2, [r3, #20]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2107      	movs	r1, #7
 80095d4:	438a      	bics	r2, r1
 80095d6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6959      	ldr	r1, [r3, #20]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095f4:	2203      	movs	r2, #3
 80095f6:	4393      	bics	r3, r2
 80095f8:	2201      	movs	r2, #1
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	0018      	movs	r0, r3
 8009604:	46bd      	mov	sp, r7
 8009606:	b002      	add	sp, #8
 8009608:	bd80      	pop	{r7, pc}
 800960a:	46c0      	nop			@ (mov r8, r8)
 800960c:	fffffefd 	.word	0xfffffefd
 8009610:	40012708 	.word	0x40012708
 8009614:	ffc3ffff 	.word	0xffc3ffff
 8009618:	fdffffff 	.word	0xfdffffff
 800961c:	fffe0219 	.word	0xfffe0219
 8009620:	fffffc03 	.word	0xfffffc03

08009624 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2250      	movs	r2, #80	@ 0x50
 8009632:	5c9b      	ldrb	r3, [r3, r2]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_ADC_ConfigChannel+0x18>
 8009638:	2302      	movs	r3, #2
 800963a:	e06c      	b.n	8009716 <HAL_ADC_ConfigChannel+0xf2>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2250      	movs	r2, #80	@ 0x50
 8009640:	2101      	movs	r1, #1
 8009642:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	2204      	movs	r2, #4
 800964c:	4013      	ands	r3, r2
 800964e:	d00b      	beq.n	8009668 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009654:	2220      	movs	r2, #32
 8009656:	431a      	orrs	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2250      	movs	r2, #80	@ 0x50
 8009660:	2100      	movs	r1, #0
 8009662:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e056      	b.n	8009716 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	4a2c      	ldr	r2, [pc, #176]	@ (8009720 <HAL_ADC_ConfigChannel+0xfc>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d028      	beq.n	80096c4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	035b      	lsls	r3, r3, #13
 800967e:	0b5a      	lsrs	r2, r3, #13
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	2380      	movs	r3, #128	@ 0x80
 800968e:	02db      	lsls	r3, r3, #11
 8009690:	4013      	ands	r3, r2
 8009692:	d009      	beq.n	80096a8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8009694:	4b23      	ldr	r3, [pc, #140]	@ (8009724 <HAL_ADC_ConfigChannel+0x100>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	4b22      	ldr	r3, [pc, #136]	@ (8009724 <HAL_ADC_ConfigChannel+0x100>)
 800969a:	2180      	movs	r1, #128	@ 0x80
 800969c:	0409      	lsls	r1, r1, #16
 800969e:	430a      	orrs	r2, r1
 80096a0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80096a2:	200a      	movs	r0, #10
 80096a4:	f000 f844 	bl	8009730 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	2380      	movs	r3, #128	@ 0x80
 80096ae:	029b      	lsls	r3, r3, #10
 80096b0:	4013      	ands	r3, r2
 80096b2:	d02b      	beq.n	800970c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80096b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009724 <HAL_ADC_ConfigChannel+0x100>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009724 <HAL_ADC_ConfigChannel+0x100>)
 80096ba:	2180      	movs	r1, #128	@ 0x80
 80096bc:	03c9      	lsls	r1, r1, #15
 80096be:	430a      	orrs	r2, r1
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	e023      	b.n	800970c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	035b      	lsls	r3, r3, #13
 80096d0:	0b5b      	lsrs	r3, r3, #13
 80096d2:	43d9      	mvns	r1, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	400a      	ands	r2, r1
 80096da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	2380      	movs	r3, #128	@ 0x80
 80096e2:	02db      	lsls	r3, r3, #11
 80096e4:	4013      	ands	r3, r2
 80096e6:	d005      	beq.n	80096f4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80096e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009724 <HAL_ADC_ConfigChannel+0x100>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009724 <HAL_ADC_ConfigChannel+0x100>)
 80096ee:	490e      	ldr	r1, [pc, #56]	@ (8009728 <HAL_ADC_ConfigChannel+0x104>)
 80096f0:	400a      	ands	r2, r1
 80096f2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	2380      	movs	r3, #128	@ 0x80
 80096fa:	029b      	lsls	r3, r3, #10
 80096fc:	4013      	ands	r3, r2
 80096fe:	d005      	beq.n	800970c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8009700:	4b08      	ldr	r3, [pc, #32]	@ (8009724 <HAL_ADC_ConfigChannel+0x100>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	4b07      	ldr	r3, [pc, #28]	@ (8009724 <HAL_ADC_ConfigChannel+0x100>)
 8009706:	4909      	ldr	r1, [pc, #36]	@ (800972c <HAL_ADC_ConfigChannel+0x108>)
 8009708:	400a      	ands	r2, r1
 800970a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2250      	movs	r2, #80	@ 0x50
 8009710:	2100      	movs	r1, #0
 8009712:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	0018      	movs	r0, r3
 8009718:	46bd      	mov	sp, r7
 800971a:	b002      	add	sp, #8
 800971c:	bd80      	pop	{r7, pc}
 800971e:	46c0      	nop			@ (mov r8, r8)
 8009720:	00001001 	.word	0x00001001
 8009724:	40012708 	.word	0x40012708
 8009728:	ff7fffff 	.word	0xff7fffff
 800972c:	ffbfffff 	.word	0xffbfffff

08009730 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8009738:	4b0b      	ldr	r3, [pc, #44]	@ (8009768 <ADC_DelayMicroSecond+0x38>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	490b      	ldr	r1, [pc, #44]	@ (800976c <ADC_DelayMicroSecond+0x3c>)
 800973e:	0018      	movs	r0, r3
 8009740:	f7f6 fcfe 	bl	8000140 <__udivsi3>
 8009744:	0003      	movs	r3, r0
 8009746:	001a      	movs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4353      	muls	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800974e:	e002      	b.n	8009756 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3b01      	subs	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1f9      	bne.n	8009750 <ADC_DelayMicroSecond+0x20>
  }
}
 800975c:	46c0      	nop			@ (mov r8, r8)
 800975e:	46c0      	nop			@ (mov r8, r8)
 8009760:	46bd      	mov	sp, r7
 8009762:	b004      	add	sp, #16
 8009764:	bd80      	pop	{r7, pc}
 8009766:	46c0      	nop			@ (mov r8, r8)
 8009768:	20000140 	.word	0x20000140
 800976c:	000f4240 	.word	0x000f4240

08009770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	0002      	movs	r2, r0
 8009778:	1dfb      	adds	r3, r7, #7
 800977a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800977c:	1dfb      	adds	r3, r7, #7
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2b7f      	cmp	r3, #127	@ 0x7f
 8009782:	d809      	bhi.n	8009798 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009784:	1dfb      	adds	r3, r7, #7
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	001a      	movs	r2, r3
 800978a:	231f      	movs	r3, #31
 800978c:	401a      	ands	r2, r3
 800978e:	4b04      	ldr	r3, [pc, #16]	@ (80097a0 <__NVIC_EnableIRQ+0x30>)
 8009790:	2101      	movs	r1, #1
 8009792:	4091      	lsls	r1, r2
 8009794:	000a      	movs	r2, r1
 8009796:	601a      	str	r2, [r3, #0]
  }
}
 8009798:	46c0      	nop			@ (mov r8, r8)
 800979a:	46bd      	mov	sp, r7
 800979c:	b002      	add	sp, #8
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	e000e100 	.word	0xe000e100

080097a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80097a4:	b590      	push	{r4, r7, lr}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	0002      	movs	r2, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	1dfb      	adds	r3, r7, #7
 80097b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80097b2:	1dfb      	adds	r3, r7, #7
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80097b8:	d828      	bhi.n	800980c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097ba:	4a2f      	ldr	r2, [pc, #188]	@ (8009878 <__NVIC_SetPriority+0xd4>)
 80097bc:	1dfb      	adds	r3, r7, #7
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	b25b      	sxtb	r3, r3
 80097c2:	089b      	lsrs	r3, r3, #2
 80097c4:	33c0      	adds	r3, #192	@ 0xc0
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	589b      	ldr	r3, [r3, r2]
 80097ca:	1dfa      	adds	r2, r7, #7
 80097cc:	7812      	ldrb	r2, [r2, #0]
 80097ce:	0011      	movs	r1, r2
 80097d0:	2203      	movs	r2, #3
 80097d2:	400a      	ands	r2, r1
 80097d4:	00d2      	lsls	r2, r2, #3
 80097d6:	21ff      	movs	r1, #255	@ 0xff
 80097d8:	4091      	lsls	r1, r2
 80097da:	000a      	movs	r2, r1
 80097dc:	43d2      	mvns	r2, r2
 80097de:	401a      	ands	r2, r3
 80097e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	019b      	lsls	r3, r3, #6
 80097e6:	22ff      	movs	r2, #255	@ 0xff
 80097e8:	401a      	ands	r2, r3
 80097ea:	1dfb      	adds	r3, r7, #7
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	0018      	movs	r0, r3
 80097f0:	2303      	movs	r3, #3
 80097f2:	4003      	ands	r3, r0
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097f8:	481f      	ldr	r0, [pc, #124]	@ (8009878 <__NVIC_SetPriority+0xd4>)
 80097fa:	1dfb      	adds	r3, r7, #7
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	b25b      	sxtb	r3, r3
 8009800:	089b      	lsrs	r3, r3, #2
 8009802:	430a      	orrs	r2, r1
 8009804:	33c0      	adds	r3, #192	@ 0xc0
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800980a:	e031      	b.n	8009870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800980c:	4a1b      	ldr	r2, [pc, #108]	@ (800987c <__NVIC_SetPriority+0xd8>)
 800980e:	1dfb      	adds	r3, r7, #7
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	0019      	movs	r1, r3
 8009814:	230f      	movs	r3, #15
 8009816:	400b      	ands	r3, r1
 8009818:	3b08      	subs	r3, #8
 800981a:	089b      	lsrs	r3, r3, #2
 800981c:	3306      	adds	r3, #6
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	18d3      	adds	r3, r2, r3
 8009822:	3304      	adds	r3, #4
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1dfa      	adds	r2, r7, #7
 8009828:	7812      	ldrb	r2, [r2, #0]
 800982a:	0011      	movs	r1, r2
 800982c:	2203      	movs	r2, #3
 800982e:	400a      	ands	r2, r1
 8009830:	00d2      	lsls	r2, r2, #3
 8009832:	21ff      	movs	r1, #255	@ 0xff
 8009834:	4091      	lsls	r1, r2
 8009836:	000a      	movs	r2, r1
 8009838:	43d2      	mvns	r2, r2
 800983a:	401a      	ands	r2, r3
 800983c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	019b      	lsls	r3, r3, #6
 8009842:	22ff      	movs	r2, #255	@ 0xff
 8009844:	401a      	ands	r2, r3
 8009846:	1dfb      	adds	r3, r7, #7
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	0018      	movs	r0, r3
 800984c:	2303      	movs	r3, #3
 800984e:	4003      	ands	r3, r0
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009854:	4809      	ldr	r0, [pc, #36]	@ (800987c <__NVIC_SetPriority+0xd8>)
 8009856:	1dfb      	adds	r3, r7, #7
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	001c      	movs	r4, r3
 800985c:	230f      	movs	r3, #15
 800985e:	4023      	ands	r3, r4
 8009860:	3b08      	subs	r3, #8
 8009862:	089b      	lsrs	r3, r3, #2
 8009864:	430a      	orrs	r2, r1
 8009866:	3306      	adds	r3, #6
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	18c3      	adds	r3, r0, r3
 800986c:	3304      	adds	r3, #4
 800986e:	601a      	str	r2, [r3, #0]
}
 8009870:	46c0      	nop			@ (mov r8, r8)
 8009872:	46bd      	mov	sp, r7
 8009874:	b003      	add	sp, #12
 8009876:	bd90      	pop	{r4, r7, pc}
 8009878:	e000e100 	.word	0xe000e100
 800987c:	e000ed00 	.word	0xe000ed00

08009880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	1e5a      	subs	r2, r3, #1
 800988c:	2380      	movs	r3, #128	@ 0x80
 800988e:	045b      	lsls	r3, r3, #17
 8009890:	429a      	cmp	r2, r3
 8009892:	d301      	bcc.n	8009898 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009894:	2301      	movs	r3, #1
 8009896:	e010      	b.n	80098ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009898:	4b0a      	ldr	r3, [pc, #40]	@ (80098c4 <SysTick_Config+0x44>)
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	3a01      	subs	r2, #1
 800989e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80098a0:	2301      	movs	r3, #1
 80098a2:	425b      	negs	r3, r3
 80098a4:	2103      	movs	r1, #3
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7ff ff7c 	bl	80097a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80098ac:	4b05      	ldr	r3, [pc, #20]	@ (80098c4 <SysTick_Config+0x44>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80098b2:	4b04      	ldr	r3, [pc, #16]	@ (80098c4 <SysTick_Config+0x44>)
 80098b4:	2207      	movs	r2, #7
 80098b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	0018      	movs	r0, r3
 80098bc:	46bd      	mov	sp, r7
 80098be:	b002      	add	sp, #8
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	46c0      	nop			@ (mov r8, r8)
 80098c4:	e000e010 	.word	0xe000e010

080098c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
 80098d2:	210f      	movs	r1, #15
 80098d4:	187b      	adds	r3, r7, r1
 80098d6:	1c02      	adds	r2, r0, #0
 80098d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	187b      	adds	r3, r7, r1
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	b25b      	sxtb	r3, r3
 80098e2:	0011      	movs	r1, r2
 80098e4:	0018      	movs	r0, r3
 80098e6:	f7ff ff5d 	bl	80097a4 <__NVIC_SetPriority>
}
 80098ea:	46c0      	nop			@ (mov r8, r8)
 80098ec:	46bd      	mov	sp, r7
 80098ee:	b004      	add	sp, #16
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	0002      	movs	r2, r0
 80098fa:	1dfb      	adds	r3, r7, #7
 80098fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098fe:	1dfb      	adds	r3, r7, #7
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	b25b      	sxtb	r3, r3
 8009904:	0018      	movs	r0, r3
 8009906:	f7ff ff33 	bl	8009770 <__NVIC_EnableIRQ>
}
 800990a:	46c0      	nop			@ (mov r8, r8)
 800990c:	46bd      	mov	sp, r7
 800990e:	b002      	add	sp, #8
 8009910:	bd80      	pop	{r7, pc}

08009912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	0018      	movs	r0, r3
 800991e:	f7ff ffaf 	bl	8009880 <SysTick_Config>
 8009922:	0003      	movs	r3, r0
}
 8009924:	0018      	movs	r0, r3
 8009926:	46bd      	mov	sp, r7
 8009928:	b002      	add	sp, #8
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e061      	b.n	8009a02 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a32      	ldr	r2, [pc, #200]	@ (8009a0c <HAL_DMA_Init+0xe0>)
 8009944:	4694      	mov	ip, r2
 8009946:	4463      	add	r3, ip
 8009948:	2114      	movs	r1, #20
 800994a:	0018      	movs	r0, r3
 800994c:	f7f6 fbf8 	bl	8000140 <__udivsi3>
 8009950:	0003      	movs	r3, r0
 8009952:	009a      	lsls	r2, r3, #2
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a2d      	ldr	r2, [pc, #180]	@ (8009a10 <HAL_DMA_Init+0xe4>)
 800995c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2225      	movs	r2, #37	@ 0x25
 8009962:	2102      	movs	r1, #2
 8009964:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4a28      	ldr	r2, [pc, #160]	@ (8009a14 <HAL_DMA_Init+0xe8>)
 8009972:	4013      	ands	r3, r2
 8009974:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800997e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800998a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	2380      	movs	r3, #128	@ 0x80
 80099b2:	01db      	lsls	r3, r3, #7
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d018      	beq.n	80099ea <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80099b8:	4b17      	ldr	r3, [pc, #92]	@ (8009a18 <HAL_DMA_Init+0xec>)
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c0:	211c      	movs	r1, #28
 80099c2:	400b      	ands	r3, r1
 80099c4:	210f      	movs	r1, #15
 80099c6:	4099      	lsls	r1, r3
 80099c8:	000b      	movs	r3, r1
 80099ca:	43d9      	mvns	r1, r3
 80099cc:	4b12      	ldr	r3, [pc, #72]	@ (8009a18 <HAL_DMA_Init+0xec>)
 80099ce:	400a      	ands	r2, r1
 80099d0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80099d2:	4b11      	ldr	r3, [pc, #68]	@ (8009a18 <HAL_DMA_Init+0xec>)
 80099d4:	6819      	ldr	r1, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099de:	201c      	movs	r0, #28
 80099e0:	4003      	ands	r3, r0
 80099e2:	409a      	lsls	r2, r3
 80099e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a18 <HAL_DMA_Init+0xec>)
 80099e6:	430a      	orrs	r2, r1
 80099e8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2225      	movs	r2, #37	@ 0x25
 80099f4:	2101      	movs	r1, #1
 80099f6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2224      	movs	r2, #36	@ 0x24
 80099fc:	2100      	movs	r1, #0
 80099fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	0018      	movs	r0, r3
 8009a04:	46bd      	mov	sp, r7
 8009a06:	b004      	add	sp, #16
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	46c0      	nop			@ (mov r8, r8)
 8009a0c:	bffdfff8 	.word	0xbffdfff8
 8009a10:	40020000 	.word	0x40020000
 8009a14:	ffff800f 	.word	0xffff800f
 8009a18:	400200a8 	.word	0x400200a8

08009a1c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e04a      	b.n	8009ac4 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2101      	movs	r1, #1
 8009a3a:	438a      	bics	r2, r1
 8009a3c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a22      	ldr	r2, [pc, #136]	@ (8009acc <HAL_DMA_DeInit+0xb0>)
 8009a44:	4694      	mov	ip, r2
 8009a46:	4463      	add	r3, ip
 8009a48:	2114      	movs	r1, #20
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	f7f6 fb78 	bl	8000140 <__udivsi3>
 8009a50:	0003      	movs	r3, r0
 8009a52:	009a      	lsls	r2, r3, #2
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad0 <HAL_DMA_DeInit+0xb4>)
 8009a5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a6a:	221c      	movs	r2, #28
 8009a6c:	401a      	ands	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a72:	2101      	movs	r1, #1
 8009a74:	4091      	lsls	r1, r2
 8009a76:	000a      	movs	r2, r1
 8009a78:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a7a:	4b16      	ldr	r3, [pc, #88]	@ (8009ad4 <HAL_DMA_DeInit+0xb8>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a82:	211c      	movs	r1, #28
 8009a84:	400b      	ands	r3, r1
 8009a86:	210f      	movs	r1, #15
 8009a88:	4099      	lsls	r1, r3
 8009a8a:	000b      	movs	r3, r1
 8009a8c:	43d9      	mvns	r1, r3
 8009a8e:	4b11      	ldr	r3, [pc, #68]	@ (8009ad4 <HAL_DMA_DeInit+0xb8>)
 8009a90:	400a      	ands	r2, r1
 8009a92:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2225      	movs	r2, #37	@ 0x25
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2224      	movs	r2, #36	@ 0x24
 8009abe:	2100      	movs	r1, #0
 8009ac0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	b002      	add	sp, #8
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	bffdfff8 	.word	0xbffdfff8
 8009ad0:	40020000 	.word	0x40020000
 8009ad4:	400200a8 	.word	0x400200a8

08009ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ae6:	2317      	movs	r3, #23
 8009ae8:	18fb      	adds	r3, r7, r3
 8009aea:	2200      	movs	r2, #0
 8009aec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2224      	movs	r2, #36	@ 0x24
 8009af2:	5c9b      	ldrb	r3, [r3, r2]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d101      	bne.n	8009afc <HAL_DMA_Start_IT+0x24>
 8009af8:	2302      	movs	r3, #2
 8009afa:	e04f      	b.n	8009b9c <HAL_DMA_Start_IT+0xc4>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2224      	movs	r2, #36	@ 0x24
 8009b00:	2101      	movs	r1, #1
 8009b02:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2225      	movs	r2, #37	@ 0x25
 8009b08:	5c9b      	ldrb	r3, [r3, r2]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d13a      	bne.n	8009b86 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2225      	movs	r2, #37	@ 0x25
 8009b14:	2102      	movs	r1, #2
 8009b16:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2101      	movs	r1, #1
 8009b2a:	438a      	bics	r2, r1
 8009b2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	68b9      	ldr	r1, [r7, #8]
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 f976 	bl	8009e26 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d008      	beq.n	8009b54 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	210e      	movs	r1, #14
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	e00f      	b.n	8009b74 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2104      	movs	r1, #4
 8009b60:	438a      	bics	r2, r1
 8009b62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	210a      	movs	r1, #10
 8009b70:	430a      	orrs	r2, r1
 8009b72:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2101      	movs	r1, #1
 8009b80:	430a      	orrs	r2, r1
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	e007      	b.n	8009b96 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2224      	movs	r2, #36	@ 0x24
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009b8e:	2317      	movs	r3, #23
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	2202      	movs	r2, #2
 8009b94:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009b96:	2317      	movs	r3, #23
 8009b98:	18fb      	adds	r3, r7, r3
 8009b9a:	781b      	ldrb	r3, [r3, #0]
}
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	b006      	add	sp, #24
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bac:	230f      	movs	r3, #15
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2225      	movs	r2, #37	@ 0x25
 8009bb8:	5c9b      	ldrb	r3, [r3, r2]
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d008      	beq.n	8009bd2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2204      	movs	r2, #4
 8009bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2224      	movs	r2, #36	@ 0x24
 8009bca:	2100      	movs	r1, #0
 8009bcc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e024      	b.n	8009c1c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	210e      	movs	r1, #14
 8009bde:	438a      	bics	r2, r1
 8009be0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2101      	movs	r1, #1
 8009bee:	438a      	bics	r2, r1
 8009bf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf6:	221c      	movs	r2, #28
 8009bf8:	401a      	ands	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bfe:	2101      	movs	r1, #1
 8009c00:	4091      	lsls	r1, r2
 8009c02:	000a      	movs	r2, r1
 8009c04:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2225      	movs	r2, #37	@ 0x25
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2224      	movs	r2, #36	@ 0x24
 8009c12:	2100      	movs	r1, #0
 8009c14:	5499      	strb	r1, [r3, r2]

    return status;
 8009c16:	230f      	movs	r3, #15
 8009c18:	18fb      	adds	r3, r7, r3
 8009c1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	b004      	add	sp, #16
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c2c:	210f      	movs	r1, #15
 8009c2e:	187b      	adds	r3, r7, r1
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2225      	movs	r2, #37	@ 0x25
 8009c38:	5c9b      	ldrb	r3, [r3, r2]
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d006      	beq.n	8009c4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2204      	movs	r2, #4
 8009c44:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009c46:	187b      	adds	r3, r7, r1
 8009c48:	2201      	movs	r2, #1
 8009c4a:	701a      	strb	r2, [r3, #0]
 8009c4c:	e02a      	b.n	8009ca4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	210e      	movs	r1, #14
 8009c5a:	438a      	bics	r2, r1
 8009c5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2101      	movs	r1, #1
 8009c6a:	438a      	bics	r2, r1
 8009c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c72:	221c      	movs	r2, #28
 8009c74:	401a      	ands	r2, r3
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	4091      	lsls	r1, r2
 8009c7e:	000a      	movs	r2, r1
 8009c80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2225      	movs	r2, #37	@ 0x25
 8009c86:	2101      	movs	r1, #1
 8009c88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2224      	movs	r2, #36	@ 0x24
 8009c8e:	2100      	movs	r1, #0
 8009c90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	0010      	movs	r0, r2
 8009ca2:	4798      	blx	r3
    }
  }
  return status;
 8009ca4:	230f      	movs	r3, #15
 8009ca6:	18fb      	adds	r3, r7, r3
 8009ca8:	781b      	ldrb	r3, [r3, #0]
}
 8009caa:	0018      	movs	r0, r3
 8009cac:	46bd      	mov	sp, r7
 8009cae:	b004      	add	sp, #16
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cce:	221c      	movs	r2, #28
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	409a      	lsls	r2, r3
 8009cd6:	0013      	movs	r3, r2
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	4013      	ands	r3, r2
 8009cdc:	d026      	beq.n	8009d2c <HAL_DMA_IRQHandler+0x7a>
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2204      	movs	r2, #4
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	d022      	beq.n	8009d2c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2220      	movs	r2, #32
 8009cee:	4013      	ands	r3, r2
 8009cf0:	d107      	bne.n	8009d02 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2104      	movs	r1, #4
 8009cfe:	438a      	bics	r2, r1
 8009d00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d06:	221c      	movs	r2, #28
 8009d08:	401a      	ands	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0e:	2104      	movs	r1, #4
 8009d10:	4091      	lsls	r1, r2
 8009d12:	000a      	movs	r2, r1
 8009d14:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d100      	bne.n	8009d20 <HAL_DMA_IRQHandler+0x6e>
 8009d1e:	e071      	b.n	8009e04 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	0010      	movs	r0, r2
 8009d28:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8009d2a:	e06b      	b.n	8009e04 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d30:	221c      	movs	r2, #28
 8009d32:	4013      	ands	r3, r2
 8009d34:	2202      	movs	r2, #2
 8009d36:	409a      	lsls	r2, r3
 8009d38:	0013      	movs	r3, r2
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	d02d      	beq.n	8009d9c <HAL_DMA_IRQHandler+0xea>
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2202      	movs	r2, #2
 8009d44:	4013      	ands	r3, r2
 8009d46:	d029      	beq.n	8009d9c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2220      	movs	r2, #32
 8009d50:	4013      	ands	r3, r2
 8009d52:	d10b      	bne.n	8009d6c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	210a      	movs	r1, #10
 8009d60:	438a      	bics	r2, r1
 8009d62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2225      	movs	r2, #37	@ 0x25
 8009d68:	2101      	movs	r1, #1
 8009d6a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d70:	221c      	movs	r2, #28
 8009d72:	401a      	ands	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d78:	2102      	movs	r1, #2
 8009d7a:	4091      	lsls	r1, r2
 8009d7c:	000a      	movs	r2, r1
 8009d7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2224      	movs	r2, #36	@ 0x24
 8009d84:	2100      	movs	r1, #0
 8009d86:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d039      	beq.n	8009e04 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	0010      	movs	r0, r2
 8009d98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009d9a:	e033      	b.n	8009e04 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009da0:	221c      	movs	r2, #28
 8009da2:	4013      	ands	r3, r2
 8009da4:	2208      	movs	r2, #8
 8009da6:	409a      	lsls	r2, r3
 8009da8:	0013      	movs	r3, r2
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4013      	ands	r3, r2
 8009dae:	d02a      	beq.n	8009e06 <HAL_DMA_IRQHandler+0x154>
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	2208      	movs	r2, #8
 8009db4:	4013      	ands	r3, r2
 8009db6:	d026      	beq.n	8009e06 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	210e      	movs	r1, #14
 8009dc4:	438a      	bics	r2, r1
 8009dc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dcc:	221c      	movs	r2, #28
 8009dce:	401a      	ands	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	4091      	lsls	r1, r2
 8009dd8:	000a      	movs	r2, r1
 8009dda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2225      	movs	r2, #37	@ 0x25
 8009de6:	2101      	movs	r1, #1
 8009de8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2224      	movs	r2, #36	@ 0x24
 8009dee:	2100      	movs	r1, #0
 8009df0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d005      	beq.n	8009e06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	0010      	movs	r0, r2
 8009e02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e04:	46c0      	nop			@ (mov r8, r8)
 8009e06:	46c0      	nop			@ (mov r8, r8)
}
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	b004      	add	sp, #16
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2225      	movs	r2, #37	@ 0x25
 8009e1a:	5c9b      	ldrb	r3, [r3, r2]
 8009e1c:	b2db      	uxtb	r3, r3
}
 8009e1e:	0018      	movs	r0, r3
 8009e20:	46bd      	mov	sp, r7
 8009e22:	b002      	add	sp, #8
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e38:	221c      	movs	r2, #28
 8009e3a:	401a      	ands	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e40:	2101      	movs	r1, #1
 8009e42:	4091      	lsls	r1, r2
 8009e44:	000a      	movs	r2, r1
 8009e46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	2b10      	cmp	r3, #16
 8009e56:	d108      	bne.n	8009e6a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009e68:	e007      	b.n	8009e7a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	60da      	str	r2, [r3, #12]
}
 8009e7a:	46c0      	nop			@ (mov r8, r8)
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	b004      	add	sp, #16
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009e96:	2300      	movs	r3, #0
 8009e98:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009e9a:	e155      	b.n	800a148 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	4091      	lsls	r1, r2
 8009ea6:	000a      	movs	r2, r1
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d100      	bne.n	8009eb4 <HAL_GPIO_Init+0x30>
 8009eb2:	e146      	b.n	800a142 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2203      	movs	r2, #3
 8009eba:	4013      	ands	r3, r2
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d005      	beq.n	8009ecc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d130      	bne.n	8009f2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	2203      	movs	r2, #3
 8009ed8:	409a      	lsls	r2, r3
 8009eda:	0013      	movs	r3, r2
 8009edc:	43da      	mvns	r2, r3
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	409a      	lsls	r2, r3
 8009eee:	0013      	movs	r3, r2
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009f02:	2201      	movs	r2, #1
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	409a      	lsls	r2, r3
 8009f08:	0013      	movs	r3, r2
 8009f0a:	43da      	mvns	r2, r3
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	091b      	lsrs	r3, r3, #4
 8009f18:	2201      	movs	r2, #1
 8009f1a:	401a      	ands	r2, r3
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	409a      	lsls	r2, r3
 8009f20:	0013      	movs	r3, r2
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	2203      	movs	r2, #3
 8009f34:	4013      	ands	r3, r2
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d017      	beq.n	8009f6a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	005b      	lsls	r3, r3, #1
 8009f44:	2203      	movs	r2, #3
 8009f46:	409a      	lsls	r2, r3
 8009f48:	0013      	movs	r3, r2
 8009f4a:	43da      	mvns	r2, r3
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	4013      	ands	r3, r2
 8009f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	689a      	ldr	r2, [r3, #8]
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	409a      	lsls	r2, r3
 8009f5c:	0013      	movs	r3, r2
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2203      	movs	r2, #3
 8009f70:	4013      	ands	r3, r2
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d123      	bne.n	8009fbe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	08da      	lsrs	r2, r3, #3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3208      	adds	r2, #8
 8009f7e:	0092      	lsls	r2, r2, #2
 8009f80:	58d3      	ldr	r3, [r2, r3]
 8009f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2207      	movs	r2, #7
 8009f88:	4013      	ands	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	220f      	movs	r2, #15
 8009f8e:	409a      	lsls	r2, r3
 8009f90:	0013      	movs	r3, r2
 8009f92:	43da      	mvns	r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	4013      	ands	r3, r2
 8009f98:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2107      	movs	r1, #7
 8009fa2:	400b      	ands	r3, r1
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	409a      	lsls	r2, r3
 8009fa8:	0013      	movs	r3, r2
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	08da      	lsrs	r2, r3, #3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3208      	adds	r2, #8
 8009fb8:	0092      	lsls	r2, r2, #2
 8009fba:	6939      	ldr	r1, [r7, #16]
 8009fbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	2203      	movs	r2, #3
 8009fca:	409a      	lsls	r2, r3
 8009fcc:	0013      	movs	r3, r2
 8009fce:	43da      	mvns	r2, r3
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	2203      	movs	r2, #3
 8009fdc:	401a      	ands	r2, r3
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	409a      	lsls	r2, r3
 8009fe4:	0013      	movs	r3, r2
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	693a      	ldr	r2, [r7, #16]
 8009ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	23c0      	movs	r3, #192	@ 0xc0
 8009ff8:	029b      	lsls	r3, r3, #10
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	d100      	bne.n	800a000 <HAL_GPIO_Init+0x17c>
 8009ffe:	e0a0      	b.n	800a142 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a000:	4b57      	ldr	r3, [pc, #348]	@ (800a160 <HAL_GPIO_Init+0x2dc>)
 800a002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a004:	4b56      	ldr	r3, [pc, #344]	@ (800a160 <HAL_GPIO_Init+0x2dc>)
 800a006:	2101      	movs	r1, #1
 800a008:	430a      	orrs	r2, r1
 800a00a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800a00c:	4a55      	ldr	r2, [pc, #340]	@ (800a164 <HAL_GPIO_Init+0x2e0>)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	089b      	lsrs	r3, r3, #2
 800a012:	3302      	adds	r3, #2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	589b      	ldr	r3, [r3, r2]
 800a018:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2203      	movs	r2, #3
 800a01e:	4013      	ands	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	220f      	movs	r2, #15
 800a024:	409a      	lsls	r2, r3
 800a026:	0013      	movs	r3, r2
 800a028:	43da      	mvns	r2, r3
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	4013      	ands	r3, r2
 800a02e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	23a0      	movs	r3, #160	@ 0xa0
 800a034:	05db      	lsls	r3, r3, #23
 800a036:	429a      	cmp	r2, r3
 800a038:	d01f      	beq.n	800a07a <HAL_GPIO_Init+0x1f6>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a4a      	ldr	r2, [pc, #296]	@ (800a168 <HAL_GPIO_Init+0x2e4>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d019      	beq.n	800a076 <HAL_GPIO_Init+0x1f2>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a49      	ldr	r2, [pc, #292]	@ (800a16c <HAL_GPIO_Init+0x2e8>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d013      	beq.n	800a072 <HAL_GPIO_Init+0x1ee>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a48      	ldr	r2, [pc, #288]	@ (800a170 <HAL_GPIO_Init+0x2ec>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d00d      	beq.n	800a06e <HAL_GPIO_Init+0x1ea>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a47      	ldr	r2, [pc, #284]	@ (800a174 <HAL_GPIO_Init+0x2f0>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d007      	beq.n	800a06a <HAL_GPIO_Init+0x1e6>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a46      	ldr	r2, [pc, #280]	@ (800a178 <HAL_GPIO_Init+0x2f4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d101      	bne.n	800a066 <HAL_GPIO_Init+0x1e2>
 800a062:	2305      	movs	r3, #5
 800a064:	e00a      	b.n	800a07c <HAL_GPIO_Init+0x1f8>
 800a066:	2306      	movs	r3, #6
 800a068:	e008      	b.n	800a07c <HAL_GPIO_Init+0x1f8>
 800a06a:	2304      	movs	r3, #4
 800a06c:	e006      	b.n	800a07c <HAL_GPIO_Init+0x1f8>
 800a06e:	2303      	movs	r3, #3
 800a070:	e004      	b.n	800a07c <HAL_GPIO_Init+0x1f8>
 800a072:	2302      	movs	r3, #2
 800a074:	e002      	b.n	800a07c <HAL_GPIO_Init+0x1f8>
 800a076:	2301      	movs	r3, #1
 800a078:	e000      	b.n	800a07c <HAL_GPIO_Init+0x1f8>
 800a07a:	2300      	movs	r3, #0
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	2103      	movs	r1, #3
 800a080:	400a      	ands	r2, r1
 800a082:	0092      	lsls	r2, r2, #2
 800a084:	4093      	lsls	r3, r2
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	4313      	orrs	r3, r2
 800a08a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a08c:	4935      	ldr	r1, [pc, #212]	@ (800a164 <HAL_GPIO_Init+0x2e0>)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	089b      	lsrs	r3, r3, #2
 800a092:	3302      	adds	r3, #2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a09a:	4b38      	ldr	r3, [pc, #224]	@ (800a17c <HAL_GPIO_Init+0x2f8>)
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	43da      	mvns	r2, r3
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	2380      	movs	r3, #128	@ 0x80
 800a0b0:	035b      	lsls	r3, r3, #13
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	d003      	beq.n	800a0be <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a0be:	4b2f      	ldr	r3, [pc, #188]	@ (800a17c <HAL_GPIO_Init+0x2f8>)
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800a0c4:	4b2d      	ldr	r3, [pc, #180]	@ (800a17c <HAL_GPIO_Init+0x2f8>)
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	43da      	mvns	r2, r3
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	2380      	movs	r3, #128	@ 0x80
 800a0da:	039b      	lsls	r3, r3, #14
 800a0dc:	4013      	ands	r3, r2
 800a0de:	d003      	beq.n	800a0e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a0e8:	4b24      	ldr	r3, [pc, #144]	@ (800a17c <HAL_GPIO_Init+0x2f8>)
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800a0ee:	4b23      	ldr	r3, [pc, #140]	@ (800a17c <HAL_GPIO_Init+0x2f8>)
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	43da      	mvns	r2, r3
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	2380      	movs	r3, #128	@ 0x80
 800a104:	029b      	lsls	r3, r3, #10
 800a106:	4013      	ands	r3, r2
 800a108:	d003      	beq.n	800a112 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a112:	4b1a      	ldr	r3, [pc, #104]	@ (800a17c <HAL_GPIO_Init+0x2f8>)
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a118:	4b18      	ldr	r3, [pc, #96]	@ (800a17c <HAL_GPIO_Init+0x2f8>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	43da      	mvns	r2, r3
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	4013      	ands	r3, r2
 800a126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	2380      	movs	r3, #128	@ 0x80
 800a12e:	025b      	lsls	r3, r3, #9
 800a130:	4013      	ands	r3, r2
 800a132:	d003      	beq.n	800a13c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a13c:	4b0f      	ldr	r3, [pc, #60]	@ (800a17c <HAL_GPIO_Init+0x2f8>)
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	3301      	adds	r3, #1
 800a146:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	40da      	lsrs	r2, r3
 800a150:	1e13      	subs	r3, r2, #0
 800a152:	d000      	beq.n	800a156 <HAL_GPIO_Init+0x2d2>
 800a154:	e6a2      	b.n	8009e9c <HAL_GPIO_Init+0x18>
  }
}
 800a156:	46c0      	nop			@ (mov r8, r8)
 800a158:	46c0      	nop			@ (mov r8, r8)
 800a15a:	46bd      	mov	sp, r7
 800a15c:	b006      	add	sp, #24
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	40021000 	.word	0x40021000
 800a164:	40010000 	.word	0x40010000
 800a168:	50000400 	.word	0x50000400
 800a16c:	50000800 	.word	0x50000800
 800a170:	50000c00 	.word	0x50000c00
 800a174:	50001000 	.word	0x50001000
 800a178:	50001c00 	.word	0x50001c00
 800a17c:	40010400 	.word	0x40010400

0800a180 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a18e:	2300      	movs	r3, #0
 800a190:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800a196:	e0bc      	b.n	800a312 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800a198:	2201      	movs	r2, #1
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	409a      	lsls	r2, r3
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d100      	bne.n	800a1ac <HAL_GPIO_DeInit+0x2c>
 800a1aa:	e0af      	b.n	800a30c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a1ac:	4a5e      	ldr	r2, [pc, #376]	@ (800a328 <HAL_GPIO_DeInit+0x1a8>)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	089b      	lsrs	r3, r3, #2
 800a1b2:	3302      	adds	r3, #2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	589b      	ldr	r3, [r3, r2]
 800a1b8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2203      	movs	r2, #3
 800a1be:	4013      	ands	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	220f      	movs	r2, #15
 800a1c4:	409a      	lsls	r2, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	23a0      	movs	r3, #160	@ 0xa0
 800a1d0:	05db      	lsls	r3, r3, #23
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d01f      	beq.n	800a216 <HAL_GPIO_DeInit+0x96>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a54      	ldr	r2, [pc, #336]	@ (800a32c <HAL_GPIO_DeInit+0x1ac>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d019      	beq.n	800a212 <HAL_GPIO_DeInit+0x92>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a53      	ldr	r2, [pc, #332]	@ (800a330 <HAL_GPIO_DeInit+0x1b0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d013      	beq.n	800a20e <HAL_GPIO_DeInit+0x8e>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a52      	ldr	r2, [pc, #328]	@ (800a334 <HAL_GPIO_DeInit+0x1b4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00d      	beq.n	800a20a <HAL_GPIO_DeInit+0x8a>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a51      	ldr	r2, [pc, #324]	@ (800a338 <HAL_GPIO_DeInit+0x1b8>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d007      	beq.n	800a206 <HAL_GPIO_DeInit+0x86>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a50      	ldr	r2, [pc, #320]	@ (800a33c <HAL_GPIO_DeInit+0x1bc>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d101      	bne.n	800a202 <HAL_GPIO_DeInit+0x82>
 800a1fe:	2305      	movs	r3, #5
 800a200:	e00a      	b.n	800a218 <HAL_GPIO_DeInit+0x98>
 800a202:	2306      	movs	r3, #6
 800a204:	e008      	b.n	800a218 <HAL_GPIO_DeInit+0x98>
 800a206:	2304      	movs	r3, #4
 800a208:	e006      	b.n	800a218 <HAL_GPIO_DeInit+0x98>
 800a20a:	2303      	movs	r3, #3
 800a20c:	e004      	b.n	800a218 <HAL_GPIO_DeInit+0x98>
 800a20e:	2302      	movs	r3, #2
 800a210:	e002      	b.n	800a218 <HAL_GPIO_DeInit+0x98>
 800a212:	2301      	movs	r3, #1
 800a214:	e000      	b.n	800a218 <HAL_GPIO_DeInit+0x98>
 800a216:	2300      	movs	r3, #0
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	2103      	movs	r1, #3
 800a21c:	400a      	ands	r2, r1
 800a21e:	0092      	lsls	r2, r2, #2
 800a220:	4093      	lsls	r3, r2
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	429a      	cmp	r2, r3
 800a226:	d132      	bne.n	800a28e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a228:	4b45      	ldr	r3, [pc, #276]	@ (800a340 <HAL_GPIO_DeInit+0x1c0>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	43d9      	mvns	r1, r3
 800a230:	4b43      	ldr	r3, [pc, #268]	@ (800a340 <HAL_GPIO_DeInit+0x1c0>)
 800a232:	400a      	ands	r2, r1
 800a234:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a236:	4b42      	ldr	r3, [pc, #264]	@ (800a340 <HAL_GPIO_DeInit+0x1c0>)
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	43d9      	mvns	r1, r3
 800a23e:	4b40      	ldr	r3, [pc, #256]	@ (800a340 <HAL_GPIO_DeInit+0x1c0>)
 800a240:	400a      	ands	r2, r1
 800a242:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a244:	4b3e      	ldr	r3, [pc, #248]	@ (800a340 <HAL_GPIO_DeInit+0x1c0>)
 800a246:	68da      	ldr	r2, [r3, #12]
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	43d9      	mvns	r1, r3
 800a24c:	4b3c      	ldr	r3, [pc, #240]	@ (800a340 <HAL_GPIO_DeInit+0x1c0>)
 800a24e:	400a      	ands	r2, r1
 800a250:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a252:	4b3b      	ldr	r3, [pc, #236]	@ (800a340 <HAL_GPIO_DeInit+0x1c0>)
 800a254:	689a      	ldr	r2, [r3, #8]
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	43d9      	mvns	r1, r3
 800a25a:	4b39      	ldr	r3, [pc, #228]	@ (800a340 <HAL_GPIO_DeInit+0x1c0>)
 800a25c:	400a      	ands	r2, r1
 800a25e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	2203      	movs	r2, #3
 800a264:	4013      	ands	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	220f      	movs	r2, #15
 800a26a:	409a      	lsls	r2, r3
 800a26c:	0013      	movs	r3, r2
 800a26e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a270:	4a2d      	ldr	r2, [pc, #180]	@ (800a328 <HAL_GPIO_DeInit+0x1a8>)
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	089b      	lsrs	r3, r3, #2
 800a276:	3302      	adds	r3, #2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	589a      	ldr	r2, [r3, r2]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	43d9      	mvns	r1, r3
 800a280:	4829      	ldr	r0, [pc, #164]	@ (800a328 <HAL_GPIO_DeInit+0x1a8>)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	089b      	lsrs	r3, r3, #2
 800a286:	400a      	ands	r2, r1
 800a288:	3302      	adds	r3, #2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	2103      	movs	r1, #3
 800a298:	4099      	lsls	r1, r3
 800a29a:	000b      	movs	r3, r1
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	08da      	lsrs	r2, r3, #3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3208      	adds	r2, #8
 800a2aa:	0092      	lsls	r2, r2, #2
 800a2ac:	58d3      	ldr	r3, [r2, r3]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	2107      	movs	r1, #7
 800a2b2:	400a      	ands	r2, r1
 800a2b4:	0092      	lsls	r2, r2, #2
 800a2b6:	210f      	movs	r1, #15
 800a2b8:	4091      	lsls	r1, r2
 800a2ba:	000a      	movs	r2, r1
 800a2bc:	43d1      	mvns	r1, r2
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	08d2      	lsrs	r2, r2, #3
 800a2c2:	4019      	ands	r1, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3208      	adds	r2, #8
 800a2c8:	0092      	lsls	r2, r2, #2
 800a2ca:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	0052      	lsls	r2, r2, #1
 800a2d4:	2103      	movs	r1, #3
 800a2d6:	4091      	lsls	r1, r2
 800a2d8:	000a      	movs	r2, r1
 800a2da:	43d2      	mvns	r2, r2
 800a2dc:	401a      	ands	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	4091      	lsls	r1, r2
 800a2ec:	000a      	movs	r2, r1
 800a2ee:	43d2      	mvns	r2, r2
 800a2f0:	401a      	ands	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	0052      	lsls	r2, r2, #1
 800a2fe:	2103      	movs	r1, #3
 800a300:	4091      	lsls	r1, r2
 800a302:	000a      	movs	r2, r1
 800a304:	43d2      	mvns	r2, r2
 800a306:	401a      	ands	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	3301      	adds	r3, #1
 800a310:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	40da      	lsrs	r2, r3
 800a318:	1e13      	subs	r3, r2, #0
 800a31a:	d000      	beq.n	800a31e <HAL_GPIO_DeInit+0x19e>
 800a31c:	e73c      	b.n	800a198 <HAL_GPIO_DeInit+0x18>
  }
}
 800a31e:	46c0      	nop			@ (mov r8, r8)
 800a320:	46c0      	nop			@ (mov r8, r8)
 800a322:	46bd      	mov	sp, r7
 800a324:	b006      	add	sp, #24
 800a326:	bd80      	pop	{r7, pc}
 800a328:	40010000 	.word	0x40010000
 800a32c:	50000400 	.word	0x50000400
 800a330:	50000800 	.word	0x50000800
 800a334:	50000c00 	.word	0x50000c00
 800a338:	50001000 	.word	0x50001000
 800a33c:	50001c00 	.word	0x50001c00
 800a340:	40010400 	.word	0x40010400

0800a344 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	0008      	movs	r0, r1
 800a34e:	0011      	movs	r1, r2
 800a350:	1cbb      	adds	r3, r7, #2
 800a352:	1c02      	adds	r2, r0, #0
 800a354:	801a      	strh	r2, [r3, #0]
 800a356:	1c7b      	adds	r3, r7, #1
 800a358:	1c0a      	adds	r2, r1, #0
 800a35a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a35c:	1c7b      	adds	r3, r7, #1
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a364:	1cbb      	adds	r3, r7, #2
 800a366:	881a      	ldrh	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800a36c:	e003      	b.n	800a376 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800a36e:	1cbb      	adds	r3, r7, #2
 800a370:	881a      	ldrh	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a376:	46c0      	nop			@ (mov r8, r8)
 800a378:	46bd      	mov	sp, r7
 800a37a:	b002      	add	sp, #8
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e082      	b.n	800a498 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2241      	movs	r2, #65	@ 0x41
 800a396:	5c9b      	ldrb	r3, [r3, r2]
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d107      	bne.n	800a3ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2240      	movs	r2, #64	@ 0x40
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f7fb f883 	bl	80054b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2241      	movs	r2, #65	@ 0x41
 800a3b2:	2124      	movs	r1, #36	@ 0x24
 800a3b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	438a      	bics	r2, r1
 800a3c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4934      	ldr	r1, [pc, #208]	@ (800a4a0 <HAL_I2C_Init+0x120>)
 800a3d0:	400a      	ands	r2, r1
 800a3d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4931      	ldr	r1, [pc, #196]	@ (800a4a4 <HAL_I2C_Init+0x124>)
 800a3e0:	400a      	ands	r2, r1
 800a3e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d108      	bne.n	800a3fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2180      	movs	r1, #128	@ 0x80
 800a3f6:	0209      	lsls	r1, r1, #8
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	609a      	str	r2, [r3, #8]
 800a3fc:	e007      	b.n	800a40e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2184      	movs	r1, #132	@ 0x84
 800a408:	0209      	lsls	r1, r1, #8
 800a40a:	430a      	orrs	r2, r1
 800a40c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	2b02      	cmp	r3, #2
 800a414:	d104      	bne.n	800a420 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2280      	movs	r2, #128	@ 0x80
 800a41c:	0112      	lsls	r2, r2, #4
 800a41e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	491f      	ldr	r1, [pc, #124]	@ (800a4a8 <HAL_I2C_Init+0x128>)
 800a42c:	430a      	orrs	r2, r1
 800a42e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	491a      	ldr	r1, [pc, #104]	@ (800a4a4 <HAL_I2C_Init+0x124>)
 800a43c:	400a      	ands	r2, r1
 800a43e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	691a      	ldr	r2, [r3, #16]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	431a      	orrs	r2, r3
 800a44a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	699b      	ldr	r3, [r3, #24]
 800a450:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	69d9      	ldr	r1, [r3, #28]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1a      	ldr	r2, [r3, #32]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2101      	movs	r1, #1
 800a476:	430a      	orrs	r2, r1
 800a478:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2241      	movs	r2, #65	@ 0x41
 800a484:	2120      	movs	r1, #32
 800a486:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2242      	movs	r2, #66	@ 0x42
 800a492:	2100      	movs	r1, #0
 800a494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	0018      	movs	r0, r3
 800a49a:	46bd      	mov	sp, r7
 800a49c:	b002      	add	sp, #8
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	f0ffffff 	.word	0xf0ffffff
 800a4a4:	ffff7fff 	.word	0xffff7fff
 800a4a8:	02008000 	.word	0x02008000

0800a4ac <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a4ac:	b5b0      	push	{r4, r5, r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	0008      	movs	r0, r1
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	0019      	movs	r1, r3
 800a4ba:	230a      	movs	r3, #10
 800a4bc:	18fb      	adds	r3, r7, r3
 800a4be:	1c02      	adds	r2, r0, #0
 800a4c0:	801a      	strh	r2, [r3, #0]
 800a4c2:	2308      	movs	r3, #8
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	1c0a      	adds	r2, r1, #0
 800a4c8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2241      	movs	r2, #65	@ 0x41
 800a4ce:	5c9b      	ldrb	r3, [r3, r2]
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b20      	cmp	r3, #32
 800a4d4:	d000      	beq.n	800a4d8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800a4d6:	e0dd      	b.n	800a694 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	699a      	ldr	r2, [r3, #24]
 800a4de:	2380      	movs	r3, #128	@ 0x80
 800a4e0:	021b      	lsls	r3, r3, #8
 800a4e2:	401a      	ands	r2, r3
 800a4e4:	2380      	movs	r3, #128	@ 0x80
 800a4e6:	021b      	lsls	r3, r3, #8
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d101      	bne.n	800a4f0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	e0d2      	b.n	800a696 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2240      	movs	r2, #64	@ 0x40
 800a4f4:	5c9b      	ldrb	r3, [r3, r2]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d101      	bne.n	800a4fe <HAL_I2C_Master_Transmit_DMA+0x52>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e0cb      	b.n	800a696 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2240      	movs	r2, #64	@ 0x40
 800a502:	2101      	movs	r1, #1
 800a504:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2241      	movs	r2, #65	@ 0x41
 800a50a:	2121      	movs	r1, #33	@ 0x21
 800a50c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2242      	movs	r2, #66	@ 0x42
 800a512:	2110      	movs	r1, #16
 800a514:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2208      	movs	r2, #8
 800a526:	18ba      	adds	r2, r7, r2
 800a528:	8812      	ldrh	r2, [r2, #0]
 800a52a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4a5c      	ldr	r2, [pc, #368]	@ (800a6a0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800a530:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	4a5b      	ldr	r2, [pc, #364]	@ (800a6a4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800a536:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	2bff      	cmp	r3, #255	@ 0xff
 800a540:	d906      	bls.n	800a550 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	22ff      	movs	r2, #255	@ 0xff
 800a546:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a548:	2380      	movs	r3, #128	@ 0x80
 800a54a:	045b      	lsls	r3, r3, #17
 800a54c:	617b      	str	r3, [r7, #20]
 800a54e:	e007      	b.n	800a560 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a554:	b29a      	uxth	r2, r3
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a55a:	2380      	movs	r3, #128	@ 0x80
 800a55c:	049b      	lsls	r3, r3, #18
 800a55e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a564:	2b00      	cmp	r3, #0
 800a566:	d100      	bne.n	800a56a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800a568:	e078      	b.n	800a65c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d023      	beq.n	800a5ba <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a576:	4a4c      	ldr	r2, [pc, #304]	@ (800a6a8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800a578:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a57e:	4a4b      	ldr	r2, [pc, #300]	@ (800a6ac <HAL_I2C_Master_Transmit_DMA+0x200>)
 800a580:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a586:	2200      	movs	r2, #0
 800a588:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a58e:	2200      	movs	r2, #0
 800a590:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a596:	6879      	ldr	r1, [r7, #4]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3328      	adds	r3, #40	@ 0x28
 800a59e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a5a4:	2513      	movs	r5, #19
 800a5a6:	197c      	adds	r4, r7, r5
 800a5a8:	f7ff fa96 	bl	8009ad8 <HAL_DMA_Start_IT>
 800a5ac:	0003      	movs	r3, r0
 800a5ae:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a5b0:	197b      	adds	r3, r7, r5
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d13d      	bne.n	800a634 <HAL_I2C_Master_Transmit_DMA+0x188>
 800a5b8:	e013      	b.n	800a5e2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2241      	movs	r2, #65	@ 0x41
 800a5be:	2120      	movs	r1, #32
 800a5c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2242      	movs	r2, #66	@ 0x42
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ce:	2280      	movs	r2, #128	@ 0x80
 800a5d0:	431a      	orrs	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2240      	movs	r2, #64	@ 0x40
 800a5da:	2100      	movs	r1, #0
 800a5dc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e059      	b.n	800a696 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	697c      	ldr	r4, [r7, #20]
 800a5ea:	230a      	movs	r3, #10
 800a5ec:	18fb      	adds	r3, r7, r3
 800a5ee:	8819      	ldrh	r1, [r3, #0]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	4b2f      	ldr	r3, [pc, #188]	@ (800a6b0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	0023      	movs	r3, r4
 800a5f8:	f001 fd0e 	bl	800c018 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a600:	b29a      	uxth	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	b29a      	uxth	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2240      	movs	r2, #64	@ 0x40
 800a612:	2100      	movs	r1, #0
 800a614:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2110      	movs	r1, #16
 800a61a:	0018      	movs	r0, r3
 800a61c:	f001 fd36 	bl	800c08c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2180      	movs	r1, #128	@ 0x80
 800a62c:	01c9      	lsls	r1, r1, #7
 800a62e:	430a      	orrs	r2, r1
 800a630:	601a      	str	r2, [r3, #0]
 800a632:	e02d      	b.n	800a690 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2241      	movs	r2, #65	@ 0x41
 800a638:	2120      	movs	r1, #32
 800a63a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2242      	movs	r2, #66	@ 0x42
 800a640:	2100      	movs	r1, #0
 800a642:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a648:	2210      	movs	r2, #16
 800a64a:	431a      	orrs	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2240      	movs	r2, #64	@ 0x40
 800a654:	2100      	movs	r1, #0
 800a656:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e01c      	b.n	800a696 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	4a15      	ldr	r2, [pc, #84]	@ (800a6b4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800a660:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a666:	b2da      	uxtb	r2, r3
 800a668:	2380      	movs	r3, #128	@ 0x80
 800a66a:	049c      	lsls	r4, r3, #18
 800a66c:	230a      	movs	r3, #10
 800a66e:	18fb      	adds	r3, r7, r3
 800a670:	8819      	ldrh	r1, [r3, #0]
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	0023      	movs	r3, r4
 800a67a:	f001 fccd 	bl	800c018 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2240      	movs	r2, #64	@ 0x40
 800a682:	2100      	movs	r1, #0
 800a684:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2101      	movs	r1, #1
 800a68a:	0018      	movs	r0, r3
 800a68c:	f001 fcfe 	bl	800c08c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	e000      	b.n	800a696 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a694:	2302      	movs	r3, #2
  }
}
 800a696:	0018      	movs	r0, r3
 800a698:	46bd      	mov	sp, r7
 800a69a:	b006      	add	sp, #24
 800a69c:	bdb0      	pop	{r4, r5, r7, pc}
 800a69e:	46c0      	nop			@ (mov r8, r8)
 800a6a0:	ffff0000 	.word	0xffff0000
 800a6a4:	0800aeb1 	.word	0x0800aeb1
 800a6a8:	0800be69 	.word	0x0800be69
 800a6ac:	0800bfa9 	.word	0x0800bfa9
 800a6b0:	80002000 	.word	0x80002000
 800a6b4:	0800aa5d 	.word	0x0800aa5d

0800a6b8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a6b8:	b5b0      	push	{r4, r5, r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	0008      	movs	r0, r1
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	0019      	movs	r1, r3
 800a6c6:	230a      	movs	r3, #10
 800a6c8:	18fb      	adds	r3, r7, r3
 800a6ca:	1c02      	adds	r2, r0, #0
 800a6cc:	801a      	strh	r2, [r3, #0]
 800a6ce:	2308      	movs	r3, #8
 800a6d0:	18fb      	adds	r3, r7, r3
 800a6d2:	1c0a      	adds	r2, r1, #0
 800a6d4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2241      	movs	r2, #65	@ 0x41
 800a6da:	5c9b      	ldrb	r3, [r3, r2]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b20      	cmp	r3, #32
 800a6e0:	d000      	beq.n	800a6e4 <HAL_I2C_Master_Receive_DMA+0x2c>
 800a6e2:	e0dd      	b.n	800a8a0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699a      	ldr	r2, [r3, #24]
 800a6ea:	2380      	movs	r3, #128	@ 0x80
 800a6ec:	021b      	lsls	r3, r3, #8
 800a6ee:	401a      	ands	r2, r3
 800a6f0:	2380      	movs	r3, #128	@ 0x80
 800a6f2:	021b      	lsls	r3, r3, #8
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d101      	bne.n	800a6fc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	e0d2      	b.n	800a8a2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2240      	movs	r2, #64	@ 0x40
 800a700:	5c9b      	ldrb	r3, [r3, r2]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d101      	bne.n	800a70a <HAL_I2C_Master_Receive_DMA+0x52>
 800a706:	2302      	movs	r3, #2
 800a708:	e0cb      	b.n	800a8a2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2240      	movs	r2, #64	@ 0x40
 800a70e:	2101      	movs	r1, #1
 800a710:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2241      	movs	r2, #65	@ 0x41
 800a716:	2122      	movs	r1, #34	@ 0x22
 800a718:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2242      	movs	r2, #66	@ 0x42
 800a71e:	2110      	movs	r1, #16
 800a720:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2208      	movs	r2, #8
 800a732:	18ba      	adds	r2, r7, r2
 800a734:	8812      	ldrh	r2, [r2, #0]
 800a736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4a5c      	ldr	r2, [pc, #368]	@ (800a8ac <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800a73c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4a5b      	ldr	r2, [pc, #364]	@ (800a8b0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800a742:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a748:	b29b      	uxth	r3, r3
 800a74a:	2bff      	cmp	r3, #255	@ 0xff
 800a74c:	d906      	bls.n	800a75c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	22ff      	movs	r2, #255	@ 0xff
 800a752:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a754:	2380      	movs	r3, #128	@ 0x80
 800a756:	045b      	lsls	r3, r3, #17
 800a758:	617b      	str	r3, [r7, #20]
 800a75a:	e007      	b.n	800a76c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a760:	b29a      	uxth	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a766:	2380      	movs	r3, #128	@ 0x80
 800a768:	049b      	lsls	r3, r3, #18
 800a76a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a770:	2b00      	cmp	r3, #0
 800a772:	d100      	bne.n	800a776 <HAL_I2C_Master_Receive_DMA+0xbe>
 800a774:	e078      	b.n	800a868 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d023      	beq.n	800a7c6 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a782:	4a4c      	ldr	r2, [pc, #304]	@ (800a8b4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800a784:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a78a:	4a4b      	ldr	r2, [pc, #300]	@ (800a8b8 <HAL_I2C_Master_Receive_DMA+0x200>)
 800a78c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a792:	2200      	movs	r2, #0
 800a794:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a79a:	2200      	movs	r2, #0
 800a79c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3324      	adds	r3, #36	@ 0x24
 800a7a8:	0019      	movs	r1, r3
 800a7aa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a7b0:	2513      	movs	r5, #19
 800a7b2:	197c      	adds	r4, r7, r5
 800a7b4:	f7ff f990 	bl	8009ad8 <HAL_DMA_Start_IT>
 800a7b8:	0003      	movs	r3, r0
 800a7ba:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a7bc:	197b      	adds	r3, r7, r5
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d13d      	bne.n	800a840 <HAL_I2C_Master_Receive_DMA+0x188>
 800a7c4:	e013      	b.n	800a7ee <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2241      	movs	r2, #65	@ 0x41
 800a7ca:	2120      	movs	r1, #32
 800a7cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2242      	movs	r2, #66	@ 0x42
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7da:	2280      	movs	r2, #128	@ 0x80
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2240      	movs	r2, #64	@ 0x40
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e059      	b.n	800a8a2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	697c      	ldr	r4, [r7, #20]
 800a7f6:	230a      	movs	r3, #10
 800a7f8:	18fb      	adds	r3, r7, r3
 800a7fa:	8819      	ldrh	r1, [r3, #0]
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	4b2f      	ldr	r3, [pc, #188]	@ (800a8bc <HAL_I2C_Master_Receive_DMA+0x204>)
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	0023      	movs	r3, r4
 800a804:	f001 fc08 	bl	800c018 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	b29a      	uxth	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2240      	movs	r2, #64	@ 0x40
 800a81e:	2100      	movs	r1, #0
 800a820:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2110      	movs	r1, #16
 800a826:	0018      	movs	r0, r3
 800a828:	f001 fc30 	bl	800c08c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2180      	movs	r1, #128	@ 0x80
 800a838:	0209      	lsls	r1, r1, #8
 800a83a:	430a      	orrs	r2, r1
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	e02d      	b.n	800a89c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2241      	movs	r2, #65	@ 0x41
 800a844:	2120      	movs	r1, #32
 800a846:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2242      	movs	r2, #66	@ 0x42
 800a84c:	2100      	movs	r1, #0
 800a84e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a854:	2210      	movs	r2, #16
 800a856:	431a      	orrs	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2240      	movs	r2, #64	@ 0x40
 800a860:	2100      	movs	r1, #0
 800a862:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e01c      	b.n	800a8a2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	4a15      	ldr	r2, [pc, #84]	@ (800a8c0 <HAL_I2C_Master_Receive_DMA+0x208>)
 800a86c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a872:	b2da      	uxtb	r2, r3
 800a874:	2380      	movs	r3, #128	@ 0x80
 800a876:	049c      	lsls	r4, r3, #18
 800a878:	230a      	movs	r3, #10
 800a87a:	18fb      	adds	r3, r7, r3
 800a87c:	8819      	ldrh	r1, [r3, #0]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	4b0e      	ldr	r3, [pc, #56]	@ (800a8bc <HAL_I2C_Master_Receive_DMA+0x204>)
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	0023      	movs	r3, r4
 800a886:	f001 fbc7 	bl	800c018 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2240      	movs	r2, #64	@ 0x40
 800a88e:	2100      	movs	r1, #0
 800a890:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2101      	movs	r1, #1
 800a896:	0018      	movs	r0, r3
 800a898:	f001 fbf8 	bl	800c08c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	e000      	b.n	800a8a2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a8a0:	2302      	movs	r3, #2
  }
}
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b006      	add	sp, #24
 800a8a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8aa:	46c0      	nop			@ (mov r8, r8)
 800a8ac:	ffff0000 	.word	0xffff0000
 800a8b0:	0800aeb1 	.word	0x0800aeb1
 800a8b4:	0800bf09 	.word	0x0800bf09
 800a8b8:	0800bfa9 	.word	0x0800bfa9
 800a8bc:	80002400 	.word	0x80002400
 800a8c0:	0800aa5d 	.word	0x0800aa5d

0800a8c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	68f9      	ldr	r1, [r7, #12]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	4798      	blx	r3
  }
}
 800a8f0:	46c0      	nop			@ (mov r8, r8)
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	b004      	add	sp, #16
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	2380      	movs	r3, #128	@ 0x80
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	4013      	ands	r3, r2
 800a918:	d00e      	beq.n	800a938 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2280      	movs	r2, #128	@ 0x80
 800a91e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a920:	d00a      	beq.n	800a938 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a926:	2201      	movs	r2, #1
 800a928:	431a      	orrs	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2280      	movs	r2, #128	@ 0x80
 800a934:	0052      	lsls	r2, r2, #1
 800a936:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	2380      	movs	r3, #128	@ 0x80
 800a93c:	00db      	lsls	r3, r3, #3
 800a93e:	4013      	ands	r3, r2
 800a940:	d00e      	beq.n	800a960 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2280      	movs	r2, #128	@ 0x80
 800a946:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a948:	d00a      	beq.n	800a960 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a94e:	2208      	movs	r2, #8
 800a950:	431a      	orrs	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2280      	movs	r2, #128	@ 0x80
 800a95c:	00d2      	lsls	r2, r2, #3
 800a95e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	2380      	movs	r3, #128	@ 0x80
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4013      	ands	r3, r2
 800a968:	d00e      	beq.n	800a988 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	2280      	movs	r2, #128	@ 0x80
 800a96e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a970:	d00a      	beq.n	800a988 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a976:	2202      	movs	r2, #2
 800a978:	431a      	orrs	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2280      	movs	r2, #128	@ 0x80
 800a984:	0092      	lsls	r2, r2, #2
 800a986:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a98c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	220b      	movs	r2, #11
 800a992:	4013      	ands	r3, r2
 800a994:	d005      	beq.n	800a9a2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	0011      	movs	r1, r2
 800a99c:	0018      	movs	r0, r3
 800a99e:	f001 f915 	bl	800bbcc <I2C_ITError>
  }
}
 800a9a2:	46c0      	nop			@ (mov r8, r8)
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	b006      	add	sp, #24
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b082      	sub	sp, #8
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a9b2:	46c0      	nop			@ (mov r8, r8)
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	b002      	add	sp, #8
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a9c2:	46c0      	nop			@ (mov r8, r8)
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	b002      	add	sp, #8
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b082      	sub	sp, #8
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a9d2:	46c0      	nop			@ (mov r8, r8)
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	b002      	add	sp, #8
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a9e2:	46c0      	nop			@ (mov r8, r8)
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	b002      	add	sp, #8
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	0008      	movs	r0, r1
 800a9f4:	0011      	movs	r1, r2
 800a9f6:	1cfb      	adds	r3, r7, #3
 800a9f8:	1c02      	adds	r2, r0, #0
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	003b      	movs	r3, r7
 800a9fe:	1c0a      	adds	r2, r1, #0
 800aa00:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800aa02:	46c0      	nop			@ (mov r8, r8)
 800aa04:	46bd      	mov	sp, r7
 800aa06:	b002      	add	sp, #8
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800aa12:	46c0      	nop			@ (mov r8, r8)
 800aa14:	46bd      	mov	sp, r7
 800aa16:	b002      	add	sp, #8
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800aa22:	46c0      	nop			@ (mov r8, r8)
 800aa24:	46bd      	mov	sp, r7
 800aa26:	b002      	add	sp, #8
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800aa32:	46c0      	nop			@ (mov r8, r8)
 800aa34:	46bd      	mov	sp, r7
 800aa36:	b002      	add	sp, #8
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800aa42:	46c0      	nop			@ (mov r8, r8)
 800aa44:	46bd      	mov	sp, r7
 800aa46:	b002      	add	sp, #8
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800aa52:	46c0      	nop			@ (mov r8, r8)
 800aa54:	46bd      	mov	sp, r7
 800aa56:	b002      	add	sp, #8
 800aa58:	bd80      	pop	{r7, pc}
	...

0800aa5c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800aa5c:	b590      	push	{r4, r7, lr}
 800aa5e:	b089      	sub	sp, #36	@ 0x24
 800aa60:	af02      	add	r7, sp, #8
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2240      	movs	r2, #64	@ 0x40
 800aa70:	5c9b      	ldrb	r3, [r3, r2]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d101      	bne.n	800aa7a <I2C_Master_ISR_IT+0x1e>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e113      	b.n	800aca2 <I2C_Master_ISR_IT+0x246>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2240      	movs	r2, #64	@ 0x40
 800aa7e:	2101      	movs	r1, #1
 800aa80:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	2210      	movs	r2, #16
 800aa86:	4013      	ands	r3, r2
 800aa88:	d012      	beq.n	800aab0 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2210      	movs	r2, #16
 800aa8e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aa90:	d00e      	beq.n	800aab0 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2210      	movs	r2, #16
 800aa98:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa9e:	2204      	movs	r2, #4
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	0018      	movs	r0, r3
 800aaaa:	f001 f9ba 	bl	800be22 <I2C_Flush_TXDR>
 800aaae:	e0e5      	b.n	800ac7c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2204      	movs	r2, #4
 800aab4:	4013      	ands	r3, r2
 800aab6:	d021      	beq.n	800aafc <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2204      	movs	r2, #4
 800aabc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aabe:	d01d      	beq.n	800aafc <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2204      	movs	r2, #4
 800aac4:	4393      	bics	r3, r2
 800aac6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad2:	b2d2      	uxtb	r2, r2
 800aad4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aae4:	3b01      	subs	r3, #1
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aafa:	e0bf      	b.n	800ac7c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2202      	movs	r2, #2
 800ab00:	4013      	ands	r3, r2
 800ab02:	d01c      	beq.n	800ab3e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2202      	movs	r2, #2
 800ab08:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ab0a:	d018      	beq.n	800ab3e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab10:	781a      	ldrb	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab26:	3b01      	subs	r3, #1
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	3b01      	subs	r3, #1
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ab3c:	e09e      	b.n	800ac7c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2280      	movs	r2, #128	@ 0x80
 800ab42:	4013      	ands	r3, r2
 800ab44:	d100      	bne.n	800ab48 <I2C_Master_ISR_IT+0xec>
 800ab46:	e069      	b.n	800ac1c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2240      	movs	r2, #64	@ 0x40
 800ab4c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ab4e:	d065      	beq.n	800ac1c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d04a      	beq.n	800abf0 <I2C_Master_ISR_IT+0x194>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d146      	bne.n	800abf0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	2112      	movs	r1, #18
 800ab6c:	187b      	adds	r3, r7, r1
 800ab6e:	0592      	lsls	r2, r2, #22
 800ab70:	0d92      	lsrs	r2, r2, #22
 800ab72:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	2bff      	cmp	r3, #255	@ 0xff
 800ab7c:	d910      	bls.n	800aba0 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	22ff      	movs	r2, #255	@ 0xff
 800ab82:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	2380      	movs	r3, #128	@ 0x80
 800ab8c:	045c      	lsls	r4, r3, #17
 800ab8e:	187b      	adds	r3, r7, r1
 800ab90:	8819      	ldrh	r1, [r3, #0]
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	2300      	movs	r3, #0
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	0023      	movs	r3, r4
 800ab9a:	f001 fa3d 	bl	800c018 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab9e:	e03c      	b.n	800ac1a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abae:	4a3f      	ldr	r2, [pc, #252]	@ (800acac <I2C_Master_ISR_IT+0x250>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d00e      	beq.n	800abd2 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abb8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800abbe:	2312      	movs	r3, #18
 800abc0:	18fb      	adds	r3, r7, r3
 800abc2:	8819      	ldrh	r1, [r3, #0]
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	2300      	movs	r3, #0
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	0023      	movs	r3, r4
 800abcc:	f001 fa24 	bl	800c018 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abd0:	e023      	b.n	800ac1a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	2380      	movs	r3, #128	@ 0x80
 800abda:	049c      	lsls	r4, r3, #18
 800abdc:	2312      	movs	r3, #18
 800abde:	18fb      	adds	r3, r7, r3
 800abe0:	8819      	ldrh	r1, [r3, #0]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	2300      	movs	r3, #0
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	0023      	movs	r3, r4
 800abea:	f001 fa15 	bl	800c018 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abee:	e014      	b.n	800ac1a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	2380      	movs	r3, #128	@ 0x80
 800abf8:	049b      	lsls	r3, r3, #18
 800abfa:	401a      	ands	r2, r3
 800abfc:	2380      	movs	r3, #128	@ 0x80
 800abfe:	049b      	lsls	r3, r3, #18
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d004      	beq.n	800ac0e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	0018      	movs	r0, r3
 800ac08:	f000 fcf4 	bl	800b5f4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac0c:	e036      	b.n	800ac7c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2140      	movs	r1, #64	@ 0x40
 800ac12:	0018      	movs	r0, r3
 800ac14:	f000 ffda 	bl	800bbcc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac18:	e030      	b.n	800ac7c <I2C_Master_ISR_IT+0x220>
 800ac1a:	e02f      	b.n	800ac7c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	2240      	movs	r2, #64	@ 0x40
 800ac20:	4013      	ands	r3, r2
 800ac22:	d02b      	beq.n	800ac7c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2240      	movs	r2, #64	@ 0x40
 800ac28:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ac2a:	d027      	beq.n	800ac7c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d11d      	bne.n	800ac72 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	2380      	movs	r3, #128	@ 0x80
 800ac3e:	049b      	lsls	r3, r3, #18
 800ac40:	401a      	ands	r2, r3
 800ac42:	2380      	movs	r3, #128	@ 0x80
 800ac44:	049b      	lsls	r3, r3, #18
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d018      	beq.n	800ac7c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac4e:	4a17      	ldr	r2, [pc, #92]	@ (800acac <I2C_Master_ISR_IT+0x250>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d109      	bne.n	800ac68 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2180      	movs	r1, #128	@ 0x80
 800ac60:	01c9      	lsls	r1, r1, #7
 800ac62:	430a      	orrs	r2, r1
 800ac64:	605a      	str	r2, [r3, #4]
 800ac66:	e009      	b.n	800ac7c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	0018      	movs	r0, r3
 800ac6c:	f000 fcc2 	bl	800b5f4 <I2C_ITMasterSeqCplt>
 800ac70:	e004      	b.n	800ac7c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2140      	movs	r1, #64	@ 0x40
 800ac76:	0018      	movs	r0, r3
 800ac78:	f000 ffa8 	bl	800bbcc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	2220      	movs	r2, #32
 800ac80:	4013      	ands	r3, r2
 800ac82:	d009      	beq.n	800ac98 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2220      	movs	r2, #32
 800ac88:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ac8a:	d005      	beq.n	800ac98 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	0011      	movs	r1, r2
 800ac92:	0018      	movs	r0, r3
 800ac94:	f000 fd54 	bl	800b740 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2240      	movs	r2, #64	@ 0x40
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	0018      	movs	r0, r3
 800aca4:	46bd      	mov	sp, r7
 800aca6:	b007      	add	sp, #28
 800aca8:	bd90      	pop	{r4, r7, pc}
 800acaa:	46c0      	nop			@ (mov r8, r8)
 800acac:	ffff0000 	.word	0xffff0000

0800acb0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2240      	movs	r2, #64	@ 0x40
 800acca:	5c9b      	ldrb	r3, [r3, r2]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d101      	bne.n	800acd4 <I2C_Slave_ISR_IT+0x24>
 800acd0:	2302      	movs	r3, #2
 800acd2:	e0e6      	b.n	800aea2 <I2C_Slave_ISR_IT+0x1f2>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2240      	movs	r2, #64	@ 0x40
 800acd8:	2101      	movs	r1, #1
 800acda:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2220      	movs	r2, #32
 800ace0:	4013      	ands	r3, r2
 800ace2:	d009      	beq.n	800acf8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2220      	movs	r2, #32
 800ace8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800acea:	d005      	beq.n	800acf8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	0011      	movs	r1, r2
 800acf2:	0018      	movs	r0, r3
 800acf4:	f000 fdf2 	bl	800b8dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2210      	movs	r2, #16
 800acfc:	4013      	ands	r3, r2
 800acfe:	d052      	beq.n	800ada6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2210      	movs	r2, #16
 800ad04:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ad06:	d04e      	beq.n	800ada6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d12d      	bne.n	800ad6e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2241      	movs	r2, #65	@ 0x41
 800ad16:	5c9b      	ldrb	r3, [r3, r2]
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b28      	cmp	r3, #40	@ 0x28
 800ad1c:	d10b      	bne.n	800ad36 <I2C_Slave_ISR_IT+0x86>
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	2380      	movs	r3, #128	@ 0x80
 800ad22:	049b      	lsls	r3, r3, #18
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d106      	bne.n	800ad36 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	0011      	movs	r1, r2
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f000 fef4 	bl	800bb1c <I2C_ITListenCplt>
 800ad34:	e036      	b.n	800ada4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2241      	movs	r2, #65	@ 0x41
 800ad3a:	5c9b      	ldrb	r3, [r3, r2]
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b29      	cmp	r3, #41	@ 0x29
 800ad40:	d110      	bne.n	800ad64 <I2C_Slave_ISR_IT+0xb4>
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	4a59      	ldr	r2, [pc, #356]	@ (800aeac <I2C_Slave_ISR_IT+0x1fc>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d00c      	beq.n	800ad64 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2210      	movs	r2, #16
 800ad50:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	0018      	movs	r0, r3
 800ad56:	f001 f864 	bl	800be22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	0018      	movs	r0, r3
 800ad5e:	f000 fc8b 	bl	800b678 <I2C_ITSlaveSeqCplt>
 800ad62:	e01f      	b.n	800ada4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2210      	movs	r2, #16
 800ad6a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800ad6c:	e091      	b.n	800ae92 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2210      	movs	r2, #16
 800ad74:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad7a:	2204      	movs	r2, #4
 800ad7c:	431a      	orrs	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <I2C_Slave_ISR_IT+0xe4>
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	2380      	movs	r3, #128	@ 0x80
 800ad8c:	045b      	lsls	r3, r3, #17
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d000      	beq.n	800ad94 <I2C_Slave_ISR_IT+0xe4>
 800ad92:	e07e      	b.n	800ae92 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	0011      	movs	r1, r2
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	f000 ff15 	bl	800bbcc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ada2:	e076      	b.n	800ae92 <I2C_Slave_ISR_IT+0x1e2>
 800ada4:	e075      	b.n	800ae92 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2204      	movs	r2, #4
 800adaa:	4013      	ands	r3, r2
 800adac:	d02f      	beq.n	800ae0e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2204      	movs	r2, #4
 800adb2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800adb4:	d02b      	beq.n	800ae0e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adba:	b29b      	uxth	r3, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d018      	beq.n	800adf2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adca:	b2d2      	uxtb	r2, r2
 800adcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800addc:	3b01      	subs	r3, #1
 800adde:	b29a      	uxth	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ade8:	b29b      	uxth	r3, r3
 800adea:	3b01      	subs	r3, #1
 800adec:	b29a      	uxth	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d14c      	bne.n	800ae96 <I2C_Slave_ISR_IT+0x1e6>
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	4a2b      	ldr	r2, [pc, #172]	@ (800aeac <I2C_Slave_ISR_IT+0x1fc>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d048      	beq.n	800ae96 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	0018      	movs	r0, r3
 800ae08:	f000 fc36 	bl	800b678 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800ae0c:	e043      	b.n	800ae96 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	2208      	movs	r2, #8
 800ae12:	4013      	ands	r3, r2
 800ae14:	d00a      	beq.n	800ae2c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2208      	movs	r2, #8
 800ae1a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ae1c:	d006      	beq.n	800ae2c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	0011      	movs	r1, r2
 800ae24:	0018      	movs	r0, r3
 800ae26:	f000 fb41 	bl	800b4ac <I2C_ITAddrCplt>
 800ae2a:	e035      	b.n	800ae98 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	2202      	movs	r2, #2
 800ae30:	4013      	ands	r3, r2
 800ae32:	d031      	beq.n	800ae98 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2202      	movs	r2, #2
 800ae38:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ae3a:	d02d      	beq.n	800ae98 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d018      	beq.n	800ae78 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4a:	781a      	ldrb	r2, [r3, #0]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	3b01      	subs	r3, #1
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ae76:	e00f      	b.n	800ae98 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	2380      	movs	r3, #128	@ 0x80
 800ae7c:	045b      	lsls	r3, r3, #17
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d002      	beq.n	800ae88 <I2C_Slave_ISR_IT+0x1d8>
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d107      	bne.n	800ae98 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	f000 fbf4 	bl	800b678 <I2C_ITSlaveSeqCplt>
 800ae90:	e002      	b.n	800ae98 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800ae92:	46c0      	nop			@ (mov r8, r8)
 800ae94:	e000      	b.n	800ae98 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800ae96:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2240      	movs	r2, #64	@ 0x40
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	0018      	movs	r0, r3
 800aea4:	46bd      	mov	sp, r7
 800aea6:	b006      	add	sp, #24
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	46c0      	nop			@ (mov r8, r8)
 800aeac:	ffff0000 	.word	0xffff0000

0800aeb0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800aeb0:	b590      	push	{r4, r7, lr}
 800aeb2:	b089      	sub	sp, #36	@ 0x24
 800aeb4:	af02      	add	r7, sp, #8
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2240      	movs	r2, #64	@ 0x40
 800aec0:	5c9b      	ldrb	r3, [r3, r2]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <I2C_Master_ISR_DMA+0x1a>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e0e7      	b.n	800b09a <I2C_Master_ISR_DMA+0x1ea>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2240      	movs	r2, #64	@ 0x40
 800aece:	2101      	movs	r1, #1
 800aed0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2210      	movs	r2, #16
 800aed6:	4013      	ands	r3, r2
 800aed8:	d017      	beq.n	800af0a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2210      	movs	r2, #16
 800aede:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800aee0:	d013      	beq.n	800af0a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2210      	movs	r2, #16
 800aee8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeee:	2204      	movs	r2, #4
 800aef0:	431a      	orrs	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2120      	movs	r1, #32
 800aefa:	0018      	movs	r0, r3
 800aefc:	f001 f8c6 	bl	800c08c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	0018      	movs	r0, r3
 800af04:	f000 ff8d 	bl	800be22 <I2C_Flush_TXDR>
 800af08:	e0c2      	b.n	800b090 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2280      	movs	r2, #128	@ 0x80
 800af0e:	4013      	ands	r3, r2
 800af10:	d100      	bne.n	800af14 <I2C_Master_ISR_DMA+0x64>
 800af12:	e07c      	b.n	800b00e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2240      	movs	r2, #64	@ 0x40
 800af18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800af1a:	d100      	bne.n	800af1e <I2C_Master_ISR_DMA+0x6e>
 800af1c:	e077      	b.n	800b00e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2140      	movs	r1, #64	@ 0x40
 800af2a:	438a      	bics	r2, r1
 800af2c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af32:	b29b      	uxth	r3, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	d055      	beq.n	800afe4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	b29a      	uxth	r2, r3
 800af40:	2312      	movs	r3, #18
 800af42:	18fb      	adds	r3, r7, r3
 800af44:	0592      	lsls	r2, r2, #22
 800af46:	0d92      	lsrs	r2, r2, #22
 800af48:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af4e:	b29b      	uxth	r3, r3
 800af50:	2bff      	cmp	r3, #255	@ 0xff
 800af52:	d906      	bls.n	800af62 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	22ff      	movs	r2, #255	@ 0xff
 800af58:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800af5a:	2380      	movs	r3, #128	@ 0x80
 800af5c:	045b      	lsls	r3, r3, #17
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	e010      	b.n	800af84 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af66:	b29a      	uxth	r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af70:	4a4c      	ldr	r2, [pc, #304]	@ (800b0a4 <I2C_Master_ISR_DMA+0x1f4>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d003      	beq.n	800af7e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af7a:	617b      	str	r3, [r7, #20]
 800af7c:	e002      	b.n	800af84 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800af7e:	2380      	movs	r3, #128	@ 0x80
 800af80:	049b      	lsls	r3, r3, #18
 800af82:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	697c      	ldr	r4, [r7, #20]
 800af8c:	2312      	movs	r3, #18
 800af8e:	18fb      	adds	r3, r7, r3
 800af90:	8819      	ldrh	r1, [r3, #0]
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	2300      	movs	r3, #0
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	0023      	movs	r3, r4
 800af9a:	f001 f83d 	bl	800c018 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	b29a      	uxth	r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2241      	movs	r2, #65	@ 0x41
 800afb4:	5c9b      	ldrb	r3, [r3, r2]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b22      	cmp	r3, #34	@ 0x22
 800afba:	d109      	bne.n	800afd0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2180      	movs	r1, #128	@ 0x80
 800afc8:	0209      	lsls	r1, r1, #8
 800afca:	430a      	orrs	r2, r1
 800afcc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800afce:	e05f      	b.n	800b090 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2180      	movs	r1, #128	@ 0x80
 800afdc:	01c9      	lsls	r1, r1, #7
 800afde:	430a      	orrs	r2, r1
 800afe0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800afe2:	e055      	b.n	800b090 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	2380      	movs	r3, #128	@ 0x80
 800afec:	049b      	lsls	r3, r3, #18
 800afee:	401a      	ands	r2, r3
 800aff0:	2380      	movs	r3, #128	@ 0x80
 800aff2:	049b      	lsls	r3, r3, #18
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d004      	beq.n	800b002 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	0018      	movs	r0, r3
 800affc:	f000 fafa 	bl	800b5f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b000:	e046      	b.n	800b090 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2140      	movs	r1, #64	@ 0x40
 800b006:	0018      	movs	r0, r3
 800b008:	f000 fde0 	bl	800bbcc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b00c:	e040      	b.n	800b090 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2240      	movs	r2, #64	@ 0x40
 800b012:	4013      	ands	r3, r2
 800b014:	d02c      	beq.n	800b070 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2240      	movs	r2, #64	@ 0x40
 800b01a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b01c:	d028      	beq.n	800b070 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b022:	b29b      	uxth	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	d11d      	bne.n	800b064 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	2380      	movs	r3, #128	@ 0x80
 800b030:	049b      	lsls	r3, r3, #18
 800b032:	401a      	ands	r2, r3
 800b034:	2380      	movs	r3, #128	@ 0x80
 800b036:	049b      	lsls	r3, r3, #18
 800b038:	429a      	cmp	r2, r3
 800b03a:	d028      	beq.n	800b08e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b040:	4a18      	ldr	r2, [pc, #96]	@ (800b0a4 <I2C_Master_ISR_DMA+0x1f4>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d109      	bne.n	800b05a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2180      	movs	r1, #128	@ 0x80
 800b052:	01c9      	lsls	r1, r1, #7
 800b054:	430a      	orrs	r2, r1
 800b056:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b058:	e019      	b.n	800b08e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	0018      	movs	r0, r3
 800b05e:	f000 fac9 	bl	800b5f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b062:	e014      	b.n	800b08e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2140      	movs	r1, #64	@ 0x40
 800b068:	0018      	movs	r0, r3
 800b06a:	f000 fdaf 	bl	800bbcc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b06e:	e00e      	b.n	800b08e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2220      	movs	r2, #32
 800b074:	4013      	ands	r3, r2
 800b076:	d00b      	beq.n	800b090 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2220      	movs	r2, #32
 800b07c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b07e:	d007      	beq.n	800b090 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	0011      	movs	r1, r2
 800b086:	0018      	movs	r0, r3
 800b088:	f000 fb5a 	bl	800b740 <I2C_ITMasterCplt>
 800b08c:	e000      	b.n	800b090 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800b08e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2240      	movs	r2, #64	@ 0x40
 800b094:	2100      	movs	r1, #0
 800b096:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	0018      	movs	r0, r3
 800b09c:	46bd      	mov	sp, r7
 800b09e:	b007      	add	sp, #28
 800b0a0:	bd90      	pop	{r4, r7, pc}
 800b0a2:	46c0      	nop			@ (mov r8, r8)
 800b0a4:	ffff0000 	.word	0xffff0000

0800b0a8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b0a8:	b590      	push	{r4, r7, lr}
 800b0aa:	b089      	sub	sp, #36	@ 0x24
 800b0ac:	af02      	add	r7, sp, #8
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b0b4:	4b88      	ldr	r3, [pc, #544]	@ (800b2d8 <I2C_Mem_ISR_DMA+0x230>)
 800b0b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2240      	movs	r2, #64	@ 0x40
 800b0bc:	5c9b      	ldrb	r3, [r3, r2]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d101      	bne.n	800b0c6 <I2C_Mem_ISR_DMA+0x1e>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	e104      	b.n	800b2d0 <I2C_Mem_ISR_DMA+0x228>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2240      	movs	r2, #64	@ 0x40
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2210      	movs	r2, #16
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	d017      	beq.n	800b106 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2210      	movs	r2, #16
 800b0da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b0dc:	d013      	beq.n	800b106 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2210      	movs	r2, #16
 800b0e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ea:	2204      	movs	r2, #4
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2120      	movs	r1, #32
 800b0f6:	0018      	movs	r0, r3
 800b0f8:	f000 ffc8 	bl	800c08c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	0018      	movs	r0, r3
 800b100:	f000 fe8f 	bl	800be22 <I2C_Flush_TXDR>
 800b104:	e0df      	b.n	800b2c6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	2202      	movs	r2, #2
 800b10a:	4013      	ands	r3, r2
 800b10c:	d00d      	beq.n	800b12a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2202      	movs	r2, #2
 800b112:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b114:	d009      	beq.n	800b12a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b11e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2201      	movs	r2, #1
 800b124:	4252      	negs	r2, r2
 800b126:	651a      	str	r2, [r3, #80]	@ 0x50
 800b128:	e0cd      	b.n	800b2c6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2280      	movs	r2, #128	@ 0x80
 800b12e:	4013      	ands	r3, r2
 800b130:	d05e      	beq.n	800b1f0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2240      	movs	r2, #64	@ 0x40
 800b136:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b138:	d05a      	beq.n	800b1f0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2110      	movs	r1, #16
 800b13e:	0018      	movs	r0, r3
 800b140:	f000 ffa4 	bl	800c08c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b148:	b29b      	uxth	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d04a      	beq.n	800b1e4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b152:	b29b      	uxth	r3, r3
 800b154:	2bff      	cmp	r3, #255	@ 0xff
 800b156:	d910      	bls.n	800b17a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	22ff      	movs	r2, #255	@ 0xff
 800b15c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b162:	b299      	uxth	r1, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	2380      	movs	r3, #128	@ 0x80
 800b16c:	045b      	lsls	r3, r3, #17
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	2400      	movs	r4, #0
 800b172:	9400      	str	r4, [sp, #0]
 800b174:	f000 ff50 	bl	800c018 <I2C_TransferConfig>
 800b178:	e011      	b.n	800b19e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b17e:	b29a      	uxth	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b188:	b299      	uxth	r1, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	2380      	movs	r3, #128	@ 0x80
 800b192:	049b      	lsls	r3, r3, #18
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	2400      	movs	r4, #0
 800b198:	9400      	str	r4, [sp, #0]
 800b19a:	f000 ff3d 	bl	800c018 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2241      	movs	r2, #65	@ 0x41
 800b1b4:	5c9b      	ldrb	r3, [r3, r2]
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	2b22      	cmp	r3, #34	@ 0x22
 800b1ba:	d109      	bne.n	800b1d0 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2180      	movs	r1, #128	@ 0x80
 800b1c8:	0209      	lsls	r1, r1, #8
 800b1ca:	430a      	orrs	r2, r1
 800b1cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b1ce:	e07a      	b.n	800b2c6 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2180      	movs	r1, #128	@ 0x80
 800b1dc:	01c9      	lsls	r1, r1, #7
 800b1de:	430a      	orrs	r2, r1
 800b1e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b1e2:	e070      	b.n	800b2c6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2140      	movs	r1, #64	@ 0x40
 800b1e8:	0018      	movs	r0, r3
 800b1ea:	f000 fcef 	bl	800bbcc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b1ee:	e06a      	b.n	800b2c6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2240      	movs	r2, #64	@ 0x40
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	d058      	beq.n	800b2aa <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2240      	movs	r2, #64	@ 0x40
 800b1fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b1fe:	d054      	beq.n	800b2aa <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2241      	movs	r2, #65	@ 0x41
 800b204:	5c9b      	ldrb	r3, [r3, r2]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b22      	cmp	r3, #34	@ 0x22
 800b20a:	d101      	bne.n	800b210 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800b20c:	4b33      	ldr	r3, [pc, #204]	@ (800b2dc <I2C_Mem_ISR_DMA+0x234>)
 800b20e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b214:	b29b      	uxth	r3, r3
 800b216:	2bff      	cmp	r3, #255	@ 0xff
 800b218:	d911      	bls.n	800b23e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	22ff      	movs	r2, #255	@ 0xff
 800b21e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b224:	b299      	uxth	r1, r3
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	2380      	movs	r3, #128	@ 0x80
 800b22e:	045c      	lsls	r4, r3, #17
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	0023      	movs	r3, r4
 800b238:	f000 feee 	bl	800c018 <I2C_TransferConfig>
 800b23c:	e012      	b.n	800b264 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b242:	b29a      	uxth	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b24c:	b299      	uxth	r1, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b252:	b2da      	uxtb	r2, r3
 800b254:	2380      	movs	r3, #128	@ 0x80
 800b256:	049c      	lsls	r4, r3, #18
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	0023      	movs	r3, r4
 800b260:	f000 feda 	bl	800c018 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b268:	b29a      	uxth	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	b29a      	uxth	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2241      	movs	r2, #65	@ 0x41
 800b27a:	5c9b      	ldrb	r3, [r3, r2]
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b22      	cmp	r3, #34	@ 0x22
 800b280:	d109      	bne.n	800b296 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2180      	movs	r1, #128	@ 0x80
 800b28e:	0209      	lsls	r1, r1, #8
 800b290:	430a      	orrs	r2, r1
 800b292:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b294:	e017      	b.n	800b2c6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2180      	movs	r1, #128	@ 0x80
 800b2a2:	01c9      	lsls	r1, r1, #7
 800b2a4:	430a      	orrs	r2, r1
 800b2a6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b2a8:	e00d      	b.n	800b2c6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	d009      	beq.n	800b2c6 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b2b8:	d005      	beq.n	800b2c6 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	0011      	movs	r1, r2
 800b2c0:	0018      	movs	r0, r3
 800b2c2:	f000 fa3d 	bl	800b740 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2240      	movs	r2, #64	@ 0x40
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	0018      	movs	r0, r3
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	b007      	add	sp, #28
 800b2d6:	bd90      	pop	{r4, r7, pc}
 800b2d8:	80002000 	.word	0x80002000
 800b2dc:	80002400 	.word	0x80002400

0800b2e0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2240      	movs	r2, #64	@ 0x40
 800b2fa:	5c9b      	ldrb	r3, [r3, r2]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d101      	bne.n	800b304 <I2C_Slave_ISR_DMA+0x24>
 800b300:	2302      	movs	r3, #2
 800b302:	e0cd      	b.n	800b4a0 <I2C_Slave_ISR_DMA+0x1c0>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2240      	movs	r2, #64	@ 0x40
 800b308:	2101      	movs	r1, #1
 800b30a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2220      	movs	r2, #32
 800b310:	4013      	ands	r3, r2
 800b312:	d009      	beq.n	800b328 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2220      	movs	r2, #32
 800b318:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b31a:	d005      	beq.n	800b328 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	0011      	movs	r1, r2
 800b322:	0018      	movs	r0, r3
 800b324:	f000 fada 	bl	800b8dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2210      	movs	r2, #16
 800b32c:	4013      	ands	r3, r2
 800b32e:	d100      	bne.n	800b332 <I2C_Slave_ISR_DMA+0x52>
 800b330:	e0a3      	b.n	800b47a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2210      	movs	r2, #16
 800b336:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b338:	d100      	bne.n	800b33c <I2C_Slave_ISR_DMA+0x5c>
 800b33a:	e09e      	b.n	800b47a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	2380      	movs	r3, #128	@ 0x80
 800b340:	01db      	lsls	r3, r3, #7
 800b342:	4013      	ands	r3, r2
 800b344:	d105      	bne.n	800b352 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	2380      	movs	r3, #128	@ 0x80
 800b34a:	021b      	lsls	r3, r3, #8
 800b34c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b34e:	d100      	bne.n	800b352 <I2C_Slave_ISR_DMA+0x72>
 800b350:	e08c      	b.n	800b46c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00c      	beq.n	800b374 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	2380      	movs	r3, #128	@ 0x80
 800b35e:	021b      	lsls	r3, r3, #8
 800b360:	4013      	ands	r3, r2
 800b362:	d007      	beq.n	800b374 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d101      	bne.n	800b374 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800b370:	2301      	movs	r3, #1
 800b372:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00c      	beq.n	800b396 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	2380      	movs	r3, #128	@ 0x80
 800b380:	01db      	lsls	r3, r3, #7
 800b382:	4013      	ands	r3, r2
 800b384:	d007      	beq.n	800b396 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800b392:	2301      	movs	r3, #1
 800b394:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d12d      	bne.n	800b3f8 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2241      	movs	r2, #65	@ 0x41
 800b3a0:	5c9b      	ldrb	r3, [r3, r2]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b28      	cmp	r3, #40	@ 0x28
 800b3a6:	d10b      	bne.n	800b3c0 <I2C_Slave_ISR_DMA+0xe0>
 800b3a8:	69ba      	ldr	r2, [r7, #24]
 800b3aa:	2380      	movs	r3, #128	@ 0x80
 800b3ac:	049b      	lsls	r3, r3, #18
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d106      	bne.n	800b3c0 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	0011      	movs	r1, r2
 800b3b8:	0018      	movs	r0, r3
 800b3ba:	f000 fbaf 	bl	800bb1c <I2C_ITListenCplt>
 800b3be:	e054      	b.n	800b46a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2241      	movs	r2, #65	@ 0x41
 800b3c4:	5c9b      	ldrb	r3, [r3, r2]
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b29      	cmp	r3, #41	@ 0x29
 800b3ca:	d110      	bne.n	800b3ee <I2C_Slave_ISR_DMA+0x10e>
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	4a36      	ldr	r2, [pc, #216]	@ (800b4a8 <I2C_Slave_ISR_DMA+0x1c8>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d00c      	beq.n	800b3ee <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2210      	movs	r2, #16
 800b3da:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	0018      	movs	r0, r3
 800b3e0:	f000 fd1f 	bl	800be22 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	0018      	movs	r0, r3
 800b3e8:	f000 f946 	bl	800b678 <I2C_ITSlaveSeqCplt>
 800b3ec:	e03d      	b.n	800b46a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2210      	movs	r2, #16
 800b3f4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b3f6:	e03e      	b.n	800b476 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2210      	movs	r2, #16
 800b3fe:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b404:	2204      	movs	r2, #4
 800b406:	431a      	orrs	r2, r3
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b40c:	2317      	movs	r3, #23
 800b40e:	18fb      	adds	r3, r7, r3
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	2141      	movs	r1, #65	@ 0x41
 800b414:	5c52      	ldrb	r2, [r2, r1]
 800b416:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d004      	beq.n	800b428 <I2C_Slave_ISR_DMA+0x148>
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	2380      	movs	r3, #128	@ 0x80
 800b422:	045b      	lsls	r3, r3, #17
 800b424:	429a      	cmp	r2, r3
 800b426:	d126      	bne.n	800b476 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b428:	2217      	movs	r2, #23
 800b42a:	18bb      	adds	r3, r7, r2
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b21      	cmp	r3, #33	@ 0x21
 800b430:	d003      	beq.n	800b43a <I2C_Slave_ISR_DMA+0x15a>
 800b432:	18bb      	adds	r3, r7, r2
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	2b29      	cmp	r3, #41	@ 0x29
 800b438:	d103      	bne.n	800b442 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2221      	movs	r2, #33	@ 0x21
 800b43e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b440:	e00b      	b.n	800b45a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b442:	2217      	movs	r2, #23
 800b444:	18bb      	adds	r3, r7, r2
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b22      	cmp	r3, #34	@ 0x22
 800b44a:	d003      	beq.n	800b454 <I2C_Slave_ISR_DMA+0x174>
 800b44c:	18bb      	adds	r3, r7, r2
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b2a      	cmp	r3, #42	@ 0x2a
 800b452:	d102      	bne.n	800b45a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2222      	movs	r2, #34	@ 0x22
 800b458:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	0011      	movs	r1, r2
 800b462:	0018      	movs	r0, r3
 800b464:	f000 fbb2 	bl	800bbcc <I2C_ITError>
      if (treatdmanack == 1U)
 800b468:	e005      	b.n	800b476 <I2C_Slave_ISR_DMA+0x196>
 800b46a:	e004      	b.n	800b476 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2210      	movs	r2, #16
 800b472:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b474:	e00f      	b.n	800b496 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800b476:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b478:	e00d      	b.n	800b496 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2208      	movs	r2, #8
 800b47e:	4013      	ands	r3, r2
 800b480:	d009      	beq.n	800b496 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2208      	movs	r2, #8
 800b486:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b488:	d005      	beq.n	800b496 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	0011      	movs	r1, r2
 800b490:	0018      	movs	r0, r3
 800b492:	f000 f80b 	bl	800b4ac <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2240      	movs	r2, #64	@ 0x40
 800b49a:	2100      	movs	r1, #0
 800b49c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	0018      	movs	r0, r3
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	b008      	add	sp, #32
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	ffff0000 	.word	0xffff0000

0800b4ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b4ac:	b5b0      	push	{r4, r5, r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2241      	movs	r2, #65	@ 0x41
 800b4ba:	5c9b      	ldrb	r3, [r3, r2]
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	001a      	movs	r2, r3
 800b4c0:	2328      	movs	r3, #40	@ 0x28
 800b4c2:	4013      	ands	r3, r2
 800b4c4:	2b28      	cmp	r3, #40	@ 0x28
 800b4c6:	d000      	beq.n	800b4ca <I2C_ITAddrCplt+0x1e>
 800b4c8:	e088      	b.n	800b5dc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	0c1b      	lsrs	r3, r3, #16
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	250f      	movs	r5, #15
 800b4d6:	197b      	adds	r3, r7, r5
 800b4d8:	2101      	movs	r1, #1
 800b4da:	400a      	ands	r2, r1
 800b4dc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	0c1b      	lsrs	r3, r3, #16
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	200c      	movs	r0, #12
 800b4ea:	183b      	adds	r3, r7, r0
 800b4ec:	21fe      	movs	r1, #254	@ 0xfe
 800b4ee:	400a      	ands	r2, r1
 800b4f0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	240a      	movs	r4, #10
 800b4fc:	193b      	adds	r3, r7, r4
 800b4fe:	0592      	lsls	r2, r2, #22
 800b500:	0d92      	lsrs	r2, r2, #22
 800b502:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	2308      	movs	r3, #8
 800b50e:	18fb      	adds	r3, r7, r3
 800b510:	21fe      	movs	r1, #254	@ 0xfe
 800b512:	400a      	ands	r2, r1
 800b514:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d148      	bne.n	800b5b0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b51e:	0021      	movs	r1, r4
 800b520:	187b      	adds	r3, r7, r1
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	09db      	lsrs	r3, r3, #7
 800b526:	b29a      	uxth	r2, r3
 800b528:	183b      	adds	r3, r7, r0
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	4053      	eors	r3, r2
 800b52e:	b29b      	uxth	r3, r3
 800b530:	001a      	movs	r2, r3
 800b532:	2306      	movs	r3, #6
 800b534:	4013      	ands	r3, r2
 800b536:	d120      	bne.n	800b57a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800b538:	183b      	adds	r3, r7, r0
 800b53a:	187a      	adds	r2, r7, r1
 800b53c:	8812      	ldrh	r2, [r2, #0]
 800b53e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d14c      	bne.n	800b5ec <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2208      	movs	r2, #8
 800b55e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2240      	movs	r2, #64	@ 0x40
 800b564:	2100      	movs	r1, #0
 800b566:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b568:	183b      	adds	r3, r7, r0
 800b56a:	881a      	ldrh	r2, [r3, #0]
 800b56c:	197b      	adds	r3, r7, r5
 800b56e:	7819      	ldrb	r1, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	0018      	movs	r0, r3
 800b574:	f7ff fa39 	bl	800a9ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b578:	e038      	b.n	800b5ec <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800b57a:	240c      	movs	r4, #12
 800b57c:	193b      	adds	r3, r7, r4
 800b57e:	2208      	movs	r2, #8
 800b580:	18ba      	adds	r2, r7, r2
 800b582:	8812      	ldrh	r2, [r2, #0]
 800b584:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b586:	2380      	movs	r3, #128	@ 0x80
 800b588:	021a      	lsls	r2, r3, #8
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	0011      	movs	r1, r2
 800b58e:	0018      	movs	r0, r3
 800b590:	f000 fe0a 	bl	800c1a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2240      	movs	r2, #64	@ 0x40
 800b598:	2100      	movs	r1, #0
 800b59a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b59c:	193b      	adds	r3, r7, r4
 800b59e:	881a      	ldrh	r2, [r3, #0]
 800b5a0:	230f      	movs	r3, #15
 800b5a2:	18fb      	adds	r3, r7, r3
 800b5a4:	7819      	ldrb	r1, [r3, #0]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	0018      	movs	r0, r3
 800b5aa:	f7ff fa1e 	bl	800a9ea <HAL_I2C_AddrCallback>
}
 800b5ae:	e01d      	b.n	800b5ec <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b5b0:	2380      	movs	r3, #128	@ 0x80
 800b5b2:	021a      	lsls	r2, r3, #8
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	0011      	movs	r1, r2
 800b5b8:	0018      	movs	r0, r3
 800b5ba:	f000 fdf5 	bl	800c1a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2240      	movs	r2, #64	@ 0x40
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b5c6:	230c      	movs	r3, #12
 800b5c8:	18fb      	adds	r3, r7, r3
 800b5ca:	881a      	ldrh	r2, [r3, #0]
 800b5cc:	230f      	movs	r3, #15
 800b5ce:	18fb      	adds	r3, r7, r3
 800b5d0:	7819      	ldrb	r1, [r3, #0]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	0018      	movs	r0, r3
 800b5d6:	f7ff fa08 	bl	800a9ea <HAL_I2C_AddrCallback>
}
 800b5da:	e007      	b.n	800b5ec <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2240      	movs	r2, #64	@ 0x40
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	5499      	strb	r1, [r3, r2]
}
 800b5ec:	46c0      	nop			@ (mov r8, r8)
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	b004      	add	sp, #16
 800b5f2:	bdb0      	pop	{r4, r5, r7, pc}

0800b5f4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2242      	movs	r2, #66	@ 0x42
 800b600:	2100      	movs	r1, #0
 800b602:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2241      	movs	r2, #65	@ 0x41
 800b608:	5c9b      	ldrb	r3, [r3, r2]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b21      	cmp	r3, #33	@ 0x21
 800b60e:	d117      	bne.n	800b640 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2241      	movs	r2, #65	@ 0x41
 800b614:	2120      	movs	r1, #32
 800b616:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2211      	movs	r2, #17
 800b61c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2101      	movs	r1, #1
 800b628:	0018      	movs	r0, r3
 800b62a:	f000 fdbd 	bl	800c1a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2240      	movs	r2, #64	@ 0x40
 800b632:	2100      	movs	r1, #0
 800b634:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	0018      	movs	r0, r3
 800b63a:	f7ff f9b6 	bl	800a9aa <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b63e:	e016      	b.n	800b66e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2241      	movs	r2, #65	@ 0x41
 800b644:	2120      	movs	r1, #32
 800b646:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2212      	movs	r2, #18
 800b64c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2102      	movs	r1, #2
 800b658:	0018      	movs	r0, r3
 800b65a:	f000 fda5 	bl	800c1a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2240      	movs	r2, #64	@ 0x40
 800b662:	2100      	movs	r1, #0
 800b664:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	0018      	movs	r0, r3
 800b66a:	f7ff f9a6 	bl	800a9ba <HAL_I2C_MasterRxCpltCallback>
}
 800b66e:	46c0      	nop			@ (mov r8, r8)
 800b670:	46bd      	mov	sp, r7
 800b672:	b002      	add	sp, #8
 800b674:	bd80      	pop	{r7, pc}
	...

0800b678 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2242      	movs	r2, #66	@ 0x42
 800b68c:	2100      	movs	r1, #0
 800b68e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	2380      	movs	r3, #128	@ 0x80
 800b694:	01db      	lsls	r3, r3, #7
 800b696:	4013      	ands	r3, r2
 800b698:	d008      	beq.n	800b6ac <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4924      	ldr	r1, [pc, #144]	@ (800b738 <I2C_ITSlaveSeqCplt+0xc0>)
 800b6a6:	400a      	ands	r2, r1
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	e00c      	b.n	800b6c6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	2380      	movs	r3, #128	@ 0x80
 800b6b0:	021b      	lsls	r3, r3, #8
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	d007      	beq.n	800b6c6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	491e      	ldr	r1, [pc, #120]	@ (800b73c <I2C_ITSlaveSeqCplt+0xc4>)
 800b6c2:	400a      	ands	r2, r1
 800b6c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2241      	movs	r2, #65	@ 0x41
 800b6ca:	5c9b      	ldrb	r3, [r3, r2]
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b29      	cmp	r3, #41	@ 0x29
 800b6d0:	d114      	bne.n	800b6fc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2241      	movs	r2, #65	@ 0x41
 800b6d6:	2128      	movs	r1, #40	@ 0x28
 800b6d8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2221      	movs	r2, #33	@ 0x21
 800b6de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	0018      	movs	r0, r3
 800b6e6:	f000 fd5f 	bl	800c1a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2240      	movs	r2, #64	@ 0x40
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	0018      	movs	r0, r3
 800b6f6:	f7ff f968 	bl	800a9ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b6fa:	e019      	b.n	800b730 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2241      	movs	r2, #65	@ 0x41
 800b700:	5c9b      	ldrb	r3, [r3, r2]
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b2a      	cmp	r3, #42	@ 0x2a
 800b706:	d113      	bne.n	800b730 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2241      	movs	r2, #65	@ 0x41
 800b70c:	2128      	movs	r1, #40	@ 0x28
 800b70e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2222      	movs	r2, #34	@ 0x22
 800b714:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2102      	movs	r1, #2
 800b71a:	0018      	movs	r0, r3
 800b71c:	f000 fd44 	bl	800c1a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2240      	movs	r2, #64	@ 0x40
 800b724:	2100      	movs	r1, #0
 800b726:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	0018      	movs	r0, r3
 800b72c:	f7ff f955 	bl	800a9da <HAL_I2C_SlaveRxCpltCallback>
}
 800b730:	46c0      	nop			@ (mov r8, r8)
 800b732:	46bd      	mov	sp, r7
 800b734:	b004      	add	sp, #16
 800b736:	bd80      	pop	{r7, pc}
 800b738:	ffffbfff 	.word	0xffffbfff
 800b73c:	ffff7fff 	.word	0xffff7fff

0800b740 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2220      	movs	r2, #32
 800b754:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2241      	movs	r2, #65	@ 0x41
 800b75a:	5c9b      	ldrb	r3, [r3, r2]
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	2b21      	cmp	r3, #33	@ 0x21
 800b760:	d108      	bne.n	800b774 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2101      	movs	r1, #1
 800b766:	0018      	movs	r0, r3
 800b768:	f000 fd1e 	bl	800c1a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2211      	movs	r2, #17
 800b770:	631a      	str	r2, [r3, #48]	@ 0x30
 800b772:	e00d      	b.n	800b790 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2241      	movs	r2, #65	@ 0x41
 800b778:	5c9b      	ldrb	r3, [r3, r2]
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b22      	cmp	r3, #34	@ 0x22
 800b77e:	d107      	bne.n	800b790 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2102      	movs	r1, #2
 800b784:	0018      	movs	r0, r3
 800b786:	f000 fd0f 	bl	800c1a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2212      	movs	r2, #18
 800b78e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685a      	ldr	r2, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	494e      	ldr	r1, [pc, #312]	@ (800b8d4 <I2C_ITMasterCplt+0x194>)
 800b79c:	400a      	ands	r2, r1
 800b79e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a4b      	ldr	r2, [pc, #300]	@ (800b8d8 <I2C_ITMasterCplt+0x198>)
 800b7aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	2210      	movs	r2, #16
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	d009      	beq.n	800b7c8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2210      	movs	r2, #16
 800b7ba:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7c0:	2204      	movs	r2, #4
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2241      	movs	r2, #65	@ 0x41
 800b7cc:	5c9b      	ldrb	r3, [r3, r2]
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b60      	cmp	r3, #96	@ 0x60
 800b7d2:	d109      	bne.n	800b7e8 <I2C_ITMasterCplt+0xa8>
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	2204      	movs	r2, #4
 800b7d8:	4013      	ands	r3, r2
 800b7da:	d005      	beq.n	800b7e8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	0018      	movs	r0, r3
 800b7ec:	f000 fb19 	bl	800be22 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7f4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2241      	movs	r2, #65	@ 0x41
 800b7fa:	5c9b      	ldrb	r3, [r3, r2]
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	2b60      	cmp	r3, #96	@ 0x60
 800b800:	d002      	beq.n	800b808 <I2C_ITMasterCplt+0xc8>
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d007      	beq.n	800b818 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	0011      	movs	r1, r2
 800b810:	0018      	movs	r0, r3
 800b812:	f000 f9db 	bl	800bbcc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b816:	e058      	b.n	800b8ca <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2241      	movs	r2, #65	@ 0x41
 800b81c:	5c9b      	ldrb	r3, [r3, r2]
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b21      	cmp	r3, #33	@ 0x21
 800b822:	d126      	bne.n	800b872 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2241      	movs	r2, #65	@ 0x41
 800b828:	2120      	movs	r1, #32
 800b82a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2242      	movs	r2, #66	@ 0x42
 800b836:	5c9b      	ldrb	r3, [r3, r2]
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b40      	cmp	r3, #64	@ 0x40
 800b83c:	d10c      	bne.n	800b858 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2242      	movs	r2, #66	@ 0x42
 800b842:	2100      	movs	r1, #0
 800b844:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2240      	movs	r2, #64	@ 0x40
 800b84a:	2100      	movs	r1, #0
 800b84c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	0018      	movs	r0, r3
 800b852:	f7ff f8e2 	bl	800aa1a <HAL_I2C_MemTxCpltCallback>
}
 800b856:	e038      	b.n	800b8ca <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2242      	movs	r2, #66	@ 0x42
 800b85c:	2100      	movs	r1, #0
 800b85e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2240      	movs	r2, #64	@ 0x40
 800b864:	2100      	movs	r1, #0
 800b866:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	0018      	movs	r0, r3
 800b86c:	f7ff f89d 	bl	800a9aa <HAL_I2C_MasterTxCpltCallback>
}
 800b870:	e02b      	b.n	800b8ca <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2241      	movs	r2, #65	@ 0x41
 800b876:	5c9b      	ldrb	r3, [r3, r2]
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	2b22      	cmp	r3, #34	@ 0x22
 800b87c:	d125      	bne.n	800b8ca <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2241      	movs	r2, #65	@ 0x41
 800b882:	2120      	movs	r1, #32
 800b884:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2242      	movs	r2, #66	@ 0x42
 800b890:	5c9b      	ldrb	r3, [r3, r2]
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b40      	cmp	r3, #64	@ 0x40
 800b896:	d10c      	bne.n	800b8b2 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2242      	movs	r2, #66	@ 0x42
 800b89c:	2100      	movs	r1, #0
 800b89e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2240      	movs	r2, #64	@ 0x40
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	0018      	movs	r0, r3
 800b8ac:	f7ff f8bd 	bl	800aa2a <HAL_I2C_MemRxCpltCallback>
}
 800b8b0:	e00b      	b.n	800b8ca <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2242      	movs	r2, #66	@ 0x42
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2240      	movs	r2, #64	@ 0x40
 800b8be:	2100      	movs	r1, #0
 800b8c0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	0018      	movs	r0, r3
 800b8c6:	f7ff f878 	bl	800a9ba <HAL_I2C_MasterRxCpltCallback>
}
 800b8ca:	46c0      	nop			@ (mov r8, r8)
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	b006      	add	sp, #24
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	46c0      	nop			@ (mov r8, r8)
 800b8d4:	fe00e800 	.word	0xfe00e800
 800b8d8:	ffff0000 	.word	0xffff0000

0800b8dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b8f2:	200f      	movs	r0, #15
 800b8f4:	183b      	adds	r3, r7, r0
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	2141      	movs	r1, #65	@ 0x41
 800b8fa:	5c52      	ldrb	r2, [r2, r1]
 800b8fc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2220      	movs	r2, #32
 800b904:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b906:	183b      	adds	r3, r7, r0
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	2b21      	cmp	r3, #33	@ 0x21
 800b90c:	d003      	beq.n	800b916 <I2C_ITSlaveCplt+0x3a>
 800b90e:	183b      	adds	r3, r7, r0
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	2b29      	cmp	r3, #41	@ 0x29
 800b914:	d109      	bne.n	800b92a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b916:	4a7b      	ldr	r2, [pc, #492]	@ (800bb04 <I2C_ITSlaveCplt+0x228>)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	0011      	movs	r1, r2
 800b91c:	0018      	movs	r0, r3
 800b91e:	f000 fc43 	bl	800c1a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2221      	movs	r2, #33	@ 0x21
 800b926:	631a      	str	r2, [r3, #48]	@ 0x30
 800b928:	e011      	b.n	800b94e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b92a:	220f      	movs	r2, #15
 800b92c:	18bb      	adds	r3, r7, r2
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b22      	cmp	r3, #34	@ 0x22
 800b932:	d003      	beq.n	800b93c <I2C_ITSlaveCplt+0x60>
 800b934:	18bb      	adds	r3, r7, r2
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b2a      	cmp	r3, #42	@ 0x2a
 800b93a:	d108      	bne.n	800b94e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b93c:	4a72      	ldr	r2, [pc, #456]	@ (800bb08 <I2C_ITSlaveCplt+0x22c>)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	0011      	movs	r1, r2
 800b942:	0018      	movs	r0, r3
 800b944:	f000 fc30 	bl	800c1a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2222      	movs	r2, #34	@ 0x22
 800b94c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	685a      	ldr	r2, [r3, #4]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2180      	movs	r1, #128	@ 0x80
 800b95a:	0209      	lsls	r1, r1, #8
 800b95c:	430a      	orrs	r2, r1
 800b95e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4968      	ldr	r1, [pc, #416]	@ (800bb0c <I2C_ITSlaveCplt+0x230>)
 800b96c:	400a      	ands	r2, r1
 800b96e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	0018      	movs	r0, r3
 800b974:	f000 fa55 	bl	800be22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	2380      	movs	r3, #128	@ 0x80
 800b97c:	01db      	lsls	r3, r3, #7
 800b97e:	4013      	ands	r3, r2
 800b980:	d013      	beq.n	800b9aa <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4960      	ldr	r1, [pc, #384]	@ (800bb10 <I2C_ITSlaveCplt+0x234>)
 800b98e:	400a      	ands	r2, r1
 800b990:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b996:	2b00      	cmp	r3, #0
 800b998:	d01f      	beq.n	800b9da <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b9a8:	e017      	b.n	800b9da <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	2380      	movs	r3, #128	@ 0x80
 800b9ae:	021b      	lsls	r3, r3, #8
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	d012      	beq.n	800b9da <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4955      	ldr	r1, [pc, #340]	@ (800bb14 <I2C_ITSlaveCplt+0x238>)
 800b9c0:	400a      	ands	r2, r1
 800b9c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d006      	beq.n	800b9da <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2204      	movs	r2, #4
 800b9de:	4013      	ands	r3, r2
 800b9e0:	d020      	beq.n	800ba24 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	4393      	bics	r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9f4:	b2d2      	uxtb	r2, r2
 800b9f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9fc:	1c5a      	adds	r2, r3, #1
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00c      	beq.n	800ba24 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba32:	2204      	movs	r2, #4
 800ba34:	431a      	orrs	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2242      	movs	r2, #66	@ 0x42
 800ba3e:	2100      	movs	r1, #0
 800ba40:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d013      	beq.n	800ba78 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	0011      	movs	r1, r2
 800ba58:	0018      	movs	r0, r3
 800ba5a:	f000 f8b7 	bl	800bbcc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2241      	movs	r2, #65	@ 0x41
 800ba62:	5c9b      	ldrb	r3, [r3, r2]
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b28      	cmp	r3, #40	@ 0x28
 800ba68:	d147      	bne.n	800bafa <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	0011      	movs	r1, r2
 800ba70:	0018      	movs	r0, r3
 800ba72:	f000 f853 	bl	800bb1c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ba76:	e040      	b.n	800bafa <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba7c:	4a26      	ldr	r2, [pc, #152]	@ (800bb18 <I2C_ITSlaveCplt+0x23c>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d016      	beq.n	800bab0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	0018      	movs	r0, r3
 800ba86:	f7ff fdf7 	bl	800b678 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a22      	ldr	r2, [pc, #136]	@ (800bb18 <I2C_ITSlaveCplt+0x23c>)
 800ba8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2241      	movs	r2, #65	@ 0x41
 800ba94:	2120      	movs	r1, #32
 800ba96:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2240      	movs	r2, #64	@ 0x40
 800baa2:	2100      	movs	r1, #0
 800baa4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	0018      	movs	r0, r3
 800baaa:	f7fe ffae 	bl	800aa0a <HAL_I2C_ListenCpltCallback>
}
 800baae:	e024      	b.n	800bafa <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2241      	movs	r2, #65	@ 0x41
 800bab4:	5c9b      	ldrb	r3, [r3, r2]
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b22      	cmp	r3, #34	@ 0x22
 800baba:	d10f      	bne.n	800badc <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2241      	movs	r2, #65	@ 0x41
 800bac0:	2120      	movs	r1, #32
 800bac2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2240      	movs	r2, #64	@ 0x40
 800bace:	2100      	movs	r1, #0
 800bad0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	0018      	movs	r0, r3
 800bad6:	f7fe ff80 	bl	800a9da <HAL_I2C_SlaveRxCpltCallback>
}
 800bada:	e00e      	b.n	800bafa <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2241      	movs	r2, #65	@ 0x41
 800bae0:	2120      	movs	r1, #32
 800bae2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2240      	movs	r2, #64	@ 0x40
 800baee:	2100      	movs	r1, #0
 800baf0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	0018      	movs	r0, r3
 800baf6:	f7fe ff68 	bl	800a9ca <HAL_I2C_SlaveTxCpltCallback>
}
 800bafa:	46c0      	nop			@ (mov r8, r8)
 800bafc:	46bd      	mov	sp, r7
 800bafe:	b006      	add	sp, #24
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	46c0      	nop			@ (mov r8, r8)
 800bb04:	00008001 	.word	0x00008001
 800bb08:	00008002 	.word	0x00008002
 800bb0c:	fe00e800 	.word	0xfe00e800
 800bb10:	ffffbfff 	.word	0xffffbfff
 800bb14:	ffff7fff 	.word	0xffff7fff
 800bb18:	ffff0000 	.word	0xffff0000

0800bb1c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a26      	ldr	r2, [pc, #152]	@ (800bbc4 <I2C_ITListenCplt+0xa8>)
 800bb2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2241      	movs	r2, #65	@ 0x41
 800bb36:	2120      	movs	r1, #32
 800bb38:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2242      	movs	r2, #66	@ 0x42
 800bb3e:	2100      	movs	r1, #0
 800bb40:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2204      	movs	r2, #4
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	d022      	beq.n	800bb96 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5a:	b2d2      	uxtb	r2, r2
 800bb5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb62:	1c5a      	adds	r2, r3, #1
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d012      	beq.n	800bb96 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb74:	3b01      	subs	r3, #1
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	3b01      	subs	r3, #1
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb8e:	2204      	movs	r2, #4
 800bb90:	431a      	orrs	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bb96:	4a0c      	ldr	r2, [pc, #48]	@ (800bbc8 <I2C_ITListenCplt+0xac>)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	0011      	movs	r1, r2
 800bb9c:	0018      	movs	r0, r3
 800bb9e:	f000 fb03 	bl	800c1a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2210      	movs	r2, #16
 800bba8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2240      	movs	r2, #64	@ 0x40
 800bbae:	2100      	movs	r1, #0
 800bbb0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	0018      	movs	r0, r3
 800bbb6:	f7fe ff28 	bl	800aa0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800bbba:	46c0      	nop			@ (mov r8, r8)
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	b002      	add	sp, #8
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	46c0      	nop			@ (mov r8, r8)
 800bbc4:	ffff0000 	.word	0xffff0000
 800bbc8:	00008003 	.word	0x00008003

0800bbcc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bbd6:	200f      	movs	r0, #15
 800bbd8:	183b      	adds	r3, r7, r0
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	2141      	movs	r1, #65	@ 0x41
 800bbde:	5c52      	ldrb	r2, [r2, r1]
 800bbe0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2242      	movs	r2, #66	@ 0x42
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a72      	ldr	r2, [pc, #456]	@ (800bdb8 <I2C_ITError+0x1ec>)
 800bbee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	431a      	orrs	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bc02:	183b      	adds	r3, r7, r0
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	2b28      	cmp	r3, #40	@ 0x28
 800bc08:	d007      	beq.n	800bc1a <I2C_ITError+0x4e>
 800bc0a:	183b      	adds	r3, r7, r0
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b29      	cmp	r3, #41	@ 0x29
 800bc10:	d003      	beq.n	800bc1a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800bc12:	183b      	adds	r3, r7, r0
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc18:	d10c      	bne.n	800bc34 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2103      	movs	r1, #3
 800bc1e:	0018      	movs	r0, r3
 800bc20:	f000 fac2 	bl	800c1a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2241      	movs	r2, #65	@ 0x41
 800bc28:	2128      	movs	r1, #40	@ 0x28
 800bc2a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a63      	ldr	r2, [pc, #396]	@ (800bdbc <I2C_ITError+0x1f0>)
 800bc30:	635a      	str	r2, [r3, #52]	@ 0x34
 800bc32:	e032      	b.n	800bc9a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bc34:	4a62      	ldr	r2, [pc, #392]	@ (800bdc0 <I2C_ITError+0x1f4>)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	0011      	movs	r1, r2
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	f000 fab4 	bl	800c1a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	0018      	movs	r0, r3
 800bc44:	f000 f8ed 	bl	800be22 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2241      	movs	r2, #65	@ 0x41
 800bc4c:	5c9b      	ldrb	r3, [r3, r2]
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b60      	cmp	r3, #96	@ 0x60
 800bc52:	d01f      	beq.n	800bc94 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2241      	movs	r2, #65	@ 0x41
 800bc58:	2120      	movs	r1, #32
 800bc5a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	2220      	movs	r2, #32
 800bc64:	4013      	ands	r3, r2
 800bc66:	2b20      	cmp	r3, #32
 800bc68:	d114      	bne.n	800bc94 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	699b      	ldr	r3, [r3, #24]
 800bc70:	2210      	movs	r2, #16
 800bc72:	4013      	ands	r3, r2
 800bc74:	2b10      	cmp	r3, #16
 800bc76:	d109      	bne.n	800bc8c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2210      	movs	r2, #16
 800bc7e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc84:	2204      	movs	r2, #4
 800bc86:	431a      	orrs	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2220      	movs	r2, #32
 800bc92:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc9e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d03b      	beq.n	800bd20 <I2C_ITError+0x154>
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2b11      	cmp	r3, #17
 800bcac:	d002      	beq.n	800bcb4 <I2C_ITError+0xe8>
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	2b21      	cmp	r3, #33	@ 0x21
 800bcb2:	d135      	bne.n	800bd20 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	2380      	movs	r3, #128	@ 0x80
 800bcbc:	01db      	lsls	r3, r3, #7
 800bcbe:	401a      	ands	r2, r3
 800bcc0:	2380      	movs	r3, #128	@ 0x80
 800bcc2:	01db      	lsls	r3, r3, #7
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d107      	bne.n	800bcd8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	493c      	ldr	r1, [pc, #240]	@ (800bdc4 <I2C_ITError+0x1f8>)
 800bcd4:	400a      	ands	r2, r1
 800bcd6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f7fe f896 	bl	8009e0e <HAL_DMA_GetState>
 800bce2:	0003      	movs	r3, r0
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d016      	beq.n	800bd16 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcec:	4a36      	ldr	r2, [pc, #216]	@ (800bdc8 <I2C_ITError+0x1fc>)
 800bcee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2240      	movs	r2, #64	@ 0x40
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcfc:	0018      	movs	r0, r3
 800bcfe:	f7fd ff91 	bl	8009c24 <HAL_DMA_Abort_IT>
 800bd02:	1e03      	subs	r3, r0, #0
 800bd04:	d051      	beq.n	800bdaa <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd10:	0018      	movs	r0, r3
 800bd12:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bd14:	e049      	b.n	800bdaa <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	0018      	movs	r0, r3
 800bd1a:	f000 f859 	bl	800bdd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bd1e:	e044      	b.n	800bdaa <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d03b      	beq.n	800bda0 <I2C_ITError+0x1d4>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	2b12      	cmp	r3, #18
 800bd2c:	d002      	beq.n	800bd34 <I2C_ITError+0x168>
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	2b22      	cmp	r3, #34	@ 0x22
 800bd32:	d135      	bne.n	800bda0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	2380      	movs	r3, #128	@ 0x80
 800bd3c:	021b      	lsls	r3, r3, #8
 800bd3e:	401a      	ands	r2, r3
 800bd40:	2380      	movs	r3, #128	@ 0x80
 800bd42:	021b      	lsls	r3, r3, #8
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d107      	bne.n	800bd58 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	491e      	ldr	r1, [pc, #120]	@ (800bdcc <I2C_ITError+0x200>)
 800bd54:	400a      	ands	r2, r1
 800bd56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd5c:	0018      	movs	r0, r3
 800bd5e:	f7fe f856 	bl	8009e0e <HAL_DMA_GetState>
 800bd62:	0003      	movs	r3, r0
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d016      	beq.n	800bd96 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd6c:	4a16      	ldr	r2, [pc, #88]	@ (800bdc8 <I2C_ITError+0x1fc>)
 800bd6e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2240      	movs	r2, #64	@ 0x40
 800bd74:	2100      	movs	r1, #0
 800bd76:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f7fd ff51 	bl	8009c24 <HAL_DMA_Abort_IT>
 800bd82:	1e03      	subs	r3, r0, #0
 800bd84:	d013      	beq.n	800bdae <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd90:	0018      	movs	r0, r3
 800bd92:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd94:	e00b      	b.n	800bdae <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	0018      	movs	r0, r3
 800bd9a:	f000 f819 	bl	800bdd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd9e:	e006      	b.n	800bdae <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	0018      	movs	r0, r3
 800bda4:	f000 f814 	bl	800bdd0 <I2C_TreatErrorCallback>
  }
}
 800bda8:	e002      	b.n	800bdb0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bdaa:	46c0      	nop			@ (mov r8, r8)
 800bdac:	e000      	b.n	800bdb0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bdae:	46c0      	nop			@ (mov r8, r8)
}
 800bdb0:	46c0      	nop			@ (mov r8, r8)
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	b004      	add	sp, #16
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	ffff0000 	.word	0xffff0000
 800bdbc:	0800acb1 	.word	0x0800acb1
 800bdc0:	00008003 	.word	0x00008003
 800bdc4:	ffffbfff 	.word	0xffffbfff
 800bdc8:	0800bfdb 	.word	0x0800bfdb
 800bdcc:	ffff7fff 	.word	0xffff7fff

0800bdd0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2241      	movs	r2, #65	@ 0x41
 800bddc:	5c9b      	ldrb	r3, [r3, r2]
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	2b60      	cmp	r3, #96	@ 0x60
 800bde2:	d10f      	bne.n	800be04 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2241      	movs	r2, #65	@ 0x41
 800bde8:	2120      	movs	r1, #32
 800bdea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2240      	movs	r2, #64	@ 0x40
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	0018      	movs	r0, r3
 800bdfe:	f7fe fe24 	bl	800aa4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800be02:	e00a      	b.n	800be1a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2240      	movs	r2, #64	@ 0x40
 800be0e:	2100      	movs	r1, #0
 800be10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	0018      	movs	r0, r3
 800be16:	f7fe fe10 	bl	800aa3a <HAL_I2C_ErrorCallback>
}
 800be1a:	46c0      	nop			@ (mov r8, r8)
 800be1c:	46bd      	mov	sp, r7
 800be1e:	b002      	add	sp, #8
 800be20:	bd80      	pop	{r7, pc}

0800be22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	2202      	movs	r2, #2
 800be32:	4013      	ands	r3, r2
 800be34:	2b02      	cmp	r3, #2
 800be36:	d103      	bne.n	800be40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2200      	movs	r2, #0
 800be3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	699b      	ldr	r3, [r3, #24]
 800be46:	2201      	movs	r2, #1
 800be48:	4013      	ands	r3, r2
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d007      	beq.n	800be5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	699a      	ldr	r2, [r3, #24]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2101      	movs	r1, #1
 800be5a:	430a      	orrs	r2, r1
 800be5c:	619a      	str	r2, [r3, #24]
  }
}
 800be5e:	46c0      	nop			@ (mov r8, r8)
 800be60:	46bd      	mov	sp, r7
 800be62:	b002      	add	sp, #8
 800be64:	bd80      	pop	{r7, pc}
	...

0800be68 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be74:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4920      	ldr	r1, [pc, #128]	@ (800bf04 <I2C_DMAMasterTransmitCplt+0x9c>)
 800be82:	400a      	ands	r2, r1
 800be84:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d105      	bne.n	800be9c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2120      	movs	r1, #32
 800be94:	0018      	movs	r0, r3
 800be96:	f000 f8f9 	bl	800c08c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800be9a:	e02e      	b.n	800befa <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800bea4:	189a      	adds	r2, r3, r2
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800beae:	b29b      	uxth	r3, r3
 800beb0:	2bff      	cmp	r3, #255	@ 0xff
 800beb2:	d903      	bls.n	800bebc <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	22ff      	movs	r2, #255	@ 0xff
 800beb8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800beba:	e004      	b.n	800bec6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	0019      	movs	r1, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3328      	adds	r3, #40	@ 0x28
 800bed6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800bedc:	f7fd fdfc 	bl	8009ad8 <HAL_DMA_Start_IT>
 800bee0:	1e03      	subs	r3, r0, #0
 800bee2:	d005      	beq.n	800bef0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2110      	movs	r1, #16
 800bee8:	0018      	movs	r0, r3
 800beea:	f7ff fe6f 	bl	800bbcc <I2C_ITError>
}
 800beee:	e004      	b.n	800befa <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2140      	movs	r1, #64	@ 0x40
 800bef4:	0018      	movs	r0, r3
 800bef6:	f000 f8c9 	bl	800c08c <I2C_Enable_IRQ>
}
 800befa:	46c0      	nop			@ (mov r8, r8)
 800befc:	46bd      	mov	sp, r7
 800befe:	b004      	add	sp, #16
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	46c0      	nop			@ (mov r8, r8)
 800bf04:	ffffbfff 	.word	0xffffbfff

0800bf08 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf14:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4920      	ldr	r1, [pc, #128]	@ (800bfa4 <I2C_DMAMasterReceiveCplt+0x9c>)
 800bf22:	400a      	ands	r2, r1
 800bf24:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d105      	bne.n	800bf3c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2120      	movs	r1, #32
 800bf34:	0018      	movs	r0, r3
 800bf36:	f000 f8a9 	bl	800c08c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800bf3a:	e02e      	b.n	800bf9a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800bf44:	189a      	adds	r2, r3, r2
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	2bff      	cmp	r3, #255	@ 0xff
 800bf52:	d903      	bls.n	800bf5c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	22ff      	movs	r2, #255	@ 0xff
 800bf58:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bf5a:	e004      	b.n	800bf66 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3324      	adds	r3, #36	@ 0x24
 800bf70:	0019      	movs	r1, r3
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf76:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800bf7c:	f7fd fdac 	bl	8009ad8 <HAL_DMA_Start_IT>
 800bf80:	1e03      	subs	r3, r0, #0
 800bf82:	d005      	beq.n	800bf90 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2110      	movs	r1, #16
 800bf88:	0018      	movs	r0, r3
 800bf8a:	f7ff fe1f 	bl	800bbcc <I2C_ITError>
}
 800bf8e:	e004      	b.n	800bf9a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2140      	movs	r1, #64	@ 0x40
 800bf94:	0018      	movs	r0, r3
 800bf96:	f000 f879 	bl	800c08c <I2C_Enable_IRQ>
}
 800bf9a:	46c0      	nop			@ (mov r8, r8)
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	b004      	add	sp, #16
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	46c0      	nop			@ (mov r8, r8)
 800bfa4:	ffff7fff 	.word	0xffff7fff

0800bfa8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2180      	movs	r1, #128	@ 0x80
 800bfc2:	0209      	lsls	r1, r1, #8
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2110      	movs	r1, #16
 800bfcc:	0018      	movs	r0, r3
 800bfce:	f7ff fdfd 	bl	800bbcc <I2C_ITError>
}
 800bfd2:	46c0      	nop			@ (mov r8, r8)
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	b004      	add	sp, #16
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b084      	sub	sp, #16
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d003      	beq.n	800bff8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff4:	2200      	movs	r2, #0
 800bff6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d003      	beq.n	800c008 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c004:	2200      	movs	r2, #0
 800c006:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	0018      	movs	r0, r3
 800c00c:	f7ff fee0 	bl	800bdd0 <I2C_TreatErrorCallback>
}
 800c010:	46c0      	nop			@ (mov r8, r8)
 800c012:	46bd      	mov	sp, r7
 800c014:	b004      	add	sp, #16
 800c016:	bd80      	pop	{r7, pc}

0800c018 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c018:	b590      	push	{r4, r7, lr}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	0008      	movs	r0, r1
 800c022:	0011      	movs	r1, r2
 800c024:	607b      	str	r3, [r7, #4]
 800c026:	240a      	movs	r4, #10
 800c028:	193b      	adds	r3, r7, r4
 800c02a:	1c02      	adds	r2, r0, #0
 800c02c:	801a      	strh	r2, [r3, #0]
 800c02e:	2009      	movs	r0, #9
 800c030:	183b      	adds	r3, r7, r0
 800c032:	1c0a      	adds	r2, r1, #0
 800c034:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c036:	193b      	adds	r3, r7, r4
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	059b      	lsls	r3, r3, #22
 800c03c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c03e:	183b      	adds	r3, r7, r0
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	0419      	lsls	r1, r3, #16
 800c044:	23ff      	movs	r3, #255	@ 0xff
 800c046:	041b      	lsls	r3, r3, #16
 800c048:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c04a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c052:	4313      	orrs	r3, r2
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	085b      	lsrs	r3, r3, #1
 800c058:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c062:	0d51      	lsrs	r1, r2, #21
 800c064:	2280      	movs	r2, #128	@ 0x80
 800c066:	00d2      	lsls	r2, r2, #3
 800c068:	400a      	ands	r2, r1
 800c06a:	4907      	ldr	r1, [pc, #28]	@ (800c088 <I2C_TransferConfig+0x70>)
 800c06c:	430a      	orrs	r2, r1
 800c06e:	43d2      	mvns	r2, r2
 800c070:	401a      	ands	r2, r3
 800c072:	0011      	movs	r1, r2
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	697a      	ldr	r2, [r7, #20]
 800c07a:	430a      	orrs	r2, r1
 800c07c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c07e:	46c0      	nop			@ (mov r8, r8)
 800c080:	46bd      	mov	sp, r7
 800c082:	b007      	add	sp, #28
 800c084:	bd90      	pop	{r4, r7, pc}
 800c086:	46c0      	nop			@ (mov r8, r8)
 800c088:	03ff63ff 	.word	0x03ff63ff

0800c08c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	000a      	movs	r2, r1
 800c096:	1cbb      	adds	r3, r7, #2
 800c098:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c09a:	2300      	movs	r3, #0
 800c09c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0a2:	4b3e      	ldr	r3, [pc, #248]	@ (800c19c <I2C_Enable_IRQ+0x110>)
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d035      	beq.n	800c114 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c0ac:	4b3c      	ldr	r3, [pc, #240]	@ (800c1a0 <I2C_Enable_IRQ+0x114>)
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d030      	beq.n	800c114 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c0b6:	4b3b      	ldr	r3, [pc, #236]	@ (800c1a4 <I2C_Enable_IRQ+0x118>)
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d02b      	beq.n	800c114 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c0bc:	1cbb      	adds	r3, r7, #2
 800c0be:	2200      	movs	r2, #0
 800c0c0:	5e9b      	ldrsh	r3, [r3, r2]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	da03      	bge.n	800c0ce <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	22b8      	movs	r2, #184	@ 0xb8
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c0ce:	1cbb      	adds	r3, r7, #2
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	d003      	beq.n	800c0e0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	22f2      	movs	r2, #242	@ 0xf2
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c0e0:	1cbb      	adds	r3, r7, #2
 800c0e2:	881b      	ldrh	r3, [r3, #0]
 800c0e4:	2202      	movs	r2, #2
 800c0e6:	4013      	ands	r3, r2
 800c0e8:	d003      	beq.n	800c0f2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	22f4      	movs	r2, #244	@ 0xf4
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c0f2:	1cbb      	adds	r3, r7, #2
 800c0f4:	881b      	ldrh	r3, [r3, #0]
 800c0f6:	2b10      	cmp	r3, #16
 800c0f8:	d103      	bne.n	800c102 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2290      	movs	r2, #144	@ 0x90
 800c0fe:	4313      	orrs	r3, r2
 800c100:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c102:	1cbb      	adds	r3, r7, #2
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	2b20      	cmp	r3, #32
 800c108:	d13c      	bne.n	800c184 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2220      	movs	r2, #32
 800c10e:	4313      	orrs	r3, r2
 800c110:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c112:	e037      	b.n	800c184 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c114:	1cbb      	adds	r3, r7, #2
 800c116:	2200      	movs	r2, #0
 800c118:	5e9b      	ldrsh	r3, [r3, r2]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	da03      	bge.n	800c126 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	22b8      	movs	r2, #184	@ 0xb8
 800c122:	4313      	orrs	r3, r2
 800c124:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c126:	1cbb      	adds	r3, r7, #2
 800c128:	881b      	ldrh	r3, [r3, #0]
 800c12a:	2201      	movs	r2, #1
 800c12c:	4013      	ands	r3, r2
 800c12e:	d003      	beq.n	800c138 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	22f2      	movs	r2, #242	@ 0xf2
 800c134:	4313      	orrs	r3, r2
 800c136:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c138:	1cbb      	adds	r3, r7, #2
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	2202      	movs	r2, #2
 800c13e:	4013      	ands	r3, r2
 800c140:	d003      	beq.n	800c14a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	22f4      	movs	r2, #244	@ 0xf4
 800c146:	4313      	orrs	r3, r2
 800c148:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c14a:	1cbb      	adds	r3, r7, #2
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	2b10      	cmp	r3, #16
 800c150:	d103      	bne.n	800c15a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2290      	movs	r2, #144	@ 0x90
 800c156:	4313      	orrs	r3, r2
 800c158:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c15a:	1cbb      	adds	r3, r7, #2
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	2b20      	cmp	r3, #32
 800c160:	d103      	bne.n	800c16a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2260      	movs	r2, #96	@ 0x60
 800c166:	4313      	orrs	r3, r2
 800c168:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c16e:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a4 <I2C_Enable_IRQ+0x118>)
 800c170:	429a      	cmp	r2, r3
 800c172:	d007      	beq.n	800c184 <I2C_Enable_IRQ+0xf8>
 800c174:	1cbb      	adds	r3, r7, #2
 800c176:	881b      	ldrh	r3, [r3, #0]
 800c178:	2b40      	cmp	r3, #64	@ 0x40
 800c17a:	d103      	bne.n	800c184 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2240      	movs	r2, #64	@ 0x40
 800c180:	4313      	orrs	r3, r2
 800c182:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6819      	ldr	r1, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	430a      	orrs	r2, r1
 800c192:	601a      	str	r2, [r3, #0]
}
 800c194:	46c0      	nop			@ (mov r8, r8)
 800c196:	46bd      	mov	sp, r7
 800c198:	b004      	add	sp, #16
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	0800aeb1 	.word	0x0800aeb1
 800c1a0:	0800b2e1 	.word	0x0800b2e1
 800c1a4:	0800b0a9 	.word	0x0800b0a9

0800c1a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	000a      	movs	r2, r1
 800c1b2:	1cbb      	adds	r3, r7, #2
 800c1b4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c1ba:	1cbb      	adds	r3, r7, #2
 800c1bc:	881b      	ldrh	r3, [r3, #0]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	d010      	beq.n	800c1e6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2242      	movs	r2, #66	@ 0x42
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2241      	movs	r2, #65	@ 0x41
 800c1d0:	5c9b      	ldrb	r3, [r3, r2]
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	001a      	movs	r2, r3
 800c1d6:	2328      	movs	r3, #40	@ 0x28
 800c1d8:	4013      	ands	r3, r2
 800c1da:	2b28      	cmp	r3, #40	@ 0x28
 800c1dc:	d003      	beq.n	800c1e6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	22b0      	movs	r2, #176	@ 0xb0
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c1e6:	1cbb      	adds	r3, r7, #2
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	d010      	beq.n	800c212 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2244      	movs	r2, #68	@ 0x44
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2241      	movs	r2, #65	@ 0x41
 800c1fc:	5c9b      	ldrb	r3, [r3, r2]
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	001a      	movs	r2, r3
 800c202:	2328      	movs	r3, #40	@ 0x28
 800c204:	4013      	ands	r3, r2
 800c206:	2b28      	cmp	r3, #40	@ 0x28
 800c208:	d003      	beq.n	800c212 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	22b0      	movs	r2, #176	@ 0xb0
 800c20e:	4313      	orrs	r3, r2
 800c210:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c212:	1cbb      	adds	r3, r7, #2
 800c214:	2200      	movs	r2, #0
 800c216:	5e9b      	ldrsh	r3, [r3, r2]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	da03      	bge.n	800c224 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	22b8      	movs	r2, #184	@ 0xb8
 800c220:	4313      	orrs	r3, r2
 800c222:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c224:	1cbb      	adds	r3, r7, #2
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	2b10      	cmp	r3, #16
 800c22a:	d103      	bne.n	800c234 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2290      	movs	r2, #144	@ 0x90
 800c230:	4313      	orrs	r3, r2
 800c232:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c234:	1cbb      	adds	r3, r7, #2
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	2b20      	cmp	r3, #32
 800c23a:	d103      	bne.n	800c244 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2220      	movs	r2, #32
 800c240:	4313      	orrs	r3, r2
 800c242:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c244:	1cbb      	adds	r3, r7, #2
 800c246:	881b      	ldrh	r3, [r3, #0]
 800c248:	2b40      	cmp	r3, #64	@ 0x40
 800c24a:	d103      	bne.n	800c254 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2240      	movs	r2, #64	@ 0x40
 800c250:	4313      	orrs	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	43d9      	mvns	r1, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	400a      	ands	r2, r1
 800c264:	601a      	str	r2, [r3, #0]
}
 800c266:	46c0      	nop			@ (mov r8, r8)
 800c268:	46bd      	mov	sp, r7
 800c26a:	b004      	add	sp, #16
 800c26c:	bd80      	pop	{r7, pc}
	...

0800c270 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2241      	movs	r2, #65	@ 0x41
 800c27e:	5c9b      	ldrb	r3, [r3, r2]
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b20      	cmp	r3, #32
 800c284:	d138      	bne.n	800c2f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2240      	movs	r2, #64	@ 0x40
 800c28a:	5c9b      	ldrb	r3, [r3, r2]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d101      	bne.n	800c294 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c290:	2302      	movs	r3, #2
 800c292:	e032      	b.n	800c2fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2240      	movs	r2, #64	@ 0x40
 800c298:	2101      	movs	r1, #1
 800c29a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2241      	movs	r2, #65	@ 0x41
 800c2a0:	2124      	movs	r1, #36	@ 0x24
 800c2a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2101      	movs	r1, #1
 800c2b0:	438a      	bics	r2, r1
 800c2b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4911      	ldr	r1, [pc, #68]	@ (800c304 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800c2c0:	400a      	ands	r2, r1
 800c2c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6819      	ldr	r1, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	430a      	orrs	r2, r1
 800c2d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2101      	movs	r1, #1
 800c2e0:	430a      	orrs	r2, r1
 800c2e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2241      	movs	r2, #65	@ 0x41
 800c2e8:	2120      	movs	r1, #32
 800c2ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2240      	movs	r2, #64	@ 0x40
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e000      	b.n	800c2fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c2f8:	2302      	movs	r3, #2
  }
}
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	b002      	add	sp, #8
 800c300:	bd80      	pop	{r7, pc}
 800c302:	46c0      	nop			@ (mov r8, r8)
 800c304:	ffffefff 	.word	0xffffefff

0800c308 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2241      	movs	r2, #65	@ 0x41
 800c316:	5c9b      	ldrb	r3, [r3, r2]
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b20      	cmp	r3, #32
 800c31c:	d139      	bne.n	800c392 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2240      	movs	r2, #64	@ 0x40
 800c322:	5c9b      	ldrb	r3, [r3, r2]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d101      	bne.n	800c32c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c328:	2302      	movs	r3, #2
 800c32a:	e033      	b.n	800c394 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2240      	movs	r2, #64	@ 0x40
 800c330:	2101      	movs	r1, #1
 800c332:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2241      	movs	r2, #65	@ 0x41
 800c338:	2124      	movs	r1, #36	@ 0x24
 800c33a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2101      	movs	r1, #1
 800c348:	438a      	bics	r2, r1
 800c34a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	4a11      	ldr	r2, [pc, #68]	@ (800c39c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c358:	4013      	ands	r3, r2
 800c35a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	021b      	lsls	r3, r3, #8
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	4313      	orrs	r3, r2
 800c364:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2101      	movs	r1, #1
 800c37a:	430a      	orrs	r2, r1
 800c37c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2241      	movs	r2, #65	@ 0x41
 800c382:	2120      	movs	r1, #32
 800c384:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2240      	movs	r2, #64	@ 0x40
 800c38a:	2100      	movs	r1, #0
 800c38c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	e000      	b.n	800c394 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c392:	2302      	movs	r3, #2
  }
}
 800c394:	0018      	movs	r0, r3
 800c396:	46bd      	mov	sp, r7
 800c398:	b004      	add	sp, #16
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	fffff0ff 	.word	0xfffff0ff

0800c3a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b088      	sub	sp, #32
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d101      	bne.n	800c3b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e0e1      	b.n	800c576 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2235      	movs	r2, #53	@ 0x35
 800c3b6:	5c9b      	ldrb	r3, [r3, r2]
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d107      	bne.n	800c3ce <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2234      	movs	r2, #52	@ 0x34
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	f7f9 f975 	bl	80056b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2235      	movs	r2, #53	@ 0x35
 800c3d2:	2102      	movs	r1, #2
 800c3d4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	69da      	ldr	r2, [r3, #28]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4967      	ldr	r1, [pc, #412]	@ (800c580 <HAL_I2S_Init+0x1e0>)
 800c3e2:	400a      	ands	r2, r1
 800c3e4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	695b      	ldr	r3, [r3, #20]
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d073      	beq.n	800c4de <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d102      	bne.n	800c404 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800c3fe:	2310      	movs	r3, #16
 800c400:	617b      	str	r3, [r7, #20]
 800c402:	e001      	b.n	800c408 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800c404:	2320      	movs	r3, #32
 800c406:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	2b20      	cmp	r3, #32
 800c40e:	d802      	bhi.n	800c416 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800c416:	f002 fe8d 	bl	800f134 <HAL_RCC_GetSysClockFreq>
 800c41a:	0003      	movs	r3, r0
 800c41c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	691a      	ldr	r2, [r3, #16]
 800c422:	2380      	movs	r3, #128	@ 0x80
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	429a      	cmp	r2, r3
 800c428:	d131      	bne.n	800c48e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d016      	beq.n	800c460 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	0019      	movs	r1, r3
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f7f3 fe81 	bl	8000140 <__udivsi3>
 800c43e:	0003      	movs	r3, r0
 800c440:	001a      	movs	r2, r3
 800c442:	0013      	movs	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	189b      	adds	r3, r3, r2
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	001a      	movs	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	0019      	movs	r1, r3
 800c452:	0010      	movs	r0, r2
 800c454:	f7f3 fe74 	bl	8000140 <__udivsi3>
 800c458:	0003      	movs	r3, r0
 800c45a:	3305      	adds	r3, #5
 800c45c:	613b      	str	r3, [r7, #16]
 800c45e:	e02a      	b.n	800c4b6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	0019      	movs	r1, r3
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f7f3 fe6a 	bl	8000140 <__udivsi3>
 800c46c:	0003      	movs	r3, r0
 800c46e:	001a      	movs	r2, r3
 800c470:	0013      	movs	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	189b      	adds	r3, r3, r2
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	001a      	movs	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	0019      	movs	r1, r3
 800c480:	0010      	movs	r0, r2
 800c482:	f7f3 fe5d 	bl	8000140 <__udivsi3>
 800c486:	0003      	movs	r3, r0
 800c488:	3305      	adds	r3, #5
 800c48a:	613b      	str	r3, [r7, #16]
 800c48c:	e013      	b.n	800c4b6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c48e:	6979      	ldr	r1, [r7, #20]
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f7f3 fe55 	bl	8000140 <__udivsi3>
 800c496:	0003      	movs	r3, r0
 800c498:	001a      	movs	r2, r3
 800c49a:	0013      	movs	r3, r2
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	189b      	adds	r3, r3, r2
 800c4a0:	005b      	lsls	r3, r3, #1
 800c4a2:	001a      	movs	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	0019      	movs	r1, r3
 800c4aa:	0010      	movs	r0, r2
 800c4ac:	f7f3 fe48 	bl	8000140 <__udivsi3>
 800c4b0:	0003      	movs	r3, r0
 800c4b2:	3305      	adds	r3, #5
 800c4b4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	210a      	movs	r1, #10
 800c4ba:	0018      	movs	r0, r3
 800c4bc:	f7f3 fe40 	bl	8000140 <__udivsi3>
 800c4c0:	0003      	movs	r3, r0
 800c4c2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	085b      	lsrs	r3, r3, #1
 800c4d4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	021b      	lsls	r3, r3, #8
 800c4da:	61bb      	str	r3, [r7, #24]
 800c4dc:	e003      	b.n	800c4e6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800c4de:	2302      	movs	r3, #2
 800c4e0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d902      	bls.n	800c4f2 <HAL_I2S_Init+0x152>
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	2bff      	cmp	r3, #255	@ 0xff
 800c4f0:	d907      	bls.n	800c502 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f6:	2210      	movs	r2, #16
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e039      	b.n	800c576 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	691a      	ldr	r2, [r3, #16]
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	431a      	orrs	r2, r3
 800c50a:	0011      	movs	r1, r2
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	69fa      	ldr	r2, [r7, #28]
 800c512:	430a      	orrs	r2, r1
 800c514:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	69db      	ldr	r3, [r3, #28]
 800c51c:	4a18      	ldr	r2, [pc, #96]	@ (800c580 <HAL_I2S_Init+0x1e0>)
 800c51e:	401a      	ands	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6859      	ldr	r1, [r3, #4]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	4319      	orrs	r1, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	4319      	orrs	r1, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	430b      	orrs	r3, r1
 800c536:	431a      	orrs	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2180      	movs	r1, #128	@ 0x80
 800c53e:	0109      	lsls	r1, r1, #4
 800c540:	430a      	orrs	r2, r1
 800c542:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	2b30      	cmp	r3, #48	@ 0x30
 800c54a:	d003      	beq.n	800c554 <HAL_I2S_Init+0x1b4>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	689b      	ldr	r3, [r3, #8]
 800c550:	2bb0      	cmp	r3, #176	@ 0xb0
 800c552:	d108      	bne.n	800c566 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	69da      	ldr	r2, [r3, #28]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2180      	movs	r1, #128	@ 0x80
 800c560:	0149      	lsls	r1, r1, #5
 800c562:	430a      	orrs	r2, r1
 800c564:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2200      	movs	r2, #0
 800c56a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2235      	movs	r2, #53	@ 0x35
 800c570:	2101      	movs	r1, #1
 800c572:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	0018      	movs	r0, r3
 800c578:	46bd      	mov	sp, r7
 800c57a:	b008      	add	sp, #32
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	46c0      	nop			@ (mov r8, r8)
 800c580:	fffff040 	.word	0xfffff040

0800c584 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800c592:	2301      	movs	r3, #1
 800c594:	e01b      	b.n	800c5ce <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2235      	movs	r2, #53	@ 0x35
 800c59a:	2102      	movs	r1, #2
 800c59c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	69da      	ldr	r2, [r3, #28]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	490b      	ldr	r1, [pc, #44]	@ (800c5d8 <HAL_I2S_DeInit+0x54>)
 800c5aa:	400a      	ands	r2, r1
 800c5ac:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	f7f9 f8f5 	bl	80057a0 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2235      	movs	r2, #53	@ 0x35
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2234      	movs	r2, #52	@ 0x34
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	0018      	movs	r0, r3
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	b002      	add	sp, #8
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	46c0      	nop			@ (mov r8, r8)
 800c5d8:	fffffbff 	.word	0xfffffbff

0800c5dc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	1dbb      	adds	r3, r7, #6
 800c5e8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d003      	beq.n	800c5f8 <HAL_I2S_Receive_DMA+0x1c>
 800c5f0:	1dbb      	adds	r3, r7, #6
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d101      	bne.n	800c5fc <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	e0a6      	b.n	800c74a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2234      	movs	r2, #52	@ 0x34
 800c600:	5c9b      	ldrb	r3, [r3, r2]
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2b01      	cmp	r3, #1
 800c606:	d101      	bne.n	800c60c <HAL_I2S_Receive_DMA+0x30>
 800c608:	2302      	movs	r3, #2
 800c60a:	e09e      	b.n	800c74a <HAL_I2S_Receive_DMA+0x16e>
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2234      	movs	r2, #52	@ 0x34
 800c610:	2101      	movs	r1, #1
 800c612:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2235      	movs	r2, #53	@ 0x35
 800c618:	5c9b      	ldrb	r3, [r3, r2]
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d005      	beq.n	800c62c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2234      	movs	r2, #52	@ 0x34
 800c624:	2100      	movs	r1, #0
 800c626:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800c628:	2302      	movs	r3, #2
 800c62a:	e08e      	b.n	800c74a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2235      	movs	r2, #53	@ 0x35
 800c630:	2104      	movs	r1, #4
 800c632:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	69db      	ldr	r3, [r3, #28]
 800c646:	2207      	movs	r2, #7
 800c648:	4013      	ands	r3, r2
 800c64a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	2b03      	cmp	r3, #3
 800c650:	d002      	beq.n	800c658 <HAL_I2S_Receive_DMA+0x7c>
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2b05      	cmp	r3, #5
 800c656:	d10c      	bne.n	800c672 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800c658:	1dbb      	adds	r3, r7, #6
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	18db      	adds	r3, r3, r3
 800c65e:	b29a      	uxth	r2, r3
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800c664:	1dbb      	adds	r3, r7, #6
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	18db      	adds	r3, r3, r3
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c670:	e007      	b.n	800c682 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	1dba      	adds	r2, r7, #6
 800c676:	8812      	ldrh	r2, [r2, #0]
 800c678:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	1dba      	adds	r2, r7, #6
 800c67e:	8812      	ldrh	r2, [r2, #0]
 800c680:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c686:	4a33      	ldr	r2, [pc, #204]	@ (800c754 <HAL_I2S_Receive_DMA+0x178>)
 800c688:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c68e:	4a32      	ldr	r2, [pc, #200]	@ (800c758 <HAL_I2S_Receive_DMA+0x17c>)
 800c690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c696:	4a31      	ldr	r2, [pc, #196]	@ (800c75c <HAL_I2S_Receive_DMA+0x180>)
 800c698:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	69da      	ldr	r2, [r3, #28]
 800c6a0:	23c0      	movs	r3, #192	@ 0xc0
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	401a      	ands	r2, r3
 800c6a6:	23c0      	movs	r3, #192	@ 0xc0
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d10a      	bne.n	800c6c4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	613b      	str	r3, [r7, #16]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	613b      	str	r3, [r7, #16]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	613b      	str	r3, [r7, #16]
 800c6c2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	330c      	adds	r3, #12
 800c6ce:	0019      	movs	r1, r3
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d4:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c6da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c6dc:	f7fd f9fc 	bl	8009ad8 <HAL_DMA_Start_IT>
 800c6e0:	1e03      	subs	r3, r0, #0
 800c6e2:	d00f      	beq.n	800c704 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e8:	2208      	movs	r2, #8
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2235      	movs	r2, #53	@ 0x35
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2234      	movs	r2, #52	@ 0x34
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c700:	2301      	movs	r3, #1
 800c702:	e022      	b.n	800c74a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	69da      	ldr	r2, [r3, #28]
 800c70a:	2380      	movs	r3, #128	@ 0x80
 800c70c:	00db      	lsls	r3, r3, #3
 800c70e:	4013      	ands	r3, r2
 800c710:	d108      	bne.n	800c724 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	69da      	ldr	r2, [r3, #28]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2180      	movs	r1, #128	@ 0x80
 800c71e:	00c9      	lsls	r1, r1, #3
 800c720:	430a      	orrs	r2, r1
 800c722:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	4013      	ands	r3, r2
 800c72e:	d107      	bne.n	800c740 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2101      	movs	r1, #1
 800c73c:	430a      	orrs	r2, r1
 800c73e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2234      	movs	r2, #52	@ 0x34
 800c744:	2100      	movs	r1, #0
 800c746:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	0018      	movs	r0, r3
 800c74c:	46bd      	mov	sp, r7
 800c74e:	b006      	add	sp, #24
 800c750:	bd80      	pop	{r7, pc}
 800c752:	46c0      	nop			@ (mov r8, r8)
 800c754:	0800c95d 	.word	0x0800c95d
 800c758:	0800c919 	.word	0x0800c919
 800c75c:	0800c97b 	.word	0x0800c97b

0800c760 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c768:	2317      	movs	r3, #23
 800c76a:	18fb      	adds	r3, r7, r3
 800c76c:	2200      	movs	r2, #0
 800c76e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	2380      	movs	r3, #128	@ 0x80
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	429a      	cmp	r2, r3
 800c77a:	d003      	beq.n	800c784 <HAL_I2S_DMAStop+0x24>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d158      	bne.n	800c836 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d010      	beq.n	800c7ae <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c790:	0018      	movs	r0, r3
 800c792:	f7fd fa07 	bl	8009ba4 <HAL_DMA_Abort>
 800c796:	1e03      	subs	r3, r0, #0
 800c798:	d009      	beq.n	800c7ae <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c79e:	2208      	movs	r2, #8
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c7a6:	2317      	movs	r3, #23
 800c7a8:	18fb      	adds	r3, r7, r3
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	2364      	movs	r3, #100	@ 0x64
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	2102      	movs	r1, #2
 800c7b6:	f000 f907 	bl	800c9c8 <I2S_WaitFlagStateUntilTimeout>
 800c7ba:	1e03      	subs	r3, r0, #0
 800c7bc:	d00d      	beq.n	800c7da <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	431a      	orrs	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2235      	movs	r2, #53	@ 0x35
 800c7ce:	2101      	movs	r1, #1
 800c7d0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c7d2:	2317      	movs	r3, #23
 800c7d4:	18fb      	adds	r3, r7, r3
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	2364      	movs	r3, #100	@ 0x64
 800c7de:	2200      	movs	r2, #0
 800c7e0:	2180      	movs	r1, #128	@ 0x80
 800c7e2:	f000 f8f1 	bl	800c9c8 <I2S_WaitFlagStateUntilTimeout>
 800c7e6:	1e03      	subs	r3, r0, #0
 800c7e8:	d00d      	beq.n	800c806 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2235      	movs	r2, #53	@ 0x35
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c7fe:	2317      	movs	r3, #23
 800c800:	18fb      	adds	r3, r7, r3
 800c802:	2201      	movs	r2, #1
 800c804:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	69da      	ldr	r2, [r3, #28]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4938      	ldr	r1, [pc, #224]	@ (800c8f4 <HAL_I2S_DMAStop+0x194>)
 800c812:	400a      	ands	r2, r1
 800c814:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800c816:	2300      	movs	r3, #0
 800c818:	613b      	str	r3, [r7, #16]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	613b      	str	r3, [r7, #16]
 800c822:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2102      	movs	r1, #2
 800c830:	438a      	bics	r2, r1
 800c832:	605a      	str	r2, [r3, #4]
 800c834:	e053      	b.n	800c8de <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685a      	ldr	r2, [r3, #4]
 800c83a:	23c0      	movs	r3, #192	@ 0xc0
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	429a      	cmp	r2, r3
 800c840:	d005      	beq.n	800c84e <HAL_I2S_DMAStop+0xee>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	2380      	movs	r3, #128	@ 0x80
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d147      	bne.n	800c8de <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c852:	2b00      	cmp	r3, #0
 800c854:	d010      	beq.n	800c878 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c85a:	0018      	movs	r0, r3
 800c85c:	f7fd f9a2 	bl	8009ba4 <HAL_DMA_Abort>
 800c860:	1e03      	subs	r3, r0, #0
 800c862:	d009      	beq.n	800c878 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c868:	2208      	movs	r2, #8
 800c86a:	431a      	orrs	r2, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c870:	2317      	movs	r3, #23
 800c872:	18fb      	adds	r3, r7, r3
 800c874:	2201      	movs	r2, #1
 800c876:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	69da      	ldr	r2, [r3, #28]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	491c      	ldr	r1, [pc, #112]	@ (800c8f4 <HAL_I2S_DMAStop+0x194>)
 800c884:	400a      	ands	r2, r1
 800c886:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	685a      	ldr	r2, [r3, #4]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2101      	movs	r1, #1
 800c8aa:	438a      	bics	r2, r1
 800c8ac:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	2380      	movs	r3, #128	@ 0x80
 800c8b4:	005b      	lsls	r3, r3, #1
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d10e      	bne.n	800c8d8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8be:	2240      	movs	r2, #64	@ 0x40
 800c8c0:	431a      	orrs	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2235      	movs	r2, #53	@ 0x35
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800c8ce:	2317      	movs	r3, #23
 800c8d0:	18fb      	adds	r3, r7, r3
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	701a      	strb	r2, [r3, #0]
 800c8d6:	e002      	b.n	800c8de <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2235      	movs	r2, #53	@ 0x35
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800c8e6:	2317      	movs	r3, #23
 800c8e8:	18fb      	adds	r3, r7, r3
 800c8ea:	781b      	ldrb	r3, [r3, #0]
}
 800c8ec:	0018      	movs	r0, r3
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	b006      	add	sp, #24
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	fffffbff 	.word	0xfffffbff

0800c8f8 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c900:	46c0      	nop			@ (mov r8, r8)
 800c902:	46bd      	mov	sp, r7
 800c904:	b002      	add	sp, #8
 800c906:	bd80      	pop	{r7, pc}

0800c908 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800c910:	46c0      	nop			@ (mov r8, r8)
 800c912:	46bd      	mov	sp, r7
 800c914:	b002      	add	sp, #8
 800c916:	bd80      	pop	{r7, pc}

0800c918 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c924:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10e      	bne.n	800c94c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2101      	movs	r1, #1
 800c93a:	438a      	bics	r2, r1
 800c93c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2235      	movs	r2, #53	@ 0x35
 800c948:	2101      	movs	r1, #1
 800c94a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	0018      	movs	r0, r3
 800c950:	f7f9 ffb0 	bl	80068b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c954:	46c0      	nop			@ (mov r8, r8)
 800c956:	46bd      	mov	sp, r7
 800c958:	b004      	add	sp, #16
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c968:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	0018      	movs	r0, r3
 800c96e:	f7ff ffc3 	bl	800c8f8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c972:	46c0      	nop			@ (mov r8, r8)
 800c974:	46bd      	mov	sp, r7
 800c976:	b004      	add	sp, #16
 800c978:	bd80      	pop	{r7, pc}

0800c97a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c986:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	685a      	ldr	r2, [r3, #4]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2103      	movs	r1, #3
 800c994:	438a      	bics	r2, r1
 800c996:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2235      	movs	r2, #53	@ 0x35
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9b0:	2208      	movs	r2, #8
 800c9b2:	431a      	orrs	r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	f7ff ffa4 	bl	800c908 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c9c0:	46c0      	nop			@ (mov r8, r8)
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	b004      	add	sp, #16
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	603b      	str	r3, [r7, #0]
 800c9d4:	1dfb      	adds	r3, r7, #7
 800c9d6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800c9d8:	f7fc fc64 	bl	80092a4 <HAL_GetTick>
 800c9dc:	0003      	movs	r3, r0
 800c9de:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800c9e0:	e017      	b.n	800ca12 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	d014      	beq.n	800ca12 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800c9e8:	f7fc fc5c 	bl	80092a4 <HAL_GetTick>
 800c9ec:	0002      	movs	r2, r0
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d902      	bls.n	800c9fe <I2S_WaitFlagStateUntilTimeout+0x36>
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d109      	bne.n	800ca12 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2235      	movs	r2, #53	@ 0x35
 800ca02:	2101      	movs	r1, #1
 800ca04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2234      	movs	r2, #52	@ 0x34
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	e00f      	b.n	800ca32 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	425a      	negs	r2, r3
 800ca22:	4153      	adcs	r3, r2
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	001a      	movs	r2, r3
 800ca28:	1dfb      	adds	r3, r7, #7
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d1d8      	bne.n	800c9e2 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	0018      	movs	r0, r3
 800ca34:	46bd      	mov	sp, r7
 800ca36:	b006      	add	sp, #24
 800ca38:	bd80      	pop	{r7, pc}
	...

0800ca3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca3e:	b08b      	sub	sp, #44	@ 0x2c
 800ca40:	af06      	add	r7, sp, #24
 800ca42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d101      	bne.n	800ca4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e0f0      	b.n	800cc30 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4a79      	ldr	r2, [pc, #484]	@ (800cc38 <HAL_PCD_Init+0x1fc>)
 800ca52:	5c9b      	ldrb	r3, [r3, r2]
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d108      	bne.n	800ca6c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	23aa      	movs	r3, #170	@ 0xaa
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	2100      	movs	r1, #0
 800ca62:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	0018      	movs	r0, r3
 800ca68:	f008 fe90 	bl	801578c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a72      	ldr	r2, [pc, #456]	@ (800cc38 <HAL_PCD_Init+0x1fc>)
 800ca70:	2103      	movs	r1, #3
 800ca72:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	0018      	movs	r0, r3
 800ca7a:	f004 ff11 	bl	80118a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca7e:	230f      	movs	r3, #15
 800ca80:	18fb      	adds	r3, r7, r3
 800ca82:	2200      	movs	r2, #0
 800ca84:	701a      	strb	r2, [r3, #0]
 800ca86:	e049      	b.n	800cb1c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ca88:	200f      	movs	r0, #15
 800ca8a:	183b      	adds	r3, r7, r0
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	6879      	ldr	r1, [r7, #4]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	0013      	movs	r3, r2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	189b      	adds	r3, r3, r2
 800ca98:	00db      	lsls	r3, r3, #3
 800ca9a:	18cb      	adds	r3, r1, r3
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	2201      	movs	r2, #1
 800caa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800caa2:	183b      	adds	r3, r7, r0
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	6879      	ldr	r1, [r7, #4]
 800caa8:	1c5a      	adds	r2, r3, #1
 800caaa:	0013      	movs	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	189b      	adds	r3, r3, r2
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	183a      	adds	r2, r7, r0
 800cab4:	7812      	ldrb	r2, [r2, #0]
 800cab6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cab8:	183b      	adds	r3, r7, r0
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	6879      	ldr	r1, [r7, #4]
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	0013      	movs	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	189b      	adds	r3, r3, r2
 800cac6:	00db      	lsls	r3, r3, #3
 800cac8:	18cb      	adds	r3, r1, r3
 800caca:	3303      	adds	r3, #3
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cad0:	183b      	adds	r3, r7, r0
 800cad2:	781a      	ldrb	r2, [r3, #0]
 800cad4:	6879      	ldr	r1, [r7, #4]
 800cad6:	0013      	movs	r3, r2
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	189b      	adds	r3, r3, r2
 800cadc:	00db      	lsls	r3, r3, #3
 800cade:	18cb      	adds	r3, r1, r3
 800cae0:	3338      	adds	r3, #56	@ 0x38
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cae6:	183b      	adds	r3, r7, r0
 800cae8:	781a      	ldrb	r2, [r3, #0]
 800caea:	6879      	ldr	r1, [r7, #4]
 800caec:	0013      	movs	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	189b      	adds	r3, r3, r2
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	18cb      	adds	r3, r1, r3
 800caf6:	333c      	adds	r3, #60	@ 0x3c
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cafc:	183b      	adds	r3, r7, r0
 800cafe:	781a      	ldrb	r2, [r3, #0]
 800cb00:	6879      	ldr	r1, [r7, #4]
 800cb02:	0013      	movs	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	189b      	adds	r3, r3, r2
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	18cb      	adds	r3, r1, r3
 800cb0c:	3340      	adds	r3, #64	@ 0x40
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb12:	183b      	adds	r3, r7, r0
 800cb14:	781a      	ldrb	r2, [r3, #0]
 800cb16:	183b      	adds	r3, r7, r0
 800cb18:	3201      	adds	r2, #1
 800cb1a:	701a      	strb	r2, [r3, #0]
 800cb1c:	210f      	movs	r1, #15
 800cb1e:	187b      	adds	r3, r7, r1
 800cb20:	781a      	ldrb	r2, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d3ae      	bcc.n	800ca88 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb2a:	187b      	adds	r3, r7, r1
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
 800cb30:	e056      	b.n	800cbe0 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cb32:	240f      	movs	r4, #15
 800cb34:	193b      	adds	r3, r7, r4
 800cb36:	781a      	ldrb	r2, [r3, #0]
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	236a      	movs	r3, #106	@ 0x6a
 800cb3c:	33ff      	adds	r3, #255	@ 0xff
 800cb3e:	0019      	movs	r1, r3
 800cb40:	0013      	movs	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	189b      	adds	r3, r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	18c3      	adds	r3, r0, r3
 800cb4a:	185b      	adds	r3, r3, r1
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cb50:	193b      	adds	r3, r7, r4
 800cb52:	781a      	ldrb	r2, [r3, #0]
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	23b4      	movs	r3, #180	@ 0xb4
 800cb58:	0059      	lsls	r1, r3, #1
 800cb5a:	0013      	movs	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	189b      	adds	r3, r3, r2
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	18c3      	adds	r3, r0, r3
 800cb64:	185b      	adds	r3, r3, r1
 800cb66:	193a      	adds	r2, r7, r4
 800cb68:	7812      	ldrb	r2, [r2, #0]
 800cb6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cb6c:	193b      	adds	r3, r7, r4
 800cb6e:	781a      	ldrb	r2, [r3, #0]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	236c      	movs	r3, #108	@ 0x6c
 800cb74:	33ff      	adds	r3, #255	@ 0xff
 800cb76:	0019      	movs	r1, r3
 800cb78:	0013      	movs	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	189b      	adds	r3, r3, r2
 800cb7e:	00db      	lsls	r3, r3, #3
 800cb80:	18c3      	adds	r3, r0, r3
 800cb82:	185b      	adds	r3, r3, r1
 800cb84:	2200      	movs	r2, #0
 800cb86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cb88:	193b      	adds	r3, r7, r4
 800cb8a:	781a      	ldrb	r2, [r3, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	23bc      	movs	r3, #188	@ 0xbc
 800cb90:	0059      	lsls	r1, r3, #1
 800cb92:	0013      	movs	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	189b      	adds	r3, r3, r2
 800cb98:	00db      	lsls	r3, r3, #3
 800cb9a:	18c3      	adds	r3, r0, r3
 800cb9c:	185b      	adds	r3, r3, r1
 800cb9e:	2200      	movs	r2, #0
 800cba0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cba2:	193b      	adds	r3, r7, r4
 800cba4:	781a      	ldrb	r2, [r3, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	23be      	movs	r3, #190	@ 0xbe
 800cbaa:	0059      	lsls	r1, r3, #1
 800cbac:	0013      	movs	r3, r2
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	189b      	adds	r3, r3, r2
 800cbb2:	00db      	lsls	r3, r3, #3
 800cbb4:	18c3      	adds	r3, r0, r3
 800cbb6:	185b      	adds	r3, r3, r1
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cbbc:	193b      	adds	r3, r7, r4
 800cbbe:	781a      	ldrb	r2, [r3, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	23c0      	movs	r3, #192	@ 0xc0
 800cbc4:	0059      	lsls	r1, r3, #1
 800cbc6:	0013      	movs	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	189b      	adds	r3, r3, r2
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	18c3      	adds	r3, r0, r3
 800cbd0:	185b      	adds	r3, r3, r1
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbd6:	193b      	adds	r3, r7, r4
 800cbd8:	781a      	ldrb	r2, [r3, #0]
 800cbda:	193b      	adds	r3, r7, r4
 800cbdc:	3201      	adds	r2, #1
 800cbde:	701a      	strb	r2, [r3, #0]
 800cbe0:	230f      	movs	r3, #15
 800cbe2:	18fb      	adds	r3, r7, r3
 800cbe4:	781a      	ldrb	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d3a1      	bcc.n	800cb32 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6818      	ldr	r0, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	466a      	mov	r2, sp
 800cbf6:	0011      	movs	r1, r2
 800cbf8:	001a      	movs	r2, r3
 800cbfa:	3210      	adds	r2, #16
 800cbfc:	ca70      	ldmia	r2!, {r4, r5, r6}
 800cbfe:	c170      	stmia	r1!, {r4, r5, r6}
 800cc00:	ca30      	ldmia	r2!, {r4, r5}
 800cc02:	c130      	stmia	r1!, {r4, r5}
 800cc04:	6859      	ldr	r1, [r3, #4]
 800cc06:	689a      	ldr	r2, [r3, #8]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	f004 fe63 	bl	80118d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2224      	movs	r2, #36	@ 0x24
 800cc12:	2100      	movs	r1, #0
 800cc14:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a07      	ldr	r2, [pc, #28]	@ (800cc38 <HAL_PCD_Init+0x1fc>)
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	69db      	ldr	r3, [r3, #28]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d103      	bne.n	800cc2e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	0018      	movs	r0, r3
 800cc2a:	f001 fd23 	bl	800e674 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	0018      	movs	r0, r3
 800cc32:	46bd      	mov	sp, r7
 800cc34:	b005      	add	sp, #20
 800cc36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc38:	000002a9 	.word	0x000002a9

0800cc3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	23aa      	movs	r3, #170	@ 0xaa
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	5cd3      	ldrb	r3, [r2, r3]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d101      	bne.n	800cc54 <HAL_PCD_Start+0x18>
 800cc50:	2302      	movs	r3, #2
 800cc52:	e014      	b.n	800cc7e <HAL_PCD_Start+0x42>
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	23aa      	movs	r3, #170	@ 0xaa
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	2101      	movs	r1, #1
 800cc5c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	0018      	movs	r0, r3
 800cc64:	f004 fe06 	bl	8011874 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	0018      	movs	r0, r3
 800cc6e:	f006 fe09 	bl	8013884 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	23aa      	movs	r3, #170	@ 0xaa
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	2100      	movs	r1, #0
 800cc7a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800cc7c:	2300      	movs	r3, #0
}
 800cc7e:	0018      	movs	r0, r3
 800cc80:	46bd      	mov	sp, r7
 800cc82:	b002      	add	sp, #8
 800cc84:	bd80      	pop	{r7, pc}
	...

0800cc88 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	0018      	movs	r0, r3
 800cc96:	f006 fe0b 	bl	80138b0 <USB_ReadInterrupts>
 800cc9a:	0003      	movs	r3, r0
 800cc9c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	2380      	movs	r3, #128	@ 0x80
 800cca2:	021b      	lsls	r3, r3, #8
 800cca4:	4013      	ands	r3, r2
 800cca6:	d004      	beq.n	800ccb2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	0018      	movs	r0, r3
 800ccac:	f000 fb62 	bl	800d374 <PCD_EP_ISR_Handler>

    return;
 800ccb0:	e11d      	b.n	800ceee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	2380      	movs	r3, #128	@ 0x80
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	4013      	ands	r3, r2
 800ccba:	d015      	beq.n	800cce8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2244      	movs	r2, #68	@ 0x44
 800ccc2:	5a9b      	ldrh	r3, [r3, r2]
 800ccc4:	b29a      	uxth	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	498a      	ldr	r1, [pc, #552]	@ (800cef4 <HAL_PCD_IRQHandler+0x26c>)
 800cccc:	400a      	ands	r2, r1
 800ccce:	b291      	uxth	r1, r2
 800ccd0:	2244      	movs	r2, #68	@ 0x44
 800ccd2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	0018      	movs	r0, r3
 800ccd8:	f008 fddb 	bl	8015892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2100      	movs	r1, #0
 800cce0:	0018      	movs	r0, r3
 800cce2:	f000 f915 	bl	800cf10 <HAL_PCD_SetAddress>

    return;
 800cce6:	e102      	b.n	800ceee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	2380      	movs	r3, #128	@ 0x80
 800ccec:	01db      	lsls	r3, r3, #7
 800ccee:	4013      	ands	r3, r2
 800ccf0:	d00c      	beq.n	800cd0c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2244      	movs	r2, #68	@ 0x44
 800ccf8:	5a9b      	ldrh	r3, [r3, r2]
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	497d      	ldr	r1, [pc, #500]	@ (800cef8 <HAL_PCD_IRQHandler+0x270>)
 800cd02:	400a      	ands	r2, r1
 800cd04:	b291      	uxth	r1, r2
 800cd06:	2244      	movs	r2, #68	@ 0x44
 800cd08:	5299      	strh	r1, [r3, r2]

    return;
 800cd0a:	e0f0      	b.n	800ceee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	2380      	movs	r3, #128	@ 0x80
 800cd10:	019b      	lsls	r3, r3, #6
 800cd12:	4013      	ands	r3, r2
 800cd14:	d00c      	beq.n	800cd30 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2244      	movs	r2, #68	@ 0x44
 800cd1c:	5a9b      	ldrh	r3, [r3, r2]
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4975      	ldr	r1, [pc, #468]	@ (800cefc <HAL_PCD_IRQHandler+0x274>)
 800cd26:	400a      	ands	r2, r1
 800cd28:	b291      	uxth	r1, r2
 800cd2a:	2244      	movs	r2, #68	@ 0x44
 800cd2c:	5299      	strh	r1, [r3, r2]

    return;
 800cd2e:	e0de      	b.n	800ceee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	2380      	movs	r3, #128	@ 0x80
 800cd34:	015b      	lsls	r3, r3, #5
 800cd36:	4013      	ands	r3, r2
 800cd38:	d038      	beq.n	800cdac <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2240      	movs	r2, #64	@ 0x40
 800cd40:	5a9b      	ldrh	r3, [r3, r2]
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2104      	movs	r1, #4
 800cd4a:	438a      	bics	r2, r1
 800cd4c:	b291      	uxth	r1, r2
 800cd4e:	2240      	movs	r2, #64	@ 0x40
 800cd50:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2240      	movs	r2, #64	@ 0x40
 800cd58:	5a9b      	ldrh	r3, [r3, r2]
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2108      	movs	r1, #8
 800cd62:	438a      	bics	r2, r1
 800cd64:	b291      	uxth	r1, r2
 800cd66:	2240      	movs	r2, #64	@ 0x40
 800cd68:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	23b8      	movs	r3, #184	@ 0xb8
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	5cd3      	ldrb	r3, [r2, r3]
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d109      	bne.n	800cd8a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	23b8      	movs	r3, #184	@ 0xb8
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2100      	movs	r1, #0
 800cd84:	0018      	movs	r0, r3
 800cd86:	f001 fc9f 	bl	800e6c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	0018      	movs	r0, r3
 800cd8e:	f008 fdc1 	bl	8015914 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2244      	movs	r2, #68	@ 0x44
 800cd98:	5a9b      	ldrh	r3, [r3, r2]
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4957      	ldr	r1, [pc, #348]	@ (800cf00 <HAL_PCD_IRQHandler+0x278>)
 800cda2:	400a      	ands	r2, r1
 800cda4:	b291      	uxth	r1, r2
 800cda6:	2244      	movs	r2, #68	@ 0x44
 800cda8:	5299      	strh	r1, [r3, r2]

    return;
 800cdaa:	e0a0      	b.n	800ceee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	2380      	movs	r3, #128	@ 0x80
 800cdb0:	011b      	lsls	r3, r3, #4
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	d028      	beq.n	800ce08 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2240      	movs	r2, #64	@ 0x40
 800cdbc:	5a9b      	ldrh	r3, [r3, r2]
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2108      	movs	r1, #8
 800cdc6:	430a      	orrs	r2, r1
 800cdc8:	b291      	uxth	r1, r2
 800cdca:	2240      	movs	r2, #64	@ 0x40
 800cdcc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2244      	movs	r2, #68	@ 0x44
 800cdd4:	5a9b      	ldrh	r3, [r3, r2]
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4949      	ldr	r1, [pc, #292]	@ (800cf04 <HAL_PCD_IRQHandler+0x27c>)
 800cdde:	400a      	ands	r2, r1
 800cde0:	b291      	uxth	r1, r2
 800cde2:	2244      	movs	r2, #68	@ 0x44
 800cde4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2240      	movs	r2, #64	@ 0x40
 800cdec:	5a9b      	ldrh	r3, [r3, r2]
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2104      	movs	r1, #4
 800cdf6:	430a      	orrs	r2, r1
 800cdf8:	b291      	uxth	r1, r2
 800cdfa:	2240      	movs	r2, #64	@ 0x40
 800cdfc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	0018      	movs	r0, r3
 800ce02:	f008 fd6b 	bl	80158dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800ce06:	e072      	b.n	800ceee <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2280      	movs	r2, #128	@ 0x80
 800ce0c:	4013      	ands	r3, r2
 800ce0e:	d046      	beq.n	800ce9e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2244      	movs	r2, #68	@ 0x44
 800ce16:	5a9b      	ldrh	r3, [r3, r2]
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2180      	movs	r1, #128	@ 0x80
 800ce20:	438a      	bics	r2, r1
 800ce22:	b291      	uxth	r1, r2
 800ce24:	2244      	movs	r2, #68	@ 0x44
 800ce26:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	23b8      	movs	r3, #184	@ 0xb8
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	5cd3      	ldrb	r3, [r2, r3]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d12f      	bne.n	800ce94 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2240      	movs	r2, #64	@ 0x40
 800ce3a:	5a9b      	ldrh	r3, [r3, r2]
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2104      	movs	r1, #4
 800ce44:	430a      	orrs	r2, r1
 800ce46:	b291      	uxth	r1, r2
 800ce48:	2240      	movs	r2, #64	@ 0x40
 800ce4a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2240      	movs	r2, #64	@ 0x40
 800ce52:	5a9b      	ldrh	r3, [r3, r2]
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2108      	movs	r1, #8
 800ce5c:	430a      	orrs	r2, r1
 800ce5e:	b291      	uxth	r1, r2
 800ce60:	2240      	movs	r2, #64	@ 0x40
 800ce62:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	23b8      	movs	r3, #184	@ 0xb8
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2254      	movs	r2, #84	@ 0x54
 800ce74:	5a9b      	ldrh	r3, [r3, r2]
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	089b      	lsrs	r3, r3, #2
 800ce7a:	223c      	movs	r2, #60	@ 0x3c
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	0019      	movs	r1, r3
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	23b9      	movs	r3, #185	@ 0xb9
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	0018      	movs	r0, r3
 800ce8e:	f001 fc1b 	bl	800e6c8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800ce92:	e02c      	b.n	800ceee <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	0018      	movs	r0, r3
 800ce98:	f008 fd20 	bl	80158dc <HAL_PCD_SuspendCallback>
    return;
 800ce9c:	e027      	b.n	800ceee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	2380      	movs	r3, #128	@ 0x80
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4013      	ands	r3, r2
 800cea6:	d010      	beq.n	800ceca <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2244      	movs	r2, #68	@ 0x44
 800ceae:	5a9b      	ldrh	r3, [r3, r2]
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4914      	ldr	r1, [pc, #80]	@ (800cf08 <HAL_PCD_IRQHandler+0x280>)
 800ceb8:	400a      	ands	r2, r1
 800ceba:	b291      	uxth	r1, r2
 800cebc:	2244      	movs	r2, #68	@ 0x44
 800cebe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	0018      	movs	r0, r3
 800cec4:	f008 fcd6 	bl	8015874 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800cec8:	e011      	b.n	800ceee <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	2380      	movs	r3, #128	@ 0x80
 800cece:	005b      	lsls	r3, r3, #1
 800ced0:	4013      	ands	r3, r2
 800ced2:	d00c      	beq.n	800ceee <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2244      	movs	r2, #68	@ 0x44
 800ceda:	5a9b      	ldrh	r3, [r3, r2]
 800cedc:	b29a      	uxth	r2, r3
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	490a      	ldr	r1, [pc, #40]	@ (800cf0c <HAL_PCD_IRQHandler+0x284>)
 800cee4:	400a      	ands	r2, r1
 800cee6:	b291      	uxth	r1, r2
 800cee8:	2244      	movs	r2, #68	@ 0x44
 800ceea:	5299      	strh	r1, [r3, r2]

    return;
 800ceec:	46c0      	nop			@ (mov r8, r8)
  }
}
 800ceee:	46bd      	mov	sp, r7
 800cef0:	b004      	add	sp, #16
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	fffffbff 	.word	0xfffffbff
 800cef8:	ffffbfff 	.word	0xffffbfff
 800cefc:	ffffdfff 	.word	0xffffdfff
 800cf00:	ffffefff 	.word	0xffffefff
 800cf04:	fffff7ff 	.word	0xfffff7ff
 800cf08:	fffffdff 	.word	0xfffffdff
 800cf0c:	fffffeff 	.word	0xfffffeff

0800cf10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	000a      	movs	r2, r1
 800cf1a:	1cfb      	adds	r3, r7, #3
 800cf1c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	23aa      	movs	r3, #170	@ 0xaa
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	5cd3      	ldrb	r3, [r2, r3]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d101      	bne.n	800cf2e <HAL_PCD_SetAddress+0x1e>
 800cf2a:	2302      	movs	r3, #2
 800cf2c:	e017      	b.n	800cf5e <HAL_PCD_SetAddress+0x4e>
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	23aa      	movs	r3, #170	@ 0xaa
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	2101      	movs	r1, #1
 800cf36:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	1cfa      	adds	r2, r7, #3
 800cf3c:	2124      	movs	r1, #36	@ 0x24
 800cf3e:	7812      	ldrb	r2, [r2, #0]
 800cf40:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	1cfb      	adds	r3, r7, #3
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	0019      	movs	r1, r3
 800cf4c:	0010      	movs	r0, r2
 800cf4e:	f006 fc85 	bl	801385c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	23aa      	movs	r3, #170	@ 0xaa
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	2100      	movs	r1, #0
 800cf5a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	0018      	movs	r0, r3
 800cf60:	46bd      	mov	sp, r7
 800cf62:	b002      	add	sp, #8
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cf66:	b590      	push	{r4, r7, lr}
 800cf68:	b085      	sub	sp, #20
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
 800cf6e:	000c      	movs	r4, r1
 800cf70:	0010      	movs	r0, r2
 800cf72:	0019      	movs	r1, r3
 800cf74:	1cfb      	adds	r3, r7, #3
 800cf76:	1c22      	adds	r2, r4, #0
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	003b      	movs	r3, r7
 800cf7c:	1c02      	adds	r2, r0, #0
 800cf7e:	801a      	strh	r2, [r3, #0]
 800cf80:	1cbb      	adds	r3, r7, #2
 800cf82:	1c0a      	adds	r2, r1, #0
 800cf84:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cf86:	230b      	movs	r3, #11
 800cf88:	18fb      	adds	r3, r7, r3
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cf8e:	1cfb      	adds	r3, r7, #3
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	b25b      	sxtb	r3, r3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	da0f      	bge.n	800cfb8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf98:	1cfb      	adds	r3, r7, #3
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2207      	movs	r2, #7
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	1c5a      	adds	r2, r3, #1
 800cfa2:	0013      	movs	r3, r2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	189b      	adds	r3, r3, r2
 800cfa8:	00db      	lsls	r3, r3, #3
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	18d3      	adds	r3, r2, r3
 800cfae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	705a      	strb	r2, [r3, #1]
 800cfb6:	e00f      	b.n	800cfd8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cfb8:	1cfb      	adds	r3, r7, #3
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	2207      	movs	r2, #7
 800cfbe:	401a      	ands	r2, r3
 800cfc0:	0013      	movs	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	189b      	adds	r3, r3, r2
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	3369      	adds	r3, #105	@ 0x69
 800cfca:	33ff      	adds	r3, #255	@ 0xff
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	18d3      	adds	r3, r2, r3
 800cfd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800cfd8:	1cfb      	adds	r3, r7, #3
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2207      	movs	r2, #7
 800cfde:	4013      	ands	r3, r2
 800cfe0:	b2da      	uxtb	r2, r3
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800cfe6:	003b      	movs	r3, r7
 800cfe8:	881a      	ldrh	r2, [r3, #0]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	1cba      	adds	r2, r7, #2
 800cff2:	7812      	ldrb	r2, [r2, #0]
 800cff4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cff6:	1cbb      	adds	r3, r7, #2
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d102      	bne.n	800d004 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	23aa      	movs	r3, #170	@ 0xaa
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	5cd3      	ldrb	r3, [r2, r3]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d101      	bne.n	800d014 <HAL_PCD_EP_Open+0xae>
 800d010:	2302      	movs	r3, #2
 800d012:	e013      	b.n	800d03c <HAL_PCD_EP_Open+0xd6>
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	23aa      	movs	r3, #170	@ 0xaa
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	2101      	movs	r1, #1
 800d01c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	0011      	movs	r1, r2
 800d026:	0018      	movs	r0, r3
 800d028:	f004 fc7c 	bl	8011924 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	23aa      	movs	r3, #170	@ 0xaa
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	2100      	movs	r1, #0
 800d034:	54d1      	strb	r1, [r2, r3]

  return ret;
 800d036:	230b      	movs	r3, #11
 800d038:	18fb      	adds	r3, r7, r3
 800d03a:	781b      	ldrb	r3, [r3, #0]
}
 800d03c:	0018      	movs	r0, r3
 800d03e:	46bd      	mov	sp, r7
 800d040:	b005      	add	sp, #20
 800d042:	bd90      	pop	{r4, r7, pc}

0800d044 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	000a      	movs	r2, r1
 800d04e:	1cfb      	adds	r3, r7, #3
 800d050:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d052:	1cfb      	adds	r3, r7, #3
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	b25b      	sxtb	r3, r3
 800d058:	2b00      	cmp	r3, #0
 800d05a:	da0f      	bge.n	800d07c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d05c:	1cfb      	adds	r3, r7, #3
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	2207      	movs	r2, #7
 800d062:	4013      	ands	r3, r2
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	0013      	movs	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	189b      	adds	r3, r3, r2
 800d06c:	00db      	lsls	r3, r3, #3
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	18d3      	adds	r3, r2, r3
 800d072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2201      	movs	r2, #1
 800d078:	705a      	strb	r2, [r3, #1]
 800d07a:	e00f      	b.n	800d09c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d07c:	1cfb      	adds	r3, r7, #3
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2207      	movs	r2, #7
 800d082:	401a      	ands	r2, r3
 800d084:	0013      	movs	r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	189b      	adds	r3, r3, r2
 800d08a:	00db      	lsls	r3, r3, #3
 800d08c:	3369      	adds	r3, #105	@ 0x69
 800d08e:	33ff      	adds	r3, #255	@ 0xff
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	18d3      	adds	r3, r2, r3
 800d094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2200      	movs	r2, #0
 800d09a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d09c:	1cfb      	adds	r3, r7, #3
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	2207      	movs	r2, #7
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	23aa      	movs	r3, #170	@ 0xaa
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	5cd3      	ldrb	r3, [r2, r3]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d101      	bne.n	800d0ba <HAL_PCD_EP_Close+0x76>
 800d0b6:	2302      	movs	r3, #2
 800d0b8:	e011      	b.n	800d0de <HAL_PCD_EP_Close+0x9a>
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	23aa      	movs	r3, #170	@ 0xaa
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	2101      	movs	r1, #1
 800d0c2:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	0011      	movs	r1, r2
 800d0cc:	0018      	movs	r0, r3
 800d0ce:	f004 ffcb 	bl	8012068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d0d2:	687a      	ldr	r2, [r7, #4]
 800d0d4:	23aa      	movs	r3, #170	@ 0xaa
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	2100      	movs	r1, #0
 800d0da:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
}
 800d0de:	0018      	movs	r0, r3
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	b004      	add	sp, #16
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b086      	sub	sp, #24
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	60f8      	str	r0, [r7, #12]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	603b      	str	r3, [r7, #0]
 800d0f2:	200b      	movs	r0, #11
 800d0f4:	183b      	adds	r3, r7, r0
 800d0f6:	1c0a      	adds	r2, r1, #0
 800d0f8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0fa:	0001      	movs	r1, r0
 800d0fc:	187b      	adds	r3, r7, r1
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	2207      	movs	r2, #7
 800d102:	401a      	ands	r2, r3
 800d104:	0013      	movs	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	189b      	adds	r3, r3, r2
 800d10a:	00db      	lsls	r3, r3, #3
 800d10c:	3369      	adds	r3, #105	@ 0x69
 800d10e:	33ff      	adds	r3, #255	@ 0xff
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	18d3      	adds	r3, r2, r3
 800d114:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	2200      	movs	r2, #0
 800d126:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2200      	movs	r2, #0
 800d12c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d12e:	187b      	adds	r3, r7, r1
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	2207      	movs	r2, #7
 800d134:	4013      	ands	r3, r2
 800d136:	b2da      	uxtb	r2, r3
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	0011      	movs	r1, r2
 800d144:	0018      	movs	r0, r3
 800d146:	f005 f94f 	bl	80123e8 <USB_EPStartXfer>

  return HAL_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	0018      	movs	r0, r3
 800d14e:	46bd      	mov	sp, r7
 800d150:	b006      	add	sp, #24
 800d152:	bd80      	pop	{r7, pc}

0800d154 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	000a      	movs	r2, r1
 800d15e:	1cfb      	adds	r3, r7, #3
 800d160:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d162:	1cfb      	adds	r3, r7, #3
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	2207      	movs	r2, #7
 800d168:	401a      	ands	r2, r3
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	23c2      	movs	r3, #194	@ 0xc2
 800d16e:	0059      	lsls	r1, r3, #1
 800d170:	0013      	movs	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	189b      	adds	r3, r3, r2
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	18c3      	adds	r3, r0, r3
 800d17a:	185b      	adds	r3, r3, r1
 800d17c:	681b      	ldr	r3, [r3, #0]
}
 800d17e:	0018      	movs	r0, r3
 800d180:	46bd      	mov	sp, r7
 800d182:	b002      	add	sp, #8
 800d184:	bd80      	pop	{r7, pc}

0800d186 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b086      	sub	sp, #24
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	60f8      	str	r0, [r7, #12]
 800d18e:	607a      	str	r2, [r7, #4]
 800d190:	603b      	str	r3, [r7, #0]
 800d192:	200b      	movs	r0, #11
 800d194:	183b      	adds	r3, r7, r0
 800d196:	1c0a      	adds	r2, r1, #0
 800d198:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d19a:	183b      	adds	r3, r7, r0
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	2207      	movs	r2, #7
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	0013      	movs	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	189b      	adds	r3, r3, r2
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	18d3      	adds	r3, r2, r3
 800d1b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	683a      	ldr	r2, [r7, #0]
 800d1bc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2224      	movs	r2, #36	@ 0x24
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	683a      	ldr	r2, [r7, #0]
 800d1ca:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d1d8:	183b      	adds	r3, r7, r0
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	2207      	movs	r2, #7
 800d1de:	4013      	ands	r3, r2
 800d1e0:	b2da      	uxtb	r2, r3
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	0011      	movs	r1, r2
 800d1ee:	0018      	movs	r0, r3
 800d1f0:	f005 f8fa 	bl	80123e8 <USB_EPStartXfer>

  return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	b006      	add	sp, #24
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b084      	sub	sp, #16
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	000a      	movs	r2, r1
 800d208:	1cfb      	adds	r3, r7, #3
 800d20a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d20c:	1cfb      	adds	r3, r7, #3
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2207      	movs	r2, #7
 800d212:	401a      	ands	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d901      	bls.n	800d220 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800d21c:	2301      	movs	r3, #1
 800d21e:	e046      	b.n	800d2ae <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d220:	1cfb      	adds	r3, r7, #3
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	b25b      	sxtb	r3, r3
 800d226:	2b00      	cmp	r3, #0
 800d228:	da0f      	bge.n	800d24a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d22a:	1cfb      	adds	r3, r7, #3
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2207      	movs	r2, #7
 800d230:	4013      	ands	r3, r2
 800d232:	1c5a      	adds	r2, r3, #1
 800d234:	0013      	movs	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	189b      	adds	r3, r3, r2
 800d23a:	00db      	lsls	r3, r3, #3
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	18d3      	adds	r3, r2, r3
 800d240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2201      	movs	r2, #1
 800d246:	705a      	strb	r2, [r3, #1]
 800d248:	e00d      	b.n	800d266 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d24a:	1cfb      	adds	r3, r7, #3
 800d24c:	781a      	ldrb	r2, [r3, #0]
 800d24e:	0013      	movs	r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	189b      	adds	r3, r3, r2
 800d254:	00db      	lsls	r3, r3, #3
 800d256:	3369      	adds	r3, #105	@ 0x69
 800d258:	33ff      	adds	r3, #255	@ 0xff
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	18d3      	adds	r3, r2, r3
 800d25e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2201      	movs	r2, #1
 800d26a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d26c:	1cfb      	adds	r3, r7, #3
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2207      	movs	r2, #7
 800d272:	4013      	ands	r3, r2
 800d274:	b2da      	uxtb	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	23aa      	movs	r3, #170	@ 0xaa
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	5cd3      	ldrb	r3, [r2, r3]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d101      	bne.n	800d28a <HAL_PCD_EP_SetStall+0x8c>
 800d286:	2302      	movs	r3, #2
 800d288:	e011      	b.n	800d2ae <HAL_PCD_EP_SetStall+0xb0>
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	23aa      	movs	r3, #170	@ 0xaa
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	2101      	movs	r1, #1
 800d292:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	0011      	movs	r1, r2
 800d29c:	0018      	movs	r0, r3
 800d29e:	f006 f9db 	bl	8013658 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	23aa      	movs	r3, #170	@ 0xaa
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	0018      	movs	r0, r3
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	b004      	add	sp, #16
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	000a      	movs	r2, r1
 800d2c0:	1cfb      	adds	r3, r7, #3
 800d2c2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d2c4:	1cfb      	adds	r3, r7, #3
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	220f      	movs	r2, #15
 800d2ca:	401a      	ands	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d901      	bls.n	800d2d8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e048      	b.n	800d36a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d2d8:	1cfb      	adds	r3, r7, #3
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	b25b      	sxtb	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	da0f      	bge.n	800d302 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2e2:	1cfb      	adds	r3, r7, #3
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2207      	movs	r2, #7
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	1c5a      	adds	r2, r3, #1
 800d2ec:	0013      	movs	r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	189b      	adds	r3, r3, r2
 800d2f2:	00db      	lsls	r3, r3, #3
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	18d3      	adds	r3, r2, r3
 800d2f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	705a      	strb	r2, [r3, #1]
 800d300:	e00f      	b.n	800d322 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d302:	1cfb      	adds	r3, r7, #3
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	2207      	movs	r2, #7
 800d308:	401a      	ands	r2, r3
 800d30a:	0013      	movs	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	189b      	adds	r3, r3, r2
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	3369      	adds	r3, #105	@ 0x69
 800d314:	33ff      	adds	r3, #255	@ 0xff
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	18d3      	adds	r3, r2, r3
 800d31a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2200      	movs	r2, #0
 800d326:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d328:	1cfb      	adds	r3, r7, #3
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2207      	movs	r2, #7
 800d32e:	4013      	ands	r3, r2
 800d330:	b2da      	uxtb	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	23aa      	movs	r3, #170	@ 0xaa
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	5cd3      	ldrb	r3, [r2, r3]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d101      	bne.n	800d346 <HAL_PCD_EP_ClrStall+0x90>
 800d342:	2302      	movs	r3, #2
 800d344:	e011      	b.n	800d36a <HAL_PCD_EP_ClrStall+0xb4>
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	23aa      	movs	r3, #170	@ 0xaa
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	2101      	movs	r1, #1
 800d34e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	0011      	movs	r1, r2
 800d358:	0018      	movs	r0, r3
 800d35a:	f006 f9cd 	bl	80136f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	23aa      	movs	r3, #170	@ 0xaa
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	2100      	movs	r1, #0
 800d366:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	0018      	movs	r0, r3
 800d36c:	46bd      	mov	sp, r7
 800d36e:	b004      	add	sp, #16
 800d370:	bd80      	pop	{r7, pc}
	...

0800d374 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800d374:	b5b0      	push	{r4, r5, r7, lr}
 800d376:	b096      	sub	sp, #88	@ 0x58
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d37c:	f000 fbec 	bl	800db58 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	204e      	movs	r0, #78	@ 0x4e
 800d386:	183b      	adds	r3, r7, r0
 800d388:	2144      	movs	r1, #68	@ 0x44
 800d38a:	5a52      	ldrh	r2, [r2, r1]
 800d38c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800d38e:	183b      	adds	r3, r7, r0
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	b2da      	uxtb	r2, r3
 800d394:	244d      	movs	r4, #77	@ 0x4d
 800d396:	193b      	adds	r3, r7, r4
 800d398:	210f      	movs	r1, #15
 800d39a:	400a      	ands	r2, r1
 800d39c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800d39e:	193b      	adds	r3, r7, r4
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d000      	beq.n	800d3a8 <PCD_EP_ISR_Handler+0x34>
 800d3a6:	e18f      	b.n	800d6c8 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800d3a8:	183b      	adds	r3, r7, r0
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	2210      	movs	r2, #16
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	d155      	bne.n	800d45e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	200e      	movs	r0, #14
 800d3bc:	183b      	adds	r3, r7, r0
 800d3be:	49bb      	ldr	r1, [pc, #748]	@ (800d6ac <PCD_EP_ISR_Handler+0x338>)
 800d3c0:	400a      	ands	r2, r1
 800d3c2:	801a      	strh	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	183a      	adds	r2, r7, r0
 800d3ca:	8812      	ldrh	r2, [r2, #0]
 800d3cc:	49b8      	ldr	r1, [pc, #736]	@ (800d6b0 <PCD_EP_ISR_Handler+0x33c>)
 800d3ce:	430a      	orrs	r2, r1
 800d3d0:	b292      	uxth	r2, r2
 800d3d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3328      	adds	r3, #40	@ 0x28
 800d3d8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2250      	movs	r2, #80	@ 0x50
 800d3e0:	5a9b      	ldrh	r3, [r3, r2]
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	001a      	movs	r2, r3
 800d3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	00db      	lsls	r3, r3, #3
 800d3ec:	18d2      	adds	r2, r2, r3
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	18d3      	adds	r3, r2, r3
 800d3f4:	4aaf      	ldr	r2, [pc, #700]	@ (800d6b4 <PCD_EP_ISR_Handler+0x340>)
 800d3f6:	4694      	mov	ip, r2
 800d3f8:	4463      	add	r3, ip
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	059b      	lsls	r3, r3, #22
 800d3fe:	0d9a      	lsrs	r2, r3, #22
 800d400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d402:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800d404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d406:	695a      	ldr	r2, [r3, #20]
 800d408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d40a:	69db      	ldr	r3, [r3, #28]
 800d40c:	18d2      	adds	r2, r2, r3
 800d40e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d410:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2100      	movs	r1, #0
 800d416:	0018      	movs	r0, r3
 800d418:	f008 fa0e 	bl	8015838 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2224      	movs	r2, #36	@ 0x24
 800d420:	5c9b      	ldrb	r3, [r3, r2]
 800d422:	b2db      	uxtb	r3, r3
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <PCD_EP_ISR_Handler+0xb8>
 800d428:	f000 fb96 	bl	800db58 <PCD_EP_ISR_Handler+0x7e4>
 800d42c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d42e:	699b      	ldr	r3, [r3, #24]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <PCD_EP_ISR_Handler+0xc4>
 800d434:	f000 fb90 	bl	800db58 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2224      	movs	r2, #36	@ 0x24
 800d43c:	5c9b      	ldrb	r3, [r3, r2]
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	2280      	movs	r2, #128	@ 0x80
 800d442:	4252      	negs	r2, r2
 800d444:	4313      	orrs	r3, r2
 800d446:	b2da      	uxtb	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	0011      	movs	r1, r2
 800d44e:	224c      	movs	r2, #76	@ 0x4c
 800d450:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2224      	movs	r2, #36	@ 0x24
 800d456:	2100      	movs	r1, #0
 800d458:	5499      	strb	r1, [r3, r2]
 800d45a:	f000 fb7d 	bl	800db58 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	3369      	adds	r3, #105	@ 0x69
 800d462:	33ff      	adds	r3, #255	@ 0xff
 800d464:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	214a      	movs	r1, #74	@ 0x4a
 800d46c:	187b      	adds	r3, r7, r1
 800d46e:	8812      	ldrh	r2, [r2, #0]
 800d470:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d472:	187b      	adds	r3, r7, r1
 800d474:	881a      	ldrh	r2, [r3, #0]
 800d476:	2380      	movs	r3, #128	@ 0x80
 800d478:	011b      	lsls	r3, r3, #4
 800d47a:	4013      	ands	r3, r2
 800d47c:	d037      	beq.n	800d4ee <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2250      	movs	r2, #80	@ 0x50
 800d484:	5a9b      	ldrh	r3, [r3, r2]
 800d486:	b29b      	uxth	r3, r3
 800d488:	001a      	movs	r2, r3
 800d48a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	18d2      	adds	r2, r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	18d3      	adds	r3, r2, r3
 800d498:	4a87      	ldr	r2, [pc, #540]	@ (800d6b8 <PCD_EP_ISR_Handler+0x344>)
 800d49a:	4694      	mov	ip, r2
 800d49c:	4463      	add	r3, ip
 800d49e:	881b      	ldrh	r3, [r3, #0]
 800d4a0:	059b      	lsls	r3, r3, #22
 800d4a2:	0d9a      	lsrs	r2, r3, #22
 800d4a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6818      	ldr	r0, [r3, #0]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	22ac      	movs	r2, #172	@ 0xac
 800d4b0:	0092      	lsls	r2, r2, #2
 800d4b2:	1899      	adds	r1, r3, r2
 800d4b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4b6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800d4b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4ba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	f006 fa4e 	bl	801395e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	2010      	movs	r0, #16
 800d4cc:	183b      	adds	r3, r7, r0
 800d4ce:	497b      	ldr	r1, [pc, #492]	@ (800d6bc <PCD_EP_ISR_Handler+0x348>)
 800d4d0:	400a      	ands	r2, r1
 800d4d2:	801a      	strh	r2, [r3, #0]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	183a      	adds	r2, r7, r0
 800d4da:	8812      	ldrh	r2, [r2, #0]
 800d4dc:	2180      	movs	r1, #128	@ 0x80
 800d4de:	430a      	orrs	r2, r1
 800d4e0:	b292      	uxth	r2, r2
 800d4e2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	0018      	movs	r0, r3
 800d4e8:	f008 f970 	bl	80157cc <HAL_PCD_SetupStageCallback>
 800d4ec:	e334      	b.n	800db58 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d4ee:	234a      	movs	r3, #74	@ 0x4a
 800d4f0:	18fb      	adds	r3, r7, r3
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	5e9b      	ldrsh	r3, [r3, r2]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	db00      	blt.n	800d4fc <PCD_EP_ISR_Handler+0x188>
 800d4fa:	e32d      	b.n	800db58 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	b29a      	uxth	r2, r3
 800d504:	201e      	movs	r0, #30
 800d506:	183b      	adds	r3, r7, r0
 800d508:	496c      	ldr	r1, [pc, #432]	@ (800d6bc <PCD_EP_ISR_Handler+0x348>)
 800d50a:	400a      	ands	r2, r1
 800d50c:	801a      	strh	r2, [r3, #0]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	183a      	adds	r2, r7, r0
 800d514:	8812      	ldrh	r2, [r2, #0]
 800d516:	2180      	movs	r1, #128	@ 0x80
 800d518:	430a      	orrs	r2, r1
 800d51a:	b292      	uxth	r2, r2
 800d51c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2250      	movs	r2, #80	@ 0x50
 800d524:	5a9b      	ldrh	r3, [r3, r2]
 800d526:	b29b      	uxth	r3, r3
 800d528:	001a      	movs	r2, r3
 800d52a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	18d2      	adds	r2, r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	18d3      	adds	r3, r2, r3
 800d538:	4a5f      	ldr	r2, [pc, #380]	@ (800d6b8 <PCD_EP_ISR_Handler+0x344>)
 800d53a:	4694      	mov	ip, r2
 800d53c:	4463      	add	r3, ip
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	059b      	lsls	r3, r3, #22
 800d542:	0d9a      	lsrs	r2, r3, #22
 800d544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d546:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800d548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d54a:	69db      	ldr	r3, [r3, #28]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d01a      	beq.n	800d586 <PCD_EP_ISR_Handler+0x212>
 800d550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d552:	695b      	ldr	r3, [r3, #20]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d016      	beq.n	800d586 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6818      	ldr	r0, [r3, #0]
 800d55c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d55e:	6959      	ldr	r1, [r3, #20]
 800d560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d562:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800d564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d566:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d568:	b29b      	uxth	r3, r3
 800d56a:	f006 f9f8 	bl	801395e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800d56e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d570:	695a      	ldr	r2, [r3, #20]
 800d572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d574:	69db      	ldr	r3, [r3, #28]
 800d576:	18d2      	adds	r2, r2, r3
 800d578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d57a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2100      	movs	r1, #0
 800d580:	0018      	movs	r0, r3
 800d582:	f008 f938 	bl	80157f6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	214a      	movs	r1, #74	@ 0x4a
 800d58c:	187b      	adds	r3, r7, r1
 800d58e:	8812      	ldrh	r2, [r2, #0]
 800d590:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800d592:	187b      	adds	r3, r7, r1
 800d594:	881a      	ldrh	r2, [r3, #0]
 800d596:	2380      	movs	r3, #128	@ 0x80
 800d598:	011b      	lsls	r3, r3, #4
 800d59a:	4013      	ands	r3, r2
 800d59c:	d000      	beq.n	800d5a0 <PCD_EP_ISR_Handler+0x22c>
 800d59e:	e2db      	b.n	800db58 <PCD_EP_ISR_Handler+0x7e4>
 800d5a0:	187b      	adds	r3, r7, r1
 800d5a2:	881a      	ldrh	r2, [r3, #0]
 800d5a4:	23c0      	movs	r3, #192	@ 0xc0
 800d5a6:	019b      	lsls	r3, r3, #6
 800d5a8:	401a      	ands	r2, r3
 800d5aa:	23c0      	movs	r3, #192	@ 0xc0
 800d5ac:	019b      	lsls	r3, r3, #6
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d100      	bne.n	800d5b4 <PCD_EP_ISR_Handler+0x240>
 800d5b2:	e2d1      	b.n	800db58 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	61bb      	str	r3, [r7, #24]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2250      	movs	r2, #80	@ 0x50
 800d5c0:	5a9b      	ldrh	r3, [r3, r2]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	001a      	movs	r2, r3
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	189b      	adds	r3, r3, r2
 800d5ca:	61bb      	str	r3, [r7, #24]
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	4a3a      	ldr	r2, [pc, #232]	@ (800d6b8 <PCD_EP_ISR_Handler+0x344>)
 800d5d0:	4694      	mov	ip, r2
 800d5d2:	4463      	add	r3, ip
 800d5d4:	617b      	str	r3, [r7, #20]
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	059b      	lsls	r3, r3, #22
 800d5de:	0d9b      	lsrs	r3, r3, #22
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	801a      	strh	r2, [r3, #0]
 800d5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5e8:	691b      	ldr	r3, [r3, #16]
 800d5ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800d5ec:	d91a      	bls.n	800d624 <PCD_EP_ISR_Handler+0x2b0>
 800d5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5f0:	691b      	ldr	r3, [r3, #16]
 800d5f2:	095b      	lsrs	r3, r3, #5
 800d5f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	221f      	movs	r2, #31
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	d102      	bne.n	800d606 <PCD_EP_ISR_Handler+0x292>
 800d600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d602:	3b01      	subs	r3, #1
 800d604:	647b      	str	r3, [r7, #68]	@ 0x44
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	881b      	ldrh	r3, [r3, #0]
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d60e:	b29b      	uxth	r3, r3
 800d610:	029b      	lsls	r3, r3, #10
 800d612:	b29b      	uxth	r3, r3
 800d614:	4313      	orrs	r3, r2
 800d616:	b29b      	uxth	r3, r3
 800d618:	4a25      	ldr	r2, [pc, #148]	@ (800d6b0 <PCD_EP_ISR_Handler+0x33c>)
 800d61a:	4313      	orrs	r3, r2
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	801a      	strh	r2, [r3, #0]
 800d622:	e023      	b.n	800d66c <PCD_EP_ISR_Handler+0x2f8>
 800d624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d108      	bne.n	800d63e <PCD_EP_ISR_Handler+0x2ca>
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	b29b      	uxth	r3, r3
 800d632:	4a1f      	ldr	r2, [pc, #124]	@ (800d6b0 <PCD_EP_ISR_Handler+0x33c>)
 800d634:	4313      	orrs	r3, r2
 800d636:	b29a      	uxth	r2, r3
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	801a      	strh	r2, [r3, #0]
 800d63c:	e016      	b.n	800d66c <PCD_EP_ISR_Handler+0x2f8>
 800d63e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	085b      	lsrs	r3, r3, #1
 800d644:	647b      	str	r3, [r7, #68]	@ 0x44
 800d646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	2201      	movs	r2, #1
 800d64c:	4013      	ands	r3, r2
 800d64e:	d002      	beq.n	800d656 <PCD_EP_ISR_Handler+0x2e2>
 800d650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d652:	3301      	adds	r3, #1
 800d654:	647b      	str	r3, [r7, #68]	@ 0x44
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d65e:	b29b      	uxth	r3, r3
 800d660:	029b      	lsls	r3, r3, #10
 800d662:	b29b      	uxth	r3, r3
 800d664:	4313      	orrs	r3, r2
 800d666:	b29a      	uxth	r2, r3
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	881b      	ldrh	r3, [r3, #0]
 800d672:	b29a      	uxth	r2, r3
 800d674:	2012      	movs	r0, #18
 800d676:	183b      	adds	r3, r7, r0
 800d678:	4911      	ldr	r1, [pc, #68]	@ (800d6c0 <PCD_EP_ISR_Handler+0x34c>)
 800d67a:	400a      	ands	r2, r1
 800d67c:	801a      	strh	r2, [r3, #0]
 800d67e:	183b      	adds	r3, r7, r0
 800d680:	183a      	adds	r2, r7, r0
 800d682:	8812      	ldrh	r2, [r2, #0]
 800d684:	2180      	movs	r1, #128	@ 0x80
 800d686:	0149      	lsls	r1, r1, #5
 800d688:	404a      	eors	r2, r1
 800d68a:	801a      	strh	r2, [r3, #0]
 800d68c:	183b      	adds	r3, r7, r0
 800d68e:	183a      	adds	r2, r7, r0
 800d690:	8812      	ldrh	r2, [r2, #0]
 800d692:	2180      	movs	r1, #128	@ 0x80
 800d694:	0189      	lsls	r1, r1, #6
 800d696:	404a      	eors	r2, r1
 800d698:	801a      	strh	r2, [r3, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	183a      	adds	r2, r7, r0
 800d6a0:	8812      	ldrh	r2, [r2, #0]
 800d6a2:	4908      	ldr	r1, [pc, #32]	@ (800d6c4 <PCD_EP_ISR_Handler+0x350>)
 800d6a4:	430a      	orrs	r2, r1
 800d6a6:	b292      	uxth	r2, r2
 800d6a8:	801a      	strh	r2, [r3, #0]
 800d6aa:	e255      	b.n	800db58 <PCD_EP_ISR_Handler+0x7e4>
 800d6ac:	ffff8f0f 	.word	0xffff8f0f
 800d6b0:	ffff8000 	.word	0xffff8000
 800d6b4:	00000402 	.word	0x00000402
 800d6b8:	00000406 	.word	0x00000406
 800d6bc:	00000f8f 	.word	0x00000f8f
 800d6c0:	ffffbf8f 	.word	0xffffbf8f
 800d6c4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	001a      	movs	r2, r3
 800d6ce:	204d      	movs	r0, #77	@ 0x4d
 800d6d0:	183b      	adds	r3, r7, r0
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	18d2      	adds	r2, r2, r3
 800d6d8:	214a      	movs	r1, #74	@ 0x4a
 800d6da:	187b      	adds	r3, r7, r1
 800d6dc:	8812      	ldrh	r2, [r2, #0]
 800d6de:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d6e0:	187b      	adds	r3, r7, r1
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	5e9b      	ldrsh	r3, [r3, r2]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	db00      	blt.n	800d6ec <PCD_EP_ISR_Handler+0x378>
 800d6ea:	e0fa      	b.n	800d8e2 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	001a      	movs	r2, r3
 800d6f2:	183b      	adds	r3, r7, r0
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	18d3      	adds	r3, r2, r3
 800d6fa:	881b      	ldrh	r3, [r3, #0]
 800d6fc:	b29a      	uxth	r2, r3
 800d6fe:	2448      	movs	r4, #72	@ 0x48
 800d700:	193b      	adds	r3, r7, r4
 800d702:	49d1      	ldr	r1, [pc, #836]	@ (800da48 <PCD_EP_ISR_Handler+0x6d4>)
 800d704:	400a      	ands	r2, r1
 800d706:	801a      	strh	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	001a      	movs	r2, r3
 800d70e:	183b      	adds	r3, r7, r0
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	18d3      	adds	r3, r2, r3
 800d716:	193a      	adds	r2, r7, r4
 800d718:	8812      	ldrh	r2, [r2, #0]
 800d71a:	2180      	movs	r1, #128	@ 0x80
 800d71c:	430a      	orrs	r2, r1
 800d71e:	b292      	uxth	r2, r2
 800d720:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800d722:	183b      	adds	r3, r7, r0
 800d724:	781a      	ldrb	r2, [r3, #0]
 800d726:	0013      	movs	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	189b      	adds	r3, r3, r2
 800d72c:	00db      	lsls	r3, r3, #3
 800d72e:	3369      	adds	r3, #105	@ 0x69
 800d730:	33ff      	adds	r3, #255	@ 0xff
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	18d3      	adds	r3, r2, r3
 800d736:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800d738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d73a:	7b1b      	ldrb	r3, [r3, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d125      	bne.n	800d78c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2250      	movs	r2, #80	@ 0x50
 800d746:	5a9b      	ldrh	r3, [r3, r2]
 800d748:	b29b      	uxth	r3, r3
 800d74a:	001a      	movs	r2, r3
 800d74c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	00db      	lsls	r3, r3, #3
 800d752:	18d2      	adds	r2, r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	18d3      	adds	r3, r2, r3
 800d75a:	4abc      	ldr	r2, [pc, #752]	@ (800da4c <PCD_EP_ISR_Handler+0x6d8>)
 800d75c:	4694      	mov	ip, r2
 800d75e:	4463      	add	r3, ip
 800d760:	881a      	ldrh	r2, [r3, #0]
 800d762:	2450      	movs	r4, #80	@ 0x50
 800d764:	193b      	adds	r3, r7, r4
 800d766:	0592      	lsls	r2, r2, #22
 800d768:	0d92      	lsrs	r2, r2, #22
 800d76a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800d76c:	193b      	adds	r3, r7, r4
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d100      	bne.n	800d776 <PCD_EP_ISR_Handler+0x402>
 800d774:	e08d      	b.n	800d892 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6818      	ldr	r0, [r3, #0]
 800d77a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d77c:	6959      	ldr	r1, [r3, #20]
 800d77e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d780:	88da      	ldrh	r2, [r3, #6]
 800d782:	193b      	adds	r3, r7, r4
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	f006 f8ea 	bl	801395e <USB_ReadPMA>
 800d78a:	e082      	b.n	800d892 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800d78c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d78e:	78db      	ldrb	r3, [r3, #3]
 800d790:	2b02      	cmp	r3, #2
 800d792:	d10c      	bne.n	800d7ae <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800d794:	2350      	movs	r3, #80	@ 0x50
 800d796:	18fc      	adds	r4, r7, r3
 800d798:	234a      	movs	r3, #74	@ 0x4a
 800d79a:	18fb      	adds	r3, r7, r3
 800d79c:	881a      	ldrh	r2, [r3, #0]
 800d79e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	0018      	movs	r0, r3
 800d7a4:	f000 f9ec 	bl	800db80 <HAL_PCD_EP_DB_Receive>
 800d7a8:	0003      	movs	r3, r0
 800d7aa:	8023      	strh	r3, [r4, #0]
 800d7ac:	e071      	b.n	800d892 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	001a      	movs	r2, r3
 800d7b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	18d3      	adds	r3, r2, r3
 800d7bc:	881b      	ldrh	r3, [r3, #0]
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	2052      	movs	r0, #82	@ 0x52
 800d7c2:	183b      	adds	r3, r7, r0
 800d7c4:	49a2      	ldr	r1, [pc, #648]	@ (800da50 <PCD_EP_ISR_Handler+0x6dc>)
 800d7c6:	400a      	ands	r2, r1
 800d7c8:	801a      	strh	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	001a      	movs	r2, r3
 800d7d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	18d3      	adds	r3, r2, r3
 800d7d8:	183a      	adds	r2, r7, r0
 800d7da:	8812      	ldrh	r2, [r2, #0]
 800d7dc:	499d      	ldr	r1, [pc, #628]	@ (800da54 <PCD_EP_ISR_Handler+0x6e0>)
 800d7de:	430a      	orrs	r2, r1
 800d7e0:	b292      	uxth	r2, r2
 800d7e2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	001a      	movs	r2, r3
 800d7ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	18d3      	adds	r3, r2, r3
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	001a      	movs	r2, r3
 800d7f8:	2380      	movs	r3, #128	@ 0x80
 800d7fa:	01db      	lsls	r3, r3, #7
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	d024      	beq.n	800d84a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2250      	movs	r2, #80	@ 0x50
 800d806:	5a9b      	ldrh	r3, [r3, r2]
 800d808:	b29b      	uxth	r3, r3
 800d80a:	001a      	movs	r2, r3
 800d80c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	00db      	lsls	r3, r3, #3
 800d812:	18d2      	adds	r2, r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	18d3      	adds	r3, r2, r3
 800d81a:	4a8f      	ldr	r2, [pc, #572]	@ (800da58 <PCD_EP_ISR_Handler+0x6e4>)
 800d81c:	4694      	mov	ip, r2
 800d81e:	4463      	add	r3, ip
 800d820:	881a      	ldrh	r2, [r3, #0]
 800d822:	2450      	movs	r4, #80	@ 0x50
 800d824:	193b      	adds	r3, r7, r4
 800d826:	0592      	lsls	r2, r2, #22
 800d828:	0d92      	lsrs	r2, r2, #22
 800d82a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800d82c:	193b      	adds	r3, r7, r4
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d02e      	beq.n	800d892 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6818      	ldr	r0, [r3, #0]
 800d838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d83a:	6959      	ldr	r1, [r3, #20]
 800d83c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d83e:	891a      	ldrh	r2, [r3, #8]
 800d840:	193b      	adds	r3, r7, r4
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	f006 f88b 	bl	801395e <USB_ReadPMA>
 800d848:	e023      	b.n	800d892 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2250      	movs	r2, #80	@ 0x50
 800d850:	5a9b      	ldrh	r3, [r3, r2]
 800d852:	b29b      	uxth	r3, r3
 800d854:	001a      	movs	r2, r3
 800d856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	00db      	lsls	r3, r3, #3
 800d85c:	18d2      	adds	r2, r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	18d3      	adds	r3, r2, r3
 800d864:	4a79      	ldr	r2, [pc, #484]	@ (800da4c <PCD_EP_ISR_Handler+0x6d8>)
 800d866:	4694      	mov	ip, r2
 800d868:	4463      	add	r3, ip
 800d86a:	881a      	ldrh	r2, [r3, #0]
 800d86c:	2450      	movs	r4, #80	@ 0x50
 800d86e:	193b      	adds	r3, r7, r4
 800d870:	0592      	lsls	r2, r2, #22
 800d872:	0d92      	lsrs	r2, r2, #22
 800d874:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800d876:	193b      	adds	r3, r7, r4
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d009      	beq.n	800d892 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6818      	ldr	r0, [r3, #0]
 800d882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d884:	6959      	ldr	r1, [r3, #20]
 800d886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d888:	895a      	ldrh	r2, [r3, #10]
 800d88a:	193b      	adds	r3, r7, r4
 800d88c:	881b      	ldrh	r3, [r3, #0]
 800d88e:	f006 f866 	bl	801395e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800d892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d894:	69da      	ldr	r2, [r3, #28]
 800d896:	2150      	movs	r1, #80	@ 0x50
 800d898:	187b      	adds	r3, r7, r1
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	18d2      	adds	r2, r2, r3
 800d89e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800d8a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8a4:	695a      	ldr	r2, [r3, #20]
 800d8a6:	187b      	adds	r3, r7, r1
 800d8a8:	881b      	ldrh	r3, [r3, #0]
 800d8aa:	18d2      	adds	r2, r2, r3
 800d8ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800d8b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d005      	beq.n	800d8c4 <PCD_EP_ISR_Handler+0x550>
 800d8b8:	187b      	adds	r3, r7, r1
 800d8ba:	881a      	ldrh	r2, [r3, #0]
 800d8bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d207      	bcs.n	800d8d4 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800d8c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8c6:	781a      	ldrb	r2, [r3, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	0011      	movs	r1, r2
 800d8cc:	0018      	movs	r0, r3
 800d8ce:	f007 ff92 	bl	80157f6 <HAL_PCD_DataOutStageCallback>
 800d8d2:	e006      	b.n	800d8e2 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d8da:	0011      	movs	r1, r2
 800d8dc:	0018      	movs	r0, r3
 800d8de:	f004 fd83 	bl	80123e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800d8e2:	244a      	movs	r4, #74	@ 0x4a
 800d8e4:	193b      	adds	r3, r7, r4
 800d8e6:	881b      	ldrh	r3, [r3, #0]
 800d8e8:	2280      	movs	r2, #128	@ 0x80
 800d8ea:	4013      	ands	r3, r2
 800d8ec:	d100      	bne.n	800d8f0 <PCD_EP_ISR_Handler+0x57c>
 800d8ee:	e133      	b.n	800db58 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800d8f0:	204d      	movs	r0, #77	@ 0x4d
 800d8f2:	183b      	adds	r3, r7, r0
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	1c5a      	adds	r2, r3, #1
 800d8f8:	0013      	movs	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	189b      	adds	r3, r3, r2
 800d8fe:	00db      	lsls	r3, r3, #3
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	18d3      	adds	r3, r2, r3
 800d904:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	001a      	movs	r2, r3
 800d90c:	183b      	adds	r3, r7, r0
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	18d3      	adds	r3, r2, r3
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	b29a      	uxth	r2, r3
 800d918:	2542      	movs	r5, #66	@ 0x42
 800d91a:	197b      	adds	r3, r7, r5
 800d91c:	494f      	ldr	r1, [pc, #316]	@ (800da5c <PCD_EP_ISR_Handler+0x6e8>)
 800d91e:	400a      	ands	r2, r1
 800d920:	801a      	strh	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	001a      	movs	r2, r3
 800d928:	183b      	adds	r3, r7, r0
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	18d3      	adds	r3, r2, r3
 800d930:	197a      	adds	r2, r7, r5
 800d932:	8812      	ldrh	r2, [r2, #0]
 800d934:	494a      	ldr	r1, [pc, #296]	@ (800da60 <PCD_EP_ISR_Handler+0x6ec>)
 800d936:	430a      	orrs	r2, r1
 800d938:	b292      	uxth	r2, r2
 800d93a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800d93c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d93e:	78db      	ldrb	r3, [r3, #3]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d000      	beq.n	800d946 <PCD_EP_ISR_Handler+0x5d2>
 800d944:	e0af      	b.n	800daa6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800d946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d948:	2200      	movs	r2, #0
 800d94a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800d94c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d94e:	7b1b      	ldrb	r3, [r3, #12]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d100      	bne.n	800d956 <PCD_EP_ISR_Handler+0x5e2>
 800d954:	e09f      	b.n	800da96 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d956:	193b      	adds	r3, r7, r4
 800d958:	881b      	ldrh	r3, [r3, #0]
 800d95a:	2240      	movs	r2, #64	@ 0x40
 800d95c:	4013      	ands	r3, r2
 800d95e:	d046      	beq.n	800d9ee <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d962:	785b      	ldrb	r3, [r3, #1]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d125      	bne.n	800d9b4 <PCD_EP_ISR_Handler+0x640>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2250      	movs	r2, #80	@ 0x50
 800d974:	5a9b      	ldrh	r3, [r3, r2]
 800d976:	b29b      	uxth	r3, r3
 800d978:	001a      	movs	r2, r3
 800d97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97c:	189b      	adds	r3, r3, r2
 800d97e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	00da      	lsls	r2, r3, #3
 800d986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d988:	18d3      	adds	r3, r2, r3
 800d98a:	4a33      	ldr	r2, [pc, #204]	@ (800da58 <PCD_EP_ISR_Handler+0x6e4>)
 800d98c:	4694      	mov	ip, r2
 800d98e:	4463      	add	r3, ip
 800d990:	623b      	str	r3, [r7, #32]
 800d992:	6a3b      	ldr	r3, [r7, #32]
 800d994:	881b      	ldrh	r3, [r3, #0]
 800d996:	b29b      	uxth	r3, r3
 800d998:	059b      	lsls	r3, r3, #22
 800d99a:	0d9b      	lsrs	r3, r3, #22
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	801a      	strh	r2, [r3, #0]
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	881b      	ldrh	r3, [r3, #0]
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	4a2d      	ldr	r2, [pc, #180]	@ (800da60 <PCD_EP_ISR_Handler+0x6ec>)
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	6a3b      	ldr	r3, [r7, #32]
 800d9b0:	801a      	strh	r2, [r3, #0]
 800d9b2:	e070      	b.n	800da96 <PCD_EP_ISR_Handler+0x722>
 800d9b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9b6:	785b      	ldrb	r3, [r3, #1]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d16c      	bne.n	800da96 <PCD_EP_ISR_Handler+0x722>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2250      	movs	r2, #80	@ 0x50
 800d9c8:	5a9b      	ldrh	r3, [r3, r2]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	001a      	movs	r2, r3
 800d9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d0:	189b      	adds	r3, r3, r2
 800d9d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	00da      	lsls	r2, r3, #3
 800d9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9dc:	18d3      	adds	r3, r2, r3
 800d9de:	4a1e      	ldr	r2, [pc, #120]	@ (800da58 <PCD_EP_ISR_Handler+0x6e4>)
 800d9e0:	4694      	mov	ip, r2
 800d9e2:	4463      	add	r3, ip
 800d9e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	801a      	strh	r2, [r3, #0]
 800d9ec:	e053      	b.n	800da96 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9f6:	785b      	ldrb	r3, [r3, #1]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d133      	bne.n	800da64 <PCD_EP_ISR_Handler+0x6f0>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	637b      	str	r3, [r7, #52]	@ 0x34
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2250      	movs	r2, #80	@ 0x50
 800da08:	5a9b      	ldrh	r3, [r3, r2]
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	001a      	movs	r2, r3
 800da0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da10:	189b      	adds	r3, r3, r2
 800da12:	637b      	str	r3, [r7, #52]	@ 0x34
 800da14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	00da      	lsls	r2, r3, #3
 800da1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da1c:	18d3      	adds	r3, r2, r3
 800da1e:	4a0b      	ldr	r2, [pc, #44]	@ (800da4c <PCD_EP_ISR_Handler+0x6d8>)
 800da20:	4694      	mov	ip, r2
 800da22:	4463      	add	r3, ip
 800da24:	633b      	str	r3, [r7, #48]	@ 0x30
 800da26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da28:	881b      	ldrh	r3, [r3, #0]
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	059b      	lsls	r3, r3, #22
 800da2e:	0d9b      	lsrs	r3, r3, #22
 800da30:	b29a      	uxth	r2, r3
 800da32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da34:	801a      	strh	r2, [r3, #0]
 800da36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da38:	881b      	ldrh	r3, [r3, #0]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	4a08      	ldr	r2, [pc, #32]	@ (800da60 <PCD_EP_ISR_Handler+0x6ec>)
 800da3e:	4313      	orrs	r3, r2
 800da40:	b29a      	uxth	r2, r3
 800da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da44:	801a      	strh	r2, [r3, #0]
 800da46:	e026      	b.n	800da96 <PCD_EP_ISR_Handler+0x722>
 800da48:	00000f8f 	.word	0x00000f8f
 800da4c:	00000406 	.word	0x00000406
 800da50:	ffff8f8f 	.word	0xffff8f8f
 800da54:	ffff80c0 	.word	0xffff80c0
 800da58:	00000402 	.word	0x00000402
 800da5c:	ffff8f0f 	.word	0xffff8f0f
 800da60:	ffff8000 	.word	0xffff8000
 800da64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da66:	785b      	ldrb	r3, [r3, #1]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d114      	bne.n	800da96 <PCD_EP_ISR_Handler+0x722>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2250      	movs	r2, #80	@ 0x50
 800da72:	5a9b      	ldrh	r3, [r3, r2]
 800da74:	b29b      	uxth	r3, r3
 800da76:	001a      	movs	r2, r3
 800da78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da7a:	189b      	adds	r3, r3, r2
 800da7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	00da      	lsls	r2, r3, #3
 800da84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da86:	18d3      	adds	r3, r2, r3
 800da88:	4a3b      	ldr	r2, [pc, #236]	@ (800db78 <PCD_EP_ISR_Handler+0x804>)
 800da8a:	4694      	mov	ip, r2
 800da8c:	4463      	add	r3, ip
 800da8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da92:	2200      	movs	r2, #0
 800da94:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800da96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da98:	781a      	ldrb	r2, [r3, #0]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	0011      	movs	r1, r2
 800da9e:	0018      	movs	r0, r3
 800daa0:	f007 feca 	bl	8015838 <HAL_PCD_DataInStageCallback>
 800daa4:	e058      	b.n	800db58 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800daa6:	234a      	movs	r3, #74	@ 0x4a
 800daa8:	18fb      	adds	r3, r7, r3
 800daaa:	881a      	ldrh	r2, [r3, #0]
 800daac:	2380      	movs	r3, #128	@ 0x80
 800daae:	005b      	lsls	r3, r3, #1
 800dab0:	4013      	ands	r3, r2
 800dab2:	d149      	bne.n	800db48 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2250      	movs	r2, #80	@ 0x50
 800daba:	5a9b      	ldrh	r3, [r3, r2]
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	001a      	movs	r2, r3
 800dac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	00db      	lsls	r3, r3, #3
 800dac6:	18d2      	adds	r2, r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	18d3      	adds	r3, r2, r3
 800dace:	4a2b      	ldr	r2, [pc, #172]	@ (800db7c <PCD_EP_ISR_Handler+0x808>)
 800dad0:	4694      	mov	ip, r2
 800dad2:	4463      	add	r3, ip
 800dad4:	881a      	ldrh	r2, [r3, #0]
 800dad6:	2140      	movs	r1, #64	@ 0x40
 800dad8:	187b      	adds	r3, r7, r1
 800dada:	0592      	lsls	r2, r2, #22
 800dadc:	0d92      	lsrs	r2, r2, #22
 800dade:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800dae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dae2:	699a      	ldr	r2, [r3, #24]
 800dae4:	187b      	adds	r3, r7, r1
 800dae6:	881b      	ldrh	r3, [r3, #0]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d907      	bls.n	800dafc <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800daec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daee:	699a      	ldr	r2, [r3, #24]
 800daf0:	187b      	adds	r3, r7, r1
 800daf2:	881b      	ldrh	r3, [r3, #0]
 800daf4:	1ad2      	subs	r2, r2, r3
 800daf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daf8:	619a      	str	r2, [r3, #24]
 800dafa:	e002      	b.n	800db02 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800dafc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dafe:	2200      	movs	r2, #0
 800db00:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800db02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db04:	699b      	ldr	r3, [r3, #24]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d107      	bne.n	800db1a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800db0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db0c:	781a      	ldrb	r2, [r3, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	0011      	movs	r1, r2
 800db12:	0018      	movs	r0, r3
 800db14:	f007 fe90 	bl	8015838 <HAL_PCD_DataInStageCallback>
 800db18:	e01e      	b.n	800db58 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800db1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db1c:	695a      	ldr	r2, [r3, #20]
 800db1e:	2140      	movs	r1, #64	@ 0x40
 800db20:	187b      	adds	r3, r7, r1
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	18d2      	adds	r2, r2, r3
 800db26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db28:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800db2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db2c:	69da      	ldr	r2, [r3, #28]
 800db2e:	187b      	adds	r3, r7, r1
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	18d2      	adds	r2, r2, r3
 800db34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db36:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db3e:	0011      	movs	r1, r2
 800db40:	0018      	movs	r0, r3
 800db42:	f004 fc51 	bl	80123e8 <USB_EPStartXfer>
 800db46:	e007      	b.n	800db58 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800db48:	234a      	movs	r3, #74	@ 0x4a
 800db4a:	18fb      	adds	r3, r7, r3
 800db4c:	881a      	ldrh	r2, [r3, #0]
 800db4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	0018      	movs	r0, r3
 800db54:	f000 f930 	bl	800ddb8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2244      	movs	r2, #68	@ 0x44
 800db5e:	5a9b      	ldrh	r3, [r3, r2]
 800db60:	b29b      	uxth	r3, r3
 800db62:	b21b      	sxth	r3, r3
 800db64:	2b00      	cmp	r3, #0
 800db66:	da01      	bge.n	800db6c <PCD_EP_ISR_Handler+0x7f8>
 800db68:	f7ff fc0a 	bl	800d380 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	0018      	movs	r0, r3
 800db70:	46bd      	mov	sp, r7
 800db72:	b016      	add	sp, #88	@ 0x58
 800db74:	bdb0      	pop	{r4, r5, r7, pc}
 800db76:	46c0      	nop			@ (mov r8, r8)
 800db78:	00000406 	.word	0x00000406
 800db7c:	00000402 	.word	0x00000402

0800db80 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800db80:	b590      	push	{r4, r7, lr}
 800db82:	b089      	sub	sp, #36	@ 0x24
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	1dbb      	adds	r3, r7, #6
 800db8c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800db8e:	1dbb      	adds	r3, r7, #6
 800db90:	881a      	ldrh	r2, [r3, #0]
 800db92:	2380      	movs	r3, #128	@ 0x80
 800db94:	01db      	lsls	r3, r3, #7
 800db96:	4013      	ands	r3, r2
 800db98:	d100      	bne.n	800db9c <HAL_PCD_EP_DB_Receive+0x1c>
 800db9a:	e07d      	b.n	800dc98 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2250      	movs	r2, #80	@ 0x50
 800dba2:	5a9b      	ldrh	r3, [r3, r2]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	001a      	movs	r2, r3
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	00db      	lsls	r3, r3, #3
 800dbae:	18d2      	adds	r2, r2, r3
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	18d3      	adds	r3, r2, r3
 800dbb6:	4a7a      	ldr	r2, [pc, #488]	@ (800dda0 <HAL_PCD_EP_DB_Receive+0x220>)
 800dbb8:	4694      	mov	ip, r2
 800dbba:	4463      	add	r3, ip
 800dbbc:	881a      	ldrh	r2, [r3, #0]
 800dbbe:	211a      	movs	r1, #26
 800dbc0:	187b      	adds	r3, r7, r1
 800dbc2:	0592      	lsls	r2, r2, #22
 800dbc4:	0d92      	lsrs	r2, r2, #22
 800dbc6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	699a      	ldr	r2, [r3, #24]
 800dbcc:	187b      	adds	r3, r7, r1
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d307      	bcc.n	800dbe4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	699a      	ldr	r2, [r3, #24]
 800dbd8:	187b      	adds	r3, r7, r1
 800dbda:	881b      	ldrh	r3, [r3, #0]
 800dbdc:	1ad2      	subs	r2, r2, r3
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	619a      	str	r2, [r3, #24]
 800dbe2:	e002      	b.n	800dbea <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d121      	bne.n	800dc36 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	001a      	movs	r2, r3
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	18d3      	adds	r3, r2, r3
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	2018      	movs	r0, #24
 800dc06:	183b      	adds	r3, r7, r0
 800dc08:	4966      	ldr	r1, [pc, #408]	@ (800dda4 <HAL_PCD_EP_DB_Receive+0x224>)
 800dc0a:	400a      	ands	r2, r1
 800dc0c:	801a      	strh	r2, [r3, #0]
 800dc0e:	183b      	adds	r3, r7, r0
 800dc10:	183a      	adds	r2, r7, r0
 800dc12:	8812      	ldrh	r2, [r2, #0]
 800dc14:	2180      	movs	r1, #128	@ 0x80
 800dc16:	0189      	lsls	r1, r1, #6
 800dc18:	404a      	eors	r2, r1
 800dc1a:	801a      	strh	r2, [r3, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	001a      	movs	r2, r3
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	18d3      	adds	r3, r2, r3
 800dc2a:	183a      	adds	r2, r7, r0
 800dc2c:	8812      	ldrh	r2, [r2, #0]
 800dc2e:	495e      	ldr	r1, [pc, #376]	@ (800dda8 <HAL_PCD_EP_DB_Receive+0x228>)
 800dc30:	430a      	orrs	r2, r1
 800dc32:	b292      	uxth	r2, r2
 800dc34:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800dc36:	1dbb      	adds	r3, r7, #6
 800dc38:	881b      	ldrh	r3, [r3, #0]
 800dc3a:	2240      	movs	r2, #64	@ 0x40
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	d01a      	beq.n	800dc76 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	001a      	movs	r2, r3
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	18d3      	adds	r3, r2, r3
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	2016      	movs	r0, #22
 800dc54:	183b      	adds	r3, r7, r0
 800dc56:	4955      	ldr	r1, [pc, #340]	@ (800ddac <HAL_PCD_EP_DB_Receive+0x22c>)
 800dc58:	400a      	ands	r2, r1
 800dc5a:	801a      	strh	r2, [r3, #0]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	001a      	movs	r2, r3
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	009b      	lsls	r3, r3, #2
 800dc68:	18d3      	adds	r3, r2, r3
 800dc6a:	183a      	adds	r2, r7, r0
 800dc6c:	8812      	ldrh	r2, [r2, #0]
 800dc6e:	4950      	ldr	r1, [pc, #320]	@ (800ddb0 <HAL_PCD_EP_DB_Receive+0x230>)
 800dc70:	430a      	orrs	r2, r1
 800dc72:	b292      	uxth	r2, r2
 800dc74:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800dc76:	241a      	movs	r4, #26
 800dc78:	193b      	adds	r3, r7, r4
 800dc7a:	881b      	ldrh	r3, [r3, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d100      	bne.n	800dc82 <HAL_PCD_EP_DB_Receive+0x102>
 800dc80:	e086      	b.n	800dd90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6818      	ldr	r0, [r3, #0]
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	6959      	ldr	r1, [r3, #20]
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	891a      	ldrh	r2, [r3, #8]
 800dc8e:	193b      	adds	r3, r7, r4
 800dc90:	881b      	ldrh	r3, [r3, #0]
 800dc92:	f005 fe64 	bl	801395e <USB_ReadPMA>
 800dc96:	e07b      	b.n	800dd90 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2250      	movs	r2, #80	@ 0x50
 800dc9e:	5a9b      	ldrh	r3, [r3, r2]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	001a      	movs	r2, r3
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	00db      	lsls	r3, r3, #3
 800dcaa:	18d2      	adds	r2, r2, r3
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	18d3      	adds	r3, r2, r3
 800dcb2:	4a40      	ldr	r2, [pc, #256]	@ (800ddb4 <HAL_PCD_EP_DB_Receive+0x234>)
 800dcb4:	4694      	mov	ip, r2
 800dcb6:	4463      	add	r3, ip
 800dcb8:	881a      	ldrh	r2, [r3, #0]
 800dcba:	211a      	movs	r1, #26
 800dcbc:	187b      	adds	r3, r7, r1
 800dcbe:	0592      	lsls	r2, r2, #22
 800dcc0:	0d92      	lsrs	r2, r2, #22
 800dcc2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	699a      	ldr	r2, [r3, #24]
 800dcc8:	187b      	adds	r3, r7, r1
 800dcca:	881b      	ldrh	r3, [r3, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d307      	bcc.n	800dce0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	699a      	ldr	r2, [r3, #24]
 800dcd4:	187b      	adds	r3, r7, r1
 800dcd6:	881b      	ldrh	r3, [r3, #0]
 800dcd8:	1ad2      	subs	r2, r2, r3
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	619a      	str	r2, [r3, #24]
 800dcde:	e002      	b.n	800dce6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	2200      	movs	r2, #0
 800dce4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	699b      	ldr	r3, [r3, #24]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d121      	bne.n	800dd32 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	001a      	movs	r2, r3
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	18d3      	adds	r3, r2, r3
 800dcfc:	881b      	ldrh	r3, [r3, #0]
 800dcfe:	b29a      	uxth	r2, r3
 800dd00:	201e      	movs	r0, #30
 800dd02:	183b      	adds	r3, r7, r0
 800dd04:	4927      	ldr	r1, [pc, #156]	@ (800dda4 <HAL_PCD_EP_DB_Receive+0x224>)
 800dd06:	400a      	ands	r2, r1
 800dd08:	801a      	strh	r2, [r3, #0]
 800dd0a:	183b      	adds	r3, r7, r0
 800dd0c:	183a      	adds	r2, r7, r0
 800dd0e:	8812      	ldrh	r2, [r2, #0]
 800dd10:	2180      	movs	r1, #128	@ 0x80
 800dd12:	0189      	lsls	r1, r1, #6
 800dd14:	404a      	eors	r2, r1
 800dd16:	801a      	strh	r2, [r3, #0]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	001a      	movs	r2, r3
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	18d3      	adds	r3, r2, r3
 800dd26:	183a      	adds	r2, r7, r0
 800dd28:	8812      	ldrh	r2, [r2, #0]
 800dd2a:	491f      	ldr	r1, [pc, #124]	@ (800dda8 <HAL_PCD_EP_DB_Receive+0x228>)
 800dd2c:	430a      	orrs	r2, r1
 800dd2e:	b292      	uxth	r2, r2
 800dd30:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800dd32:	1dbb      	adds	r3, r7, #6
 800dd34:	881b      	ldrh	r3, [r3, #0]
 800dd36:	2240      	movs	r2, #64	@ 0x40
 800dd38:	4013      	ands	r3, r2
 800dd3a:	d11a      	bne.n	800dd72 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	001a      	movs	r2, r3
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	18d3      	adds	r3, r2, r3
 800dd4a:	881b      	ldrh	r3, [r3, #0]
 800dd4c:	b29a      	uxth	r2, r3
 800dd4e:	201c      	movs	r0, #28
 800dd50:	183b      	adds	r3, r7, r0
 800dd52:	4916      	ldr	r1, [pc, #88]	@ (800ddac <HAL_PCD_EP_DB_Receive+0x22c>)
 800dd54:	400a      	ands	r2, r1
 800dd56:	801a      	strh	r2, [r3, #0]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	001a      	movs	r2, r3
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	18d3      	adds	r3, r2, r3
 800dd66:	183a      	adds	r2, r7, r0
 800dd68:	8812      	ldrh	r2, [r2, #0]
 800dd6a:	4911      	ldr	r1, [pc, #68]	@ (800ddb0 <HAL_PCD_EP_DB_Receive+0x230>)
 800dd6c:	430a      	orrs	r2, r1
 800dd6e:	b292      	uxth	r2, r2
 800dd70:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800dd72:	241a      	movs	r4, #26
 800dd74:	193b      	adds	r3, r7, r4
 800dd76:	881b      	ldrh	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d009      	beq.n	800dd90 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6818      	ldr	r0, [r3, #0]
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	6959      	ldr	r1, [r3, #20]
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	895a      	ldrh	r2, [r3, #10]
 800dd88:	193b      	adds	r3, r7, r4
 800dd8a:	881b      	ldrh	r3, [r3, #0]
 800dd8c:	f005 fde7 	bl	801395e <USB_ReadPMA>
    }
  }

  return count;
 800dd90:	231a      	movs	r3, #26
 800dd92:	18fb      	adds	r3, r7, r3
 800dd94:	881b      	ldrh	r3, [r3, #0]
}
 800dd96:	0018      	movs	r0, r3
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	b009      	add	sp, #36	@ 0x24
 800dd9c:	bd90      	pop	{r4, r7, pc}
 800dd9e:	46c0      	nop			@ (mov r8, r8)
 800dda0:	00000402 	.word	0x00000402
 800dda4:	ffffbf8f 	.word	0xffffbf8f
 800dda8:	ffff8080 	.word	0xffff8080
 800ddac:	ffff8f8f 	.word	0xffff8f8f
 800ddb0:	ffff80c0 	.word	0xffff80c0
 800ddb4:	00000406 	.word	0x00000406

0800ddb8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b0a4      	sub	sp, #144	@ 0x90
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	1dbb      	adds	r3, r7, #6
 800ddc4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ddc6:	1dbb      	adds	r3, r7, #6
 800ddc8:	881b      	ldrh	r3, [r3, #0]
 800ddca:	2240      	movs	r2, #64	@ 0x40
 800ddcc:	4013      	ands	r3, r2
 800ddce:	d100      	bne.n	800ddd2 <HAL_PCD_EP_DB_Transmit+0x1a>
 800ddd0:	e1e4      	b.n	800e19c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2250      	movs	r2, #80	@ 0x50
 800ddd8:	5a9b      	ldrh	r3, [r3, r2]
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	001a      	movs	r2, r3
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	00db      	lsls	r3, r3, #3
 800dde4:	18d2      	adds	r2, r2, r3
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	18d3      	adds	r3, r2, r3
 800ddec:	4ad0      	ldr	r2, [pc, #832]	@ (800e130 <HAL_PCD_EP_DB_Transmit+0x378>)
 800ddee:	4694      	mov	ip, r2
 800ddf0:	4463      	add	r3, ip
 800ddf2:	881a      	ldrh	r2, [r3, #0]
 800ddf4:	2186      	movs	r1, #134	@ 0x86
 800ddf6:	187b      	adds	r3, r7, r1
 800ddf8:	0592      	lsls	r2, r2, #22
 800ddfa:	0d92      	lsrs	r2, r2, #22
 800ddfc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	699a      	ldr	r2, [r3, #24]
 800de02:	187b      	adds	r3, r7, r1
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	429a      	cmp	r2, r3
 800de08:	d907      	bls.n	800de1a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	699a      	ldr	r2, [r3, #24]
 800de0e:	187b      	adds	r3, r7, r1
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	1ad2      	subs	r2, r2, r3
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	619a      	str	r2, [r3, #24]
 800de18:	e002      	b.n	800de20 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	2200      	movs	r2, #0
 800de1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d000      	beq.n	800de2a <HAL_PCD_EP_DB_Transmit+0x72>
 800de28:	e0b5      	b.n	800df96 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	785b      	ldrb	r3, [r3, #1]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d125      	bne.n	800de7e <HAL_PCD_EP_DB_Transmit+0xc6>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2250      	movs	r2, #80	@ 0x50
 800de3e:	5a9b      	ldrh	r3, [r3, r2]
 800de40:	b29b      	uxth	r3, r3
 800de42:	001a      	movs	r2, r3
 800de44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de46:	189b      	adds	r3, r3, r2
 800de48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	00da      	lsls	r2, r3, #3
 800de50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de52:	18d3      	adds	r3, r2, r3
 800de54:	4ab6      	ldr	r2, [pc, #728]	@ (800e130 <HAL_PCD_EP_DB_Transmit+0x378>)
 800de56:	4694      	mov	ip, r2
 800de58:	4463      	add	r3, ip
 800de5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de5e:	881b      	ldrh	r3, [r3, #0]
 800de60:	b29b      	uxth	r3, r3
 800de62:	059b      	lsls	r3, r3, #22
 800de64:	0d9b      	lsrs	r3, r3, #22
 800de66:	b29a      	uxth	r2, r3
 800de68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de6a:	801a      	strh	r2, [r3, #0]
 800de6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de6e:	881b      	ldrh	r3, [r3, #0]
 800de70:	b29b      	uxth	r3, r3
 800de72:	4ab0      	ldr	r2, [pc, #704]	@ (800e134 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800de74:	4313      	orrs	r3, r2
 800de76:	b29a      	uxth	r2, r3
 800de78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de7a:	801a      	strh	r2, [r3, #0]
 800de7c:	e01b      	b.n	800deb6 <HAL_PCD_EP_DB_Transmit+0xfe>
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	785b      	ldrb	r3, [r3, #1]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d117      	bne.n	800deb6 <HAL_PCD_EP_DB_Transmit+0xfe>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2250      	movs	r2, #80	@ 0x50
 800de92:	5a9b      	ldrh	r3, [r3, r2]
 800de94:	b29b      	uxth	r3, r3
 800de96:	001a      	movs	r2, r3
 800de98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de9a:	189b      	adds	r3, r3, r2
 800de9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	00da      	lsls	r2, r3, #3
 800dea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dea6:	18d3      	adds	r3, r2, r3
 800dea8:	4aa1      	ldr	r2, [pc, #644]	@ (800e130 <HAL_PCD_EP_DB_Transmit+0x378>)
 800deaa:	4694      	mov	ip, r2
 800deac:	4463      	add	r3, ip
 800deae:	633b      	str	r3, [r7, #48]	@ 0x30
 800deb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb2:	2200      	movs	r2, #0
 800deb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	627b      	str	r3, [r7, #36]	@ 0x24
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	785b      	ldrb	r3, [r3, #1]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d125      	bne.n	800df10 <HAL_PCD_EP_DB_Transmit+0x158>
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	61fb      	str	r3, [r7, #28]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2250      	movs	r2, #80	@ 0x50
 800ded0:	5a9b      	ldrh	r3, [r3, r2]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	001a      	movs	r2, r3
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	189b      	adds	r3, r3, r2
 800deda:	61fb      	str	r3, [r7, #28]
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	00da      	lsls	r2, r3, #3
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	18d3      	adds	r3, r2, r3
 800dee6:	4a94      	ldr	r2, [pc, #592]	@ (800e138 <HAL_PCD_EP_DB_Transmit+0x380>)
 800dee8:	4694      	mov	ip, r2
 800deea:	4463      	add	r3, ip
 800deec:	61bb      	str	r3, [r7, #24]
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	b29b      	uxth	r3, r3
 800def4:	059b      	lsls	r3, r3, #22
 800def6:	0d9b      	lsrs	r3, r3, #22
 800def8:	b29a      	uxth	r2, r3
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	801a      	strh	r2, [r3, #0]
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	b29b      	uxth	r3, r3
 800df04:	4a8b      	ldr	r2, [pc, #556]	@ (800e134 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800df06:	4313      	orrs	r3, r2
 800df08:	b29a      	uxth	r2, r3
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	801a      	strh	r2, [r3, #0]
 800df0e:	e018      	b.n	800df42 <HAL_PCD_EP_DB_Transmit+0x18a>
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	785b      	ldrb	r3, [r3, #1]
 800df14:	2b01      	cmp	r3, #1
 800df16:	d114      	bne.n	800df42 <HAL_PCD_EP_DB_Transmit+0x18a>
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2250      	movs	r2, #80	@ 0x50
 800df1e:	5a9b      	ldrh	r3, [r3, r2]
 800df20:	b29b      	uxth	r3, r3
 800df22:	001a      	movs	r2, r3
 800df24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df26:	189b      	adds	r3, r3, r2
 800df28:	627b      	str	r3, [r7, #36]	@ 0x24
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	00da      	lsls	r2, r3, #3
 800df30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df32:	18d3      	adds	r3, r2, r3
 800df34:	4a80      	ldr	r2, [pc, #512]	@ (800e138 <HAL_PCD_EP_DB_Transmit+0x380>)
 800df36:	4694      	mov	ip, r2
 800df38:	4463      	add	r3, ip
 800df3a:	623b      	str	r3, [r7, #32]
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	2200      	movs	r2, #0
 800df40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	781a      	ldrb	r2, [r3, #0]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	0011      	movs	r1, r2
 800df4a:	0018      	movs	r0, r3
 800df4c:	f007 fc74 	bl	8015838 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800df50:	1dbb      	adds	r3, r7, #6
 800df52:	881a      	ldrh	r2, [r3, #0]
 800df54:	2380      	movs	r3, #128	@ 0x80
 800df56:	01db      	lsls	r3, r3, #7
 800df58:	4013      	ands	r3, r2
 800df5a:	d100      	bne.n	800df5e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800df5c:	e309      	b.n	800e572 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	001a      	movs	r2, r3
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	18d3      	adds	r3, r2, r3
 800df6c:	881b      	ldrh	r3, [r3, #0]
 800df6e:	b29a      	uxth	r2, r3
 800df70:	2016      	movs	r0, #22
 800df72:	183b      	adds	r3, r7, r0
 800df74:	4971      	ldr	r1, [pc, #452]	@ (800e13c <HAL_PCD_EP_DB_Transmit+0x384>)
 800df76:	400a      	ands	r2, r1
 800df78:	801a      	strh	r2, [r3, #0]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	001a      	movs	r2, r3
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	18d3      	adds	r3, r2, r3
 800df88:	183a      	adds	r2, r7, r0
 800df8a:	8812      	ldrh	r2, [r2, #0]
 800df8c:	496c      	ldr	r1, [pc, #432]	@ (800e140 <HAL_PCD_EP_DB_Transmit+0x388>)
 800df8e:	430a      	orrs	r2, r1
 800df90:	b292      	uxth	r2, r2
 800df92:	801a      	strh	r2, [r3, #0]
 800df94:	e2ed      	b.n	800e572 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800df96:	1dbb      	adds	r3, r7, #6
 800df98:	881a      	ldrh	r2, [r3, #0]
 800df9a:	2380      	movs	r3, #128	@ 0x80
 800df9c:	01db      	lsls	r3, r3, #7
 800df9e:	4013      	ands	r3, r2
 800dfa0:	d01a      	beq.n	800dfd8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	001a      	movs	r2, r3
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	18d3      	adds	r3, r2, r3
 800dfb0:	881b      	ldrh	r3, [r3, #0]
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	208a      	movs	r0, #138	@ 0x8a
 800dfb6:	183b      	adds	r3, r7, r0
 800dfb8:	4960      	ldr	r1, [pc, #384]	@ (800e13c <HAL_PCD_EP_DB_Transmit+0x384>)
 800dfba:	400a      	ands	r2, r1
 800dfbc:	801a      	strh	r2, [r3, #0]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	001a      	movs	r2, r3
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	18d3      	adds	r3, r2, r3
 800dfcc:	183a      	adds	r2, r7, r0
 800dfce:	8812      	ldrh	r2, [r2, #0]
 800dfd0:	495b      	ldr	r1, [pc, #364]	@ (800e140 <HAL_PCD_EP_DB_Transmit+0x388>)
 800dfd2:	430a      	orrs	r2, r1
 800dfd4:	b292      	uxth	r2, r2
 800dfd6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	2224      	movs	r2, #36	@ 0x24
 800dfdc:	5c9b      	ldrb	r3, [r3, r2]
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d000      	beq.n	800dfe4 <HAL_PCD_EP_DB_Transmit+0x22c>
 800dfe2:	e2c6      	b.n	800e572 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	695a      	ldr	r2, [r3, #20]
 800dfe8:	2186      	movs	r1, #134	@ 0x86
 800dfea:	187b      	adds	r3, r7, r1
 800dfec:	881b      	ldrh	r3, [r3, #0]
 800dfee:	18d2      	adds	r2, r2, r3
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	69da      	ldr	r2, [r3, #28]
 800dff8:	187b      	adds	r3, r7, r1
 800dffa:	881b      	ldrh	r3, [r3, #0]
 800dffc:	18d2      	adds	r2, r2, r3
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	6a1a      	ldr	r2, [r3, #32]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	691b      	ldr	r3, [r3, #16]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d30c      	bcc.n	800e028 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	218c      	movs	r1, #140	@ 0x8c
 800e014:	187a      	adds	r2, r7, r1
 800e016:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	6a1a      	ldr	r2, [r3, #32]
 800e01c:	187b      	adds	r3, r7, r1
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	1ad2      	subs	r2, r2, r3
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	621a      	str	r2, [r3, #32]
 800e026:	e01a      	b.n	800e05e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	6a1b      	ldr	r3, [r3, #32]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10a      	bne.n	800e046 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800e030:	2386      	movs	r3, #134	@ 0x86
 800e032:	18fb      	adds	r3, r7, r3
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	228c      	movs	r2, #140	@ 0x8c
 800e038:	18ba      	adds	r2, r7, r2
 800e03a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2224      	movs	r2, #36	@ 0x24
 800e040:	2100      	movs	r1, #0
 800e042:	5499      	strb	r1, [r3, r2]
 800e044:	e00b      	b.n	800e05e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	2224      	movs	r2, #36	@ 0x24
 800e04a:	2100      	movs	r1, #0
 800e04c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	228c      	movs	r2, #140	@ 0x8c
 800e054:	18ba      	adds	r2, r7, r2
 800e056:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	2200      	movs	r2, #0
 800e05c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	785b      	ldrb	r3, [r3, #1]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d000      	beq.n	800e068 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800e066:	e06d      	b.n	800e144 <HAL_PCD_EP_DB_Transmit+0x38c>
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2250      	movs	r2, #80	@ 0x50
 800e074:	5a9b      	ldrh	r3, [r3, r2]
 800e076:	b29b      	uxth	r3, r3
 800e078:	001a      	movs	r2, r3
 800e07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e07c:	189b      	adds	r3, r3, r2
 800e07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	00da      	lsls	r2, r3, #3
 800e086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e088:	18d3      	adds	r3, r2, r3
 800e08a:	4a29      	ldr	r2, [pc, #164]	@ (800e130 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e08c:	4694      	mov	ip, r2
 800e08e:	4463      	add	r3, ip
 800e090:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e094:	881b      	ldrh	r3, [r3, #0]
 800e096:	b29b      	uxth	r3, r3
 800e098:	059b      	lsls	r3, r3, #22
 800e09a:	0d9b      	lsrs	r3, r3, #22
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a0:	801a      	strh	r2, [r3, #0]
 800e0a2:	228c      	movs	r2, #140	@ 0x8c
 800e0a4:	18bb      	adds	r3, r7, r2
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e0aa:	d91a      	bls.n	800e0e2 <HAL_PCD_EP_DB_Transmit+0x32a>
 800e0ac:	18bb      	adds	r3, r7, r2
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	095b      	lsrs	r3, r3, #5
 800e0b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0b4:	18bb      	adds	r3, r7, r2
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	221f      	movs	r2, #31
 800e0ba:	4013      	ands	r3, r2
 800e0bc:	d102      	bne.n	800e0c4 <HAL_PCD_EP_DB_Transmit+0x30c>
 800e0be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0c6:	881b      	ldrh	r3, [r3, #0]
 800e0c8:	b29a      	uxth	r2, r3
 800e0ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	029b      	lsls	r3, r3, #10
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	4a17      	ldr	r2, [pc, #92]	@ (800e134 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0de:	801a      	strh	r2, [r3, #0]
 800e0e0:	e04f      	b.n	800e182 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e0e2:	238c      	movs	r3, #140	@ 0x8c
 800e0e4:	18fb      	adds	r3, r7, r3
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d108      	bne.n	800e0fe <HAL_PCD_EP_DB_Transmit+0x346>
 800e0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ee:	881b      	ldrh	r3, [r3, #0]
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	4a10      	ldr	r2, [pc, #64]	@ (800e134 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0fa:	801a      	strh	r2, [r3, #0]
 800e0fc:	e041      	b.n	800e182 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e0fe:	228c      	movs	r2, #140	@ 0x8c
 800e100:	18bb      	adds	r3, r7, r2
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	085b      	lsrs	r3, r3, #1
 800e106:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e108:	18bb      	adds	r3, r7, r2
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2201      	movs	r2, #1
 800e10e:	4013      	ands	r3, r2
 800e110:	d002      	beq.n	800e118 <HAL_PCD_EP_DB_Transmit+0x360>
 800e112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e114:	3301      	adds	r3, #1
 800e116:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e11a:	881b      	ldrh	r3, [r3, #0]
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e120:	b29b      	uxth	r3, r3
 800e122:	029b      	lsls	r3, r3, #10
 800e124:	b29b      	uxth	r3, r3
 800e126:	4313      	orrs	r3, r2
 800e128:	b29a      	uxth	r2, r3
 800e12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12c:	801a      	strh	r2, [r3, #0]
 800e12e:	e028      	b.n	800e182 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e130:	00000402 	.word	0x00000402
 800e134:	ffff8000 	.word	0xffff8000
 800e138:	00000406 	.word	0x00000406
 800e13c:	ffff8f8f 	.word	0xffff8f8f
 800e140:	ffffc080 	.word	0xffffc080
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	785b      	ldrb	r3, [r3, #1]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d11a      	bne.n	800e182 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	647b      	str	r3, [r7, #68]	@ 0x44
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2250      	movs	r2, #80	@ 0x50
 800e158:	5a9b      	ldrh	r3, [r3, r2]
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	001a      	movs	r2, r3
 800e15e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e160:	189b      	adds	r3, r3, r2
 800e162:	647b      	str	r3, [r7, #68]	@ 0x44
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	00da      	lsls	r2, r3, #3
 800e16a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e16c:	18d3      	adds	r3, r2, r3
 800e16e:	4adb      	ldr	r2, [pc, #876]	@ (800e4dc <HAL_PCD_EP_DB_Transmit+0x724>)
 800e170:	4694      	mov	ip, r2
 800e172:	4463      	add	r3, ip
 800e174:	643b      	str	r3, [r7, #64]	@ 0x40
 800e176:	238c      	movs	r3, #140	@ 0x8c
 800e178:	18fb      	adds	r3, r7, r3
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e180:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6818      	ldr	r0, [r3, #0]
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	6959      	ldr	r1, [r3, #20]
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	891a      	ldrh	r2, [r3, #8]
 800e18e:	238c      	movs	r3, #140	@ 0x8c
 800e190:	18fb      	adds	r3, r7, r3
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	b29b      	uxth	r3, r3
 800e196:	f005 fb99 	bl	80138cc <USB_WritePMA>
 800e19a:	e1ea      	b.n	800e572 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2250      	movs	r2, #80	@ 0x50
 800e1a2:	5a9b      	ldrh	r3, [r3, r2]
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	001a      	movs	r2, r3
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	00db      	lsls	r3, r3, #3
 800e1ae:	18d2      	adds	r2, r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	18d3      	adds	r3, r2, r3
 800e1b6:	4aca      	ldr	r2, [pc, #808]	@ (800e4e0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e1b8:	4694      	mov	ip, r2
 800e1ba:	4463      	add	r3, ip
 800e1bc:	881a      	ldrh	r2, [r3, #0]
 800e1be:	2186      	movs	r1, #134	@ 0x86
 800e1c0:	187b      	adds	r3, r7, r1
 800e1c2:	0592      	lsls	r2, r2, #22
 800e1c4:	0d92      	lsrs	r2, r2, #22
 800e1c6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	699a      	ldr	r2, [r3, #24]
 800e1cc:	187b      	adds	r3, r7, r1
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d307      	bcc.n	800e1e4 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	699a      	ldr	r2, [r3, #24]
 800e1d8:	187b      	adds	r3, r7, r1
 800e1da:	881b      	ldrh	r3, [r3, #0]
 800e1dc:	1ad2      	subs	r2, r2, r3
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	619a      	str	r2, [r3, #24]
 800e1e2:	e002      	b.n	800e1ea <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	699b      	ldr	r3, [r3, #24]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d000      	beq.n	800e1f4 <HAL_PCD_EP_DB_Transmit+0x43c>
 800e1f2:	e0bb      	b.n	800e36c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	785b      	ldrb	r3, [r3, #1]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d125      	bne.n	800e248 <HAL_PCD_EP_DB_Transmit+0x490>
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	2250      	movs	r2, #80	@ 0x50
 800e208:	5a9b      	ldrh	r3, [r3, r2]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	001a      	movs	r2, r3
 800e20e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e210:	189b      	adds	r3, r3, r2
 800e212:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	00da      	lsls	r2, r3, #3
 800e21a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e21c:	18d3      	adds	r3, r2, r3
 800e21e:	4aaf      	ldr	r2, [pc, #700]	@ (800e4dc <HAL_PCD_EP_DB_Transmit+0x724>)
 800e220:	4694      	mov	ip, r2
 800e222:	4463      	add	r3, ip
 800e224:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e226:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e228:	881b      	ldrh	r3, [r3, #0]
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	059b      	lsls	r3, r3, #22
 800e22e:	0d9b      	lsrs	r3, r3, #22
 800e230:	b29a      	uxth	r2, r3
 800e232:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e234:	801a      	strh	r2, [r3, #0]
 800e236:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e238:	881b      	ldrh	r3, [r3, #0]
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	4aa9      	ldr	r2, [pc, #676]	@ (800e4e4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e23e:	4313      	orrs	r3, r2
 800e240:	b29a      	uxth	r2, r3
 800e242:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e244:	801a      	strh	r2, [r3, #0]
 800e246:	e01b      	b.n	800e280 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	785b      	ldrb	r3, [r3, #1]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d117      	bne.n	800e280 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	667b      	str	r3, [r7, #100]	@ 0x64
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2250      	movs	r2, #80	@ 0x50
 800e25c:	5a9b      	ldrh	r3, [r3, r2]
 800e25e:	b29b      	uxth	r3, r3
 800e260:	001a      	movs	r2, r3
 800e262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e264:	189b      	adds	r3, r3, r2
 800e266:	667b      	str	r3, [r7, #100]	@ 0x64
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	00da      	lsls	r2, r3, #3
 800e26e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e270:	18d3      	adds	r3, r2, r3
 800e272:	4a9a      	ldr	r2, [pc, #616]	@ (800e4dc <HAL_PCD_EP_DB_Transmit+0x724>)
 800e274:	4694      	mov	ip, r2
 800e276:	4463      	add	r3, ip
 800e278:	663b      	str	r3, [r7, #96]	@ 0x60
 800e27a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e27c:	2200      	movs	r2, #0
 800e27e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	677b      	str	r3, [r7, #116]	@ 0x74
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	785b      	ldrb	r3, [r3, #1]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d12b      	bne.n	800e2e6 <HAL_PCD_EP_DB_Transmit+0x52e>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2250      	movs	r2, #80	@ 0x50
 800e29a:	5a9b      	ldrh	r3, [r3, r2]
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	001a      	movs	r2, r3
 800e2a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2a2:	189b      	adds	r3, r3, r2
 800e2a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	00da      	lsls	r2, r3, #3
 800e2ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2ae:	18d3      	adds	r3, r2, r3
 800e2b0:	4a8b      	ldr	r2, [pc, #556]	@ (800e4e0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e2b2:	4694      	mov	ip, r2
 800e2b4:	4463      	add	r3, ip
 800e2b6:	2180      	movs	r1, #128	@ 0x80
 800e2b8:	187a      	adds	r2, r7, r1
 800e2ba:	6013      	str	r3, [r2, #0]
 800e2bc:	187b      	adds	r3, r7, r1
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	059b      	lsls	r3, r3, #22
 800e2c6:	0d9b      	lsrs	r3, r3, #22
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	187b      	adds	r3, r7, r1
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	801a      	strh	r2, [r3, #0]
 800e2d0:	187b      	adds	r3, r7, r1
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	4a82      	ldr	r2, [pc, #520]	@ (800e4e4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	b29a      	uxth	r2, r3
 800e2de:	187b      	adds	r3, r7, r1
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	801a      	strh	r2, [r3, #0]
 800e2e4:	e018      	b.n	800e318 <HAL_PCD_EP_DB_Transmit+0x560>
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	785b      	ldrb	r3, [r3, #1]
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d114      	bne.n	800e318 <HAL_PCD_EP_DB_Transmit+0x560>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2250      	movs	r2, #80	@ 0x50
 800e2f4:	5a9b      	ldrh	r3, [r3, r2]
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	001a      	movs	r2, r3
 800e2fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e2fc:	189b      	adds	r3, r3, r2
 800e2fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	00da      	lsls	r2, r3, #3
 800e306:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e308:	18d3      	adds	r3, r2, r3
 800e30a:	4a75      	ldr	r2, [pc, #468]	@ (800e4e0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e30c:	4694      	mov	ip, r2
 800e30e:	4463      	add	r3, ip
 800e310:	673b      	str	r3, [r7, #112]	@ 0x70
 800e312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e314:	2200      	movs	r2, #0
 800e316:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	781a      	ldrb	r2, [r3, #0]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	0011      	movs	r1, r2
 800e320:	0018      	movs	r0, r3
 800e322:	f007 fa89 	bl	8015838 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e326:	1dbb      	adds	r3, r7, #6
 800e328:	881a      	ldrh	r2, [r3, #0]
 800e32a:	2380      	movs	r3, #128	@ 0x80
 800e32c:	01db      	lsls	r3, r3, #7
 800e32e:	4013      	ands	r3, r2
 800e330:	d000      	beq.n	800e334 <HAL_PCD_EP_DB_Transmit+0x57c>
 800e332:	e11e      	b.n	800e572 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	001a      	movs	r2, r3
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	18d3      	adds	r3, r2, r3
 800e342:	881b      	ldrh	r3, [r3, #0]
 800e344:	b29a      	uxth	r2, r3
 800e346:	2088      	movs	r0, #136	@ 0x88
 800e348:	183b      	adds	r3, r7, r0
 800e34a:	4967      	ldr	r1, [pc, #412]	@ (800e4e8 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e34c:	400a      	ands	r2, r1
 800e34e:	801a      	strh	r2, [r3, #0]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	001a      	movs	r2, r3
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	18d3      	adds	r3, r2, r3
 800e35e:	183a      	adds	r2, r7, r0
 800e360:	8812      	ldrh	r2, [r2, #0]
 800e362:	4962      	ldr	r1, [pc, #392]	@ (800e4ec <HAL_PCD_EP_DB_Transmit+0x734>)
 800e364:	430a      	orrs	r2, r1
 800e366:	b292      	uxth	r2, r2
 800e368:	801a      	strh	r2, [r3, #0]
 800e36a:	e102      	b.n	800e572 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e36c:	1dbb      	adds	r3, r7, #6
 800e36e:	881a      	ldrh	r2, [r3, #0]
 800e370:	2380      	movs	r3, #128	@ 0x80
 800e372:	01db      	lsls	r3, r3, #7
 800e374:	4013      	ands	r3, r2
 800e376:	d11a      	bne.n	800e3ae <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	001a      	movs	r2, r3
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	18d3      	adds	r3, r2, r3
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	b29a      	uxth	r2, r3
 800e38a:	204e      	movs	r0, #78	@ 0x4e
 800e38c:	183b      	adds	r3, r7, r0
 800e38e:	4956      	ldr	r1, [pc, #344]	@ (800e4e8 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e390:	400a      	ands	r2, r1
 800e392:	801a      	strh	r2, [r3, #0]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	001a      	movs	r2, r3
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	18d3      	adds	r3, r2, r3
 800e3a2:	183a      	adds	r2, r7, r0
 800e3a4:	8812      	ldrh	r2, [r2, #0]
 800e3a6:	4951      	ldr	r1, [pc, #324]	@ (800e4ec <HAL_PCD_EP_DB_Transmit+0x734>)
 800e3a8:	430a      	orrs	r2, r1
 800e3aa:	b292      	uxth	r2, r2
 800e3ac:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	2224      	movs	r2, #36	@ 0x24
 800e3b2:	5c9b      	ldrb	r3, [r3, r2]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d000      	beq.n	800e3ba <HAL_PCD_EP_DB_Transmit+0x602>
 800e3b8:	e0db      	b.n	800e572 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	695a      	ldr	r2, [r3, #20]
 800e3be:	2186      	movs	r1, #134	@ 0x86
 800e3c0:	187b      	adds	r3, r7, r1
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	18d2      	adds	r2, r2, r3
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	69da      	ldr	r2, [r3, #28]
 800e3ce:	187b      	adds	r3, r7, r1
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	18d2      	adds	r2, r2, r3
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	6a1a      	ldr	r2, [r3, #32]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d30c      	bcc.n	800e3fe <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	691b      	ldr	r3, [r3, #16]
 800e3e8:	218c      	movs	r1, #140	@ 0x8c
 800e3ea:	187a      	adds	r2, r7, r1
 800e3ec:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	6a1a      	ldr	r2, [r3, #32]
 800e3f2:	187b      	adds	r3, r7, r1
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	1ad2      	subs	r2, r2, r3
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	621a      	str	r2, [r3, #32]
 800e3fc:	e01a      	b.n	800e434 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	6a1b      	ldr	r3, [r3, #32]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10a      	bne.n	800e41c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800e406:	2386      	movs	r3, #134	@ 0x86
 800e408:	18fb      	adds	r3, r7, r3
 800e40a:	881b      	ldrh	r3, [r3, #0]
 800e40c:	228c      	movs	r2, #140	@ 0x8c
 800e40e:	18ba      	adds	r2, r7, r2
 800e410:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2224      	movs	r2, #36	@ 0x24
 800e416:	2100      	movs	r1, #0
 800e418:	5499      	strb	r1, [r3, r2]
 800e41a:	e00b      	b.n	800e434 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	6a1b      	ldr	r3, [r3, #32]
 800e420:	228c      	movs	r2, #140	@ 0x8c
 800e422:	18ba      	adds	r2, r7, r2
 800e424:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	2200      	movs	r2, #0
 800e42a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	2224      	movs	r2, #36	@ 0x24
 800e430:	2100      	movs	r1, #0
 800e432:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	657b      	str	r3, [r7, #84]	@ 0x54
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	785b      	ldrb	r3, [r3, #1]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d000      	beq.n	800e444 <HAL_PCD_EP_DB_Transmit+0x68c>
 800e442:	e06e      	b.n	800e522 <HAL_PCD_EP_DB_Transmit+0x76a>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2250      	movs	r2, #80	@ 0x50
 800e450:	5a9b      	ldrh	r3, [r3, r2]
 800e452:	b29b      	uxth	r3, r3
 800e454:	001a      	movs	r2, r3
 800e456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e458:	189b      	adds	r3, r3, r2
 800e45a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	00da      	lsls	r2, r3, #3
 800e462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e464:	18d3      	adds	r3, r2, r3
 800e466:	4a1e      	ldr	r2, [pc, #120]	@ (800e4e0 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e468:	4694      	mov	ip, r2
 800e46a:	4463      	add	r3, ip
 800e46c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e46e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e470:	881b      	ldrh	r3, [r3, #0]
 800e472:	b29b      	uxth	r3, r3
 800e474:	059b      	lsls	r3, r3, #22
 800e476:	0d9b      	lsrs	r3, r3, #22
 800e478:	b29a      	uxth	r2, r3
 800e47a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e47c:	801a      	strh	r2, [r3, #0]
 800e47e:	228c      	movs	r2, #140	@ 0x8c
 800e480:	18bb      	adds	r3, r7, r2
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b3e      	cmp	r3, #62	@ 0x3e
 800e486:	d91a      	bls.n	800e4be <HAL_PCD_EP_DB_Transmit+0x706>
 800e488:	18bb      	adds	r3, r7, r2
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	095b      	lsrs	r3, r3, #5
 800e48e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e490:	18bb      	adds	r3, r7, r2
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	221f      	movs	r2, #31
 800e496:	4013      	ands	r3, r2
 800e498:	d102      	bne.n	800e4a0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800e49a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e49c:	3b01      	subs	r3, #1
 800e49e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e4a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4a2:	881b      	ldrh	r3, [r3, #0]
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	029b      	lsls	r3, r3, #10
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	4a0c      	ldr	r2, [pc, #48]	@ (800e4e4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4ba:	801a      	strh	r2, [r3, #0]
 800e4bc:	e04d      	b.n	800e55a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e4be:	238c      	movs	r3, #140	@ 0x8c
 800e4c0:	18fb      	adds	r3, r7, r3
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d113      	bne.n	800e4f0 <HAL_PCD_EP_DB_Transmit+0x738>
 800e4c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4ca:	881b      	ldrh	r3, [r3, #0]
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	4a05      	ldr	r2, [pc, #20]	@ (800e4e4 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4d6:	801a      	strh	r2, [r3, #0]
 800e4d8:	e03f      	b.n	800e55a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e4da:	46c0      	nop			@ (mov r8, r8)
 800e4dc:	00000402 	.word	0x00000402
 800e4e0:	00000406 	.word	0x00000406
 800e4e4:	ffff8000 	.word	0xffff8000
 800e4e8:	ffff8f8f 	.word	0xffff8f8f
 800e4ec:	ffffc080 	.word	0xffffc080
 800e4f0:	228c      	movs	r2, #140	@ 0x8c
 800e4f2:	18bb      	adds	r3, r7, r2
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	085b      	lsrs	r3, r3, #1
 800e4f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e4fa:	18bb      	adds	r3, r7, r2
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2201      	movs	r2, #1
 800e500:	4013      	ands	r3, r2
 800e502:	d002      	beq.n	800e50a <HAL_PCD_EP_DB_Transmit+0x752>
 800e504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e506:	3301      	adds	r3, #1
 800e508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e50a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e50c:	881b      	ldrh	r3, [r3, #0]
 800e50e:	b29a      	uxth	r2, r3
 800e510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e512:	b29b      	uxth	r3, r3
 800e514:	029b      	lsls	r3, r3, #10
 800e516:	b29b      	uxth	r3, r3
 800e518:	4313      	orrs	r3, r2
 800e51a:	b29a      	uxth	r2, r3
 800e51c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e51e:	801a      	strh	r2, [r3, #0]
 800e520:	e01b      	b.n	800e55a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	785b      	ldrb	r3, [r3, #1]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d117      	bne.n	800e55a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2250      	movs	r2, #80	@ 0x50
 800e530:	5a9b      	ldrh	r3, [r3, r2]
 800e532:	b29b      	uxth	r3, r3
 800e534:	001a      	movs	r2, r3
 800e536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e538:	189b      	adds	r3, r3, r2
 800e53a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	00da      	lsls	r2, r3, #3
 800e542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e544:	18d3      	adds	r3, r2, r3
 800e546:	4a21      	ldr	r2, [pc, #132]	@ (800e5cc <HAL_PCD_EP_DB_Transmit+0x814>)
 800e548:	4694      	mov	ip, r2
 800e54a:	4463      	add	r3, ip
 800e54c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e54e:	238c      	movs	r3, #140	@ 0x8c
 800e550:	18fb      	adds	r3, r7, r3
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	b29a      	uxth	r2, r3
 800e556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e558:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	6818      	ldr	r0, [r3, #0]
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	6959      	ldr	r1, [r3, #20]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	895a      	ldrh	r2, [r3, #10]
 800e566:	238c      	movs	r3, #140	@ 0x8c
 800e568:	18fb      	adds	r3, r7, r3
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	f005 f9ad 	bl	80138cc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	001a      	movs	r2, r3
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	18d3      	adds	r3, r2, r3
 800e580:	881b      	ldrh	r3, [r3, #0]
 800e582:	b29a      	uxth	r2, r3
 800e584:	2014      	movs	r0, #20
 800e586:	183b      	adds	r3, r7, r0
 800e588:	4911      	ldr	r1, [pc, #68]	@ (800e5d0 <HAL_PCD_EP_DB_Transmit+0x818>)
 800e58a:	400a      	ands	r2, r1
 800e58c:	801a      	strh	r2, [r3, #0]
 800e58e:	183b      	adds	r3, r7, r0
 800e590:	183a      	adds	r2, r7, r0
 800e592:	8812      	ldrh	r2, [r2, #0]
 800e594:	2110      	movs	r1, #16
 800e596:	404a      	eors	r2, r1
 800e598:	801a      	strh	r2, [r3, #0]
 800e59a:	183b      	adds	r3, r7, r0
 800e59c:	183a      	adds	r2, r7, r0
 800e59e:	8812      	ldrh	r2, [r2, #0]
 800e5a0:	2120      	movs	r1, #32
 800e5a2:	404a      	eors	r2, r1
 800e5a4:	801a      	strh	r2, [r3, #0]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	001a      	movs	r2, r3
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	18d3      	adds	r3, r2, r3
 800e5b4:	183a      	adds	r2, r7, r0
 800e5b6:	8812      	ldrh	r2, [r2, #0]
 800e5b8:	4906      	ldr	r1, [pc, #24]	@ (800e5d4 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800e5ba:	430a      	orrs	r2, r1
 800e5bc:	b292      	uxth	r2, r2
 800e5be:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800e5c0:	2300      	movs	r3, #0
}
 800e5c2:	0018      	movs	r0, r3
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	b024      	add	sp, #144	@ 0x90
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	46c0      	nop			@ (mov r8, r8)
 800e5cc:	00000406 	.word	0x00000406
 800e5d0:	ffff8fbf 	.word	0xffff8fbf
 800e5d4:	ffff8080 	.word	0xffff8080

0800e5d8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800e5d8:	b590      	push	{r4, r7, lr}
 800e5da:	b087      	sub	sp, #28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	0008      	movs	r0, r1
 800e5e2:	0011      	movs	r1, r2
 800e5e4:	607b      	str	r3, [r7, #4]
 800e5e6:	240a      	movs	r4, #10
 800e5e8:	193b      	adds	r3, r7, r4
 800e5ea:	1c02      	adds	r2, r0, #0
 800e5ec:	801a      	strh	r2, [r3, #0]
 800e5ee:	2308      	movs	r3, #8
 800e5f0:	18fb      	adds	r3, r7, r3
 800e5f2:	1c0a      	adds	r2, r1, #0
 800e5f4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800e5f6:	0021      	movs	r1, r4
 800e5f8:	187b      	adds	r3, r7, r1
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	2280      	movs	r2, #128	@ 0x80
 800e5fe:	4013      	ands	r3, r2
 800e600:	b29b      	uxth	r3, r3
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00c      	beq.n	800e620 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e606:	187b      	adds	r3, r7, r1
 800e608:	881b      	ldrh	r3, [r3, #0]
 800e60a:	2207      	movs	r2, #7
 800e60c:	4013      	ands	r3, r2
 800e60e:	1c5a      	adds	r2, r3, #1
 800e610:	0013      	movs	r3, r2
 800e612:	009b      	lsls	r3, r3, #2
 800e614:	189b      	adds	r3, r3, r2
 800e616:	00db      	lsls	r3, r3, #3
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	18d3      	adds	r3, r2, r3
 800e61c:	617b      	str	r3, [r7, #20]
 800e61e:	e00b      	b.n	800e638 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e620:	230a      	movs	r3, #10
 800e622:	18fb      	adds	r3, r7, r3
 800e624:	881a      	ldrh	r2, [r3, #0]
 800e626:	0013      	movs	r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	189b      	adds	r3, r3, r2
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	3369      	adds	r3, #105	@ 0x69
 800e630:	33ff      	adds	r3, #255	@ 0xff
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	18d3      	adds	r3, r2, r3
 800e636:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800e638:	2308      	movs	r3, #8
 800e63a:	18fb      	adds	r3, r7, r3
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d107      	bne.n	800e652 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2200      	movs	r2, #0
 800e646:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	80da      	strh	r2, [r3, #6]
 800e650:	e00b      	b.n	800e66a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	2201      	movs	r2, #1
 800e656:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	0c1b      	lsrs	r3, r3, #16
 800e664:	b29a      	uxth	r2, r3
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	0018      	movs	r0, r3
 800e66e:	46bd      	mov	sp, r7
 800e670:	b007      	add	sp, #28
 800e672:	bd90      	pop	{r4, r7, pc}

0800e674 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	23ba      	movs	r3, #186	@ 0xba
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	2101      	movs	r1, #1
 800e68a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	23b8      	movs	r3, #184	@ 0xb8
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	2100      	movs	r1, #0
 800e694:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2254      	movs	r2, #84	@ 0x54
 800e69a:	5a9b      	ldrh	r3, [r3, r2]
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	2201      	movs	r2, #1
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	b299      	uxth	r1, r3
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2254      	movs	r2, #84	@ 0x54
 800e6a8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2254      	movs	r2, #84	@ 0x54
 800e6ae:	5a9b      	ldrh	r3, [r3, r2]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	2202      	movs	r2, #2
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	b299      	uxth	r1, r3
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2254      	movs	r2, #84	@ 0x54
 800e6bc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	0018      	movs	r0, r3
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	b004      	add	sp, #16
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	000a      	movs	r2, r1
 800e6d2:	1cfb      	adds	r3, r7, #3
 800e6d4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e6d6:	46c0      	nop			@ (mov r8, r8)
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	b002      	add	sp, #8
 800e6dc:	bd80      	pop	{r7, pc}
	...

0800e6e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800e6e4:	4b04      	ldr	r3, [pc, #16]	@ (800e6f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	4b03      	ldr	r3, [pc, #12]	@ (800e6f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 800e6ea:	2180      	movs	r1, #128	@ 0x80
 800e6ec:	0049      	lsls	r1, r1, #1
 800e6ee:	430a      	orrs	r2, r1
 800e6f0:	601a      	str	r2, [r3, #0]
}
 800e6f2:	46c0      	nop			@ (mov r8, r8)
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	40007000 	.word	0x40007000

0800e6fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e6fc:	b5b0      	push	{r4, r5, r7, lr}
 800e6fe:	b08a      	sub	sp, #40	@ 0x28
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d102      	bne.n	800e710 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	f000 fbbf 	bl	800ee8e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e710:	4bc9      	ldr	r3, [pc, #804]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	220c      	movs	r2, #12
 800e716:	4013      	ands	r3, r2
 800e718:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e71a:	4bc7      	ldr	r3, [pc, #796]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e71c:	68da      	ldr	r2, [r3, #12]
 800e71e:	2380      	movs	r3, #128	@ 0x80
 800e720:	025b      	lsls	r3, r3, #9
 800e722:	4013      	ands	r3, r2
 800e724:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2201      	movs	r2, #1
 800e72c:	4013      	ands	r3, r2
 800e72e:	d100      	bne.n	800e732 <HAL_RCC_OscConfig+0x36>
 800e730:	e07e      	b.n	800e830 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	2b08      	cmp	r3, #8
 800e736:	d007      	beq.n	800e748 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	2b0c      	cmp	r3, #12
 800e73c:	d112      	bne.n	800e764 <HAL_RCC_OscConfig+0x68>
 800e73e:	69ba      	ldr	r2, [r7, #24]
 800e740:	2380      	movs	r3, #128	@ 0x80
 800e742:	025b      	lsls	r3, r3, #9
 800e744:	429a      	cmp	r2, r3
 800e746:	d10d      	bne.n	800e764 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e748:	4bbb      	ldr	r3, [pc, #748]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	2380      	movs	r3, #128	@ 0x80
 800e74e:	029b      	lsls	r3, r3, #10
 800e750:	4013      	ands	r3, r2
 800e752:	d100      	bne.n	800e756 <HAL_RCC_OscConfig+0x5a>
 800e754:	e06b      	b.n	800e82e <HAL_RCC_OscConfig+0x132>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d167      	bne.n	800e82e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800e75e:	2301      	movs	r3, #1
 800e760:	f000 fb95 	bl	800ee8e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	685a      	ldr	r2, [r3, #4]
 800e768:	2380      	movs	r3, #128	@ 0x80
 800e76a:	025b      	lsls	r3, r3, #9
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d107      	bne.n	800e780 <HAL_RCC_OscConfig+0x84>
 800e770:	4bb1      	ldr	r3, [pc, #708]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	4bb0      	ldr	r3, [pc, #704]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e776:	2180      	movs	r1, #128	@ 0x80
 800e778:	0249      	lsls	r1, r1, #9
 800e77a:	430a      	orrs	r2, r1
 800e77c:	601a      	str	r2, [r3, #0]
 800e77e:	e027      	b.n	800e7d0 <HAL_RCC_OscConfig+0xd4>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	23a0      	movs	r3, #160	@ 0xa0
 800e786:	02db      	lsls	r3, r3, #11
 800e788:	429a      	cmp	r2, r3
 800e78a:	d10e      	bne.n	800e7aa <HAL_RCC_OscConfig+0xae>
 800e78c:	4baa      	ldr	r3, [pc, #680]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	4ba9      	ldr	r3, [pc, #676]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e792:	2180      	movs	r1, #128	@ 0x80
 800e794:	02c9      	lsls	r1, r1, #11
 800e796:	430a      	orrs	r2, r1
 800e798:	601a      	str	r2, [r3, #0]
 800e79a:	4ba7      	ldr	r3, [pc, #668]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	4ba6      	ldr	r3, [pc, #664]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e7a0:	2180      	movs	r1, #128	@ 0x80
 800e7a2:	0249      	lsls	r1, r1, #9
 800e7a4:	430a      	orrs	r2, r1
 800e7a6:	601a      	str	r2, [r3, #0]
 800e7a8:	e012      	b.n	800e7d0 <HAL_RCC_OscConfig+0xd4>
 800e7aa:	4ba3      	ldr	r3, [pc, #652]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	4ba2      	ldr	r3, [pc, #648]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e7b0:	49a2      	ldr	r1, [pc, #648]	@ (800ea3c <HAL_RCC_OscConfig+0x340>)
 800e7b2:	400a      	ands	r2, r1
 800e7b4:	601a      	str	r2, [r3, #0]
 800e7b6:	4ba0      	ldr	r3, [pc, #640]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	2380      	movs	r3, #128	@ 0x80
 800e7bc:	025b      	lsls	r3, r3, #9
 800e7be:	4013      	ands	r3, r2
 800e7c0:	60fb      	str	r3, [r7, #12]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	4b9c      	ldr	r3, [pc, #624]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	4b9b      	ldr	r3, [pc, #620]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e7ca:	499d      	ldr	r1, [pc, #628]	@ (800ea40 <HAL_RCC_OscConfig+0x344>)
 800e7cc:	400a      	ands	r2, r1
 800e7ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d015      	beq.n	800e804 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e7d8:	f7fa fd64 	bl	80092a4 <HAL_GetTick>
 800e7dc:	0003      	movs	r3, r0
 800e7de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e7e0:	e009      	b.n	800e7f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e7e2:	f7fa fd5f 	bl	80092a4 <HAL_GetTick>
 800e7e6:	0002      	movs	r2, r0
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	1ad3      	subs	r3, r2, r3
 800e7ec:	2b64      	cmp	r3, #100	@ 0x64
 800e7ee:	d902      	bls.n	800e7f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e7f0:	2303      	movs	r3, #3
 800e7f2:	f000 fb4c 	bl	800ee8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e7f6:	4b90      	ldr	r3, [pc, #576]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	2380      	movs	r3, #128	@ 0x80
 800e7fc:	029b      	lsls	r3, r3, #10
 800e7fe:	4013      	ands	r3, r2
 800e800:	d0ef      	beq.n	800e7e2 <HAL_RCC_OscConfig+0xe6>
 800e802:	e015      	b.n	800e830 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e804:	f7fa fd4e 	bl	80092a4 <HAL_GetTick>
 800e808:	0003      	movs	r3, r0
 800e80a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e80c:	e008      	b.n	800e820 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e80e:	f7fa fd49 	bl	80092a4 <HAL_GetTick>
 800e812:	0002      	movs	r2, r0
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	2b64      	cmp	r3, #100	@ 0x64
 800e81a:	d901      	bls.n	800e820 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800e81c:	2303      	movs	r3, #3
 800e81e:	e336      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e820:	4b85      	ldr	r3, [pc, #532]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	2380      	movs	r3, #128	@ 0x80
 800e826:	029b      	lsls	r3, r3, #10
 800e828:	4013      	ands	r3, r2
 800e82a:	d1f0      	bne.n	800e80e <HAL_RCC_OscConfig+0x112>
 800e82c:	e000      	b.n	800e830 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e82e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2202      	movs	r2, #2
 800e836:	4013      	ands	r3, r2
 800e838:	d100      	bne.n	800e83c <HAL_RCC_OscConfig+0x140>
 800e83a:	e099      	b.n	800e970 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800e842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e844:	2220      	movs	r2, #32
 800e846:	4013      	ands	r3, r2
 800e848:	d009      	beq.n	800e85e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800e84a:	4b7b      	ldr	r3, [pc, #492]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	4b7a      	ldr	r3, [pc, #488]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e850:	2120      	movs	r1, #32
 800e852:	430a      	orrs	r2, r1
 800e854:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800e856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e858:	2220      	movs	r2, #32
 800e85a:	4393      	bics	r3, r2
 800e85c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	2b04      	cmp	r3, #4
 800e862:	d005      	beq.n	800e870 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	2b0c      	cmp	r3, #12
 800e868:	d13e      	bne.n	800e8e8 <HAL_RCC_OscConfig+0x1ec>
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d13b      	bne.n	800e8e8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800e870:	4b71      	ldr	r3, [pc, #452]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2204      	movs	r2, #4
 800e876:	4013      	ands	r3, r2
 800e878:	d004      	beq.n	800e884 <HAL_RCC_OscConfig+0x188>
 800e87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800e880:	2301      	movs	r3, #1
 800e882:	e304      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e884:	4b6c      	ldr	r3, [pc, #432]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	4a6e      	ldr	r2, [pc, #440]	@ (800ea44 <HAL_RCC_OscConfig+0x348>)
 800e88a:	4013      	ands	r3, r2
 800e88c:	0019      	movs	r1, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	021a      	lsls	r2, r3, #8
 800e894:	4b68      	ldr	r3, [pc, #416]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e896:	430a      	orrs	r2, r1
 800e898:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800e89a:	4b67      	ldr	r3, [pc, #412]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2209      	movs	r2, #9
 800e8a0:	4393      	bics	r3, r2
 800e8a2:	0019      	movs	r1, r3
 800e8a4:	4b64      	ldr	r3, [pc, #400]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8a8:	430a      	orrs	r2, r1
 800e8aa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e8ac:	f000 fc42 	bl	800f134 <HAL_RCC_GetSysClockFreq>
 800e8b0:	0001      	movs	r1, r0
 800e8b2:	4b61      	ldr	r3, [pc, #388]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	091b      	lsrs	r3, r3, #4
 800e8b8:	220f      	movs	r2, #15
 800e8ba:	4013      	ands	r3, r2
 800e8bc:	4a62      	ldr	r2, [pc, #392]	@ (800ea48 <HAL_RCC_OscConfig+0x34c>)
 800e8be:	5cd3      	ldrb	r3, [r2, r3]
 800e8c0:	000a      	movs	r2, r1
 800e8c2:	40da      	lsrs	r2, r3
 800e8c4:	4b61      	ldr	r3, [pc, #388]	@ (800ea4c <HAL_RCC_OscConfig+0x350>)
 800e8c6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800e8c8:	4b61      	ldr	r3, [pc, #388]	@ (800ea50 <HAL_RCC_OscConfig+0x354>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2513      	movs	r5, #19
 800e8ce:	197c      	adds	r4, r7, r5
 800e8d0:	0018      	movs	r0, r3
 800e8d2:	f7fa fca1 	bl	8009218 <HAL_InitTick>
 800e8d6:	0003      	movs	r3, r0
 800e8d8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800e8da:	197b      	adds	r3, r7, r5
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d046      	beq.n	800e970 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800e8e2:	197b      	adds	r3, r7, r5
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	e2d2      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d027      	beq.n	800e93e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800e8ee:	4b52      	ldr	r3, [pc, #328]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2209      	movs	r2, #9
 800e8f4:	4393      	bics	r3, r2
 800e8f6:	0019      	movs	r1, r3
 800e8f8:	4b4f      	ldr	r3, [pc, #316]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e8fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e900:	f7fa fcd0 	bl	80092a4 <HAL_GetTick>
 800e904:	0003      	movs	r3, r0
 800e906:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e908:	e008      	b.n	800e91c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e90a:	f7fa fccb 	bl	80092a4 <HAL_GetTick>
 800e90e:	0002      	movs	r2, r0
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	1ad3      	subs	r3, r2, r3
 800e914:	2b02      	cmp	r3, #2
 800e916:	d901      	bls.n	800e91c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800e918:	2303      	movs	r3, #3
 800e91a:	e2b8      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e91c:	4b46      	ldr	r3, [pc, #280]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2204      	movs	r2, #4
 800e922:	4013      	ands	r3, r2
 800e924:	d0f1      	beq.n	800e90a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e926:	4b44      	ldr	r3, [pc, #272]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	4a46      	ldr	r2, [pc, #280]	@ (800ea44 <HAL_RCC_OscConfig+0x348>)
 800e92c:	4013      	ands	r3, r2
 800e92e:	0019      	movs	r1, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	021a      	lsls	r2, r3, #8
 800e936:	4b40      	ldr	r3, [pc, #256]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e938:	430a      	orrs	r2, r1
 800e93a:	605a      	str	r2, [r3, #4]
 800e93c:	e018      	b.n	800e970 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e93e:	4b3e      	ldr	r3, [pc, #248]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	4b3d      	ldr	r3, [pc, #244]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e944:	2101      	movs	r1, #1
 800e946:	438a      	bics	r2, r1
 800e948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e94a:	f7fa fcab 	bl	80092a4 <HAL_GetTick>
 800e94e:	0003      	movs	r3, r0
 800e950:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e952:	e008      	b.n	800e966 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e954:	f7fa fca6 	bl	80092a4 <HAL_GetTick>
 800e958:	0002      	movs	r2, r0
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	2b02      	cmp	r3, #2
 800e960:	d901      	bls.n	800e966 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	e293      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e966:	4b34      	ldr	r3, [pc, #208]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2204      	movs	r2, #4
 800e96c:	4013      	ands	r3, r2
 800e96e:	d1f1      	bne.n	800e954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2210      	movs	r2, #16
 800e976:	4013      	ands	r3, r2
 800e978:	d100      	bne.n	800e97c <HAL_RCC_OscConfig+0x280>
 800e97a:	e0a2      	b.n	800eac2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d140      	bne.n	800ea04 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e982:	4b2d      	ldr	r3, [pc, #180]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	2380      	movs	r3, #128	@ 0x80
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	4013      	ands	r3, r2
 800e98c:	d005      	beq.n	800e99a <HAL_RCC_OscConfig+0x29e>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	69db      	ldr	r3, [r3, #28]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	e279      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e99a:	4b27      	ldr	r3, [pc, #156]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	4a2d      	ldr	r2, [pc, #180]	@ (800ea54 <HAL_RCC_OscConfig+0x358>)
 800e9a0:	4013      	ands	r3, r2
 800e9a2:	0019      	movs	r1, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9a8:	4b23      	ldr	r3, [pc, #140]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e9aa:	430a      	orrs	r2, r1
 800e9ac:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e9ae:	4b22      	ldr	r3, [pc, #136]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	021b      	lsls	r3, r3, #8
 800e9b4:	0a19      	lsrs	r1, r3, #8
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6a1b      	ldr	r3, [r3, #32]
 800e9ba:	061a      	lsls	r2, r3, #24
 800e9bc:	4b1e      	ldr	r3, [pc, #120]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e9be:	430a      	orrs	r2, r1
 800e9c0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c6:	0b5b      	lsrs	r3, r3, #13
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	2280      	movs	r2, #128	@ 0x80
 800e9cc:	0212      	lsls	r2, r2, #8
 800e9ce:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800e9d0:	4b19      	ldr	r3, [pc, #100]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	091b      	lsrs	r3, r3, #4
 800e9d6:	210f      	movs	r1, #15
 800e9d8:	400b      	ands	r3, r1
 800e9da:	491b      	ldr	r1, [pc, #108]	@ (800ea48 <HAL_RCC_OscConfig+0x34c>)
 800e9dc:	5ccb      	ldrb	r3, [r1, r3]
 800e9de:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e9e0:	4b1a      	ldr	r3, [pc, #104]	@ (800ea4c <HAL_RCC_OscConfig+0x350>)
 800e9e2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800e9e4:	4b1a      	ldr	r3, [pc, #104]	@ (800ea50 <HAL_RCC_OscConfig+0x354>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2513      	movs	r5, #19
 800e9ea:	197c      	adds	r4, r7, r5
 800e9ec:	0018      	movs	r0, r3
 800e9ee:	f7fa fc13 	bl	8009218 <HAL_InitTick>
 800e9f2:	0003      	movs	r3, r0
 800e9f4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800e9f6:	197b      	adds	r3, r7, r5
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d061      	beq.n	800eac2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800e9fe:	197b      	adds	r3, r7, r5
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	e244      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	69db      	ldr	r3, [r3, #28]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d040      	beq.n	800ea8e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ea0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	4b09      	ldr	r3, [pc, #36]	@ (800ea38 <HAL_RCC_OscConfig+0x33c>)
 800ea12:	2180      	movs	r1, #128	@ 0x80
 800ea14:	0049      	lsls	r1, r1, #1
 800ea16:	430a      	orrs	r2, r1
 800ea18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea1a:	f7fa fc43 	bl	80092a4 <HAL_GetTick>
 800ea1e:	0003      	movs	r3, r0
 800ea20:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ea22:	e019      	b.n	800ea58 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ea24:	f7fa fc3e 	bl	80092a4 <HAL_GetTick>
 800ea28:	0002      	movs	r2, r0
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	d912      	bls.n	800ea58 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800ea32:	2303      	movs	r3, #3
 800ea34:	e22b      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
 800ea36:	46c0      	nop			@ (mov r8, r8)
 800ea38:	40021000 	.word	0x40021000
 800ea3c:	fffeffff 	.word	0xfffeffff
 800ea40:	fffbffff 	.word	0xfffbffff
 800ea44:	ffffe0ff 	.word	0xffffe0ff
 800ea48:	0801a38c 	.word	0x0801a38c
 800ea4c:	20000140 	.word	0x20000140
 800ea50:	20000154 	.word	0x20000154
 800ea54:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ea58:	4bca      	ldr	r3, [pc, #808]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	2380      	movs	r3, #128	@ 0x80
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4013      	ands	r3, r2
 800ea62:	d0df      	beq.n	800ea24 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ea64:	4bc7      	ldr	r3, [pc, #796]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	4ac7      	ldr	r2, [pc, #796]	@ (800ed88 <HAL_RCC_OscConfig+0x68c>)
 800ea6a:	4013      	ands	r3, r2
 800ea6c:	0019      	movs	r1, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea72:	4bc4      	ldr	r3, [pc, #784]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ea74:	430a      	orrs	r2, r1
 800ea76:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ea78:	4bc2      	ldr	r3, [pc, #776]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	021b      	lsls	r3, r3, #8
 800ea7e:	0a19      	lsrs	r1, r3, #8
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a1b      	ldr	r3, [r3, #32]
 800ea84:	061a      	lsls	r2, r3, #24
 800ea86:	4bbf      	ldr	r3, [pc, #764]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ea88:	430a      	orrs	r2, r1
 800ea8a:	605a      	str	r2, [r3, #4]
 800ea8c:	e019      	b.n	800eac2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ea8e:	4bbd      	ldr	r3, [pc, #756]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	4bbc      	ldr	r3, [pc, #752]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ea94:	49bd      	ldr	r1, [pc, #756]	@ (800ed8c <HAL_RCC_OscConfig+0x690>)
 800ea96:	400a      	ands	r2, r1
 800ea98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea9a:	f7fa fc03 	bl	80092a4 <HAL_GetTick>
 800ea9e:	0003      	movs	r3, r0
 800eaa0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800eaa2:	e008      	b.n	800eab6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800eaa4:	f7fa fbfe 	bl	80092a4 <HAL_GetTick>
 800eaa8:	0002      	movs	r2, r0
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d901      	bls.n	800eab6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800eab2:	2303      	movs	r3, #3
 800eab4:	e1eb      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800eab6:	4bb3      	ldr	r3, [pc, #716]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	2380      	movs	r3, #128	@ 0x80
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	4013      	ands	r3, r2
 800eac0:	d1f0      	bne.n	800eaa4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2208      	movs	r2, #8
 800eac8:	4013      	ands	r3, r2
 800eaca:	d036      	beq.n	800eb3a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	695b      	ldr	r3, [r3, #20]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d019      	beq.n	800eb08 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ead4:	4bab      	ldr	r3, [pc, #684]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ead6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ead8:	4baa      	ldr	r3, [pc, #680]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800eada:	2101      	movs	r1, #1
 800eadc:	430a      	orrs	r2, r1
 800eade:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eae0:	f7fa fbe0 	bl	80092a4 <HAL_GetTick>
 800eae4:	0003      	movs	r3, r0
 800eae6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800eae8:	e008      	b.n	800eafc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eaea:	f7fa fbdb 	bl	80092a4 <HAL_GetTick>
 800eaee:	0002      	movs	r2, r0
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	2b02      	cmp	r3, #2
 800eaf6:	d901      	bls.n	800eafc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	e1c8      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800eafc:	4ba1      	ldr	r3, [pc, #644]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800eafe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb00:	2202      	movs	r2, #2
 800eb02:	4013      	ands	r3, r2
 800eb04:	d0f1      	beq.n	800eaea <HAL_RCC_OscConfig+0x3ee>
 800eb06:	e018      	b.n	800eb3a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eb08:	4b9e      	ldr	r3, [pc, #632]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800eb0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb0c:	4b9d      	ldr	r3, [pc, #628]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800eb0e:	2101      	movs	r1, #1
 800eb10:	438a      	bics	r2, r1
 800eb12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb14:	f7fa fbc6 	bl	80092a4 <HAL_GetTick>
 800eb18:	0003      	movs	r3, r0
 800eb1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eb1c:	e008      	b.n	800eb30 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb1e:	f7fa fbc1 	bl	80092a4 <HAL_GetTick>
 800eb22:	0002      	movs	r2, r0
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	1ad3      	subs	r3, r2, r3
 800eb28:	2b02      	cmp	r3, #2
 800eb2a:	d901      	bls.n	800eb30 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800eb2c:	2303      	movs	r3, #3
 800eb2e:	e1ae      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eb30:	4b94      	ldr	r3, [pc, #592]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800eb32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb34:	2202      	movs	r2, #2
 800eb36:	4013      	ands	r3, r2
 800eb38:	d1f1      	bne.n	800eb1e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	2204      	movs	r2, #4
 800eb40:	4013      	ands	r3, r2
 800eb42:	d100      	bne.n	800eb46 <HAL_RCC_OscConfig+0x44a>
 800eb44:	e0ae      	b.n	800eca4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb46:	2023      	movs	r0, #35	@ 0x23
 800eb48:	183b      	adds	r3, r7, r0
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb4e:	4b8d      	ldr	r3, [pc, #564]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800eb50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb52:	2380      	movs	r3, #128	@ 0x80
 800eb54:	055b      	lsls	r3, r3, #21
 800eb56:	4013      	ands	r3, r2
 800eb58:	d109      	bne.n	800eb6e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb5a:	4b8a      	ldr	r3, [pc, #552]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800eb5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb5e:	4b89      	ldr	r3, [pc, #548]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800eb60:	2180      	movs	r1, #128	@ 0x80
 800eb62:	0549      	lsls	r1, r1, #21
 800eb64:	430a      	orrs	r2, r1
 800eb66:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800eb68:	183b      	adds	r3, r7, r0
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb6e:	4b88      	ldr	r3, [pc, #544]	@ (800ed90 <HAL_RCC_OscConfig+0x694>)
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	2380      	movs	r3, #128	@ 0x80
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	4013      	ands	r3, r2
 800eb78:	d11a      	bne.n	800ebb0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eb7a:	4b85      	ldr	r3, [pc, #532]	@ (800ed90 <HAL_RCC_OscConfig+0x694>)
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	4b84      	ldr	r3, [pc, #528]	@ (800ed90 <HAL_RCC_OscConfig+0x694>)
 800eb80:	2180      	movs	r1, #128	@ 0x80
 800eb82:	0049      	lsls	r1, r1, #1
 800eb84:	430a      	orrs	r2, r1
 800eb86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eb88:	f7fa fb8c 	bl	80092a4 <HAL_GetTick>
 800eb8c:	0003      	movs	r3, r0
 800eb8e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb90:	e008      	b.n	800eba4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb92:	f7fa fb87 	bl	80092a4 <HAL_GetTick>
 800eb96:	0002      	movs	r2, r0
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	2b64      	cmp	r3, #100	@ 0x64
 800eb9e:	d901      	bls.n	800eba4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800eba0:	2303      	movs	r3, #3
 800eba2:	e174      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eba4:	4b7a      	ldr	r3, [pc, #488]	@ (800ed90 <HAL_RCC_OscConfig+0x694>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	2380      	movs	r3, #128	@ 0x80
 800ebaa:	005b      	lsls	r3, r3, #1
 800ebac:	4013      	ands	r3, r2
 800ebae:	d0f0      	beq.n	800eb92 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	689a      	ldr	r2, [r3, #8]
 800ebb4:	2380      	movs	r3, #128	@ 0x80
 800ebb6:	005b      	lsls	r3, r3, #1
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d107      	bne.n	800ebcc <HAL_RCC_OscConfig+0x4d0>
 800ebbc:	4b71      	ldr	r3, [pc, #452]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ebbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebc0:	4b70      	ldr	r3, [pc, #448]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ebc2:	2180      	movs	r1, #128	@ 0x80
 800ebc4:	0049      	lsls	r1, r1, #1
 800ebc6:	430a      	orrs	r2, r1
 800ebc8:	651a      	str	r2, [r3, #80]	@ 0x50
 800ebca:	e031      	b.n	800ec30 <HAL_RCC_OscConfig+0x534>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d10c      	bne.n	800ebee <HAL_RCC_OscConfig+0x4f2>
 800ebd4:	4b6b      	ldr	r3, [pc, #428]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ebd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebd8:	4b6a      	ldr	r3, [pc, #424]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ebda:	496c      	ldr	r1, [pc, #432]	@ (800ed8c <HAL_RCC_OscConfig+0x690>)
 800ebdc:	400a      	ands	r2, r1
 800ebde:	651a      	str	r2, [r3, #80]	@ 0x50
 800ebe0:	4b68      	ldr	r3, [pc, #416]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ebe2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebe4:	4b67      	ldr	r3, [pc, #412]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ebe6:	496b      	ldr	r1, [pc, #428]	@ (800ed94 <HAL_RCC_OscConfig+0x698>)
 800ebe8:	400a      	ands	r2, r1
 800ebea:	651a      	str	r2, [r3, #80]	@ 0x50
 800ebec:	e020      	b.n	800ec30 <HAL_RCC_OscConfig+0x534>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	689a      	ldr	r2, [r3, #8]
 800ebf2:	23a0      	movs	r3, #160	@ 0xa0
 800ebf4:	00db      	lsls	r3, r3, #3
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d10e      	bne.n	800ec18 <HAL_RCC_OscConfig+0x51c>
 800ebfa:	4b62      	ldr	r3, [pc, #392]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ebfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebfe:	4b61      	ldr	r3, [pc, #388]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec00:	2180      	movs	r1, #128	@ 0x80
 800ec02:	00c9      	lsls	r1, r1, #3
 800ec04:	430a      	orrs	r2, r1
 800ec06:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec08:	4b5e      	ldr	r3, [pc, #376]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec0c:	4b5d      	ldr	r3, [pc, #372]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec0e:	2180      	movs	r1, #128	@ 0x80
 800ec10:	0049      	lsls	r1, r1, #1
 800ec12:	430a      	orrs	r2, r1
 800ec14:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec16:	e00b      	b.n	800ec30 <HAL_RCC_OscConfig+0x534>
 800ec18:	4b5a      	ldr	r3, [pc, #360]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec1c:	4b59      	ldr	r3, [pc, #356]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec1e:	495b      	ldr	r1, [pc, #364]	@ (800ed8c <HAL_RCC_OscConfig+0x690>)
 800ec20:	400a      	ands	r2, r1
 800ec22:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec24:	4b57      	ldr	r3, [pc, #348]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec28:	4b56      	ldr	r3, [pc, #344]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec2a:	495a      	ldr	r1, [pc, #360]	@ (800ed94 <HAL_RCC_OscConfig+0x698>)
 800ec2c:	400a      	ands	r2, r1
 800ec2e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d015      	beq.n	800ec64 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec38:	f7fa fb34 	bl	80092a4 <HAL_GetTick>
 800ec3c:	0003      	movs	r3, r0
 800ec3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec40:	e009      	b.n	800ec56 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec42:	f7fa fb2f 	bl	80092a4 <HAL_GetTick>
 800ec46:	0002      	movs	r2, r0
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	4a52      	ldr	r2, [pc, #328]	@ (800ed98 <HAL_RCC_OscConfig+0x69c>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d901      	bls.n	800ec56 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800ec52:	2303      	movs	r3, #3
 800ec54:	e11b      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec56:	4b4b      	ldr	r3, [pc, #300]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec5a:	2380      	movs	r3, #128	@ 0x80
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4013      	ands	r3, r2
 800ec60:	d0ef      	beq.n	800ec42 <HAL_RCC_OscConfig+0x546>
 800ec62:	e014      	b.n	800ec8e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec64:	f7fa fb1e 	bl	80092a4 <HAL_GetTick>
 800ec68:	0003      	movs	r3, r0
 800ec6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ec6c:	e009      	b.n	800ec82 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec6e:	f7fa fb19 	bl	80092a4 <HAL_GetTick>
 800ec72:	0002      	movs	r2, r0
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	1ad3      	subs	r3, r2, r3
 800ec78:	4a47      	ldr	r2, [pc, #284]	@ (800ed98 <HAL_RCC_OscConfig+0x69c>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d901      	bls.n	800ec82 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	e105      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ec82:	4b40      	ldr	r3, [pc, #256]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec86:	2380      	movs	r3, #128	@ 0x80
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	d1ef      	bne.n	800ec6e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ec8e:	2323      	movs	r3, #35	@ 0x23
 800ec90:	18fb      	adds	r3, r7, r3
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d105      	bne.n	800eca4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ec98:	4b3a      	ldr	r3, [pc, #232]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec9c:	4b39      	ldr	r3, [pc, #228]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ec9e:	493f      	ldr	r1, [pc, #252]	@ (800ed9c <HAL_RCC_OscConfig+0x6a0>)
 800eca0:	400a      	ands	r2, r1
 800eca2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2220      	movs	r2, #32
 800ecaa:	4013      	ands	r3, r2
 800ecac:	d049      	beq.n	800ed42 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d026      	beq.n	800ed04 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800ecb6:	4b33      	ldr	r3, [pc, #204]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ecb8:	689a      	ldr	r2, [r3, #8]
 800ecba:	4b32      	ldr	r3, [pc, #200]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ecbc:	2101      	movs	r1, #1
 800ecbe:	430a      	orrs	r2, r1
 800ecc0:	609a      	str	r2, [r3, #8]
 800ecc2:	4b30      	ldr	r3, [pc, #192]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ecc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ecc6:	4b2f      	ldr	r3, [pc, #188]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ecc8:	2101      	movs	r1, #1
 800ecca:	430a      	orrs	r2, r1
 800eccc:	635a      	str	r2, [r3, #52]	@ 0x34
 800ecce:	4b34      	ldr	r3, [pc, #208]	@ (800eda0 <HAL_RCC_OscConfig+0x6a4>)
 800ecd0:	6a1a      	ldr	r2, [r3, #32]
 800ecd2:	4b33      	ldr	r3, [pc, #204]	@ (800eda0 <HAL_RCC_OscConfig+0x6a4>)
 800ecd4:	2180      	movs	r1, #128	@ 0x80
 800ecd6:	0189      	lsls	r1, r1, #6
 800ecd8:	430a      	orrs	r2, r1
 800ecda:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecdc:	f7fa fae2 	bl	80092a4 <HAL_GetTick>
 800ece0:	0003      	movs	r3, r0
 800ece2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ece4:	e008      	b.n	800ecf8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ece6:	f7fa fadd 	bl	80092a4 <HAL_GetTick>
 800ecea:	0002      	movs	r2, r0
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	1ad3      	subs	r3, r2, r3
 800ecf0:	2b02      	cmp	r3, #2
 800ecf2:	d901      	bls.n	800ecf8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800ecf4:	2303      	movs	r3, #3
 800ecf6:	e0ca      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ecf8:	4b22      	ldr	r3, [pc, #136]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	2202      	movs	r2, #2
 800ecfe:	4013      	ands	r3, r2
 800ed00:	d0f1      	beq.n	800ece6 <HAL_RCC_OscConfig+0x5ea>
 800ed02:	e01e      	b.n	800ed42 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800ed04:	4b1f      	ldr	r3, [pc, #124]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ed06:	689a      	ldr	r2, [r3, #8]
 800ed08:	4b1e      	ldr	r3, [pc, #120]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ed0a:	2101      	movs	r1, #1
 800ed0c:	438a      	bics	r2, r1
 800ed0e:	609a      	str	r2, [r3, #8]
 800ed10:	4b23      	ldr	r3, [pc, #140]	@ (800eda0 <HAL_RCC_OscConfig+0x6a4>)
 800ed12:	6a1a      	ldr	r2, [r3, #32]
 800ed14:	4b22      	ldr	r3, [pc, #136]	@ (800eda0 <HAL_RCC_OscConfig+0x6a4>)
 800ed16:	4923      	ldr	r1, [pc, #140]	@ (800eda4 <HAL_RCC_OscConfig+0x6a8>)
 800ed18:	400a      	ands	r2, r1
 800ed1a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed1c:	f7fa fac2 	bl	80092a4 <HAL_GetTick>
 800ed20:	0003      	movs	r3, r0
 800ed22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ed24:	e008      	b.n	800ed38 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ed26:	f7fa fabd 	bl	80092a4 <HAL_GetTick>
 800ed2a:	0002      	movs	r2, r0
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	d901      	bls.n	800ed38 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800ed34:	2303      	movs	r3, #3
 800ed36:	e0aa      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ed38:	4b12      	ldr	r3, [pc, #72]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ed3a:	689b      	ldr	r3, [r3, #8]
 800ed3c:	2202      	movs	r2, #2
 800ed3e:	4013      	ands	r3, r2
 800ed40:	d1f1      	bne.n	800ed26 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d100      	bne.n	800ed4c <HAL_RCC_OscConfig+0x650>
 800ed4a:	e09f      	b.n	800ee8c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	2b0c      	cmp	r3, #12
 800ed50:	d100      	bne.n	800ed54 <HAL_RCC_OscConfig+0x658>
 800ed52:	e078      	b.n	800ee46 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed58:	2b02      	cmp	r3, #2
 800ed5a:	d159      	bne.n	800ee10 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed5c:	4b09      	ldr	r3, [pc, #36]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	4b08      	ldr	r3, [pc, #32]	@ (800ed84 <HAL_RCC_OscConfig+0x688>)
 800ed62:	4911      	ldr	r1, [pc, #68]	@ (800eda8 <HAL_RCC_OscConfig+0x6ac>)
 800ed64:	400a      	ands	r2, r1
 800ed66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed68:	f7fa fa9c 	bl	80092a4 <HAL_GetTick>
 800ed6c:	0003      	movs	r3, r0
 800ed6e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ed70:	e01c      	b.n	800edac <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed72:	f7fa fa97 	bl	80092a4 <HAL_GetTick>
 800ed76:	0002      	movs	r2, r0
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	1ad3      	subs	r3, r2, r3
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	d915      	bls.n	800edac <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800ed80:	2303      	movs	r3, #3
 800ed82:	e084      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
 800ed84:	40021000 	.word	0x40021000
 800ed88:	ffff1fff 	.word	0xffff1fff
 800ed8c:	fffffeff 	.word	0xfffffeff
 800ed90:	40007000 	.word	0x40007000
 800ed94:	fffffbff 	.word	0xfffffbff
 800ed98:	00001388 	.word	0x00001388
 800ed9c:	efffffff 	.word	0xefffffff
 800eda0:	40010000 	.word	0x40010000
 800eda4:	ffffdfff 	.word	0xffffdfff
 800eda8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800edac:	4b3a      	ldr	r3, [pc, #232]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	2380      	movs	r3, #128	@ 0x80
 800edb2:	049b      	lsls	r3, r3, #18
 800edb4:	4013      	ands	r3, r2
 800edb6:	d1dc      	bne.n	800ed72 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800edb8:	4b37      	ldr	r3, [pc, #220]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	4a37      	ldr	r2, [pc, #220]	@ (800ee9c <HAL_RCC_OscConfig+0x7a0>)
 800edbe:	4013      	ands	r3, r2
 800edc0:	0019      	movs	r1, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edca:	431a      	orrs	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edd0:	431a      	orrs	r2, r3
 800edd2:	4b31      	ldr	r3, [pc, #196]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800edd4:	430a      	orrs	r2, r1
 800edd6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800edd8:	4b2f      	ldr	r3, [pc, #188]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	4b2e      	ldr	r3, [pc, #184]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800edde:	2180      	movs	r1, #128	@ 0x80
 800ede0:	0449      	lsls	r1, r1, #17
 800ede2:	430a      	orrs	r2, r1
 800ede4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ede6:	f7fa fa5d 	bl	80092a4 <HAL_GetTick>
 800edea:	0003      	movs	r3, r0
 800edec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800edee:	e008      	b.n	800ee02 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800edf0:	f7fa fa58 	bl	80092a4 <HAL_GetTick>
 800edf4:	0002      	movs	r2, r0
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	2b02      	cmp	r3, #2
 800edfc:	d901      	bls.n	800ee02 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800edfe:	2303      	movs	r3, #3
 800ee00:	e045      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ee02:	4b25      	ldr	r3, [pc, #148]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	2380      	movs	r3, #128	@ 0x80
 800ee08:	049b      	lsls	r3, r3, #18
 800ee0a:	4013      	ands	r3, r2
 800ee0c:	d0f0      	beq.n	800edf0 <HAL_RCC_OscConfig+0x6f4>
 800ee0e:	e03d      	b.n	800ee8c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ee10:	4b21      	ldr	r3, [pc, #132]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	4b20      	ldr	r3, [pc, #128]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800ee16:	4922      	ldr	r1, [pc, #136]	@ (800eea0 <HAL_RCC_OscConfig+0x7a4>)
 800ee18:	400a      	ands	r2, r1
 800ee1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee1c:	f7fa fa42 	bl	80092a4 <HAL_GetTick>
 800ee20:	0003      	movs	r3, r0
 800ee22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ee24:	e008      	b.n	800ee38 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ee26:	f7fa fa3d 	bl	80092a4 <HAL_GetTick>
 800ee2a:	0002      	movs	r2, r0
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	1ad3      	subs	r3, r2, r3
 800ee30:	2b02      	cmp	r3, #2
 800ee32:	d901      	bls.n	800ee38 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800ee34:	2303      	movs	r3, #3
 800ee36:	e02a      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ee38:	4b17      	ldr	r3, [pc, #92]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	2380      	movs	r3, #128	@ 0x80
 800ee3e:	049b      	lsls	r3, r3, #18
 800ee40:	4013      	ands	r3, r2
 800ee42:	d1f0      	bne.n	800ee26 <HAL_RCC_OscConfig+0x72a>
 800ee44:	e022      	b.n	800ee8c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	d101      	bne.n	800ee52 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e01d      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ee52:	4b11      	ldr	r3, [pc, #68]	@ (800ee98 <HAL_RCC_OscConfig+0x79c>)
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee58:	69ba      	ldr	r2, [r7, #24]
 800ee5a:	2380      	movs	r3, #128	@ 0x80
 800ee5c:	025b      	lsls	r3, r3, #9
 800ee5e:	401a      	ands	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d10f      	bne.n	800ee88 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ee68:	69ba      	ldr	r2, [r7, #24]
 800ee6a:	23f0      	movs	r3, #240	@ 0xf0
 800ee6c:	039b      	lsls	r3, r3, #14
 800ee6e:	401a      	ands	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d107      	bne.n	800ee88 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ee78:	69ba      	ldr	r2, [r7, #24]
 800ee7a:	23c0      	movs	r3, #192	@ 0xc0
 800ee7c:	041b      	lsls	r3, r3, #16
 800ee7e:	401a      	ands	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d001      	beq.n	800ee8c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	e000      	b.n	800ee8e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800ee8c:	2300      	movs	r3, #0
}
 800ee8e:	0018      	movs	r0, r3
 800ee90:	46bd      	mov	sp, r7
 800ee92:	b00a      	add	sp, #40	@ 0x28
 800ee94:	bdb0      	pop	{r4, r5, r7, pc}
 800ee96:	46c0      	nop			@ (mov r8, r8)
 800ee98:	40021000 	.word	0x40021000
 800ee9c:	ff02ffff 	.word	0xff02ffff
 800eea0:	feffffff 	.word	0xfeffffff

0800eea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eea4:	b5b0      	push	{r4, r5, r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d101      	bne.n	800eeb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e128      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eeb8:	4b96      	ldr	r3, [pc, #600]	@ (800f114 <HAL_RCC_ClockConfig+0x270>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2201      	movs	r2, #1
 800eebe:	4013      	ands	r3, r2
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d91e      	bls.n	800ef04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eec6:	4b93      	ldr	r3, [pc, #588]	@ (800f114 <HAL_RCC_ClockConfig+0x270>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	2201      	movs	r2, #1
 800eecc:	4393      	bics	r3, r2
 800eece:	0019      	movs	r1, r3
 800eed0:	4b90      	ldr	r3, [pc, #576]	@ (800f114 <HAL_RCC_ClockConfig+0x270>)
 800eed2:	683a      	ldr	r2, [r7, #0]
 800eed4:	430a      	orrs	r2, r1
 800eed6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800eed8:	f7fa f9e4 	bl	80092a4 <HAL_GetTick>
 800eedc:	0003      	movs	r3, r0
 800eede:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eee0:	e009      	b.n	800eef6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eee2:	f7fa f9df 	bl	80092a4 <HAL_GetTick>
 800eee6:	0002      	movs	r2, r0
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	4a8a      	ldr	r2, [pc, #552]	@ (800f118 <HAL_RCC_ClockConfig+0x274>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d901      	bls.n	800eef6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800eef2:	2303      	movs	r3, #3
 800eef4:	e109      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eef6:	4b87      	ldr	r3, [pc, #540]	@ (800f114 <HAL_RCC_ClockConfig+0x270>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	2201      	movs	r2, #1
 800eefc:	4013      	ands	r3, r2
 800eefe:	683a      	ldr	r2, [r7, #0]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d1ee      	bne.n	800eee2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2202      	movs	r2, #2
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	d009      	beq.n	800ef22 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ef0e:	4b83      	ldr	r3, [pc, #524]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	22f0      	movs	r2, #240	@ 0xf0
 800ef14:	4393      	bics	r3, r2
 800ef16:	0019      	movs	r1, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	689a      	ldr	r2, [r3, #8]
 800ef1c:	4b7f      	ldr	r3, [pc, #508]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800ef1e:	430a      	orrs	r2, r1
 800ef20:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2201      	movs	r2, #1
 800ef28:	4013      	ands	r3, r2
 800ef2a:	d100      	bne.n	800ef2e <HAL_RCC_ClockConfig+0x8a>
 800ef2c:	e089      	b.n	800f042 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	2b02      	cmp	r3, #2
 800ef34:	d107      	bne.n	800ef46 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ef36:	4b79      	ldr	r3, [pc, #484]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	2380      	movs	r3, #128	@ 0x80
 800ef3c:	029b      	lsls	r3, r3, #10
 800ef3e:	4013      	ands	r3, r2
 800ef40:	d120      	bne.n	800ef84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ef42:	2301      	movs	r3, #1
 800ef44:	e0e1      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	2b03      	cmp	r3, #3
 800ef4c:	d107      	bne.n	800ef5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ef4e:	4b73      	ldr	r3, [pc, #460]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	2380      	movs	r3, #128	@ 0x80
 800ef54:	049b      	lsls	r3, r3, #18
 800ef56:	4013      	ands	r3, r2
 800ef58:	d114      	bne.n	800ef84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	e0d5      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d106      	bne.n	800ef74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ef66:	4b6d      	ldr	r3, [pc, #436]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2204      	movs	r2, #4
 800ef6c:	4013      	ands	r3, r2
 800ef6e:	d109      	bne.n	800ef84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ef70:	2301      	movs	r3, #1
 800ef72:	e0ca      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ef74:	4b69      	ldr	r3, [pc, #420]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	2380      	movs	r3, #128	@ 0x80
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4013      	ands	r3, r2
 800ef7e:	d101      	bne.n	800ef84 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ef80:	2301      	movs	r3, #1
 800ef82:	e0c2      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ef84:	4b65      	ldr	r3, [pc, #404]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	2203      	movs	r2, #3
 800ef8a:	4393      	bics	r3, r2
 800ef8c:	0019      	movs	r1, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	685a      	ldr	r2, [r3, #4]
 800ef92:	4b62      	ldr	r3, [pc, #392]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800ef94:	430a      	orrs	r2, r1
 800ef96:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ef98:	f7fa f984 	bl	80092a4 <HAL_GetTick>
 800ef9c:	0003      	movs	r3, r0
 800ef9e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	2b02      	cmp	r3, #2
 800efa6:	d111      	bne.n	800efcc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800efa8:	e009      	b.n	800efbe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800efaa:	f7fa f97b 	bl	80092a4 <HAL_GetTick>
 800efae:	0002      	movs	r2, r0
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	4a58      	ldr	r2, [pc, #352]	@ (800f118 <HAL_RCC_ClockConfig+0x274>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d901      	bls.n	800efbe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800efba:	2303      	movs	r3, #3
 800efbc:	e0a5      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800efbe:	4b57      	ldr	r3, [pc, #348]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	220c      	movs	r2, #12
 800efc4:	4013      	ands	r3, r2
 800efc6:	2b08      	cmp	r3, #8
 800efc8:	d1ef      	bne.n	800efaa <HAL_RCC_ClockConfig+0x106>
 800efca:	e03a      	b.n	800f042 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	2b03      	cmp	r3, #3
 800efd2:	d111      	bne.n	800eff8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800efd4:	e009      	b.n	800efea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800efd6:	f7fa f965 	bl	80092a4 <HAL_GetTick>
 800efda:	0002      	movs	r2, r0
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	4a4d      	ldr	r2, [pc, #308]	@ (800f118 <HAL_RCC_ClockConfig+0x274>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d901      	bls.n	800efea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800efe6:	2303      	movs	r3, #3
 800efe8:	e08f      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800efea:	4b4c      	ldr	r3, [pc, #304]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	220c      	movs	r2, #12
 800eff0:	4013      	ands	r3, r2
 800eff2:	2b0c      	cmp	r3, #12
 800eff4:	d1ef      	bne.n	800efd6 <HAL_RCC_ClockConfig+0x132>
 800eff6:	e024      	b.n	800f042 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	2b01      	cmp	r3, #1
 800effe:	d11b      	bne.n	800f038 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f000:	e009      	b.n	800f016 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f002:	f7fa f94f 	bl	80092a4 <HAL_GetTick>
 800f006:	0002      	movs	r2, r0
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	4a42      	ldr	r2, [pc, #264]	@ (800f118 <HAL_RCC_ClockConfig+0x274>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d901      	bls.n	800f016 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800f012:	2303      	movs	r3, #3
 800f014:	e079      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f016:	4b41      	ldr	r3, [pc, #260]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	220c      	movs	r2, #12
 800f01c:	4013      	ands	r3, r2
 800f01e:	2b04      	cmp	r3, #4
 800f020:	d1ef      	bne.n	800f002 <HAL_RCC_ClockConfig+0x15e>
 800f022:	e00e      	b.n	800f042 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f024:	f7fa f93e 	bl	80092a4 <HAL_GetTick>
 800f028:	0002      	movs	r2, r0
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	4a3a      	ldr	r2, [pc, #232]	@ (800f118 <HAL_RCC_ClockConfig+0x274>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d901      	bls.n	800f038 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800f034:	2303      	movs	r3, #3
 800f036:	e068      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800f038:	4b38      	ldr	r3, [pc, #224]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	220c      	movs	r2, #12
 800f03e:	4013      	ands	r3, r2
 800f040:	d1f0      	bne.n	800f024 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f042:	4b34      	ldr	r3, [pc, #208]	@ (800f114 <HAL_RCC_ClockConfig+0x270>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2201      	movs	r2, #1
 800f048:	4013      	ands	r3, r2
 800f04a:	683a      	ldr	r2, [r7, #0]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d21e      	bcs.n	800f08e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f050:	4b30      	ldr	r3, [pc, #192]	@ (800f114 <HAL_RCC_ClockConfig+0x270>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2201      	movs	r2, #1
 800f056:	4393      	bics	r3, r2
 800f058:	0019      	movs	r1, r3
 800f05a:	4b2e      	ldr	r3, [pc, #184]	@ (800f114 <HAL_RCC_ClockConfig+0x270>)
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	430a      	orrs	r2, r1
 800f060:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800f062:	f7fa f91f 	bl	80092a4 <HAL_GetTick>
 800f066:	0003      	movs	r3, r0
 800f068:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f06a:	e009      	b.n	800f080 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f06c:	f7fa f91a 	bl	80092a4 <HAL_GetTick>
 800f070:	0002      	movs	r2, r0
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	4a28      	ldr	r2, [pc, #160]	@ (800f118 <HAL_RCC_ClockConfig+0x274>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	d901      	bls.n	800f080 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800f07c:	2303      	movs	r3, #3
 800f07e:	e044      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f080:	4b24      	ldr	r3, [pc, #144]	@ (800f114 <HAL_RCC_ClockConfig+0x270>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2201      	movs	r2, #1
 800f086:	4013      	ands	r3, r2
 800f088:	683a      	ldr	r2, [r7, #0]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d1ee      	bne.n	800f06c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2204      	movs	r2, #4
 800f094:	4013      	ands	r3, r2
 800f096:	d009      	beq.n	800f0ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f098:	4b20      	ldr	r3, [pc, #128]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	4a20      	ldr	r2, [pc, #128]	@ (800f120 <HAL_RCC_ClockConfig+0x27c>)
 800f09e:	4013      	ands	r3, r2
 800f0a0:	0019      	movs	r1, r3
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	68da      	ldr	r2, [r3, #12]
 800f0a6:	4b1d      	ldr	r3, [pc, #116]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800f0a8:	430a      	orrs	r2, r1
 800f0aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2208      	movs	r2, #8
 800f0b2:	4013      	ands	r3, r2
 800f0b4:	d00a      	beq.n	800f0cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f0b6:	4b19      	ldr	r3, [pc, #100]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	4a1a      	ldr	r2, [pc, #104]	@ (800f124 <HAL_RCC_ClockConfig+0x280>)
 800f0bc:	4013      	ands	r3, r2
 800f0be:	0019      	movs	r1, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	00da      	lsls	r2, r3, #3
 800f0c6:	4b15      	ldr	r3, [pc, #84]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800f0c8:	430a      	orrs	r2, r1
 800f0ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f0cc:	f000 f832 	bl	800f134 <HAL_RCC_GetSysClockFreq>
 800f0d0:	0001      	movs	r1, r0
 800f0d2:	4b12      	ldr	r3, [pc, #72]	@ (800f11c <HAL_RCC_ClockConfig+0x278>)
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	091b      	lsrs	r3, r3, #4
 800f0d8:	220f      	movs	r2, #15
 800f0da:	4013      	ands	r3, r2
 800f0dc:	4a12      	ldr	r2, [pc, #72]	@ (800f128 <HAL_RCC_ClockConfig+0x284>)
 800f0de:	5cd3      	ldrb	r3, [r2, r3]
 800f0e0:	000a      	movs	r2, r1
 800f0e2:	40da      	lsrs	r2, r3
 800f0e4:	4b11      	ldr	r3, [pc, #68]	@ (800f12c <HAL_RCC_ClockConfig+0x288>)
 800f0e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f0e8:	4b11      	ldr	r3, [pc, #68]	@ (800f130 <HAL_RCC_ClockConfig+0x28c>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	250b      	movs	r5, #11
 800f0ee:	197c      	adds	r4, r7, r5
 800f0f0:	0018      	movs	r0, r3
 800f0f2:	f7fa f891 	bl	8009218 <HAL_InitTick>
 800f0f6:	0003      	movs	r3, r0
 800f0f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800f0fa:	197b      	adds	r3, r7, r5
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d002      	beq.n	800f108 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800f102:	197b      	adds	r3, r7, r5
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	e000      	b.n	800f10a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	0018      	movs	r0, r3
 800f10c:	46bd      	mov	sp, r7
 800f10e:	b004      	add	sp, #16
 800f110:	bdb0      	pop	{r4, r5, r7, pc}
 800f112:	46c0      	nop			@ (mov r8, r8)
 800f114:	40022000 	.word	0x40022000
 800f118:	00001388 	.word	0x00001388
 800f11c:	40021000 	.word	0x40021000
 800f120:	fffff8ff 	.word	0xfffff8ff
 800f124:	ffffc7ff 	.word	0xffffc7ff
 800f128:	0801a38c 	.word	0x0801a38c
 800f12c:	20000140 	.word	0x20000140
 800f130:	20000154 	.word	0x20000154

0800f134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f134:	b5b0      	push	{r4, r5, r7, lr}
 800f136:	b08e      	sub	sp, #56	@ 0x38
 800f138:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800f13a:	4b4c      	ldr	r3, [pc, #304]	@ (800f26c <HAL_RCC_GetSysClockFreq+0x138>)
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f142:	230c      	movs	r3, #12
 800f144:	4013      	ands	r3, r2
 800f146:	2b0c      	cmp	r3, #12
 800f148:	d014      	beq.n	800f174 <HAL_RCC_GetSysClockFreq+0x40>
 800f14a:	d900      	bls.n	800f14e <HAL_RCC_GetSysClockFreq+0x1a>
 800f14c:	e07b      	b.n	800f246 <HAL_RCC_GetSysClockFreq+0x112>
 800f14e:	2b04      	cmp	r3, #4
 800f150:	d002      	beq.n	800f158 <HAL_RCC_GetSysClockFreq+0x24>
 800f152:	2b08      	cmp	r3, #8
 800f154:	d00b      	beq.n	800f16e <HAL_RCC_GetSysClockFreq+0x3a>
 800f156:	e076      	b.n	800f246 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f158:	4b44      	ldr	r3, [pc, #272]	@ (800f26c <HAL_RCC_GetSysClockFreq+0x138>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2210      	movs	r2, #16
 800f15e:	4013      	ands	r3, r2
 800f160:	d002      	beq.n	800f168 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800f162:	4b43      	ldr	r3, [pc, #268]	@ (800f270 <HAL_RCC_GetSysClockFreq+0x13c>)
 800f164:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800f166:	e07c      	b.n	800f262 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800f168:	4b42      	ldr	r3, [pc, #264]	@ (800f274 <HAL_RCC_GetSysClockFreq+0x140>)
 800f16a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f16c:	e079      	b.n	800f262 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f16e:	4b42      	ldr	r3, [pc, #264]	@ (800f278 <HAL_RCC_GetSysClockFreq+0x144>)
 800f170:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f172:	e076      	b.n	800f262 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800f174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f176:	0c9a      	lsrs	r2, r3, #18
 800f178:	230f      	movs	r3, #15
 800f17a:	401a      	ands	r2, r3
 800f17c:	4b3f      	ldr	r3, [pc, #252]	@ (800f27c <HAL_RCC_GetSysClockFreq+0x148>)
 800f17e:	5c9b      	ldrb	r3, [r3, r2]
 800f180:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800f182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f184:	0d9a      	lsrs	r2, r3, #22
 800f186:	2303      	movs	r3, #3
 800f188:	4013      	ands	r3, r2
 800f18a:	3301      	adds	r3, #1
 800f18c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f18e:	4b37      	ldr	r3, [pc, #220]	@ (800f26c <HAL_RCC_GetSysClockFreq+0x138>)
 800f190:	68da      	ldr	r2, [r3, #12]
 800f192:	2380      	movs	r3, #128	@ 0x80
 800f194:	025b      	lsls	r3, r3, #9
 800f196:	4013      	ands	r3, r2
 800f198:	d01a      	beq.n	800f1d0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f19c:	61bb      	str	r3, [r7, #24]
 800f19e:	2300      	movs	r3, #0
 800f1a0:	61fb      	str	r3, [r7, #28]
 800f1a2:	4a35      	ldr	r2, [pc, #212]	@ (800f278 <HAL_RCC_GetSysClockFreq+0x144>)
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	69b8      	ldr	r0, [r7, #24]
 800f1a8:	69f9      	ldr	r1, [r7, #28]
 800f1aa:	f7f1 f9d7 	bl	800055c <__aeabi_lmul>
 800f1ae:	0002      	movs	r2, r0
 800f1b0:	000b      	movs	r3, r1
 800f1b2:	0010      	movs	r0, r2
 800f1b4:	0019      	movs	r1, r3
 800f1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b8:	613b      	str	r3, [r7, #16]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	617b      	str	r3, [r7, #20]
 800f1be:	693a      	ldr	r2, [r7, #16]
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	f7f1 f9ab 	bl	800051c <__aeabi_uldivmod>
 800f1c6:	0002      	movs	r2, r0
 800f1c8:	000b      	movs	r3, r1
 800f1ca:	0013      	movs	r3, r2
 800f1cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1ce:	e037      	b.n	800f240 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f1d0:	4b26      	ldr	r3, [pc, #152]	@ (800f26c <HAL_RCC_GetSysClockFreq+0x138>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2210      	movs	r2, #16
 800f1d6:	4013      	ands	r3, r2
 800f1d8:	d01a      	beq.n	800f210 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800f1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1dc:	60bb      	str	r3, [r7, #8]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	60fb      	str	r3, [r7, #12]
 800f1e2:	4a23      	ldr	r2, [pc, #140]	@ (800f270 <HAL_RCC_GetSysClockFreq+0x13c>)
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	68b8      	ldr	r0, [r7, #8]
 800f1e8:	68f9      	ldr	r1, [r7, #12]
 800f1ea:	f7f1 f9b7 	bl	800055c <__aeabi_lmul>
 800f1ee:	0002      	movs	r2, r0
 800f1f0:	000b      	movs	r3, r1
 800f1f2:	0010      	movs	r0, r2
 800f1f4:	0019      	movs	r1, r3
 800f1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f8:	603b      	str	r3, [r7, #0]
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	607b      	str	r3, [r7, #4]
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f7f1 f98b 	bl	800051c <__aeabi_uldivmod>
 800f206:	0002      	movs	r2, r0
 800f208:	000b      	movs	r3, r1
 800f20a:	0013      	movs	r3, r2
 800f20c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f20e:	e017      	b.n	800f240 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f212:	0018      	movs	r0, r3
 800f214:	2300      	movs	r3, #0
 800f216:	0019      	movs	r1, r3
 800f218:	4a16      	ldr	r2, [pc, #88]	@ (800f274 <HAL_RCC_GetSysClockFreq+0x140>)
 800f21a:	2300      	movs	r3, #0
 800f21c:	f7f1 f99e 	bl	800055c <__aeabi_lmul>
 800f220:	0002      	movs	r2, r0
 800f222:	000b      	movs	r3, r1
 800f224:	0010      	movs	r0, r2
 800f226:	0019      	movs	r1, r3
 800f228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f22a:	001c      	movs	r4, r3
 800f22c:	2300      	movs	r3, #0
 800f22e:	001d      	movs	r5, r3
 800f230:	0022      	movs	r2, r4
 800f232:	002b      	movs	r3, r5
 800f234:	f7f1 f972 	bl	800051c <__aeabi_uldivmod>
 800f238:	0002      	movs	r2, r0
 800f23a:	000b      	movs	r3, r1
 800f23c:	0013      	movs	r3, r2
 800f23e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800f240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f242:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f244:	e00d      	b.n	800f262 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800f246:	4b09      	ldr	r3, [pc, #36]	@ (800f26c <HAL_RCC_GetSysClockFreq+0x138>)
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	0b5b      	lsrs	r3, r3, #13
 800f24c:	2207      	movs	r2, #7
 800f24e:	4013      	ands	r3, r2
 800f250:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	3301      	adds	r3, #1
 800f256:	2280      	movs	r2, #128	@ 0x80
 800f258:	0212      	lsls	r2, r2, #8
 800f25a:	409a      	lsls	r2, r3
 800f25c:	0013      	movs	r3, r2
 800f25e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f260:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800f262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800f264:	0018      	movs	r0, r3
 800f266:	46bd      	mov	sp, r7
 800f268:	b00e      	add	sp, #56	@ 0x38
 800f26a:	bdb0      	pop	{r4, r5, r7, pc}
 800f26c:	40021000 	.word	0x40021000
 800f270:	003d0900 	.word	0x003d0900
 800f274:	00f42400 	.word	0x00f42400
 800f278:	007a1200 	.word	0x007a1200
 800f27c:	0801a3a4 	.word	0x0801a3a4

0800f280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f284:	4b02      	ldr	r3, [pc, #8]	@ (800f290 <HAL_RCC_GetHCLKFreq+0x10>)
 800f286:	681b      	ldr	r3, [r3, #0]
}
 800f288:	0018      	movs	r0, r3
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	46c0      	nop			@ (mov r8, r8)
 800f290:	20000140 	.word	0x20000140

0800f294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f298:	f7ff fff2 	bl	800f280 <HAL_RCC_GetHCLKFreq>
 800f29c:	0001      	movs	r1, r0
 800f29e:	4b06      	ldr	r3, [pc, #24]	@ (800f2b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	0a1b      	lsrs	r3, r3, #8
 800f2a4:	2207      	movs	r2, #7
 800f2a6:	4013      	ands	r3, r2
 800f2a8:	4a04      	ldr	r2, [pc, #16]	@ (800f2bc <HAL_RCC_GetPCLK1Freq+0x28>)
 800f2aa:	5cd3      	ldrb	r3, [r2, r3]
 800f2ac:	40d9      	lsrs	r1, r3
 800f2ae:	000b      	movs	r3, r1
}
 800f2b0:	0018      	movs	r0, r3
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	46c0      	nop			@ (mov r8, r8)
 800f2b8:	40021000 	.word	0x40021000
 800f2bc:	0801a39c 	.word	0x0801a39c

0800f2c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f2c4:	f7ff ffdc 	bl	800f280 <HAL_RCC_GetHCLKFreq>
 800f2c8:	0001      	movs	r1, r0
 800f2ca:	4b06      	ldr	r3, [pc, #24]	@ (800f2e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f2cc:	68db      	ldr	r3, [r3, #12]
 800f2ce:	0adb      	lsrs	r3, r3, #11
 800f2d0:	2207      	movs	r2, #7
 800f2d2:	4013      	ands	r3, r2
 800f2d4:	4a04      	ldr	r2, [pc, #16]	@ (800f2e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f2d6:	5cd3      	ldrb	r3, [r2, r3]
 800f2d8:	40d9      	lsrs	r1, r3
 800f2da:	000b      	movs	r3, r1
}
 800f2dc:	0018      	movs	r0, r3
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}
 800f2e2:	46c0      	nop			@ (mov r8, r8)
 800f2e4:	40021000 	.word	0x40021000
 800f2e8:	0801a39c 	.word	0x0801a39c

0800f2ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b086      	sub	sp, #24
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800f2f4:	2017      	movs	r0, #23
 800f2f6:	183b      	adds	r3, r7, r0
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2220      	movs	r2, #32
 800f302:	4013      	ands	r3, r2
 800f304:	d100      	bne.n	800f308 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800f306:	e0c7      	b.n	800f498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f308:	4b9b      	ldr	r3, [pc, #620]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f30a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f30c:	2380      	movs	r3, #128	@ 0x80
 800f30e:	055b      	lsls	r3, r3, #21
 800f310:	4013      	ands	r3, r2
 800f312:	d109      	bne.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f314:	4b98      	ldr	r3, [pc, #608]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f318:	4b97      	ldr	r3, [pc, #604]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f31a:	2180      	movs	r1, #128	@ 0x80
 800f31c:	0549      	lsls	r1, r1, #21
 800f31e:	430a      	orrs	r2, r1
 800f320:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800f322:	183b      	adds	r3, r7, r0
 800f324:	2201      	movs	r2, #1
 800f326:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f328:	4b94      	ldr	r3, [pc, #592]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	2380      	movs	r3, #128	@ 0x80
 800f32e:	005b      	lsls	r3, r3, #1
 800f330:	4013      	ands	r3, r2
 800f332:	d11a      	bne.n	800f36a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f334:	4b91      	ldr	r3, [pc, #580]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	4b90      	ldr	r3, [pc, #576]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f33a:	2180      	movs	r1, #128	@ 0x80
 800f33c:	0049      	lsls	r1, r1, #1
 800f33e:	430a      	orrs	r2, r1
 800f340:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f342:	f7f9 ffaf 	bl	80092a4 <HAL_GetTick>
 800f346:	0003      	movs	r3, r0
 800f348:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f34a:	e008      	b.n	800f35e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f34c:	f7f9 ffaa 	bl	80092a4 <HAL_GetTick>
 800f350:	0002      	movs	r2, r0
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	1ad3      	subs	r3, r2, r3
 800f356:	2b64      	cmp	r3, #100	@ 0x64
 800f358:	d901      	bls.n	800f35e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800f35a:	2303      	movs	r3, #3
 800f35c:	e107      	b.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f35e:	4b87      	ldr	r3, [pc, #540]	@ (800f57c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	2380      	movs	r3, #128	@ 0x80
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	4013      	ands	r3, r2
 800f368:	d0f0      	beq.n	800f34c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800f36a:	4b83      	ldr	r3, [pc, #524]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	23c0      	movs	r3, #192	@ 0xc0
 800f370:	039b      	lsls	r3, r3, #14
 800f372:	4013      	ands	r3, r2
 800f374:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	685a      	ldr	r2, [r3, #4]
 800f37a:	23c0      	movs	r3, #192	@ 0xc0
 800f37c:	039b      	lsls	r3, r3, #14
 800f37e:	4013      	ands	r3, r2
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	429a      	cmp	r2, r3
 800f384:	d013      	beq.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	685a      	ldr	r2, [r3, #4]
 800f38a:	23c0      	movs	r3, #192	@ 0xc0
 800f38c:	029b      	lsls	r3, r3, #10
 800f38e:	401a      	ands	r2, r3
 800f390:	23c0      	movs	r3, #192	@ 0xc0
 800f392:	029b      	lsls	r3, r3, #10
 800f394:	429a      	cmp	r2, r3
 800f396:	d10a      	bne.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f398:	4b77      	ldr	r3, [pc, #476]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	2380      	movs	r3, #128	@ 0x80
 800f39e:	029b      	lsls	r3, r3, #10
 800f3a0:	401a      	ands	r2, r3
 800f3a2:	2380      	movs	r3, #128	@ 0x80
 800f3a4:	029b      	lsls	r3, r3, #10
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d101      	bne.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e0df      	b.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800f3ae:	4b72      	ldr	r3, [pc, #456]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f3b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3b2:	23c0      	movs	r3, #192	@ 0xc0
 800f3b4:	029b      	lsls	r3, r3, #10
 800f3b6:	4013      	ands	r3, r2
 800f3b8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d03b      	beq.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	685a      	ldr	r2, [r3, #4]
 800f3c4:	23c0      	movs	r3, #192	@ 0xc0
 800f3c6:	029b      	lsls	r3, r3, #10
 800f3c8:	4013      	ands	r3, r2
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d033      	beq.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	2220      	movs	r2, #32
 800f3d6:	4013      	ands	r3, r2
 800f3d8:	d02e      	beq.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800f3da:	4b67      	ldr	r3, [pc, #412]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f3dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3de:	4a68      	ldr	r2, [pc, #416]	@ (800f580 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f3e4:	4b64      	ldr	r3, [pc, #400]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f3e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3e8:	4b63      	ldr	r3, [pc, #396]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f3ea:	2180      	movs	r1, #128	@ 0x80
 800f3ec:	0309      	lsls	r1, r1, #12
 800f3ee:	430a      	orrs	r2, r1
 800f3f0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f3f2:	4b61      	ldr	r3, [pc, #388]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f3f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3f6:	4b60      	ldr	r3, [pc, #384]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f3f8:	4962      	ldr	r1, [pc, #392]	@ (800f584 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800f3fa:	400a      	ands	r2, r1
 800f3fc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800f3fe:	4b5e      	ldr	r3, [pc, #376]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f400:	68fa      	ldr	r2, [r7, #12]
 800f402:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	2380      	movs	r3, #128	@ 0x80
 800f408:	005b      	lsls	r3, r3, #1
 800f40a:	4013      	ands	r3, r2
 800f40c:	d014      	beq.n	800f438 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f40e:	f7f9 ff49 	bl	80092a4 <HAL_GetTick>
 800f412:	0003      	movs	r3, r0
 800f414:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f416:	e009      	b.n	800f42c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f418:	f7f9 ff44 	bl	80092a4 <HAL_GetTick>
 800f41c:	0002      	movs	r2, r0
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	1ad3      	subs	r3, r2, r3
 800f422:	4a59      	ldr	r2, [pc, #356]	@ (800f588 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d901      	bls.n	800f42c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800f428:	2303      	movs	r3, #3
 800f42a:	e0a0      	b.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f42c:	4b52      	ldr	r3, [pc, #328]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f42e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f430:	2380      	movs	r3, #128	@ 0x80
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	4013      	ands	r3, r2
 800f436:	d0ef      	beq.n	800f418 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2220      	movs	r2, #32
 800f43e:	4013      	ands	r3, r2
 800f440:	d01f      	beq.n	800f482 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	23c0      	movs	r3, #192	@ 0xc0
 800f448:	029b      	lsls	r3, r3, #10
 800f44a:	401a      	ands	r2, r3
 800f44c:	23c0      	movs	r3, #192	@ 0xc0
 800f44e:	029b      	lsls	r3, r3, #10
 800f450:	429a      	cmp	r2, r3
 800f452:	d10c      	bne.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0x182>
 800f454:	4b48      	ldr	r3, [pc, #288]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4a4c      	ldr	r2, [pc, #304]	@ (800f58c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800f45a:	4013      	ands	r3, r2
 800f45c:	0019      	movs	r1, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	685a      	ldr	r2, [r3, #4]
 800f462:	23c0      	movs	r3, #192	@ 0xc0
 800f464:	039b      	lsls	r3, r3, #14
 800f466:	401a      	ands	r2, r3
 800f468:	4b43      	ldr	r3, [pc, #268]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f46a:	430a      	orrs	r2, r1
 800f46c:	601a      	str	r2, [r3, #0]
 800f46e:	4b42      	ldr	r3, [pc, #264]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f470:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	685a      	ldr	r2, [r3, #4]
 800f476:	23c0      	movs	r3, #192	@ 0xc0
 800f478:	029b      	lsls	r3, r3, #10
 800f47a:	401a      	ands	r2, r3
 800f47c:	4b3e      	ldr	r3, [pc, #248]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f47e:	430a      	orrs	r2, r1
 800f480:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800f482:	2317      	movs	r3, #23
 800f484:	18fb      	adds	r3, r7, r3
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d105      	bne.n	800f498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f48c:	4b3a      	ldr	r3, [pc, #232]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f48e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f490:	4b39      	ldr	r3, [pc, #228]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f492:	493f      	ldr	r1, [pc, #252]	@ (800f590 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800f494:	400a      	ands	r2, r1
 800f496:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2201      	movs	r2, #1
 800f49e:	4013      	ands	r3, r2
 800f4a0:	d009      	beq.n	800f4b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f4a2:	4b35      	ldr	r3, [pc, #212]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4a6:	2203      	movs	r2, #3
 800f4a8:	4393      	bics	r3, r2
 800f4aa:	0019      	movs	r1, r3
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	689a      	ldr	r2, [r3, #8]
 800f4b0:	4b31      	ldr	r3, [pc, #196]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4b2:	430a      	orrs	r2, r1
 800f4b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2202      	movs	r2, #2
 800f4bc:	4013      	ands	r3, r2
 800f4be:	d009      	beq.n	800f4d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f4c0:	4b2d      	ldr	r3, [pc, #180]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4c4:	220c      	movs	r2, #12
 800f4c6:	4393      	bics	r3, r2
 800f4c8:	0019      	movs	r1, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	68da      	ldr	r2, [r3, #12]
 800f4ce:	4b2a      	ldr	r3, [pc, #168]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4d0:	430a      	orrs	r2, r1
 800f4d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2204      	movs	r2, #4
 800f4da:	4013      	ands	r3, r2
 800f4dc:	d009      	beq.n	800f4f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f4de:	4b26      	ldr	r3, [pc, #152]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4e2:	4a2c      	ldr	r2, [pc, #176]	@ (800f594 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800f4e4:	4013      	ands	r3, r2
 800f4e6:	0019      	movs	r1, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	691a      	ldr	r2, [r3, #16]
 800f4ec:	4b22      	ldr	r3, [pc, #136]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4ee:	430a      	orrs	r2, r1
 800f4f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2208      	movs	r2, #8
 800f4f8:	4013      	ands	r3, r2
 800f4fa:	d009      	beq.n	800f510 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f4fc:	4b1e      	ldr	r3, [pc, #120]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f500:	4a25      	ldr	r2, [pc, #148]	@ (800f598 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800f502:	4013      	ands	r3, r2
 800f504:	0019      	movs	r1, r3
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	695a      	ldr	r2, [r3, #20]
 800f50a:	4b1b      	ldr	r3, [pc, #108]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f50c:	430a      	orrs	r2, r1
 800f50e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	2380      	movs	r3, #128	@ 0x80
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	4013      	ands	r3, r2
 800f51a:	d009      	beq.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f51c:	4b16      	ldr	r3, [pc, #88]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f51e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f520:	4a17      	ldr	r2, [pc, #92]	@ (800f580 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f522:	4013      	ands	r3, r2
 800f524:	0019      	movs	r1, r3
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	699a      	ldr	r2, [r3, #24]
 800f52a:	4b13      	ldr	r3, [pc, #76]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f52c:	430a      	orrs	r2, r1
 800f52e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2240      	movs	r2, #64	@ 0x40
 800f536:	4013      	ands	r3, r2
 800f538:	d009      	beq.n	800f54e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f53a:	4b0f      	ldr	r3, [pc, #60]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f53c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f53e:	4a17      	ldr	r2, [pc, #92]	@ (800f59c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800f540:	4013      	ands	r3, r2
 800f542:	0019      	movs	r1, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6a1a      	ldr	r2, [r3, #32]
 800f548:	4b0b      	ldr	r3, [pc, #44]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f54a:	430a      	orrs	r2, r1
 800f54c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2280      	movs	r2, #128	@ 0x80
 800f554:	4013      	ands	r3, r2
 800f556:	d009      	beq.n	800f56c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800f558:	4b07      	ldr	r3, [pc, #28]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f55a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f55c:	4a10      	ldr	r2, [pc, #64]	@ (800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800f55e:	4013      	ands	r3, r2
 800f560:	0019      	movs	r1, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	69da      	ldr	r2, [r3, #28]
 800f566:	4b04      	ldr	r3, [pc, #16]	@ (800f578 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f568:	430a      	orrs	r2, r1
 800f56a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f56c:	2300      	movs	r3, #0
}
 800f56e:	0018      	movs	r0, r3
 800f570:	46bd      	mov	sp, r7
 800f572:	b006      	add	sp, #24
 800f574:	bd80      	pop	{r7, pc}
 800f576:	46c0      	nop			@ (mov r8, r8)
 800f578:	40021000 	.word	0x40021000
 800f57c:	40007000 	.word	0x40007000
 800f580:	fffcffff 	.word	0xfffcffff
 800f584:	fff7ffff 	.word	0xfff7ffff
 800f588:	00001388 	.word	0x00001388
 800f58c:	ffcfffff 	.word	0xffcfffff
 800f590:	efffffff 	.word	0xefffffff
 800f594:	fffff3ff 	.word	0xfffff3ff
 800f598:	ffffcfff 	.word	0xffffcfff
 800f59c:	fbffffff 	.word	0xfbffffff
 800f5a0:	fff3ffff 	.word	0xfff3ffff

0800f5a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f5a4:	b5b0      	push	{r4, r5, r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f5ac:	230f      	movs	r3, #15
 800f5ae:	18fb      	adds	r3, r7, r3
 800f5b0:	2201      	movs	r2, #1
 800f5b2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d101      	bne.n	800f5be <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	e088      	b.n	800f6d0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2221      	movs	r2, #33	@ 0x21
 800f5c2:	5c9b      	ldrb	r3, [r3, r2]
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d107      	bne.n	800f5da <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2220      	movs	r2, #32
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	0018      	movs	r0, r3
 800f5d6:	f7f7 fa33 	bl	8006a40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2221      	movs	r2, #33	@ 0x21
 800f5de:	2102      	movs	r1, #2
 800f5e0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	2210      	movs	r2, #16
 800f5ea:	4013      	ands	r3, r2
 800f5ec:	2b10      	cmp	r3, #16
 800f5ee:	d05f      	beq.n	800f6b0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	22ca      	movs	r2, #202	@ 0xca
 800f5f6:	625a      	str	r2, [r3, #36]	@ 0x24
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2253      	movs	r2, #83	@ 0x53
 800f5fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800f600:	250f      	movs	r5, #15
 800f602:	197c      	adds	r4, r7, r5
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	0018      	movs	r0, r3
 800f608:	f000 f890 	bl	800f72c <RTC_EnterInitMode>
 800f60c:	0003      	movs	r3, r0
 800f60e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800f610:	0028      	movs	r0, r5
 800f612:	183b      	adds	r3, r7, r0
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d12c      	bne.n	800f674 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	689a      	ldr	r2, [r3, #8]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	492c      	ldr	r1, [pc, #176]	@ (800f6d8 <HAL_RTC_Init+0x134>)
 800f626:	400a      	ands	r2, r1
 800f628:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	6899      	ldr	r1, [r3, #8]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685a      	ldr	r2, [r3, #4]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	691b      	ldr	r3, [r3, #16]
 800f638:	431a      	orrs	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	699b      	ldr	r3, [r3, #24]
 800f63e:	431a      	orrs	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	430a      	orrs	r2, r1
 800f646:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	68d2      	ldr	r2, [r2, #12]
 800f650:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	6919      	ldr	r1, [r3, #16]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	689b      	ldr	r3, [r3, #8]
 800f65c:	041a      	lsls	r2, r3, #16
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	430a      	orrs	r2, r1
 800f664:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800f666:	183c      	adds	r4, r7, r0
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	0018      	movs	r0, r3
 800f66c:	f000 f8a2 	bl	800f7b4 <RTC_ExitInitMode>
 800f670:	0003      	movs	r3, r0
 800f672:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800f674:	230f      	movs	r3, #15
 800f676:	18fb      	adds	r3, r7, r3
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d113      	bne.n	800f6a6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2103      	movs	r1, #3
 800f68a:	438a      	bics	r2, r1
 800f68c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	69da      	ldr	r2, [r3, #28]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	695b      	ldr	r3, [r3, #20]
 800f69c:	431a      	orrs	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	430a      	orrs	r2, r1
 800f6a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	22ff      	movs	r2, #255	@ 0xff
 800f6ac:	625a      	str	r2, [r3, #36]	@ 0x24
 800f6ae:	e003      	b.n	800f6b8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800f6b0:	230f      	movs	r3, #15
 800f6b2:	18fb      	adds	r3, r7, r3
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800f6b8:	230f      	movs	r3, #15
 800f6ba:	18fb      	adds	r3, r7, r3
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d103      	bne.n	800f6ca <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2221      	movs	r2, #33	@ 0x21
 800f6c6:	2101      	movs	r1, #1
 800f6c8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800f6ca:	230f      	movs	r3, #15
 800f6cc:	18fb      	adds	r3, r7, r3
 800f6ce:	781b      	ldrb	r3, [r3, #0]
}
 800f6d0:	0018      	movs	r0, r3
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	b004      	add	sp, #16
 800f6d6:	bdb0      	pop	{r4, r5, r7, pc}
 800f6d8:	ff8fffbf 	.word	0xff8fffbf

0800f6dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b084      	sub	sp, #16
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a0e      	ldr	r2, [pc, #56]	@ (800f728 <HAL_RTC_WaitForSynchro+0x4c>)
 800f6ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f6f0:	f7f9 fdd8 	bl	80092a4 <HAL_GetTick>
 800f6f4:	0003      	movs	r3, r0
 800f6f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f6f8:	e00a      	b.n	800f710 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f6fa:	f7f9 fdd3 	bl	80092a4 <HAL_GetTick>
 800f6fe:	0002      	movs	r2, r0
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	1ad2      	subs	r2, r2, r3
 800f704:	23fa      	movs	r3, #250	@ 0xfa
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	429a      	cmp	r2, r3
 800f70a:	d901      	bls.n	800f710 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800f70c:	2303      	movs	r3, #3
 800f70e:	e006      	b.n	800f71e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	68db      	ldr	r3, [r3, #12]
 800f716:	2220      	movs	r2, #32
 800f718:	4013      	ands	r3, r2
 800f71a:	d0ee      	beq.n	800f6fa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	0018      	movs	r0, r3
 800f720:	46bd      	mov	sp, r7
 800f722:	b004      	add	sp, #16
 800f724:	bd80      	pop	{r7, pc}
 800f726:	46c0      	nop			@ (mov r8, r8)
 800f728:	0001ff5f 	.word	0x0001ff5f

0800f72c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f734:	2300      	movs	r3, #0
 800f736:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800f738:	230f      	movs	r3, #15
 800f73a:	18fb      	adds	r3, r7, r3
 800f73c:	2200      	movs	r2, #0
 800f73e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	2240      	movs	r2, #64	@ 0x40
 800f748:	4013      	ands	r3, r2
 800f74a:	d12c      	bne.n	800f7a6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68da      	ldr	r2, [r3, #12]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2180      	movs	r1, #128	@ 0x80
 800f758:	430a      	orrs	r2, r1
 800f75a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800f75c:	f7f9 fda2 	bl	80092a4 <HAL_GetTick>
 800f760:	0003      	movs	r3, r0
 800f762:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800f764:	e014      	b.n	800f790 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f766:	f7f9 fd9d 	bl	80092a4 <HAL_GetTick>
 800f76a:	0002      	movs	r2, r0
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	1ad2      	subs	r2, r2, r3
 800f770:	200f      	movs	r0, #15
 800f772:	183b      	adds	r3, r7, r0
 800f774:	1839      	adds	r1, r7, r0
 800f776:	7809      	ldrb	r1, [r1, #0]
 800f778:	7019      	strb	r1, [r3, #0]
 800f77a:	23fa      	movs	r3, #250	@ 0xfa
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	429a      	cmp	r2, r3
 800f780:	d906      	bls.n	800f790 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2221      	movs	r2, #33	@ 0x21
 800f786:	2104      	movs	r1, #4
 800f788:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800f78a:	183b      	adds	r3, r7, r0
 800f78c:	2201      	movs	r2, #1
 800f78e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	2240      	movs	r2, #64	@ 0x40
 800f798:	4013      	ands	r3, r2
 800f79a:	d104      	bne.n	800f7a6 <RTC_EnterInitMode+0x7a>
 800f79c:	230f      	movs	r3, #15
 800f79e:	18fb      	adds	r3, r7, r3
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d1df      	bne.n	800f766 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800f7a6:	230f      	movs	r3, #15
 800f7a8:	18fb      	adds	r3, r7, r3
 800f7aa:	781b      	ldrb	r3, [r3, #0]
}
 800f7ac:	0018      	movs	r0, r3
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	b004      	add	sp, #16
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b085      	sub	sp, #20
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7bc:	240f      	movs	r4, #15
 800f7be:	193b      	adds	r3, r7, r4
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68da      	ldr	r2, [r3, #12]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2180      	movs	r1, #128	@ 0x80
 800f7d0:	438a      	bics	r2, r1
 800f7d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	689b      	ldr	r3, [r3, #8]
 800f7da:	2220      	movs	r2, #32
 800f7dc:	4013      	ands	r3, r2
 800f7de:	d10c      	bne.n	800f7fa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	0018      	movs	r0, r3
 800f7e4:	f7ff ff7a 	bl	800f6dc <HAL_RTC_WaitForSynchro>
 800f7e8:	1e03      	subs	r3, r0, #0
 800f7ea:	d006      	beq.n	800f7fa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2221      	movs	r2, #33	@ 0x21
 800f7f0:	2104      	movs	r1, #4
 800f7f2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 800f7f4:	193b      	adds	r3, r7, r4
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800f7fa:	230f      	movs	r3, #15
 800f7fc:	18fb      	adds	r3, r7, r3
 800f7fe:	781b      	ldrb	r3, [r3, #0]
}
 800f800:	0018      	movs	r0, r3
 800f802:	46bd      	mov	sp, r7
 800f804:	b005      	add	sp, #20
 800f806:	bd90      	pop	{r4, r7, pc}

0800f808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d101      	bne.n	800f81a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f816:	2301      	movs	r3, #1
 800f818:	e032      	b.n	800f880 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2239      	movs	r2, #57	@ 0x39
 800f81e:	5c9b      	ldrb	r3, [r3, r2]
 800f820:	b2db      	uxtb	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	d107      	bne.n	800f836 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2238      	movs	r2, #56	@ 0x38
 800f82a:	2100      	movs	r1, #0
 800f82c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	0018      	movs	r0, r3
 800f832:	f7f8 fef1 	bl	8008618 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2239      	movs	r2, #57	@ 0x39
 800f83a:	2102      	movs	r1, #2
 800f83c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	3304      	adds	r3, #4
 800f846:	0019      	movs	r1, r3
 800f848:	0010      	movs	r0, r2
 800f84a:	f000 f975 	bl	800fb38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	223e      	movs	r2, #62	@ 0x3e
 800f852:	2101      	movs	r1, #1
 800f854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	223a      	movs	r2, #58	@ 0x3a
 800f85a:	2101      	movs	r1, #1
 800f85c:	5499      	strb	r1, [r3, r2]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	223b      	movs	r2, #59	@ 0x3b
 800f862:	2101      	movs	r1, #1
 800f864:	5499      	strb	r1, [r3, r2]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	223c      	movs	r2, #60	@ 0x3c
 800f86a:	2101      	movs	r1, #1
 800f86c:	5499      	strb	r1, [r3, r2]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	223d      	movs	r2, #61	@ 0x3d
 800f872:	2101      	movs	r1, #1
 800f874:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2239      	movs	r2, #57	@ 0x39
 800f87a:	2101      	movs	r1, #1
 800f87c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f87e:	2300      	movs	r3, #0
}
 800f880:	0018      	movs	r0, r3
 800f882:	46bd      	mov	sp, r7
 800f884:	b002      	add	sp, #8
 800f886:	bd80      	pop	{r7, pc}

0800f888 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d108      	bne.n	800f8aa <HAL_TIM_PWM_Start+0x22>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	223a      	movs	r2, #58	@ 0x3a
 800f89c:	5c9b      	ldrb	r3, [r3, r2]
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	1e5a      	subs	r2, r3, #1
 800f8a4:	4193      	sbcs	r3, r2
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	e01f      	b.n	800f8ea <HAL_TIM_PWM_Start+0x62>
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	2b04      	cmp	r3, #4
 800f8ae:	d108      	bne.n	800f8c2 <HAL_TIM_PWM_Start+0x3a>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	223b      	movs	r2, #59	@ 0x3b
 800f8b4:	5c9b      	ldrb	r3, [r3, r2]
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	1e5a      	subs	r2, r3, #1
 800f8bc:	4193      	sbcs	r3, r2
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	e013      	b.n	800f8ea <HAL_TIM_PWM_Start+0x62>
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	2b08      	cmp	r3, #8
 800f8c6:	d108      	bne.n	800f8da <HAL_TIM_PWM_Start+0x52>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	223c      	movs	r2, #60	@ 0x3c
 800f8cc:	5c9b      	ldrb	r3, [r3, r2]
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	1e5a      	subs	r2, r3, #1
 800f8d4:	4193      	sbcs	r3, r2
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	e007      	b.n	800f8ea <HAL_TIM_PWM_Start+0x62>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	223d      	movs	r2, #61	@ 0x3d
 800f8de:	5c9b      	ldrb	r3, [r3, r2]
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	1e5a      	subs	r2, r3, #1
 800f8e6:	4193      	sbcs	r3, r2
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d001      	beq.n	800f8f2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e052      	b.n	800f998 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d104      	bne.n	800f902 <HAL_TIM_PWM_Start+0x7a>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	223a      	movs	r2, #58	@ 0x3a
 800f8fc:	2102      	movs	r1, #2
 800f8fe:	5499      	strb	r1, [r3, r2]
 800f900:	e013      	b.n	800f92a <HAL_TIM_PWM_Start+0xa2>
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b04      	cmp	r3, #4
 800f906:	d104      	bne.n	800f912 <HAL_TIM_PWM_Start+0x8a>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	223b      	movs	r2, #59	@ 0x3b
 800f90c:	2102      	movs	r1, #2
 800f90e:	5499      	strb	r1, [r3, r2]
 800f910:	e00b      	b.n	800f92a <HAL_TIM_PWM_Start+0xa2>
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	2b08      	cmp	r3, #8
 800f916:	d104      	bne.n	800f922 <HAL_TIM_PWM_Start+0x9a>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	223c      	movs	r2, #60	@ 0x3c
 800f91c:	2102      	movs	r1, #2
 800f91e:	5499      	strb	r1, [r3, r2]
 800f920:	e003      	b.n	800f92a <HAL_TIM_PWM_Start+0xa2>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	223d      	movs	r2, #61	@ 0x3d
 800f926:	2102      	movs	r1, #2
 800f928:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	6839      	ldr	r1, [r7, #0]
 800f930:	2201      	movs	r2, #1
 800f932:	0018      	movs	r0, r3
 800f934:	f000 fa62 	bl	800fdfc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	2380      	movs	r3, #128	@ 0x80
 800f93e:	05db      	lsls	r3, r3, #23
 800f940:	429a      	cmp	r2, r3
 800f942:	d00e      	beq.n	800f962 <HAL_TIM_PWM_Start+0xda>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4a15      	ldr	r2, [pc, #84]	@ (800f9a0 <HAL_TIM_PWM_Start+0x118>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d009      	beq.n	800f962 <HAL_TIM_PWM_Start+0xda>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	4a14      	ldr	r2, [pc, #80]	@ (800f9a4 <HAL_TIM_PWM_Start+0x11c>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d004      	beq.n	800f962 <HAL_TIM_PWM_Start+0xda>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4a12      	ldr	r2, [pc, #72]	@ (800f9a8 <HAL_TIM_PWM_Start+0x120>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d111      	bne.n	800f986 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	2207      	movs	r2, #7
 800f96a:	4013      	ands	r3, r2
 800f96c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2b06      	cmp	r3, #6
 800f972:	d010      	beq.n	800f996 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2101      	movs	r1, #1
 800f980:	430a      	orrs	r2, r1
 800f982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f984:	e007      	b.n	800f996 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2101      	movs	r1, #1
 800f992:	430a      	orrs	r2, r1
 800f994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	0018      	movs	r0, r3
 800f99a:	46bd      	mov	sp, r7
 800f99c:	b004      	add	sp, #16
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	40000400 	.word	0x40000400
 800f9a4:	40010800 	.word	0x40010800
 800f9a8:	40011400 	.word	0x40011400

0800f9ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b086      	sub	sp, #24
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9b8:	2317      	movs	r3, #23
 800f9ba:	18fb      	adds	r3, r7, r3
 800f9bc:	2200      	movs	r2, #0
 800f9be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2238      	movs	r2, #56	@ 0x38
 800f9c4:	5c9b      	ldrb	r3, [r3, r2]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d101      	bne.n	800f9ce <HAL_TIM_PWM_ConfigChannel+0x22>
 800f9ca:	2302      	movs	r3, #2
 800f9cc:	e0ad      	b.n	800fb2a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2238      	movs	r2, #56	@ 0x38
 800f9d2:	2101      	movs	r1, #1
 800f9d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2b0c      	cmp	r3, #12
 800f9da:	d100      	bne.n	800f9de <HAL_TIM_PWM_ConfigChannel+0x32>
 800f9dc:	e076      	b.n	800facc <HAL_TIM_PWM_ConfigChannel+0x120>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2b0c      	cmp	r3, #12
 800f9e2:	d900      	bls.n	800f9e6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800f9e4:	e095      	b.n	800fb12 <HAL_TIM_PWM_ConfigChannel+0x166>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2b08      	cmp	r3, #8
 800f9ea:	d04e      	beq.n	800fa8a <HAL_TIM_PWM_ConfigChannel+0xde>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b08      	cmp	r3, #8
 800f9f0:	d900      	bls.n	800f9f4 <HAL_TIM_PWM_ConfigChannel+0x48>
 800f9f2:	e08e      	b.n	800fb12 <HAL_TIM_PWM_ConfigChannel+0x166>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d003      	beq.n	800fa02 <HAL_TIM_PWM_ConfigChannel+0x56>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b04      	cmp	r3, #4
 800f9fe:	d021      	beq.n	800fa44 <HAL_TIM_PWM_ConfigChannel+0x98>
 800fa00:	e087      	b.n	800fb12 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	68ba      	ldr	r2, [r7, #8]
 800fa08:	0011      	movs	r1, r2
 800fa0a:	0018      	movs	r0, r3
 800fa0c:	f000 f8f2 	bl	800fbf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	699a      	ldr	r2, [r3, #24]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2108      	movs	r1, #8
 800fa1c:	430a      	orrs	r2, r1
 800fa1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	699a      	ldr	r2, [r3, #24]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2104      	movs	r1, #4
 800fa2c:	438a      	bics	r2, r1
 800fa2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	6999      	ldr	r1, [r3, #24]
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	68da      	ldr	r2, [r3, #12]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	430a      	orrs	r2, r1
 800fa40:	619a      	str	r2, [r3, #24]
      break;
 800fa42:	e06b      	b.n	800fb1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	68ba      	ldr	r2, [r7, #8]
 800fa4a:	0011      	movs	r1, r2
 800fa4c:	0018      	movs	r0, r3
 800fa4e:	f000 f90d 	bl	800fc6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	699a      	ldr	r2, [r3, #24]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2180      	movs	r1, #128	@ 0x80
 800fa5e:	0109      	lsls	r1, r1, #4
 800fa60:	430a      	orrs	r2, r1
 800fa62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	699a      	ldr	r2, [r3, #24]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4931      	ldr	r1, [pc, #196]	@ (800fb34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800fa70:	400a      	ands	r2, r1
 800fa72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6999      	ldr	r1, [r3, #24]
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	021a      	lsls	r2, r3, #8
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	430a      	orrs	r2, r1
 800fa86:	619a      	str	r2, [r3, #24]
      break;
 800fa88:	e048      	b.n	800fb1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	0011      	movs	r1, r2
 800fa92:	0018      	movs	r0, r3
 800fa94:	f000 f92c 	bl	800fcf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	69da      	ldr	r2, [r3, #28]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2108      	movs	r1, #8
 800faa4:	430a      	orrs	r2, r1
 800faa6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	69da      	ldr	r2, [r3, #28]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2104      	movs	r1, #4
 800fab4:	438a      	bics	r2, r1
 800fab6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	69d9      	ldr	r1, [r3, #28]
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	68da      	ldr	r2, [r3, #12]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	430a      	orrs	r2, r1
 800fac8:	61da      	str	r2, [r3, #28]
      break;
 800faca:	e027      	b.n	800fb1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	68ba      	ldr	r2, [r7, #8]
 800fad2:	0011      	movs	r1, r2
 800fad4:	0018      	movs	r0, r3
 800fad6:	f000 f94b 	bl	800fd70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	69da      	ldr	r2, [r3, #28]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2180      	movs	r1, #128	@ 0x80
 800fae6:	0109      	lsls	r1, r1, #4
 800fae8:	430a      	orrs	r2, r1
 800faea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	69da      	ldr	r2, [r3, #28]
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	490f      	ldr	r1, [pc, #60]	@ (800fb34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800faf8:	400a      	ands	r2, r1
 800fafa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	69d9      	ldr	r1, [r3, #28]
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	021a      	lsls	r2, r3, #8
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	430a      	orrs	r2, r1
 800fb0e:	61da      	str	r2, [r3, #28]
      break;
 800fb10:	e004      	b.n	800fb1c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800fb12:	2317      	movs	r3, #23
 800fb14:	18fb      	adds	r3, r7, r3
 800fb16:	2201      	movs	r2, #1
 800fb18:	701a      	strb	r2, [r3, #0]
      break;
 800fb1a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	2238      	movs	r2, #56	@ 0x38
 800fb20:	2100      	movs	r1, #0
 800fb22:	5499      	strb	r1, [r3, r2]

  return status;
 800fb24:	2317      	movs	r3, #23
 800fb26:	18fb      	adds	r3, r7, r3
 800fb28:	781b      	ldrb	r3, [r3, #0]
}
 800fb2a:	0018      	movs	r0, r3
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	b006      	add	sp, #24
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	46c0      	nop			@ (mov r8, r8)
 800fb34:	fffffbff 	.word	0xfffffbff

0800fb38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	2380      	movs	r3, #128	@ 0x80
 800fb4c:	05db      	lsls	r3, r3, #23
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d00b      	beq.n	800fb6a <TIM_Base_SetConfig+0x32>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4a23      	ldr	r2, [pc, #140]	@ (800fbe4 <TIM_Base_SetConfig+0xac>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d007      	beq.n	800fb6a <TIM_Base_SetConfig+0x32>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4a22      	ldr	r2, [pc, #136]	@ (800fbe8 <TIM_Base_SetConfig+0xb0>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d003      	beq.n	800fb6a <TIM_Base_SetConfig+0x32>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a21      	ldr	r2, [pc, #132]	@ (800fbec <TIM_Base_SetConfig+0xb4>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d108      	bne.n	800fb7c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2270      	movs	r2, #112	@ 0x70
 800fb6e:	4393      	bics	r3, r2
 800fb70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	68fa      	ldr	r2, [r7, #12]
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	2380      	movs	r3, #128	@ 0x80
 800fb80:	05db      	lsls	r3, r3, #23
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d00b      	beq.n	800fb9e <TIM_Base_SetConfig+0x66>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	4a16      	ldr	r2, [pc, #88]	@ (800fbe4 <TIM_Base_SetConfig+0xac>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d007      	beq.n	800fb9e <TIM_Base_SetConfig+0x66>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4a15      	ldr	r2, [pc, #84]	@ (800fbe8 <TIM_Base_SetConfig+0xb0>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d003      	beq.n	800fb9e <TIM_Base_SetConfig+0x66>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4a14      	ldr	r2, [pc, #80]	@ (800fbec <TIM_Base_SetConfig+0xb4>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d108      	bne.n	800fbb0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	4a13      	ldr	r2, [pc, #76]	@ (800fbf0 <TIM_Base_SetConfig+0xb8>)
 800fba2:	4013      	ands	r3, r2
 800fba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	68fa      	ldr	r2, [r7, #12]
 800fbac:	4313      	orrs	r3, r2
 800fbae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2280      	movs	r2, #128	@ 0x80
 800fbb4:	4393      	bics	r3, r2
 800fbb6:	001a      	movs	r2, r3
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	691b      	ldr	r3, [r3, #16]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	689a      	ldr	r2, [r3, #8]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2201      	movs	r2, #1
 800fbda:	615a      	str	r2, [r3, #20]
}
 800fbdc:	46c0      	nop			@ (mov r8, r8)
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	b004      	add	sp, #16
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	40000400 	.word	0x40000400
 800fbe8:	40010800 	.word	0x40010800
 800fbec:	40011400 	.word	0x40011400
 800fbf0:	fffffcff 	.word	0xfffffcff

0800fbf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b086      	sub	sp, #24
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6a1b      	ldr	r3, [r3, #32]
 800fc02:	2201      	movs	r2, #1
 800fc04:	4393      	bics	r3, r2
 800fc06:	001a      	movs	r2, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6a1b      	ldr	r3, [r3, #32]
 800fc10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	699b      	ldr	r3, [r3, #24]
 800fc1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2270      	movs	r2, #112	@ 0x70
 800fc22:	4393      	bics	r3, r2
 800fc24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2203      	movs	r2, #3
 800fc2a:	4393      	bics	r3, r2
 800fc2c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	68fa      	ldr	r2, [r7, #12]
 800fc34:	4313      	orrs	r3, r2
 800fc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	2202      	movs	r2, #2
 800fc3c:	4393      	bics	r3, r2
 800fc3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	697a      	ldr	r2, [r7, #20]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	685a      	ldr	r2, [r3, #4]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	697a      	ldr	r2, [r7, #20]
 800fc62:	621a      	str	r2, [r3, #32]
}
 800fc64:	46c0      	nop			@ (mov r8, r8)
 800fc66:	46bd      	mov	sp, r7
 800fc68:	b006      	add	sp, #24
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b086      	sub	sp, #24
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6a1b      	ldr	r3, [r3, #32]
 800fc7a:	2210      	movs	r2, #16
 800fc7c:	4393      	bics	r3, r2
 800fc7e:	001a      	movs	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6a1b      	ldr	r3, [r3, #32]
 800fc88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	699b      	ldr	r3, [r3, #24]
 800fc94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	4a13      	ldr	r2, [pc, #76]	@ (800fce8 <TIM_OC2_SetConfig+0x7c>)
 800fc9a:	4013      	ands	r3, r2
 800fc9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	4a12      	ldr	r2, [pc, #72]	@ (800fcec <TIM_OC2_SetConfig+0x80>)
 800fca2:	4013      	ands	r3, r2
 800fca4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	021b      	lsls	r3, r3, #8
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	2220      	movs	r2, #32
 800fcb6:	4393      	bics	r3, r2
 800fcb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	011b      	lsls	r3, r3, #4
 800fcc0:	697a      	ldr	r2, [r7, #20]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	693a      	ldr	r2, [r7, #16]
 800fcca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	697a      	ldr	r2, [r7, #20]
 800fcde:	621a      	str	r2, [r3, #32]
}
 800fce0:	46c0      	nop			@ (mov r8, r8)
 800fce2:	46bd      	mov	sp, r7
 800fce4:	b006      	add	sp, #24
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	ffff8fff 	.word	0xffff8fff
 800fcec:	fffffcff 	.word	0xfffffcff

0800fcf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b086      	sub	sp, #24
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	4a1a      	ldr	r2, [pc, #104]	@ (800fd68 <TIM_OC3_SetConfig+0x78>)
 800fd00:	401a      	ands	r2, r3
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a1b      	ldr	r3, [r3, #32]
 800fd0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	69db      	ldr	r3, [r3, #28]
 800fd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2270      	movs	r2, #112	@ 0x70
 800fd1c:	4393      	bics	r3, r2
 800fd1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2203      	movs	r2, #3
 800fd24:	4393      	bics	r3, r2
 800fd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	4a0d      	ldr	r2, [pc, #52]	@ (800fd6c <TIM_OC3_SetConfig+0x7c>)
 800fd36:	4013      	ands	r3, r2
 800fd38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	021b      	lsls	r3, r3, #8
 800fd40:	697a      	ldr	r2, [r7, #20]
 800fd42:	4313      	orrs	r3, r2
 800fd44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	693a      	ldr	r2, [r7, #16]
 800fd4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	68fa      	ldr	r2, [r7, #12]
 800fd50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	685a      	ldr	r2, [r3, #4]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	697a      	ldr	r2, [r7, #20]
 800fd5e:	621a      	str	r2, [r3, #32]
}
 800fd60:	46c0      	nop			@ (mov r8, r8)
 800fd62:	46bd      	mov	sp, r7
 800fd64:	b006      	add	sp, #24
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	fffffeff 	.word	0xfffffeff
 800fd6c:	fffffdff 	.word	0xfffffdff

0800fd70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6a1b      	ldr	r3, [r3, #32]
 800fd7e:	4a1b      	ldr	r2, [pc, #108]	@ (800fdec <TIM_OC4_SetConfig+0x7c>)
 800fd80:	401a      	ands	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6a1b      	ldr	r3, [r3, #32]
 800fd8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	69db      	ldr	r3, [r3, #28]
 800fd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	4a15      	ldr	r2, [pc, #84]	@ (800fdf0 <TIM_OC4_SetConfig+0x80>)
 800fd9c:	4013      	ands	r3, r2
 800fd9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	4a14      	ldr	r2, [pc, #80]	@ (800fdf4 <TIM_OC4_SetConfig+0x84>)
 800fda4:	4013      	ands	r3, r2
 800fda6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	021b      	lsls	r3, r3, #8
 800fdae:	68fa      	ldr	r2, [r7, #12]
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	4a10      	ldr	r2, [pc, #64]	@ (800fdf8 <TIM_OC4_SetConfig+0x88>)
 800fdb8:	4013      	ands	r3, r2
 800fdba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	031b      	lsls	r3, r3, #12
 800fdc2:	697a      	ldr	r2, [r7, #20]
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	693a      	ldr	r2, [r7, #16]
 800fdcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	685a      	ldr	r2, [r3, #4]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	697a      	ldr	r2, [r7, #20]
 800fde0:	621a      	str	r2, [r3, #32]
}
 800fde2:	46c0      	nop			@ (mov r8, r8)
 800fde4:	46bd      	mov	sp, r7
 800fde6:	b006      	add	sp, #24
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	46c0      	nop			@ (mov r8, r8)
 800fdec:	ffffefff 	.word	0xffffefff
 800fdf0:	ffff8fff 	.word	0xffff8fff
 800fdf4:	fffffcff 	.word	0xfffffcff
 800fdf8:	ffffdfff 	.word	0xffffdfff

0800fdfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b086      	sub	sp, #24
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	221f      	movs	r2, #31
 800fe0c:	4013      	ands	r3, r2
 800fe0e:	2201      	movs	r2, #1
 800fe10:	409a      	lsls	r2, r3
 800fe12:	0013      	movs	r3, r2
 800fe14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6a1b      	ldr	r3, [r3, #32]
 800fe1a:	697a      	ldr	r2, [r7, #20]
 800fe1c:	43d2      	mvns	r2, r2
 800fe1e:	401a      	ands	r2, r3
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6a1a      	ldr	r2, [r3, #32]
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	211f      	movs	r1, #31
 800fe2c:	400b      	ands	r3, r1
 800fe2e:	6879      	ldr	r1, [r7, #4]
 800fe30:	4099      	lsls	r1, r3
 800fe32:	000b      	movs	r3, r1
 800fe34:	431a      	orrs	r2, r3
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	621a      	str	r2, [r3, #32]
}
 800fe3a:	46c0      	nop			@ (mov r8, r8)
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	b006      	add	sp, #24
 800fe40:	bd80      	pop	{r7, pc}
	...

0800fe44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b084      	sub	sp, #16
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2238      	movs	r2, #56	@ 0x38
 800fe52:	5c9b      	ldrb	r3, [r3, r2]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d101      	bne.n	800fe5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe58:	2302      	movs	r3, #2
 800fe5a:	e047      	b.n	800feec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2238      	movs	r2, #56	@ 0x38
 800fe60:	2101      	movs	r1, #1
 800fe62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2239      	movs	r2, #57	@ 0x39
 800fe68:	2102      	movs	r1, #2
 800fe6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	689b      	ldr	r3, [r3, #8]
 800fe7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2270      	movs	r2, #112	@ 0x70
 800fe80:	4393      	bics	r3, r2
 800fe82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	68fa      	ldr	r2, [r7, #12]
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	68fa      	ldr	r2, [r7, #12]
 800fe94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	2380      	movs	r3, #128	@ 0x80
 800fe9c:	05db      	lsls	r3, r3, #23
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d00e      	beq.n	800fec0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4a13      	ldr	r2, [pc, #76]	@ (800fef4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d009      	beq.n	800fec0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a11      	ldr	r2, [pc, #68]	@ (800fef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d004      	beq.n	800fec0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a10      	ldr	r2, [pc, #64]	@ (800fefc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d10c      	bne.n	800feda <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	2280      	movs	r2, #128	@ 0x80
 800fec4:	4393      	bics	r3, r2
 800fec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	685b      	ldr	r3, [r3, #4]
 800fecc:	68ba      	ldr	r2, [r7, #8]
 800fece:	4313      	orrs	r3, r2
 800fed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	68ba      	ldr	r2, [r7, #8]
 800fed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2239      	movs	r2, #57	@ 0x39
 800fede:	2101      	movs	r1, #1
 800fee0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2238      	movs	r2, #56	@ 0x38
 800fee6:	2100      	movs	r1, #0
 800fee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800feea:	2300      	movs	r3, #0
}
 800feec:	0018      	movs	r0, r3
 800feee:	46bd      	mov	sp, r7
 800fef0:	b004      	add	sp, #16
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	40000400 	.word	0x40000400
 800fef8:	40010800 	.word	0x40010800
 800fefc:	40011400 	.word	0x40011400

0800ff00 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2238      	movs	r2, #56	@ 0x38
 800ff0e:	5c9b      	ldrb	r3, [r3, r2]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d101      	bne.n	800ff18 <HAL_TIMEx_RemapConfig+0x18>
 800ff14:	2302      	movs	r3, #2
 800ff16:	e00c      	b.n	800ff32 <HAL_TIMEx_RemapConfig+0x32>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2238      	movs	r2, #56	@ 0x38
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	683a      	ldr	r2, [r7, #0]
 800ff26:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2238      	movs	r2, #56	@ 0x38
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ff30:	2300      	movs	r3, #0
}
 800ff32:	0018      	movs	r0, r3
 800ff34:	46bd      	mov	sp, r7
 800ff36:	b002      	add	sp, #8
 800ff38:	bd80      	pop	{r7, pc}
	...

0800ff3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d101      	bne.n	800ff4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	e053      	b.n	800fff6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d116      	bne.n	800ff84 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2278      	movs	r2, #120	@ 0x78
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	0018      	movs	r0, r3
 800ff62:	f000 fd07 	bl	8010974 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	22b0      	movs	r2, #176	@ 0xb0
 800ff6a:	589b      	ldr	r3, [r3, r2]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d103      	bne.n	800ff78 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	21b0      	movs	r1, #176	@ 0xb0
 800ff74:	4a22      	ldr	r2, [pc, #136]	@ (8010000 <HAL_UART_Init+0xc4>)
 800ff76:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	22b0      	movs	r2, #176	@ 0xb0
 800ff7c:	589b      	ldr	r3, [r3, r2]
 800ff7e:	687a      	ldr	r2, [r7, #4]
 800ff80:	0010      	movs	r0, r2
 800ff82:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2224      	movs	r2, #36	@ 0x24
 800ff88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2101      	movs	r1, #1
 800ff96:	438a      	bics	r2, r1
 800ff98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	0018      	movs	r0, r3
 800ff9e:	f000 fd2d 	bl	80109fc <UART_SetConfig>
 800ffa2:	0003      	movs	r3, r0
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d101      	bne.n	800ffac <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	e024      	b.n	800fff6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d003      	beq.n	800ffbc <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	0018      	movs	r0, r3
 800ffb8:	f000 ffbe 	bl	8010f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	685a      	ldr	r2, [r3, #4]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	490f      	ldr	r1, [pc, #60]	@ (8010004 <HAL_UART_Init+0xc8>)
 800ffc8:	400a      	ands	r2, r1
 800ffca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	689a      	ldr	r2, [r3, #8]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	212a      	movs	r1, #42	@ 0x2a
 800ffd8:	438a      	bics	r2, r1
 800ffda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	2101      	movs	r1, #1
 800ffe8:	430a      	orrs	r2, r1
 800ffea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	0018      	movs	r0, r3
 800fff0:	f001 f856 	bl	80110a0 <UART_CheckIdleState>
 800fff4:	0003      	movs	r3, r0
}
 800fff6:	0018      	movs	r0, r3
 800fff8:	46bd      	mov	sp, r7
 800fffa:	b002      	add	sp, #8
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	46c0      	nop			@ (mov r8, r8)
 8010000:	080087f9 	.word	0x080087f9
 8010004:	ffffb7ff 	.word	0xffffb7ff

08010008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b08a      	sub	sp, #40	@ 0x28
 801000c:	af02      	add	r7, sp, #8
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	603b      	str	r3, [r7, #0]
 8010014:	1dbb      	adds	r3, r7, #6
 8010016:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801001c:	2b20      	cmp	r3, #32
 801001e:	d000      	beq.n	8010022 <HAL_UART_Transmit+0x1a>
 8010020:	e08c      	b.n	801013c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d003      	beq.n	8010030 <HAL_UART_Transmit+0x28>
 8010028:	1dbb      	adds	r3, r7, #6
 801002a:	881b      	ldrh	r3, [r3, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d101      	bne.n	8010034 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8010030:	2301      	movs	r3, #1
 8010032:	e084      	b.n	801013e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	689a      	ldr	r2, [r3, #8]
 8010038:	2380      	movs	r3, #128	@ 0x80
 801003a:	015b      	lsls	r3, r3, #5
 801003c:	429a      	cmp	r2, r3
 801003e:	d109      	bne.n	8010054 <HAL_UART_Transmit+0x4c>
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	691b      	ldr	r3, [r3, #16]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d105      	bne.n	8010054 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	2201      	movs	r2, #1
 801004c:	4013      	ands	r3, r2
 801004e:	d001      	beq.n	8010054 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8010050:	2301      	movs	r3, #1
 8010052:	e074      	b.n	801013e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2284      	movs	r2, #132	@ 0x84
 8010058:	2100      	movs	r1, #0
 801005a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2221      	movs	r2, #33	@ 0x21
 8010060:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010062:	f7f9 f91f 	bl	80092a4 <HAL_GetTick>
 8010066:	0003      	movs	r3, r0
 8010068:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	1dba      	adds	r2, r7, #6
 801006e:	2150      	movs	r1, #80	@ 0x50
 8010070:	8812      	ldrh	r2, [r2, #0]
 8010072:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	1dba      	adds	r2, r7, #6
 8010078:	2152      	movs	r1, #82	@ 0x52
 801007a:	8812      	ldrh	r2, [r2, #0]
 801007c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	689a      	ldr	r2, [r3, #8]
 8010082:	2380      	movs	r3, #128	@ 0x80
 8010084:	015b      	lsls	r3, r3, #5
 8010086:	429a      	cmp	r2, r3
 8010088:	d108      	bne.n	801009c <HAL_UART_Transmit+0x94>
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d104      	bne.n	801009c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8010092:	2300      	movs	r3, #0
 8010094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	61bb      	str	r3, [r7, #24]
 801009a:	e003      	b.n	80100a4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80100a0:	2300      	movs	r3, #0
 80100a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80100a4:	e02f      	b.n	8010106 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80100a6:	697a      	ldr	r2, [r7, #20]
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	9300      	str	r3, [sp, #0]
 80100ae:	0013      	movs	r3, r2
 80100b0:	2200      	movs	r2, #0
 80100b2:	2180      	movs	r1, #128	@ 0x80
 80100b4:	f001 f89c 	bl	80111f0 <UART_WaitOnFlagUntilTimeout>
 80100b8:	1e03      	subs	r3, r0, #0
 80100ba:	d004      	beq.n	80100c6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2220      	movs	r2, #32
 80100c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80100c2:	2303      	movs	r3, #3
 80100c4:	e03b      	b.n	801013e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d10b      	bne.n	80100e4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	881b      	ldrh	r3, [r3, #0]
 80100d0:	001a      	movs	r2, r3
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	05d2      	lsls	r2, r2, #23
 80100d8:	0dd2      	lsrs	r2, r2, #23
 80100da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	3302      	adds	r3, #2
 80100e0:	61bb      	str	r3, [r7, #24]
 80100e2:	e007      	b.n	80100f4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	781a      	ldrb	r2, [r3, #0]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80100ee:	69fb      	ldr	r3, [r7, #28]
 80100f0:	3301      	adds	r3, #1
 80100f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2252      	movs	r2, #82	@ 0x52
 80100f8:	5a9b      	ldrh	r3, [r3, r2]
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	3b01      	subs	r3, #1
 80100fe:	b299      	uxth	r1, r3
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2252      	movs	r2, #82	@ 0x52
 8010104:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2252      	movs	r2, #82	@ 0x52
 801010a:	5a9b      	ldrh	r3, [r3, r2]
 801010c:	b29b      	uxth	r3, r3
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1c9      	bne.n	80100a6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010112:	697a      	ldr	r2, [r7, #20]
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	0013      	movs	r3, r2
 801011c:	2200      	movs	r2, #0
 801011e:	2140      	movs	r1, #64	@ 0x40
 8010120:	f001 f866 	bl	80111f0 <UART_WaitOnFlagUntilTimeout>
 8010124:	1e03      	subs	r3, r0, #0
 8010126:	d004      	beq.n	8010132 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2220      	movs	r2, #32
 801012c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801012e:	2303      	movs	r3, #3
 8010130:	e005      	b.n	801013e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2220      	movs	r2, #32
 8010136:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8010138:	2300      	movs	r3, #0
 801013a:	e000      	b.n	801013e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801013c:	2302      	movs	r3, #2
  }
}
 801013e:	0018      	movs	r0, r3
 8010140:	46bd      	mov	sp, r7
 8010142:	b008      	add	sp, #32
 8010144:	bd80      	pop	{r7, pc}
	...

08010148 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b088      	sub	sp, #32
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	1dbb      	adds	r3, r7, #6
 8010154:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801015a:	2b20      	cmp	r3, #32
 801015c:	d000      	beq.n	8010160 <HAL_UART_Transmit_DMA+0x18>
 801015e:	e077      	b.n	8010250 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d003      	beq.n	801016e <HAL_UART_Transmit_DMA+0x26>
 8010166:	1dbb      	adds	r3, r7, #6
 8010168:	881b      	ldrh	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d101      	bne.n	8010172 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801016e:	2301      	movs	r3, #1
 8010170:	e06f      	b.n	8010252 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	689a      	ldr	r2, [r3, #8]
 8010176:	2380      	movs	r3, #128	@ 0x80
 8010178:	015b      	lsls	r3, r3, #5
 801017a:	429a      	cmp	r2, r3
 801017c:	d109      	bne.n	8010192 <HAL_UART_Transmit_DMA+0x4a>
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	691b      	ldr	r3, [r3, #16]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d105      	bne.n	8010192 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	2201      	movs	r2, #1
 801018a:	4013      	ands	r3, r2
 801018c:	d001      	beq.n	8010192 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801018e:	2301      	movs	r3, #1
 8010190:	e05f      	b.n	8010252 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	68ba      	ldr	r2, [r7, #8]
 8010196:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	1dba      	adds	r2, r7, #6
 801019c:	2150      	movs	r1, #80	@ 0x50
 801019e:	8812      	ldrh	r2, [r2, #0]
 80101a0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	1dba      	adds	r2, r7, #6
 80101a6:	2152      	movs	r1, #82	@ 0x52
 80101a8:	8812      	ldrh	r2, [r2, #0]
 80101aa:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2284      	movs	r2, #132	@ 0x84
 80101b0:	2100      	movs	r1, #0
 80101b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2221      	movs	r2, #33	@ 0x21
 80101b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d027      	beq.n	8010212 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101c6:	4a25      	ldr	r2, [pc, #148]	@ (801025c <HAL_UART_Transmit_DMA+0x114>)
 80101c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101ce:	4a24      	ldr	r2, [pc, #144]	@ (8010260 <HAL_UART_Transmit_DMA+0x118>)
 80101d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101d6:	4a23      	ldr	r2, [pc, #140]	@ (8010264 <HAL_UART_Transmit_DMA+0x11c>)
 80101d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101de:	2200      	movs	r2, #0
 80101e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101ea:	0019      	movs	r1, r3
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	3328      	adds	r3, #40	@ 0x28
 80101f2:	001a      	movs	r2, r3
 80101f4:	1dbb      	adds	r3, r7, #6
 80101f6:	881b      	ldrh	r3, [r3, #0]
 80101f8:	f7f9 fc6e 	bl	8009ad8 <HAL_DMA_Start_IT>
 80101fc:	1e03      	subs	r3, r0, #0
 80101fe:	d008      	beq.n	8010212 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2284      	movs	r2, #132	@ 0x84
 8010204:	2110      	movs	r1, #16
 8010206:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2220      	movs	r2, #32
 801020c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801020e:	2301      	movs	r3, #1
 8010210:	e01f      	b.n	8010252 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2240      	movs	r2, #64	@ 0x40
 8010218:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801021a:	f3ef 8310 	mrs	r3, PRIMASK
 801021e:	613b      	str	r3, [r7, #16]
  return(result);
 8010220:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010222:	61fb      	str	r3, [r7, #28]
 8010224:	2301      	movs	r3, #1
 8010226:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	f383 8810 	msr	PRIMASK, r3
}
 801022e:	46c0      	nop			@ (mov r8, r8)
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	689a      	ldr	r2, [r3, #8]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2180      	movs	r1, #128	@ 0x80
 801023c:	430a      	orrs	r2, r1
 801023e:	609a      	str	r2, [r3, #8]
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	f383 8810 	msr	PRIMASK, r3
}
 801024a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801024c:	2300      	movs	r3, #0
 801024e:	e000      	b.n	8010252 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8010250:	2302      	movs	r3, #2
  }
}
 8010252:	0018      	movs	r0, r3
 8010254:	46bd      	mov	sp, r7
 8010256:	b008      	add	sp, #32
 8010258:	bd80      	pop	{r7, pc}
 801025a:	46c0      	nop			@ (mov r8, r8)
 801025c:	08011515 	.word	0x08011515
 8010260:	080115b1 	.word	0x080115b1
 8010264:	08011751 	.word	0x08011751

08010268 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b088      	sub	sp, #32
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	1dbb      	adds	r3, r7, #6
 8010274:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2280      	movs	r2, #128	@ 0x80
 801027a:	589b      	ldr	r3, [r3, r2]
 801027c:	2b20      	cmp	r3, #32
 801027e:	d14a      	bne.n	8010316 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d003      	beq.n	801028e <HAL_UART_Receive_DMA+0x26>
 8010286:	1dbb      	adds	r3, r7, #6
 8010288:	881b      	ldrh	r3, [r3, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d101      	bne.n	8010292 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801028e:	2301      	movs	r3, #1
 8010290:	e042      	b.n	8010318 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	689a      	ldr	r2, [r3, #8]
 8010296:	2380      	movs	r3, #128	@ 0x80
 8010298:	015b      	lsls	r3, r3, #5
 801029a:	429a      	cmp	r2, r3
 801029c:	d109      	bne.n	80102b2 <HAL_UART_Receive_DMA+0x4a>
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	691b      	ldr	r3, [r3, #16]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d105      	bne.n	80102b2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	2201      	movs	r2, #1
 80102aa:	4013      	ands	r3, r2
 80102ac:	d001      	beq.n	80102b2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80102ae:	2301      	movs	r3, #1
 80102b0:	e032      	b.n	8010318 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2200      	movs	r2, #0
 80102b6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	4a18      	ldr	r2, [pc, #96]	@ (8010320 <HAL_UART_Receive_DMA+0xb8>)
 80102be:	4293      	cmp	r3, r2
 80102c0:	d020      	beq.n	8010304 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	2380      	movs	r3, #128	@ 0x80
 80102ca:	041b      	lsls	r3, r3, #16
 80102cc:	4013      	ands	r3, r2
 80102ce:	d019      	beq.n	8010304 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102d0:	f3ef 8310 	mrs	r3, PRIMASK
 80102d4:	613b      	str	r3, [r7, #16]
  return(result);
 80102d6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102d8:	61fb      	str	r3, [r7, #28]
 80102da:	2301      	movs	r3, #1
 80102dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	f383 8810 	msr	PRIMASK, r3
}
 80102e4:	46c0      	nop			@ (mov r8, r8)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2180      	movs	r1, #128	@ 0x80
 80102f2:	04c9      	lsls	r1, r1, #19
 80102f4:	430a      	orrs	r2, r1
 80102f6:	601a      	str	r2, [r3, #0]
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	f383 8810 	msr	PRIMASK, r3
}
 8010302:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010304:	1dbb      	adds	r3, r7, #6
 8010306:	881a      	ldrh	r2, [r3, #0]
 8010308:	68b9      	ldr	r1, [r7, #8]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	0018      	movs	r0, r3
 801030e:	f000 ffd9 	bl	80112c4 <UART_Start_Receive_DMA>
 8010312:	0003      	movs	r3, r0
 8010314:	e000      	b.n	8010318 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010316:	2302      	movs	r3, #2
  }
}
 8010318:	0018      	movs	r0, r3
 801031a:	46bd      	mov	sp, r7
 801031c:	b008      	add	sp, #32
 801031e:	bd80      	pop	{r7, pc}
 8010320:	40004800 	.word	0x40004800

08010324 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010324:	b590      	push	{r4, r7, lr}
 8010326:	b0ab      	sub	sp, #172	@ 0xac
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	69db      	ldr	r3, [r3, #28]
 8010332:	22a4      	movs	r2, #164	@ 0xa4
 8010334:	18b9      	adds	r1, r7, r2
 8010336:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	20a0      	movs	r0, #160	@ 0xa0
 8010340:	1839      	adds	r1, r7, r0
 8010342:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	689b      	ldr	r3, [r3, #8]
 801034a:	219c      	movs	r1, #156	@ 0x9c
 801034c:	1879      	adds	r1, r7, r1
 801034e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010350:	0011      	movs	r1, r2
 8010352:	18bb      	adds	r3, r7, r2
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4a9c      	ldr	r2, [pc, #624]	@ (80105c8 <HAL_UART_IRQHandler+0x2a4>)
 8010358:	4013      	ands	r3, r2
 801035a:	2298      	movs	r2, #152	@ 0x98
 801035c:	18bc      	adds	r4, r7, r2
 801035e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8010360:	18bb      	adds	r3, r7, r2
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d114      	bne.n	8010392 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010368:	187b      	adds	r3, r7, r1
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2220      	movs	r2, #32
 801036e:	4013      	ands	r3, r2
 8010370:	d00f      	beq.n	8010392 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010372:	183b      	adds	r3, r7, r0
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	2220      	movs	r2, #32
 8010378:	4013      	ands	r3, r2
 801037a:	d00a      	beq.n	8010392 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010380:	2b00      	cmp	r3, #0
 8010382:	d100      	bne.n	8010386 <HAL_UART_IRQHandler+0x62>
 8010384:	e2aa      	b.n	80108dc <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	0010      	movs	r0, r2
 801038e:	4798      	blx	r3
      }
      return;
 8010390:	e2a4      	b.n	80108dc <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010392:	2398      	movs	r3, #152	@ 0x98
 8010394:	18fb      	adds	r3, r7, r3
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d100      	bne.n	801039e <HAL_UART_IRQHandler+0x7a>
 801039c:	e11a      	b.n	80105d4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801039e:	239c      	movs	r3, #156	@ 0x9c
 80103a0:	18fb      	adds	r3, r7, r3
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	2201      	movs	r2, #1
 80103a6:	4013      	ands	r3, r2
 80103a8:	d106      	bne.n	80103b8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80103aa:	23a0      	movs	r3, #160	@ 0xa0
 80103ac:	18fb      	adds	r3, r7, r3
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a86      	ldr	r2, [pc, #536]	@ (80105cc <HAL_UART_IRQHandler+0x2a8>)
 80103b2:	4013      	ands	r3, r2
 80103b4:	d100      	bne.n	80103b8 <HAL_UART_IRQHandler+0x94>
 80103b6:	e10d      	b.n	80105d4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80103b8:	23a4      	movs	r3, #164	@ 0xa4
 80103ba:	18fb      	adds	r3, r7, r3
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2201      	movs	r2, #1
 80103c0:	4013      	ands	r3, r2
 80103c2:	d012      	beq.n	80103ea <HAL_UART_IRQHandler+0xc6>
 80103c4:	23a0      	movs	r3, #160	@ 0xa0
 80103c6:	18fb      	adds	r3, r7, r3
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	2380      	movs	r3, #128	@ 0x80
 80103cc:	005b      	lsls	r3, r3, #1
 80103ce:	4013      	ands	r3, r2
 80103d0:	d00b      	beq.n	80103ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2201      	movs	r2, #1
 80103d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2284      	movs	r2, #132	@ 0x84
 80103de:	589b      	ldr	r3, [r3, r2]
 80103e0:	2201      	movs	r2, #1
 80103e2:	431a      	orrs	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2184      	movs	r1, #132	@ 0x84
 80103e8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80103ea:	23a4      	movs	r3, #164	@ 0xa4
 80103ec:	18fb      	adds	r3, r7, r3
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	2202      	movs	r2, #2
 80103f2:	4013      	ands	r3, r2
 80103f4:	d011      	beq.n	801041a <HAL_UART_IRQHandler+0xf6>
 80103f6:	239c      	movs	r3, #156	@ 0x9c
 80103f8:	18fb      	adds	r3, r7, r3
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	2201      	movs	r2, #1
 80103fe:	4013      	ands	r3, r2
 8010400:	d00b      	beq.n	801041a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2202      	movs	r2, #2
 8010408:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2284      	movs	r2, #132	@ 0x84
 801040e:	589b      	ldr	r3, [r3, r2]
 8010410:	2204      	movs	r2, #4
 8010412:	431a      	orrs	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2184      	movs	r1, #132	@ 0x84
 8010418:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801041a:	23a4      	movs	r3, #164	@ 0xa4
 801041c:	18fb      	adds	r3, r7, r3
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2204      	movs	r2, #4
 8010422:	4013      	ands	r3, r2
 8010424:	d011      	beq.n	801044a <HAL_UART_IRQHandler+0x126>
 8010426:	239c      	movs	r3, #156	@ 0x9c
 8010428:	18fb      	adds	r3, r7, r3
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2201      	movs	r2, #1
 801042e:	4013      	ands	r3, r2
 8010430:	d00b      	beq.n	801044a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2204      	movs	r2, #4
 8010438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2284      	movs	r2, #132	@ 0x84
 801043e:	589b      	ldr	r3, [r3, r2]
 8010440:	2202      	movs	r2, #2
 8010442:	431a      	orrs	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2184      	movs	r1, #132	@ 0x84
 8010448:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801044a:	23a4      	movs	r3, #164	@ 0xa4
 801044c:	18fb      	adds	r3, r7, r3
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2208      	movs	r2, #8
 8010452:	4013      	ands	r3, r2
 8010454:	d017      	beq.n	8010486 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010456:	23a0      	movs	r3, #160	@ 0xa0
 8010458:	18fb      	adds	r3, r7, r3
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	2220      	movs	r2, #32
 801045e:	4013      	ands	r3, r2
 8010460:	d105      	bne.n	801046e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010462:	239c      	movs	r3, #156	@ 0x9c
 8010464:	18fb      	adds	r3, r7, r3
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2201      	movs	r2, #1
 801046a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801046c:	d00b      	beq.n	8010486 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2208      	movs	r2, #8
 8010474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2284      	movs	r2, #132	@ 0x84
 801047a:	589b      	ldr	r3, [r3, r2]
 801047c:	2208      	movs	r2, #8
 801047e:	431a      	orrs	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2184      	movs	r1, #132	@ 0x84
 8010484:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010486:	23a4      	movs	r3, #164	@ 0xa4
 8010488:	18fb      	adds	r3, r7, r3
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	2380      	movs	r3, #128	@ 0x80
 801048e:	011b      	lsls	r3, r3, #4
 8010490:	4013      	ands	r3, r2
 8010492:	d013      	beq.n	80104bc <HAL_UART_IRQHandler+0x198>
 8010494:	23a0      	movs	r3, #160	@ 0xa0
 8010496:	18fb      	adds	r3, r7, r3
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	2380      	movs	r3, #128	@ 0x80
 801049c:	04db      	lsls	r3, r3, #19
 801049e:	4013      	ands	r3, r2
 80104a0:	d00c      	beq.n	80104bc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2280      	movs	r2, #128	@ 0x80
 80104a8:	0112      	lsls	r2, r2, #4
 80104aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2284      	movs	r2, #132	@ 0x84
 80104b0:	589b      	ldr	r3, [r3, r2]
 80104b2:	2220      	movs	r2, #32
 80104b4:	431a      	orrs	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2184      	movs	r1, #132	@ 0x84
 80104ba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2284      	movs	r2, #132	@ 0x84
 80104c0:	589b      	ldr	r3, [r3, r2]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d100      	bne.n	80104c8 <HAL_UART_IRQHandler+0x1a4>
 80104c6:	e20b      	b.n	80108e0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80104c8:	23a4      	movs	r3, #164	@ 0xa4
 80104ca:	18fb      	adds	r3, r7, r3
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	2220      	movs	r2, #32
 80104d0:	4013      	ands	r3, r2
 80104d2:	d00e      	beq.n	80104f2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80104d4:	23a0      	movs	r3, #160	@ 0xa0
 80104d6:	18fb      	adds	r3, r7, r3
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2220      	movs	r2, #32
 80104dc:	4013      	ands	r3, r2
 80104de:	d008      	beq.n	80104f2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d004      	beq.n	80104f2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	0010      	movs	r0, r2
 80104f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2284      	movs	r2, #132	@ 0x84
 80104f6:	589b      	ldr	r3, [r3, r2]
 80104f8:	2194      	movs	r1, #148	@ 0x94
 80104fa:	187a      	adds	r2, r7, r1
 80104fc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	2240      	movs	r2, #64	@ 0x40
 8010506:	4013      	ands	r3, r2
 8010508:	2b40      	cmp	r3, #64	@ 0x40
 801050a:	d004      	beq.n	8010516 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801050c:	187b      	adds	r3, r7, r1
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2228      	movs	r2, #40	@ 0x28
 8010512:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010514:	d04b      	beq.n	80105ae <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	0018      	movs	r0, r3
 801051a:	f000 ff97 	bl	801144c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	689b      	ldr	r3, [r3, #8]
 8010524:	2240      	movs	r2, #64	@ 0x40
 8010526:	4013      	ands	r3, r2
 8010528:	2b40      	cmp	r3, #64	@ 0x40
 801052a:	d139      	bne.n	80105a0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801052c:	f3ef 8310 	mrs	r3, PRIMASK
 8010530:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8010532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010534:	2090      	movs	r0, #144	@ 0x90
 8010536:	183a      	adds	r2, r7, r0
 8010538:	6013      	str	r3, [r2, #0]
 801053a:	2301      	movs	r3, #1
 801053c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801053e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010540:	f383 8810 	msr	PRIMASK, r3
}
 8010544:	46c0      	nop			@ (mov r8, r8)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	689a      	ldr	r2, [r3, #8]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	2140      	movs	r1, #64	@ 0x40
 8010552:	438a      	bics	r2, r1
 8010554:	609a      	str	r2, [r3, #8]
 8010556:	183b      	adds	r3, r7, r0
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801055c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801055e:	f383 8810 	msr	PRIMASK, r3
}
 8010562:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010568:	2b00      	cmp	r3, #0
 801056a:	d012      	beq.n	8010592 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010570:	4a17      	ldr	r2, [pc, #92]	@ (80105d0 <HAL_UART_IRQHandler+0x2ac>)
 8010572:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010578:	0018      	movs	r0, r3
 801057a:	f7f9 fb53 	bl	8009c24 <HAL_DMA_Abort_IT>
 801057e:	1e03      	subs	r3, r0, #0
 8010580:	d020      	beq.n	80105c4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801058c:	0018      	movs	r0, r3
 801058e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010590:	e018      	b.n	80105c4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2298      	movs	r2, #152	@ 0x98
 8010596:	589b      	ldr	r3, [r3, r2]
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	0010      	movs	r0, r2
 801059c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801059e:	e011      	b.n	80105c4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2298      	movs	r2, #152	@ 0x98
 80105a4:	589b      	ldr	r3, [r3, r2]
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	0010      	movs	r0, r2
 80105aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105ac:	e00a      	b.n	80105c4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	2298      	movs	r2, #152	@ 0x98
 80105b2:	589b      	ldr	r3, [r3, r2]
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	0010      	movs	r0, r2
 80105b8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2284      	movs	r2, #132	@ 0x84
 80105be:	2100      	movs	r1, #0
 80105c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80105c2:	e18d      	b.n	80108e0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105c4:	46c0      	nop			@ (mov r8, r8)
    return;
 80105c6:	e18b      	b.n	80108e0 <HAL_UART_IRQHandler+0x5bc>
 80105c8:	0000080f 	.word	0x0000080f
 80105cc:	04000120 	.word	0x04000120
 80105d0:	080117d9 	.word	0x080117d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105d8:	2b01      	cmp	r3, #1
 80105da:	d000      	beq.n	80105de <HAL_UART_IRQHandler+0x2ba>
 80105dc:	e13d      	b.n	801085a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80105de:	23a4      	movs	r3, #164	@ 0xa4
 80105e0:	18fb      	adds	r3, r7, r3
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	2210      	movs	r2, #16
 80105e6:	4013      	ands	r3, r2
 80105e8:	d100      	bne.n	80105ec <HAL_UART_IRQHandler+0x2c8>
 80105ea:	e136      	b.n	801085a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80105ec:	23a0      	movs	r3, #160	@ 0xa0
 80105ee:	18fb      	adds	r3, r7, r3
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2210      	movs	r2, #16
 80105f4:	4013      	ands	r3, r2
 80105f6:	d100      	bne.n	80105fa <HAL_UART_IRQHandler+0x2d6>
 80105f8:	e12f      	b.n	801085a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	2210      	movs	r2, #16
 8010600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	2240      	movs	r2, #64	@ 0x40
 801060a:	4013      	ands	r3, r2
 801060c:	2b40      	cmp	r3, #64	@ 0x40
 801060e:	d000      	beq.n	8010612 <HAL_UART_IRQHandler+0x2ee>
 8010610:	e0a2      	b.n	8010758 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	685a      	ldr	r2, [r3, #4]
 801061a:	217e      	movs	r1, #126	@ 0x7e
 801061c:	187b      	adds	r3, r7, r1
 801061e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8010620:	187b      	adds	r3, r7, r1
 8010622:	881b      	ldrh	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d100      	bne.n	801062a <HAL_UART_IRQHandler+0x306>
 8010628:	e15c      	b.n	80108e4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2258      	movs	r2, #88	@ 0x58
 801062e:	5a9b      	ldrh	r3, [r3, r2]
 8010630:	187a      	adds	r2, r7, r1
 8010632:	8812      	ldrh	r2, [r2, #0]
 8010634:	429a      	cmp	r2, r3
 8010636:	d300      	bcc.n	801063a <HAL_UART_IRQHandler+0x316>
 8010638:	e154      	b.n	80108e4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	187a      	adds	r2, r7, r1
 801063e:	215a      	movs	r1, #90	@ 0x5a
 8010640:	8812      	ldrh	r2, [r2, #0]
 8010642:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2220      	movs	r2, #32
 801064e:	4013      	ands	r3, r2
 8010650:	d16f      	bne.n	8010732 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010652:	f3ef 8310 	mrs	r3, PRIMASK
 8010656:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8010658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801065a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801065c:	2301      	movs	r3, #1
 801065e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010662:	f383 8810 	msr	PRIMASK, r3
}
 8010666:	46c0      	nop			@ (mov r8, r8)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	49a0      	ldr	r1, [pc, #640]	@ (80108f4 <HAL_UART_IRQHandler+0x5d0>)
 8010674:	400a      	ands	r2, r1
 8010676:	601a      	str	r2, [r3, #0]
 8010678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801067c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801067e:	f383 8810 	msr	PRIMASK, r3
}
 8010682:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010684:	f3ef 8310 	mrs	r3, PRIMASK
 8010688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801068a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801068c:	677b      	str	r3, [r7, #116]	@ 0x74
 801068e:	2301      	movs	r3, #1
 8010690:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010694:	f383 8810 	msr	PRIMASK, r3
}
 8010698:	46c0      	nop			@ (mov r8, r8)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	689a      	ldr	r2, [r3, #8]
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	2101      	movs	r1, #1
 80106a6:	438a      	bics	r2, r1
 80106a8:	609a      	str	r2, [r3, #8]
 80106aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80106ac:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106b0:	f383 8810 	msr	PRIMASK, r3
}
 80106b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106b6:	f3ef 8310 	mrs	r3, PRIMASK
 80106ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80106bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80106be:	673b      	str	r3, [r7, #112]	@ 0x70
 80106c0:	2301      	movs	r3, #1
 80106c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106c6:	f383 8810 	msr	PRIMASK, r3
}
 80106ca:	46c0      	nop			@ (mov r8, r8)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	689a      	ldr	r2, [r3, #8]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	2140      	movs	r1, #64	@ 0x40
 80106d8:	438a      	bics	r2, r1
 80106da:	609a      	str	r2, [r3, #8]
 80106dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80106de:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106e2:	f383 8810 	msr	PRIMASK, r3
}
 80106e6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2280      	movs	r2, #128	@ 0x80
 80106ec:	2120      	movs	r1, #32
 80106ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2200      	movs	r2, #0
 80106f4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106f6:	f3ef 8310 	mrs	r3, PRIMASK
 80106fa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80106fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010700:	2301      	movs	r3, #1
 8010702:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010704:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010706:	f383 8810 	msr	PRIMASK, r3
}
 801070a:	46c0      	nop			@ (mov r8, r8)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2110      	movs	r1, #16
 8010718:	438a      	bics	r2, r1
 801071a:	601a      	str	r2, [r3, #0]
 801071c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801071e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010720:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010722:	f383 8810 	msr	PRIMASK, r3
}
 8010726:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801072c:	0018      	movs	r0, r3
 801072e:	f7f9 fa39 	bl	8009ba4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2202      	movs	r2, #2
 8010736:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	22ac      	movs	r2, #172	@ 0xac
 801073c:	589b      	ldr	r3, [r3, r2]
 801073e:	687a      	ldr	r2, [r7, #4]
 8010740:	2158      	movs	r1, #88	@ 0x58
 8010742:	5a51      	ldrh	r1, [r2, r1]
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	205a      	movs	r0, #90	@ 0x5a
 8010748:	5a12      	ldrh	r2, [r2, r0]
 801074a:	b292      	uxth	r2, r2
 801074c:	1a8a      	subs	r2, r1, r2
 801074e:	b291      	uxth	r1, r2
 8010750:	687a      	ldr	r2, [r7, #4]
 8010752:	0010      	movs	r0, r2
 8010754:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010756:	e0c5      	b.n	80108e4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2258      	movs	r2, #88	@ 0x58
 801075c:	5a99      	ldrh	r1, [r3, r2]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	225a      	movs	r2, #90	@ 0x5a
 8010762:	5a9b      	ldrh	r3, [r3, r2]
 8010764:	b29a      	uxth	r2, r3
 8010766:	208e      	movs	r0, #142	@ 0x8e
 8010768:	183b      	adds	r3, r7, r0
 801076a:	1a8a      	subs	r2, r1, r2
 801076c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	225a      	movs	r2, #90	@ 0x5a
 8010772:	5a9b      	ldrh	r3, [r3, r2]
 8010774:	b29b      	uxth	r3, r3
 8010776:	2b00      	cmp	r3, #0
 8010778:	d100      	bne.n	801077c <HAL_UART_IRQHandler+0x458>
 801077a:	e0b5      	b.n	80108e8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801077c:	183b      	adds	r3, r7, r0
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d100      	bne.n	8010786 <HAL_UART_IRQHandler+0x462>
 8010784:	e0b0      	b.n	80108e8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010786:	f3ef 8310 	mrs	r3, PRIMASK
 801078a:	60fb      	str	r3, [r7, #12]
  return(result);
 801078c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801078e:	2488      	movs	r4, #136	@ 0x88
 8010790:	193a      	adds	r2, r7, r4
 8010792:	6013      	str	r3, [r2, #0]
 8010794:	2301      	movs	r3, #1
 8010796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	f383 8810 	msr	PRIMASK, r3
}
 801079e:	46c0      	nop			@ (mov r8, r8)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	4953      	ldr	r1, [pc, #332]	@ (80108f8 <HAL_UART_IRQHandler+0x5d4>)
 80107ac:	400a      	ands	r2, r1
 80107ae:	601a      	str	r2, [r3, #0]
 80107b0:	193b      	adds	r3, r7, r4
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	f383 8810 	msr	PRIMASK, r3
}
 80107bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107be:	f3ef 8310 	mrs	r3, PRIMASK
 80107c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80107c4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107c6:	2484      	movs	r4, #132	@ 0x84
 80107c8:	193a      	adds	r2, r7, r4
 80107ca:	6013      	str	r3, [r2, #0]
 80107cc:	2301      	movs	r3, #1
 80107ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	f383 8810 	msr	PRIMASK, r3
}
 80107d6:	46c0      	nop			@ (mov r8, r8)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	689a      	ldr	r2, [r3, #8]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2101      	movs	r1, #1
 80107e4:	438a      	bics	r2, r1
 80107e6:	609a      	str	r2, [r3, #8]
 80107e8:	193b      	adds	r3, r7, r4
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107ee:	6a3b      	ldr	r3, [r7, #32]
 80107f0:	f383 8810 	msr	PRIMASK, r3
}
 80107f4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2280      	movs	r2, #128	@ 0x80
 80107fa:	2120      	movs	r1, #32
 80107fc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2200      	movs	r2, #0
 8010802:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2200      	movs	r2, #0
 8010808:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801080a:	f3ef 8310 	mrs	r3, PRIMASK
 801080e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8010810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010812:	2480      	movs	r4, #128	@ 0x80
 8010814:	193a      	adds	r2, r7, r4
 8010816:	6013      	str	r3, [r2, #0]
 8010818:	2301      	movs	r3, #1
 801081a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801081c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801081e:	f383 8810 	msr	PRIMASK, r3
}
 8010822:	46c0      	nop			@ (mov r8, r8)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2110      	movs	r1, #16
 8010830:	438a      	bics	r2, r1
 8010832:	601a      	str	r2, [r3, #0]
 8010834:	193b      	adds	r3, r7, r4
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801083a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801083c:	f383 8810 	msr	PRIMASK, r3
}
 8010840:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2202      	movs	r2, #2
 8010846:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	22ac      	movs	r2, #172	@ 0xac
 801084c:	589b      	ldr	r3, [r3, r2]
 801084e:	183a      	adds	r2, r7, r0
 8010850:	8811      	ldrh	r1, [r2, #0]
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	0010      	movs	r0, r2
 8010856:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010858:	e046      	b.n	80108e8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801085a:	23a4      	movs	r3, #164	@ 0xa4
 801085c:	18fb      	adds	r3, r7, r3
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	2380      	movs	r3, #128	@ 0x80
 8010862:	035b      	lsls	r3, r3, #13
 8010864:	4013      	ands	r3, r2
 8010866:	d012      	beq.n	801088e <HAL_UART_IRQHandler+0x56a>
 8010868:	239c      	movs	r3, #156	@ 0x9c
 801086a:	18fb      	adds	r3, r7, r3
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	2380      	movs	r3, #128	@ 0x80
 8010870:	03db      	lsls	r3, r3, #15
 8010872:	4013      	ands	r3, r2
 8010874:	d00b      	beq.n	801088e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2280      	movs	r2, #128	@ 0x80
 801087c:	0352      	lsls	r2, r2, #13
 801087e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	22a8      	movs	r2, #168	@ 0xa8
 8010884:	589b      	ldr	r3, [r3, r2]
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	0010      	movs	r0, r2
 801088a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801088c:	e02f      	b.n	80108ee <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801088e:	23a4      	movs	r3, #164	@ 0xa4
 8010890:	18fb      	adds	r3, r7, r3
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2280      	movs	r2, #128	@ 0x80
 8010896:	4013      	ands	r3, r2
 8010898:	d00f      	beq.n	80108ba <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801089a:	23a0      	movs	r3, #160	@ 0xa0
 801089c:	18fb      	adds	r3, r7, r3
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2280      	movs	r2, #128	@ 0x80
 80108a2:	4013      	ands	r3, r2
 80108a4:	d009      	beq.n	80108ba <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d01e      	beq.n	80108ec <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	0010      	movs	r0, r2
 80108b6:	4798      	blx	r3
    }
    return;
 80108b8:	e018      	b.n	80108ec <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80108ba:	23a4      	movs	r3, #164	@ 0xa4
 80108bc:	18fb      	adds	r3, r7, r3
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	2240      	movs	r2, #64	@ 0x40
 80108c2:	4013      	ands	r3, r2
 80108c4:	d013      	beq.n	80108ee <HAL_UART_IRQHandler+0x5ca>
 80108c6:	23a0      	movs	r3, #160	@ 0xa0
 80108c8:	18fb      	adds	r3, r7, r3
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2240      	movs	r2, #64	@ 0x40
 80108ce:	4013      	ands	r3, r2
 80108d0:	d00d      	beq.n	80108ee <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	0018      	movs	r0, r3
 80108d6:	f000 ff98 	bl	801180a <UART_EndTransmit_IT>
    return;
 80108da:	e008      	b.n	80108ee <HAL_UART_IRQHandler+0x5ca>
      return;
 80108dc:	46c0      	nop			@ (mov r8, r8)
 80108de:	e006      	b.n	80108ee <HAL_UART_IRQHandler+0x5ca>
    return;
 80108e0:	46c0      	nop			@ (mov r8, r8)
 80108e2:	e004      	b.n	80108ee <HAL_UART_IRQHandler+0x5ca>
      return;
 80108e4:	46c0      	nop			@ (mov r8, r8)
 80108e6:	e002      	b.n	80108ee <HAL_UART_IRQHandler+0x5ca>
      return;
 80108e8:	46c0      	nop			@ (mov r8, r8)
 80108ea:	e000      	b.n	80108ee <HAL_UART_IRQHandler+0x5ca>
    return;
 80108ec:	46c0      	nop			@ (mov r8, r8)
  }

}
 80108ee:	46bd      	mov	sp, r7
 80108f0:	b02b      	add	sp, #172	@ 0xac
 80108f2:	bd90      	pop	{r4, r7, pc}
 80108f4:	fffffeff 	.word	0xfffffeff
 80108f8:	fffffedf 	.word	0xfffffedf

080108fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010904:	46c0      	nop			@ (mov r8, r8)
 8010906:	46bd      	mov	sp, r7
 8010908:	b002      	add	sp, #8
 801090a:	bd80      	pop	{r7, pc}

0801090c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010914:	46c0      	nop			@ (mov r8, r8)
 8010916:	46bd      	mov	sp, r7
 8010918:	b002      	add	sp, #8
 801091a:	bd80      	pop	{r7, pc}

0801091c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010924:	46c0      	nop			@ (mov r8, r8)
 8010926:	46bd      	mov	sp, r7
 8010928:	b002      	add	sp, #8
 801092a:	bd80      	pop	{r7, pc}

0801092c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010934:	46c0      	nop			@ (mov r8, r8)
 8010936:	46bd      	mov	sp, r7
 8010938:	b002      	add	sp, #8
 801093a:	bd80      	pop	{r7, pc}

0801093c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8010944:	46c0      	nop			@ (mov r8, r8)
 8010946:	46bd      	mov	sp, r7
 8010948:	b002      	add	sp, #8
 801094a:	bd80      	pop	{r7, pc}

0801094c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010954:	46c0      	nop			@ (mov r8, r8)
 8010956:	46bd      	mov	sp, r7
 8010958:	b002      	add	sp, #8
 801095a:	bd80      	pop	{r7, pc}

0801095c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
 8010964:	000a      	movs	r2, r1
 8010966:	1cbb      	adds	r3, r7, #2
 8010968:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801096a:	46c0      	nop			@ (mov r8, r8)
 801096c:	46bd      	mov	sp, r7
 801096e:	b002      	add	sp, #8
 8010970:	bd80      	pop	{r7, pc}
	...

08010974 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2188      	movs	r1, #136	@ 0x88
 8010980:	4a14      	ldr	r2, [pc, #80]	@ (80109d4 <UART_InitCallbacksToDefault+0x60>)
 8010982:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	218c      	movs	r1, #140	@ 0x8c
 8010988:	4a13      	ldr	r2, [pc, #76]	@ (80109d8 <UART_InitCallbacksToDefault+0x64>)
 801098a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2190      	movs	r1, #144	@ 0x90
 8010990:	4a12      	ldr	r2, [pc, #72]	@ (80109dc <UART_InitCallbacksToDefault+0x68>)
 8010992:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2194      	movs	r1, #148	@ 0x94
 8010998:	4a11      	ldr	r2, [pc, #68]	@ (80109e0 <UART_InitCallbacksToDefault+0x6c>)
 801099a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2198      	movs	r1, #152	@ 0x98
 80109a0:	4a10      	ldr	r2, [pc, #64]	@ (80109e4 <UART_InitCallbacksToDefault+0x70>)
 80109a2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	219c      	movs	r1, #156	@ 0x9c
 80109a8:	4a0f      	ldr	r2, [pc, #60]	@ (80109e8 <UART_InitCallbacksToDefault+0x74>)
 80109aa:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	21a0      	movs	r1, #160	@ 0xa0
 80109b0:	4a0e      	ldr	r2, [pc, #56]	@ (80109ec <UART_InitCallbacksToDefault+0x78>)
 80109b2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	21a4      	movs	r1, #164	@ 0xa4
 80109b8:	4a0d      	ldr	r2, [pc, #52]	@ (80109f0 <UART_InitCallbacksToDefault+0x7c>)
 80109ba:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	21a8      	movs	r1, #168	@ 0xa8
 80109c0:	4a0c      	ldr	r2, [pc, #48]	@ (80109f4 <UART_InitCallbacksToDefault+0x80>)
 80109c2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	21ac      	movs	r1, #172	@ 0xac
 80109c8:	4a0b      	ldr	r2, [pc, #44]	@ (80109f8 <UART_InitCallbacksToDefault+0x84>)
 80109ca:	505a      	str	r2, [r3, r1]

}
 80109cc:	46c0      	nop			@ (mov r8, r8)
 80109ce:	46bd      	mov	sp, r7
 80109d0:	b002      	add	sp, #8
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	0801090d 	.word	0x0801090d
 80109d8:	080108fd 	.word	0x080108fd
 80109dc:	0801091d 	.word	0x0801091d
 80109e0:	080036b1 	.word	0x080036b1
 80109e4:	080036ed 	.word	0x080036ed
 80109e8:	0801092d 	.word	0x0801092d
 80109ec:	0801093d 	.word	0x0801093d
 80109f0:	0801094d 	.word	0x0801094d
 80109f4:	08011865 	.word	0x08011865
 80109f8:	0801095d 	.word	0x0801095d

080109fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80109fc:	b5b0      	push	{r4, r5, r7, lr}
 80109fe:	b08e      	sub	sp, #56	@ 0x38
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a04:	231a      	movs	r3, #26
 8010a06:	2218      	movs	r2, #24
 8010a08:	189b      	adds	r3, r3, r2
 8010a0a:	19db      	adds	r3, r3, r7
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	689a      	ldr	r2, [r3, #8]
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	691b      	ldr	r3, [r3, #16]
 8010a18:	431a      	orrs	r2, r3
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	695b      	ldr	r3, [r3, #20]
 8010a1e:	431a      	orrs	r2, r3
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	69db      	ldr	r3, [r3, #28]
 8010a24:	4313      	orrs	r3, r2
 8010a26:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010a28:	69fb      	ldr	r3, [r7, #28]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4ac3      	ldr	r2, [pc, #780]	@ (8010d3c <UART_SetConfig+0x340>)
 8010a30:	4013      	ands	r3, r2
 8010a32:	0019      	movs	r1, r3
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a3a:	430a      	orrs	r2, r1
 8010a3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a3e:	69fb      	ldr	r3, [r7, #28]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	4abe      	ldr	r2, [pc, #760]	@ (8010d40 <UART_SetConfig+0x344>)
 8010a46:	4013      	ands	r3, r2
 8010a48:	0019      	movs	r1, r3
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	68da      	ldr	r2, [r3, #12]
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	430a      	orrs	r2, r1
 8010a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	699b      	ldr	r3, [r3, #24]
 8010a5a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4ab8      	ldr	r2, [pc, #736]	@ (8010d44 <UART_SetConfig+0x348>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d004      	beq.n	8010a70 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	6a1b      	ldr	r3, [r3, #32]
 8010a6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	689b      	ldr	r3, [r3, #8]
 8010a76:	4ab4      	ldr	r2, [pc, #720]	@ (8010d48 <UART_SetConfig+0x34c>)
 8010a78:	4013      	ands	r3, r2
 8010a7a:	0019      	movs	r1, r3
 8010a7c:	69fb      	ldr	r3, [r7, #28]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a82:	430a      	orrs	r2, r1
 8010a84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4ab0      	ldr	r2, [pc, #704]	@ (8010d4c <UART_SetConfig+0x350>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d131      	bne.n	8010af4 <UART_SetConfig+0xf8>
 8010a90:	4baf      	ldr	r3, [pc, #700]	@ (8010d50 <UART_SetConfig+0x354>)
 8010a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a94:	2203      	movs	r2, #3
 8010a96:	4013      	ands	r3, r2
 8010a98:	2b03      	cmp	r3, #3
 8010a9a:	d01d      	beq.n	8010ad8 <UART_SetConfig+0xdc>
 8010a9c:	d823      	bhi.n	8010ae6 <UART_SetConfig+0xea>
 8010a9e:	2b02      	cmp	r3, #2
 8010aa0:	d00c      	beq.n	8010abc <UART_SetConfig+0xc0>
 8010aa2:	d820      	bhi.n	8010ae6 <UART_SetConfig+0xea>
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d002      	beq.n	8010aae <UART_SetConfig+0xb2>
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d00e      	beq.n	8010aca <UART_SetConfig+0xce>
 8010aac:	e01b      	b.n	8010ae6 <UART_SetConfig+0xea>
 8010aae:	231b      	movs	r3, #27
 8010ab0:	2218      	movs	r2, #24
 8010ab2:	189b      	adds	r3, r3, r2
 8010ab4:	19db      	adds	r3, r3, r7
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	701a      	strb	r2, [r3, #0]
 8010aba:	e0b4      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010abc:	231b      	movs	r3, #27
 8010abe:	2218      	movs	r2, #24
 8010ac0:	189b      	adds	r3, r3, r2
 8010ac2:	19db      	adds	r3, r3, r7
 8010ac4:	2202      	movs	r2, #2
 8010ac6:	701a      	strb	r2, [r3, #0]
 8010ac8:	e0ad      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010aca:	231b      	movs	r3, #27
 8010acc:	2218      	movs	r2, #24
 8010ace:	189b      	adds	r3, r3, r2
 8010ad0:	19db      	adds	r3, r3, r7
 8010ad2:	2204      	movs	r2, #4
 8010ad4:	701a      	strb	r2, [r3, #0]
 8010ad6:	e0a6      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010ad8:	231b      	movs	r3, #27
 8010ada:	2218      	movs	r2, #24
 8010adc:	189b      	adds	r3, r3, r2
 8010ade:	19db      	adds	r3, r3, r7
 8010ae0:	2208      	movs	r2, #8
 8010ae2:	701a      	strb	r2, [r3, #0]
 8010ae4:	e09f      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010ae6:	231b      	movs	r3, #27
 8010ae8:	2218      	movs	r2, #24
 8010aea:	189b      	adds	r3, r3, r2
 8010aec:	19db      	adds	r3, r3, r7
 8010aee:	2210      	movs	r2, #16
 8010af0:	701a      	strb	r2, [r3, #0]
 8010af2:	e098      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	4a96      	ldr	r2, [pc, #600]	@ (8010d54 <UART_SetConfig+0x358>)
 8010afa:	4293      	cmp	r3, r2
 8010afc:	d131      	bne.n	8010b62 <UART_SetConfig+0x166>
 8010afe:	4b94      	ldr	r3, [pc, #592]	@ (8010d50 <UART_SetConfig+0x354>)
 8010b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b02:	220c      	movs	r2, #12
 8010b04:	4013      	ands	r3, r2
 8010b06:	2b0c      	cmp	r3, #12
 8010b08:	d01d      	beq.n	8010b46 <UART_SetConfig+0x14a>
 8010b0a:	d823      	bhi.n	8010b54 <UART_SetConfig+0x158>
 8010b0c:	2b08      	cmp	r3, #8
 8010b0e:	d00c      	beq.n	8010b2a <UART_SetConfig+0x12e>
 8010b10:	d820      	bhi.n	8010b54 <UART_SetConfig+0x158>
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d002      	beq.n	8010b1c <UART_SetConfig+0x120>
 8010b16:	2b04      	cmp	r3, #4
 8010b18:	d00e      	beq.n	8010b38 <UART_SetConfig+0x13c>
 8010b1a:	e01b      	b.n	8010b54 <UART_SetConfig+0x158>
 8010b1c:	231b      	movs	r3, #27
 8010b1e:	2218      	movs	r2, #24
 8010b20:	189b      	adds	r3, r3, r2
 8010b22:	19db      	adds	r3, r3, r7
 8010b24:	2200      	movs	r2, #0
 8010b26:	701a      	strb	r2, [r3, #0]
 8010b28:	e07d      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010b2a:	231b      	movs	r3, #27
 8010b2c:	2218      	movs	r2, #24
 8010b2e:	189b      	adds	r3, r3, r2
 8010b30:	19db      	adds	r3, r3, r7
 8010b32:	2202      	movs	r2, #2
 8010b34:	701a      	strb	r2, [r3, #0]
 8010b36:	e076      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010b38:	231b      	movs	r3, #27
 8010b3a:	2218      	movs	r2, #24
 8010b3c:	189b      	adds	r3, r3, r2
 8010b3e:	19db      	adds	r3, r3, r7
 8010b40:	2204      	movs	r2, #4
 8010b42:	701a      	strb	r2, [r3, #0]
 8010b44:	e06f      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010b46:	231b      	movs	r3, #27
 8010b48:	2218      	movs	r2, #24
 8010b4a:	189b      	adds	r3, r3, r2
 8010b4c:	19db      	adds	r3, r3, r7
 8010b4e:	2208      	movs	r2, #8
 8010b50:	701a      	strb	r2, [r3, #0]
 8010b52:	e068      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010b54:	231b      	movs	r3, #27
 8010b56:	2218      	movs	r2, #24
 8010b58:	189b      	adds	r3, r3, r2
 8010b5a:	19db      	adds	r3, r3, r7
 8010b5c:	2210      	movs	r2, #16
 8010b5e:	701a      	strb	r2, [r3, #0]
 8010b60:	e061      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4a7c      	ldr	r2, [pc, #496]	@ (8010d58 <UART_SetConfig+0x35c>)
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d106      	bne.n	8010b7a <UART_SetConfig+0x17e>
 8010b6c:	231b      	movs	r3, #27
 8010b6e:	2218      	movs	r2, #24
 8010b70:	189b      	adds	r3, r3, r2
 8010b72:	19db      	adds	r3, r3, r7
 8010b74:	2200      	movs	r2, #0
 8010b76:	701a      	strb	r2, [r3, #0]
 8010b78:	e055      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4a77      	ldr	r2, [pc, #476]	@ (8010d5c <UART_SetConfig+0x360>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d106      	bne.n	8010b92 <UART_SetConfig+0x196>
 8010b84:	231b      	movs	r3, #27
 8010b86:	2218      	movs	r2, #24
 8010b88:	189b      	adds	r3, r3, r2
 8010b8a:	19db      	adds	r3, r3, r7
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	701a      	strb	r2, [r3, #0]
 8010b90:	e049      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4a6b      	ldr	r2, [pc, #428]	@ (8010d44 <UART_SetConfig+0x348>)
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d13e      	bne.n	8010c1a <UART_SetConfig+0x21e>
 8010b9c:	4b6c      	ldr	r3, [pc, #432]	@ (8010d50 <UART_SetConfig+0x354>)
 8010b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010ba0:	23c0      	movs	r3, #192	@ 0xc0
 8010ba2:	011b      	lsls	r3, r3, #4
 8010ba4:	4013      	ands	r3, r2
 8010ba6:	22c0      	movs	r2, #192	@ 0xc0
 8010ba8:	0112      	lsls	r2, r2, #4
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d027      	beq.n	8010bfe <UART_SetConfig+0x202>
 8010bae:	22c0      	movs	r2, #192	@ 0xc0
 8010bb0:	0112      	lsls	r2, r2, #4
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d82a      	bhi.n	8010c0c <UART_SetConfig+0x210>
 8010bb6:	2280      	movs	r2, #128	@ 0x80
 8010bb8:	0112      	lsls	r2, r2, #4
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d011      	beq.n	8010be2 <UART_SetConfig+0x1e6>
 8010bbe:	2280      	movs	r2, #128	@ 0x80
 8010bc0:	0112      	lsls	r2, r2, #4
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d822      	bhi.n	8010c0c <UART_SetConfig+0x210>
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d004      	beq.n	8010bd4 <UART_SetConfig+0x1d8>
 8010bca:	2280      	movs	r2, #128	@ 0x80
 8010bcc:	00d2      	lsls	r2, r2, #3
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d00e      	beq.n	8010bf0 <UART_SetConfig+0x1f4>
 8010bd2:	e01b      	b.n	8010c0c <UART_SetConfig+0x210>
 8010bd4:	231b      	movs	r3, #27
 8010bd6:	2218      	movs	r2, #24
 8010bd8:	189b      	adds	r3, r3, r2
 8010bda:	19db      	adds	r3, r3, r7
 8010bdc:	2200      	movs	r2, #0
 8010bde:	701a      	strb	r2, [r3, #0]
 8010be0:	e021      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010be2:	231b      	movs	r3, #27
 8010be4:	2218      	movs	r2, #24
 8010be6:	189b      	adds	r3, r3, r2
 8010be8:	19db      	adds	r3, r3, r7
 8010bea:	2202      	movs	r2, #2
 8010bec:	701a      	strb	r2, [r3, #0]
 8010bee:	e01a      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010bf0:	231b      	movs	r3, #27
 8010bf2:	2218      	movs	r2, #24
 8010bf4:	189b      	adds	r3, r3, r2
 8010bf6:	19db      	adds	r3, r3, r7
 8010bf8:	2204      	movs	r2, #4
 8010bfa:	701a      	strb	r2, [r3, #0]
 8010bfc:	e013      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010bfe:	231b      	movs	r3, #27
 8010c00:	2218      	movs	r2, #24
 8010c02:	189b      	adds	r3, r3, r2
 8010c04:	19db      	adds	r3, r3, r7
 8010c06:	2208      	movs	r2, #8
 8010c08:	701a      	strb	r2, [r3, #0]
 8010c0a:	e00c      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010c0c:	231b      	movs	r3, #27
 8010c0e:	2218      	movs	r2, #24
 8010c10:	189b      	adds	r3, r3, r2
 8010c12:	19db      	adds	r3, r3, r7
 8010c14:	2210      	movs	r2, #16
 8010c16:	701a      	strb	r2, [r3, #0]
 8010c18:	e005      	b.n	8010c26 <UART_SetConfig+0x22a>
 8010c1a:	231b      	movs	r3, #27
 8010c1c:	2218      	movs	r2, #24
 8010c1e:	189b      	adds	r3, r3, r2
 8010c20:	19db      	adds	r3, r3, r7
 8010c22:	2210      	movs	r2, #16
 8010c24:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4a46      	ldr	r2, [pc, #280]	@ (8010d44 <UART_SetConfig+0x348>)
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	d000      	beq.n	8010c32 <UART_SetConfig+0x236>
 8010c30:	e09a      	b.n	8010d68 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010c32:	231b      	movs	r3, #27
 8010c34:	2218      	movs	r2, #24
 8010c36:	189b      	adds	r3, r3, r2
 8010c38:	19db      	adds	r3, r3, r7
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	2b08      	cmp	r3, #8
 8010c3e:	d01d      	beq.n	8010c7c <UART_SetConfig+0x280>
 8010c40:	dc20      	bgt.n	8010c84 <UART_SetConfig+0x288>
 8010c42:	2b04      	cmp	r3, #4
 8010c44:	d015      	beq.n	8010c72 <UART_SetConfig+0x276>
 8010c46:	dc1d      	bgt.n	8010c84 <UART_SetConfig+0x288>
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d002      	beq.n	8010c52 <UART_SetConfig+0x256>
 8010c4c:	2b02      	cmp	r3, #2
 8010c4e:	d005      	beq.n	8010c5c <UART_SetConfig+0x260>
 8010c50:	e018      	b.n	8010c84 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c52:	f7fe fb1f 	bl	800f294 <HAL_RCC_GetPCLK1Freq>
 8010c56:	0003      	movs	r3, r0
 8010c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c5a:	e01c      	b.n	8010c96 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8010d50 <UART_SetConfig+0x354>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	2210      	movs	r2, #16
 8010c62:	4013      	ands	r3, r2
 8010c64:	d002      	beq.n	8010c6c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010c66:	4b3e      	ldr	r3, [pc, #248]	@ (8010d60 <UART_SetConfig+0x364>)
 8010c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c6a:	e014      	b.n	8010c96 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8010c6c:	4b3d      	ldr	r3, [pc, #244]	@ (8010d64 <UART_SetConfig+0x368>)
 8010c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c70:	e011      	b.n	8010c96 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c72:	f7fe fa5f 	bl	800f134 <HAL_RCC_GetSysClockFreq>
 8010c76:	0003      	movs	r3, r0
 8010c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c7a:	e00c      	b.n	8010c96 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c7c:	2380      	movs	r3, #128	@ 0x80
 8010c7e:	021b      	lsls	r3, r3, #8
 8010c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c82:	e008      	b.n	8010c96 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8010c84:	2300      	movs	r3, #0
 8010c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010c88:	231a      	movs	r3, #26
 8010c8a:	2218      	movs	r2, #24
 8010c8c:	189b      	adds	r3, r3, r2
 8010c8e:	19db      	adds	r3, r3, r7
 8010c90:	2201      	movs	r2, #1
 8010c92:	701a      	strb	r2, [r3, #0]
        break;
 8010c94:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d100      	bne.n	8010c9e <UART_SetConfig+0x2a2>
 8010c9c:	e133      	b.n	8010f06 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	685a      	ldr	r2, [r3, #4]
 8010ca2:	0013      	movs	r3, r2
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	189b      	adds	r3, r3, r2
 8010ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d305      	bcc.n	8010cba <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010cae:	69fb      	ldr	r3, [r7, #28]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d906      	bls.n	8010cc8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8010cba:	231a      	movs	r3, #26
 8010cbc:	2218      	movs	r2, #24
 8010cbe:	189b      	adds	r3, r3, r2
 8010cc0:	19db      	adds	r3, r3, r7
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	701a      	strb	r2, [r3, #0]
 8010cc6:	e11e      	b.n	8010f06 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cca:	613b      	str	r3, [r7, #16]
 8010ccc:	2300      	movs	r3, #0
 8010cce:	617b      	str	r3, [r7, #20]
 8010cd0:	6939      	ldr	r1, [r7, #16]
 8010cd2:	697a      	ldr	r2, [r7, #20]
 8010cd4:	000b      	movs	r3, r1
 8010cd6:	0e1b      	lsrs	r3, r3, #24
 8010cd8:	0010      	movs	r0, r2
 8010cda:	0205      	lsls	r5, r0, #8
 8010cdc:	431d      	orrs	r5, r3
 8010cde:	000b      	movs	r3, r1
 8010ce0:	021c      	lsls	r4, r3, #8
 8010ce2:	69fb      	ldr	r3, [r7, #28]
 8010ce4:	685b      	ldr	r3, [r3, #4]
 8010ce6:	085b      	lsrs	r3, r3, #1
 8010ce8:	60bb      	str	r3, [r7, #8]
 8010cea:	2300      	movs	r3, #0
 8010cec:	60fb      	str	r3, [r7, #12]
 8010cee:	68b8      	ldr	r0, [r7, #8]
 8010cf0:	68f9      	ldr	r1, [r7, #12]
 8010cf2:	1900      	adds	r0, r0, r4
 8010cf4:	4169      	adcs	r1, r5
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	603b      	str	r3, [r7, #0]
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	607b      	str	r3, [r7, #4]
 8010d00:	683a      	ldr	r2, [r7, #0]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f7ef fc0a 	bl	800051c <__aeabi_uldivmod>
 8010d08:	0002      	movs	r2, r0
 8010d0a:	000b      	movs	r3, r1
 8010d0c:	0013      	movs	r3, r2
 8010d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d12:	23c0      	movs	r3, #192	@ 0xc0
 8010d14:	009b      	lsls	r3, r3, #2
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d309      	bcc.n	8010d2e <UART_SetConfig+0x332>
 8010d1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d1c:	2380      	movs	r3, #128	@ 0x80
 8010d1e:	035b      	lsls	r3, r3, #13
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d204      	bcs.n	8010d2e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d2a:	60da      	str	r2, [r3, #12]
 8010d2c:	e0eb      	b.n	8010f06 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8010d2e:	231a      	movs	r3, #26
 8010d30:	2218      	movs	r2, #24
 8010d32:	189b      	adds	r3, r3, r2
 8010d34:	19db      	adds	r3, r3, r7
 8010d36:	2201      	movs	r2, #1
 8010d38:	701a      	strb	r2, [r3, #0]
 8010d3a:	e0e4      	b.n	8010f06 <UART_SetConfig+0x50a>
 8010d3c:	efff69f3 	.word	0xefff69f3
 8010d40:	ffffcfff 	.word	0xffffcfff
 8010d44:	40004800 	.word	0x40004800
 8010d48:	fffff4ff 	.word	0xfffff4ff
 8010d4c:	40013800 	.word	0x40013800
 8010d50:	40021000 	.word	0x40021000
 8010d54:	40004400 	.word	0x40004400
 8010d58:	40004c00 	.word	0x40004c00
 8010d5c:	40005000 	.word	0x40005000
 8010d60:	003d0900 	.word	0x003d0900
 8010d64:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	69da      	ldr	r2, [r3, #28]
 8010d6c:	2380      	movs	r3, #128	@ 0x80
 8010d6e:	021b      	lsls	r3, r3, #8
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d000      	beq.n	8010d76 <UART_SetConfig+0x37a>
 8010d74:	e070      	b.n	8010e58 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8010d76:	231b      	movs	r3, #27
 8010d78:	2218      	movs	r2, #24
 8010d7a:	189b      	adds	r3, r3, r2
 8010d7c:	19db      	adds	r3, r3, r7
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	2b08      	cmp	r3, #8
 8010d82:	d822      	bhi.n	8010dca <UART_SetConfig+0x3ce>
 8010d84:	009a      	lsls	r2, r3, #2
 8010d86:	4b67      	ldr	r3, [pc, #412]	@ (8010f24 <UART_SetConfig+0x528>)
 8010d88:	18d3      	adds	r3, r2, r3
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d8e:	f7fe fa81 	bl	800f294 <HAL_RCC_GetPCLK1Freq>
 8010d92:	0003      	movs	r3, r0
 8010d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d96:	e021      	b.n	8010ddc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d98:	f7fe fa92 	bl	800f2c0 <HAL_RCC_GetPCLK2Freq>
 8010d9c:	0003      	movs	r3, r0
 8010d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010da0:	e01c      	b.n	8010ddc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010da2:	4b61      	ldr	r3, [pc, #388]	@ (8010f28 <UART_SetConfig+0x52c>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2210      	movs	r2, #16
 8010da8:	4013      	ands	r3, r2
 8010daa:	d002      	beq.n	8010db2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010dac:	4b5f      	ldr	r3, [pc, #380]	@ (8010f2c <UART_SetConfig+0x530>)
 8010dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010db0:	e014      	b.n	8010ddc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8010db2:	4b5f      	ldr	r3, [pc, #380]	@ (8010f30 <UART_SetConfig+0x534>)
 8010db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010db6:	e011      	b.n	8010ddc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010db8:	f7fe f9bc 	bl	800f134 <HAL_RCC_GetSysClockFreq>
 8010dbc:	0003      	movs	r3, r0
 8010dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010dc0:	e00c      	b.n	8010ddc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010dc2:	2380      	movs	r3, #128	@ 0x80
 8010dc4:	021b      	lsls	r3, r3, #8
 8010dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010dc8:	e008      	b.n	8010ddc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010dce:	231a      	movs	r3, #26
 8010dd0:	2218      	movs	r2, #24
 8010dd2:	189b      	adds	r3, r3, r2
 8010dd4:	19db      	adds	r3, r3, r7
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	701a      	strb	r2, [r3, #0]
        break;
 8010dda:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d100      	bne.n	8010de4 <UART_SetConfig+0x3e8>
 8010de2:	e090      	b.n	8010f06 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010de6:	005a      	lsls	r2, r3, #1
 8010de8:	69fb      	ldr	r3, [r7, #28]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	085b      	lsrs	r3, r3, #1
 8010dee:	18d2      	adds	r2, r2, r3
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	0019      	movs	r1, r3
 8010df6:	0010      	movs	r0, r2
 8010df8:	f7ef f9a2 	bl	8000140 <__udivsi3>
 8010dfc:	0003      	movs	r3, r0
 8010dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e02:	2b0f      	cmp	r3, #15
 8010e04:	d921      	bls.n	8010e4a <UART_SetConfig+0x44e>
 8010e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e08:	2380      	movs	r3, #128	@ 0x80
 8010e0a:	025b      	lsls	r3, r3, #9
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d21c      	bcs.n	8010e4a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e12:	b29a      	uxth	r2, r3
 8010e14:	200e      	movs	r0, #14
 8010e16:	2418      	movs	r4, #24
 8010e18:	1903      	adds	r3, r0, r4
 8010e1a:	19db      	adds	r3, r3, r7
 8010e1c:	210f      	movs	r1, #15
 8010e1e:	438a      	bics	r2, r1
 8010e20:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e24:	085b      	lsrs	r3, r3, #1
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	2207      	movs	r2, #7
 8010e2a:	4013      	ands	r3, r2
 8010e2c:	b299      	uxth	r1, r3
 8010e2e:	1903      	adds	r3, r0, r4
 8010e30:	19db      	adds	r3, r3, r7
 8010e32:	1902      	adds	r2, r0, r4
 8010e34:	19d2      	adds	r2, r2, r7
 8010e36:	8812      	ldrh	r2, [r2, #0]
 8010e38:	430a      	orrs	r2, r1
 8010e3a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	1902      	adds	r2, r0, r4
 8010e42:	19d2      	adds	r2, r2, r7
 8010e44:	8812      	ldrh	r2, [r2, #0]
 8010e46:	60da      	str	r2, [r3, #12]
 8010e48:	e05d      	b.n	8010f06 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010e4a:	231a      	movs	r3, #26
 8010e4c:	2218      	movs	r2, #24
 8010e4e:	189b      	adds	r3, r3, r2
 8010e50:	19db      	adds	r3, r3, r7
 8010e52:	2201      	movs	r2, #1
 8010e54:	701a      	strb	r2, [r3, #0]
 8010e56:	e056      	b.n	8010f06 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e58:	231b      	movs	r3, #27
 8010e5a:	2218      	movs	r2, #24
 8010e5c:	189b      	adds	r3, r3, r2
 8010e5e:	19db      	adds	r3, r3, r7
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	2b08      	cmp	r3, #8
 8010e64:	d822      	bhi.n	8010eac <UART_SetConfig+0x4b0>
 8010e66:	009a      	lsls	r2, r3, #2
 8010e68:	4b32      	ldr	r3, [pc, #200]	@ (8010f34 <UART_SetConfig+0x538>)
 8010e6a:	18d3      	adds	r3, r2, r3
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e70:	f7fe fa10 	bl	800f294 <HAL_RCC_GetPCLK1Freq>
 8010e74:	0003      	movs	r3, r0
 8010e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e78:	e021      	b.n	8010ebe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e7a:	f7fe fa21 	bl	800f2c0 <HAL_RCC_GetPCLK2Freq>
 8010e7e:	0003      	movs	r3, r0
 8010e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e82:	e01c      	b.n	8010ebe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e84:	4b28      	ldr	r3, [pc, #160]	@ (8010f28 <UART_SetConfig+0x52c>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	2210      	movs	r2, #16
 8010e8a:	4013      	ands	r3, r2
 8010e8c:	d002      	beq.n	8010e94 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010e8e:	4b27      	ldr	r3, [pc, #156]	@ (8010f2c <UART_SetConfig+0x530>)
 8010e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e92:	e014      	b.n	8010ebe <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8010e94:	4b26      	ldr	r3, [pc, #152]	@ (8010f30 <UART_SetConfig+0x534>)
 8010e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e98:	e011      	b.n	8010ebe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e9a:	f7fe f94b 	bl	800f134 <HAL_RCC_GetSysClockFreq>
 8010e9e:	0003      	movs	r3, r0
 8010ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010ea2:	e00c      	b.n	8010ebe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ea4:	2380      	movs	r3, #128	@ 0x80
 8010ea6:	021b      	lsls	r3, r3, #8
 8010ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010eaa:	e008      	b.n	8010ebe <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8010eac:	2300      	movs	r3, #0
 8010eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010eb0:	231a      	movs	r3, #26
 8010eb2:	2218      	movs	r2, #24
 8010eb4:	189b      	adds	r3, r3, r2
 8010eb6:	19db      	adds	r3, r3, r7
 8010eb8:	2201      	movs	r2, #1
 8010eba:	701a      	strb	r2, [r3, #0]
        break;
 8010ebc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8010ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d020      	beq.n	8010f06 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	085a      	lsrs	r2, r3, #1
 8010eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ecc:	18d2      	adds	r2, r2, r3
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	0019      	movs	r1, r3
 8010ed4:	0010      	movs	r0, r2
 8010ed6:	f7ef f933 	bl	8000140 <__udivsi3>
 8010eda:	0003      	movs	r3, r0
 8010edc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee0:	2b0f      	cmp	r3, #15
 8010ee2:	d90a      	bls.n	8010efa <UART_SetConfig+0x4fe>
 8010ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ee6:	2380      	movs	r3, #128	@ 0x80
 8010ee8:	025b      	lsls	r3, r3, #9
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d205      	bcs.n	8010efa <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ef0:	b29a      	uxth	r2, r3
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	60da      	str	r2, [r3, #12]
 8010ef8:	e005      	b.n	8010f06 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010efa:	231a      	movs	r3, #26
 8010efc:	2218      	movs	r2, #24
 8010efe:	189b      	adds	r3, r3, r2
 8010f00:	19db      	adds	r3, r3, r7
 8010f02:	2201      	movs	r2, #1
 8010f04:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010f12:	231a      	movs	r3, #26
 8010f14:	2218      	movs	r2, #24
 8010f16:	189b      	adds	r3, r3, r2
 8010f18:	19db      	adds	r3, r3, r7
 8010f1a:	781b      	ldrb	r3, [r3, #0]
}
 8010f1c:	0018      	movs	r0, r3
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	b00e      	add	sp, #56	@ 0x38
 8010f22:	bdb0      	pop	{r4, r5, r7, pc}
 8010f24:	0801a3b0 	.word	0x0801a3b0
 8010f28:	40021000 	.word	0x40021000
 8010f2c:	003d0900 	.word	0x003d0900
 8010f30:	00f42400 	.word	0x00f42400
 8010f34:	0801a3d4 	.word	0x0801a3d4

08010f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f44:	2201      	movs	r2, #1
 8010f46:	4013      	ands	r3, r2
 8010f48:	d00b      	beq.n	8010f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	4a4a      	ldr	r2, [pc, #296]	@ (801107c <UART_AdvFeatureConfig+0x144>)
 8010f52:	4013      	ands	r3, r2
 8010f54:	0019      	movs	r1, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	430a      	orrs	r2, r1
 8010f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f66:	2202      	movs	r2, #2
 8010f68:	4013      	ands	r3, r2
 8010f6a:	d00b      	beq.n	8010f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	4a43      	ldr	r2, [pc, #268]	@ (8011080 <UART_AdvFeatureConfig+0x148>)
 8010f74:	4013      	ands	r3, r2
 8010f76:	0019      	movs	r1, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	430a      	orrs	r2, r1
 8010f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f88:	2204      	movs	r2, #4
 8010f8a:	4013      	ands	r3, r2
 8010f8c:	d00b      	beq.n	8010fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	4a3b      	ldr	r2, [pc, #236]	@ (8011084 <UART_AdvFeatureConfig+0x14c>)
 8010f96:	4013      	ands	r3, r2
 8010f98:	0019      	movs	r1, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	430a      	orrs	r2, r1
 8010fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010faa:	2208      	movs	r2, #8
 8010fac:	4013      	ands	r3, r2
 8010fae:	d00b      	beq.n	8010fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	4a34      	ldr	r2, [pc, #208]	@ (8011088 <UART_AdvFeatureConfig+0x150>)
 8010fb8:	4013      	ands	r3, r2
 8010fba:	0019      	movs	r1, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	430a      	orrs	r2, r1
 8010fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fcc:	2210      	movs	r2, #16
 8010fce:	4013      	ands	r3, r2
 8010fd0:	d00b      	beq.n	8010fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	4a2c      	ldr	r2, [pc, #176]	@ (801108c <UART_AdvFeatureConfig+0x154>)
 8010fda:	4013      	ands	r3, r2
 8010fdc:	0019      	movs	r1, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	430a      	orrs	r2, r1
 8010fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fee:	2220      	movs	r2, #32
 8010ff0:	4013      	ands	r3, r2
 8010ff2:	d00b      	beq.n	801100c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	689b      	ldr	r3, [r3, #8]
 8010ffa:	4a25      	ldr	r2, [pc, #148]	@ (8011090 <UART_AdvFeatureConfig+0x158>)
 8010ffc:	4013      	ands	r3, r2
 8010ffe:	0019      	movs	r1, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	430a      	orrs	r2, r1
 801100a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011010:	2240      	movs	r2, #64	@ 0x40
 8011012:	4013      	ands	r3, r2
 8011014:	d01d      	beq.n	8011052 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	4a1d      	ldr	r2, [pc, #116]	@ (8011094 <UART_AdvFeatureConfig+0x15c>)
 801101e:	4013      	ands	r3, r2
 8011020:	0019      	movs	r1, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	430a      	orrs	r2, r1
 801102c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011032:	2380      	movs	r3, #128	@ 0x80
 8011034:	035b      	lsls	r3, r3, #13
 8011036:	429a      	cmp	r2, r3
 8011038:	d10b      	bne.n	8011052 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	685b      	ldr	r3, [r3, #4]
 8011040:	4a15      	ldr	r2, [pc, #84]	@ (8011098 <UART_AdvFeatureConfig+0x160>)
 8011042:	4013      	ands	r3, r2
 8011044:	0019      	movs	r1, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	430a      	orrs	r2, r1
 8011050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011056:	2280      	movs	r2, #128	@ 0x80
 8011058:	4013      	ands	r3, r2
 801105a:	d00b      	beq.n	8011074 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	4a0e      	ldr	r2, [pc, #56]	@ (801109c <UART_AdvFeatureConfig+0x164>)
 8011064:	4013      	ands	r3, r2
 8011066:	0019      	movs	r1, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	430a      	orrs	r2, r1
 8011072:	605a      	str	r2, [r3, #4]
  }
}
 8011074:	46c0      	nop			@ (mov r8, r8)
 8011076:	46bd      	mov	sp, r7
 8011078:	b002      	add	sp, #8
 801107a:	bd80      	pop	{r7, pc}
 801107c:	fffdffff 	.word	0xfffdffff
 8011080:	fffeffff 	.word	0xfffeffff
 8011084:	fffbffff 	.word	0xfffbffff
 8011088:	ffff7fff 	.word	0xffff7fff
 801108c:	ffffefff 	.word	0xffffefff
 8011090:	ffffdfff 	.word	0xffffdfff
 8011094:	ffefffff 	.word	0xffefffff
 8011098:	ff9fffff 	.word	0xff9fffff
 801109c:	fff7ffff 	.word	0xfff7ffff

080110a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b092      	sub	sp, #72	@ 0x48
 80110a4:	af02      	add	r7, sp, #8
 80110a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2284      	movs	r2, #132	@ 0x84
 80110ac:	2100      	movs	r1, #0
 80110ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80110b0:	f7f8 f8f8 	bl	80092a4 <HAL_GetTick>
 80110b4:	0003      	movs	r3, r0
 80110b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	2208      	movs	r2, #8
 80110c0:	4013      	ands	r3, r2
 80110c2:	2b08      	cmp	r3, #8
 80110c4:	d12c      	bne.n	8011120 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110c8:	2280      	movs	r2, #128	@ 0x80
 80110ca:	0391      	lsls	r1, r2, #14
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	4a46      	ldr	r2, [pc, #280]	@ (80111e8 <UART_CheckIdleState+0x148>)
 80110d0:	9200      	str	r2, [sp, #0]
 80110d2:	2200      	movs	r2, #0
 80110d4:	f000 f88c 	bl	80111f0 <UART_WaitOnFlagUntilTimeout>
 80110d8:	1e03      	subs	r3, r0, #0
 80110da:	d021      	beq.n	8011120 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110dc:	f3ef 8310 	mrs	r3, PRIMASK
 80110e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80110e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80110e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80110e6:	2301      	movs	r3, #1
 80110e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ec:	f383 8810 	msr	PRIMASK, r3
}
 80110f0:	46c0      	nop			@ (mov r8, r8)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2180      	movs	r1, #128	@ 0x80
 80110fe:	438a      	bics	r2, r1
 8011100:	601a      	str	r2, [r3, #0]
 8011102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011108:	f383 8810 	msr	PRIMASK, r3
}
 801110c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2220      	movs	r2, #32
 8011112:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2278      	movs	r2, #120	@ 0x78
 8011118:	2100      	movs	r1, #0
 801111a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801111c:	2303      	movs	r3, #3
 801111e:	e05f      	b.n	80111e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2204      	movs	r2, #4
 8011128:	4013      	ands	r3, r2
 801112a:	2b04      	cmp	r3, #4
 801112c:	d146      	bne.n	80111bc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801112e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011130:	2280      	movs	r2, #128	@ 0x80
 8011132:	03d1      	lsls	r1, r2, #15
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	4a2c      	ldr	r2, [pc, #176]	@ (80111e8 <UART_CheckIdleState+0x148>)
 8011138:	9200      	str	r2, [sp, #0]
 801113a:	2200      	movs	r2, #0
 801113c:	f000 f858 	bl	80111f0 <UART_WaitOnFlagUntilTimeout>
 8011140:	1e03      	subs	r3, r0, #0
 8011142:	d03b      	beq.n	80111bc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011144:	f3ef 8310 	mrs	r3, PRIMASK
 8011148:	60fb      	str	r3, [r7, #12]
  return(result);
 801114a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801114c:	637b      	str	r3, [r7, #52]	@ 0x34
 801114e:	2301      	movs	r3, #1
 8011150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	f383 8810 	msr	PRIMASK, r3
}
 8011158:	46c0      	nop			@ (mov r8, r8)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	4921      	ldr	r1, [pc, #132]	@ (80111ec <UART_CheckIdleState+0x14c>)
 8011166:	400a      	ands	r2, r1
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801116c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	f383 8810 	msr	PRIMASK, r3
}
 8011174:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011176:	f3ef 8310 	mrs	r3, PRIMASK
 801117a:	61bb      	str	r3, [r7, #24]
  return(result);
 801117c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801117e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011180:	2301      	movs	r3, #1
 8011182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	f383 8810 	msr	PRIMASK, r3
}
 801118a:	46c0      	nop			@ (mov r8, r8)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	689a      	ldr	r2, [r3, #8]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	2101      	movs	r1, #1
 8011198:	438a      	bics	r2, r1
 801119a:	609a      	str	r2, [r3, #8]
 801119c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801119e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	f383 8810 	msr	PRIMASK, r3
}
 80111a6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2280      	movs	r2, #128	@ 0x80
 80111ac:	2120      	movs	r1, #32
 80111ae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2278      	movs	r2, #120	@ 0x78
 80111b4:	2100      	movs	r1, #0
 80111b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80111b8:	2303      	movs	r3, #3
 80111ba:	e011      	b.n	80111e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2220      	movs	r2, #32
 80111c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2280      	movs	r2, #128	@ 0x80
 80111c6:	2120      	movs	r1, #32
 80111c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2200      	movs	r2, #0
 80111ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2200      	movs	r2, #0
 80111d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2278      	movs	r2, #120	@ 0x78
 80111da:	2100      	movs	r1, #0
 80111dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80111de:	2300      	movs	r3, #0
}
 80111e0:	0018      	movs	r0, r3
 80111e2:	46bd      	mov	sp, r7
 80111e4:	b010      	add	sp, #64	@ 0x40
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	01ffffff 	.word	0x01ffffff
 80111ec:	fffffedf 	.word	0xfffffedf

080111f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	603b      	str	r3, [r7, #0]
 80111fc:	1dfb      	adds	r3, r7, #7
 80111fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011200:	e04b      	b.n	801129a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	3301      	adds	r3, #1
 8011206:	d048      	beq.n	801129a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011208:	f7f8 f84c 	bl	80092a4 <HAL_GetTick>
 801120c:	0002      	movs	r2, r0
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	1ad3      	subs	r3, r2, r3
 8011212:	69ba      	ldr	r2, [r7, #24]
 8011214:	429a      	cmp	r2, r3
 8011216:	d302      	bcc.n	801121e <UART_WaitOnFlagUntilTimeout+0x2e>
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d101      	bne.n	8011222 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801121e:	2303      	movs	r3, #3
 8011220:	e04b      	b.n	80112ba <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	2204      	movs	r2, #4
 801122a:	4013      	ands	r3, r2
 801122c:	d035      	beq.n	801129a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	69db      	ldr	r3, [r3, #28]
 8011234:	2208      	movs	r2, #8
 8011236:	4013      	ands	r3, r2
 8011238:	2b08      	cmp	r3, #8
 801123a:	d111      	bne.n	8011260 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2208      	movs	r2, #8
 8011242:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	0018      	movs	r0, r3
 8011248:	f000 f900 	bl	801144c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2284      	movs	r2, #132	@ 0x84
 8011250:	2108      	movs	r1, #8
 8011252:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2278      	movs	r2, #120	@ 0x78
 8011258:	2100      	movs	r1, #0
 801125a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801125c:	2301      	movs	r3, #1
 801125e:	e02c      	b.n	80112ba <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	69da      	ldr	r2, [r3, #28]
 8011266:	2380      	movs	r3, #128	@ 0x80
 8011268:	011b      	lsls	r3, r3, #4
 801126a:	401a      	ands	r2, r3
 801126c:	2380      	movs	r3, #128	@ 0x80
 801126e:	011b      	lsls	r3, r3, #4
 8011270:	429a      	cmp	r2, r3
 8011272:	d112      	bne.n	801129a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2280      	movs	r2, #128	@ 0x80
 801127a:	0112      	lsls	r2, r2, #4
 801127c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	0018      	movs	r0, r3
 8011282:	f000 f8e3 	bl	801144c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2284      	movs	r2, #132	@ 0x84
 801128a:	2120      	movs	r1, #32
 801128c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	2278      	movs	r2, #120	@ 0x78
 8011292:	2100      	movs	r1, #0
 8011294:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8011296:	2303      	movs	r3, #3
 8011298:	e00f      	b.n	80112ba <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	69db      	ldr	r3, [r3, #28]
 80112a0:	68ba      	ldr	r2, [r7, #8]
 80112a2:	4013      	ands	r3, r2
 80112a4:	68ba      	ldr	r2, [r7, #8]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	425a      	negs	r2, r3
 80112aa:	4153      	adcs	r3, r2
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	001a      	movs	r2, r3
 80112b0:	1dfb      	adds	r3, r7, #7
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d0a4      	beq.n	8011202 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80112b8:	2300      	movs	r3, #0
}
 80112ba:	0018      	movs	r0, r3
 80112bc:	46bd      	mov	sp, r7
 80112be:	b004      	add	sp, #16
 80112c0:	bd80      	pop	{r7, pc}
	...

080112c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b090      	sub	sp, #64	@ 0x40
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	1dbb      	adds	r3, r7, #6
 80112d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	68ba      	ldr	r2, [r7, #8]
 80112d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	1dba      	adds	r2, r7, #6
 80112dc:	2158      	movs	r1, #88	@ 0x58
 80112de:	8812      	ldrh	r2, [r2, #0]
 80112e0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2284      	movs	r2, #132	@ 0x84
 80112e6:	2100      	movs	r1, #0
 80112e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2280      	movs	r2, #128	@ 0x80
 80112ee:	2122      	movs	r1, #34	@ 0x22
 80112f0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d028      	beq.n	801134c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112fe:	4a3e      	ldr	r2, [pc, #248]	@ (80113f8 <UART_Start_Receive_DMA+0x134>)
 8011300:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011306:	4a3d      	ldr	r2, [pc, #244]	@ (80113fc <UART_Start_Receive_DMA+0x138>)
 8011308:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801130e:	4a3c      	ldr	r2, [pc, #240]	@ (8011400 <UART_Start_Receive_DMA+0x13c>)
 8011310:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011316:	2200      	movs	r2, #0
 8011318:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	3324      	adds	r3, #36	@ 0x24
 8011324:	0019      	movs	r1, r3
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801132a:	001a      	movs	r2, r3
 801132c:	1dbb      	adds	r3, r7, #6
 801132e:	881b      	ldrh	r3, [r3, #0]
 8011330:	f7f8 fbd2 	bl	8009ad8 <HAL_DMA_Start_IT>
 8011334:	1e03      	subs	r3, r0, #0
 8011336:	d009      	beq.n	801134c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2284      	movs	r2, #132	@ 0x84
 801133c:	2110      	movs	r1, #16
 801133e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2280      	movs	r2, #128	@ 0x80
 8011344:	2120      	movs	r1, #32
 8011346:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8011348:	2301      	movs	r3, #1
 801134a:	e050      	b.n	80113ee <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	691b      	ldr	r3, [r3, #16]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d019      	beq.n	8011388 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011354:	f3ef 8310 	mrs	r3, PRIMASK
 8011358:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801135a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801135c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801135e:	2301      	movs	r3, #1
 8011360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011364:	f383 8810 	msr	PRIMASK, r3
}
 8011368:	46c0      	nop			@ (mov r8, r8)
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	681a      	ldr	r2, [r3, #0]
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2180      	movs	r1, #128	@ 0x80
 8011376:	0049      	lsls	r1, r1, #1
 8011378:	430a      	orrs	r2, r1
 801137a:	601a      	str	r2, [r3, #0]
 801137c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801137e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011382:	f383 8810 	msr	PRIMASK, r3
}
 8011386:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011388:	f3ef 8310 	mrs	r3, PRIMASK
 801138c:	613b      	str	r3, [r7, #16]
  return(result);
 801138e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011392:	2301      	movs	r3, #1
 8011394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	f383 8810 	msr	PRIMASK, r3
}
 801139c:	46c0      	nop			@ (mov r8, r8)
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	689a      	ldr	r2, [r3, #8]
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2101      	movs	r1, #1
 80113aa:	430a      	orrs	r2, r1
 80113ac:	609a      	str	r2, [r3, #8]
 80113ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	f383 8810 	msr	PRIMASK, r3
}
 80113b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113ba:	f3ef 8310 	mrs	r3, PRIMASK
 80113be:	61fb      	str	r3, [r7, #28]
  return(result);
 80113c0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80113c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80113c4:	2301      	movs	r3, #1
 80113c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	f383 8810 	msr	PRIMASK, r3
}
 80113ce:	46c0      	nop			@ (mov r8, r8)
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	689a      	ldr	r2, [r3, #8]
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2140      	movs	r1, #64	@ 0x40
 80113dc:	430a      	orrs	r2, r1
 80113de:	609a      	str	r2, [r3, #8]
 80113e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e6:	f383 8810 	msr	PRIMASK, r3
}
 80113ea:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80113ec:	2300      	movs	r3, #0
}
 80113ee:	0018      	movs	r0, r3
 80113f0:	46bd      	mov	sp, r7
 80113f2:	b010      	add	sp, #64	@ 0x40
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	46c0      	nop			@ (mov r8, r8)
 80113f8:	080115d5 	.word	0x080115d5
 80113fc:	08011709 	.word	0x08011709
 8011400:	08011751 	.word	0x08011751

08011404 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b086      	sub	sp, #24
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801140c:	f3ef 8310 	mrs	r3, PRIMASK
 8011410:	60bb      	str	r3, [r7, #8]
  return(result);
 8011412:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011414:	617b      	str	r3, [r7, #20]
 8011416:	2301      	movs	r3, #1
 8011418:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f383 8810 	msr	PRIMASK, r3
}
 8011420:	46c0      	nop			@ (mov r8, r8)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	681a      	ldr	r2, [r3, #0]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	21c0      	movs	r1, #192	@ 0xc0
 801142e:	438a      	bics	r2, r1
 8011430:	601a      	str	r2, [r3, #0]
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	f383 8810 	msr	PRIMASK, r3
}
 801143c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2220      	movs	r2, #32
 8011442:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8011444:	46c0      	nop			@ (mov r8, r8)
 8011446:	46bd      	mov	sp, r7
 8011448:	b006      	add	sp, #24
 801144a:	bd80      	pop	{r7, pc}

0801144c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b08e      	sub	sp, #56	@ 0x38
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011454:	f3ef 8310 	mrs	r3, PRIMASK
 8011458:	617b      	str	r3, [r7, #20]
  return(result);
 801145a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801145c:	637b      	str	r3, [r7, #52]	@ 0x34
 801145e:	2301      	movs	r3, #1
 8011460:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	f383 8810 	msr	PRIMASK, r3
}
 8011468:	46c0      	nop			@ (mov r8, r8)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4926      	ldr	r1, [pc, #152]	@ (8011510 <UART_EndRxTransfer+0xc4>)
 8011476:	400a      	ands	r2, r1
 8011478:	601a      	str	r2, [r3, #0]
 801147a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801147c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	f383 8810 	msr	PRIMASK, r3
}
 8011484:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011486:	f3ef 8310 	mrs	r3, PRIMASK
 801148a:	623b      	str	r3, [r7, #32]
  return(result);
 801148c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801148e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011490:	2301      	movs	r3, #1
 8011492:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011496:	f383 8810 	msr	PRIMASK, r3
}
 801149a:	46c0      	nop			@ (mov r8, r8)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	689a      	ldr	r2, [r3, #8]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2101      	movs	r1, #1
 80114a8:	438a      	bics	r2, r1
 80114aa:	609a      	str	r2, [r3, #8]
 80114ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114b2:	f383 8810 	msr	PRIMASK, r3
}
 80114b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d118      	bne.n	80114f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114c0:	f3ef 8310 	mrs	r3, PRIMASK
 80114c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80114c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114ca:	2301      	movs	r3, #1
 80114cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f383 8810 	msr	PRIMASK, r3
}
 80114d4:	46c0      	nop			@ (mov r8, r8)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2110      	movs	r1, #16
 80114e2:	438a      	bics	r2, r1
 80114e4:	601a      	str	r2, [r3, #0]
 80114e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	f383 8810 	msr	PRIMASK, r3
}
 80114f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2280      	movs	r2, #128	@ 0x80
 80114f6:	2120      	movs	r1, #32
 80114f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2200      	movs	r2, #0
 80114fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8011506:	46c0      	nop			@ (mov r8, r8)
 8011508:	46bd      	mov	sp, r7
 801150a:	b00e      	add	sp, #56	@ 0x38
 801150c:	bd80      	pop	{r7, pc}
 801150e:	46c0      	nop			@ (mov r8, r8)
 8011510:	fffffedf 	.word	0xfffffedf

08011514 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b08c      	sub	sp, #48	@ 0x30
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011520:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	2220      	movs	r2, #32
 801152a:	4013      	ands	r3, r2
 801152c:	d135      	bne.n	801159a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011530:	2252      	movs	r2, #82	@ 0x52
 8011532:	2100      	movs	r1, #0
 8011534:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011536:	f3ef 8310 	mrs	r3, PRIMASK
 801153a:	60fb      	str	r3, [r7, #12]
  return(result);
 801153c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801153e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011540:	2301      	movs	r3, #1
 8011542:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	f383 8810 	msr	PRIMASK, r3
}
 801154a:	46c0      	nop			@ (mov r8, r8)
 801154c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	689a      	ldr	r2, [r3, #8]
 8011552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	2180      	movs	r1, #128	@ 0x80
 8011558:	438a      	bics	r2, r1
 801155a:	609a      	str	r2, [r3, #8]
 801155c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801155e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	f383 8810 	msr	PRIMASK, r3
}
 8011566:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011568:	f3ef 8310 	mrs	r3, PRIMASK
 801156c:	61bb      	str	r3, [r7, #24]
  return(result);
 801156e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011570:	627b      	str	r3, [r7, #36]	@ 0x24
 8011572:	2301      	movs	r3, #1
 8011574:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	f383 8810 	msr	PRIMASK, r3
}
 801157c:	46c0      	nop			@ (mov r8, r8)
 801157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2140      	movs	r1, #64	@ 0x40
 801158a:	430a      	orrs	r2, r1
 801158c:	601a      	str	r2, [r3, #0]
 801158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011590:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011592:	6a3b      	ldr	r3, [r7, #32]
 8011594:	f383 8810 	msr	PRIMASK, r3
}
 8011598:	e006      	b.n	80115a8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801159a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801159c:	228c      	movs	r2, #140	@ 0x8c
 801159e:	589b      	ldr	r3, [r3, r2]
 80115a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80115a2:	0010      	movs	r0, r2
 80115a4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80115a6:	46c0      	nop			@ (mov r8, r8)
 80115a8:	46c0      	nop			@ (mov r8, r8)
 80115aa:	46bd      	mov	sp, r7
 80115ac:	b00c      	add	sp, #48	@ 0x30
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2288      	movs	r2, #136	@ 0x88
 80115c2:	589b      	ldr	r3, [r3, r2]
 80115c4:	68fa      	ldr	r2, [r7, #12]
 80115c6:	0010      	movs	r0, r2
 80115c8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115ca:	46c0      	nop			@ (mov r8, r8)
 80115cc:	46bd      	mov	sp, r7
 80115ce:	b004      	add	sp, #16
 80115d0:	bd80      	pop	{r7, pc}
	...

080115d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b094      	sub	sp, #80	@ 0x50
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115e0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2220      	movs	r2, #32
 80115ea:	4013      	ands	r3, r2
 80115ec:	d16f      	bne.n	80116ce <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80115ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115f0:	225a      	movs	r2, #90	@ 0x5a
 80115f2:	2100      	movs	r1, #0
 80115f4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115f6:	f3ef 8310 	mrs	r3, PRIMASK
 80115fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80115fc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80115fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011600:	2301      	movs	r3, #1
 8011602:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	f383 8810 	msr	PRIMASK, r3
}
 801160a:	46c0      	nop			@ (mov r8, r8)
 801160c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	493b      	ldr	r1, [pc, #236]	@ (8011704 <UART_DMAReceiveCplt+0x130>)
 8011618:	400a      	ands	r2, r1
 801161a:	601a      	str	r2, [r3, #0]
 801161c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801161e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011620:	6a3b      	ldr	r3, [r7, #32]
 8011622:	f383 8810 	msr	PRIMASK, r3
}
 8011626:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011628:	f3ef 8310 	mrs	r3, PRIMASK
 801162c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011630:	647b      	str	r3, [r7, #68]	@ 0x44
 8011632:	2301      	movs	r3, #1
 8011634:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011638:	f383 8810 	msr	PRIMASK, r3
}
 801163c:	46c0      	nop			@ (mov r8, r8)
 801163e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	689a      	ldr	r2, [r3, #8]
 8011644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2101      	movs	r1, #1
 801164a:	438a      	bics	r2, r1
 801164c:	609a      	str	r2, [r3, #8]
 801164e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011650:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011654:	f383 8810 	msr	PRIMASK, r3
}
 8011658:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801165a:	f3ef 8310 	mrs	r3, PRIMASK
 801165e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8011660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011662:	643b      	str	r3, [r7, #64]	@ 0x40
 8011664:	2301      	movs	r3, #1
 8011666:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801166a:	f383 8810 	msr	PRIMASK, r3
}
 801166e:	46c0      	nop			@ (mov r8, r8)
 8011670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	689a      	ldr	r2, [r3, #8]
 8011676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	2140      	movs	r1, #64	@ 0x40
 801167c:	438a      	bics	r2, r1
 801167e:	609a      	str	r2, [r3, #8]
 8011680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011682:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011686:	f383 8810 	msr	PRIMASK, r3
}
 801168a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801168c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801168e:	2280      	movs	r2, #128	@ 0x80
 8011690:	2120      	movs	r1, #32
 8011692:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011698:	2b01      	cmp	r3, #1
 801169a:	d118      	bne.n	80116ce <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801169c:	f3ef 8310 	mrs	r3, PRIMASK
 80116a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80116a2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80116a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80116a6:	2301      	movs	r3, #1
 80116a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	f383 8810 	msr	PRIMASK, r3
}
 80116b0:	46c0      	nop			@ (mov r8, r8)
 80116b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2110      	movs	r1, #16
 80116be:	438a      	bics	r2, r1
 80116c0:	601a      	str	r2, [r3, #0]
 80116c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	f383 8810 	msr	PRIMASK, r3
}
 80116cc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80116ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116d0:	2200      	movs	r2, #0
 80116d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d109      	bne.n	80116f0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80116dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116de:	22ac      	movs	r2, #172	@ 0xac
 80116e0:	589b      	ldr	r3, [r3, r2]
 80116e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116e4:	2158      	movs	r1, #88	@ 0x58
 80116e6:	5a51      	ldrh	r1, [r2, r1]
 80116e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116ea:	0010      	movs	r0, r2
 80116ec:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80116ee:	e005      	b.n	80116fc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80116f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116f2:	2294      	movs	r2, #148	@ 0x94
 80116f4:	589b      	ldr	r3, [r3, r2]
 80116f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116f8:	0010      	movs	r0, r2
 80116fa:	4798      	blx	r3
}
 80116fc:	46c0      	nop			@ (mov r8, r8)
 80116fe:	46bd      	mov	sp, r7
 8011700:	b014      	add	sp, #80	@ 0x50
 8011702:	bd80      	pop	{r7, pc}
 8011704:	fffffeff 	.word	0xfffffeff

08011708 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b084      	sub	sp, #16
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011714:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2201      	movs	r2, #1
 801171a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011720:	2b01      	cmp	r3, #1
 8011722:	d10b      	bne.n	801173c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	22ac      	movs	r2, #172	@ 0xac
 8011728:	589b      	ldr	r3, [r3, r2]
 801172a:	68fa      	ldr	r2, [r7, #12]
 801172c:	2158      	movs	r1, #88	@ 0x58
 801172e:	5a52      	ldrh	r2, [r2, r1]
 8011730:	0852      	lsrs	r2, r2, #1
 8011732:	b291      	uxth	r1, r2
 8011734:	68fa      	ldr	r2, [r7, #12]
 8011736:	0010      	movs	r0, r2
 8011738:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801173a:	e005      	b.n	8011748 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	2290      	movs	r2, #144	@ 0x90
 8011740:	589b      	ldr	r3, [r3, r2]
 8011742:	68fa      	ldr	r2, [r7, #12]
 8011744:	0010      	movs	r0, r2
 8011746:	4798      	blx	r3
}
 8011748:	46c0      	nop			@ (mov r8, r8)
 801174a:	46bd      	mov	sp, r7
 801174c:	b004      	add	sp, #16
 801174e:	bd80      	pop	{r7, pc}

08011750 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b086      	sub	sp, #24
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801175c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011762:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	2280      	movs	r2, #128	@ 0x80
 8011768:	589b      	ldr	r3, [r3, r2]
 801176a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	689b      	ldr	r3, [r3, #8]
 8011772:	2280      	movs	r2, #128	@ 0x80
 8011774:	4013      	ands	r3, r2
 8011776:	2b80      	cmp	r3, #128	@ 0x80
 8011778:	d10a      	bne.n	8011790 <UART_DMAError+0x40>
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	2b21      	cmp	r3, #33	@ 0x21
 801177e:	d107      	bne.n	8011790 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	2252      	movs	r2, #82	@ 0x52
 8011784:	2100      	movs	r1, #0
 8011786:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	0018      	movs	r0, r3
 801178c:	f7ff fe3a 	bl	8011404 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011790:	697b      	ldr	r3, [r7, #20]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	2240      	movs	r2, #64	@ 0x40
 8011798:	4013      	ands	r3, r2
 801179a:	2b40      	cmp	r3, #64	@ 0x40
 801179c:	d10a      	bne.n	80117b4 <UART_DMAError+0x64>
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2b22      	cmp	r3, #34	@ 0x22
 80117a2:	d107      	bne.n	80117b4 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	225a      	movs	r2, #90	@ 0x5a
 80117a8:	2100      	movs	r1, #0
 80117aa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	0018      	movs	r0, r3
 80117b0:	f7ff fe4c 	bl	801144c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	2284      	movs	r2, #132	@ 0x84
 80117b8:	589b      	ldr	r3, [r3, r2]
 80117ba:	2210      	movs	r2, #16
 80117bc:	431a      	orrs	r2, r3
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	2184      	movs	r1, #132	@ 0x84
 80117c2:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	2298      	movs	r2, #152	@ 0x98
 80117c8:	589b      	ldr	r3, [r3, r2]
 80117ca:	697a      	ldr	r2, [r7, #20]
 80117cc:	0010      	movs	r0, r2
 80117ce:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117d0:	46c0      	nop			@ (mov r8, r8)
 80117d2:	46bd      	mov	sp, r7
 80117d4:	b006      	add	sp, #24
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	225a      	movs	r2, #90	@ 0x5a
 80117ea:	2100      	movs	r1, #0
 80117ec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2252      	movs	r2, #82	@ 0x52
 80117f2:	2100      	movs	r1, #0
 80117f4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2298      	movs	r2, #152	@ 0x98
 80117fa:	589b      	ldr	r3, [r3, r2]
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	0010      	movs	r0, r2
 8011800:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011802:	46c0      	nop			@ (mov r8, r8)
 8011804:	46bd      	mov	sp, r7
 8011806:	b004      	add	sp, #16
 8011808:	bd80      	pop	{r7, pc}

0801180a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b086      	sub	sp, #24
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011812:	f3ef 8310 	mrs	r3, PRIMASK
 8011816:	60bb      	str	r3, [r7, #8]
  return(result);
 8011818:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801181a:	617b      	str	r3, [r7, #20]
 801181c:	2301      	movs	r3, #1
 801181e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f383 8810 	msr	PRIMASK, r3
}
 8011826:	46c0      	nop			@ (mov r8, r8)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2140      	movs	r1, #64	@ 0x40
 8011834:	438a      	bics	r2, r1
 8011836:	601a      	str	r2, [r3, #0]
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	f383 8810 	msr	PRIMASK, r3
}
 8011842:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2220      	movs	r2, #32
 8011848:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2200      	movs	r2, #0
 801184e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	228c      	movs	r2, #140	@ 0x8c
 8011854:	589b      	ldr	r3, [r3, r2]
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	0010      	movs	r0, r2
 801185a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801185c:	46c0      	nop			@ (mov r8, r8)
 801185e:	46bd      	mov	sp, r7
 8011860:	b006      	add	sp, #24
 8011862:	bd80      	pop	{r7, pc}

08011864 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801186c:	46c0      	nop			@ (mov r8, r8)
 801186e:	46bd      	mov	sp, r7
 8011870:	b002      	add	sp, #8
 8011872:	bd80      	pop	{r7, pc}

08011874 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2244      	movs	r2, #68	@ 0x44
 8011880:	2100      	movs	r1, #0
 8011882:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011884:	4b05      	ldr	r3, [pc, #20]	@ (801189c <USB_EnableGlobalInt+0x28>)
 8011886:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	b299      	uxth	r1, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2240      	movs	r2, #64	@ 0x40
 8011890:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011892:	2300      	movs	r3, #0
}
 8011894:	0018      	movs	r0, r3
 8011896:	46bd      	mov	sp, r7
 8011898:	b004      	add	sp, #16
 801189a:	bd80      	pop	{r7, pc}
 801189c:	0000bf80 	.word	0x0000bf80

080118a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80118a8:	4b09      	ldr	r3, [pc, #36]	@ (80118d0 <USB_DisableGlobalInt+0x30>)
 80118aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2240      	movs	r2, #64	@ 0x40
 80118b0:	5a9b      	ldrh	r3, [r3, r2]
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	b292      	uxth	r2, r2
 80118b8:	43d2      	mvns	r2, r2
 80118ba:	b292      	uxth	r2, r2
 80118bc:	4013      	ands	r3, r2
 80118be:	b299      	uxth	r1, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2240      	movs	r2, #64	@ 0x40
 80118c4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80118c6:	2300      	movs	r3, #0
}
 80118c8:	0018      	movs	r0, r3
 80118ca:	46bd      	mov	sp, r7
 80118cc:	b004      	add	sp, #16
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	0000bf80 	.word	0x0000bf80

080118d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80118d4:	b084      	sub	sp, #16
 80118d6:	b590      	push	{r4, r7, lr}
 80118d8:	b083      	sub	sp, #12
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
 80118de:	2004      	movs	r0, #4
 80118e0:	2410      	movs	r4, #16
 80118e2:	1900      	adds	r0, r0, r4
 80118e4:	2408      	movs	r4, #8
 80118e6:	46a4      	mov	ip, r4
 80118e8:	44bc      	add	ip, r7
 80118ea:	4460      	add	r0, ip
 80118ec:	6001      	str	r1, [r0, #0]
 80118ee:	6042      	str	r2, [r0, #4]
 80118f0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2240      	movs	r2, #64	@ 0x40
 80118f6:	2101      	movs	r1, #1
 80118f8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2240      	movs	r2, #64	@ 0x40
 80118fe:	2100      	movs	r1, #0
 8011900:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2244      	movs	r2, #68	@ 0x44
 8011906:	2100      	movs	r1, #0
 8011908:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2250      	movs	r2, #80	@ 0x50
 801190e:	2100      	movs	r1, #0
 8011910:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011912:	2300      	movs	r3, #0
}
 8011914:	0018      	movs	r0, r3
 8011916:	46bd      	mov	sp, r7
 8011918:	b003      	add	sp, #12
 801191a:	bc90      	pop	{r4, r7}
 801191c:	bc08      	pop	{r3}
 801191e:	b004      	add	sp, #16
 8011920:	4718      	bx	r3
	...

08011924 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b09c      	sub	sp, #112	@ 0x70
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801192e:	236f      	movs	r3, #111	@ 0x6f
 8011930:	18fb      	adds	r3, r7, r3
 8011932:	2200      	movs	r2, #0
 8011934:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011936:	687a      	ldr	r2, [r7, #4]
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	18d3      	adds	r3, r2, r3
 8011940:	881b      	ldrh	r3, [r3, #0]
 8011942:	b29a      	uxth	r2, r3
 8011944:	236c      	movs	r3, #108	@ 0x6c
 8011946:	18fb      	adds	r3, r7, r3
 8011948:	49a3      	ldr	r1, [pc, #652]	@ (8011bd8 <USB_ActivateEndpoint+0x2b4>)
 801194a:	400a      	ands	r2, r1
 801194c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	78db      	ldrb	r3, [r3, #3]
 8011952:	2b03      	cmp	r3, #3
 8011954:	d017      	beq.n	8011986 <USB_ActivateEndpoint+0x62>
 8011956:	dc28      	bgt.n	80119aa <USB_ActivateEndpoint+0x86>
 8011958:	2b02      	cmp	r3, #2
 801195a:	d00e      	beq.n	801197a <USB_ActivateEndpoint+0x56>
 801195c:	dc25      	bgt.n	80119aa <USB_ActivateEndpoint+0x86>
 801195e:	2b00      	cmp	r3, #0
 8011960:	d002      	beq.n	8011968 <USB_ActivateEndpoint+0x44>
 8011962:	2b01      	cmp	r3, #1
 8011964:	d018      	beq.n	8011998 <USB_ActivateEndpoint+0x74>
 8011966:	e020      	b.n	80119aa <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011968:	226c      	movs	r2, #108	@ 0x6c
 801196a:	18bb      	adds	r3, r7, r2
 801196c:	18ba      	adds	r2, r7, r2
 801196e:	8812      	ldrh	r2, [r2, #0]
 8011970:	2180      	movs	r1, #128	@ 0x80
 8011972:	0089      	lsls	r1, r1, #2
 8011974:	430a      	orrs	r2, r1
 8011976:	801a      	strh	r2, [r3, #0]
      break;
 8011978:	e01c      	b.n	80119b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801197a:	226c      	movs	r2, #108	@ 0x6c
 801197c:	18bb      	adds	r3, r7, r2
 801197e:	18ba      	adds	r2, r7, r2
 8011980:	8812      	ldrh	r2, [r2, #0]
 8011982:	801a      	strh	r2, [r3, #0]
      break;
 8011984:	e016      	b.n	80119b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011986:	226c      	movs	r2, #108	@ 0x6c
 8011988:	18bb      	adds	r3, r7, r2
 801198a:	18ba      	adds	r2, r7, r2
 801198c:	8812      	ldrh	r2, [r2, #0]
 801198e:	21c0      	movs	r1, #192	@ 0xc0
 8011990:	00c9      	lsls	r1, r1, #3
 8011992:	430a      	orrs	r2, r1
 8011994:	801a      	strh	r2, [r3, #0]
      break;
 8011996:	e00d      	b.n	80119b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011998:	226c      	movs	r2, #108	@ 0x6c
 801199a:	18bb      	adds	r3, r7, r2
 801199c:	18ba      	adds	r2, r7, r2
 801199e:	8812      	ldrh	r2, [r2, #0]
 80119a0:	2180      	movs	r1, #128	@ 0x80
 80119a2:	00c9      	lsls	r1, r1, #3
 80119a4:	430a      	orrs	r2, r1
 80119a6:	801a      	strh	r2, [r3, #0]
      break;
 80119a8:	e004      	b.n	80119b4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80119aa:	236f      	movs	r3, #111	@ 0x6f
 80119ac:	18fb      	adds	r3, r7, r3
 80119ae:	2201      	movs	r2, #1
 80119b0:	701a      	strb	r2, [r3, #0]
      break;
 80119b2:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	009b      	lsls	r3, r3, #2
 80119bc:	18d3      	adds	r3, r2, r3
 80119be:	226c      	movs	r2, #108	@ 0x6c
 80119c0:	18ba      	adds	r2, r7, r2
 80119c2:	8812      	ldrh	r2, [r2, #0]
 80119c4:	4985      	ldr	r1, [pc, #532]	@ (8011bdc <USB_ActivateEndpoint+0x2b8>)
 80119c6:	430a      	orrs	r2, r1
 80119c8:	b292      	uxth	r2, r2
 80119ca:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	18d3      	adds	r3, r2, r3
 80119d6:	881b      	ldrh	r3, [r3, #0]
 80119d8:	b29b      	uxth	r3, r3
 80119da:	b21b      	sxth	r3, r3
 80119dc:	4a80      	ldr	r2, [pc, #512]	@ (8011be0 <USB_ActivateEndpoint+0x2bc>)
 80119de:	4013      	ands	r3, r2
 80119e0:	b21a      	sxth	r2, r3
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	b21b      	sxth	r3, r3
 80119e8:	4313      	orrs	r3, r2
 80119ea:	b21a      	sxth	r2, r3
 80119ec:	2166      	movs	r1, #102	@ 0x66
 80119ee:	187b      	adds	r3, r7, r1
 80119f0:	801a      	strh	r2, [r3, #0]
 80119f2:	687a      	ldr	r2, [r7, #4]
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	18d3      	adds	r3, r2, r3
 80119fc:	187a      	adds	r2, r7, r1
 80119fe:	8812      	ldrh	r2, [r2, #0]
 8011a00:	4976      	ldr	r1, [pc, #472]	@ (8011bdc <USB_ActivateEndpoint+0x2b8>)
 8011a02:	430a      	orrs	r2, r1
 8011a04:	b292      	uxth	r2, r2
 8011a06:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	7b1b      	ldrb	r3, [r3, #12]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d000      	beq.n	8011a12 <USB_ActivateEndpoint+0xee>
 8011a10:	e178      	b.n	8011d04 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	785b      	ldrb	r3, [r3, #1]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d100      	bne.n	8011a1c <USB_ActivateEndpoint+0xf8>
 8011a1a:	e07a      	b.n	8011b12 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	61bb      	str	r3, [r7, #24]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2250      	movs	r2, #80	@ 0x50
 8011a24:	5a9b      	ldrh	r3, [r3, r2]
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	001a      	movs	r2, r3
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	189b      	adds	r3, r3, r2
 8011a2e:	61bb      	str	r3, [r7, #24]
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	00da      	lsls	r2, r3, #3
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	18d3      	adds	r3, r2, r3
 8011a3a:	2280      	movs	r2, #128	@ 0x80
 8011a3c:	00d2      	lsls	r2, r2, #3
 8011a3e:	4694      	mov	ip, r2
 8011a40:	4463      	add	r3, ip
 8011a42:	617b      	str	r3, [r7, #20]
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	88db      	ldrh	r3, [r3, #6]
 8011a48:	085b      	lsrs	r3, r3, #1
 8011a4a:	b29b      	uxth	r3, r3
 8011a4c:	18db      	adds	r3, r3, r3
 8011a4e:	b29a      	uxth	r2, r3
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	18d2      	adds	r2, r2, r3
 8011a5e:	2112      	movs	r1, #18
 8011a60:	187b      	adds	r3, r7, r1
 8011a62:	8812      	ldrh	r2, [r2, #0]
 8011a64:	801a      	strh	r2, [r3, #0]
 8011a66:	187b      	adds	r3, r7, r1
 8011a68:	881b      	ldrh	r3, [r3, #0]
 8011a6a:	2240      	movs	r2, #64	@ 0x40
 8011a6c:	4013      	ands	r3, r2
 8011a6e:	d016      	beq.n	8011a9e <USB_ActivateEndpoint+0x17a>
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	18d3      	adds	r3, r2, r3
 8011a7a:	881b      	ldrh	r3, [r3, #0]
 8011a7c:	b29a      	uxth	r2, r3
 8011a7e:	2010      	movs	r0, #16
 8011a80:	183b      	adds	r3, r7, r0
 8011a82:	4957      	ldr	r1, [pc, #348]	@ (8011be0 <USB_ActivateEndpoint+0x2bc>)
 8011a84:	400a      	ands	r2, r1
 8011a86:	801a      	strh	r2, [r3, #0]
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	781b      	ldrb	r3, [r3, #0]
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	18d3      	adds	r3, r2, r3
 8011a92:	183a      	adds	r2, r7, r0
 8011a94:	8812      	ldrh	r2, [r2, #0]
 8011a96:	4953      	ldr	r1, [pc, #332]	@ (8011be4 <USB_ActivateEndpoint+0x2c0>)
 8011a98:	430a      	orrs	r2, r1
 8011a9a:	b292      	uxth	r2, r2
 8011a9c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	78db      	ldrb	r3, [r3, #3]
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d01d      	beq.n	8011ae2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011aa6:	687a      	ldr	r2, [r7, #4]
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	009b      	lsls	r3, r3, #2
 8011aae:	18d3      	adds	r3, r2, r3
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	200c      	movs	r0, #12
 8011ab6:	183b      	adds	r3, r7, r0
 8011ab8:	494b      	ldr	r1, [pc, #300]	@ (8011be8 <USB_ActivateEndpoint+0x2c4>)
 8011aba:	400a      	ands	r2, r1
 8011abc:	801a      	strh	r2, [r3, #0]
 8011abe:	183b      	adds	r3, r7, r0
 8011ac0:	183a      	adds	r2, r7, r0
 8011ac2:	8812      	ldrh	r2, [r2, #0]
 8011ac4:	2120      	movs	r1, #32
 8011ac6:	404a      	eors	r2, r1
 8011ac8:	801a      	strh	r2, [r3, #0]
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	18d3      	adds	r3, r2, r3
 8011ad4:	183a      	adds	r2, r7, r0
 8011ad6:	8812      	ldrh	r2, [r2, #0]
 8011ad8:	4940      	ldr	r1, [pc, #256]	@ (8011bdc <USB_ActivateEndpoint+0x2b8>)
 8011ada:	430a      	orrs	r2, r1
 8011adc:	b292      	uxth	r2, r2
 8011ade:	801a      	strh	r2, [r3, #0]
 8011ae0:	e2b4      	b.n	801204c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	009b      	lsls	r3, r3, #2
 8011aea:	18d3      	adds	r3, r2, r3
 8011aec:	881b      	ldrh	r3, [r3, #0]
 8011aee:	b29a      	uxth	r2, r3
 8011af0:	200e      	movs	r0, #14
 8011af2:	183b      	adds	r3, r7, r0
 8011af4:	493c      	ldr	r1, [pc, #240]	@ (8011be8 <USB_ActivateEndpoint+0x2c4>)
 8011af6:	400a      	ands	r2, r1
 8011af8:	801a      	strh	r2, [r3, #0]
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	18d3      	adds	r3, r2, r3
 8011b04:	183a      	adds	r2, r7, r0
 8011b06:	8812      	ldrh	r2, [r2, #0]
 8011b08:	4934      	ldr	r1, [pc, #208]	@ (8011bdc <USB_ActivateEndpoint+0x2b8>)
 8011b0a:	430a      	orrs	r2, r1
 8011b0c:	b292      	uxth	r2, r2
 8011b0e:	801a      	strh	r2, [r3, #0]
 8011b10:	e29c      	b.n	801204c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2250      	movs	r2, #80	@ 0x50
 8011b1a:	5a9b      	ldrh	r3, [r3, r2]
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	001a      	movs	r2, r3
 8011b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b22:	189b      	adds	r3, r3, r2
 8011b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	00da      	lsls	r2, r3, #3
 8011b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b2e:	18d3      	adds	r3, r2, r3
 8011b30:	4a2e      	ldr	r2, [pc, #184]	@ (8011bec <USB_ActivateEndpoint+0x2c8>)
 8011b32:	4694      	mov	ip, r2
 8011b34:	4463      	add	r3, ip
 8011b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	88db      	ldrh	r3, [r3, #6]
 8011b3c:	085b      	lsrs	r3, r3, #1
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	18db      	adds	r3, r3, r3
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2250      	movs	r2, #80	@ 0x50
 8011b50:	5a9b      	ldrh	r3, [r3, r2]
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	001a      	movs	r2, r3
 8011b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b58:	189b      	adds	r3, r3, r2
 8011b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	00da      	lsls	r2, r3, #3
 8011b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b64:	18d3      	adds	r3, r2, r3
 8011b66:	4a22      	ldr	r2, [pc, #136]	@ (8011bf0 <USB_ActivateEndpoint+0x2cc>)
 8011b68:	4694      	mov	ip, r2
 8011b6a:	4463      	add	r3, ip
 8011b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b70:	881b      	ldrh	r3, [r3, #0]
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	059b      	lsls	r3, r3, #22
 8011b76:	0d9b      	lsrs	r3, r3, #22
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b7c:	801a      	strh	r2, [r3, #0]
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	691b      	ldr	r3, [r3, #16]
 8011b82:	2b3e      	cmp	r3, #62	@ 0x3e
 8011b84:	d91a      	bls.n	8011bbc <USB_ActivateEndpoint+0x298>
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	691b      	ldr	r3, [r3, #16]
 8011b8a:	095b      	lsrs	r3, r3, #5
 8011b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	691b      	ldr	r3, [r3, #16]
 8011b92:	221f      	movs	r2, #31
 8011b94:	4013      	ands	r3, r2
 8011b96:	d102      	bne.n	8011b9e <USB_ActivateEndpoint+0x27a>
 8011b98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b9a:	3b01      	subs	r3, #1
 8011b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba0:	881b      	ldrh	r3, [r3, #0]
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	029b      	lsls	r3, r3, #10
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	4313      	orrs	r3, r2
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	4a10      	ldr	r2, [pc, #64]	@ (8011bf4 <USB_ActivateEndpoint+0x2d0>)
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bb8:	801a      	strh	r2, [r3, #0]
 8011bba:	e034      	b.n	8011c26 <USB_ActivateEndpoint+0x302>
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	691b      	ldr	r3, [r3, #16]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d119      	bne.n	8011bf8 <USB_ActivateEndpoint+0x2d4>
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc6:	881b      	ldrh	r3, [r3, #0]
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	4a0a      	ldr	r2, [pc, #40]	@ (8011bf4 <USB_ActivateEndpoint+0x2d0>)
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	b29a      	uxth	r2, r3
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd2:	801a      	strh	r2, [r3, #0]
 8011bd4:	e027      	b.n	8011c26 <USB_ActivateEndpoint+0x302>
 8011bd6:	46c0      	nop			@ (mov r8, r8)
 8011bd8:	ffff898f 	.word	0xffff898f
 8011bdc:	ffff8080 	.word	0xffff8080
 8011be0:	ffff8f8f 	.word	0xffff8f8f
 8011be4:	ffff80c0 	.word	0xffff80c0
 8011be8:	ffff8fbf 	.word	0xffff8fbf
 8011bec:	00000404 	.word	0x00000404
 8011bf0:	00000406 	.word	0x00000406
 8011bf4:	ffff8000 	.word	0xffff8000
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	691b      	ldr	r3, [r3, #16]
 8011bfc:	085b      	lsrs	r3, r3, #1
 8011bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	691b      	ldr	r3, [r3, #16]
 8011c04:	2201      	movs	r2, #1
 8011c06:	4013      	ands	r3, r2
 8011c08:	d002      	beq.n	8011c10 <USB_ActivateEndpoint+0x2ec>
 8011c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c12:	881b      	ldrh	r3, [r3, #0]
 8011c14:	b29a      	uxth	r2, r3
 8011c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	029b      	lsls	r3, r3, #10
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	4313      	orrs	r3, r2
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	18d2      	adds	r2, r2, r3
 8011c30:	2122      	movs	r1, #34	@ 0x22
 8011c32:	187b      	adds	r3, r7, r1
 8011c34:	8812      	ldrh	r2, [r2, #0]
 8011c36:	801a      	strh	r2, [r3, #0]
 8011c38:	187b      	adds	r3, r7, r1
 8011c3a:	881a      	ldrh	r2, [r3, #0]
 8011c3c:	2380      	movs	r3, #128	@ 0x80
 8011c3e:	01db      	lsls	r3, r3, #7
 8011c40:	4013      	ands	r3, r2
 8011c42:	d016      	beq.n	8011c72 <USB_ActivateEndpoint+0x34e>
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	18d3      	adds	r3, r2, r3
 8011c4e:	881b      	ldrh	r3, [r3, #0]
 8011c50:	b29a      	uxth	r2, r3
 8011c52:	2020      	movs	r0, #32
 8011c54:	183b      	adds	r3, r7, r0
 8011c56:	49dd      	ldr	r1, [pc, #884]	@ (8011fcc <USB_ActivateEndpoint+0x6a8>)
 8011c58:	400a      	ands	r2, r1
 8011c5a:	801a      	strh	r2, [r3, #0]
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	009b      	lsls	r3, r3, #2
 8011c64:	18d3      	adds	r3, r2, r3
 8011c66:	183a      	adds	r2, r7, r0
 8011c68:	8812      	ldrh	r2, [r2, #0]
 8011c6a:	49d9      	ldr	r1, [pc, #868]	@ (8011fd0 <USB_ActivateEndpoint+0x6ac>)
 8011c6c:	430a      	orrs	r2, r1
 8011c6e:	b292      	uxth	r2, r2
 8011c70:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8011c72:	683b      	ldr	r3, [r7, #0]
 8011c74:	781b      	ldrb	r3, [r3, #0]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d125      	bne.n	8011cc6 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011c7a:	687a      	ldr	r2, [r7, #4]
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	781b      	ldrb	r3, [r3, #0]
 8011c80:	009b      	lsls	r3, r3, #2
 8011c82:	18d3      	adds	r3, r2, r3
 8011c84:	881b      	ldrh	r3, [r3, #0]
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	201c      	movs	r0, #28
 8011c8a:	183b      	adds	r3, r7, r0
 8011c8c:	49d1      	ldr	r1, [pc, #836]	@ (8011fd4 <USB_ActivateEndpoint+0x6b0>)
 8011c8e:	400a      	ands	r2, r1
 8011c90:	801a      	strh	r2, [r3, #0]
 8011c92:	183b      	adds	r3, r7, r0
 8011c94:	183a      	adds	r2, r7, r0
 8011c96:	8812      	ldrh	r2, [r2, #0]
 8011c98:	2180      	movs	r1, #128	@ 0x80
 8011c9a:	0149      	lsls	r1, r1, #5
 8011c9c:	404a      	eors	r2, r1
 8011c9e:	801a      	strh	r2, [r3, #0]
 8011ca0:	183b      	adds	r3, r7, r0
 8011ca2:	183a      	adds	r2, r7, r0
 8011ca4:	8812      	ldrh	r2, [r2, #0]
 8011ca6:	2180      	movs	r1, #128	@ 0x80
 8011ca8:	0189      	lsls	r1, r1, #6
 8011caa:	404a      	eors	r2, r1
 8011cac:	801a      	strh	r2, [r3, #0]
 8011cae:	687a      	ldr	r2, [r7, #4]
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	009b      	lsls	r3, r3, #2
 8011cb6:	18d3      	adds	r3, r2, r3
 8011cb8:	183a      	adds	r2, r7, r0
 8011cba:	8812      	ldrh	r2, [r2, #0]
 8011cbc:	49c6      	ldr	r1, [pc, #792]	@ (8011fd8 <USB_ActivateEndpoint+0x6b4>)
 8011cbe:	430a      	orrs	r2, r1
 8011cc0:	b292      	uxth	r2, r2
 8011cc2:	801a      	strh	r2, [r3, #0]
 8011cc4:	e1c2      	b.n	801204c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011cc6:	687a      	ldr	r2, [r7, #4]
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	18d3      	adds	r3, r2, r3
 8011cd0:	881b      	ldrh	r3, [r3, #0]
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	201e      	movs	r0, #30
 8011cd6:	183b      	adds	r3, r7, r0
 8011cd8:	49be      	ldr	r1, [pc, #760]	@ (8011fd4 <USB_ActivateEndpoint+0x6b0>)
 8011cda:	400a      	ands	r2, r1
 8011cdc:	801a      	strh	r2, [r3, #0]
 8011cde:	183b      	adds	r3, r7, r0
 8011ce0:	183a      	adds	r2, r7, r0
 8011ce2:	8812      	ldrh	r2, [r2, #0]
 8011ce4:	2180      	movs	r1, #128	@ 0x80
 8011ce6:	0189      	lsls	r1, r1, #6
 8011ce8:	404a      	eors	r2, r1
 8011cea:	801a      	strh	r2, [r3, #0]
 8011cec:	687a      	ldr	r2, [r7, #4]
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	18d3      	adds	r3, r2, r3
 8011cf6:	183a      	adds	r2, r7, r0
 8011cf8:	8812      	ldrh	r2, [r2, #0]
 8011cfa:	49b7      	ldr	r1, [pc, #732]	@ (8011fd8 <USB_ActivateEndpoint+0x6b4>)
 8011cfc:	430a      	orrs	r2, r1
 8011cfe:	b292      	uxth	r2, r2
 8011d00:	801a      	strh	r2, [r3, #0]
 8011d02:	e1a3      	b.n	801204c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	78db      	ldrb	r3, [r3, #3]
 8011d08:	2b02      	cmp	r3, #2
 8011d0a:	d117      	bne.n	8011d3c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	18d3      	adds	r3, r2, r3
 8011d16:	881b      	ldrh	r3, [r3, #0]
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	2062      	movs	r0, #98	@ 0x62
 8011d1c:	183b      	adds	r3, r7, r0
 8011d1e:	49ab      	ldr	r1, [pc, #684]	@ (8011fcc <USB_ActivateEndpoint+0x6a8>)
 8011d20:	400a      	ands	r2, r1
 8011d22:	801a      	strh	r2, [r3, #0]
 8011d24:	687a      	ldr	r2, [r7, #4]
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	18d3      	adds	r3, r2, r3
 8011d2e:	183a      	adds	r2, r7, r0
 8011d30:	8812      	ldrh	r2, [r2, #0]
 8011d32:	49aa      	ldr	r1, [pc, #680]	@ (8011fdc <USB_ActivateEndpoint+0x6b8>)
 8011d34:	430a      	orrs	r2, r1
 8011d36:	b292      	uxth	r2, r2
 8011d38:	801a      	strh	r2, [r3, #0]
 8011d3a:	e016      	b.n	8011d6a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011d3c:	687a      	ldr	r2, [r7, #4]
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	18d3      	adds	r3, r2, r3
 8011d46:	881b      	ldrh	r3, [r3, #0]
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	2064      	movs	r0, #100	@ 0x64
 8011d4c:	183b      	adds	r3, r7, r0
 8011d4e:	49a4      	ldr	r1, [pc, #656]	@ (8011fe0 <USB_ActivateEndpoint+0x6bc>)
 8011d50:	400a      	ands	r2, r1
 8011d52:	801a      	strh	r2, [r3, #0]
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	009b      	lsls	r3, r3, #2
 8011d5c:	18d3      	adds	r3, r2, r3
 8011d5e:	183a      	adds	r2, r7, r0
 8011d60:	8812      	ldrh	r2, [r2, #0]
 8011d62:	499d      	ldr	r1, [pc, #628]	@ (8011fd8 <USB_ActivateEndpoint+0x6b4>)
 8011d64:	430a      	orrs	r2, r1
 8011d66:	b292      	uxth	r2, r2
 8011d68:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2250      	movs	r2, #80	@ 0x50
 8011d72:	5a9b      	ldrh	r3, [r3, r2]
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	001a      	movs	r2, r3
 8011d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d7a:	189b      	adds	r3, r3, r2
 8011d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	00da      	lsls	r2, r3, #3
 8011d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d86:	18d3      	adds	r3, r2, r3
 8011d88:	2280      	movs	r2, #128	@ 0x80
 8011d8a:	00d2      	lsls	r2, r2, #3
 8011d8c:	4694      	mov	ip, r2
 8011d8e:	4463      	add	r3, ip
 8011d90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	891b      	ldrh	r3, [r3, #8]
 8011d96:	085b      	lsrs	r3, r3, #1
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	18db      	adds	r3, r3, r3
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011da0:	801a      	strh	r2, [r3, #0]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	657b      	str	r3, [r7, #84]	@ 0x54
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2250      	movs	r2, #80	@ 0x50
 8011daa:	5a9b      	ldrh	r3, [r3, r2]
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	001a      	movs	r2, r3
 8011db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011db2:	189b      	adds	r3, r3, r2
 8011db4:	657b      	str	r3, [r7, #84]	@ 0x54
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	00da      	lsls	r2, r3, #3
 8011dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dbe:	18d3      	adds	r3, r2, r3
 8011dc0:	4a88      	ldr	r2, [pc, #544]	@ (8011fe4 <USB_ActivateEndpoint+0x6c0>)
 8011dc2:	4694      	mov	ip, r2
 8011dc4:	4463      	add	r3, ip
 8011dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	895b      	ldrh	r3, [r3, #10]
 8011dcc:	085b      	lsrs	r3, r3, #1
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	18db      	adds	r3, r3, r3
 8011dd2:	b29a      	uxth	r2, r3
 8011dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dd6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	785b      	ldrb	r3, [r3, #1]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d000      	beq.n	8011de2 <USB_ActivateEndpoint+0x4be>
 8011de0:	e087      	b.n	8011ef2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	009b      	lsls	r3, r3, #2
 8011dea:	18d2      	adds	r2, r2, r3
 8011dec:	2140      	movs	r1, #64	@ 0x40
 8011dee:	187b      	adds	r3, r7, r1
 8011df0:	8812      	ldrh	r2, [r2, #0]
 8011df2:	801a      	strh	r2, [r3, #0]
 8011df4:	187b      	adds	r3, r7, r1
 8011df6:	881a      	ldrh	r2, [r3, #0]
 8011df8:	2380      	movs	r3, #128	@ 0x80
 8011dfa:	01db      	lsls	r3, r3, #7
 8011dfc:	4013      	ands	r3, r2
 8011dfe:	d016      	beq.n	8011e2e <USB_ActivateEndpoint+0x50a>
 8011e00:	687a      	ldr	r2, [r7, #4]
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	009b      	lsls	r3, r3, #2
 8011e08:	18d3      	adds	r3, r2, r3
 8011e0a:	881b      	ldrh	r3, [r3, #0]
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	203e      	movs	r0, #62	@ 0x3e
 8011e10:	183b      	adds	r3, r7, r0
 8011e12:	496e      	ldr	r1, [pc, #440]	@ (8011fcc <USB_ActivateEndpoint+0x6a8>)
 8011e14:	400a      	ands	r2, r1
 8011e16:	801a      	strh	r2, [r3, #0]
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	009b      	lsls	r3, r3, #2
 8011e20:	18d3      	adds	r3, r2, r3
 8011e22:	183a      	adds	r2, r7, r0
 8011e24:	8812      	ldrh	r2, [r2, #0]
 8011e26:	496a      	ldr	r1, [pc, #424]	@ (8011fd0 <USB_ActivateEndpoint+0x6ac>)
 8011e28:	430a      	orrs	r2, r1
 8011e2a:	b292      	uxth	r2, r2
 8011e2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011e2e:	687a      	ldr	r2, [r7, #4]
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	009b      	lsls	r3, r3, #2
 8011e36:	18d2      	adds	r2, r2, r3
 8011e38:	213c      	movs	r1, #60	@ 0x3c
 8011e3a:	187b      	adds	r3, r7, r1
 8011e3c:	8812      	ldrh	r2, [r2, #0]
 8011e3e:	801a      	strh	r2, [r3, #0]
 8011e40:	187b      	adds	r3, r7, r1
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	2240      	movs	r2, #64	@ 0x40
 8011e46:	4013      	ands	r3, r2
 8011e48:	d016      	beq.n	8011e78 <USB_ActivateEndpoint+0x554>
 8011e4a:	687a      	ldr	r2, [r7, #4]
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	009b      	lsls	r3, r3, #2
 8011e52:	18d3      	adds	r3, r2, r3
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	203a      	movs	r0, #58	@ 0x3a
 8011e5a:	183b      	adds	r3, r7, r0
 8011e5c:	495b      	ldr	r1, [pc, #364]	@ (8011fcc <USB_ActivateEndpoint+0x6a8>)
 8011e5e:	400a      	ands	r2, r1
 8011e60:	801a      	strh	r2, [r3, #0]
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	009b      	lsls	r3, r3, #2
 8011e6a:	18d3      	adds	r3, r2, r3
 8011e6c:	183a      	adds	r2, r7, r0
 8011e6e:	8812      	ldrh	r2, [r2, #0]
 8011e70:	495d      	ldr	r1, [pc, #372]	@ (8011fe8 <USB_ActivateEndpoint+0x6c4>)
 8011e72:	430a      	orrs	r2, r1
 8011e74:	b292      	uxth	r2, r2
 8011e76:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	18d3      	adds	r3, r2, r3
 8011e82:	881b      	ldrh	r3, [r3, #0]
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	2038      	movs	r0, #56	@ 0x38
 8011e88:	183b      	adds	r3, r7, r0
 8011e8a:	4952      	ldr	r1, [pc, #328]	@ (8011fd4 <USB_ActivateEndpoint+0x6b0>)
 8011e8c:	400a      	ands	r2, r1
 8011e8e:	801a      	strh	r2, [r3, #0]
 8011e90:	183b      	adds	r3, r7, r0
 8011e92:	183a      	adds	r2, r7, r0
 8011e94:	8812      	ldrh	r2, [r2, #0]
 8011e96:	2180      	movs	r1, #128	@ 0x80
 8011e98:	0149      	lsls	r1, r1, #5
 8011e9a:	404a      	eors	r2, r1
 8011e9c:	801a      	strh	r2, [r3, #0]
 8011e9e:	183b      	adds	r3, r7, r0
 8011ea0:	183a      	adds	r2, r7, r0
 8011ea2:	8812      	ldrh	r2, [r2, #0]
 8011ea4:	2180      	movs	r1, #128	@ 0x80
 8011ea6:	0189      	lsls	r1, r1, #6
 8011ea8:	404a      	eors	r2, r1
 8011eaa:	801a      	strh	r2, [r3, #0]
 8011eac:	687a      	ldr	r2, [r7, #4]
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	18d3      	adds	r3, r2, r3
 8011eb6:	183a      	adds	r2, r7, r0
 8011eb8:	8812      	ldrh	r2, [r2, #0]
 8011eba:	4947      	ldr	r1, [pc, #284]	@ (8011fd8 <USB_ActivateEndpoint+0x6b4>)
 8011ebc:	430a      	orrs	r2, r1
 8011ebe:	b292      	uxth	r2, r2
 8011ec0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	009b      	lsls	r3, r3, #2
 8011eca:	18d3      	adds	r3, r2, r3
 8011ecc:	881b      	ldrh	r3, [r3, #0]
 8011ece:	b29a      	uxth	r2, r3
 8011ed0:	2036      	movs	r0, #54	@ 0x36
 8011ed2:	183b      	adds	r3, r7, r0
 8011ed4:	4945      	ldr	r1, [pc, #276]	@ (8011fec <USB_ActivateEndpoint+0x6c8>)
 8011ed6:	400a      	ands	r2, r1
 8011ed8:	801a      	strh	r2, [r3, #0]
 8011eda:	687a      	ldr	r2, [r7, #4]
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	009b      	lsls	r3, r3, #2
 8011ee2:	18d3      	adds	r3, r2, r3
 8011ee4:	183a      	adds	r2, r7, r0
 8011ee6:	8812      	ldrh	r2, [r2, #0]
 8011ee8:	493b      	ldr	r1, [pc, #236]	@ (8011fd8 <USB_ActivateEndpoint+0x6b4>)
 8011eea:	430a      	orrs	r2, r1
 8011eec:	b292      	uxth	r2, r2
 8011eee:	801a      	strh	r2, [r3, #0]
 8011ef0:	e0ac      	b.n	801204c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	18d2      	adds	r2, r2, r3
 8011efc:	214e      	movs	r1, #78	@ 0x4e
 8011efe:	187b      	adds	r3, r7, r1
 8011f00:	8812      	ldrh	r2, [r2, #0]
 8011f02:	801a      	strh	r2, [r3, #0]
 8011f04:	187b      	adds	r3, r7, r1
 8011f06:	881a      	ldrh	r2, [r3, #0]
 8011f08:	2380      	movs	r3, #128	@ 0x80
 8011f0a:	01db      	lsls	r3, r3, #7
 8011f0c:	4013      	ands	r3, r2
 8011f0e:	d016      	beq.n	8011f3e <USB_ActivateEndpoint+0x61a>
 8011f10:	687a      	ldr	r2, [r7, #4]
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	781b      	ldrb	r3, [r3, #0]
 8011f16:	009b      	lsls	r3, r3, #2
 8011f18:	18d3      	adds	r3, r2, r3
 8011f1a:	881b      	ldrh	r3, [r3, #0]
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	204c      	movs	r0, #76	@ 0x4c
 8011f20:	183b      	adds	r3, r7, r0
 8011f22:	492a      	ldr	r1, [pc, #168]	@ (8011fcc <USB_ActivateEndpoint+0x6a8>)
 8011f24:	400a      	ands	r2, r1
 8011f26:	801a      	strh	r2, [r3, #0]
 8011f28:	687a      	ldr	r2, [r7, #4]
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	009b      	lsls	r3, r3, #2
 8011f30:	18d3      	adds	r3, r2, r3
 8011f32:	183a      	adds	r2, r7, r0
 8011f34:	8812      	ldrh	r2, [r2, #0]
 8011f36:	4926      	ldr	r1, [pc, #152]	@ (8011fd0 <USB_ActivateEndpoint+0x6ac>)
 8011f38:	430a      	orrs	r2, r1
 8011f3a:	b292      	uxth	r2, r2
 8011f3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	18d2      	adds	r2, r2, r3
 8011f48:	214a      	movs	r1, #74	@ 0x4a
 8011f4a:	187b      	adds	r3, r7, r1
 8011f4c:	8812      	ldrh	r2, [r2, #0]
 8011f4e:	801a      	strh	r2, [r3, #0]
 8011f50:	187b      	adds	r3, r7, r1
 8011f52:	881b      	ldrh	r3, [r3, #0]
 8011f54:	2240      	movs	r2, #64	@ 0x40
 8011f56:	4013      	ands	r3, r2
 8011f58:	d016      	beq.n	8011f88 <USB_ActivateEndpoint+0x664>
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	18d3      	adds	r3, r2, r3
 8011f64:	881b      	ldrh	r3, [r3, #0]
 8011f66:	b29a      	uxth	r2, r3
 8011f68:	2048      	movs	r0, #72	@ 0x48
 8011f6a:	183b      	adds	r3, r7, r0
 8011f6c:	4917      	ldr	r1, [pc, #92]	@ (8011fcc <USB_ActivateEndpoint+0x6a8>)
 8011f6e:	400a      	ands	r2, r1
 8011f70:	801a      	strh	r2, [r3, #0]
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	009b      	lsls	r3, r3, #2
 8011f7a:	18d3      	adds	r3, r2, r3
 8011f7c:	183a      	adds	r2, r7, r0
 8011f7e:	8812      	ldrh	r2, [r2, #0]
 8011f80:	4919      	ldr	r1, [pc, #100]	@ (8011fe8 <USB_ActivateEndpoint+0x6c4>)
 8011f82:	430a      	orrs	r2, r1
 8011f84:	b292      	uxth	r2, r2
 8011f86:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	78db      	ldrb	r3, [r3, #3]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d02f      	beq.n	8011ff0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011f90:	687a      	ldr	r2, [r7, #4]
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	009b      	lsls	r3, r3, #2
 8011f98:	18d3      	adds	r3, r2, r3
 8011f9a:	881b      	ldrh	r3, [r3, #0]
 8011f9c:	b29a      	uxth	r2, r3
 8011f9e:	2044      	movs	r0, #68	@ 0x44
 8011fa0:	183b      	adds	r3, r7, r0
 8011fa2:	4912      	ldr	r1, [pc, #72]	@ (8011fec <USB_ActivateEndpoint+0x6c8>)
 8011fa4:	400a      	ands	r2, r1
 8011fa6:	801a      	strh	r2, [r3, #0]
 8011fa8:	183b      	adds	r3, r7, r0
 8011faa:	183a      	adds	r2, r7, r0
 8011fac:	8812      	ldrh	r2, [r2, #0]
 8011fae:	2120      	movs	r1, #32
 8011fb0:	404a      	eors	r2, r1
 8011fb2:	801a      	strh	r2, [r3, #0]
 8011fb4:	687a      	ldr	r2, [r7, #4]
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	009b      	lsls	r3, r3, #2
 8011fbc:	18d3      	adds	r3, r2, r3
 8011fbe:	183a      	adds	r2, r7, r0
 8011fc0:	8812      	ldrh	r2, [r2, #0]
 8011fc2:	4905      	ldr	r1, [pc, #20]	@ (8011fd8 <USB_ActivateEndpoint+0x6b4>)
 8011fc4:	430a      	orrs	r2, r1
 8011fc6:	b292      	uxth	r2, r2
 8011fc8:	801a      	strh	r2, [r3, #0]
 8011fca:	e028      	b.n	801201e <USB_ActivateEndpoint+0x6fa>
 8011fcc:	ffff8f8f 	.word	0xffff8f8f
 8011fd0:	ffffc080 	.word	0xffffc080
 8011fd4:	ffffbf8f 	.word	0xffffbf8f
 8011fd8:	ffff8080 	.word	0xffff8080
 8011fdc:	ffff8180 	.word	0xffff8180
 8011fe0:	ffff8e8f 	.word	0xffff8e8f
 8011fe4:	00000404 	.word	0x00000404
 8011fe8:	ffff80c0 	.word	0xffff80c0
 8011fec:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	781b      	ldrb	r3, [r3, #0]
 8011ff6:	009b      	lsls	r3, r3, #2
 8011ff8:	18d3      	adds	r3, r2, r3
 8011ffa:	881b      	ldrh	r3, [r3, #0]
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	2046      	movs	r0, #70	@ 0x46
 8012000:	183b      	adds	r3, r7, r0
 8012002:	4916      	ldr	r1, [pc, #88]	@ (801205c <USB_ActivateEndpoint+0x738>)
 8012004:	400a      	ands	r2, r1
 8012006:	801a      	strh	r2, [r3, #0]
 8012008:	687a      	ldr	r2, [r7, #4]
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	009b      	lsls	r3, r3, #2
 8012010:	18d3      	adds	r3, r2, r3
 8012012:	183a      	adds	r2, r7, r0
 8012014:	8812      	ldrh	r2, [r2, #0]
 8012016:	4912      	ldr	r1, [pc, #72]	@ (8012060 <USB_ActivateEndpoint+0x73c>)
 8012018:	430a      	orrs	r2, r1
 801201a:	b292      	uxth	r2, r2
 801201c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801201e:	687a      	ldr	r2, [r7, #4]
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	009b      	lsls	r3, r3, #2
 8012026:	18d3      	adds	r3, r2, r3
 8012028:	881b      	ldrh	r3, [r3, #0]
 801202a:	b29a      	uxth	r2, r3
 801202c:	2042      	movs	r0, #66	@ 0x42
 801202e:	183b      	adds	r3, r7, r0
 8012030:	490c      	ldr	r1, [pc, #48]	@ (8012064 <USB_ActivateEndpoint+0x740>)
 8012032:	400a      	ands	r2, r1
 8012034:	801a      	strh	r2, [r3, #0]
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	18d3      	adds	r3, r2, r3
 8012040:	183a      	adds	r2, r7, r0
 8012042:	8812      	ldrh	r2, [r2, #0]
 8012044:	4906      	ldr	r1, [pc, #24]	@ (8012060 <USB_ActivateEndpoint+0x73c>)
 8012046:	430a      	orrs	r2, r1
 8012048:	b292      	uxth	r2, r2
 801204a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801204c:	236f      	movs	r3, #111	@ 0x6f
 801204e:	18fb      	adds	r3, r7, r3
 8012050:	781b      	ldrb	r3, [r3, #0]
}
 8012052:	0018      	movs	r0, r3
 8012054:	46bd      	mov	sp, r7
 8012056:	b01c      	add	sp, #112	@ 0x70
 8012058:	bd80      	pop	{r7, pc}
 801205a:	46c0      	nop			@ (mov r8, r8)
 801205c:	ffff8fbf 	.word	0xffff8fbf
 8012060:	ffff8080 	.word	0xffff8080
 8012064:	ffffbf8f 	.word	0xffffbf8f

08012068 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b08c      	sub	sp, #48	@ 0x30
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	7b1b      	ldrb	r3, [r3, #12]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d000      	beq.n	801207c <USB_DeactivateEndpoint+0x14>
 801207a:	e07e      	b.n	801217a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	785b      	ldrb	r3, [r3, #1]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d03c      	beq.n	80120fe <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012084:	687a      	ldr	r2, [r7, #4]
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	18d2      	adds	r2, r2, r3
 801208e:	210c      	movs	r1, #12
 8012090:	187b      	adds	r3, r7, r1
 8012092:	8812      	ldrh	r2, [r2, #0]
 8012094:	801a      	strh	r2, [r3, #0]
 8012096:	187b      	adds	r3, r7, r1
 8012098:	881b      	ldrh	r3, [r3, #0]
 801209a:	2240      	movs	r2, #64	@ 0x40
 801209c:	4013      	ands	r3, r2
 801209e:	d016      	beq.n	80120ce <USB_DeactivateEndpoint+0x66>
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	18d3      	adds	r3, r2, r3
 80120aa:	881b      	ldrh	r3, [r3, #0]
 80120ac:	b29a      	uxth	r2, r3
 80120ae:	200a      	movs	r0, #10
 80120b0:	183b      	adds	r3, r7, r0
 80120b2:	49c7      	ldr	r1, [pc, #796]	@ (80123d0 <USB_DeactivateEndpoint+0x368>)
 80120b4:	400a      	ands	r2, r1
 80120b6:	801a      	strh	r2, [r3, #0]
 80120b8:	687a      	ldr	r2, [r7, #4]
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	18d3      	adds	r3, r2, r3
 80120c2:	183a      	adds	r2, r7, r0
 80120c4:	8812      	ldrh	r2, [r2, #0]
 80120c6:	49c3      	ldr	r1, [pc, #780]	@ (80123d4 <USB_DeactivateEndpoint+0x36c>)
 80120c8:	430a      	orrs	r2, r1
 80120ca:	b292      	uxth	r2, r2
 80120cc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	009b      	lsls	r3, r3, #2
 80120d6:	18d3      	adds	r3, r2, r3
 80120d8:	881b      	ldrh	r3, [r3, #0]
 80120da:	b29a      	uxth	r2, r3
 80120dc:	2008      	movs	r0, #8
 80120de:	183b      	adds	r3, r7, r0
 80120e0:	49bd      	ldr	r1, [pc, #756]	@ (80123d8 <USB_DeactivateEndpoint+0x370>)
 80120e2:	400a      	ands	r2, r1
 80120e4:	801a      	strh	r2, [r3, #0]
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	781b      	ldrb	r3, [r3, #0]
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	18d3      	adds	r3, r2, r3
 80120f0:	183a      	adds	r2, r7, r0
 80120f2:	8812      	ldrh	r2, [r2, #0]
 80120f4:	49b9      	ldr	r1, [pc, #740]	@ (80123dc <USB_DeactivateEndpoint+0x374>)
 80120f6:	430a      	orrs	r2, r1
 80120f8:	b292      	uxth	r2, r2
 80120fa:	801a      	strh	r2, [r3, #0]
 80120fc:	e163      	b.n	80123c6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80120fe:	687a      	ldr	r2, [r7, #4]
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	18d2      	adds	r2, r2, r3
 8012108:	2112      	movs	r1, #18
 801210a:	187b      	adds	r3, r7, r1
 801210c:	8812      	ldrh	r2, [r2, #0]
 801210e:	801a      	strh	r2, [r3, #0]
 8012110:	187b      	adds	r3, r7, r1
 8012112:	881a      	ldrh	r2, [r3, #0]
 8012114:	2380      	movs	r3, #128	@ 0x80
 8012116:	01db      	lsls	r3, r3, #7
 8012118:	4013      	ands	r3, r2
 801211a:	d016      	beq.n	801214a <USB_DeactivateEndpoint+0xe2>
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	009b      	lsls	r3, r3, #2
 8012124:	18d3      	adds	r3, r2, r3
 8012126:	881b      	ldrh	r3, [r3, #0]
 8012128:	b29a      	uxth	r2, r3
 801212a:	2010      	movs	r0, #16
 801212c:	183b      	adds	r3, r7, r0
 801212e:	49a8      	ldr	r1, [pc, #672]	@ (80123d0 <USB_DeactivateEndpoint+0x368>)
 8012130:	400a      	ands	r2, r1
 8012132:	801a      	strh	r2, [r3, #0]
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	009b      	lsls	r3, r3, #2
 801213c:	18d3      	adds	r3, r2, r3
 801213e:	183a      	adds	r2, r7, r0
 8012140:	8812      	ldrh	r2, [r2, #0]
 8012142:	49a7      	ldr	r1, [pc, #668]	@ (80123e0 <USB_DeactivateEndpoint+0x378>)
 8012144:	430a      	orrs	r2, r1
 8012146:	b292      	uxth	r2, r2
 8012148:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	009b      	lsls	r3, r3, #2
 8012152:	18d3      	adds	r3, r2, r3
 8012154:	881b      	ldrh	r3, [r3, #0]
 8012156:	b29a      	uxth	r2, r3
 8012158:	200e      	movs	r0, #14
 801215a:	183b      	adds	r3, r7, r0
 801215c:	49a1      	ldr	r1, [pc, #644]	@ (80123e4 <USB_DeactivateEndpoint+0x37c>)
 801215e:	400a      	ands	r2, r1
 8012160:	801a      	strh	r2, [r3, #0]
 8012162:	687a      	ldr	r2, [r7, #4]
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	009b      	lsls	r3, r3, #2
 801216a:	18d3      	adds	r3, r2, r3
 801216c:	183a      	adds	r2, r7, r0
 801216e:	8812      	ldrh	r2, [r2, #0]
 8012170:	499a      	ldr	r1, [pc, #616]	@ (80123dc <USB_DeactivateEndpoint+0x374>)
 8012172:	430a      	orrs	r2, r1
 8012174:	b292      	uxth	r2, r2
 8012176:	801a      	strh	r2, [r3, #0]
 8012178:	e125      	b.n	80123c6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	785b      	ldrb	r3, [r3, #1]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d000      	beq.n	8012184 <USB_DeactivateEndpoint+0x11c>
 8012182:	e090      	b.n	80122a6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012184:	687a      	ldr	r2, [r7, #4]
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	18d2      	adds	r2, r2, r3
 801218e:	2120      	movs	r1, #32
 8012190:	187b      	adds	r3, r7, r1
 8012192:	8812      	ldrh	r2, [r2, #0]
 8012194:	801a      	strh	r2, [r3, #0]
 8012196:	187b      	adds	r3, r7, r1
 8012198:	881a      	ldrh	r2, [r3, #0]
 801219a:	2380      	movs	r3, #128	@ 0x80
 801219c:	01db      	lsls	r3, r3, #7
 801219e:	4013      	ands	r3, r2
 80121a0:	d016      	beq.n	80121d0 <USB_DeactivateEndpoint+0x168>
 80121a2:	687a      	ldr	r2, [r7, #4]
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	009b      	lsls	r3, r3, #2
 80121aa:	18d3      	adds	r3, r2, r3
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	b29a      	uxth	r2, r3
 80121b0:	201e      	movs	r0, #30
 80121b2:	183b      	adds	r3, r7, r0
 80121b4:	4986      	ldr	r1, [pc, #536]	@ (80123d0 <USB_DeactivateEndpoint+0x368>)
 80121b6:	400a      	ands	r2, r1
 80121b8:	801a      	strh	r2, [r3, #0]
 80121ba:	687a      	ldr	r2, [r7, #4]
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	009b      	lsls	r3, r3, #2
 80121c2:	18d3      	adds	r3, r2, r3
 80121c4:	183a      	adds	r2, r7, r0
 80121c6:	8812      	ldrh	r2, [r2, #0]
 80121c8:	4985      	ldr	r1, [pc, #532]	@ (80123e0 <USB_DeactivateEndpoint+0x378>)
 80121ca:	430a      	orrs	r2, r1
 80121cc:	b292      	uxth	r2, r2
 80121ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80121d0:	687a      	ldr	r2, [r7, #4]
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	18d2      	adds	r2, r2, r3
 80121da:	211c      	movs	r1, #28
 80121dc:	187b      	adds	r3, r7, r1
 80121de:	8812      	ldrh	r2, [r2, #0]
 80121e0:	801a      	strh	r2, [r3, #0]
 80121e2:	187b      	adds	r3, r7, r1
 80121e4:	881b      	ldrh	r3, [r3, #0]
 80121e6:	2240      	movs	r2, #64	@ 0x40
 80121e8:	4013      	ands	r3, r2
 80121ea:	d016      	beq.n	801221a <USB_DeactivateEndpoint+0x1b2>
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	009b      	lsls	r3, r3, #2
 80121f4:	18d3      	adds	r3, r2, r3
 80121f6:	881b      	ldrh	r3, [r3, #0]
 80121f8:	b29a      	uxth	r2, r3
 80121fa:	201a      	movs	r0, #26
 80121fc:	183b      	adds	r3, r7, r0
 80121fe:	4974      	ldr	r1, [pc, #464]	@ (80123d0 <USB_DeactivateEndpoint+0x368>)
 8012200:	400a      	ands	r2, r1
 8012202:	801a      	strh	r2, [r3, #0]
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	009b      	lsls	r3, r3, #2
 801220c:	18d3      	adds	r3, r2, r3
 801220e:	183a      	adds	r2, r7, r0
 8012210:	8812      	ldrh	r2, [r2, #0]
 8012212:	4970      	ldr	r1, [pc, #448]	@ (80123d4 <USB_DeactivateEndpoint+0x36c>)
 8012214:	430a      	orrs	r2, r1
 8012216:	b292      	uxth	r2, r2
 8012218:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801221a:	687a      	ldr	r2, [r7, #4]
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	18d3      	adds	r3, r2, r3
 8012224:	881b      	ldrh	r3, [r3, #0]
 8012226:	b29a      	uxth	r2, r3
 8012228:	2018      	movs	r0, #24
 801222a:	183b      	adds	r3, r7, r0
 801222c:	4968      	ldr	r1, [pc, #416]	@ (80123d0 <USB_DeactivateEndpoint+0x368>)
 801222e:	400a      	ands	r2, r1
 8012230:	801a      	strh	r2, [r3, #0]
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	18d3      	adds	r3, r2, r3
 801223c:	183a      	adds	r2, r7, r0
 801223e:	8812      	ldrh	r2, [r2, #0]
 8012240:	4964      	ldr	r1, [pc, #400]	@ (80123d4 <USB_DeactivateEndpoint+0x36c>)
 8012242:	430a      	orrs	r2, r1
 8012244:	b292      	uxth	r2, r2
 8012246:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	18d3      	adds	r3, r2, r3
 8012252:	881b      	ldrh	r3, [r3, #0]
 8012254:	b29a      	uxth	r2, r3
 8012256:	2016      	movs	r0, #22
 8012258:	183b      	adds	r3, r7, r0
 801225a:	4962      	ldr	r1, [pc, #392]	@ (80123e4 <USB_DeactivateEndpoint+0x37c>)
 801225c:	400a      	ands	r2, r1
 801225e:	801a      	strh	r2, [r3, #0]
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	18d3      	adds	r3, r2, r3
 801226a:	183a      	adds	r2, r7, r0
 801226c:	8812      	ldrh	r2, [r2, #0]
 801226e:	495b      	ldr	r1, [pc, #364]	@ (80123dc <USB_DeactivateEndpoint+0x374>)
 8012270:	430a      	orrs	r2, r1
 8012272:	b292      	uxth	r2, r2
 8012274:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	781b      	ldrb	r3, [r3, #0]
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	18d3      	adds	r3, r2, r3
 8012280:	881b      	ldrh	r3, [r3, #0]
 8012282:	b29a      	uxth	r2, r3
 8012284:	2014      	movs	r0, #20
 8012286:	183b      	adds	r3, r7, r0
 8012288:	4953      	ldr	r1, [pc, #332]	@ (80123d8 <USB_DeactivateEndpoint+0x370>)
 801228a:	400a      	ands	r2, r1
 801228c:	801a      	strh	r2, [r3, #0]
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	18d3      	adds	r3, r2, r3
 8012298:	183a      	adds	r2, r7, r0
 801229a:	8812      	ldrh	r2, [r2, #0]
 801229c:	494f      	ldr	r1, [pc, #316]	@ (80123dc <USB_DeactivateEndpoint+0x374>)
 801229e:	430a      	orrs	r2, r1
 80122a0:	b292      	uxth	r2, r2
 80122a2:	801a      	strh	r2, [r3, #0]
 80122a4:	e08f      	b.n	80123c6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	009b      	lsls	r3, r3, #2
 80122ae:	18d2      	adds	r2, r2, r3
 80122b0:	212e      	movs	r1, #46	@ 0x2e
 80122b2:	187b      	adds	r3, r7, r1
 80122b4:	8812      	ldrh	r2, [r2, #0]
 80122b6:	801a      	strh	r2, [r3, #0]
 80122b8:	187b      	adds	r3, r7, r1
 80122ba:	881a      	ldrh	r2, [r3, #0]
 80122bc:	2380      	movs	r3, #128	@ 0x80
 80122be:	01db      	lsls	r3, r3, #7
 80122c0:	4013      	ands	r3, r2
 80122c2:	d016      	beq.n	80122f2 <USB_DeactivateEndpoint+0x28a>
 80122c4:	687a      	ldr	r2, [r7, #4]
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	18d3      	adds	r3, r2, r3
 80122ce:	881b      	ldrh	r3, [r3, #0]
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	202c      	movs	r0, #44	@ 0x2c
 80122d4:	183b      	adds	r3, r7, r0
 80122d6:	493e      	ldr	r1, [pc, #248]	@ (80123d0 <USB_DeactivateEndpoint+0x368>)
 80122d8:	400a      	ands	r2, r1
 80122da:	801a      	strh	r2, [r3, #0]
 80122dc:	687a      	ldr	r2, [r7, #4]
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	009b      	lsls	r3, r3, #2
 80122e4:	18d3      	adds	r3, r2, r3
 80122e6:	183a      	adds	r2, r7, r0
 80122e8:	8812      	ldrh	r2, [r2, #0]
 80122ea:	493d      	ldr	r1, [pc, #244]	@ (80123e0 <USB_DeactivateEndpoint+0x378>)
 80122ec:	430a      	orrs	r2, r1
 80122ee:	b292      	uxth	r2, r2
 80122f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	18d2      	adds	r2, r2, r3
 80122fc:	212a      	movs	r1, #42	@ 0x2a
 80122fe:	187b      	adds	r3, r7, r1
 8012300:	8812      	ldrh	r2, [r2, #0]
 8012302:	801a      	strh	r2, [r3, #0]
 8012304:	187b      	adds	r3, r7, r1
 8012306:	881b      	ldrh	r3, [r3, #0]
 8012308:	2240      	movs	r2, #64	@ 0x40
 801230a:	4013      	ands	r3, r2
 801230c:	d016      	beq.n	801233c <USB_DeactivateEndpoint+0x2d4>
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	009b      	lsls	r3, r3, #2
 8012316:	18d3      	adds	r3, r2, r3
 8012318:	881b      	ldrh	r3, [r3, #0]
 801231a:	b29a      	uxth	r2, r3
 801231c:	2028      	movs	r0, #40	@ 0x28
 801231e:	183b      	adds	r3, r7, r0
 8012320:	492b      	ldr	r1, [pc, #172]	@ (80123d0 <USB_DeactivateEndpoint+0x368>)
 8012322:	400a      	ands	r2, r1
 8012324:	801a      	strh	r2, [r3, #0]
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	009b      	lsls	r3, r3, #2
 801232e:	18d3      	adds	r3, r2, r3
 8012330:	183a      	adds	r2, r7, r0
 8012332:	8812      	ldrh	r2, [r2, #0]
 8012334:	4927      	ldr	r1, [pc, #156]	@ (80123d4 <USB_DeactivateEndpoint+0x36c>)
 8012336:	430a      	orrs	r2, r1
 8012338:	b292      	uxth	r2, r2
 801233a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801233c:	687a      	ldr	r2, [r7, #4]
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	18d3      	adds	r3, r2, r3
 8012346:	881b      	ldrh	r3, [r3, #0]
 8012348:	b29a      	uxth	r2, r3
 801234a:	2026      	movs	r0, #38	@ 0x26
 801234c:	183b      	adds	r3, r7, r0
 801234e:	4920      	ldr	r1, [pc, #128]	@ (80123d0 <USB_DeactivateEndpoint+0x368>)
 8012350:	400a      	ands	r2, r1
 8012352:	801a      	strh	r2, [r3, #0]
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	18d3      	adds	r3, r2, r3
 801235e:	183a      	adds	r2, r7, r0
 8012360:	8812      	ldrh	r2, [r2, #0]
 8012362:	491f      	ldr	r1, [pc, #124]	@ (80123e0 <USB_DeactivateEndpoint+0x378>)
 8012364:	430a      	orrs	r2, r1
 8012366:	b292      	uxth	r2, r2
 8012368:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	18d3      	adds	r3, r2, r3
 8012374:	881b      	ldrh	r3, [r3, #0]
 8012376:	b29a      	uxth	r2, r3
 8012378:	2024      	movs	r0, #36	@ 0x24
 801237a:	183b      	adds	r3, r7, r0
 801237c:	4916      	ldr	r1, [pc, #88]	@ (80123d8 <USB_DeactivateEndpoint+0x370>)
 801237e:	400a      	ands	r2, r1
 8012380:	801a      	strh	r2, [r3, #0]
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	18d3      	adds	r3, r2, r3
 801238c:	183a      	adds	r2, r7, r0
 801238e:	8812      	ldrh	r2, [r2, #0]
 8012390:	4912      	ldr	r1, [pc, #72]	@ (80123dc <USB_DeactivateEndpoint+0x374>)
 8012392:	430a      	orrs	r2, r1
 8012394:	b292      	uxth	r2, r2
 8012396:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012398:	687a      	ldr	r2, [r7, #4]
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	18d3      	adds	r3, r2, r3
 80123a2:	881b      	ldrh	r3, [r3, #0]
 80123a4:	b29a      	uxth	r2, r3
 80123a6:	2022      	movs	r0, #34	@ 0x22
 80123a8:	183b      	adds	r3, r7, r0
 80123aa:	490e      	ldr	r1, [pc, #56]	@ (80123e4 <USB_DeactivateEndpoint+0x37c>)
 80123ac:	400a      	ands	r2, r1
 80123ae:	801a      	strh	r2, [r3, #0]
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	18d3      	adds	r3, r2, r3
 80123ba:	183a      	adds	r2, r7, r0
 80123bc:	8812      	ldrh	r2, [r2, #0]
 80123be:	4907      	ldr	r1, [pc, #28]	@ (80123dc <USB_DeactivateEndpoint+0x374>)
 80123c0:	430a      	orrs	r2, r1
 80123c2:	b292      	uxth	r2, r2
 80123c4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80123c6:	2300      	movs	r3, #0
}
 80123c8:	0018      	movs	r0, r3
 80123ca:	46bd      	mov	sp, r7
 80123cc:	b00c      	add	sp, #48	@ 0x30
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	ffff8f8f 	.word	0xffff8f8f
 80123d4:	ffff80c0 	.word	0xffff80c0
 80123d8:	ffff8fbf 	.word	0xffff8fbf
 80123dc:	ffff8080 	.word	0xffff8080
 80123e0:	ffffc080 	.word	0xffffc080
 80123e4:	ffffbf8f 	.word	0xffffbf8f

080123e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80123e8:	b590      	push	{r4, r7, lr}
 80123ea:	b0c3      	sub	sp, #268	@ 0x10c
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	785b      	ldrb	r3, [r3, #1]
 80123f6:	2b01      	cmp	r3, #1
 80123f8:	d001      	beq.n	80123fe <USB_EPStartXfer+0x16>
 80123fa:	f000 fd2d 	bl	8012e58 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	699a      	ldr	r2, [r3, #24]
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	691b      	ldr	r3, [r3, #16]
 8012406:	429a      	cmp	r2, r3
 8012408:	d905      	bls.n	8012416 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	691b      	ldr	r3, [r3, #16]
 801240e:	1d7a      	adds	r2, r7, #5
 8012410:	32ff      	adds	r2, #255	@ 0xff
 8012412:	6013      	str	r3, [r2, #0]
 8012414:	e004      	b.n	8012420 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	699b      	ldr	r3, [r3, #24]
 801241a:	1d7a      	adds	r2, r7, #5
 801241c:	32ff      	adds	r2, #255	@ 0xff
 801241e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	7b1b      	ldrb	r3, [r3, #12]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d125      	bne.n	8012474 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	6959      	ldr	r1, [r3, #20]
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	88da      	ldrh	r2, [r3, #6]
 8012430:	1d7b      	adds	r3, r7, #5
 8012432:	33ff      	adds	r3, #255	@ 0xff
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	b29b      	uxth	r3, r3
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f001 fa47 	bl	80138cc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	613b      	str	r3, [r7, #16]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2250      	movs	r2, #80	@ 0x50
 8012446:	5a9b      	ldrh	r3, [r3, r2]
 8012448:	b29b      	uxth	r3, r3
 801244a:	001a      	movs	r2, r3
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	189b      	adds	r3, r3, r2
 8012450:	613b      	str	r3, [r7, #16]
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	00da      	lsls	r2, r3, #3
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	18d3      	adds	r3, r2, r3
 801245c:	4ad7      	ldr	r2, [pc, #860]	@ (80127bc <USB_EPStartXfer+0x3d4>)
 801245e:	4694      	mov	ip, r2
 8012460:	4463      	add	r3, ip
 8012462:	60fb      	str	r3, [r7, #12]
 8012464:	1d7b      	adds	r3, r7, #5
 8012466:	33ff      	adds	r3, #255	@ 0xff
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	b29a      	uxth	r2, r3
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	801a      	strh	r2, [r3, #0]
 8012470:	f000 fccd 	bl	8012e0e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	78db      	ldrb	r3, [r3, #3]
 8012478:	2b02      	cmp	r3, #2
 801247a:	d000      	beq.n	801247e <USB_EPStartXfer+0x96>
 801247c:	e362      	b.n	8012b44 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	6a1a      	ldr	r2, [r3, #32]
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	429a      	cmp	r2, r3
 8012488:	d800      	bhi.n	801248c <USB_EPStartXfer+0xa4>
 801248a:	e309      	b.n	8012aa0 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	18d3      	adds	r3, r2, r3
 8012496:	881b      	ldrh	r3, [r3, #0]
 8012498:	b29a      	uxth	r2, r3
 801249a:	2056      	movs	r0, #86	@ 0x56
 801249c:	183b      	adds	r3, r7, r0
 801249e:	49c8      	ldr	r1, [pc, #800]	@ (80127c0 <USB_EPStartXfer+0x3d8>)
 80124a0:	400a      	ands	r2, r1
 80124a2:	801a      	strh	r2, [r3, #0]
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	18d3      	adds	r3, r2, r3
 80124ae:	183a      	adds	r2, r7, r0
 80124b0:	8812      	ldrh	r2, [r2, #0]
 80124b2:	49c4      	ldr	r1, [pc, #784]	@ (80127c4 <USB_EPStartXfer+0x3dc>)
 80124b4:	430a      	orrs	r2, r1
 80124b6:	b292      	uxth	r2, r2
 80124b8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	6a1a      	ldr	r2, [r3, #32]
 80124be:	1d7b      	adds	r3, r7, #5
 80124c0:	33ff      	adds	r3, #255	@ 0xff
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	1ad2      	subs	r2, r2, r3
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80124ca:	687a      	ldr	r2, [r7, #4]
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	18d3      	adds	r3, r2, r3
 80124d4:	881b      	ldrh	r3, [r3, #0]
 80124d6:	b29b      	uxth	r3, r3
 80124d8:	001a      	movs	r2, r3
 80124da:	2340      	movs	r3, #64	@ 0x40
 80124dc:	4013      	ands	r3, r2
 80124de:	d100      	bne.n	80124e2 <USB_EPStartXfer+0xfa>
 80124e0:	e176      	b.n	80127d0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	785b      	ldrb	r3, [r3, #1]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d000      	beq.n	80124f0 <USB_EPStartXfer+0x108>
 80124ee:	e074      	b.n	80125da <USB_EPStartXfer+0x1f2>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2250      	movs	r2, #80	@ 0x50
 80124f8:	5a9b      	ldrh	r3, [r3, r2]
 80124fa:	b29b      	uxth	r3, r3
 80124fc:	001a      	movs	r2, r3
 80124fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012500:	189b      	adds	r3, r3, r2
 8012502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	00da      	lsls	r2, r3, #3
 801250a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801250c:	18d3      	adds	r3, r2, r3
 801250e:	4aae      	ldr	r2, [pc, #696]	@ (80127c8 <USB_EPStartXfer+0x3e0>)
 8012510:	4694      	mov	ip, r2
 8012512:	4463      	add	r3, ip
 8012514:	627b      	str	r3, [r7, #36]	@ 0x24
 8012516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012518:	881b      	ldrh	r3, [r3, #0]
 801251a:	b29b      	uxth	r3, r3
 801251c:	059b      	lsls	r3, r3, #22
 801251e:	0d9b      	lsrs	r3, r3, #22
 8012520:	b29a      	uxth	r2, r3
 8012522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012524:	801a      	strh	r2, [r3, #0]
 8012526:	1d7b      	adds	r3, r7, #5
 8012528:	33ff      	adds	r3, #255	@ 0xff
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	2b3e      	cmp	r3, #62	@ 0x3e
 801252e:	d924      	bls.n	801257a <USB_EPStartXfer+0x192>
 8012530:	1d7b      	adds	r3, r7, #5
 8012532:	33ff      	adds	r3, #255	@ 0xff
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	095b      	lsrs	r3, r3, #5
 8012538:	1c7a      	adds	r2, r7, #1
 801253a:	32ff      	adds	r2, #255	@ 0xff
 801253c:	6013      	str	r3, [r2, #0]
 801253e:	1d7b      	adds	r3, r7, #5
 8012540:	33ff      	adds	r3, #255	@ 0xff
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	221f      	movs	r2, #31
 8012546:	4013      	ands	r3, r2
 8012548:	d106      	bne.n	8012558 <USB_EPStartXfer+0x170>
 801254a:	1c7b      	adds	r3, r7, #1
 801254c:	33ff      	adds	r3, #255	@ 0xff
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	3b01      	subs	r3, #1
 8012552:	1c7a      	adds	r2, r7, #1
 8012554:	32ff      	adds	r2, #255	@ 0xff
 8012556:	6013      	str	r3, [r2, #0]
 8012558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255a:	881b      	ldrh	r3, [r3, #0]
 801255c:	b29a      	uxth	r2, r3
 801255e:	1c7b      	adds	r3, r7, #1
 8012560:	33ff      	adds	r3, #255	@ 0xff
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	b29b      	uxth	r3, r3
 8012566:	029b      	lsls	r3, r3, #10
 8012568:	b29b      	uxth	r3, r3
 801256a:	4313      	orrs	r3, r2
 801256c:	b29b      	uxth	r3, r3
 801256e:	4a97      	ldr	r2, [pc, #604]	@ (80127cc <USB_EPStartXfer+0x3e4>)
 8012570:	4313      	orrs	r3, r2
 8012572:	b29a      	uxth	r2, r3
 8012574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012576:	801a      	strh	r2, [r3, #0]
 8012578:	e04a      	b.n	8012610 <USB_EPStartXfer+0x228>
 801257a:	1d7b      	adds	r3, r7, #5
 801257c:	33ff      	adds	r3, #255	@ 0xff
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d108      	bne.n	8012596 <USB_EPStartXfer+0x1ae>
 8012584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012586:	881b      	ldrh	r3, [r3, #0]
 8012588:	b29b      	uxth	r3, r3
 801258a:	4a90      	ldr	r2, [pc, #576]	@ (80127cc <USB_EPStartXfer+0x3e4>)
 801258c:	4313      	orrs	r3, r2
 801258e:	b29a      	uxth	r2, r3
 8012590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012592:	801a      	strh	r2, [r3, #0]
 8012594:	e03c      	b.n	8012610 <USB_EPStartXfer+0x228>
 8012596:	1d7b      	adds	r3, r7, #5
 8012598:	33ff      	adds	r3, #255	@ 0xff
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	085b      	lsrs	r3, r3, #1
 801259e:	1c7a      	adds	r2, r7, #1
 80125a0:	32ff      	adds	r2, #255	@ 0xff
 80125a2:	6013      	str	r3, [r2, #0]
 80125a4:	1d7b      	adds	r3, r7, #5
 80125a6:	33ff      	adds	r3, #255	@ 0xff
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	2201      	movs	r2, #1
 80125ac:	4013      	ands	r3, r2
 80125ae:	d006      	beq.n	80125be <USB_EPStartXfer+0x1d6>
 80125b0:	1c7b      	adds	r3, r7, #1
 80125b2:	33ff      	adds	r3, #255	@ 0xff
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	3301      	adds	r3, #1
 80125b8:	1c7a      	adds	r2, r7, #1
 80125ba:	32ff      	adds	r2, #255	@ 0xff
 80125bc:	6013      	str	r3, [r2, #0]
 80125be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c0:	881b      	ldrh	r3, [r3, #0]
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	1c7b      	adds	r3, r7, #1
 80125c6:	33ff      	adds	r3, #255	@ 0xff
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	029b      	lsls	r3, r3, #10
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	4313      	orrs	r3, r2
 80125d2:	b29a      	uxth	r2, r3
 80125d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125d6:	801a      	strh	r2, [r3, #0]
 80125d8:	e01a      	b.n	8012610 <USB_EPStartXfer+0x228>
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	785b      	ldrb	r3, [r3, #1]
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d116      	bne.n	8012610 <USB_EPStartXfer+0x228>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2250      	movs	r2, #80	@ 0x50
 80125e6:	5a9b      	ldrh	r3, [r3, r2]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	001a      	movs	r2, r3
 80125ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125ee:	189b      	adds	r3, r3, r2
 80125f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	00da      	lsls	r2, r3, #3
 80125f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125fa:	18d3      	adds	r3, r2, r3
 80125fc:	4a72      	ldr	r2, [pc, #456]	@ (80127c8 <USB_EPStartXfer+0x3e0>)
 80125fe:	4694      	mov	ip, r2
 8012600:	4463      	add	r3, ip
 8012602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012604:	1d7b      	adds	r3, r7, #5
 8012606:	33ff      	adds	r3, #255	@ 0xff
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	b29a      	uxth	r2, r3
 801260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801260e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012610:	2076      	movs	r0, #118	@ 0x76
 8012612:	183b      	adds	r3, r7, r0
 8012614:	683a      	ldr	r2, [r7, #0]
 8012616:	8952      	ldrh	r2, [r2, #10]
 8012618:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	6959      	ldr	r1, [r3, #20]
 801261e:	1d7b      	adds	r3, r7, #5
 8012620:	33ff      	adds	r3, #255	@ 0xff
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	b29c      	uxth	r4, r3
 8012626:	183b      	adds	r3, r7, r0
 8012628:	881a      	ldrh	r2, [r3, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	0023      	movs	r3, r4
 801262e:	f001 f94d 	bl	80138cc <USB_WritePMA>
            ep->xfer_buff += len;
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	695a      	ldr	r2, [r3, #20]
 8012636:	1d7b      	adds	r3, r7, #5
 8012638:	33ff      	adds	r3, #255	@ 0xff
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	18d2      	adds	r2, r2, r3
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	6a1a      	ldr	r2, [r3, #32]
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	691b      	ldr	r3, [r3, #16]
 801264a:	429a      	cmp	r2, r3
 801264c:	d908      	bls.n	8012660 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	6a1a      	ldr	r2, [r3, #32]
 8012652:	1d7b      	adds	r3, r7, #5
 8012654:	33ff      	adds	r3, #255	@ 0xff
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	1ad2      	subs	r2, r2, r3
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	621a      	str	r2, [r3, #32]
 801265e:	e007      	b.n	8012670 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	6a1b      	ldr	r3, [r3, #32]
 8012664:	1d7a      	adds	r2, r7, #5
 8012666:	32ff      	adds	r2, #255	@ 0xff
 8012668:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	2200      	movs	r2, #0
 801266e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	785b      	ldrb	r3, [r3, #1]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d000      	beq.n	801267a <USB_EPStartXfer+0x292>
 8012678:	e070      	b.n	801275c <USB_EPStartXfer+0x374>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	61bb      	str	r3, [r7, #24]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2250      	movs	r2, #80	@ 0x50
 8012682:	5a9b      	ldrh	r3, [r3, r2]
 8012684:	b29b      	uxth	r3, r3
 8012686:	001a      	movs	r2, r3
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	189b      	adds	r3, r3, r2
 801268c:	61bb      	str	r3, [r7, #24]
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	00da      	lsls	r2, r3, #3
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	18d3      	adds	r3, r2, r3
 8012698:	4a48      	ldr	r2, [pc, #288]	@ (80127bc <USB_EPStartXfer+0x3d4>)
 801269a:	4694      	mov	ip, r2
 801269c:	4463      	add	r3, ip
 801269e:	617b      	str	r3, [r7, #20]
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	881b      	ldrh	r3, [r3, #0]
 80126a4:	b29b      	uxth	r3, r3
 80126a6:	059b      	lsls	r3, r3, #22
 80126a8:	0d9b      	lsrs	r3, r3, #22
 80126aa:	b29a      	uxth	r2, r3
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	801a      	strh	r2, [r3, #0]
 80126b0:	1d7b      	adds	r3, r7, #5
 80126b2:	33ff      	adds	r3, #255	@ 0xff
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80126b8:	d922      	bls.n	8012700 <USB_EPStartXfer+0x318>
 80126ba:	1d7b      	adds	r3, r7, #5
 80126bc:	33ff      	adds	r3, #255	@ 0xff
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	095b      	lsrs	r3, r3, #5
 80126c2:	21fc      	movs	r1, #252	@ 0xfc
 80126c4:	187a      	adds	r2, r7, r1
 80126c6:	6013      	str	r3, [r2, #0]
 80126c8:	1d7b      	adds	r3, r7, #5
 80126ca:	33ff      	adds	r3, #255	@ 0xff
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	221f      	movs	r2, #31
 80126d0:	4013      	ands	r3, r2
 80126d2:	d104      	bne.n	80126de <USB_EPStartXfer+0x2f6>
 80126d4:	187b      	adds	r3, r7, r1
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	3b01      	subs	r3, #1
 80126da:	187a      	adds	r2, r7, r1
 80126dc:	6013      	str	r3, [r2, #0]
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	881b      	ldrh	r3, [r3, #0]
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	23fc      	movs	r3, #252	@ 0xfc
 80126e6:	18fb      	adds	r3, r7, r3
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	029b      	lsls	r3, r3, #10
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	4313      	orrs	r3, r2
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	4a35      	ldr	r2, [pc, #212]	@ (80127cc <USB_EPStartXfer+0x3e4>)
 80126f6:	4313      	orrs	r3, r2
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	801a      	strh	r2, [r3, #0]
 80126fe:	e04a      	b.n	8012796 <USB_EPStartXfer+0x3ae>
 8012700:	1d7b      	adds	r3, r7, #5
 8012702:	33ff      	adds	r3, #255	@ 0xff
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d108      	bne.n	801271c <USB_EPStartXfer+0x334>
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	881b      	ldrh	r3, [r3, #0]
 801270e:	b29b      	uxth	r3, r3
 8012710:	4a2e      	ldr	r2, [pc, #184]	@ (80127cc <USB_EPStartXfer+0x3e4>)
 8012712:	4313      	orrs	r3, r2
 8012714:	b29a      	uxth	r2, r3
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	801a      	strh	r2, [r3, #0]
 801271a:	e03c      	b.n	8012796 <USB_EPStartXfer+0x3ae>
 801271c:	1d7b      	adds	r3, r7, #5
 801271e:	33ff      	adds	r3, #255	@ 0xff
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	085b      	lsrs	r3, r3, #1
 8012724:	21fc      	movs	r1, #252	@ 0xfc
 8012726:	187a      	adds	r2, r7, r1
 8012728:	6013      	str	r3, [r2, #0]
 801272a:	1d7b      	adds	r3, r7, #5
 801272c:	33ff      	adds	r3, #255	@ 0xff
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	2201      	movs	r2, #1
 8012732:	4013      	ands	r3, r2
 8012734:	d004      	beq.n	8012740 <USB_EPStartXfer+0x358>
 8012736:	187b      	adds	r3, r7, r1
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	3301      	adds	r3, #1
 801273c:	187a      	adds	r2, r7, r1
 801273e:	6013      	str	r3, [r2, #0]
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	881b      	ldrh	r3, [r3, #0]
 8012744:	b29a      	uxth	r2, r3
 8012746:	23fc      	movs	r3, #252	@ 0xfc
 8012748:	18fb      	adds	r3, r7, r3
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	b29b      	uxth	r3, r3
 801274e:	029b      	lsls	r3, r3, #10
 8012750:	b29b      	uxth	r3, r3
 8012752:	4313      	orrs	r3, r2
 8012754:	b29a      	uxth	r2, r3
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	801a      	strh	r2, [r3, #0]
 801275a:	e01c      	b.n	8012796 <USB_EPStartXfer+0x3ae>
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	785b      	ldrb	r3, [r3, #1]
 8012760:	2b01      	cmp	r3, #1
 8012762:	d118      	bne.n	8012796 <USB_EPStartXfer+0x3ae>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	623b      	str	r3, [r7, #32]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2250      	movs	r2, #80	@ 0x50
 801276c:	5a9b      	ldrh	r3, [r3, r2]
 801276e:	b29b      	uxth	r3, r3
 8012770:	001a      	movs	r2, r3
 8012772:	6a3b      	ldr	r3, [r7, #32]
 8012774:	189b      	adds	r3, r3, r2
 8012776:	623b      	str	r3, [r7, #32]
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	00da      	lsls	r2, r3, #3
 801277e:	6a3b      	ldr	r3, [r7, #32]
 8012780:	18d3      	adds	r3, r2, r3
 8012782:	4a0e      	ldr	r2, [pc, #56]	@ (80127bc <USB_EPStartXfer+0x3d4>)
 8012784:	4694      	mov	ip, r2
 8012786:	4463      	add	r3, ip
 8012788:	61fb      	str	r3, [r7, #28]
 801278a:	1d7b      	adds	r3, r7, #5
 801278c:	33ff      	adds	r3, #255	@ 0xff
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	b29a      	uxth	r2, r3
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012796:	2076      	movs	r0, #118	@ 0x76
 8012798:	183b      	adds	r3, r7, r0
 801279a:	683a      	ldr	r2, [r7, #0]
 801279c:	8912      	ldrh	r2, [r2, #8]
 801279e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	6959      	ldr	r1, [r3, #20]
 80127a4:	1d7b      	adds	r3, r7, #5
 80127a6:	33ff      	adds	r3, #255	@ 0xff
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	b29c      	uxth	r4, r3
 80127ac:	183b      	adds	r3, r7, r0
 80127ae:	881a      	ldrh	r2, [r3, #0]
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	0023      	movs	r3, r4
 80127b4:	f001 f88a 	bl	80138cc <USB_WritePMA>
 80127b8:	e329      	b.n	8012e0e <USB_EPStartXfer+0xa26>
 80127ba:	46c0      	nop			@ (mov r8, r8)
 80127bc:	00000402 	.word	0x00000402
 80127c0:	ffff8f8f 	.word	0xffff8f8f
 80127c4:	ffff8180 	.word	0xffff8180
 80127c8:	00000406 	.word	0x00000406
 80127cc:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	785b      	ldrb	r3, [r3, #1]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d000      	beq.n	80127da <USB_EPStartXfer+0x3f2>
 80127d8:	e070      	b.n	80128bc <USB_EPStartXfer+0x4d4>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2250      	movs	r2, #80	@ 0x50
 80127e2:	5a9b      	ldrh	r3, [r3, r2]
 80127e4:	b29b      	uxth	r3, r3
 80127e6:	001a      	movs	r2, r3
 80127e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127ea:	189b      	adds	r3, r3, r2
 80127ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	00da      	lsls	r2, r3, #3
 80127f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127f6:	18d3      	adds	r3, r2, r3
 80127f8:	4acd      	ldr	r2, [pc, #820]	@ (8012b30 <USB_EPStartXfer+0x748>)
 80127fa:	4694      	mov	ip, r2
 80127fc:	4463      	add	r3, ip
 80127fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8012800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012802:	881b      	ldrh	r3, [r3, #0]
 8012804:	b29b      	uxth	r3, r3
 8012806:	059b      	lsls	r3, r3, #22
 8012808:	0d9b      	lsrs	r3, r3, #22
 801280a:	b29a      	uxth	r2, r3
 801280c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801280e:	801a      	strh	r2, [r3, #0]
 8012810:	1d7b      	adds	r3, r7, #5
 8012812:	33ff      	adds	r3, #255	@ 0xff
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2b3e      	cmp	r3, #62	@ 0x3e
 8012818:	d922      	bls.n	8012860 <USB_EPStartXfer+0x478>
 801281a:	1d7b      	adds	r3, r7, #5
 801281c:	33ff      	adds	r3, #255	@ 0xff
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	095b      	lsrs	r3, r3, #5
 8012822:	21f8      	movs	r1, #248	@ 0xf8
 8012824:	187a      	adds	r2, r7, r1
 8012826:	6013      	str	r3, [r2, #0]
 8012828:	1d7b      	adds	r3, r7, #5
 801282a:	33ff      	adds	r3, #255	@ 0xff
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	221f      	movs	r2, #31
 8012830:	4013      	ands	r3, r2
 8012832:	d104      	bne.n	801283e <USB_EPStartXfer+0x456>
 8012834:	187b      	adds	r3, r7, r1
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	3b01      	subs	r3, #1
 801283a:	187a      	adds	r2, r7, r1
 801283c:	6013      	str	r3, [r2, #0]
 801283e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012840:	881b      	ldrh	r3, [r3, #0]
 8012842:	b29a      	uxth	r2, r3
 8012844:	23f8      	movs	r3, #248	@ 0xf8
 8012846:	18fb      	adds	r3, r7, r3
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	b29b      	uxth	r3, r3
 801284c:	029b      	lsls	r3, r3, #10
 801284e:	b29b      	uxth	r3, r3
 8012850:	4313      	orrs	r3, r2
 8012852:	b29b      	uxth	r3, r3
 8012854:	4ab7      	ldr	r2, [pc, #732]	@ (8012b34 <USB_EPStartXfer+0x74c>)
 8012856:	4313      	orrs	r3, r2
 8012858:	b29a      	uxth	r2, r3
 801285a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801285c:	801a      	strh	r2, [r3, #0]
 801285e:	e04a      	b.n	80128f6 <USB_EPStartXfer+0x50e>
 8012860:	1d7b      	adds	r3, r7, #5
 8012862:	33ff      	adds	r3, #255	@ 0xff
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d108      	bne.n	801287c <USB_EPStartXfer+0x494>
 801286a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801286c:	881b      	ldrh	r3, [r3, #0]
 801286e:	b29b      	uxth	r3, r3
 8012870:	4ab0      	ldr	r2, [pc, #704]	@ (8012b34 <USB_EPStartXfer+0x74c>)
 8012872:	4313      	orrs	r3, r2
 8012874:	b29a      	uxth	r2, r3
 8012876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012878:	801a      	strh	r2, [r3, #0]
 801287a:	e03c      	b.n	80128f6 <USB_EPStartXfer+0x50e>
 801287c:	1d7b      	adds	r3, r7, #5
 801287e:	33ff      	adds	r3, #255	@ 0xff
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	085b      	lsrs	r3, r3, #1
 8012884:	21f8      	movs	r1, #248	@ 0xf8
 8012886:	187a      	adds	r2, r7, r1
 8012888:	6013      	str	r3, [r2, #0]
 801288a:	1d7b      	adds	r3, r7, #5
 801288c:	33ff      	adds	r3, #255	@ 0xff
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2201      	movs	r2, #1
 8012892:	4013      	ands	r3, r2
 8012894:	d004      	beq.n	80128a0 <USB_EPStartXfer+0x4b8>
 8012896:	187b      	adds	r3, r7, r1
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	3301      	adds	r3, #1
 801289c:	187a      	adds	r2, r7, r1
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128a2:	881b      	ldrh	r3, [r3, #0]
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	23f8      	movs	r3, #248	@ 0xf8
 80128a8:	18fb      	adds	r3, r7, r3
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	029b      	lsls	r3, r3, #10
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	4313      	orrs	r3, r2
 80128b4:	b29a      	uxth	r2, r3
 80128b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128b8:	801a      	strh	r2, [r3, #0]
 80128ba:	e01c      	b.n	80128f6 <USB_EPStartXfer+0x50e>
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	785b      	ldrb	r3, [r3, #1]
 80128c0:	2b01      	cmp	r3, #1
 80128c2:	d118      	bne.n	80128f6 <USB_EPStartXfer+0x50e>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2250      	movs	r2, #80	@ 0x50
 80128cc:	5a9b      	ldrh	r3, [r3, r2]
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	001a      	movs	r2, r3
 80128d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80128d4:	189b      	adds	r3, r3, r2
 80128d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	781b      	ldrb	r3, [r3, #0]
 80128dc:	00da      	lsls	r2, r3, #3
 80128de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80128e0:	18d3      	adds	r3, r2, r3
 80128e2:	4a93      	ldr	r2, [pc, #588]	@ (8012b30 <USB_EPStartXfer+0x748>)
 80128e4:	4694      	mov	ip, r2
 80128e6:	4463      	add	r3, ip
 80128e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128ea:	1d7b      	adds	r3, r7, #5
 80128ec:	33ff      	adds	r3, #255	@ 0xff
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	b29a      	uxth	r2, r3
 80128f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80128f6:	2076      	movs	r0, #118	@ 0x76
 80128f8:	183b      	adds	r3, r7, r0
 80128fa:	683a      	ldr	r2, [r7, #0]
 80128fc:	8912      	ldrh	r2, [r2, #8]
 80128fe:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	6959      	ldr	r1, [r3, #20]
 8012904:	1d7b      	adds	r3, r7, #5
 8012906:	33ff      	adds	r3, #255	@ 0xff
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	b29c      	uxth	r4, r3
 801290c:	183b      	adds	r3, r7, r0
 801290e:	881a      	ldrh	r2, [r3, #0]
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	0023      	movs	r3, r4
 8012914:	f000 ffda 	bl	80138cc <USB_WritePMA>
            ep->xfer_buff += len;
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	695a      	ldr	r2, [r3, #20]
 801291c:	1d7b      	adds	r3, r7, #5
 801291e:	33ff      	adds	r3, #255	@ 0xff
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	18d2      	adds	r2, r2, r3
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	6a1a      	ldr	r2, [r3, #32]
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	691b      	ldr	r3, [r3, #16]
 8012930:	429a      	cmp	r2, r3
 8012932:	d908      	bls.n	8012946 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	6a1a      	ldr	r2, [r3, #32]
 8012938:	1d7b      	adds	r3, r7, #5
 801293a:	33ff      	adds	r3, #255	@ 0xff
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	1ad2      	subs	r2, r2, r3
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	621a      	str	r2, [r3, #32]
 8012944:	e007      	b.n	8012956 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	6a1b      	ldr	r3, [r3, #32]
 801294a:	1d7a      	adds	r2, r7, #5
 801294c:	32ff      	adds	r2, #255	@ 0xff
 801294e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	2200      	movs	r2, #0
 8012954:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	643b      	str	r3, [r7, #64]	@ 0x40
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	785b      	ldrb	r3, [r3, #1]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d000      	beq.n	8012964 <USB_EPStartXfer+0x57c>
 8012962:	e070      	b.n	8012a46 <USB_EPStartXfer+0x65e>
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2250      	movs	r2, #80	@ 0x50
 801296c:	5a9b      	ldrh	r3, [r3, r2]
 801296e:	b29b      	uxth	r3, r3
 8012970:	001a      	movs	r2, r3
 8012972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012974:	189b      	adds	r3, r3, r2
 8012976:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	00da      	lsls	r2, r3, #3
 801297e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012980:	18d3      	adds	r3, r2, r3
 8012982:	4a6d      	ldr	r2, [pc, #436]	@ (8012b38 <USB_EPStartXfer+0x750>)
 8012984:	4694      	mov	ip, r2
 8012986:	4463      	add	r3, ip
 8012988:	637b      	str	r3, [r7, #52]	@ 0x34
 801298a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801298c:	881b      	ldrh	r3, [r3, #0]
 801298e:	b29b      	uxth	r3, r3
 8012990:	059b      	lsls	r3, r3, #22
 8012992:	0d9b      	lsrs	r3, r3, #22
 8012994:	b29a      	uxth	r2, r3
 8012996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012998:	801a      	strh	r2, [r3, #0]
 801299a:	1d7b      	adds	r3, r7, #5
 801299c:	33ff      	adds	r3, #255	@ 0xff
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80129a2:	d922      	bls.n	80129ea <USB_EPStartXfer+0x602>
 80129a4:	1d7b      	adds	r3, r7, #5
 80129a6:	33ff      	adds	r3, #255	@ 0xff
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	095b      	lsrs	r3, r3, #5
 80129ac:	21f4      	movs	r1, #244	@ 0xf4
 80129ae:	187a      	adds	r2, r7, r1
 80129b0:	6013      	str	r3, [r2, #0]
 80129b2:	1d7b      	adds	r3, r7, #5
 80129b4:	33ff      	adds	r3, #255	@ 0xff
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	221f      	movs	r2, #31
 80129ba:	4013      	ands	r3, r2
 80129bc:	d104      	bne.n	80129c8 <USB_EPStartXfer+0x5e0>
 80129be:	187b      	adds	r3, r7, r1
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	3b01      	subs	r3, #1
 80129c4:	187a      	adds	r2, r7, r1
 80129c6:	6013      	str	r3, [r2, #0]
 80129c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129ca:	881b      	ldrh	r3, [r3, #0]
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	23f4      	movs	r3, #244	@ 0xf4
 80129d0:	18fb      	adds	r3, r7, r3
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	029b      	lsls	r3, r3, #10
 80129d8:	b29b      	uxth	r3, r3
 80129da:	4313      	orrs	r3, r2
 80129dc:	b29b      	uxth	r3, r3
 80129de:	4a55      	ldr	r2, [pc, #340]	@ (8012b34 <USB_EPStartXfer+0x74c>)
 80129e0:	4313      	orrs	r3, r2
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129e6:	801a      	strh	r2, [r3, #0]
 80129e8:	e048      	b.n	8012a7c <USB_EPStartXfer+0x694>
 80129ea:	1d7b      	adds	r3, r7, #5
 80129ec:	33ff      	adds	r3, #255	@ 0xff
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d108      	bne.n	8012a06 <USB_EPStartXfer+0x61e>
 80129f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129f6:	881b      	ldrh	r3, [r3, #0]
 80129f8:	b29b      	uxth	r3, r3
 80129fa:	4a4e      	ldr	r2, [pc, #312]	@ (8012b34 <USB_EPStartXfer+0x74c>)
 80129fc:	4313      	orrs	r3, r2
 80129fe:	b29a      	uxth	r2, r3
 8012a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a02:	801a      	strh	r2, [r3, #0]
 8012a04:	e03a      	b.n	8012a7c <USB_EPStartXfer+0x694>
 8012a06:	1d7b      	adds	r3, r7, #5
 8012a08:	33ff      	adds	r3, #255	@ 0xff
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	085b      	lsrs	r3, r3, #1
 8012a0e:	21f4      	movs	r1, #244	@ 0xf4
 8012a10:	187a      	adds	r2, r7, r1
 8012a12:	6013      	str	r3, [r2, #0]
 8012a14:	1d7b      	adds	r3, r7, #5
 8012a16:	33ff      	adds	r3, #255	@ 0xff
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	2201      	movs	r2, #1
 8012a1c:	4013      	ands	r3, r2
 8012a1e:	d004      	beq.n	8012a2a <USB_EPStartXfer+0x642>
 8012a20:	187b      	adds	r3, r7, r1
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	3301      	adds	r3, #1
 8012a26:	187a      	adds	r2, r7, r1
 8012a28:	6013      	str	r3, [r2, #0]
 8012a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	b29a      	uxth	r2, r3
 8012a30:	23f4      	movs	r3, #244	@ 0xf4
 8012a32:	18fb      	adds	r3, r7, r3
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	b29b      	uxth	r3, r3
 8012a38:	029b      	lsls	r3, r3, #10
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	b29a      	uxth	r2, r3
 8012a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a42:	801a      	strh	r2, [r3, #0]
 8012a44:	e01a      	b.n	8012a7c <USB_EPStartXfer+0x694>
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	785b      	ldrb	r3, [r3, #1]
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	d116      	bne.n	8012a7c <USB_EPStartXfer+0x694>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2250      	movs	r2, #80	@ 0x50
 8012a52:	5a9b      	ldrh	r3, [r3, r2]
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	001a      	movs	r2, r3
 8012a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a5a:	189b      	adds	r3, r3, r2
 8012a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	00da      	lsls	r2, r3, #3
 8012a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a66:	18d3      	adds	r3, r2, r3
 8012a68:	4a33      	ldr	r2, [pc, #204]	@ (8012b38 <USB_EPStartXfer+0x750>)
 8012a6a:	4694      	mov	ip, r2
 8012a6c:	4463      	add	r3, ip
 8012a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012a70:	1d7b      	adds	r3, r7, #5
 8012a72:	33ff      	adds	r3, #255	@ 0xff
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012a7c:	2076      	movs	r0, #118	@ 0x76
 8012a7e:	183b      	adds	r3, r7, r0
 8012a80:	683a      	ldr	r2, [r7, #0]
 8012a82:	8952      	ldrh	r2, [r2, #10]
 8012a84:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	6959      	ldr	r1, [r3, #20]
 8012a8a:	1d7b      	adds	r3, r7, #5
 8012a8c:	33ff      	adds	r3, #255	@ 0xff
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	b29c      	uxth	r4, r3
 8012a92:	183b      	adds	r3, r7, r0
 8012a94:	881a      	ldrh	r2, [r3, #0]
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	0023      	movs	r3, r4
 8012a9a:	f000 ff17 	bl	80138cc <USB_WritePMA>
 8012a9e:	e1b6      	b.n	8012e0e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	6a1b      	ldr	r3, [r3, #32]
 8012aa4:	1d7a      	adds	r2, r7, #5
 8012aa6:	32ff      	adds	r2, #255	@ 0xff
 8012aa8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012aaa:	687a      	ldr	r2, [r7, #4]
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	781b      	ldrb	r3, [r3, #0]
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	18d3      	adds	r3, r2, r3
 8012ab4:	881b      	ldrh	r3, [r3, #0]
 8012ab6:	b29a      	uxth	r2, r3
 8012ab8:	2062      	movs	r0, #98	@ 0x62
 8012aba:	183b      	adds	r3, r7, r0
 8012abc:	491f      	ldr	r1, [pc, #124]	@ (8012b3c <USB_EPStartXfer+0x754>)
 8012abe:	400a      	ands	r2, r1
 8012ac0:	801a      	strh	r2, [r3, #0]
 8012ac2:	687a      	ldr	r2, [r7, #4]
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	781b      	ldrb	r3, [r3, #0]
 8012ac8:	009b      	lsls	r3, r3, #2
 8012aca:	18d3      	adds	r3, r2, r3
 8012acc:	183a      	adds	r2, r7, r0
 8012ace:	8812      	ldrh	r2, [r2, #0]
 8012ad0:	491b      	ldr	r1, [pc, #108]	@ (8012b40 <USB_EPStartXfer+0x758>)
 8012ad2:	430a      	orrs	r2, r1
 8012ad4:	b292      	uxth	r2, r2
 8012ad6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2250      	movs	r2, #80	@ 0x50
 8012ae0:	5a9b      	ldrh	r3, [r3, r2]
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	001a      	movs	r2, r3
 8012ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ae8:	189b      	adds	r3, r3, r2
 8012aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	00da      	lsls	r2, r3, #3
 8012af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012af4:	18d3      	adds	r3, r2, r3
 8012af6:	4a0e      	ldr	r2, [pc, #56]	@ (8012b30 <USB_EPStartXfer+0x748>)
 8012af8:	4694      	mov	ip, r2
 8012afa:	4463      	add	r3, ip
 8012afc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012afe:	1d7b      	adds	r3, r7, #5
 8012b00:	33ff      	adds	r3, #255	@ 0xff
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	b29a      	uxth	r2, r3
 8012b06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012b0a:	2076      	movs	r0, #118	@ 0x76
 8012b0c:	183b      	adds	r3, r7, r0
 8012b0e:	683a      	ldr	r2, [r7, #0]
 8012b10:	8912      	ldrh	r2, [r2, #8]
 8012b12:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	6959      	ldr	r1, [r3, #20]
 8012b18:	1d7b      	adds	r3, r7, #5
 8012b1a:	33ff      	adds	r3, #255	@ 0xff
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	b29c      	uxth	r4, r3
 8012b20:	183b      	adds	r3, r7, r0
 8012b22:	881a      	ldrh	r2, [r3, #0]
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	0023      	movs	r3, r4
 8012b28:	f000 fed0 	bl	80138cc <USB_WritePMA>
 8012b2c:	e16f      	b.n	8012e0e <USB_EPStartXfer+0xa26>
 8012b2e:	46c0      	nop			@ (mov r8, r8)
 8012b30:	00000402 	.word	0x00000402
 8012b34:	ffff8000 	.word	0xffff8000
 8012b38:	00000406 	.word	0x00000406
 8012b3c:	ffff8e8f 	.word	0xffff8e8f
 8012b40:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	6a1a      	ldr	r2, [r3, #32]
 8012b48:	1d7b      	adds	r3, r7, #5
 8012b4a:	33ff      	adds	r3, #255	@ 0xff
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	1ad2      	subs	r2, r2, r3
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	009b      	lsls	r3, r3, #2
 8012b5c:	18d3      	adds	r3, r2, r3
 8012b5e:	881b      	ldrh	r3, [r3, #0]
 8012b60:	b29b      	uxth	r3, r3
 8012b62:	001a      	movs	r2, r3
 8012b64:	2340      	movs	r3, #64	@ 0x40
 8012b66:	4013      	ands	r3, r2
 8012b68:	d100      	bne.n	8012b6c <USB_EPStartXfer+0x784>
 8012b6a:	e0a4      	b.n	8012cb6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	785b      	ldrb	r3, [r3, #1]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d000      	beq.n	8012b7a <USB_EPStartXfer+0x792>
 8012b78:	e070      	b.n	8012c5c <USB_EPStartXfer+0x874>
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2250      	movs	r2, #80	@ 0x50
 8012b82:	5a9b      	ldrh	r3, [r3, r2]
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	001a      	movs	r2, r3
 8012b88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b8a:	189b      	adds	r3, r3, r2
 8012b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	00da      	lsls	r2, r3, #3
 8012b94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b96:	18d3      	adds	r3, r2, r3
 8012b98:	4abc      	ldr	r2, [pc, #752]	@ (8012e8c <USB_EPStartXfer+0xaa4>)
 8012b9a:	4694      	mov	ip, r2
 8012b9c:	4463      	add	r3, ip
 8012b9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8012ba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ba2:	881b      	ldrh	r3, [r3, #0]
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	059b      	lsls	r3, r3, #22
 8012ba8:	0d9b      	lsrs	r3, r3, #22
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012bae:	801a      	strh	r2, [r3, #0]
 8012bb0:	1d7b      	adds	r3, r7, #5
 8012bb2:	33ff      	adds	r3, #255	@ 0xff
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8012bb8:	d922      	bls.n	8012c00 <USB_EPStartXfer+0x818>
 8012bba:	1d7b      	adds	r3, r7, #5
 8012bbc:	33ff      	adds	r3, #255	@ 0xff
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	095b      	lsrs	r3, r3, #5
 8012bc2:	21f0      	movs	r1, #240	@ 0xf0
 8012bc4:	187a      	adds	r2, r7, r1
 8012bc6:	6013      	str	r3, [r2, #0]
 8012bc8:	1d7b      	adds	r3, r7, #5
 8012bca:	33ff      	adds	r3, #255	@ 0xff
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	221f      	movs	r2, #31
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	d104      	bne.n	8012bde <USB_EPStartXfer+0x7f6>
 8012bd4:	187b      	adds	r3, r7, r1
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	3b01      	subs	r3, #1
 8012bda:	187a      	adds	r2, r7, r1
 8012bdc:	6013      	str	r3, [r2, #0]
 8012bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012be0:	881b      	ldrh	r3, [r3, #0]
 8012be2:	b29a      	uxth	r2, r3
 8012be4:	23f0      	movs	r3, #240	@ 0xf0
 8012be6:	18fb      	adds	r3, r7, r3
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	029b      	lsls	r3, r3, #10
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	4313      	orrs	r3, r2
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	4aa6      	ldr	r2, [pc, #664]	@ (8012e90 <USB_EPStartXfer+0xaa8>)
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012bfc:	801a      	strh	r2, [r3, #0]
 8012bfe:	e048      	b.n	8012c92 <USB_EPStartXfer+0x8aa>
 8012c00:	1d7b      	adds	r3, r7, #5
 8012c02:	33ff      	adds	r3, #255	@ 0xff
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d108      	bne.n	8012c1c <USB_EPStartXfer+0x834>
 8012c0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c0c:	881b      	ldrh	r3, [r3, #0]
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	4a9f      	ldr	r2, [pc, #636]	@ (8012e90 <USB_EPStartXfer+0xaa8>)
 8012c12:	4313      	orrs	r3, r2
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c18:	801a      	strh	r2, [r3, #0]
 8012c1a:	e03a      	b.n	8012c92 <USB_EPStartXfer+0x8aa>
 8012c1c:	1d7b      	adds	r3, r7, #5
 8012c1e:	33ff      	adds	r3, #255	@ 0xff
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	085b      	lsrs	r3, r3, #1
 8012c24:	21f0      	movs	r1, #240	@ 0xf0
 8012c26:	187a      	adds	r2, r7, r1
 8012c28:	6013      	str	r3, [r2, #0]
 8012c2a:	1d7b      	adds	r3, r7, #5
 8012c2c:	33ff      	adds	r3, #255	@ 0xff
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2201      	movs	r2, #1
 8012c32:	4013      	ands	r3, r2
 8012c34:	d004      	beq.n	8012c40 <USB_EPStartXfer+0x858>
 8012c36:	187b      	adds	r3, r7, r1
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	187a      	adds	r2, r7, r1
 8012c3e:	6013      	str	r3, [r2, #0]
 8012c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	23f0      	movs	r3, #240	@ 0xf0
 8012c48:	18fb      	adds	r3, r7, r3
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	029b      	lsls	r3, r3, #10
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	4313      	orrs	r3, r2
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c58:	801a      	strh	r2, [r3, #0]
 8012c5a:	e01a      	b.n	8012c92 <USB_EPStartXfer+0x8aa>
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	785b      	ldrb	r3, [r3, #1]
 8012c60:	2b01      	cmp	r3, #1
 8012c62:	d116      	bne.n	8012c92 <USB_EPStartXfer+0x8aa>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2250      	movs	r2, #80	@ 0x50
 8012c68:	5a9b      	ldrh	r3, [r3, r2]
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	001a      	movs	r2, r3
 8012c6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c70:	189b      	adds	r3, r3, r2
 8012c72:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	00da      	lsls	r2, r3, #3
 8012c7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c7c:	18d3      	adds	r3, r2, r3
 8012c7e:	4a83      	ldr	r2, [pc, #524]	@ (8012e8c <USB_EPStartXfer+0xaa4>)
 8012c80:	4694      	mov	ip, r2
 8012c82:	4463      	add	r3, ip
 8012c84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012c86:	1d7b      	adds	r3, r7, #5
 8012c88:	33ff      	adds	r3, #255	@ 0xff
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012c90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012c92:	2076      	movs	r0, #118	@ 0x76
 8012c94:	183b      	adds	r3, r7, r0
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	8952      	ldrh	r2, [r2, #10]
 8012c9a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	6959      	ldr	r1, [r3, #20]
 8012ca0:	1d7b      	adds	r3, r7, #5
 8012ca2:	33ff      	adds	r3, #255	@ 0xff
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	b29c      	uxth	r4, r3
 8012ca8:	183b      	adds	r3, r7, r0
 8012caa:	881a      	ldrh	r2, [r3, #0]
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	0023      	movs	r3, r4
 8012cb0:	f000 fe0c 	bl	80138cc <USB_WritePMA>
 8012cb4:	e0ab      	b.n	8012e0e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	785b      	ldrb	r3, [r3, #1]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d000      	beq.n	8012cc0 <USB_EPStartXfer+0x8d8>
 8012cbe:	e070      	b.n	8012da2 <USB_EPStartXfer+0x9ba>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2250      	movs	r2, #80	@ 0x50
 8012cc8:	5a9b      	ldrh	r3, [r3, r2]
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	001a      	movs	r2, r3
 8012cce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012cd0:	189b      	adds	r3, r3, r2
 8012cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	00da      	lsls	r2, r3, #3
 8012cda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012cdc:	18d3      	adds	r3, r2, r3
 8012cde:	4a6d      	ldr	r2, [pc, #436]	@ (8012e94 <USB_EPStartXfer+0xaac>)
 8012ce0:	4694      	mov	ip, r2
 8012ce2:	4463      	add	r3, ip
 8012ce4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012ce6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012ce8:	881b      	ldrh	r3, [r3, #0]
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	059b      	lsls	r3, r3, #22
 8012cee:	0d9b      	lsrs	r3, r3, #22
 8012cf0:	b29a      	uxth	r2, r3
 8012cf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012cf4:	801a      	strh	r2, [r3, #0]
 8012cf6:	1d7b      	adds	r3, r7, #5
 8012cf8:	33ff      	adds	r3, #255	@ 0xff
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8012cfe:	d922      	bls.n	8012d46 <USB_EPStartXfer+0x95e>
 8012d00:	1d7b      	adds	r3, r7, #5
 8012d02:	33ff      	adds	r3, #255	@ 0xff
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	095b      	lsrs	r3, r3, #5
 8012d08:	21ec      	movs	r1, #236	@ 0xec
 8012d0a:	187a      	adds	r2, r7, r1
 8012d0c:	6013      	str	r3, [r2, #0]
 8012d0e:	1d7b      	adds	r3, r7, #5
 8012d10:	33ff      	adds	r3, #255	@ 0xff
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	221f      	movs	r2, #31
 8012d16:	4013      	ands	r3, r2
 8012d18:	d104      	bne.n	8012d24 <USB_EPStartXfer+0x93c>
 8012d1a:	187b      	adds	r3, r7, r1
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	3b01      	subs	r3, #1
 8012d20:	187a      	adds	r2, r7, r1
 8012d22:	6013      	str	r3, [r2, #0]
 8012d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d26:	881b      	ldrh	r3, [r3, #0]
 8012d28:	b29a      	uxth	r2, r3
 8012d2a:	23ec      	movs	r3, #236	@ 0xec
 8012d2c:	18fb      	adds	r3, r7, r3
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	029b      	lsls	r3, r3, #10
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	4313      	orrs	r3, r2
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	4a55      	ldr	r2, [pc, #340]	@ (8012e90 <USB_EPStartXfer+0xaa8>)
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	b29a      	uxth	r2, r3
 8012d40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d42:	801a      	strh	r2, [r3, #0]
 8012d44:	e052      	b.n	8012dec <USB_EPStartXfer+0xa04>
 8012d46:	1d7b      	adds	r3, r7, #5
 8012d48:	33ff      	adds	r3, #255	@ 0xff
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d108      	bne.n	8012d62 <USB_EPStartXfer+0x97a>
 8012d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d52:	881b      	ldrh	r3, [r3, #0]
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	4a4e      	ldr	r2, [pc, #312]	@ (8012e90 <USB_EPStartXfer+0xaa8>)
 8012d58:	4313      	orrs	r3, r2
 8012d5a:	b29a      	uxth	r2, r3
 8012d5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d5e:	801a      	strh	r2, [r3, #0]
 8012d60:	e044      	b.n	8012dec <USB_EPStartXfer+0xa04>
 8012d62:	1d7b      	adds	r3, r7, #5
 8012d64:	33ff      	adds	r3, #255	@ 0xff
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	085b      	lsrs	r3, r3, #1
 8012d6a:	21ec      	movs	r1, #236	@ 0xec
 8012d6c:	187a      	adds	r2, r7, r1
 8012d6e:	6013      	str	r3, [r2, #0]
 8012d70:	1d7b      	adds	r3, r7, #5
 8012d72:	33ff      	adds	r3, #255	@ 0xff
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	2201      	movs	r2, #1
 8012d78:	4013      	ands	r3, r2
 8012d7a:	d004      	beq.n	8012d86 <USB_EPStartXfer+0x99e>
 8012d7c:	187b      	adds	r3, r7, r1
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	3301      	adds	r3, #1
 8012d82:	187a      	adds	r2, r7, r1
 8012d84:	6013      	str	r3, [r2, #0]
 8012d86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d88:	881b      	ldrh	r3, [r3, #0]
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	23ec      	movs	r3, #236	@ 0xec
 8012d8e:	18fb      	adds	r3, r7, r3
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	029b      	lsls	r3, r3, #10
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d9e:	801a      	strh	r2, [r3, #0]
 8012da0:	e024      	b.n	8012dec <USB_EPStartXfer+0xa04>
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	785b      	ldrb	r3, [r3, #1]
 8012da6:	2b01      	cmp	r3, #1
 8012da8:	d120      	bne.n	8012dec <USB_EPStartXfer+0xa04>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2184      	movs	r1, #132	@ 0x84
 8012dae:	187a      	adds	r2, r7, r1
 8012db0:	6013      	str	r3, [r2, #0]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2250      	movs	r2, #80	@ 0x50
 8012db6:	5a9b      	ldrh	r3, [r3, r2]
 8012db8:	b29b      	uxth	r3, r3
 8012dba:	001a      	movs	r2, r3
 8012dbc:	187b      	adds	r3, r7, r1
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	189b      	adds	r3, r3, r2
 8012dc2:	187a      	adds	r2, r7, r1
 8012dc4:	6013      	str	r3, [r2, #0]
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	00da      	lsls	r2, r3, #3
 8012dcc:	187b      	adds	r3, r7, r1
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	18d3      	adds	r3, r2, r3
 8012dd2:	4a30      	ldr	r2, [pc, #192]	@ (8012e94 <USB_EPStartXfer+0xaac>)
 8012dd4:	4694      	mov	ip, r2
 8012dd6:	4463      	add	r3, ip
 8012dd8:	2180      	movs	r1, #128	@ 0x80
 8012dda:	187a      	adds	r2, r7, r1
 8012ddc:	6013      	str	r3, [r2, #0]
 8012dde:	1d7b      	adds	r3, r7, #5
 8012de0:	33ff      	adds	r3, #255	@ 0xff
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	b29a      	uxth	r2, r3
 8012de6:	187b      	adds	r3, r7, r1
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012dec:	2076      	movs	r0, #118	@ 0x76
 8012dee:	183b      	adds	r3, r7, r0
 8012df0:	683a      	ldr	r2, [r7, #0]
 8012df2:	8912      	ldrh	r2, [r2, #8]
 8012df4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	6959      	ldr	r1, [r3, #20]
 8012dfa:	1d7b      	adds	r3, r7, #5
 8012dfc:	33ff      	adds	r3, #255	@ 0xff
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	b29c      	uxth	r4, r3
 8012e02:	183b      	adds	r3, r7, r0
 8012e04:	881a      	ldrh	r2, [r3, #0]
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	0023      	movs	r3, r4
 8012e0a:	f000 fd5f 	bl	80138cc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	18d3      	adds	r3, r2, r3
 8012e18:	881b      	ldrh	r3, [r3, #0]
 8012e1a:	b29a      	uxth	r2, r3
 8012e1c:	200a      	movs	r0, #10
 8012e1e:	183b      	adds	r3, r7, r0
 8012e20:	491d      	ldr	r1, [pc, #116]	@ (8012e98 <USB_EPStartXfer+0xab0>)
 8012e22:	400a      	ands	r2, r1
 8012e24:	801a      	strh	r2, [r3, #0]
 8012e26:	183b      	adds	r3, r7, r0
 8012e28:	183a      	adds	r2, r7, r0
 8012e2a:	8812      	ldrh	r2, [r2, #0]
 8012e2c:	2110      	movs	r1, #16
 8012e2e:	404a      	eors	r2, r1
 8012e30:	801a      	strh	r2, [r3, #0]
 8012e32:	183b      	adds	r3, r7, r0
 8012e34:	183a      	adds	r2, r7, r0
 8012e36:	8812      	ldrh	r2, [r2, #0]
 8012e38:	2120      	movs	r1, #32
 8012e3a:	404a      	eors	r2, r1
 8012e3c:	801a      	strh	r2, [r3, #0]
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	18d3      	adds	r3, r2, r3
 8012e48:	183a      	adds	r2, r7, r0
 8012e4a:	8812      	ldrh	r2, [r2, #0]
 8012e4c:	4913      	ldr	r1, [pc, #76]	@ (8012e9c <USB_EPStartXfer+0xab4>)
 8012e4e:	430a      	orrs	r2, r1
 8012e50:	b292      	uxth	r2, r2
 8012e52:	801a      	strh	r2, [r3, #0]
 8012e54:	f000 fbf4 	bl	8013640 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	7b1b      	ldrb	r3, [r3, #12]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d000      	beq.n	8012e62 <USB_EPStartXfer+0xa7a>
 8012e60:	e0a9      	b.n	8012fb6 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	699a      	ldr	r2, [r3, #24]
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	691b      	ldr	r3, [r3, #16]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d918      	bls.n	8012ea0 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	691b      	ldr	r3, [r3, #16]
 8012e72:	1d7a      	adds	r2, r7, #5
 8012e74:	32ff      	adds	r2, #255	@ 0xff
 8012e76:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	699a      	ldr	r2, [r3, #24]
 8012e7c:	1d7b      	adds	r3, r7, #5
 8012e7e:	33ff      	adds	r3, #255	@ 0xff
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	1ad2      	subs	r2, r2, r3
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	619a      	str	r2, [r3, #24]
 8012e88:	e012      	b.n	8012eb0 <USB_EPStartXfer+0xac8>
 8012e8a:	46c0      	nop			@ (mov r8, r8)
 8012e8c:	00000406 	.word	0x00000406
 8012e90:	ffff8000 	.word	0xffff8000
 8012e94:	00000402 	.word	0x00000402
 8012e98:	ffff8fbf 	.word	0xffff8fbf
 8012e9c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	699b      	ldr	r3, [r3, #24]
 8012ea4:	1d7a      	adds	r2, r7, #5
 8012ea6:	32ff      	adds	r2, #255	@ 0xff
 8012ea8:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	2200      	movs	r2, #0
 8012eae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2190      	movs	r1, #144	@ 0x90
 8012eb4:	187a      	adds	r2, r7, r1
 8012eb6:	6013      	str	r3, [r2, #0]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2250      	movs	r2, #80	@ 0x50
 8012ebc:	5a9b      	ldrh	r3, [r3, r2]
 8012ebe:	b29b      	uxth	r3, r3
 8012ec0:	001a      	movs	r2, r3
 8012ec2:	187b      	adds	r3, r7, r1
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	189b      	adds	r3, r3, r2
 8012ec8:	187a      	adds	r2, r7, r1
 8012eca:	6013      	str	r3, [r2, #0]
 8012ecc:	683b      	ldr	r3, [r7, #0]
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	00da      	lsls	r2, r3, #3
 8012ed2:	187b      	adds	r3, r7, r1
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	18d3      	adds	r3, r2, r3
 8012ed8:	4acf      	ldr	r2, [pc, #828]	@ (8013218 <USB_EPStartXfer+0xe30>)
 8012eda:	4694      	mov	ip, r2
 8012edc:	4463      	add	r3, ip
 8012ede:	218c      	movs	r1, #140	@ 0x8c
 8012ee0:	187a      	adds	r2, r7, r1
 8012ee2:	6013      	str	r3, [r2, #0]
 8012ee4:	187b      	adds	r3, r7, r1
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	059b      	lsls	r3, r3, #22
 8012eee:	0d9b      	lsrs	r3, r3, #22
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	187b      	adds	r3, r7, r1
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	801a      	strh	r2, [r3, #0]
 8012ef8:	1d7b      	adds	r3, r7, #5
 8012efa:	33ff      	adds	r3, #255	@ 0xff
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	2b3e      	cmp	r3, #62	@ 0x3e
 8012f00:	d925      	bls.n	8012f4e <USB_EPStartXfer+0xb66>
 8012f02:	1d7b      	adds	r3, r7, #5
 8012f04:	33ff      	adds	r3, #255	@ 0xff
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	095b      	lsrs	r3, r3, #5
 8012f0a:	21e8      	movs	r1, #232	@ 0xe8
 8012f0c:	187a      	adds	r2, r7, r1
 8012f0e:	6013      	str	r3, [r2, #0]
 8012f10:	1d7b      	adds	r3, r7, #5
 8012f12:	33ff      	adds	r3, #255	@ 0xff
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	221f      	movs	r2, #31
 8012f18:	4013      	ands	r3, r2
 8012f1a:	d104      	bne.n	8012f26 <USB_EPStartXfer+0xb3e>
 8012f1c:	187b      	adds	r3, r7, r1
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	3b01      	subs	r3, #1
 8012f22:	187a      	adds	r2, r7, r1
 8012f24:	6013      	str	r3, [r2, #0]
 8012f26:	218c      	movs	r1, #140	@ 0x8c
 8012f28:	187b      	adds	r3, r7, r1
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	23e8      	movs	r3, #232	@ 0xe8
 8012f32:	18fb      	adds	r3, r7, r3
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	029b      	lsls	r3, r3, #10
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	4313      	orrs	r3, r2
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	4ab6      	ldr	r2, [pc, #728]	@ (801321c <USB_EPStartXfer+0xe34>)
 8012f42:	4313      	orrs	r3, r2
 8012f44:	b29a      	uxth	r2, r3
 8012f46:	187b      	adds	r3, r7, r1
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	801a      	strh	r2, [r3, #0]
 8012f4c:	e353      	b.n	80135f6 <USB_EPStartXfer+0x120e>
 8012f4e:	1d7b      	adds	r3, r7, #5
 8012f50:	33ff      	adds	r3, #255	@ 0xff
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10b      	bne.n	8012f70 <USB_EPStartXfer+0xb88>
 8012f58:	218c      	movs	r1, #140	@ 0x8c
 8012f5a:	187b      	adds	r3, r7, r1
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	881b      	ldrh	r3, [r3, #0]
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	4aae      	ldr	r2, [pc, #696]	@ (801321c <USB_EPStartXfer+0xe34>)
 8012f64:	4313      	orrs	r3, r2
 8012f66:	b29a      	uxth	r2, r3
 8012f68:	187b      	adds	r3, r7, r1
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	801a      	strh	r2, [r3, #0]
 8012f6e:	e342      	b.n	80135f6 <USB_EPStartXfer+0x120e>
 8012f70:	1d7b      	adds	r3, r7, #5
 8012f72:	33ff      	adds	r3, #255	@ 0xff
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	085b      	lsrs	r3, r3, #1
 8012f78:	21e8      	movs	r1, #232	@ 0xe8
 8012f7a:	187a      	adds	r2, r7, r1
 8012f7c:	6013      	str	r3, [r2, #0]
 8012f7e:	1d7b      	adds	r3, r7, #5
 8012f80:	33ff      	adds	r3, #255	@ 0xff
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	2201      	movs	r2, #1
 8012f86:	4013      	ands	r3, r2
 8012f88:	d004      	beq.n	8012f94 <USB_EPStartXfer+0xbac>
 8012f8a:	187b      	adds	r3, r7, r1
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	3301      	adds	r3, #1
 8012f90:	187a      	adds	r2, r7, r1
 8012f92:	6013      	str	r3, [r2, #0]
 8012f94:	218c      	movs	r1, #140	@ 0x8c
 8012f96:	187b      	adds	r3, r7, r1
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	881b      	ldrh	r3, [r3, #0]
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	23e8      	movs	r3, #232	@ 0xe8
 8012fa0:	18fb      	adds	r3, r7, r3
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	029b      	lsls	r3, r3, #10
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	4313      	orrs	r3, r2
 8012fac:	b29a      	uxth	r2, r3
 8012fae:	187b      	adds	r3, r7, r1
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	801a      	strh	r2, [r3, #0]
 8012fb4:	e31f      	b.n	80135f6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	78db      	ldrb	r3, [r3, #3]
 8012fba:	2b02      	cmp	r3, #2
 8012fbc:	d000      	beq.n	8012fc0 <USB_EPStartXfer+0xbd8>
 8012fbe:	e191      	b.n	80132e4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	785b      	ldrb	r3, [r3, #1]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d000      	beq.n	8012fca <USB_EPStartXfer+0xbe2>
 8012fc8:	e07c      	b.n	80130c4 <USB_EPStartXfer+0xcdc>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	21ac      	movs	r1, #172	@ 0xac
 8012fce:	187a      	adds	r2, r7, r1
 8012fd0:	6013      	str	r3, [r2, #0]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2250      	movs	r2, #80	@ 0x50
 8012fd6:	5a9b      	ldrh	r3, [r3, r2]
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	001a      	movs	r2, r3
 8012fdc:	187b      	adds	r3, r7, r1
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	189b      	adds	r3, r3, r2
 8012fe2:	187a      	adds	r2, r7, r1
 8012fe4:	6013      	str	r3, [r2, #0]
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	00da      	lsls	r2, r3, #3
 8012fec:	187b      	adds	r3, r7, r1
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	18d3      	adds	r3, r2, r3
 8012ff2:	4a8b      	ldr	r2, [pc, #556]	@ (8013220 <USB_EPStartXfer+0xe38>)
 8012ff4:	4694      	mov	ip, r2
 8012ff6:	4463      	add	r3, ip
 8012ff8:	21a8      	movs	r1, #168	@ 0xa8
 8012ffa:	187a      	adds	r2, r7, r1
 8012ffc:	6013      	str	r3, [r2, #0]
 8012ffe:	187b      	adds	r3, r7, r1
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	881b      	ldrh	r3, [r3, #0]
 8013004:	b29b      	uxth	r3, r3
 8013006:	059b      	lsls	r3, r3, #22
 8013008:	0d9b      	lsrs	r3, r3, #22
 801300a:	b29a      	uxth	r2, r3
 801300c:	187b      	adds	r3, r7, r1
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	801a      	strh	r2, [r3, #0]
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	691b      	ldr	r3, [r3, #16]
 8013016:	2b3e      	cmp	r3, #62	@ 0x3e
 8013018:	d923      	bls.n	8013062 <USB_EPStartXfer+0xc7a>
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	691b      	ldr	r3, [r3, #16]
 801301e:	095b      	lsrs	r3, r3, #5
 8013020:	21e4      	movs	r1, #228	@ 0xe4
 8013022:	187a      	adds	r2, r7, r1
 8013024:	6013      	str	r3, [r2, #0]
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	691b      	ldr	r3, [r3, #16]
 801302a:	221f      	movs	r2, #31
 801302c:	4013      	ands	r3, r2
 801302e:	d104      	bne.n	801303a <USB_EPStartXfer+0xc52>
 8013030:	187b      	adds	r3, r7, r1
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	3b01      	subs	r3, #1
 8013036:	187a      	adds	r2, r7, r1
 8013038:	6013      	str	r3, [r2, #0]
 801303a:	21a8      	movs	r1, #168	@ 0xa8
 801303c:	187b      	adds	r3, r7, r1
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	881b      	ldrh	r3, [r3, #0]
 8013042:	b29a      	uxth	r2, r3
 8013044:	23e4      	movs	r3, #228	@ 0xe4
 8013046:	18fb      	adds	r3, r7, r3
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	b29b      	uxth	r3, r3
 801304c:	029b      	lsls	r3, r3, #10
 801304e:	b29b      	uxth	r3, r3
 8013050:	4313      	orrs	r3, r2
 8013052:	b29b      	uxth	r3, r3
 8013054:	4a71      	ldr	r2, [pc, #452]	@ (801321c <USB_EPStartXfer+0xe34>)
 8013056:	4313      	orrs	r3, r2
 8013058:	b29a      	uxth	r2, r3
 801305a:	187b      	adds	r3, r7, r1
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	801a      	strh	r2, [r3, #0]
 8013060:	e054      	b.n	801310c <USB_EPStartXfer+0xd24>
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	691b      	ldr	r3, [r3, #16]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d10b      	bne.n	8013082 <USB_EPStartXfer+0xc9a>
 801306a:	21a8      	movs	r1, #168	@ 0xa8
 801306c:	187b      	adds	r3, r7, r1
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	881b      	ldrh	r3, [r3, #0]
 8013072:	b29b      	uxth	r3, r3
 8013074:	4a69      	ldr	r2, [pc, #420]	@ (801321c <USB_EPStartXfer+0xe34>)
 8013076:	4313      	orrs	r3, r2
 8013078:	b29a      	uxth	r2, r3
 801307a:	187b      	adds	r3, r7, r1
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	801a      	strh	r2, [r3, #0]
 8013080:	e044      	b.n	801310c <USB_EPStartXfer+0xd24>
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	691b      	ldr	r3, [r3, #16]
 8013086:	085b      	lsrs	r3, r3, #1
 8013088:	21e4      	movs	r1, #228	@ 0xe4
 801308a:	187a      	adds	r2, r7, r1
 801308c:	6013      	str	r3, [r2, #0]
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	2201      	movs	r2, #1
 8013094:	4013      	ands	r3, r2
 8013096:	d004      	beq.n	80130a2 <USB_EPStartXfer+0xcba>
 8013098:	187b      	adds	r3, r7, r1
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	3301      	adds	r3, #1
 801309e:	187a      	adds	r2, r7, r1
 80130a0:	6013      	str	r3, [r2, #0]
 80130a2:	21a8      	movs	r1, #168	@ 0xa8
 80130a4:	187b      	adds	r3, r7, r1
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	881b      	ldrh	r3, [r3, #0]
 80130aa:	b29a      	uxth	r2, r3
 80130ac:	23e4      	movs	r3, #228	@ 0xe4
 80130ae:	18fb      	adds	r3, r7, r3
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	029b      	lsls	r3, r3, #10
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	4313      	orrs	r3, r2
 80130ba:	b29a      	uxth	r2, r3
 80130bc:	187b      	adds	r3, r7, r1
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	801a      	strh	r2, [r3, #0]
 80130c2:	e023      	b.n	801310c <USB_EPStartXfer+0xd24>
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	785b      	ldrb	r3, [r3, #1]
 80130c8:	2b01      	cmp	r3, #1
 80130ca:	d11f      	bne.n	801310c <USB_EPStartXfer+0xd24>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	21b4      	movs	r1, #180	@ 0xb4
 80130d0:	187a      	adds	r2, r7, r1
 80130d2:	6013      	str	r3, [r2, #0]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2250      	movs	r2, #80	@ 0x50
 80130d8:	5a9b      	ldrh	r3, [r3, r2]
 80130da:	b29b      	uxth	r3, r3
 80130dc:	001a      	movs	r2, r3
 80130de:	187b      	adds	r3, r7, r1
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	189b      	adds	r3, r3, r2
 80130e4:	187a      	adds	r2, r7, r1
 80130e6:	6013      	str	r3, [r2, #0]
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	00da      	lsls	r2, r3, #3
 80130ee:	187b      	adds	r3, r7, r1
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	18d3      	adds	r3, r2, r3
 80130f4:	4a4a      	ldr	r2, [pc, #296]	@ (8013220 <USB_EPStartXfer+0xe38>)
 80130f6:	4694      	mov	ip, r2
 80130f8:	4463      	add	r3, ip
 80130fa:	21b0      	movs	r1, #176	@ 0xb0
 80130fc:	187a      	adds	r2, r7, r1
 80130fe:	6013      	str	r3, [r2, #0]
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	691b      	ldr	r3, [r3, #16]
 8013104:	b29a      	uxth	r2, r3
 8013106:	187b      	adds	r3, r7, r1
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	801a      	strh	r2, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	22a4      	movs	r2, #164	@ 0xa4
 8013110:	18ba      	adds	r2, r7, r2
 8013112:	6013      	str	r3, [r2, #0]
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	785b      	ldrb	r3, [r3, #1]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d000      	beq.n	801311e <USB_EPStartXfer+0xd36>
 801311c:	e082      	b.n	8013224 <USB_EPStartXfer+0xe3c>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	219c      	movs	r1, #156	@ 0x9c
 8013122:	187a      	adds	r2, r7, r1
 8013124:	6013      	str	r3, [r2, #0]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2250      	movs	r2, #80	@ 0x50
 801312a:	5a9b      	ldrh	r3, [r3, r2]
 801312c:	b29b      	uxth	r3, r3
 801312e:	001a      	movs	r2, r3
 8013130:	187b      	adds	r3, r7, r1
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	189b      	adds	r3, r3, r2
 8013136:	187a      	adds	r2, r7, r1
 8013138:	6013      	str	r3, [r2, #0]
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	00da      	lsls	r2, r3, #3
 8013140:	187b      	adds	r3, r7, r1
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	18d3      	adds	r3, r2, r3
 8013146:	4a34      	ldr	r2, [pc, #208]	@ (8013218 <USB_EPStartXfer+0xe30>)
 8013148:	4694      	mov	ip, r2
 801314a:	4463      	add	r3, ip
 801314c:	2198      	movs	r1, #152	@ 0x98
 801314e:	187a      	adds	r2, r7, r1
 8013150:	6013      	str	r3, [r2, #0]
 8013152:	187b      	adds	r3, r7, r1
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	881b      	ldrh	r3, [r3, #0]
 8013158:	b29b      	uxth	r3, r3
 801315a:	059b      	lsls	r3, r3, #22
 801315c:	0d9b      	lsrs	r3, r3, #22
 801315e:	b29a      	uxth	r2, r3
 8013160:	187b      	adds	r3, r7, r1
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	801a      	strh	r2, [r3, #0]
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	691b      	ldr	r3, [r3, #16]
 801316a:	2b3e      	cmp	r3, #62	@ 0x3e
 801316c:	d923      	bls.n	80131b6 <USB_EPStartXfer+0xdce>
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	691b      	ldr	r3, [r3, #16]
 8013172:	095b      	lsrs	r3, r3, #5
 8013174:	21e0      	movs	r1, #224	@ 0xe0
 8013176:	187a      	adds	r2, r7, r1
 8013178:	6013      	str	r3, [r2, #0]
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	221f      	movs	r2, #31
 8013180:	4013      	ands	r3, r2
 8013182:	d104      	bne.n	801318e <USB_EPStartXfer+0xda6>
 8013184:	187b      	adds	r3, r7, r1
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	3b01      	subs	r3, #1
 801318a:	187a      	adds	r2, r7, r1
 801318c:	6013      	str	r3, [r2, #0]
 801318e:	2198      	movs	r1, #152	@ 0x98
 8013190:	187b      	adds	r3, r7, r1
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	881b      	ldrh	r3, [r3, #0]
 8013196:	b29a      	uxth	r2, r3
 8013198:	23e0      	movs	r3, #224	@ 0xe0
 801319a:	18fb      	adds	r3, r7, r3
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	b29b      	uxth	r3, r3
 80131a0:	029b      	lsls	r3, r3, #10
 80131a2:	b29b      	uxth	r3, r3
 80131a4:	4313      	orrs	r3, r2
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	4a1c      	ldr	r2, [pc, #112]	@ (801321c <USB_EPStartXfer+0xe34>)
 80131aa:	4313      	orrs	r3, r2
 80131ac:	b29a      	uxth	r2, r3
 80131ae:	187b      	adds	r3, r7, r1
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	801a      	strh	r2, [r3, #0]
 80131b4:	e057      	b.n	8013266 <USB_EPStartXfer+0xe7e>
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	691b      	ldr	r3, [r3, #16]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d10b      	bne.n	80131d6 <USB_EPStartXfer+0xdee>
 80131be:	2198      	movs	r1, #152	@ 0x98
 80131c0:	187b      	adds	r3, r7, r1
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	881b      	ldrh	r3, [r3, #0]
 80131c6:	b29b      	uxth	r3, r3
 80131c8:	4a14      	ldr	r2, [pc, #80]	@ (801321c <USB_EPStartXfer+0xe34>)
 80131ca:	4313      	orrs	r3, r2
 80131cc:	b29a      	uxth	r2, r3
 80131ce:	187b      	adds	r3, r7, r1
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	801a      	strh	r2, [r3, #0]
 80131d4:	e047      	b.n	8013266 <USB_EPStartXfer+0xe7e>
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	691b      	ldr	r3, [r3, #16]
 80131da:	085b      	lsrs	r3, r3, #1
 80131dc:	21e0      	movs	r1, #224	@ 0xe0
 80131de:	187a      	adds	r2, r7, r1
 80131e0:	6013      	str	r3, [r2, #0]
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	691b      	ldr	r3, [r3, #16]
 80131e6:	2201      	movs	r2, #1
 80131e8:	4013      	ands	r3, r2
 80131ea:	d004      	beq.n	80131f6 <USB_EPStartXfer+0xe0e>
 80131ec:	187b      	adds	r3, r7, r1
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	3301      	adds	r3, #1
 80131f2:	187a      	adds	r2, r7, r1
 80131f4:	6013      	str	r3, [r2, #0]
 80131f6:	2198      	movs	r1, #152	@ 0x98
 80131f8:	187b      	adds	r3, r7, r1
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	881b      	ldrh	r3, [r3, #0]
 80131fe:	b29a      	uxth	r2, r3
 8013200:	23e0      	movs	r3, #224	@ 0xe0
 8013202:	18fb      	adds	r3, r7, r3
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	b29b      	uxth	r3, r3
 8013208:	029b      	lsls	r3, r3, #10
 801320a:	b29b      	uxth	r3, r3
 801320c:	4313      	orrs	r3, r2
 801320e:	b29a      	uxth	r2, r3
 8013210:	187b      	adds	r3, r7, r1
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	801a      	strh	r2, [r3, #0]
 8013216:	e026      	b.n	8013266 <USB_EPStartXfer+0xe7e>
 8013218:	00000406 	.word	0x00000406
 801321c:	ffff8000 	.word	0xffff8000
 8013220:	00000402 	.word	0x00000402
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	785b      	ldrb	r3, [r3, #1]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d11c      	bne.n	8013266 <USB_EPStartXfer+0xe7e>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2250      	movs	r2, #80	@ 0x50
 8013230:	5a9b      	ldrh	r3, [r3, r2]
 8013232:	b29b      	uxth	r3, r3
 8013234:	001a      	movs	r2, r3
 8013236:	21a4      	movs	r1, #164	@ 0xa4
 8013238:	187b      	adds	r3, r7, r1
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	189b      	adds	r3, r3, r2
 801323e:	187a      	adds	r2, r7, r1
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	00da      	lsls	r2, r3, #3
 8013248:	187b      	adds	r3, r7, r1
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	18d3      	adds	r3, r2, r3
 801324e:	4ad2      	ldr	r2, [pc, #840]	@ (8013598 <USB_EPStartXfer+0x11b0>)
 8013250:	4694      	mov	ip, r2
 8013252:	4463      	add	r3, ip
 8013254:	21a0      	movs	r1, #160	@ 0xa0
 8013256:	187a      	adds	r2, r7, r1
 8013258:	6013      	str	r3, [r2, #0]
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	691b      	ldr	r3, [r3, #16]
 801325e:	b29a      	uxth	r2, r3
 8013260:	187b      	adds	r3, r7, r1
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	69db      	ldr	r3, [r3, #28]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d100      	bne.n	8013270 <USB_EPStartXfer+0xe88>
 801326e:	e1c2      	b.n	80135f6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	18d2      	adds	r2, r2, r3
 801327a:	2196      	movs	r1, #150	@ 0x96
 801327c:	187b      	adds	r3, r7, r1
 801327e:	8812      	ldrh	r2, [r2, #0]
 8013280:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013282:	187b      	adds	r3, r7, r1
 8013284:	881a      	ldrh	r2, [r3, #0]
 8013286:	2380      	movs	r3, #128	@ 0x80
 8013288:	01db      	lsls	r3, r3, #7
 801328a:	4013      	ands	r3, r2
 801328c:	d004      	beq.n	8013298 <USB_EPStartXfer+0xeb0>
 801328e:	187b      	adds	r3, r7, r1
 8013290:	881b      	ldrh	r3, [r3, #0]
 8013292:	2240      	movs	r2, #64	@ 0x40
 8013294:	4013      	ands	r3, r2
 8013296:	d10d      	bne.n	80132b4 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013298:	2196      	movs	r1, #150	@ 0x96
 801329a:	187b      	adds	r3, r7, r1
 801329c:	881a      	ldrh	r2, [r3, #0]
 801329e:	2380      	movs	r3, #128	@ 0x80
 80132a0:	01db      	lsls	r3, r3, #7
 80132a2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80132a4:	d000      	beq.n	80132a8 <USB_EPStartXfer+0xec0>
 80132a6:	e1a6      	b.n	80135f6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80132a8:	187b      	adds	r3, r7, r1
 80132aa:	881b      	ldrh	r3, [r3, #0]
 80132ac:	2240      	movs	r2, #64	@ 0x40
 80132ae:	4013      	ands	r3, r2
 80132b0:	d000      	beq.n	80132b4 <USB_EPStartXfer+0xecc>
 80132b2:	e1a0      	b.n	80135f6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80132b4:	687a      	ldr	r2, [r7, #4]
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	009b      	lsls	r3, r3, #2
 80132bc:	18d3      	adds	r3, r2, r3
 80132be:	881b      	ldrh	r3, [r3, #0]
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	2094      	movs	r0, #148	@ 0x94
 80132c4:	183b      	adds	r3, r7, r0
 80132c6:	49b5      	ldr	r1, [pc, #724]	@ (801359c <USB_EPStartXfer+0x11b4>)
 80132c8:	400a      	ands	r2, r1
 80132ca:	801a      	strh	r2, [r3, #0]
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	009b      	lsls	r3, r3, #2
 80132d4:	18d3      	adds	r3, r2, r3
 80132d6:	183a      	adds	r2, r7, r0
 80132d8:	8812      	ldrh	r2, [r2, #0]
 80132da:	49b1      	ldr	r1, [pc, #708]	@ (80135a0 <USB_EPStartXfer+0x11b8>)
 80132dc:	430a      	orrs	r2, r1
 80132de:	b292      	uxth	r2, r2
 80132e0:	801a      	strh	r2, [r3, #0]
 80132e2:	e188      	b.n	80135f6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	78db      	ldrb	r3, [r3, #3]
 80132e8:	2b01      	cmp	r3, #1
 80132ea:	d000      	beq.n	80132ee <USB_EPStartXfer+0xf06>
 80132ec:	e181      	b.n	80135f2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	699a      	ldr	r2, [r3, #24]
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	691b      	ldr	r3, [r3, #16]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d90d      	bls.n	8013316 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	691b      	ldr	r3, [r3, #16]
 80132fe:	1d7a      	adds	r2, r7, #5
 8013300:	32ff      	adds	r2, #255	@ 0xff
 8013302:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	699a      	ldr	r2, [r3, #24]
 8013308:	1d7b      	adds	r3, r7, #5
 801330a:	33ff      	adds	r3, #255	@ 0xff
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	1ad2      	subs	r2, r2, r3
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	619a      	str	r2, [r3, #24]
 8013314:	e007      	b.n	8013326 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	699b      	ldr	r3, [r3, #24]
 801331a:	1d7a      	adds	r2, r7, #5
 801331c:	32ff      	adds	r2, #255	@ 0xff
 801331e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	2200      	movs	r2, #0
 8013324:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	785b      	ldrb	r3, [r3, #1]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d000      	beq.n	8013330 <USB_EPStartXfer+0xf48>
 801332e:	e082      	b.n	8013436 <USB_EPStartXfer+0x104e>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	21cc      	movs	r1, #204	@ 0xcc
 8013334:	187a      	adds	r2, r7, r1
 8013336:	6013      	str	r3, [r2, #0]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2250      	movs	r2, #80	@ 0x50
 801333c:	5a9b      	ldrh	r3, [r3, r2]
 801333e:	b29b      	uxth	r3, r3
 8013340:	001a      	movs	r2, r3
 8013342:	187b      	adds	r3, r7, r1
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	189b      	adds	r3, r3, r2
 8013348:	187a      	adds	r2, r7, r1
 801334a:	6013      	str	r3, [r2, #0]
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	00da      	lsls	r2, r3, #3
 8013352:	187b      	adds	r3, r7, r1
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	18d3      	adds	r3, r2, r3
 8013358:	4a92      	ldr	r2, [pc, #584]	@ (80135a4 <USB_EPStartXfer+0x11bc>)
 801335a:	4694      	mov	ip, r2
 801335c:	4463      	add	r3, ip
 801335e:	21c8      	movs	r1, #200	@ 0xc8
 8013360:	187a      	adds	r2, r7, r1
 8013362:	6013      	str	r3, [r2, #0]
 8013364:	187b      	adds	r3, r7, r1
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	881b      	ldrh	r3, [r3, #0]
 801336a:	b29b      	uxth	r3, r3
 801336c:	059b      	lsls	r3, r3, #22
 801336e:	0d9b      	lsrs	r3, r3, #22
 8013370:	b29a      	uxth	r2, r3
 8013372:	187b      	adds	r3, r7, r1
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	801a      	strh	r2, [r3, #0]
 8013378:	1d7b      	adds	r3, r7, #5
 801337a:	33ff      	adds	r3, #255	@ 0xff
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013380:	d925      	bls.n	80133ce <USB_EPStartXfer+0xfe6>
 8013382:	1d7b      	adds	r3, r7, #5
 8013384:	33ff      	adds	r3, #255	@ 0xff
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	095b      	lsrs	r3, r3, #5
 801338a:	21dc      	movs	r1, #220	@ 0xdc
 801338c:	187a      	adds	r2, r7, r1
 801338e:	6013      	str	r3, [r2, #0]
 8013390:	1d7b      	adds	r3, r7, #5
 8013392:	33ff      	adds	r3, #255	@ 0xff
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	221f      	movs	r2, #31
 8013398:	4013      	ands	r3, r2
 801339a:	d104      	bne.n	80133a6 <USB_EPStartXfer+0xfbe>
 801339c:	187b      	adds	r3, r7, r1
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	3b01      	subs	r3, #1
 80133a2:	187a      	adds	r2, r7, r1
 80133a4:	6013      	str	r3, [r2, #0]
 80133a6:	21c8      	movs	r1, #200	@ 0xc8
 80133a8:	187b      	adds	r3, r7, r1
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	881b      	ldrh	r3, [r3, #0]
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	23dc      	movs	r3, #220	@ 0xdc
 80133b2:	18fb      	adds	r3, r7, r3
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	029b      	lsls	r3, r3, #10
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	4313      	orrs	r3, r2
 80133be:	b29b      	uxth	r3, r3
 80133c0:	4a79      	ldr	r2, [pc, #484]	@ (80135a8 <USB_EPStartXfer+0x11c0>)
 80133c2:	4313      	orrs	r3, r2
 80133c4:	b29a      	uxth	r2, r3
 80133c6:	187b      	adds	r3, r7, r1
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	801a      	strh	r2, [r3, #0]
 80133cc:	e058      	b.n	8013480 <USB_EPStartXfer+0x1098>
 80133ce:	1d7b      	adds	r3, r7, #5
 80133d0:	33ff      	adds	r3, #255	@ 0xff
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d10b      	bne.n	80133f0 <USB_EPStartXfer+0x1008>
 80133d8:	21c8      	movs	r1, #200	@ 0xc8
 80133da:	187b      	adds	r3, r7, r1
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	881b      	ldrh	r3, [r3, #0]
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	4a71      	ldr	r2, [pc, #452]	@ (80135a8 <USB_EPStartXfer+0x11c0>)
 80133e4:	4313      	orrs	r3, r2
 80133e6:	b29a      	uxth	r2, r3
 80133e8:	187b      	adds	r3, r7, r1
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	801a      	strh	r2, [r3, #0]
 80133ee:	e047      	b.n	8013480 <USB_EPStartXfer+0x1098>
 80133f0:	1d7b      	adds	r3, r7, #5
 80133f2:	33ff      	adds	r3, #255	@ 0xff
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	085b      	lsrs	r3, r3, #1
 80133f8:	21dc      	movs	r1, #220	@ 0xdc
 80133fa:	187a      	adds	r2, r7, r1
 80133fc:	6013      	str	r3, [r2, #0]
 80133fe:	1d7b      	adds	r3, r7, #5
 8013400:	33ff      	adds	r3, #255	@ 0xff
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	2201      	movs	r2, #1
 8013406:	4013      	ands	r3, r2
 8013408:	d004      	beq.n	8013414 <USB_EPStartXfer+0x102c>
 801340a:	187b      	adds	r3, r7, r1
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	3301      	adds	r3, #1
 8013410:	187a      	adds	r2, r7, r1
 8013412:	6013      	str	r3, [r2, #0]
 8013414:	21c8      	movs	r1, #200	@ 0xc8
 8013416:	187b      	adds	r3, r7, r1
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	b29a      	uxth	r2, r3
 801341e:	23dc      	movs	r3, #220	@ 0xdc
 8013420:	18fb      	adds	r3, r7, r3
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	b29b      	uxth	r3, r3
 8013426:	029b      	lsls	r3, r3, #10
 8013428:	b29b      	uxth	r3, r3
 801342a:	4313      	orrs	r3, r2
 801342c:	b29a      	uxth	r2, r3
 801342e:	187b      	adds	r3, r7, r1
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	801a      	strh	r2, [r3, #0]
 8013434:	e024      	b.n	8013480 <USB_EPStartXfer+0x1098>
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	785b      	ldrb	r3, [r3, #1]
 801343a:	2b01      	cmp	r3, #1
 801343c:	d120      	bne.n	8013480 <USB_EPStartXfer+0x1098>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	21d4      	movs	r1, #212	@ 0xd4
 8013442:	187a      	adds	r2, r7, r1
 8013444:	6013      	str	r3, [r2, #0]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	2250      	movs	r2, #80	@ 0x50
 801344a:	5a9b      	ldrh	r3, [r3, r2]
 801344c:	b29b      	uxth	r3, r3
 801344e:	001a      	movs	r2, r3
 8013450:	187b      	adds	r3, r7, r1
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	189b      	adds	r3, r3, r2
 8013456:	187a      	adds	r2, r7, r1
 8013458:	6013      	str	r3, [r2, #0]
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	781b      	ldrb	r3, [r3, #0]
 801345e:	00da      	lsls	r2, r3, #3
 8013460:	187b      	adds	r3, r7, r1
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	18d3      	adds	r3, r2, r3
 8013466:	4a4f      	ldr	r2, [pc, #316]	@ (80135a4 <USB_EPStartXfer+0x11bc>)
 8013468:	4694      	mov	ip, r2
 801346a:	4463      	add	r3, ip
 801346c:	21d0      	movs	r1, #208	@ 0xd0
 801346e:	187a      	adds	r2, r7, r1
 8013470:	6013      	str	r3, [r2, #0]
 8013472:	1d7b      	adds	r3, r7, #5
 8013474:	33ff      	adds	r3, #255	@ 0xff
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	b29a      	uxth	r2, r3
 801347a:	187b      	adds	r3, r7, r1
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	801a      	strh	r2, [r3, #0]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	22c4      	movs	r2, #196	@ 0xc4
 8013484:	18ba      	adds	r2, r7, r2
 8013486:	6013      	str	r3, [r2, #0]
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	785b      	ldrb	r3, [r3, #1]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d000      	beq.n	8013492 <USB_EPStartXfer+0x10aa>
 8013490:	e08c      	b.n	80135ac <USB_EPStartXfer+0x11c4>
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	21bc      	movs	r1, #188	@ 0xbc
 8013496:	187a      	adds	r2, r7, r1
 8013498:	6013      	str	r3, [r2, #0]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	2250      	movs	r2, #80	@ 0x50
 801349e:	5a9b      	ldrh	r3, [r3, r2]
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	001a      	movs	r2, r3
 80134a4:	187b      	adds	r3, r7, r1
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	189b      	adds	r3, r3, r2
 80134aa:	187a      	adds	r2, r7, r1
 80134ac:	6013      	str	r3, [r2, #0]
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	781b      	ldrb	r3, [r3, #0]
 80134b2:	00da      	lsls	r2, r3, #3
 80134b4:	187b      	adds	r3, r7, r1
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	18d3      	adds	r3, r2, r3
 80134ba:	4a37      	ldr	r2, [pc, #220]	@ (8013598 <USB_EPStartXfer+0x11b0>)
 80134bc:	4694      	mov	ip, r2
 80134be:	4463      	add	r3, ip
 80134c0:	21b8      	movs	r1, #184	@ 0xb8
 80134c2:	187a      	adds	r2, r7, r1
 80134c4:	6013      	str	r3, [r2, #0]
 80134c6:	187b      	adds	r3, r7, r1
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	881b      	ldrh	r3, [r3, #0]
 80134cc:	b29b      	uxth	r3, r3
 80134ce:	059b      	lsls	r3, r3, #22
 80134d0:	0d9b      	lsrs	r3, r3, #22
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	187b      	adds	r3, r7, r1
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	801a      	strh	r2, [r3, #0]
 80134da:	1d7b      	adds	r3, r7, #5
 80134dc:	33ff      	adds	r3, #255	@ 0xff
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80134e2:	d925      	bls.n	8013530 <USB_EPStartXfer+0x1148>
 80134e4:	1d7b      	adds	r3, r7, #5
 80134e6:	33ff      	adds	r3, #255	@ 0xff
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	095b      	lsrs	r3, r3, #5
 80134ec:	21d8      	movs	r1, #216	@ 0xd8
 80134ee:	187a      	adds	r2, r7, r1
 80134f0:	6013      	str	r3, [r2, #0]
 80134f2:	1d7b      	adds	r3, r7, #5
 80134f4:	33ff      	adds	r3, #255	@ 0xff
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	221f      	movs	r2, #31
 80134fa:	4013      	ands	r3, r2
 80134fc:	d104      	bne.n	8013508 <USB_EPStartXfer+0x1120>
 80134fe:	187b      	adds	r3, r7, r1
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	3b01      	subs	r3, #1
 8013504:	187a      	adds	r2, r7, r1
 8013506:	6013      	str	r3, [r2, #0]
 8013508:	21b8      	movs	r1, #184	@ 0xb8
 801350a:	187b      	adds	r3, r7, r1
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	881b      	ldrh	r3, [r3, #0]
 8013510:	b29a      	uxth	r2, r3
 8013512:	23d8      	movs	r3, #216	@ 0xd8
 8013514:	18fb      	adds	r3, r7, r3
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	b29b      	uxth	r3, r3
 801351a:	029b      	lsls	r3, r3, #10
 801351c:	b29b      	uxth	r3, r3
 801351e:	4313      	orrs	r3, r2
 8013520:	b29b      	uxth	r3, r3
 8013522:	4a21      	ldr	r2, [pc, #132]	@ (80135a8 <USB_EPStartXfer+0x11c0>)
 8013524:	4313      	orrs	r3, r2
 8013526:	b29a      	uxth	r2, r3
 8013528:	187b      	adds	r3, r7, r1
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	801a      	strh	r2, [r3, #0]
 801352e:	e062      	b.n	80135f6 <USB_EPStartXfer+0x120e>
 8013530:	1d7b      	adds	r3, r7, #5
 8013532:	33ff      	adds	r3, #255	@ 0xff
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d10b      	bne.n	8013552 <USB_EPStartXfer+0x116a>
 801353a:	21b8      	movs	r1, #184	@ 0xb8
 801353c:	187b      	adds	r3, r7, r1
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	b29b      	uxth	r3, r3
 8013544:	4a18      	ldr	r2, [pc, #96]	@ (80135a8 <USB_EPStartXfer+0x11c0>)
 8013546:	4313      	orrs	r3, r2
 8013548:	b29a      	uxth	r2, r3
 801354a:	187b      	adds	r3, r7, r1
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	801a      	strh	r2, [r3, #0]
 8013550:	e051      	b.n	80135f6 <USB_EPStartXfer+0x120e>
 8013552:	1d7b      	adds	r3, r7, #5
 8013554:	33ff      	adds	r3, #255	@ 0xff
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	085b      	lsrs	r3, r3, #1
 801355a:	21d8      	movs	r1, #216	@ 0xd8
 801355c:	187a      	adds	r2, r7, r1
 801355e:	6013      	str	r3, [r2, #0]
 8013560:	1d7b      	adds	r3, r7, #5
 8013562:	33ff      	adds	r3, #255	@ 0xff
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2201      	movs	r2, #1
 8013568:	4013      	ands	r3, r2
 801356a:	d004      	beq.n	8013576 <USB_EPStartXfer+0x118e>
 801356c:	187b      	adds	r3, r7, r1
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	3301      	adds	r3, #1
 8013572:	187a      	adds	r2, r7, r1
 8013574:	6013      	str	r3, [r2, #0]
 8013576:	21b8      	movs	r1, #184	@ 0xb8
 8013578:	187b      	adds	r3, r7, r1
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	b29a      	uxth	r2, r3
 8013580:	23d8      	movs	r3, #216	@ 0xd8
 8013582:	18fb      	adds	r3, r7, r3
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	b29b      	uxth	r3, r3
 8013588:	029b      	lsls	r3, r3, #10
 801358a:	b29b      	uxth	r3, r3
 801358c:	4313      	orrs	r3, r2
 801358e:	b29a      	uxth	r2, r3
 8013590:	187b      	adds	r3, r7, r1
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	801a      	strh	r2, [r3, #0]
 8013596:	e02e      	b.n	80135f6 <USB_EPStartXfer+0x120e>
 8013598:	00000406 	.word	0x00000406
 801359c:	ffff8f8f 	.word	0xffff8f8f
 80135a0:	ffff80c0 	.word	0xffff80c0
 80135a4:	00000402 	.word	0x00000402
 80135a8:	ffff8000 	.word	0xffff8000
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	785b      	ldrb	r3, [r3, #1]
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d120      	bne.n	80135f6 <USB_EPStartXfer+0x120e>
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2250      	movs	r2, #80	@ 0x50
 80135b8:	5a9b      	ldrh	r3, [r3, r2]
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	001a      	movs	r2, r3
 80135be:	21c4      	movs	r1, #196	@ 0xc4
 80135c0:	187b      	adds	r3, r7, r1
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	189b      	adds	r3, r3, r2
 80135c6:	187a      	adds	r2, r7, r1
 80135c8:	6013      	str	r3, [r2, #0]
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	00da      	lsls	r2, r3, #3
 80135d0:	187b      	adds	r3, r7, r1
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	18d3      	adds	r3, r2, r3
 80135d6:	4a1d      	ldr	r2, [pc, #116]	@ (801364c <USB_EPStartXfer+0x1264>)
 80135d8:	4694      	mov	ip, r2
 80135da:	4463      	add	r3, ip
 80135dc:	21c0      	movs	r1, #192	@ 0xc0
 80135de:	187a      	adds	r2, r7, r1
 80135e0:	6013      	str	r3, [r2, #0]
 80135e2:	1d7b      	adds	r3, r7, #5
 80135e4:	33ff      	adds	r3, #255	@ 0xff
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	b29a      	uxth	r2, r3
 80135ea:	187b      	adds	r3, r7, r1
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	801a      	strh	r2, [r3, #0]
 80135f0:	e001      	b.n	80135f6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80135f2:	2301      	movs	r3, #1
 80135f4:	e025      	b.n	8013642 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	18d3      	adds	r3, r2, r3
 8013600:	881b      	ldrh	r3, [r3, #0]
 8013602:	b29a      	uxth	r2, r3
 8013604:	208a      	movs	r0, #138	@ 0x8a
 8013606:	183b      	adds	r3, r7, r0
 8013608:	4911      	ldr	r1, [pc, #68]	@ (8013650 <USB_EPStartXfer+0x1268>)
 801360a:	400a      	ands	r2, r1
 801360c:	801a      	strh	r2, [r3, #0]
 801360e:	183b      	adds	r3, r7, r0
 8013610:	183a      	adds	r2, r7, r0
 8013612:	8812      	ldrh	r2, [r2, #0]
 8013614:	2180      	movs	r1, #128	@ 0x80
 8013616:	0149      	lsls	r1, r1, #5
 8013618:	404a      	eors	r2, r1
 801361a:	801a      	strh	r2, [r3, #0]
 801361c:	183b      	adds	r3, r7, r0
 801361e:	183a      	adds	r2, r7, r0
 8013620:	8812      	ldrh	r2, [r2, #0]
 8013622:	2180      	movs	r1, #128	@ 0x80
 8013624:	0189      	lsls	r1, r1, #6
 8013626:	404a      	eors	r2, r1
 8013628:	801a      	strh	r2, [r3, #0]
 801362a:	687a      	ldr	r2, [r7, #4]
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	009b      	lsls	r3, r3, #2
 8013632:	18d3      	adds	r3, r2, r3
 8013634:	183a      	adds	r2, r7, r0
 8013636:	8812      	ldrh	r2, [r2, #0]
 8013638:	4906      	ldr	r1, [pc, #24]	@ (8013654 <USB_EPStartXfer+0x126c>)
 801363a:	430a      	orrs	r2, r1
 801363c:	b292      	uxth	r2, r2
 801363e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8013640:	2300      	movs	r3, #0
}
 8013642:	0018      	movs	r0, r3
 8013644:	46bd      	mov	sp, r7
 8013646:	b043      	add	sp, #268	@ 0x10c
 8013648:	bd90      	pop	{r4, r7, pc}
 801364a:	46c0      	nop			@ (mov r8, r8)
 801364c:	00000406 	.word	0x00000406
 8013650:	ffffbf8f 	.word	0xffffbf8f
 8013654:	ffff8080 	.word	0xffff8080

08013658 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	785b      	ldrb	r3, [r3, #1]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d01d      	beq.n	80136a6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	009b      	lsls	r3, r3, #2
 8013672:	18d3      	adds	r3, r2, r3
 8013674:	881b      	ldrh	r3, [r3, #0]
 8013676:	b29a      	uxth	r2, r3
 8013678:	200c      	movs	r0, #12
 801367a:	183b      	adds	r3, r7, r0
 801367c:	491b      	ldr	r1, [pc, #108]	@ (80136ec <USB_EPSetStall+0x94>)
 801367e:	400a      	ands	r2, r1
 8013680:	801a      	strh	r2, [r3, #0]
 8013682:	183b      	adds	r3, r7, r0
 8013684:	183a      	adds	r2, r7, r0
 8013686:	8812      	ldrh	r2, [r2, #0]
 8013688:	2110      	movs	r1, #16
 801368a:	404a      	eors	r2, r1
 801368c:	801a      	strh	r2, [r3, #0]
 801368e:	687a      	ldr	r2, [r7, #4]
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	009b      	lsls	r3, r3, #2
 8013696:	18d3      	adds	r3, r2, r3
 8013698:	183a      	adds	r2, r7, r0
 801369a:	8812      	ldrh	r2, [r2, #0]
 801369c:	4914      	ldr	r1, [pc, #80]	@ (80136f0 <USB_EPSetStall+0x98>)
 801369e:	430a      	orrs	r2, r1
 80136a0:	b292      	uxth	r2, r2
 80136a2:	801a      	strh	r2, [r3, #0]
 80136a4:	e01d      	b.n	80136e2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80136a6:	687a      	ldr	r2, [r7, #4]
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	18d3      	adds	r3, r2, r3
 80136b0:	881b      	ldrh	r3, [r3, #0]
 80136b2:	b29a      	uxth	r2, r3
 80136b4:	200e      	movs	r0, #14
 80136b6:	183b      	adds	r3, r7, r0
 80136b8:	490e      	ldr	r1, [pc, #56]	@ (80136f4 <USB_EPSetStall+0x9c>)
 80136ba:	400a      	ands	r2, r1
 80136bc:	801a      	strh	r2, [r3, #0]
 80136be:	183b      	adds	r3, r7, r0
 80136c0:	183a      	adds	r2, r7, r0
 80136c2:	8812      	ldrh	r2, [r2, #0]
 80136c4:	2180      	movs	r1, #128	@ 0x80
 80136c6:	0149      	lsls	r1, r1, #5
 80136c8:	404a      	eors	r2, r1
 80136ca:	801a      	strh	r2, [r3, #0]
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	009b      	lsls	r3, r3, #2
 80136d4:	18d3      	adds	r3, r2, r3
 80136d6:	183a      	adds	r2, r7, r0
 80136d8:	8812      	ldrh	r2, [r2, #0]
 80136da:	4905      	ldr	r1, [pc, #20]	@ (80136f0 <USB_EPSetStall+0x98>)
 80136dc:	430a      	orrs	r2, r1
 80136de:	b292      	uxth	r2, r2
 80136e0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80136e2:	2300      	movs	r3, #0
}
 80136e4:	0018      	movs	r0, r3
 80136e6:	46bd      	mov	sp, r7
 80136e8:	b004      	add	sp, #16
 80136ea:	bd80      	pop	{r7, pc}
 80136ec:	ffff8fbf 	.word	0xffff8fbf
 80136f0:	ffff8080 	.word	0xffff8080
 80136f4:	ffffbf8f 	.word	0xffffbf8f

080136f8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b086      	sub	sp, #24
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	7b1b      	ldrb	r3, [r3, #12]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d000      	beq.n	801370c <USB_EPClearStall+0x14>
 801370a:	e095      	b.n	8013838 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	785b      	ldrb	r3, [r3, #1]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d046      	beq.n	80137a2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	009b      	lsls	r3, r3, #2
 801371c:	18d2      	adds	r2, r2, r3
 801371e:	2110      	movs	r1, #16
 8013720:	187b      	adds	r3, r7, r1
 8013722:	8812      	ldrh	r2, [r2, #0]
 8013724:	801a      	strh	r2, [r3, #0]
 8013726:	187b      	adds	r3, r7, r1
 8013728:	881b      	ldrh	r3, [r3, #0]
 801372a:	2240      	movs	r2, #64	@ 0x40
 801372c:	4013      	ands	r3, r2
 801372e:	d016      	beq.n	801375e <USB_EPClearStall+0x66>
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	781b      	ldrb	r3, [r3, #0]
 8013736:	009b      	lsls	r3, r3, #2
 8013738:	18d3      	adds	r3, r2, r3
 801373a:	881b      	ldrh	r3, [r3, #0]
 801373c:	b29a      	uxth	r2, r3
 801373e:	200e      	movs	r0, #14
 8013740:	183b      	adds	r3, r7, r0
 8013742:	4940      	ldr	r1, [pc, #256]	@ (8013844 <USB_EPClearStall+0x14c>)
 8013744:	400a      	ands	r2, r1
 8013746:	801a      	strh	r2, [r3, #0]
 8013748:	687a      	ldr	r2, [r7, #4]
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	009b      	lsls	r3, r3, #2
 8013750:	18d3      	adds	r3, r2, r3
 8013752:	183a      	adds	r2, r7, r0
 8013754:	8812      	ldrh	r2, [r2, #0]
 8013756:	493c      	ldr	r1, [pc, #240]	@ (8013848 <USB_EPClearStall+0x150>)
 8013758:	430a      	orrs	r2, r1
 801375a:	b292      	uxth	r2, r2
 801375c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	78db      	ldrb	r3, [r3, #3]
 8013762:	2b01      	cmp	r3, #1
 8013764:	d068      	beq.n	8013838 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013766:	687a      	ldr	r2, [r7, #4]
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	781b      	ldrb	r3, [r3, #0]
 801376c:	009b      	lsls	r3, r3, #2
 801376e:	18d3      	adds	r3, r2, r3
 8013770:	881b      	ldrh	r3, [r3, #0]
 8013772:	b29a      	uxth	r2, r3
 8013774:	200c      	movs	r0, #12
 8013776:	183b      	adds	r3, r7, r0
 8013778:	4934      	ldr	r1, [pc, #208]	@ (801384c <USB_EPClearStall+0x154>)
 801377a:	400a      	ands	r2, r1
 801377c:	801a      	strh	r2, [r3, #0]
 801377e:	183b      	adds	r3, r7, r0
 8013780:	183a      	adds	r2, r7, r0
 8013782:	8812      	ldrh	r2, [r2, #0]
 8013784:	2120      	movs	r1, #32
 8013786:	404a      	eors	r2, r1
 8013788:	801a      	strh	r2, [r3, #0]
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	18d3      	adds	r3, r2, r3
 8013794:	183a      	adds	r2, r7, r0
 8013796:	8812      	ldrh	r2, [r2, #0]
 8013798:	492d      	ldr	r1, [pc, #180]	@ (8013850 <USB_EPClearStall+0x158>)
 801379a:	430a      	orrs	r2, r1
 801379c:	b292      	uxth	r2, r2
 801379e:	801a      	strh	r2, [r3, #0]
 80137a0:	e04a      	b.n	8013838 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80137a2:	687a      	ldr	r2, [r7, #4]
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	009b      	lsls	r3, r3, #2
 80137aa:	18d2      	adds	r2, r2, r3
 80137ac:	2116      	movs	r1, #22
 80137ae:	187b      	adds	r3, r7, r1
 80137b0:	8812      	ldrh	r2, [r2, #0]
 80137b2:	801a      	strh	r2, [r3, #0]
 80137b4:	187b      	adds	r3, r7, r1
 80137b6:	881a      	ldrh	r2, [r3, #0]
 80137b8:	2380      	movs	r3, #128	@ 0x80
 80137ba:	01db      	lsls	r3, r3, #7
 80137bc:	4013      	ands	r3, r2
 80137be:	d016      	beq.n	80137ee <USB_EPClearStall+0xf6>
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	009b      	lsls	r3, r3, #2
 80137c8:	18d3      	adds	r3, r2, r3
 80137ca:	881b      	ldrh	r3, [r3, #0]
 80137cc:	b29a      	uxth	r2, r3
 80137ce:	2014      	movs	r0, #20
 80137d0:	183b      	adds	r3, r7, r0
 80137d2:	491c      	ldr	r1, [pc, #112]	@ (8013844 <USB_EPClearStall+0x14c>)
 80137d4:	400a      	ands	r2, r1
 80137d6:	801a      	strh	r2, [r3, #0]
 80137d8:	687a      	ldr	r2, [r7, #4]
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	781b      	ldrb	r3, [r3, #0]
 80137de:	009b      	lsls	r3, r3, #2
 80137e0:	18d3      	adds	r3, r2, r3
 80137e2:	183a      	adds	r2, r7, r0
 80137e4:	8812      	ldrh	r2, [r2, #0]
 80137e6:	491b      	ldr	r1, [pc, #108]	@ (8013854 <USB_EPClearStall+0x15c>)
 80137e8:	430a      	orrs	r2, r1
 80137ea:	b292      	uxth	r2, r2
 80137ec:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80137ee:	687a      	ldr	r2, [r7, #4]
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	18d3      	adds	r3, r2, r3
 80137f8:	881b      	ldrh	r3, [r3, #0]
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	2012      	movs	r0, #18
 80137fe:	183b      	adds	r3, r7, r0
 8013800:	4915      	ldr	r1, [pc, #84]	@ (8013858 <USB_EPClearStall+0x160>)
 8013802:	400a      	ands	r2, r1
 8013804:	801a      	strh	r2, [r3, #0]
 8013806:	183b      	adds	r3, r7, r0
 8013808:	183a      	adds	r2, r7, r0
 801380a:	8812      	ldrh	r2, [r2, #0]
 801380c:	2180      	movs	r1, #128	@ 0x80
 801380e:	0149      	lsls	r1, r1, #5
 8013810:	404a      	eors	r2, r1
 8013812:	801a      	strh	r2, [r3, #0]
 8013814:	183b      	adds	r3, r7, r0
 8013816:	183a      	adds	r2, r7, r0
 8013818:	8812      	ldrh	r2, [r2, #0]
 801381a:	2180      	movs	r1, #128	@ 0x80
 801381c:	0189      	lsls	r1, r1, #6
 801381e:	404a      	eors	r2, r1
 8013820:	801a      	strh	r2, [r3, #0]
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	009b      	lsls	r3, r3, #2
 801382a:	18d3      	adds	r3, r2, r3
 801382c:	183a      	adds	r2, r7, r0
 801382e:	8812      	ldrh	r2, [r2, #0]
 8013830:	4907      	ldr	r1, [pc, #28]	@ (8013850 <USB_EPClearStall+0x158>)
 8013832:	430a      	orrs	r2, r1
 8013834:	b292      	uxth	r2, r2
 8013836:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8013838:	2300      	movs	r3, #0
}
 801383a:	0018      	movs	r0, r3
 801383c:	46bd      	mov	sp, r7
 801383e:	b006      	add	sp, #24
 8013840:	bd80      	pop	{r7, pc}
 8013842:	46c0      	nop			@ (mov r8, r8)
 8013844:	ffff8f8f 	.word	0xffff8f8f
 8013848:	ffff80c0 	.word	0xffff80c0
 801384c:	ffff8fbf 	.word	0xffff8fbf
 8013850:	ffff8080 	.word	0xffff8080
 8013854:	ffffc080 	.word	0xffffc080
 8013858:	ffffbf8f 	.word	0xffffbf8f

0801385c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	000a      	movs	r2, r1
 8013866:	1cfb      	adds	r3, r7, #3
 8013868:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801386a:	1cfb      	adds	r3, r7, #3
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d103      	bne.n	801387a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	224c      	movs	r2, #76	@ 0x4c
 8013876:	2180      	movs	r1, #128	@ 0x80
 8013878:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801387a:	2300      	movs	r3, #0
}
 801387c:	0018      	movs	r0, r3
 801387e:	46bd      	mov	sp, r7
 8013880:	b002      	add	sp, #8
 8013882:	bd80      	pop	{r7, pc}

08013884 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2258      	movs	r2, #88	@ 0x58
 8013890:	5a9b      	ldrh	r3, [r3, r2]
 8013892:	b29b      	uxth	r3, r3
 8013894:	4a05      	ldr	r2, [pc, #20]	@ (80138ac <USB_DevConnect+0x28>)
 8013896:	4313      	orrs	r3, r2
 8013898:	b299      	uxth	r1, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2258      	movs	r2, #88	@ 0x58
 801389e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80138a0:	2300      	movs	r3, #0
}
 80138a2:	0018      	movs	r0, r3
 80138a4:	46bd      	mov	sp, r7
 80138a6:	b002      	add	sp, #8
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	46c0      	nop			@ (mov r8, r8)
 80138ac:	ffff8000 	.word	0xffff8000

080138b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b084      	sub	sp, #16
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2244      	movs	r2, #68	@ 0x44
 80138bc:	5a9b      	ldrh	r3, [r3, r2]
 80138be:	b29b      	uxth	r3, r3
 80138c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80138c2:	68fb      	ldr	r3, [r7, #12]
}
 80138c4:	0018      	movs	r0, r3
 80138c6:	46bd      	mov	sp, r7
 80138c8:	b004      	add	sp, #16
 80138ca:	bd80      	pop	{r7, pc}

080138cc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b08a      	sub	sp, #40	@ 0x28
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	0019      	movs	r1, r3
 80138d8:	1dbb      	adds	r3, r7, #6
 80138da:	801a      	strh	r2, [r3, #0]
 80138dc:	1d3b      	adds	r3, r7, #4
 80138de:	1c0a      	adds	r2, r1, #0
 80138e0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80138e2:	1d3b      	adds	r3, r7, #4
 80138e4:	881b      	ldrh	r3, [r3, #0]
 80138e6:	3301      	adds	r3, #1
 80138e8:	085b      	lsrs	r3, r3, #1
 80138ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80138f4:	1dbb      	adds	r3, r7, #6
 80138f6:	881a      	ldrh	r2, [r3, #0]
 80138f8:	697b      	ldr	r3, [r7, #20]
 80138fa:	18d3      	adds	r3, r2, r3
 80138fc:	2280      	movs	r2, #128	@ 0x80
 80138fe:	00d2      	lsls	r2, r2, #3
 8013900:	4694      	mov	ip, r2
 8013902:	4463      	add	r3, ip
 8013904:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	627b      	str	r3, [r7, #36]	@ 0x24
 801390a:	e020      	b.n	801394e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	781a      	ldrb	r2, [r3, #0]
 8013910:	2112      	movs	r1, #18
 8013912:	187b      	adds	r3, r7, r1
 8013914:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8013916:	69fb      	ldr	r3, [r7, #28]
 8013918:	3301      	adds	r3, #1
 801391a:	781b      	ldrb	r3, [r3, #0]
 801391c:	021b      	lsls	r3, r3, #8
 801391e:	b21a      	sxth	r2, r3
 8013920:	187b      	adds	r3, r7, r1
 8013922:	2000      	movs	r0, #0
 8013924:	5e1b      	ldrsh	r3, [r3, r0]
 8013926:	4313      	orrs	r3, r2
 8013928:	b21a      	sxth	r2, r3
 801392a:	187b      	adds	r3, r7, r1
 801392c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801392e:	6a3b      	ldr	r3, [r7, #32]
 8013930:	187a      	adds	r2, r7, r1
 8013932:	8812      	ldrh	r2, [r2, #0]
 8013934:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013936:	6a3b      	ldr	r3, [r7, #32]
 8013938:	3302      	adds	r3, #2
 801393a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	3301      	adds	r3, #1
 8013940:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	3301      	adds	r3, #1
 8013946:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801394a:	3b01      	subs	r3, #1
 801394c:	627b      	str	r3, [r7, #36]	@ 0x24
 801394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013950:	2b00      	cmp	r3, #0
 8013952:	d1db      	bne.n	801390c <USB_WritePMA+0x40>
  }
}
 8013954:	46c0      	nop			@ (mov r8, r8)
 8013956:	46c0      	nop			@ (mov r8, r8)
 8013958:	46bd      	mov	sp, r7
 801395a:	b00a      	add	sp, #40	@ 0x28
 801395c:	bd80      	pop	{r7, pc}

0801395e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801395e:	b580      	push	{r7, lr}
 8013960:	b08a      	sub	sp, #40	@ 0x28
 8013962:	af00      	add	r7, sp, #0
 8013964:	60f8      	str	r0, [r7, #12]
 8013966:	60b9      	str	r1, [r7, #8]
 8013968:	0019      	movs	r1, r3
 801396a:	1dbb      	adds	r3, r7, #6
 801396c:	801a      	strh	r2, [r3, #0]
 801396e:	1d3b      	adds	r3, r7, #4
 8013970:	1c0a      	adds	r2, r1, #0
 8013972:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8013974:	1d3b      	adds	r3, r7, #4
 8013976:	881b      	ldrh	r3, [r3, #0]
 8013978:	085b      	lsrs	r3, r3, #1
 801397a:	b29b      	uxth	r3, r3
 801397c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013986:	1dbb      	adds	r3, r7, #6
 8013988:	881a      	ldrh	r2, [r3, #0]
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	18d3      	adds	r3, r2, r3
 801398e:	2280      	movs	r2, #128	@ 0x80
 8013990:	00d2      	lsls	r2, r2, #3
 8013992:	4694      	mov	ip, r2
 8013994:	4463      	add	r3, ip
 8013996:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	627b      	str	r3, [r7, #36]	@ 0x24
 801399c:	e018      	b.n	80139d0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801399e:	6a3b      	ldr	r3, [r7, #32]
 80139a0:	881b      	ldrh	r3, [r3, #0]
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80139a6:	6a3b      	ldr	r3, [r7, #32]
 80139a8:	3302      	adds	r3, #2
 80139aa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80139ac:	693b      	ldr	r3, [r7, #16]
 80139ae:	b2da      	uxtb	r2, r3
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80139b4:	69fb      	ldr	r3, [r7, #28]
 80139b6:	3301      	adds	r3, #1
 80139b8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	0a1b      	lsrs	r3, r3, #8
 80139be:	b2da      	uxtb	r2, r3
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80139c4:	69fb      	ldr	r3, [r7, #28]
 80139c6:	3301      	adds	r3, #1
 80139c8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80139ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139cc:	3b01      	subs	r3, #1
 80139ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80139d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d1e3      	bne.n	801399e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80139d6:	1d3b      	adds	r3, r7, #4
 80139d8:	881b      	ldrh	r3, [r3, #0]
 80139da:	2201      	movs	r2, #1
 80139dc:	4013      	ands	r3, r2
 80139de:	b29b      	uxth	r3, r3
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d007      	beq.n	80139f4 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80139e4:	6a3b      	ldr	r3, [r7, #32]
 80139e6:	881b      	ldrh	r3, [r3, #0]
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	b2da      	uxtb	r2, r3
 80139f0:	69fb      	ldr	r3, [r7, #28]
 80139f2:	701a      	strb	r2, [r3, #0]
  }
}
 80139f4:	46c0      	nop			@ (mov r8, r8)
 80139f6:	46bd      	mov	sp, r7
 80139f8:	b00a      	add	sp, #40	@ 0x28
 80139fa:	bd80      	pop	{r7, pc}

080139fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b084      	sub	sp, #16
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	000a      	movs	r2, r1
 8013a06:	1cfb      	adds	r3, r7, #3
 8013a08:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8013a0a:	230f      	movs	r3, #15
 8013a0c:	18fb      	adds	r3, r7, r3
 8013a0e:	2200      	movs	r2, #0
 8013a10:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	7c1b      	ldrb	r3, [r3, #16]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d116      	bne.n	8013a48 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013a1a:	2380      	movs	r3, #128	@ 0x80
 8013a1c:	009b      	lsls	r3, r3, #2
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	2202      	movs	r2, #2
 8013a22:	2181      	movs	r1, #129	@ 0x81
 8013a24:	f002 f81d 	bl	8015a62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013a2e:	2380      	movs	r3, #128	@ 0x80
 8013a30:	009b      	lsls	r3, r3, #2
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	2202      	movs	r2, #2
 8013a36:	2101      	movs	r1, #1
 8013a38:	f002 f813 	bl	8015a62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	23b6      	movs	r3, #182	@ 0xb6
 8013a40:	005b      	lsls	r3, r3, #1
 8013a42:	2101      	movs	r1, #1
 8013a44:	50d1      	str	r1, [r2, r3]
 8013a46:	e013      	b.n	8013a70 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	2340      	movs	r3, #64	@ 0x40
 8013a4c:	2202      	movs	r2, #2
 8013a4e:	2181      	movs	r1, #129	@ 0x81
 8013a50:	f002 f807 	bl	8015a62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	2201      	movs	r2, #1
 8013a58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	2340      	movs	r3, #64	@ 0x40
 8013a5e:	2202      	movs	r2, #2
 8013a60:	2101      	movs	r1, #1
 8013a62:	f001 fffe 	bl	8015a62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	23b6      	movs	r3, #182	@ 0xb6
 8013a6a:	005b      	lsls	r3, r3, #1
 8013a6c:	2101      	movs	r1, #1
 8013a6e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	2308      	movs	r3, #8
 8013a74:	2203      	movs	r2, #3
 8013a76:	2182      	movs	r1, #130	@ 0x82
 8013a78:	f001 fff3 	bl	8015a62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2201      	movs	r2, #1
 8013a80:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013a82:	2387      	movs	r3, #135	@ 0x87
 8013a84:	009b      	lsls	r3, r3, #2
 8013a86:	0018      	movs	r0, r3
 8013a88:	f002 f984 	bl	8015d94 <USBD_static_malloc>
 8013a8c:	0001      	movs	r1, r0
 8013a8e:	687a      	ldr	r2, [r7, #4]
 8013a90:	23ae      	movs	r3, #174	@ 0xae
 8013a92:	009b      	lsls	r3, r3, #2
 8013a94:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8013a96:	687a      	ldr	r2, [r7, #4]
 8013a98:	23ae      	movs	r3, #174	@ 0xae
 8013a9a:	009b      	lsls	r3, r3, #2
 8013a9c:	58d3      	ldr	r3, [r2, r3]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d104      	bne.n	8013aac <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8013aa2:	230f      	movs	r3, #15
 8013aa4:	18fb      	adds	r3, r7, r3
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	701a      	strb	r2, [r3, #0]
 8013aaa:	e02c      	b.n	8013b06 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	23ae      	movs	r3, #174	@ 0xae
 8013ab0:	009b      	lsls	r3, r3, #2
 8013ab2:	58d3      	ldr	r3, [r2, r3]
 8013ab4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013ab6:	687a      	ldr	r2, [r7, #4]
 8013ab8:	23af      	movs	r3, #175	@ 0xaf
 8013aba:	009b      	lsls	r3, r3, #2
 8013abc:	58d3      	ldr	r3, [r2, r3]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8013ac2:	68ba      	ldr	r2, [r7, #8]
 8013ac4:	2385      	movs	r3, #133	@ 0x85
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	2100      	movs	r1, #0
 8013aca:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8013acc:	68ba      	ldr	r2, [r7, #8]
 8013ace:	2386      	movs	r3, #134	@ 0x86
 8013ad0:	009b      	lsls	r3, r3, #2
 8013ad2:	2100      	movs	r1, #0
 8013ad4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	7c1b      	ldrb	r3, [r3, #16]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d10a      	bne.n	8013af4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013ade:	68ba      	ldr	r2, [r7, #8]
 8013ae0:	2381      	movs	r3, #129	@ 0x81
 8013ae2:	009b      	lsls	r3, r3, #2
 8013ae4:	58d2      	ldr	r2, [r2, r3]
 8013ae6:	2380      	movs	r3, #128	@ 0x80
 8013ae8:	009b      	lsls	r3, r3, #2
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	2101      	movs	r1, #1
 8013aee:	f002 f903 	bl	8015cf8 <USBD_LL_PrepareReceive>
 8013af2:	e008      	b.n	8013b06 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013af4:	68ba      	ldr	r2, [r7, #8]
 8013af6:	2381      	movs	r3, #129	@ 0x81
 8013af8:	009b      	lsls	r3, r3, #2
 8013afa:	58d2      	ldr	r2, [r2, r3]
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	2340      	movs	r3, #64	@ 0x40
 8013b00:	2101      	movs	r1, #1
 8013b02:	f002 f8f9 	bl	8015cf8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8013b06:	230f      	movs	r3, #15
 8013b08:	18fb      	adds	r3, r7, r3
 8013b0a:	781b      	ldrb	r3, [r3, #0]
}
 8013b0c:	0018      	movs	r0, r3
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	b004      	add	sp, #16
 8013b12:	bd80      	pop	{r7, pc}

08013b14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b084      	sub	sp, #16
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	000a      	movs	r2, r1
 8013b1e:	1cfb      	adds	r3, r7, #3
 8013b20:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8013b22:	230f      	movs	r3, #15
 8013b24:	18fb      	adds	r3, r7, r3
 8013b26:	2200      	movs	r2, #0
 8013b28:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2181      	movs	r1, #129	@ 0x81
 8013b2e:	0018      	movs	r0, r3
 8013b30:	f001 ffce 	bl	8015ad0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2200      	movs	r2, #0
 8013b38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2101      	movs	r1, #1
 8013b3e:	0018      	movs	r0, r3
 8013b40:	f001 ffc6 	bl	8015ad0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013b44:	687a      	ldr	r2, [r7, #4]
 8013b46:	23b6      	movs	r3, #182	@ 0xb6
 8013b48:	005b      	lsls	r3, r3, #1
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	2182      	movs	r1, #130	@ 0x82
 8013b52:	0018      	movs	r0, r3
 8013b54:	f001 ffbc 	bl	8015ad0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	23ae      	movs	r3, #174	@ 0xae
 8013b62:	009b      	lsls	r3, r3, #2
 8013b64:	58d3      	ldr	r3, [r2, r3]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d011      	beq.n	8013b8e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013b6a:	687a      	ldr	r2, [r7, #4]
 8013b6c:	23af      	movs	r3, #175	@ 0xaf
 8013b6e:	009b      	lsls	r3, r3, #2
 8013b70:	58d3      	ldr	r3, [r2, r3]
 8013b72:	685b      	ldr	r3, [r3, #4]
 8013b74:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	23ae      	movs	r3, #174	@ 0xae
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	58d3      	ldr	r3, [r2, r3]
 8013b7e:	0018      	movs	r0, r3
 8013b80:	f002 f914 	bl	8015dac <USBD_static_free>
    pdev->pClassData = NULL;
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	23ae      	movs	r3, #174	@ 0xae
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8013b8e:	230f      	movs	r3, #15
 8013b90:	18fb      	adds	r3, r7, r3
 8013b92:	781b      	ldrb	r3, [r3, #0]
}
 8013b94:	0018      	movs	r0, r3
 8013b96:	46bd      	mov	sp, r7
 8013b98:	b004      	add	sp, #16
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b086      	sub	sp, #24
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013ba6:	687a      	ldr	r2, [r7, #4]
 8013ba8:	23ae      	movs	r3, #174	@ 0xae
 8013baa:	009b      	lsls	r3, r3, #2
 8013bac:	58d3      	ldr	r3, [r2, r3]
 8013bae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8013bb0:	230f      	movs	r3, #15
 8013bb2:	18fb      	adds	r3, r7, r3
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8013bb8:	230c      	movs	r3, #12
 8013bba:	18fb      	adds	r3, r7, r3
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8013bc0:	2317      	movs	r3, #23
 8013bc2:	18fb      	adds	r3, r7, r3
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	001a      	movs	r2, r3
 8013bce:	2360      	movs	r3, #96	@ 0x60
 8013bd0:	4013      	ands	r3, r2
 8013bd2:	d03d      	beq.n	8013c50 <USBD_CDC_Setup+0xb4>
 8013bd4:	2b20      	cmp	r3, #32
 8013bd6:	d000      	beq.n	8013bda <USBD_CDC_Setup+0x3e>
 8013bd8:	e094      	b.n	8013d04 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	88db      	ldrh	r3, [r3, #6]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d02b      	beq.n	8013c3a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	781b      	ldrb	r3, [r3, #0]
 8013be6:	b25b      	sxtb	r3, r3
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	da12      	bge.n	8013c12 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	23af      	movs	r3, #175	@ 0xaf
 8013bf0:	009b      	lsls	r3, r3, #2
 8013bf2:	58d3      	ldr	r3, [r2, r3]
 8013bf4:	689b      	ldr	r3, [r3, #8]
 8013bf6:	683a      	ldr	r2, [r7, #0]
 8013bf8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8013bfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013bfc:	683a      	ldr	r2, [r7, #0]
 8013bfe:	88d2      	ldrh	r2, [r2, #6]
 8013c00:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013c02:	6939      	ldr	r1, [r7, #16]
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	88da      	ldrh	r2, [r3, #6]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	0018      	movs	r0, r3
 8013c0c:	f001 fb79 	bl	8015302 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8013c10:	e083      	b.n	8013d1a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8013c12:	683b      	ldr	r3, [r7, #0]
 8013c14:	7859      	ldrb	r1, [r3, #1]
 8013c16:	693a      	ldr	r2, [r7, #16]
 8013c18:	2380      	movs	r3, #128	@ 0x80
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	88db      	ldrh	r3, [r3, #6]
 8013c22:	b2d9      	uxtb	r1, r3
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	4a40      	ldr	r2, [pc, #256]	@ (8013d28 <USBD_CDC_Setup+0x18c>)
 8013c28:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013c2a:	6939      	ldr	r1, [r7, #16]
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	88da      	ldrh	r2, [r3, #6]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	0018      	movs	r0, r3
 8013c34:	f001 fb98 	bl	8015368 <USBD_CtlPrepareRx>
      break;
 8013c38:	e06f      	b.n	8013d1a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013c3a:	687a      	ldr	r2, [r7, #4]
 8013c3c:	23af      	movs	r3, #175	@ 0xaf
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	58d3      	ldr	r3, [r2, r3]
 8013c42:	689b      	ldr	r3, [r3, #8]
 8013c44:	683a      	ldr	r2, [r7, #0]
 8013c46:	7850      	ldrb	r0, [r2, #1]
 8013c48:	6839      	ldr	r1, [r7, #0]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	4798      	blx	r3
      break;
 8013c4e:	e064      	b.n	8013d1a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c50:	683b      	ldr	r3, [r7, #0]
 8013c52:	785b      	ldrb	r3, [r3, #1]
 8013c54:	2b0b      	cmp	r3, #11
 8013c56:	d037      	beq.n	8013cc8 <USBD_CDC_Setup+0x12c>
 8013c58:	dc47      	bgt.n	8013cea <USBD_CDC_Setup+0x14e>
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d002      	beq.n	8013c64 <USBD_CDC_Setup+0xc8>
 8013c5e:	2b0a      	cmp	r3, #10
 8013c60:	d019      	beq.n	8013c96 <USBD_CDC_Setup+0xfa>
 8013c62:	e042      	b.n	8013cea <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	23a7      	movs	r3, #167	@ 0xa7
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	5cd3      	ldrb	r3, [r2, r3]
 8013c6c:	2b03      	cmp	r3, #3
 8013c6e:	d107      	bne.n	8013c80 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8013c70:	230c      	movs	r3, #12
 8013c72:	18f9      	adds	r1, r7, r3
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2202      	movs	r2, #2
 8013c78:	0018      	movs	r0, r3
 8013c7a:	f001 fb42 	bl	8015302 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013c7e:	e040      	b.n	8013d02 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013c80:	683a      	ldr	r2, [r7, #0]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	0011      	movs	r1, r2
 8013c86:	0018      	movs	r0, r3
 8013c88:	f001 fabd 	bl	8015206 <USBD_CtlError>
            ret = USBD_FAIL;
 8013c8c:	2317      	movs	r3, #23
 8013c8e:	18fb      	adds	r3, r7, r3
 8013c90:	2202      	movs	r2, #2
 8013c92:	701a      	strb	r2, [r3, #0]
          break;
 8013c94:	e035      	b.n	8013d02 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	23a7      	movs	r3, #167	@ 0xa7
 8013c9a:	009b      	lsls	r3, r3, #2
 8013c9c:	5cd3      	ldrb	r3, [r2, r3]
 8013c9e:	2b03      	cmp	r3, #3
 8013ca0:	d107      	bne.n	8013cb2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8013ca2:	230f      	movs	r3, #15
 8013ca4:	18f9      	adds	r1, r7, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2201      	movs	r2, #1
 8013caa:	0018      	movs	r0, r3
 8013cac:	f001 fb29 	bl	8015302 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013cb0:	e027      	b.n	8013d02 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013cb2:	683a      	ldr	r2, [r7, #0]
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	0011      	movs	r1, r2
 8013cb8:	0018      	movs	r0, r3
 8013cba:	f001 faa4 	bl	8015206 <USBD_CtlError>
            ret = USBD_FAIL;
 8013cbe:	2317      	movs	r3, #23
 8013cc0:	18fb      	adds	r3, r7, r3
 8013cc2:	2202      	movs	r2, #2
 8013cc4:	701a      	strb	r2, [r3, #0]
          break;
 8013cc6:	e01c      	b.n	8013d02 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	23a7      	movs	r3, #167	@ 0xa7
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	5cd3      	ldrb	r3, [r2, r3]
 8013cd0:	2b03      	cmp	r3, #3
 8013cd2:	d015      	beq.n	8013d00 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8013cd4:	683a      	ldr	r2, [r7, #0]
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	0011      	movs	r1, r2
 8013cda:	0018      	movs	r0, r3
 8013cdc:	f001 fa93 	bl	8015206 <USBD_CtlError>
            ret = USBD_FAIL;
 8013ce0:	2317      	movs	r3, #23
 8013ce2:	18fb      	adds	r3, r7, r3
 8013ce4:	2202      	movs	r2, #2
 8013ce6:	701a      	strb	r2, [r3, #0]
          }
          break;
 8013ce8:	e00a      	b.n	8013d00 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8013cea:	683a      	ldr	r2, [r7, #0]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	0011      	movs	r1, r2
 8013cf0:	0018      	movs	r0, r3
 8013cf2:	f001 fa88 	bl	8015206 <USBD_CtlError>
          ret = USBD_FAIL;
 8013cf6:	2317      	movs	r3, #23
 8013cf8:	18fb      	adds	r3, r7, r3
 8013cfa:	2202      	movs	r2, #2
 8013cfc:	701a      	strb	r2, [r3, #0]
          break;
 8013cfe:	e000      	b.n	8013d02 <USBD_CDC_Setup+0x166>
          break;
 8013d00:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8013d02:	e00a      	b.n	8013d1a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8013d04:	683a      	ldr	r2, [r7, #0]
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	0011      	movs	r1, r2
 8013d0a:	0018      	movs	r0, r3
 8013d0c:	f001 fa7b 	bl	8015206 <USBD_CtlError>
      ret = USBD_FAIL;
 8013d10:	2317      	movs	r3, #23
 8013d12:	18fb      	adds	r3, r7, r3
 8013d14:	2202      	movs	r2, #2
 8013d16:	701a      	strb	r2, [r3, #0]
      break;
 8013d18:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8013d1a:	2317      	movs	r3, #23
 8013d1c:	18fb      	adds	r3, r7, r3
 8013d1e:	781b      	ldrb	r3, [r3, #0]
}
 8013d20:	0018      	movs	r0, r3
 8013d22:	46bd      	mov	sp, r7
 8013d24:	b006      	add	sp, #24
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	00000201 	.word	0x00000201

08013d2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	000a      	movs	r2, r1
 8013d36:	1cfb      	adds	r3, r7, #3
 8013d38:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013d3a:	687a      	ldr	r2, [r7, #4]
 8013d3c:	23ae      	movs	r3, #174	@ 0xae
 8013d3e:	009b      	lsls	r3, r3, #2
 8013d40:	58d3      	ldr	r3, [r2, r3]
 8013d42:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013d44:	687a      	ldr	r2, [r7, #4]
 8013d46:	23b0      	movs	r3, #176	@ 0xb0
 8013d48:	009b      	lsls	r3, r3, #2
 8013d4a:	58d3      	ldr	r3, [r2, r3]
 8013d4c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8013d4e:	687a      	ldr	r2, [r7, #4]
 8013d50:	23ae      	movs	r3, #174	@ 0xae
 8013d52:	009b      	lsls	r3, r3, #2
 8013d54:	58d3      	ldr	r3, [r2, r3]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d03e      	beq.n	8013dd8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013d5a:	1cfb      	adds	r3, r7, #3
 8013d5c:	781a      	ldrb	r2, [r3, #0]
 8013d5e:	6879      	ldr	r1, [r7, #4]
 8013d60:	0013      	movs	r3, r2
 8013d62:	009b      	lsls	r3, r3, #2
 8013d64:	189b      	adds	r3, r3, r2
 8013d66:	009b      	lsls	r3, r3, #2
 8013d68:	18cb      	adds	r3, r1, r3
 8013d6a:	331c      	adds	r3, #28
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d02b      	beq.n	8013dca <USBD_CDC_DataIn+0x9e>
 8013d72:	1cfb      	adds	r3, r7, #3
 8013d74:	781a      	ldrb	r2, [r3, #0]
 8013d76:	6879      	ldr	r1, [r7, #4]
 8013d78:	0013      	movs	r3, r2
 8013d7a:	009b      	lsls	r3, r3, #2
 8013d7c:	189b      	adds	r3, r3, r2
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	18cb      	adds	r3, r1, r3
 8013d82:	331c      	adds	r3, #28
 8013d84:	6818      	ldr	r0, [r3, #0]
 8013d86:	1cfb      	adds	r3, r7, #3
 8013d88:	781a      	ldrb	r2, [r3, #0]
 8013d8a:	68b9      	ldr	r1, [r7, #8]
 8013d8c:	0013      	movs	r3, r2
 8013d8e:	009b      	lsls	r3, r3, #2
 8013d90:	189b      	adds	r3, r3, r2
 8013d92:	00db      	lsls	r3, r3, #3
 8013d94:	18cb      	adds	r3, r1, r3
 8013d96:	3338      	adds	r3, #56	@ 0x38
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	0019      	movs	r1, r3
 8013d9c:	f7ec fa56 	bl	800024c <__aeabi_uidivmod>
 8013da0:	1e0b      	subs	r3, r1, #0
 8013da2:	d112      	bne.n	8013dca <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8013da4:	1cfb      	adds	r3, r7, #3
 8013da6:	781a      	ldrb	r2, [r3, #0]
 8013da8:	6879      	ldr	r1, [r7, #4]
 8013daa:	0013      	movs	r3, r2
 8013dac:	009b      	lsls	r3, r3, #2
 8013dae:	189b      	adds	r3, r3, r2
 8013db0:	009b      	lsls	r3, r3, #2
 8013db2:	18cb      	adds	r3, r1, r3
 8013db4:	331c      	adds	r3, #28
 8013db6:	2200      	movs	r2, #0
 8013db8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013dba:	1cfb      	adds	r3, r7, #3
 8013dbc:	7819      	ldrb	r1, [r3, #0]
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	f001 ff61 	bl	8015c8a <USBD_LL_Transmit>
 8013dc8:	e004      	b.n	8013dd4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8013dca:	68fa      	ldr	r2, [r7, #12]
 8013dcc:	2385      	movs	r3, #133	@ 0x85
 8013dce:	009b      	lsls	r3, r3, #2
 8013dd0:	2100      	movs	r1, #0
 8013dd2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	e000      	b.n	8013dda <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8013dd8:	2302      	movs	r3, #2
  }
}
 8013dda:	0018      	movs	r0, r3
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	b004      	add	sp, #16
 8013de0:	bd80      	pop	{r7, pc}

08013de2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b084      	sub	sp, #16
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
 8013dea:	000a      	movs	r2, r1
 8013dec:	1cfb      	adds	r3, r7, #3
 8013dee:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	23ae      	movs	r3, #174	@ 0xae
 8013df4:	009b      	lsls	r3, r3, #2
 8013df6:	58d3      	ldr	r3, [r2, r3]
 8013df8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013dfa:	1cfb      	adds	r3, r7, #3
 8013dfc:	781a      	ldrb	r2, [r3, #0]
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	0011      	movs	r1, r2
 8013e02:	0018      	movs	r0, r3
 8013e04:	f001 ffaf 	bl	8015d66 <USBD_LL_GetRxDataSize>
 8013e08:	0001      	movs	r1, r0
 8013e0a:	68fa      	ldr	r2, [r7, #12]
 8013e0c:	2383      	movs	r3, #131	@ 0x83
 8013e0e:	009b      	lsls	r3, r3, #2
 8013e10:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8013e12:	687a      	ldr	r2, [r7, #4]
 8013e14:	23ae      	movs	r3, #174	@ 0xae
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	58d3      	ldr	r3, [r2, r3]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d011      	beq.n	8013e42 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013e1e:	687a      	ldr	r2, [r7, #4]
 8013e20:	23af      	movs	r3, #175	@ 0xaf
 8013e22:	009b      	lsls	r3, r3, #2
 8013e24:	58d3      	ldr	r3, [r2, r3]
 8013e26:	68da      	ldr	r2, [r3, #12]
 8013e28:	68f9      	ldr	r1, [r7, #12]
 8013e2a:	2381      	movs	r3, #129	@ 0x81
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	58c8      	ldr	r0, [r1, r3]
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	2183      	movs	r1, #131	@ 0x83
 8013e34:	0089      	lsls	r1, r1, #2
 8013e36:	468c      	mov	ip, r1
 8013e38:	4463      	add	r3, ip
 8013e3a:	0019      	movs	r1, r3
 8013e3c:	4790      	blx	r2

    return USBD_OK;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	e000      	b.n	8013e44 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8013e42:	2302      	movs	r3, #2
  }
}
 8013e44:	0018      	movs	r0, r3
 8013e46:	46bd      	mov	sp, r7
 8013e48:	b004      	add	sp, #16
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013e4c:	b590      	push	{r4, r7, lr}
 8013e4e:	b085      	sub	sp, #20
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	23ae      	movs	r3, #174	@ 0xae
 8013e58:	009b      	lsls	r3, r3, #2
 8013e5a:	58d3      	ldr	r3, [r2, r3]
 8013e5c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	23af      	movs	r3, #175	@ 0xaf
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	58d3      	ldr	r3, [r2, r3]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d018      	beq.n	8013e9c <USBD_CDC_EP0_RxReady+0x50>
 8013e6a:	68fa      	ldr	r2, [r7, #12]
 8013e6c:	2380      	movs	r3, #128	@ 0x80
 8013e6e:	009b      	lsls	r3, r3, #2
 8013e70:	5cd3      	ldrb	r3, [r2, r3]
 8013e72:	2bff      	cmp	r3, #255	@ 0xff
 8013e74:	d012      	beq.n	8013e9c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	23af      	movs	r3, #175	@ 0xaf
 8013e7a:	009b      	lsls	r3, r3, #2
 8013e7c:	58d3      	ldr	r3, [r2, r3]
 8013e7e:	689b      	ldr	r3, [r3, #8]
 8013e80:	68f9      	ldr	r1, [r7, #12]
 8013e82:	2280      	movs	r2, #128	@ 0x80
 8013e84:	0092      	lsls	r2, r2, #2
 8013e86:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8013e88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013e8a:	68fa      	ldr	r2, [r7, #12]
 8013e8c:	4c06      	ldr	r4, [pc, #24]	@ (8013ea8 <USBD_CDC_EP0_RxReady+0x5c>)
 8013e8e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013e90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013e92:	68fa      	ldr	r2, [r7, #12]
 8013e94:	2380      	movs	r3, #128	@ 0x80
 8013e96:	009b      	lsls	r3, r3, #2
 8013e98:	21ff      	movs	r1, #255	@ 0xff
 8013e9a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8013e9c:	2300      	movs	r3, #0
}
 8013e9e:	0018      	movs	r0, r3
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	b005      	add	sp, #20
 8013ea4:	bd90      	pop	{r4, r7, pc}
 8013ea6:	46c0      	nop			@ (mov r8, r8)
 8013ea8:	00000201 	.word	0x00000201

08013eac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2243      	movs	r2, #67	@ 0x43
 8013eb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8013eba:	4b02      	ldr	r3, [pc, #8]	@ (8013ec4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8013ebc:	0018      	movs	r0, r3
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	b002      	add	sp, #8
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	200001e4 	.word	0x200001e4

08013ec8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2243      	movs	r2, #67	@ 0x43
 8013ed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8013ed6:	4b02      	ldr	r3, [pc, #8]	@ (8013ee0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8013ed8:	0018      	movs	r0, r3
 8013eda:	46bd      	mov	sp, r7
 8013edc:	b002      	add	sp, #8
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	200001a0 	.word	0x200001a0

08013ee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b082      	sub	sp, #8
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2243      	movs	r2, #67	@ 0x43
 8013ef0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8013ef2:	4b02      	ldr	r3, [pc, #8]	@ (8013efc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8013ef4:	0018      	movs	r0, r3
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	b002      	add	sp, #8
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	20000228 	.word	0x20000228

08013f00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b082      	sub	sp, #8
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	220a      	movs	r2, #10
 8013f0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8013f0e:	4b02      	ldr	r3, [pc, #8]	@ (8013f18 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8013f10:	0018      	movs	r0, r3
 8013f12:	46bd      	mov	sp, r7
 8013f14:	b002      	add	sp, #8
 8013f16:	bd80      	pop	{r7, pc}
 8013f18:	2000015c 	.word	0x2000015c

08013f1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8013f26:	200f      	movs	r0, #15
 8013f28:	183b      	adds	r3, r7, r0
 8013f2a:	2202      	movs	r2, #2
 8013f2c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d007      	beq.n	8013f44 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	23af      	movs	r3, #175	@ 0xaf
 8013f38:	009b      	lsls	r3, r3, #2
 8013f3a:	6839      	ldr	r1, [r7, #0]
 8013f3c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8013f3e:	183b      	adds	r3, r7, r0
 8013f40:	2200      	movs	r2, #0
 8013f42:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8013f44:	230f      	movs	r3, #15
 8013f46:	18fb      	adds	r3, r7, r3
 8013f48:	781b      	ldrb	r3, [r3, #0]
}
 8013f4a:	0018      	movs	r0, r3
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	b004      	add	sp, #16
 8013f50:	bd80      	pop	{r7, pc}

08013f52 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8013f52:	b580      	push	{r7, lr}
 8013f54:	b086      	sub	sp, #24
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	60f8      	str	r0, [r7, #12]
 8013f5a:	60b9      	str	r1, [r7, #8]
 8013f5c:	1dbb      	adds	r3, r7, #6
 8013f5e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013f60:	68fa      	ldr	r2, [r7, #12]
 8013f62:	23ae      	movs	r3, #174	@ 0xae
 8013f64:	009b      	lsls	r3, r3, #2
 8013f66:	58d3      	ldr	r3, [r2, r3]
 8013f68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8013f6a:	697a      	ldr	r2, [r7, #20]
 8013f6c:	2382      	movs	r3, #130	@ 0x82
 8013f6e:	009b      	lsls	r3, r3, #2
 8013f70:	68b9      	ldr	r1, [r7, #8]
 8013f72:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8013f74:	1dbb      	adds	r3, r7, #6
 8013f76:	8819      	ldrh	r1, [r3, #0]
 8013f78:	697a      	ldr	r2, [r7, #20]
 8013f7a:	2384      	movs	r3, #132	@ 0x84
 8013f7c:	009b      	lsls	r3, r3, #2
 8013f7e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013f80:	2300      	movs	r3, #0
}
 8013f82:	0018      	movs	r0, r3
 8013f84:	46bd      	mov	sp, r7
 8013f86:	b006      	add	sp, #24
 8013f88:	bd80      	pop	{r7, pc}

08013f8a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8013f8a:	b580      	push	{r7, lr}
 8013f8c:	b084      	sub	sp, #16
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
 8013f92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	23ae      	movs	r3, #174	@ 0xae
 8013f98:	009b      	lsls	r3, r3, #2
 8013f9a:	58d3      	ldr	r3, [r2, r3]
 8013f9c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8013f9e:	68fa      	ldr	r2, [r7, #12]
 8013fa0:	2381      	movs	r3, #129	@ 0x81
 8013fa2:	009b      	lsls	r3, r3, #2
 8013fa4:	6839      	ldr	r1, [r7, #0]
 8013fa6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	0018      	movs	r0, r3
 8013fac:	46bd      	mov	sp, r7
 8013fae:	b004      	add	sp, #16
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013fb2:	b580      	push	{r7, lr}
 8013fb4:	b084      	sub	sp, #16
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	23ae      	movs	r3, #174	@ 0xae
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	58d3      	ldr	r3, [r2, r3]
 8013fc2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8013fc4:	687a      	ldr	r2, [r7, #4]
 8013fc6:	23ae      	movs	r3, #174	@ 0xae
 8013fc8:	009b      	lsls	r3, r3, #2
 8013fca:	58d3      	ldr	r3, [r2, r3]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d019      	beq.n	8014004 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	7c1b      	ldrb	r3, [r3, #16]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d10a      	bne.n	8013fee <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013fd8:	68fa      	ldr	r2, [r7, #12]
 8013fda:	2381      	movs	r3, #129	@ 0x81
 8013fdc:	009b      	lsls	r3, r3, #2
 8013fde:	58d2      	ldr	r2, [r2, r3]
 8013fe0:	2380      	movs	r3, #128	@ 0x80
 8013fe2:	009b      	lsls	r3, r3, #2
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	2101      	movs	r1, #1
 8013fe8:	f001 fe86 	bl	8015cf8 <USBD_LL_PrepareReceive>
 8013fec:	e008      	b.n	8014000 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	2381      	movs	r3, #129	@ 0x81
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	58d2      	ldr	r2, [r2, r3]
 8013ff6:	6878      	ldr	r0, [r7, #4]
 8013ff8:	2340      	movs	r3, #64	@ 0x40
 8013ffa:	2101      	movs	r1, #1
 8013ffc:	f001 fe7c 	bl	8015cf8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8014000:	2300      	movs	r3, #0
 8014002:	e000      	b.n	8014006 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8014004:	2302      	movs	r3, #2
  }
}
 8014006:	0018      	movs	r0, r3
 8014008:	46bd      	mov	sp, r7
 801400a:	b004      	add	sp, #16
 801400c:	bd80      	pop	{r7, pc}

0801400e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b084      	sub	sp, #16
 8014012:	af00      	add	r7, sp, #0
 8014014:	60f8      	str	r0, [r7, #12]
 8014016:	60b9      	str	r1, [r7, #8]
 8014018:	1dfb      	adds	r3, r7, #7
 801401a:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d101      	bne.n	8014026 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014022:	2302      	movs	r3, #2
 8014024:	e020      	b.n	8014068 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8014026:	68fa      	ldr	r2, [r7, #12]
 8014028:	23ad      	movs	r3, #173	@ 0xad
 801402a:	009b      	lsls	r3, r3, #2
 801402c:	58d3      	ldr	r3, [r2, r3]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d004      	beq.n	801403c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8014032:	68fa      	ldr	r2, [r7, #12]
 8014034:	23ad      	movs	r3, #173	@ 0xad
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	2100      	movs	r1, #0
 801403a:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d004      	beq.n	801404c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014042:	68fa      	ldr	r2, [r7, #12]
 8014044:	23ac      	movs	r3, #172	@ 0xac
 8014046:	009b      	lsls	r3, r3, #2
 8014048:	68b9      	ldr	r1, [r7, #8]
 801404a:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801404c:	68fa      	ldr	r2, [r7, #12]
 801404e:	23a7      	movs	r3, #167	@ 0xa7
 8014050:	009b      	lsls	r3, r3, #2
 8014052:	2101      	movs	r1, #1
 8014054:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	1dfa      	adds	r2, r7, #7
 801405a:	7812      	ldrb	r2, [r2, #0]
 801405c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	0018      	movs	r0, r3
 8014062:	f001 fc75 	bl	8015950 <USBD_LL_Init>

  return USBD_OK;
 8014066:	2300      	movs	r3, #0
}
 8014068:	0018      	movs	r0, r3
 801406a:	46bd      	mov	sp, r7
 801406c:	b004      	add	sp, #16
 801406e:	bd80      	pop	{r7, pc}

08014070 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801407a:	200f      	movs	r0, #15
 801407c:	183b      	adds	r3, r7, r0
 801407e:	2200      	movs	r2, #0
 8014080:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d008      	beq.n	801409a <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	23ad      	movs	r3, #173	@ 0xad
 801408c:	009b      	lsls	r3, r3, #2
 801408e:	6839      	ldr	r1, [r7, #0]
 8014090:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8014092:	183b      	adds	r3, r7, r0
 8014094:	2200      	movs	r2, #0
 8014096:	701a      	strb	r2, [r3, #0]
 8014098:	e003      	b.n	80140a2 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801409a:	230f      	movs	r3, #15
 801409c:	18fb      	adds	r3, r7, r3
 801409e:	2202      	movs	r2, #2
 80140a0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80140a2:	230f      	movs	r3, #15
 80140a4:	18fb      	adds	r3, r7, r3
 80140a6:	781b      	ldrb	r3, [r3, #0]
}
 80140a8:	0018      	movs	r0, r3
 80140aa:	46bd      	mov	sp, r7
 80140ac:	b004      	add	sp, #16
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	0018      	movs	r0, r3
 80140bc:	f001 fcac 	bl	8015a18 <USBD_LL_Start>

  return USBD_OK;
 80140c0:	2300      	movs	r3, #0
}
 80140c2:	0018      	movs	r0, r3
 80140c4:	46bd      	mov	sp, r7
 80140c6:	b002      	add	sp, #8
 80140c8:	bd80      	pop	{r7, pc}

080140ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80140ca:	b580      	push	{r7, lr}
 80140cc:	b082      	sub	sp, #8
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80140d2:	2300      	movs	r3, #0
}
 80140d4:	0018      	movs	r0, r3
 80140d6:	46bd      	mov	sp, r7
 80140d8:	b002      	add	sp, #8
 80140da:	bd80      	pop	{r7, pc}

080140dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80140dc:	b590      	push	{r4, r7, lr}
 80140de:	b085      	sub	sp, #20
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	000a      	movs	r2, r1
 80140e6:	1cfb      	adds	r3, r7, #3
 80140e8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80140ea:	240f      	movs	r4, #15
 80140ec:	193b      	adds	r3, r7, r4
 80140ee:	2202      	movs	r2, #2
 80140f0:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	23ad      	movs	r3, #173	@ 0xad
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	58d3      	ldr	r3, [r2, r3]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d00e      	beq.n	801411c <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	23ad      	movs	r3, #173	@ 0xad
 8014102:	009b      	lsls	r3, r3, #2
 8014104:	58d3      	ldr	r3, [r2, r3]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	1cfa      	adds	r2, r7, #3
 801410a:	7811      	ldrb	r1, [r2, #0]
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	0010      	movs	r0, r2
 8014110:	4798      	blx	r3
 8014112:	1e03      	subs	r3, r0, #0
 8014114:	d102      	bne.n	801411c <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8014116:	193b      	adds	r3, r7, r4
 8014118:	2200      	movs	r2, #0
 801411a:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801411c:	230f      	movs	r3, #15
 801411e:	18fb      	adds	r3, r7, r3
 8014120:	781b      	ldrb	r3, [r3, #0]
}
 8014122:	0018      	movs	r0, r3
 8014124:	46bd      	mov	sp, r7
 8014126:	b005      	add	sp, #20
 8014128:	bd90      	pop	{r4, r7, pc}

0801412a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801412a:	b580      	push	{r7, lr}
 801412c:	b082      	sub	sp, #8
 801412e:	af00      	add	r7, sp, #0
 8014130:	6078      	str	r0, [r7, #4]
 8014132:	000a      	movs	r2, r1
 8014134:	1cfb      	adds	r3, r7, #3
 8014136:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	23ad      	movs	r3, #173	@ 0xad
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	58d3      	ldr	r3, [r2, r3]
 8014140:	685b      	ldr	r3, [r3, #4]
 8014142:	1cfa      	adds	r2, r7, #3
 8014144:	7811      	ldrb	r1, [r2, #0]
 8014146:	687a      	ldr	r2, [r7, #4]
 8014148:	0010      	movs	r0, r2
 801414a:	4798      	blx	r3

  return USBD_OK;
 801414c:	2300      	movs	r3, #0
}
 801414e:	0018      	movs	r0, r3
 8014150:	46bd      	mov	sp, r7
 8014152:	b002      	add	sp, #8
 8014154:	bd80      	pop	{r7, pc}
	...

08014158 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
 8014160:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	22aa      	movs	r2, #170	@ 0xaa
 8014166:	0092      	lsls	r2, r2, #2
 8014168:	4694      	mov	ip, r2
 801416a:	4463      	add	r3, ip
 801416c:	683a      	ldr	r2, [r7, #0]
 801416e:	0011      	movs	r1, r2
 8014170:	0018      	movs	r0, r3
 8014172:	f001 f810 	bl	8015196 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	23a5      	movs	r3, #165	@ 0xa5
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	2101      	movs	r1, #1
 801417e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	4a23      	ldr	r2, [pc, #140]	@ (8014210 <USBD_LL_SetupStage+0xb8>)
 8014184:	5a9b      	ldrh	r3, [r3, r2]
 8014186:	0019      	movs	r1, r3
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	23a6      	movs	r3, #166	@ 0xa6
 801418c:	009b      	lsls	r3, r3, #2
 801418e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	23aa      	movs	r3, #170	@ 0xaa
 8014194:	009b      	lsls	r3, r3, #2
 8014196:	5cd3      	ldrb	r3, [r2, r3]
 8014198:	001a      	movs	r2, r3
 801419a:	231f      	movs	r3, #31
 801419c:	4013      	ands	r3, r2
 801419e:	2b02      	cmp	r3, #2
 80141a0:	d019      	beq.n	80141d6 <USBD_LL_SetupStage+0x7e>
 80141a2:	d822      	bhi.n	80141ea <USBD_LL_SetupStage+0x92>
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d002      	beq.n	80141ae <USBD_LL_SetupStage+0x56>
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d00a      	beq.n	80141c2 <USBD_LL_SetupStage+0x6a>
 80141ac:	e01d      	b.n	80141ea <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	22aa      	movs	r2, #170	@ 0xaa
 80141b2:	0092      	lsls	r2, r2, #2
 80141b4:	189a      	adds	r2, r3, r2
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	0011      	movs	r1, r2
 80141ba:	0018      	movs	r0, r3
 80141bc:	f000 fa10 	bl	80145e0 <USBD_StdDevReq>
      break;
 80141c0:	e020      	b.n	8014204 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	22aa      	movs	r2, #170	@ 0xaa
 80141c6:	0092      	lsls	r2, r2, #2
 80141c8:	189a      	adds	r2, r3, r2
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	0011      	movs	r1, r2
 80141ce:	0018      	movs	r0, r3
 80141d0:	f000 fa78 	bl	80146c4 <USBD_StdItfReq>
      break;
 80141d4:	e016      	b.n	8014204 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	22aa      	movs	r2, #170	@ 0xaa
 80141da:	0092      	lsls	r2, r2, #2
 80141dc:	189a      	adds	r2, r3, r2
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	0011      	movs	r1, r2
 80141e2:	0018      	movs	r0, r3
 80141e4:	f000 fac5 	bl	8014772 <USBD_StdEPReq>
      break;
 80141e8:	e00c      	b.n	8014204 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	23aa      	movs	r3, #170	@ 0xaa
 80141ee:	009b      	lsls	r3, r3, #2
 80141f0:	5cd3      	ldrb	r3, [r2, r3]
 80141f2:	227f      	movs	r2, #127	@ 0x7f
 80141f4:	4393      	bics	r3, r2
 80141f6:	b2da      	uxtb	r2, r3
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	0011      	movs	r1, r2
 80141fc:	0018      	movs	r0, r3
 80141fe:	f001 fc92 	bl	8015b26 <USBD_LL_StallEP>
      break;
 8014202:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8014204:	2300      	movs	r3, #0
}
 8014206:	0018      	movs	r0, r3
 8014208:	46bd      	mov	sp, r7
 801420a:	b002      	add	sp, #8
 801420c:	bd80      	pop	{r7, pc}
 801420e:	46c0      	nop			@ (mov r8, r8)
 8014210:	000002ae 	.word	0x000002ae

08014214 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b086      	sub	sp, #24
 8014218:	af00      	add	r7, sp, #0
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	607a      	str	r2, [r7, #4]
 801421e:	200b      	movs	r0, #11
 8014220:	183b      	adds	r3, r7, r0
 8014222:	1c0a      	adds	r2, r1, #0
 8014224:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8014226:	183b      	adds	r3, r7, r0
 8014228:	781b      	ldrb	r3, [r3, #0]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d154      	bne.n	80142d8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	3355      	adds	r3, #85	@ 0x55
 8014232:	33ff      	adds	r3, #255	@ 0xff
 8014234:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014236:	68fa      	ldr	r2, [r7, #12]
 8014238:	23a5      	movs	r3, #165	@ 0xa5
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	58d3      	ldr	r3, [r2, r3]
 801423e:	2b03      	cmp	r3, #3
 8014240:	d139      	bne.n	80142b6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	68da      	ldr	r2, [r3, #12]
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	691b      	ldr	r3, [r3, #16]
 801424a:	429a      	cmp	r2, r3
 801424c:	d919      	bls.n	8014282 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	68da      	ldr	r2, [r3, #12]
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	691b      	ldr	r3, [r3, #16]
 8014256:	1ad2      	subs	r2, r2, r3
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801425c:	697b      	ldr	r3, [r7, #20]
 801425e:	68da      	ldr	r2, [r3, #12]
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8014264:	429a      	cmp	r2, r3
 8014266:	d203      	bcs.n	8014270 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801426c:	b29b      	uxth	r3, r3
 801426e:	e002      	b.n	8014276 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8014274:	b29b      	uxth	r3, r3
 8014276:	6879      	ldr	r1, [r7, #4]
 8014278:	68f8      	ldr	r0, [r7, #12]
 801427a:	001a      	movs	r2, r3
 801427c:	f001 f898 	bl	80153b0 <USBD_CtlContinueRx>
 8014280:	e045      	b.n	801430e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014282:	68fa      	ldr	r2, [r7, #12]
 8014284:	23ad      	movs	r3, #173	@ 0xad
 8014286:	009b      	lsls	r3, r3, #2
 8014288:	58d3      	ldr	r3, [r2, r3]
 801428a:	691b      	ldr	r3, [r3, #16]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d00d      	beq.n	80142ac <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014290:	68fa      	ldr	r2, [r7, #12]
 8014292:	23a7      	movs	r3, #167	@ 0xa7
 8014294:	009b      	lsls	r3, r3, #2
 8014296:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014298:	2b03      	cmp	r3, #3
 801429a:	d107      	bne.n	80142ac <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	23ad      	movs	r3, #173	@ 0xad
 80142a0:	009b      	lsls	r3, r3, #2
 80142a2:	58d3      	ldr	r3, [r2, r3]
 80142a4:	691b      	ldr	r3, [r3, #16]
 80142a6:	68fa      	ldr	r2, [r7, #12]
 80142a8:	0010      	movs	r0, r2
 80142aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	0018      	movs	r0, r3
 80142b0:	f001 f891 	bl	80153d6 <USBD_CtlSendStatus>
 80142b4:	e02b      	b.n	801430e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80142b6:	68fa      	ldr	r2, [r7, #12]
 80142b8:	23a5      	movs	r3, #165	@ 0xa5
 80142ba:	009b      	lsls	r3, r3, #2
 80142bc:	58d3      	ldr	r3, [r2, r3]
 80142be:	2b05      	cmp	r3, #5
 80142c0:	d125      	bne.n	801430e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80142c2:	68fa      	ldr	r2, [r7, #12]
 80142c4:	23a5      	movs	r3, #165	@ 0xa5
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	2100      	movs	r1, #0
 80142ca:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2100      	movs	r1, #0
 80142d0:	0018      	movs	r0, r3
 80142d2:	f001 fc28 	bl	8015b26 <USBD_LL_StallEP>
 80142d6:	e01a      	b.n	801430e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80142d8:	68fa      	ldr	r2, [r7, #12]
 80142da:	23ad      	movs	r3, #173	@ 0xad
 80142dc:	009b      	lsls	r3, r3, #2
 80142de:	58d3      	ldr	r3, [r2, r3]
 80142e0:	699b      	ldr	r3, [r3, #24]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d011      	beq.n	801430a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80142e6:	68fa      	ldr	r2, [r7, #12]
 80142e8:	23a7      	movs	r3, #167	@ 0xa7
 80142ea:	009b      	lsls	r3, r3, #2
 80142ec:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80142ee:	2b03      	cmp	r3, #3
 80142f0:	d10b      	bne.n	801430a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80142f2:	68fa      	ldr	r2, [r7, #12]
 80142f4:	23ad      	movs	r3, #173	@ 0xad
 80142f6:	009b      	lsls	r3, r3, #2
 80142f8:	58d3      	ldr	r3, [r2, r3]
 80142fa:	699b      	ldr	r3, [r3, #24]
 80142fc:	220b      	movs	r2, #11
 80142fe:	18ba      	adds	r2, r7, r2
 8014300:	7811      	ldrb	r1, [r2, #0]
 8014302:	68fa      	ldr	r2, [r7, #12]
 8014304:	0010      	movs	r0, r2
 8014306:	4798      	blx	r3
 8014308:	e001      	b.n	801430e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801430a:	2302      	movs	r3, #2
 801430c:	e000      	b.n	8014310 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801430e:	2300      	movs	r3, #0
}
 8014310:	0018      	movs	r0, r3
 8014312:	46bd      	mov	sp, r7
 8014314:	b006      	add	sp, #24
 8014316:	bd80      	pop	{r7, pc}

08014318 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b086      	sub	sp, #24
 801431c:	af00      	add	r7, sp, #0
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	607a      	str	r2, [r7, #4]
 8014322:	200b      	movs	r0, #11
 8014324:	183b      	adds	r3, r7, r0
 8014326:	1c0a      	adds	r2, r1, #0
 8014328:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801432a:	183b      	adds	r3, r7, r0
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d000      	beq.n	8014334 <USBD_LL_DataInStage+0x1c>
 8014332:	e08e      	b.n	8014452 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	3314      	adds	r3, #20
 8014338:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	23a5      	movs	r3, #165	@ 0xa5
 801433e:	009b      	lsls	r3, r3, #2
 8014340:	58d3      	ldr	r3, [r2, r3]
 8014342:	2b02      	cmp	r3, #2
 8014344:	d164      	bne.n	8014410 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	68da      	ldr	r2, [r3, #12]
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	691b      	ldr	r3, [r3, #16]
 801434e:	429a      	cmp	r2, r3
 8014350:	d915      	bls.n	801437e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8014352:	697b      	ldr	r3, [r7, #20]
 8014354:	68da      	ldr	r2, [r3, #12]
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	691b      	ldr	r3, [r3, #16]
 801435a:	1ad2      	subs	r2, r2, r3
 801435c:	697b      	ldr	r3, [r7, #20]
 801435e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	68db      	ldr	r3, [r3, #12]
 8014364:	b29a      	uxth	r2, r3
 8014366:	6879      	ldr	r1, [r7, #4]
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	0018      	movs	r0, r3
 801436c:	f000 ffe9 	bl	8015342 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014370:	68f8      	ldr	r0, [r7, #12]
 8014372:	2300      	movs	r3, #0
 8014374:	2200      	movs	r2, #0
 8014376:	2100      	movs	r1, #0
 8014378:	f001 fcbe 	bl	8015cf8 <USBD_LL_PrepareReceive>
 801437c:	e059      	b.n	8014432 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	689a      	ldr	r2, [r3, #8]
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	691b      	ldr	r3, [r3, #16]
 8014386:	0019      	movs	r1, r3
 8014388:	0010      	movs	r0, r2
 801438a:	f7eb ff5f 	bl	800024c <__aeabi_uidivmod>
 801438e:	1e0b      	subs	r3, r1, #0
 8014390:	d11f      	bne.n	80143d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	689a      	ldr	r2, [r3, #8]
 8014396:	697b      	ldr	r3, [r7, #20]
 8014398:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801439a:	429a      	cmp	r2, r3
 801439c:	d319      	bcc.n	80143d2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	689a      	ldr	r2, [r3, #8]
 80143a2:	68f9      	ldr	r1, [r7, #12]
 80143a4:	23a6      	movs	r3, #166	@ 0xa6
 80143a6:	009b      	lsls	r3, r3, #2
 80143a8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d211      	bcs.n	80143d2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2200      	movs	r2, #0
 80143b2:	2100      	movs	r1, #0
 80143b4:	0018      	movs	r0, r3
 80143b6:	f000 ffc4 	bl	8015342 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80143ba:	68fa      	ldr	r2, [r7, #12]
 80143bc:	23a6      	movs	r3, #166	@ 0xa6
 80143be:	009b      	lsls	r3, r3, #2
 80143c0:	2100      	movs	r1, #0
 80143c2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	2300      	movs	r3, #0
 80143c8:	2200      	movs	r2, #0
 80143ca:	2100      	movs	r1, #0
 80143cc:	f001 fc94 	bl	8015cf8 <USBD_LL_PrepareReceive>
 80143d0:	e02f      	b.n	8014432 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80143d2:	68fa      	ldr	r2, [r7, #12]
 80143d4:	23ad      	movs	r3, #173	@ 0xad
 80143d6:	009b      	lsls	r3, r3, #2
 80143d8:	58d3      	ldr	r3, [r2, r3]
 80143da:	68db      	ldr	r3, [r3, #12]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d00d      	beq.n	80143fc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80143e0:	68fa      	ldr	r2, [r7, #12]
 80143e2:	23a7      	movs	r3, #167	@ 0xa7
 80143e4:	009b      	lsls	r3, r3, #2
 80143e6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80143e8:	2b03      	cmp	r3, #3
 80143ea:	d107      	bne.n	80143fc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80143ec:	68fa      	ldr	r2, [r7, #12]
 80143ee:	23ad      	movs	r3, #173	@ 0xad
 80143f0:	009b      	lsls	r3, r3, #2
 80143f2:	58d3      	ldr	r3, [r2, r3]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	68fa      	ldr	r2, [r7, #12]
 80143f8:	0010      	movs	r0, r2
 80143fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	2180      	movs	r1, #128	@ 0x80
 8014400:	0018      	movs	r0, r3
 8014402:	f001 fb90 	bl	8015b26 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	0018      	movs	r0, r3
 801440a:	f000 fff8 	bl	80153fe <USBD_CtlReceiveStatus>
 801440e:	e010      	b.n	8014432 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8014410:	68fa      	ldr	r2, [r7, #12]
 8014412:	23a5      	movs	r3, #165	@ 0xa5
 8014414:	009b      	lsls	r3, r3, #2
 8014416:	58d3      	ldr	r3, [r2, r3]
 8014418:	2b04      	cmp	r3, #4
 801441a:	d005      	beq.n	8014428 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801441c:	68fa      	ldr	r2, [r7, #12]
 801441e:	23a5      	movs	r3, #165	@ 0xa5
 8014420:	009b      	lsls	r3, r3, #2
 8014422:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8014424:	2b00      	cmp	r3, #0
 8014426:	d104      	bne.n	8014432 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	2180      	movs	r1, #128	@ 0x80
 801442c:	0018      	movs	r0, r3
 801442e:	f001 fb7a 	bl	8015b26 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8014432:	68fa      	ldr	r2, [r7, #12]
 8014434:	23a8      	movs	r3, #168	@ 0xa8
 8014436:	009b      	lsls	r3, r3, #2
 8014438:	5cd3      	ldrb	r3, [r2, r3]
 801443a:	2b01      	cmp	r3, #1
 801443c:	d124      	bne.n	8014488 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	0018      	movs	r0, r3
 8014442:	f7ff fe42 	bl	80140ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014446:	68fa      	ldr	r2, [r7, #12]
 8014448:	23a8      	movs	r3, #168	@ 0xa8
 801444a:	009b      	lsls	r3, r3, #2
 801444c:	2100      	movs	r1, #0
 801444e:	54d1      	strb	r1, [r2, r3]
 8014450:	e01a      	b.n	8014488 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	23ad      	movs	r3, #173	@ 0xad
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	58d3      	ldr	r3, [r2, r3]
 801445a:	695b      	ldr	r3, [r3, #20]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d011      	beq.n	8014484 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014460:	68fa      	ldr	r2, [r7, #12]
 8014462:	23a7      	movs	r3, #167	@ 0xa7
 8014464:	009b      	lsls	r3, r3, #2
 8014466:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8014468:	2b03      	cmp	r3, #3
 801446a:	d10b      	bne.n	8014484 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801446c:	68fa      	ldr	r2, [r7, #12]
 801446e:	23ad      	movs	r3, #173	@ 0xad
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	58d3      	ldr	r3, [r2, r3]
 8014474:	695b      	ldr	r3, [r3, #20]
 8014476:	220b      	movs	r2, #11
 8014478:	18ba      	adds	r2, r7, r2
 801447a:	7811      	ldrb	r1, [r2, #0]
 801447c:	68fa      	ldr	r2, [r7, #12]
 801447e:	0010      	movs	r0, r2
 8014480:	4798      	blx	r3
 8014482:	e001      	b.n	8014488 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014484:	2302      	movs	r3, #2
 8014486:	e000      	b.n	801448a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8014488:	2300      	movs	r3, #0
}
 801448a:	0018      	movs	r0, r3
 801448c:	46bd      	mov	sp, r7
 801448e:	b006      	add	sp, #24
 8014490:	bd80      	pop	{r7, pc}

08014492 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014492:	b580      	push	{r7, lr}
 8014494:	b082      	sub	sp, #8
 8014496:	af00      	add	r7, sp, #0
 8014498:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	2340      	movs	r3, #64	@ 0x40
 801449e:	2200      	movs	r2, #0
 80144a0:	2100      	movs	r1, #0
 80144a2:	f001 fade 	bl	8015a62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	23ac      	movs	r3, #172	@ 0xac
 80144aa:	005b      	lsls	r3, r3, #1
 80144ac:	2101      	movs	r1, #1
 80144ae:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	23b2      	movs	r3, #178	@ 0xb2
 80144b4:	005b      	lsls	r3, r3, #1
 80144b6:	2140      	movs	r1, #64	@ 0x40
 80144b8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	2340      	movs	r3, #64	@ 0x40
 80144be:	2200      	movs	r2, #0
 80144c0:	2180      	movs	r1, #128	@ 0x80
 80144c2:	f001 face 	bl	8015a62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	2201      	movs	r2, #1
 80144ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2240      	movs	r2, #64	@ 0x40
 80144d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80144d2:	687a      	ldr	r2, [r7, #4]
 80144d4:	23a7      	movs	r3, #167	@ 0xa7
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	2101      	movs	r1, #1
 80144da:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	23a5      	movs	r3, #165	@ 0xa5
 80144e0:	009b      	lsls	r3, r3, #2
 80144e2:	2100      	movs	r1, #0
 80144e4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	23a9      	movs	r3, #169	@ 0xa9
 80144f0:	009b      	lsls	r3, r3, #2
 80144f2:	2100      	movs	r1, #0
 80144f4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80144f6:	687a      	ldr	r2, [r7, #4]
 80144f8:	23ae      	movs	r3, #174	@ 0xae
 80144fa:	009b      	lsls	r3, r3, #2
 80144fc:	58d3      	ldr	r3, [r2, r3]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d00a      	beq.n	8014518 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014502:	687a      	ldr	r2, [r7, #4]
 8014504:	23ad      	movs	r3, #173	@ 0xad
 8014506:	009b      	lsls	r3, r3, #2
 8014508:	58d3      	ldr	r3, [r2, r3]
 801450a:	685a      	ldr	r2, [r3, #4]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	b2d9      	uxtb	r1, r3
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	0018      	movs	r0, r3
 8014516:	4790      	blx	r2
  }

  return USBD_OK;
 8014518:	2300      	movs	r3, #0
}
 801451a:	0018      	movs	r0, r3
 801451c:	46bd      	mov	sp, r7
 801451e:	b002      	add	sp, #8
 8014520:	bd80      	pop	{r7, pc}

08014522 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014522:	b580      	push	{r7, lr}
 8014524:	b082      	sub	sp, #8
 8014526:	af00      	add	r7, sp, #0
 8014528:	6078      	str	r0, [r7, #4]
 801452a:	000a      	movs	r2, r1
 801452c:	1cfb      	adds	r3, r7, #3
 801452e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	1cfa      	adds	r2, r7, #3
 8014534:	7812      	ldrb	r2, [r2, #0]
 8014536:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014538:	2300      	movs	r3, #0
}
 801453a:	0018      	movs	r0, r3
 801453c:	46bd      	mov	sp, r7
 801453e:	b002      	add	sp, #8
 8014540:	bd80      	pop	{r7, pc}
	...

08014544 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b082      	sub	sp, #8
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801454c:	687a      	ldr	r2, [r7, #4]
 801454e:	23a7      	movs	r3, #167	@ 0xa7
 8014550:	009b      	lsls	r3, r3, #2
 8014552:	5cd1      	ldrb	r1, [r2, r3]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	4a06      	ldr	r2, [pc, #24]	@ (8014570 <USBD_LL_Suspend+0x2c>)
 8014558:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	23a7      	movs	r3, #167	@ 0xa7
 801455e:	009b      	lsls	r3, r3, #2
 8014560:	2104      	movs	r1, #4
 8014562:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8014564:	2300      	movs	r3, #0
}
 8014566:	0018      	movs	r0, r3
 8014568:	46bd      	mov	sp, r7
 801456a:	b002      	add	sp, #8
 801456c:	bd80      	pop	{r7, pc}
 801456e:	46c0      	nop			@ (mov r8, r8)
 8014570:	0000029d 	.word	0x0000029d

08014574 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801457c:	687a      	ldr	r2, [r7, #4]
 801457e:	23a7      	movs	r3, #167	@ 0xa7
 8014580:	009b      	lsls	r3, r3, #2
 8014582:	5cd3      	ldrb	r3, [r2, r3]
 8014584:	2b04      	cmp	r3, #4
 8014586:	d106      	bne.n	8014596 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	4a05      	ldr	r2, [pc, #20]	@ (80145a0 <USBD_LL_Resume+0x2c>)
 801458c:	5c99      	ldrb	r1, [r3, r2]
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	23a7      	movs	r3, #167	@ 0xa7
 8014592:	009b      	lsls	r3, r3, #2
 8014594:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8014596:	2300      	movs	r3, #0
}
 8014598:	0018      	movs	r0, r3
 801459a:	46bd      	mov	sp, r7
 801459c:	b002      	add	sp, #8
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	0000029d 	.word	0x0000029d

080145a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	23a7      	movs	r3, #167	@ 0xa7
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	5cd3      	ldrb	r3, [r2, r3]
 80145b4:	2b03      	cmp	r3, #3
 80145b6:	d10e      	bne.n	80145d6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	23ad      	movs	r3, #173	@ 0xad
 80145bc:	009b      	lsls	r3, r3, #2
 80145be:	58d3      	ldr	r3, [r2, r3]
 80145c0:	69db      	ldr	r3, [r3, #28]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d007      	beq.n	80145d6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	23ad      	movs	r3, #173	@ 0xad
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	58d3      	ldr	r3, [r2, r3]
 80145ce:	69db      	ldr	r3, [r3, #28]
 80145d0:	687a      	ldr	r2, [r7, #4]
 80145d2:	0010      	movs	r0, r2
 80145d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80145d6:	2300      	movs	r3, #0
}
 80145d8:	0018      	movs	r0, r3
 80145da:	46bd      	mov	sp, r7
 80145dc:	b002      	add	sp, #8
 80145de:	bd80      	pop	{r7, pc}

080145e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b084      	sub	sp, #16
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80145ea:	230f      	movs	r3, #15
 80145ec:	18fb      	adds	r3, r7, r3
 80145ee:	2200      	movs	r2, #0
 80145f0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	001a      	movs	r2, r3
 80145f8:	2360      	movs	r3, #96	@ 0x60
 80145fa:	4013      	ands	r3, r2
 80145fc:	2b40      	cmp	r3, #64	@ 0x40
 80145fe:	d004      	beq.n	801460a <USBD_StdDevReq+0x2a>
 8014600:	d84f      	bhi.n	80146a2 <USBD_StdDevReq+0xc2>
 8014602:	2b00      	cmp	r3, #0
 8014604:	d00b      	beq.n	801461e <USBD_StdDevReq+0x3e>
 8014606:	2b20      	cmp	r3, #32
 8014608:	d14b      	bne.n	80146a2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	23ad      	movs	r3, #173	@ 0xad
 801460e:	009b      	lsls	r3, r3, #2
 8014610:	58d3      	ldr	r3, [r2, r3]
 8014612:	689b      	ldr	r3, [r3, #8]
 8014614:	6839      	ldr	r1, [r7, #0]
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	0010      	movs	r0, r2
 801461a:	4798      	blx	r3
      break;
 801461c:	e048      	b.n	80146b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	785b      	ldrb	r3, [r3, #1]
 8014622:	2b09      	cmp	r3, #9
 8014624:	d835      	bhi.n	8014692 <USBD_StdDevReq+0xb2>
 8014626:	009a      	lsls	r2, r3, #2
 8014628:	4b25      	ldr	r3, [pc, #148]	@ (80146c0 <USBD_StdDevReq+0xe0>)
 801462a:	18d3      	adds	r3, r2, r3
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014630:	683a      	ldr	r2, [r7, #0]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	0011      	movs	r1, r2
 8014636:	0018      	movs	r0, r3
 8014638:	f000 fa52 	bl	8014ae0 <USBD_GetDescriptor>
          break;
 801463c:	e030      	b.n	80146a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801463e:	683a      	ldr	r2, [r7, #0]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	0011      	movs	r1, r2
 8014644:	0018      	movs	r0, r3
 8014646:	f000 fbfd 	bl	8014e44 <USBD_SetAddress>
          break;
 801464a:	e029      	b.n	80146a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801464c:	683a      	ldr	r2, [r7, #0]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	0011      	movs	r1, r2
 8014652:	0018      	movs	r0, r3
 8014654:	f000 fc4a 	bl	8014eec <USBD_SetConfig>
          break;
 8014658:	e022      	b.n	80146a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801465a:	683a      	ldr	r2, [r7, #0]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	0011      	movs	r1, r2
 8014660:	0018      	movs	r0, r3
 8014662:	f000 fce7 	bl	8015034 <USBD_GetConfig>
          break;
 8014666:	e01b      	b.n	80146a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014668:	683a      	ldr	r2, [r7, #0]
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	0011      	movs	r1, r2
 801466e:	0018      	movs	r0, r3
 8014670:	f000 fd1b 	bl	80150aa <USBD_GetStatus>
          break;
 8014674:	e014      	b.n	80146a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014676:	683a      	ldr	r2, [r7, #0]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	0011      	movs	r1, r2
 801467c:	0018      	movs	r0, r3
 801467e:	f000 fd4e 	bl	801511e <USBD_SetFeature>
          break;
 8014682:	e00d      	b.n	80146a0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014684:	683a      	ldr	r2, [r7, #0]
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	0011      	movs	r1, r2
 801468a:	0018      	movs	r0, r3
 801468c:	f000 fd5d 	bl	801514a <USBD_ClrFeature>
          break;
 8014690:	e006      	b.n	80146a0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014692:	683a      	ldr	r2, [r7, #0]
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	0011      	movs	r1, r2
 8014698:	0018      	movs	r0, r3
 801469a:	f000 fdb4 	bl	8015206 <USBD_CtlError>
          break;
 801469e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80146a0:	e006      	b.n	80146b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80146a2:	683a      	ldr	r2, [r7, #0]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	0011      	movs	r1, r2
 80146a8:	0018      	movs	r0, r3
 80146aa:	f000 fdac 	bl	8015206 <USBD_CtlError>
      break;
 80146ae:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80146b0:	230f      	movs	r3, #15
 80146b2:	18fb      	adds	r3, r7, r3
 80146b4:	781b      	ldrb	r3, [r3, #0]
}
 80146b6:	0018      	movs	r0, r3
 80146b8:	46bd      	mov	sp, r7
 80146ba:	b004      	add	sp, #16
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	46c0      	nop			@ (mov r8, r8)
 80146c0:	0801a3f8 	.word	0x0801a3f8

080146c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80146c4:	b5b0      	push	{r4, r5, r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80146ce:	230f      	movs	r3, #15
 80146d0:	18fb      	adds	r3, r7, r3
 80146d2:	2200      	movs	r2, #0
 80146d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	001a      	movs	r2, r3
 80146dc:	2360      	movs	r3, #96	@ 0x60
 80146de:	4013      	ands	r3, r2
 80146e0:	2b40      	cmp	r3, #64	@ 0x40
 80146e2:	d004      	beq.n	80146ee <USBD_StdItfReq+0x2a>
 80146e4:	d839      	bhi.n	801475a <USBD_StdItfReq+0x96>
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d001      	beq.n	80146ee <USBD_StdItfReq+0x2a>
 80146ea:	2b20      	cmp	r3, #32
 80146ec:	d135      	bne.n	801475a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	23a7      	movs	r3, #167	@ 0xa7
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	5cd3      	ldrb	r3, [r2, r3]
 80146f6:	3b01      	subs	r3, #1
 80146f8:	2b02      	cmp	r3, #2
 80146fa:	d825      	bhi.n	8014748 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	889b      	ldrh	r3, [r3, #4]
 8014700:	b2db      	uxtb	r3, r3
 8014702:	2b01      	cmp	r3, #1
 8014704:	d819      	bhi.n	801473a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014706:	687a      	ldr	r2, [r7, #4]
 8014708:	23ad      	movs	r3, #173	@ 0xad
 801470a:	009b      	lsls	r3, r3, #2
 801470c:	58d3      	ldr	r3, [r2, r3]
 801470e:	689b      	ldr	r3, [r3, #8]
 8014710:	250f      	movs	r5, #15
 8014712:	197c      	adds	r4, r7, r5
 8014714:	6839      	ldr	r1, [r7, #0]
 8014716:	687a      	ldr	r2, [r7, #4]
 8014718:	0010      	movs	r0, r2
 801471a:	4798      	blx	r3
 801471c:	0003      	movs	r3, r0
 801471e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	88db      	ldrh	r3, [r3, #6]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d116      	bne.n	8014756 <USBD_StdItfReq+0x92>
 8014728:	197b      	adds	r3, r7, r5
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d112      	bne.n	8014756 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	0018      	movs	r0, r3
 8014734:	f000 fe4f 	bl	80153d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014738:	e00d      	b.n	8014756 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801473a:	683a      	ldr	r2, [r7, #0]
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	0011      	movs	r1, r2
 8014740:	0018      	movs	r0, r3
 8014742:	f000 fd60 	bl	8015206 <USBD_CtlError>
          break;
 8014746:	e006      	b.n	8014756 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8014748:	683a      	ldr	r2, [r7, #0]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	0011      	movs	r1, r2
 801474e:	0018      	movs	r0, r3
 8014750:	f000 fd59 	bl	8015206 <USBD_CtlError>
          break;
 8014754:	e000      	b.n	8014758 <USBD_StdItfReq+0x94>
          break;
 8014756:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014758:	e006      	b.n	8014768 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801475a:	683a      	ldr	r2, [r7, #0]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	0011      	movs	r1, r2
 8014760:	0018      	movs	r0, r3
 8014762:	f000 fd50 	bl	8015206 <USBD_CtlError>
      break;
 8014766:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8014768:	2300      	movs	r3, #0
}
 801476a:	0018      	movs	r0, r3
 801476c:	46bd      	mov	sp, r7
 801476e:	b004      	add	sp, #16
 8014770:	bdb0      	pop	{r4, r5, r7, pc}

08014772 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014772:	b5b0      	push	{r4, r5, r7, lr}
 8014774:	b084      	sub	sp, #16
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801477c:	230f      	movs	r3, #15
 801477e:	18fb      	adds	r3, r7, r3
 8014780:	2200      	movs	r2, #0
 8014782:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	889a      	ldrh	r2, [r3, #4]
 8014788:	230e      	movs	r3, #14
 801478a:	18fb      	adds	r3, r7, r3
 801478c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	001a      	movs	r2, r3
 8014794:	2360      	movs	r3, #96	@ 0x60
 8014796:	4013      	ands	r3, r2
 8014798:	2b40      	cmp	r3, #64	@ 0x40
 801479a:	d006      	beq.n	80147aa <USBD_StdEPReq+0x38>
 801479c:	d900      	bls.n	80147a0 <USBD_StdEPReq+0x2e>
 801479e:	e190      	b.n	8014ac2 <USBD_StdEPReq+0x350>
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d00c      	beq.n	80147be <USBD_StdEPReq+0x4c>
 80147a4:	2b20      	cmp	r3, #32
 80147a6:	d000      	beq.n	80147aa <USBD_StdEPReq+0x38>
 80147a8:	e18b      	b.n	8014ac2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80147aa:	687a      	ldr	r2, [r7, #4]
 80147ac:	23ad      	movs	r3, #173	@ 0xad
 80147ae:	009b      	lsls	r3, r3, #2
 80147b0:	58d3      	ldr	r3, [r2, r3]
 80147b2:	689b      	ldr	r3, [r3, #8]
 80147b4:	6839      	ldr	r1, [r7, #0]
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	0010      	movs	r0, r2
 80147ba:	4798      	blx	r3
      break;
 80147bc:	e188      	b.n	8014ad0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	001a      	movs	r2, r3
 80147c4:	2360      	movs	r3, #96	@ 0x60
 80147c6:	4013      	ands	r3, r2
 80147c8:	2b20      	cmp	r3, #32
 80147ca:	d10f      	bne.n	80147ec <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80147cc:	687a      	ldr	r2, [r7, #4]
 80147ce:	23ad      	movs	r3, #173	@ 0xad
 80147d0:	009b      	lsls	r3, r3, #2
 80147d2:	58d3      	ldr	r3, [r2, r3]
 80147d4:	689b      	ldr	r3, [r3, #8]
 80147d6:	250f      	movs	r5, #15
 80147d8:	197c      	adds	r4, r7, r5
 80147da:	6839      	ldr	r1, [r7, #0]
 80147dc:	687a      	ldr	r2, [r7, #4]
 80147de:	0010      	movs	r0, r2
 80147e0:	4798      	blx	r3
 80147e2:	0003      	movs	r3, r0
 80147e4:	7023      	strb	r3, [r4, #0]

        return ret;
 80147e6:	197b      	adds	r3, r7, r5
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	e174      	b.n	8014ad6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	785b      	ldrb	r3, [r3, #1]
 80147f0:	2b03      	cmp	r3, #3
 80147f2:	d007      	beq.n	8014804 <USBD_StdEPReq+0x92>
 80147f4:	dd00      	ble.n	80147f8 <USBD_StdEPReq+0x86>
 80147f6:	e15c      	b.n	8014ab2 <USBD_StdEPReq+0x340>
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d100      	bne.n	80147fe <USBD_StdEPReq+0x8c>
 80147fc:	e092      	b.n	8014924 <USBD_StdEPReq+0x1b2>
 80147fe:	2b01      	cmp	r3, #1
 8014800:	d04b      	beq.n	801489a <USBD_StdEPReq+0x128>
 8014802:	e156      	b.n	8014ab2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	23a7      	movs	r3, #167	@ 0xa7
 8014808:	009b      	lsls	r3, r3, #2
 801480a:	5cd3      	ldrb	r3, [r2, r3]
 801480c:	2b02      	cmp	r3, #2
 801480e:	d002      	beq.n	8014816 <USBD_StdEPReq+0xa4>
 8014810:	2b03      	cmp	r3, #3
 8014812:	d01d      	beq.n	8014850 <USBD_StdEPReq+0xde>
 8014814:	e039      	b.n	801488a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014816:	220e      	movs	r2, #14
 8014818:	18bb      	adds	r3, r7, r2
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d010      	beq.n	8014842 <USBD_StdEPReq+0xd0>
 8014820:	18bb      	adds	r3, r7, r2
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	2b80      	cmp	r3, #128	@ 0x80
 8014826:	d00c      	beq.n	8014842 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014828:	18bb      	adds	r3, r7, r2
 801482a:	781a      	ldrb	r2, [r3, #0]
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	0011      	movs	r1, r2
 8014830:	0018      	movs	r0, r3
 8014832:	f001 f978 	bl	8015b26 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	2180      	movs	r1, #128	@ 0x80
 801483a:	0018      	movs	r0, r3
 801483c:	f001 f973 	bl	8015b26 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014840:	e02a      	b.n	8014898 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8014842:	683a      	ldr	r2, [r7, #0]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	0011      	movs	r1, r2
 8014848:	0018      	movs	r0, r3
 801484a:	f000 fcdc 	bl	8015206 <USBD_CtlError>
              break;
 801484e:	e023      	b.n	8014898 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	885b      	ldrh	r3, [r3, #2]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d113      	bne.n	8014880 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8014858:	220e      	movs	r2, #14
 801485a:	18bb      	adds	r3, r7, r2
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d00e      	beq.n	8014880 <USBD_StdEPReq+0x10e>
 8014862:	18bb      	adds	r3, r7, r2
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	2b80      	cmp	r3, #128	@ 0x80
 8014868:	d00a      	beq.n	8014880 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	88db      	ldrh	r3, [r3, #6]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d106      	bne.n	8014880 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014872:	18bb      	adds	r3, r7, r2
 8014874:	781a      	ldrb	r2, [r3, #0]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	0011      	movs	r1, r2
 801487a:	0018      	movs	r0, r3
 801487c:	f001 f953 	bl	8015b26 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	0018      	movs	r0, r3
 8014884:	f000 fda7 	bl	80153d6 <USBD_CtlSendStatus>

              break;
 8014888:	e006      	b.n	8014898 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	0011      	movs	r1, r2
 8014890:	0018      	movs	r0, r3
 8014892:	f000 fcb8 	bl	8015206 <USBD_CtlError>
              break;
 8014896:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014898:	e112      	b.n	8014ac0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801489a:	687a      	ldr	r2, [r7, #4]
 801489c:	23a7      	movs	r3, #167	@ 0xa7
 801489e:	009b      	lsls	r3, r3, #2
 80148a0:	5cd3      	ldrb	r3, [r2, r3]
 80148a2:	2b02      	cmp	r3, #2
 80148a4:	d002      	beq.n	80148ac <USBD_StdEPReq+0x13a>
 80148a6:	2b03      	cmp	r3, #3
 80148a8:	d01d      	beq.n	80148e6 <USBD_StdEPReq+0x174>
 80148aa:	e032      	b.n	8014912 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80148ac:	220e      	movs	r2, #14
 80148ae:	18bb      	adds	r3, r7, r2
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d010      	beq.n	80148d8 <USBD_StdEPReq+0x166>
 80148b6:	18bb      	adds	r3, r7, r2
 80148b8:	781b      	ldrb	r3, [r3, #0]
 80148ba:	2b80      	cmp	r3, #128	@ 0x80
 80148bc:	d00c      	beq.n	80148d8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80148be:	18bb      	adds	r3, r7, r2
 80148c0:	781a      	ldrb	r2, [r3, #0]
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	0011      	movs	r1, r2
 80148c6:	0018      	movs	r0, r3
 80148c8:	f001 f92d 	bl	8015b26 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	2180      	movs	r1, #128	@ 0x80
 80148d0:	0018      	movs	r0, r3
 80148d2:	f001 f928 	bl	8015b26 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80148d6:	e024      	b.n	8014922 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80148d8:	683a      	ldr	r2, [r7, #0]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	0011      	movs	r1, r2
 80148de:	0018      	movs	r0, r3
 80148e0:	f000 fc91 	bl	8015206 <USBD_CtlError>
              break;
 80148e4:	e01d      	b.n	8014922 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	885b      	ldrh	r3, [r3, #2]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d118      	bne.n	8014920 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80148ee:	210e      	movs	r1, #14
 80148f0:	187b      	adds	r3, r7, r1
 80148f2:	781b      	ldrb	r3, [r3, #0]
 80148f4:	227f      	movs	r2, #127	@ 0x7f
 80148f6:	4013      	ands	r3, r2
 80148f8:	d006      	beq.n	8014908 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80148fa:	187b      	adds	r3, r7, r1
 80148fc:	781a      	ldrb	r2, [r3, #0]
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	0011      	movs	r1, r2
 8014902:	0018      	movs	r0, r3
 8014904:	f001 f93a 	bl	8015b7c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	0018      	movs	r0, r3
 801490c:	f000 fd63 	bl	80153d6 <USBD_CtlSendStatus>
              }
              break;
 8014910:	e006      	b.n	8014920 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8014912:	683a      	ldr	r2, [r7, #0]
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	0011      	movs	r1, r2
 8014918:	0018      	movs	r0, r3
 801491a:	f000 fc74 	bl	8015206 <USBD_CtlError>
              break;
 801491e:	e000      	b.n	8014922 <USBD_StdEPReq+0x1b0>
              break;
 8014920:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014922:	e0cd      	b.n	8014ac0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	23a7      	movs	r3, #167	@ 0xa7
 8014928:	009b      	lsls	r3, r3, #2
 801492a:	5cd3      	ldrb	r3, [r2, r3]
 801492c:	2b02      	cmp	r3, #2
 801492e:	d002      	beq.n	8014936 <USBD_StdEPReq+0x1c4>
 8014930:	2b03      	cmp	r3, #3
 8014932:	d03c      	beq.n	80149ae <USBD_StdEPReq+0x23c>
 8014934:	e0b5      	b.n	8014aa2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014936:	220e      	movs	r2, #14
 8014938:	18bb      	adds	r3, r7, r2
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d00a      	beq.n	8014956 <USBD_StdEPReq+0x1e4>
 8014940:	18bb      	adds	r3, r7, r2
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	2b80      	cmp	r3, #128	@ 0x80
 8014946:	d006      	beq.n	8014956 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8014948:	683a      	ldr	r2, [r7, #0]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	0011      	movs	r1, r2
 801494e:	0018      	movs	r0, r3
 8014950:	f000 fc59 	bl	8015206 <USBD_CtlError>
                break;
 8014954:	e0ac      	b.n	8014ab0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014956:	220e      	movs	r2, #14
 8014958:	18bb      	adds	r3, r7, r2
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	b25b      	sxtb	r3, r3
 801495e:	2b00      	cmp	r3, #0
 8014960:	da0c      	bge.n	801497c <USBD_StdEPReq+0x20a>
 8014962:	18bb      	adds	r3, r7, r2
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	227f      	movs	r2, #127	@ 0x7f
 8014968:	401a      	ands	r2, r3
 801496a:	0013      	movs	r3, r2
 801496c:	009b      	lsls	r3, r3, #2
 801496e:	189b      	adds	r3, r3, r2
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	3310      	adds	r3, #16
 8014974:	687a      	ldr	r2, [r7, #4]
 8014976:	18d3      	adds	r3, r2, r3
 8014978:	3304      	adds	r3, #4
 801497a:	e00d      	b.n	8014998 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801497c:	230e      	movs	r3, #14
 801497e:	18fb      	adds	r3, r7, r3
 8014980:	781b      	ldrb	r3, [r3, #0]
 8014982:	227f      	movs	r2, #127	@ 0x7f
 8014984:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014986:	0013      	movs	r3, r2
 8014988:	009b      	lsls	r3, r3, #2
 801498a:	189b      	adds	r3, r3, r2
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	3351      	adds	r3, #81	@ 0x51
 8014990:	33ff      	adds	r3, #255	@ 0xff
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	18d3      	adds	r3, r2, r3
 8014996:	3304      	adds	r3, #4
 8014998:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	2200      	movs	r2, #0
 801499e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80149a0:	68b9      	ldr	r1, [r7, #8]
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2202      	movs	r2, #2
 80149a6:	0018      	movs	r0, r3
 80149a8:	f000 fcab 	bl	8015302 <USBD_CtlSendData>
              break;
 80149ac:	e080      	b.n	8014ab0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80149ae:	220e      	movs	r2, #14
 80149b0:	18bb      	adds	r3, r7, r2
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	b25b      	sxtb	r3, r3
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	da14      	bge.n	80149e4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80149ba:	18bb      	adds	r3, r7, r2
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	220f      	movs	r2, #15
 80149c0:	401a      	ands	r2, r3
 80149c2:	6879      	ldr	r1, [r7, #4]
 80149c4:	0013      	movs	r3, r2
 80149c6:	009b      	lsls	r3, r3, #2
 80149c8:	189b      	adds	r3, r3, r2
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	18cb      	adds	r3, r1, r3
 80149ce:	3318      	adds	r3, #24
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d11e      	bne.n	8014a14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80149d6:	683a      	ldr	r2, [r7, #0]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	0011      	movs	r1, r2
 80149dc:	0018      	movs	r0, r3
 80149de:	f000 fc12 	bl	8015206 <USBD_CtlError>
                  break;
 80149e2:	e065      	b.n	8014ab0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80149e4:	230e      	movs	r3, #14
 80149e6:	18fb      	adds	r3, r7, r3
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	220f      	movs	r2, #15
 80149ec:	401a      	ands	r2, r3
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	23ac      	movs	r3, #172	@ 0xac
 80149f2:	0059      	lsls	r1, r3, #1
 80149f4:	0013      	movs	r3, r2
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	189b      	adds	r3, r3, r2
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	18c3      	adds	r3, r0, r3
 80149fe:	185b      	adds	r3, r3, r1
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d106      	bne.n	8014a14 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8014a06:	683a      	ldr	r2, [r7, #0]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	0011      	movs	r1, r2
 8014a0c:	0018      	movs	r0, r3
 8014a0e:	f000 fbfa 	bl	8015206 <USBD_CtlError>
                  break;
 8014a12:	e04d      	b.n	8014ab0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a14:	220e      	movs	r2, #14
 8014a16:	18bb      	adds	r3, r7, r2
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	b25b      	sxtb	r3, r3
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	da0c      	bge.n	8014a3a <USBD_StdEPReq+0x2c8>
 8014a20:	18bb      	adds	r3, r7, r2
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	227f      	movs	r2, #127	@ 0x7f
 8014a26:	401a      	ands	r2, r3
 8014a28:	0013      	movs	r3, r2
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	189b      	adds	r3, r3, r2
 8014a2e:	009b      	lsls	r3, r3, #2
 8014a30:	3310      	adds	r3, #16
 8014a32:	687a      	ldr	r2, [r7, #4]
 8014a34:	18d3      	adds	r3, r2, r3
 8014a36:	3304      	adds	r3, #4
 8014a38:	e00d      	b.n	8014a56 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014a3a:	230e      	movs	r3, #14
 8014a3c:	18fb      	adds	r3, r7, r3
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	227f      	movs	r2, #127	@ 0x7f
 8014a42:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a44:	0013      	movs	r3, r2
 8014a46:	009b      	lsls	r3, r3, #2
 8014a48:	189b      	adds	r3, r3, r2
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	3351      	adds	r3, #81	@ 0x51
 8014a4e:	33ff      	adds	r3, #255	@ 0xff
 8014a50:	687a      	ldr	r2, [r7, #4]
 8014a52:	18d3      	adds	r3, r2, r3
 8014a54:	3304      	adds	r3, #4
 8014a56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014a58:	220e      	movs	r2, #14
 8014a5a:	18bb      	adds	r3, r7, r2
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d003      	beq.n	8014a6a <USBD_StdEPReq+0x2f8>
 8014a62:	18bb      	adds	r3, r7, r2
 8014a64:	781b      	ldrb	r3, [r3, #0]
 8014a66:	2b80      	cmp	r3, #128	@ 0x80
 8014a68:	d103      	bne.n	8014a72 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	601a      	str	r2, [r3, #0]
 8014a70:	e010      	b.n	8014a94 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8014a72:	230e      	movs	r3, #14
 8014a74:	18fb      	adds	r3, r7, r3
 8014a76:	781a      	ldrb	r2, [r3, #0]
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	0011      	movs	r1, r2
 8014a7c:	0018      	movs	r0, r3
 8014a7e:	f001 f8a8 	bl	8015bd2 <USBD_LL_IsStallEP>
 8014a82:	1e03      	subs	r3, r0, #0
 8014a84:	d003      	beq.n	8014a8e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	2201      	movs	r2, #1
 8014a8a:	601a      	str	r2, [r3, #0]
 8014a8c:	e002      	b.n	8014a94 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	2200      	movs	r2, #0
 8014a92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014a94:	68b9      	ldr	r1, [r7, #8]
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2202      	movs	r2, #2
 8014a9a:	0018      	movs	r0, r3
 8014a9c:	f000 fc31 	bl	8015302 <USBD_CtlSendData>
              break;
 8014aa0:	e006      	b.n	8014ab0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8014aa2:	683a      	ldr	r2, [r7, #0]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	0011      	movs	r1, r2
 8014aa8:	0018      	movs	r0, r3
 8014aaa:	f000 fbac 	bl	8015206 <USBD_CtlError>
              break;
 8014aae:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014ab0:	e006      	b.n	8014ac0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8014ab2:	683a      	ldr	r2, [r7, #0]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	0011      	movs	r1, r2
 8014ab8:	0018      	movs	r0, r3
 8014aba:	f000 fba4 	bl	8015206 <USBD_CtlError>
          break;
 8014abe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014ac0:	e006      	b.n	8014ad0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8014ac2:	683a      	ldr	r2, [r7, #0]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	0011      	movs	r1, r2
 8014ac8:	0018      	movs	r0, r3
 8014aca:	f000 fb9c 	bl	8015206 <USBD_CtlError>
      break;
 8014ace:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014ad0:	230f      	movs	r3, #15
 8014ad2:	18fb      	adds	r3, r7, r3
 8014ad4:	781b      	ldrb	r3, [r3, #0]
}
 8014ad6:	0018      	movs	r0, r3
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	b004      	add	sp, #16
 8014adc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014ae0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b084      	sub	sp, #16
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
 8014ae8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014aea:	2308      	movs	r3, #8
 8014aec:	18fb      	adds	r3, r7, r3
 8014aee:	2200      	movs	r2, #0
 8014af0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8014af2:	2300      	movs	r3, #0
 8014af4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014af6:	230b      	movs	r3, #11
 8014af8:	18fb      	adds	r3, r7, r3
 8014afa:	2200      	movs	r2, #0
 8014afc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	885b      	ldrh	r3, [r3, #2]
 8014b02:	0a1b      	lsrs	r3, r3, #8
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	2b07      	cmp	r3, #7
 8014b08:	d900      	bls.n	8014b0c <USBD_GetDescriptor+0x2c>
 8014b0a:	e159      	b.n	8014dc0 <USBD_GetDescriptor+0x2e0>
 8014b0c:	009a      	lsls	r2, r3, #2
 8014b0e:	4bcb      	ldr	r3, [pc, #812]	@ (8014e3c <USBD_GetDescriptor+0x35c>)
 8014b10:	18d3      	adds	r3, r2, r3
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	23ac      	movs	r3, #172	@ 0xac
 8014b1a:	009b      	lsls	r3, r3, #2
 8014b1c:	58d3      	ldr	r3, [r2, r3]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	687a      	ldr	r2, [r7, #4]
 8014b22:	7c12      	ldrb	r2, [r2, #16]
 8014b24:	2108      	movs	r1, #8
 8014b26:	1879      	adds	r1, r7, r1
 8014b28:	0010      	movs	r0, r2
 8014b2a:	4798      	blx	r3
 8014b2c:	0003      	movs	r3, r0
 8014b2e:	60fb      	str	r3, [r7, #12]
      break;
 8014b30:	e153      	b.n	8014dda <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	7c1b      	ldrb	r3, [r3, #16]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d10f      	bne.n	8014b5a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014b3a:	687a      	ldr	r2, [r7, #4]
 8014b3c:	23ad      	movs	r3, #173	@ 0xad
 8014b3e:	009b      	lsls	r3, r3, #2
 8014b40:	58d3      	ldr	r3, [r2, r3]
 8014b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b44:	2208      	movs	r2, #8
 8014b46:	18ba      	adds	r2, r7, r2
 8014b48:	0010      	movs	r0, r2
 8014b4a:	4798      	blx	r3
 8014b4c:	0003      	movs	r3, r0
 8014b4e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	3301      	adds	r3, #1
 8014b54:	2202      	movs	r2, #2
 8014b56:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014b58:	e13f      	b.n	8014dda <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014b5a:	687a      	ldr	r2, [r7, #4]
 8014b5c:	23ad      	movs	r3, #173	@ 0xad
 8014b5e:	009b      	lsls	r3, r3, #2
 8014b60:	58d3      	ldr	r3, [r2, r3]
 8014b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b64:	2208      	movs	r2, #8
 8014b66:	18ba      	adds	r2, r7, r2
 8014b68:	0010      	movs	r0, r2
 8014b6a:	4798      	blx	r3
 8014b6c:	0003      	movs	r3, r0
 8014b6e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	3301      	adds	r3, #1
 8014b74:	2202      	movs	r2, #2
 8014b76:	701a      	strb	r2, [r3, #0]
      break;
 8014b78:	e12f      	b.n	8014dda <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	885b      	ldrh	r3, [r3, #2]
 8014b7e:	b2db      	uxtb	r3, r3
 8014b80:	2b05      	cmp	r3, #5
 8014b82:	d900      	bls.n	8014b86 <USBD_GetDescriptor+0xa6>
 8014b84:	e0d0      	b.n	8014d28 <USBD_GetDescriptor+0x248>
 8014b86:	009a      	lsls	r2, r3, #2
 8014b88:	4bad      	ldr	r3, [pc, #692]	@ (8014e40 <USBD_GetDescriptor+0x360>)
 8014b8a:	18d3      	adds	r3, r2, r3
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014b90:	687a      	ldr	r2, [r7, #4]
 8014b92:	23ac      	movs	r3, #172	@ 0xac
 8014b94:	009b      	lsls	r3, r3, #2
 8014b96:	58d3      	ldr	r3, [r2, r3]
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d00d      	beq.n	8014bba <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014b9e:	687a      	ldr	r2, [r7, #4]
 8014ba0:	23ac      	movs	r3, #172	@ 0xac
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	58d3      	ldr	r3, [r2, r3]
 8014ba6:	685b      	ldr	r3, [r3, #4]
 8014ba8:	687a      	ldr	r2, [r7, #4]
 8014baa:	7c12      	ldrb	r2, [r2, #16]
 8014bac:	2108      	movs	r1, #8
 8014bae:	1879      	adds	r1, r7, r1
 8014bb0:	0010      	movs	r0, r2
 8014bb2:	4798      	blx	r3
 8014bb4:	0003      	movs	r3, r0
 8014bb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bb8:	e0c3      	b.n	8014d42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014bba:	683a      	ldr	r2, [r7, #0]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	0011      	movs	r1, r2
 8014bc0:	0018      	movs	r0, r3
 8014bc2:	f000 fb20 	bl	8015206 <USBD_CtlError>
            err++;
 8014bc6:	210b      	movs	r1, #11
 8014bc8:	187b      	adds	r3, r7, r1
 8014bca:	781a      	ldrb	r2, [r3, #0]
 8014bcc:	187b      	adds	r3, r7, r1
 8014bce:	3201      	adds	r2, #1
 8014bd0:	701a      	strb	r2, [r3, #0]
          break;
 8014bd2:	e0b6      	b.n	8014d42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014bd4:	687a      	ldr	r2, [r7, #4]
 8014bd6:	23ac      	movs	r3, #172	@ 0xac
 8014bd8:	009b      	lsls	r3, r3, #2
 8014bda:	58d3      	ldr	r3, [r2, r3]
 8014bdc:	689b      	ldr	r3, [r3, #8]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d00d      	beq.n	8014bfe <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	23ac      	movs	r3, #172	@ 0xac
 8014be6:	009b      	lsls	r3, r3, #2
 8014be8:	58d3      	ldr	r3, [r2, r3]
 8014bea:	689b      	ldr	r3, [r3, #8]
 8014bec:	687a      	ldr	r2, [r7, #4]
 8014bee:	7c12      	ldrb	r2, [r2, #16]
 8014bf0:	2108      	movs	r1, #8
 8014bf2:	1879      	adds	r1, r7, r1
 8014bf4:	0010      	movs	r0, r2
 8014bf6:	4798      	blx	r3
 8014bf8:	0003      	movs	r3, r0
 8014bfa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bfc:	e0a1      	b.n	8014d42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014bfe:	683a      	ldr	r2, [r7, #0]
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	0011      	movs	r1, r2
 8014c04:	0018      	movs	r0, r3
 8014c06:	f000 fafe 	bl	8015206 <USBD_CtlError>
            err++;
 8014c0a:	210b      	movs	r1, #11
 8014c0c:	187b      	adds	r3, r7, r1
 8014c0e:	781a      	ldrb	r2, [r3, #0]
 8014c10:	187b      	adds	r3, r7, r1
 8014c12:	3201      	adds	r2, #1
 8014c14:	701a      	strb	r2, [r3, #0]
          break;
 8014c16:	e094      	b.n	8014d42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014c18:	687a      	ldr	r2, [r7, #4]
 8014c1a:	23ac      	movs	r3, #172	@ 0xac
 8014c1c:	009b      	lsls	r3, r3, #2
 8014c1e:	58d3      	ldr	r3, [r2, r3]
 8014c20:	68db      	ldr	r3, [r3, #12]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d00d      	beq.n	8014c42 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014c26:	687a      	ldr	r2, [r7, #4]
 8014c28:	23ac      	movs	r3, #172	@ 0xac
 8014c2a:	009b      	lsls	r3, r3, #2
 8014c2c:	58d3      	ldr	r3, [r2, r3]
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	7c12      	ldrb	r2, [r2, #16]
 8014c34:	2108      	movs	r1, #8
 8014c36:	1879      	adds	r1, r7, r1
 8014c38:	0010      	movs	r0, r2
 8014c3a:	4798      	blx	r3
 8014c3c:	0003      	movs	r3, r0
 8014c3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c40:	e07f      	b.n	8014d42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014c42:	683a      	ldr	r2, [r7, #0]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	0011      	movs	r1, r2
 8014c48:	0018      	movs	r0, r3
 8014c4a:	f000 fadc 	bl	8015206 <USBD_CtlError>
            err++;
 8014c4e:	210b      	movs	r1, #11
 8014c50:	187b      	adds	r3, r7, r1
 8014c52:	781a      	ldrb	r2, [r3, #0]
 8014c54:	187b      	adds	r3, r7, r1
 8014c56:	3201      	adds	r2, #1
 8014c58:	701a      	strb	r2, [r3, #0]
          break;
 8014c5a:	e072      	b.n	8014d42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	23ac      	movs	r3, #172	@ 0xac
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	58d3      	ldr	r3, [r2, r3]
 8014c64:	691b      	ldr	r3, [r3, #16]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d00d      	beq.n	8014c86 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	23ac      	movs	r3, #172	@ 0xac
 8014c6e:	009b      	lsls	r3, r3, #2
 8014c70:	58d3      	ldr	r3, [r2, r3]
 8014c72:	691b      	ldr	r3, [r3, #16]
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	7c12      	ldrb	r2, [r2, #16]
 8014c78:	2108      	movs	r1, #8
 8014c7a:	1879      	adds	r1, r7, r1
 8014c7c:	0010      	movs	r0, r2
 8014c7e:	4798      	blx	r3
 8014c80:	0003      	movs	r3, r0
 8014c82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c84:	e05d      	b.n	8014d42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014c86:	683a      	ldr	r2, [r7, #0]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	0011      	movs	r1, r2
 8014c8c:	0018      	movs	r0, r3
 8014c8e:	f000 faba 	bl	8015206 <USBD_CtlError>
            err++;
 8014c92:	210b      	movs	r1, #11
 8014c94:	187b      	adds	r3, r7, r1
 8014c96:	781a      	ldrb	r2, [r3, #0]
 8014c98:	187b      	adds	r3, r7, r1
 8014c9a:	3201      	adds	r2, #1
 8014c9c:	701a      	strb	r2, [r3, #0]
          break;
 8014c9e:	e050      	b.n	8014d42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014ca0:	687a      	ldr	r2, [r7, #4]
 8014ca2:	23ac      	movs	r3, #172	@ 0xac
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	58d3      	ldr	r3, [r2, r3]
 8014ca8:	695b      	ldr	r3, [r3, #20]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d00d      	beq.n	8014cca <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	23ac      	movs	r3, #172	@ 0xac
 8014cb2:	009b      	lsls	r3, r3, #2
 8014cb4:	58d3      	ldr	r3, [r2, r3]
 8014cb6:	695b      	ldr	r3, [r3, #20]
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	7c12      	ldrb	r2, [r2, #16]
 8014cbc:	2108      	movs	r1, #8
 8014cbe:	1879      	adds	r1, r7, r1
 8014cc0:	0010      	movs	r0, r2
 8014cc2:	4798      	blx	r3
 8014cc4:	0003      	movs	r3, r0
 8014cc6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cc8:	e03b      	b.n	8014d42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014cca:	683a      	ldr	r2, [r7, #0]
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	0011      	movs	r1, r2
 8014cd0:	0018      	movs	r0, r3
 8014cd2:	f000 fa98 	bl	8015206 <USBD_CtlError>
            err++;
 8014cd6:	210b      	movs	r1, #11
 8014cd8:	187b      	adds	r3, r7, r1
 8014cda:	781a      	ldrb	r2, [r3, #0]
 8014cdc:	187b      	adds	r3, r7, r1
 8014cde:	3201      	adds	r2, #1
 8014ce0:	701a      	strb	r2, [r3, #0]
          break;
 8014ce2:	e02e      	b.n	8014d42 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014ce4:	687a      	ldr	r2, [r7, #4]
 8014ce6:	23ac      	movs	r3, #172	@ 0xac
 8014ce8:	009b      	lsls	r3, r3, #2
 8014cea:	58d3      	ldr	r3, [r2, r3]
 8014cec:	699b      	ldr	r3, [r3, #24]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d00d      	beq.n	8014d0e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014cf2:	687a      	ldr	r2, [r7, #4]
 8014cf4:	23ac      	movs	r3, #172	@ 0xac
 8014cf6:	009b      	lsls	r3, r3, #2
 8014cf8:	58d3      	ldr	r3, [r2, r3]
 8014cfa:	699b      	ldr	r3, [r3, #24]
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	7c12      	ldrb	r2, [r2, #16]
 8014d00:	2108      	movs	r1, #8
 8014d02:	1879      	adds	r1, r7, r1
 8014d04:	0010      	movs	r0, r2
 8014d06:	4798      	blx	r3
 8014d08:	0003      	movs	r3, r0
 8014d0a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d0c:	e019      	b.n	8014d42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014d0e:	683a      	ldr	r2, [r7, #0]
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	0011      	movs	r1, r2
 8014d14:	0018      	movs	r0, r3
 8014d16:	f000 fa76 	bl	8015206 <USBD_CtlError>
            err++;
 8014d1a:	210b      	movs	r1, #11
 8014d1c:	187b      	adds	r3, r7, r1
 8014d1e:	781a      	ldrb	r2, [r3, #0]
 8014d20:	187b      	adds	r3, r7, r1
 8014d22:	3201      	adds	r2, #1
 8014d24:	701a      	strb	r2, [r3, #0]
          break;
 8014d26:	e00c      	b.n	8014d42 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014d28:	683a      	ldr	r2, [r7, #0]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	0011      	movs	r1, r2
 8014d2e:	0018      	movs	r0, r3
 8014d30:	f000 fa69 	bl	8015206 <USBD_CtlError>
          err++;
 8014d34:	210b      	movs	r1, #11
 8014d36:	187b      	adds	r3, r7, r1
 8014d38:	781a      	ldrb	r2, [r3, #0]
 8014d3a:	187b      	adds	r3, r7, r1
 8014d3c:	3201      	adds	r2, #1
 8014d3e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8014d40:	e04b      	b.n	8014dda <USBD_GetDescriptor+0x2fa>
 8014d42:	e04a      	b.n	8014dda <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	7c1b      	ldrb	r3, [r3, #16]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d10b      	bne.n	8014d64 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	23ad      	movs	r3, #173	@ 0xad
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	58d3      	ldr	r3, [r2, r3]
 8014d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d56:	2208      	movs	r2, #8
 8014d58:	18ba      	adds	r2, r7, r2
 8014d5a:	0010      	movs	r0, r2
 8014d5c:	4798      	blx	r3
 8014d5e:	0003      	movs	r3, r0
 8014d60:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d62:	e03a      	b.n	8014dda <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014d64:	683a      	ldr	r2, [r7, #0]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	0011      	movs	r1, r2
 8014d6a:	0018      	movs	r0, r3
 8014d6c:	f000 fa4b 	bl	8015206 <USBD_CtlError>
        err++;
 8014d70:	210b      	movs	r1, #11
 8014d72:	187b      	adds	r3, r7, r1
 8014d74:	781a      	ldrb	r2, [r3, #0]
 8014d76:	187b      	adds	r3, r7, r1
 8014d78:	3201      	adds	r2, #1
 8014d7a:	701a      	strb	r2, [r3, #0]
      break;
 8014d7c:	e02d      	b.n	8014dda <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	7c1b      	ldrb	r3, [r3, #16]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10f      	bne.n	8014da6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	23ad      	movs	r3, #173	@ 0xad
 8014d8a:	009b      	lsls	r3, r3, #2
 8014d8c:	58d3      	ldr	r3, [r2, r3]
 8014d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d90:	2208      	movs	r2, #8
 8014d92:	18ba      	adds	r2, r7, r2
 8014d94:	0010      	movs	r0, r2
 8014d96:	4798      	blx	r3
 8014d98:	0003      	movs	r3, r0
 8014d9a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	3301      	adds	r3, #1
 8014da0:	2207      	movs	r2, #7
 8014da2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014da4:	e019      	b.n	8014dda <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014da6:	683a      	ldr	r2, [r7, #0]
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	0011      	movs	r1, r2
 8014dac:	0018      	movs	r0, r3
 8014dae:	f000 fa2a 	bl	8015206 <USBD_CtlError>
        err++;
 8014db2:	210b      	movs	r1, #11
 8014db4:	187b      	adds	r3, r7, r1
 8014db6:	781a      	ldrb	r2, [r3, #0]
 8014db8:	187b      	adds	r3, r7, r1
 8014dba:	3201      	adds	r2, #1
 8014dbc:	701a      	strb	r2, [r3, #0]
      break;
 8014dbe:	e00c      	b.n	8014dda <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8014dc0:	683a      	ldr	r2, [r7, #0]
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	0011      	movs	r1, r2
 8014dc6:	0018      	movs	r0, r3
 8014dc8:	f000 fa1d 	bl	8015206 <USBD_CtlError>
      err++;
 8014dcc:	210b      	movs	r1, #11
 8014dce:	187b      	adds	r3, r7, r1
 8014dd0:	781a      	ldrb	r2, [r3, #0]
 8014dd2:	187b      	adds	r3, r7, r1
 8014dd4:	3201      	adds	r2, #1
 8014dd6:	701a      	strb	r2, [r3, #0]
      break;
 8014dd8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8014dda:	230b      	movs	r3, #11
 8014ddc:	18fb      	adds	r3, r7, r3
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d127      	bne.n	8014e34 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014de4:	2108      	movs	r1, #8
 8014de6:	187b      	adds	r3, r7, r1
 8014de8:	881b      	ldrh	r3, [r3, #0]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d019      	beq.n	8014e22 <USBD_GetDescriptor+0x342>
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	88db      	ldrh	r3, [r3, #6]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d015      	beq.n	8014e22 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	88da      	ldrh	r2, [r3, #6]
 8014dfa:	187b      	adds	r3, r7, r1
 8014dfc:	881b      	ldrh	r3, [r3, #0]
 8014dfe:	1c18      	adds	r0, r3, #0
 8014e00:	1c11      	adds	r1, r2, #0
 8014e02:	b28a      	uxth	r2, r1
 8014e04:	b283      	uxth	r3, r0
 8014e06:	429a      	cmp	r2, r3
 8014e08:	d900      	bls.n	8014e0c <USBD_GetDescriptor+0x32c>
 8014e0a:	1c01      	adds	r1, r0, #0
 8014e0c:	b28a      	uxth	r2, r1
 8014e0e:	2108      	movs	r1, #8
 8014e10:	187b      	adds	r3, r7, r1
 8014e12:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014e14:	187b      	adds	r3, r7, r1
 8014e16:	881a      	ldrh	r2, [r3, #0]
 8014e18:	68f9      	ldr	r1, [r7, #12]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	0018      	movs	r0, r3
 8014e1e:	f000 fa70 	bl	8015302 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	88db      	ldrh	r3, [r3, #6]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d105      	bne.n	8014e36 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	0018      	movs	r0, r3
 8014e2e:	f000 fad2 	bl	80153d6 <USBD_CtlSendStatus>
 8014e32:	e000      	b.n	8014e36 <USBD_GetDescriptor+0x356>
    return;
 8014e34:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8014e36:	46bd      	mov	sp, r7
 8014e38:	b004      	add	sp, #16
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	0801a420 	.word	0x0801a420
 8014e40:	0801a440 	.word	0x0801a440

08014e44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014e44:	b590      	push	{r4, r7, lr}
 8014e46:	b085      	sub	sp, #20
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	889b      	ldrh	r3, [r3, #4]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d13d      	bne.n	8014ed2 <USBD_SetAddress+0x8e>
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	88db      	ldrh	r3, [r3, #6]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d139      	bne.n	8014ed2 <USBD_SetAddress+0x8e>
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	885b      	ldrh	r3, [r3, #2]
 8014e62:	2b7f      	cmp	r3, #127	@ 0x7f
 8014e64:	d835      	bhi.n	8014ed2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	885b      	ldrh	r3, [r3, #2]
 8014e6a:	b2da      	uxtb	r2, r3
 8014e6c:	230f      	movs	r3, #15
 8014e6e:	18fb      	adds	r3, r7, r3
 8014e70:	217f      	movs	r1, #127	@ 0x7f
 8014e72:	400a      	ands	r2, r1
 8014e74:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e76:	687a      	ldr	r2, [r7, #4]
 8014e78:	23a7      	movs	r3, #167	@ 0xa7
 8014e7a:	009b      	lsls	r3, r3, #2
 8014e7c:	5cd3      	ldrb	r3, [r2, r3]
 8014e7e:	2b03      	cmp	r3, #3
 8014e80:	d106      	bne.n	8014e90 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8014e82:	683a      	ldr	r2, [r7, #0]
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	0011      	movs	r1, r2
 8014e88:	0018      	movs	r0, r3
 8014e8a:	f000 f9bc 	bl	8015206 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e8e:	e027      	b.n	8014ee0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	240f      	movs	r4, #15
 8014e94:	193a      	adds	r2, r7, r4
 8014e96:	4914      	ldr	r1, [pc, #80]	@ (8014ee8 <USBD_SetAddress+0xa4>)
 8014e98:	7812      	ldrb	r2, [r2, #0]
 8014e9a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014e9c:	193b      	adds	r3, r7, r4
 8014e9e:	781a      	ldrb	r2, [r3, #0]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	0011      	movs	r1, r2
 8014ea4:	0018      	movs	r0, r3
 8014ea6:	f000 fec5 	bl	8015c34 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	0018      	movs	r0, r3
 8014eae:	f000 fa92 	bl	80153d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014eb2:	193b      	adds	r3, r7, r4
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d005      	beq.n	8014ec6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	23a7      	movs	r3, #167	@ 0xa7
 8014ebe:	009b      	lsls	r3, r3, #2
 8014ec0:	2102      	movs	r1, #2
 8014ec2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ec4:	e00c      	b.n	8014ee0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014ec6:	687a      	ldr	r2, [r7, #4]
 8014ec8:	23a7      	movs	r3, #167	@ 0xa7
 8014eca:	009b      	lsls	r3, r3, #2
 8014ecc:	2101      	movs	r1, #1
 8014ece:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ed0:	e006      	b.n	8014ee0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014ed2:	683a      	ldr	r2, [r7, #0]
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	0011      	movs	r1, r2
 8014ed8:	0018      	movs	r0, r3
 8014eda:	f000 f994 	bl	8015206 <USBD_CtlError>
  }
}
 8014ede:	46c0      	nop			@ (mov r8, r8)
 8014ee0:	46c0      	nop			@ (mov r8, r8)
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	b005      	add	sp, #20
 8014ee6:	bd90      	pop	{r4, r7, pc}
 8014ee8:	0000029e 	.word	0x0000029e

08014eec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	885b      	ldrh	r3, [r3, #2]
 8014efa:	b2da      	uxtb	r2, r3
 8014efc:	4b4c      	ldr	r3, [pc, #304]	@ (8015030 <USBD_SetConfig+0x144>)
 8014efe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014f00:	4b4b      	ldr	r3, [pc, #300]	@ (8015030 <USBD_SetConfig+0x144>)
 8014f02:	781b      	ldrb	r3, [r3, #0]
 8014f04:	2b01      	cmp	r3, #1
 8014f06:	d906      	bls.n	8014f16 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8014f08:	683a      	ldr	r2, [r7, #0]
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	0011      	movs	r1, r2
 8014f0e:	0018      	movs	r0, r3
 8014f10:	f000 f979 	bl	8015206 <USBD_CtlError>
 8014f14:	e088      	b.n	8015028 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	23a7      	movs	r3, #167	@ 0xa7
 8014f1a:	009b      	lsls	r3, r3, #2
 8014f1c:	5cd3      	ldrb	r3, [r2, r3]
 8014f1e:	2b02      	cmp	r3, #2
 8014f20:	d002      	beq.n	8014f28 <USBD_SetConfig+0x3c>
 8014f22:	2b03      	cmp	r3, #3
 8014f24:	d029      	beq.n	8014f7a <USBD_SetConfig+0x8e>
 8014f26:	e071      	b.n	801500c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8014f28:	4b41      	ldr	r3, [pc, #260]	@ (8015030 <USBD_SetConfig+0x144>)
 8014f2a:	781b      	ldrb	r3, [r3, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d01f      	beq.n	8014f70 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8014f30:	4b3f      	ldr	r3, [pc, #252]	@ (8015030 <USBD_SetConfig+0x144>)
 8014f32:	781b      	ldrb	r3, [r3, #0]
 8014f34:	001a      	movs	r2, r3
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014f3a:	687a      	ldr	r2, [r7, #4]
 8014f3c:	23a7      	movs	r3, #167	@ 0xa7
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	2103      	movs	r1, #3
 8014f42:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014f44:	4b3a      	ldr	r3, [pc, #232]	@ (8015030 <USBD_SetConfig+0x144>)
 8014f46:	781a      	ldrb	r2, [r3, #0]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	0011      	movs	r1, r2
 8014f4c:	0018      	movs	r0, r3
 8014f4e:	f7ff f8c5 	bl	80140dc <USBD_SetClassConfig>
 8014f52:	0003      	movs	r3, r0
 8014f54:	2b02      	cmp	r3, #2
 8014f56:	d106      	bne.n	8014f66 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8014f58:	683a      	ldr	r2, [r7, #0]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	0011      	movs	r1, r2
 8014f5e:	0018      	movs	r0, r3
 8014f60:	f000 f951 	bl	8015206 <USBD_CtlError>
            return;
 8014f64:	e060      	b.n	8015028 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	0018      	movs	r0, r3
 8014f6a:	f000 fa34 	bl	80153d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014f6e:	e05b      	b.n	8015028 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	0018      	movs	r0, r3
 8014f74:	f000 fa2f 	bl	80153d6 <USBD_CtlSendStatus>
        break;
 8014f78:	e056      	b.n	8015028 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8015030 <USBD_SetConfig+0x144>)
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d115      	bne.n	8014fae <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f82:	687a      	ldr	r2, [r7, #4]
 8014f84:	23a7      	movs	r3, #167	@ 0xa7
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	2102      	movs	r1, #2
 8014f8a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8014f8c:	4b28      	ldr	r3, [pc, #160]	@ (8015030 <USBD_SetConfig+0x144>)
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	001a      	movs	r2, r3
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014f96:	4b26      	ldr	r3, [pc, #152]	@ (8015030 <USBD_SetConfig+0x144>)
 8014f98:	781a      	ldrb	r2, [r3, #0]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	0011      	movs	r1, r2
 8014f9e:	0018      	movs	r0, r3
 8014fa0:	f7ff f8c3 	bl	801412a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	0018      	movs	r0, r3
 8014fa8:	f000 fa15 	bl	80153d6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014fac:	e03c      	b.n	8015028 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8014fae:	4b20      	ldr	r3, [pc, #128]	@ (8015030 <USBD_SetConfig+0x144>)
 8014fb0:	781b      	ldrb	r3, [r3, #0]
 8014fb2:	001a      	movs	r2, r3
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d022      	beq.n	8015002 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	b2da      	uxtb	r2, r3
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	0011      	movs	r1, r2
 8014fc6:	0018      	movs	r0, r3
 8014fc8:	f7ff f8af 	bl	801412a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014fcc:	4b18      	ldr	r3, [pc, #96]	@ (8015030 <USBD_SetConfig+0x144>)
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	001a      	movs	r2, r3
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014fd6:	4b16      	ldr	r3, [pc, #88]	@ (8015030 <USBD_SetConfig+0x144>)
 8014fd8:	781a      	ldrb	r2, [r3, #0]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	0011      	movs	r1, r2
 8014fde:	0018      	movs	r0, r3
 8014fe0:	f7ff f87c 	bl	80140dc <USBD_SetClassConfig>
 8014fe4:	0003      	movs	r3, r0
 8014fe6:	2b02      	cmp	r3, #2
 8014fe8:	d106      	bne.n	8014ff8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8014fea:	683a      	ldr	r2, [r7, #0]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	0011      	movs	r1, r2
 8014ff0:	0018      	movs	r0, r3
 8014ff2:	f000 f908 	bl	8015206 <USBD_CtlError>
            return;
 8014ff6:	e017      	b.n	8015028 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	0018      	movs	r0, r3
 8014ffc:	f000 f9eb 	bl	80153d6 <USBD_CtlSendStatus>
        break;
 8015000:	e012      	b.n	8015028 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	0018      	movs	r0, r3
 8015006:	f000 f9e6 	bl	80153d6 <USBD_CtlSendStatus>
        break;
 801500a:	e00d      	b.n	8015028 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801500c:	683a      	ldr	r2, [r7, #0]
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	0011      	movs	r1, r2
 8015012:	0018      	movs	r0, r3
 8015014:	f000 f8f7 	bl	8015206 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8015018:	4b05      	ldr	r3, [pc, #20]	@ (8015030 <USBD_SetConfig+0x144>)
 801501a:	781a      	ldrb	r2, [r3, #0]
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	0011      	movs	r1, r2
 8015020:	0018      	movs	r0, r3
 8015022:	f7ff f882 	bl	801412a <USBD_ClrClassConfig>
        break;
 8015026:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8015028:	46bd      	mov	sp, r7
 801502a:	b002      	add	sp, #8
 801502c:	bd80      	pop	{r7, pc}
 801502e:	46c0      	nop			@ (mov r8, r8)
 8015030:	200030d4 	.word	0x200030d4

08015034 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	88db      	ldrh	r3, [r3, #6]
 8015042:	2b01      	cmp	r3, #1
 8015044:	d006      	beq.n	8015054 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8015046:	683a      	ldr	r2, [r7, #0]
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	0011      	movs	r1, r2
 801504c:	0018      	movs	r0, r3
 801504e:	f000 f8da 	bl	8015206 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015052:	e026      	b.n	80150a2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	23a7      	movs	r3, #167	@ 0xa7
 8015058:	009b      	lsls	r3, r3, #2
 801505a:	5cd3      	ldrb	r3, [r2, r3]
 801505c:	2b02      	cmp	r3, #2
 801505e:	dc02      	bgt.n	8015066 <USBD_GetConfig+0x32>
 8015060:	2b00      	cmp	r3, #0
 8015062:	dc03      	bgt.n	801506c <USBD_GetConfig+0x38>
 8015064:	e016      	b.n	8015094 <USBD_GetConfig+0x60>
 8015066:	2b03      	cmp	r3, #3
 8015068:	d00c      	beq.n	8015084 <USBD_GetConfig+0x50>
 801506a:	e013      	b.n	8015094 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2200      	movs	r2, #0
 8015070:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	3308      	adds	r3, #8
 8015076:	0019      	movs	r1, r3
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	2201      	movs	r2, #1
 801507c:	0018      	movs	r0, r3
 801507e:	f000 f940 	bl	8015302 <USBD_CtlSendData>
        break;
 8015082:	e00e      	b.n	80150a2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	1d19      	adds	r1, r3, #4
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2201      	movs	r2, #1
 801508c:	0018      	movs	r0, r3
 801508e:	f000 f938 	bl	8015302 <USBD_CtlSendData>
        break;
 8015092:	e006      	b.n	80150a2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8015094:	683a      	ldr	r2, [r7, #0]
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	0011      	movs	r1, r2
 801509a:	0018      	movs	r0, r3
 801509c:	f000 f8b3 	bl	8015206 <USBD_CtlError>
        break;
 80150a0:	46c0      	nop			@ (mov r8, r8)
}
 80150a2:	46c0      	nop			@ (mov r8, r8)
 80150a4:	46bd      	mov	sp, r7
 80150a6:	b002      	add	sp, #8
 80150a8:	bd80      	pop	{r7, pc}

080150aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150aa:	b580      	push	{r7, lr}
 80150ac:	b082      	sub	sp, #8
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	6078      	str	r0, [r7, #4]
 80150b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80150b4:	687a      	ldr	r2, [r7, #4]
 80150b6:	23a7      	movs	r3, #167	@ 0xa7
 80150b8:	009b      	lsls	r3, r3, #2
 80150ba:	5cd3      	ldrb	r3, [r2, r3]
 80150bc:	3b01      	subs	r3, #1
 80150be:	2b02      	cmp	r3, #2
 80150c0:	d822      	bhi.n	8015108 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	88db      	ldrh	r3, [r3, #6]
 80150c6:	2b02      	cmp	r3, #2
 80150c8:	d006      	beq.n	80150d8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80150ca:	683a      	ldr	r2, [r7, #0]
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	0011      	movs	r1, r2
 80150d0:	0018      	movs	r0, r3
 80150d2:	f000 f898 	bl	8015206 <USBD_CtlError>
        break;
 80150d6:	e01e      	b.n	8015116 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2201      	movs	r2, #1
 80150dc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80150de:	687a      	ldr	r2, [r7, #4]
 80150e0:	23a9      	movs	r3, #169	@ 0xa9
 80150e2:	009b      	lsls	r3, r3, #2
 80150e4:	58d3      	ldr	r3, [r2, r3]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d005      	beq.n	80150f6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	68db      	ldr	r3, [r3, #12]
 80150ee:	2202      	movs	r2, #2
 80150f0:	431a      	orrs	r2, r3
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	330c      	adds	r3, #12
 80150fa:	0019      	movs	r1, r3
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2202      	movs	r2, #2
 8015100:	0018      	movs	r0, r3
 8015102:	f000 f8fe 	bl	8015302 <USBD_CtlSendData>
      break;
 8015106:	e006      	b.n	8015116 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8015108:	683a      	ldr	r2, [r7, #0]
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	0011      	movs	r1, r2
 801510e:	0018      	movs	r0, r3
 8015110:	f000 f879 	bl	8015206 <USBD_CtlError>
      break;
 8015114:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015116:	46c0      	nop			@ (mov r8, r8)
 8015118:	46bd      	mov	sp, r7
 801511a:	b002      	add	sp, #8
 801511c:	bd80      	pop	{r7, pc}

0801511e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801511e:	b580      	push	{r7, lr}
 8015120:	b082      	sub	sp, #8
 8015122:	af00      	add	r7, sp, #0
 8015124:	6078      	str	r0, [r7, #4]
 8015126:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	885b      	ldrh	r3, [r3, #2]
 801512c:	2b01      	cmp	r3, #1
 801512e:	d108      	bne.n	8015142 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8015130:	687a      	ldr	r2, [r7, #4]
 8015132:	23a9      	movs	r3, #169	@ 0xa9
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	2101      	movs	r1, #1
 8015138:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	0018      	movs	r0, r3
 801513e:	f000 f94a 	bl	80153d6 <USBD_CtlSendStatus>
  }
}
 8015142:	46c0      	nop			@ (mov r8, r8)
 8015144:	46bd      	mov	sp, r7
 8015146:	b002      	add	sp, #8
 8015148:	bd80      	pop	{r7, pc}

0801514a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801514a:	b580      	push	{r7, lr}
 801514c:	b082      	sub	sp, #8
 801514e:	af00      	add	r7, sp, #0
 8015150:	6078      	str	r0, [r7, #4]
 8015152:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015154:	687a      	ldr	r2, [r7, #4]
 8015156:	23a7      	movs	r3, #167	@ 0xa7
 8015158:	009b      	lsls	r3, r3, #2
 801515a:	5cd3      	ldrb	r3, [r2, r3]
 801515c:	3b01      	subs	r3, #1
 801515e:	2b02      	cmp	r3, #2
 8015160:	d80d      	bhi.n	801517e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	885b      	ldrh	r3, [r3, #2]
 8015166:	2b01      	cmp	r3, #1
 8015168:	d110      	bne.n	801518c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	23a9      	movs	r3, #169	@ 0xa9
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	2100      	movs	r1, #0
 8015172:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	0018      	movs	r0, r3
 8015178:	f000 f92d 	bl	80153d6 <USBD_CtlSendStatus>
      }
      break;
 801517c:	e006      	b.n	801518c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801517e:	683a      	ldr	r2, [r7, #0]
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	0011      	movs	r1, r2
 8015184:	0018      	movs	r0, r3
 8015186:	f000 f83e 	bl	8015206 <USBD_CtlError>
      break;
 801518a:	e000      	b.n	801518e <USBD_ClrFeature+0x44>
      break;
 801518c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801518e:	46c0      	nop			@ (mov r8, r8)
 8015190:	46bd      	mov	sp, r7
 8015192:	b002      	add	sp, #8
 8015194:	bd80      	pop	{r7, pc}

08015196 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015196:	b580      	push	{r7, lr}
 8015198:	b082      	sub	sp, #8
 801519a:	af00      	add	r7, sp, #0
 801519c:	6078      	str	r0, [r7, #4]
 801519e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	781a      	ldrb	r2, [r3, #0]
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	785a      	ldrb	r2, [r3, #1]
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	3302      	adds	r3, #2
 80151b4:	781b      	ldrb	r3, [r3, #0]
 80151b6:	001a      	movs	r2, r3
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	3303      	adds	r3, #3
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	021b      	lsls	r3, r3, #8
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	18d3      	adds	r3, r2, r3
 80151c4:	b29a      	uxth	r2, r3
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	3304      	adds	r3, #4
 80151ce:	781b      	ldrb	r3, [r3, #0]
 80151d0:	001a      	movs	r2, r3
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	3305      	adds	r3, #5
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	021b      	lsls	r3, r3, #8
 80151da:	b29b      	uxth	r3, r3
 80151dc:	18d3      	adds	r3, r2, r3
 80151de:	b29a      	uxth	r2, r3
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	3306      	adds	r3, #6
 80151e8:	781b      	ldrb	r3, [r3, #0]
 80151ea:	001a      	movs	r2, r3
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	3307      	adds	r3, #7
 80151f0:	781b      	ldrb	r3, [r3, #0]
 80151f2:	021b      	lsls	r3, r3, #8
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	18d3      	adds	r3, r2, r3
 80151f8:	b29a      	uxth	r2, r3
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	80da      	strh	r2, [r3, #6]

}
 80151fe:	46c0      	nop			@ (mov r8, r8)
 8015200:	46bd      	mov	sp, r7
 8015202:	b002      	add	sp, #8
 8015204:	bd80      	pop	{r7, pc}

08015206 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8015206:	b580      	push	{r7, lr}
 8015208:	b082      	sub	sp, #8
 801520a:	af00      	add	r7, sp, #0
 801520c:	6078      	str	r0, [r7, #4]
 801520e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2180      	movs	r1, #128	@ 0x80
 8015214:	0018      	movs	r0, r3
 8015216:	f000 fc86 	bl	8015b26 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	2100      	movs	r1, #0
 801521e:	0018      	movs	r0, r3
 8015220:	f000 fc81 	bl	8015b26 <USBD_LL_StallEP>
}
 8015224:	46c0      	nop			@ (mov r8, r8)
 8015226:	46bd      	mov	sp, r7
 8015228:	b002      	add	sp, #8
 801522a:	bd80      	pop	{r7, pc}

0801522c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801522c:	b590      	push	{r4, r7, lr}
 801522e:	b087      	sub	sp, #28
 8015230:	af00      	add	r7, sp, #0
 8015232:	60f8      	str	r0, [r7, #12]
 8015234:	60b9      	str	r1, [r7, #8]
 8015236:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015238:	2417      	movs	r4, #23
 801523a:	193b      	adds	r3, r7, r4
 801523c:	2200      	movs	r2, #0
 801523e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d03c      	beq.n	80152c0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	0018      	movs	r0, r3
 801524a:	f000 f83d 	bl	80152c8 <USBD_GetLen>
 801524e:	0003      	movs	r3, r0
 8015250:	3301      	adds	r3, #1
 8015252:	b29b      	uxth	r3, r3
 8015254:	18db      	adds	r3, r3, r3
 8015256:	b29a      	uxth	r2, r3
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801525c:	193b      	adds	r3, r7, r4
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	193a      	adds	r2, r7, r4
 8015262:	1c59      	adds	r1, r3, #1
 8015264:	7011      	strb	r1, [r2, #0]
 8015266:	001a      	movs	r2, r3
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	189b      	adds	r3, r3, r2
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	7812      	ldrb	r2, [r2, #0]
 8015270:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8015272:	193b      	adds	r3, r7, r4
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	193a      	adds	r2, r7, r4
 8015278:	1c59      	adds	r1, r3, #1
 801527a:	7011      	strb	r1, [r2, #0]
 801527c:	001a      	movs	r2, r3
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	189b      	adds	r3, r3, r2
 8015282:	2203      	movs	r2, #3
 8015284:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8015286:	e017      	b.n	80152b8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	1c5a      	adds	r2, r3, #1
 801528c:	60fa      	str	r2, [r7, #12]
 801528e:	2417      	movs	r4, #23
 8015290:	193a      	adds	r2, r7, r4
 8015292:	7812      	ldrb	r2, [r2, #0]
 8015294:	1939      	adds	r1, r7, r4
 8015296:	1c50      	adds	r0, r2, #1
 8015298:	7008      	strb	r0, [r1, #0]
 801529a:	0011      	movs	r1, r2
 801529c:	68ba      	ldr	r2, [r7, #8]
 801529e:	1852      	adds	r2, r2, r1
 80152a0:	781b      	ldrb	r3, [r3, #0]
 80152a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80152a4:	193b      	adds	r3, r7, r4
 80152a6:	781b      	ldrb	r3, [r3, #0]
 80152a8:	193a      	adds	r2, r7, r4
 80152aa:	1c59      	adds	r1, r3, #1
 80152ac:	7011      	strb	r1, [r2, #0]
 80152ae:	001a      	movs	r2, r3
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	189b      	adds	r3, r3, r2
 80152b4:	2200      	movs	r2, #0
 80152b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d1e3      	bne.n	8015288 <USBD_GetString+0x5c>
    }
  }
}
 80152c0:	46c0      	nop			@ (mov r8, r8)
 80152c2:	46bd      	mov	sp, r7
 80152c4:	b007      	add	sp, #28
 80152c6:	bd90      	pop	{r4, r7, pc}

080152c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b084      	sub	sp, #16
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80152d0:	230f      	movs	r3, #15
 80152d2:	18fb      	adds	r3, r7, r3
 80152d4:	2200      	movs	r2, #0
 80152d6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80152d8:	e008      	b.n	80152ec <USBD_GetLen+0x24>
  {
    len++;
 80152da:	210f      	movs	r1, #15
 80152dc:	187b      	adds	r3, r7, r1
 80152de:	781a      	ldrb	r2, [r3, #0]
 80152e0:	187b      	adds	r3, r7, r1
 80152e2:	3201      	adds	r2, #1
 80152e4:	701a      	strb	r2, [r3, #0]
    buf++;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	3301      	adds	r3, #1
 80152ea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	781b      	ldrb	r3, [r3, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d1f2      	bne.n	80152da <USBD_GetLen+0x12>
  }

  return len;
 80152f4:	230f      	movs	r3, #15
 80152f6:	18fb      	adds	r3, r7, r3
 80152f8:	781b      	ldrb	r3, [r3, #0]
}
 80152fa:	0018      	movs	r0, r3
 80152fc:	46bd      	mov	sp, r7
 80152fe:	b004      	add	sp, #16
 8015300:	bd80      	pop	{r7, pc}

08015302 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b084      	sub	sp, #16
 8015306:	af00      	add	r7, sp, #0
 8015308:	60f8      	str	r0, [r7, #12]
 801530a:	60b9      	str	r1, [r7, #8]
 801530c:	1dbb      	adds	r3, r7, #6
 801530e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015310:	68fa      	ldr	r2, [r7, #12]
 8015312:	23a5      	movs	r3, #165	@ 0xa5
 8015314:	009b      	lsls	r3, r3, #2
 8015316:	2102      	movs	r1, #2
 8015318:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801531a:	1dbb      	adds	r3, r7, #6
 801531c:	881a      	ldrh	r2, [r3, #0]
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8015322:	1dbb      	adds	r3, r7, #6
 8015324:	881a      	ldrh	r2, [r3, #0]
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801532a:	1dbb      	adds	r3, r7, #6
 801532c:	881b      	ldrh	r3, [r3, #0]
 801532e:	68ba      	ldr	r2, [r7, #8]
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	2100      	movs	r1, #0
 8015334:	f000 fca9 	bl	8015c8a <USBD_LL_Transmit>

  return USBD_OK;
 8015338:	2300      	movs	r3, #0
}
 801533a:	0018      	movs	r0, r3
 801533c:	46bd      	mov	sp, r7
 801533e:	b004      	add	sp, #16
 8015340:	bd80      	pop	{r7, pc}

08015342 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8015342:	b580      	push	{r7, lr}
 8015344:	b084      	sub	sp, #16
 8015346:	af00      	add	r7, sp, #0
 8015348:	60f8      	str	r0, [r7, #12]
 801534a:	60b9      	str	r1, [r7, #8]
 801534c:	1dbb      	adds	r3, r7, #6
 801534e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015350:	1dbb      	adds	r3, r7, #6
 8015352:	881b      	ldrh	r3, [r3, #0]
 8015354:	68ba      	ldr	r2, [r7, #8]
 8015356:	68f8      	ldr	r0, [r7, #12]
 8015358:	2100      	movs	r1, #0
 801535a:	f000 fc96 	bl	8015c8a <USBD_LL_Transmit>

  return USBD_OK;
 801535e:	2300      	movs	r3, #0
}
 8015360:	0018      	movs	r0, r3
 8015362:	46bd      	mov	sp, r7
 8015364:	b004      	add	sp, #16
 8015366:	bd80      	pop	{r7, pc}

08015368 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b084      	sub	sp, #16
 801536c:	af00      	add	r7, sp, #0
 801536e:	60f8      	str	r0, [r7, #12]
 8015370:	60b9      	str	r1, [r7, #8]
 8015372:	1dbb      	adds	r3, r7, #6
 8015374:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015376:	68fa      	ldr	r2, [r7, #12]
 8015378:	23a5      	movs	r3, #165	@ 0xa5
 801537a:	009b      	lsls	r3, r3, #2
 801537c:	2103      	movs	r1, #3
 801537e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8015380:	1dbb      	adds	r3, r7, #6
 8015382:	8819      	ldrh	r1, [r3, #0]
 8015384:	68fa      	ldr	r2, [r7, #12]
 8015386:	23ae      	movs	r3, #174	@ 0xae
 8015388:	005b      	lsls	r3, r3, #1
 801538a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801538c:	1dbb      	adds	r3, r7, #6
 801538e:	8819      	ldrh	r1, [r3, #0]
 8015390:	68fa      	ldr	r2, [r7, #12]
 8015392:	23b0      	movs	r3, #176	@ 0xb0
 8015394:	005b      	lsls	r3, r3, #1
 8015396:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015398:	1dbb      	adds	r3, r7, #6
 801539a:	881b      	ldrh	r3, [r3, #0]
 801539c:	68ba      	ldr	r2, [r7, #8]
 801539e:	68f8      	ldr	r0, [r7, #12]
 80153a0:	2100      	movs	r1, #0
 80153a2:	f000 fca9 	bl	8015cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153a6:	2300      	movs	r3, #0
}
 80153a8:	0018      	movs	r0, r3
 80153aa:	46bd      	mov	sp, r7
 80153ac:	b004      	add	sp, #16
 80153ae:	bd80      	pop	{r7, pc}

080153b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b084      	sub	sp, #16
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	60b9      	str	r1, [r7, #8]
 80153ba:	1dbb      	adds	r3, r7, #6
 80153bc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80153be:	1dbb      	adds	r3, r7, #6
 80153c0:	881b      	ldrh	r3, [r3, #0]
 80153c2:	68ba      	ldr	r2, [r7, #8]
 80153c4:	68f8      	ldr	r0, [r7, #12]
 80153c6:	2100      	movs	r1, #0
 80153c8:	f000 fc96 	bl	8015cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153cc:	2300      	movs	r3, #0
}
 80153ce:	0018      	movs	r0, r3
 80153d0:	46bd      	mov	sp, r7
 80153d2:	b004      	add	sp, #16
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80153d6:	b580      	push	{r7, lr}
 80153d8:	b082      	sub	sp, #8
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	23a5      	movs	r3, #165	@ 0xa5
 80153e2:	009b      	lsls	r3, r3, #2
 80153e4:	2104      	movs	r1, #4
 80153e6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80153e8:	6878      	ldr	r0, [r7, #4]
 80153ea:	2300      	movs	r3, #0
 80153ec:	2200      	movs	r2, #0
 80153ee:	2100      	movs	r1, #0
 80153f0:	f000 fc4b 	bl	8015c8a <USBD_LL_Transmit>

  return USBD_OK;
 80153f4:	2300      	movs	r3, #0
}
 80153f6:	0018      	movs	r0, r3
 80153f8:	46bd      	mov	sp, r7
 80153fa:	b002      	add	sp, #8
 80153fc:	bd80      	pop	{r7, pc}

080153fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80153fe:	b580      	push	{r7, lr}
 8015400:	b082      	sub	sp, #8
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015406:	687a      	ldr	r2, [r7, #4]
 8015408:	23a5      	movs	r3, #165	@ 0xa5
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	2105      	movs	r1, #5
 801540e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	2300      	movs	r3, #0
 8015414:	2200      	movs	r2, #0
 8015416:	2100      	movs	r1, #0
 8015418:	f000 fc6e 	bl	8015cf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801541c:	2300      	movs	r3, #0
}
 801541e:	0018      	movs	r0, r3
 8015420:	46bd      	mov	sp, r7
 8015422:	b002      	add	sp, #8
 8015424:	bd80      	pop	{r7, pc}
	...

08015428 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801542c:	4914      	ldr	r1, [pc, #80]	@ (8015480 <MX_USB_DEVICE_Init+0x58>)
 801542e:	4b15      	ldr	r3, [pc, #84]	@ (8015484 <MX_USB_DEVICE_Init+0x5c>)
 8015430:	2200      	movs	r2, #0
 8015432:	0018      	movs	r0, r3
 8015434:	f7fe fdeb 	bl	801400e <USBD_Init>
 8015438:	1e03      	subs	r3, r0, #0
 801543a:	d001      	beq.n	8015440 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801543c:	f7f0 fb22 	bl	8005a84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015440:	4a11      	ldr	r2, [pc, #68]	@ (8015488 <MX_USB_DEVICE_Init+0x60>)
 8015442:	4b10      	ldr	r3, [pc, #64]	@ (8015484 <MX_USB_DEVICE_Init+0x5c>)
 8015444:	0011      	movs	r1, r2
 8015446:	0018      	movs	r0, r3
 8015448:	f7fe fe12 	bl	8014070 <USBD_RegisterClass>
 801544c:	1e03      	subs	r3, r0, #0
 801544e:	d001      	beq.n	8015454 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8015450:	f7f0 fb18 	bl	8005a84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015454:	4a0d      	ldr	r2, [pc, #52]	@ (801548c <MX_USB_DEVICE_Init+0x64>)
 8015456:	4b0b      	ldr	r3, [pc, #44]	@ (8015484 <MX_USB_DEVICE_Init+0x5c>)
 8015458:	0011      	movs	r1, r2
 801545a:	0018      	movs	r0, r3
 801545c:	f7fe fd5e 	bl	8013f1c <USBD_CDC_RegisterInterface>
 8015460:	1e03      	subs	r3, r0, #0
 8015462:	d001      	beq.n	8015468 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8015464:	f7f0 fb0e 	bl	8005a84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015468:	4b06      	ldr	r3, [pc, #24]	@ (8015484 <MX_USB_DEVICE_Init+0x5c>)
 801546a:	0018      	movs	r0, r3
 801546c:	f7fe fe20 	bl	80140b0 <USBD_Start>
 8015470:	1e03      	subs	r3, r0, #0
 8015472:	d001      	beq.n	8015478 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8015474:	f7f0 fb06 	bl	8005a84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015478:	46c0      	nop			@ (mov r8, r8)
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	46c0      	nop			@ (mov r8, r8)
 8015480:	2000027c 	.word	0x2000027c
 8015484:	200030d8 	.word	0x200030d8
 8015488:	20000168 	.word	0x20000168
 801548c:	2000026c 	.word	0x2000026c

08015490 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015494:	4907      	ldr	r1, [pc, #28]	@ (80154b4 <CDC_Init_FS+0x24>)
 8015496:	4b08      	ldr	r3, [pc, #32]	@ (80154b8 <CDC_Init_FS+0x28>)
 8015498:	2200      	movs	r2, #0
 801549a:	0018      	movs	r0, r3
 801549c:	f7fe fd59 	bl	8013f52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80154a0:	4a06      	ldr	r2, [pc, #24]	@ (80154bc <CDC_Init_FS+0x2c>)
 80154a2:	4b05      	ldr	r3, [pc, #20]	@ (80154b8 <CDC_Init_FS+0x28>)
 80154a4:	0011      	movs	r1, r2
 80154a6:	0018      	movs	r0, r3
 80154a8:	f7fe fd6f 	bl	8013f8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80154ac:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80154ae:	0018      	movs	r0, r3
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	2000379c 	.word	0x2000379c
 80154b8:	200030d8 	.word	0x200030d8
 80154bc:	2000339c 	.word	0x2000339c

080154c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80154c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80154c6:	0018      	movs	r0, r3
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6039      	str	r1, [r7, #0]
 80154d4:	0011      	movs	r1, r2
 80154d6:	1dfb      	adds	r3, r7, #7
 80154d8:	1c02      	adds	r2, r0, #0
 80154da:	701a      	strb	r2, [r3, #0]
 80154dc:	1d3b      	adds	r3, r7, #4
 80154de:	1c0a      	adds	r2, r1, #0
 80154e0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80154e2:	1dfb      	adds	r3, r7, #7
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	2b23      	cmp	r3, #35	@ 0x23
 80154e8:	d804      	bhi.n	80154f4 <CDC_Control_FS+0x28>
 80154ea:	009a      	lsls	r2, r3, #2
 80154ec:	4b04      	ldr	r3, [pc, #16]	@ (8015500 <CDC_Control_FS+0x34>)
 80154ee:	18d3      	adds	r3, r2, r3
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80154f4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80154f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80154f8:	0018      	movs	r0, r3
 80154fa:	46bd      	mov	sp, r7
 80154fc:	b002      	add	sp, #8
 80154fe:	bd80      	pop	{r7, pc}
 8015500:	0801a458 	.word	0x0801a458

08015504 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801550e:	687a      	ldr	r2, [r7, #4]
 8015510:	4b06      	ldr	r3, [pc, #24]	@ (801552c <CDC_Receive_FS+0x28>)
 8015512:	0011      	movs	r1, r2
 8015514:	0018      	movs	r0, r3
 8015516:	f7fe fd38 	bl	8013f8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801551a:	4b04      	ldr	r3, [pc, #16]	@ (801552c <CDC_Receive_FS+0x28>)
 801551c:	0018      	movs	r0, r3
 801551e:	f7fe fd48 	bl	8013fb2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015522:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015524:	0018      	movs	r0, r3
 8015526:	46bd      	mov	sp, r7
 8015528:	b002      	add	sp, #8
 801552a:	bd80      	pop	{r7, pc}
 801552c:	200030d8 	.word	0x200030d8

08015530 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b082      	sub	sp, #8
 8015534:	af00      	add	r7, sp, #0
 8015536:	0002      	movs	r2, r0
 8015538:	6039      	str	r1, [r7, #0]
 801553a:	1dfb      	adds	r3, r7, #7
 801553c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	2212      	movs	r2, #18
 8015542:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015544:	4b02      	ldr	r3, [pc, #8]	@ (8015550 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015546:	0018      	movs	r0, r3
 8015548:	46bd      	mov	sp, r7
 801554a:	b002      	add	sp, #8
 801554c:	bd80      	pop	{r7, pc}
 801554e:	46c0      	nop			@ (mov r8, r8)
 8015550:	20000298 	.word	0x20000298

08015554 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	0002      	movs	r2, r0
 801555c:	6039      	str	r1, [r7, #0]
 801555e:	1dfb      	adds	r3, r7, #7
 8015560:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	2204      	movs	r2, #4
 8015566:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015568:	4b02      	ldr	r3, [pc, #8]	@ (8015574 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801556a:	0018      	movs	r0, r3
 801556c:	46bd      	mov	sp, r7
 801556e:	b002      	add	sp, #8
 8015570:	bd80      	pop	{r7, pc}
 8015572:	46c0      	nop			@ (mov r8, r8)
 8015574:	200002ac 	.word	0x200002ac

08015578 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	0002      	movs	r2, r0
 8015580:	6039      	str	r1, [r7, #0]
 8015582:	1dfb      	adds	r3, r7, #7
 8015584:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015586:	1dfb      	adds	r3, r7, #7
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d106      	bne.n	801559c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801558e:	683a      	ldr	r2, [r7, #0]
 8015590:	4908      	ldr	r1, [pc, #32]	@ (80155b4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8015592:	4b09      	ldr	r3, [pc, #36]	@ (80155b8 <USBD_FS_ProductStrDescriptor+0x40>)
 8015594:	0018      	movs	r0, r3
 8015596:	f7ff fe49 	bl	801522c <USBD_GetString>
 801559a:	e005      	b.n	80155a8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801559c:	683a      	ldr	r2, [r7, #0]
 801559e:	4905      	ldr	r1, [pc, #20]	@ (80155b4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80155a0:	4b05      	ldr	r3, [pc, #20]	@ (80155b8 <USBD_FS_ProductStrDescriptor+0x40>)
 80155a2:	0018      	movs	r0, r3
 80155a4:	f7ff fe42 	bl	801522c <USBD_GetString>
  }
  return USBD_StrDesc;
 80155a8:	4b02      	ldr	r3, [pc, #8]	@ (80155b4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80155aa:	0018      	movs	r0, r3
 80155ac:	46bd      	mov	sp, r7
 80155ae:	b002      	add	sp, #8
 80155b0:	bd80      	pop	{r7, pc}
 80155b2:	46c0      	nop			@ (mov r8, r8)
 80155b4:	20003b9c 	.word	0x20003b9c
 80155b8:	0801a1e8 	.word	0x0801a1e8

080155bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	0002      	movs	r2, r0
 80155c4:	6039      	str	r1, [r7, #0]
 80155c6:	1dfb      	adds	r3, r7, #7
 80155c8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80155ca:	683a      	ldr	r2, [r7, #0]
 80155cc:	4904      	ldr	r1, [pc, #16]	@ (80155e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80155ce:	4b05      	ldr	r3, [pc, #20]	@ (80155e4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80155d0:	0018      	movs	r0, r3
 80155d2:	f7ff fe2b 	bl	801522c <USBD_GetString>
  return USBD_StrDesc;
 80155d6:	4b02      	ldr	r3, [pc, #8]	@ (80155e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80155d8:	0018      	movs	r0, r3
 80155da:	46bd      	mov	sp, r7
 80155dc:	b002      	add	sp, #8
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	20003b9c 	.word	0x20003b9c
 80155e4:	0801a200 	.word	0x0801a200

080155e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	0002      	movs	r2, r0
 80155f0:	6039      	str	r1, [r7, #0]
 80155f2:	1dfb      	adds	r3, r7, #7
 80155f4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	221a      	movs	r2, #26
 80155fa:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80155fc:	f000 f84c 	bl	8015698 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015600:	4b02      	ldr	r3, [pc, #8]	@ (801560c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8015602:	0018      	movs	r0, r3
 8015604:	46bd      	mov	sp, r7
 8015606:	b002      	add	sp, #8
 8015608:	bd80      	pop	{r7, pc}
 801560a:	46c0      	nop			@ (mov r8, r8)
 801560c:	200002b0 	.word	0x200002b0

08015610 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	0002      	movs	r2, r0
 8015618:	6039      	str	r1, [r7, #0]
 801561a:	1dfb      	adds	r3, r7, #7
 801561c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801561e:	1dfb      	adds	r3, r7, #7
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d106      	bne.n	8015634 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015626:	683a      	ldr	r2, [r7, #0]
 8015628:	4908      	ldr	r1, [pc, #32]	@ (801564c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801562a:	4b09      	ldr	r3, [pc, #36]	@ (8015650 <USBD_FS_ConfigStrDescriptor+0x40>)
 801562c:	0018      	movs	r0, r3
 801562e:	f7ff fdfd 	bl	801522c <USBD_GetString>
 8015632:	e005      	b.n	8015640 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015634:	683a      	ldr	r2, [r7, #0]
 8015636:	4905      	ldr	r1, [pc, #20]	@ (801564c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8015638:	4b05      	ldr	r3, [pc, #20]	@ (8015650 <USBD_FS_ConfigStrDescriptor+0x40>)
 801563a:	0018      	movs	r0, r3
 801563c:	f7ff fdf6 	bl	801522c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015640:	4b02      	ldr	r3, [pc, #8]	@ (801564c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8015642:	0018      	movs	r0, r3
 8015644:	46bd      	mov	sp, r7
 8015646:	b002      	add	sp, #8
 8015648:	bd80      	pop	{r7, pc}
 801564a:	46c0      	nop			@ (mov r8, r8)
 801564c:	20003b9c 	.word	0x20003b9c
 8015650:	0801a214 	.word	0x0801a214

08015654 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	0002      	movs	r2, r0
 801565c:	6039      	str	r1, [r7, #0]
 801565e:	1dfb      	adds	r3, r7, #7
 8015660:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015662:	1dfb      	adds	r3, r7, #7
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d106      	bne.n	8015678 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801566a:	683a      	ldr	r2, [r7, #0]
 801566c:	4908      	ldr	r1, [pc, #32]	@ (8015690 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801566e:	4b09      	ldr	r3, [pc, #36]	@ (8015694 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8015670:	0018      	movs	r0, r3
 8015672:	f7ff fddb 	bl	801522c <USBD_GetString>
 8015676:	e005      	b.n	8015684 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015678:	683a      	ldr	r2, [r7, #0]
 801567a:	4905      	ldr	r1, [pc, #20]	@ (8015690 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801567c:	4b05      	ldr	r3, [pc, #20]	@ (8015694 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801567e:	0018      	movs	r0, r3
 8015680:	f7ff fdd4 	bl	801522c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015684:	4b02      	ldr	r3, [pc, #8]	@ (8015690 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8015686:	0018      	movs	r0, r3
 8015688:	46bd      	mov	sp, r7
 801568a:	b002      	add	sp, #8
 801568c:	bd80      	pop	{r7, pc}
 801568e:	46c0      	nop			@ (mov r8, r8)
 8015690:	20003b9c 	.word	0x20003b9c
 8015694:	0801a220 	.word	0x0801a220

08015698 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b084      	sub	sp, #16
 801569c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801569e:	4b10      	ldr	r3, [pc, #64]	@ (80156e0 <Get_SerialNum+0x48>)
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80156a4:	4b0f      	ldr	r3, [pc, #60]	@ (80156e4 <Get_SerialNum+0x4c>)
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80156aa:	4b0f      	ldr	r3, [pc, #60]	@ (80156e8 <Get_SerialNum+0x50>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80156b0:	68fa      	ldr	r2, [r7, #12]
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	18d3      	adds	r3, r2, r3
 80156b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d00b      	beq.n	80156d6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80156be:	490b      	ldr	r1, [pc, #44]	@ (80156ec <Get_SerialNum+0x54>)
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	2208      	movs	r2, #8
 80156c4:	0018      	movs	r0, r3
 80156c6:	f000 f815 	bl	80156f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80156ca:	4909      	ldr	r1, [pc, #36]	@ (80156f0 <Get_SerialNum+0x58>)
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	2204      	movs	r2, #4
 80156d0:	0018      	movs	r0, r3
 80156d2:	f000 f80f 	bl	80156f4 <IntToUnicode>
  }
}
 80156d6:	46c0      	nop			@ (mov r8, r8)
 80156d8:	46bd      	mov	sp, r7
 80156da:	b004      	add	sp, #16
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	46c0      	nop			@ (mov r8, r8)
 80156e0:	1ff80050 	.word	0x1ff80050
 80156e4:	1ff80054 	.word	0x1ff80054
 80156e8:	1ff80058 	.word	0x1ff80058
 80156ec:	200002b2 	.word	0x200002b2
 80156f0:	200002c2 	.word	0x200002c2

080156f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b086      	sub	sp, #24
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	60f8      	str	r0, [r7, #12]
 80156fc:	60b9      	str	r1, [r7, #8]
 80156fe:	1dfb      	adds	r3, r7, #7
 8015700:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8015702:	2117      	movs	r1, #23
 8015704:	187b      	adds	r3, r7, r1
 8015706:	2200      	movs	r2, #0
 8015708:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801570a:	187b      	adds	r3, r7, r1
 801570c:	2200      	movs	r2, #0
 801570e:	701a      	strb	r2, [r3, #0]
 8015710:	e02f      	b.n	8015772 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	0f1b      	lsrs	r3, r3, #28
 8015716:	2b09      	cmp	r3, #9
 8015718:	d80d      	bhi.n	8015736 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	0f1b      	lsrs	r3, r3, #28
 801571e:	b2da      	uxtb	r2, r3
 8015720:	2317      	movs	r3, #23
 8015722:	18fb      	adds	r3, r7, r3
 8015724:	781b      	ldrb	r3, [r3, #0]
 8015726:	005b      	lsls	r3, r3, #1
 8015728:	0019      	movs	r1, r3
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	185b      	adds	r3, r3, r1
 801572e:	3230      	adds	r2, #48	@ 0x30
 8015730:	b2d2      	uxtb	r2, r2
 8015732:	701a      	strb	r2, [r3, #0]
 8015734:	e00c      	b.n	8015750 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	0f1b      	lsrs	r3, r3, #28
 801573a:	b2da      	uxtb	r2, r3
 801573c:	2317      	movs	r3, #23
 801573e:	18fb      	adds	r3, r7, r3
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	005b      	lsls	r3, r3, #1
 8015744:	0019      	movs	r1, r3
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	185b      	adds	r3, r3, r1
 801574a:	3237      	adds	r2, #55	@ 0x37
 801574c:	b2d2      	uxtb	r2, r2
 801574e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	011b      	lsls	r3, r3, #4
 8015754:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015756:	2117      	movs	r1, #23
 8015758:	187b      	adds	r3, r7, r1
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	005b      	lsls	r3, r3, #1
 801575e:	3301      	adds	r3, #1
 8015760:	68ba      	ldr	r2, [r7, #8]
 8015762:	18d3      	adds	r3, r2, r3
 8015764:	2200      	movs	r2, #0
 8015766:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015768:	187b      	adds	r3, r7, r1
 801576a:	781a      	ldrb	r2, [r3, #0]
 801576c:	187b      	adds	r3, r7, r1
 801576e:	3201      	adds	r2, #1
 8015770:	701a      	strb	r2, [r3, #0]
 8015772:	2317      	movs	r3, #23
 8015774:	18fa      	adds	r2, r7, r3
 8015776:	1dfb      	adds	r3, r7, #7
 8015778:	7812      	ldrb	r2, [r2, #0]
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	429a      	cmp	r2, r3
 801577e:	d3c8      	bcc.n	8015712 <IntToUnicode+0x1e>
  }
}
 8015780:	46c0      	nop			@ (mov r8, r8)
 8015782:	46c0      	nop			@ (mov r8, r8)
 8015784:	46bd      	mov	sp, r7
 8015786:	b006      	add	sp, #24
 8015788:	bd80      	pop	{r7, pc}
	...

0801578c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b082      	sub	sp, #8
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	4a0a      	ldr	r2, [pc, #40]	@ (80157c4 <HAL_PCD_MspInit+0x38>)
 801579a:	4293      	cmp	r3, r2
 801579c:	d10e      	bne.n	80157bc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801579e:	4b0a      	ldr	r3, [pc, #40]	@ (80157c8 <HAL_PCD_MspInit+0x3c>)
 80157a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80157a2:	4b09      	ldr	r3, [pc, #36]	@ (80157c8 <HAL_PCD_MspInit+0x3c>)
 80157a4:	2180      	movs	r1, #128	@ 0x80
 80157a6:	0409      	lsls	r1, r1, #16
 80157a8:	430a      	orrs	r2, r1
 80157aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80157ac:	2200      	movs	r2, #0
 80157ae:	2100      	movs	r1, #0
 80157b0:	201f      	movs	r0, #31
 80157b2:	f7f4 f889 	bl	80098c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80157b6:	201f      	movs	r0, #31
 80157b8:	f7f4 f89b 	bl	80098f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80157bc:	46c0      	nop			@ (mov r8, r8)
 80157be:	46bd      	mov	sp, r7
 80157c0:	b002      	add	sp, #8
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	40005c00 	.word	0x40005c00
 80157c8:	40021000 	.word	0x40021000

080157cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80157d4:	687a      	ldr	r2, [r7, #4]
 80157d6:	23bc      	movs	r3, #188	@ 0xbc
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	58d2      	ldr	r2, [r2, r3]
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	21ac      	movs	r1, #172	@ 0xac
 80157e0:	0089      	lsls	r1, r1, #2
 80157e2:	468c      	mov	ip, r1
 80157e4:	4463      	add	r3, ip
 80157e6:	0019      	movs	r1, r3
 80157e8:	0010      	movs	r0, r2
 80157ea:	f7fe fcb5 	bl	8014158 <USBD_LL_SetupStage>
}
 80157ee:	46c0      	nop			@ (mov r8, r8)
 80157f0:	46bd      	mov	sp, r7
 80157f2:	b002      	add	sp, #8
 80157f4:	bd80      	pop	{r7, pc}

080157f6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157f6:	b590      	push	{r4, r7, lr}
 80157f8:	b083      	sub	sp, #12
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
 80157fe:	000a      	movs	r2, r1
 8015800:	1cfb      	adds	r3, r7, #3
 8015802:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015804:	687a      	ldr	r2, [r7, #4]
 8015806:	23bc      	movs	r3, #188	@ 0xbc
 8015808:	009b      	lsls	r3, r3, #2
 801580a:	58d4      	ldr	r4, [r2, r3]
 801580c:	1cfb      	adds	r3, r7, #3
 801580e:	781a      	ldrb	r2, [r3, #0]
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	23be      	movs	r3, #190	@ 0xbe
 8015814:	0059      	lsls	r1, r3, #1
 8015816:	0013      	movs	r3, r2
 8015818:	009b      	lsls	r3, r3, #2
 801581a:	189b      	adds	r3, r3, r2
 801581c:	00db      	lsls	r3, r3, #3
 801581e:	18c3      	adds	r3, r0, r3
 8015820:	185b      	adds	r3, r3, r1
 8015822:	681a      	ldr	r2, [r3, #0]
 8015824:	1cfb      	adds	r3, r7, #3
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	0019      	movs	r1, r3
 801582a:	0020      	movs	r0, r4
 801582c:	f7fe fcf2 	bl	8014214 <USBD_LL_DataOutStage>
}
 8015830:	46c0      	nop			@ (mov r8, r8)
 8015832:	46bd      	mov	sp, r7
 8015834:	b003      	add	sp, #12
 8015836:	bd90      	pop	{r4, r7, pc}

08015838 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b082      	sub	sp, #8
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
 8015840:	000a      	movs	r2, r1
 8015842:	1cfb      	adds	r3, r7, #3
 8015844:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015846:	687a      	ldr	r2, [r7, #4]
 8015848:	23bc      	movs	r3, #188	@ 0xbc
 801584a:	009b      	lsls	r3, r3, #2
 801584c:	58d0      	ldr	r0, [r2, r3]
 801584e:	1cfb      	adds	r3, r7, #3
 8015850:	781a      	ldrb	r2, [r3, #0]
 8015852:	6879      	ldr	r1, [r7, #4]
 8015854:	0013      	movs	r3, r2
 8015856:	009b      	lsls	r3, r3, #2
 8015858:	189b      	adds	r3, r3, r2
 801585a:	00db      	lsls	r3, r3, #3
 801585c:	18cb      	adds	r3, r1, r3
 801585e:	333c      	adds	r3, #60	@ 0x3c
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	1cfb      	adds	r3, r7, #3
 8015864:	781b      	ldrb	r3, [r3, #0]
 8015866:	0019      	movs	r1, r3
 8015868:	f7fe fd56 	bl	8014318 <USBD_LL_DataInStage>
}
 801586c:	46c0      	nop			@ (mov r8, r8)
 801586e:	46bd      	mov	sp, r7
 8015870:	b002      	add	sp, #8
 8015872:	bd80      	pop	{r7, pc}

08015874 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801587c:	687a      	ldr	r2, [r7, #4]
 801587e:	23bc      	movs	r3, #188	@ 0xbc
 8015880:	009b      	lsls	r3, r3, #2
 8015882:	58d3      	ldr	r3, [r2, r3]
 8015884:	0018      	movs	r0, r3
 8015886:	f7fe fe8d 	bl	80145a4 <USBD_LL_SOF>
}
 801588a:	46c0      	nop			@ (mov r8, r8)
 801588c:	46bd      	mov	sp, r7
 801588e:	b002      	add	sp, #8
 8015890:	bd80      	pop	{r7, pc}

08015892 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015892:	b580      	push	{r7, lr}
 8015894:	b084      	sub	sp, #16
 8015896:	af00      	add	r7, sp, #0
 8015898:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801589a:	230f      	movs	r3, #15
 801589c:	18fb      	adds	r3, r7, r3
 801589e:	2201      	movs	r2, #1
 80158a0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	689b      	ldr	r3, [r3, #8]
 80158a6:	2b02      	cmp	r3, #2
 80158a8:	d001      	beq.n	80158ae <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80158aa:	f7f0 f8eb 	bl	8005a84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80158ae:	687a      	ldr	r2, [r7, #4]
 80158b0:	23bc      	movs	r3, #188	@ 0xbc
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	58d2      	ldr	r2, [r2, r3]
 80158b6:	230f      	movs	r3, #15
 80158b8:	18fb      	adds	r3, r7, r3
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	0019      	movs	r1, r3
 80158be:	0010      	movs	r0, r2
 80158c0:	f7fe fe2f 	bl	8014522 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80158c4:	687a      	ldr	r2, [r7, #4]
 80158c6:	23bc      	movs	r3, #188	@ 0xbc
 80158c8:	009b      	lsls	r3, r3, #2
 80158ca:	58d3      	ldr	r3, [r2, r3]
 80158cc:	0018      	movs	r0, r3
 80158ce:	f7fe fde0 	bl	8014492 <USBD_LL_Reset>
}
 80158d2:	46c0      	nop			@ (mov r8, r8)
 80158d4:	46bd      	mov	sp, r7
 80158d6:	b004      	add	sp, #16
 80158d8:	bd80      	pop	{r7, pc}
	...

080158dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b082      	sub	sp, #8
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80158e4:	687a      	ldr	r2, [r7, #4]
 80158e6:	23bc      	movs	r3, #188	@ 0xbc
 80158e8:	009b      	lsls	r3, r3, #2
 80158ea:	58d3      	ldr	r3, [r2, r3]
 80158ec:	0018      	movs	r0, r3
 80158ee:	f7fe fe29 	bl	8014544 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	699b      	ldr	r3, [r3, #24]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d005      	beq.n	8015906 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80158fa:	4b05      	ldr	r3, [pc, #20]	@ (8015910 <HAL_PCD_SuspendCallback+0x34>)
 80158fc:	691a      	ldr	r2, [r3, #16]
 80158fe:	4b04      	ldr	r3, [pc, #16]	@ (8015910 <HAL_PCD_SuspendCallback+0x34>)
 8015900:	2106      	movs	r1, #6
 8015902:	430a      	orrs	r2, r1
 8015904:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8015906:	46c0      	nop			@ (mov r8, r8)
 8015908:	46bd      	mov	sp, r7
 801590a:	b002      	add	sp, #8
 801590c:	bd80      	pop	{r7, pc}
 801590e:	46c0      	nop			@ (mov r8, r8)
 8015910:	e000ed00 	.word	0xe000ed00

08015914 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	699b      	ldr	r3, [r3, #24]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d007      	beq.n	8015934 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015924:	4b09      	ldr	r3, [pc, #36]	@ (801594c <HAL_PCD_ResumeCallback+0x38>)
 8015926:	691a      	ldr	r2, [r3, #16]
 8015928:	4b08      	ldr	r3, [pc, #32]	@ (801594c <HAL_PCD_ResumeCallback+0x38>)
 801592a:	2106      	movs	r1, #6
 801592c:	438a      	bics	r2, r1
 801592e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8015930:	f000 fa44 	bl	8015dbc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015934:	687a      	ldr	r2, [r7, #4]
 8015936:	23bc      	movs	r3, #188	@ 0xbc
 8015938:	009b      	lsls	r3, r3, #2
 801593a:	58d3      	ldr	r3, [r2, r3]
 801593c:	0018      	movs	r0, r3
 801593e:	f7fe fe19 	bl	8014574 <USBD_LL_Resume>
}
 8015942:	46c0      	nop			@ (mov r8, r8)
 8015944:	46bd      	mov	sp, r7
 8015946:	b002      	add	sp, #8
 8015948:	bd80      	pop	{r7, pc}
 801594a:	46c0      	nop			@ (mov r8, r8)
 801594c:	e000ed00 	.word	0xe000ed00

08015950 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8015958:	4a2d      	ldr	r2, [pc, #180]	@ (8015a10 <USBD_LL_Init+0xc0>)
 801595a:	23bc      	movs	r3, #188	@ 0xbc
 801595c:	009b      	lsls	r3, r3, #2
 801595e:	6879      	ldr	r1, [r7, #4]
 8015960:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8015962:	687a      	ldr	r2, [r7, #4]
 8015964:	23b0      	movs	r3, #176	@ 0xb0
 8015966:	009b      	lsls	r3, r3, #2
 8015968:	4929      	ldr	r1, [pc, #164]	@ (8015a10 <USBD_LL_Init+0xc0>)
 801596a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801596c:	4b28      	ldr	r3, [pc, #160]	@ (8015a10 <USBD_LL_Init+0xc0>)
 801596e:	4a29      	ldr	r2, [pc, #164]	@ (8015a14 <USBD_LL_Init+0xc4>)
 8015970:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015972:	4b27      	ldr	r3, [pc, #156]	@ (8015a10 <USBD_LL_Init+0xc0>)
 8015974:	2208      	movs	r2, #8
 8015976:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015978:	4b25      	ldr	r3, [pc, #148]	@ (8015a10 <USBD_LL_Init+0xc0>)
 801597a:	2202      	movs	r2, #2
 801597c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801597e:	4b24      	ldr	r3, [pc, #144]	@ (8015a10 <USBD_LL_Init+0xc0>)
 8015980:	2202      	movs	r2, #2
 8015982:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015984:	4b22      	ldr	r3, [pc, #136]	@ (8015a10 <USBD_LL_Init+0xc0>)
 8015986:	2200      	movs	r2, #0
 8015988:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801598a:	4b21      	ldr	r3, [pc, #132]	@ (8015a10 <USBD_LL_Init+0xc0>)
 801598c:	2200      	movs	r2, #0
 801598e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015990:	4b1f      	ldr	r3, [pc, #124]	@ (8015a10 <USBD_LL_Init+0xc0>)
 8015992:	2200      	movs	r2, #0
 8015994:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015996:	4b1e      	ldr	r3, [pc, #120]	@ (8015a10 <USBD_LL_Init+0xc0>)
 8015998:	0018      	movs	r0, r3
 801599a:	f7f7 f84f 	bl	800ca3c <HAL_PCD_Init>
 801599e:	1e03      	subs	r3, r0, #0
 80159a0:	d001      	beq.n	80159a6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80159a2:	f7f0 f86f 	bl	8005a84 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80159a6:	687a      	ldr	r2, [r7, #4]
 80159a8:	23b0      	movs	r3, #176	@ 0xb0
 80159aa:	009b      	lsls	r3, r3, #2
 80159ac:	58d0      	ldr	r0, [r2, r3]
 80159ae:	2318      	movs	r3, #24
 80159b0:	2200      	movs	r2, #0
 80159b2:	2100      	movs	r1, #0
 80159b4:	f7f8 fe10 	bl	800e5d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	23b0      	movs	r3, #176	@ 0xb0
 80159bc:	009b      	lsls	r3, r3, #2
 80159be:	58d0      	ldr	r0, [r2, r3]
 80159c0:	2358      	movs	r3, #88	@ 0x58
 80159c2:	2200      	movs	r2, #0
 80159c4:	2180      	movs	r1, #128	@ 0x80
 80159c6:	f7f8 fe07 	bl	800e5d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80159ca:	687a      	ldr	r2, [r7, #4]
 80159cc:	23b0      	movs	r3, #176	@ 0xb0
 80159ce:	009b      	lsls	r3, r3, #2
 80159d0:	58d0      	ldr	r0, [r2, r3]
 80159d2:	23c0      	movs	r3, #192	@ 0xc0
 80159d4:	2200      	movs	r2, #0
 80159d6:	2181      	movs	r1, #129	@ 0x81
 80159d8:	f7f8 fdfe 	bl	800e5d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80159dc:	687a      	ldr	r2, [r7, #4]
 80159de:	23b0      	movs	r3, #176	@ 0xb0
 80159e0:	009b      	lsls	r3, r3, #2
 80159e2:	58d0      	ldr	r0, [r2, r3]
 80159e4:	2388      	movs	r3, #136	@ 0x88
 80159e6:	005b      	lsls	r3, r3, #1
 80159e8:	2200      	movs	r2, #0
 80159ea:	2101      	movs	r1, #1
 80159ec:	f7f8 fdf4 	bl	800e5d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	23b0      	movs	r3, #176	@ 0xb0
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	58d0      	ldr	r0, [r2, r3]
 80159f8:	2380      	movs	r3, #128	@ 0x80
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	2200      	movs	r2, #0
 80159fe:	2182      	movs	r1, #130	@ 0x82
 8015a00:	f7f8 fdea 	bl	800e5d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015a04:	2300      	movs	r3, #0
}
 8015a06:	0018      	movs	r0, r3
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	b002      	add	sp, #8
 8015a0c:	bd80      	pop	{r7, pc}
 8015a0e:	46c0      	nop			@ (mov r8, r8)
 8015a10:	20003d9c 	.word	0x20003d9c
 8015a14:	40005c00 	.word	0x40005c00

08015a18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a1a:	b085      	sub	sp, #20
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a20:	210f      	movs	r1, #15
 8015a22:	187b      	adds	r3, r7, r1
 8015a24:	2200      	movs	r2, #0
 8015a26:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a28:	260e      	movs	r6, #14
 8015a2a:	19bb      	adds	r3, r7, r6
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	23b0      	movs	r3, #176	@ 0xb0
 8015a34:	009b      	lsls	r3, r3, #2
 8015a36:	58d3      	ldr	r3, [r2, r3]
 8015a38:	000d      	movs	r5, r1
 8015a3a:	187c      	adds	r4, r7, r1
 8015a3c:	0018      	movs	r0, r3
 8015a3e:	f7f7 f8fd 	bl	800cc3c <HAL_PCD_Start>
 8015a42:	0003      	movs	r3, r0
 8015a44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a46:	19bc      	adds	r4, r7, r6
 8015a48:	197b      	adds	r3, r7, r5
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	0018      	movs	r0, r3
 8015a4e:	f000 f9bc 	bl	8015dca <USBD_Get_USB_Status>
 8015a52:	0003      	movs	r3, r0
 8015a54:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015a56:	19bb      	adds	r3, r7, r6
 8015a58:	781b      	ldrb	r3, [r3, #0]
}
 8015a5a:	0018      	movs	r0, r3
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	b005      	add	sp, #20
 8015a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a64:	b085      	sub	sp, #20
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	6078      	str	r0, [r7, #4]
 8015a6a:	000c      	movs	r4, r1
 8015a6c:	0010      	movs	r0, r2
 8015a6e:	0019      	movs	r1, r3
 8015a70:	1cfb      	adds	r3, r7, #3
 8015a72:	1c22      	adds	r2, r4, #0
 8015a74:	701a      	strb	r2, [r3, #0]
 8015a76:	1cbb      	adds	r3, r7, #2
 8015a78:	1c02      	adds	r2, r0, #0
 8015a7a:	701a      	strb	r2, [r3, #0]
 8015a7c:	003b      	movs	r3, r7
 8015a7e:	1c0a      	adds	r2, r1, #0
 8015a80:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a82:	260f      	movs	r6, #15
 8015a84:	19bb      	adds	r3, r7, r6
 8015a86:	2200      	movs	r2, #0
 8015a88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a8a:	250e      	movs	r5, #14
 8015a8c:	197b      	adds	r3, r7, r5
 8015a8e:	2200      	movs	r2, #0
 8015a90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015a92:	687a      	ldr	r2, [r7, #4]
 8015a94:	23b0      	movs	r3, #176	@ 0xb0
 8015a96:	009b      	lsls	r3, r3, #2
 8015a98:	58d0      	ldr	r0, [r2, r3]
 8015a9a:	19bc      	adds	r4, r7, r6
 8015a9c:	1cbb      	adds	r3, r7, #2
 8015a9e:	781d      	ldrb	r5, [r3, #0]
 8015aa0:	003b      	movs	r3, r7
 8015aa2:	881a      	ldrh	r2, [r3, #0]
 8015aa4:	1cfb      	adds	r3, r7, #3
 8015aa6:	7819      	ldrb	r1, [r3, #0]
 8015aa8:	002b      	movs	r3, r5
 8015aaa:	f7f7 fa5c 	bl	800cf66 <HAL_PCD_EP_Open>
 8015aae:	0003      	movs	r3, r0
 8015ab0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ab2:	250e      	movs	r5, #14
 8015ab4:	197c      	adds	r4, r7, r5
 8015ab6:	19bb      	adds	r3, r7, r6
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	0018      	movs	r0, r3
 8015abc:	f000 f985 	bl	8015dca <USBD_Get_USB_Status>
 8015ac0:	0003      	movs	r3, r0
 8015ac2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015ac4:	197b      	adds	r3, r7, r5
 8015ac6:	781b      	ldrb	r3, [r3, #0]
}
 8015ac8:	0018      	movs	r0, r3
 8015aca:	46bd      	mov	sp, r7
 8015acc:	b005      	add	sp, #20
 8015ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ad0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ad2:	b085      	sub	sp, #20
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
 8015ad8:	000a      	movs	r2, r1
 8015ada:	1cfb      	adds	r3, r7, #3
 8015adc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ade:	210f      	movs	r1, #15
 8015ae0:	187b      	adds	r3, r7, r1
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ae6:	260e      	movs	r6, #14
 8015ae8:	19bb      	adds	r3, r7, r6
 8015aea:	2200      	movs	r2, #0
 8015aec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015aee:	687a      	ldr	r2, [r7, #4]
 8015af0:	23b0      	movs	r3, #176	@ 0xb0
 8015af2:	009b      	lsls	r3, r3, #2
 8015af4:	58d2      	ldr	r2, [r2, r3]
 8015af6:	000d      	movs	r5, r1
 8015af8:	187c      	adds	r4, r7, r1
 8015afa:	1cfb      	adds	r3, r7, #3
 8015afc:	781b      	ldrb	r3, [r3, #0]
 8015afe:	0019      	movs	r1, r3
 8015b00:	0010      	movs	r0, r2
 8015b02:	f7f7 fa9f 	bl	800d044 <HAL_PCD_EP_Close>
 8015b06:	0003      	movs	r3, r0
 8015b08:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b0a:	19bc      	adds	r4, r7, r6
 8015b0c:	197b      	adds	r3, r7, r5
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	0018      	movs	r0, r3
 8015b12:	f000 f95a 	bl	8015dca <USBD_Get_USB_Status>
 8015b16:	0003      	movs	r3, r0
 8015b18:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b1a:	19bb      	adds	r3, r7, r6
 8015b1c:	781b      	ldrb	r3, [r3, #0]
}
 8015b1e:	0018      	movs	r0, r3
 8015b20:	46bd      	mov	sp, r7
 8015b22:	b005      	add	sp, #20
 8015b24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b26 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b28:	b085      	sub	sp, #20
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
 8015b2e:	000a      	movs	r2, r1
 8015b30:	1cfb      	adds	r3, r7, #3
 8015b32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b34:	210f      	movs	r1, #15
 8015b36:	187b      	adds	r3, r7, r1
 8015b38:	2200      	movs	r2, #0
 8015b3a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b3c:	260e      	movs	r6, #14
 8015b3e:	19bb      	adds	r3, r7, r6
 8015b40:	2200      	movs	r2, #0
 8015b42:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b44:	687a      	ldr	r2, [r7, #4]
 8015b46:	23b0      	movs	r3, #176	@ 0xb0
 8015b48:	009b      	lsls	r3, r3, #2
 8015b4a:	58d2      	ldr	r2, [r2, r3]
 8015b4c:	000d      	movs	r5, r1
 8015b4e:	187c      	adds	r4, r7, r1
 8015b50:	1cfb      	adds	r3, r7, #3
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	0019      	movs	r1, r3
 8015b56:	0010      	movs	r0, r2
 8015b58:	f7f7 fb51 	bl	800d1fe <HAL_PCD_EP_SetStall>
 8015b5c:	0003      	movs	r3, r0
 8015b5e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b60:	19bc      	adds	r4, r7, r6
 8015b62:	197b      	adds	r3, r7, r5
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	0018      	movs	r0, r3
 8015b68:	f000 f92f 	bl	8015dca <USBD_Get_USB_Status>
 8015b6c:	0003      	movs	r3, r0
 8015b6e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b70:	19bb      	adds	r3, r7, r6
 8015b72:	781b      	ldrb	r3, [r3, #0]
}
 8015b74:	0018      	movs	r0, r3
 8015b76:	46bd      	mov	sp, r7
 8015b78:	b005      	add	sp, #20
 8015b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b7c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b7e:	b085      	sub	sp, #20
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
 8015b84:	000a      	movs	r2, r1
 8015b86:	1cfb      	adds	r3, r7, #3
 8015b88:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b8a:	210f      	movs	r1, #15
 8015b8c:	187b      	adds	r3, r7, r1
 8015b8e:	2200      	movs	r2, #0
 8015b90:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b92:	260e      	movs	r6, #14
 8015b94:	19bb      	adds	r3, r7, r6
 8015b96:	2200      	movs	r2, #0
 8015b98:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	23b0      	movs	r3, #176	@ 0xb0
 8015b9e:	009b      	lsls	r3, r3, #2
 8015ba0:	58d2      	ldr	r2, [r2, r3]
 8015ba2:	000d      	movs	r5, r1
 8015ba4:	187c      	adds	r4, r7, r1
 8015ba6:	1cfb      	adds	r3, r7, #3
 8015ba8:	781b      	ldrb	r3, [r3, #0]
 8015baa:	0019      	movs	r1, r3
 8015bac:	0010      	movs	r0, r2
 8015bae:	f7f7 fb82 	bl	800d2b6 <HAL_PCD_EP_ClrStall>
 8015bb2:	0003      	movs	r3, r0
 8015bb4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bb6:	19bc      	adds	r4, r7, r6
 8015bb8:	197b      	adds	r3, r7, r5
 8015bba:	781b      	ldrb	r3, [r3, #0]
 8015bbc:	0018      	movs	r0, r3
 8015bbe:	f000 f904 	bl	8015dca <USBD_Get_USB_Status>
 8015bc2:	0003      	movs	r3, r0
 8015bc4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015bc6:	19bb      	adds	r3, r7, r6
 8015bc8:	781b      	ldrb	r3, [r3, #0]
}
 8015bca:	0018      	movs	r0, r3
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	b005      	add	sp, #20
 8015bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015bd2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bd2:	b580      	push	{r7, lr}
 8015bd4:	b084      	sub	sp, #16
 8015bd6:	af00      	add	r7, sp, #0
 8015bd8:	6078      	str	r0, [r7, #4]
 8015bda:	000a      	movs	r2, r1
 8015bdc:	1cfb      	adds	r3, r7, #3
 8015bde:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015be0:	687a      	ldr	r2, [r7, #4]
 8015be2:	23b0      	movs	r3, #176	@ 0xb0
 8015be4:	009b      	lsls	r3, r3, #2
 8015be6:	58d3      	ldr	r3, [r2, r3]
 8015be8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015bea:	1cfb      	adds	r3, r7, #3
 8015bec:	781b      	ldrb	r3, [r3, #0]
 8015bee:	b25b      	sxtb	r3, r3
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	da0d      	bge.n	8015c10 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015bf4:	1cfb      	adds	r3, r7, #3
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	227f      	movs	r2, #127	@ 0x7f
 8015bfa:	4013      	ands	r3, r2
 8015bfc:	68f9      	ldr	r1, [r7, #12]
 8015bfe:	1c5a      	adds	r2, r3, #1
 8015c00:	0013      	movs	r3, r2
 8015c02:	009b      	lsls	r3, r3, #2
 8015c04:	189b      	adds	r3, r3, r2
 8015c06:	00db      	lsls	r3, r3, #3
 8015c08:	18cb      	adds	r3, r1, r3
 8015c0a:	3302      	adds	r3, #2
 8015c0c:	781b      	ldrb	r3, [r3, #0]
 8015c0e:	e00d      	b.n	8015c2c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015c10:	1cfb      	adds	r3, r7, #3
 8015c12:	781b      	ldrb	r3, [r3, #0]
 8015c14:	227f      	movs	r2, #127	@ 0x7f
 8015c16:	401a      	ands	r2, r3
 8015c18:	68f8      	ldr	r0, [r7, #12]
 8015c1a:	23b5      	movs	r3, #181	@ 0xb5
 8015c1c:	0059      	lsls	r1, r3, #1
 8015c1e:	0013      	movs	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	189b      	adds	r3, r3, r2
 8015c24:	00db      	lsls	r3, r3, #3
 8015c26:	18c3      	adds	r3, r0, r3
 8015c28:	185b      	adds	r3, r3, r1
 8015c2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015c2c:	0018      	movs	r0, r3
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	b004      	add	sp, #16
 8015c32:	bd80      	pop	{r7, pc}

08015c34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c36:	b085      	sub	sp, #20
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	000a      	movs	r2, r1
 8015c3e:	1cfb      	adds	r3, r7, #3
 8015c40:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c42:	210f      	movs	r1, #15
 8015c44:	187b      	adds	r3, r7, r1
 8015c46:	2200      	movs	r2, #0
 8015c48:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c4a:	260e      	movs	r6, #14
 8015c4c:	19bb      	adds	r3, r7, r6
 8015c4e:	2200      	movs	r2, #0
 8015c50:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015c52:	687a      	ldr	r2, [r7, #4]
 8015c54:	23b0      	movs	r3, #176	@ 0xb0
 8015c56:	009b      	lsls	r3, r3, #2
 8015c58:	58d2      	ldr	r2, [r2, r3]
 8015c5a:	000d      	movs	r5, r1
 8015c5c:	187c      	adds	r4, r7, r1
 8015c5e:	1cfb      	adds	r3, r7, #3
 8015c60:	781b      	ldrb	r3, [r3, #0]
 8015c62:	0019      	movs	r1, r3
 8015c64:	0010      	movs	r0, r2
 8015c66:	f7f7 f953 	bl	800cf10 <HAL_PCD_SetAddress>
 8015c6a:	0003      	movs	r3, r0
 8015c6c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c6e:	19bc      	adds	r4, r7, r6
 8015c70:	197b      	adds	r3, r7, r5
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	0018      	movs	r0, r3
 8015c76:	f000 f8a8 	bl	8015dca <USBD_Get_USB_Status>
 8015c7a:	0003      	movs	r3, r0
 8015c7c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015c7e:	19bb      	adds	r3, r7, r6
 8015c80:	781b      	ldrb	r3, [r3, #0]
}
 8015c82:	0018      	movs	r0, r3
 8015c84:	46bd      	mov	sp, r7
 8015c86:	b005      	add	sp, #20
 8015c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c8c:	b087      	sub	sp, #28
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	60f8      	str	r0, [r7, #12]
 8015c92:	0008      	movs	r0, r1
 8015c94:	607a      	str	r2, [r7, #4]
 8015c96:	0019      	movs	r1, r3
 8015c98:	230b      	movs	r3, #11
 8015c9a:	18fb      	adds	r3, r7, r3
 8015c9c:	1c02      	adds	r2, r0, #0
 8015c9e:	701a      	strb	r2, [r3, #0]
 8015ca0:	2408      	movs	r4, #8
 8015ca2:	193b      	adds	r3, r7, r4
 8015ca4:	1c0a      	adds	r2, r1, #0
 8015ca6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ca8:	2117      	movs	r1, #23
 8015caa:	187b      	adds	r3, r7, r1
 8015cac:	2200      	movs	r2, #0
 8015cae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cb0:	2516      	movs	r5, #22
 8015cb2:	197b      	adds	r3, r7, r5
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015cb8:	68fa      	ldr	r2, [r7, #12]
 8015cba:	23b0      	movs	r3, #176	@ 0xb0
 8015cbc:	009b      	lsls	r3, r3, #2
 8015cbe:	58d0      	ldr	r0, [r2, r3]
 8015cc0:	193b      	adds	r3, r7, r4
 8015cc2:	881d      	ldrh	r5, [r3, #0]
 8015cc4:	000e      	movs	r6, r1
 8015cc6:	187c      	adds	r4, r7, r1
 8015cc8:	687a      	ldr	r2, [r7, #4]
 8015cca:	230b      	movs	r3, #11
 8015ccc:	18fb      	adds	r3, r7, r3
 8015cce:	7819      	ldrb	r1, [r3, #0]
 8015cd0:	002b      	movs	r3, r5
 8015cd2:	f7f7 fa58 	bl	800d186 <HAL_PCD_EP_Transmit>
 8015cd6:	0003      	movs	r3, r0
 8015cd8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cda:	2516      	movs	r5, #22
 8015cdc:	197c      	adds	r4, r7, r5
 8015cde:	19bb      	adds	r3, r7, r6
 8015ce0:	781b      	ldrb	r3, [r3, #0]
 8015ce2:	0018      	movs	r0, r3
 8015ce4:	f000 f871 	bl	8015dca <USBD_Get_USB_Status>
 8015ce8:	0003      	movs	r3, r0
 8015cea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015cec:	197b      	adds	r3, r7, r5
 8015cee:	781b      	ldrb	r3, [r3, #0]
}
 8015cf0:	0018      	movs	r0, r3
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	b007      	add	sp, #28
 8015cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015cf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cfa:	b087      	sub	sp, #28
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	60f8      	str	r0, [r7, #12]
 8015d00:	0008      	movs	r0, r1
 8015d02:	607a      	str	r2, [r7, #4]
 8015d04:	0019      	movs	r1, r3
 8015d06:	230b      	movs	r3, #11
 8015d08:	18fb      	adds	r3, r7, r3
 8015d0a:	1c02      	adds	r2, r0, #0
 8015d0c:	701a      	strb	r2, [r3, #0]
 8015d0e:	2408      	movs	r4, #8
 8015d10:	193b      	adds	r3, r7, r4
 8015d12:	1c0a      	adds	r2, r1, #0
 8015d14:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d16:	2117      	movs	r1, #23
 8015d18:	187b      	adds	r3, r7, r1
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d1e:	2516      	movs	r5, #22
 8015d20:	197b      	adds	r3, r7, r5
 8015d22:	2200      	movs	r2, #0
 8015d24:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015d26:	68fa      	ldr	r2, [r7, #12]
 8015d28:	23b0      	movs	r3, #176	@ 0xb0
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	58d0      	ldr	r0, [r2, r3]
 8015d2e:	193b      	adds	r3, r7, r4
 8015d30:	881d      	ldrh	r5, [r3, #0]
 8015d32:	000e      	movs	r6, r1
 8015d34:	187c      	adds	r4, r7, r1
 8015d36:	687a      	ldr	r2, [r7, #4]
 8015d38:	230b      	movs	r3, #11
 8015d3a:	18fb      	adds	r3, r7, r3
 8015d3c:	7819      	ldrb	r1, [r3, #0]
 8015d3e:	002b      	movs	r3, r5
 8015d40:	f7f7 f9d1 	bl	800d0e6 <HAL_PCD_EP_Receive>
 8015d44:	0003      	movs	r3, r0
 8015d46:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d48:	2516      	movs	r5, #22
 8015d4a:	197c      	adds	r4, r7, r5
 8015d4c:	19bb      	adds	r3, r7, r6
 8015d4e:	781b      	ldrb	r3, [r3, #0]
 8015d50:	0018      	movs	r0, r3
 8015d52:	f000 f83a 	bl	8015dca <USBD_Get_USB_Status>
 8015d56:	0003      	movs	r3, r0
 8015d58:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015d5a:	197b      	adds	r3, r7, r5
 8015d5c:	781b      	ldrb	r3, [r3, #0]
}
 8015d5e:	0018      	movs	r0, r3
 8015d60:	46bd      	mov	sp, r7
 8015d62:	b007      	add	sp, #28
 8015d64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d66:	b580      	push	{r7, lr}
 8015d68:	b082      	sub	sp, #8
 8015d6a:	af00      	add	r7, sp, #0
 8015d6c:	6078      	str	r0, [r7, #4]
 8015d6e:	000a      	movs	r2, r1
 8015d70:	1cfb      	adds	r3, r7, #3
 8015d72:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	23b0      	movs	r3, #176	@ 0xb0
 8015d78:	009b      	lsls	r3, r3, #2
 8015d7a:	58d2      	ldr	r2, [r2, r3]
 8015d7c:	1cfb      	adds	r3, r7, #3
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	0019      	movs	r1, r3
 8015d82:	0010      	movs	r0, r2
 8015d84:	f7f7 f9e6 	bl	800d154 <HAL_PCD_EP_GetRxCount>
 8015d88:	0003      	movs	r3, r0
}
 8015d8a:	0018      	movs	r0, r3
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	b002      	add	sp, #8
 8015d90:	bd80      	pop	{r7, pc}
	...

08015d94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015d9c:	4b02      	ldr	r3, [pc, #8]	@ (8015da8 <USBD_static_malloc+0x14>)
}
 8015d9e:	0018      	movs	r0, r3
 8015da0:	46bd      	mov	sp, r7
 8015da2:	b002      	add	sp, #8
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	46c0      	nop			@ (mov r8, r8)
 8015da8:	20004090 	.word	0x20004090

08015dac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]

}
 8015db4:	46c0      	nop			@ (mov r8, r8)
 8015db6:	46bd      	mov	sp, r7
 8015db8:	b002      	add	sp, #8
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015dc0:	f7ef fddc 	bl	800597c <SystemClock_Config>
}
 8015dc4:	46c0      	nop			@ (mov r8, r8)
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}

08015dca <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015dca:	b580      	push	{r7, lr}
 8015dcc:	b084      	sub	sp, #16
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	0002      	movs	r2, r0
 8015dd2:	1dfb      	adds	r3, r7, #7
 8015dd4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dd6:	230f      	movs	r3, #15
 8015dd8:	18fb      	adds	r3, r7, r3
 8015dda:	2200      	movs	r2, #0
 8015ddc:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8015dde:	1dfb      	adds	r3, r7, #7
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	2b03      	cmp	r3, #3
 8015de4:	d017      	beq.n	8015e16 <USBD_Get_USB_Status+0x4c>
 8015de6:	dc1b      	bgt.n	8015e20 <USBD_Get_USB_Status+0x56>
 8015de8:	2b02      	cmp	r3, #2
 8015dea:	d00f      	beq.n	8015e0c <USBD_Get_USB_Status+0x42>
 8015dec:	dc18      	bgt.n	8015e20 <USBD_Get_USB_Status+0x56>
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d002      	beq.n	8015df8 <USBD_Get_USB_Status+0x2e>
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	d005      	beq.n	8015e02 <USBD_Get_USB_Status+0x38>
 8015df6:	e013      	b.n	8015e20 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015df8:	230f      	movs	r3, #15
 8015dfa:	18fb      	adds	r3, r7, r3
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	701a      	strb	r2, [r3, #0]
    break;
 8015e00:	e013      	b.n	8015e2a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015e02:	230f      	movs	r3, #15
 8015e04:	18fb      	adds	r3, r7, r3
 8015e06:	2202      	movs	r2, #2
 8015e08:	701a      	strb	r2, [r3, #0]
    break;
 8015e0a:	e00e      	b.n	8015e2a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015e0c:	230f      	movs	r3, #15
 8015e0e:	18fb      	adds	r3, r7, r3
 8015e10:	2201      	movs	r2, #1
 8015e12:	701a      	strb	r2, [r3, #0]
    break;
 8015e14:	e009      	b.n	8015e2a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015e16:	230f      	movs	r3, #15
 8015e18:	18fb      	adds	r3, r7, r3
 8015e1a:	2202      	movs	r2, #2
 8015e1c:	701a      	strb	r2, [r3, #0]
    break;
 8015e1e:	e004      	b.n	8015e2a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8015e20:	230f      	movs	r3, #15
 8015e22:	18fb      	adds	r3, r7, r3
 8015e24:	2202      	movs	r2, #2
 8015e26:	701a      	strb	r2, [r3, #0]
    break;
 8015e28:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8015e2a:	230f      	movs	r3, #15
 8015e2c:	18fb      	adds	r3, r7, r3
 8015e2e:	781b      	ldrb	r3, [r3, #0]
}
 8015e30:	0018      	movs	r0, r3
 8015e32:	46bd      	mov	sp, r7
 8015e34:	b004      	add	sp, #16
 8015e36:	bd80      	pop	{r7, pc}

08015e38 <__cvt>:
 8015e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e3a:	001f      	movs	r7, r3
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	0016      	movs	r6, r2
 8015e40:	b08b      	sub	sp, #44	@ 0x2c
 8015e42:	429f      	cmp	r7, r3
 8015e44:	da04      	bge.n	8015e50 <__cvt+0x18>
 8015e46:	2180      	movs	r1, #128	@ 0x80
 8015e48:	0609      	lsls	r1, r1, #24
 8015e4a:	187b      	adds	r3, r7, r1
 8015e4c:	001f      	movs	r7, r3
 8015e4e:	232d      	movs	r3, #45	@ 0x2d
 8015e50:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015e52:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8015e54:	7013      	strb	r3, [r2, #0]
 8015e56:	2320      	movs	r3, #32
 8015e58:	2203      	movs	r2, #3
 8015e5a:	439d      	bics	r5, r3
 8015e5c:	2d46      	cmp	r5, #70	@ 0x46
 8015e5e:	d007      	beq.n	8015e70 <__cvt+0x38>
 8015e60:	002b      	movs	r3, r5
 8015e62:	3b45      	subs	r3, #69	@ 0x45
 8015e64:	4259      	negs	r1, r3
 8015e66:	414b      	adcs	r3, r1
 8015e68:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8015e6a:	3a01      	subs	r2, #1
 8015e6c:	18cb      	adds	r3, r1, r3
 8015e6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015e70:	ab09      	add	r3, sp, #36	@ 0x24
 8015e72:	9304      	str	r3, [sp, #16]
 8015e74:	ab08      	add	r3, sp, #32
 8015e76:	9303      	str	r3, [sp, #12]
 8015e78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015e7a:	9200      	str	r2, [sp, #0]
 8015e7c:	9302      	str	r3, [sp, #8]
 8015e7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015e80:	0032      	movs	r2, r6
 8015e82:	9301      	str	r3, [sp, #4]
 8015e84:	003b      	movs	r3, r7
 8015e86:	f000 ff05 	bl	8016c94 <_dtoa_r>
 8015e8a:	0004      	movs	r4, r0
 8015e8c:	2d47      	cmp	r5, #71	@ 0x47
 8015e8e:	d11b      	bne.n	8015ec8 <__cvt+0x90>
 8015e90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015e92:	07db      	lsls	r3, r3, #31
 8015e94:	d511      	bpl.n	8015eba <__cvt+0x82>
 8015e96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015e98:	18c3      	adds	r3, r0, r3
 8015e9a:	9307      	str	r3, [sp, #28]
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	0030      	movs	r0, r6
 8015ea2:	0039      	movs	r1, r7
 8015ea4:	f7ea fad2 	bl	800044c <__aeabi_dcmpeq>
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	d001      	beq.n	8015eb0 <__cvt+0x78>
 8015eac:	9b07      	ldr	r3, [sp, #28]
 8015eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8015eb0:	2230      	movs	r2, #48	@ 0x30
 8015eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015eb4:	9907      	ldr	r1, [sp, #28]
 8015eb6:	428b      	cmp	r3, r1
 8015eb8:	d320      	bcc.n	8015efc <__cvt+0xc4>
 8015eba:	0020      	movs	r0, r4
 8015ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ebe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015ec0:	1b1b      	subs	r3, r3, r4
 8015ec2:	6013      	str	r3, [r2, #0]
 8015ec4:	b00b      	add	sp, #44	@ 0x2c
 8015ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ec8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015eca:	18c3      	adds	r3, r0, r3
 8015ecc:	9307      	str	r3, [sp, #28]
 8015ece:	2d46      	cmp	r5, #70	@ 0x46
 8015ed0:	d1e4      	bne.n	8015e9c <__cvt+0x64>
 8015ed2:	7803      	ldrb	r3, [r0, #0]
 8015ed4:	2b30      	cmp	r3, #48	@ 0x30
 8015ed6:	d10c      	bne.n	8015ef2 <__cvt+0xba>
 8015ed8:	2200      	movs	r2, #0
 8015eda:	2300      	movs	r3, #0
 8015edc:	0030      	movs	r0, r6
 8015ede:	0039      	movs	r1, r7
 8015ee0:	f7ea fab4 	bl	800044c <__aeabi_dcmpeq>
 8015ee4:	2800      	cmp	r0, #0
 8015ee6:	d104      	bne.n	8015ef2 <__cvt+0xba>
 8015ee8:	2301      	movs	r3, #1
 8015eea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015eec:	1a9b      	subs	r3, r3, r2
 8015eee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015ef0:	6013      	str	r3, [r2, #0]
 8015ef2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015ef4:	9a07      	ldr	r2, [sp, #28]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	18d3      	adds	r3, r2, r3
 8015efa:	e7ce      	b.n	8015e9a <__cvt+0x62>
 8015efc:	1c59      	adds	r1, r3, #1
 8015efe:	9109      	str	r1, [sp, #36]	@ 0x24
 8015f00:	701a      	strb	r2, [r3, #0]
 8015f02:	e7d6      	b.n	8015eb2 <__cvt+0x7a>

08015f04 <__exponent>:
 8015f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f06:	232b      	movs	r3, #43	@ 0x2b
 8015f08:	0005      	movs	r5, r0
 8015f0a:	000c      	movs	r4, r1
 8015f0c:	b085      	sub	sp, #20
 8015f0e:	7002      	strb	r2, [r0, #0]
 8015f10:	2900      	cmp	r1, #0
 8015f12:	da01      	bge.n	8015f18 <__exponent+0x14>
 8015f14:	424c      	negs	r4, r1
 8015f16:	3302      	adds	r3, #2
 8015f18:	706b      	strb	r3, [r5, #1]
 8015f1a:	2c09      	cmp	r4, #9
 8015f1c:	dd2c      	ble.n	8015f78 <__exponent+0x74>
 8015f1e:	ab02      	add	r3, sp, #8
 8015f20:	1dde      	adds	r6, r3, #7
 8015f22:	0020      	movs	r0, r4
 8015f24:	210a      	movs	r1, #10
 8015f26:	f7ea fa7b 	bl	8000420 <__aeabi_idivmod>
 8015f2a:	0037      	movs	r7, r6
 8015f2c:	3130      	adds	r1, #48	@ 0x30
 8015f2e:	3e01      	subs	r6, #1
 8015f30:	0020      	movs	r0, r4
 8015f32:	7031      	strb	r1, [r6, #0]
 8015f34:	210a      	movs	r1, #10
 8015f36:	9401      	str	r4, [sp, #4]
 8015f38:	f7ea f98c 	bl	8000254 <__divsi3>
 8015f3c:	9b01      	ldr	r3, [sp, #4]
 8015f3e:	0004      	movs	r4, r0
 8015f40:	2b63      	cmp	r3, #99	@ 0x63
 8015f42:	dcee      	bgt.n	8015f22 <__exponent+0x1e>
 8015f44:	1eba      	subs	r2, r7, #2
 8015f46:	1ca8      	adds	r0, r5, #2
 8015f48:	0001      	movs	r1, r0
 8015f4a:	0013      	movs	r3, r2
 8015f4c:	3430      	adds	r4, #48	@ 0x30
 8015f4e:	7014      	strb	r4, [r2, #0]
 8015f50:	ac02      	add	r4, sp, #8
 8015f52:	3407      	adds	r4, #7
 8015f54:	429c      	cmp	r4, r3
 8015f56:	d80a      	bhi.n	8015f6e <__exponent+0x6a>
 8015f58:	2300      	movs	r3, #0
 8015f5a:	42a2      	cmp	r2, r4
 8015f5c:	d803      	bhi.n	8015f66 <__exponent+0x62>
 8015f5e:	3309      	adds	r3, #9
 8015f60:	aa02      	add	r2, sp, #8
 8015f62:	189b      	adds	r3, r3, r2
 8015f64:	1bdb      	subs	r3, r3, r7
 8015f66:	18c0      	adds	r0, r0, r3
 8015f68:	1b40      	subs	r0, r0, r5
 8015f6a:	b005      	add	sp, #20
 8015f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f6e:	781c      	ldrb	r4, [r3, #0]
 8015f70:	3301      	adds	r3, #1
 8015f72:	700c      	strb	r4, [r1, #0]
 8015f74:	3101      	adds	r1, #1
 8015f76:	e7eb      	b.n	8015f50 <__exponent+0x4c>
 8015f78:	2330      	movs	r3, #48	@ 0x30
 8015f7a:	18e4      	adds	r4, r4, r3
 8015f7c:	70ab      	strb	r3, [r5, #2]
 8015f7e:	1d28      	adds	r0, r5, #4
 8015f80:	70ec      	strb	r4, [r5, #3]
 8015f82:	e7f1      	b.n	8015f68 <__exponent+0x64>

08015f84 <_printf_float>:
 8015f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f86:	b097      	sub	sp, #92	@ 0x5c
 8015f88:	000d      	movs	r5, r1
 8015f8a:	920a      	str	r2, [sp, #40]	@ 0x28
 8015f8c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8015f8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f90:	9009      	str	r0, [sp, #36]	@ 0x24
 8015f92:	f000 fd5d 	bl	8016a50 <_localeconv_r>
 8015f96:	6803      	ldr	r3, [r0, #0]
 8015f98:	0018      	movs	r0, r3
 8015f9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8015f9c:	f7ea f8b4 	bl	8000108 <strlen>
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015fa4:	9314      	str	r3, [sp, #80]	@ 0x50
 8015fa6:	7e2b      	ldrb	r3, [r5, #24]
 8015fa8:	2207      	movs	r2, #7
 8015faa:	930c      	str	r3, [sp, #48]	@ 0x30
 8015fac:	682b      	ldr	r3, [r5, #0]
 8015fae:	930e      	str	r3, [sp, #56]	@ 0x38
 8015fb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015fb2:	6823      	ldr	r3, [r4, #0]
 8015fb4:	05c9      	lsls	r1, r1, #23
 8015fb6:	d545      	bpl.n	8016044 <_printf_float+0xc0>
 8015fb8:	189b      	adds	r3, r3, r2
 8015fba:	4393      	bics	r3, r2
 8015fbc:	001a      	movs	r2, r3
 8015fbe:	3208      	adds	r2, #8
 8015fc0:	6022      	str	r2, [r4, #0]
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	681e      	ldr	r6, [r3, #0]
 8015fc6:	685f      	ldr	r7, [r3, #4]
 8015fc8:	007b      	lsls	r3, r7, #1
 8015fca:	085b      	lsrs	r3, r3, #1
 8015fcc:	9311      	str	r3, [sp, #68]	@ 0x44
 8015fce:	9610      	str	r6, [sp, #64]	@ 0x40
 8015fd0:	64ae      	str	r6, [r5, #72]	@ 0x48
 8015fd2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8015fd4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015fd6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015fd8:	4ba7      	ldr	r3, [pc, #668]	@ (8016278 <_printf_float+0x2f4>)
 8015fda:	4252      	negs	r2, r2
 8015fdc:	f7ed f910 	bl	8003200 <__aeabi_dcmpun>
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	d131      	bne.n	8016048 <_printf_float+0xc4>
 8015fe4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015fe6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015fe8:	2201      	movs	r2, #1
 8015fea:	4ba3      	ldr	r3, [pc, #652]	@ (8016278 <_printf_float+0x2f4>)
 8015fec:	4252      	negs	r2, r2
 8015fee:	f7ea fa3d 	bl	800046c <__aeabi_dcmple>
 8015ff2:	2800      	cmp	r0, #0
 8015ff4:	d128      	bne.n	8016048 <_printf_float+0xc4>
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	0030      	movs	r0, r6
 8015ffc:	0039      	movs	r1, r7
 8015ffe:	f7ea fa2b 	bl	8000458 <__aeabi_dcmplt>
 8016002:	2800      	cmp	r0, #0
 8016004:	d003      	beq.n	801600e <_printf_float+0x8a>
 8016006:	002b      	movs	r3, r5
 8016008:	222d      	movs	r2, #45	@ 0x2d
 801600a:	3343      	adds	r3, #67	@ 0x43
 801600c:	701a      	strb	r2, [r3, #0]
 801600e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016010:	4f9a      	ldr	r7, [pc, #616]	@ (801627c <_printf_float+0x2f8>)
 8016012:	2b47      	cmp	r3, #71	@ 0x47
 8016014:	d900      	bls.n	8016018 <_printf_float+0x94>
 8016016:	4f9a      	ldr	r7, [pc, #616]	@ (8016280 <_printf_float+0x2fc>)
 8016018:	2303      	movs	r3, #3
 801601a:	2400      	movs	r4, #0
 801601c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801601e:	612b      	str	r3, [r5, #16]
 8016020:	3301      	adds	r3, #1
 8016022:	439a      	bics	r2, r3
 8016024:	602a      	str	r2, [r5, #0]
 8016026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016028:	0029      	movs	r1, r5
 801602a:	9300      	str	r3, [sp, #0]
 801602c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801602e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016030:	aa15      	add	r2, sp, #84	@ 0x54
 8016032:	f000 f9e5 	bl	8016400 <_printf_common>
 8016036:	3001      	adds	r0, #1
 8016038:	d000      	beq.n	801603c <_printf_float+0xb8>
 801603a:	e09f      	b.n	801617c <_printf_float+0x1f8>
 801603c:	2001      	movs	r0, #1
 801603e:	4240      	negs	r0, r0
 8016040:	b017      	add	sp, #92	@ 0x5c
 8016042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016044:	3307      	adds	r3, #7
 8016046:	e7b8      	b.n	8015fba <_printf_float+0x36>
 8016048:	0032      	movs	r2, r6
 801604a:	003b      	movs	r3, r7
 801604c:	0030      	movs	r0, r6
 801604e:	0039      	movs	r1, r7
 8016050:	f7ed f8d6 	bl	8003200 <__aeabi_dcmpun>
 8016054:	2800      	cmp	r0, #0
 8016056:	d00b      	beq.n	8016070 <_printf_float+0xec>
 8016058:	2f00      	cmp	r7, #0
 801605a:	da03      	bge.n	8016064 <_printf_float+0xe0>
 801605c:	002b      	movs	r3, r5
 801605e:	222d      	movs	r2, #45	@ 0x2d
 8016060:	3343      	adds	r3, #67	@ 0x43
 8016062:	701a      	strb	r2, [r3, #0]
 8016064:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016066:	4f87      	ldr	r7, [pc, #540]	@ (8016284 <_printf_float+0x300>)
 8016068:	2b47      	cmp	r3, #71	@ 0x47
 801606a:	d9d5      	bls.n	8016018 <_printf_float+0x94>
 801606c:	4f86      	ldr	r7, [pc, #536]	@ (8016288 <_printf_float+0x304>)
 801606e:	e7d3      	b.n	8016018 <_printf_float+0x94>
 8016070:	2220      	movs	r2, #32
 8016072:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8016074:	686b      	ldr	r3, [r5, #4]
 8016076:	4394      	bics	r4, r2
 8016078:	1c5a      	adds	r2, r3, #1
 801607a:	d146      	bne.n	801610a <_printf_float+0x186>
 801607c:	3307      	adds	r3, #7
 801607e:	606b      	str	r3, [r5, #4]
 8016080:	2380      	movs	r3, #128	@ 0x80
 8016082:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016084:	00db      	lsls	r3, r3, #3
 8016086:	4313      	orrs	r3, r2
 8016088:	2200      	movs	r2, #0
 801608a:	602b      	str	r3, [r5, #0]
 801608c:	9206      	str	r2, [sp, #24]
 801608e:	aa14      	add	r2, sp, #80	@ 0x50
 8016090:	9205      	str	r2, [sp, #20]
 8016092:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016094:	a90a      	add	r1, sp, #40	@ 0x28
 8016096:	9204      	str	r2, [sp, #16]
 8016098:	aa13      	add	r2, sp, #76	@ 0x4c
 801609a:	9203      	str	r2, [sp, #12]
 801609c:	2223      	movs	r2, #35	@ 0x23
 801609e:	1852      	adds	r2, r2, r1
 80160a0:	9202      	str	r2, [sp, #8]
 80160a2:	9301      	str	r3, [sp, #4]
 80160a4:	686b      	ldr	r3, [r5, #4]
 80160a6:	0032      	movs	r2, r6
 80160a8:	9300      	str	r3, [sp, #0]
 80160aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160ac:	003b      	movs	r3, r7
 80160ae:	f7ff fec3 	bl	8015e38 <__cvt>
 80160b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80160b4:	0007      	movs	r7, r0
 80160b6:	2c47      	cmp	r4, #71	@ 0x47
 80160b8:	d12d      	bne.n	8016116 <_printf_float+0x192>
 80160ba:	1cd3      	adds	r3, r2, #3
 80160bc:	db02      	blt.n	80160c4 <_printf_float+0x140>
 80160be:	686b      	ldr	r3, [r5, #4]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	dd48      	ble.n	8016156 <_printf_float+0x1d2>
 80160c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160c6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80160c8:	3b02      	subs	r3, #2
 80160ca:	b2db      	uxtb	r3, r3
 80160cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80160ce:	0028      	movs	r0, r5
 80160d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80160d2:	3901      	subs	r1, #1
 80160d4:	3050      	adds	r0, #80	@ 0x50
 80160d6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80160d8:	f7ff ff14 	bl	8015f04 <__exponent>
 80160dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80160de:	0004      	movs	r4, r0
 80160e0:	1813      	adds	r3, r2, r0
 80160e2:	612b      	str	r3, [r5, #16]
 80160e4:	2a01      	cmp	r2, #1
 80160e6:	dc02      	bgt.n	80160ee <_printf_float+0x16a>
 80160e8:	682a      	ldr	r2, [r5, #0]
 80160ea:	07d2      	lsls	r2, r2, #31
 80160ec:	d501      	bpl.n	80160f2 <_printf_float+0x16e>
 80160ee:	3301      	adds	r3, #1
 80160f0:	612b      	str	r3, [r5, #16]
 80160f2:	2323      	movs	r3, #35	@ 0x23
 80160f4:	aa0a      	add	r2, sp, #40	@ 0x28
 80160f6:	189b      	adds	r3, r3, r2
 80160f8:	781b      	ldrb	r3, [r3, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d100      	bne.n	8016100 <_printf_float+0x17c>
 80160fe:	e792      	b.n	8016026 <_printf_float+0xa2>
 8016100:	002b      	movs	r3, r5
 8016102:	222d      	movs	r2, #45	@ 0x2d
 8016104:	3343      	adds	r3, #67	@ 0x43
 8016106:	701a      	strb	r2, [r3, #0]
 8016108:	e78d      	b.n	8016026 <_printf_float+0xa2>
 801610a:	2c47      	cmp	r4, #71	@ 0x47
 801610c:	d1b8      	bne.n	8016080 <_printf_float+0xfc>
 801610e:	2b00      	cmp	r3, #0
 8016110:	d1b6      	bne.n	8016080 <_printf_float+0xfc>
 8016112:	3301      	adds	r3, #1
 8016114:	e7b3      	b.n	801607e <_printf_float+0xfa>
 8016116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016118:	0011      	movs	r1, r2
 801611a:	2b65      	cmp	r3, #101	@ 0x65
 801611c:	d9d7      	bls.n	80160ce <_printf_float+0x14a>
 801611e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016120:	2b66      	cmp	r3, #102	@ 0x66
 8016122:	d11a      	bne.n	801615a <_printf_float+0x1d6>
 8016124:	686b      	ldr	r3, [r5, #4]
 8016126:	2a00      	cmp	r2, #0
 8016128:	dd09      	ble.n	801613e <_printf_float+0x1ba>
 801612a:	612a      	str	r2, [r5, #16]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d102      	bne.n	8016136 <_printf_float+0x1b2>
 8016130:	6829      	ldr	r1, [r5, #0]
 8016132:	07c9      	lsls	r1, r1, #31
 8016134:	d50b      	bpl.n	801614e <_printf_float+0x1ca>
 8016136:	3301      	adds	r3, #1
 8016138:	189b      	adds	r3, r3, r2
 801613a:	612b      	str	r3, [r5, #16]
 801613c:	e007      	b.n	801614e <_printf_float+0x1ca>
 801613e:	2b00      	cmp	r3, #0
 8016140:	d103      	bne.n	801614a <_printf_float+0x1c6>
 8016142:	2201      	movs	r2, #1
 8016144:	6829      	ldr	r1, [r5, #0]
 8016146:	4211      	tst	r1, r2
 8016148:	d000      	beq.n	801614c <_printf_float+0x1c8>
 801614a:	1c9a      	adds	r2, r3, #2
 801614c:	612a      	str	r2, [r5, #16]
 801614e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016150:	2400      	movs	r4, #0
 8016152:	65ab      	str	r3, [r5, #88]	@ 0x58
 8016154:	e7cd      	b.n	80160f2 <_printf_float+0x16e>
 8016156:	2367      	movs	r3, #103	@ 0x67
 8016158:	930c      	str	r3, [sp, #48]	@ 0x30
 801615a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801615c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801615e:	4299      	cmp	r1, r3
 8016160:	db06      	blt.n	8016170 <_printf_float+0x1ec>
 8016162:	682b      	ldr	r3, [r5, #0]
 8016164:	6129      	str	r1, [r5, #16]
 8016166:	07db      	lsls	r3, r3, #31
 8016168:	d5f1      	bpl.n	801614e <_printf_float+0x1ca>
 801616a:	3101      	adds	r1, #1
 801616c:	6129      	str	r1, [r5, #16]
 801616e:	e7ee      	b.n	801614e <_printf_float+0x1ca>
 8016170:	2201      	movs	r2, #1
 8016172:	2900      	cmp	r1, #0
 8016174:	dce0      	bgt.n	8016138 <_printf_float+0x1b4>
 8016176:	1892      	adds	r2, r2, r2
 8016178:	1a52      	subs	r2, r2, r1
 801617a:	e7dd      	b.n	8016138 <_printf_float+0x1b4>
 801617c:	682a      	ldr	r2, [r5, #0]
 801617e:	0553      	lsls	r3, r2, #21
 8016180:	d408      	bmi.n	8016194 <_printf_float+0x210>
 8016182:	692b      	ldr	r3, [r5, #16]
 8016184:	003a      	movs	r2, r7
 8016186:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016188:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801618a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801618c:	47a0      	blx	r4
 801618e:	3001      	adds	r0, #1
 8016190:	d129      	bne.n	80161e6 <_printf_float+0x262>
 8016192:	e753      	b.n	801603c <_printf_float+0xb8>
 8016194:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016196:	2b65      	cmp	r3, #101	@ 0x65
 8016198:	d800      	bhi.n	801619c <_printf_float+0x218>
 801619a:	e0da      	b.n	8016352 <_printf_float+0x3ce>
 801619c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801619e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80161a0:	2200      	movs	r2, #0
 80161a2:	2300      	movs	r3, #0
 80161a4:	f7ea f952 	bl	800044c <__aeabi_dcmpeq>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	d033      	beq.n	8016214 <_printf_float+0x290>
 80161ac:	2301      	movs	r3, #1
 80161ae:	4a37      	ldr	r2, [pc, #220]	@ (801628c <_printf_float+0x308>)
 80161b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80161b6:	47a0      	blx	r4
 80161b8:	3001      	adds	r0, #1
 80161ba:	d100      	bne.n	80161be <_printf_float+0x23a>
 80161bc:	e73e      	b.n	801603c <_printf_float+0xb8>
 80161be:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80161c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80161c2:	42b3      	cmp	r3, r6
 80161c4:	db02      	blt.n	80161cc <_printf_float+0x248>
 80161c6:	682b      	ldr	r3, [r5, #0]
 80161c8:	07db      	lsls	r3, r3, #31
 80161ca:	d50c      	bpl.n	80161e6 <_printf_float+0x262>
 80161cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80161ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80161d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161d6:	47a0      	blx	r4
 80161d8:	2400      	movs	r4, #0
 80161da:	3001      	adds	r0, #1
 80161dc:	d100      	bne.n	80161e0 <_printf_float+0x25c>
 80161de:	e72d      	b.n	801603c <_printf_float+0xb8>
 80161e0:	1e73      	subs	r3, r6, #1
 80161e2:	42a3      	cmp	r3, r4
 80161e4:	dc0a      	bgt.n	80161fc <_printf_float+0x278>
 80161e6:	682b      	ldr	r3, [r5, #0]
 80161e8:	079b      	lsls	r3, r3, #30
 80161ea:	d500      	bpl.n	80161ee <_printf_float+0x26a>
 80161ec:	e105      	b.n	80163fa <_printf_float+0x476>
 80161ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80161f0:	68e8      	ldr	r0, [r5, #12]
 80161f2:	4298      	cmp	r0, r3
 80161f4:	db00      	blt.n	80161f8 <_printf_float+0x274>
 80161f6:	e723      	b.n	8016040 <_printf_float+0xbc>
 80161f8:	0018      	movs	r0, r3
 80161fa:	e721      	b.n	8016040 <_printf_float+0xbc>
 80161fc:	002a      	movs	r2, r5
 80161fe:	2301      	movs	r3, #1
 8016200:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016204:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016206:	321a      	adds	r2, #26
 8016208:	47b8      	blx	r7
 801620a:	3001      	adds	r0, #1
 801620c:	d100      	bne.n	8016210 <_printf_float+0x28c>
 801620e:	e715      	b.n	801603c <_printf_float+0xb8>
 8016210:	3401      	adds	r4, #1
 8016212:	e7e5      	b.n	80161e0 <_printf_float+0x25c>
 8016214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016216:	2b00      	cmp	r3, #0
 8016218:	dc3a      	bgt.n	8016290 <_printf_float+0x30c>
 801621a:	2301      	movs	r3, #1
 801621c:	4a1b      	ldr	r2, [pc, #108]	@ (801628c <_printf_float+0x308>)
 801621e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016220:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016222:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016224:	47a0      	blx	r4
 8016226:	3001      	adds	r0, #1
 8016228:	d100      	bne.n	801622c <_printf_float+0x2a8>
 801622a:	e707      	b.n	801603c <_printf_float+0xb8>
 801622c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801622e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016230:	4333      	orrs	r3, r6
 8016232:	d102      	bne.n	801623a <_printf_float+0x2b6>
 8016234:	682b      	ldr	r3, [r5, #0]
 8016236:	07db      	lsls	r3, r3, #31
 8016238:	d5d5      	bpl.n	80161e6 <_printf_float+0x262>
 801623a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801623c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801623e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016240:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016242:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016244:	47a0      	blx	r4
 8016246:	2300      	movs	r3, #0
 8016248:	3001      	adds	r0, #1
 801624a:	d100      	bne.n	801624e <_printf_float+0x2ca>
 801624c:	e6f6      	b.n	801603c <_printf_float+0xb8>
 801624e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016250:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016252:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016254:	425b      	negs	r3, r3
 8016256:	4293      	cmp	r3, r2
 8016258:	dc01      	bgt.n	801625e <_printf_float+0x2da>
 801625a:	0033      	movs	r3, r6
 801625c:	e792      	b.n	8016184 <_printf_float+0x200>
 801625e:	002a      	movs	r2, r5
 8016260:	2301      	movs	r3, #1
 8016262:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016264:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016266:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016268:	321a      	adds	r2, #26
 801626a:	47a0      	blx	r4
 801626c:	3001      	adds	r0, #1
 801626e:	d100      	bne.n	8016272 <_printf_float+0x2ee>
 8016270:	e6e4      	b.n	801603c <_printf_float+0xb8>
 8016272:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016274:	3301      	adds	r3, #1
 8016276:	e7ea      	b.n	801624e <_printf_float+0x2ca>
 8016278:	7fefffff 	.word	0x7fefffff
 801627c:	0801a4e8 	.word	0x0801a4e8
 8016280:	0801a4ec 	.word	0x0801a4ec
 8016284:	0801a4f0 	.word	0x0801a4f0
 8016288:	0801a4f4 	.word	0x0801a4f4
 801628c:	0801a4f8 	.word	0x0801a4f8
 8016290:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016292:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8016294:	930c      	str	r3, [sp, #48]	@ 0x30
 8016296:	429e      	cmp	r6, r3
 8016298:	dd00      	ble.n	801629c <_printf_float+0x318>
 801629a:	001e      	movs	r6, r3
 801629c:	2e00      	cmp	r6, #0
 801629e:	dc31      	bgt.n	8016304 <_printf_float+0x380>
 80162a0:	43f3      	mvns	r3, r6
 80162a2:	2400      	movs	r4, #0
 80162a4:	17db      	asrs	r3, r3, #31
 80162a6:	4033      	ands	r3, r6
 80162a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80162aa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80162ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162ae:	1af3      	subs	r3, r6, r3
 80162b0:	42a3      	cmp	r3, r4
 80162b2:	dc30      	bgt.n	8016316 <_printf_float+0x392>
 80162b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80162b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80162b8:	429a      	cmp	r2, r3
 80162ba:	dc38      	bgt.n	801632e <_printf_float+0x3aa>
 80162bc:	682b      	ldr	r3, [r5, #0]
 80162be:	07db      	lsls	r3, r3, #31
 80162c0:	d435      	bmi.n	801632e <_printf_float+0x3aa>
 80162c2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80162c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80162c8:	1b9b      	subs	r3, r3, r6
 80162ca:	1b14      	subs	r4, r2, r4
 80162cc:	429c      	cmp	r4, r3
 80162ce:	dd00      	ble.n	80162d2 <_printf_float+0x34e>
 80162d0:	001c      	movs	r4, r3
 80162d2:	2c00      	cmp	r4, #0
 80162d4:	dc34      	bgt.n	8016340 <_printf_float+0x3bc>
 80162d6:	43e3      	mvns	r3, r4
 80162d8:	2600      	movs	r6, #0
 80162da:	17db      	asrs	r3, r3, #31
 80162dc:	401c      	ands	r4, r3
 80162de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80162e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80162e2:	1ad3      	subs	r3, r2, r3
 80162e4:	1b1b      	subs	r3, r3, r4
 80162e6:	42b3      	cmp	r3, r6
 80162e8:	dc00      	bgt.n	80162ec <_printf_float+0x368>
 80162ea:	e77c      	b.n	80161e6 <_printf_float+0x262>
 80162ec:	002a      	movs	r2, r5
 80162ee:	2301      	movs	r3, #1
 80162f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80162f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80162f6:	321a      	adds	r2, #26
 80162f8:	47b8      	blx	r7
 80162fa:	3001      	adds	r0, #1
 80162fc:	d100      	bne.n	8016300 <_printf_float+0x37c>
 80162fe:	e69d      	b.n	801603c <_printf_float+0xb8>
 8016300:	3601      	adds	r6, #1
 8016302:	e7ec      	b.n	80162de <_printf_float+0x35a>
 8016304:	0033      	movs	r3, r6
 8016306:	003a      	movs	r2, r7
 8016308:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801630a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801630c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801630e:	47a0      	blx	r4
 8016310:	3001      	adds	r0, #1
 8016312:	d1c5      	bne.n	80162a0 <_printf_float+0x31c>
 8016314:	e692      	b.n	801603c <_printf_float+0xb8>
 8016316:	002a      	movs	r2, r5
 8016318:	2301      	movs	r3, #1
 801631a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801631c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801631e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016320:	321a      	adds	r2, #26
 8016322:	47b0      	blx	r6
 8016324:	3001      	adds	r0, #1
 8016326:	d100      	bne.n	801632a <_printf_float+0x3a6>
 8016328:	e688      	b.n	801603c <_printf_float+0xb8>
 801632a:	3401      	adds	r4, #1
 801632c:	e7bd      	b.n	80162aa <_printf_float+0x326>
 801632e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016330:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016332:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016334:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016336:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016338:	47a0      	blx	r4
 801633a:	3001      	adds	r0, #1
 801633c:	d1c1      	bne.n	80162c2 <_printf_float+0x33e>
 801633e:	e67d      	b.n	801603c <_printf_float+0xb8>
 8016340:	19ba      	adds	r2, r7, r6
 8016342:	0023      	movs	r3, r4
 8016344:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016348:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801634a:	47b0      	blx	r6
 801634c:	3001      	adds	r0, #1
 801634e:	d1c2      	bne.n	80162d6 <_printf_float+0x352>
 8016350:	e674      	b.n	801603c <_printf_float+0xb8>
 8016352:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016354:	930c      	str	r3, [sp, #48]	@ 0x30
 8016356:	2b01      	cmp	r3, #1
 8016358:	dc02      	bgt.n	8016360 <_printf_float+0x3dc>
 801635a:	2301      	movs	r3, #1
 801635c:	421a      	tst	r2, r3
 801635e:	d039      	beq.n	80163d4 <_printf_float+0x450>
 8016360:	2301      	movs	r3, #1
 8016362:	003a      	movs	r2, r7
 8016364:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016368:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801636a:	47b0      	blx	r6
 801636c:	3001      	adds	r0, #1
 801636e:	d100      	bne.n	8016372 <_printf_float+0x3ee>
 8016370:	e664      	b.n	801603c <_printf_float+0xb8>
 8016372:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016374:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016376:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016378:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801637a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801637c:	47b0      	blx	r6
 801637e:	3001      	adds	r0, #1
 8016380:	d100      	bne.n	8016384 <_printf_float+0x400>
 8016382:	e65b      	b.n	801603c <_printf_float+0xb8>
 8016384:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8016386:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801638a:	2200      	movs	r2, #0
 801638c:	3b01      	subs	r3, #1
 801638e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016390:	2300      	movs	r3, #0
 8016392:	f7ea f85b 	bl	800044c <__aeabi_dcmpeq>
 8016396:	2800      	cmp	r0, #0
 8016398:	d11a      	bne.n	80163d0 <_printf_float+0x44c>
 801639a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801639c:	1c7a      	adds	r2, r7, #1
 801639e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163a2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80163a4:	47b0      	blx	r6
 80163a6:	3001      	adds	r0, #1
 80163a8:	d10e      	bne.n	80163c8 <_printf_float+0x444>
 80163aa:	e647      	b.n	801603c <_printf_float+0xb8>
 80163ac:	002a      	movs	r2, r5
 80163ae:	2301      	movs	r3, #1
 80163b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80163b6:	321a      	adds	r2, #26
 80163b8:	47b8      	blx	r7
 80163ba:	3001      	adds	r0, #1
 80163bc:	d100      	bne.n	80163c0 <_printf_float+0x43c>
 80163be:	e63d      	b.n	801603c <_printf_float+0xb8>
 80163c0:	3601      	adds	r6, #1
 80163c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80163c4:	429e      	cmp	r6, r3
 80163c6:	dbf1      	blt.n	80163ac <_printf_float+0x428>
 80163c8:	002a      	movs	r2, r5
 80163ca:	0023      	movs	r3, r4
 80163cc:	3250      	adds	r2, #80	@ 0x50
 80163ce:	e6da      	b.n	8016186 <_printf_float+0x202>
 80163d0:	2600      	movs	r6, #0
 80163d2:	e7f6      	b.n	80163c2 <_printf_float+0x43e>
 80163d4:	003a      	movs	r2, r7
 80163d6:	e7e2      	b.n	801639e <_printf_float+0x41a>
 80163d8:	002a      	movs	r2, r5
 80163da:	2301      	movs	r3, #1
 80163dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80163e2:	3219      	adds	r2, #25
 80163e4:	47b0      	blx	r6
 80163e6:	3001      	adds	r0, #1
 80163e8:	d100      	bne.n	80163ec <_printf_float+0x468>
 80163ea:	e627      	b.n	801603c <_printf_float+0xb8>
 80163ec:	3401      	adds	r4, #1
 80163ee:	68eb      	ldr	r3, [r5, #12]
 80163f0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80163f2:	1a9b      	subs	r3, r3, r2
 80163f4:	42a3      	cmp	r3, r4
 80163f6:	dcef      	bgt.n	80163d8 <_printf_float+0x454>
 80163f8:	e6f9      	b.n	80161ee <_printf_float+0x26a>
 80163fa:	2400      	movs	r4, #0
 80163fc:	e7f7      	b.n	80163ee <_printf_float+0x46a>
 80163fe:	46c0      	nop			@ (mov r8, r8)

08016400 <_printf_common>:
 8016400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016402:	0016      	movs	r6, r2
 8016404:	9301      	str	r3, [sp, #4]
 8016406:	688a      	ldr	r2, [r1, #8]
 8016408:	690b      	ldr	r3, [r1, #16]
 801640a:	000c      	movs	r4, r1
 801640c:	9000      	str	r0, [sp, #0]
 801640e:	4293      	cmp	r3, r2
 8016410:	da00      	bge.n	8016414 <_printf_common+0x14>
 8016412:	0013      	movs	r3, r2
 8016414:	0022      	movs	r2, r4
 8016416:	6033      	str	r3, [r6, #0]
 8016418:	3243      	adds	r2, #67	@ 0x43
 801641a:	7812      	ldrb	r2, [r2, #0]
 801641c:	2a00      	cmp	r2, #0
 801641e:	d001      	beq.n	8016424 <_printf_common+0x24>
 8016420:	3301      	adds	r3, #1
 8016422:	6033      	str	r3, [r6, #0]
 8016424:	6823      	ldr	r3, [r4, #0]
 8016426:	069b      	lsls	r3, r3, #26
 8016428:	d502      	bpl.n	8016430 <_printf_common+0x30>
 801642a:	6833      	ldr	r3, [r6, #0]
 801642c:	3302      	adds	r3, #2
 801642e:	6033      	str	r3, [r6, #0]
 8016430:	6822      	ldr	r2, [r4, #0]
 8016432:	2306      	movs	r3, #6
 8016434:	0015      	movs	r5, r2
 8016436:	401d      	ands	r5, r3
 8016438:	421a      	tst	r2, r3
 801643a:	d027      	beq.n	801648c <_printf_common+0x8c>
 801643c:	0023      	movs	r3, r4
 801643e:	3343      	adds	r3, #67	@ 0x43
 8016440:	781b      	ldrb	r3, [r3, #0]
 8016442:	1e5a      	subs	r2, r3, #1
 8016444:	4193      	sbcs	r3, r2
 8016446:	6822      	ldr	r2, [r4, #0]
 8016448:	0692      	lsls	r2, r2, #26
 801644a:	d430      	bmi.n	80164ae <_printf_common+0xae>
 801644c:	0022      	movs	r2, r4
 801644e:	9901      	ldr	r1, [sp, #4]
 8016450:	9800      	ldr	r0, [sp, #0]
 8016452:	9d08      	ldr	r5, [sp, #32]
 8016454:	3243      	adds	r2, #67	@ 0x43
 8016456:	47a8      	blx	r5
 8016458:	3001      	adds	r0, #1
 801645a:	d025      	beq.n	80164a8 <_printf_common+0xa8>
 801645c:	2206      	movs	r2, #6
 801645e:	6823      	ldr	r3, [r4, #0]
 8016460:	2500      	movs	r5, #0
 8016462:	4013      	ands	r3, r2
 8016464:	2b04      	cmp	r3, #4
 8016466:	d105      	bne.n	8016474 <_printf_common+0x74>
 8016468:	6833      	ldr	r3, [r6, #0]
 801646a:	68e5      	ldr	r5, [r4, #12]
 801646c:	1aed      	subs	r5, r5, r3
 801646e:	43eb      	mvns	r3, r5
 8016470:	17db      	asrs	r3, r3, #31
 8016472:	401d      	ands	r5, r3
 8016474:	68a3      	ldr	r3, [r4, #8]
 8016476:	6922      	ldr	r2, [r4, #16]
 8016478:	4293      	cmp	r3, r2
 801647a:	dd01      	ble.n	8016480 <_printf_common+0x80>
 801647c:	1a9b      	subs	r3, r3, r2
 801647e:	18ed      	adds	r5, r5, r3
 8016480:	2600      	movs	r6, #0
 8016482:	42b5      	cmp	r5, r6
 8016484:	d120      	bne.n	80164c8 <_printf_common+0xc8>
 8016486:	2000      	movs	r0, #0
 8016488:	e010      	b.n	80164ac <_printf_common+0xac>
 801648a:	3501      	adds	r5, #1
 801648c:	68e3      	ldr	r3, [r4, #12]
 801648e:	6832      	ldr	r2, [r6, #0]
 8016490:	1a9b      	subs	r3, r3, r2
 8016492:	42ab      	cmp	r3, r5
 8016494:	ddd2      	ble.n	801643c <_printf_common+0x3c>
 8016496:	0022      	movs	r2, r4
 8016498:	2301      	movs	r3, #1
 801649a:	9901      	ldr	r1, [sp, #4]
 801649c:	9800      	ldr	r0, [sp, #0]
 801649e:	9f08      	ldr	r7, [sp, #32]
 80164a0:	3219      	adds	r2, #25
 80164a2:	47b8      	blx	r7
 80164a4:	3001      	adds	r0, #1
 80164a6:	d1f0      	bne.n	801648a <_printf_common+0x8a>
 80164a8:	2001      	movs	r0, #1
 80164aa:	4240      	negs	r0, r0
 80164ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80164ae:	2030      	movs	r0, #48	@ 0x30
 80164b0:	18e1      	adds	r1, r4, r3
 80164b2:	3143      	adds	r1, #67	@ 0x43
 80164b4:	7008      	strb	r0, [r1, #0]
 80164b6:	0021      	movs	r1, r4
 80164b8:	1c5a      	adds	r2, r3, #1
 80164ba:	3145      	adds	r1, #69	@ 0x45
 80164bc:	7809      	ldrb	r1, [r1, #0]
 80164be:	18a2      	adds	r2, r4, r2
 80164c0:	3243      	adds	r2, #67	@ 0x43
 80164c2:	3302      	adds	r3, #2
 80164c4:	7011      	strb	r1, [r2, #0]
 80164c6:	e7c1      	b.n	801644c <_printf_common+0x4c>
 80164c8:	0022      	movs	r2, r4
 80164ca:	2301      	movs	r3, #1
 80164cc:	9901      	ldr	r1, [sp, #4]
 80164ce:	9800      	ldr	r0, [sp, #0]
 80164d0:	9f08      	ldr	r7, [sp, #32]
 80164d2:	321a      	adds	r2, #26
 80164d4:	47b8      	blx	r7
 80164d6:	3001      	adds	r0, #1
 80164d8:	d0e6      	beq.n	80164a8 <_printf_common+0xa8>
 80164da:	3601      	adds	r6, #1
 80164dc:	e7d1      	b.n	8016482 <_printf_common+0x82>
	...

080164e0 <_printf_i>:
 80164e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164e2:	b08b      	sub	sp, #44	@ 0x2c
 80164e4:	9206      	str	r2, [sp, #24]
 80164e6:	000a      	movs	r2, r1
 80164e8:	3243      	adds	r2, #67	@ 0x43
 80164ea:	9307      	str	r3, [sp, #28]
 80164ec:	9005      	str	r0, [sp, #20]
 80164ee:	9203      	str	r2, [sp, #12]
 80164f0:	7e0a      	ldrb	r2, [r1, #24]
 80164f2:	000c      	movs	r4, r1
 80164f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80164f6:	2a78      	cmp	r2, #120	@ 0x78
 80164f8:	d809      	bhi.n	801650e <_printf_i+0x2e>
 80164fa:	2a62      	cmp	r2, #98	@ 0x62
 80164fc:	d80b      	bhi.n	8016516 <_printf_i+0x36>
 80164fe:	2a00      	cmp	r2, #0
 8016500:	d100      	bne.n	8016504 <_printf_i+0x24>
 8016502:	e0bc      	b.n	801667e <_printf_i+0x19e>
 8016504:	497b      	ldr	r1, [pc, #492]	@ (80166f4 <_printf_i+0x214>)
 8016506:	9104      	str	r1, [sp, #16]
 8016508:	2a58      	cmp	r2, #88	@ 0x58
 801650a:	d100      	bne.n	801650e <_printf_i+0x2e>
 801650c:	e090      	b.n	8016630 <_printf_i+0x150>
 801650e:	0025      	movs	r5, r4
 8016510:	3542      	adds	r5, #66	@ 0x42
 8016512:	702a      	strb	r2, [r5, #0]
 8016514:	e022      	b.n	801655c <_printf_i+0x7c>
 8016516:	0010      	movs	r0, r2
 8016518:	3863      	subs	r0, #99	@ 0x63
 801651a:	2815      	cmp	r0, #21
 801651c:	d8f7      	bhi.n	801650e <_printf_i+0x2e>
 801651e:	f7e9 fe05 	bl	800012c <__gnu_thumb1_case_shi>
 8016522:	0016      	.short	0x0016
 8016524:	fff6001f 	.word	0xfff6001f
 8016528:	fff6fff6 	.word	0xfff6fff6
 801652c:	001ffff6 	.word	0x001ffff6
 8016530:	fff6fff6 	.word	0xfff6fff6
 8016534:	fff6fff6 	.word	0xfff6fff6
 8016538:	003600a1 	.word	0x003600a1
 801653c:	fff60080 	.word	0xfff60080
 8016540:	00b2fff6 	.word	0x00b2fff6
 8016544:	0036fff6 	.word	0x0036fff6
 8016548:	fff6fff6 	.word	0xfff6fff6
 801654c:	0084      	.short	0x0084
 801654e:	0025      	movs	r5, r4
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	3542      	adds	r5, #66	@ 0x42
 8016554:	1d11      	adds	r1, r2, #4
 8016556:	6019      	str	r1, [r3, #0]
 8016558:	6813      	ldr	r3, [r2, #0]
 801655a:	702b      	strb	r3, [r5, #0]
 801655c:	2301      	movs	r3, #1
 801655e:	e0a0      	b.n	80166a2 <_printf_i+0x1c2>
 8016560:	6818      	ldr	r0, [r3, #0]
 8016562:	6809      	ldr	r1, [r1, #0]
 8016564:	1d02      	adds	r2, r0, #4
 8016566:	060d      	lsls	r5, r1, #24
 8016568:	d50b      	bpl.n	8016582 <_printf_i+0xa2>
 801656a:	6806      	ldr	r6, [r0, #0]
 801656c:	601a      	str	r2, [r3, #0]
 801656e:	2e00      	cmp	r6, #0
 8016570:	da03      	bge.n	801657a <_printf_i+0x9a>
 8016572:	232d      	movs	r3, #45	@ 0x2d
 8016574:	9a03      	ldr	r2, [sp, #12]
 8016576:	4276      	negs	r6, r6
 8016578:	7013      	strb	r3, [r2, #0]
 801657a:	4b5e      	ldr	r3, [pc, #376]	@ (80166f4 <_printf_i+0x214>)
 801657c:	270a      	movs	r7, #10
 801657e:	9304      	str	r3, [sp, #16]
 8016580:	e018      	b.n	80165b4 <_printf_i+0xd4>
 8016582:	6806      	ldr	r6, [r0, #0]
 8016584:	601a      	str	r2, [r3, #0]
 8016586:	0649      	lsls	r1, r1, #25
 8016588:	d5f1      	bpl.n	801656e <_printf_i+0x8e>
 801658a:	b236      	sxth	r6, r6
 801658c:	e7ef      	b.n	801656e <_printf_i+0x8e>
 801658e:	6808      	ldr	r0, [r1, #0]
 8016590:	6819      	ldr	r1, [r3, #0]
 8016592:	c940      	ldmia	r1!, {r6}
 8016594:	0605      	lsls	r5, r0, #24
 8016596:	d402      	bmi.n	801659e <_printf_i+0xbe>
 8016598:	0640      	lsls	r0, r0, #25
 801659a:	d500      	bpl.n	801659e <_printf_i+0xbe>
 801659c:	b2b6      	uxth	r6, r6
 801659e:	6019      	str	r1, [r3, #0]
 80165a0:	4b54      	ldr	r3, [pc, #336]	@ (80166f4 <_printf_i+0x214>)
 80165a2:	270a      	movs	r7, #10
 80165a4:	9304      	str	r3, [sp, #16]
 80165a6:	2a6f      	cmp	r2, #111	@ 0x6f
 80165a8:	d100      	bne.n	80165ac <_printf_i+0xcc>
 80165aa:	3f02      	subs	r7, #2
 80165ac:	0023      	movs	r3, r4
 80165ae:	2200      	movs	r2, #0
 80165b0:	3343      	adds	r3, #67	@ 0x43
 80165b2:	701a      	strb	r2, [r3, #0]
 80165b4:	6863      	ldr	r3, [r4, #4]
 80165b6:	60a3      	str	r3, [r4, #8]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	db03      	blt.n	80165c4 <_printf_i+0xe4>
 80165bc:	2104      	movs	r1, #4
 80165be:	6822      	ldr	r2, [r4, #0]
 80165c0:	438a      	bics	r2, r1
 80165c2:	6022      	str	r2, [r4, #0]
 80165c4:	2e00      	cmp	r6, #0
 80165c6:	d102      	bne.n	80165ce <_printf_i+0xee>
 80165c8:	9d03      	ldr	r5, [sp, #12]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d00c      	beq.n	80165e8 <_printf_i+0x108>
 80165ce:	9d03      	ldr	r5, [sp, #12]
 80165d0:	0030      	movs	r0, r6
 80165d2:	0039      	movs	r1, r7
 80165d4:	f7e9 fe3a 	bl	800024c <__aeabi_uidivmod>
 80165d8:	9b04      	ldr	r3, [sp, #16]
 80165da:	3d01      	subs	r5, #1
 80165dc:	5c5b      	ldrb	r3, [r3, r1]
 80165de:	702b      	strb	r3, [r5, #0]
 80165e0:	0033      	movs	r3, r6
 80165e2:	0006      	movs	r6, r0
 80165e4:	429f      	cmp	r7, r3
 80165e6:	d9f3      	bls.n	80165d0 <_printf_i+0xf0>
 80165e8:	2f08      	cmp	r7, #8
 80165ea:	d109      	bne.n	8016600 <_printf_i+0x120>
 80165ec:	6823      	ldr	r3, [r4, #0]
 80165ee:	07db      	lsls	r3, r3, #31
 80165f0:	d506      	bpl.n	8016600 <_printf_i+0x120>
 80165f2:	6862      	ldr	r2, [r4, #4]
 80165f4:	6923      	ldr	r3, [r4, #16]
 80165f6:	429a      	cmp	r2, r3
 80165f8:	dc02      	bgt.n	8016600 <_printf_i+0x120>
 80165fa:	2330      	movs	r3, #48	@ 0x30
 80165fc:	3d01      	subs	r5, #1
 80165fe:	702b      	strb	r3, [r5, #0]
 8016600:	9b03      	ldr	r3, [sp, #12]
 8016602:	1b5b      	subs	r3, r3, r5
 8016604:	6123      	str	r3, [r4, #16]
 8016606:	9b07      	ldr	r3, [sp, #28]
 8016608:	0021      	movs	r1, r4
 801660a:	9300      	str	r3, [sp, #0]
 801660c:	9805      	ldr	r0, [sp, #20]
 801660e:	9b06      	ldr	r3, [sp, #24]
 8016610:	aa09      	add	r2, sp, #36	@ 0x24
 8016612:	f7ff fef5 	bl	8016400 <_printf_common>
 8016616:	3001      	adds	r0, #1
 8016618:	d148      	bne.n	80166ac <_printf_i+0x1cc>
 801661a:	2001      	movs	r0, #1
 801661c:	4240      	negs	r0, r0
 801661e:	b00b      	add	sp, #44	@ 0x2c
 8016620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016622:	2220      	movs	r2, #32
 8016624:	6809      	ldr	r1, [r1, #0]
 8016626:	430a      	orrs	r2, r1
 8016628:	6022      	str	r2, [r4, #0]
 801662a:	2278      	movs	r2, #120	@ 0x78
 801662c:	4932      	ldr	r1, [pc, #200]	@ (80166f8 <_printf_i+0x218>)
 801662e:	9104      	str	r1, [sp, #16]
 8016630:	0021      	movs	r1, r4
 8016632:	3145      	adds	r1, #69	@ 0x45
 8016634:	700a      	strb	r2, [r1, #0]
 8016636:	6819      	ldr	r1, [r3, #0]
 8016638:	6822      	ldr	r2, [r4, #0]
 801663a:	c940      	ldmia	r1!, {r6}
 801663c:	0610      	lsls	r0, r2, #24
 801663e:	d402      	bmi.n	8016646 <_printf_i+0x166>
 8016640:	0650      	lsls	r0, r2, #25
 8016642:	d500      	bpl.n	8016646 <_printf_i+0x166>
 8016644:	b2b6      	uxth	r6, r6
 8016646:	6019      	str	r1, [r3, #0]
 8016648:	07d3      	lsls	r3, r2, #31
 801664a:	d502      	bpl.n	8016652 <_printf_i+0x172>
 801664c:	2320      	movs	r3, #32
 801664e:	4313      	orrs	r3, r2
 8016650:	6023      	str	r3, [r4, #0]
 8016652:	2e00      	cmp	r6, #0
 8016654:	d001      	beq.n	801665a <_printf_i+0x17a>
 8016656:	2710      	movs	r7, #16
 8016658:	e7a8      	b.n	80165ac <_printf_i+0xcc>
 801665a:	2220      	movs	r2, #32
 801665c:	6823      	ldr	r3, [r4, #0]
 801665e:	4393      	bics	r3, r2
 8016660:	6023      	str	r3, [r4, #0]
 8016662:	e7f8      	b.n	8016656 <_printf_i+0x176>
 8016664:	681a      	ldr	r2, [r3, #0]
 8016666:	680d      	ldr	r5, [r1, #0]
 8016668:	1d10      	adds	r0, r2, #4
 801666a:	6949      	ldr	r1, [r1, #20]
 801666c:	6018      	str	r0, [r3, #0]
 801666e:	6813      	ldr	r3, [r2, #0]
 8016670:	062e      	lsls	r6, r5, #24
 8016672:	d501      	bpl.n	8016678 <_printf_i+0x198>
 8016674:	6019      	str	r1, [r3, #0]
 8016676:	e002      	b.n	801667e <_printf_i+0x19e>
 8016678:	066d      	lsls	r5, r5, #25
 801667a:	d5fb      	bpl.n	8016674 <_printf_i+0x194>
 801667c:	8019      	strh	r1, [r3, #0]
 801667e:	2300      	movs	r3, #0
 8016680:	9d03      	ldr	r5, [sp, #12]
 8016682:	6123      	str	r3, [r4, #16]
 8016684:	e7bf      	b.n	8016606 <_printf_i+0x126>
 8016686:	681a      	ldr	r2, [r3, #0]
 8016688:	1d11      	adds	r1, r2, #4
 801668a:	6019      	str	r1, [r3, #0]
 801668c:	6815      	ldr	r5, [r2, #0]
 801668e:	2100      	movs	r1, #0
 8016690:	0028      	movs	r0, r5
 8016692:	6862      	ldr	r2, [r4, #4]
 8016694:	f000 fa5b 	bl	8016b4e <memchr>
 8016698:	2800      	cmp	r0, #0
 801669a:	d001      	beq.n	80166a0 <_printf_i+0x1c0>
 801669c:	1b40      	subs	r0, r0, r5
 801669e:	6060      	str	r0, [r4, #4]
 80166a0:	6863      	ldr	r3, [r4, #4]
 80166a2:	6123      	str	r3, [r4, #16]
 80166a4:	2300      	movs	r3, #0
 80166a6:	9a03      	ldr	r2, [sp, #12]
 80166a8:	7013      	strb	r3, [r2, #0]
 80166aa:	e7ac      	b.n	8016606 <_printf_i+0x126>
 80166ac:	002a      	movs	r2, r5
 80166ae:	6923      	ldr	r3, [r4, #16]
 80166b0:	9906      	ldr	r1, [sp, #24]
 80166b2:	9805      	ldr	r0, [sp, #20]
 80166b4:	9d07      	ldr	r5, [sp, #28]
 80166b6:	47a8      	blx	r5
 80166b8:	3001      	adds	r0, #1
 80166ba:	d0ae      	beq.n	801661a <_printf_i+0x13a>
 80166bc:	6823      	ldr	r3, [r4, #0]
 80166be:	079b      	lsls	r3, r3, #30
 80166c0:	d415      	bmi.n	80166ee <_printf_i+0x20e>
 80166c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166c4:	68e0      	ldr	r0, [r4, #12]
 80166c6:	4298      	cmp	r0, r3
 80166c8:	daa9      	bge.n	801661e <_printf_i+0x13e>
 80166ca:	0018      	movs	r0, r3
 80166cc:	e7a7      	b.n	801661e <_printf_i+0x13e>
 80166ce:	0022      	movs	r2, r4
 80166d0:	2301      	movs	r3, #1
 80166d2:	9906      	ldr	r1, [sp, #24]
 80166d4:	9805      	ldr	r0, [sp, #20]
 80166d6:	9e07      	ldr	r6, [sp, #28]
 80166d8:	3219      	adds	r2, #25
 80166da:	47b0      	blx	r6
 80166dc:	3001      	adds	r0, #1
 80166de:	d09c      	beq.n	801661a <_printf_i+0x13a>
 80166e0:	3501      	adds	r5, #1
 80166e2:	68e3      	ldr	r3, [r4, #12]
 80166e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80166e6:	1a9b      	subs	r3, r3, r2
 80166e8:	42ab      	cmp	r3, r5
 80166ea:	dcf0      	bgt.n	80166ce <_printf_i+0x1ee>
 80166ec:	e7e9      	b.n	80166c2 <_printf_i+0x1e2>
 80166ee:	2500      	movs	r5, #0
 80166f0:	e7f7      	b.n	80166e2 <_printf_i+0x202>
 80166f2:	46c0      	nop			@ (mov r8, r8)
 80166f4:	0801a4fa 	.word	0x0801a4fa
 80166f8:	0801a50b 	.word	0x0801a50b

080166fc <std>:
 80166fc:	2300      	movs	r3, #0
 80166fe:	b510      	push	{r4, lr}
 8016700:	0004      	movs	r4, r0
 8016702:	6003      	str	r3, [r0, #0]
 8016704:	6043      	str	r3, [r0, #4]
 8016706:	6083      	str	r3, [r0, #8]
 8016708:	8181      	strh	r1, [r0, #12]
 801670a:	6643      	str	r3, [r0, #100]	@ 0x64
 801670c:	81c2      	strh	r2, [r0, #14]
 801670e:	6103      	str	r3, [r0, #16]
 8016710:	6143      	str	r3, [r0, #20]
 8016712:	6183      	str	r3, [r0, #24]
 8016714:	0019      	movs	r1, r3
 8016716:	2208      	movs	r2, #8
 8016718:	305c      	adds	r0, #92	@ 0x5c
 801671a:	f000 f967 	bl	80169ec <memset>
 801671e:	4b0b      	ldr	r3, [pc, #44]	@ (801674c <std+0x50>)
 8016720:	6224      	str	r4, [r4, #32]
 8016722:	6263      	str	r3, [r4, #36]	@ 0x24
 8016724:	4b0a      	ldr	r3, [pc, #40]	@ (8016750 <std+0x54>)
 8016726:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016728:	4b0a      	ldr	r3, [pc, #40]	@ (8016754 <std+0x58>)
 801672a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801672c:	4b0a      	ldr	r3, [pc, #40]	@ (8016758 <std+0x5c>)
 801672e:	6323      	str	r3, [r4, #48]	@ 0x30
 8016730:	4b0a      	ldr	r3, [pc, #40]	@ (801675c <std+0x60>)
 8016732:	429c      	cmp	r4, r3
 8016734:	d005      	beq.n	8016742 <std+0x46>
 8016736:	4b0a      	ldr	r3, [pc, #40]	@ (8016760 <std+0x64>)
 8016738:	429c      	cmp	r4, r3
 801673a:	d002      	beq.n	8016742 <std+0x46>
 801673c:	4b09      	ldr	r3, [pc, #36]	@ (8016764 <std+0x68>)
 801673e:	429c      	cmp	r4, r3
 8016740:	d103      	bne.n	801674a <std+0x4e>
 8016742:	0020      	movs	r0, r4
 8016744:	3058      	adds	r0, #88	@ 0x58
 8016746:	f000 f9ff 	bl	8016b48 <__retarget_lock_init_recursive>
 801674a:	bd10      	pop	{r4, pc}
 801674c:	080168e5 	.word	0x080168e5
 8016750:	0801690d 	.word	0x0801690d
 8016754:	08016945 	.word	0x08016945
 8016758:	08016971 	.word	0x08016971
 801675c:	200042b0 	.word	0x200042b0
 8016760:	20004318 	.word	0x20004318
 8016764:	20004380 	.word	0x20004380

08016768 <stdio_exit_handler>:
 8016768:	b510      	push	{r4, lr}
 801676a:	4a03      	ldr	r2, [pc, #12]	@ (8016778 <stdio_exit_handler+0x10>)
 801676c:	4903      	ldr	r1, [pc, #12]	@ (801677c <stdio_exit_handler+0x14>)
 801676e:	4804      	ldr	r0, [pc, #16]	@ (8016780 <stdio_exit_handler+0x18>)
 8016770:	f000 f86c 	bl	801684c <_fwalk_sglue>
 8016774:	bd10      	pop	{r4, pc}
 8016776:	46c0      	nop			@ (mov r8, r8)
 8016778:	200002cc 	.word	0x200002cc
 801677c:	08018821 	.word	0x08018821
 8016780:	200002dc 	.word	0x200002dc

08016784 <cleanup_stdio>:
 8016784:	6841      	ldr	r1, [r0, #4]
 8016786:	4b0b      	ldr	r3, [pc, #44]	@ (80167b4 <cleanup_stdio+0x30>)
 8016788:	b510      	push	{r4, lr}
 801678a:	0004      	movs	r4, r0
 801678c:	4299      	cmp	r1, r3
 801678e:	d001      	beq.n	8016794 <cleanup_stdio+0x10>
 8016790:	f002 f846 	bl	8018820 <_fflush_r>
 8016794:	68a1      	ldr	r1, [r4, #8]
 8016796:	4b08      	ldr	r3, [pc, #32]	@ (80167b8 <cleanup_stdio+0x34>)
 8016798:	4299      	cmp	r1, r3
 801679a:	d002      	beq.n	80167a2 <cleanup_stdio+0x1e>
 801679c:	0020      	movs	r0, r4
 801679e:	f002 f83f 	bl	8018820 <_fflush_r>
 80167a2:	68e1      	ldr	r1, [r4, #12]
 80167a4:	4b05      	ldr	r3, [pc, #20]	@ (80167bc <cleanup_stdio+0x38>)
 80167a6:	4299      	cmp	r1, r3
 80167a8:	d002      	beq.n	80167b0 <cleanup_stdio+0x2c>
 80167aa:	0020      	movs	r0, r4
 80167ac:	f002 f838 	bl	8018820 <_fflush_r>
 80167b0:	bd10      	pop	{r4, pc}
 80167b2:	46c0      	nop			@ (mov r8, r8)
 80167b4:	200042b0 	.word	0x200042b0
 80167b8:	20004318 	.word	0x20004318
 80167bc:	20004380 	.word	0x20004380

080167c0 <global_stdio_init.part.0>:
 80167c0:	b510      	push	{r4, lr}
 80167c2:	4b09      	ldr	r3, [pc, #36]	@ (80167e8 <global_stdio_init.part.0+0x28>)
 80167c4:	4a09      	ldr	r2, [pc, #36]	@ (80167ec <global_stdio_init.part.0+0x2c>)
 80167c6:	2104      	movs	r1, #4
 80167c8:	601a      	str	r2, [r3, #0]
 80167ca:	4809      	ldr	r0, [pc, #36]	@ (80167f0 <global_stdio_init.part.0+0x30>)
 80167cc:	2200      	movs	r2, #0
 80167ce:	f7ff ff95 	bl	80166fc <std>
 80167d2:	2201      	movs	r2, #1
 80167d4:	2109      	movs	r1, #9
 80167d6:	4807      	ldr	r0, [pc, #28]	@ (80167f4 <global_stdio_init.part.0+0x34>)
 80167d8:	f7ff ff90 	bl	80166fc <std>
 80167dc:	2202      	movs	r2, #2
 80167de:	2112      	movs	r1, #18
 80167e0:	4805      	ldr	r0, [pc, #20]	@ (80167f8 <global_stdio_init.part.0+0x38>)
 80167e2:	f7ff ff8b 	bl	80166fc <std>
 80167e6:	bd10      	pop	{r4, pc}
 80167e8:	200043e8 	.word	0x200043e8
 80167ec:	08016769 	.word	0x08016769
 80167f0:	200042b0 	.word	0x200042b0
 80167f4:	20004318 	.word	0x20004318
 80167f8:	20004380 	.word	0x20004380

080167fc <__sfp_lock_acquire>:
 80167fc:	b510      	push	{r4, lr}
 80167fe:	4802      	ldr	r0, [pc, #8]	@ (8016808 <__sfp_lock_acquire+0xc>)
 8016800:	f000 f9a3 	bl	8016b4a <__retarget_lock_acquire_recursive>
 8016804:	bd10      	pop	{r4, pc}
 8016806:	46c0      	nop			@ (mov r8, r8)
 8016808:	200043f1 	.word	0x200043f1

0801680c <__sfp_lock_release>:
 801680c:	b510      	push	{r4, lr}
 801680e:	4802      	ldr	r0, [pc, #8]	@ (8016818 <__sfp_lock_release+0xc>)
 8016810:	f000 f99c 	bl	8016b4c <__retarget_lock_release_recursive>
 8016814:	bd10      	pop	{r4, pc}
 8016816:	46c0      	nop			@ (mov r8, r8)
 8016818:	200043f1 	.word	0x200043f1

0801681c <__sinit>:
 801681c:	b510      	push	{r4, lr}
 801681e:	0004      	movs	r4, r0
 8016820:	f7ff ffec 	bl	80167fc <__sfp_lock_acquire>
 8016824:	6a23      	ldr	r3, [r4, #32]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d002      	beq.n	8016830 <__sinit+0x14>
 801682a:	f7ff ffef 	bl	801680c <__sfp_lock_release>
 801682e:	bd10      	pop	{r4, pc}
 8016830:	4b04      	ldr	r3, [pc, #16]	@ (8016844 <__sinit+0x28>)
 8016832:	6223      	str	r3, [r4, #32]
 8016834:	4b04      	ldr	r3, [pc, #16]	@ (8016848 <__sinit+0x2c>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d1f6      	bne.n	801682a <__sinit+0xe>
 801683c:	f7ff ffc0 	bl	80167c0 <global_stdio_init.part.0>
 8016840:	e7f3      	b.n	801682a <__sinit+0xe>
 8016842:	46c0      	nop			@ (mov r8, r8)
 8016844:	08016785 	.word	0x08016785
 8016848:	200043e8 	.word	0x200043e8

0801684c <_fwalk_sglue>:
 801684c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801684e:	0014      	movs	r4, r2
 8016850:	2600      	movs	r6, #0
 8016852:	9000      	str	r0, [sp, #0]
 8016854:	9101      	str	r1, [sp, #4]
 8016856:	68a5      	ldr	r5, [r4, #8]
 8016858:	6867      	ldr	r7, [r4, #4]
 801685a:	3f01      	subs	r7, #1
 801685c:	d504      	bpl.n	8016868 <_fwalk_sglue+0x1c>
 801685e:	6824      	ldr	r4, [r4, #0]
 8016860:	2c00      	cmp	r4, #0
 8016862:	d1f8      	bne.n	8016856 <_fwalk_sglue+0xa>
 8016864:	0030      	movs	r0, r6
 8016866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016868:	89ab      	ldrh	r3, [r5, #12]
 801686a:	2b01      	cmp	r3, #1
 801686c:	d908      	bls.n	8016880 <_fwalk_sglue+0x34>
 801686e:	220e      	movs	r2, #14
 8016870:	5eab      	ldrsh	r3, [r5, r2]
 8016872:	3301      	adds	r3, #1
 8016874:	d004      	beq.n	8016880 <_fwalk_sglue+0x34>
 8016876:	0029      	movs	r1, r5
 8016878:	9800      	ldr	r0, [sp, #0]
 801687a:	9b01      	ldr	r3, [sp, #4]
 801687c:	4798      	blx	r3
 801687e:	4306      	orrs	r6, r0
 8016880:	3568      	adds	r5, #104	@ 0x68
 8016882:	e7ea      	b.n	801685a <_fwalk_sglue+0xe>

08016884 <iprintf>:
 8016884:	b40f      	push	{r0, r1, r2, r3}
 8016886:	b507      	push	{r0, r1, r2, lr}
 8016888:	4905      	ldr	r1, [pc, #20]	@ (80168a0 <iprintf+0x1c>)
 801688a:	ab04      	add	r3, sp, #16
 801688c:	6808      	ldr	r0, [r1, #0]
 801688e:	cb04      	ldmia	r3!, {r2}
 8016890:	6881      	ldr	r1, [r0, #8]
 8016892:	9301      	str	r3, [sp, #4]
 8016894:	f001 fe22 	bl	80184dc <_vfiprintf_r>
 8016898:	b003      	add	sp, #12
 801689a:	bc08      	pop	{r3}
 801689c:	b004      	add	sp, #16
 801689e:	4718      	bx	r3
 80168a0:	200002d8 	.word	0x200002d8

080168a4 <siprintf>:
 80168a4:	b40e      	push	{r1, r2, r3}
 80168a6:	b500      	push	{lr}
 80168a8:	490b      	ldr	r1, [pc, #44]	@ (80168d8 <siprintf+0x34>)
 80168aa:	b09c      	sub	sp, #112	@ 0x70
 80168ac:	ab1d      	add	r3, sp, #116	@ 0x74
 80168ae:	9002      	str	r0, [sp, #8]
 80168b0:	9006      	str	r0, [sp, #24]
 80168b2:	9107      	str	r1, [sp, #28]
 80168b4:	9104      	str	r1, [sp, #16]
 80168b6:	4809      	ldr	r0, [pc, #36]	@ (80168dc <siprintf+0x38>)
 80168b8:	4909      	ldr	r1, [pc, #36]	@ (80168e0 <siprintf+0x3c>)
 80168ba:	cb04      	ldmia	r3!, {r2}
 80168bc:	9105      	str	r1, [sp, #20]
 80168be:	6800      	ldr	r0, [r0, #0]
 80168c0:	a902      	add	r1, sp, #8
 80168c2:	9301      	str	r3, [sp, #4]
 80168c4:	f001 fce4 	bl	8018290 <_svfiprintf_r>
 80168c8:	2200      	movs	r2, #0
 80168ca:	9b02      	ldr	r3, [sp, #8]
 80168cc:	701a      	strb	r2, [r3, #0]
 80168ce:	b01c      	add	sp, #112	@ 0x70
 80168d0:	bc08      	pop	{r3}
 80168d2:	b003      	add	sp, #12
 80168d4:	4718      	bx	r3
 80168d6:	46c0      	nop			@ (mov r8, r8)
 80168d8:	7fffffff 	.word	0x7fffffff
 80168dc:	200002d8 	.word	0x200002d8
 80168e0:	ffff0208 	.word	0xffff0208

080168e4 <__sread>:
 80168e4:	b570      	push	{r4, r5, r6, lr}
 80168e6:	000c      	movs	r4, r1
 80168e8:	250e      	movs	r5, #14
 80168ea:	5f49      	ldrsh	r1, [r1, r5]
 80168ec:	f000 f8da 	bl	8016aa4 <_read_r>
 80168f0:	2800      	cmp	r0, #0
 80168f2:	db03      	blt.n	80168fc <__sread+0x18>
 80168f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80168f6:	181b      	adds	r3, r3, r0
 80168f8:	6563      	str	r3, [r4, #84]	@ 0x54
 80168fa:	bd70      	pop	{r4, r5, r6, pc}
 80168fc:	89a3      	ldrh	r3, [r4, #12]
 80168fe:	4a02      	ldr	r2, [pc, #8]	@ (8016908 <__sread+0x24>)
 8016900:	4013      	ands	r3, r2
 8016902:	81a3      	strh	r3, [r4, #12]
 8016904:	e7f9      	b.n	80168fa <__sread+0x16>
 8016906:	46c0      	nop			@ (mov r8, r8)
 8016908:	ffffefff 	.word	0xffffefff

0801690c <__swrite>:
 801690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801690e:	001f      	movs	r7, r3
 8016910:	898b      	ldrh	r3, [r1, #12]
 8016912:	0005      	movs	r5, r0
 8016914:	000c      	movs	r4, r1
 8016916:	0016      	movs	r6, r2
 8016918:	05db      	lsls	r3, r3, #23
 801691a:	d505      	bpl.n	8016928 <__swrite+0x1c>
 801691c:	230e      	movs	r3, #14
 801691e:	5ec9      	ldrsh	r1, [r1, r3]
 8016920:	2200      	movs	r2, #0
 8016922:	2302      	movs	r3, #2
 8016924:	f000 f8aa 	bl	8016a7c <_lseek_r>
 8016928:	89a3      	ldrh	r3, [r4, #12]
 801692a:	4a05      	ldr	r2, [pc, #20]	@ (8016940 <__swrite+0x34>)
 801692c:	0028      	movs	r0, r5
 801692e:	4013      	ands	r3, r2
 8016930:	81a3      	strh	r3, [r4, #12]
 8016932:	0032      	movs	r2, r6
 8016934:	230e      	movs	r3, #14
 8016936:	5ee1      	ldrsh	r1, [r4, r3]
 8016938:	003b      	movs	r3, r7
 801693a:	f000 f8c7 	bl	8016acc <_write_r>
 801693e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016940:	ffffefff 	.word	0xffffefff

08016944 <__sseek>:
 8016944:	b570      	push	{r4, r5, r6, lr}
 8016946:	000c      	movs	r4, r1
 8016948:	250e      	movs	r5, #14
 801694a:	5f49      	ldrsh	r1, [r1, r5]
 801694c:	f000 f896 	bl	8016a7c <_lseek_r>
 8016950:	89a3      	ldrh	r3, [r4, #12]
 8016952:	1c42      	adds	r2, r0, #1
 8016954:	d103      	bne.n	801695e <__sseek+0x1a>
 8016956:	4a05      	ldr	r2, [pc, #20]	@ (801696c <__sseek+0x28>)
 8016958:	4013      	ands	r3, r2
 801695a:	81a3      	strh	r3, [r4, #12]
 801695c:	bd70      	pop	{r4, r5, r6, pc}
 801695e:	2280      	movs	r2, #128	@ 0x80
 8016960:	0152      	lsls	r2, r2, #5
 8016962:	4313      	orrs	r3, r2
 8016964:	81a3      	strh	r3, [r4, #12]
 8016966:	6560      	str	r0, [r4, #84]	@ 0x54
 8016968:	e7f8      	b.n	801695c <__sseek+0x18>
 801696a:	46c0      	nop			@ (mov r8, r8)
 801696c:	ffffefff 	.word	0xffffefff

08016970 <__sclose>:
 8016970:	b510      	push	{r4, lr}
 8016972:	230e      	movs	r3, #14
 8016974:	5ec9      	ldrsh	r1, [r1, r3]
 8016976:	f000 f86f 	bl	8016a58 <_close_r>
 801697a:	bd10      	pop	{r4, pc}

0801697c <_vsniprintf_r>:
 801697c:	b530      	push	{r4, r5, lr}
 801697e:	0014      	movs	r4, r2
 8016980:	0005      	movs	r5, r0
 8016982:	001a      	movs	r2, r3
 8016984:	b09b      	sub	sp, #108	@ 0x6c
 8016986:	2c00      	cmp	r4, #0
 8016988:	da05      	bge.n	8016996 <_vsniprintf_r+0x1a>
 801698a:	238b      	movs	r3, #139	@ 0x8b
 801698c:	6003      	str	r3, [r0, #0]
 801698e:	2001      	movs	r0, #1
 8016990:	4240      	negs	r0, r0
 8016992:	b01b      	add	sp, #108	@ 0x6c
 8016994:	bd30      	pop	{r4, r5, pc}
 8016996:	2382      	movs	r3, #130	@ 0x82
 8016998:	4668      	mov	r0, sp
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	8183      	strh	r3, [r0, #12]
 801699e:	2300      	movs	r3, #0
 80169a0:	9100      	str	r1, [sp, #0]
 80169a2:	9104      	str	r1, [sp, #16]
 80169a4:	429c      	cmp	r4, r3
 80169a6:	d000      	beq.n	80169aa <_vsniprintf_r+0x2e>
 80169a8:	1e63      	subs	r3, r4, #1
 80169aa:	9302      	str	r3, [sp, #8]
 80169ac:	9305      	str	r3, [sp, #20]
 80169ae:	2301      	movs	r3, #1
 80169b0:	4669      	mov	r1, sp
 80169b2:	425b      	negs	r3, r3
 80169b4:	81cb      	strh	r3, [r1, #14]
 80169b6:	0028      	movs	r0, r5
 80169b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80169ba:	f001 fc69 	bl	8018290 <_svfiprintf_r>
 80169be:	1c43      	adds	r3, r0, #1
 80169c0:	da01      	bge.n	80169c6 <_vsniprintf_r+0x4a>
 80169c2:	238b      	movs	r3, #139	@ 0x8b
 80169c4:	602b      	str	r3, [r5, #0]
 80169c6:	2c00      	cmp	r4, #0
 80169c8:	d0e3      	beq.n	8016992 <_vsniprintf_r+0x16>
 80169ca:	2200      	movs	r2, #0
 80169cc:	9b00      	ldr	r3, [sp, #0]
 80169ce:	701a      	strb	r2, [r3, #0]
 80169d0:	e7df      	b.n	8016992 <_vsniprintf_r+0x16>
	...

080169d4 <vsniprintf>:
 80169d4:	b513      	push	{r0, r1, r4, lr}
 80169d6:	4c04      	ldr	r4, [pc, #16]	@ (80169e8 <vsniprintf+0x14>)
 80169d8:	9300      	str	r3, [sp, #0]
 80169da:	0013      	movs	r3, r2
 80169dc:	000a      	movs	r2, r1
 80169de:	0001      	movs	r1, r0
 80169e0:	6820      	ldr	r0, [r4, #0]
 80169e2:	f7ff ffcb 	bl	801697c <_vsniprintf_r>
 80169e6:	bd16      	pop	{r1, r2, r4, pc}
 80169e8:	200002d8 	.word	0x200002d8

080169ec <memset>:
 80169ec:	0003      	movs	r3, r0
 80169ee:	1882      	adds	r2, r0, r2
 80169f0:	4293      	cmp	r3, r2
 80169f2:	d100      	bne.n	80169f6 <memset+0xa>
 80169f4:	4770      	bx	lr
 80169f6:	7019      	strb	r1, [r3, #0]
 80169f8:	3301      	adds	r3, #1
 80169fa:	e7f9      	b.n	80169f0 <memset+0x4>

080169fc <strncpy>:
 80169fc:	0003      	movs	r3, r0
 80169fe:	b530      	push	{r4, r5, lr}
 8016a00:	001d      	movs	r5, r3
 8016a02:	2a00      	cmp	r2, #0
 8016a04:	d006      	beq.n	8016a14 <strncpy+0x18>
 8016a06:	780c      	ldrb	r4, [r1, #0]
 8016a08:	3a01      	subs	r2, #1
 8016a0a:	3301      	adds	r3, #1
 8016a0c:	702c      	strb	r4, [r5, #0]
 8016a0e:	3101      	adds	r1, #1
 8016a10:	2c00      	cmp	r4, #0
 8016a12:	d1f5      	bne.n	8016a00 <strncpy+0x4>
 8016a14:	2100      	movs	r1, #0
 8016a16:	189a      	adds	r2, r3, r2
 8016a18:	4293      	cmp	r3, r2
 8016a1a:	d100      	bne.n	8016a1e <strncpy+0x22>
 8016a1c:	bd30      	pop	{r4, r5, pc}
 8016a1e:	7019      	strb	r1, [r3, #0]
 8016a20:	3301      	adds	r3, #1
 8016a22:	e7f9      	b.n	8016a18 <strncpy+0x1c>

08016a24 <strstr>:
 8016a24:	780a      	ldrb	r2, [r1, #0]
 8016a26:	b530      	push	{r4, r5, lr}
 8016a28:	2a00      	cmp	r2, #0
 8016a2a:	d10c      	bne.n	8016a46 <strstr+0x22>
 8016a2c:	bd30      	pop	{r4, r5, pc}
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d108      	bne.n	8016a44 <strstr+0x20>
 8016a32:	2301      	movs	r3, #1
 8016a34:	5ccc      	ldrb	r4, [r1, r3]
 8016a36:	2c00      	cmp	r4, #0
 8016a38:	d0f8      	beq.n	8016a2c <strstr+0x8>
 8016a3a:	5cc5      	ldrb	r5, [r0, r3]
 8016a3c:	42a5      	cmp	r5, r4
 8016a3e:	d101      	bne.n	8016a44 <strstr+0x20>
 8016a40:	3301      	adds	r3, #1
 8016a42:	e7f7      	b.n	8016a34 <strstr+0x10>
 8016a44:	3001      	adds	r0, #1
 8016a46:	7803      	ldrb	r3, [r0, #0]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d1f0      	bne.n	8016a2e <strstr+0xa>
 8016a4c:	0018      	movs	r0, r3
 8016a4e:	e7ed      	b.n	8016a2c <strstr+0x8>

08016a50 <_localeconv_r>:
 8016a50:	4800      	ldr	r0, [pc, #0]	@ (8016a54 <_localeconv_r+0x4>)
 8016a52:	4770      	bx	lr
 8016a54:	20000418 	.word	0x20000418

08016a58 <_close_r>:
 8016a58:	2300      	movs	r3, #0
 8016a5a:	b570      	push	{r4, r5, r6, lr}
 8016a5c:	4d06      	ldr	r5, [pc, #24]	@ (8016a78 <_close_r+0x20>)
 8016a5e:	0004      	movs	r4, r0
 8016a60:	0008      	movs	r0, r1
 8016a62:	602b      	str	r3, [r5, #0]
 8016a64:	f7f1 fc7e 	bl	8008364 <_close>
 8016a68:	1c43      	adds	r3, r0, #1
 8016a6a:	d103      	bne.n	8016a74 <_close_r+0x1c>
 8016a6c:	682b      	ldr	r3, [r5, #0]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d000      	beq.n	8016a74 <_close_r+0x1c>
 8016a72:	6023      	str	r3, [r4, #0]
 8016a74:	bd70      	pop	{r4, r5, r6, pc}
 8016a76:	46c0      	nop			@ (mov r8, r8)
 8016a78:	200043ec 	.word	0x200043ec

08016a7c <_lseek_r>:
 8016a7c:	b570      	push	{r4, r5, r6, lr}
 8016a7e:	0004      	movs	r4, r0
 8016a80:	0008      	movs	r0, r1
 8016a82:	0011      	movs	r1, r2
 8016a84:	001a      	movs	r2, r3
 8016a86:	2300      	movs	r3, #0
 8016a88:	4d05      	ldr	r5, [pc, #20]	@ (8016aa0 <_lseek_r+0x24>)
 8016a8a:	602b      	str	r3, [r5, #0]
 8016a8c:	f7f1 fc8b 	bl	80083a6 <_lseek>
 8016a90:	1c43      	adds	r3, r0, #1
 8016a92:	d103      	bne.n	8016a9c <_lseek_r+0x20>
 8016a94:	682b      	ldr	r3, [r5, #0]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d000      	beq.n	8016a9c <_lseek_r+0x20>
 8016a9a:	6023      	str	r3, [r4, #0]
 8016a9c:	bd70      	pop	{r4, r5, r6, pc}
 8016a9e:	46c0      	nop			@ (mov r8, r8)
 8016aa0:	200043ec 	.word	0x200043ec

08016aa4 <_read_r>:
 8016aa4:	b570      	push	{r4, r5, r6, lr}
 8016aa6:	0004      	movs	r4, r0
 8016aa8:	0008      	movs	r0, r1
 8016aaa:	0011      	movs	r1, r2
 8016aac:	001a      	movs	r2, r3
 8016aae:	2300      	movs	r3, #0
 8016ab0:	4d05      	ldr	r5, [pc, #20]	@ (8016ac8 <_read_r+0x24>)
 8016ab2:	602b      	str	r3, [r5, #0]
 8016ab4:	f7f1 fc39 	bl	800832a <_read>
 8016ab8:	1c43      	adds	r3, r0, #1
 8016aba:	d103      	bne.n	8016ac4 <_read_r+0x20>
 8016abc:	682b      	ldr	r3, [r5, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d000      	beq.n	8016ac4 <_read_r+0x20>
 8016ac2:	6023      	str	r3, [r4, #0]
 8016ac4:	bd70      	pop	{r4, r5, r6, pc}
 8016ac6:	46c0      	nop			@ (mov r8, r8)
 8016ac8:	200043ec 	.word	0x200043ec

08016acc <_write_r>:
 8016acc:	b570      	push	{r4, r5, r6, lr}
 8016ace:	0004      	movs	r4, r0
 8016ad0:	0008      	movs	r0, r1
 8016ad2:	0011      	movs	r1, r2
 8016ad4:	001a      	movs	r2, r3
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	4d05      	ldr	r5, [pc, #20]	@ (8016af0 <_write_r+0x24>)
 8016ada:	602b      	str	r3, [r5, #0]
 8016adc:	f7f2 f848 	bl	8008b70 <_write>
 8016ae0:	1c43      	adds	r3, r0, #1
 8016ae2:	d103      	bne.n	8016aec <_write_r+0x20>
 8016ae4:	682b      	ldr	r3, [r5, #0]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d000      	beq.n	8016aec <_write_r+0x20>
 8016aea:	6023      	str	r3, [r4, #0]
 8016aec:	bd70      	pop	{r4, r5, r6, pc}
 8016aee:	46c0      	nop			@ (mov r8, r8)
 8016af0:	200043ec 	.word	0x200043ec

08016af4 <__errno>:
 8016af4:	4b01      	ldr	r3, [pc, #4]	@ (8016afc <__errno+0x8>)
 8016af6:	6818      	ldr	r0, [r3, #0]
 8016af8:	4770      	bx	lr
 8016afa:	46c0      	nop			@ (mov r8, r8)
 8016afc:	200002d8 	.word	0x200002d8

08016b00 <__libc_init_array>:
 8016b00:	b570      	push	{r4, r5, r6, lr}
 8016b02:	2600      	movs	r6, #0
 8016b04:	4c0c      	ldr	r4, [pc, #48]	@ (8016b38 <__libc_init_array+0x38>)
 8016b06:	4d0d      	ldr	r5, [pc, #52]	@ (8016b3c <__libc_init_array+0x3c>)
 8016b08:	1b64      	subs	r4, r4, r5
 8016b0a:	10a4      	asrs	r4, r4, #2
 8016b0c:	42a6      	cmp	r6, r4
 8016b0e:	d109      	bne.n	8016b24 <__libc_init_array+0x24>
 8016b10:	2600      	movs	r6, #0
 8016b12:	f002 fe57 	bl	80197c4 <_init>
 8016b16:	4c0a      	ldr	r4, [pc, #40]	@ (8016b40 <__libc_init_array+0x40>)
 8016b18:	4d0a      	ldr	r5, [pc, #40]	@ (8016b44 <__libc_init_array+0x44>)
 8016b1a:	1b64      	subs	r4, r4, r5
 8016b1c:	10a4      	asrs	r4, r4, #2
 8016b1e:	42a6      	cmp	r6, r4
 8016b20:	d105      	bne.n	8016b2e <__libc_init_array+0x2e>
 8016b22:	bd70      	pop	{r4, r5, r6, pc}
 8016b24:	00b3      	lsls	r3, r6, #2
 8016b26:	58eb      	ldr	r3, [r5, r3]
 8016b28:	4798      	blx	r3
 8016b2a:	3601      	adds	r6, #1
 8016b2c:	e7ee      	b.n	8016b0c <__libc_init_array+0xc>
 8016b2e:	00b3      	lsls	r3, r6, #2
 8016b30:	58eb      	ldr	r3, [r5, r3]
 8016b32:	4798      	blx	r3
 8016b34:	3601      	adds	r6, #1
 8016b36:	e7f2      	b.n	8016b1e <__libc_init_array+0x1e>
 8016b38:	0801a878 	.word	0x0801a878
 8016b3c:	0801a878 	.word	0x0801a878
 8016b40:	0801a87c 	.word	0x0801a87c
 8016b44:	0801a878 	.word	0x0801a878

08016b48 <__retarget_lock_init_recursive>:
 8016b48:	4770      	bx	lr

08016b4a <__retarget_lock_acquire_recursive>:
 8016b4a:	4770      	bx	lr

08016b4c <__retarget_lock_release_recursive>:
 8016b4c:	4770      	bx	lr

08016b4e <memchr>:
 8016b4e:	b2c9      	uxtb	r1, r1
 8016b50:	1882      	adds	r2, r0, r2
 8016b52:	4290      	cmp	r0, r2
 8016b54:	d101      	bne.n	8016b5a <memchr+0xc>
 8016b56:	2000      	movs	r0, #0
 8016b58:	4770      	bx	lr
 8016b5a:	7803      	ldrb	r3, [r0, #0]
 8016b5c:	428b      	cmp	r3, r1
 8016b5e:	d0fb      	beq.n	8016b58 <memchr+0xa>
 8016b60:	3001      	adds	r0, #1
 8016b62:	e7f6      	b.n	8016b52 <memchr+0x4>

08016b64 <memcpy>:
 8016b64:	2300      	movs	r3, #0
 8016b66:	b510      	push	{r4, lr}
 8016b68:	429a      	cmp	r2, r3
 8016b6a:	d100      	bne.n	8016b6e <memcpy+0xa>
 8016b6c:	bd10      	pop	{r4, pc}
 8016b6e:	5ccc      	ldrb	r4, [r1, r3]
 8016b70:	54c4      	strb	r4, [r0, r3]
 8016b72:	3301      	adds	r3, #1
 8016b74:	e7f8      	b.n	8016b68 <memcpy+0x4>

08016b76 <quorem>:
 8016b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b78:	6902      	ldr	r2, [r0, #16]
 8016b7a:	690f      	ldr	r7, [r1, #16]
 8016b7c:	b087      	sub	sp, #28
 8016b7e:	0006      	movs	r6, r0
 8016b80:	000b      	movs	r3, r1
 8016b82:	2000      	movs	r0, #0
 8016b84:	9102      	str	r1, [sp, #8]
 8016b86:	42ba      	cmp	r2, r7
 8016b88:	db6d      	blt.n	8016c66 <quorem+0xf0>
 8016b8a:	3f01      	subs	r7, #1
 8016b8c:	00bc      	lsls	r4, r7, #2
 8016b8e:	3314      	adds	r3, #20
 8016b90:	9305      	str	r3, [sp, #20]
 8016b92:	191b      	adds	r3, r3, r4
 8016b94:	9303      	str	r3, [sp, #12]
 8016b96:	0033      	movs	r3, r6
 8016b98:	3314      	adds	r3, #20
 8016b9a:	191c      	adds	r4, r3, r4
 8016b9c:	9301      	str	r3, [sp, #4]
 8016b9e:	6823      	ldr	r3, [r4, #0]
 8016ba0:	9304      	str	r3, [sp, #16]
 8016ba2:	9b03      	ldr	r3, [sp, #12]
 8016ba4:	9804      	ldr	r0, [sp, #16]
 8016ba6:	681d      	ldr	r5, [r3, #0]
 8016ba8:	3501      	adds	r5, #1
 8016baa:	0029      	movs	r1, r5
 8016bac:	f7e9 fac8 	bl	8000140 <__udivsi3>
 8016bb0:	9b04      	ldr	r3, [sp, #16]
 8016bb2:	9000      	str	r0, [sp, #0]
 8016bb4:	42ab      	cmp	r3, r5
 8016bb6:	d32b      	bcc.n	8016c10 <quorem+0x9a>
 8016bb8:	9b05      	ldr	r3, [sp, #20]
 8016bba:	9d01      	ldr	r5, [sp, #4]
 8016bbc:	469c      	mov	ip, r3
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	9305      	str	r3, [sp, #20]
 8016bc2:	9304      	str	r3, [sp, #16]
 8016bc4:	4662      	mov	r2, ip
 8016bc6:	ca08      	ldmia	r2!, {r3}
 8016bc8:	6828      	ldr	r0, [r5, #0]
 8016bca:	4694      	mov	ip, r2
 8016bcc:	9a00      	ldr	r2, [sp, #0]
 8016bce:	b299      	uxth	r1, r3
 8016bd0:	4351      	muls	r1, r2
 8016bd2:	9a05      	ldr	r2, [sp, #20]
 8016bd4:	0c1b      	lsrs	r3, r3, #16
 8016bd6:	1889      	adds	r1, r1, r2
 8016bd8:	9a00      	ldr	r2, [sp, #0]
 8016bda:	4353      	muls	r3, r2
 8016bdc:	0c0a      	lsrs	r2, r1, #16
 8016bde:	189b      	adds	r3, r3, r2
 8016be0:	0c1a      	lsrs	r2, r3, #16
 8016be2:	b289      	uxth	r1, r1
 8016be4:	9205      	str	r2, [sp, #20]
 8016be6:	b282      	uxth	r2, r0
 8016be8:	1a52      	subs	r2, r2, r1
 8016bea:	9904      	ldr	r1, [sp, #16]
 8016bec:	0c00      	lsrs	r0, r0, #16
 8016bee:	1852      	adds	r2, r2, r1
 8016bf0:	b29b      	uxth	r3, r3
 8016bf2:	1411      	asrs	r1, r2, #16
 8016bf4:	1ac3      	subs	r3, r0, r3
 8016bf6:	185b      	adds	r3, r3, r1
 8016bf8:	1419      	asrs	r1, r3, #16
 8016bfa:	b292      	uxth	r2, r2
 8016bfc:	041b      	lsls	r3, r3, #16
 8016bfe:	431a      	orrs	r2, r3
 8016c00:	9b03      	ldr	r3, [sp, #12]
 8016c02:	9104      	str	r1, [sp, #16]
 8016c04:	c504      	stmia	r5!, {r2}
 8016c06:	4563      	cmp	r3, ip
 8016c08:	d2dc      	bcs.n	8016bc4 <quorem+0x4e>
 8016c0a:	6823      	ldr	r3, [r4, #0]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d030      	beq.n	8016c72 <quorem+0xfc>
 8016c10:	0030      	movs	r0, r6
 8016c12:	9902      	ldr	r1, [sp, #8]
 8016c14:	f001 f9c6 	bl	8017fa4 <__mcmp>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	db23      	blt.n	8016c64 <quorem+0xee>
 8016c1c:	0034      	movs	r4, r6
 8016c1e:	2500      	movs	r5, #0
 8016c20:	9902      	ldr	r1, [sp, #8]
 8016c22:	3414      	adds	r4, #20
 8016c24:	3114      	adds	r1, #20
 8016c26:	6823      	ldr	r3, [r4, #0]
 8016c28:	c901      	ldmia	r1!, {r0}
 8016c2a:	9302      	str	r3, [sp, #8]
 8016c2c:	466b      	mov	r3, sp
 8016c2e:	891b      	ldrh	r3, [r3, #8]
 8016c30:	b282      	uxth	r2, r0
 8016c32:	1a9a      	subs	r2, r3, r2
 8016c34:	9b02      	ldr	r3, [sp, #8]
 8016c36:	1952      	adds	r2, r2, r5
 8016c38:	0c00      	lsrs	r0, r0, #16
 8016c3a:	0c1b      	lsrs	r3, r3, #16
 8016c3c:	1a1b      	subs	r3, r3, r0
 8016c3e:	1410      	asrs	r0, r2, #16
 8016c40:	181b      	adds	r3, r3, r0
 8016c42:	141d      	asrs	r5, r3, #16
 8016c44:	b292      	uxth	r2, r2
 8016c46:	041b      	lsls	r3, r3, #16
 8016c48:	431a      	orrs	r2, r3
 8016c4a:	9b03      	ldr	r3, [sp, #12]
 8016c4c:	c404      	stmia	r4!, {r2}
 8016c4e:	428b      	cmp	r3, r1
 8016c50:	d2e9      	bcs.n	8016c26 <quorem+0xb0>
 8016c52:	9a01      	ldr	r2, [sp, #4]
 8016c54:	00bb      	lsls	r3, r7, #2
 8016c56:	18d3      	adds	r3, r2, r3
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	2a00      	cmp	r2, #0
 8016c5c:	d013      	beq.n	8016c86 <quorem+0x110>
 8016c5e:	9b00      	ldr	r3, [sp, #0]
 8016c60:	3301      	adds	r3, #1
 8016c62:	9300      	str	r3, [sp, #0]
 8016c64:	9800      	ldr	r0, [sp, #0]
 8016c66:	b007      	add	sp, #28
 8016c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c6a:	6823      	ldr	r3, [r4, #0]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d104      	bne.n	8016c7a <quorem+0x104>
 8016c70:	3f01      	subs	r7, #1
 8016c72:	9b01      	ldr	r3, [sp, #4]
 8016c74:	3c04      	subs	r4, #4
 8016c76:	42a3      	cmp	r3, r4
 8016c78:	d3f7      	bcc.n	8016c6a <quorem+0xf4>
 8016c7a:	6137      	str	r7, [r6, #16]
 8016c7c:	e7c8      	b.n	8016c10 <quorem+0x9a>
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	2a00      	cmp	r2, #0
 8016c82:	d104      	bne.n	8016c8e <quorem+0x118>
 8016c84:	3f01      	subs	r7, #1
 8016c86:	9a01      	ldr	r2, [sp, #4]
 8016c88:	3b04      	subs	r3, #4
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d3f7      	bcc.n	8016c7e <quorem+0x108>
 8016c8e:	6137      	str	r7, [r6, #16]
 8016c90:	e7e5      	b.n	8016c5e <quorem+0xe8>
	...

08016c94 <_dtoa_r>:
 8016c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c96:	0014      	movs	r4, r2
 8016c98:	001d      	movs	r5, r3
 8016c9a:	69c6      	ldr	r6, [r0, #28]
 8016c9c:	b09d      	sub	sp, #116	@ 0x74
 8016c9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8016ca0:	950b      	str	r5, [sp, #44]	@ 0x2c
 8016ca2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8016ca4:	9003      	str	r0, [sp, #12]
 8016ca6:	2e00      	cmp	r6, #0
 8016ca8:	d10f      	bne.n	8016cca <_dtoa_r+0x36>
 8016caa:	2010      	movs	r0, #16
 8016cac:	f000 fe30 	bl	8017910 <malloc>
 8016cb0:	9b03      	ldr	r3, [sp, #12]
 8016cb2:	1e02      	subs	r2, r0, #0
 8016cb4:	61d8      	str	r0, [r3, #28]
 8016cb6:	d104      	bne.n	8016cc2 <_dtoa_r+0x2e>
 8016cb8:	21ef      	movs	r1, #239	@ 0xef
 8016cba:	4bc7      	ldr	r3, [pc, #796]	@ (8016fd8 <_dtoa_r+0x344>)
 8016cbc:	48c7      	ldr	r0, [pc, #796]	@ (8016fdc <_dtoa_r+0x348>)
 8016cbe:	f001 fea1 	bl	8018a04 <__assert_func>
 8016cc2:	6046      	str	r6, [r0, #4]
 8016cc4:	6086      	str	r6, [r0, #8]
 8016cc6:	6006      	str	r6, [r0, #0]
 8016cc8:	60c6      	str	r6, [r0, #12]
 8016cca:	9b03      	ldr	r3, [sp, #12]
 8016ccc:	69db      	ldr	r3, [r3, #28]
 8016cce:	6819      	ldr	r1, [r3, #0]
 8016cd0:	2900      	cmp	r1, #0
 8016cd2:	d00b      	beq.n	8016cec <_dtoa_r+0x58>
 8016cd4:	685a      	ldr	r2, [r3, #4]
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	4093      	lsls	r3, r2
 8016cda:	604a      	str	r2, [r1, #4]
 8016cdc:	608b      	str	r3, [r1, #8]
 8016cde:	9803      	ldr	r0, [sp, #12]
 8016ce0:	f000 ff16 	bl	8017b10 <_Bfree>
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	9b03      	ldr	r3, [sp, #12]
 8016ce8:	69db      	ldr	r3, [r3, #28]
 8016cea:	601a      	str	r2, [r3, #0]
 8016cec:	2d00      	cmp	r5, #0
 8016cee:	da1e      	bge.n	8016d2e <_dtoa_r+0x9a>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	603b      	str	r3, [r7, #0]
 8016cf4:	006b      	lsls	r3, r5, #1
 8016cf6:	085b      	lsrs	r3, r3, #1
 8016cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016cfa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016cfc:	4bb8      	ldr	r3, [pc, #736]	@ (8016fe0 <_dtoa_r+0x34c>)
 8016cfe:	4ab8      	ldr	r2, [pc, #736]	@ (8016fe0 <_dtoa_r+0x34c>)
 8016d00:	403b      	ands	r3, r7
 8016d02:	4293      	cmp	r3, r2
 8016d04:	d116      	bne.n	8016d34 <_dtoa_r+0xa0>
 8016d06:	4bb7      	ldr	r3, [pc, #732]	@ (8016fe4 <_dtoa_r+0x350>)
 8016d08:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016d0a:	6013      	str	r3, [r2, #0]
 8016d0c:	033b      	lsls	r3, r7, #12
 8016d0e:	0b1b      	lsrs	r3, r3, #12
 8016d10:	4323      	orrs	r3, r4
 8016d12:	d101      	bne.n	8016d18 <_dtoa_r+0x84>
 8016d14:	f000 fd83 	bl	801781e <_dtoa_r+0xb8a>
 8016d18:	4bb3      	ldr	r3, [pc, #716]	@ (8016fe8 <_dtoa_r+0x354>)
 8016d1a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016d1c:	9308      	str	r3, [sp, #32]
 8016d1e:	2a00      	cmp	r2, #0
 8016d20:	d002      	beq.n	8016d28 <_dtoa_r+0x94>
 8016d22:	4bb2      	ldr	r3, [pc, #712]	@ (8016fec <_dtoa_r+0x358>)
 8016d24:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016d26:	6013      	str	r3, [r2, #0]
 8016d28:	9808      	ldr	r0, [sp, #32]
 8016d2a:	b01d      	add	sp, #116	@ 0x74
 8016d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d2e:	2300      	movs	r3, #0
 8016d30:	603b      	str	r3, [r7, #0]
 8016d32:	e7e2      	b.n	8016cfa <_dtoa_r+0x66>
 8016d34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d38:	9212      	str	r2, [sp, #72]	@ 0x48
 8016d3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016d3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016d3e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016d40:	2200      	movs	r2, #0
 8016d42:	2300      	movs	r3, #0
 8016d44:	f7e9 fb82 	bl	800044c <__aeabi_dcmpeq>
 8016d48:	1e06      	subs	r6, r0, #0
 8016d4a:	d00b      	beq.n	8016d64 <_dtoa_r+0xd0>
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016d50:	6013      	str	r3, [r2, #0]
 8016d52:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d002      	beq.n	8016d5e <_dtoa_r+0xca>
 8016d58:	4ba5      	ldr	r3, [pc, #660]	@ (8016ff0 <_dtoa_r+0x35c>)
 8016d5a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016d5c:	6013      	str	r3, [r2, #0]
 8016d5e:	4ba5      	ldr	r3, [pc, #660]	@ (8016ff4 <_dtoa_r+0x360>)
 8016d60:	9308      	str	r3, [sp, #32]
 8016d62:	e7e1      	b.n	8016d28 <_dtoa_r+0x94>
 8016d64:	ab1a      	add	r3, sp, #104	@ 0x68
 8016d66:	9301      	str	r3, [sp, #4]
 8016d68:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016d6a:	9300      	str	r3, [sp, #0]
 8016d6c:	9803      	ldr	r0, [sp, #12]
 8016d6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016d70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016d72:	f001 f9cd 	bl	8018110 <__d2b>
 8016d76:	007a      	lsls	r2, r7, #1
 8016d78:	9005      	str	r0, [sp, #20]
 8016d7a:	0d52      	lsrs	r2, r2, #21
 8016d7c:	d100      	bne.n	8016d80 <_dtoa_r+0xec>
 8016d7e:	e07b      	b.n	8016e78 <_dtoa_r+0x1e4>
 8016d80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016d82:	9618      	str	r6, [sp, #96]	@ 0x60
 8016d84:	0319      	lsls	r1, r3, #12
 8016d86:	4b9c      	ldr	r3, [pc, #624]	@ (8016ff8 <_dtoa_r+0x364>)
 8016d88:	0b09      	lsrs	r1, r1, #12
 8016d8a:	430b      	orrs	r3, r1
 8016d8c:	499b      	ldr	r1, [pc, #620]	@ (8016ffc <_dtoa_r+0x368>)
 8016d8e:	1857      	adds	r7, r2, r1
 8016d90:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016d92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016d94:	0019      	movs	r1, r3
 8016d96:	2200      	movs	r2, #0
 8016d98:	4b99      	ldr	r3, [pc, #612]	@ (8017000 <_dtoa_r+0x36c>)
 8016d9a:	f7eb fe95 	bl	8002ac8 <__aeabi_dsub>
 8016d9e:	4a99      	ldr	r2, [pc, #612]	@ (8017004 <_dtoa_r+0x370>)
 8016da0:	4b99      	ldr	r3, [pc, #612]	@ (8017008 <_dtoa_r+0x374>)
 8016da2:	f7eb fbc9 	bl	8002538 <__aeabi_dmul>
 8016da6:	4a99      	ldr	r2, [pc, #612]	@ (801700c <_dtoa_r+0x378>)
 8016da8:	4b99      	ldr	r3, [pc, #612]	@ (8017010 <_dtoa_r+0x37c>)
 8016daa:	f7ea fc1d 	bl	80015e8 <__aeabi_dadd>
 8016dae:	0004      	movs	r4, r0
 8016db0:	0038      	movs	r0, r7
 8016db2:	000d      	movs	r5, r1
 8016db4:	f7ec fa82 	bl	80032bc <__aeabi_i2d>
 8016db8:	4a96      	ldr	r2, [pc, #600]	@ (8017014 <_dtoa_r+0x380>)
 8016dba:	4b97      	ldr	r3, [pc, #604]	@ (8017018 <_dtoa_r+0x384>)
 8016dbc:	f7eb fbbc 	bl	8002538 <__aeabi_dmul>
 8016dc0:	0002      	movs	r2, r0
 8016dc2:	000b      	movs	r3, r1
 8016dc4:	0020      	movs	r0, r4
 8016dc6:	0029      	movs	r1, r5
 8016dc8:	f7ea fc0e 	bl	80015e8 <__aeabi_dadd>
 8016dcc:	0004      	movs	r4, r0
 8016dce:	000d      	movs	r5, r1
 8016dd0:	f7ec fa38 	bl	8003244 <__aeabi_d2iz>
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	9004      	str	r0, [sp, #16]
 8016dd8:	2300      	movs	r3, #0
 8016dda:	0020      	movs	r0, r4
 8016ddc:	0029      	movs	r1, r5
 8016dde:	f7e9 fb3b 	bl	8000458 <__aeabi_dcmplt>
 8016de2:	2800      	cmp	r0, #0
 8016de4:	d00b      	beq.n	8016dfe <_dtoa_r+0x16a>
 8016de6:	9804      	ldr	r0, [sp, #16]
 8016de8:	f7ec fa68 	bl	80032bc <__aeabi_i2d>
 8016dec:	002b      	movs	r3, r5
 8016dee:	0022      	movs	r2, r4
 8016df0:	f7e9 fb2c 	bl	800044c <__aeabi_dcmpeq>
 8016df4:	4243      	negs	r3, r0
 8016df6:	4158      	adcs	r0, r3
 8016df8:	9b04      	ldr	r3, [sp, #16]
 8016dfa:	1a1b      	subs	r3, r3, r0
 8016dfc:	9304      	str	r3, [sp, #16]
 8016dfe:	2301      	movs	r3, #1
 8016e00:	9315      	str	r3, [sp, #84]	@ 0x54
 8016e02:	9b04      	ldr	r3, [sp, #16]
 8016e04:	2b16      	cmp	r3, #22
 8016e06:	d810      	bhi.n	8016e2a <_dtoa_r+0x196>
 8016e08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016e0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016e0c:	9a04      	ldr	r2, [sp, #16]
 8016e0e:	4b83      	ldr	r3, [pc, #524]	@ (801701c <_dtoa_r+0x388>)
 8016e10:	00d2      	lsls	r2, r2, #3
 8016e12:	189b      	adds	r3, r3, r2
 8016e14:	681a      	ldr	r2, [r3, #0]
 8016e16:	685b      	ldr	r3, [r3, #4]
 8016e18:	f7e9 fb1e 	bl	8000458 <__aeabi_dcmplt>
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	d047      	beq.n	8016eb0 <_dtoa_r+0x21c>
 8016e20:	9b04      	ldr	r3, [sp, #16]
 8016e22:	3b01      	subs	r3, #1
 8016e24:	9304      	str	r3, [sp, #16]
 8016e26:	2300      	movs	r3, #0
 8016e28:	9315      	str	r3, [sp, #84]	@ 0x54
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016e2e:	9206      	str	r2, [sp, #24]
 8016e30:	1bdb      	subs	r3, r3, r7
 8016e32:	1e5a      	subs	r2, r3, #1
 8016e34:	d53e      	bpl.n	8016eb4 <_dtoa_r+0x220>
 8016e36:	2201      	movs	r2, #1
 8016e38:	1ad3      	subs	r3, r2, r3
 8016e3a:	9306      	str	r3, [sp, #24]
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e40:	9b04      	ldr	r3, [sp, #16]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	db38      	blt.n	8016eb8 <_dtoa_r+0x224>
 8016e46:	9a04      	ldr	r2, [sp, #16]
 8016e48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016e4a:	4694      	mov	ip, r2
 8016e4c:	4463      	add	r3, ip
 8016e4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e50:	2300      	movs	r3, #0
 8016e52:	9214      	str	r2, [sp, #80]	@ 0x50
 8016e54:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e56:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016e58:	2401      	movs	r4, #1
 8016e5a:	2b09      	cmp	r3, #9
 8016e5c:	d867      	bhi.n	8016f2e <_dtoa_r+0x29a>
 8016e5e:	2b05      	cmp	r3, #5
 8016e60:	dd02      	ble.n	8016e68 <_dtoa_r+0x1d4>
 8016e62:	2400      	movs	r4, #0
 8016e64:	3b04      	subs	r3, #4
 8016e66:	9322      	str	r3, [sp, #136]	@ 0x88
 8016e68:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016e6a:	1e98      	subs	r0, r3, #2
 8016e6c:	2803      	cmp	r0, #3
 8016e6e:	d867      	bhi.n	8016f40 <_dtoa_r+0x2ac>
 8016e70:	f7e9 f952 	bl	8000118 <__gnu_thumb1_case_uqi>
 8016e74:	5b383a2b 	.word	0x5b383a2b
 8016e78:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016e7a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016e7c:	18f6      	adds	r6, r6, r3
 8016e7e:	4b68      	ldr	r3, [pc, #416]	@ (8017020 <_dtoa_r+0x38c>)
 8016e80:	18f2      	adds	r2, r6, r3
 8016e82:	2a20      	cmp	r2, #32
 8016e84:	dd0f      	ble.n	8016ea6 <_dtoa_r+0x212>
 8016e86:	2340      	movs	r3, #64	@ 0x40
 8016e88:	1a9b      	subs	r3, r3, r2
 8016e8a:	409f      	lsls	r7, r3
 8016e8c:	4b65      	ldr	r3, [pc, #404]	@ (8017024 <_dtoa_r+0x390>)
 8016e8e:	0038      	movs	r0, r7
 8016e90:	18f3      	adds	r3, r6, r3
 8016e92:	40dc      	lsrs	r4, r3
 8016e94:	4320      	orrs	r0, r4
 8016e96:	f7ec fa3f 	bl	8003318 <__aeabi_ui2d>
 8016e9a:	2201      	movs	r2, #1
 8016e9c:	4b62      	ldr	r3, [pc, #392]	@ (8017028 <_dtoa_r+0x394>)
 8016e9e:	1e77      	subs	r7, r6, #1
 8016ea0:	18cb      	adds	r3, r1, r3
 8016ea2:	9218      	str	r2, [sp, #96]	@ 0x60
 8016ea4:	e776      	b.n	8016d94 <_dtoa_r+0x100>
 8016ea6:	2320      	movs	r3, #32
 8016ea8:	0020      	movs	r0, r4
 8016eaa:	1a9b      	subs	r3, r3, r2
 8016eac:	4098      	lsls	r0, r3
 8016eae:	e7f2      	b.n	8016e96 <_dtoa_r+0x202>
 8016eb0:	9015      	str	r0, [sp, #84]	@ 0x54
 8016eb2:	e7ba      	b.n	8016e2a <_dtoa_r+0x196>
 8016eb4:	920d      	str	r2, [sp, #52]	@ 0x34
 8016eb6:	e7c3      	b.n	8016e40 <_dtoa_r+0x1ac>
 8016eb8:	9b06      	ldr	r3, [sp, #24]
 8016eba:	9a04      	ldr	r2, [sp, #16]
 8016ebc:	1a9b      	subs	r3, r3, r2
 8016ebe:	9306      	str	r3, [sp, #24]
 8016ec0:	4253      	negs	r3, r2
 8016ec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	9314      	str	r3, [sp, #80]	@ 0x50
 8016ec8:	e7c5      	b.n	8016e56 <_dtoa_r+0x1c2>
 8016eca:	2300      	movs	r3, #0
 8016ecc:	9310      	str	r3, [sp, #64]	@ 0x40
 8016ece:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016ed0:	930e      	str	r3, [sp, #56]	@ 0x38
 8016ed2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	dc13      	bgt.n	8016f00 <_dtoa_r+0x26c>
 8016ed8:	2301      	movs	r3, #1
 8016eda:	001a      	movs	r2, r3
 8016edc:	930e      	str	r3, [sp, #56]	@ 0x38
 8016ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ee0:	9223      	str	r2, [sp, #140]	@ 0x8c
 8016ee2:	e00d      	b.n	8016f00 <_dtoa_r+0x26c>
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	e7f1      	b.n	8016ecc <_dtoa_r+0x238>
 8016ee8:	2300      	movs	r3, #0
 8016eea:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016eec:	9310      	str	r3, [sp, #64]	@ 0x40
 8016eee:	4694      	mov	ip, r2
 8016ef0:	9b04      	ldr	r3, [sp, #16]
 8016ef2:	4463      	add	r3, ip
 8016ef4:	930e      	str	r3, [sp, #56]	@ 0x38
 8016ef6:	3301      	adds	r3, #1
 8016ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	dc00      	bgt.n	8016f00 <_dtoa_r+0x26c>
 8016efe:	2301      	movs	r3, #1
 8016f00:	9a03      	ldr	r2, [sp, #12]
 8016f02:	2100      	movs	r1, #0
 8016f04:	69d0      	ldr	r0, [r2, #28]
 8016f06:	2204      	movs	r2, #4
 8016f08:	0015      	movs	r5, r2
 8016f0a:	3514      	adds	r5, #20
 8016f0c:	429d      	cmp	r5, r3
 8016f0e:	d91b      	bls.n	8016f48 <_dtoa_r+0x2b4>
 8016f10:	6041      	str	r1, [r0, #4]
 8016f12:	9803      	ldr	r0, [sp, #12]
 8016f14:	f000 fdb8 	bl	8017a88 <_Balloc>
 8016f18:	9008      	str	r0, [sp, #32]
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	d117      	bne.n	8016f4e <_dtoa_r+0x2ba>
 8016f1e:	21b0      	movs	r1, #176	@ 0xb0
 8016f20:	4b42      	ldr	r3, [pc, #264]	@ (801702c <_dtoa_r+0x398>)
 8016f22:	482e      	ldr	r0, [pc, #184]	@ (8016fdc <_dtoa_r+0x348>)
 8016f24:	9a08      	ldr	r2, [sp, #32]
 8016f26:	31ff      	adds	r1, #255	@ 0xff
 8016f28:	e6c9      	b.n	8016cbe <_dtoa_r+0x2a>
 8016f2a:	2301      	movs	r3, #1
 8016f2c:	e7dd      	b.n	8016eea <_dtoa_r+0x256>
 8016f2e:	2300      	movs	r3, #0
 8016f30:	9410      	str	r4, [sp, #64]	@ 0x40
 8016f32:	9322      	str	r3, [sp, #136]	@ 0x88
 8016f34:	3b01      	subs	r3, #1
 8016f36:	930e      	str	r3, [sp, #56]	@ 0x38
 8016f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	3313      	adds	r3, #19
 8016f3e:	e7cf      	b.n	8016ee0 <_dtoa_r+0x24c>
 8016f40:	2301      	movs	r3, #1
 8016f42:	9310      	str	r3, [sp, #64]	@ 0x40
 8016f44:	3b02      	subs	r3, #2
 8016f46:	e7f6      	b.n	8016f36 <_dtoa_r+0x2a2>
 8016f48:	3101      	adds	r1, #1
 8016f4a:	0052      	lsls	r2, r2, #1
 8016f4c:	e7dc      	b.n	8016f08 <_dtoa_r+0x274>
 8016f4e:	9b03      	ldr	r3, [sp, #12]
 8016f50:	9a08      	ldr	r2, [sp, #32]
 8016f52:	69db      	ldr	r3, [r3, #28]
 8016f54:	601a      	str	r2, [r3, #0]
 8016f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f58:	2b0e      	cmp	r3, #14
 8016f5a:	d900      	bls.n	8016f5e <_dtoa_r+0x2ca>
 8016f5c:	e0d9      	b.n	8017112 <_dtoa_r+0x47e>
 8016f5e:	2c00      	cmp	r4, #0
 8016f60:	d100      	bne.n	8016f64 <_dtoa_r+0x2d0>
 8016f62:	e0d6      	b.n	8017112 <_dtoa_r+0x47e>
 8016f64:	9b04      	ldr	r3, [sp, #16]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	dd64      	ble.n	8017034 <_dtoa_r+0x3a0>
 8016f6a:	210f      	movs	r1, #15
 8016f6c:	9a04      	ldr	r2, [sp, #16]
 8016f6e:	4b2b      	ldr	r3, [pc, #172]	@ (801701c <_dtoa_r+0x388>)
 8016f70:	400a      	ands	r2, r1
 8016f72:	00d2      	lsls	r2, r2, #3
 8016f74:	189b      	adds	r3, r3, r2
 8016f76:	681e      	ldr	r6, [r3, #0]
 8016f78:	685f      	ldr	r7, [r3, #4]
 8016f7a:	9b04      	ldr	r3, [sp, #16]
 8016f7c:	2402      	movs	r4, #2
 8016f7e:	111d      	asrs	r5, r3, #4
 8016f80:	05db      	lsls	r3, r3, #23
 8016f82:	d50a      	bpl.n	8016f9a <_dtoa_r+0x306>
 8016f84:	4b2a      	ldr	r3, [pc, #168]	@ (8017030 <_dtoa_r+0x39c>)
 8016f86:	400d      	ands	r5, r1
 8016f88:	6a1a      	ldr	r2, [r3, #32]
 8016f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016f8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016f90:	f7ea fe8e 	bl	8001cb0 <__aeabi_ddiv>
 8016f94:	900a      	str	r0, [sp, #40]	@ 0x28
 8016f96:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016f98:	3401      	adds	r4, #1
 8016f9a:	4b25      	ldr	r3, [pc, #148]	@ (8017030 <_dtoa_r+0x39c>)
 8016f9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8016f9e:	2d00      	cmp	r5, #0
 8016fa0:	d108      	bne.n	8016fb4 <_dtoa_r+0x320>
 8016fa2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016fa4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016fa6:	0032      	movs	r2, r6
 8016fa8:	003b      	movs	r3, r7
 8016faa:	f7ea fe81 	bl	8001cb0 <__aeabi_ddiv>
 8016fae:	900a      	str	r0, [sp, #40]	@ 0x28
 8016fb0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016fb2:	e05a      	b.n	801706a <_dtoa_r+0x3d6>
 8016fb4:	2301      	movs	r3, #1
 8016fb6:	421d      	tst	r5, r3
 8016fb8:	d009      	beq.n	8016fce <_dtoa_r+0x33a>
 8016fba:	18e4      	adds	r4, r4, r3
 8016fbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016fbe:	0030      	movs	r0, r6
 8016fc0:	681a      	ldr	r2, [r3, #0]
 8016fc2:	685b      	ldr	r3, [r3, #4]
 8016fc4:	0039      	movs	r1, r7
 8016fc6:	f7eb fab7 	bl	8002538 <__aeabi_dmul>
 8016fca:	0006      	movs	r6, r0
 8016fcc:	000f      	movs	r7, r1
 8016fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016fd0:	106d      	asrs	r5, r5, #1
 8016fd2:	3308      	adds	r3, #8
 8016fd4:	e7e2      	b.n	8016f9c <_dtoa_r+0x308>
 8016fd6:	46c0      	nop			@ (mov r8, r8)
 8016fd8:	0801a529 	.word	0x0801a529
 8016fdc:	0801a540 	.word	0x0801a540
 8016fe0:	7ff00000 	.word	0x7ff00000
 8016fe4:	0000270f 	.word	0x0000270f
 8016fe8:	0801a525 	.word	0x0801a525
 8016fec:	0801a528 	.word	0x0801a528
 8016ff0:	0801a4f9 	.word	0x0801a4f9
 8016ff4:	0801a4f8 	.word	0x0801a4f8
 8016ff8:	3ff00000 	.word	0x3ff00000
 8016ffc:	fffffc01 	.word	0xfffffc01
 8017000:	3ff80000 	.word	0x3ff80000
 8017004:	636f4361 	.word	0x636f4361
 8017008:	3fd287a7 	.word	0x3fd287a7
 801700c:	8b60c8b3 	.word	0x8b60c8b3
 8017010:	3fc68a28 	.word	0x3fc68a28
 8017014:	509f79fb 	.word	0x509f79fb
 8017018:	3fd34413 	.word	0x3fd34413
 801701c:	0801a638 	.word	0x0801a638
 8017020:	00000432 	.word	0x00000432
 8017024:	00000412 	.word	0x00000412
 8017028:	fe100000 	.word	0xfe100000
 801702c:	0801a598 	.word	0x0801a598
 8017030:	0801a610 	.word	0x0801a610
 8017034:	9b04      	ldr	r3, [sp, #16]
 8017036:	2402      	movs	r4, #2
 8017038:	2b00      	cmp	r3, #0
 801703a:	d016      	beq.n	801706a <_dtoa_r+0x3d6>
 801703c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801703e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017040:	220f      	movs	r2, #15
 8017042:	425d      	negs	r5, r3
 8017044:	402a      	ands	r2, r5
 8017046:	4bd7      	ldr	r3, [pc, #860]	@ (80173a4 <_dtoa_r+0x710>)
 8017048:	00d2      	lsls	r2, r2, #3
 801704a:	189b      	adds	r3, r3, r2
 801704c:	681a      	ldr	r2, [r3, #0]
 801704e:	685b      	ldr	r3, [r3, #4]
 8017050:	f7eb fa72 	bl	8002538 <__aeabi_dmul>
 8017054:	2701      	movs	r7, #1
 8017056:	2300      	movs	r3, #0
 8017058:	900a      	str	r0, [sp, #40]	@ 0x28
 801705a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801705c:	4ed2      	ldr	r6, [pc, #840]	@ (80173a8 <_dtoa_r+0x714>)
 801705e:	112d      	asrs	r5, r5, #4
 8017060:	2d00      	cmp	r5, #0
 8017062:	d000      	beq.n	8017066 <_dtoa_r+0x3d2>
 8017064:	e0ba      	b.n	80171dc <_dtoa_r+0x548>
 8017066:	2b00      	cmp	r3, #0
 8017068:	d1a1      	bne.n	8016fae <_dtoa_r+0x31a>
 801706a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801706c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801706e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017070:	2b00      	cmp	r3, #0
 8017072:	d100      	bne.n	8017076 <_dtoa_r+0x3e2>
 8017074:	e0bd      	b.n	80171f2 <_dtoa_r+0x55e>
 8017076:	2200      	movs	r2, #0
 8017078:	0030      	movs	r0, r6
 801707a:	0039      	movs	r1, r7
 801707c:	4bcb      	ldr	r3, [pc, #812]	@ (80173ac <_dtoa_r+0x718>)
 801707e:	f7e9 f9eb 	bl	8000458 <__aeabi_dcmplt>
 8017082:	2800      	cmp	r0, #0
 8017084:	d100      	bne.n	8017088 <_dtoa_r+0x3f4>
 8017086:	e0b4      	b.n	80171f2 <_dtoa_r+0x55e>
 8017088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801708a:	2b00      	cmp	r3, #0
 801708c:	d100      	bne.n	8017090 <_dtoa_r+0x3fc>
 801708e:	e0b0      	b.n	80171f2 <_dtoa_r+0x55e>
 8017090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017092:	2b00      	cmp	r3, #0
 8017094:	dd39      	ble.n	801710a <_dtoa_r+0x476>
 8017096:	9b04      	ldr	r3, [sp, #16]
 8017098:	2200      	movs	r2, #0
 801709a:	3b01      	subs	r3, #1
 801709c:	930c      	str	r3, [sp, #48]	@ 0x30
 801709e:	0030      	movs	r0, r6
 80170a0:	4bc3      	ldr	r3, [pc, #780]	@ (80173b0 <_dtoa_r+0x71c>)
 80170a2:	0039      	movs	r1, r7
 80170a4:	f7eb fa48 	bl	8002538 <__aeabi_dmul>
 80170a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80170aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80170ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170ae:	3401      	adds	r4, #1
 80170b0:	0020      	movs	r0, r4
 80170b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80170b4:	f7ec f902 	bl	80032bc <__aeabi_i2d>
 80170b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80170ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80170bc:	f7eb fa3c 	bl	8002538 <__aeabi_dmul>
 80170c0:	4bbc      	ldr	r3, [pc, #752]	@ (80173b4 <_dtoa_r+0x720>)
 80170c2:	2200      	movs	r2, #0
 80170c4:	f7ea fa90 	bl	80015e8 <__aeabi_dadd>
 80170c8:	4bbb      	ldr	r3, [pc, #748]	@ (80173b8 <_dtoa_r+0x724>)
 80170ca:	0006      	movs	r6, r0
 80170cc:	18cf      	adds	r7, r1, r3
 80170ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d000      	beq.n	80170d6 <_dtoa_r+0x442>
 80170d4:	e091      	b.n	80171fa <_dtoa_r+0x566>
 80170d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80170d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80170da:	2200      	movs	r2, #0
 80170dc:	4bb7      	ldr	r3, [pc, #732]	@ (80173bc <_dtoa_r+0x728>)
 80170de:	f7eb fcf3 	bl	8002ac8 <__aeabi_dsub>
 80170e2:	0032      	movs	r2, r6
 80170e4:	003b      	movs	r3, r7
 80170e6:	0004      	movs	r4, r0
 80170e8:	000d      	movs	r5, r1
 80170ea:	f7e9 f9c9 	bl	8000480 <__aeabi_dcmpgt>
 80170ee:	2800      	cmp	r0, #0
 80170f0:	d000      	beq.n	80170f4 <_dtoa_r+0x460>
 80170f2:	e29d      	b.n	8017630 <_dtoa_r+0x99c>
 80170f4:	2180      	movs	r1, #128	@ 0x80
 80170f6:	0609      	lsls	r1, r1, #24
 80170f8:	187b      	adds	r3, r7, r1
 80170fa:	0032      	movs	r2, r6
 80170fc:	0020      	movs	r0, r4
 80170fe:	0029      	movs	r1, r5
 8017100:	f7e9 f9aa 	bl	8000458 <__aeabi_dcmplt>
 8017104:	2800      	cmp	r0, #0
 8017106:	d000      	beq.n	801710a <_dtoa_r+0x476>
 8017108:	e130      	b.n	801736c <_dtoa_r+0x6d8>
 801710a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801710c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801710e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017110:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017112:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8017114:	2b00      	cmp	r3, #0
 8017116:	da00      	bge.n	801711a <_dtoa_r+0x486>
 8017118:	e177      	b.n	801740a <_dtoa_r+0x776>
 801711a:	9a04      	ldr	r2, [sp, #16]
 801711c:	2a0e      	cmp	r2, #14
 801711e:	dd00      	ble.n	8017122 <_dtoa_r+0x48e>
 8017120:	e173      	b.n	801740a <_dtoa_r+0x776>
 8017122:	4ba0      	ldr	r3, [pc, #640]	@ (80173a4 <_dtoa_r+0x710>)
 8017124:	00d2      	lsls	r2, r2, #3
 8017126:	189b      	adds	r3, r3, r2
 8017128:	685c      	ldr	r4, [r3, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	9306      	str	r3, [sp, #24]
 801712e:	9407      	str	r4, [sp, #28]
 8017130:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017132:	2b00      	cmp	r3, #0
 8017134:	da03      	bge.n	801713e <_dtoa_r+0x4aa>
 8017136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017138:	2b00      	cmp	r3, #0
 801713a:	dc00      	bgt.n	801713e <_dtoa_r+0x4aa>
 801713c:	e106      	b.n	801734c <_dtoa_r+0x6b8>
 801713e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017140:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017144:	9d08      	ldr	r5, [sp, #32]
 8017146:	3b01      	subs	r3, #1
 8017148:	195b      	adds	r3, r3, r5
 801714a:	930a      	str	r3, [sp, #40]	@ 0x28
 801714c:	9a06      	ldr	r2, [sp, #24]
 801714e:	9b07      	ldr	r3, [sp, #28]
 8017150:	0030      	movs	r0, r6
 8017152:	0039      	movs	r1, r7
 8017154:	f7ea fdac 	bl	8001cb0 <__aeabi_ddiv>
 8017158:	f7ec f874 	bl	8003244 <__aeabi_d2iz>
 801715c:	9009      	str	r0, [sp, #36]	@ 0x24
 801715e:	f7ec f8ad 	bl	80032bc <__aeabi_i2d>
 8017162:	9a06      	ldr	r2, [sp, #24]
 8017164:	9b07      	ldr	r3, [sp, #28]
 8017166:	f7eb f9e7 	bl	8002538 <__aeabi_dmul>
 801716a:	0002      	movs	r2, r0
 801716c:	000b      	movs	r3, r1
 801716e:	0030      	movs	r0, r6
 8017170:	0039      	movs	r1, r7
 8017172:	f7eb fca9 	bl	8002ac8 <__aeabi_dsub>
 8017176:	002b      	movs	r3, r5
 8017178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801717a:	3501      	adds	r5, #1
 801717c:	3230      	adds	r2, #48	@ 0x30
 801717e:	701a      	strb	r2, [r3, #0]
 8017180:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017182:	002c      	movs	r4, r5
 8017184:	429a      	cmp	r2, r3
 8017186:	d000      	beq.n	801718a <_dtoa_r+0x4f6>
 8017188:	e131      	b.n	80173ee <_dtoa_r+0x75a>
 801718a:	0002      	movs	r2, r0
 801718c:	000b      	movs	r3, r1
 801718e:	f7ea fa2b 	bl	80015e8 <__aeabi_dadd>
 8017192:	9a06      	ldr	r2, [sp, #24]
 8017194:	9b07      	ldr	r3, [sp, #28]
 8017196:	0006      	movs	r6, r0
 8017198:	000f      	movs	r7, r1
 801719a:	f7e9 f971 	bl	8000480 <__aeabi_dcmpgt>
 801719e:	2800      	cmp	r0, #0
 80171a0:	d000      	beq.n	80171a4 <_dtoa_r+0x510>
 80171a2:	e10f      	b.n	80173c4 <_dtoa_r+0x730>
 80171a4:	9a06      	ldr	r2, [sp, #24]
 80171a6:	9b07      	ldr	r3, [sp, #28]
 80171a8:	0030      	movs	r0, r6
 80171aa:	0039      	movs	r1, r7
 80171ac:	f7e9 f94e 	bl	800044c <__aeabi_dcmpeq>
 80171b0:	2800      	cmp	r0, #0
 80171b2:	d003      	beq.n	80171bc <_dtoa_r+0x528>
 80171b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171b6:	07dd      	lsls	r5, r3, #31
 80171b8:	d500      	bpl.n	80171bc <_dtoa_r+0x528>
 80171ba:	e103      	b.n	80173c4 <_dtoa_r+0x730>
 80171bc:	9905      	ldr	r1, [sp, #20]
 80171be:	9803      	ldr	r0, [sp, #12]
 80171c0:	f000 fca6 	bl	8017b10 <_Bfree>
 80171c4:	2300      	movs	r3, #0
 80171c6:	7023      	strb	r3, [r4, #0]
 80171c8:	9b04      	ldr	r3, [sp, #16]
 80171ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80171cc:	3301      	adds	r3, #1
 80171ce:	6013      	str	r3, [r2, #0]
 80171d0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d100      	bne.n	80171d8 <_dtoa_r+0x544>
 80171d6:	e5a7      	b.n	8016d28 <_dtoa_r+0x94>
 80171d8:	601c      	str	r4, [r3, #0]
 80171da:	e5a5      	b.n	8016d28 <_dtoa_r+0x94>
 80171dc:	423d      	tst	r5, r7
 80171de:	d005      	beq.n	80171ec <_dtoa_r+0x558>
 80171e0:	6832      	ldr	r2, [r6, #0]
 80171e2:	6873      	ldr	r3, [r6, #4]
 80171e4:	f7eb f9a8 	bl	8002538 <__aeabi_dmul>
 80171e8:	003b      	movs	r3, r7
 80171ea:	3401      	adds	r4, #1
 80171ec:	106d      	asrs	r5, r5, #1
 80171ee:	3608      	adds	r6, #8
 80171f0:	e736      	b.n	8017060 <_dtoa_r+0x3cc>
 80171f2:	9b04      	ldr	r3, [sp, #16]
 80171f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80171f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171f8:	e75a      	b.n	80170b0 <_dtoa_r+0x41c>
 80171fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80171fc:	4b69      	ldr	r3, [pc, #420]	@ (80173a4 <_dtoa_r+0x710>)
 80171fe:	3a01      	subs	r2, #1
 8017200:	00d2      	lsls	r2, r2, #3
 8017202:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017204:	189b      	adds	r3, r3, r2
 8017206:	681a      	ldr	r2, [r3, #0]
 8017208:	685b      	ldr	r3, [r3, #4]
 801720a:	2900      	cmp	r1, #0
 801720c:	d04c      	beq.n	80172a8 <_dtoa_r+0x614>
 801720e:	2000      	movs	r0, #0
 8017210:	496b      	ldr	r1, [pc, #428]	@ (80173c0 <_dtoa_r+0x72c>)
 8017212:	f7ea fd4d 	bl	8001cb0 <__aeabi_ddiv>
 8017216:	0032      	movs	r2, r6
 8017218:	003b      	movs	r3, r7
 801721a:	f7eb fc55 	bl	8002ac8 <__aeabi_dsub>
 801721e:	9a08      	ldr	r2, [sp, #32]
 8017220:	0006      	movs	r6, r0
 8017222:	4694      	mov	ip, r2
 8017224:	000f      	movs	r7, r1
 8017226:	9b08      	ldr	r3, [sp, #32]
 8017228:	9316      	str	r3, [sp, #88]	@ 0x58
 801722a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801722c:	4463      	add	r3, ip
 801722e:	9311      	str	r3, [sp, #68]	@ 0x44
 8017230:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017232:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017234:	f7ec f806 	bl	8003244 <__aeabi_d2iz>
 8017238:	0005      	movs	r5, r0
 801723a:	f7ec f83f 	bl	80032bc <__aeabi_i2d>
 801723e:	0002      	movs	r2, r0
 8017240:	000b      	movs	r3, r1
 8017242:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017244:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017246:	f7eb fc3f 	bl	8002ac8 <__aeabi_dsub>
 801724a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801724c:	3530      	adds	r5, #48	@ 0x30
 801724e:	1c5c      	adds	r4, r3, #1
 8017250:	701d      	strb	r5, [r3, #0]
 8017252:	0032      	movs	r2, r6
 8017254:	003b      	movs	r3, r7
 8017256:	900a      	str	r0, [sp, #40]	@ 0x28
 8017258:	910b      	str	r1, [sp, #44]	@ 0x2c
 801725a:	f7e9 f8fd 	bl	8000458 <__aeabi_dcmplt>
 801725e:	2800      	cmp	r0, #0
 8017260:	d16a      	bne.n	8017338 <_dtoa_r+0x6a4>
 8017262:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017266:	2000      	movs	r0, #0
 8017268:	4950      	ldr	r1, [pc, #320]	@ (80173ac <_dtoa_r+0x718>)
 801726a:	f7eb fc2d 	bl	8002ac8 <__aeabi_dsub>
 801726e:	0032      	movs	r2, r6
 8017270:	003b      	movs	r3, r7
 8017272:	f7e9 f8f1 	bl	8000458 <__aeabi_dcmplt>
 8017276:	2800      	cmp	r0, #0
 8017278:	d000      	beq.n	801727c <_dtoa_r+0x5e8>
 801727a:	e0a5      	b.n	80173c8 <_dtoa_r+0x734>
 801727c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801727e:	42a3      	cmp	r3, r4
 8017280:	d100      	bne.n	8017284 <_dtoa_r+0x5f0>
 8017282:	e742      	b.n	801710a <_dtoa_r+0x476>
 8017284:	2200      	movs	r2, #0
 8017286:	0030      	movs	r0, r6
 8017288:	0039      	movs	r1, r7
 801728a:	4b49      	ldr	r3, [pc, #292]	@ (80173b0 <_dtoa_r+0x71c>)
 801728c:	f7eb f954 	bl	8002538 <__aeabi_dmul>
 8017290:	2200      	movs	r2, #0
 8017292:	0006      	movs	r6, r0
 8017294:	000f      	movs	r7, r1
 8017296:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801729a:	4b45      	ldr	r3, [pc, #276]	@ (80173b0 <_dtoa_r+0x71c>)
 801729c:	f7eb f94c 	bl	8002538 <__aeabi_dmul>
 80172a0:	9416      	str	r4, [sp, #88]	@ 0x58
 80172a2:	900a      	str	r0, [sp, #40]	@ 0x28
 80172a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80172a6:	e7c3      	b.n	8017230 <_dtoa_r+0x59c>
 80172a8:	0030      	movs	r0, r6
 80172aa:	0039      	movs	r1, r7
 80172ac:	f7eb f944 	bl	8002538 <__aeabi_dmul>
 80172b0:	9d08      	ldr	r5, [sp, #32]
 80172b2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80172b4:	002b      	movs	r3, r5
 80172b6:	4694      	mov	ip, r2
 80172b8:	9016      	str	r0, [sp, #88]	@ 0x58
 80172ba:	9117      	str	r1, [sp, #92]	@ 0x5c
 80172bc:	4463      	add	r3, ip
 80172be:	9319      	str	r3, [sp, #100]	@ 0x64
 80172c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80172c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80172c4:	f7eb ffbe 	bl	8003244 <__aeabi_d2iz>
 80172c8:	0004      	movs	r4, r0
 80172ca:	f7eb fff7 	bl	80032bc <__aeabi_i2d>
 80172ce:	000b      	movs	r3, r1
 80172d0:	0002      	movs	r2, r0
 80172d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80172d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80172d6:	f7eb fbf7 	bl	8002ac8 <__aeabi_dsub>
 80172da:	3430      	adds	r4, #48	@ 0x30
 80172dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80172de:	702c      	strb	r4, [r5, #0]
 80172e0:	3501      	adds	r5, #1
 80172e2:	0006      	movs	r6, r0
 80172e4:	000f      	movs	r7, r1
 80172e6:	42ab      	cmp	r3, r5
 80172e8:	d129      	bne.n	801733e <_dtoa_r+0x6aa>
 80172ea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80172ec:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80172ee:	9b08      	ldr	r3, [sp, #32]
 80172f0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80172f2:	469c      	mov	ip, r3
 80172f4:	2200      	movs	r2, #0
 80172f6:	4b32      	ldr	r3, [pc, #200]	@ (80173c0 <_dtoa_r+0x72c>)
 80172f8:	4464      	add	r4, ip
 80172fa:	f7ea f975 	bl	80015e8 <__aeabi_dadd>
 80172fe:	0002      	movs	r2, r0
 8017300:	000b      	movs	r3, r1
 8017302:	0030      	movs	r0, r6
 8017304:	0039      	movs	r1, r7
 8017306:	f7e9 f8bb 	bl	8000480 <__aeabi_dcmpgt>
 801730a:	2800      	cmp	r0, #0
 801730c:	d15c      	bne.n	80173c8 <_dtoa_r+0x734>
 801730e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8017310:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017312:	2000      	movs	r0, #0
 8017314:	492a      	ldr	r1, [pc, #168]	@ (80173c0 <_dtoa_r+0x72c>)
 8017316:	f7eb fbd7 	bl	8002ac8 <__aeabi_dsub>
 801731a:	0002      	movs	r2, r0
 801731c:	000b      	movs	r3, r1
 801731e:	0030      	movs	r0, r6
 8017320:	0039      	movs	r1, r7
 8017322:	f7e9 f899 	bl	8000458 <__aeabi_dcmplt>
 8017326:	2800      	cmp	r0, #0
 8017328:	d100      	bne.n	801732c <_dtoa_r+0x698>
 801732a:	e6ee      	b.n	801710a <_dtoa_r+0x476>
 801732c:	0023      	movs	r3, r4
 801732e:	3c01      	subs	r4, #1
 8017330:	7822      	ldrb	r2, [r4, #0]
 8017332:	2a30      	cmp	r2, #48	@ 0x30
 8017334:	d0fa      	beq.n	801732c <_dtoa_r+0x698>
 8017336:	001c      	movs	r4, r3
 8017338:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801733a:	9304      	str	r3, [sp, #16]
 801733c:	e73e      	b.n	80171bc <_dtoa_r+0x528>
 801733e:	2200      	movs	r2, #0
 8017340:	4b1b      	ldr	r3, [pc, #108]	@ (80173b0 <_dtoa_r+0x71c>)
 8017342:	f7eb f8f9 	bl	8002538 <__aeabi_dmul>
 8017346:	900a      	str	r0, [sp, #40]	@ 0x28
 8017348:	910b      	str	r1, [sp, #44]	@ 0x2c
 801734a:	e7b9      	b.n	80172c0 <_dtoa_r+0x62c>
 801734c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801734e:	2b00      	cmp	r3, #0
 8017350:	d10c      	bne.n	801736c <_dtoa_r+0x6d8>
 8017352:	9806      	ldr	r0, [sp, #24]
 8017354:	9907      	ldr	r1, [sp, #28]
 8017356:	2200      	movs	r2, #0
 8017358:	4b18      	ldr	r3, [pc, #96]	@ (80173bc <_dtoa_r+0x728>)
 801735a:	f7eb f8ed 	bl	8002538 <__aeabi_dmul>
 801735e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017362:	f7e9 f897 	bl	8000494 <__aeabi_dcmpge>
 8017366:	2800      	cmp	r0, #0
 8017368:	d100      	bne.n	801736c <_dtoa_r+0x6d8>
 801736a:	e164      	b.n	8017636 <_dtoa_r+0x9a2>
 801736c:	2600      	movs	r6, #0
 801736e:	0037      	movs	r7, r6
 8017370:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017372:	9c08      	ldr	r4, [sp, #32]
 8017374:	43db      	mvns	r3, r3
 8017376:	930c      	str	r3, [sp, #48]	@ 0x30
 8017378:	2300      	movs	r3, #0
 801737a:	9304      	str	r3, [sp, #16]
 801737c:	0031      	movs	r1, r6
 801737e:	9803      	ldr	r0, [sp, #12]
 8017380:	f000 fbc6 	bl	8017b10 <_Bfree>
 8017384:	2f00      	cmp	r7, #0
 8017386:	d0d7      	beq.n	8017338 <_dtoa_r+0x6a4>
 8017388:	9b04      	ldr	r3, [sp, #16]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d005      	beq.n	801739a <_dtoa_r+0x706>
 801738e:	42bb      	cmp	r3, r7
 8017390:	d003      	beq.n	801739a <_dtoa_r+0x706>
 8017392:	0019      	movs	r1, r3
 8017394:	9803      	ldr	r0, [sp, #12]
 8017396:	f000 fbbb 	bl	8017b10 <_Bfree>
 801739a:	0039      	movs	r1, r7
 801739c:	9803      	ldr	r0, [sp, #12]
 801739e:	f000 fbb7 	bl	8017b10 <_Bfree>
 80173a2:	e7c9      	b.n	8017338 <_dtoa_r+0x6a4>
 80173a4:	0801a638 	.word	0x0801a638
 80173a8:	0801a610 	.word	0x0801a610
 80173ac:	3ff00000 	.word	0x3ff00000
 80173b0:	40240000 	.word	0x40240000
 80173b4:	401c0000 	.word	0x401c0000
 80173b8:	fcc00000 	.word	0xfcc00000
 80173bc:	40140000 	.word	0x40140000
 80173c0:	3fe00000 	.word	0x3fe00000
 80173c4:	9b04      	ldr	r3, [sp, #16]
 80173c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80173c8:	0023      	movs	r3, r4
 80173ca:	001c      	movs	r4, r3
 80173cc:	3b01      	subs	r3, #1
 80173ce:	781a      	ldrb	r2, [r3, #0]
 80173d0:	2a39      	cmp	r2, #57	@ 0x39
 80173d2:	d108      	bne.n	80173e6 <_dtoa_r+0x752>
 80173d4:	9a08      	ldr	r2, [sp, #32]
 80173d6:	429a      	cmp	r2, r3
 80173d8:	d1f7      	bne.n	80173ca <_dtoa_r+0x736>
 80173da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80173dc:	9908      	ldr	r1, [sp, #32]
 80173de:	3201      	adds	r2, #1
 80173e0:	920c      	str	r2, [sp, #48]	@ 0x30
 80173e2:	2230      	movs	r2, #48	@ 0x30
 80173e4:	700a      	strb	r2, [r1, #0]
 80173e6:	781a      	ldrb	r2, [r3, #0]
 80173e8:	3201      	adds	r2, #1
 80173ea:	701a      	strb	r2, [r3, #0]
 80173ec:	e7a4      	b.n	8017338 <_dtoa_r+0x6a4>
 80173ee:	2200      	movs	r2, #0
 80173f0:	4bc6      	ldr	r3, [pc, #792]	@ (801770c <_dtoa_r+0xa78>)
 80173f2:	f7eb f8a1 	bl	8002538 <__aeabi_dmul>
 80173f6:	2200      	movs	r2, #0
 80173f8:	2300      	movs	r3, #0
 80173fa:	0006      	movs	r6, r0
 80173fc:	000f      	movs	r7, r1
 80173fe:	f7e9 f825 	bl	800044c <__aeabi_dcmpeq>
 8017402:	2800      	cmp	r0, #0
 8017404:	d100      	bne.n	8017408 <_dtoa_r+0x774>
 8017406:	e6a1      	b.n	801714c <_dtoa_r+0x4b8>
 8017408:	e6d8      	b.n	80171bc <_dtoa_r+0x528>
 801740a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801740c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801740e:	9c06      	ldr	r4, [sp, #24]
 8017410:	2f00      	cmp	r7, #0
 8017412:	d014      	beq.n	801743e <_dtoa_r+0x7aa>
 8017414:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8017416:	2a01      	cmp	r2, #1
 8017418:	dd00      	ble.n	801741c <_dtoa_r+0x788>
 801741a:	e0c8      	b.n	80175ae <_dtoa_r+0x91a>
 801741c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801741e:	2a00      	cmp	r2, #0
 8017420:	d100      	bne.n	8017424 <_dtoa_r+0x790>
 8017422:	e0be      	b.n	80175a2 <_dtoa_r+0x90e>
 8017424:	4aba      	ldr	r2, [pc, #744]	@ (8017710 <_dtoa_r+0xa7c>)
 8017426:	189b      	adds	r3, r3, r2
 8017428:	9a06      	ldr	r2, [sp, #24]
 801742a:	2101      	movs	r1, #1
 801742c:	18d2      	adds	r2, r2, r3
 801742e:	9206      	str	r2, [sp, #24]
 8017430:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017432:	9803      	ldr	r0, [sp, #12]
 8017434:	18d3      	adds	r3, r2, r3
 8017436:	930d      	str	r3, [sp, #52]	@ 0x34
 8017438:	f000 fc22 	bl	8017c80 <__i2b>
 801743c:	0007      	movs	r7, r0
 801743e:	2c00      	cmp	r4, #0
 8017440:	d00e      	beq.n	8017460 <_dtoa_r+0x7cc>
 8017442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017444:	2b00      	cmp	r3, #0
 8017446:	dd0b      	ble.n	8017460 <_dtoa_r+0x7cc>
 8017448:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801744a:	0023      	movs	r3, r4
 801744c:	4294      	cmp	r4, r2
 801744e:	dd00      	ble.n	8017452 <_dtoa_r+0x7be>
 8017450:	0013      	movs	r3, r2
 8017452:	9a06      	ldr	r2, [sp, #24]
 8017454:	1ae4      	subs	r4, r4, r3
 8017456:	1ad2      	subs	r2, r2, r3
 8017458:	9206      	str	r2, [sp, #24]
 801745a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801745c:	1ad3      	subs	r3, r2, r3
 801745e:	930d      	str	r3, [sp, #52]	@ 0x34
 8017460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017462:	2b00      	cmp	r3, #0
 8017464:	d01f      	beq.n	80174a6 <_dtoa_r+0x812>
 8017466:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017468:	2b00      	cmp	r3, #0
 801746a:	d100      	bne.n	801746e <_dtoa_r+0x7da>
 801746c:	e0b5      	b.n	80175da <_dtoa_r+0x946>
 801746e:	2d00      	cmp	r5, #0
 8017470:	d010      	beq.n	8017494 <_dtoa_r+0x800>
 8017472:	0039      	movs	r1, r7
 8017474:	002a      	movs	r2, r5
 8017476:	9803      	ldr	r0, [sp, #12]
 8017478:	f000 fccc 	bl	8017e14 <__pow5mult>
 801747c:	9a05      	ldr	r2, [sp, #20]
 801747e:	0001      	movs	r1, r0
 8017480:	0007      	movs	r7, r0
 8017482:	9803      	ldr	r0, [sp, #12]
 8017484:	f000 fc14 	bl	8017cb0 <__multiply>
 8017488:	0006      	movs	r6, r0
 801748a:	9905      	ldr	r1, [sp, #20]
 801748c:	9803      	ldr	r0, [sp, #12]
 801748e:	f000 fb3f 	bl	8017b10 <_Bfree>
 8017492:	9605      	str	r6, [sp, #20]
 8017494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017496:	1b5a      	subs	r2, r3, r5
 8017498:	42ab      	cmp	r3, r5
 801749a:	d004      	beq.n	80174a6 <_dtoa_r+0x812>
 801749c:	9905      	ldr	r1, [sp, #20]
 801749e:	9803      	ldr	r0, [sp, #12]
 80174a0:	f000 fcb8 	bl	8017e14 <__pow5mult>
 80174a4:	9005      	str	r0, [sp, #20]
 80174a6:	2101      	movs	r1, #1
 80174a8:	9803      	ldr	r0, [sp, #12]
 80174aa:	f000 fbe9 	bl	8017c80 <__i2b>
 80174ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80174b0:	0006      	movs	r6, r0
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d100      	bne.n	80174b8 <_dtoa_r+0x824>
 80174b6:	e1bc      	b.n	8017832 <_dtoa_r+0xb9e>
 80174b8:	001a      	movs	r2, r3
 80174ba:	0001      	movs	r1, r0
 80174bc:	9803      	ldr	r0, [sp, #12]
 80174be:	f000 fca9 	bl	8017e14 <__pow5mult>
 80174c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80174c4:	0006      	movs	r6, r0
 80174c6:	2500      	movs	r5, #0
 80174c8:	2b01      	cmp	r3, #1
 80174ca:	dc16      	bgt.n	80174fa <_dtoa_r+0x866>
 80174cc:	2500      	movs	r5, #0
 80174ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80174d0:	42ab      	cmp	r3, r5
 80174d2:	d10e      	bne.n	80174f2 <_dtoa_r+0x85e>
 80174d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80174d6:	031b      	lsls	r3, r3, #12
 80174d8:	42ab      	cmp	r3, r5
 80174da:	d10a      	bne.n	80174f2 <_dtoa_r+0x85e>
 80174dc:	4b8d      	ldr	r3, [pc, #564]	@ (8017714 <_dtoa_r+0xa80>)
 80174de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80174e0:	4213      	tst	r3, r2
 80174e2:	d006      	beq.n	80174f2 <_dtoa_r+0x85e>
 80174e4:	9b06      	ldr	r3, [sp, #24]
 80174e6:	3501      	adds	r5, #1
 80174e8:	3301      	adds	r3, #1
 80174ea:	9306      	str	r3, [sp, #24]
 80174ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80174ee:	3301      	adds	r3, #1
 80174f0:	930d      	str	r3, [sp, #52]	@ 0x34
 80174f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80174f4:	2001      	movs	r0, #1
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d008      	beq.n	801750c <_dtoa_r+0x878>
 80174fa:	6933      	ldr	r3, [r6, #16]
 80174fc:	3303      	adds	r3, #3
 80174fe:	009b      	lsls	r3, r3, #2
 8017500:	18f3      	adds	r3, r6, r3
 8017502:	6858      	ldr	r0, [r3, #4]
 8017504:	f000 fb6c 	bl	8017be0 <__hi0bits>
 8017508:	2320      	movs	r3, #32
 801750a:	1a18      	subs	r0, r3, r0
 801750c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801750e:	1818      	adds	r0, r3, r0
 8017510:	0002      	movs	r2, r0
 8017512:	231f      	movs	r3, #31
 8017514:	401a      	ands	r2, r3
 8017516:	4218      	tst	r0, r3
 8017518:	d065      	beq.n	80175e6 <_dtoa_r+0x952>
 801751a:	3301      	adds	r3, #1
 801751c:	1a9b      	subs	r3, r3, r2
 801751e:	2b04      	cmp	r3, #4
 8017520:	dd5d      	ble.n	80175de <_dtoa_r+0x94a>
 8017522:	231c      	movs	r3, #28
 8017524:	1a9b      	subs	r3, r3, r2
 8017526:	9a06      	ldr	r2, [sp, #24]
 8017528:	18e4      	adds	r4, r4, r3
 801752a:	18d2      	adds	r2, r2, r3
 801752c:	9206      	str	r2, [sp, #24]
 801752e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017530:	18d3      	adds	r3, r2, r3
 8017532:	930d      	str	r3, [sp, #52]	@ 0x34
 8017534:	9b06      	ldr	r3, [sp, #24]
 8017536:	2b00      	cmp	r3, #0
 8017538:	dd05      	ble.n	8017546 <_dtoa_r+0x8b2>
 801753a:	001a      	movs	r2, r3
 801753c:	9905      	ldr	r1, [sp, #20]
 801753e:	9803      	ldr	r0, [sp, #12]
 8017540:	f000 fcc4 	bl	8017ecc <__lshift>
 8017544:	9005      	str	r0, [sp, #20]
 8017546:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017548:	2b00      	cmp	r3, #0
 801754a:	dd05      	ble.n	8017558 <_dtoa_r+0x8c4>
 801754c:	0031      	movs	r1, r6
 801754e:	001a      	movs	r2, r3
 8017550:	9803      	ldr	r0, [sp, #12]
 8017552:	f000 fcbb 	bl	8017ecc <__lshift>
 8017556:	0006      	movs	r6, r0
 8017558:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801755a:	2b00      	cmp	r3, #0
 801755c:	d045      	beq.n	80175ea <_dtoa_r+0x956>
 801755e:	0031      	movs	r1, r6
 8017560:	9805      	ldr	r0, [sp, #20]
 8017562:	f000 fd1f 	bl	8017fa4 <__mcmp>
 8017566:	2800      	cmp	r0, #0
 8017568:	da3f      	bge.n	80175ea <_dtoa_r+0x956>
 801756a:	9b04      	ldr	r3, [sp, #16]
 801756c:	220a      	movs	r2, #10
 801756e:	3b01      	subs	r3, #1
 8017570:	930c      	str	r3, [sp, #48]	@ 0x30
 8017572:	9905      	ldr	r1, [sp, #20]
 8017574:	2300      	movs	r3, #0
 8017576:	9803      	ldr	r0, [sp, #12]
 8017578:	f000 faee 	bl	8017b58 <__multadd>
 801757c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801757e:	9005      	str	r0, [sp, #20]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d100      	bne.n	8017586 <_dtoa_r+0x8f2>
 8017584:	e15c      	b.n	8017840 <_dtoa_r+0xbac>
 8017586:	2300      	movs	r3, #0
 8017588:	0039      	movs	r1, r7
 801758a:	220a      	movs	r2, #10
 801758c:	9803      	ldr	r0, [sp, #12]
 801758e:	f000 fae3 	bl	8017b58 <__multadd>
 8017592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017594:	0007      	movs	r7, r0
 8017596:	2b00      	cmp	r3, #0
 8017598:	dc55      	bgt.n	8017646 <_dtoa_r+0x9b2>
 801759a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801759c:	2b02      	cmp	r3, #2
 801759e:	dc2d      	bgt.n	80175fc <_dtoa_r+0x968>
 80175a0:	e051      	b.n	8017646 <_dtoa_r+0x9b2>
 80175a2:	2336      	movs	r3, #54	@ 0x36
 80175a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80175a6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80175a8:	9c06      	ldr	r4, [sp, #24]
 80175aa:	1a9b      	subs	r3, r3, r2
 80175ac:	e73c      	b.n	8017428 <_dtoa_r+0x794>
 80175ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175b0:	1e5d      	subs	r5, r3, #1
 80175b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175b4:	42ab      	cmp	r3, r5
 80175b6:	db08      	blt.n	80175ca <_dtoa_r+0x936>
 80175b8:	1b5d      	subs	r5, r3, r5
 80175ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175bc:	9c06      	ldr	r4, [sp, #24]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	db00      	blt.n	80175c4 <_dtoa_r+0x930>
 80175c2:	e731      	b.n	8017428 <_dtoa_r+0x794>
 80175c4:	1ae4      	subs	r4, r4, r3
 80175c6:	2300      	movs	r3, #0
 80175c8:	e72e      	b.n	8017428 <_dtoa_r+0x794>
 80175ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80175ce:	1aeb      	subs	r3, r5, r3
 80175d0:	18d3      	adds	r3, r2, r3
 80175d2:	950f      	str	r5, [sp, #60]	@ 0x3c
 80175d4:	9314      	str	r3, [sp, #80]	@ 0x50
 80175d6:	2500      	movs	r5, #0
 80175d8:	e7ef      	b.n	80175ba <_dtoa_r+0x926>
 80175da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80175dc:	e75e      	b.n	801749c <_dtoa_r+0x808>
 80175de:	2b04      	cmp	r3, #4
 80175e0:	d0a8      	beq.n	8017534 <_dtoa_r+0x8a0>
 80175e2:	331c      	adds	r3, #28
 80175e4:	e79f      	b.n	8017526 <_dtoa_r+0x892>
 80175e6:	0013      	movs	r3, r2
 80175e8:	e7fb      	b.n	80175e2 <_dtoa_r+0x94e>
 80175ea:	9b04      	ldr	r3, [sp, #16]
 80175ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80175ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	dc23      	bgt.n	801763e <_dtoa_r+0x9aa>
 80175f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80175f8:	2b02      	cmp	r3, #2
 80175fa:	dd20      	ble.n	801763e <_dtoa_r+0x9aa>
 80175fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d000      	beq.n	8017604 <_dtoa_r+0x970>
 8017602:	e6b5      	b.n	8017370 <_dtoa_r+0x6dc>
 8017604:	0031      	movs	r1, r6
 8017606:	2205      	movs	r2, #5
 8017608:	9803      	ldr	r0, [sp, #12]
 801760a:	f000 faa5 	bl	8017b58 <__multadd>
 801760e:	0006      	movs	r6, r0
 8017610:	0001      	movs	r1, r0
 8017612:	9805      	ldr	r0, [sp, #20]
 8017614:	f000 fcc6 	bl	8017fa4 <__mcmp>
 8017618:	2800      	cmp	r0, #0
 801761a:	dc00      	bgt.n	801761e <_dtoa_r+0x98a>
 801761c:	e6a8      	b.n	8017370 <_dtoa_r+0x6dc>
 801761e:	9b08      	ldr	r3, [sp, #32]
 8017620:	9a08      	ldr	r2, [sp, #32]
 8017622:	1c5c      	adds	r4, r3, #1
 8017624:	2331      	movs	r3, #49	@ 0x31
 8017626:	7013      	strb	r3, [r2, #0]
 8017628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801762a:	3301      	adds	r3, #1
 801762c:	930c      	str	r3, [sp, #48]	@ 0x30
 801762e:	e6a3      	b.n	8017378 <_dtoa_r+0x6e4>
 8017630:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8017632:	0037      	movs	r7, r6
 8017634:	e7f3      	b.n	801761e <_dtoa_r+0x98a>
 8017636:	9b04      	ldr	r3, [sp, #16]
 8017638:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801763a:	930c      	str	r3, [sp, #48]	@ 0x30
 801763c:	e7f9      	b.n	8017632 <_dtoa_r+0x99e>
 801763e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017640:	2b00      	cmp	r3, #0
 8017642:	d100      	bne.n	8017646 <_dtoa_r+0x9b2>
 8017644:	e100      	b.n	8017848 <_dtoa_r+0xbb4>
 8017646:	2c00      	cmp	r4, #0
 8017648:	dd05      	ble.n	8017656 <_dtoa_r+0x9c2>
 801764a:	0039      	movs	r1, r7
 801764c:	0022      	movs	r2, r4
 801764e:	9803      	ldr	r0, [sp, #12]
 8017650:	f000 fc3c 	bl	8017ecc <__lshift>
 8017654:	0007      	movs	r7, r0
 8017656:	0038      	movs	r0, r7
 8017658:	2d00      	cmp	r5, #0
 801765a:	d018      	beq.n	801768e <_dtoa_r+0x9fa>
 801765c:	6879      	ldr	r1, [r7, #4]
 801765e:	9803      	ldr	r0, [sp, #12]
 8017660:	f000 fa12 	bl	8017a88 <_Balloc>
 8017664:	1e04      	subs	r4, r0, #0
 8017666:	d105      	bne.n	8017674 <_dtoa_r+0x9e0>
 8017668:	0022      	movs	r2, r4
 801766a:	4b2b      	ldr	r3, [pc, #172]	@ (8017718 <_dtoa_r+0xa84>)
 801766c:	482b      	ldr	r0, [pc, #172]	@ (801771c <_dtoa_r+0xa88>)
 801766e:	492c      	ldr	r1, [pc, #176]	@ (8017720 <_dtoa_r+0xa8c>)
 8017670:	f7ff fb25 	bl	8016cbe <_dtoa_r+0x2a>
 8017674:	0039      	movs	r1, r7
 8017676:	693a      	ldr	r2, [r7, #16]
 8017678:	310c      	adds	r1, #12
 801767a:	3202      	adds	r2, #2
 801767c:	0092      	lsls	r2, r2, #2
 801767e:	300c      	adds	r0, #12
 8017680:	f7ff fa70 	bl	8016b64 <memcpy>
 8017684:	2201      	movs	r2, #1
 8017686:	0021      	movs	r1, r4
 8017688:	9803      	ldr	r0, [sp, #12]
 801768a:	f000 fc1f 	bl	8017ecc <__lshift>
 801768e:	9b08      	ldr	r3, [sp, #32]
 8017690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017692:	9306      	str	r3, [sp, #24]
 8017694:	3b01      	subs	r3, #1
 8017696:	189b      	adds	r3, r3, r2
 8017698:	2201      	movs	r2, #1
 801769a:	9704      	str	r7, [sp, #16]
 801769c:	0007      	movs	r7, r0
 801769e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80176a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80176a2:	4013      	ands	r3, r2
 80176a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80176a6:	0031      	movs	r1, r6
 80176a8:	9805      	ldr	r0, [sp, #20]
 80176aa:	f7ff fa64 	bl	8016b76 <quorem>
 80176ae:	9904      	ldr	r1, [sp, #16]
 80176b0:	0005      	movs	r5, r0
 80176b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80176b4:	9805      	ldr	r0, [sp, #20]
 80176b6:	f000 fc75 	bl	8017fa4 <__mcmp>
 80176ba:	003a      	movs	r2, r7
 80176bc:	900d      	str	r0, [sp, #52]	@ 0x34
 80176be:	0031      	movs	r1, r6
 80176c0:	9803      	ldr	r0, [sp, #12]
 80176c2:	f000 fc8b 	bl	8017fdc <__mdiff>
 80176c6:	2201      	movs	r2, #1
 80176c8:	68c3      	ldr	r3, [r0, #12]
 80176ca:	0004      	movs	r4, r0
 80176cc:	3530      	adds	r5, #48	@ 0x30
 80176ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d104      	bne.n	80176de <_dtoa_r+0xa4a>
 80176d4:	0001      	movs	r1, r0
 80176d6:	9805      	ldr	r0, [sp, #20]
 80176d8:	f000 fc64 	bl	8017fa4 <__mcmp>
 80176dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80176de:	0021      	movs	r1, r4
 80176e0:	9803      	ldr	r0, [sp, #12]
 80176e2:	f000 fa15 	bl	8017b10 <_Bfree>
 80176e6:	9b06      	ldr	r3, [sp, #24]
 80176e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176ea:	1c5c      	adds	r4, r3, #1
 80176ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80176ee:	4313      	orrs	r3, r2
 80176f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80176f2:	4313      	orrs	r3, r2
 80176f4:	d116      	bne.n	8017724 <_dtoa_r+0xa90>
 80176f6:	2d39      	cmp	r5, #57	@ 0x39
 80176f8:	d02f      	beq.n	801775a <_dtoa_r+0xac6>
 80176fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	dd01      	ble.n	8017704 <_dtoa_r+0xa70>
 8017700:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8017702:	3531      	adds	r5, #49	@ 0x31
 8017704:	9b06      	ldr	r3, [sp, #24]
 8017706:	701d      	strb	r5, [r3, #0]
 8017708:	e638      	b.n	801737c <_dtoa_r+0x6e8>
 801770a:	46c0      	nop			@ (mov r8, r8)
 801770c:	40240000 	.word	0x40240000
 8017710:	00000433 	.word	0x00000433
 8017714:	7ff00000 	.word	0x7ff00000
 8017718:	0801a598 	.word	0x0801a598
 801771c:	0801a540 	.word	0x0801a540
 8017720:	000002ef 	.word	0x000002ef
 8017724:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017726:	2b00      	cmp	r3, #0
 8017728:	db04      	blt.n	8017734 <_dtoa_r+0xaa0>
 801772a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801772c:	4313      	orrs	r3, r2
 801772e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017730:	4313      	orrs	r3, r2
 8017732:	d11e      	bne.n	8017772 <_dtoa_r+0xade>
 8017734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017736:	2b00      	cmp	r3, #0
 8017738:	dde4      	ble.n	8017704 <_dtoa_r+0xa70>
 801773a:	9905      	ldr	r1, [sp, #20]
 801773c:	2201      	movs	r2, #1
 801773e:	9803      	ldr	r0, [sp, #12]
 8017740:	f000 fbc4 	bl	8017ecc <__lshift>
 8017744:	0031      	movs	r1, r6
 8017746:	9005      	str	r0, [sp, #20]
 8017748:	f000 fc2c 	bl	8017fa4 <__mcmp>
 801774c:	2800      	cmp	r0, #0
 801774e:	dc02      	bgt.n	8017756 <_dtoa_r+0xac2>
 8017750:	d1d8      	bne.n	8017704 <_dtoa_r+0xa70>
 8017752:	07eb      	lsls	r3, r5, #31
 8017754:	d5d6      	bpl.n	8017704 <_dtoa_r+0xa70>
 8017756:	2d39      	cmp	r5, #57	@ 0x39
 8017758:	d1d2      	bne.n	8017700 <_dtoa_r+0xa6c>
 801775a:	2339      	movs	r3, #57	@ 0x39
 801775c:	9a06      	ldr	r2, [sp, #24]
 801775e:	7013      	strb	r3, [r2, #0]
 8017760:	0023      	movs	r3, r4
 8017762:	001c      	movs	r4, r3
 8017764:	3b01      	subs	r3, #1
 8017766:	781a      	ldrb	r2, [r3, #0]
 8017768:	2a39      	cmp	r2, #57	@ 0x39
 801776a:	d04f      	beq.n	801780c <_dtoa_r+0xb78>
 801776c:	3201      	adds	r2, #1
 801776e:	701a      	strb	r2, [r3, #0]
 8017770:	e604      	b.n	801737c <_dtoa_r+0x6e8>
 8017772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017774:	2b00      	cmp	r3, #0
 8017776:	dd03      	ble.n	8017780 <_dtoa_r+0xaec>
 8017778:	2d39      	cmp	r5, #57	@ 0x39
 801777a:	d0ee      	beq.n	801775a <_dtoa_r+0xac6>
 801777c:	3501      	adds	r5, #1
 801777e:	e7c1      	b.n	8017704 <_dtoa_r+0xa70>
 8017780:	9b06      	ldr	r3, [sp, #24]
 8017782:	9a06      	ldr	r2, [sp, #24]
 8017784:	701d      	strb	r5, [r3, #0]
 8017786:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017788:	4293      	cmp	r3, r2
 801778a:	d02a      	beq.n	80177e2 <_dtoa_r+0xb4e>
 801778c:	2300      	movs	r3, #0
 801778e:	220a      	movs	r2, #10
 8017790:	9905      	ldr	r1, [sp, #20]
 8017792:	9803      	ldr	r0, [sp, #12]
 8017794:	f000 f9e0 	bl	8017b58 <__multadd>
 8017798:	9b04      	ldr	r3, [sp, #16]
 801779a:	9005      	str	r0, [sp, #20]
 801779c:	42bb      	cmp	r3, r7
 801779e:	d109      	bne.n	80177b4 <_dtoa_r+0xb20>
 80177a0:	2300      	movs	r3, #0
 80177a2:	220a      	movs	r2, #10
 80177a4:	9904      	ldr	r1, [sp, #16]
 80177a6:	9803      	ldr	r0, [sp, #12]
 80177a8:	f000 f9d6 	bl	8017b58 <__multadd>
 80177ac:	9004      	str	r0, [sp, #16]
 80177ae:	0007      	movs	r7, r0
 80177b0:	9406      	str	r4, [sp, #24]
 80177b2:	e778      	b.n	80176a6 <_dtoa_r+0xa12>
 80177b4:	9904      	ldr	r1, [sp, #16]
 80177b6:	2300      	movs	r3, #0
 80177b8:	220a      	movs	r2, #10
 80177ba:	9803      	ldr	r0, [sp, #12]
 80177bc:	f000 f9cc 	bl	8017b58 <__multadd>
 80177c0:	2300      	movs	r3, #0
 80177c2:	9004      	str	r0, [sp, #16]
 80177c4:	220a      	movs	r2, #10
 80177c6:	0039      	movs	r1, r7
 80177c8:	9803      	ldr	r0, [sp, #12]
 80177ca:	f000 f9c5 	bl	8017b58 <__multadd>
 80177ce:	e7ee      	b.n	80177ae <_dtoa_r+0xb1a>
 80177d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177d2:	2401      	movs	r4, #1
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	dd00      	ble.n	80177da <_dtoa_r+0xb46>
 80177d8:	001c      	movs	r4, r3
 80177da:	9b08      	ldr	r3, [sp, #32]
 80177dc:	191c      	adds	r4, r3, r4
 80177de:	2300      	movs	r3, #0
 80177e0:	9304      	str	r3, [sp, #16]
 80177e2:	9905      	ldr	r1, [sp, #20]
 80177e4:	2201      	movs	r2, #1
 80177e6:	9803      	ldr	r0, [sp, #12]
 80177e8:	f000 fb70 	bl	8017ecc <__lshift>
 80177ec:	0031      	movs	r1, r6
 80177ee:	9005      	str	r0, [sp, #20]
 80177f0:	f000 fbd8 	bl	8017fa4 <__mcmp>
 80177f4:	2800      	cmp	r0, #0
 80177f6:	dcb3      	bgt.n	8017760 <_dtoa_r+0xacc>
 80177f8:	d101      	bne.n	80177fe <_dtoa_r+0xb6a>
 80177fa:	07ed      	lsls	r5, r5, #31
 80177fc:	d4b0      	bmi.n	8017760 <_dtoa_r+0xacc>
 80177fe:	0023      	movs	r3, r4
 8017800:	001c      	movs	r4, r3
 8017802:	3b01      	subs	r3, #1
 8017804:	781a      	ldrb	r2, [r3, #0]
 8017806:	2a30      	cmp	r2, #48	@ 0x30
 8017808:	d0fa      	beq.n	8017800 <_dtoa_r+0xb6c>
 801780a:	e5b7      	b.n	801737c <_dtoa_r+0x6e8>
 801780c:	9a08      	ldr	r2, [sp, #32]
 801780e:	429a      	cmp	r2, r3
 8017810:	d1a7      	bne.n	8017762 <_dtoa_r+0xace>
 8017812:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017814:	3301      	adds	r3, #1
 8017816:	930c      	str	r3, [sp, #48]	@ 0x30
 8017818:	2331      	movs	r3, #49	@ 0x31
 801781a:	7013      	strb	r3, [r2, #0]
 801781c:	e5ae      	b.n	801737c <_dtoa_r+0x6e8>
 801781e:	4b15      	ldr	r3, [pc, #84]	@ (8017874 <_dtoa_r+0xbe0>)
 8017820:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8017822:	9308      	str	r3, [sp, #32]
 8017824:	4b14      	ldr	r3, [pc, #80]	@ (8017878 <_dtoa_r+0xbe4>)
 8017826:	2a00      	cmp	r2, #0
 8017828:	d001      	beq.n	801782e <_dtoa_r+0xb9a>
 801782a:	f7ff fa7b 	bl	8016d24 <_dtoa_r+0x90>
 801782e:	f7ff fa7b 	bl	8016d28 <_dtoa_r+0x94>
 8017832:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017834:	2b01      	cmp	r3, #1
 8017836:	dc00      	bgt.n	801783a <_dtoa_r+0xba6>
 8017838:	e648      	b.n	80174cc <_dtoa_r+0x838>
 801783a:	2001      	movs	r0, #1
 801783c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801783e:	e665      	b.n	801750c <_dtoa_r+0x878>
 8017840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017842:	2b00      	cmp	r3, #0
 8017844:	dc00      	bgt.n	8017848 <_dtoa_r+0xbb4>
 8017846:	e6d6      	b.n	80175f6 <_dtoa_r+0x962>
 8017848:	2400      	movs	r4, #0
 801784a:	0031      	movs	r1, r6
 801784c:	9805      	ldr	r0, [sp, #20]
 801784e:	f7ff f992 	bl	8016b76 <quorem>
 8017852:	9b08      	ldr	r3, [sp, #32]
 8017854:	3030      	adds	r0, #48	@ 0x30
 8017856:	5518      	strb	r0, [r3, r4]
 8017858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801785a:	3401      	adds	r4, #1
 801785c:	0005      	movs	r5, r0
 801785e:	429c      	cmp	r4, r3
 8017860:	dab6      	bge.n	80177d0 <_dtoa_r+0xb3c>
 8017862:	2300      	movs	r3, #0
 8017864:	220a      	movs	r2, #10
 8017866:	9905      	ldr	r1, [sp, #20]
 8017868:	9803      	ldr	r0, [sp, #12]
 801786a:	f000 f975 	bl	8017b58 <__multadd>
 801786e:	9005      	str	r0, [sp, #20]
 8017870:	e7eb      	b.n	801784a <_dtoa_r+0xbb6>
 8017872:	46c0      	nop			@ (mov r8, r8)
 8017874:	0801a51c 	.word	0x0801a51c
 8017878:	0801a524 	.word	0x0801a524

0801787c <_free_r>:
 801787c:	b570      	push	{r4, r5, r6, lr}
 801787e:	0005      	movs	r5, r0
 8017880:	1e0c      	subs	r4, r1, #0
 8017882:	d010      	beq.n	80178a6 <_free_r+0x2a>
 8017884:	3c04      	subs	r4, #4
 8017886:	6823      	ldr	r3, [r4, #0]
 8017888:	2b00      	cmp	r3, #0
 801788a:	da00      	bge.n	801788e <_free_r+0x12>
 801788c:	18e4      	adds	r4, r4, r3
 801788e:	0028      	movs	r0, r5
 8017890:	f000 f8ea 	bl	8017a68 <__malloc_lock>
 8017894:	4a1d      	ldr	r2, [pc, #116]	@ (801790c <_free_r+0x90>)
 8017896:	6813      	ldr	r3, [r2, #0]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d105      	bne.n	80178a8 <_free_r+0x2c>
 801789c:	6063      	str	r3, [r4, #4]
 801789e:	6014      	str	r4, [r2, #0]
 80178a0:	0028      	movs	r0, r5
 80178a2:	f000 f8e9 	bl	8017a78 <__malloc_unlock>
 80178a6:	bd70      	pop	{r4, r5, r6, pc}
 80178a8:	42a3      	cmp	r3, r4
 80178aa:	d908      	bls.n	80178be <_free_r+0x42>
 80178ac:	6820      	ldr	r0, [r4, #0]
 80178ae:	1821      	adds	r1, r4, r0
 80178b0:	428b      	cmp	r3, r1
 80178b2:	d1f3      	bne.n	801789c <_free_r+0x20>
 80178b4:	6819      	ldr	r1, [r3, #0]
 80178b6:	685b      	ldr	r3, [r3, #4]
 80178b8:	1809      	adds	r1, r1, r0
 80178ba:	6021      	str	r1, [r4, #0]
 80178bc:	e7ee      	b.n	801789c <_free_r+0x20>
 80178be:	001a      	movs	r2, r3
 80178c0:	685b      	ldr	r3, [r3, #4]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d001      	beq.n	80178ca <_free_r+0x4e>
 80178c6:	42a3      	cmp	r3, r4
 80178c8:	d9f9      	bls.n	80178be <_free_r+0x42>
 80178ca:	6811      	ldr	r1, [r2, #0]
 80178cc:	1850      	adds	r0, r2, r1
 80178ce:	42a0      	cmp	r0, r4
 80178d0:	d10b      	bne.n	80178ea <_free_r+0x6e>
 80178d2:	6820      	ldr	r0, [r4, #0]
 80178d4:	1809      	adds	r1, r1, r0
 80178d6:	1850      	adds	r0, r2, r1
 80178d8:	6011      	str	r1, [r2, #0]
 80178da:	4283      	cmp	r3, r0
 80178dc:	d1e0      	bne.n	80178a0 <_free_r+0x24>
 80178de:	6818      	ldr	r0, [r3, #0]
 80178e0:	685b      	ldr	r3, [r3, #4]
 80178e2:	1841      	adds	r1, r0, r1
 80178e4:	6011      	str	r1, [r2, #0]
 80178e6:	6053      	str	r3, [r2, #4]
 80178e8:	e7da      	b.n	80178a0 <_free_r+0x24>
 80178ea:	42a0      	cmp	r0, r4
 80178ec:	d902      	bls.n	80178f4 <_free_r+0x78>
 80178ee:	230c      	movs	r3, #12
 80178f0:	602b      	str	r3, [r5, #0]
 80178f2:	e7d5      	b.n	80178a0 <_free_r+0x24>
 80178f4:	6820      	ldr	r0, [r4, #0]
 80178f6:	1821      	adds	r1, r4, r0
 80178f8:	428b      	cmp	r3, r1
 80178fa:	d103      	bne.n	8017904 <_free_r+0x88>
 80178fc:	6819      	ldr	r1, [r3, #0]
 80178fe:	685b      	ldr	r3, [r3, #4]
 8017900:	1809      	adds	r1, r1, r0
 8017902:	6021      	str	r1, [r4, #0]
 8017904:	6063      	str	r3, [r4, #4]
 8017906:	6054      	str	r4, [r2, #4]
 8017908:	e7ca      	b.n	80178a0 <_free_r+0x24>
 801790a:	46c0      	nop			@ (mov r8, r8)
 801790c:	200043f8 	.word	0x200043f8

08017910 <malloc>:
 8017910:	b510      	push	{r4, lr}
 8017912:	4b03      	ldr	r3, [pc, #12]	@ (8017920 <malloc+0x10>)
 8017914:	0001      	movs	r1, r0
 8017916:	6818      	ldr	r0, [r3, #0]
 8017918:	f000 f826 	bl	8017968 <_malloc_r>
 801791c:	bd10      	pop	{r4, pc}
 801791e:	46c0      	nop			@ (mov r8, r8)
 8017920:	200002d8 	.word	0x200002d8

08017924 <sbrk_aligned>:
 8017924:	b570      	push	{r4, r5, r6, lr}
 8017926:	4e0f      	ldr	r6, [pc, #60]	@ (8017964 <sbrk_aligned+0x40>)
 8017928:	000d      	movs	r5, r1
 801792a:	6831      	ldr	r1, [r6, #0]
 801792c:	0004      	movs	r4, r0
 801792e:	2900      	cmp	r1, #0
 8017930:	d102      	bne.n	8017938 <sbrk_aligned+0x14>
 8017932:	f001 f855 	bl	80189e0 <_sbrk_r>
 8017936:	6030      	str	r0, [r6, #0]
 8017938:	0029      	movs	r1, r5
 801793a:	0020      	movs	r0, r4
 801793c:	f001 f850 	bl	80189e0 <_sbrk_r>
 8017940:	1c43      	adds	r3, r0, #1
 8017942:	d103      	bne.n	801794c <sbrk_aligned+0x28>
 8017944:	2501      	movs	r5, #1
 8017946:	426d      	negs	r5, r5
 8017948:	0028      	movs	r0, r5
 801794a:	bd70      	pop	{r4, r5, r6, pc}
 801794c:	2303      	movs	r3, #3
 801794e:	1cc5      	adds	r5, r0, #3
 8017950:	439d      	bics	r5, r3
 8017952:	42a8      	cmp	r0, r5
 8017954:	d0f8      	beq.n	8017948 <sbrk_aligned+0x24>
 8017956:	1a29      	subs	r1, r5, r0
 8017958:	0020      	movs	r0, r4
 801795a:	f001 f841 	bl	80189e0 <_sbrk_r>
 801795e:	3001      	adds	r0, #1
 8017960:	d1f2      	bne.n	8017948 <sbrk_aligned+0x24>
 8017962:	e7ef      	b.n	8017944 <sbrk_aligned+0x20>
 8017964:	200043f4 	.word	0x200043f4

08017968 <_malloc_r>:
 8017968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801796a:	2203      	movs	r2, #3
 801796c:	1ccb      	adds	r3, r1, #3
 801796e:	4393      	bics	r3, r2
 8017970:	3308      	adds	r3, #8
 8017972:	0005      	movs	r5, r0
 8017974:	001f      	movs	r7, r3
 8017976:	2b0c      	cmp	r3, #12
 8017978:	d234      	bcs.n	80179e4 <_malloc_r+0x7c>
 801797a:	270c      	movs	r7, #12
 801797c:	42b9      	cmp	r1, r7
 801797e:	d833      	bhi.n	80179e8 <_malloc_r+0x80>
 8017980:	0028      	movs	r0, r5
 8017982:	f000 f871 	bl	8017a68 <__malloc_lock>
 8017986:	4e37      	ldr	r6, [pc, #220]	@ (8017a64 <_malloc_r+0xfc>)
 8017988:	6833      	ldr	r3, [r6, #0]
 801798a:	001c      	movs	r4, r3
 801798c:	2c00      	cmp	r4, #0
 801798e:	d12f      	bne.n	80179f0 <_malloc_r+0x88>
 8017990:	0039      	movs	r1, r7
 8017992:	0028      	movs	r0, r5
 8017994:	f7ff ffc6 	bl	8017924 <sbrk_aligned>
 8017998:	0004      	movs	r4, r0
 801799a:	1c43      	adds	r3, r0, #1
 801799c:	d15f      	bne.n	8017a5e <_malloc_r+0xf6>
 801799e:	6834      	ldr	r4, [r6, #0]
 80179a0:	9400      	str	r4, [sp, #0]
 80179a2:	9b00      	ldr	r3, [sp, #0]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d14a      	bne.n	8017a3e <_malloc_r+0xd6>
 80179a8:	2c00      	cmp	r4, #0
 80179aa:	d052      	beq.n	8017a52 <_malloc_r+0xea>
 80179ac:	6823      	ldr	r3, [r4, #0]
 80179ae:	0028      	movs	r0, r5
 80179b0:	18e3      	adds	r3, r4, r3
 80179b2:	9900      	ldr	r1, [sp, #0]
 80179b4:	9301      	str	r3, [sp, #4]
 80179b6:	f001 f813 	bl	80189e0 <_sbrk_r>
 80179ba:	9b01      	ldr	r3, [sp, #4]
 80179bc:	4283      	cmp	r3, r0
 80179be:	d148      	bne.n	8017a52 <_malloc_r+0xea>
 80179c0:	6823      	ldr	r3, [r4, #0]
 80179c2:	0028      	movs	r0, r5
 80179c4:	1aff      	subs	r7, r7, r3
 80179c6:	0039      	movs	r1, r7
 80179c8:	f7ff ffac 	bl	8017924 <sbrk_aligned>
 80179cc:	3001      	adds	r0, #1
 80179ce:	d040      	beq.n	8017a52 <_malloc_r+0xea>
 80179d0:	6823      	ldr	r3, [r4, #0]
 80179d2:	19db      	adds	r3, r3, r7
 80179d4:	6023      	str	r3, [r4, #0]
 80179d6:	6833      	ldr	r3, [r6, #0]
 80179d8:	685a      	ldr	r2, [r3, #4]
 80179da:	2a00      	cmp	r2, #0
 80179dc:	d133      	bne.n	8017a46 <_malloc_r+0xde>
 80179de:	9b00      	ldr	r3, [sp, #0]
 80179e0:	6033      	str	r3, [r6, #0]
 80179e2:	e019      	b.n	8017a18 <_malloc_r+0xb0>
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	dac9      	bge.n	801797c <_malloc_r+0x14>
 80179e8:	230c      	movs	r3, #12
 80179ea:	602b      	str	r3, [r5, #0]
 80179ec:	2000      	movs	r0, #0
 80179ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80179f0:	6821      	ldr	r1, [r4, #0]
 80179f2:	1bc9      	subs	r1, r1, r7
 80179f4:	d420      	bmi.n	8017a38 <_malloc_r+0xd0>
 80179f6:	290b      	cmp	r1, #11
 80179f8:	d90a      	bls.n	8017a10 <_malloc_r+0xa8>
 80179fa:	19e2      	adds	r2, r4, r7
 80179fc:	6027      	str	r7, [r4, #0]
 80179fe:	42a3      	cmp	r3, r4
 8017a00:	d104      	bne.n	8017a0c <_malloc_r+0xa4>
 8017a02:	6032      	str	r2, [r6, #0]
 8017a04:	6863      	ldr	r3, [r4, #4]
 8017a06:	6011      	str	r1, [r2, #0]
 8017a08:	6053      	str	r3, [r2, #4]
 8017a0a:	e005      	b.n	8017a18 <_malloc_r+0xb0>
 8017a0c:	605a      	str	r2, [r3, #4]
 8017a0e:	e7f9      	b.n	8017a04 <_malloc_r+0x9c>
 8017a10:	6862      	ldr	r2, [r4, #4]
 8017a12:	42a3      	cmp	r3, r4
 8017a14:	d10e      	bne.n	8017a34 <_malloc_r+0xcc>
 8017a16:	6032      	str	r2, [r6, #0]
 8017a18:	0028      	movs	r0, r5
 8017a1a:	f000 f82d 	bl	8017a78 <__malloc_unlock>
 8017a1e:	0020      	movs	r0, r4
 8017a20:	2207      	movs	r2, #7
 8017a22:	300b      	adds	r0, #11
 8017a24:	1d23      	adds	r3, r4, #4
 8017a26:	4390      	bics	r0, r2
 8017a28:	1ac2      	subs	r2, r0, r3
 8017a2a:	4298      	cmp	r0, r3
 8017a2c:	d0df      	beq.n	80179ee <_malloc_r+0x86>
 8017a2e:	1a1b      	subs	r3, r3, r0
 8017a30:	50a3      	str	r3, [r4, r2]
 8017a32:	e7dc      	b.n	80179ee <_malloc_r+0x86>
 8017a34:	605a      	str	r2, [r3, #4]
 8017a36:	e7ef      	b.n	8017a18 <_malloc_r+0xb0>
 8017a38:	0023      	movs	r3, r4
 8017a3a:	6864      	ldr	r4, [r4, #4]
 8017a3c:	e7a6      	b.n	801798c <_malloc_r+0x24>
 8017a3e:	9c00      	ldr	r4, [sp, #0]
 8017a40:	6863      	ldr	r3, [r4, #4]
 8017a42:	9300      	str	r3, [sp, #0]
 8017a44:	e7ad      	b.n	80179a2 <_malloc_r+0x3a>
 8017a46:	001a      	movs	r2, r3
 8017a48:	685b      	ldr	r3, [r3, #4]
 8017a4a:	42a3      	cmp	r3, r4
 8017a4c:	d1fb      	bne.n	8017a46 <_malloc_r+0xde>
 8017a4e:	2300      	movs	r3, #0
 8017a50:	e7da      	b.n	8017a08 <_malloc_r+0xa0>
 8017a52:	230c      	movs	r3, #12
 8017a54:	0028      	movs	r0, r5
 8017a56:	602b      	str	r3, [r5, #0]
 8017a58:	f000 f80e 	bl	8017a78 <__malloc_unlock>
 8017a5c:	e7c6      	b.n	80179ec <_malloc_r+0x84>
 8017a5e:	6007      	str	r7, [r0, #0]
 8017a60:	e7da      	b.n	8017a18 <_malloc_r+0xb0>
 8017a62:	46c0      	nop			@ (mov r8, r8)
 8017a64:	200043f8 	.word	0x200043f8

08017a68 <__malloc_lock>:
 8017a68:	b510      	push	{r4, lr}
 8017a6a:	4802      	ldr	r0, [pc, #8]	@ (8017a74 <__malloc_lock+0xc>)
 8017a6c:	f7ff f86d 	bl	8016b4a <__retarget_lock_acquire_recursive>
 8017a70:	bd10      	pop	{r4, pc}
 8017a72:	46c0      	nop			@ (mov r8, r8)
 8017a74:	200043f0 	.word	0x200043f0

08017a78 <__malloc_unlock>:
 8017a78:	b510      	push	{r4, lr}
 8017a7a:	4802      	ldr	r0, [pc, #8]	@ (8017a84 <__malloc_unlock+0xc>)
 8017a7c:	f7ff f866 	bl	8016b4c <__retarget_lock_release_recursive>
 8017a80:	bd10      	pop	{r4, pc}
 8017a82:	46c0      	nop			@ (mov r8, r8)
 8017a84:	200043f0 	.word	0x200043f0

08017a88 <_Balloc>:
 8017a88:	b570      	push	{r4, r5, r6, lr}
 8017a8a:	69c5      	ldr	r5, [r0, #28]
 8017a8c:	0006      	movs	r6, r0
 8017a8e:	000c      	movs	r4, r1
 8017a90:	2d00      	cmp	r5, #0
 8017a92:	d10e      	bne.n	8017ab2 <_Balloc+0x2a>
 8017a94:	2010      	movs	r0, #16
 8017a96:	f7ff ff3b 	bl	8017910 <malloc>
 8017a9a:	1e02      	subs	r2, r0, #0
 8017a9c:	61f0      	str	r0, [r6, #28]
 8017a9e:	d104      	bne.n	8017aaa <_Balloc+0x22>
 8017aa0:	216b      	movs	r1, #107	@ 0x6b
 8017aa2:	4b19      	ldr	r3, [pc, #100]	@ (8017b08 <_Balloc+0x80>)
 8017aa4:	4819      	ldr	r0, [pc, #100]	@ (8017b0c <_Balloc+0x84>)
 8017aa6:	f000 ffad 	bl	8018a04 <__assert_func>
 8017aaa:	6045      	str	r5, [r0, #4]
 8017aac:	6085      	str	r5, [r0, #8]
 8017aae:	6005      	str	r5, [r0, #0]
 8017ab0:	60c5      	str	r5, [r0, #12]
 8017ab2:	69f5      	ldr	r5, [r6, #28]
 8017ab4:	68eb      	ldr	r3, [r5, #12]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d013      	beq.n	8017ae2 <_Balloc+0x5a>
 8017aba:	69f3      	ldr	r3, [r6, #28]
 8017abc:	00a2      	lsls	r2, r4, #2
 8017abe:	68db      	ldr	r3, [r3, #12]
 8017ac0:	189b      	adds	r3, r3, r2
 8017ac2:	6818      	ldr	r0, [r3, #0]
 8017ac4:	2800      	cmp	r0, #0
 8017ac6:	d118      	bne.n	8017afa <_Balloc+0x72>
 8017ac8:	2101      	movs	r1, #1
 8017aca:	000d      	movs	r5, r1
 8017acc:	40a5      	lsls	r5, r4
 8017ace:	1d6a      	adds	r2, r5, #5
 8017ad0:	0030      	movs	r0, r6
 8017ad2:	0092      	lsls	r2, r2, #2
 8017ad4:	f000 ffb4 	bl	8018a40 <_calloc_r>
 8017ad8:	2800      	cmp	r0, #0
 8017ada:	d00c      	beq.n	8017af6 <_Balloc+0x6e>
 8017adc:	6044      	str	r4, [r0, #4]
 8017ade:	6085      	str	r5, [r0, #8]
 8017ae0:	e00d      	b.n	8017afe <_Balloc+0x76>
 8017ae2:	2221      	movs	r2, #33	@ 0x21
 8017ae4:	2104      	movs	r1, #4
 8017ae6:	0030      	movs	r0, r6
 8017ae8:	f000 ffaa 	bl	8018a40 <_calloc_r>
 8017aec:	69f3      	ldr	r3, [r6, #28]
 8017aee:	60e8      	str	r0, [r5, #12]
 8017af0:	68db      	ldr	r3, [r3, #12]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d1e1      	bne.n	8017aba <_Balloc+0x32>
 8017af6:	2000      	movs	r0, #0
 8017af8:	bd70      	pop	{r4, r5, r6, pc}
 8017afa:	6802      	ldr	r2, [r0, #0]
 8017afc:	601a      	str	r2, [r3, #0]
 8017afe:	2300      	movs	r3, #0
 8017b00:	6103      	str	r3, [r0, #16]
 8017b02:	60c3      	str	r3, [r0, #12]
 8017b04:	e7f8      	b.n	8017af8 <_Balloc+0x70>
 8017b06:	46c0      	nop			@ (mov r8, r8)
 8017b08:	0801a529 	.word	0x0801a529
 8017b0c:	0801a5a9 	.word	0x0801a5a9

08017b10 <_Bfree>:
 8017b10:	b570      	push	{r4, r5, r6, lr}
 8017b12:	69c6      	ldr	r6, [r0, #28]
 8017b14:	0005      	movs	r5, r0
 8017b16:	000c      	movs	r4, r1
 8017b18:	2e00      	cmp	r6, #0
 8017b1a:	d10e      	bne.n	8017b3a <_Bfree+0x2a>
 8017b1c:	2010      	movs	r0, #16
 8017b1e:	f7ff fef7 	bl	8017910 <malloc>
 8017b22:	1e02      	subs	r2, r0, #0
 8017b24:	61e8      	str	r0, [r5, #28]
 8017b26:	d104      	bne.n	8017b32 <_Bfree+0x22>
 8017b28:	218f      	movs	r1, #143	@ 0x8f
 8017b2a:	4b09      	ldr	r3, [pc, #36]	@ (8017b50 <_Bfree+0x40>)
 8017b2c:	4809      	ldr	r0, [pc, #36]	@ (8017b54 <_Bfree+0x44>)
 8017b2e:	f000 ff69 	bl	8018a04 <__assert_func>
 8017b32:	6046      	str	r6, [r0, #4]
 8017b34:	6086      	str	r6, [r0, #8]
 8017b36:	6006      	str	r6, [r0, #0]
 8017b38:	60c6      	str	r6, [r0, #12]
 8017b3a:	2c00      	cmp	r4, #0
 8017b3c:	d007      	beq.n	8017b4e <_Bfree+0x3e>
 8017b3e:	69eb      	ldr	r3, [r5, #28]
 8017b40:	6862      	ldr	r2, [r4, #4]
 8017b42:	68db      	ldr	r3, [r3, #12]
 8017b44:	0092      	lsls	r2, r2, #2
 8017b46:	189b      	adds	r3, r3, r2
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	6022      	str	r2, [r4, #0]
 8017b4c:	601c      	str	r4, [r3, #0]
 8017b4e:	bd70      	pop	{r4, r5, r6, pc}
 8017b50:	0801a529 	.word	0x0801a529
 8017b54:	0801a5a9 	.word	0x0801a5a9

08017b58 <__multadd>:
 8017b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b5a:	000f      	movs	r7, r1
 8017b5c:	9001      	str	r0, [sp, #4]
 8017b5e:	000c      	movs	r4, r1
 8017b60:	001e      	movs	r6, r3
 8017b62:	2000      	movs	r0, #0
 8017b64:	690d      	ldr	r5, [r1, #16]
 8017b66:	3714      	adds	r7, #20
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	3001      	adds	r0, #1
 8017b6c:	b299      	uxth	r1, r3
 8017b6e:	4351      	muls	r1, r2
 8017b70:	0c1b      	lsrs	r3, r3, #16
 8017b72:	4353      	muls	r3, r2
 8017b74:	1989      	adds	r1, r1, r6
 8017b76:	0c0e      	lsrs	r6, r1, #16
 8017b78:	199b      	adds	r3, r3, r6
 8017b7a:	0c1e      	lsrs	r6, r3, #16
 8017b7c:	b289      	uxth	r1, r1
 8017b7e:	041b      	lsls	r3, r3, #16
 8017b80:	185b      	adds	r3, r3, r1
 8017b82:	c708      	stmia	r7!, {r3}
 8017b84:	4285      	cmp	r5, r0
 8017b86:	dcef      	bgt.n	8017b68 <__multadd+0x10>
 8017b88:	2e00      	cmp	r6, #0
 8017b8a:	d022      	beq.n	8017bd2 <__multadd+0x7a>
 8017b8c:	68a3      	ldr	r3, [r4, #8]
 8017b8e:	42ab      	cmp	r3, r5
 8017b90:	dc19      	bgt.n	8017bc6 <__multadd+0x6e>
 8017b92:	6861      	ldr	r1, [r4, #4]
 8017b94:	9801      	ldr	r0, [sp, #4]
 8017b96:	3101      	adds	r1, #1
 8017b98:	f7ff ff76 	bl	8017a88 <_Balloc>
 8017b9c:	1e07      	subs	r7, r0, #0
 8017b9e:	d105      	bne.n	8017bac <__multadd+0x54>
 8017ba0:	003a      	movs	r2, r7
 8017ba2:	21ba      	movs	r1, #186	@ 0xba
 8017ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8017bd8 <__multadd+0x80>)
 8017ba6:	480d      	ldr	r0, [pc, #52]	@ (8017bdc <__multadd+0x84>)
 8017ba8:	f000 ff2c 	bl	8018a04 <__assert_func>
 8017bac:	0021      	movs	r1, r4
 8017bae:	6922      	ldr	r2, [r4, #16]
 8017bb0:	310c      	adds	r1, #12
 8017bb2:	3202      	adds	r2, #2
 8017bb4:	0092      	lsls	r2, r2, #2
 8017bb6:	300c      	adds	r0, #12
 8017bb8:	f7fe ffd4 	bl	8016b64 <memcpy>
 8017bbc:	0021      	movs	r1, r4
 8017bbe:	9801      	ldr	r0, [sp, #4]
 8017bc0:	f7ff ffa6 	bl	8017b10 <_Bfree>
 8017bc4:	003c      	movs	r4, r7
 8017bc6:	1d2b      	adds	r3, r5, #4
 8017bc8:	009b      	lsls	r3, r3, #2
 8017bca:	18e3      	adds	r3, r4, r3
 8017bcc:	3501      	adds	r5, #1
 8017bce:	605e      	str	r6, [r3, #4]
 8017bd0:	6125      	str	r5, [r4, #16]
 8017bd2:	0020      	movs	r0, r4
 8017bd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017bd6:	46c0      	nop			@ (mov r8, r8)
 8017bd8:	0801a598 	.word	0x0801a598
 8017bdc:	0801a5a9 	.word	0x0801a5a9

08017be0 <__hi0bits>:
 8017be0:	2280      	movs	r2, #128	@ 0x80
 8017be2:	0003      	movs	r3, r0
 8017be4:	0252      	lsls	r2, r2, #9
 8017be6:	2000      	movs	r0, #0
 8017be8:	4293      	cmp	r3, r2
 8017bea:	d201      	bcs.n	8017bf0 <__hi0bits+0x10>
 8017bec:	041b      	lsls	r3, r3, #16
 8017bee:	3010      	adds	r0, #16
 8017bf0:	2280      	movs	r2, #128	@ 0x80
 8017bf2:	0452      	lsls	r2, r2, #17
 8017bf4:	4293      	cmp	r3, r2
 8017bf6:	d201      	bcs.n	8017bfc <__hi0bits+0x1c>
 8017bf8:	3008      	adds	r0, #8
 8017bfa:	021b      	lsls	r3, r3, #8
 8017bfc:	2280      	movs	r2, #128	@ 0x80
 8017bfe:	0552      	lsls	r2, r2, #21
 8017c00:	4293      	cmp	r3, r2
 8017c02:	d201      	bcs.n	8017c08 <__hi0bits+0x28>
 8017c04:	3004      	adds	r0, #4
 8017c06:	011b      	lsls	r3, r3, #4
 8017c08:	2280      	movs	r2, #128	@ 0x80
 8017c0a:	05d2      	lsls	r2, r2, #23
 8017c0c:	4293      	cmp	r3, r2
 8017c0e:	d201      	bcs.n	8017c14 <__hi0bits+0x34>
 8017c10:	3002      	adds	r0, #2
 8017c12:	009b      	lsls	r3, r3, #2
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	db03      	blt.n	8017c20 <__hi0bits+0x40>
 8017c18:	3001      	adds	r0, #1
 8017c1a:	4213      	tst	r3, r2
 8017c1c:	d100      	bne.n	8017c20 <__hi0bits+0x40>
 8017c1e:	2020      	movs	r0, #32
 8017c20:	4770      	bx	lr

08017c22 <__lo0bits>:
 8017c22:	6803      	ldr	r3, [r0, #0]
 8017c24:	0001      	movs	r1, r0
 8017c26:	2207      	movs	r2, #7
 8017c28:	0018      	movs	r0, r3
 8017c2a:	4010      	ands	r0, r2
 8017c2c:	4213      	tst	r3, r2
 8017c2e:	d00d      	beq.n	8017c4c <__lo0bits+0x2a>
 8017c30:	3a06      	subs	r2, #6
 8017c32:	2000      	movs	r0, #0
 8017c34:	4213      	tst	r3, r2
 8017c36:	d105      	bne.n	8017c44 <__lo0bits+0x22>
 8017c38:	3002      	adds	r0, #2
 8017c3a:	4203      	tst	r3, r0
 8017c3c:	d003      	beq.n	8017c46 <__lo0bits+0x24>
 8017c3e:	40d3      	lsrs	r3, r2
 8017c40:	0010      	movs	r0, r2
 8017c42:	600b      	str	r3, [r1, #0]
 8017c44:	4770      	bx	lr
 8017c46:	089b      	lsrs	r3, r3, #2
 8017c48:	600b      	str	r3, [r1, #0]
 8017c4a:	e7fb      	b.n	8017c44 <__lo0bits+0x22>
 8017c4c:	b29a      	uxth	r2, r3
 8017c4e:	2a00      	cmp	r2, #0
 8017c50:	d101      	bne.n	8017c56 <__lo0bits+0x34>
 8017c52:	2010      	movs	r0, #16
 8017c54:	0c1b      	lsrs	r3, r3, #16
 8017c56:	b2da      	uxtb	r2, r3
 8017c58:	2a00      	cmp	r2, #0
 8017c5a:	d101      	bne.n	8017c60 <__lo0bits+0x3e>
 8017c5c:	3008      	adds	r0, #8
 8017c5e:	0a1b      	lsrs	r3, r3, #8
 8017c60:	071a      	lsls	r2, r3, #28
 8017c62:	d101      	bne.n	8017c68 <__lo0bits+0x46>
 8017c64:	3004      	adds	r0, #4
 8017c66:	091b      	lsrs	r3, r3, #4
 8017c68:	079a      	lsls	r2, r3, #30
 8017c6a:	d101      	bne.n	8017c70 <__lo0bits+0x4e>
 8017c6c:	3002      	adds	r0, #2
 8017c6e:	089b      	lsrs	r3, r3, #2
 8017c70:	07da      	lsls	r2, r3, #31
 8017c72:	d4e9      	bmi.n	8017c48 <__lo0bits+0x26>
 8017c74:	3001      	adds	r0, #1
 8017c76:	085b      	lsrs	r3, r3, #1
 8017c78:	d1e6      	bne.n	8017c48 <__lo0bits+0x26>
 8017c7a:	2020      	movs	r0, #32
 8017c7c:	e7e2      	b.n	8017c44 <__lo0bits+0x22>
	...

08017c80 <__i2b>:
 8017c80:	b510      	push	{r4, lr}
 8017c82:	000c      	movs	r4, r1
 8017c84:	2101      	movs	r1, #1
 8017c86:	f7ff feff 	bl	8017a88 <_Balloc>
 8017c8a:	2800      	cmp	r0, #0
 8017c8c:	d107      	bne.n	8017c9e <__i2b+0x1e>
 8017c8e:	2146      	movs	r1, #70	@ 0x46
 8017c90:	4c05      	ldr	r4, [pc, #20]	@ (8017ca8 <__i2b+0x28>)
 8017c92:	0002      	movs	r2, r0
 8017c94:	4b05      	ldr	r3, [pc, #20]	@ (8017cac <__i2b+0x2c>)
 8017c96:	0020      	movs	r0, r4
 8017c98:	31ff      	adds	r1, #255	@ 0xff
 8017c9a:	f000 feb3 	bl	8018a04 <__assert_func>
 8017c9e:	2301      	movs	r3, #1
 8017ca0:	6144      	str	r4, [r0, #20]
 8017ca2:	6103      	str	r3, [r0, #16]
 8017ca4:	bd10      	pop	{r4, pc}
 8017ca6:	46c0      	nop			@ (mov r8, r8)
 8017ca8:	0801a5a9 	.word	0x0801a5a9
 8017cac:	0801a598 	.word	0x0801a598

08017cb0 <__multiply>:
 8017cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cb2:	0014      	movs	r4, r2
 8017cb4:	690a      	ldr	r2, [r1, #16]
 8017cb6:	6923      	ldr	r3, [r4, #16]
 8017cb8:	000d      	movs	r5, r1
 8017cba:	b08b      	sub	sp, #44	@ 0x2c
 8017cbc:	429a      	cmp	r2, r3
 8017cbe:	db02      	blt.n	8017cc6 <__multiply+0x16>
 8017cc0:	0023      	movs	r3, r4
 8017cc2:	000c      	movs	r4, r1
 8017cc4:	001d      	movs	r5, r3
 8017cc6:	6927      	ldr	r7, [r4, #16]
 8017cc8:	692e      	ldr	r6, [r5, #16]
 8017cca:	6861      	ldr	r1, [r4, #4]
 8017ccc:	19bb      	adds	r3, r7, r6
 8017cce:	9303      	str	r3, [sp, #12]
 8017cd0:	68a3      	ldr	r3, [r4, #8]
 8017cd2:	19ba      	adds	r2, r7, r6
 8017cd4:	4293      	cmp	r3, r2
 8017cd6:	da00      	bge.n	8017cda <__multiply+0x2a>
 8017cd8:	3101      	adds	r1, #1
 8017cda:	f7ff fed5 	bl	8017a88 <_Balloc>
 8017cde:	9002      	str	r0, [sp, #8]
 8017ce0:	2800      	cmp	r0, #0
 8017ce2:	d106      	bne.n	8017cf2 <__multiply+0x42>
 8017ce4:	21b1      	movs	r1, #177	@ 0xb1
 8017ce6:	4b49      	ldr	r3, [pc, #292]	@ (8017e0c <__multiply+0x15c>)
 8017ce8:	4849      	ldr	r0, [pc, #292]	@ (8017e10 <__multiply+0x160>)
 8017cea:	9a02      	ldr	r2, [sp, #8]
 8017cec:	0049      	lsls	r1, r1, #1
 8017cee:	f000 fe89 	bl	8018a04 <__assert_func>
 8017cf2:	9b02      	ldr	r3, [sp, #8]
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	3314      	adds	r3, #20
 8017cf8:	469c      	mov	ip, r3
 8017cfa:	19bb      	adds	r3, r7, r6
 8017cfc:	009b      	lsls	r3, r3, #2
 8017cfe:	4463      	add	r3, ip
 8017d00:	9304      	str	r3, [sp, #16]
 8017d02:	4663      	mov	r3, ip
 8017d04:	9904      	ldr	r1, [sp, #16]
 8017d06:	428b      	cmp	r3, r1
 8017d08:	d32a      	bcc.n	8017d60 <__multiply+0xb0>
 8017d0a:	0023      	movs	r3, r4
 8017d0c:	00bf      	lsls	r7, r7, #2
 8017d0e:	3314      	adds	r3, #20
 8017d10:	3514      	adds	r5, #20
 8017d12:	9308      	str	r3, [sp, #32]
 8017d14:	00b6      	lsls	r6, r6, #2
 8017d16:	19db      	adds	r3, r3, r7
 8017d18:	9305      	str	r3, [sp, #20]
 8017d1a:	19ab      	adds	r3, r5, r6
 8017d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d1e:	2304      	movs	r3, #4
 8017d20:	9306      	str	r3, [sp, #24]
 8017d22:	0023      	movs	r3, r4
 8017d24:	9a05      	ldr	r2, [sp, #20]
 8017d26:	3315      	adds	r3, #21
 8017d28:	9501      	str	r5, [sp, #4]
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	d305      	bcc.n	8017d3a <__multiply+0x8a>
 8017d2e:	1b13      	subs	r3, r2, r4
 8017d30:	3b15      	subs	r3, #21
 8017d32:	089b      	lsrs	r3, r3, #2
 8017d34:	3301      	adds	r3, #1
 8017d36:	009b      	lsls	r3, r3, #2
 8017d38:	9306      	str	r3, [sp, #24]
 8017d3a:	9b01      	ldr	r3, [sp, #4]
 8017d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d3e:	4293      	cmp	r3, r2
 8017d40:	d310      	bcc.n	8017d64 <__multiply+0xb4>
 8017d42:	9b03      	ldr	r3, [sp, #12]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	dd05      	ble.n	8017d54 <__multiply+0xa4>
 8017d48:	9b04      	ldr	r3, [sp, #16]
 8017d4a:	3b04      	subs	r3, #4
 8017d4c:	9304      	str	r3, [sp, #16]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d056      	beq.n	8017e02 <__multiply+0x152>
 8017d54:	9b02      	ldr	r3, [sp, #8]
 8017d56:	9a03      	ldr	r2, [sp, #12]
 8017d58:	0018      	movs	r0, r3
 8017d5a:	611a      	str	r2, [r3, #16]
 8017d5c:	b00b      	add	sp, #44	@ 0x2c
 8017d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d60:	c304      	stmia	r3!, {r2}
 8017d62:	e7cf      	b.n	8017d04 <__multiply+0x54>
 8017d64:	9b01      	ldr	r3, [sp, #4]
 8017d66:	6818      	ldr	r0, [r3, #0]
 8017d68:	b280      	uxth	r0, r0
 8017d6a:	2800      	cmp	r0, #0
 8017d6c:	d01e      	beq.n	8017dac <__multiply+0xfc>
 8017d6e:	4667      	mov	r7, ip
 8017d70:	2500      	movs	r5, #0
 8017d72:	9e08      	ldr	r6, [sp, #32]
 8017d74:	ce02      	ldmia	r6!, {r1}
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	9307      	str	r3, [sp, #28]
 8017d7a:	b28b      	uxth	r3, r1
 8017d7c:	4343      	muls	r3, r0
 8017d7e:	001a      	movs	r2, r3
 8017d80:	466b      	mov	r3, sp
 8017d82:	0c09      	lsrs	r1, r1, #16
 8017d84:	8b9b      	ldrh	r3, [r3, #28]
 8017d86:	4341      	muls	r1, r0
 8017d88:	18d3      	adds	r3, r2, r3
 8017d8a:	9a07      	ldr	r2, [sp, #28]
 8017d8c:	195b      	adds	r3, r3, r5
 8017d8e:	0c12      	lsrs	r2, r2, #16
 8017d90:	1889      	adds	r1, r1, r2
 8017d92:	0c1a      	lsrs	r2, r3, #16
 8017d94:	188a      	adds	r2, r1, r2
 8017d96:	b29b      	uxth	r3, r3
 8017d98:	0c15      	lsrs	r5, r2, #16
 8017d9a:	0412      	lsls	r2, r2, #16
 8017d9c:	431a      	orrs	r2, r3
 8017d9e:	9b05      	ldr	r3, [sp, #20]
 8017da0:	c704      	stmia	r7!, {r2}
 8017da2:	42b3      	cmp	r3, r6
 8017da4:	d8e6      	bhi.n	8017d74 <__multiply+0xc4>
 8017da6:	4663      	mov	r3, ip
 8017da8:	9a06      	ldr	r2, [sp, #24]
 8017daa:	509d      	str	r5, [r3, r2]
 8017dac:	9b01      	ldr	r3, [sp, #4]
 8017dae:	6818      	ldr	r0, [r3, #0]
 8017db0:	0c00      	lsrs	r0, r0, #16
 8017db2:	d020      	beq.n	8017df6 <__multiply+0x146>
 8017db4:	4663      	mov	r3, ip
 8017db6:	0025      	movs	r5, r4
 8017db8:	4661      	mov	r1, ip
 8017dba:	2700      	movs	r7, #0
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	3514      	adds	r5, #20
 8017dc0:	682a      	ldr	r2, [r5, #0]
 8017dc2:	680e      	ldr	r6, [r1, #0]
 8017dc4:	b292      	uxth	r2, r2
 8017dc6:	4342      	muls	r2, r0
 8017dc8:	0c36      	lsrs	r6, r6, #16
 8017dca:	1992      	adds	r2, r2, r6
 8017dcc:	19d2      	adds	r2, r2, r7
 8017dce:	0416      	lsls	r6, r2, #16
 8017dd0:	b29b      	uxth	r3, r3
 8017dd2:	431e      	orrs	r6, r3
 8017dd4:	600e      	str	r6, [r1, #0]
 8017dd6:	cd40      	ldmia	r5!, {r6}
 8017dd8:	684b      	ldr	r3, [r1, #4]
 8017dda:	0c36      	lsrs	r6, r6, #16
 8017ddc:	4346      	muls	r6, r0
 8017dde:	b29b      	uxth	r3, r3
 8017de0:	0c12      	lsrs	r2, r2, #16
 8017de2:	18f3      	adds	r3, r6, r3
 8017de4:	189b      	adds	r3, r3, r2
 8017de6:	9a05      	ldr	r2, [sp, #20]
 8017de8:	0c1f      	lsrs	r7, r3, #16
 8017dea:	3104      	adds	r1, #4
 8017dec:	42aa      	cmp	r2, r5
 8017dee:	d8e7      	bhi.n	8017dc0 <__multiply+0x110>
 8017df0:	4662      	mov	r2, ip
 8017df2:	9906      	ldr	r1, [sp, #24]
 8017df4:	5053      	str	r3, [r2, r1]
 8017df6:	9b01      	ldr	r3, [sp, #4]
 8017df8:	3304      	adds	r3, #4
 8017dfa:	9301      	str	r3, [sp, #4]
 8017dfc:	2304      	movs	r3, #4
 8017dfe:	449c      	add	ip, r3
 8017e00:	e79b      	b.n	8017d3a <__multiply+0x8a>
 8017e02:	9b03      	ldr	r3, [sp, #12]
 8017e04:	3b01      	subs	r3, #1
 8017e06:	9303      	str	r3, [sp, #12]
 8017e08:	e79b      	b.n	8017d42 <__multiply+0x92>
 8017e0a:	46c0      	nop			@ (mov r8, r8)
 8017e0c:	0801a598 	.word	0x0801a598
 8017e10:	0801a5a9 	.word	0x0801a5a9

08017e14 <__pow5mult>:
 8017e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e16:	2303      	movs	r3, #3
 8017e18:	0015      	movs	r5, r2
 8017e1a:	0007      	movs	r7, r0
 8017e1c:	000e      	movs	r6, r1
 8017e1e:	401a      	ands	r2, r3
 8017e20:	421d      	tst	r5, r3
 8017e22:	d008      	beq.n	8017e36 <__pow5mult+0x22>
 8017e24:	4925      	ldr	r1, [pc, #148]	@ (8017ebc <__pow5mult+0xa8>)
 8017e26:	3a01      	subs	r2, #1
 8017e28:	0092      	lsls	r2, r2, #2
 8017e2a:	5852      	ldr	r2, [r2, r1]
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	0031      	movs	r1, r6
 8017e30:	f7ff fe92 	bl	8017b58 <__multadd>
 8017e34:	0006      	movs	r6, r0
 8017e36:	10ad      	asrs	r5, r5, #2
 8017e38:	d03d      	beq.n	8017eb6 <__pow5mult+0xa2>
 8017e3a:	69fc      	ldr	r4, [r7, #28]
 8017e3c:	2c00      	cmp	r4, #0
 8017e3e:	d10f      	bne.n	8017e60 <__pow5mult+0x4c>
 8017e40:	2010      	movs	r0, #16
 8017e42:	f7ff fd65 	bl	8017910 <malloc>
 8017e46:	1e02      	subs	r2, r0, #0
 8017e48:	61f8      	str	r0, [r7, #28]
 8017e4a:	d105      	bne.n	8017e58 <__pow5mult+0x44>
 8017e4c:	21b4      	movs	r1, #180	@ 0xb4
 8017e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8017ec0 <__pow5mult+0xac>)
 8017e50:	481c      	ldr	r0, [pc, #112]	@ (8017ec4 <__pow5mult+0xb0>)
 8017e52:	31ff      	adds	r1, #255	@ 0xff
 8017e54:	f000 fdd6 	bl	8018a04 <__assert_func>
 8017e58:	6044      	str	r4, [r0, #4]
 8017e5a:	6084      	str	r4, [r0, #8]
 8017e5c:	6004      	str	r4, [r0, #0]
 8017e5e:	60c4      	str	r4, [r0, #12]
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	689c      	ldr	r4, [r3, #8]
 8017e64:	9301      	str	r3, [sp, #4]
 8017e66:	2c00      	cmp	r4, #0
 8017e68:	d108      	bne.n	8017e7c <__pow5mult+0x68>
 8017e6a:	0038      	movs	r0, r7
 8017e6c:	4916      	ldr	r1, [pc, #88]	@ (8017ec8 <__pow5mult+0xb4>)
 8017e6e:	f7ff ff07 	bl	8017c80 <__i2b>
 8017e72:	9b01      	ldr	r3, [sp, #4]
 8017e74:	0004      	movs	r4, r0
 8017e76:	6098      	str	r0, [r3, #8]
 8017e78:	2300      	movs	r3, #0
 8017e7a:	6003      	str	r3, [r0, #0]
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	421d      	tst	r5, r3
 8017e80:	d00a      	beq.n	8017e98 <__pow5mult+0x84>
 8017e82:	0031      	movs	r1, r6
 8017e84:	0022      	movs	r2, r4
 8017e86:	0038      	movs	r0, r7
 8017e88:	f7ff ff12 	bl	8017cb0 <__multiply>
 8017e8c:	0031      	movs	r1, r6
 8017e8e:	9001      	str	r0, [sp, #4]
 8017e90:	0038      	movs	r0, r7
 8017e92:	f7ff fe3d 	bl	8017b10 <_Bfree>
 8017e96:	9e01      	ldr	r6, [sp, #4]
 8017e98:	106d      	asrs	r5, r5, #1
 8017e9a:	d00c      	beq.n	8017eb6 <__pow5mult+0xa2>
 8017e9c:	6820      	ldr	r0, [r4, #0]
 8017e9e:	2800      	cmp	r0, #0
 8017ea0:	d107      	bne.n	8017eb2 <__pow5mult+0x9e>
 8017ea2:	0022      	movs	r2, r4
 8017ea4:	0021      	movs	r1, r4
 8017ea6:	0038      	movs	r0, r7
 8017ea8:	f7ff ff02 	bl	8017cb0 <__multiply>
 8017eac:	2300      	movs	r3, #0
 8017eae:	6020      	str	r0, [r4, #0]
 8017eb0:	6003      	str	r3, [r0, #0]
 8017eb2:	0004      	movs	r4, r0
 8017eb4:	e7e2      	b.n	8017e7c <__pow5mult+0x68>
 8017eb6:	0030      	movs	r0, r6
 8017eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017eba:	46c0      	nop			@ (mov r8, r8)
 8017ebc:	0801a604 	.word	0x0801a604
 8017ec0:	0801a529 	.word	0x0801a529
 8017ec4:	0801a5a9 	.word	0x0801a5a9
 8017ec8:	00000271 	.word	0x00000271

08017ecc <__lshift>:
 8017ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ece:	000c      	movs	r4, r1
 8017ed0:	0016      	movs	r6, r2
 8017ed2:	6923      	ldr	r3, [r4, #16]
 8017ed4:	1157      	asrs	r7, r2, #5
 8017ed6:	b085      	sub	sp, #20
 8017ed8:	18fb      	adds	r3, r7, r3
 8017eda:	9301      	str	r3, [sp, #4]
 8017edc:	3301      	adds	r3, #1
 8017ede:	9300      	str	r3, [sp, #0]
 8017ee0:	6849      	ldr	r1, [r1, #4]
 8017ee2:	68a3      	ldr	r3, [r4, #8]
 8017ee4:	9002      	str	r0, [sp, #8]
 8017ee6:	9a00      	ldr	r2, [sp, #0]
 8017ee8:	4293      	cmp	r3, r2
 8017eea:	db10      	blt.n	8017f0e <__lshift+0x42>
 8017eec:	9802      	ldr	r0, [sp, #8]
 8017eee:	f7ff fdcb 	bl	8017a88 <_Balloc>
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	0001      	movs	r1, r0
 8017ef6:	0005      	movs	r5, r0
 8017ef8:	001a      	movs	r2, r3
 8017efa:	3114      	adds	r1, #20
 8017efc:	4298      	cmp	r0, r3
 8017efe:	d10c      	bne.n	8017f1a <__lshift+0x4e>
 8017f00:	21ef      	movs	r1, #239	@ 0xef
 8017f02:	002a      	movs	r2, r5
 8017f04:	4b25      	ldr	r3, [pc, #148]	@ (8017f9c <__lshift+0xd0>)
 8017f06:	4826      	ldr	r0, [pc, #152]	@ (8017fa0 <__lshift+0xd4>)
 8017f08:	0049      	lsls	r1, r1, #1
 8017f0a:	f000 fd7b 	bl	8018a04 <__assert_func>
 8017f0e:	3101      	adds	r1, #1
 8017f10:	005b      	lsls	r3, r3, #1
 8017f12:	e7e8      	b.n	8017ee6 <__lshift+0x1a>
 8017f14:	0098      	lsls	r0, r3, #2
 8017f16:	500a      	str	r2, [r1, r0]
 8017f18:	3301      	adds	r3, #1
 8017f1a:	42bb      	cmp	r3, r7
 8017f1c:	dbfa      	blt.n	8017f14 <__lshift+0x48>
 8017f1e:	43fb      	mvns	r3, r7
 8017f20:	17db      	asrs	r3, r3, #31
 8017f22:	401f      	ands	r7, r3
 8017f24:	00bf      	lsls	r7, r7, #2
 8017f26:	0023      	movs	r3, r4
 8017f28:	201f      	movs	r0, #31
 8017f2a:	19c9      	adds	r1, r1, r7
 8017f2c:	0037      	movs	r7, r6
 8017f2e:	6922      	ldr	r2, [r4, #16]
 8017f30:	3314      	adds	r3, #20
 8017f32:	0092      	lsls	r2, r2, #2
 8017f34:	189a      	adds	r2, r3, r2
 8017f36:	4007      	ands	r7, r0
 8017f38:	4206      	tst	r6, r0
 8017f3a:	d029      	beq.n	8017f90 <__lshift+0xc4>
 8017f3c:	3001      	adds	r0, #1
 8017f3e:	1bc0      	subs	r0, r0, r7
 8017f40:	9003      	str	r0, [sp, #12]
 8017f42:	468c      	mov	ip, r1
 8017f44:	2000      	movs	r0, #0
 8017f46:	681e      	ldr	r6, [r3, #0]
 8017f48:	40be      	lsls	r6, r7
 8017f4a:	4306      	orrs	r6, r0
 8017f4c:	4660      	mov	r0, ip
 8017f4e:	c040      	stmia	r0!, {r6}
 8017f50:	4684      	mov	ip, r0
 8017f52:	9e03      	ldr	r6, [sp, #12]
 8017f54:	cb01      	ldmia	r3!, {r0}
 8017f56:	40f0      	lsrs	r0, r6
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	d8f4      	bhi.n	8017f46 <__lshift+0x7a>
 8017f5c:	0026      	movs	r6, r4
 8017f5e:	3615      	adds	r6, #21
 8017f60:	2304      	movs	r3, #4
 8017f62:	42b2      	cmp	r2, r6
 8017f64:	d304      	bcc.n	8017f70 <__lshift+0xa4>
 8017f66:	1b13      	subs	r3, r2, r4
 8017f68:	3b15      	subs	r3, #21
 8017f6a:	089b      	lsrs	r3, r3, #2
 8017f6c:	3301      	adds	r3, #1
 8017f6e:	009b      	lsls	r3, r3, #2
 8017f70:	50c8      	str	r0, [r1, r3]
 8017f72:	2800      	cmp	r0, #0
 8017f74:	d002      	beq.n	8017f7c <__lshift+0xb0>
 8017f76:	9b01      	ldr	r3, [sp, #4]
 8017f78:	3302      	adds	r3, #2
 8017f7a:	9300      	str	r3, [sp, #0]
 8017f7c:	9b00      	ldr	r3, [sp, #0]
 8017f7e:	9802      	ldr	r0, [sp, #8]
 8017f80:	3b01      	subs	r3, #1
 8017f82:	0021      	movs	r1, r4
 8017f84:	612b      	str	r3, [r5, #16]
 8017f86:	f7ff fdc3 	bl	8017b10 <_Bfree>
 8017f8a:	0028      	movs	r0, r5
 8017f8c:	b005      	add	sp, #20
 8017f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f90:	cb01      	ldmia	r3!, {r0}
 8017f92:	c101      	stmia	r1!, {r0}
 8017f94:	429a      	cmp	r2, r3
 8017f96:	d8fb      	bhi.n	8017f90 <__lshift+0xc4>
 8017f98:	e7f0      	b.n	8017f7c <__lshift+0xb0>
 8017f9a:	46c0      	nop			@ (mov r8, r8)
 8017f9c:	0801a598 	.word	0x0801a598
 8017fa0:	0801a5a9 	.word	0x0801a5a9

08017fa4 <__mcmp>:
 8017fa4:	b530      	push	{r4, r5, lr}
 8017fa6:	690b      	ldr	r3, [r1, #16]
 8017fa8:	6904      	ldr	r4, [r0, #16]
 8017faa:	0002      	movs	r2, r0
 8017fac:	1ae0      	subs	r0, r4, r3
 8017fae:	429c      	cmp	r4, r3
 8017fb0:	d10f      	bne.n	8017fd2 <__mcmp+0x2e>
 8017fb2:	3214      	adds	r2, #20
 8017fb4:	009b      	lsls	r3, r3, #2
 8017fb6:	3114      	adds	r1, #20
 8017fb8:	0014      	movs	r4, r2
 8017fba:	18c9      	adds	r1, r1, r3
 8017fbc:	18d2      	adds	r2, r2, r3
 8017fbe:	3a04      	subs	r2, #4
 8017fc0:	3904      	subs	r1, #4
 8017fc2:	6815      	ldr	r5, [r2, #0]
 8017fc4:	680b      	ldr	r3, [r1, #0]
 8017fc6:	429d      	cmp	r5, r3
 8017fc8:	d004      	beq.n	8017fd4 <__mcmp+0x30>
 8017fca:	2001      	movs	r0, #1
 8017fcc:	429d      	cmp	r5, r3
 8017fce:	d200      	bcs.n	8017fd2 <__mcmp+0x2e>
 8017fd0:	3802      	subs	r0, #2
 8017fd2:	bd30      	pop	{r4, r5, pc}
 8017fd4:	4294      	cmp	r4, r2
 8017fd6:	d3f2      	bcc.n	8017fbe <__mcmp+0x1a>
 8017fd8:	e7fb      	b.n	8017fd2 <__mcmp+0x2e>
	...

08017fdc <__mdiff>:
 8017fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fde:	000c      	movs	r4, r1
 8017fe0:	b087      	sub	sp, #28
 8017fe2:	9000      	str	r0, [sp, #0]
 8017fe4:	0011      	movs	r1, r2
 8017fe6:	0020      	movs	r0, r4
 8017fe8:	0017      	movs	r7, r2
 8017fea:	f7ff ffdb 	bl	8017fa4 <__mcmp>
 8017fee:	1e05      	subs	r5, r0, #0
 8017ff0:	d110      	bne.n	8018014 <__mdiff+0x38>
 8017ff2:	0001      	movs	r1, r0
 8017ff4:	9800      	ldr	r0, [sp, #0]
 8017ff6:	f7ff fd47 	bl	8017a88 <_Balloc>
 8017ffa:	1e02      	subs	r2, r0, #0
 8017ffc:	d104      	bne.n	8018008 <__mdiff+0x2c>
 8017ffe:	4b40      	ldr	r3, [pc, #256]	@ (8018100 <__mdiff+0x124>)
 8018000:	4840      	ldr	r0, [pc, #256]	@ (8018104 <__mdiff+0x128>)
 8018002:	4941      	ldr	r1, [pc, #260]	@ (8018108 <__mdiff+0x12c>)
 8018004:	f000 fcfe 	bl	8018a04 <__assert_func>
 8018008:	2301      	movs	r3, #1
 801800a:	6145      	str	r5, [r0, #20]
 801800c:	6103      	str	r3, [r0, #16]
 801800e:	0010      	movs	r0, r2
 8018010:	b007      	add	sp, #28
 8018012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018014:	2600      	movs	r6, #0
 8018016:	42b0      	cmp	r0, r6
 8018018:	da03      	bge.n	8018022 <__mdiff+0x46>
 801801a:	0023      	movs	r3, r4
 801801c:	003c      	movs	r4, r7
 801801e:	001f      	movs	r7, r3
 8018020:	3601      	adds	r6, #1
 8018022:	6861      	ldr	r1, [r4, #4]
 8018024:	9800      	ldr	r0, [sp, #0]
 8018026:	f7ff fd2f 	bl	8017a88 <_Balloc>
 801802a:	1e02      	subs	r2, r0, #0
 801802c:	d103      	bne.n	8018036 <__mdiff+0x5a>
 801802e:	4b34      	ldr	r3, [pc, #208]	@ (8018100 <__mdiff+0x124>)
 8018030:	4834      	ldr	r0, [pc, #208]	@ (8018104 <__mdiff+0x128>)
 8018032:	4936      	ldr	r1, [pc, #216]	@ (801810c <__mdiff+0x130>)
 8018034:	e7e6      	b.n	8018004 <__mdiff+0x28>
 8018036:	6923      	ldr	r3, [r4, #16]
 8018038:	3414      	adds	r4, #20
 801803a:	9300      	str	r3, [sp, #0]
 801803c:	009b      	lsls	r3, r3, #2
 801803e:	18e3      	adds	r3, r4, r3
 8018040:	0021      	movs	r1, r4
 8018042:	9401      	str	r4, [sp, #4]
 8018044:	003c      	movs	r4, r7
 8018046:	9302      	str	r3, [sp, #8]
 8018048:	693b      	ldr	r3, [r7, #16]
 801804a:	3414      	adds	r4, #20
 801804c:	009b      	lsls	r3, r3, #2
 801804e:	18e3      	adds	r3, r4, r3
 8018050:	9303      	str	r3, [sp, #12]
 8018052:	0003      	movs	r3, r0
 8018054:	60c6      	str	r6, [r0, #12]
 8018056:	468c      	mov	ip, r1
 8018058:	2000      	movs	r0, #0
 801805a:	3314      	adds	r3, #20
 801805c:	9304      	str	r3, [sp, #16]
 801805e:	9305      	str	r3, [sp, #20]
 8018060:	4663      	mov	r3, ip
 8018062:	cb20      	ldmia	r3!, {r5}
 8018064:	b2a9      	uxth	r1, r5
 8018066:	000e      	movs	r6, r1
 8018068:	469c      	mov	ip, r3
 801806a:	cc08      	ldmia	r4!, {r3}
 801806c:	0c2d      	lsrs	r5, r5, #16
 801806e:	b299      	uxth	r1, r3
 8018070:	1a71      	subs	r1, r6, r1
 8018072:	1809      	adds	r1, r1, r0
 8018074:	0c1b      	lsrs	r3, r3, #16
 8018076:	1408      	asrs	r0, r1, #16
 8018078:	1aeb      	subs	r3, r5, r3
 801807a:	181b      	adds	r3, r3, r0
 801807c:	1418      	asrs	r0, r3, #16
 801807e:	b289      	uxth	r1, r1
 8018080:	041b      	lsls	r3, r3, #16
 8018082:	4319      	orrs	r1, r3
 8018084:	9b05      	ldr	r3, [sp, #20]
 8018086:	c302      	stmia	r3!, {r1}
 8018088:	9305      	str	r3, [sp, #20]
 801808a:	9b03      	ldr	r3, [sp, #12]
 801808c:	42a3      	cmp	r3, r4
 801808e:	d8e7      	bhi.n	8018060 <__mdiff+0x84>
 8018090:	0039      	movs	r1, r7
 8018092:	9c03      	ldr	r4, [sp, #12]
 8018094:	3115      	adds	r1, #21
 8018096:	2304      	movs	r3, #4
 8018098:	428c      	cmp	r4, r1
 801809a:	d304      	bcc.n	80180a6 <__mdiff+0xca>
 801809c:	1be3      	subs	r3, r4, r7
 801809e:	3b15      	subs	r3, #21
 80180a0:	089b      	lsrs	r3, r3, #2
 80180a2:	3301      	adds	r3, #1
 80180a4:	009b      	lsls	r3, r3, #2
 80180a6:	9901      	ldr	r1, [sp, #4]
 80180a8:	18cd      	adds	r5, r1, r3
 80180aa:	9904      	ldr	r1, [sp, #16]
 80180ac:	002e      	movs	r6, r5
 80180ae:	18cb      	adds	r3, r1, r3
 80180b0:	001f      	movs	r7, r3
 80180b2:	9902      	ldr	r1, [sp, #8]
 80180b4:	428e      	cmp	r6, r1
 80180b6:	d311      	bcc.n	80180dc <__mdiff+0x100>
 80180b8:	9c02      	ldr	r4, [sp, #8]
 80180ba:	1ee9      	subs	r1, r5, #3
 80180bc:	2000      	movs	r0, #0
 80180be:	428c      	cmp	r4, r1
 80180c0:	d304      	bcc.n	80180cc <__mdiff+0xf0>
 80180c2:	0021      	movs	r1, r4
 80180c4:	3103      	adds	r1, #3
 80180c6:	1b49      	subs	r1, r1, r5
 80180c8:	0889      	lsrs	r1, r1, #2
 80180ca:	0088      	lsls	r0, r1, #2
 80180cc:	181b      	adds	r3, r3, r0
 80180ce:	3b04      	subs	r3, #4
 80180d0:	6819      	ldr	r1, [r3, #0]
 80180d2:	2900      	cmp	r1, #0
 80180d4:	d010      	beq.n	80180f8 <__mdiff+0x11c>
 80180d6:	9b00      	ldr	r3, [sp, #0]
 80180d8:	6113      	str	r3, [r2, #16]
 80180da:	e798      	b.n	801800e <__mdiff+0x32>
 80180dc:	4684      	mov	ip, r0
 80180de:	ce02      	ldmia	r6!, {r1}
 80180e0:	b288      	uxth	r0, r1
 80180e2:	4460      	add	r0, ip
 80180e4:	1400      	asrs	r0, r0, #16
 80180e6:	0c0c      	lsrs	r4, r1, #16
 80180e8:	1904      	adds	r4, r0, r4
 80180ea:	4461      	add	r1, ip
 80180ec:	1420      	asrs	r0, r4, #16
 80180ee:	b289      	uxth	r1, r1
 80180f0:	0424      	lsls	r4, r4, #16
 80180f2:	4321      	orrs	r1, r4
 80180f4:	c702      	stmia	r7!, {r1}
 80180f6:	e7dc      	b.n	80180b2 <__mdiff+0xd6>
 80180f8:	9900      	ldr	r1, [sp, #0]
 80180fa:	3901      	subs	r1, #1
 80180fc:	9100      	str	r1, [sp, #0]
 80180fe:	e7e6      	b.n	80180ce <__mdiff+0xf2>
 8018100:	0801a598 	.word	0x0801a598
 8018104:	0801a5a9 	.word	0x0801a5a9
 8018108:	00000237 	.word	0x00000237
 801810c:	00000245 	.word	0x00000245

08018110 <__d2b>:
 8018110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018112:	2101      	movs	r1, #1
 8018114:	0016      	movs	r6, r2
 8018116:	001f      	movs	r7, r3
 8018118:	f7ff fcb6 	bl	8017a88 <_Balloc>
 801811c:	1e04      	subs	r4, r0, #0
 801811e:	d105      	bne.n	801812c <__d2b+0x1c>
 8018120:	0022      	movs	r2, r4
 8018122:	4b25      	ldr	r3, [pc, #148]	@ (80181b8 <__d2b+0xa8>)
 8018124:	4825      	ldr	r0, [pc, #148]	@ (80181bc <__d2b+0xac>)
 8018126:	4926      	ldr	r1, [pc, #152]	@ (80181c0 <__d2b+0xb0>)
 8018128:	f000 fc6c 	bl	8018a04 <__assert_func>
 801812c:	033b      	lsls	r3, r7, #12
 801812e:	007d      	lsls	r5, r7, #1
 8018130:	0b1b      	lsrs	r3, r3, #12
 8018132:	0d6d      	lsrs	r5, r5, #21
 8018134:	d002      	beq.n	801813c <__d2b+0x2c>
 8018136:	2280      	movs	r2, #128	@ 0x80
 8018138:	0352      	lsls	r2, r2, #13
 801813a:	4313      	orrs	r3, r2
 801813c:	9301      	str	r3, [sp, #4]
 801813e:	2e00      	cmp	r6, #0
 8018140:	d025      	beq.n	801818e <__d2b+0x7e>
 8018142:	4668      	mov	r0, sp
 8018144:	9600      	str	r6, [sp, #0]
 8018146:	f7ff fd6c 	bl	8017c22 <__lo0bits>
 801814a:	9b01      	ldr	r3, [sp, #4]
 801814c:	9900      	ldr	r1, [sp, #0]
 801814e:	2800      	cmp	r0, #0
 8018150:	d01b      	beq.n	801818a <__d2b+0x7a>
 8018152:	2220      	movs	r2, #32
 8018154:	001e      	movs	r6, r3
 8018156:	1a12      	subs	r2, r2, r0
 8018158:	4096      	lsls	r6, r2
 801815a:	0032      	movs	r2, r6
 801815c:	40c3      	lsrs	r3, r0
 801815e:	430a      	orrs	r2, r1
 8018160:	6162      	str	r2, [r4, #20]
 8018162:	9301      	str	r3, [sp, #4]
 8018164:	9e01      	ldr	r6, [sp, #4]
 8018166:	61a6      	str	r6, [r4, #24]
 8018168:	1e73      	subs	r3, r6, #1
 801816a:	419e      	sbcs	r6, r3
 801816c:	3601      	adds	r6, #1
 801816e:	6126      	str	r6, [r4, #16]
 8018170:	2d00      	cmp	r5, #0
 8018172:	d014      	beq.n	801819e <__d2b+0x8e>
 8018174:	2635      	movs	r6, #53	@ 0x35
 8018176:	4b13      	ldr	r3, [pc, #76]	@ (80181c4 <__d2b+0xb4>)
 8018178:	18ed      	adds	r5, r5, r3
 801817a:	9b08      	ldr	r3, [sp, #32]
 801817c:	182d      	adds	r5, r5, r0
 801817e:	601d      	str	r5, [r3, #0]
 8018180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018182:	1a36      	subs	r6, r6, r0
 8018184:	601e      	str	r6, [r3, #0]
 8018186:	0020      	movs	r0, r4
 8018188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801818a:	6161      	str	r1, [r4, #20]
 801818c:	e7ea      	b.n	8018164 <__d2b+0x54>
 801818e:	a801      	add	r0, sp, #4
 8018190:	f7ff fd47 	bl	8017c22 <__lo0bits>
 8018194:	9b01      	ldr	r3, [sp, #4]
 8018196:	2601      	movs	r6, #1
 8018198:	6163      	str	r3, [r4, #20]
 801819a:	3020      	adds	r0, #32
 801819c:	e7e7      	b.n	801816e <__d2b+0x5e>
 801819e:	4b0a      	ldr	r3, [pc, #40]	@ (80181c8 <__d2b+0xb8>)
 80181a0:	18c0      	adds	r0, r0, r3
 80181a2:	9b08      	ldr	r3, [sp, #32]
 80181a4:	6018      	str	r0, [r3, #0]
 80181a6:	4b09      	ldr	r3, [pc, #36]	@ (80181cc <__d2b+0xbc>)
 80181a8:	18f3      	adds	r3, r6, r3
 80181aa:	009b      	lsls	r3, r3, #2
 80181ac:	18e3      	adds	r3, r4, r3
 80181ae:	6958      	ldr	r0, [r3, #20]
 80181b0:	f7ff fd16 	bl	8017be0 <__hi0bits>
 80181b4:	0176      	lsls	r6, r6, #5
 80181b6:	e7e3      	b.n	8018180 <__d2b+0x70>
 80181b8:	0801a598 	.word	0x0801a598
 80181bc:	0801a5a9 	.word	0x0801a5a9
 80181c0:	0000030f 	.word	0x0000030f
 80181c4:	fffffbcd 	.word	0xfffffbcd
 80181c8:	fffffbce 	.word	0xfffffbce
 80181cc:	3fffffff 	.word	0x3fffffff

080181d0 <__ssputs_r>:
 80181d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181d2:	688e      	ldr	r6, [r1, #8]
 80181d4:	b085      	sub	sp, #20
 80181d6:	001f      	movs	r7, r3
 80181d8:	000c      	movs	r4, r1
 80181da:	680b      	ldr	r3, [r1, #0]
 80181dc:	9002      	str	r0, [sp, #8]
 80181de:	9203      	str	r2, [sp, #12]
 80181e0:	42be      	cmp	r6, r7
 80181e2:	d830      	bhi.n	8018246 <__ssputs_r+0x76>
 80181e4:	210c      	movs	r1, #12
 80181e6:	5e62      	ldrsh	r2, [r4, r1]
 80181e8:	2190      	movs	r1, #144	@ 0x90
 80181ea:	00c9      	lsls	r1, r1, #3
 80181ec:	420a      	tst	r2, r1
 80181ee:	d028      	beq.n	8018242 <__ssputs_r+0x72>
 80181f0:	2003      	movs	r0, #3
 80181f2:	6921      	ldr	r1, [r4, #16]
 80181f4:	1a5b      	subs	r3, r3, r1
 80181f6:	9301      	str	r3, [sp, #4]
 80181f8:	6963      	ldr	r3, [r4, #20]
 80181fa:	4343      	muls	r3, r0
 80181fc:	9801      	ldr	r0, [sp, #4]
 80181fe:	0fdd      	lsrs	r5, r3, #31
 8018200:	18ed      	adds	r5, r5, r3
 8018202:	1c7b      	adds	r3, r7, #1
 8018204:	181b      	adds	r3, r3, r0
 8018206:	106d      	asrs	r5, r5, #1
 8018208:	42ab      	cmp	r3, r5
 801820a:	d900      	bls.n	801820e <__ssputs_r+0x3e>
 801820c:	001d      	movs	r5, r3
 801820e:	0552      	lsls	r2, r2, #21
 8018210:	d528      	bpl.n	8018264 <__ssputs_r+0x94>
 8018212:	0029      	movs	r1, r5
 8018214:	9802      	ldr	r0, [sp, #8]
 8018216:	f7ff fba7 	bl	8017968 <_malloc_r>
 801821a:	1e06      	subs	r6, r0, #0
 801821c:	d02c      	beq.n	8018278 <__ssputs_r+0xa8>
 801821e:	9a01      	ldr	r2, [sp, #4]
 8018220:	6921      	ldr	r1, [r4, #16]
 8018222:	f7fe fc9f 	bl	8016b64 <memcpy>
 8018226:	89a2      	ldrh	r2, [r4, #12]
 8018228:	4b18      	ldr	r3, [pc, #96]	@ (801828c <__ssputs_r+0xbc>)
 801822a:	401a      	ands	r2, r3
 801822c:	2380      	movs	r3, #128	@ 0x80
 801822e:	4313      	orrs	r3, r2
 8018230:	81a3      	strh	r3, [r4, #12]
 8018232:	9b01      	ldr	r3, [sp, #4]
 8018234:	6126      	str	r6, [r4, #16]
 8018236:	18f6      	adds	r6, r6, r3
 8018238:	6026      	str	r6, [r4, #0]
 801823a:	003e      	movs	r6, r7
 801823c:	6165      	str	r5, [r4, #20]
 801823e:	1aed      	subs	r5, r5, r3
 8018240:	60a5      	str	r5, [r4, #8]
 8018242:	42be      	cmp	r6, r7
 8018244:	d900      	bls.n	8018248 <__ssputs_r+0x78>
 8018246:	003e      	movs	r6, r7
 8018248:	0032      	movs	r2, r6
 801824a:	9903      	ldr	r1, [sp, #12]
 801824c:	6820      	ldr	r0, [r4, #0]
 801824e:	f000 fbb3 	bl	80189b8 <memmove>
 8018252:	2000      	movs	r0, #0
 8018254:	68a3      	ldr	r3, [r4, #8]
 8018256:	1b9b      	subs	r3, r3, r6
 8018258:	60a3      	str	r3, [r4, #8]
 801825a:	6823      	ldr	r3, [r4, #0]
 801825c:	199b      	adds	r3, r3, r6
 801825e:	6023      	str	r3, [r4, #0]
 8018260:	b005      	add	sp, #20
 8018262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018264:	002a      	movs	r2, r5
 8018266:	9802      	ldr	r0, [sp, #8]
 8018268:	f000 fc29 	bl	8018abe <_realloc_r>
 801826c:	1e06      	subs	r6, r0, #0
 801826e:	d1e0      	bne.n	8018232 <__ssputs_r+0x62>
 8018270:	6921      	ldr	r1, [r4, #16]
 8018272:	9802      	ldr	r0, [sp, #8]
 8018274:	f7ff fb02 	bl	801787c <_free_r>
 8018278:	230c      	movs	r3, #12
 801827a:	2001      	movs	r0, #1
 801827c:	9a02      	ldr	r2, [sp, #8]
 801827e:	4240      	negs	r0, r0
 8018280:	6013      	str	r3, [r2, #0]
 8018282:	89a2      	ldrh	r2, [r4, #12]
 8018284:	3334      	adds	r3, #52	@ 0x34
 8018286:	4313      	orrs	r3, r2
 8018288:	81a3      	strh	r3, [r4, #12]
 801828a:	e7e9      	b.n	8018260 <__ssputs_r+0x90>
 801828c:	fffffb7f 	.word	0xfffffb7f

08018290 <_svfiprintf_r>:
 8018290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018292:	b0a1      	sub	sp, #132	@ 0x84
 8018294:	9003      	str	r0, [sp, #12]
 8018296:	001d      	movs	r5, r3
 8018298:	898b      	ldrh	r3, [r1, #12]
 801829a:	000f      	movs	r7, r1
 801829c:	0016      	movs	r6, r2
 801829e:	061b      	lsls	r3, r3, #24
 80182a0:	d511      	bpl.n	80182c6 <_svfiprintf_r+0x36>
 80182a2:	690b      	ldr	r3, [r1, #16]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d10e      	bne.n	80182c6 <_svfiprintf_r+0x36>
 80182a8:	2140      	movs	r1, #64	@ 0x40
 80182aa:	f7ff fb5d 	bl	8017968 <_malloc_r>
 80182ae:	6038      	str	r0, [r7, #0]
 80182b0:	6138      	str	r0, [r7, #16]
 80182b2:	2800      	cmp	r0, #0
 80182b4:	d105      	bne.n	80182c2 <_svfiprintf_r+0x32>
 80182b6:	230c      	movs	r3, #12
 80182b8:	9a03      	ldr	r2, [sp, #12]
 80182ba:	6013      	str	r3, [r2, #0]
 80182bc:	2001      	movs	r0, #1
 80182be:	4240      	negs	r0, r0
 80182c0:	e0cf      	b.n	8018462 <_svfiprintf_r+0x1d2>
 80182c2:	2340      	movs	r3, #64	@ 0x40
 80182c4:	617b      	str	r3, [r7, #20]
 80182c6:	2300      	movs	r3, #0
 80182c8:	ac08      	add	r4, sp, #32
 80182ca:	6163      	str	r3, [r4, #20]
 80182cc:	3320      	adds	r3, #32
 80182ce:	7663      	strb	r3, [r4, #25]
 80182d0:	3310      	adds	r3, #16
 80182d2:	76a3      	strb	r3, [r4, #26]
 80182d4:	9507      	str	r5, [sp, #28]
 80182d6:	0035      	movs	r5, r6
 80182d8:	782b      	ldrb	r3, [r5, #0]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d001      	beq.n	80182e2 <_svfiprintf_r+0x52>
 80182de:	2b25      	cmp	r3, #37	@ 0x25
 80182e0:	d148      	bne.n	8018374 <_svfiprintf_r+0xe4>
 80182e2:	1bab      	subs	r3, r5, r6
 80182e4:	9305      	str	r3, [sp, #20]
 80182e6:	42b5      	cmp	r5, r6
 80182e8:	d00b      	beq.n	8018302 <_svfiprintf_r+0x72>
 80182ea:	0032      	movs	r2, r6
 80182ec:	0039      	movs	r1, r7
 80182ee:	9803      	ldr	r0, [sp, #12]
 80182f0:	f7ff ff6e 	bl	80181d0 <__ssputs_r>
 80182f4:	3001      	adds	r0, #1
 80182f6:	d100      	bne.n	80182fa <_svfiprintf_r+0x6a>
 80182f8:	e0ae      	b.n	8018458 <_svfiprintf_r+0x1c8>
 80182fa:	6963      	ldr	r3, [r4, #20]
 80182fc:	9a05      	ldr	r2, [sp, #20]
 80182fe:	189b      	adds	r3, r3, r2
 8018300:	6163      	str	r3, [r4, #20]
 8018302:	782b      	ldrb	r3, [r5, #0]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d100      	bne.n	801830a <_svfiprintf_r+0x7a>
 8018308:	e0a6      	b.n	8018458 <_svfiprintf_r+0x1c8>
 801830a:	2201      	movs	r2, #1
 801830c:	2300      	movs	r3, #0
 801830e:	4252      	negs	r2, r2
 8018310:	6062      	str	r2, [r4, #4]
 8018312:	a904      	add	r1, sp, #16
 8018314:	3254      	adds	r2, #84	@ 0x54
 8018316:	1852      	adds	r2, r2, r1
 8018318:	1c6e      	adds	r6, r5, #1
 801831a:	6023      	str	r3, [r4, #0]
 801831c:	60e3      	str	r3, [r4, #12]
 801831e:	60a3      	str	r3, [r4, #8]
 8018320:	7013      	strb	r3, [r2, #0]
 8018322:	65a3      	str	r3, [r4, #88]	@ 0x58
 8018324:	4b54      	ldr	r3, [pc, #336]	@ (8018478 <_svfiprintf_r+0x1e8>)
 8018326:	2205      	movs	r2, #5
 8018328:	0018      	movs	r0, r3
 801832a:	7831      	ldrb	r1, [r6, #0]
 801832c:	9305      	str	r3, [sp, #20]
 801832e:	f7fe fc0e 	bl	8016b4e <memchr>
 8018332:	1c75      	adds	r5, r6, #1
 8018334:	2800      	cmp	r0, #0
 8018336:	d11f      	bne.n	8018378 <_svfiprintf_r+0xe8>
 8018338:	6822      	ldr	r2, [r4, #0]
 801833a:	06d3      	lsls	r3, r2, #27
 801833c:	d504      	bpl.n	8018348 <_svfiprintf_r+0xb8>
 801833e:	2353      	movs	r3, #83	@ 0x53
 8018340:	a904      	add	r1, sp, #16
 8018342:	185b      	adds	r3, r3, r1
 8018344:	2120      	movs	r1, #32
 8018346:	7019      	strb	r1, [r3, #0]
 8018348:	0713      	lsls	r3, r2, #28
 801834a:	d504      	bpl.n	8018356 <_svfiprintf_r+0xc6>
 801834c:	2353      	movs	r3, #83	@ 0x53
 801834e:	a904      	add	r1, sp, #16
 8018350:	185b      	adds	r3, r3, r1
 8018352:	212b      	movs	r1, #43	@ 0x2b
 8018354:	7019      	strb	r1, [r3, #0]
 8018356:	7833      	ldrb	r3, [r6, #0]
 8018358:	2b2a      	cmp	r3, #42	@ 0x2a
 801835a:	d016      	beq.n	801838a <_svfiprintf_r+0xfa>
 801835c:	0035      	movs	r5, r6
 801835e:	2100      	movs	r1, #0
 8018360:	200a      	movs	r0, #10
 8018362:	68e3      	ldr	r3, [r4, #12]
 8018364:	782a      	ldrb	r2, [r5, #0]
 8018366:	1c6e      	adds	r6, r5, #1
 8018368:	3a30      	subs	r2, #48	@ 0x30
 801836a:	2a09      	cmp	r2, #9
 801836c:	d950      	bls.n	8018410 <_svfiprintf_r+0x180>
 801836e:	2900      	cmp	r1, #0
 8018370:	d111      	bne.n	8018396 <_svfiprintf_r+0x106>
 8018372:	e017      	b.n	80183a4 <_svfiprintf_r+0x114>
 8018374:	3501      	adds	r5, #1
 8018376:	e7af      	b.n	80182d8 <_svfiprintf_r+0x48>
 8018378:	9b05      	ldr	r3, [sp, #20]
 801837a:	6822      	ldr	r2, [r4, #0]
 801837c:	1ac0      	subs	r0, r0, r3
 801837e:	2301      	movs	r3, #1
 8018380:	4083      	lsls	r3, r0
 8018382:	4313      	orrs	r3, r2
 8018384:	002e      	movs	r6, r5
 8018386:	6023      	str	r3, [r4, #0]
 8018388:	e7cc      	b.n	8018324 <_svfiprintf_r+0x94>
 801838a:	9b07      	ldr	r3, [sp, #28]
 801838c:	1d19      	adds	r1, r3, #4
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	9107      	str	r1, [sp, #28]
 8018392:	2b00      	cmp	r3, #0
 8018394:	db01      	blt.n	801839a <_svfiprintf_r+0x10a>
 8018396:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018398:	e004      	b.n	80183a4 <_svfiprintf_r+0x114>
 801839a:	425b      	negs	r3, r3
 801839c:	60e3      	str	r3, [r4, #12]
 801839e:	2302      	movs	r3, #2
 80183a0:	4313      	orrs	r3, r2
 80183a2:	6023      	str	r3, [r4, #0]
 80183a4:	782b      	ldrb	r3, [r5, #0]
 80183a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80183a8:	d10c      	bne.n	80183c4 <_svfiprintf_r+0x134>
 80183aa:	786b      	ldrb	r3, [r5, #1]
 80183ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80183ae:	d134      	bne.n	801841a <_svfiprintf_r+0x18a>
 80183b0:	9b07      	ldr	r3, [sp, #28]
 80183b2:	3502      	adds	r5, #2
 80183b4:	1d1a      	adds	r2, r3, #4
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	9207      	str	r2, [sp, #28]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	da01      	bge.n	80183c2 <_svfiprintf_r+0x132>
 80183be:	2301      	movs	r3, #1
 80183c0:	425b      	negs	r3, r3
 80183c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80183c4:	4e2d      	ldr	r6, [pc, #180]	@ (801847c <_svfiprintf_r+0x1ec>)
 80183c6:	2203      	movs	r2, #3
 80183c8:	0030      	movs	r0, r6
 80183ca:	7829      	ldrb	r1, [r5, #0]
 80183cc:	f7fe fbbf 	bl	8016b4e <memchr>
 80183d0:	2800      	cmp	r0, #0
 80183d2:	d006      	beq.n	80183e2 <_svfiprintf_r+0x152>
 80183d4:	2340      	movs	r3, #64	@ 0x40
 80183d6:	1b80      	subs	r0, r0, r6
 80183d8:	4083      	lsls	r3, r0
 80183da:	6822      	ldr	r2, [r4, #0]
 80183dc:	3501      	adds	r5, #1
 80183de:	4313      	orrs	r3, r2
 80183e0:	6023      	str	r3, [r4, #0]
 80183e2:	7829      	ldrb	r1, [r5, #0]
 80183e4:	2206      	movs	r2, #6
 80183e6:	4826      	ldr	r0, [pc, #152]	@ (8018480 <_svfiprintf_r+0x1f0>)
 80183e8:	1c6e      	adds	r6, r5, #1
 80183ea:	7621      	strb	r1, [r4, #24]
 80183ec:	f7fe fbaf 	bl	8016b4e <memchr>
 80183f0:	2800      	cmp	r0, #0
 80183f2:	d038      	beq.n	8018466 <_svfiprintf_r+0x1d6>
 80183f4:	4b23      	ldr	r3, [pc, #140]	@ (8018484 <_svfiprintf_r+0x1f4>)
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d122      	bne.n	8018440 <_svfiprintf_r+0x1b0>
 80183fa:	2207      	movs	r2, #7
 80183fc:	9b07      	ldr	r3, [sp, #28]
 80183fe:	3307      	adds	r3, #7
 8018400:	4393      	bics	r3, r2
 8018402:	3308      	adds	r3, #8
 8018404:	9307      	str	r3, [sp, #28]
 8018406:	6963      	ldr	r3, [r4, #20]
 8018408:	9a04      	ldr	r2, [sp, #16]
 801840a:	189b      	adds	r3, r3, r2
 801840c:	6163      	str	r3, [r4, #20]
 801840e:	e762      	b.n	80182d6 <_svfiprintf_r+0x46>
 8018410:	4343      	muls	r3, r0
 8018412:	0035      	movs	r5, r6
 8018414:	2101      	movs	r1, #1
 8018416:	189b      	adds	r3, r3, r2
 8018418:	e7a4      	b.n	8018364 <_svfiprintf_r+0xd4>
 801841a:	2300      	movs	r3, #0
 801841c:	200a      	movs	r0, #10
 801841e:	0019      	movs	r1, r3
 8018420:	3501      	adds	r5, #1
 8018422:	6063      	str	r3, [r4, #4]
 8018424:	782a      	ldrb	r2, [r5, #0]
 8018426:	1c6e      	adds	r6, r5, #1
 8018428:	3a30      	subs	r2, #48	@ 0x30
 801842a:	2a09      	cmp	r2, #9
 801842c:	d903      	bls.n	8018436 <_svfiprintf_r+0x1a6>
 801842e:	2b00      	cmp	r3, #0
 8018430:	d0c8      	beq.n	80183c4 <_svfiprintf_r+0x134>
 8018432:	9109      	str	r1, [sp, #36]	@ 0x24
 8018434:	e7c6      	b.n	80183c4 <_svfiprintf_r+0x134>
 8018436:	4341      	muls	r1, r0
 8018438:	0035      	movs	r5, r6
 801843a:	2301      	movs	r3, #1
 801843c:	1889      	adds	r1, r1, r2
 801843e:	e7f1      	b.n	8018424 <_svfiprintf_r+0x194>
 8018440:	aa07      	add	r2, sp, #28
 8018442:	9200      	str	r2, [sp, #0]
 8018444:	0021      	movs	r1, r4
 8018446:	003a      	movs	r2, r7
 8018448:	4b0f      	ldr	r3, [pc, #60]	@ (8018488 <_svfiprintf_r+0x1f8>)
 801844a:	9803      	ldr	r0, [sp, #12]
 801844c:	f7fd fd9a 	bl	8015f84 <_printf_float>
 8018450:	9004      	str	r0, [sp, #16]
 8018452:	9b04      	ldr	r3, [sp, #16]
 8018454:	3301      	adds	r3, #1
 8018456:	d1d6      	bne.n	8018406 <_svfiprintf_r+0x176>
 8018458:	89bb      	ldrh	r3, [r7, #12]
 801845a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801845c:	065b      	lsls	r3, r3, #25
 801845e:	d500      	bpl.n	8018462 <_svfiprintf_r+0x1d2>
 8018460:	e72c      	b.n	80182bc <_svfiprintf_r+0x2c>
 8018462:	b021      	add	sp, #132	@ 0x84
 8018464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018466:	aa07      	add	r2, sp, #28
 8018468:	9200      	str	r2, [sp, #0]
 801846a:	0021      	movs	r1, r4
 801846c:	003a      	movs	r2, r7
 801846e:	4b06      	ldr	r3, [pc, #24]	@ (8018488 <_svfiprintf_r+0x1f8>)
 8018470:	9803      	ldr	r0, [sp, #12]
 8018472:	f7fe f835 	bl	80164e0 <_printf_i>
 8018476:	e7eb      	b.n	8018450 <_svfiprintf_r+0x1c0>
 8018478:	0801a700 	.word	0x0801a700
 801847c:	0801a706 	.word	0x0801a706
 8018480:	0801a70a 	.word	0x0801a70a
 8018484:	08015f85 	.word	0x08015f85
 8018488:	080181d1 	.word	0x080181d1

0801848c <__sfputc_r>:
 801848c:	6893      	ldr	r3, [r2, #8]
 801848e:	b510      	push	{r4, lr}
 8018490:	3b01      	subs	r3, #1
 8018492:	6093      	str	r3, [r2, #8]
 8018494:	2b00      	cmp	r3, #0
 8018496:	da04      	bge.n	80184a2 <__sfputc_r+0x16>
 8018498:	6994      	ldr	r4, [r2, #24]
 801849a:	42a3      	cmp	r3, r4
 801849c:	db07      	blt.n	80184ae <__sfputc_r+0x22>
 801849e:	290a      	cmp	r1, #10
 80184a0:	d005      	beq.n	80184ae <__sfputc_r+0x22>
 80184a2:	6813      	ldr	r3, [r2, #0]
 80184a4:	1c58      	adds	r0, r3, #1
 80184a6:	6010      	str	r0, [r2, #0]
 80184a8:	7019      	strb	r1, [r3, #0]
 80184aa:	0008      	movs	r0, r1
 80184ac:	bd10      	pop	{r4, pc}
 80184ae:	f000 f9e2 	bl	8018876 <__swbuf_r>
 80184b2:	0001      	movs	r1, r0
 80184b4:	e7f9      	b.n	80184aa <__sfputc_r+0x1e>

080184b6 <__sfputs_r>:
 80184b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184b8:	0006      	movs	r6, r0
 80184ba:	000f      	movs	r7, r1
 80184bc:	0014      	movs	r4, r2
 80184be:	18d5      	adds	r5, r2, r3
 80184c0:	42ac      	cmp	r4, r5
 80184c2:	d101      	bne.n	80184c8 <__sfputs_r+0x12>
 80184c4:	2000      	movs	r0, #0
 80184c6:	e007      	b.n	80184d8 <__sfputs_r+0x22>
 80184c8:	7821      	ldrb	r1, [r4, #0]
 80184ca:	003a      	movs	r2, r7
 80184cc:	0030      	movs	r0, r6
 80184ce:	f7ff ffdd 	bl	801848c <__sfputc_r>
 80184d2:	3401      	adds	r4, #1
 80184d4:	1c43      	adds	r3, r0, #1
 80184d6:	d1f3      	bne.n	80184c0 <__sfputs_r+0xa>
 80184d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080184dc <_vfiprintf_r>:
 80184dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184de:	b0a1      	sub	sp, #132	@ 0x84
 80184e0:	000f      	movs	r7, r1
 80184e2:	0015      	movs	r5, r2
 80184e4:	001e      	movs	r6, r3
 80184e6:	9003      	str	r0, [sp, #12]
 80184e8:	2800      	cmp	r0, #0
 80184ea:	d004      	beq.n	80184f6 <_vfiprintf_r+0x1a>
 80184ec:	6a03      	ldr	r3, [r0, #32]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d101      	bne.n	80184f6 <_vfiprintf_r+0x1a>
 80184f2:	f7fe f993 	bl	801681c <__sinit>
 80184f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80184f8:	07db      	lsls	r3, r3, #31
 80184fa:	d405      	bmi.n	8018508 <_vfiprintf_r+0x2c>
 80184fc:	89bb      	ldrh	r3, [r7, #12]
 80184fe:	059b      	lsls	r3, r3, #22
 8018500:	d402      	bmi.n	8018508 <_vfiprintf_r+0x2c>
 8018502:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8018504:	f7fe fb21 	bl	8016b4a <__retarget_lock_acquire_recursive>
 8018508:	89bb      	ldrh	r3, [r7, #12]
 801850a:	071b      	lsls	r3, r3, #28
 801850c:	d502      	bpl.n	8018514 <_vfiprintf_r+0x38>
 801850e:	693b      	ldr	r3, [r7, #16]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d113      	bne.n	801853c <_vfiprintf_r+0x60>
 8018514:	0039      	movs	r1, r7
 8018516:	9803      	ldr	r0, [sp, #12]
 8018518:	f000 f9f0 	bl	80188fc <__swsetup_r>
 801851c:	2800      	cmp	r0, #0
 801851e:	d00d      	beq.n	801853c <_vfiprintf_r+0x60>
 8018520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018522:	07db      	lsls	r3, r3, #31
 8018524:	d503      	bpl.n	801852e <_vfiprintf_r+0x52>
 8018526:	2001      	movs	r0, #1
 8018528:	4240      	negs	r0, r0
 801852a:	b021      	add	sp, #132	@ 0x84
 801852c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801852e:	89bb      	ldrh	r3, [r7, #12]
 8018530:	059b      	lsls	r3, r3, #22
 8018532:	d4f8      	bmi.n	8018526 <_vfiprintf_r+0x4a>
 8018534:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8018536:	f7fe fb09 	bl	8016b4c <__retarget_lock_release_recursive>
 801853a:	e7f4      	b.n	8018526 <_vfiprintf_r+0x4a>
 801853c:	2300      	movs	r3, #0
 801853e:	ac08      	add	r4, sp, #32
 8018540:	6163      	str	r3, [r4, #20]
 8018542:	3320      	adds	r3, #32
 8018544:	7663      	strb	r3, [r4, #25]
 8018546:	3310      	adds	r3, #16
 8018548:	76a3      	strb	r3, [r4, #26]
 801854a:	9607      	str	r6, [sp, #28]
 801854c:	002e      	movs	r6, r5
 801854e:	7833      	ldrb	r3, [r6, #0]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d001      	beq.n	8018558 <_vfiprintf_r+0x7c>
 8018554:	2b25      	cmp	r3, #37	@ 0x25
 8018556:	d148      	bne.n	80185ea <_vfiprintf_r+0x10e>
 8018558:	1b73      	subs	r3, r6, r5
 801855a:	9305      	str	r3, [sp, #20]
 801855c:	42ae      	cmp	r6, r5
 801855e:	d00b      	beq.n	8018578 <_vfiprintf_r+0x9c>
 8018560:	002a      	movs	r2, r5
 8018562:	0039      	movs	r1, r7
 8018564:	9803      	ldr	r0, [sp, #12]
 8018566:	f7ff ffa6 	bl	80184b6 <__sfputs_r>
 801856a:	3001      	adds	r0, #1
 801856c:	d100      	bne.n	8018570 <_vfiprintf_r+0x94>
 801856e:	e0ae      	b.n	80186ce <_vfiprintf_r+0x1f2>
 8018570:	6963      	ldr	r3, [r4, #20]
 8018572:	9a05      	ldr	r2, [sp, #20]
 8018574:	189b      	adds	r3, r3, r2
 8018576:	6163      	str	r3, [r4, #20]
 8018578:	7833      	ldrb	r3, [r6, #0]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d100      	bne.n	8018580 <_vfiprintf_r+0xa4>
 801857e:	e0a6      	b.n	80186ce <_vfiprintf_r+0x1f2>
 8018580:	2201      	movs	r2, #1
 8018582:	2300      	movs	r3, #0
 8018584:	4252      	negs	r2, r2
 8018586:	6062      	str	r2, [r4, #4]
 8018588:	a904      	add	r1, sp, #16
 801858a:	3254      	adds	r2, #84	@ 0x54
 801858c:	1852      	adds	r2, r2, r1
 801858e:	1c75      	adds	r5, r6, #1
 8018590:	6023      	str	r3, [r4, #0]
 8018592:	60e3      	str	r3, [r4, #12]
 8018594:	60a3      	str	r3, [r4, #8]
 8018596:	7013      	strb	r3, [r2, #0]
 8018598:	65a3      	str	r3, [r4, #88]	@ 0x58
 801859a:	4b59      	ldr	r3, [pc, #356]	@ (8018700 <_vfiprintf_r+0x224>)
 801859c:	2205      	movs	r2, #5
 801859e:	0018      	movs	r0, r3
 80185a0:	7829      	ldrb	r1, [r5, #0]
 80185a2:	9305      	str	r3, [sp, #20]
 80185a4:	f7fe fad3 	bl	8016b4e <memchr>
 80185a8:	1c6e      	adds	r6, r5, #1
 80185aa:	2800      	cmp	r0, #0
 80185ac:	d11f      	bne.n	80185ee <_vfiprintf_r+0x112>
 80185ae:	6822      	ldr	r2, [r4, #0]
 80185b0:	06d3      	lsls	r3, r2, #27
 80185b2:	d504      	bpl.n	80185be <_vfiprintf_r+0xe2>
 80185b4:	2353      	movs	r3, #83	@ 0x53
 80185b6:	a904      	add	r1, sp, #16
 80185b8:	185b      	adds	r3, r3, r1
 80185ba:	2120      	movs	r1, #32
 80185bc:	7019      	strb	r1, [r3, #0]
 80185be:	0713      	lsls	r3, r2, #28
 80185c0:	d504      	bpl.n	80185cc <_vfiprintf_r+0xf0>
 80185c2:	2353      	movs	r3, #83	@ 0x53
 80185c4:	a904      	add	r1, sp, #16
 80185c6:	185b      	adds	r3, r3, r1
 80185c8:	212b      	movs	r1, #43	@ 0x2b
 80185ca:	7019      	strb	r1, [r3, #0]
 80185cc:	782b      	ldrb	r3, [r5, #0]
 80185ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80185d0:	d016      	beq.n	8018600 <_vfiprintf_r+0x124>
 80185d2:	002e      	movs	r6, r5
 80185d4:	2100      	movs	r1, #0
 80185d6:	200a      	movs	r0, #10
 80185d8:	68e3      	ldr	r3, [r4, #12]
 80185da:	7832      	ldrb	r2, [r6, #0]
 80185dc:	1c75      	adds	r5, r6, #1
 80185de:	3a30      	subs	r2, #48	@ 0x30
 80185e0:	2a09      	cmp	r2, #9
 80185e2:	d950      	bls.n	8018686 <_vfiprintf_r+0x1aa>
 80185e4:	2900      	cmp	r1, #0
 80185e6:	d111      	bne.n	801860c <_vfiprintf_r+0x130>
 80185e8:	e017      	b.n	801861a <_vfiprintf_r+0x13e>
 80185ea:	3601      	adds	r6, #1
 80185ec:	e7af      	b.n	801854e <_vfiprintf_r+0x72>
 80185ee:	9b05      	ldr	r3, [sp, #20]
 80185f0:	6822      	ldr	r2, [r4, #0]
 80185f2:	1ac0      	subs	r0, r0, r3
 80185f4:	2301      	movs	r3, #1
 80185f6:	4083      	lsls	r3, r0
 80185f8:	4313      	orrs	r3, r2
 80185fa:	0035      	movs	r5, r6
 80185fc:	6023      	str	r3, [r4, #0]
 80185fe:	e7cc      	b.n	801859a <_vfiprintf_r+0xbe>
 8018600:	9b07      	ldr	r3, [sp, #28]
 8018602:	1d19      	adds	r1, r3, #4
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	9107      	str	r1, [sp, #28]
 8018608:	2b00      	cmp	r3, #0
 801860a:	db01      	blt.n	8018610 <_vfiprintf_r+0x134>
 801860c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801860e:	e004      	b.n	801861a <_vfiprintf_r+0x13e>
 8018610:	425b      	negs	r3, r3
 8018612:	60e3      	str	r3, [r4, #12]
 8018614:	2302      	movs	r3, #2
 8018616:	4313      	orrs	r3, r2
 8018618:	6023      	str	r3, [r4, #0]
 801861a:	7833      	ldrb	r3, [r6, #0]
 801861c:	2b2e      	cmp	r3, #46	@ 0x2e
 801861e:	d10c      	bne.n	801863a <_vfiprintf_r+0x15e>
 8018620:	7873      	ldrb	r3, [r6, #1]
 8018622:	2b2a      	cmp	r3, #42	@ 0x2a
 8018624:	d134      	bne.n	8018690 <_vfiprintf_r+0x1b4>
 8018626:	9b07      	ldr	r3, [sp, #28]
 8018628:	3602      	adds	r6, #2
 801862a:	1d1a      	adds	r2, r3, #4
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	9207      	str	r2, [sp, #28]
 8018630:	2b00      	cmp	r3, #0
 8018632:	da01      	bge.n	8018638 <_vfiprintf_r+0x15c>
 8018634:	2301      	movs	r3, #1
 8018636:	425b      	negs	r3, r3
 8018638:	9309      	str	r3, [sp, #36]	@ 0x24
 801863a:	4d32      	ldr	r5, [pc, #200]	@ (8018704 <_vfiprintf_r+0x228>)
 801863c:	2203      	movs	r2, #3
 801863e:	0028      	movs	r0, r5
 8018640:	7831      	ldrb	r1, [r6, #0]
 8018642:	f7fe fa84 	bl	8016b4e <memchr>
 8018646:	2800      	cmp	r0, #0
 8018648:	d006      	beq.n	8018658 <_vfiprintf_r+0x17c>
 801864a:	2340      	movs	r3, #64	@ 0x40
 801864c:	1b40      	subs	r0, r0, r5
 801864e:	4083      	lsls	r3, r0
 8018650:	6822      	ldr	r2, [r4, #0]
 8018652:	3601      	adds	r6, #1
 8018654:	4313      	orrs	r3, r2
 8018656:	6023      	str	r3, [r4, #0]
 8018658:	7831      	ldrb	r1, [r6, #0]
 801865a:	2206      	movs	r2, #6
 801865c:	482a      	ldr	r0, [pc, #168]	@ (8018708 <_vfiprintf_r+0x22c>)
 801865e:	1c75      	adds	r5, r6, #1
 8018660:	7621      	strb	r1, [r4, #24]
 8018662:	f7fe fa74 	bl	8016b4e <memchr>
 8018666:	2800      	cmp	r0, #0
 8018668:	d040      	beq.n	80186ec <_vfiprintf_r+0x210>
 801866a:	4b28      	ldr	r3, [pc, #160]	@ (801870c <_vfiprintf_r+0x230>)
 801866c:	2b00      	cmp	r3, #0
 801866e:	d122      	bne.n	80186b6 <_vfiprintf_r+0x1da>
 8018670:	2207      	movs	r2, #7
 8018672:	9b07      	ldr	r3, [sp, #28]
 8018674:	3307      	adds	r3, #7
 8018676:	4393      	bics	r3, r2
 8018678:	3308      	adds	r3, #8
 801867a:	9307      	str	r3, [sp, #28]
 801867c:	6963      	ldr	r3, [r4, #20]
 801867e:	9a04      	ldr	r2, [sp, #16]
 8018680:	189b      	adds	r3, r3, r2
 8018682:	6163      	str	r3, [r4, #20]
 8018684:	e762      	b.n	801854c <_vfiprintf_r+0x70>
 8018686:	4343      	muls	r3, r0
 8018688:	002e      	movs	r6, r5
 801868a:	2101      	movs	r1, #1
 801868c:	189b      	adds	r3, r3, r2
 801868e:	e7a4      	b.n	80185da <_vfiprintf_r+0xfe>
 8018690:	2300      	movs	r3, #0
 8018692:	200a      	movs	r0, #10
 8018694:	0019      	movs	r1, r3
 8018696:	3601      	adds	r6, #1
 8018698:	6063      	str	r3, [r4, #4]
 801869a:	7832      	ldrb	r2, [r6, #0]
 801869c:	1c75      	adds	r5, r6, #1
 801869e:	3a30      	subs	r2, #48	@ 0x30
 80186a0:	2a09      	cmp	r2, #9
 80186a2:	d903      	bls.n	80186ac <_vfiprintf_r+0x1d0>
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d0c8      	beq.n	801863a <_vfiprintf_r+0x15e>
 80186a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80186aa:	e7c6      	b.n	801863a <_vfiprintf_r+0x15e>
 80186ac:	4341      	muls	r1, r0
 80186ae:	002e      	movs	r6, r5
 80186b0:	2301      	movs	r3, #1
 80186b2:	1889      	adds	r1, r1, r2
 80186b4:	e7f1      	b.n	801869a <_vfiprintf_r+0x1be>
 80186b6:	aa07      	add	r2, sp, #28
 80186b8:	9200      	str	r2, [sp, #0]
 80186ba:	0021      	movs	r1, r4
 80186bc:	003a      	movs	r2, r7
 80186be:	4b14      	ldr	r3, [pc, #80]	@ (8018710 <_vfiprintf_r+0x234>)
 80186c0:	9803      	ldr	r0, [sp, #12]
 80186c2:	f7fd fc5f 	bl	8015f84 <_printf_float>
 80186c6:	9004      	str	r0, [sp, #16]
 80186c8:	9b04      	ldr	r3, [sp, #16]
 80186ca:	3301      	adds	r3, #1
 80186cc:	d1d6      	bne.n	801867c <_vfiprintf_r+0x1a0>
 80186ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80186d0:	07db      	lsls	r3, r3, #31
 80186d2:	d405      	bmi.n	80186e0 <_vfiprintf_r+0x204>
 80186d4:	89bb      	ldrh	r3, [r7, #12]
 80186d6:	059b      	lsls	r3, r3, #22
 80186d8:	d402      	bmi.n	80186e0 <_vfiprintf_r+0x204>
 80186da:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80186dc:	f7fe fa36 	bl	8016b4c <__retarget_lock_release_recursive>
 80186e0:	89bb      	ldrh	r3, [r7, #12]
 80186e2:	065b      	lsls	r3, r3, #25
 80186e4:	d500      	bpl.n	80186e8 <_vfiprintf_r+0x20c>
 80186e6:	e71e      	b.n	8018526 <_vfiprintf_r+0x4a>
 80186e8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80186ea:	e71e      	b.n	801852a <_vfiprintf_r+0x4e>
 80186ec:	aa07      	add	r2, sp, #28
 80186ee:	9200      	str	r2, [sp, #0]
 80186f0:	0021      	movs	r1, r4
 80186f2:	003a      	movs	r2, r7
 80186f4:	4b06      	ldr	r3, [pc, #24]	@ (8018710 <_vfiprintf_r+0x234>)
 80186f6:	9803      	ldr	r0, [sp, #12]
 80186f8:	f7fd fef2 	bl	80164e0 <_printf_i>
 80186fc:	e7e3      	b.n	80186c6 <_vfiprintf_r+0x1ea>
 80186fe:	46c0      	nop			@ (mov r8, r8)
 8018700:	0801a700 	.word	0x0801a700
 8018704:	0801a706 	.word	0x0801a706
 8018708:	0801a70a 	.word	0x0801a70a
 801870c:	08015f85 	.word	0x08015f85
 8018710:	080184b7 	.word	0x080184b7

08018714 <__sflush_r>:
 8018714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018716:	220c      	movs	r2, #12
 8018718:	5e8b      	ldrsh	r3, [r1, r2]
 801871a:	0005      	movs	r5, r0
 801871c:	000c      	movs	r4, r1
 801871e:	071a      	lsls	r2, r3, #28
 8018720:	d456      	bmi.n	80187d0 <__sflush_r+0xbc>
 8018722:	684a      	ldr	r2, [r1, #4]
 8018724:	2a00      	cmp	r2, #0
 8018726:	dc02      	bgt.n	801872e <__sflush_r+0x1a>
 8018728:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801872a:	2a00      	cmp	r2, #0
 801872c:	dd4e      	ble.n	80187cc <__sflush_r+0xb8>
 801872e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8018730:	2f00      	cmp	r7, #0
 8018732:	d04b      	beq.n	80187cc <__sflush_r+0xb8>
 8018734:	2200      	movs	r2, #0
 8018736:	2080      	movs	r0, #128	@ 0x80
 8018738:	682e      	ldr	r6, [r5, #0]
 801873a:	602a      	str	r2, [r5, #0]
 801873c:	001a      	movs	r2, r3
 801873e:	0140      	lsls	r0, r0, #5
 8018740:	6a21      	ldr	r1, [r4, #32]
 8018742:	4002      	ands	r2, r0
 8018744:	4203      	tst	r3, r0
 8018746:	d033      	beq.n	80187b0 <__sflush_r+0x9c>
 8018748:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801874a:	89a3      	ldrh	r3, [r4, #12]
 801874c:	075b      	lsls	r3, r3, #29
 801874e:	d506      	bpl.n	801875e <__sflush_r+0x4a>
 8018750:	6863      	ldr	r3, [r4, #4]
 8018752:	1ad2      	subs	r2, r2, r3
 8018754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018756:	2b00      	cmp	r3, #0
 8018758:	d001      	beq.n	801875e <__sflush_r+0x4a>
 801875a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801875c:	1ad2      	subs	r2, r2, r3
 801875e:	2300      	movs	r3, #0
 8018760:	0028      	movs	r0, r5
 8018762:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8018764:	6a21      	ldr	r1, [r4, #32]
 8018766:	47b8      	blx	r7
 8018768:	89a2      	ldrh	r2, [r4, #12]
 801876a:	1c43      	adds	r3, r0, #1
 801876c:	d106      	bne.n	801877c <__sflush_r+0x68>
 801876e:	6829      	ldr	r1, [r5, #0]
 8018770:	291d      	cmp	r1, #29
 8018772:	d846      	bhi.n	8018802 <__sflush_r+0xee>
 8018774:	4b29      	ldr	r3, [pc, #164]	@ (801881c <__sflush_r+0x108>)
 8018776:	410b      	asrs	r3, r1
 8018778:	07db      	lsls	r3, r3, #31
 801877a:	d442      	bmi.n	8018802 <__sflush_r+0xee>
 801877c:	2300      	movs	r3, #0
 801877e:	6063      	str	r3, [r4, #4]
 8018780:	6923      	ldr	r3, [r4, #16]
 8018782:	6023      	str	r3, [r4, #0]
 8018784:	04d2      	lsls	r2, r2, #19
 8018786:	d505      	bpl.n	8018794 <__sflush_r+0x80>
 8018788:	1c43      	adds	r3, r0, #1
 801878a:	d102      	bne.n	8018792 <__sflush_r+0x7e>
 801878c:	682b      	ldr	r3, [r5, #0]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d100      	bne.n	8018794 <__sflush_r+0x80>
 8018792:	6560      	str	r0, [r4, #84]	@ 0x54
 8018794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018796:	602e      	str	r6, [r5, #0]
 8018798:	2900      	cmp	r1, #0
 801879a:	d017      	beq.n	80187cc <__sflush_r+0xb8>
 801879c:	0023      	movs	r3, r4
 801879e:	3344      	adds	r3, #68	@ 0x44
 80187a0:	4299      	cmp	r1, r3
 80187a2:	d002      	beq.n	80187aa <__sflush_r+0x96>
 80187a4:	0028      	movs	r0, r5
 80187a6:	f7ff f869 	bl	801787c <_free_r>
 80187aa:	2300      	movs	r3, #0
 80187ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80187ae:	e00d      	b.n	80187cc <__sflush_r+0xb8>
 80187b0:	2301      	movs	r3, #1
 80187b2:	0028      	movs	r0, r5
 80187b4:	47b8      	blx	r7
 80187b6:	0002      	movs	r2, r0
 80187b8:	1c43      	adds	r3, r0, #1
 80187ba:	d1c6      	bne.n	801874a <__sflush_r+0x36>
 80187bc:	682b      	ldr	r3, [r5, #0]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d0c3      	beq.n	801874a <__sflush_r+0x36>
 80187c2:	2b1d      	cmp	r3, #29
 80187c4:	d001      	beq.n	80187ca <__sflush_r+0xb6>
 80187c6:	2b16      	cmp	r3, #22
 80187c8:	d11a      	bne.n	8018800 <__sflush_r+0xec>
 80187ca:	602e      	str	r6, [r5, #0]
 80187cc:	2000      	movs	r0, #0
 80187ce:	e01e      	b.n	801880e <__sflush_r+0xfa>
 80187d0:	690e      	ldr	r6, [r1, #16]
 80187d2:	2e00      	cmp	r6, #0
 80187d4:	d0fa      	beq.n	80187cc <__sflush_r+0xb8>
 80187d6:	680f      	ldr	r7, [r1, #0]
 80187d8:	600e      	str	r6, [r1, #0]
 80187da:	1bba      	subs	r2, r7, r6
 80187dc:	9201      	str	r2, [sp, #4]
 80187de:	2200      	movs	r2, #0
 80187e0:	079b      	lsls	r3, r3, #30
 80187e2:	d100      	bne.n	80187e6 <__sflush_r+0xd2>
 80187e4:	694a      	ldr	r2, [r1, #20]
 80187e6:	60a2      	str	r2, [r4, #8]
 80187e8:	9b01      	ldr	r3, [sp, #4]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	ddee      	ble.n	80187cc <__sflush_r+0xb8>
 80187ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80187f0:	0032      	movs	r2, r6
 80187f2:	001f      	movs	r7, r3
 80187f4:	0028      	movs	r0, r5
 80187f6:	9b01      	ldr	r3, [sp, #4]
 80187f8:	6a21      	ldr	r1, [r4, #32]
 80187fa:	47b8      	blx	r7
 80187fc:	2800      	cmp	r0, #0
 80187fe:	dc07      	bgt.n	8018810 <__sflush_r+0xfc>
 8018800:	89a2      	ldrh	r2, [r4, #12]
 8018802:	2340      	movs	r3, #64	@ 0x40
 8018804:	2001      	movs	r0, #1
 8018806:	4313      	orrs	r3, r2
 8018808:	b21b      	sxth	r3, r3
 801880a:	81a3      	strh	r3, [r4, #12]
 801880c:	4240      	negs	r0, r0
 801880e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018810:	9b01      	ldr	r3, [sp, #4]
 8018812:	1836      	adds	r6, r6, r0
 8018814:	1a1b      	subs	r3, r3, r0
 8018816:	9301      	str	r3, [sp, #4]
 8018818:	e7e6      	b.n	80187e8 <__sflush_r+0xd4>
 801881a:	46c0      	nop			@ (mov r8, r8)
 801881c:	dfbffffe 	.word	0xdfbffffe

08018820 <_fflush_r>:
 8018820:	690b      	ldr	r3, [r1, #16]
 8018822:	b570      	push	{r4, r5, r6, lr}
 8018824:	0005      	movs	r5, r0
 8018826:	000c      	movs	r4, r1
 8018828:	2b00      	cmp	r3, #0
 801882a:	d102      	bne.n	8018832 <_fflush_r+0x12>
 801882c:	2500      	movs	r5, #0
 801882e:	0028      	movs	r0, r5
 8018830:	bd70      	pop	{r4, r5, r6, pc}
 8018832:	2800      	cmp	r0, #0
 8018834:	d004      	beq.n	8018840 <_fflush_r+0x20>
 8018836:	6a03      	ldr	r3, [r0, #32]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d101      	bne.n	8018840 <_fflush_r+0x20>
 801883c:	f7fd ffee 	bl	801681c <__sinit>
 8018840:	220c      	movs	r2, #12
 8018842:	5ea3      	ldrsh	r3, [r4, r2]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d0f1      	beq.n	801882c <_fflush_r+0xc>
 8018848:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801884a:	07d2      	lsls	r2, r2, #31
 801884c:	d404      	bmi.n	8018858 <_fflush_r+0x38>
 801884e:	059b      	lsls	r3, r3, #22
 8018850:	d402      	bmi.n	8018858 <_fflush_r+0x38>
 8018852:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018854:	f7fe f979 	bl	8016b4a <__retarget_lock_acquire_recursive>
 8018858:	0028      	movs	r0, r5
 801885a:	0021      	movs	r1, r4
 801885c:	f7ff ff5a 	bl	8018714 <__sflush_r>
 8018860:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018862:	0005      	movs	r5, r0
 8018864:	07db      	lsls	r3, r3, #31
 8018866:	d4e2      	bmi.n	801882e <_fflush_r+0xe>
 8018868:	89a3      	ldrh	r3, [r4, #12]
 801886a:	059b      	lsls	r3, r3, #22
 801886c:	d4df      	bmi.n	801882e <_fflush_r+0xe>
 801886e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018870:	f7fe f96c 	bl	8016b4c <__retarget_lock_release_recursive>
 8018874:	e7db      	b.n	801882e <_fflush_r+0xe>

08018876 <__swbuf_r>:
 8018876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018878:	0006      	movs	r6, r0
 801887a:	000d      	movs	r5, r1
 801887c:	0014      	movs	r4, r2
 801887e:	2800      	cmp	r0, #0
 8018880:	d004      	beq.n	801888c <__swbuf_r+0x16>
 8018882:	6a03      	ldr	r3, [r0, #32]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d101      	bne.n	801888c <__swbuf_r+0x16>
 8018888:	f7fd ffc8 	bl	801681c <__sinit>
 801888c:	69a3      	ldr	r3, [r4, #24]
 801888e:	60a3      	str	r3, [r4, #8]
 8018890:	89a3      	ldrh	r3, [r4, #12]
 8018892:	071b      	lsls	r3, r3, #28
 8018894:	d502      	bpl.n	801889c <__swbuf_r+0x26>
 8018896:	6923      	ldr	r3, [r4, #16]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d109      	bne.n	80188b0 <__swbuf_r+0x3a>
 801889c:	0021      	movs	r1, r4
 801889e:	0030      	movs	r0, r6
 80188a0:	f000 f82c 	bl	80188fc <__swsetup_r>
 80188a4:	2800      	cmp	r0, #0
 80188a6:	d003      	beq.n	80188b0 <__swbuf_r+0x3a>
 80188a8:	2501      	movs	r5, #1
 80188aa:	426d      	negs	r5, r5
 80188ac:	0028      	movs	r0, r5
 80188ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188b0:	6923      	ldr	r3, [r4, #16]
 80188b2:	6820      	ldr	r0, [r4, #0]
 80188b4:	b2ef      	uxtb	r7, r5
 80188b6:	1ac0      	subs	r0, r0, r3
 80188b8:	6963      	ldr	r3, [r4, #20]
 80188ba:	b2ed      	uxtb	r5, r5
 80188bc:	4283      	cmp	r3, r0
 80188be:	dc05      	bgt.n	80188cc <__swbuf_r+0x56>
 80188c0:	0021      	movs	r1, r4
 80188c2:	0030      	movs	r0, r6
 80188c4:	f7ff ffac 	bl	8018820 <_fflush_r>
 80188c8:	2800      	cmp	r0, #0
 80188ca:	d1ed      	bne.n	80188a8 <__swbuf_r+0x32>
 80188cc:	68a3      	ldr	r3, [r4, #8]
 80188ce:	3001      	adds	r0, #1
 80188d0:	3b01      	subs	r3, #1
 80188d2:	60a3      	str	r3, [r4, #8]
 80188d4:	6823      	ldr	r3, [r4, #0]
 80188d6:	1c5a      	adds	r2, r3, #1
 80188d8:	6022      	str	r2, [r4, #0]
 80188da:	701f      	strb	r7, [r3, #0]
 80188dc:	6963      	ldr	r3, [r4, #20]
 80188de:	4283      	cmp	r3, r0
 80188e0:	d004      	beq.n	80188ec <__swbuf_r+0x76>
 80188e2:	89a3      	ldrh	r3, [r4, #12]
 80188e4:	07db      	lsls	r3, r3, #31
 80188e6:	d5e1      	bpl.n	80188ac <__swbuf_r+0x36>
 80188e8:	2d0a      	cmp	r5, #10
 80188ea:	d1df      	bne.n	80188ac <__swbuf_r+0x36>
 80188ec:	0021      	movs	r1, r4
 80188ee:	0030      	movs	r0, r6
 80188f0:	f7ff ff96 	bl	8018820 <_fflush_r>
 80188f4:	2800      	cmp	r0, #0
 80188f6:	d0d9      	beq.n	80188ac <__swbuf_r+0x36>
 80188f8:	e7d6      	b.n	80188a8 <__swbuf_r+0x32>
	...

080188fc <__swsetup_r>:
 80188fc:	4b2d      	ldr	r3, [pc, #180]	@ (80189b4 <__swsetup_r+0xb8>)
 80188fe:	b570      	push	{r4, r5, r6, lr}
 8018900:	0005      	movs	r5, r0
 8018902:	6818      	ldr	r0, [r3, #0]
 8018904:	000c      	movs	r4, r1
 8018906:	2800      	cmp	r0, #0
 8018908:	d004      	beq.n	8018914 <__swsetup_r+0x18>
 801890a:	6a03      	ldr	r3, [r0, #32]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d101      	bne.n	8018914 <__swsetup_r+0x18>
 8018910:	f7fd ff84 	bl	801681c <__sinit>
 8018914:	230c      	movs	r3, #12
 8018916:	5ee2      	ldrsh	r2, [r4, r3]
 8018918:	0713      	lsls	r3, r2, #28
 801891a:	d423      	bmi.n	8018964 <__swsetup_r+0x68>
 801891c:	06d3      	lsls	r3, r2, #27
 801891e:	d407      	bmi.n	8018930 <__swsetup_r+0x34>
 8018920:	2309      	movs	r3, #9
 8018922:	602b      	str	r3, [r5, #0]
 8018924:	2340      	movs	r3, #64	@ 0x40
 8018926:	2001      	movs	r0, #1
 8018928:	4313      	orrs	r3, r2
 801892a:	81a3      	strh	r3, [r4, #12]
 801892c:	4240      	negs	r0, r0
 801892e:	e03a      	b.n	80189a6 <__swsetup_r+0xaa>
 8018930:	0752      	lsls	r2, r2, #29
 8018932:	d513      	bpl.n	801895c <__swsetup_r+0x60>
 8018934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018936:	2900      	cmp	r1, #0
 8018938:	d008      	beq.n	801894c <__swsetup_r+0x50>
 801893a:	0023      	movs	r3, r4
 801893c:	3344      	adds	r3, #68	@ 0x44
 801893e:	4299      	cmp	r1, r3
 8018940:	d002      	beq.n	8018948 <__swsetup_r+0x4c>
 8018942:	0028      	movs	r0, r5
 8018944:	f7fe ff9a 	bl	801787c <_free_r>
 8018948:	2300      	movs	r3, #0
 801894a:	6363      	str	r3, [r4, #52]	@ 0x34
 801894c:	2224      	movs	r2, #36	@ 0x24
 801894e:	89a3      	ldrh	r3, [r4, #12]
 8018950:	4393      	bics	r3, r2
 8018952:	81a3      	strh	r3, [r4, #12]
 8018954:	2300      	movs	r3, #0
 8018956:	6063      	str	r3, [r4, #4]
 8018958:	6923      	ldr	r3, [r4, #16]
 801895a:	6023      	str	r3, [r4, #0]
 801895c:	2308      	movs	r3, #8
 801895e:	89a2      	ldrh	r2, [r4, #12]
 8018960:	4313      	orrs	r3, r2
 8018962:	81a3      	strh	r3, [r4, #12]
 8018964:	6923      	ldr	r3, [r4, #16]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d10b      	bne.n	8018982 <__swsetup_r+0x86>
 801896a:	21a0      	movs	r1, #160	@ 0xa0
 801896c:	2280      	movs	r2, #128	@ 0x80
 801896e:	89a3      	ldrh	r3, [r4, #12]
 8018970:	0089      	lsls	r1, r1, #2
 8018972:	0092      	lsls	r2, r2, #2
 8018974:	400b      	ands	r3, r1
 8018976:	4293      	cmp	r3, r2
 8018978:	d003      	beq.n	8018982 <__swsetup_r+0x86>
 801897a:	0021      	movs	r1, r4
 801897c:	0028      	movs	r0, r5
 801897e:	f000 f915 	bl	8018bac <__smakebuf_r>
 8018982:	230c      	movs	r3, #12
 8018984:	5ee2      	ldrsh	r2, [r4, r3]
 8018986:	2101      	movs	r1, #1
 8018988:	0013      	movs	r3, r2
 801898a:	400b      	ands	r3, r1
 801898c:	420a      	tst	r2, r1
 801898e:	d00b      	beq.n	80189a8 <__swsetup_r+0xac>
 8018990:	2300      	movs	r3, #0
 8018992:	60a3      	str	r3, [r4, #8]
 8018994:	6963      	ldr	r3, [r4, #20]
 8018996:	425b      	negs	r3, r3
 8018998:	61a3      	str	r3, [r4, #24]
 801899a:	2000      	movs	r0, #0
 801899c:	6923      	ldr	r3, [r4, #16]
 801899e:	4283      	cmp	r3, r0
 80189a0:	d101      	bne.n	80189a6 <__swsetup_r+0xaa>
 80189a2:	0613      	lsls	r3, r2, #24
 80189a4:	d4be      	bmi.n	8018924 <__swsetup_r+0x28>
 80189a6:	bd70      	pop	{r4, r5, r6, pc}
 80189a8:	0791      	lsls	r1, r2, #30
 80189aa:	d400      	bmi.n	80189ae <__swsetup_r+0xb2>
 80189ac:	6963      	ldr	r3, [r4, #20]
 80189ae:	60a3      	str	r3, [r4, #8]
 80189b0:	e7f3      	b.n	801899a <__swsetup_r+0x9e>
 80189b2:	46c0      	nop			@ (mov r8, r8)
 80189b4:	200002d8 	.word	0x200002d8

080189b8 <memmove>:
 80189b8:	b510      	push	{r4, lr}
 80189ba:	4288      	cmp	r0, r1
 80189bc:	d806      	bhi.n	80189cc <memmove+0x14>
 80189be:	2300      	movs	r3, #0
 80189c0:	429a      	cmp	r2, r3
 80189c2:	d008      	beq.n	80189d6 <memmove+0x1e>
 80189c4:	5ccc      	ldrb	r4, [r1, r3]
 80189c6:	54c4      	strb	r4, [r0, r3]
 80189c8:	3301      	adds	r3, #1
 80189ca:	e7f9      	b.n	80189c0 <memmove+0x8>
 80189cc:	188b      	adds	r3, r1, r2
 80189ce:	4298      	cmp	r0, r3
 80189d0:	d2f5      	bcs.n	80189be <memmove+0x6>
 80189d2:	3a01      	subs	r2, #1
 80189d4:	d200      	bcs.n	80189d8 <memmove+0x20>
 80189d6:	bd10      	pop	{r4, pc}
 80189d8:	5c8b      	ldrb	r3, [r1, r2]
 80189da:	5483      	strb	r3, [r0, r2]
 80189dc:	e7f9      	b.n	80189d2 <memmove+0x1a>
	...

080189e0 <_sbrk_r>:
 80189e0:	2300      	movs	r3, #0
 80189e2:	b570      	push	{r4, r5, r6, lr}
 80189e4:	4d06      	ldr	r5, [pc, #24]	@ (8018a00 <_sbrk_r+0x20>)
 80189e6:	0004      	movs	r4, r0
 80189e8:	0008      	movs	r0, r1
 80189ea:	602b      	str	r3, [r5, #0]
 80189ec:	f7ef fce6 	bl	80083bc <_sbrk>
 80189f0:	1c43      	adds	r3, r0, #1
 80189f2:	d103      	bne.n	80189fc <_sbrk_r+0x1c>
 80189f4:	682b      	ldr	r3, [r5, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d000      	beq.n	80189fc <_sbrk_r+0x1c>
 80189fa:	6023      	str	r3, [r4, #0]
 80189fc:	bd70      	pop	{r4, r5, r6, pc}
 80189fe:	46c0      	nop			@ (mov r8, r8)
 8018a00:	200043ec 	.word	0x200043ec

08018a04 <__assert_func>:
 8018a04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018a06:	0014      	movs	r4, r2
 8018a08:	001a      	movs	r2, r3
 8018a0a:	4b09      	ldr	r3, [pc, #36]	@ (8018a30 <__assert_func+0x2c>)
 8018a0c:	0005      	movs	r5, r0
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	000e      	movs	r6, r1
 8018a12:	68d8      	ldr	r0, [r3, #12]
 8018a14:	4b07      	ldr	r3, [pc, #28]	@ (8018a34 <__assert_func+0x30>)
 8018a16:	2c00      	cmp	r4, #0
 8018a18:	d101      	bne.n	8018a1e <__assert_func+0x1a>
 8018a1a:	4b07      	ldr	r3, [pc, #28]	@ (8018a38 <__assert_func+0x34>)
 8018a1c:	001c      	movs	r4, r3
 8018a1e:	4907      	ldr	r1, [pc, #28]	@ (8018a3c <__assert_func+0x38>)
 8018a20:	9301      	str	r3, [sp, #4]
 8018a22:	9402      	str	r4, [sp, #8]
 8018a24:	002b      	movs	r3, r5
 8018a26:	9600      	str	r6, [sp, #0]
 8018a28:	f000 f886 	bl	8018b38 <fiprintf>
 8018a2c:	f000 f924 	bl	8018c78 <abort>
 8018a30:	200002d8 	.word	0x200002d8
 8018a34:	0801a71b 	.word	0x0801a71b
 8018a38:	0801a756 	.word	0x0801a756
 8018a3c:	0801a728 	.word	0x0801a728

08018a40 <_calloc_r>:
 8018a40:	b570      	push	{r4, r5, r6, lr}
 8018a42:	0c0b      	lsrs	r3, r1, #16
 8018a44:	0c15      	lsrs	r5, r2, #16
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d11e      	bne.n	8018a88 <_calloc_r+0x48>
 8018a4a:	2d00      	cmp	r5, #0
 8018a4c:	d10c      	bne.n	8018a68 <_calloc_r+0x28>
 8018a4e:	b289      	uxth	r1, r1
 8018a50:	b294      	uxth	r4, r2
 8018a52:	434c      	muls	r4, r1
 8018a54:	0021      	movs	r1, r4
 8018a56:	f7fe ff87 	bl	8017968 <_malloc_r>
 8018a5a:	1e05      	subs	r5, r0, #0
 8018a5c:	d01a      	beq.n	8018a94 <_calloc_r+0x54>
 8018a5e:	0022      	movs	r2, r4
 8018a60:	2100      	movs	r1, #0
 8018a62:	f7fd ffc3 	bl	80169ec <memset>
 8018a66:	e016      	b.n	8018a96 <_calloc_r+0x56>
 8018a68:	1c2b      	adds	r3, r5, #0
 8018a6a:	1c0c      	adds	r4, r1, #0
 8018a6c:	b289      	uxth	r1, r1
 8018a6e:	b292      	uxth	r2, r2
 8018a70:	434a      	muls	r2, r1
 8018a72:	b29b      	uxth	r3, r3
 8018a74:	b2a1      	uxth	r1, r4
 8018a76:	4359      	muls	r1, r3
 8018a78:	0c14      	lsrs	r4, r2, #16
 8018a7a:	190c      	adds	r4, r1, r4
 8018a7c:	0c23      	lsrs	r3, r4, #16
 8018a7e:	d107      	bne.n	8018a90 <_calloc_r+0x50>
 8018a80:	0424      	lsls	r4, r4, #16
 8018a82:	b292      	uxth	r2, r2
 8018a84:	4314      	orrs	r4, r2
 8018a86:	e7e5      	b.n	8018a54 <_calloc_r+0x14>
 8018a88:	2d00      	cmp	r5, #0
 8018a8a:	d101      	bne.n	8018a90 <_calloc_r+0x50>
 8018a8c:	1c14      	adds	r4, r2, #0
 8018a8e:	e7ed      	b.n	8018a6c <_calloc_r+0x2c>
 8018a90:	230c      	movs	r3, #12
 8018a92:	6003      	str	r3, [r0, #0]
 8018a94:	2500      	movs	r5, #0
 8018a96:	0028      	movs	r0, r5
 8018a98:	bd70      	pop	{r4, r5, r6, pc}

08018a9a <__ascii_mbtowc>:
 8018a9a:	b082      	sub	sp, #8
 8018a9c:	2900      	cmp	r1, #0
 8018a9e:	d100      	bne.n	8018aa2 <__ascii_mbtowc+0x8>
 8018aa0:	a901      	add	r1, sp, #4
 8018aa2:	1e10      	subs	r0, r2, #0
 8018aa4:	d006      	beq.n	8018ab4 <__ascii_mbtowc+0x1a>
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d006      	beq.n	8018ab8 <__ascii_mbtowc+0x1e>
 8018aaa:	7813      	ldrb	r3, [r2, #0]
 8018aac:	600b      	str	r3, [r1, #0]
 8018aae:	7810      	ldrb	r0, [r2, #0]
 8018ab0:	1e43      	subs	r3, r0, #1
 8018ab2:	4198      	sbcs	r0, r3
 8018ab4:	b002      	add	sp, #8
 8018ab6:	4770      	bx	lr
 8018ab8:	2002      	movs	r0, #2
 8018aba:	4240      	negs	r0, r0
 8018abc:	e7fa      	b.n	8018ab4 <__ascii_mbtowc+0x1a>

08018abe <_realloc_r>:
 8018abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ac0:	0006      	movs	r6, r0
 8018ac2:	000c      	movs	r4, r1
 8018ac4:	0015      	movs	r5, r2
 8018ac6:	2900      	cmp	r1, #0
 8018ac8:	d105      	bne.n	8018ad6 <_realloc_r+0x18>
 8018aca:	0011      	movs	r1, r2
 8018acc:	f7fe ff4c 	bl	8017968 <_malloc_r>
 8018ad0:	0004      	movs	r4, r0
 8018ad2:	0020      	movs	r0, r4
 8018ad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018ad6:	2a00      	cmp	r2, #0
 8018ad8:	d103      	bne.n	8018ae2 <_realloc_r+0x24>
 8018ada:	f7fe fecf 	bl	801787c <_free_r>
 8018ade:	2400      	movs	r4, #0
 8018ae0:	e7f7      	b.n	8018ad2 <_realloc_r+0x14>
 8018ae2:	f000 f8d0 	bl	8018c86 <_malloc_usable_size_r>
 8018ae6:	0007      	movs	r7, r0
 8018ae8:	4285      	cmp	r5, r0
 8018aea:	d802      	bhi.n	8018af2 <_realloc_r+0x34>
 8018aec:	0843      	lsrs	r3, r0, #1
 8018aee:	42ab      	cmp	r3, r5
 8018af0:	d3ef      	bcc.n	8018ad2 <_realloc_r+0x14>
 8018af2:	0029      	movs	r1, r5
 8018af4:	0030      	movs	r0, r6
 8018af6:	f7fe ff37 	bl	8017968 <_malloc_r>
 8018afa:	9001      	str	r0, [sp, #4]
 8018afc:	2800      	cmp	r0, #0
 8018afe:	d0ee      	beq.n	8018ade <_realloc_r+0x20>
 8018b00:	002a      	movs	r2, r5
 8018b02:	42bd      	cmp	r5, r7
 8018b04:	d900      	bls.n	8018b08 <_realloc_r+0x4a>
 8018b06:	003a      	movs	r2, r7
 8018b08:	0021      	movs	r1, r4
 8018b0a:	9801      	ldr	r0, [sp, #4]
 8018b0c:	f7fe f82a 	bl	8016b64 <memcpy>
 8018b10:	0021      	movs	r1, r4
 8018b12:	0030      	movs	r0, r6
 8018b14:	f7fe feb2 	bl	801787c <_free_r>
 8018b18:	9c01      	ldr	r4, [sp, #4]
 8018b1a:	e7da      	b.n	8018ad2 <_realloc_r+0x14>

08018b1c <__ascii_wctomb>:
 8018b1c:	0003      	movs	r3, r0
 8018b1e:	1e08      	subs	r0, r1, #0
 8018b20:	d005      	beq.n	8018b2e <__ascii_wctomb+0x12>
 8018b22:	2aff      	cmp	r2, #255	@ 0xff
 8018b24:	d904      	bls.n	8018b30 <__ascii_wctomb+0x14>
 8018b26:	228a      	movs	r2, #138	@ 0x8a
 8018b28:	2001      	movs	r0, #1
 8018b2a:	601a      	str	r2, [r3, #0]
 8018b2c:	4240      	negs	r0, r0
 8018b2e:	4770      	bx	lr
 8018b30:	2001      	movs	r0, #1
 8018b32:	700a      	strb	r2, [r1, #0]
 8018b34:	e7fb      	b.n	8018b2e <__ascii_wctomb+0x12>
	...

08018b38 <fiprintf>:
 8018b38:	b40e      	push	{r1, r2, r3}
 8018b3a:	b517      	push	{r0, r1, r2, r4, lr}
 8018b3c:	4c05      	ldr	r4, [pc, #20]	@ (8018b54 <fiprintf+0x1c>)
 8018b3e:	ab05      	add	r3, sp, #20
 8018b40:	cb04      	ldmia	r3!, {r2}
 8018b42:	0001      	movs	r1, r0
 8018b44:	6820      	ldr	r0, [r4, #0]
 8018b46:	9301      	str	r3, [sp, #4]
 8018b48:	f7ff fcc8 	bl	80184dc <_vfiprintf_r>
 8018b4c:	bc1e      	pop	{r1, r2, r3, r4}
 8018b4e:	bc08      	pop	{r3}
 8018b50:	b003      	add	sp, #12
 8018b52:	4718      	bx	r3
 8018b54:	200002d8 	.word	0x200002d8

08018b58 <__swhatbuf_r>:
 8018b58:	b570      	push	{r4, r5, r6, lr}
 8018b5a:	000e      	movs	r6, r1
 8018b5c:	001d      	movs	r5, r3
 8018b5e:	230e      	movs	r3, #14
 8018b60:	5ec9      	ldrsh	r1, [r1, r3]
 8018b62:	0014      	movs	r4, r2
 8018b64:	b096      	sub	sp, #88	@ 0x58
 8018b66:	2900      	cmp	r1, #0
 8018b68:	da0c      	bge.n	8018b84 <__swhatbuf_r+0x2c>
 8018b6a:	89b2      	ldrh	r2, [r6, #12]
 8018b6c:	2380      	movs	r3, #128	@ 0x80
 8018b6e:	0011      	movs	r1, r2
 8018b70:	4019      	ands	r1, r3
 8018b72:	421a      	tst	r2, r3
 8018b74:	d114      	bne.n	8018ba0 <__swhatbuf_r+0x48>
 8018b76:	2380      	movs	r3, #128	@ 0x80
 8018b78:	00db      	lsls	r3, r3, #3
 8018b7a:	2000      	movs	r0, #0
 8018b7c:	6029      	str	r1, [r5, #0]
 8018b7e:	6023      	str	r3, [r4, #0]
 8018b80:	b016      	add	sp, #88	@ 0x58
 8018b82:	bd70      	pop	{r4, r5, r6, pc}
 8018b84:	466a      	mov	r2, sp
 8018b86:	f000 f853 	bl	8018c30 <_fstat_r>
 8018b8a:	2800      	cmp	r0, #0
 8018b8c:	dbed      	blt.n	8018b6a <__swhatbuf_r+0x12>
 8018b8e:	23f0      	movs	r3, #240	@ 0xf0
 8018b90:	9901      	ldr	r1, [sp, #4]
 8018b92:	021b      	lsls	r3, r3, #8
 8018b94:	4019      	ands	r1, r3
 8018b96:	4b04      	ldr	r3, [pc, #16]	@ (8018ba8 <__swhatbuf_r+0x50>)
 8018b98:	18c9      	adds	r1, r1, r3
 8018b9a:	424b      	negs	r3, r1
 8018b9c:	4159      	adcs	r1, r3
 8018b9e:	e7ea      	b.n	8018b76 <__swhatbuf_r+0x1e>
 8018ba0:	2100      	movs	r1, #0
 8018ba2:	2340      	movs	r3, #64	@ 0x40
 8018ba4:	e7e9      	b.n	8018b7a <__swhatbuf_r+0x22>
 8018ba6:	46c0      	nop			@ (mov r8, r8)
 8018ba8:	ffffe000 	.word	0xffffe000

08018bac <__smakebuf_r>:
 8018bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bae:	2602      	movs	r6, #2
 8018bb0:	898b      	ldrh	r3, [r1, #12]
 8018bb2:	0005      	movs	r5, r0
 8018bb4:	000c      	movs	r4, r1
 8018bb6:	b085      	sub	sp, #20
 8018bb8:	4233      	tst	r3, r6
 8018bba:	d007      	beq.n	8018bcc <__smakebuf_r+0x20>
 8018bbc:	0023      	movs	r3, r4
 8018bbe:	3347      	adds	r3, #71	@ 0x47
 8018bc0:	6023      	str	r3, [r4, #0]
 8018bc2:	6123      	str	r3, [r4, #16]
 8018bc4:	2301      	movs	r3, #1
 8018bc6:	6163      	str	r3, [r4, #20]
 8018bc8:	b005      	add	sp, #20
 8018bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bcc:	ab03      	add	r3, sp, #12
 8018bce:	aa02      	add	r2, sp, #8
 8018bd0:	f7ff ffc2 	bl	8018b58 <__swhatbuf_r>
 8018bd4:	9f02      	ldr	r7, [sp, #8]
 8018bd6:	9001      	str	r0, [sp, #4]
 8018bd8:	0039      	movs	r1, r7
 8018bda:	0028      	movs	r0, r5
 8018bdc:	f7fe fec4 	bl	8017968 <_malloc_r>
 8018be0:	2800      	cmp	r0, #0
 8018be2:	d108      	bne.n	8018bf6 <__smakebuf_r+0x4a>
 8018be4:	220c      	movs	r2, #12
 8018be6:	5ea3      	ldrsh	r3, [r4, r2]
 8018be8:	059a      	lsls	r2, r3, #22
 8018bea:	d4ed      	bmi.n	8018bc8 <__smakebuf_r+0x1c>
 8018bec:	2203      	movs	r2, #3
 8018bee:	4393      	bics	r3, r2
 8018bf0:	431e      	orrs	r6, r3
 8018bf2:	81a6      	strh	r6, [r4, #12]
 8018bf4:	e7e2      	b.n	8018bbc <__smakebuf_r+0x10>
 8018bf6:	2380      	movs	r3, #128	@ 0x80
 8018bf8:	89a2      	ldrh	r2, [r4, #12]
 8018bfa:	6020      	str	r0, [r4, #0]
 8018bfc:	4313      	orrs	r3, r2
 8018bfe:	81a3      	strh	r3, [r4, #12]
 8018c00:	9b03      	ldr	r3, [sp, #12]
 8018c02:	6120      	str	r0, [r4, #16]
 8018c04:	6167      	str	r7, [r4, #20]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d00c      	beq.n	8018c24 <__smakebuf_r+0x78>
 8018c0a:	0028      	movs	r0, r5
 8018c0c:	230e      	movs	r3, #14
 8018c0e:	5ee1      	ldrsh	r1, [r4, r3]
 8018c10:	f000 f820 	bl	8018c54 <_isatty_r>
 8018c14:	2800      	cmp	r0, #0
 8018c16:	d005      	beq.n	8018c24 <__smakebuf_r+0x78>
 8018c18:	2303      	movs	r3, #3
 8018c1a:	89a2      	ldrh	r2, [r4, #12]
 8018c1c:	439a      	bics	r2, r3
 8018c1e:	3b02      	subs	r3, #2
 8018c20:	4313      	orrs	r3, r2
 8018c22:	81a3      	strh	r3, [r4, #12]
 8018c24:	89a3      	ldrh	r3, [r4, #12]
 8018c26:	9a01      	ldr	r2, [sp, #4]
 8018c28:	4313      	orrs	r3, r2
 8018c2a:	81a3      	strh	r3, [r4, #12]
 8018c2c:	e7cc      	b.n	8018bc8 <__smakebuf_r+0x1c>
	...

08018c30 <_fstat_r>:
 8018c30:	2300      	movs	r3, #0
 8018c32:	b570      	push	{r4, r5, r6, lr}
 8018c34:	4d06      	ldr	r5, [pc, #24]	@ (8018c50 <_fstat_r+0x20>)
 8018c36:	0004      	movs	r4, r0
 8018c38:	0008      	movs	r0, r1
 8018c3a:	0011      	movs	r1, r2
 8018c3c:	602b      	str	r3, [r5, #0]
 8018c3e:	f7ef fb9b 	bl	8008378 <_fstat>
 8018c42:	1c43      	adds	r3, r0, #1
 8018c44:	d103      	bne.n	8018c4e <_fstat_r+0x1e>
 8018c46:	682b      	ldr	r3, [r5, #0]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d000      	beq.n	8018c4e <_fstat_r+0x1e>
 8018c4c:	6023      	str	r3, [r4, #0]
 8018c4e:	bd70      	pop	{r4, r5, r6, pc}
 8018c50:	200043ec 	.word	0x200043ec

08018c54 <_isatty_r>:
 8018c54:	2300      	movs	r3, #0
 8018c56:	b570      	push	{r4, r5, r6, lr}
 8018c58:	4d06      	ldr	r5, [pc, #24]	@ (8018c74 <_isatty_r+0x20>)
 8018c5a:	0004      	movs	r4, r0
 8018c5c:	0008      	movs	r0, r1
 8018c5e:	602b      	str	r3, [r5, #0]
 8018c60:	f7ef fb98 	bl	8008394 <_isatty>
 8018c64:	1c43      	adds	r3, r0, #1
 8018c66:	d103      	bne.n	8018c70 <_isatty_r+0x1c>
 8018c68:	682b      	ldr	r3, [r5, #0]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d000      	beq.n	8018c70 <_isatty_r+0x1c>
 8018c6e:	6023      	str	r3, [r4, #0]
 8018c70:	bd70      	pop	{r4, r5, r6, pc}
 8018c72:	46c0      	nop			@ (mov r8, r8)
 8018c74:	200043ec 	.word	0x200043ec

08018c78 <abort>:
 8018c78:	2006      	movs	r0, #6
 8018c7a:	b510      	push	{r4, lr}
 8018c7c:	f000 f834 	bl	8018ce8 <raise>
 8018c80:	2001      	movs	r0, #1
 8018c82:	f7ef fb45 	bl	8008310 <_exit>

08018c86 <_malloc_usable_size_r>:
 8018c86:	1f0b      	subs	r3, r1, #4
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	1f18      	subs	r0, r3, #4
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	da01      	bge.n	8018c94 <_malloc_usable_size_r+0xe>
 8018c90:	580b      	ldr	r3, [r1, r0]
 8018c92:	18c0      	adds	r0, r0, r3
 8018c94:	4770      	bx	lr

08018c96 <_raise_r>:
 8018c96:	b570      	push	{r4, r5, r6, lr}
 8018c98:	0004      	movs	r4, r0
 8018c9a:	000d      	movs	r5, r1
 8018c9c:	291f      	cmp	r1, #31
 8018c9e:	d904      	bls.n	8018caa <_raise_r+0x14>
 8018ca0:	2316      	movs	r3, #22
 8018ca2:	6003      	str	r3, [r0, #0]
 8018ca4:	2001      	movs	r0, #1
 8018ca6:	4240      	negs	r0, r0
 8018ca8:	bd70      	pop	{r4, r5, r6, pc}
 8018caa:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d004      	beq.n	8018cba <_raise_r+0x24>
 8018cb0:	008a      	lsls	r2, r1, #2
 8018cb2:	189b      	adds	r3, r3, r2
 8018cb4:	681a      	ldr	r2, [r3, #0]
 8018cb6:	2a00      	cmp	r2, #0
 8018cb8:	d108      	bne.n	8018ccc <_raise_r+0x36>
 8018cba:	0020      	movs	r0, r4
 8018cbc:	f000 f830 	bl	8018d20 <_getpid_r>
 8018cc0:	002a      	movs	r2, r5
 8018cc2:	0001      	movs	r1, r0
 8018cc4:	0020      	movs	r0, r4
 8018cc6:	f000 f819 	bl	8018cfc <_kill_r>
 8018cca:	e7ed      	b.n	8018ca8 <_raise_r+0x12>
 8018ccc:	2a01      	cmp	r2, #1
 8018cce:	d009      	beq.n	8018ce4 <_raise_r+0x4e>
 8018cd0:	1c51      	adds	r1, r2, #1
 8018cd2:	d103      	bne.n	8018cdc <_raise_r+0x46>
 8018cd4:	2316      	movs	r3, #22
 8018cd6:	6003      	str	r3, [r0, #0]
 8018cd8:	2001      	movs	r0, #1
 8018cda:	e7e5      	b.n	8018ca8 <_raise_r+0x12>
 8018cdc:	2100      	movs	r1, #0
 8018cde:	0028      	movs	r0, r5
 8018ce0:	6019      	str	r1, [r3, #0]
 8018ce2:	4790      	blx	r2
 8018ce4:	2000      	movs	r0, #0
 8018ce6:	e7df      	b.n	8018ca8 <_raise_r+0x12>

08018ce8 <raise>:
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	4b03      	ldr	r3, [pc, #12]	@ (8018cf8 <raise+0x10>)
 8018cec:	0001      	movs	r1, r0
 8018cee:	6818      	ldr	r0, [r3, #0]
 8018cf0:	f7ff ffd1 	bl	8018c96 <_raise_r>
 8018cf4:	bd10      	pop	{r4, pc}
 8018cf6:	46c0      	nop			@ (mov r8, r8)
 8018cf8:	200002d8 	.word	0x200002d8

08018cfc <_kill_r>:
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	b570      	push	{r4, r5, r6, lr}
 8018d00:	4d06      	ldr	r5, [pc, #24]	@ (8018d1c <_kill_r+0x20>)
 8018d02:	0004      	movs	r4, r0
 8018d04:	0008      	movs	r0, r1
 8018d06:	0011      	movs	r1, r2
 8018d08:	602b      	str	r3, [r5, #0]
 8018d0a:	f7ef faf1 	bl	80082f0 <_kill>
 8018d0e:	1c43      	adds	r3, r0, #1
 8018d10:	d103      	bne.n	8018d1a <_kill_r+0x1e>
 8018d12:	682b      	ldr	r3, [r5, #0]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d000      	beq.n	8018d1a <_kill_r+0x1e>
 8018d18:	6023      	str	r3, [r4, #0]
 8018d1a:	bd70      	pop	{r4, r5, r6, pc}
 8018d1c:	200043ec 	.word	0x200043ec

08018d20 <_getpid_r>:
 8018d20:	b510      	push	{r4, lr}
 8018d22:	f7ef fadf 	bl	80082e4 <_getpid>
 8018d26:	bd10      	pop	{r4, pc}

08018d28 <log10>:
 8018d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d2a:	0004      	movs	r4, r0
 8018d2c:	000d      	movs	r5, r1
 8018d2e:	f000 fa0b 	bl	8019148 <__ieee754_log10>
 8018d32:	0022      	movs	r2, r4
 8018d34:	0006      	movs	r6, r0
 8018d36:	000f      	movs	r7, r1
 8018d38:	002b      	movs	r3, r5
 8018d3a:	0020      	movs	r0, r4
 8018d3c:	0029      	movs	r1, r5
 8018d3e:	f7ea fa5f 	bl	8003200 <__aeabi_dcmpun>
 8018d42:	2800      	cmp	r0, #0
 8018d44:	d115      	bne.n	8018d72 <log10+0x4a>
 8018d46:	2200      	movs	r2, #0
 8018d48:	2300      	movs	r3, #0
 8018d4a:	0020      	movs	r0, r4
 8018d4c:	0029      	movs	r1, r5
 8018d4e:	f7e7 fb8d 	bl	800046c <__aeabi_dcmple>
 8018d52:	2800      	cmp	r0, #0
 8018d54:	d00d      	beq.n	8018d72 <log10+0x4a>
 8018d56:	2200      	movs	r2, #0
 8018d58:	2300      	movs	r3, #0
 8018d5a:	0020      	movs	r0, r4
 8018d5c:	0029      	movs	r1, r5
 8018d5e:	f7e7 fb75 	bl	800044c <__aeabi_dcmpeq>
 8018d62:	2800      	cmp	r0, #0
 8018d64:	d008      	beq.n	8018d78 <log10+0x50>
 8018d66:	f7fd fec5 	bl	8016af4 <__errno>
 8018d6a:	2322      	movs	r3, #34	@ 0x22
 8018d6c:	2600      	movs	r6, #0
 8018d6e:	4f07      	ldr	r7, [pc, #28]	@ (8018d8c <log10+0x64>)
 8018d70:	6003      	str	r3, [r0, #0]
 8018d72:	0030      	movs	r0, r6
 8018d74:	0039      	movs	r1, r7
 8018d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d78:	f7fd febc 	bl	8016af4 <__errno>
 8018d7c:	2321      	movs	r3, #33	@ 0x21
 8018d7e:	6003      	str	r3, [r0, #0]
 8018d80:	4803      	ldr	r0, [pc, #12]	@ (8018d90 <log10+0x68>)
 8018d82:	f000 f871 	bl	8018e68 <nan>
 8018d86:	0006      	movs	r6, r0
 8018d88:	000f      	movs	r7, r1
 8018d8a:	e7f2      	b.n	8018d72 <log10+0x4a>
 8018d8c:	fff00000 	.word	0xfff00000
 8018d90:	0801a756 	.word	0x0801a756

08018d94 <sqrt>:
 8018d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d96:	0004      	movs	r4, r0
 8018d98:	000d      	movs	r5, r1
 8018d9a:	f000 f875 	bl	8018e88 <__ieee754_sqrt>
 8018d9e:	0022      	movs	r2, r4
 8018da0:	0006      	movs	r6, r0
 8018da2:	000f      	movs	r7, r1
 8018da4:	002b      	movs	r3, r5
 8018da6:	0020      	movs	r0, r4
 8018da8:	0029      	movs	r1, r5
 8018daa:	f7ea fa29 	bl	8003200 <__aeabi_dcmpun>
 8018dae:	2800      	cmp	r0, #0
 8018db0:	d113      	bne.n	8018dda <sqrt+0x46>
 8018db2:	2200      	movs	r2, #0
 8018db4:	2300      	movs	r3, #0
 8018db6:	0020      	movs	r0, r4
 8018db8:	0029      	movs	r1, r5
 8018dba:	f7e7 fb4d 	bl	8000458 <__aeabi_dcmplt>
 8018dbe:	2800      	cmp	r0, #0
 8018dc0:	d00b      	beq.n	8018dda <sqrt+0x46>
 8018dc2:	f7fd fe97 	bl	8016af4 <__errno>
 8018dc6:	2321      	movs	r3, #33	@ 0x21
 8018dc8:	2200      	movs	r2, #0
 8018dca:	6003      	str	r3, [r0, #0]
 8018dcc:	2300      	movs	r3, #0
 8018dce:	0010      	movs	r0, r2
 8018dd0:	0019      	movs	r1, r3
 8018dd2:	f7e8 ff6d 	bl	8001cb0 <__aeabi_ddiv>
 8018dd6:	0006      	movs	r6, r0
 8018dd8:	000f      	movs	r7, r1
 8018dda:	0030      	movs	r0, r6
 8018ddc:	0039      	movs	r1, r7
 8018dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018de0 <expf>:
 8018de0:	b570      	push	{r4, r5, r6, lr}
 8018de2:	1c04      	adds	r4, r0, #0
 8018de4:	f000 fa2a 	bl	801923c <__ieee754_expf>
 8018de8:	1c05      	adds	r5, r0, #0
 8018dea:	1c20      	adds	r0, r4, #0
 8018dec:	f000 f842 	bl	8018e74 <finitef>
 8018df0:	2800      	cmp	r0, #0
 8018df2:	d00b      	beq.n	8018e0c <expf+0x2c>
 8018df4:	490c      	ldr	r1, [pc, #48]	@ (8018e28 <expf+0x48>)
 8018df6:	1c20      	adds	r0, r4, #0
 8018df8:	f7e7 fb7c 	bl	80004f4 <__aeabi_fcmpgt>
 8018dfc:	2800      	cmp	r0, #0
 8018dfe:	d007      	beq.n	8018e10 <expf+0x30>
 8018e00:	f7fd fe78 	bl	8016af4 <__errno>
 8018e04:	25ff      	movs	r5, #255	@ 0xff
 8018e06:	2322      	movs	r3, #34	@ 0x22
 8018e08:	05ed      	lsls	r5, r5, #23
 8018e0a:	6003      	str	r3, [r0, #0]
 8018e0c:	1c28      	adds	r0, r5, #0
 8018e0e:	bd70      	pop	{r4, r5, r6, pc}
 8018e10:	4906      	ldr	r1, [pc, #24]	@ (8018e2c <expf+0x4c>)
 8018e12:	1c20      	adds	r0, r4, #0
 8018e14:	f7e7 fb5a 	bl	80004cc <__aeabi_fcmplt>
 8018e18:	2800      	cmp	r0, #0
 8018e1a:	d0f7      	beq.n	8018e0c <expf+0x2c>
 8018e1c:	f7fd fe6a 	bl	8016af4 <__errno>
 8018e20:	2322      	movs	r3, #34	@ 0x22
 8018e22:	2500      	movs	r5, #0
 8018e24:	6003      	str	r3, [r0, #0]
 8018e26:	e7f1      	b.n	8018e0c <expf+0x2c>
 8018e28:	42b17217 	.word	0x42b17217
 8018e2c:	c2cff1b5 	.word	0xc2cff1b5

08018e30 <sqrtf>:
 8018e30:	b570      	push	{r4, r5, r6, lr}
 8018e32:	1c05      	adds	r5, r0, #0
 8018e34:	f000 f910 	bl	8019058 <__ieee754_sqrtf>
 8018e38:	1c29      	adds	r1, r5, #0
 8018e3a:	1c04      	adds	r4, r0, #0
 8018e3c:	1c28      	adds	r0, r5, #0
 8018e3e:	f7e8 fb0f 	bl	8001460 <__aeabi_fcmpun>
 8018e42:	2800      	cmp	r0, #0
 8018e44:	d10e      	bne.n	8018e64 <sqrtf+0x34>
 8018e46:	2100      	movs	r1, #0
 8018e48:	1c28      	adds	r0, r5, #0
 8018e4a:	f7e7 fb3f 	bl	80004cc <__aeabi_fcmplt>
 8018e4e:	2800      	cmp	r0, #0
 8018e50:	d008      	beq.n	8018e64 <sqrtf+0x34>
 8018e52:	f7fd fe4f 	bl	8016af4 <__errno>
 8018e56:	2321      	movs	r3, #33	@ 0x21
 8018e58:	2100      	movs	r1, #0
 8018e5a:	6003      	str	r3, [r0, #0]
 8018e5c:	1c08      	adds	r0, r1, #0
 8018e5e:	f7e7 fe37 	bl	8000ad0 <__aeabi_fdiv>
 8018e62:	1c04      	adds	r4, r0, #0
 8018e64:	1c20      	adds	r0, r4, #0
 8018e66:	bd70      	pop	{r4, r5, r6, pc}

08018e68 <nan>:
 8018e68:	2000      	movs	r0, #0
 8018e6a:	4901      	ldr	r1, [pc, #4]	@ (8018e70 <nan+0x8>)
 8018e6c:	4770      	bx	lr
 8018e6e:	46c0      	nop			@ (mov r8, r8)
 8018e70:	7ff80000 	.word	0x7ff80000

08018e74 <finitef>:
 8018e74:	22ff      	movs	r2, #255	@ 0xff
 8018e76:	0043      	lsls	r3, r0, #1
 8018e78:	085b      	lsrs	r3, r3, #1
 8018e7a:	2001      	movs	r0, #1
 8018e7c:	05d2      	lsls	r2, r2, #23
 8018e7e:	4293      	cmp	r3, r2
 8018e80:	db00      	blt.n	8018e84 <finitef+0x10>
 8018e82:	2000      	movs	r0, #0
 8018e84:	4770      	bx	lr
	...

08018e88 <__ieee754_sqrt>:
 8018e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e8a:	000a      	movs	r2, r1
 8018e8c:	000d      	movs	r5, r1
 8018e8e:	496d      	ldr	r1, [pc, #436]	@ (8019044 <__ieee754_sqrt+0x1bc>)
 8018e90:	0004      	movs	r4, r0
 8018e92:	0003      	movs	r3, r0
 8018e94:	0008      	movs	r0, r1
 8018e96:	b087      	sub	sp, #28
 8018e98:	4028      	ands	r0, r5
 8018e9a:	4288      	cmp	r0, r1
 8018e9c:	d111      	bne.n	8018ec2 <__ieee754_sqrt+0x3a>
 8018e9e:	0022      	movs	r2, r4
 8018ea0:	002b      	movs	r3, r5
 8018ea2:	0020      	movs	r0, r4
 8018ea4:	0029      	movs	r1, r5
 8018ea6:	f7e9 fb47 	bl	8002538 <__aeabi_dmul>
 8018eaa:	0002      	movs	r2, r0
 8018eac:	000b      	movs	r3, r1
 8018eae:	0020      	movs	r0, r4
 8018eb0:	0029      	movs	r1, r5
 8018eb2:	f7e8 fb99 	bl	80015e8 <__aeabi_dadd>
 8018eb6:	0004      	movs	r4, r0
 8018eb8:	000d      	movs	r5, r1
 8018eba:	0020      	movs	r0, r4
 8018ebc:	0029      	movs	r1, r5
 8018ebe:	b007      	add	sp, #28
 8018ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ec2:	2d00      	cmp	r5, #0
 8018ec4:	dc11      	bgt.n	8018eea <__ieee754_sqrt+0x62>
 8018ec6:	0069      	lsls	r1, r5, #1
 8018ec8:	0849      	lsrs	r1, r1, #1
 8018eca:	4321      	orrs	r1, r4
 8018ecc:	d0f5      	beq.n	8018eba <__ieee754_sqrt+0x32>
 8018ece:	2000      	movs	r0, #0
 8018ed0:	4285      	cmp	r5, r0
 8018ed2:	d010      	beq.n	8018ef6 <__ieee754_sqrt+0x6e>
 8018ed4:	0022      	movs	r2, r4
 8018ed6:	002b      	movs	r3, r5
 8018ed8:	0020      	movs	r0, r4
 8018eda:	0029      	movs	r1, r5
 8018edc:	f7e9 fdf4 	bl	8002ac8 <__aeabi_dsub>
 8018ee0:	0002      	movs	r2, r0
 8018ee2:	000b      	movs	r3, r1
 8018ee4:	f7e8 fee4 	bl	8001cb0 <__aeabi_ddiv>
 8018ee8:	e7e5      	b.n	8018eb6 <__ieee754_sqrt+0x2e>
 8018eea:	1528      	asrs	r0, r5, #20
 8018eec:	d115      	bne.n	8018f1a <__ieee754_sqrt+0x92>
 8018eee:	2480      	movs	r4, #128	@ 0x80
 8018ef0:	2100      	movs	r1, #0
 8018ef2:	0364      	lsls	r4, r4, #13
 8018ef4:	e007      	b.n	8018f06 <__ieee754_sqrt+0x7e>
 8018ef6:	0ada      	lsrs	r2, r3, #11
 8018ef8:	3815      	subs	r0, #21
 8018efa:	055b      	lsls	r3, r3, #21
 8018efc:	2a00      	cmp	r2, #0
 8018efe:	d0fa      	beq.n	8018ef6 <__ieee754_sqrt+0x6e>
 8018f00:	e7f5      	b.n	8018eee <__ieee754_sqrt+0x66>
 8018f02:	0052      	lsls	r2, r2, #1
 8018f04:	3101      	adds	r1, #1
 8018f06:	4222      	tst	r2, r4
 8018f08:	d0fb      	beq.n	8018f02 <__ieee754_sqrt+0x7a>
 8018f0a:	1e4c      	subs	r4, r1, #1
 8018f0c:	1b00      	subs	r0, r0, r4
 8018f0e:	2420      	movs	r4, #32
 8018f10:	001d      	movs	r5, r3
 8018f12:	1a64      	subs	r4, r4, r1
 8018f14:	40e5      	lsrs	r5, r4
 8018f16:	408b      	lsls	r3, r1
 8018f18:	432a      	orrs	r2, r5
 8018f1a:	494b      	ldr	r1, [pc, #300]	@ (8019048 <__ieee754_sqrt+0x1c0>)
 8018f1c:	0312      	lsls	r2, r2, #12
 8018f1e:	1844      	adds	r4, r0, r1
 8018f20:	2180      	movs	r1, #128	@ 0x80
 8018f22:	0b12      	lsrs	r2, r2, #12
 8018f24:	0349      	lsls	r1, r1, #13
 8018f26:	4311      	orrs	r1, r2
 8018f28:	07c0      	lsls	r0, r0, #31
 8018f2a:	d403      	bmi.n	8018f34 <__ieee754_sqrt+0xac>
 8018f2c:	0fda      	lsrs	r2, r3, #31
 8018f2e:	0049      	lsls	r1, r1, #1
 8018f30:	1851      	adds	r1, r2, r1
 8018f32:	005b      	lsls	r3, r3, #1
 8018f34:	2500      	movs	r5, #0
 8018f36:	1062      	asrs	r2, r4, #1
 8018f38:	0049      	lsls	r1, r1, #1
 8018f3a:	2480      	movs	r4, #128	@ 0x80
 8018f3c:	9205      	str	r2, [sp, #20]
 8018f3e:	0fda      	lsrs	r2, r3, #31
 8018f40:	1852      	adds	r2, r2, r1
 8018f42:	2016      	movs	r0, #22
 8018f44:	0029      	movs	r1, r5
 8018f46:	005b      	lsls	r3, r3, #1
 8018f48:	03a4      	lsls	r4, r4, #14
 8018f4a:	190e      	adds	r6, r1, r4
 8018f4c:	4296      	cmp	r6, r2
 8018f4e:	dc02      	bgt.n	8018f56 <__ieee754_sqrt+0xce>
 8018f50:	1931      	adds	r1, r6, r4
 8018f52:	1b92      	subs	r2, r2, r6
 8018f54:	192d      	adds	r5, r5, r4
 8018f56:	0fde      	lsrs	r6, r3, #31
 8018f58:	0052      	lsls	r2, r2, #1
 8018f5a:	3801      	subs	r0, #1
 8018f5c:	1992      	adds	r2, r2, r6
 8018f5e:	005b      	lsls	r3, r3, #1
 8018f60:	0864      	lsrs	r4, r4, #1
 8018f62:	2800      	cmp	r0, #0
 8018f64:	d1f1      	bne.n	8018f4a <__ieee754_sqrt+0xc2>
 8018f66:	2620      	movs	r6, #32
 8018f68:	2780      	movs	r7, #128	@ 0x80
 8018f6a:	0004      	movs	r4, r0
 8018f6c:	9604      	str	r6, [sp, #16]
 8018f6e:	063f      	lsls	r7, r7, #24
 8018f70:	19c6      	adds	r6, r0, r7
 8018f72:	46b4      	mov	ip, r6
 8018f74:	4291      	cmp	r1, r2
 8018f76:	db02      	blt.n	8018f7e <__ieee754_sqrt+0xf6>
 8018f78:	d114      	bne.n	8018fa4 <__ieee754_sqrt+0x11c>
 8018f7a:	429e      	cmp	r6, r3
 8018f7c:	d812      	bhi.n	8018fa4 <__ieee754_sqrt+0x11c>
 8018f7e:	4660      	mov	r0, ip
 8018f80:	4666      	mov	r6, ip
 8018f82:	19c0      	adds	r0, r0, r7
 8018f84:	9100      	str	r1, [sp, #0]
 8018f86:	2e00      	cmp	r6, #0
 8018f88:	da03      	bge.n	8018f92 <__ieee754_sqrt+0x10a>
 8018f8a:	43c6      	mvns	r6, r0
 8018f8c:	0ff6      	lsrs	r6, r6, #31
 8018f8e:	198e      	adds	r6, r1, r6
 8018f90:	9600      	str	r6, [sp, #0]
 8018f92:	1a52      	subs	r2, r2, r1
 8018f94:	4563      	cmp	r3, ip
 8018f96:	4189      	sbcs	r1, r1
 8018f98:	4249      	negs	r1, r1
 8018f9a:	1a52      	subs	r2, r2, r1
 8018f9c:	4661      	mov	r1, ip
 8018f9e:	1a5b      	subs	r3, r3, r1
 8018fa0:	9900      	ldr	r1, [sp, #0]
 8018fa2:	19e4      	adds	r4, r4, r7
 8018fa4:	0fde      	lsrs	r6, r3, #31
 8018fa6:	0052      	lsls	r2, r2, #1
 8018fa8:	1992      	adds	r2, r2, r6
 8018faa:	9e04      	ldr	r6, [sp, #16]
 8018fac:	005b      	lsls	r3, r3, #1
 8018fae:	3e01      	subs	r6, #1
 8018fb0:	087f      	lsrs	r7, r7, #1
 8018fb2:	9604      	str	r6, [sp, #16]
 8018fb4:	2e00      	cmp	r6, #0
 8018fb6:	d1db      	bne.n	8018f70 <__ieee754_sqrt+0xe8>
 8018fb8:	431a      	orrs	r2, r3
 8018fba:	d01f      	beq.n	8018ffc <__ieee754_sqrt+0x174>
 8018fbc:	4e23      	ldr	r6, [pc, #140]	@ (801904c <__ieee754_sqrt+0x1c4>)
 8018fbe:	4f24      	ldr	r7, [pc, #144]	@ (8019050 <__ieee754_sqrt+0x1c8>)
 8018fc0:	6830      	ldr	r0, [r6, #0]
 8018fc2:	6871      	ldr	r1, [r6, #4]
 8018fc4:	683a      	ldr	r2, [r7, #0]
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	9200      	str	r2, [sp, #0]
 8018fca:	9301      	str	r3, [sp, #4]
 8018fcc:	6832      	ldr	r2, [r6, #0]
 8018fce:	6873      	ldr	r3, [r6, #4]
 8018fd0:	9202      	str	r2, [sp, #8]
 8018fd2:	9303      	str	r3, [sp, #12]
 8018fd4:	9a00      	ldr	r2, [sp, #0]
 8018fd6:	9b01      	ldr	r3, [sp, #4]
 8018fd8:	f7e9 fd76 	bl	8002ac8 <__aeabi_dsub>
 8018fdc:	0002      	movs	r2, r0
 8018fde:	000b      	movs	r3, r1
 8018fe0:	9802      	ldr	r0, [sp, #8]
 8018fe2:	9903      	ldr	r1, [sp, #12]
 8018fe4:	f7e7 fa42 	bl	800046c <__aeabi_dcmple>
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	d007      	beq.n	8018ffc <__ieee754_sqrt+0x174>
 8018fec:	6830      	ldr	r0, [r6, #0]
 8018fee:	6871      	ldr	r1, [r6, #4]
 8018ff0:	683a      	ldr	r2, [r7, #0]
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	1c67      	adds	r7, r4, #1
 8018ff6:	d10f      	bne.n	8019018 <__ieee754_sqrt+0x190>
 8018ff8:	9c04      	ldr	r4, [sp, #16]
 8018ffa:	3501      	adds	r5, #1
 8018ffc:	4b15      	ldr	r3, [pc, #84]	@ (8019054 <__ieee754_sqrt+0x1cc>)
 8018ffe:	106a      	asrs	r2, r5, #1
 8019000:	18d2      	adds	r2, r2, r3
 8019002:	0863      	lsrs	r3, r4, #1
 8019004:	07ed      	lsls	r5, r5, #31
 8019006:	d502      	bpl.n	801900e <__ieee754_sqrt+0x186>
 8019008:	2180      	movs	r1, #128	@ 0x80
 801900a:	0609      	lsls	r1, r1, #24
 801900c:	430b      	orrs	r3, r1
 801900e:	9905      	ldr	r1, [sp, #20]
 8019010:	001c      	movs	r4, r3
 8019012:	0509      	lsls	r1, r1, #20
 8019014:	188d      	adds	r5, r1, r2
 8019016:	e750      	b.n	8018eba <__ieee754_sqrt+0x32>
 8019018:	f7e8 fae6 	bl	80015e8 <__aeabi_dadd>
 801901c:	6877      	ldr	r7, [r6, #4]
 801901e:	6836      	ldr	r6, [r6, #0]
 8019020:	0002      	movs	r2, r0
 8019022:	000b      	movs	r3, r1
 8019024:	0030      	movs	r0, r6
 8019026:	0039      	movs	r1, r7
 8019028:	f7e7 fa16 	bl	8000458 <__aeabi_dcmplt>
 801902c:	2800      	cmp	r0, #0
 801902e:	d004      	beq.n	801903a <__ieee754_sqrt+0x1b2>
 8019030:	3402      	adds	r4, #2
 8019032:	4263      	negs	r3, r4
 8019034:	4163      	adcs	r3, r4
 8019036:	18ed      	adds	r5, r5, r3
 8019038:	e7e0      	b.n	8018ffc <__ieee754_sqrt+0x174>
 801903a:	2301      	movs	r3, #1
 801903c:	3401      	adds	r4, #1
 801903e:	439c      	bics	r4, r3
 8019040:	e7dc      	b.n	8018ffc <__ieee754_sqrt+0x174>
 8019042:	46c0      	nop			@ (mov r8, r8)
 8019044:	7ff00000 	.word	0x7ff00000
 8019048:	fffffc01 	.word	0xfffffc01
 801904c:	200004a0 	.word	0x200004a0
 8019050:	20000498 	.word	0x20000498
 8019054:	3fe00000 	.word	0x3fe00000

08019058 <__ieee754_sqrtf>:
 8019058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801905a:	0003      	movs	r3, r0
 801905c:	0042      	lsls	r2, r0, #1
 801905e:	1c04      	adds	r4, r0, #0
 8019060:	20ff      	movs	r0, #255	@ 0xff
 8019062:	0852      	lsrs	r2, r2, #1
 8019064:	05c0      	lsls	r0, r0, #23
 8019066:	4282      	cmp	r2, r0
 8019068:	d30a      	bcc.n	8019080 <__ieee754_sqrtf+0x28>
 801906a:	1c21      	adds	r1, r4, #0
 801906c:	1c20      	adds	r0, r4, #0
 801906e:	f7e7 ff15 	bl	8000e9c <__aeabi_fmul>
 8019072:	1c01      	adds	r1, r0, #0
 8019074:	1c20      	adds	r0, r4, #0
 8019076:	f7e7 fba1 	bl	80007bc <__aeabi_fadd>
 801907a:	1c04      	adds	r4, r0, #0
 801907c:	1c20      	adds	r0, r4, #0
 801907e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019080:	2a00      	cmp	r2, #0
 8019082:	d0fb      	beq.n	801907c <__ieee754_sqrtf+0x24>
 8019084:	2c00      	cmp	r4, #0
 8019086:	da07      	bge.n	8019098 <__ieee754_sqrtf+0x40>
 8019088:	1c21      	adds	r1, r4, #0
 801908a:	1c20      	adds	r0, r4, #0
 801908c:	f7e8 f844 	bl	8001118 <__aeabi_fsub>
 8019090:	1c01      	adds	r1, r0, #0
 8019092:	f7e7 fd1d 	bl	8000ad0 <__aeabi_fdiv>
 8019096:	e7f0      	b.n	801907a <__ieee754_sqrtf+0x22>
 8019098:	0022      	movs	r2, r4
 801909a:	15e1      	asrs	r1, r4, #23
 801909c:	4002      	ands	r2, r0
 801909e:	4204      	tst	r4, r0
 80190a0:	d046      	beq.n	8019130 <__ieee754_sqrtf+0xd8>
 80190a2:	2280      	movs	r2, #128	@ 0x80
 80190a4:	000f      	movs	r7, r1
 80190a6:	025b      	lsls	r3, r3, #9
 80190a8:	0a5b      	lsrs	r3, r3, #9
 80190aa:	0412      	lsls	r2, r2, #16
 80190ac:	3f7f      	subs	r7, #127	@ 0x7f
 80190ae:	4313      	orrs	r3, r2
 80190b0:	07c9      	lsls	r1, r1, #31
 80190b2:	d400      	bmi.n	80190b6 <__ieee754_sqrtf+0x5e>
 80190b4:	005b      	lsls	r3, r3, #1
 80190b6:	2400      	movs	r4, #0
 80190b8:	2180      	movs	r1, #128	@ 0x80
 80190ba:	2019      	movs	r0, #25
 80190bc:	0026      	movs	r6, r4
 80190be:	107f      	asrs	r7, r7, #1
 80190c0:	005b      	lsls	r3, r3, #1
 80190c2:	0449      	lsls	r1, r1, #17
 80190c4:	1875      	adds	r5, r6, r1
 80190c6:	001a      	movs	r2, r3
 80190c8:	429d      	cmp	r5, r3
 80190ca:	dc02      	bgt.n	80190d2 <__ieee754_sqrtf+0x7a>
 80190cc:	186e      	adds	r6, r5, r1
 80190ce:	1b5a      	subs	r2, r3, r5
 80190d0:	1864      	adds	r4, r4, r1
 80190d2:	3801      	subs	r0, #1
 80190d4:	0053      	lsls	r3, r2, #1
 80190d6:	0849      	lsrs	r1, r1, #1
 80190d8:	2800      	cmp	r0, #0
 80190da:	d1f3      	bne.n	80190c4 <__ieee754_sqrtf+0x6c>
 80190dc:	2a00      	cmp	r2, #0
 80190de:	d019      	beq.n	8019114 <__ieee754_sqrtf+0xbc>
 80190e0:	4d17      	ldr	r5, [pc, #92]	@ (8019140 <__ieee754_sqrtf+0xe8>)
 80190e2:	4e18      	ldr	r6, [pc, #96]	@ (8019144 <__ieee754_sqrtf+0xec>)
 80190e4:	6828      	ldr	r0, [r5, #0]
 80190e6:	6831      	ldr	r1, [r6, #0]
 80190e8:	682b      	ldr	r3, [r5, #0]
 80190ea:	9301      	str	r3, [sp, #4]
 80190ec:	f7e8 f814 	bl	8001118 <__aeabi_fsub>
 80190f0:	1c01      	adds	r1, r0, #0
 80190f2:	9801      	ldr	r0, [sp, #4]
 80190f4:	f7e7 f9f4 	bl	80004e0 <__aeabi_fcmple>
 80190f8:	2800      	cmp	r0, #0
 80190fa:	d00b      	beq.n	8019114 <__ieee754_sqrtf+0xbc>
 80190fc:	6828      	ldr	r0, [r5, #0]
 80190fe:	6831      	ldr	r1, [r6, #0]
 8019100:	f7e7 fb5c 	bl	80007bc <__aeabi_fadd>
 8019104:	682d      	ldr	r5, [r5, #0]
 8019106:	1c01      	adds	r1, r0, #0
 8019108:	1c28      	adds	r0, r5, #0
 801910a:	f7e7 f9df 	bl	80004cc <__aeabi_fcmplt>
 801910e:	2800      	cmp	r0, #0
 8019110:	d011      	beq.n	8019136 <__ieee754_sqrtf+0xde>
 8019112:	3402      	adds	r4, #2
 8019114:	23fc      	movs	r3, #252	@ 0xfc
 8019116:	1064      	asrs	r4, r4, #1
 8019118:	059b      	lsls	r3, r3, #22
 801911a:	18e3      	adds	r3, r4, r3
 801911c:	05fc      	lsls	r4, r7, #23
 801911e:	18e4      	adds	r4, r4, r3
 8019120:	e7ac      	b.n	801907c <__ieee754_sqrtf+0x24>
 8019122:	005b      	lsls	r3, r3, #1
 8019124:	3201      	adds	r2, #1
 8019126:	4203      	tst	r3, r0
 8019128:	d0fb      	beq.n	8019122 <__ieee754_sqrtf+0xca>
 801912a:	3a01      	subs	r2, #1
 801912c:	1a89      	subs	r1, r1, r2
 801912e:	e7b8      	b.n	80190a2 <__ieee754_sqrtf+0x4a>
 8019130:	2080      	movs	r0, #128	@ 0x80
 8019132:	0400      	lsls	r0, r0, #16
 8019134:	e7f7      	b.n	8019126 <__ieee754_sqrtf+0xce>
 8019136:	2301      	movs	r3, #1
 8019138:	3401      	adds	r4, #1
 801913a:	439c      	bics	r4, r3
 801913c:	e7ea      	b.n	8019114 <__ieee754_sqrtf+0xbc>
 801913e:	46c0      	nop			@ (mov r8, r8)
 8019140:	200004ac 	.word	0x200004ac
 8019144:	200004a8 	.word	0x200004a8

08019148 <__ieee754_log10>:
 8019148:	2280      	movs	r2, #128	@ 0x80
 801914a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801914c:	000b      	movs	r3, r1
 801914e:	0004      	movs	r4, r0
 8019150:	000d      	movs	r5, r1
 8019152:	b085      	sub	sp, #20
 8019154:	0352      	lsls	r2, r2, #13
 8019156:	4291      	cmp	r1, r2
 8019158:	da26      	bge.n	80191a8 <__ieee754_log10+0x60>
 801915a:	004a      	lsls	r2, r1, #1
 801915c:	0852      	lsrs	r2, r2, #1
 801915e:	4302      	orrs	r2, r0
 8019160:	d107      	bne.n	8019172 <__ieee754_log10+0x2a>
 8019162:	2200      	movs	r2, #0
 8019164:	2300      	movs	r3, #0
 8019166:	2000      	movs	r0, #0
 8019168:	4929      	ldr	r1, [pc, #164]	@ (8019210 <__ieee754_log10+0xc8>)
 801916a:	f7e8 fda1 	bl	8001cb0 <__aeabi_ddiv>
 801916e:	b005      	add	sp, #20
 8019170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019172:	2900      	cmp	r1, #0
 8019174:	da05      	bge.n	8019182 <__ieee754_log10+0x3a>
 8019176:	0002      	movs	r2, r0
 8019178:	f7e9 fca6 	bl	8002ac8 <__aeabi_dsub>
 801917c:	2200      	movs	r2, #0
 801917e:	2300      	movs	r3, #0
 8019180:	e7f3      	b.n	801916a <__ieee754_log10+0x22>
 8019182:	2200      	movs	r2, #0
 8019184:	4b23      	ldr	r3, [pc, #140]	@ (8019214 <__ieee754_log10+0xcc>)
 8019186:	f7e9 f9d7 	bl	8002538 <__aeabi_dmul>
 801918a:	2236      	movs	r2, #54	@ 0x36
 801918c:	0004      	movs	r4, r0
 801918e:	000d      	movs	r5, r1
 8019190:	000b      	movs	r3, r1
 8019192:	4252      	negs	r2, r2
 8019194:	4920      	ldr	r1, [pc, #128]	@ (8019218 <__ieee754_log10+0xd0>)
 8019196:	428b      	cmp	r3, r1
 8019198:	dd08      	ble.n	80191ac <__ieee754_log10+0x64>
 801919a:	0022      	movs	r2, r4
 801919c:	002b      	movs	r3, r5
 801919e:	0020      	movs	r0, r4
 80191a0:	0029      	movs	r1, r5
 80191a2:	f7e8 fa21 	bl	80015e8 <__aeabi_dadd>
 80191a6:	e7e2      	b.n	801916e <__ieee754_log10+0x26>
 80191a8:	2200      	movs	r2, #0
 80191aa:	e7f3      	b.n	8019194 <__ieee754_log10+0x4c>
 80191ac:	491b      	ldr	r1, [pc, #108]	@ (801921c <__ieee754_log10+0xd4>)
 80191ae:	1518      	asrs	r0, r3, #20
 80191b0:	1840      	adds	r0, r0, r1
 80191b2:	1880      	adds	r0, r0, r2
 80191b4:	0fc2      	lsrs	r2, r0, #31
 80191b6:	031b      	lsls	r3, r3, #12
 80191b8:	0b1b      	lsrs	r3, r3, #12
 80191ba:	1880      	adds	r0, r0, r2
 80191bc:	9203      	str	r2, [sp, #12]
 80191be:	9300      	str	r3, [sp, #0]
 80191c0:	f7ea f87c 	bl	80032bc <__aeabi_i2d>
 80191c4:	9a03      	ldr	r2, [sp, #12]
 80191c6:	4b16      	ldr	r3, [pc, #88]	@ (8019220 <__ieee754_log10+0xd8>)
 80191c8:	0006      	movs	r6, r0
 80191ca:	1a9b      	subs	r3, r3, r2
 80191cc:	9a00      	ldr	r2, [sp, #0]
 80191ce:	051b      	lsls	r3, r3, #20
 80191d0:	431a      	orrs	r2, r3
 80191d2:	0015      	movs	r5, r2
 80191d4:	4b13      	ldr	r3, [pc, #76]	@ (8019224 <__ieee754_log10+0xdc>)
 80191d6:	4a14      	ldr	r2, [pc, #80]	@ (8019228 <__ieee754_log10+0xe0>)
 80191d8:	000f      	movs	r7, r1
 80191da:	f7e9 f9ad 	bl	8002538 <__aeabi_dmul>
 80191de:	9000      	str	r0, [sp, #0]
 80191e0:	9101      	str	r1, [sp, #4]
 80191e2:	0020      	movs	r0, r4
 80191e4:	0029      	movs	r1, r5
 80191e6:	f000 f93b 	bl	8019460 <__ieee754_log>
 80191ea:	4a10      	ldr	r2, [pc, #64]	@ (801922c <__ieee754_log10+0xe4>)
 80191ec:	4b10      	ldr	r3, [pc, #64]	@ (8019230 <__ieee754_log10+0xe8>)
 80191ee:	f7e9 f9a3 	bl	8002538 <__aeabi_dmul>
 80191f2:	9a00      	ldr	r2, [sp, #0]
 80191f4:	9b01      	ldr	r3, [sp, #4]
 80191f6:	f7e8 f9f7 	bl	80015e8 <__aeabi_dadd>
 80191fa:	4a0e      	ldr	r2, [pc, #56]	@ (8019234 <__ieee754_log10+0xec>)
 80191fc:	4b0e      	ldr	r3, [pc, #56]	@ (8019238 <__ieee754_log10+0xf0>)
 80191fe:	0004      	movs	r4, r0
 8019200:	000d      	movs	r5, r1
 8019202:	0030      	movs	r0, r6
 8019204:	0039      	movs	r1, r7
 8019206:	f7e9 f997 	bl	8002538 <__aeabi_dmul>
 801920a:	0002      	movs	r2, r0
 801920c:	000b      	movs	r3, r1
 801920e:	e7c6      	b.n	801919e <__ieee754_log10+0x56>
 8019210:	c3500000 	.word	0xc3500000
 8019214:	43500000 	.word	0x43500000
 8019218:	7fefffff 	.word	0x7fefffff
 801921c:	fffffc01 	.word	0xfffffc01
 8019220:	000003ff 	.word	0x000003ff
 8019224:	3d59fef3 	.word	0x3d59fef3
 8019228:	11f12b36 	.word	0x11f12b36
 801922c:	1526e50e 	.word	0x1526e50e
 8019230:	3fdbcb7b 	.word	0x3fdbcb7b
 8019234:	509f6000 	.word	0x509f6000
 8019238:	3fd34413 	.word	0x3fd34413

0801923c <__ieee754_expf>:
 801923c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801923e:	21ff      	movs	r1, #255	@ 0xff
 8019240:	0043      	lsls	r3, r0, #1
 8019242:	1c04      	adds	r4, r0, #0
 8019244:	085b      	lsrs	r3, r3, #1
 8019246:	05c9      	lsls	r1, r1, #23
 8019248:	428b      	cmp	r3, r1
 801924a:	d904      	bls.n	8019256 <__ieee754_expf+0x1a>
 801924c:	1c01      	adds	r1, r0, #0
 801924e:	1c20      	adds	r0, r4, #0
 8019250:	f7e7 fab4 	bl	80007bc <__aeabi_fadd>
 8019254:	e00d      	b.n	8019272 <__ieee754_expf+0x36>
 8019256:	0fc6      	lsrs	r6, r0, #31
 8019258:	428b      	cmp	r3, r1
 801925a:	d104      	bne.n	8019266 <__ieee754_expf+0x2a>
 801925c:	2e00      	cmp	r6, #0
 801925e:	d000      	beq.n	8019262 <__ieee754_expf+0x26>
 8019260:	e0ba      	b.n	80193d8 <__ieee754_expf+0x19c>
 8019262:	1c20      	adds	r0, r4, #0
 8019264:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019266:	495d      	ldr	r1, [pc, #372]	@ (80193dc <__ieee754_expf+0x1a0>)
 8019268:	4288      	cmp	r0, r1
 801926a:	dd04      	ble.n	8019276 <__ieee754_expf+0x3a>
 801926c:	2000      	movs	r0, #0
 801926e:	f000 f8f1 	bl	8019454 <__math_oflowf>
 8019272:	1c04      	adds	r4, r0, #0
 8019274:	e7f5      	b.n	8019262 <__ieee754_expf+0x26>
 8019276:	2800      	cmp	r0, #0
 8019278:	da06      	bge.n	8019288 <__ieee754_expf+0x4c>
 801927a:	4a59      	ldr	r2, [pc, #356]	@ (80193e0 <__ieee754_expf+0x1a4>)
 801927c:	4293      	cmp	r3, r2
 801927e:	d903      	bls.n	8019288 <__ieee754_expf+0x4c>
 8019280:	2000      	movs	r0, #0
 8019282:	f000 f8e1 	bl	8019448 <__math_uflowf>
 8019286:	e7f4      	b.n	8019272 <__ieee754_expf+0x36>
 8019288:	4a56      	ldr	r2, [pc, #344]	@ (80193e4 <__ieee754_expf+0x1a8>)
 801928a:	4293      	cmp	r3, r2
 801928c:	d96e      	bls.n	801936c <__ieee754_expf+0x130>
 801928e:	4a56      	ldr	r2, [pc, #344]	@ (80193e8 <__ieee754_expf+0x1ac>)
 8019290:	00b5      	lsls	r5, r6, #2
 8019292:	4293      	cmp	r3, r2
 8019294:	d84e      	bhi.n	8019334 <__ieee754_expf+0xf8>
 8019296:	4b55      	ldr	r3, [pc, #340]	@ (80193ec <__ieee754_expf+0x1b0>)
 8019298:	1c20      	adds	r0, r4, #0
 801929a:	5959      	ldr	r1, [r3, r5]
 801929c:	f7e7 ff3c 	bl	8001118 <__aeabi_fsub>
 80192a0:	4b53      	ldr	r3, [pc, #332]	@ (80193f0 <__ieee754_expf+0x1b4>)
 80192a2:	1c07      	adds	r7, r0, #0
 80192a4:	595b      	ldr	r3, [r3, r5]
 80192a6:	2501      	movs	r5, #1
 80192a8:	1bad      	subs	r5, r5, r6
 80192aa:	9300      	str	r3, [sp, #0]
 80192ac:	1bad      	subs	r5, r5, r6
 80192ae:	9900      	ldr	r1, [sp, #0]
 80192b0:	1c38      	adds	r0, r7, #0
 80192b2:	f7e7 ff31 	bl	8001118 <__aeabi_fsub>
 80192b6:	1c04      	adds	r4, r0, #0
 80192b8:	1c21      	adds	r1, r4, #0
 80192ba:	1c20      	adds	r0, r4, #0
 80192bc:	f7e7 fdee 	bl	8000e9c <__aeabi_fmul>
 80192c0:	494c      	ldr	r1, [pc, #304]	@ (80193f4 <__ieee754_expf+0x1b8>)
 80192c2:	1c06      	adds	r6, r0, #0
 80192c4:	f7e7 fdea 	bl	8000e9c <__aeabi_fmul>
 80192c8:	494b      	ldr	r1, [pc, #300]	@ (80193f8 <__ieee754_expf+0x1bc>)
 80192ca:	f7e7 ff25 	bl	8001118 <__aeabi_fsub>
 80192ce:	1c31      	adds	r1, r6, #0
 80192d0:	f7e7 fde4 	bl	8000e9c <__aeabi_fmul>
 80192d4:	4949      	ldr	r1, [pc, #292]	@ (80193fc <__ieee754_expf+0x1c0>)
 80192d6:	f7e7 fa71 	bl	80007bc <__aeabi_fadd>
 80192da:	1c31      	adds	r1, r6, #0
 80192dc:	f7e7 fdde 	bl	8000e9c <__aeabi_fmul>
 80192e0:	4947      	ldr	r1, [pc, #284]	@ (8019400 <__ieee754_expf+0x1c4>)
 80192e2:	f7e7 ff19 	bl	8001118 <__aeabi_fsub>
 80192e6:	1c31      	adds	r1, r6, #0
 80192e8:	f7e7 fdd8 	bl	8000e9c <__aeabi_fmul>
 80192ec:	4945      	ldr	r1, [pc, #276]	@ (8019404 <__ieee754_expf+0x1c8>)
 80192ee:	f7e7 fa65 	bl	80007bc <__aeabi_fadd>
 80192f2:	1c31      	adds	r1, r6, #0
 80192f4:	f7e7 fdd2 	bl	8000e9c <__aeabi_fmul>
 80192f8:	1c01      	adds	r1, r0, #0
 80192fa:	1c20      	adds	r0, r4, #0
 80192fc:	f7e7 ff0c 	bl	8001118 <__aeabi_fsub>
 8019300:	1c01      	adds	r1, r0, #0
 8019302:	1c06      	adds	r6, r0, #0
 8019304:	1c20      	adds	r0, r4, #0
 8019306:	f7e7 fdc9 	bl	8000e9c <__aeabi_fmul>
 801930a:	9001      	str	r0, [sp, #4]
 801930c:	2d00      	cmp	r5, #0
 801930e:	d140      	bne.n	8019392 <__ieee754_expf+0x156>
 8019310:	2180      	movs	r1, #128	@ 0x80
 8019312:	1c30      	adds	r0, r6, #0
 8019314:	05c9      	lsls	r1, r1, #23
 8019316:	f7e7 feff 	bl	8001118 <__aeabi_fsub>
 801931a:	1c01      	adds	r1, r0, #0
 801931c:	9801      	ldr	r0, [sp, #4]
 801931e:	f7e7 fbd7 	bl	8000ad0 <__aeabi_fdiv>
 8019322:	1c21      	adds	r1, r4, #0
 8019324:	f7e7 fef8 	bl	8001118 <__aeabi_fsub>
 8019328:	1c01      	adds	r1, r0, #0
 801932a:	20fe      	movs	r0, #254	@ 0xfe
 801932c:	0580      	lsls	r0, r0, #22
 801932e:	f7e7 fef3 	bl	8001118 <__aeabi_fsub>
 8019332:	e79e      	b.n	8019272 <__ieee754_expf+0x36>
 8019334:	4934      	ldr	r1, [pc, #208]	@ (8019408 <__ieee754_expf+0x1cc>)
 8019336:	1c20      	adds	r0, r4, #0
 8019338:	f7e7 fdb0 	bl	8000e9c <__aeabi_fmul>
 801933c:	4b33      	ldr	r3, [pc, #204]	@ (801940c <__ieee754_expf+0x1d0>)
 801933e:	5959      	ldr	r1, [r3, r5]
 8019340:	f7e7 fa3c 	bl	80007bc <__aeabi_fadd>
 8019344:	f7e8 f8a2 	bl	800148c <__aeabi_f2iz>
 8019348:	0005      	movs	r5, r0
 801934a:	f7e8 f8bf 	bl	80014cc <__aeabi_i2f>
 801934e:	4930      	ldr	r1, [pc, #192]	@ (8019410 <__ieee754_expf+0x1d4>)
 8019350:	1c06      	adds	r6, r0, #0
 8019352:	f7e7 fda3 	bl	8000e9c <__aeabi_fmul>
 8019356:	1c01      	adds	r1, r0, #0
 8019358:	1c20      	adds	r0, r4, #0
 801935a:	f7e7 fedd 	bl	8001118 <__aeabi_fsub>
 801935e:	492d      	ldr	r1, [pc, #180]	@ (8019414 <__ieee754_expf+0x1d8>)
 8019360:	1c07      	adds	r7, r0, #0
 8019362:	1c30      	adds	r0, r6, #0
 8019364:	f7e7 fd9a 	bl	8000e9c <__aeabi_fmul>
 8019368:	9000      	str	r0, [sp, #0]
 801936a:	e7a0      	b.n	80192ae <__ieee754_expf+0x72>
 801936c:	22d0      	movs	r2, #208	@ 0xd0
 801936e:	0592      	lsls	r2, r2, #22
 8019370:	4293      	cmp	r3, r2
 8019372:	d20c      	bcs.n	801938e <__ieee754_expf+0x152>
 8019374:	4928      	ldr	r1, [pc, #160]	@ (8019418 <__ieee754_expf+0x1dc>)
 8019376:	1c20      	adds	r0, r4, #0
 8019378:	f7e7 fa20 	bl	80007bc <__aeabi_fadd>
 801937c:	21fe      	movs	r1, #254	@ 0xfe
 801937e:	0589      	lsls	r1, r1, #22
 8019380:	f7e7 f8b8 	bl	80004f4 <__aeabi_fcmpgt>
 8019384:	1e05      	subs	r5, r0, #0
 8019386:	d097      	beq.n	80192b8 <__ieee754_expf+0x7c>
 8019388:	21fe      	movs	r1, #254	@ 0xfe
 801938a:	0589      	lsls	r1, r1, #22
 801938c:	e75f      	b.n	801924e <__ieee754_expf+0x12>
 801938e:	2500      	movs	r5, #0
 8019390:	e792      	b.n	80192b8 <__ieee754_expf+0x7c>
 8019392:	2080      	movs	r0, #128	@ 0x80
 8019394:	1c31      	adds	r1, r6, #0
 8019396:	05c0      	lsls	r0, r0, #23
 8019398:	f7e7 febe 	bl	8001118 <__aeabi_fsub>
 801939c:	1c01      	adds	r1, r0, #0
 801939e:	9801      	ldr	r0, [sp, #4]
 80193a0:	f7e7 fb96 	bl	8000ad0 <__aeabi_fdiv>
 80193a4:	1c01      	adds	r1, r0, #0
 80193a6:	9800      	ldr	r0, [sp, #0]
 80193a8:	f7e7 feb6 	bl	8001118 <__aeabi_fsub>
 80193ac:	1c39      	adds	r1, r7, #0
 80193ae:	f7e7 feb3 	bl	8001118 <__aeabi_fsub>
 80193b2:	1c01      	adds	r1, r0, #0
 80193b4:	20fe      	movs	r0, #254	@ 0xfe
 80193b6:	0580      	lsls	r0, r0, #22
 80193b8:	f7e7 feae 	bl	8001118 <__aeabi_fsub>
 80193bc:	002b      	movs	r3, r5
 80193be:	337d      	adds	r3, #125	@ 0x7d
 80193c0:	db02      	blt.n	80193c8 <__ieee754_expf+0x18c>
 80193c2:	05ec      	lsls	r4, r5, #23
 80193c4:	1824      	adds	r4, r4, r0
 80193c6:	e74c      	b.n	8019262 <__ieee754_expf+0x26>
 80193c8:	21d8      	movs	r1, #216	@ 0xd8
 80193ca:	3564      	adds	r5, #100	@ 0x64
 80193cc:	05ed      	lsls	r5, r5, #23
 80193ce:	1828      	adds	r0, r5, r0
 80193d0:	0509      	lsls	r1, r1, #20
 80193d2:	f7e7 fd63 	bl	8000e9c <__aeabi_fmul>
 80193d6:	e74c      	b.n	8019272 <__ieee754_expf+0x36>
 80193d8:	2400      	movs	r4, #0
 80193da:	e742      	b.n	8019262 <__ieee754_expf+0x26>
 80193dc:	42b17217 	.word	0x42b17217
 80193e0:	42cff1b5 	.word	0x42cff1b5
 80193e4:	3eb17218 	.word	0x3eb17218
 80193e8:	3f851591 	.word	0x3f851591
 80193ec:	0801a860 	.word	0x0801a860
 80193f0:	0801a858 	.word	0x0801a858
 80193f4:	3331bb4c 	.word	0x3331bb4c
 80193f8:	35ddea0e 	.word	0x35ddea0e
 80193fc:	388ab355 	.word	0x388ab355
 8019400:	3b360b61 	.word	0x3b360b61
 8019404:	3e2aaaab 	.word	0x3e2aaaab
 8019408:	3fb8aa3b 	.word	0x3fb8aa3b
 801940c:	0801a868 	.word	0x0801a868
 8019410:	3f317180 	.word	0x3f317180
 8019414:	3717f7d1 	.word	0x3717f7d1
 8019418:	7149f2ca 	.word	0x7149f2ca

0801941c <with_errnof>:
 801941c:	b570      	push	{r4, r5, r6, lr}
 801941e:	000d      	movs	r5, r1
 8019420:	1c04      	adds	r4, r0, #0
 8019422:	f7fd fb67 	bl	8016af4 <__errno>
 8019426:	6005      	str	r5, [r0, #0]
 8019428:	1c20      	adds	r0, r4, #0
 801942a:	bd70      	pop	{r4, r5, r6, pc}

0801942c <xflowf>:
 801942c:	b510      	push	{r4, lr}
 801942e:	1c0b      	adds	r3, r1, #0
 8019430:	2800      	cmp	r0, #0
 8019432:	d002      	beq.n	801943a <xflowf+0xe>
 8019434:	2380      	movs	r3, #128	@ 0x80
 8019436:	061b      	lsls	r3, r3, #24
 8019438:	18cb      	adds	r3, r1, r3
 801943a:	1c18      	adds	r0, r3, #0
 801943c:	f7e7 fd2e 	bl	8000e9c <__aeabi_fmul>
 8019440:	2122      	movs	r1, #34	@ 0x22
 8019442:	f7ff ffeb 	bl	801941c <with_errnof>
 8019446:	bd10      	pop	{r4, pc}

08019448 <__math_uflowf>:
 8019448:	2180      	movs	r1, #128	@ 0x80
 801944a:	b510      	push	{r4, lr}
 801944c:	0549      	lsls	r1, r1, #21
 801944e:	f7ff ffed 	bl	801942c <xflowf>
 8019452:	bd10      	pop	{r4, pc}

08019454 <__math_oflowf>:
 8019454:	21e0      	movs	r1, #224	@ 0xe0
 8019456:	b510      	push	{r4, lr}
 8019458:	05c9      	lsls	r1, r1, #23
 801945a:	f7ff ffe7 	bl	801942c <xflowf>
 801945e:	bd10      	pop	{r4, pc}

08019460 <__ieee754_log>:
 8019460:	2380      	movs	r3, #128	@ 0x80
 8019462:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019464:	035b      	lsls	r3, r3, #13
 8019466:	000e      	movs	r6, r1
 8019468:	b08d      	sub	sp, #52	@ 0x34
 801946a:	4299      	cmp	r1, r3
 801946c:	da23      	bge.n	80194b6 <__ieee754_log+0x56>
 801946e:	004b      	lsls	r3, r1, #1
 8019470:	085b      	lsrs	r3, r3, #1
 8019472:	4303      	orrs	r3, r0
 8019474:	d107      	bne.n	8019486 <__ieee754_log+0x26>
 8019476:	2200      	movs	r2, #0
 8019478:	2300      	movs	r3, #0
 801947a:	2000      	movs	r0, #0
 801947c:	49b4      	ldr	r1, [pc, #720]	@ (8019750 <__ieee754_log+0x2f0>)
 801947e:	f7e8 fc17 	bl	8001cb0 <__aeabi_ddiv>
 8019482:	b00d      	add	sp, #52	@ 0x34
 8019484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019486:	2900      	cmp	r1, #0
 8019488:	da06      	bge.n	8019498 <__ieee754_log+0x38>
 801948a:	0002      	movs	r2, r0
 801948c:	000b      	movs	r3, r1
 801948e:	f7e9 fb1b 	bl	8002ac8 <__aeabi_dsub>
 8019492:	2200      	movs	r2, #0
 8019494:	2300      	movs	r3, #0
 8019496:	e7f2      	b.n	801947e <__ieee754_log+0x1e>
 8019498:	4bae      	ldr	r3, [pc, #696]	@ (8019754 <__ieee754_log+0x2f4>)
 801949a:	2200      	movs	r2, #0
 801949c:	f7e9 f84c 	bl	8002538 <__aeabi_dmul>
 80194a0:	2336      	movs	r3, #54	@ 0x36
 80194a2:	000e      	movs	r6, r1
 80194a4:	425b      	negs	r3, r3
 80194a6:	4aac      	ldr	r2, [pc, #688]	@ (8019758 <__ieee754_log+0x2f8>)
 80194a8:	4296      	cmp	r6, r2
 80194aa:	dd06      	ble.n	80194ba <__ieee754_log+0x5a>
 80194ac:	0002      	movs	r2, r0
 80194ae:	000b      	movs	r3, r1
 80194b0:	f7e8 f89a 	bl	80015e8 <__aeabi_dadd>
 80194b4:	e7e5      	b.n	8019482 <__ieee754_log+0x22>
 80194b6:	2300      	movs	r3, #0
 80194b8:	e7f5      	b.n	80194a6 <__ieee754_log+0x46>
 80194ba:	4ca8      	ldr	r4, [pc, #672]	@ (801975c <__ieee754_log+0x2fc>)
 80194bc:	1532      	asrs	r2, r6, #20
 80194be:	1912      	adds	r2, r2, r4
 80194c0:	0336      	lsls	r6, r6, #12
 80194c2:	4ca7      	ldr	r4, [pc, #668]	@ (8019760 <__ieee754_log+0x300>)
 80194c4:	18d2      	adds	r2, r2, r3
 80194c6:	0b33      	lsrs	r3, r6, #12
 80194c8:	9302      	str	r3, [sp, #8]
 80194ca:	191b      	adds	r3, r3, r4
 80194cc:	2480      	movs	r4, #128	@ 0x80
 80194ce:	0364      	lsls	r4, r4, #13
 80194d0:	4023      	ands	r3, r4
 80194d2:	4ca4      	ldr	r4, [pc, #656]	@ (8019764 <__ieee754_log+0x304>)
 80194d4:	9d02      	ldr	r5, [sp, #8]
 80194d6:	405c      	eors	r4, r3
 80194d8:	151b      	asrs	r3, r3, #20
 80194da:	189b      	adds	r3, r3, r2
 80194dc:	4325      	orrs	r5, r4
 80194de:	2200      	movs	r2, #0
 80194e0:	9300      	str	r3, [sp, #0]
 80194e2:	0029      	movs	r1, r5
 80194e4:	4b9f      	ldr	r3, [pc, #636]	@ (8019764 <__ieee754_log+0x304>)
 80194e6:	f7e9 faef 	bl	8002ac8 <__aeabi_dsub>
 80194ea:	9b02      	ldr	r3, [sp, #8]
 80194ec:	0006      	movs	r6, r0
 80194ee:	3302      	adds	r3, #2
 80194f0:	031b      	lsls	r3, r3, #12
 80194f2:	000f      	movs	r7, r1
 80194f4:	2200      	movs	r2, #0
 80194f6:	0b1b      	lsrs	r3, r3, #12
 80194f8:	2b02      	cmp	r3, #2
 80194fa:	dc64      	bgt.n	80195c6 <__ieee754_log+0x166>
 80194fc:	2300      	movs	r3, #0
 80194fe:	f7e6 ffa5 	bl	800044c <__aeabi_dcmpeq>
 8019502:	2800      	cmp	r0, #0
 8019504:	d019      	beq.n	801953a <__ieee754_log+0xda>
 8019506:	9b00      	ldr	r3, [sp, #0]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d100      	bne.n	801950e <__ieee754_log+0xae>
 801950c:	e11c      	b.n	8019748 <__ieee754_log+0x2e8>
 801950e:	0018      	movs	r0, r3
 8019510:	f7e9 fed4 	bl	80032bc <__aeabi_i2d>
 8019514:	4a94      	ldr	r2, [pc, #592]	@ (8019768 <__ieee754_log+0x308>)
 8019516:	4b95      	ldr	r3, [pc, #596]	@ (801976c <__ieee754_log+0x30c>)
 8019518:	0004      	movs	r4, r0
 801951a:	000d      	movs	r5, r1
 801951c:	f7e9 f80c 	bl	8002538 <__aeabi_dmul>
 8019520:	4a93      	ldr	r2, [pc, #588]	@ (8019770 <__ieee754_log+0x310>)
 8019522:	0006      	movs	r6, r0
 8019524:	000f      	movs	r7, r1
 8019526:	4b93      	ldr	r3, [pc, #588]	@ (8019774 <__ieee754_log+0x314>)
 8019528:	0020      	movs	r0, r4
 801952a:	0029      	movs	r1, r5
 801952c:	f7e9 f804 	bl	8002538 <__aeabi_dmul>
 8019530:	0002      	movs	r2, r0
 8019532:	000b      	movs	r3, r1
 8019534:	0030      	movs	r0, r6
 8019536:	0039      	movs	r1, r7
 8019538:	e7ba      	b.n	80194b0 <__ieee754_log+0x50>
 801953a:	4a8f      	ldr	r2, [pc, #572]	@ (8019778 <__ieee754_log+0x318>)
 801953c:	4b8f      	ldr	r3, [pc, #572]	@ (801977c <__ieee754_log+0x31c>)
 801953e:	0030      	movs	r0, r6
 8019540:	0039      	movs	r1, r7
 8019542:	f7e8 fff9 	bl	8002538 <__aeabi_dmul>
 8019546:	0002      	movs	r2, r0
 8019548:	000b      	movs	r3, r1
 801954a:	2000      	movs	r0, #0
 801954c:	498c      	ldr	r1, [pc, #560]	@ (8019780 <__ieee754_log+0x320>)
 801954e:	f7e9 fabb 	bl	8002ac8 <__aeabi_dsub>
 8019552:	0032      	movs	r2, r6
 8019554:	0004      	movs	r4, r0
 8019556:	000d      	movs	r5, r1
 8019558:	003b      	movs	r3, r7
 801955a:	0030      	movs	r0, r6
 801955c:	0039      	movs	r1, r7
 801955e:	f7e8 ffeb 	bl	8002538 <__aeabi_dmul>
 8019562:	000b      	movs	r3, r1
 8019564:	0002      	movs	r2, r0
 8019566:	0029      	movs	r1, r5
 8019568:	0020      	movs	r0, r4
 801956a:	f7e8 ffe5 	bl	8002538 <__aeabi_dmul>
 801956e:	9b00      	ldr	r3, [sp, #0]
 8019570:	9002      	str	r0, [sp, #8]
 8019572:	9103      	str	r1, [sp, #12]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d106      	bne.n	8019586 <__ieee754_log+0x126>
 8019578:	0002      	movs	r2, r0
 801957a:	000b      	movs	r3, r1
 801957c:	0030      	movs	r0, r6
 801957e:	0039      	movs	r1, r7
 8019580:	f7e9 faa2 	bl	8002ac8 <__aeabi_dsub>
 8019584:	e77d      	b.n	8019482 <__ieee754_log+0x22>
 8019586:	9800      	ldr	r0, [sp, #0]
 8019588:	f7e9 fe98 	bl	80032bc <__aeabi_i2d>
 801958c:	4a76      	ldr	r2, [pc, #472]	@ (8019768 <__ieee754_log+0x308>)
 801958e:	4b77      	ldr	r3, [pc, #476]	@ (801976c <__ieee754_log+0x30c>)
 8019590:	0004      	movs	r4, r0
 8019592:	000d      	movs	r5, r1
 8019594:	f7e8 ffd0 	bl	8002538 <__aeabi_dmul>
 8019598:	4a75      	ldr	r2, [pc, #468]	@ (8019770 <__ieee754_log+0x310>)
 801959a:	9000      	str	r0, [sp, #0]
 801959c:	9101      	str	r1, [sp, #4]
 801959e:	4b75      	ldr	r3, [pc, #468]	@ (8019774 <__ieee754_log+0x314>)
 80195a0:	0020      	movs	r0, r4
 80195a2:	0029      	movs	r1, r5
 80195a4:	f7e8 ffc8 	bl	8002538 <__aeabi_dmul>
 80195a8:	0002      	movs	r2, r0
 80195aa:	000b      	movs	r3, r1
 80195ac:	9802      	ldr	r0, [sp, #8]
 80195ae:	9903      	ldr	r1, [sp, #12]
 80195b0:	f7e9 fa8a 	bl	8002ac8 <__aeabi_dsub>
 80195b4:	0032      	movs	r2, r6
 80195b6:	003b      	movs	r3, r7
 80195b8:	f7e9 fa86 	bl	8002ac8 <__aeabi_dsub>
 80195bc:	0002      	movs	r2, r0
 80195be:	000b      	movs	r3, r1
 80195c0:	9800      	ldr	r0, [sp, #0]
 80195c2:	9901      	ldr	r1, [sp, #4]
 80195c4:	e7dc      	b.n	8019580 <__ieee754_log+0x120>
 80195c6:	2380      	movs	r3, #128	@ 0x80
 80195c8:	05db      	lsls	r3, r3, #23
 80195ca:	f7e8 f80d 	bl	80015e8 <__aeabi_dadd>
 80195ce:	0002      	movs	r2, r0
 80195d0:	000b      	movs	r3, r1
 80195d2:	0030      	movs	r0, r6
 80195d4:	0039      	movs	r1, r7
 80195d6:	f7e8 fb6b 	bl	8001cb0 <__aeabi_ddiv>
 80195da:	9004      	str	r0, [sp, #16]
 80195dc:	9105      	str	r1, [sp, #20]
 80195de:	9800      	ldr	r0, [sp, #0]
 80195e0:	f7e9 fe6c 	bl	80032bc <__aeabi_i2d>
 80195e4:	9a04      	ldr	r2, [sp, #16]
 80195e6:	9b05      	ldr	r3, [sp, #20]
 80195e8:	9006      	str	r0, [sp, #24]
 80195ea:	9107      	str	r1, [sp, #28]
 80195ec:	0010      	movs	r0, r2
 80195ee:	0019      	movs	r1, r3
 80195f0:	f7e8 ffa2 	bl	8002538 <__aeabi_dmul>
 80195f4:	4a63      	ldr	r2, [pc, #396]	@ (8019784 <__ieee754_log+0x324>)
 80195f6:	9b02      	ldr	r3, [sp, #8]
 80195f8:	4694      	mov	ip, r2
 80195fa:	4463      	add	r3, ip
 80195fc:	0002      	movs	r2, r0
 80195fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019600:	000b      	movs	r3, r1
 8019602:	9008      	str	r0, [sp, #32]
 8019604:	9109      	str	r1, [sp, #36]	@ 0x24
 8019606:	f7e8 ff97 	bl	8002538 <__aeabi_dmul>
 801960a:	0004      	movs	r4, r0
 801960c:	000d      	movs	r5, r1
 801960e:	4a5e      	ldr	r2, [pc, #376]	@ (8019788 <__ieee754_log+0x328>)
 8019610:	4b5e      	ldr	r3, [pc, #376]	@ (801978c <__ieee754_log+0x32c>)
 8019612:	f7e8 ff91 	bl	8002538 <__aeabi_dmul>
 8019616:	4a5e      	ldr	r2, [pc, #376]	@ (8019790 <__ieee754_log+0x330>)
 8019618:	4b5e      	ldr	r3, [pc, #376]	@ (8019794 <__ieee754_log+0x334>)
 801961a:	f7e7 ffe5 	bl	80015e8 <__aeabi_dadd>
 801961e:	0022      	movs	r2, r4
 8019620:	002b      	movs	r3, r5
 8019622:	f7e8 ff89 	bl	8002538 <__aeabi_dmul>
 8019626:	4a5c      	ldr	r2, [pc, #368]	@ (8019798 <__ieee754_log+0x338>)
 8019628:	4b5c      	ldr	r3, [pc, #368]	@ (801979c <__ieee754_log+0x33c>)
 801962a:	f7e7 ffdd 	bl	80015e8 <__aeabi_dadd>
 801962e:	0022      	movs	r2, r4
 8019630:	002b      	movs	r3, r5
 8019632:	f7e8 ff81 	bl	8002538 <__aeabi_dmul>
 8019636:	4a5a      	ldr	r2, [pc, #360]	@ (80197a0 <__ieee754_log+0x340>)
 8019638:	4b5a      	ldr	r3, [pc, #360]	@ (80197a4 <__ieee754_log+0x344>)
 801963a:	f7e7 ffd5 	bl	80015e8 <__aeabi_dadd>
 801963e:	9a08      	ldr	r2, [sp, #32]
 8019640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019642:	f7e8 ff79 	bl	8002538 <__aeabi_dmul>
 8019646:	4a58      	ldr	r2, [pc, #352]	@ (80197a8 <__ieee754_log+0x348>)
 8019648:	9008      	str	r0, [sp, #32]
 801964a:	9109      	str	r1, [sp, #36]	@ 0x24
 801964c:	4b57      	ldr	r3, [pc, #348]	@ (80197ac <__ieee754_log+0x34c>)
 801964e:	0020      	movs	r0, r4
 8019650:	0029      	movs	r1, r5
 8019652:	f7e8 ff71 	bl	8002538 <__aeabi_dmul>
 8019656:	4a56      	ldr	r2, [pc, #344]	@ (80197b0 <__ieee754_log+0x350>)
 8019658:	4b56      	ldr	r3, [pc, #344]	@ (80197b4 <__ieee754_log+0x354>)
 801965a:	f7e7 ffc5 	bl	80015e8 <__aeabi_dadd>
 801965e:	0022      	movs	r2, r4
 8019660:	002b      	movs	r3, r5
 8019662:	f7e8 ff69 	bl	8002538 <__aeabi_dmul>
 8019666:	4a54      	ldr	r2, [pc, #336]	@ (80197b8 <__ieee754_log+0x358>)
 8019668:	4b54      	ldr	r3, [pc, #336]	@ (80197bc <__ieee754_log+0x35c>)
 801966a:	f7e7 ffbd 	bl	80015e8 <__aeabi_dadd>
 801966e:	0022      	movs	r2, r4
 8019670:	002b      	movs	r3, r5
 8019672:	f7e8 ff61 	bl	8002538 <__aeabi_dmul>
 8019676:	0002      	movs	r2, r0
 8019678:	000b      	movs	r3, r1
 801967a:	9808      	ldr	r0, [sp, #32]
 801967c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801967e:	f7e7 ffb3 	bl	80015e8 <__aeabi_dadd>
 8019682:	9a02      	ldr	r2, [sp, #8]
 8019684:	4b4e      	ldr	r3, [pc, #312]	@ (80197c0 <__ieee754_log+0x360>)
 8019686:	0004      	movs	r4, r0
 8019688:	1a9b      	subs	r3, r3, r2
 801968a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801968c:	000d      	movs	r5, r1
 801968e:	4313      	orrs	r3, r2
 8019690:	2b00      	cmp	r3, #0
 8019692:	dd34      	ble.n	80196fe <__ieee754_log+0x29e>
 8019694:	2200      	movs	r2, #0
 8019696:	4b3a      	ldr	r3, [pc, #232]	@ (8019780 <__ieee754_log+0x320>)
 8019698:	0030      	movs	r0, r6
 801969a:	0039      	movs	r1, r7
 801969c:	f7e8 ff4c 	bl	8002538 <__aeabi_dmul>
 80196a0:	0032      	movs	r2, r6
 80196a2:	003b      	movs	r3, r7
 80196a4:	f7e8 ff48 	bl	8002538 <__aeabi_dmul>
 80196a8:	0002      	movs	r2, r0
 80196aa:	000b      	movs	r3, r1
 80196ac:	9002      	str	r0, [sp, #8]
 80196ae:	9103      	str	r1, [sp, #12]
 80196b0:	0020      	movs	r0, r4
 80196b2:	0029      	movs	r1, r5
 80196b4:	f7e7 ff98 	bl	80015e8 <__aeabi_dadd>
 80196b8:	9a04      	ldr	r2, [sp, #16]
 80196ba:	9b05      	ldr	r3, [sp, #20]
 80196bc:	f7e8 ff3c 	bl	8002538 <__aeabi_dmul>
 80196c0:	9b00      	ldr	r3, [sp, #0]
 80196c2:	0004      	movs	r4, r0
 80196c4:	000d      	movs	r5, r1
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d106      	bne.n	80196d8 <__ieee754_log+0x278>
 80196ca:	0002      	movs	r2, r0
 80196cc:	000b      	movs	r3, r1
 80196ce:	9802      	ldr	r0, [sp, #8]
 80196d0:	9903      	ldr	r1, [sp, #12]
 80196d2:	f7e9 f9f9 	bl	8002ac8 <__aeabi_dsub>
 80196d6:	e74f      	b.n	8019578 <__ieee754_log+0x118>
 80196d8:	4a23      	ldr	r2, [pc, #140]	@ (8019768 <__ieee754_log+0x308>)
 80196da:	4b24      	ldr	r3, [pc, #144]	@ (801976c <__ieee754_log+0x30c>)
 80196dc:	9806      	ldr	r0, [sp, #24]
 80196de:	9907      	ldr	r1, [sp, #28]
 80196e0:	f7e8 ff2a 	bl	8002538 <__aeabi_dmul>
 80196e4:	4a22      	ldr	r2, [pc, #136]	@ (8019770 <__ieee754_log+0x310>)
 80196e6:	9000      	str	r0, [sp, #0]
 80196e8:	9101      	str	r1, [sp, #4]
 80196ea:	9806      	ldr	r0, [sp, #24]
 80196ec:	9907      	ldr	r1, [sp, #28]
 80196ee:	4b21      	ldr	r3, [pc, #132]	@ (8019774 <__ieee754_log+0x314>)
 80196f0:	f7e8 ff22 	bl	8002538 <__aeabi_dmul>
 80196f4:	0022      	movs	r2, r4
 80196f6:	002b      	movs	r3, r5
 80196f8:	f7e7 ff76 	bl	80015e8 <__aeabi_dadd>
 80196fc:	e754      	b.n	80195a8 <__ieee754_log+0x148>
 80196fe:	0002      	movs	r2, r0
 8019700:	000b      	movs	r3, r1
 8019702:	0030      	movs	r0, r6
 8019704:	0039      	movs	r1, r7
 8019706:	f7e9 f9df 	bl	8002ac8 <__aeabi_dsub>
 801970a:	9a04      	ldr	r2, [sp, #16]
 801970c:	9b05      	ldr	r3, [sp, #20]
 801970e:	f7e8 ff13 	bl	8002538 <__aeabi_dmul>
 8019712:	9b00      	ldr	r3, [sp, #0]
 8019714:	0004      	movs	r4, r0
 8019716:	000d      	movs	r5, r1
 8019718:	2b00      	cmp	r3, #0
 801971a:	d102      	bne.n	8019722 <__ieee754_log+0x2c2>
 801971c:	0002      	movs	r2, r0
 801971e:	000b      	movs	r3, r1
 8019720:	e72c      	b.n	801957c <__ieee754_log+0x11c>
 8019722:	4a11      	ldr	r2, [pc, #68]	@ (8019768 <__ieee754_log+0x308>)
 8019724:	4b11      	ldr	r3, [pc, #68]	@ (801976c <__ieee754_log+0x30c>)
 8019726:	9806      	ldr	r0, [sp, #24]
 8019728:	9907      	ldr	r1, [sp, #28]
 801972a:	f7e8 ff05 	bl	8002538 <__aeabi_dmul>
 801972e:	4a10      	ldr	r2, [pc, #64]	@ (8019770 <__ieee754_log+0x310>)
 8019730:	9000      	str	r0, [sp, #0]
 8019732:	9101      	str	r1, [sp, #4]
 8019734:	9806      	ldr	r0, [sp, #24]
 8019736:	9907      	ldr	r1, [sp, #28]
 8019738:	4b0e      	ldr	r3, [pc, #56]	@ (8019774 <__ieee754_log+0x314>)
 801973a:	f7e8 fefd 	bl	8002538 <__aeabi_dmul>
 801973e:	0002      	movs	r2, r0
 8019740:	000b      	movs	r3, r1
 8019742:	0020      	movs	r0, r4
 8019744:	0029      	movs	r1, r5
 8019746:	e733      	b.n	80195b0 <__ieee754_log+0x150>
 8019748:	2000      	movs	r0, #0
 801974a:	2100      	movs	r1, #0
 801974c:	e699      	b.n	8019482 <__ieee754_log+0x22>
 801974e:	46c0      	nop			@ (mov r8, r8)
 8019750:	c3500000 	.word	0xc3500000
 8019754:	43500000 	.word	0x43500000
 8019758:	7fefffff 	.word	0x7fefffff
 801975c:	fffffc01 	.word	0xfffffc01
 8019760:	00095f64 	.word	0x00095f64
 8019764:	3ff00000 	.word	0x3ff00000
 8019768:	fee00000 	.word	0xfee00000
 801976c:	3fe62e42 	.word	0x3fe62e42
 8019770:	35793c76 	.word	0x35793c76
 8019774:	3dea39ef 	.word	0x3dea39ef
 8019778:	55555555 	.word	0x55555555
 801977c:	3fd55555 	.word	0x3fd55555
 8019780:	3fe00000 	.word	0x3fe00000
 8019784:	fff9eb86 	.word	0xfff9eb86
 8019788:	df3e5244 	.word	0xdf3e5244
 801978c:	3fc2f112 	.word	0x3fc2f112
 8019790:	96cb03de 	.word	0x96cb03de
 8019794:	3fc74664 	.word	0x3fc74664
 8019798:	94229359 	.word	0x94229359
 801979c:	3fd24924 	.word	0x3fd24924
 80197a0:	55555593 	.word	0x55555593
 80197a4:	3fe55555 	.word	0x3fe55555
 80197a8:	d078c69f 	.word	0xd078c69f
 80197ac:	3fc39a09 	.word	0x3fc39a09
 80197b0:	1d8e78af 	.word	0x1d8e78af
 80197b4:	3fcc71c5 	.word	0x3fcc71c5
 80197b8:	9997fa04 	.word	0x9997fa04
 80197bc:	3fd99999 	.word	0x3fd99999
 80197c0:	0006b851 	.word	0x0006b851

080197c4 <_init>:
 80197c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197c6:	46c0      	nop			@ (mov r8, r8)
 80197c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197ca:	bc08      	pop	{r3}
 80197cc:	469e      	mov	lr, r3
 80197ce:	4770      	bx	lr

080197d0 <_fini>:
 80197d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197d2:	46c0      	nop			@ (mov r8, r8)
 80197d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197d6:	bc08      	pop	{r3}
 80197d8:	469e      	mov	lr, r3
 80197da:	4770      	bx	lr
