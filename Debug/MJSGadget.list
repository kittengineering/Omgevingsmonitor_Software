
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab5c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001238  0801ac20  0801ac20  0001bc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be58  0801be58  0001d400  2**0
                  CONTENTS
  4 .ARM          00000008  0801be58  0801be58  0001ce58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be60  0801be60  0001d400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be60  0801be60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801be64  0801be64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000400  20000000  0801be68  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b14  20000400  0801c268  0001d400  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20003f14  0801c268  0001df14  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001d400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b877  00000000  00000000  0001d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000802e  00000000  00000000  00048c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024a8  00000000  00000000  00050cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001bde  00000000  00000000  00053178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bd1  00000000  00000000  00054d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039c17  00000000  00000000  00075927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d3f7  00000000  00000000  000af53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c935  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009738  00000000  00000000  0014c978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001560b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000400 	.word	0x20000400
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801ac04 	.word	0x0801ac04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000404 	.word	0x20000404
 8000104:	0801ac04 	.word	0x0801ac04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801b720 	.word	0x0801b720
 8000d08:	0801b760 	.word	0x0801b760
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801b79c 	.word	0x0801b79c
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003560:	f007 fc4a 	bl	800adf8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003564:	2316      	movs	r3, #22
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e015      	b.n	800359a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2416      	movs	r4, #22
 8003574:	193b      	adds	r3, r7, r4
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2000      	movs	r0, #0
 8003582:	f007 fca1 	bl	800aec8 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800358e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003590:	193b      	adds	r3, r7, r4
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	3201      	adds	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	2316      	movs	r3, #22
 800359c:	18fa      	adds	r2, r7, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e2      	bcc.n	800356e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80035a8:	f007 fc54 	bl	800ae54 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	2000041c 	.word	0x2000041c

080035bc <WriteUint8ArrayEepromSafe>:

uint32_t WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	0019      	movs	r1, r3
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ffb0 	bl	800354c <WriteUint8ArrayEeprom>
    }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e010      	b.n	8003630 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800360e:	2016      	movs	r0, #22
 8003610:	183b      	adds	r3, r7, r0
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	0019      	movs	r1, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	3201      	adds	r2, #1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2316      	movs	r3, #22
 8003632:	18fa      	adds	r2, r7, r3
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e7      	bcc.n	800360e <ReadUint8ArrayEEprom+0x18>
    }
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003656:	f007 fbcf 	bl	800adf8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800365a:	230e      	movs	r3, #14
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e00c      	b.n	800367e <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003664:	240e      	movs	r4, #14
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f007 fbfe 	bl	800ae70 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003674:	193b      	adds	r3, r7, r4
 8003676:	193a      	adds	r2, r7, r4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	3204      	adds	r2, #4
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	230e      	movs	r3, #14
 8003680:	18fa      	adds	r2, r7, r3
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3eb      	bcc.n	8003664 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800368c:	f007 fbe2 	bl	800ae54 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b005      	add	sp, #20
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800369c:	f001 feda 	bl	8005454 <ReadBatteryVoltage>
 80036a0:	1c02      	adds	r2, r0, #0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <setCharges+0x20>)
 80036a4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80036a6:	f001 ff37 	bl	8005518 <ReadSolarVoltage>
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <setCharges+0x24>)
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	20000540 	.word	0x20000540
 80036bc:	20000544 	.word	0x20000544

080036c0 <setMeasurement>:

void setMeasurement(float temp, float humid, uint16_t voc){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036ce:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <setMeasurement+0x2c>)
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <setMeasurement+0x30>)
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <setMeasurement+0x34>)
 80036dc:	1dba      	adds	r2, r7, #6
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	801a      	strh	r2, [r3, #0]
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	20000538 	.word	0x20000538
 80036f0:	2000053c 	.word	0x2000053c
 80036f4:	20000548 	.word	0x20000548

080036f8 <setMic>:
void setMic(float dB){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <setMic+0x18>)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	2000054c 	.word	0x2000054c

08003714 <SetConfigMode>:

void SetConfigMode(){
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003718:	4b02      	ldr	r3, [pc, #8]	@ (8003724 <SetConfigMode+0x10>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	2000052a 	.word	0x2000052a

08003728 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 800372c:	f006 fb30 	bl	8009d90 <HAL_GetUIDw0>
 8003730:	0002      	movs	r2, r0
 8003732:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <ESP_GetUID+0x28>)
 8003734:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003736:	f006 fb35 	bl	8009da4 <HAL_GetUIDw1>
 800373a:	0002      	movs	r2, r0
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <ESP_GetUID+0x28>)
 800373e:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003740:	f006 fb3a 	bl	8009db8 <HAL_GetUIDw2>
 8003744:	0002      	movs	r2, r0
 8003746:	4b02      	ldr	r3, [pc, #8]	@ (8003750 <ESP_GetUID+0x28>)
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	2000052c 	.word	0x2000052c

08003754 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <ESP_Init+0x20>)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003762:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <ESP_Init+0x24>)
 8003764:	2202      	movs	r2, #2
 8003766:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003768:	f7ff ffde 	bl	8003728 <ESP_GetUID>
}
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000420 	.word	0x20000420
 8003778:	20000059 	.word	0x20000059

0800377c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	000a      	movs	r2, r1
 8003786:	1cbb      	adds	r3, r7, #2
 8003788:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800378a:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <ESP_Send+0x48>)
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	250f      	movs	r5, #15
 8003790:	197c      	adds	r4, r7, r5
 8003792:	1cbb      	adds	r3, r7, #2
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0019      	movs	r1, r3
 800379a:	f00d fe19 	bl	80113d0 <HAL_UART_Transmit_DMA>
 800379e:	0003      	movs	r3, r0
 80037a0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037a2:	197b      	adds	r3, r7, r5
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80037aa:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <ESP_Send+0x4c>)
 80037ac:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <ESP_Send+0x50>)
 80037ae:	0019      	movs	r1, r3
 80037b0:	2003      	movs	r0, #3
 80037b2:	f005 ff23 	bl	80095fc <CreateLine>
    return false;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <ESP_Send+0x40>
  }
  return true;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}
 80037c4:	20000420 	.word	0x20000420
 80037c8:	0801ac20 	.word	0x0801ac20
 80037cc:	0801ac40 	.word	0x0801ac40

080037d0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037d0:	b5b0      	push	{r4, r5, r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	000a      	movs	r2, r1
 80037da:	1cfb      	adds	r3, r7, #3
 80037dc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80037de:	4b12      	ldr	r3, [pc, #72]	@ (8003828 <ESP_Receive+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <ESP_Receive+0x5c>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	1cfb      	adds	r3, r7, #3
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	250f      	movs	r5, #15
 80037f0:	197c      	adds	r4, r7, r5
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0019      	movs	r1, r3
 80037f6:	f00d fe7b 	bl	80114f0 <HAL_UART_Receive_DMA>
 80037fa:	0003      	movs	r3, r0
 80037fc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037fe:	197b      	adds	r3, r7, r5
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <ESP_Receive+0x60>)
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <ESP_Receive+0x64>)
 800380a:	0019      	movs	r1, r3
 800380c:	2003      	movs	r0, #3
 800380e:	f005 fef5 	bl	80095fc <CreateLine>
    RxComplete = true;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <ESP_Receive+0x58>)
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
    return false;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <ESP_Receive+0x4e>
  }
  return true;
 800381c:	2301      	movs	r3, #1
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bdb0      	pop	{r4, r5, r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000424 	.word	0x20000424
 800382c:	20000420 	.word	0x20000420
 8003830:	0801ac44 	.word	0x0801ac44
 8003834:	0801ac40 	.word	0x0801ac40

08003838 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003840:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <HAL_UART_RxCpltCallback+0x2c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d108      	bne.n	800385c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_UART_RxCpltCallback+0x30>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003850:	4a06      	ldr	r2, [pc, #24]	@ (800386c <HAL_UART_RxCpltCallback+0x34>)
 8003852:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <HAL_UART_RxCpltCallback+0x38>)
 8003854:	0019      	movs	r1, r3
 8003856:	2003      	movs	r0, #3
 8003858:	f005 fed0 	bl	80095fc <CreateLine>
  }
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000420 	.word	0x20000420
 8003868:	20000424 	.word	0x20000424
 800386c:	0801ac64 	.word	0x0801ac64
 8003870:	0801ac40 	.word	0x0801ac40

08003874 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
    // Handle error
    //EspState = ESP_STATE_ERROR;
  }
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}

08003884 <CreateMessage>:
uint16_t CreateMessage(){
 8003884:	b5b0      	push	{r4, r5, r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 800388a:	250e      	movs	r5, #14
 800388c:	197b      	adds	r3, r7, r5
 800388e:	2200      	movs	r2, #0
 8003890:	801a      	strh	r2, [r3, #0]
  uint8_t sensorID[IdSize];
  setCharges();
 8003892:	f7ff ff01 	bl	8003698 <setCharges>
  ReadUint8ArrayEEprom(TempConfigAddr, sensorID, IdSize);
 8003896:	003b      	movs	r3, r7
 8003898:	4845      	ldr	r0, [pc, #276]	@ (80039b0 <CreateMessage+0x12c>)
 800389a:	220c      	movs	r2, #12
 800389c:	0019      	movs	r1, r3
 800389e:	f7ff feaa 	bl	80035f6 <ReadUint8ArrayEEprom>
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"graden\"", sensorID1, Temperature);
 80038a2:	4b44      	ldr	r3, [pc, #272]	@ (80039b4 <CreateMessage+0x130>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1c18      	adds	r0, r3, #0
 80038a8:	f7ff fd5a 	bl	8003360 <__aeabi_f2d>
 80038ac:	0002      	movs	r2, r0
 80038ae:	000b      	movs	r3, r1
 80038b0:	4c41      	ldr	r4, [pc, #260]	@ (80039b8 <CreateMessage+0x134>)
 80038b2:	4942      	ldr	r1, [pc, #264]	@ (80039bc <CreateMessage+0x138>)
 80038b4:	4842      	ldr	r0, [pc, #264]	@ (80039c0 <CreateMessage+0x13c>)
 80038b6:	9200      	str	r2, [sp, #0]
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	0022      	movs	r2, r4
 80038bc:	f014 fa04 	bl	8017cc8 <siprintf>
  messageLength += strlen(messagePart1);
 80038c0:	4b3f      	ldr	r3, [pc, #252]	@ (80039c0 <CreateMessage+0x13c>)
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7fc fc20 	bl	8000108 <strlen>
 80038c8:	0003      	movs	r3, r0
 80038ca:	b299      	uxth	r1, r3
 80038cc:	197b      	adds	r3, r7, r5
 80038ce:	197a      	adds	r2, r7, r5
 80038d0:	8812      	ldrh	r2, [r2, #0]
 80038d2:	188a      	adds	r2, r1, r2
 80038d4:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"%%\"", sensorID2, Humidity);
 80038d6:	4b3b      	ldr	r3, [pc, #236]	@ (80039c4 <CreateMessage+0x140>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	1c18      	adds	r0, r3, #0
 80038dc:	f7ff fd40 	bl	8003360 <__aeabi_f2d>
 80038e0:	0002      	movs	r2, r0
 80038e2:	000b      	movs	r3, r1
 80038e4:	4c38      	ldr	r4, [pc, #224]	@ (80039c8 <CreateMessage+0x144>)
 80038e6:	4939      	ldr	r1, [pc, #228]	@ (80039cc <CreateMessage+0x148>)
 80038e8:	4839      	ldr	r0, [pc, #228]	@ (80039d0 <CreateMessage+0x14c>)
 80038ea:	9200      	str	r2, [sp, #0]
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	0022      	movs	r2, r4
 80038f0:	f014 f9ea 	bl	8017cc8 <siprintf>
  messageLength += strlen(messagePart2);
 80038f4:	4b36      	ldr	r3, [pc, #216]	@ (80039d0 <CreateMessage+0x14c>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fc fc06 	bl	8000108 <strlen>
 80038fc:	0003      	movs	r3, r0
 80038fe:	b299      	uxth	r1, r3
 8003900:	197b      	adds	r3, r7, r5
 8003902:	197a      	adds	r2, r7, r5
 8003904:	8812      	ldrh	r2, [r2, #0]
 8003906:	188a      	adds	r2, r1, r2
 8003908:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"dBC\"", sensorID3, dBC);
 800390a:	4b32      	ldr	r3, [pc, #200]	@ (80039d4 <CreateMessage+0x150>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	1c18      	adds	r0, r3, #0
 8003910:	f7ff fd26 	bl	8003360 <__aeabi_f2d>
 8003914:	0002      	movs	r2, r0
 8003916:	000b      	movs	r3, r1
 8003918:	4c2f      	ldr	r4, [pc, #188]	@ (80039d8 <CreateMessage+0x154>)
 800391a:	4930      	ldr	r1, [pc, #192]	@ (80039dc <CreateMessage+0x158>)
 800391c:	4830      	ldr	r0, [pc, #192]	@ (80039e0 <CreateMessage+0x15c>)
 800391e:	9200      	str	r2, [sp, #0]
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	0022      	movs	r2, r4
 8003924:	f014 f9d0 	bl	8017cc8 <siprintf>
  messageLength += strlen(messagePart3);
 8003928:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <CreateMessage+0x15c>)
 800392a:	0018      	movs	r0, r3
 800392c:	f7fc fbec 	bl	8000108 <strlen>
 8003930:	0003      	movs	r3, r0
 8003932:	b299      	uxth	r1, r3
 8003934:	197b      	adds	r3, r7, r5
 8003936:	197a      	adds	r2, r7, r5
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	188a      	adds	r2, r1, r2
 800393c:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d, \"unit\": \"VOC index\"", sensorID4, VOCIndex);
 800393e:	4b29      	ldr	r3, [pc, #164]	@ (80039e4 <CreateMessage+0x160>)
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	4a29      	ldr	r2, [pc, #164]	@ (80039e8 <CreateMessage+0x164>)
 8003944:	4929      	ldr	r1, [pc, #164]	@ (80039ec <CreateMessage+0x168>)
 8003946:	482a      	ldr	r0, [pc, #168]	@ (80039f0 <CreateMessage+0x16c>)
 8003948:	f014 f9be 	bl	8017cc8 <siprintf>
  messageLength += strlen(messagePart4);
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <CreateMessage+0x16c>)
 800394e:	0018      	movs	r0, r3
 8003950:	f7fc fbda 	bl	8000108 <strlen>
 8003954:	0003      	movs	r3, r0
 8003956:	b299      	uxth	r1, r3
 8003958:	197b      	adds	r3, r7, r5
 800395a:	197a      	adds	r2, r7, r5
 800395c:	8812      	ldrh	r2, [r2, #0]
 800395e:	188a      	adds	r2, r1, r2
 8003960:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"Volt\"", sensorID5, batteryCharge);
 8003962:	4b24      	ldr	r3, [pc, #144]	@ (80039f4 <CreateMessage+0x170>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	1c18      	adds	r0, r3, #0
 8003968:	f7ff fcfa 	bl	8003360 <__aeabi_f2d>
 800396c:	0002      	movs	r2, r0
 800396e:	000b      	movs	r3, r1
 8003970:	4c21      	ldr	r4, [pc, #132]	@ (80039f8 <CreateMessage+0x174>)
 8003972:	4922      	ldr	r1, [pc, #136]	@ (80039fc <CreateMessage+0x178>)
 8003974:	4822      	ldr	r0, [pc, #136]	@ (8003a00 <CreateMessage+0x17c>)
 8003976:	9200      	str	r2, [sp, #0]
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	0022      	movs	r2, r4
 800397c:	f014 f9a4 	bl	8017cc8 <siprintf>
  messageLength += strlen(messagePart5);
 8003980:	4b1f      	ldr	r3, [pc, #124]	@ (8003a00 <CreateMessage+0x17c>)
 8003982:	0018      	movs	r0, r3
 8003984:	f7fc fbc0 	bl	8000108 <strlen>
 8003988:	0003      	movs	r3, r0
 800398a:	b299      	uxth	r1, r3
 800398c:	197b      	adds	r3, r7, r5
 800398e:	197a      	adds	r2, r7, r5
 8003990:	8812      	ldrh	r2, [r2, #0]
 8003992:	188a      	adds	r2, r1, r2
 8003994:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 8003996:	197b      	adds	r3, r7, r5
 8003998:	0029      	movs	r1, r5
 800399a:	197a      	adds	r2, r7, r5
 800399c:	8812      	ldrh	r2, [r2, #0]
 800399e:	3214      	adds	r2, #20
 80039a0:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	881b      	ldrh	r3, [r3, #0]
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bdb0      	pop	{r4, r5, r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	0808000c 	.word	0x0808000c
 80039b4:	20000538 	.word	0x20000538
 80039b8:	0801b800 	.word	0x0801b800
 80039bc:	0801ac70 	.word	0x0801ac70
 80039c0:	20000550 	.word	0x20000550
 80039c4:	2000053c 	.word	0x2000053c
 80039c8:	0801b81c 	.word	0x0801b81c
 80039cc:	0801acc8 	.word	0x0801acc8
 80039d0:	200005d0 	.word	0x200005d0
 80039d4:	2000054c 	.word	0x2000054c
 80039d8:	0801b838 	.word	0x0801b838
 80039dc:	0801ad1c 	.word	0x0801ad1c
 80039e0:	20000650 	.word	0x20000650
 80039e4:	20000548 	.word	0x20000548
 80039e8:	0801b854 	.word	0x0801b854
 80039ec:	0801ad74 	.word	0x0801ad74
 80039f0:	200006d0 	.word	0x200006d0
 80039f4:	20000540 	.word	0x20000540
 80039f8:	0801b870 	.word	0x0801b870
 80039fc:	0801adcc 	.word	0x0801adcc
 8003a00:	20000750 	.word	0x20000750

08003a04 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	009a      	lsls	r2, r3, #2
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <SetCommandBuffer+0x24>)
 8003a14:	0018      	movs	r0, r3
 8003a16:	f014 fa11 	bl	8017e3c <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003a1a:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <SetCommandBuffer+0x28>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
}
 8003a20:	46c0      	nop			@ (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b002      	add	sp, #8
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200007e4 	.word	0x200007e4
 8003a2c:	200009e4 	.word	0x200009e4

08003a30 <StartProg>:
void StartProg(){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003a34:	2064      	movs	r0, #100	@ 0x64
 8003a36:	f006 f987 	bl	8009d48 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <StartProg+0x60>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2101      	movs	r1, #1
 8003a40:	0018      	movs	r0, r3
 8003a42:	f007 fd16 	bl	800b472 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003a46:	2064      	movs	r0, #100	@ 0x64
 8003a48:	f006 f97e 	bl	8009d48 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003a4c:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <StartProg+0x60>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2102      	movs	r1, #2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f007 fd0d 	bl	800b472 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a58:	23fa      	movs	r3, #250	@ 0xfa
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f006 f973 	bl	8009d48 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a62:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <StartProg+0x60>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	2101      	movs	r1, #1
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f007 fd02 	bl	800b472 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a6e:	23fa      	movs	r3, #250	@ 0xfa
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	0018      	movs	r0, r3
 8003a74:	f006 f968 	bl	8009d48 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <StartProg+0x60>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f007 fcf7 	bl	800b472 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a84:	2028      	movs	r0, #40	@ 0x28
 8003a86:	f006 f95f 	bl	8009d48 <HAL_Delay>
}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	50001c00 	.word	0x50001c00

08003a94 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	46c6      	mov	lr, r8
 8003a98:	b500      	push	{lr}
 8003a9a:	b09a      	sub	sp, #104	@ 0x68
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	61f8      	str	r0, [r7, #28]
 8003aa0:	0008      	movs	r0, r1
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	261a      	movs	r6, #26
 8003aa6:	19bb      	adds	r3, r7, r6
 8003aa8:	1c02      	adds	r2, r0, #0
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	2319      	movs	r3, #25
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	1c0a      	adds	r2, r1, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	466b      	mov	r3, sp
 8003ab6:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	1e5a      	subs	r2, r3, #1
 8003ac0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	60ba      	str	r2, [r7, #8]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	60fa      	str	r2, [r7, #12]
 8003aca:	68b8      	ldr	r0, [r7, #8]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	0002      	movs	r2, r0
 8003ad0:	0f52      	lsrs	r2, r2, #29
 8003ad2:	000e      	movs	r6, r1
 8003ad4:	00f6      	lsls	r6, r6, #3
 8003ad6:	617e      	str	r6, [r7, #20]
 8003ad8:	697e      	ldr	r6, [r7, #20]
 8003ada:	4316      	orrs	r6, r2
 8003adc:	617e      	str	r6, [r7, #20]
 8003ade:	0002      	movs	r2, r0
 8003ae0:	00d2      	lsls	r2, r2, #3
 8003ae2:	613a      	str	r2, [r7, #16]
 8003ae4:	001a      	movs	r2, r3
 8003ae6:	603a      	str	r2, [r7, #0]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	6838      	ldr	r0, [r7, #0]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	0002      	movs	r2, r0
 8003af2:	0f52      	lsrs	r2, r2, #29
 8003af4:	000e      	movs	r6, r1
 8003af6:	00f5      	lsls	r5, r6, #3
 8003af8:	4315      	orrs	r5, r2
 8003afa:	0002      	movs	r2, r0
 8003afc:	00d4      	lsls	r4, r2, #3
 8003afe:	3307      	adds	r3, #7
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	466a      	mov	r2, sp
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	469d      	mov	sp, r3
 8003b0a:	466b      	mov	r3, sp
 8003b0c:	3300      	adds	r3, #0
 8003b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003b10:	234f      	movs	r3, #79	@ 0x4f
 8003b12:	2118      	movs	r1, #24
 8003b14:	185b      	adds	r3, r3, r1
 8003b16:	19db      	adds	r3, r3, r7
 8003b18:	2203      	movs	r2, #3
 8003b1a:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003b1c:	234c      	movs	r3, #76	@ 0x4c
 8003b1e:	185b      	adds	r3, r3, r1
 8003b20:	19db      	adds	r3, r3, r7
 8003b22:	2200      	movs	r2, #0
 8003b24:	801a      	strh	r2, [r3, #0]
 8003b26:	e013      	b.n	8003b50 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003b28:	204c      	movs	r0, #76	@ 0x4c
 8003b2a:	2418      	movs	r4, #24
 8003b2c:	1903      	adds	r3, r0, r4
 8003b2e:	19db      	adds	r3, r3, r7
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	18d2      	adds	r2, r2, r3
 8003b36:	1903      	adds	r3, r0, r4
 8003b38:	19db      	adds	r3, r3, r7
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	7811      	ldrb	r1, [r2, #0]
 8003b3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b40:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003b42:	1903      	adds	r3, r0, r4
 8003b44:	19db      	adds	r3, r3, r7
 8003b46:	881a      	ldrh	r2, [r3, #0]
 8003b48:	1903      	adds	r3, r0, r4
 8003b4a:	19db      	adds	r3, r3, r7
 8003b4c:	3201      	adds	r2, #1
 8003b4e:	801a      	strh	r2, [r3, #0]
 8003b50:	234c      	movs	r3, #76	@ 0x4c
 8003b52:	2018      	movs	r0, #24
 8003b54:	181b      	adds	r3, r3, r0
 8003b56:	19da      	adds	r2, r3, r7
 8003b58:	211a      	movs	r1, #26
 8003b5a:	187b      	adds	r3, r7, r1
 8003b5c:	8812      	ldrh	r2, [r2, #0]
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3e1      	bcc.n	8003b28 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003b6e:	233f      	movs	r3, #63	@ 0x3f
 8003b70:	0006      	movs	r6, r0
 8003b72:	199b      	adds	r3, r3, r6
 8003b74:	19db      	adds	r3, r3, r7
 8003b76:	224e      	movs	r2, #78	@ 0x4e
 8003b78:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003b7a:	2530      	movs	r5, #48	@ 0x30
 8003b7c:	19ab      	adds	r3, r5, r6
 8003b7e:	19db      	adds	r3, r3, r7
 8003b80:	4a60      	ldr	r2, [pc, #384]	@ (8003d04 <ParseBuffer+0x270>)
 8003b82:	8811      	ldrh	r1, [r2, #0]
 8003b84:	8019      	strh	r1, [r3, #0]
 8003b86:	7892      	ldrb	r2, [r2, #2]
 8003b88:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b8a:	2328      	movs	r3, #40	@ 0x28
 8003b8c:	199b      	adds	r3, r3, r6
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	4a5d      	ldr	r2, [pc, #372]	@ (8003d08 <ParseBuffer+0x274>)
 8003b92:	6811      	ldr	r1, [r2, #0]
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	8892      	ldrh	r2, [r2, #4]
 8003b98:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	199b      	adds	r3, r3, r6
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	4a5a      	ldr	r2, [pc, #360]	@ (8003d0c <ParseBuffer+0x278>)
 8003ba2:	6811      	ldr	r1, [r2, #0]
 8003ba4:	6019      	str	r1, [r3, #0]
 8003ba6:	8892      	ldrh	r2, [r2, #4]
 8003ba8:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003baa:	231c      	movs	r3, #28
 8003bac:	199b      	adds	r3, r3, r6
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	223e      	movs	r2, #62	@ 0x3e
 8003bb2:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	199b      	adds	r3, r3, r6
 8003bb8:	19db      	adds	r3, r3, r7
 8003bba:	4a55      	ldr	r2, [pc, #340]	@ (8003d10 <ParseBuffer+0x27c>)
 8003bbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bbe:	c313      	stmia	r3!, {r0, r1, r4}
 8003bc0:	8811      	ldrh	r1, [r2, #0]
 8003bc2:	8019      	strh	r1, [r3, #0]
 8003bc4:	7892      	ldrb	r2, [r2, #2]
 8003bc6:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003bc8:	2319      	movs	r3, #25
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003bd2:	19ab      	adds	r3, r5, r6
 8003bd4:	19da      	adds	r2, r3, r7
 8003bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bd8:	0011      	movs	r1, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f014 f942 	bl	8017e64 <strstr>
 8003be0:	0003      	movs	r3, r0
 8003be2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003be4:	2319      	movs	r3, #25
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10a      	bne.n	8003c04 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003bee:	2320      	movs	r3, #32
 8003bf0:	2218      	movs	r2, #24
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	19da      	adds	r2, r3, r7
 8003bf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f014 f932 	bl	8017e64 <strstr>
 8003c00:	0003      	movs	r3, r0
 8003c02:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003c04:	2319      	movs	r3, #25
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d10a      	bne.n	8003c24 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003c0e:	231c      	movs	r3, #28
 8003c10:	2218      	movs	r2, #24
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	19da      	adds	r2, r3, r7
 8003c16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c18:	0011      	movs	r1, r2
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f014 f922 	bl	8017e64 <strstr>
 8003c20:	0003      	movs	r3, r0
 8003c22:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003c24:	2328      	movs	r3, #40	@ 0x28
 8003c26:	2418      	movs	r4, #24
 8003c28:	191b      	adds	r3, r3, r4
 8003c2a:	19da      	adds	r2, r3, r7
 8003c2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c2e:	0011      	movs	r1, r2
 8003c30:	0018      	movs	r0, r3
 8003c32:	f014 f917 	bl	8017e64 <strstr>
 8003c36:	0003      	movs	r3, r0
 8003c38:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	191b      	adds	r3, r3, r4
 8003c3e:	19da      	adds	r2, r3, r7
 8003c40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c42:	0011      	movs	r1, r2
 8003c44:	0018      	movs	r0, r3
 8003c46:	f014 f90d 	bl	8017e64 <strstr>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003c4e:	231a      	movs	r3, #26
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d948      	bls.n	8003cea <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003c58:	213f      	movs	r1, #63	@ 0x3f
 8003c5a:	190b      	adds	r3, r1, r4
 8003c5c:	19db      	adds	r3, r3, r7
 8003c5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003c64:	190b      	adds	r3, r1, r4
 8003c66:	19db      	adds	r3, r3, r7
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c6c:	d104      	bne.n	8003c78 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003c6e:	234f      	movs	r3, #79	@ 0x4f
 8003c70:	191b      	adds	r3, r3, r4
 8003c72:	19db      	adds	r3, r3, r7
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003c78:	233f      	movs	r3, #63	@ 0x3f
 8003c7a:	2218      	movs	r2, #24
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	19db      	adds	r3, r3, r7
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b72      	cmp	r3, #114	@ 0x72
 8003c84:	d104      	bne.n	8003c90 <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003c86:	234f      	movs	r3, #79	@ 0x4f
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003c90:	233f      	movs	r3, #63	@ 0x3f
 8003c92:	2218      	movs	r2, #24
 8003c94:	189b      	adds	r3, r3, r2
 8003c96:	19db      	adds	r3, r3, r7
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c9c:	d104      	bne.n	8003ca8 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003c9e:	234f      	movs	r3, #79	@ 0x4f
 8003ca0:	189b      	adds	r3, r3, r2
 8003ca2:	19db      	adds	r3, r3, r7
 8003ca4:	2205      	movs	r2, #5
 8003ca6:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003ca8:	213f      	movs	r1, #63	@ 0x3f
 8003caa:	2018      	movs	r0, #24
 8003cac:	180b      	adds	r3, r1, r0
 8003cae:	19db      	adds	r3, r3, r7
 8003cb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003cb2:	7812      	ldrb	r2, [r2, #0]
 8003cb4:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	188b      	adds	r3, r1, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b45      	cmp	r3, #69	@ 0x45
 8003cc0:	d104      	bne.n	8003ccc <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003cc2:	234f      	movs	r3, #79	@ 0x4f
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	19db      	adds	r3, r3, r7
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003ccc:	213f      	movs	r1, #63	@ 0x3f
 8003cce:	2018      	movs	r0, #24
 8003cd0:	180b      	adds	r3, r1, r0
 8003cd2:	19db      	adds	r3, r3, r7
 8003cd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cd6:	7812      	ldrb	r2, [r2, #0]
 8003cd8:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003cda:	180b      	adds	r3, r1, r0
 8003cdc:	19db      	adds	r3, r3, r7
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b57      	cmp	r3, #87	@ 0x57
 8003ce2:	d102      	bne.n	8003cea <ParseBuffer+0x256>
      ConnectionMade = true;
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <ParseBuffer+0x280>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003cea:	234f      	movs	r3, #79	@ 0x4f
 8003cec:	2218      	movs	r2, #24
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	19db      	adds	r3, r3, r7
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	46c5      	mov	sp, r8

}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b01a      	add	sp, #104	@ 0x68
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	46b8      	mov	r8, r7
 8003d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	0801ae24 	.word	0x0801ae24
 8003d08:	0801ae28 	.word	0x0801ae28
 8003d0c:	0801ae30 	.word	0x0801ae30
 8003d10:	0801ae38 	.word	0x0801ae38
 8003d14:	2000052b 	.word	0x2000052b

08003d18 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <PollAwake+0x3c>)
 8003d20:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff fe6d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fc f9eb 	bl	8000108 <strlen>
 8003d32:	0003      	movs	r3, r0
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7ff fd1e 	bl	800377c <ESP_Send>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d001      	beq.n	8003d48 <PollAwake+0x30>
    return true;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <PollAwake+0x32>
  }
  else{
    return false;
 8003d48:	2300      	movs	r3, #0
  }
}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b002      	add	sp, #8
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	0801ae48 	.word	0x0801ae48

08003d58 <RFPower>:
bool RFPower(){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <RFPower+0x3c>)
 8003d60:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7ff fe4d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7fc f9cb 	bl	8000108 <strlen>
 8003d72:	0003      	movs	r3, r0
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fcfe 	bl	800377c <ESP_Send>
 8003d80:	1e03      	subs	r3, r0, #0
 8003d82:	d001      	beq.n	8003d88 <RFPower+0x30>
    return true;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <RFPower+0x32>
  }
  else{
    return false;
 8003d88:	2300      	movs	r3, #0
  }
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	0801ae50 	.word	0x0801ae50

08003d98 <CheckRFPower>:
bool CheckRFPower(){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <CheckRFPower+0x3c>)
 8003da0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff fe2d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7fc f9ab 	bl	8000108 <strlen>
 8003db2:	0003      	movs	r3, r0
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff fcde 	bl	800377c <ESP_Send>
 8003dc0:	1e03      	subs	r3, r0, #0
 8003dc2:	d001      	beq.n	8003dc8 <CheckRFPower+0x30>
    return true;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <CheckRFPower+0x32>
  }
  else{
    return false;
 8003dc8:	2300      	movs	r3, #0
  }
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	0801ae60 	.word	0x0801ae60

08003dd8 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003dde:	4b0d      	ldr	r3, [pc, #52]	@ (8003e14 <ATRestore+0x3c>)
 8003de0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7ff fe0d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7fc f98b 	bl	8000108 <strlen>
 8003df2:	0003      	movs	r3, r0
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0011      	movs	r1, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7ff fcbe 	bl	800377c <ESP_Send>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d001      	beq.n	8003e08 <ATRestore+0x30>
    return true;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <ATRestore+0x32>
  }
  else{
    return false;
 8003e08:	2300      	movs	r3, #0
  }
}
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	0801ae70 	.word	0x0801ae70

08003e18 <CWINIT>:
bool CWINIT(){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <CWINIT+0x3c>)
 8003e20:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f7ff fded 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fc f96b 	bl	8000108 <strlen>
 8003e32:	0003      	movs	r3, r0
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7ff fc9e 	bl	800377c <ESP_Send>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d001      	beq.n	8003e48 <CWINIT+0x30>
    return true;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <CWINIT+0x32>
  }
  else{
    return false;
 8003e48:	2300      	movs	r3, #0
  }
}
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	0801ae80 	.word	0x0801ae80

08003e58 <CWMODE1>:
bool CWMODE1(){
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <CWMODE1+0x3c>)
 8003e60:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7ff fdcd 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fc f94b 	bl	8000108 <strlen>
 8003e72:	0003      	movs	r3, r0
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0011      	movs	r1, r2
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f7ff fc7e 	bl	800377c <ESP_Send>
 8003e80:	1e03      	subs	r3, r0, #0
 8003e82:	d001      	beq.n	8003e88 <CWMODE1+0x30>
    return true;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <CWMODE1+0x32>
  }
  else{
    return false;
 8003e88:	2300      	movs	r3, #0
  }
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	0801ae90 	.word	0x0801ae90

08003e98 <CWMODE2>:
bool CWMODE2(){
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <CWMODE2+0x3c>)
 8003ea0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7ff fdad 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fc f92b 	bl	8000108 <strlen>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0011      	movs	r1, r2
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7ff fc5e 	bl	800377c <ESP_Send>
 8003ec0:	1e03      	subs	r3, r0, #0
 8003ec2:	d001      	beq.n	8003ec8 <CWMODE2+0x30>
    return true;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <CWMODE2+0x32>
  }
  else{
    return false;
 8003ec8:	2300      	movs	r3, #0
  }
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	0801aea0 	.word	0x0801aea0

08003ed8 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <CWAUTOCONN+0x3c>)
 8003ee0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff fd8d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7fc f90b 	bl	8000108 <strlen>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff fc3e 	bl	800377c <ESP_Send>
 8003f00:	1e03      	subs	r3, r0, #0
 8003f02:	d001      	beq.n	8003f08 <CWAUTOCONN+0x30>
    return true;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003f08:	2300      	movs	r3, #0
  }
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	0801aeb0 	.word	0x0801aeb0

08003f18 <CWJAP>:
bool CWJAP(){
 8003f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1a:	46c6      	mov	lr, r8
 8003f1c:	b500      	push	{lr}
 8003f1e:	b0a2      	sub	sp, #136	@ 0x88
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	466b      	mov	r3, sp
 8003f24:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003f26:	2618      	movs	r6, #24
 8003f28:	19bb      	adds	r3, r7, r6
 8003f2a:	2264      	movs	r2, #100	@ 0x64
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f013 ff6e 	bl	8017e10 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003f34:	4b35      	ldr	r3, [pc, #212]	@ (800400c <CWJAP+0xf4>)
 8003f36:	4a36      	ldr	r2, [pc, #216]	@ (8004010 <CWJAP+0xf8>)
 8003f38:	4936      	ldr	r1, [pc, #216]	@ (8004014 <CWJAP+0xfc>)
 8003f3a:	19b8      	adds	r0, r7, r6
 8003f3c:	f013 fec4 	bl	8017cc8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003f40:	19bb      	adds	r3, r7, r6
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fc f8e0 	bl	8000108 <strlen>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	216f      	movs	r1, #111	@ 0x6f
 8003f4c:	0030      	movs	r0, r6
 8003f4e:	180b      	adds	r3, r1, r0
 8003f50:	19db      	adds	r3, r3, r7
 8003f52:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003f54:	180b      	adds	r3, r1, r0
 8003f56:	19db      	adds	r3, r3, r7
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	1e5a      	subs	r2, r3, #1
 8003f5e:	2180      	movs	r1, #128	@ 0x80
 8003f60:	1879      	adds	r1, r7, r1
 8003f62:	600a      	str	r2, [r1, #0]
 8003f64:	001a      	movs	r2, r3
 8003f66:	60ba      	str	r2, [r7, #8]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60fa      	str	r2, [r7, #12]
 8003f6c:	68b8      	ldr	r0, [r7, #8]
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	0002      	movs	r2, r0
 8003f72:	0f52      	lsrs	r2, r2, #29
 8003f74:	000e      	movs	r6, r1
 8003f76:	00f6      	lsls	r6, r6, #3
 8003f78:	617e      	str	r6, [r7, #20]
 8003f7a:	697e      	ldr	r6, [r7, #20]
 8003f7c:	4316      	orrs	r6, r2
 8003f7e:	617e      	str	r6, [r7, #20]
 8003f80:	0002      	movs	r2, r0
 8003f82:	00d2      	lsls	r2, r2, #3
 8003f84:	613a      	str	r2, [r7, #16]
 8003f86:	001a      	movs	r2, r3
 8003f88:	603a      	str	r2, [r7, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	6838      	ldr	r0, [r7, #0]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	0002      	movs	r2, r0
 8003f94:	0f52      	lsrs	r2, r2, #29
 8003f96:	000e      	movs	r6, r1
 8003f98:	00f5      	lsls	r5, r6, #3
 8003f9a:	4315      	orrs	r5, r2
 8003f9c:	0002      	movs	r2, r0
 8003f9e:	00d4      	lsls	r4, r2, #3
 8003fa0:	3307      	adds	r3, #7
 8003fa2:	08db      	lsrs	r3, r3, #3
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	466a      	mov	r2, sp
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	469d      	mov	sp, r3
 8003fac:	466b      	mov	r3, sp
 8003fae:	3300      	adds	r3, #0
 8003fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003fb2:	246f      	movs	r4, #111	@ 0x6f
 8003fb4:	2518      	movs	r5, #24
 8003fb6:	1963      	adds	r3, r4, r5
 8003fb8:	19db      	adds	r3, r3, r7
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	001a      	movs	r2, r3
 8003fc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f013 ff23 	bl	8017e10 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8003fca:	1963      	adds	r3, r4, r5
 8003fcc:	19db      	adds	r3, r3, r7
 8003fce:	781a      	ldrb	r2, [r3, #0]
 8003fd0:	1979      	adds	r1, r7, r5
 8003fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f013 ff31 	bl	8017e3c <strncpy>
  SetCommandBuffer(atCommand);
 8003fda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff fd11 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003fe2:	1963      	adds	r3, r4, r5
 8003fe4:	19db      	adds	r3, r3, r7
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7ff fbc4 	bl	800377c <ESP_Send>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <CWJAP+0xe4>
    return true;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <CWJAP+0xe6>
  }
  else{
    return false;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	46c5      	mov	sp, r8
  }
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b022      	add	sp, #136	@ 0x88
 8004006:	bc80      	pop	{r7}
 8004008:	46b8      	mov	r8, r7
 800400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400c:	0801b7e8 	.word	0x0801b7e8
 8004010:	0801b7dc 	.word	0x0801b7dc
 8004014:	0801aec4 	.word	0x0801aec4

08004018 <CWMODE3>:
bool CWMODE3(){
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <CWMODE3+0x3c>)
 8004020:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f7ff fced 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0018      	movs	r0, r3
 800402e:	f7fc f86b 	bl	8000108 <strlen>
 8004032:	0003      	movs	r3, r0
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f7ff fb9e 	bl	800377c <ESP_Send>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <CWMODE3+0x30>
    return true;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <CWMODE3+0x32>
  }
  else{
    return false;
 8004048:	2300      	movs	r3, #0
  }
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	0801aedc 	.word	0x0801aedc

08004058 <CWSAP>:
bool CWSAP(){
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800405e:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <CWSAP+0x3c>)
 8004060:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0018      	movs	r0, r3
 8004066:	f7ff fccd 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0018      	movs	r0, r3
 800406e:	f7fc f84b 	bl	8000108 <strlen>
 8004072:	0003      	movs	r3, r0
 8004074:	b29a      	uxth	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0011      	movs	r1, r2
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff fb7e 	bl	800377c <ESP_Send>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d001      	beq.n	8004088 <CWSAP+0x30>
    return true;
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <CWSAP+0x32>
  }
  else{
    return false;
 8004088:	2300      	movs	r3, #0
  }
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	0801aeec 	.word	0x0801aeec

08004098 <CIPMUX>:
bool CIPMUX(){
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800409e:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <CIPMUX+0x3c>)
 80040a0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7ff fcad 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7fc f82b 	bl	8000108 <strlen>
 80040b2:	0003      	movs	r3, r0
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0011      	movs	r1, r2
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7ff fb5e 	bl	800377c <ESP_Send>
 80040c0:	1e03      	subs	r3, r0, #0
 80040c2:	d001      	beq.n	80040c8 <CIPMUX+0x30>
    return true;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <CIPMUX+0x32>
  }
  else{
    return false;
 80040c8:	2300      	movs	r3, #0
  }
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b002      	add	sp, #8
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	0801af10 	.word	0x0801af10

080040d8 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <WEBSERVER+0x3c>)
 80040e0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff fc8d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7fc f80b 	bl	8000108 <strlen>
 80040f2:	0003      	movs	r3, r0
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0011      	movs	r1, r2
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7ff fb3e 	bl	800377c <ESP_Send>
 8004100:	1e03      	subs	r3, r0, #0
 8004102:	d001      	beq.n	8004108 <WEBSERVER+0x30>
    return true;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <WEBSERVER+0x32>
  }
  else{
    return false;
 8004108:	2300      	movs	r3, #0
  }
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b002      	add	sp, #8
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	0801af20 	.word	0x0801af20

08004118 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411a:	46c6      	mov	lr, r8
 800411c:	b500      	push	{lr}
 800411e:	4c47      	ldr	r4, [pc, #284]	@ (800423c <HTTPCPOST+0x124>)
 8004120:	44a5      	add	sp, r4
 8004122:	af00      	add	r7, sp, #0
 8004124:	466b      	mov	r3, sp
 8004126:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8004128:	4b45      	ldr	r3, [pc, #276]	@ (8004240 <HTTPCPOST+0x128>)
 800412a:	2218      	movs	r2, #24
 800412c:	189b      	adds	r3, r3, r2
 800412e:	19dc      	adds	r4, r3, r7
 8004130:	f7ff fba8 	bl	8003884 <CreateMessage>
 8004134:	0003      	movs	r3, r0
 8004136:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004138:	4b41      	ldr	r3, [pc, #260]	@ (8004240 <HTTPCPOST+0x128>)
 800413a:	2218      	movs	r2, #24
 800413c:	189b      	adds	r3, r3, r2
 800413e:	19db      	adds	r3, r3, r7
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	4a40      	ldr	r2, [pc, #256]	@ (8004244 <HTTPCPOST+0x12c>)
 8004144:	4940      	ldr	r1, [pc, #256]	@ (8004248 <HTTPCPOST+0x130>)
 8004146:	201c      	movs	r0, #28
 8004148:	1838      	adds	r0, r7, r0
 800414a:	f013 fdbd 	bl	8017cc8 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800414e:	231c      	movs	r3, #28
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	0018      	movs	r0, r3
 8004154:	f7fb ffd8 	bl	8000108 <strlen>
 8004158:	0002      	movs	r2, r0
 800415a:	4c3c      	ldr	r4, [pc, #240]	@ (800424c <HTTPCPOST+0x134>)
 800415c:	2318      	movs	r3, #24
 800415e:	18e3      	adds	r3, r4, r3
 8004160:	19db      	adds	r3, r3, r7
 8004162:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004164:	2318      	movs	r3, #24
 8004166:	18e3      	adds	r3, r4, r3
 8004168:	19db      	adds	r3, r3, r7
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	1e5a      	subs	r2, r3, #1
 8004170:	2198      	movs	r1, #152	@ 0x98
 8004172:	0089      	lsls	r1, r1, #2
 8004174:	2018      	movs	r0, #24
 8004176:	1809      	adds	r1, r1, r0
 8004178:	19c9      	adds	r1, r1, r7
 800417a:	600a      	str	r2, [r1, #0]
 800417c:	001a      	movs	r2, r3
 800417e:	0015      	movs	r5, r2
 8004180:	2200      	movs	r2, #0
 8004182:	0016      	movs	r6, r2
 8004184:	0028      	movs	r0, r5
 8004186:	0031      	movs	r1, r6
 8004188:	0002      	movs	r2, r0
 800418a:	0f52      	lsrs	r2, r2, #29
 800418c:	000d      	movs	r5, r1
 800418e:	00ed      	lsls	r5, r5, #3
 8004190:	617d      	str	r5, [r7, #20]
 8004192:	697d      	ldr	r5, [r7, #20]
 8004194:	4315      	orrs	r5, r2
 8004196:	617d      	str	r5, [r7, #20]
 8004198:	0002      	movs	r2, r0
 800419a:	00d2      	lsls	r2, r2, #3
 800419c:	613a      	str	r2, [r7, #16]
 800419e:	001a      	movs	r2, r3
 80041a0:	603a      	str	r2, [r7, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	6838      	ldr	r0, [r7, #0]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	0002      	movs	r2, r0
 80041ac:	0f52      	lsrs	r2, r2, #29
 80041ae:	000d      	movs	r5, r1
 80041b0:	00ed      	lsls	r5, r5, #3
 80041b2:	60fd      	str	r5, [r7, #12]
 80041b4:	68fd      	ldr	r5, [r7, #12]
 80041b6:	4315      	orrs	r5, r2
 80041b8:	60fd      	str	r5, [r7, #12]
 80041ba:	0002      	movs	r2, r0
 80041bc:	00d2      	lsls	r2, r2, #3
 80041be:	60ba      	str	r2, [r7, #8]
 80041c0:	3307      	adds	r3, #7
 80041c2:	08db      	lsrs	r3, r3, #3
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	466a      	mov	r2, sp
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	469d      	mov	sp, r3
 80041cc:	466b      	mov	r3, sp
 80041ce:	3300      	adds	r3, #0
 80041d0:	2597      	movs	r5, #151	@ 0x97
 80041d2:	00ad      	lsls	r5, r5, #2
 80041d4:	2218      	movs	r2, #24
 80041d6:	18aa      	adds	r2, r5, r2
 80041d8:	19d2      	adds	r2, r2, r7
 80041da:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 80041dc:	2318      	movs	r3, #24
 80041de:	18e3      	adds	r3, r4, r3
 80041e0:	19db      	adds	r3, r3, r7
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	231c      	movs	r3, #28
 80041e6:	18f9      	adds	r1, r7, r3
 80041e8:	2318      	movs	r3, #24
 80041ea:	18eb      	adds	r3, r5, r3
 80041ec:	19db      	adds	r3, r3, r7
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f013 fe23 	bl	8017e3c <strncpy>
  SetCommandBuffer(atCommand);
 80041f6:	2318      	movs	r3, #24
 80041f8:	18eb      	adds	r3, r5, r3
 80041fa:	19db      	adds	r3, r3, r7
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	0018      	movs	r0, r3
 8004200:	f7ff fc00 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 8004204:	2318      	movs	r3, #24
 8004206:	18e3      	adds	r3, r4, r3
 8004208:	19db      	adds	r3, r3, r7
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b29a      	uxth	r2, r3
 800420e:	2318      	movs	r3, #24
 8004210:	18eb      	adds	r3, r5, r3
 8004212:	19db      	adds	r3, r3, r7
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	0011      	movs	r1, r2
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff faaf 	bl	800377c <ESP_Send>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d001      	beq.n	8004226 <HTTPCPOST+0x10e>
    return true;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HTTPCPOST+0x110>
  }
  else{
    return false;
 8004226:	2300      	movs	r3, #0
 8004228:	46c5      	mov	sp, r8
  }
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	23a0      	movs	r3, #160	@ 0xa0
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	449d      	add	sp, r3
 8004234:	bc80      	pop	{r7}
 8004236:	46b8      	mov	r8, r7
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	fffffd80 	.word	0xfffffd80
 8004240:	00000266 	.word	0x00000266
 8004244:	20000004 	.word	0x20000004
 8004248:	0801af38 	.word	0x0801af38
 800424c:	00000265 	.word	0x00000265

08004250 <SENDDATA>:
bool SENDDATA(){
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	46c6      	mov	lr, r8
 8004254:	b500      	push	{lr}
 8004256:	4c4c      	ldr	r4, [pc, #304]	@ (8004388 <SENDDATA+0x138>)
 8004258:	44a5      	add	sp, r4
 800425a:	af04      	add	r7, sp, #16
 800425c:	466b      	mov	r3, sp
 800425e:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 8004260:	23a4      	movs	r3, #164	@ 0xa4
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	261c      	movs	r6, #28
 8004266:	19bb      	adds	r3, r7, r6
 8004268:	2100      	movs	r1, #0
 800426a:	0018      	movs	r0, r3
 800426c:	f013 fdd0 	bl	8017e10 <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 8004270:	4a46      	ldr	r2, [pc, #280]	@ (800438c <SENDDATA+0x13c>)
 8004272:	4947      	ldr	r1, [pc, #284]	@ (8004390 <SENDDATA+0x140>)
 8004274:	4847      	ldr	r0, [pc, #284]	@ (8004394 <SENDDATA+0x144>)
 8004276:	19be      	adds	r6, r7, r6
 8004278:	4b47      	ldr	r3, [pc, #284]	@ (8004398 <SENDDATA+0x148>)
 800427a:	9302      	str	r3, [sp, #8]
 800427c:	4b47      	ldr	r3, [pc, #284]	@ (800439c <SENDDATA+0x14c>)
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	4b47      	ldr	r3, [pc, #284]	@ (80043a0 <SENDDATA+0x150>)
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	0013      	movs	r3, r2
 8004286:	000a      	movs	r2, r1
 8004288:	0001      	movs	r1, r0
 800428a:	0030      	movs	r0, r6
 800428c:	f013 fd1c 	bl	8017cc8 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 8004290:	231c      	movs	r3, #28
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	0018      	movs	r0, r3
 8004296:	f7fb ff37 	bl	8000108 <strlen>
 800429a:	0002      	movs	r2, r0
 800429c:	4e41      	ldr	r6, [pc, #260]	@ (80043a4 <SENDDATA+0x154>)
 800429e:	2018      	movs	r0, #24
 80042a0:	1831      	adds	r1, r6, r0
 80042a2:	19cb      	adds	r3, r1, r7
 80042a4:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 80042a6:	1832      	adds	r2, r6, r0
 80042a8:	19d3      	adds	r3, r2, r7
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	1e5a      	subs	r2, r3, #1
 80042b0:	21a6      	movs	r1, #166	@ 0xa6
 80042b2:	0089      	lsls	r1, r1, #2
 80042b4:	1809      	adds	r1, r1, r0
 80042b6:	19c9      	adds	r1, r1, r7
 80042b8:	600a      	str	r2, [r1, #0]
 80042ba:	001a      	movs	r2, r3
 80042bc:	60ba      	str	r2, [r7, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	60fa      	str	r2, [r7, #12]
 80042c2:	68b8      	ldr	r0, [r7, #8]
 80042c4:	68f9      	ldr	r1, [r7, #12]
 80042c6:	0002      	movs	r2, r0
 80042c8:	0f52      	lsrs	r2, r2, #29
 80042ca:	000e      	movs	r6, r1
 80042cc:	00f6      	lsls	r6, r6, #3
 80042ce:	617e      	str	r6, [r7, #20]
 80042d0:	697e      	ldr	r6, [r7, #20]
 80042d2:	4316      	orrs	r6, r2
 80042d4:	617e      	str	r6, [r7, #20]
 80042d6:	0002      	movs	r2, r0
 80042d8:	00d2      	lsls	r2, r2, #3
 80042da:	613a      	str	r2, [r7, #16]
 80042dc:	001a      	movs	r2, r3
 80042de:	603a      	str	r2, [r7, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	6838      	ldr	r0, [r7, #0]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	0002      	movs	r2, r0
 80042ea:	0f52      	lsrs	r2, r2, #29
 80042ec:	000e      	movs	r6, r1
 80042ee:	00f5      	lsls	r5, r6, #3
 80042f0:	4315      	orrs	r5, r2
 80042f2:	0002      	movs	r2, r0
 80042f4:	00d4      	lsls	r4, r2, #3
 80042f6:	3307      	adds	r3, #7
 80042f8:	08db      	lsrs	r3, r3, #3
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	466a      	mov	r2, sp
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	469d      	mov	sp, r3
 8004302:	ab04      	add	r3, sp, #16
 8004304:	3300      	adds	r3, #0
 8004306:	21a5      	movs	r1, #165	@ 0xa5
 8004308:	0089      	lsls	r1, r1, #2
 800430a:	2018      	movs	r0, #24
 800430c:	180a      	adds	r2, r1, r0
 800430e:	19d2      	adds	r2, r2, r7
 8004310:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 8004312:	4e24      	ldr	r6, [pc, #144]	@ (80043a4 <SENDDATA+0x154>)
 8004314:	1832      	adds	r2, r6, r0
 8004316:	19d3      	adds	r3, r2, r7
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	001a      	movs	r2, r3
 800431e:	000c      	movs	r4, r1
 8004320:	0005      	movs	r5, r0
 8004322:	1821      	adds	r1, r4, r0
 8004324:	19cb      	adds	r3, r1, r7
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2100      	movs	r1, #0
 800432a:	0018      	movs	r0, r3
 800432c:	f013 fd70 	bl	8017e10 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004330:	0028      	movs	r0, r5
 8004332:	1832      	adds	r2, r6, r0
 8004334:	19d3      	adds	r3, r2, r7
 8004336:	881a      	ldrh	r2, [r3, #0]
 8004338:	231c      	movs	r3, #28
 800433a:	18f9      	adds	r1, r7, r3
 800433c:	0005      	movs	r5, r0
 800433e:	1963      	adds	r3, r4, r5
 8004340:	19db      	adds	r3, r3, r7
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0018      	movs	r0, r3
 8004346:	f013 fd79 	bl	8017e3c <strncpy>
  SetCommandBuffer(atCommand);
 800434a:	1963      	adds	r3, r4, r5
 800434c:	19db      	adds	r3, r3, r7
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	0018      	movs	r0, r3
 8004352:	f7ff fb57 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004356:	0028      	movs	r0, r5
 8004358:	1833      	adds	r3, r6, r0
 800435a:	19db      	adds	r3, r3, r7
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	1823      	adds	r3, r4, r0
 8004360:	19db      	adds	r3, r3, r7
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0011      	movs	r1, r2
 8004366:	0018      	movs	r0, r3
 8004368:	f7ff fa08 	bl	800377c <ESP_Send>
 800436c:	1e03      	subs	r3, r0, #0
 800436e:	d001      	beq.n	8004374 <SENDDATA+0x124>
    return true;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <SENDDATA+0x126>
  }
  else{
    return false;
 8004374:	2300      	movs	r3, #0
 8004376:	46c5      	mov	sp, r8
  }
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	23ae      	movs	r3, #174	@ 0xae
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	449d      	add	sp, r3
 8004382:	bc80      	pop	{r7}
 8004384:	46b8      	mov	r8, r7
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004388:	fffffd38 	.word	0xfffffd38
 800438c:	200005d0 	.word	0x200005d0
 8004390:	20000550 	.word	0x20000550
 8004394:	0801af70 	.word	0x0801af70
 8004398:	20000750 	.word	0x20000750
 800439c:	200006d0 	.word	0x200006d0
 80043a0:	20000650 	.word	0x20000650
 80043a4:	0000029e 	.word	0x0000029e

080043a8 <SLEEP>:
bool SLEEP(){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <SLEEP+0x3c>)
 80043b0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7ff fb25 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f7fb fea3 	bl	8000108 <strlen>
 80043c2:	0003      	movs	r3, r0
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7ff f9d6 	bl	800377c <ESP_Send>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d001      	beq.n	80043d8 <SLEEP+0x30>
    return true;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <SLEEP+0x32>
  }
  else{
    return false;
 80043d8:	2300      	movs	r3, #0
  }
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b002      	add	sp, #8
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	0801af90 	.word	0x0801af90

080043e8 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 80043e8:	b5b0      	push	{r4, r5, r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	0002      	movs	r2, r0
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80043f4:	4b50      	ldr	r3, [pc, #320]	@ (8004538 <DMA_ProcessBuffer+0x150>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	210e      	movs	r1, #14
 80043fe:	187b      	adds	r3, r7, r1
 8004400:	43d2      	mvns	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004404:	200f      	movs	r0, #15
 8004406:	183b      	adds	r3, r7, r0
 8004408:	2203      	movs	r2, #3
 800440a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 800440c:	4b4b      	ldr	r3, [pc, #300]	@ (800453c <DMA_ProcessBuffer+0x154>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	187a      	adds	r2, r7, r1
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d131      	bne.n	800447e <DMA_ProcessBuffer+0x96>
      if(retry >4){
 800441a:	4b49      	ldr	r3, [pc, #292]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b04      	cmp	r3, #4
 8004420:	d91b      	bls.n	800445a <DMA_ProcessBuffer+0x72>
        retry = 0;
 8004422:	4b47      	ldr	r3, [pc, #284]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004428:	4b46      	ldr	r3, [pc, #280]	@ (8004544 <DMA_ProcessBuffer+0x15c>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <DMA_ProcessBuffer+0x56>
 8004430:	4b45      	ldr	r3, [pc, #276]	@ (8004548 <DMA_ProcessBuffer+0x160>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 8004438:	183b      	adds	r3, r7, r0
 800443a:	2207      	movs	r2, #7
 800443c:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 800443e:	4b41      	ldr	r3, [pc, #260]	@ (8004544 <DMA_ProcessBuffer+0x15c>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b08      	cmp	r3, #8
 8004444:	d104      	bne.n	8004450 <DMA_ProcessBuffer+0x68>
          status = RECEIVE_STATUS_HOME;
 8004446:	230f      	movs	r3, #15
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	2208      	movs	r2, #8
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e016      	b.n	800447e <DMA_ProcessBuffer+0x96>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004450:	230f      	movs	r3, #15
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	2206      	movs	r2, #6
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	e011      	b.n	800447e <DMA_ProcessBuffer+0x96>
        }
      }
     else{
       retry ++;
 800445a:	4b39      	ldr	r3, [pc, #228]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4b37      	ldr	r3, [pc, #220]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 8004464:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004466:	f005 fc65 	bl	8009d34 <HAL_GetTick>
 800446a:	0003      	movs	r3, r0
 800446c:	33f5      	adds	r3, #245	@ 0xf5
 800446e:	33ff      	adds	r3, #255	@ 0xff
 8004470:	001a      	movs	r2, r3
 8004472:	4b36      	ldr	r3, [pc, #216]	@ (800454c <DMA_ProcessBuffer+0x164>)
 8004474:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004476:	230f      	movs	r3, #15
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	2204      	movs	r2, #4
 800447c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 800447e:	4b2f      	ldr	r3, [pc, #188]	@ (800453c <DMA_ProcessBuffer+0x154>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	210e      	movs	r1, #14
 8004486:	187a      	adds	r2, r7, r1
 8004488:	7812      	ldrb	r2, [r2, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d048      	beq.n	8004520 <DMA_ProcessBuffer+0x138>
      retry = 0;
 800448e:	4b2c      	ldr	r3, [pc, #176]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004494:	4b29      	ldr	r3, [pc, #164]	@ (800453c <DMA_ProcessBuffer+0x154>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	187a      	adds	r2, r7, r1
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d917      	bls.n	80044d2 <DMA_ProcessBuffer+0xea>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 80044a2:	4b26      	ldr	r3, [pc, #152]	@ (800453c <DMA_ProcessBuffer+0x154>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	001a      	movs	r2, r3
 80044aa:	4b29      	ldr	r3, [pc, #164]	@ (8004550 <DMA_ProcessBuffer+0x168>)
 80044ac:	18d0      	adds	r0, r2, r3
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4a21      	ldr	r2, [pc, #132]	@ (800453c <DMA_ProcessBuffer+0x154>)
 80044b6:	7812      	ldrb	r2, [r2, #0]
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	b299      	uxth	r1, r3
 80044be:	230f      	movs	r3, #15
 80044c0:	18fc      	adds	r4, r7, r3
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	001a      	movs	r2, r3
 80044c8:	f7ff fae4 	bl	8003a94 <ParseBuffer>
 80044cc:	0003      	movs	r3, r0
 80044ce:	7023      	strb	r3, [r4, #0]
 80044d0:	e026      	b.n	8004520 <DMA_ProcessBuffer+0x138>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <DMA_ProcessBuffer+0x154>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	001a      	movs	r2, r3
 80044da:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <DMA_ProcessBuffer+0x168>)
 80044dc:	18d0      	adds	r0, r2, r3
 80044de:	4b17      	ldr	r3, [pc, #92]	@ (800453c <DMA_ProcessBuffer+0x154>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	001a      	movs	r2, r3
 80044e6:	23ff      	movs	r3, #255	@ 0xff
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	b299      	uxth	r1, r3
 80044ec:	250f      	movs	r5, #15
 80044ee:	197c      	adds	r4, r7, r5
 80044f0:	1dfb      	adds	r3, r7, #7
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	001a      	movs	r2, r3
 80044f6:	f7ff facd 	bl	8003a94 <ParseBuffer>
 80044fa:	0003      	movs	r3, r0
 80044fc:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 80044fe:	220e      	movs	r2, #14
 8004500:	18bb      	adds	r3, r7, r2
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <DMA_ProcessBuffer+0x138>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004508:	18bb      	adds	r3, r7, r2
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b299      	uxth	r1, r3
 800450e:	197c      	adds	r4, r7, r5
 8004510:	1dfb      	adds	r3, r7, #7
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <DMA_ProcessBuffer+0x168>)
 8004516:	0018      	movs	r0, r3
 8004518:	f7ff fabc 	bl	8003a94 <ParseBuffer>
 800451c:	0003      	movs	r3, r0
 800451e:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <DMA_ProcessBuffer+0x154>)
 8004522:	220e      	movs	r2, #14
 8004524:	18ba      	adds	r2, r7, r2
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	701a      	strb	r2, [r3, #0]
    return status;
 800452a:	230f      	movs	r3, #15
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	781b      	ldrb	r3, [r3, #0]
}
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b004      	add	sp, #16
 8004536:	bdb0      	pop	{r4, r5, r7, pc}
 8004538:	20002a64 	.word	0x20002a64
 800453c:	200007db 	.word	0x200007db
 8004540:	200007e0 	.word	0x200007e0
 8004544:	200009e6 	.word	0x200009e6
 8004548:	20000000 	.word	0x20000000
 800454c:	200007dc 	.word	0x200007dc
 8004550:	20000428 	.word	0x20000428

08004554 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	0002      	movs	r2, r0
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	1dbb      	adds	r3, r7, #6
 8004562:	1c0a      	adds	r2, r1, #0
 8004564:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004566:	210f      	movs	r1, #15
 8004568:	187b      	adds	r3, r7, r1
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800456e:	1dbb      	adds	r3, r7, #6
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004576:	187b      	adds	r3, r7, r1
 8004578:	1dfa      	adds	r2, r7, #7
 800457a:	7812      	ldrb	r2, [r2, #0]
 800457c:	4251      	negs	r1, r2
 800457e:	414a      	adcs	r2, r1
 8004580:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004582:	1dbb      	adds	r3, r7, #6
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d107      	bne.n	800459a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800458a:	230f      	movs	r3, #15
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	1dfa      	adds	r2, r7, #7
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	3a02      	subs	r2, #2
 8004594:	4251      	negs	r1, r2
 8004596:	414a      	adcs	r2, r1
 8004598:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800459a:	1dbb      	adds	r3, r7, #6
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d107      	bne.n	80045b2 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80045a2:	230f      	movs	r3, #15
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	1dfa      	adds	r2, r7, #7
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	3a05      	subs	r2, #5
 80045ac:	4251      	negs	r1, r2
 80045ae:	414a      	adcs	r2, r1
 80045b0:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80045b2:	230f      	movs	r3, #15
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	781b      	ldrb	r3, [r3, #0]
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b004      	add	sp, #16
 80045be:	bd80      	pop	{r7, pc}

080045c0 <AT_Send>:

bool AT_Send(AT_Commands state){
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	0002      	movs	r2, r0
 80045c8:	1dfb      	adds	r3, r7, #7
 80045ca:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80045cc:	230f      	movs	r3, #15
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
  switch (state){
 80045d4:	1dfb      	adds	r3, r7, #7
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d900      	bls.n	80045de <AT_Send+0x1e>
 80045dc:	e14a      	b.n	8004874 <AT_Send+0x2b4>
 80045de:	009a      	lsls	r2, r3, #2
 80045e0:	4ba8      	ldr	r3, [pc, #672]	@ (8004884 <AT_Send+0x2c4>)
 80045e2:	18d3      	adds	r3, r2, r3
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80045e8:	4ba7      	ldr	r3, [pc, #668]	@ (8004888 <AT_Send+0x2c8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f004 ffaf 	bl	8009550 <TimestampIsReached>
 80045f2:	1e03      	subs	r3, r0, #0
 80045f4:	d100      	bne.n	80045f8 <AT_Send+0x38>
 80045f6:	e13c      	b.n	8004872 <AT_Send+0x2b2>
    ATCommandSend = PollAwake();
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fc      	adds	r4, r7, r3
 80045fc:	f7ff fb8c 	bl	8003d18 <PollAwake>
 8004600:	0003      	movs	r3, r0
 8004602:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004604:	f005 fb96 	bl	8009d34 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	3332      	adds	r3, #50	@ 0x32
 800460c:	001a      	movs	r2, r3
 800460e:	4b9e      	ldr	r3, [pc, #632]	@ (8004888 <AT_Send+0x2c8>)
 8004610:	601a      	str	r2, [r3, #0]
  }
  break;
 8004612:	e12e      	b.n	8004872 <AT_Send+0x2b2>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004614:	4a9d      	ldr	r2, [pc, #628]	@ (800488c <AT_Send+0x2cc>)
 8004616:	4b9e      	ldr	r3, [pc, #632]	@ (8004890 <AT_Send+0x2d0>)
 8004618:	0019      	movs	r1, r3
 800461a:	2003      	movs	r0, #3
 800461c:	f004 ffee 	bl	80095fc <CreateLine>
    ATCommandSend = RFPower();
 8004620:	230f      	movs	r3, #15
 8004622:	18fc      	adds	r4, r7, r3
 8004624:	f7ff fb98 	bl	8003d58 <RFPower>
 8004628:	0003      	movs	r3, r0
 800462a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800462c:	f005 fb82 	bl	8009d34 <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	330a      	adds	r3, #10
 8004634:	001a      	movs	r2, r3
 8004636:	4b94      	ldr	r3, [pc, #592]	@ (8004888 <AT_Send+0x2c8>)
 8004638:	601a      	str	r2, [r3, #0]
    break;
 800463a:	e11b      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800463c:	4a95      	ldr	r2, [pc, #596]	@ (8004894 <AT_Send+0x2d4>)
 800463e:	4b94      	ldr	r3, [pc, #592]	@ (8004890 <AT_Send+0x2d0>)
 8004640:	0019      	movs	r1, r3
 8004642:	2003      	movs	r0, #3
 8004644:	f004 ffda 	bl	80095fc <CreateLine>
    ATCommandSend = CheckRFPower();
 8004648:	230f      	movs	r3, #15
 800464a:	18fc      	adds	r4, r7, r3
 800464c:	f7ff fba4 	bl	8003d98 <CheckRFPower>
 8004650:	0003      	movs	r3, r0
 8004652:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004654:	f005 fb6e 	bl	8009d34 <HAL_GetTick>
 8004658:	0003      	movs	r3, r0
 800465a:	330a      	adds	r3, #10
 800465c:	001a      	movs	r2, r3
 800465e:	4b8a      	ldr	r3, [pc, #552]	@ (8004888 <AT_Send+0x2c8>)
 8004660:	601a      	str	r2, [r3, #0]
    break;
 8004662:	e107      	b.n	8004874 <AT_Send+0x2b4>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004664:	4a8c      	ldr	r2, [pc, #560]	@ (8004898 <AT_Send+0x2d8>)
 8004666:	4b8a      	ldr	r3, [pc, #552]	@ (8004890 <AT_Send+0x2d0>)
 8004668:	0019      	movs	r1, r3
 800466a:	2003      	movs	r0, #3
 800466c:	f004 ffc6 	bl	80095fc <CreateLine>
    ATCommandSend = ATRestore();
 8004670:	230f      	movs	r3, #15
 8004672:	18fc      	adds	r4, r7, r3
 8004674:	f7ff fbb0 	bl	8003dd8 <ATRestore>
 8004678:	0003      	movs	r3, r0
 800467a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800467c:	f005 fb5a 	bl	8009d34 <HAL_GetTick>
 8004680:	0003      	movs	r3, r0
 8004682:	3332      	adds	r3, #50	@ 0x32
 8004684:	001a      	movs	r2, r3
 8004686:	4b80      	ldr	r3, [pc, #512]	@ (8004888 <AT_Send+0x2c8>)
 8004688:	601a      	str	r2, [r3, #0]
    break;
 800468a:	e0f3      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 800468c:	4a83      	ldr	r2, [pc, #524]	@ (800489c <AT_Send+0x2dc>)
 800468e:	4b80      	ldr	r3, [pc, #512]	@ (8004890 <AT_Send+0x2d0>)
 8004690:	0019      	movs	r1, r3
 8004692:	2003      	movs	r0, #3
 8004694:	f004 ffb2 	bl	80095fc <CreateLine>
    ATCommandSend = CWINIT();
 8004698:	230f      	movs	r3, #15
 800469a:	18fc      	adds	r4, r7, r3
 800469c:	f7ff fbbc 	bl	8003e18 <CWINIT>
 80046a0:	0003      	movs	r3, r0
 80046a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80046a4:	f005 fb46 	bl	8009d34 <HAL_GetTick>
 80046a8:	0003      	movs	r3, r0
 80046aa:	33f5      	adds	r3, #245	@ 0xf5
 80046ac:	33ff      	adds	r3, #255	@ 0xff
 80046ae:	001a      	movs	r2, r3
 80046b0:	4b75      	ldr	r3, [pc, #468]	@ (8004888 <AT_Send+0x2c8>)
 80046b2:	601a      	str	r2, [r3, #0]
    break;
 80046b4:	e0de      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80046b6:	4a7a      	ldr	r2, [pc, #488]	@ (80048a0 <AT_Send+0x2e0>)
 80046b8:	4b75      	ldr	r3, [pc, #468]	@ (8004890 <AT_Send+0x2d0>)
 80046ba:	0019      	movs	r1, r3
 80046bc:	2003      	movs	r0, #3
 80046be:	f004 ff9d 	bl	80095fc <CreateLine>
    ATCommandSend = CWMODE1();
 80046c2:	230f      	movs	r3, #15
 80046c4:	18fc      	adds	r4, r7, r3
 80046c6:	f7ff fbc7 	bl	8003e58 <CWMODE1>
 80046ca:	0003      	movs	r3, r0
 80046cc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046ce:	f005 fb31 	bl	8009d34 <HAL_GetTick>
 80046d2:	0003      	movs	r3, r0
 80046d4:	330a      	adds	r3, #10
 80046d6:	001a      	movs	r2, r3
 80046d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004888 <AT_Send+0x2c8>)
 80046da:	601a      	str	r2, [r3, #0]
    break;
 80046dc:	e0ca      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80046de:	4a70      	ldr	r2, [pc, #448]	@ (80048a0 <AT_Send+0x2e0>)
 80046e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004890 <AT_Send+0x2d0>)
 80046e2:	0019      	movs	r1, r3
 80046e4:	2003      	movs	r0, #3
 80046e6:	f004 ff89 	bl	80095fc <CreateLine>
    ATCommandSend = CWMODE2();
 80046ea:	230f      	movs	r3, #15
 80046ec:	18fc      	adds	r4, r7, r3
 80046ee:	f7ff fbd3 	bl	8003e98 <CWMODE2>
 80046f2:	0003      	movs	r3, r0
 80046f4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046f6:	f005 fb1d 	bl	8009d34 <HAL_GetTick>
 80046fa:	0003      	movs	r3, r0
 80046fc:	330a      	adds	r3, #10
 80046fe:	001a      	movs	r2, r3
 8004700:	4b61      	ldr	r3, [pc, #388]	@ (8004888 <AT_Send+0x2c8>)
 8004702:	601a      	str	r2, [r3, #0]
    break;
 8004704:	e0b6      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004706:	4a67      	ldr	r2, [pc, #412]	@ (80048a4 <AT_Send+0x2e4>)
 8004708:	4b61      	ldr	r3, [pc, #388]	@ (8004890 <AT_Send+0x2d0>)
 800470a:	0019      	movs	r1, r3
 800470c:	2003      	movs	r0, #3
 800470e:	f004 ff75 	bl	80095fc <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004712:	230f      	movs	r3, #15
 8004714:	18fc      	adds	r4, r7, r3
 8004716:	f7ff fbdf 	bl	8003ed8 <CWAUTOCONN>
 800471a:	0003      	movs	r3, r0
 800471c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800471e:	f005 fb09 	bl	8009d34 <HAL_GetTick>
 8004722:	0003      	movs	r3, r0
 8004724:	330a      	adds	r3, #10
 8004726:	001a      	movs	r2, r3
 8004728:	4b57      	ldr	r3, [pc, #348]	@ (8004888 <AT_Send+0x2c8>)
 800472a:	601a      	str	r2, [r3, #0]
    break;
 800472c:	e0a2      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800472e:	4a5e      	ldr	r2, [pc, #376]	@ (80048a8 <AT_Send+0x2e8>)
 8004730:	4b57      	ldr	r3, [pc, #348]	@ (8004890 <AT_Send+0x2d0>)
 8004732:	0019      	movs	r1, r3
 8004734:	2003      	movs	r0, #3
 8004736:	f004 ff61 	bl	80095fc <CreateLine>
    ATCommandSend = CWJAP();
 800473a:	230f      	movs	r3, #15
 800473c:	18fc      	adds	r4, r7, r3
 800473e:	f7ff fbeb 	bl	8003f18 <CWJAP>
 8004742:	0003      	movs	r3, r0
 8004744:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004746:	f005 faf5 	bl	8009d34 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	3332      	adds	r3, #50	@ 0x32
 800474e:	001a      	movs	r2, r3
 8004750:	4b4d      	ldr	r3, [pc, #308]	@ (8004888 <AT_Send+0x2c8>)
 8004752:	601a      	str	r2, [r3, #0]
    break;
 8004754:	e08e      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004756:	4a55      	ldr	r2, [pc, #340]	@ (80048ac <AT_Send+0x2ec>)
 8004758:	4b4d      	ldr	r3, [pc, #308]	@ (8004890 <AT_Send+0x2d0>)
 800475a:	0019      	movs	r1, r3
 800475c:	2003      	movs	r0, #3
 800475e:	f004 ff4d 	bl	80095fc <CreateLine>
    ATCommandSend = CWMODE3();
 8004762:	230f      	movs	r3, #15
 8004764:	18fc      	adds	r4, r7, r3
 8004766:	f7ff fc57 	bl	8004018 <CWMODE3>
 800476a:	0003      	movs	r3, r0
 800476c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800476e:	f005 fae1 	bl	8009d34 <HAL_GetTick>
 8004772:	0003      	movs	r3, r0
 8004774:	330a      	adds	r3, #10
 8004776:	001a      	movs	r2, r3
 8004778:	4b43      	ldr	r3, [pc, #268]	@ (8004888 <AT_Send+0x2c8>)
 800477a:	601a      	str	r2, [r3, #0]
    break;
 800477c:	e07a      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800477e:	4a4c      	ldr	r2, [pc, #304]	@ (80048b0 <AT_Send+0x2f0>)
 8004780:	4b43      	ldr	r3, [pc, #268]	@ (8004890 <AT_Send+0x2d0>)
 8004782:	0019      	movs	r1, r3
 8004784:	2003      	movs	r0, #3
 8004786:	f004 ff39 	bl	80095fc <CreateLine>
    ATCommandSend = CWSAP();
 800478a:	230f      	movs	r3, #15
 800478c:	18fc      	adds	r4, r7, r3
 800478e:	f7ff fc63 	bl	8004058 <CWSAP>
 8004792:	0003      	movs	r3, r0
 8004794:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004796:	f005 facd 	bl	8009d34 <HAL_GetTick>
 800479a:	0003      	movs	r3, r0
 800479c:	330a      	adds	r3, #10
 800479e:	001a      	movs	r2, r3
 80047a0:	4b39      	ldr	r3, [pc, #228]	@ (8004888 <AT_Send+0x2c8>)
 80047a2:	601a      	str	r2, [r3, #0]
    break;
 80047a4:	e066      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 80047a6:	4a43      	ldr	r2, [pc, #268]	@ (80048b4 <AT_Send+0x2f4>)
 80047a8:	4b39      	ldr	r3, [pc, #228]	@ (8004890 <AT_Send+0x2d0>)
 80047aa:	0019      	movs	r1, r3
 80047ac:	2003      	movs	r0, #3
 80047ae:	f004 ff25 	bl	80095fc <CreateLine>
    ATCommandSend = CIPMUX();
 80047b2:	230f      	movs	r3, #15
 80047b4:	18fc      	adds	r4, r7, r3
 80047b6:	f7ff fc6f 	bl	8004098 <CIPMUX>
 80047ba:	0003      	movs	r3, r0
 80047bc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047be:	f005 fab9 	bl	8009d34 <HAL_GetTick>
 80047c2:	0003      	movs	r3, r0
 80047c4:	330a      	adds	r3, #10
 80047c6:	001a      	movs	r2, r3
 80047c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004888 <AT_Send+0x2c8>)
 80047ca:	601a      	str	r2, [r3, #0]
    break;
 80047cc:	e052      	b.n	8004874 <AT_Send+0x2b4>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 80047ce:	4a37      	ldr	r2, [pc, #220]	@ (80048ac <AT_Send+0x2ec>)
 80047d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004890 <AT_Send+0x2d0>)
 80047d2:	0019      	movs	r1, r3
 80047d4:	2003      	movs	r0, #3
 80047d6:	f004 ff11 	bl	80095fc <CreateLine>
    ATCommandSend = WEBSERVER();
 80047da:	230f      	movs	r3, #15
 80047dc:	18fc      	adds	r4, r7, r3
 80047de:	f7ff fc7b 	bl	80040d8 <WEBSERVER>
 80047e2:	0003      	movs	r3, r0
 80047e4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047e6:	f005 faa5 	bl	8009d34 <HAL_GetTick>
 80047ea:	0003      	movs	r3, r0
 80047ec:	330a      	adds	r3, #10
 80047ee:	001a      	movs	r2, r3
 80047f0:	4b25      	ldr	r3, [pc, #148]	@ (8004888 <AT_Send+0x2c8>)
 80047f2:	601a      	str	r2, [r3, #0]
    break;
 80047f4:	e03e      	b.n	8004874 <AT_Send+0x2b4>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80047f6:	4a2d      	ldr	r2, [pc, #180]	@ (80048ac <AT_Send+0x2ec>)
 80047f8:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <AT_Send+0x2d0>)
 80047fa:	0019      	movs	r1, r3
 80047fc:	2003      	movs	r0, #3
 80047fe:	f004 fefd 	bl	80095fc <CreateLine>
    ATCommandSend = HTTPCPOST();
 8004802:	230f      	movs	r3, #15
 8004804:	18fc      	adds	r4, r7, r3
 8004806:	f7ff fc87 	bl	8004118 <HTTPCPOST>
 800480a:	0003      	movs	r3, r0
 800480c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800480e:	f005 fa91 	bl	8009d34 <HAL_GetTick>
 8004812:	0003      	movs	r3, r0
 8004814:	33f5      	adds	r3, #245	@ 0xf5
 8004816:	33ff      	adds	r3, #255	@ 0xff
 8004818:	001a      	movs	r2, r3
 800481a:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <AT_Send+0x2c8>)
 800481c:	601a      	str	r2, [r3, #0]
    break;
 800481e:	e029      	b.n	8004874 <AT_Send+0x2b4>

  case AT_SENDDATA:
    Debug("Send the data");
 8004820:	4a25      	ldr	r2, [pc, #148]	@ (80048b8 <AT_Send+0x2f8>)
 8004822:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <AT_Send+0x2d0>)
 8004824:	0019      	movs	r1, r3
 8004826:	2003      	movs	r0, #3
 8004828:	f004 fee8 	bl	80095fc <CreateLine>
    ATCommandSend = SENDDATA();
 800482c:	230f      	movs	r3, #15
 800482e:	18fc      	adds	r4, r7, r3
 8004830:	f7ff fd0e 	bl	8004250 <SENDDATA>
 8004834:	0003      	movs	r3, r0
 8004836:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004838:	f005 fa7c 	bl	8009d34 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	33f5      	adds	r3, #245	@ 0xf5
 8004840:	33ff      	adds	r3, #255	@ 0xff
 8004842:	001a      	movs	r2, r3
 8004844:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <AT_Send+0x2c8>)
 8004846:	601a      	str	r2, [r3, #0]
    break;
 8004848:	e014      	b.n	8004874 <AT_Send+0x2b4>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800484a:	4a1c      	ldr	r2, [pc, #112]	@ (80048bc <AT_Send+0x2fc>)
 800484c:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <AT_Send+0x2d0>)
 800484e:	0019      	movs	r1, r3
 8004850:	2003      	movs	r0, #3
 8004852:	f004 fed3 	bl	80095fc <CreateLine>
    ATCommandSend = SLEEP();
 8004856:	230f      	movs	r3, #15
 8004858:	18fc      	adds	r4, r7, r3
 800485a:	f7ff fda5 	bl	80043a8 <SLEEP>
 800485e:	0003      	movs	r3, r0
 8004860:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004862:	f005 fa67 	bl	8009d34 <HAL_GetTick>
 8004866:	0003      	movs	r3, r0
 8004868:	330a      	adds	r3, #10
 800486a:	001a      	movs	r2, r3
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <AT_Send+0x2c8>)
 800486e:	601a      	str	r2, [r3, #0]
    break;
 8004870:	e000      	b.n	8004874 <AT_Send+0x2b4>
  break;
 8004872:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004874:	230f      	movs	r3, #15
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	781b      	ldrb	r3, [r3, #0]
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b005      	add	sp, #20
 8004880:	bd90      	pop	{r4, r7, pc}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	0801b88c 	.word	0x0801b88c
 8004888:	200007dc 	.word	0x200007dc
 800488c:	0801afa0 	.word	0x0801afa0
 8004890:	0801ac40 	.word	0x0801ac40
 8004894:	0801afb4 	.word	0x0801afb4
 8004898:	0801afc8 	.word	0x0801afc8
 800489c:	0801afd8 	.word	0x0801afd8
 80048a0:	0801afec 	.word	0x0801afec
 80048a4:	0801b004 	.word	0x0801b004
 80048a8:	0801b01c 	.word	0x0801b01c
 80048ac:	0801b030 	.word	0x0801b030
 80048b0:	0801b04c 	.word	0x0801b04c
 80048b4:	0801b068 	.word	0x0801b068
 80048b8:	0801b08c 	.word	0x0801b08c
 80048bc:	0801b09c 	.word	0x0801b09c

080048c0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80048c6:	1dfb      	adds	r3, r7, #7
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80048cc:	4b79      	ldr	r3, [pc, #484]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b05      	cmp	r3, #5
 80048d2:	d900      	bls.n	80048d6 <ESP_WakeTest+0x16>
 80048d4:	e0d4      	b.n	8004a80 <ESP_WakeTest+0x1c0>
 80048d6:	009a      	lsls	r2, r3, #2
 80048d8:	4b77      	ldr	r3, [pc, #476]	@ (8004ab8 <ESP_WakeTest+0x1f8>)
 80048da:	18d3      	adds	r3, r2, r3
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80048e0:	4b76      	ldr	r3, [pc, #472]	@ (8004abc <ESP_WakeTest+0x1fc>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2201      	movs	r2, #1
 80048e6:	4053      	eors	r3, r2
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d036      	beq.n	800495c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80048ee:	2380      	movs	r3, #128	@ 0x80
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4873      	ldr	r0, [pc, #460]	@ (8004ac0 <ESP_WakeTest+0x200>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	0019      	movs	r1, r3
 80048f8:	f006 fdbb 	bl	800b472 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80048fc:	2032      	movs	r0, #50	@ 0x32
 80048fe:	f005 fa23 	bl	8009d48 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004902:	2380      	movs	r3, #128	@ 0x80
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	486e      	ldr	r0, [pc, #440]	@ (8004ac0 <ESP_WakeTest+0x200>)
 8004908:	2201      	movs	r2, #1
 800490a:	0019      	movs	r1, r3
 800490c:	f006 fdb1 	bl	800b472 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004910:	200a      	movs	r0, #10
 8004912:	f005 fa19 	bl	8009d48 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004916:	4b6b      	ldr	r3, [pc, #428]	@ (8004ac4 <ESP_WakeTest+0x204>)
 8004918:	2200      	movs	r2, #0
 800491a:	2101      	movs	r1, #1
 800491c:	0018      	movs	r0, r3
 800491e:	f006 fda8 	bl	800b472 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004922:	200a      	movs	r0, #10
 8004924:	f005 fa10 	bl	8009d48 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004928:	4b66      	ldr	r3, [pc, #408]	@ (8004ac4 <ESP_WakeTest+0x204>)
 800492a:	2201      	movs	r2, #1
 800492c:	2102      	movs	r1, #2
 800492e:	0018      	movs	r0, r3
 8004930:	f006 fd9f 	bl	800b472 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004934:	200a      	movs	r0, #10
 8004936:	f005 fa07 	bl	8009d48 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800493a:	4b62      	ldr	r3, [pc, #392]	@ (8004ac4 <ESP_WakeTest+0x204>)
 800493c:	2201      	movs	r2, #1
 800493e:	2101      	movs	r1, #1
 8004940:	0018      	movs	r0, r3
 8004942:	f006 fd96 	bl	800b472 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004946:	f005 f9f5 	bl	8009d34 <HAL_GetTick>
 800494a:	0003      	movs	r3, r0
 800494c:	22af      	movs	r2, #175	@ 0xaf
 800494e:	0092      	lsls	r2, r2, #2
 8004950:	189a      	adds	r2, r3, r2
 8004952:	4b5d      	ldr	r3, [pc, #372]	@ (8004ac8 <ESP_WakeTest+0x208>)
 8004954:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004956:	4b59      	ldr	r3, [pc, #356]	@ (8004abc <ESP_WakeTest+0x1fc>)
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800495c:	4b5b      	ldr	r3, [pc, #364]	@ (8004acc <ESP_WakeTest+0x20c>)
 800495e:	21ff      	movs	r1, #255	@ 0xff
 8004960:	0018      	movs	r0, r3
 8004962:	f7fe ff35 	bl	80037d0 <ESP_Receive>
 8004966:	1e03      	subs	r3, r0, #0
 8004968:	d100      	bne.n	800496c <ESP_WakeTest+0xac>
 800496a:	e099      	b.n	8004aa0 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 800496c:	4b51      	ldr	r3, [pc, #324]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004972:	e095      	b.n	8004aa0 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004974:	4b54      	ldr	r3, [pc, #336]	@ (8004ac8 <ESP_WakeTest+0x208>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	0018      	movs	r0, r3
 800497a:	f004 fde9 	bl	8009550 <TimestampIsReached>
 800497e:	1e03      	subs	r3, r0, #0
 8004980:	d100      	bne.n	8004984 <ESP_WakeTest+0xc4>
 8004982:	e08f      	b.n	8004aa4 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004984:	4b52      	ldr	r3, [pc, #328]	@ (8004ad0 <ESP_WakeTest+0x210>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	1dfc      	adds	r4, r7, #7
 800498a:	0018      	movs	r0, r3
 800498c:	f7ff fe18 	bl	80045c0 <AT_Send>
 8004990:	0003      	movs	r3, r0
 8004992:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004994:	1dfb      	adds	r3, r7, #7
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d100      	bne.n	800499e <ESP_WakeTest+0xde>
 800499c:	e082      	b.n	8004aa4 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 800499e:	4b45      	ldr	r3, [pc, #276]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 80049a0:	2202      	movs	r2, #2
 80049a2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80049a4:	e07e      	b.n	8004aa4 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80049a6:	4b48      	ldr	r3, [pc, #288]	@ (8004ac8 <ESP_WakeTest+0x208>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f004 fdd0 	bl	8009550 <TimestampIsReached>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d100      	bne.n	80049b6 <ESP_WakeTest+0xf6>
 80049b4:	e078      	b.n	8004aa8 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80049b6:	4b47      	ldr	r3, [pc, #284]	@ (8004ad4 <ESP_WakeTest+0x214>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff fd14 	bl	80043e8 <DMA_ProcessBuffer>
 80049c0:	0003      	movs	r3, r0
 80049c2:	001a      	movs	r2, r3
 80049c4:	4b44      	ldr	r3, [pc, #272]	@ (8004ad8 <ESP_WakeTest+0x218>)
 80049c6:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80049c8:	4b43      	ldr	r3, [pc, #268]	@ (8004ad8 <ESP_WakeTest+0x218>)
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	4b41      	ldr	r3, [pc, #260]	@ (8004ad4 <ESP_WakeTest+0x214>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	1dbc      	adds	r4, r7, #6
 80049d2:	0019      	movs	r1, r3
 80049d4:	0010      	movs	r0, r2
 80049d6:	f7ff fdbd 	bl	8004554 <ATCompare>
 80049da:	0003      	movs	r3, r0
 80049dc:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80049de:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad8 <ESP_WakeTest+0x218>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d102      	bne.n	80049ec <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 80049e6:	4b33      	ldr	r3, [pc, #204]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80049ec:	4b3a      	ldr	r3, [pc, #232]	@ (8004ad8 <ESP_WakeTest+0x218>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b07      	cmp	r3, #7
 80049f2:	d104      	bne.n	80049fe <ESP_WakeTest+0x13e>
          StartProg();
 80049f4:	f7ff f81c 	bl	8003a30 <StartProg>
          TestState = ESP_TEST_BOOT;
 80049f8:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 80049fa:	2205      	movs	r2, #5
 80049fc:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80049fe:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <ESP_WakeTest+0x218>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d109      	bne.n	8004a1a <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004a06:	f005 f995 	bl	8009d34 <HAL_GetTick>
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	3332      	adds	r3, #50	@ 0x32
 8004a0e:	001a      	movs	r2, r3
 8004a10:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac8 <ESP_WakeTest+0x208>)
 8004a12:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004a14:	4b27      	ldr	r3, [pc, #156]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004a1a:	1dbb      	adds	r3, r7, #6
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d042      	beq.n	8004aa8 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004a22:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 8004a24:	2203      	movs	r2, #3
 8004a26:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004a28:	e03e      	b.n	8004aa8 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a2c:	22fa      	movs	r2, #250	@ 0xfa
 8004a2e:	0112      	lsls	r2, r2, #4
 8004a30:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004a32:	4b2a      	ldr	r3, [pc, #168]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004a38:	4b28      	ldr	r3, [pc, #160]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a3a:	22fa      	movs	r2, #250	@ 0xfa
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004a40:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 8004a42:	2204      	movs	r2, #4
 8004a44:	701a      	strb	r2, [r3, #0]

      break;
 8004a46:	e030      	b.n	8004aaa <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004a48:	4b25      	ldr	r3, [pc, #148]	@ (8004ae0 <ESP_WakeTest+0x220>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <ESP_WakeTest+0x1fc>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004a54:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac4 <ESP_WakeTest+0x204>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	2101      	movs	r1, #1
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f006 fd09 	bl	800b472 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a60:	2380      	movs	r3, #128	@ 0x80
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	4816      	ldr	r0, [pc, #88]	@ (8004ac0 <ESP_WakeTest+0x200>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	0019      	movs	r1, r3
 8004a6a:	f006 fd02 	bl	800b472 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004a6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <ESP_WakeTest+0x204>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	2102      	movs	r1, #2
 8004a74:	0018      	movs	r0, r3
 8004a76:	f006 fcfc 	bl	800b472 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004a7a:	f001 ffc1 	bl	8006a00 <SetESPMeasurementDone>
      break;
 8004a7e:	e014      	b.n	8004aaa <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004a80:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	e010      	b.n	8004aaa <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004a88:	4b14      	ldr	r3, [pc, #80]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a8a:	22fa      	movs	r2, #250	@ 0xfa
 8004a8c:	0112      	lsls	r2, r2, #4
 8004a8e:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004a90:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a92:	22fa      	movs	r2, #250	@ 0xfa
 8004a94:	0112      	lsls	r2, r2, #4
 8004a96:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004a98:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004a9e:	e004      	b.n	8004aaa <ESP_WakeTest+0x1ea>
      break;
 8004aa0:	46c0      	nop			@ (mov r8, r8)
 8004aa2:	e002      	b.n	8004aaa <ESP_WakeTest+0x1ea>
      break;
 8004aa4:	46c0      	nop			@ (mov r8, r8)
 8004aa6:	e000      	b.n	8004aaa <ESP_WakeTest+0x1ea>
      break;
 8004aa8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b003      	add	sp, #12
 8004ab0:	bd90      	pop	{r4, r7, pc}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	200009e8 	.word	0x200009e8
 8004ab8:	0801b8cc 	.word	0x0801b8cc
 8004abc:	20000527 	.word	0x20000527
 8004ac0:	50000800 	.word	0x50000800
 8004ac4:	50001c00 	.word	0x50001c00
 8004ac8:	200007dc 	.word	0x200007dc
 8004acc:	20000428 	.word	0x20000428
 8004ad0:	200009e6 	.word	0x200009e6
 8004ad4:	200009e5 	.word	0x200009e5
 8004ad8:	2000005a 	.word	0x2000005a
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	20000000 	.word	0x20000000

08004ae4 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004aea:	1dfb      	adds	r3, r7, #7
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004af0:	4be0      	ldr	r3, [pc, #896]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b0e      	cmp	r3, #14
 8004af6:	d900      	bls.n	8004afa <ESP_Upkeep+0x16>
 8004af8:	e22f      	b.n	8004f5a <ESP_Upkeep+0x476>
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	4bde      	ldr	r3, [pc, #888]	@ (8004e78 <ESP_Upkeep+0x394>)
 8004afe:	18d3      	adds	r3, r2, r3
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004b04:	4bdb      	ldr	r3, [pc, #876]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
      break;
 8004b0a:	e23d      	b.n	8004f88 <ESP_Upkeep+0x4a4>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004b0c:	4bdb      	ldr	r3, [pc, #876]	@ (8004e7c <ESP_Upkeep+0x398>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	4053      	eors	r3, r2
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d036      	beq.n	8004b88 <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004b1a:	2380      	movs	r3, #128	@ 0x80
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	48d8      	ldr	r0, [pc, #864]	@ (8004e80 <ESP_Upkeep+0x39c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	0019      	movs	r1, r3
 8004b24:	f006 fca5 	bl	800b472 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004b28:	2032      	movs	r0, #50	@ 0x32
 8004b2a:	f005 f90d 	bl	8009d48 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004b2e:	2380      	movs	r3, #128	@ 0x80
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	48d3      	ldr	r0, [pc, #844]	@ (8004e80 <ESP_Upkeep+0x39c>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	0019      	movs	r1, r3
 8004b38:	f006 fc9b 	bl	800b472 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b3c:	200a      	movs	r0, #10
 8004b3e:	f005 f903 	bl	8009d48 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004b42:	4bd0      	ldr	r3, [pc, #832]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	2101      	movs	r1, #1
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f006 fc92 	bl	800b472 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b4e:	200a      	movs	r0, #10
 8004b50:	f005 f8fa 	bl	8009d48 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004b54:	4bcb      	ldr	r3, [pc, #812]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	2102      	movs	r1, #2
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f006 fc89 	bl	800b472 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b60:	200a      	movs	r0, #10
 8004b62:	f005 f8f1 	bl	8009d48 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004b66:	4bc7      	ldr	r3, [pc, #796]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f006 fc80 	bl	800b472 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004b72:	f005 f8df 	bl	8009d34 <HAL_GetTick>
 8004b76:	0003      	movs	r3, r0
 8004b78:	22af      	movs	r2, #175	@ 0xaf
 8004b7a:	0092      	lsls	r2, r2, #2
 8004b7c:	189a      	adds	r2, r3, r2
 8004b7e:	4bc2      	ldr	r3, [pc, #776]	@ (8004e88 <ESP_Upkeep+0x3a4>)
 8004b80:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004b82:	4bbe      	ldr	r3, [pc, #760]	@ (8004e7c <ESP_Upkeep+0x398>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004b88:	4bc0      	ldr	r3, [pc, #768]	@ (8004e8c <ESP_Upkeep+0x3a8>)
 8004b8a:	21ff      	movs	r1, #255	@ 0xff
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fe fe1f 	bl	80037d0 <ESP_Receive>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d100      	bne.n	8004b98 <ESP_Upkeep+0xb4>
 8004b96:	e1ec      	b.n	8004f72 <ESP_Upkeep+0x48e>
        EspState = ESP_STATE_MODE_SELECT;
 8004b98:	4bb6      	ldr	r3, [pc, #728]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004b9a:	220b      	movs	r2, #11
 8004b9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b9e:	e1e8      	b.n	8004f72 <ESP_Upkeep+0x48e>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004ba0:	4bbb      	ldr	r3, [pc, #748]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004ba2:	2209      	movs	r2, #9
 8004ba4:	2110      	movs	r1, #16
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f013 f932 	bl	8017e10 <memset>
      if(!InitIsDone || WifiReset){
 8004bac:	4bb9      	ldr	r3, [pc, #740]	@ (8004e94 <ESP_Upkeep+0x3b0>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	4053      	eors	r3, r2
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <ESP_Upkeep+0xde>
 8004bba:	4bb7      	ldr	r3, [pc, #732]	@ (8004e98 <ESP_Upkeep+0x3b4>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d018      	beq.n	8004bf4 <ESP_Upkeep+0x110>
        memcpy(ATCommandArray, AT_INIT, 8);
 8004bc2:	49b6      	ldr	r1, [pc, #728]	@ (8004e9c <ESP_Upkeep+0x3b8>)
 8004bc4:	4bb2      	ldr	r3, [pc, #712]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004bc6:	2208      	movs	r2, #8
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f013 f9eb 	bl	8017fa4 <memcpy>
        EspState = ESP_STATE_SEND;
 8004bce:	4ba9      	ldr	r3, [pc, #676]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004bd4:	4bb2      	ldr	r3, [pc, #712]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004bda:	4bb2      	ldr	r3, [pc, #712]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004be0:	4baf      	ldr	r3, [pc, #700]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	001a      	movs	r2, r3
 8004be6:	4baa      	ldr	r3, [pc, #680]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004be8:	5c9a      	ldrb	r2, [r3, r2]
 8004bea:	4baf      	ldr	r3, [pc, #700]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004bec:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004bee:	4baf      	ldr	r3, [pc, #700]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004bf4:	4ba7      	ldr	r3, [pc, #668]	@ (8004e94 <ESP_Upkeep+0x3b0>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01f      	beq.n	8004c3c <ESP_Upkeep+0x158>
 8004bfc:	4bac      	ldr	r3, [pc, #688]	@ (8004eb0 <ESP_Upkeep+0x3cc>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2201      	movs	r2, #1
 8004c02:	4053      	eors	r3, r2
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <ESP_Upkeep+0x158>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004c0a:	4ba1      	ldr	r3, [pc, #644]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004c0c:	4aa9      	ldr	r2, [pc, #676]	@ (8004eb4 <ESP_Upkeep+0x3d0>)
 8004c0e:	6811      	ldr	r1, [r2, #0]
 8004c10:	6019      	str	r1, [r3, #0]
 8004c12:	8892      	ldrh	r2, [r2, #4]
 8004c14:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004c16:	4b97      	ldr	r3, [pc, #604]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004c18:	2204      	movs	r2, #4
 8004c1a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004c1c:	4ba0      	ldr	r3, [pc, #640]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004c22:	4ba0      	ldr	r3, [pc, #640]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004c28:	4b9d      	ldr	r3, [pc, #628]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	4b98      	ldr	r3, [pc, #608]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004c30:	5c9a      	ldrb	r2, [r3, r2]
 8004c32:	4b9d      	ldr	r3, [pc, #628]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004c34:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c36:	4b9d      	ldr	r3, [pc, #628]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004c3c:	4b95      	ldr	r3, [pc, #596]	@ (8004e94 <ESP_Upkeep+0x3b0>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d027      	beq.n	8004c94 <ESP_Upkeep+0x1b0>
 8004c44:	4b9a      	ldr	r3, [pc, #616]	@ (8004eb0 <ESP_Upkeep+0x3cc>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d023      	beq.n	8004c94 <ESP_Upkeep+0x1b0>
 8004c4c:	4b92      	ldr	r3, [pc, #584]	@ (8004e98 <ESP_Upkeep+0x3b4>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2201      	movs	r2, #1
 8004c52:	4053      	eors	r3, r2
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01c      	beq.n	8004c94 <ESP_Upkeep+0x1b0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004c5a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004c5c:	4a96      	ldr	r2, [pc, #600]	@ (8004eb8 <ESP_Upkeep+0x3d4>)
 8004c5e:	8811      	ldrh	r1, [r2, #0]
 8004c60:	8019      	strh	r1, [r3, #0]
 8004c62:	7892      	ldrb	r2, [r2, #2]
 8004c64:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004c66:	4b83      	ldr	r3, [pc, #524]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004c68:	2204      	movs	r2, #4
 8004c6a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004c72:	4b8c      	ldr	r3, [pc, #560]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004c74:	2202      	movs	r2, #2
 8004c76:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004c78:	2380      	movs	r3, #128	@ 0x80
 8004c7a:	05db      	lsls	r3, r3, #23
 8004c7c:	4a8f      	ldr	r2, [pc, #572]	@ (8004ebc <ESP_Upkeep+0x3d8>)
 8004c7e:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004c80:	4b87      	ldr	r3, [pc, #540]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	001a      	movs	r2, r3
 8004c86:	4b82      	ldr	r3, [pc, #520]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004c88:	5c9a      	ldrb	r2, [r3, r2]
 8004c8a:	4b87      	ldr	r3, [pc, #540]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004c8c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c8e:	4b87      	ldr	r3, [pc, #540]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004c94:	4b8a      	ldr	r3, [pc, #552]	@ (8004ec0 <ESP_Upkeep+0x3dc>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d100      	bne.n	8004c9e <ESP_Upkeep+0x1ba>
 8004c9c:	e16b      	b.n	8004f76 <ESP_Upkeep+0x492>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8004c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004ca0:	4a88      	ldr	r2, [pc, #544]	@ (8004ec4 <ESP_Upkeep+0x3e0>)
 8004ca2:	6811      	ldr	r1, [r2, #0]
 8004ca4:	6019      	str	r1, [r3, #0]
 8004ca6:	7912      	ldrb	r2, [r2, #4]
 8004ca8:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004caa:	4b72      	ldr	r3, [pc, #456]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004cac:	2204      	movs	r2, #4
 8004cae:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8004cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004cb8:	2203      	movs	r2, #3
 8004cba:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	05db      	lsls	r3, r3, #23
 8004cc0:	4a7e      	ldr	r2, [pc, #504]	@ (8004ebc <ESP_Upkeep+0x3d8>)
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004cc4:	4b76      	ldr	r3, [pc, #472]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	001a      	movs	r2, r3
 8004cca:	4b71      	ldr	r3, [pc, #452]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004ccc:	5c9a      	ldrb	r2, [r3, r2]
 8004cce:	4b76      	ldr	r3, [pc, #472]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004cd0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004cd2:	4b76      	ldr	r3, [pc, #472]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004cd8:	e14d      	b.n	8004f76 <ESP_Upkeep+0x492>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004cda:	4b73      	ldr	r3, [pc, #460]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	1dfc      	adds	r4, r7, #7
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7ff fc6d 	bl	80045c0 <AT_Send>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004cea:	1dfb      	adds	r3, r7, #7
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d100      	bne.n	8004cf4 <ESP_Upkeep+0x210>
 8004cf2:	e142      	b.n	8004f7a <ESP_Upkeep+0x496>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004cf4:	4b5f      	ldr	r3, [pc, #380]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004cfa:	e13e      	b.n	8004f7a <ESP_Upkeep+0x496>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004cfc:	4b62      	ldr	r3, [pc, #392]	@ (8004e88 <ESP_Upkeep+0x3a4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f004 fc25 	bl	8009550 <TimestampIsReached>
 8004d06:	1e03      	subs	r3, r0, #0
 8004d08:	d100      	bne.n	8004d0c <ESP_Upkeep+0x228>
 8004d0a:	e138      	b.n	8004f7e <ESP_Upkeep+0x49a>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004d0c:	4b67      	ldr	r3, [pc, #412]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7ff fb69 	bl	80043e8 <DMA_ProcessBuffer>
 8004d16:	0003      	movs	r3, r0
 8004d18:	001a      	movs	r2, r3
 8004d1a:	4b6b      	ldr	r3, [pc, #428]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d1c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	4b62      	ldr	r3, [pc, #392]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	1dbc      	adds	r4, r7, #6
 8004d28:	0019      	movs	r1, r3
 8004d2a:	0010      	movs	r0, r2
 8004d2c:	f7ff fc12 	bl	8004554 <ATCompare>
 8004d30:	0003      	movs	r3, r0
 8004d32:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004d34:	4b64      	ldr	r3, [pc, #400]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d102      	bne.n	8004d42 <ESP_Upkeep+0x25e>
          EspState = ESP_STATE_SEND;
 8004d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004d3e:	2204      	movs	r2, #4
 8004d40:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004d42:	4b61      	ldr	r3, [pc, #388]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d106      	bne.n	8004d58 <ESP_Upkeep+0x274>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004d4a:	f004 fff3 	bl	8009d34 <HAL_GetTick>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	330a      	adds	r3, #10
 8004d52:	001a      	movs	r2, r3
 8004d54:	4b4c      	ldr	r3, [pc, #304]	@ (8004e88 <ESP_Upkeep+0x3a4>)
 8004d56:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004d58:	4b5b      	ldr	r3, [pc, #364]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b06      	cmp	r3, #6
 8004d5e:	d116      	bne.n	8004d8e <ESP_Upkeep+0x2aa>
          if(ATCommand != AT_SENDDATA){
 8004d60:	4b51      	ldr	r3, [pc, #324]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b0e      	cmp	r3, #14
 8004d66:	d003      	beq.n	8004d70 <ESP_Upkeep+0x28c>
            EspState = ESP_STATE_SEND;
 8004d68:	4b42      	ldr	r3, [pc, #264]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e00e      	b.n	8004d8e <ESP_Upkeep+0x2aa>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004d70:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004d72:	220d      	movs	r2, #13
 8004d74:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004d76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4b48      	ldr	r3, [pc, #288]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004d80:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004d82:	4b4a      	ldr	r3, [pc, #296]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004d84:	2202      	movs	r2, #2
 8004d86:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004d88:	4b3a      	ldr	r3, [pc, #232]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004d8e:	1dbb      	adds	r3, r7, #6
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d100      	bne.n	8004d98 <ESP_Upkeep+0x2b4>
 8004d96:	e0f2      	b.n	8004f7e <ESP_Upkeep+0x49a>
          EspState = ESP_STATE_NEXT_AT;
 8004d98:	4b36      	ldr	r3, [pc, #216]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004d9e:	e0ee      	b.n	8004f7e <ESP_Upkeep+0x49a>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004da0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004daa:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004dac:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	001a      	movs	r2, r3
 8004db2:	4b37      	ldr	r3, [pc, #220]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004db4:	5c9a      	ldrb	r2, [r3, r2]
 8004db6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004db8:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004dba:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d102      	bne.n	8004dc8 <ESP_Upkeep+0x2e4>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004dc8:	4b37      	ldr	r3, [pc, #220]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b0d      	cmp	r3, #13
 8004dce:	d102      	bne.n	8004dd6 <ESP_Upkeep+0x2f2>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004dd6:	4b34      	ldr	r3, [pc, #208]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b0d      	cmp	r3, #13
 8004ddc:	d006      	beq.n	8004dec <ESP_Upkeep+0x308>
 8004dde:	4b32      	ldr	r3, [pc, #200]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d002      	beq.n	8004dec <ESP_Upkeep+0x308>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004de6:	4b31      	ldr	r3, [pc, #196]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004dec:	4b21      	ldr	r3, [pc, #132]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004dee:	2204      	movs	r2, #4
 8004df0:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004df2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d000      	beq.n	8004dfc <ESP_Upkeep+0x318>
 8004dfa:	e0c2      	b.n	8004f82 <ESP_Upkeep+0x49e>
        if(Mode == AT_MODE_SEND){
 8004dfc:	4b29      	ldr	r3, [pc, #164]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d10f      	bne.n	8004e24 <ESP_Upkeep+0x340>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004e04:	f004 ff96 	bl	8009d34 <HAL_GetTick>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	4a30      	ldr	r2, [pc, #192]	@ (8004ecc <ESP_Upkeep+0x3e8>)
 8004e0c:	189a      	adds	r2, r3, r2
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <ESP_Upkeep+0x3a4>)
 8004e10:	601a      	str	r2, [r3, #0]
          TIM2 -> CCR4 = 4000;
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	05db      	lsls	r3, r3, #23
 8004e16:	22fa      	movs	r2, #250	@ 0xfa
 8004e18:	0112      	lsls	r2, r2, #4
 8004e1a:	641a      	str	r2, [r3, #64]	@ 0x40
          EspState = ESP_STATE_DEINIT;
 8004e1c:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004e1e:	220d      	movs	r2, #13
 8004e20:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8004e22:	e0ae      	b.n	8004f82 <ESP_Upkeep+0x49e>
          EspState = ESP_STATE_RESET;
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004e26:	2209      	movs	r2, #9
 8004e28:	701a      	strb	r2, [r3, #0]
    break;
 8004e2a:	e0aa      	b.n	8004f82 <ESP_Upkeep+0x49e>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <ESP_Upkeep+0x398>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004e32:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	2101      	movs	r1, #1
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f006 fb1a 	bl	800b472 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f004 ff82 	bl	8009d48 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004e44:	2380      	movs	r3, #128	@ 0x80
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	480d      	ldr	r0, [pc, #52]	@ (8004e80 <ESP_Upkeep+0x39c>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	f006 fb10 	bl	800b472 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e52:	2001      	movs	r0, #1
 8004e54:	f004 ff78 	bl	8009d48 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2102      	movs	r1, #2
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f006 fb07 	bl	800b472 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004e66:	2209      	movs	r2, #9
 8004e68:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f004 ff6c 	bl	8009d48 <HAL_Delay>
      break;
 8004e70:	e08a      	b.n	8004f88 <ESP_Upkeep+0x4a4>
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	20000059 	.word	0x20000059
 8004e78:	0801b8e4 	.word	0x0801b8e4
 8004e7c:	20000527 	.word	0x20000527
 8004e80:	50000800 	.word	0x50000800
 8004e84:	50001c00 	.word	0x50001c00
 8004e88:	200007dc 	.word	0x200007dc
 8004e8c:	20000428 	.word	0x20000428
 8004e90:	200007d0 	.word	0x200007d0
 8004e94:	20000528 	.word	0x20000528
 8004e98:	20000529 	.word	0x20000529
 8004e9c:	20000040 	.word	0x20000040
 8004ea0:	200007da 	.word	0x200007da
 8004ea4:	200009e7 	.word	0x200009e7
 8004ea8:	200009e6 	.word	0x200009e6
 8004eac:	200009e5 	.word	0x200009e5
 8004eb0:	2000052b 	.word	0x2000052b
 8004eb4:	2000004c 	.word	0x2000004c
 8004eb8:	20000048 	.word	0x20000048
 8004ebc:	00000bb8 	.word	0x00000bb8
 8004ec0:	2000052a 	.word	0x2000052a
 8004ec4:	20000054 	.word	0x20000054
 8004ec8:	2000005b 	.word	0x2000005b
 8004ecc:	000493e0 	.word	0x000493e0

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8004ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8004f90 <ESP_Upkeep+0x4ac>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f004 fb3b 	bl	8009550 <TimestampIsReached>
 8004eda:	1e03      	subs	r3, r0, #0
 8004edc:	d103      	bne.n	8004ee6 <ESP_Upkeep+0x402>
 8004ede:	4b2d      	ldr	r3, [pc, #180]	@ (8004f94 <ESP_Upkeep+0x4b0>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04f      	beq.n	8004f86 <ESP_Upkeep+0x4a2>
        if(Mode == AT_MODE_INIT){
 8004ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f98 <ESP_Upkeep+0x4b4>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <ESP_Upkeep+0x416>
          InitIsDone = true;
 8004eee:	4b2b      	ldr	r3, [pc, #172]	@ (8004f9c <ESP_Upkeep+0x4b8>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004ef6:	220b      	movs	r2, #11
 8004ef8:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004efa:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <ESP_Upkeep+0x4b4>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d105      	bne.n	8004f0e <ESP_Upkeep+0x42a>
          ConnectionMade = true;
 8004f02:	4b28      	ldr	r3, [pc, #160]	@ (8004fa4 <ESP_Upkeep+0x4c0>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004f08:	4b25      	ldr	r3, [pc, #148]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f0a:	220b      	movs	r2, #11
 8004f0c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8004f0e:	4b22      	ldr	r3, [pc, #136]	@ (8004f98 <ESP_Upkeep+0x4b4>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d102      	bne.n	8004f1c <ESP_Upkeep+0x438>
          EspState = ESP_STATE_INIT;
 8004f16:	4b22      	ldr	r3, [pc, #136]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f18:	2202      	movs	r2, #2
 8004f1a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <ESP_Upkeep+0x4b4>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d130      	bne.n	8004f86 <ESP_Upkeep+0x4a2>
          EspState = ESP_STATE_CONFIG;
 8004f24:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f26:	220e      	movs	r2, #14
 8004f28:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 8004f2a:	e02c      	b.n	8004f86 <ESP_Upkeep+0x4a2>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <ESP_Upkeep+0x4c4>)
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fac <ESP_Upkeep+0x4c8>)
 8004f30:	0019      	movs	r1, r3
 8004f32:	2003      	movs	r0, #3
 8004f34:	f004 fb62 	bl	80095fc <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8004f38:	f011 fcca 	bl	80168d0 <GetUsbRxPointer>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f000 f8ac 	bl	800509c <Process_PC_Config>

      break;
 8004f44:	e020      	b.n	8004f88 <ESP_Upkeep+0x4a4>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004f46:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb0 <ESP_Upkeep+0x4cc>)
 8004f48:	4b18      	ldr	r3, [pc, #96]	@ (8004fac <ESP_Upkeep+0x4c8>)
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	f004 fb55 	bl	80095fc <CreateLine>
      EspState = ESP_STATE_INIT;
 8004f52:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f54:	2202      	movs	r2, #2
 8004f56:	701a      	strb	r2, [r3, #0]
      break;
 8004f58:	e016      	b.n	8004f88 <ESP_Upkeep+0x4a4>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 8004f5a:	4a16      	ldr	r2, [pc, #88]	@ (8004fb4 <ESP_Upkeep+0x4d0>)
 8004f5c:	4b13      	ldr	r3, [pc, #76]	@ (8004fac <ESP_Upkeep+0x4c8>)
 8004f5e:	0019      	movs	r1, r3
 8004f60:	2003      	movs	r0, #3
 8004f62:	f004 fb4b 	bl	80095fc <CreateLine>
      EspState = ESP_STATE_ERROR;
 8004f66:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f68:	2207      	movs	r2, #7
 8004f6a:	701a      	strb	r2, [r3, #0]
      break;
 8004f6c:	e00c      	b.n	8004f88 <ESP_Upkeep+0x4a4>
      break;
 8004f6e:	46c0      	nop			@ (mov r8, r8)
 8004f70:	e00a      	b.n	8004f88 <ESP_Upkeep+0x4a4>
      break;
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	e008      	b.n	8004f88 <ESP_Upkeep+0x4a4>
    break;
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	e006      	b.n	8004f88 <ESP_Upkeep+0x4a4>
         break;
 8004f7a:	46c0      	nop			@ (mov r8, r8)
 8004f7c:	e004      	b.n	8004f88 <ESP_Upkeep+0x4a4>
      break;
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	e002      	b.n	8004f88 <ESP_Upkeep+0x4a4>
    break;
 8004f82:	46c0      	nop			@ (mov r8, r8)
 8004f84:	e000      	b.n	8004f88 <ESP_Upkeep+0x4a4>
      break;
 8004f86:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004f88:	46c0      	nop			@ (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b003      	add	sp, #12
 8004f8e:	bd90      	pop	{r4, r7, pc}
 8004f90:	200007dc 	.word	0x200007dc
 8004f94:	2000052a 	.word	0x2000052a
 8004f98:	200009e7 	.word	0x200009e7
 8004f9c:	20000528 	.word	0x20000528
 8004fa0:	20000059 	.word	0x20000059
 8004fa4:	2000052b 	.word	0x2000052b
 8004fa8:	0801b0c0 	.word	0x0801b0c0
 8004fac:	0801ac40 	.word	0x0801ac40
 8004fb0:	0801b0d8 	.word	0x0801b0d8
 8004fb4:	0801b0ec 	.word	0x0801b0ec

08004fb8 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004fc0:	4b09      	ldr	r3, [pc, #36]	@ (8004fe8 <I2CSensors_Init+0x30>)
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004fc6:	4a09      	ldr	r2, [pc, #36]	@ (8004fec <I2CSensors_Init+0x34>)
 8004fc8:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <I2CSensors_Init+0x38>)
 8004fca:	0011      	movs	r1, r2
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 fdd7 	bl	8005b80 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004fd2:	4a06      	ldr	r2, [pc, #24]	@ (8004fec <I2CSensors_Init+0x34>)
 8004fd4:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <I2CSensors_Init+0x38>)
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f000 fc41 	bl	8005860 <Gas_Init>
}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	200009ec 	.word	0x200009ec
 8004fec:	08005049 	.word	0x08005049
 8004ff0:	08004ff5 	.word	0x08004ff5

08004ff4 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004ff4:	b5b0      	push	{r4, r5, r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6039      	str	r1, [r7, #0]
 8004ffc:	0011      	movs	r1, r2
 8004ffe:	1dfb      	adds	r3, r7, #7
 8005000:	1c02      	adds	r2, r0, #0
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	1dbb      	adds	r3, r7, #6
 8005006:	1c0a      	adds	r2, r1, #0
 8005008:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800500a:	4b0e      	ldr	r3, [pc, #56]	@ (8005044 <ReadI2C+0x50>)
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	1dfb      	adds	r3, r7, #7
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	18db      	adds	r3, r3, r3
 8005016:	b299      	uxth	r1, r3
 8005018:	1dbb      	adds	r3, r7, #6
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	250f      	movs	r5, #15
 8005020:	197c      	adds	r4, r7, r5
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	f006 fbde 	bl	800b7e4 <HAL_I2C_Master_Receive_DMA>
 8005028:	0003      	movs	r3, r0
 800502a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800502c:	197b      	adds	r3, r7, r5
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <ReadI2C+0x44>
        return false;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <ReadI2C+0x46>
    }
    return true;
 8005038:	2301      	movs	r3, #1
}
 800503a:	0018      	movs	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	b004      	add	sp, #16
 8005040:	bdb0      	pop	{r4, r5, r7, pc}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	200009ec 	.word	0x200009ec

08005048 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005048:	b5b0      	push	{r4, r5, r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6039      	str	r1, [r7, #0]
 8005050:	0011      	movs	r1, r2
 8005052:	1dfb      	adds	r3, r7, #7
 8005054:	1c02      	adds	r2, r0, #0
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	1dbb      	adds	r3, r7, #6
 800505a:	1c0a      	adds	r2, r1, #0
 800505c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800505e:	4b0e      	ldr	r3, [pc, #56]	@ (8005098 <WriteI2C+0x50>)
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	1dfb      	adds	r3, r7, #7
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	18db      	adds	r3, r3, r3
 800506a:	b299      	uxth	r1, r3
 800506c:	1dbb      	adds	r3, r7, #6
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	250f      	movs	r5, #15
 8005074:	197c      	adds	r4, r7, r5
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	f006 faae 	bl	800b5d8 <HAL_I2C_Master_Transmit_DMA>
 800507c:	0003      	movs	r3, r0
 800507e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005080:	197b      	adds	r3, r7, r5
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <WriteI2C+0x44>
        return false;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <WriteI2C+0x46>
    }
    return true;
 800508c:	2301      	movs	r3, #1
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b004      	add	sp, #16
 8005094:	bdb0      	pop	{r4, r5, r7, pc}
 8005096:	46c0      	nop			@ (mov r8, r8)
 8005098:	200009ec 	.word	0x200009ec

0800509c <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b0c3      	sub	sp, #268	@ 0x10c
 80050a0:	af3e      	add	r7, sp, #248	@ 0xf8
 80050a2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80050a4:	f011 fc34 	bl	8016910 <GetUsbRxDataSize>
 80050a8:	0003      	movs	r3, r0
 80050aa:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d971      	bls.n	8005196 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2123      	movs	r1, #35	@ 0x23
 80050b6:	0018      	movs	r0, r3
 80050b8:	f012 feb2 	bl	8017e20 <strchr>
 80050bc:	0003      	movs	r3, r0
 80050be:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d065      	beq.n	8005192 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	785a      	ldrb	r2, [r3, #1]
 80050ca:	4b34      	ldr	r3, [pc, #208]	@ (800519c <Process_PC_Config+0x100>)
 80050cc:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	789a      	ldrb	r2, [r3, #2]
 80050d2:	4b32      	ldr	r3, [pc, #200]	@ (800519c <Process_PC_Config+0x100>)
 80050d4:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80050d6:	4b31      	ldr	r3, [pc, #196]	@ (800519c <Process_PC_Config+0x100>)
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	3305      	adds	r3, #5
 80050dc:	001a      	movs	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d351      	bcc.n	8005188 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	1cd9      	adds	r1, r3, #3
 80050e8:	4b2c      	ldr	r3, [pc, #176]	@ (800519c <Process_PC_Config+0x100>)
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	001a      	movs	r2, r3
 80050ee:	4b2c      	ldr	r3, [pc, #176]	@ (80051a0 <Process_PC_Config+0x104>)
 80050f0:	0018      	movs	r0, r3
 80050f2:	f012 ff57 	bl	8017fa4 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80050f6:	4b29      	ldr	r3, [pc, #164]	@ (800519c <Process_PC_Config+0x100>)
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	3303      	adds	r3, #3
 80050fc:	001a      	movs	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	189b      	adds	r3, r3, r2
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	b21a      	sxth	r2, r3
 8005108:	4b24      	ldr	r3, [pc, #144]	@ (800519c <Process_PC_Config+0x100>)
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	3304      	adds	r3, #4
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	18cb      	adds	r3, r1, r3
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b21b      	sxth	r3, r3
 8005116:	4313      	orrs	r3, r2
 8005118:	b21b      	sxth	r3, r3
 800511a:	b299      	uxth	r1, r3
 800511c:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <Process_PC_Config+0x100>)
 800511e:	2381      	movs	r3, #129	@ 0x81
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005124:	4a1d      	ldr	r2, [pc, #116]	@ (800519c <Process_PC_Config+0x100>)
 8005126:	2381      	movs	r3, #129	@ 0x81
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	5ad4      	ldrh	r4, [r2, r3]
 800512c:	4b1b      	ldr	r3, [pc, #108]	@ (800519c <Process_PC_Config+0x100>)
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	3303      	adds	r3, #3
 8005132:	b29a      	uxth	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	0011      	movs	r1, r2
 8005138:	0018      	movs	r0, r3
 800513a:	f000 f93f 	bl	80053bc <CRC16_ARC>
 800513e:	0003      	movs	r3, r0
 8005140:	429c      	cmp	r4, r3
 8005142:	d007      	beq.n	8005154 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005144:	4b15      	ldr	r3, [pc, #84]	@ (800519c <Process_PC_Config+0x100>)
 8005146:	785a      	ldrb	r2, [r3, #1]
 8005148:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <Process_PC_Config+0x104>)
 800514a:	0019      	movs	r1, r3
 800514c:	2001      	movs	r0, #1
 800514e:	f000 f8e3 	bl	8005318 <Create_Message>
 8005152:	e016      	b.n	8005182 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005154:	4c11      	ldr	r4, [pc, #68]	@ (800519c <Process_PC_Config+0x100>)
 8005156:	466b      	mov	r3, sp
 8005158:	0018      	movs	r0, r3
 800515a:	0023      	movs	r3, r4
 800515c:	3310      	adds	r3, #16
 800515e:	22f4      	movs	r2, #244	@ 0xf4
 8005160:	0019      	movs	r1, r3
 8005162:	f012 ff1f 	bl	8017fa4 <memcpy>
 8005166:	6820      	ldr	r0, [r4, #0]
 8005168:	6861      	ldr	r1, [r4, #4]
 800516a:	68a2      	ldr	r2, [r4, #8]
 800516c:	68e3      	ldr	r3, [r4, #12]
 800516e:	f000 f819 	bl	80051a4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <Process_PC_Config+0x100>)
 8005174:	7818      	ldrb	r0, [r3, #0]
 8005176:	4b09      	ldr	r3, [pc, #36]	@ (800519c <Process_PC_Config+0x100>)
 8005178:	785a      	ldrb	r2, [r3, #1]
 800517a:	4b09      	ldr	r3, [pc, #36]	@ (80051a0 <Process_PC_Config+0x104>)
 800517c:	0019      	movs	r1, r3
 800517e:	f000 f8cb 	bl	8005318 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005182:	f011 fbad 	bl	80168e0 <ResetUsbRxDataSize>
                return;
 8005186:	e006      	b.n	8005196 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	0018      	movs	r0, r3
 800518c:	f011 fbca 	bl	8016924 <GetUsbRxNextChunk>
 8005190:	e001      	b.n	8005196 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005192:	f011 fba5 	bl	80168e0 <ResetUsbRxDataSize>
        }
    }
}
 8005196:	46bd      	mov	sp, r7
 8005198:	b005      	add	sp, #20
 800519a:	bd90      	pop	{r4, r7, pc}
 800519c:	200009f0 	.word	0x200009f0
 80051a0:	200009f2 	.word	0x200009f2

080051a4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80051a4:	b084      	sub	sp, #16
 80051a6:	b5b0      	push	{r4, r5, r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	2518      	movs	r5, #24
 80051ae:	197c      	adds	r4, r7, r5
 80051b0:	6020      	str	r0, [r4, #0]
 80051b2:	6061      	str	r1, [r4, #4]
 80051b4:	60a2      	str	r2, [r4, #8]
 80051b6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80051b8:	197b      	adds	r3, r7, r5
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80051be:	d100      	bne.n	80051c2 <ProcessCmd+0x1e>
 80051c0:	e06f      	b.n	80052a2 <ProcessCmd+0xfe>
 80051c2:	dd00      	ble.n	80051c6 <ProcessCmd+0x22>
 80051c4:	e08f      	b.n	80052e6 <ProcessCmd+0x142>
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	dc0a      	bgt.n	80051e0 <ProcessCmd+0x3c>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da00      	bge.n	80051d0 <ProcessCmd+0x2c>
 80051ce:	e08a      	b.n	80052e6 <ProcessCmd+0x142>
 80051d0:	2b0c      	cmp	r3, #12
 80051d2:	d900      	bls.n	80051d6 <ProcessCmd+0x32>
 80051d4:	e087      	b.n	80052e6 <ProcessCmd+0x142>
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	4b46      	ldr	r3, [pc, #280]	@ (80052f4 <ProcessCmd+0x150>)
 80051da:	18d3      	adds	r3, r2, r3
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	469f      	mov	pc, r3
 80051e0:	2bfd      	cmp	r3, #253	@ 0xfd
 80051e2:	d058      	beq.n	8005296 <ProcessCmd+0xf2>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 80051e4:	e07f      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80051e6:	2118      	movs	r1, #24
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	001a      	movs	r2, r3
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	1c99      	adds	r1, r3, #2
 80051f2:	4841      	ldr	r0, [pc, #260]	@ (80052f8 <ProcessCmd+0x154>)
 80051f4:	230c      	movs	r3, #12
 80051f6:	f7fe f9e1 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80051fa:	e074      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80051fc:	2118      	movs	r1, #24
 80051fe:	187b      	adds	r3, r7, r1
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	001a      	movs	r2, r3
 8005204:	187b      	adds	r3, r7, r1
 8005206:	1c99      	adds	r1, r3, #2
 8005208:	483c      	ldr	r0, [pc, #240]	@ (80052fc <ProcessCmd+0x158>)
 800520a:	230c      	movs	r3, #12
 800520c:	f7fe f9d6 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005210:	e069      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005212:	2118      	movs	r1, #24
 8005214:	187b      	adds	r3, r7, r1
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	001a      	movs	r2, r3
 800521a:	187b      	adds	r3, r7, r1
 800521c:	1c99      	adds	r1, r3, #2
 800521e:	4838      	ldr	r0, [pc, #224]	@ (8005300 <ProcessCmd+0x15c>)
 8005220:	230c      	movs	r3, #12
 8005222:	f7fe f9cb 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005226:	e05e      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005228:	2118      	movs	r1, #24
 800522a:	187b      	adds	r3, r7, r1
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	001a      	movs	r2, r3
 8005230:	187b      	adds	r3, r7, r1
 8005232:	1c99      	adds	r1, r3, #2
 8005234:	4833      	ldr	r0, [pc, #204]	@ (8005304 <ProcessCmd+0x160>)
 8005236:	230c      	movs	r3, #12
 8005238:	f7fe f9c0 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800523c:	e053      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800523e:	2118      	movs	r1, #24
 8005240:	187b      	adds	r3, r7, r1
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	001a      	movs	r2, r3
 8005246:	187b      	adds	r3, r7, r1
 8005248:	1c99      	adds	r1, r3, #2
 800524a:	482f      	ldr	r0, [pc, #188]	@ (8005308 <ProcessCmd+0x164>)
 800524c:	230c      	movs	r3, #12
 800524e:	f7fe f9b5 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005252:	e048      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005254:	2118      	movs	r1, #24
 8005256:	187b      	adds	r3, r7, r1
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	001a      	movs	r2, r3
 800525c:	187b      	adds	r3, r7, r1
 800525e:	1c99      	adds	r1, r3, #2
 8005260:	482a      	ldr	r0, [pc, #168]	@ (800530c <ProcessCmd+0x168>)
 8005262:	230c      	movs	r3, #12
 8005264:	f7fe f9aa 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005268:	e03d      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800526a:	2118      	movs	r1, #24
 800526c:	187b      	adds	r3, r7, r1
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	001a      	movs	r2, r3
 8005272:	187b      	adds	r3, r7, r1
 8005274:	1c99      	adds	r1, r3, #2
 8005276:	4826      	ldr	r0, [pc, #152]	@ (8005310 <ProcessCmd+0x16c>)
 8005278:	230c      	movs	r3, #12
 800527a:	f7fe f99f 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800527e:	e032      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005280:	2118      	movs	r1, #24
 8005282:	187b      	adds	r3, r7, r1
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	001a      	movs	r2, r3
 8005288:	187b      	adds	r3, r7, r1
 800528a:	1c99      	adds	r1, r3, #2
 800528c:	4821      	ldr	r0, [pc, #132]	@ (8005314 <ProcessCmd+0x170>)
 800528e:	231e      	movs	r3, #30
 8005290:	f7fe f994 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005294:	e027      	b.n	80052e6 <ProcessCmd+0x142>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005296:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <ProcessCmd+0x154>)
 8005298:	21ba      	movs	r1, #186	@ 0xba
 800529a:	0018      	movs	r0, r3
 800529c:	f7fe f9d4 	bl	8003648 <ClearEEprom>
        break;
 80052a0:	e021      	b.n	80052e6 <ProcessCmd+0x142>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80052a2:	2118      	movs	r1, #24
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	789b      	ldrb	r3, [r3, #2]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	b21a      	sxth	r2, r3
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	78db      	ldrb	r3, [r3, #3]
 80052b0:	b21b      	sxth	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b21a      	sxth	r2, r3
 80052b6:	1dbb      	adds	r3, r7, #6
 80052b8:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80052ba:	1dbb      	adds	r3, r7, #6
 80052bc:	881a      	ldrh	r2, [r3, #0]
 80052be:	23c0      	movs	r3, #192	@ 0xc0
 80052c0:	015b      	lsls	r3, r3, #5
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d207      	bcs.n	80052d6 <ProcessCmd+0x132>
                ClearEEprom(EEPromStartAddr, size);
 80052c6:	1dbb      	adds	r3, r7, #6
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	4a0b      	ldr	r2, [pc, #44]	@ (80052f8 <ProcessCmd+0x154>)
 80052cc:	0019      	movs	r1, r3
 80052ce:	0010      	movs	r0, r2
 80052d0:	f7fe f9ba 	bl	8003648 <ClearEEprom>
            break;
 80052d4:	e006      	b.n	80052e4 <ProcessCmd+0x140>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80052d6:	23c0      	movs	r3, #192	@ 0xc0
 80052d8:	015b      	lsls	r3, r3, #5
 80052da:	4a07      	ldr	r2, [pc, #28]	@ (80052f8 <ProcessCmd+0x154>)
 80052dc:	0019      	movs	r1, r3
 80052de:	0010      	movs	r0, r2
 80052e0:	f7fe f9b2 	bl	8003648 <ClearEEprom>
            break;
 80052e4:	46c0      	nop			@ (mov r8, r8)
}
 80052e6:	46c0      	nop			@ (mov r8, r8)
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b002      	add	sp, #8
 80052ec:	bcb0      	pop	{r4, r5, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	b004      	add	sp, #16
 80052f2:	4718      	bx	r3
 80052f4:	0801b920 	.word	0x0801b920
 80052f8:	08080000 	.word	0x08080000
 80052fc:	0808000c 	.word	0x0808000c
 8005300:	08080018 	.word	0x08080018
 8005304:	08080024 	.word	0x08080024
 8005308:	08080030 	.word	0x08080030
 800530c:	0808003c 	.word	0x0808003c
 8005310:	08080048 	.word	0x08080048
 8005314:	08080090 	.word	0x08080090

08005318 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6039      	str	r1, [r7, #0]
 8005320:	0011      	movs	r1, r2
 8005322:	1dfb      	adds	r3, r7, #7
 8005324:	1c02      	adds	r2, r0, #0
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	1dbb      	adds	r3, r7, #6
 800532a:	1c0a      	adds	r2, r1, #0
 800532c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 800532e:	2223      	movs	r2, #35	@ 0x23
 8005330:	4b20      	ldr	r3, [pc, #128]	@ (80053b4 <Create_Message+0x9c>)
 8005332:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005334:	4b1f      	ldr	r3, [pc, #124]	@ (80053b4 <Create_Message+0x9c>)
 8005336:	1dfa      	adds	r2, r7, #7
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 800533c:	4b1d      	ldr	r3, [pc, #116]	@ (80053b4 <Create_Message+0x9c>)
 800533e:	1dba      	adds	r2, r7, #6
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005344:	1dbb      	adds	r3, r7, #6
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <Create_Message+0xa0>)
 800534c:	0018      	movs	r0, r3
 800534e:	f012 fe29 	bl	8017fa4 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005352:	1dbb      	adds	r3, r7, #6
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b29a      	uxth	r2, r3
 8005358:	250e      	movs	r5, #14
 800535a:	197b      	adds	r3, r7, r5
 800535c:	3203      	adds	r2, #3
 800535e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005360:	260c      	movs	r6, #12
 8005362:	19bc      	adds	r4, r7, r6
 8005364:	197b      	adds	r3, r7, r5
 8005366:	881a      	ldrh	r2, [r3, #0]
 8005368:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <Create_Message+0x9c>)
 800536a:	0011      	movs	r1, r2
 800536c:	0018      	movs	r0, r3
 800536e:	f000 f825 	bl	80053bc <CRC16_ARC>
 8005372:	0003      	movs	r3, r0
 8005374:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005376:	0030      	movs	r0, r6
 8005378:	183b      	adds	r3, r7, r0
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	b29a      	uxth	r2, r3
 8005380:	197b      	adds	r3, r7, r5
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b2d1      	uxtb	r1, r2
 8005386:	4a0b      	ldr	r2, [pc, #44]	@ (80053b4 <Create_Message+0x9c>)
 8005388:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800538a:	197b      	adds	r3, r7, r5
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	183a      	adds	r2, r7, r0
 8005392:	8812      	ldrh	r2, [r2, #0]
 8005394:	b2d1      	uxtb	r1, r2
 8005396:	4a07      	ldr	r2, [pc, #28]	@ (80053b4 <Create_Message+0x9c>)
 8005398:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800539a:	197b      	adds	r3, r7, r5
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	3302      	adds	r3, #2
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	4b04      	ldr	r3, [pc, #16]	@ (80053b4 <Create_Message+0x9c>)
 80053a4:	0011      	movs	r1, r2
 80053a6:	0018      	movs	r0, r3
 80053a8:	f011 fa58 	bl	801685c <CDC_Transmit_FS>
}
 80053ac:	46c0      	nop			@ (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b005      	add	sp, #20
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b4:	20000af4 	.word	0x20000af4
 80053b8:	20000af7 	.word	0x20000af7

080053bc <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	000a      	movs	r2, r1
 80053c6:	1cbb      	adds	r3, r7, #2
 80053c8:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80053ca:	2316      	movs	r3, #22
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	2200      	movs	r2, #0
 80053d0:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e02e      	b.n	8005436 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	18d3      	adds	r3, r2, r3
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	0019      	movs	r1, r3
 80053e2:	2216      	movs	r2, #22
 80053e4:	18bb      	adds	r3, r7, r2
 80053e6:	18ba      	adds	r2, r7, r2
 80053e8:	8812      	ldrh	r2, [r2, #0]
 80053ea:	404a      	eors	r2, r1
 80053ec:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e01a      	b.n	800542a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80053f4:	2116      	movs	r1, #22
 80053f6:	187b      	adds	r3, r7, r1
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	4013      	ands	r3, r2
 80053fe:	d00b      	beq.n	8005418 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005400:	187b      	adds	r3, r7, r1
 8005402:	187a      	adds	r2, r7, r1
 8005404:	8812      	ldrh	r2, [r2, #0]
 8005406:	0852      	lsrs	r2, r2, #1
 8005408:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800540a:	187b      	adds	r3, r7, r1
 800540c:	187a      	adds	r2, r7, r1
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	490f      	ldr	r1, [pc, #60]	@ (8005450 <CRC16_ARC+0x94>)
 8005412:	404a      	eors	r2, r1
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	e005      	b.n	8005424 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005418:	2216      	movs	r2, #22
 800541a:	18bb      	adds	r3, r7, r2
 800541c:	18ba      	adds	r2, r7, r2
 800541e:	8812      	ldrh	r2, [r2, #0]
 8005420:	0852      	lsrs	r2, r2, #1
 8005422:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b07      	cmp	r3, #7
 800542e:	dde1      	ble.n	80053f4 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3301      	adds	r3, #1
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	1cbb      	adds	r3, r7, #2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	dbcb      	blt.n	80053d8 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005440:	2316      	movs	r3, #22
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	881b      	ldrh	r3, [r3, #0]
}
 8005446:	0018      	movs	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	b006      	add	sp, #24
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	ffffa001 	.word	0xffffa001

08005454 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005458:	4b26      	ldr	r3, [pc, #152]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 800545a:	4a27      	ldr	r2, [pc, #156]	@ (80054f8 <ReadBatteryVoltage+0xa4>)
 800545c:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800545e:	4b25      	ldr	r3, [pc, #148]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 8005460:	2280      	movs	r2, #128	@ 0x80
 8005462:	0152      	lsls	r2, r2, #5
 8005464:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005466:	4a23      	ldr	r2, [pc, #140]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 8005468:	4b24      	ldr	r3, [pc, #144]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 800546a:	0011      	movs	r1, r2
 800546c:	0018      	movs	r0, r3
 800546e:	f004 ff1d 	bl	800a2ac <HAL_ADC_ConfigChannel>
 8005472:	1e03      	subs	r3, r0, #0
 8005474:	d001      	beq.n	800547a <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005476:	f000 ff33 	bl	80062e0 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 800547a:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 800547c:	0018      	movs	r0, r3
 800547e:	f004 fe19 	bl	800a0b4 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005482:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 8005484:	2101      	movs	r1, #1
 8005486:	0018      	movs	r0, r3
 8005488:	f004 fe68 	bl	800a15c <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 800548c:	4b1b      	ldr	r3, [pc, #108]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 800548e:	0018      	movs	r0, r3
 8005490:	f004 ff00 	bl	800a294 <HAL_ADC_GetValue>
 8005494:	0002      	movs	r2, r0
 8005496:	4b1a      	ldr	r3, [pc, #104]	@ (8005500 <ReadBatteryVoltage+0xac>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4353      	muls	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4919      	ldr	r1, [pc, #100]	@ (8005504 <ReadBatteryVoltage+0xb0>)
 80054a0:	0018      	movs	r0, r3
 80054a2:	f7fa fe4d 	bl	8000140 <__udivsi3>
 80054a6:	0003      	movs	r3, r0
 80054a8:	001a      	movs	r2, r3
 80054aa:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <ReadBatteryVoltage+0xb4>)
 80054ac:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 80054ae:	4b16      	ldr	r3, [pc, #88]	@ (8005508 <ReadBatteryVoltage+0xb4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7fc f856 	bl	8001564 <__aeabi_ui2f>
 80054b8:	1c03      	adds	r3, r0, #0
 80054ba:	4914      	ldr	r1, [pc, #80]	@ (800550c <ReadBatteryVoltage+0xb8>)
 80054bc:	1c18      	adds	r0, r3, #0
 80054be:	f7fb fb07 	bl	8000ad0 <__aeabi_fdiv>
 80054c2:	1c03      	adds	r3, r0, #0
 80054c4:	1c1a      	adds	r2, r3, #0
 80054c6:	4b12      	ldr	r3, [pc, #72]	@ (8005510 <ReadBatteryVoltage+0xbc>)
 80054c8:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 80054ca:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 80054cc:	4a0a      	ldr	r2, [pc, #40]	@ (80054f8 <ReadBatteryVoltage+0xa4>)
 80054ce:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80054d0:	4b08      	ldr	r3, [pc, #32]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 80054d2:	4a10      	ldr	r2, [pc, #64]	@ (8005514 <ReadBatteryVoltage+0xc0>)
 80054d4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80054d6:	4a07      	ldr	r2, [pc, #28]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 80054d8:	4b08      	ldr	r3, [pc, #32]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 80054da:	0011      	movs	r1, r2
 80054dc:	0018      	movs	r0, r3
 80054de:	f004 fee5 	bl	800a2ac <HAL_ADC_ConfigChannel>
 80054e2:	1e03      	subs	r3, r0, #0
 80054e4:	d001      	beq.n	80054ea <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 80054e6:	f000 fefb 	bl	80062e0 <Error_Handler>
   }
   return trueValue;
 80054ea:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <ReadBatteryVoltage+0xbc>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 }
 80054ee:	1c18      	adds	r0, r3, #0
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20000bfc 	.word	0x20000bfc
 80054f8:	38004000 	.word	0x38004000
 80054fc:	20000c14 	.word	0x20000c14
 8005500:	2000005c 	.word	0x2000005c
 8005504:	00000fff 	.word	0x00000fff
 8005508:	20000c04 	.word	0x20000c04
 800550c:	447a0000 	.word	0x447a0000
 8005510:	20000c08 	.word	0x20000c08
 8005514:	00001001 	.word	0x00001001

08005518 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 800551c:	4b27      	ldr	r3, [pc, #156]	@ (80055bc <ReadSolarVoltage+0xa4>)
 800551e:	4a28      	ldr	r2, [pc, #160]	@ (80055c0 <ReadSolarVoltage+0xa8>)
 8005520:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005522:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <ReadSolarVoltage+0xa4>)
 8005524:	2280      	movs	r2, #128	@ 0x80
 8005526:	0152      	lsls	r2, r2, #5
 8005528:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800552a:	4a24      	ldr	r2, [pc, #144]	@ (80055bc <ReadSolarVoltage+0xa4>)
 800552c:	4b25      	ldr	r3, [pc, #148]	@ (80055c4 <ReadSolarVoltage+0xac>)
 800552e:	0011      	movs	r1, r2
 8005530:	0018      	movs	r0, r3
 8005532:	f004 febb 	bl	800a2ac <HAL_ADC_ConfigChannel>
 8005536:	1e03      	subs	r3, r0, #0
 8005538:	d001      	beq.n	800553e <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 800553a:	f000 fed1 	bl	80062e0 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 800553e:	4b21      	ldr	r3, [pc, #132]	@ (80055c4 <ReadSolarVoltage+0xac>)
 8005540:	0018      	movs	r0, r3
 8005542:	f004 fdb7 	bl	800a0b4 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005546:	4b1f      	ldr	r3, [pc, #124]	@ (80055c4 <ReadSolarVoltage+0xac>)
 8005548:	2101      	movs	r1, #1
 800554a:	0018      	movs	r0, r3
 800554c:	f004 fe06 	bl	800a15c <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005550:	4b1c      	ldr	r3, [pc, #112]	@ (80055c4 <ReadSolarVoltage+0xac>)
 8005552:	0018      	movs	r0, r3
 8005554:	f004 fe9e 	bl	800a294 <HAL_ADC_GetValue>
 8005558:	0002      	movs	r2, r0
 800555a:	4b1b      	ldr	r3, [pc, #108]	@ (80055c8 <ReadSolarVoltage+0xb0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	435a      	muls	r2, r3
 8005560:	0013      	movs	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	189b      	adds	r3, r3, r2
 8005566:	4919      	ldr	r1, [pc, #100]	@ (80055cc <ReadSolarVoltage+0xb4>)
 8005568:	0018      	movs	r0, r3
 800556a:	f7fa fde9 	bl	8000140 <__udivsi3>
 800556e:	0003      	movs	r3, r0
 8005570:	001a      	movs	r2, r3
 8005572:	4b17      	ldr	r3, [pc, #92]	@ (80055d0 <ReadSolarVoltage+0xb8>)
 8005574:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005576:	4b16      	ldr	r3, [pc, #88]	@ (80055d0 <ReadSolarVoltage+0xb8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	0018      	movs	r0, r3
 800557c:	f7fb fff2 	bl	8001564 <__aeabi_ui2f>
 8005580:	1c03      	adds	r3, r0, #0
 8005582:	4914      	ldr	r1, [pc, #80]	@ (80055d4 <ReadSolarVoltage+0xbc>)
 8005584:	1c18      	adds	r0, r3, #0
 8005586:	f7fb faa3 	bl	8000ad0 <__aeabi_fdiv>
 800558a:	1c03      	adds	r3, r0, #0
 800558c:	1c1a      	adds	r2, r3, #0
 800558e:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <ReadSolarVoltage+0xc0>)
 8005590:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005592:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <ReadSolarVoltage+0xa4>)
 8005594:	4a0a      	ldr	r2, [pc, #40]	@ (80055c0 <ReadSolarVoltage+0xa8>)
 8005596:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005598:	4b08      	ldr	r3, [pc, #32]	@ (80055bc <ReadSolarVoltage+0xa4>)
 800559a:	4a10      	ldr	r2, [pc, #64]	@ (80055dc <ReadSolarVoltage+0xc4>)
 800559c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800559e:	4a07      	ldr	r2, [pc, #28]	@ (80055bc <ReadSolarVoltage+0xa4>)
 80055a0:	4b08      	ldr	r3, [pc, #32]	@ (80055c4 <ReadSolarVoltage+0xac>)
 80055a2:	0011      	movs	r1, r2
 80055a4:	0018      	movs	r0, r3
 80055a6:	f004 fe81 	bl	800a2ac <HAL_ADC_ConfigChannel>
 80055aa:	1e03      	subs	r3, r0, #0
 80055ac:	d001      	beq.n	80055b2 <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 80055ae:	f000 fe97 	bl	80062e0 <Error_Handler>
   }
   return trueValue;
 80055b2:	4b09      	ldr	r3, [pc, #36]	@ (80055d8 <ReadSolarVoltage+0xc0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 }
 80055b6:	1c18      	adds	r0, r3, #0
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000bfc 	.word	0x20000bfc
 80055c0:	3c008000 	.word	0x3c008000
 80055c4:	20000c14 	.word	0x20000c14
 80055c8:	2000005c 	.word	0x2000005c
 80055cc:	00000fff 	.word	0x00000fff
 80055d0:	20000c0c 	.word	0x20000c0c
 80055d4:	447a0000 	.word	0x447a0000
 80055d8:	20000c10 	.word	0x20000c10
 80055dc:	00001001 	.word	0x00001001

080055e0 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 80055e4:	23a0      	movs	r3, #160	@ 0xa0
 80055e6:	05db      	lsls	r3, r3, #23
 80055e8:	2180      	movs	r1, #128	@ 0x80
 80055ea:	0018      	movs	r0, r3
 80055ec:	f005 ff24 	bl	800b438 <HAL_GPIO_ReadPin>
 80055f0:	0003      	movs	r3, r0
 80055f2:	1e5a      	subs	r2, r3, #1
 80055f4:	4193      	sbcs	r3, r2
 80055f6:	b2db      	uxtb	r3, r3
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80055fe:	b580      	push	{r7, lr}
 8005600:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005602:	2380      	movs	r3, #128	@ 0x80
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	23a0      	movs	r3, #160	@ 0xa0
 8005608:	05db      	lsls	r3, r3, #23
 800560a:	0011      	movs	r1, r2
 800560c:	0018      	movs	r0, r3
 800560e:	f005 ff13 	bl	800b438 <HAL_GPIO_ReadPin>
 8005612:	0003      	movs	r3, r0
 8005614:	1e5a      	subs	r2, r3, #1
 8005616:	4193      	sbcs	r3, r2
 8005618:	b2db      	uxtb	r3, r3
}
 800561a:	0018      	movs	r0, r3
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <UserButton_Pressed+0x1c>)
 8005626:	2104      	movs	r1, #4
 8005628:	0018      	movs	r0, r3
 800562a:	f005 ff05 	bl	800b438 <HAL_GPIO_ReadPin>
 800562e:	0003      	movs	r3, r0
 8005630:	425a      	negs	r2, r3
 8005632:	4153      	adcs	r3, r2
 8005634:	b2db      	uxtb	r3, r3
}
 8005636:	0018      	movs	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	50000c00 	.word	0x50000c00

08005640 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005646:	003b      	movs	r3, r7
 8005648:	0018      	movs	r0, r3
 800564a:	2308      	movs	r3, #8
 800564c:	001a      	movs	r2, r3
 800564e:	2100      	movs	r1, #0
 8005650:	f012 fbde 	bl	8017e10 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005654:	4b30      	ldr	r3, [pc, #192]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005656:	4a31      	ldr	r2, [pc, #196]	@ (800571c <MX_ADC_Init+0xdc>)
 8005658:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800565a:	4b2f      	ldr	r3, [pc, #188]	@ (8005718 <MX_ADC_Init+0xd8>)
 800565c:	2200      	movs	r2, #0
 800565e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8005660:	4b2d      	ldr	r3, [pc, #180]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005662:	22c0      	movs	r2, #192	@ 0xc0
 8005664:	0612      	lsls	r2, r2, #24
 8005666:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005668:	4b2b      	ldr	r3, [pc, #172]	@ (8005718 <MX_ADC_Init+0xd8>)
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800566e:	4b2a      	ldr	r3, [pc, #168]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005670:	2200      	movs	r2, #0
 8005672:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005674:	4b28      	ldr	r3, [pc, #160]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005676:	2201      	movs	r2, #1
 8005678:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800567a:	4b27      	ldr	r3, [pc, #156]	@ (8005718 <MX_ADC_Init+0xd8>)
 800567c:	2200      	movs	r2, #0
 800567e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005680:	4b25      	ldr	r3, [pc, #148]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005682:	2220      	movs	r2, #32
 8005684:	2100      	movs	r1, #0
 8005686:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8005688:	4b23      	ldr	r3, [pc, #140]	@ (8005718 <MX_ADC_Init+0xd8>)
 800568a:	2221      	movs	r2, #33	@ 0x21
 800568c:	2101      	movs	r1, #1
 800568e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005690:	4b21      	ldr	r3, [pc, #132]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005692:	2200      	movs	r2, #0
 8005694:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005696:	4b20      	ldr	r3, [pc, #128]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005698:	22c2      	movs	r2, #194	@ 0xc2
 800569a:	32ff      	adds	r2, #255	@ 0xff
 800569c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800569e:	4b1e      	ldr	r3, [pc, #120]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056a0:	222c      	movs	r2, #44	@ 0x2c
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80056a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056a8:	2204      	movs	r2, #4
 80056aa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80056ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80056b2:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80056b8:	4b17      	ldr	r3, [pc, #92]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80056be:	4b16      	ldr	r3, [pc, #88]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80056c4:	4b14      	ldr	r3, [pc, #80]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056c6:	0018      	movs	r0, r3
 80056c8:	f004 fb80 	bl	8009dcc <HAL_ADC_Init>
 80056cc:	1e03      	subs	r3, r0, #0
 80056ce:	d001      	beq.n	80056d4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80056d0:	f000 fe06 	bl	80062e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80056d4:	003b      	movs	r3, r7
 80056d6:	4a12      	ldr	r2, [pc, #72]	@ (8005720 <MX_ADC_Init+0xe0>)
 80056d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80056da:	003b      	movs	r3, r7
 80056dc:	2280      	movs	r2, #128	@ 0x80
 80056de:	0152      	lsls	r2, r2, #5
 80056e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80056e2:	003a      	movs	r2, r7
 80056e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056e6:	0011      	movs	r1, r2
 80056e8:	0018      	movs	r0, r3
 80056ea:	f004 fddf 	bl	800a2ac <HAL_ADC_ConfigChannel>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d001      	beq.n	80056f6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80056f2:	f000 fdf5 	bl	80062e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80056f6:	003b      	movs	r3, r7
 80056f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005724 <MX_ADC_Init+0xe4>)
 80056fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80056fc:	003a      	movs	r2, r7
 80056fe:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005700:	0011      	movs	r1, r2
 8005702:	0018      	movs	r0, r3
 8005704:	f004 fdd2 	bl	800a2ac <HAL_ADC_ConfigChannel>
 8005708:	1e03      	subs	r3, r0, #0
 800570a:	d001      	beq.n	8005710 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800570c:	f000 fde8 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005710:	46c0      	nop			@ (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000c14 	.word	0x20000c14
 800571c:	40012400 	.word	0x40012400
 8005720:	38004000 	.word	0x38004000
 8005724:	3c008000 	.word	0x3c008000

08005728 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b089      	sub	sp, #36	@ 0x24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005730:	240c      	movs	r4, #12
 8005732:	193b      	adds	r3, r7, r4
 8005734:	0018      	movs	r0, r3
 8005736:	2314      	movs	r3, #20
 8005738:	001a      	movs	r2, r3
 800573a:	2100      	movs	r1, #0
 800573c:	f012 fb68 	bl	8017e10 <memset>
  if(adcHandle->Instance==ADC1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a14      	ldr	r2, [pc, #80]	@ (8005798 <HAL_ADC_MspInit+0x70>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d121      	bne.n	800578e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800574a:	4b14      	ldr	r3, [pc, #80]	@ (800579c <HAL_ADC_MspInit+0x74>)
 800574c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800574e:	4b13      	ldr	r3, [pc, #76]	@ (800579c <HAL_ADC_MspInit+0x74>)
 8005750:	2180      	movs	r1, #128	@ 0x80
 8005752:	0089      	lsls	r1, r1, #2
 8005754:	430a      	orrs	r2, r1
 8005756:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005758:	4b10      	ldr	r3, [pc, #64]	@ (800579c <HAL_ADC_MspInit+0x74>)
 800575a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575c:	4b0f      	ldr	r3, [pc, #60]	@ (800579c <HAL_ADC_MspInit+0x74>)
 800575e:	2104      	movs	r1, #4
 8005760:	430a      	orrs	r2, r1
 8005762:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005764:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <HAL_ADC_MspInit+0x74>)
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	2204      	movs	r2, #4
 800576a:	4013      	ands	r3, r2
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005770:	193b      	adds	r3, r7, r4
 8005772:	2230      	movs	r2, #48	@ 0x30
 8005774:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005776:	193b      	adds	r3, r7, r4
 8005778:	2203      	movs	r2, #3
 800577a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577c:	193b      	adds	r3, r7, r4
 800577e:	2200      	movs	r2, #0
 8005780:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005782:	193b      	adds	r3, r7, r4
 8005784:	4a06      	ldr	r2, [pc, #24]	@ (80057a0 <HAL_ADC_MspInit+0x78>)
 8005786:	0019      	movs	r1, r3
 8005788:	0010      	movs	r0, r2
 800578a:	f005 fbf5 	bl	800af78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b009      	add	sp, #36	@ 0x24
 8005794:	bd90      	pop	{r4, r7, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	40012400 	.word	0x40012400
 800579c:	40021000 	.word	0x40021000
 80057a0:	50000800 	.word	0x50000800

080057a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057aa:	4b10      	ldr	r3, [pc, #64]	@ (80057ec <MX_DMA_Init+0x48>)
 80057ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ae:	4b0f      	ldr	r3, [pc, #60]	@ (80057ec <MX_DMA_Init+0x48>)
 80057b0:	2101      	movs	r1, #1
 80057b2:	430a      	orrs	r2, r1
 80057b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <MX_DMA_Init+0x48>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	2201      	movs	r2, #1
 80057bc:	4013      	ands	r3, r2
 80057be:	607b      	str	r3, [r7, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80057c2:	2200      	movs	r2, #0
 80057c4:	2100      	movs	r1, #0
 80057c6:	200a      	movs	r0, #10
 80057c8:	f004 ff2a 	bl	800a620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80057cc:	200a      	movs	r0, #10
 80057ce:	f004 ff3c 	bl	800a64a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80057d2:	2200      	movs	r2, #0
 80057d4:	2103      	movs	r1, #3
 80057d6:	200b      	movs	r0, #11
 80057d8:	f004 ff22 	bl	800a620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80057dc:	200b      	movs	r0, #11
 80057de:	f004 ff34 	bl	800a64a <HAL_NVIC_EnableIRQ>

}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b002      	add	sp, #8
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	40021000 	.word	0x40021000

080057f0 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80057fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <Gadget_Init+0x40>)
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	f001 f8af 	bl	8006964 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	0018      	movs	r0, r3
 800580e:	f000 fddb 	bl	80063c8 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	0018      	movs	r0, r3
 8005816:	f7fd ff9d 	bl	8003754 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 800581a:	4a06      	ldr	r2, [pc, #24]	@ (8005834 <Gadget_Init+0x44>)
 800581c:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <Gadget_Init+0x48>)
 800581e:	0019      	movs	r1, r3
 8005820:	2003      	movs	r0, #3
 8005822:	f003 feeb 	bl	80095fc <CreateLine>
}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	46bd      	mov	sp, r7
 800582a:	b004      	add	sp, #16
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	20000060 	.word	0x20000060
 8005834:	0801b104 	.word	0x0801b104
 8005838:	0801b118 	.word	0x0801b118

0800583c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  Meas_Test();
 8005840:	f000 ff02 	bl	8006648 <Meas_Test>
}
 8005844:	46c0      	nop			@ (mov r8, r8)
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <UpkeepGadget>:

void UpkeepGadget() {
 800584a:	b580      	push	{r7, lr}
 800584c:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 800584e:	f000 fff3 	bl	8006838 <Meas_Upkeep>
  Mic_Upkeep();
 8005852:	f000 ffa5 	bl	80067a0 <Mic_Upkeep>
  status_Upkeep();
 8005856:	f003 f9e7 	bl	8008c28 <status_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0011      	movs	r1, r2
 8005870:	0018      	movs	r0, r3
 8005872:	f002 fc53 	bl	800811c <SGP_Init>
}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	46bd      	mov	sp, r7
 800587a:	b002      	add	sp, #8
 800587c:	bd80      	pop	{r7, pc}

0800587e <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 800587e:	b580      	push	{r7, lr}
 8005880:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8005882:	f002 fc65 	bl	8008150 <SGP_StartMeasurement>
}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	0018      	movs	r0, r3
 8005898:	f002 fcca 	bl	8008230 <SGP_GetMeasurementValues>
 800589c:	0003      	movs	r3, r0
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b002      	add	sp, #8
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 80058a6:	b580      	push	{r7, lr}
 80058a8:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 80058aa:	f002 fedf 	bl	800866c <SGP_DeviceConnected>
 80058ae:	0003      	movs	r3, r0
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b08b      	sub	sp, #44	@ 0x2c
 80058bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058be:	2414      	movs	r4, #20
 80058c0:	193b      	adds	r3, r7, r4
 80058c2:	0018      	movs	r0, r3
 80058c4:	2314      	movs	r3, #20
 80058c6:	001a      	movs	r2, r3
 80058c8:	2100      	movs	r1, #0
 80058ca:	f012 faa1 	bl	8017e10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ce:	4b7c      	ldr	r3, [pc, #496]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058d4:	2104      	movs	r1, #4
 80058d6:	430a      	orrs	r2, r1
 80058d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80058da:	4b79      	ldr	r3, [pc, #484]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	2204      	movs	r2, #4
 80058e0:	4013      	ands	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058e6:	4b76      	ldr	r3, [pc, #472]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	4b75      	ldr	r3, [pc, #468]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058ec:	2180      	movs	r1, #128	@ 0x80
 80058ee:	430a      	orrs	r2, r1
 80058f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80058f2:	4b73      	ldr	r3, [pc, #460]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	2280      	movs	r2, #128	@ 0x80
 80058f8:	4013      	ands	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058fe:	4b70      	ldr	r3, [pc, #448]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005902:	4b6f      	ldr	r3, [pc, #444]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005904:	2101      	movs	r1, #1
 8005906:	430a      	orrs	r2, r1
 8005908:	62da      	str	r2, [r3, #44]	@ 0x2c
 800590a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 800590c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590e:	2201      	movs	r2, #1
 8005910:	4013      	ands	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005916:	4b6a      	ldr	r3, [pc, #424]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591a:	4b69      	ldr	r3, [pc, #420]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 800591c:	2102      	movs	r1, #2
 800591e:	430a      	orrs	r2, r1
 8005920:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005922:	4b67      	ldr	r3, [pc, #412]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	2202      	movs	r2, #2
 8005928:	4013      	ands	r3, r2
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800592e:	4b64      	ldr	r3, [pc, #400]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005932:	4b63      	ldr	r3, [pc, #396]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005934:	2108      	movs	r1, #8
 8005936:	430a      	orrs	r2, r1
 8005938:	62da      	str	r2, [r3, #44]	@ 0x2c
 800593a:	4b61      	ldr	r3, [pc, #388]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	2208      	movs	r2, #8
 8005940:	4013      	ands	r3, r2
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005946:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac4 <MX_GPIO_Init+0x20c>)
 8005948:	2201      	movs	r2, #1
 800594a:	2101      	movs	r1, #1
 800594c:	0018      	movs	r0, r3
 800594e:	f005 fd90 	bl	800b472 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005952:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac4 <MX_GPIO_Init+0x20c>)
 8005954:	2200      	movs	r2, #0
 8005956:	2102      	movs	r1, #2
 8005958:	0018      	movs	r0, r3
 800595a:	f005 fd8a 	bl	800b472 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800595e:	495a      	ldr	r1, [pc, #360]	@ (8005ac8 <MX_GPIO_Init+0x210>)
 8005960:	4b5a      	ldr	r3, [pc, #360]	@ (8005acc <MX_GPIO_Init+0x214>)
 8005962:	2201      	movs	r2, #1
 8005964:	0018      	movs	r0, r3
 8005966:	f005 fd84 	bl	800b472 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	4858      	ldr	r0, [pc, #352]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 8005970:	2201      	movs	r2, #1
 8005972:	0019      	movs	r1, r3
 8005974:	f005 fd7d 	bl	800b472 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8005978:	2380      	movs	r3, #128	@ 0x80
 800597a:	015b      	lsls	r3, r3, #5
 800597c:	4854      	ldr	r0, [pc, #336]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 800597e:	2200      	movs	r2, #0
 8005980:	0019      	movs	r1, r3
 8005982:	f005 fd76 	bl	800b472 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8005986:	193b      	adds	r3, r7, r4
 8005988:	4a52      	ldr	r2, [pc, #328]	@ (8005ad4 <MX_GPIO_Init+0x21c>)
 800598a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800598c:	193b      	adds	r3, r7, r4
 800598e:	2203      	movs	r2, #3
 8005990:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005992:	193b      	adds	r3, r7, r4
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005998:	193b      	adds	r3, r7, r4
 800599a:	4a4d      	ldr	r2, [pc, #308]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 800599c:	0019      	movs	r1, r3
 800599e:	0010      	movs	r0, r2
 80059a0:	f005 faea 	bl	800af78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80059a4:	193b      	adds	r3, r7, r4
 80059a6:	2203      	movs	r2, #3
 80059a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059aa:	193b      	adds	r3, r7, r4
 80059ac:	2201      	movs	r2, #1
 80059ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b0:	193b      	adds	r3, r7, r4
 80059b2:	2200      	movs	r2, #0
 80059b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059b6:	193b      	adds	r3, r7, r4
 80059b8:	2200      	movs	r2, #0
 80059ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80059bc:	193b      	adds	r3, r7, r4
 80059be:	4a41      	ldr	r2, [pc, #260]	@ (8005ac4 <MX_GPIO_Init+0x20c>)
 80059c0:	0019      	movs	r1, r3
 80059c2:	0010      	movs	r0, r2
 80059c4:	f005 fad8 	bl	800af78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80059c8:	193b      	adds	r3, r7, r4
 80059ca:	2270      	movs	r2, #112	@ 0x70
 80059cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059ce:	193b      	adds	r3, r7, r4
 80059d0:	2203      	movs	r2, #3
 80059d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d4:	193b      	adds	r3, r7, r4
 80059d6:	2200      	movs	r2, #0
 80059d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059da:	193a      	adds	r2, r7, r4
 80059dc:	23a0      	movs	r3, #160	@ 0xa0
 80059de:	05db      	lsls	r3, r3, #23
 80059e0:	0011      	movs	r1, r2
 80059e2:	0018      	movs	r0, r3
 80059e4:	f005 fac8 	bl	800af78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 80059e8:	193b      	adds	r3, r7, r4
 80059ea:	4a3b      	ldr	r2, [pc, #236]	@ (8005ad8 <MX_GPIO_Init+0x220>)
 80059ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059ee:	193b      	adds	r3, r7, r4
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f4:	193b      	adds	r3, r7, r4
 80059f6:	2200      	movs	r2, #0
 80059f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fa:	193a      	adds	r2, r7, r4
 80059fc:	23a0      	movs	r3, #160	@ 0xa0
 80059fe:	05db      	lsls	r3, r3, #23
 8005a00:	0011      	movs	r1, r2
 8005a02:	0018      	movs	r0, r3
 8005a04:	f005 fab8 	bl	800af78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005a08:	193b      	adds	r3, r7, r4
 8005a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ac8 <MX_GPIO_Init+0x210>)
 8005a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a0e:	193b      	adds	r3, r7, r4
 8005a10:	2201      	movs	r2, #1
 8005a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a14:	193b      	adds	r3, r7, r4
 8005a16:	2200      	movs	r2, #0
 8005a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a1a:	193b      	adds	r3, r7, r4
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a20:	193b      	adds	r3, r7, r4
 8005a22:	4a2a      	ldr	r2, [pc, #168]	@ (8005acc <MX_GPIO_Init+0x214>)
 8005a24:	0019      	movs	r1, r3
 8005a26:	0010      	movs	r0, r2
 8005a28:	f005 faa6 	bl	800af78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005a2c:	193b      	adds	r3, r7, r4
 8005a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005adc <MX_GPIO_Init+0x224>)
 8005a30:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a32:	193b      	adds	r3, r7, r4
 8005a34:	2203      	movs	r2, #3
 8005a36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a38:	193b      	adds	r3, r7, r4
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a3e:	193b      	adds	r3, r7, r4
 8005a40:	4a22      	ldr	r2, [pc, #136]	@ (8005acc <MX_GPIO_Init+0x214>)
 8005a42:	0019      	movs	r1, r3
 8005a44:	0010      	movs	r0, r2
 8005a46:	f005 fa97 	bl	800af78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005a4a:	0021      	movs	r1, r4
 8005a4c:	187b      	adds	r3, r7, r1
 8005a4e:	2280      	movs	r2, #128	@ 0x80
 8005a50:	0092      	lsls	r2, r2, #2
 8005a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a54:	000c      	movs	r4, r1
 8005a56:	193b      	adds	r3, r7, r4
 8005a58:	2200      	movs	r2, #0
 8005a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5c:	193b      	adds	r3, r7, r4
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8005a62:	193b      	adds	r3, r7, r4
 8005a64:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 8005a66:	0019      	movs	r1, r3
 8005a68:	0010      	movs	r0, r2
 8005a6a:	f005 fa85 	bl	800af78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005a6e:	0021      	movs	r1, r4
 8005a70:	187b      	adds	r3, r7, r1
 8005a72:	22c0      	movs	r2, #192	@ 0xc0
 8005a74:	0152      	lsls	r2, r2, #5
 8005a76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a78:	000c      	movs	r4, r1
 8005a7a:	193b      	adds	r3, r7, r4
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a80:	193b      	adds	r3, r7, r4
 8005a82:	2200      	movs	r2, #0
 8005a84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a86:	193b      	adds	r3, r7, r4
 8005a88:	2200      	movs	r2, #0
 8005a8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a8c:	193b      	adds	r3, r7, r4
 8005a8e:	4a10      	ldr	r2, [pc, #64]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 8005a90:	0019      	movs	r1, r3
 8005a92:	0010      	movs	r0, r2
 8005a94:	f005 fa70 	bl	800af78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005a98:	0021      	movs	r1, r4
 8005a9a:	187b      	adds	r3, r7, r1
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aa0:	187b      	adds	r3, r7, r1
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005aa6:	187b      	adds	r3, r7, r1
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005aac:	187b      	adds	r3, r7, r1
 8005aae:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae0 <MX_GPIO_Init+0x228>)
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	0010      	movs	r0, r2
 8005ab4:	f005 fa60 	bl	800af78 <HAL_GPIO_Init>

}
 8005ab8:	46c0      	nop			@ (mov r8, r8)
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b00b      	add	sp, #44	@ 0x2c
 8005abe:	bd90      	pop	{r4, r7, pc}
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	50001c00 	.word	0x50001c00
 8005ac8:	00000301 	.word	0x00000301
 8005acc:	50000400 	.word	0x50000400
 8005ad0:	50000800 	.word	0x50000800
 8005ad4:	0000200c 	.word	0x0000200c
 8005ad8:	00008180 	.word	0x00008180
 8005adc:	0000403e 	.word	0x0000403e
 8005ae0:	50000c00 	.word	0x50000c00

08005ae4 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2100      	movs	r1, #0
 8005af2:	0018      	movs	r0, r3
 8005af4:	f00b f80c 	bl	8010b10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2108      	movs	r1, #8
 8005afc:	0018      	movs	r0, r3
 8005afe:	f00b f807 	bl	8010b10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	210c      	movs	r1, #12
 8005b06:	0018      	movs	r0, r3
 8005b08:	f00b f802 	bl	8010b10 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8005b0c:	2380      	movs	r3, #128	@ 0x80
 8005b0e:	05db      	lsls	r3, r3, #23
 8005b10:	22fa      	movs	r2, #250	@ 0xfa
 8005b12:	0112      	lsls	r2, r2, #4
 8005b14:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8005b16:	2380      	movs	r3, #128	@ 0x80
 8005b18:	05db      	lsls	r3, r3, #23
 8005b1a:	22fa      	movs	r2, #250	@ 0xfa
 8005b1c:	0112      	lsls	r2, r2, #4
 8005b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	05db      	lsls	r3, r3, #23
 8005b24:	22fa      	movs	r2, #250	@ 0xfa
 8005b26:	0112      	lsls	r2, r2, #4
 8005b28:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005b2a:	2380      	movs	r3, #128	@ 0x80
 8005b2c:	05db      	lsls	r3, r3, #23
 8005b2e:	22fa      	movs	r2, #250	@ 0xfa
 8005b30:	0112      	lsls	r2, r2, #4
 8005b32:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2100      	movs	r1, #0
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f00a ffe9 	bl	8010b10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2104      	movs	r1, #4
 8005b42:	0018      	movs	r0, r3
 8005b44:	f00a ffe4 	bl	8010b10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2108      	movs	r1, #8
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f00a ffdf 	bl	8010b10 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8005b52:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <GPIO_InitPWMLEDs+0x98>)
 8005b54:	22fa      	movs	r2, #250	@ 0xfa
 8005b56:	0112      	lsls	r2, r2, #4
 8005b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005b5a:	4b08      	ldr	r3, [pc, #32]	@ (8005b7c <GPIO_InitPWMLEDs+0x98>)
 8005b5c:	22fa      	movs	r2, #250	@ 0xfa
 8005b5e:	0112      	lsls	r2, r2, #4
 8005b60:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005b62:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <GPIO_InitPWMLEDs+0x98>)
 8005b64:	22fa      	movs	r2, #250	@ 0xfa
 8005b66:	0112      	lsls	r2, r2, #4
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005b6a:	4b04      	ldr	r3, [pc, #16]	@ (8005b7c <GPIO_InitPWMLEDs+0x98>)
 8005b6c:	22fa      	movs	r2, #250	@ 0xfa
 8005b6e:	0112      	lsls	r2, r2, #4
 8005b70:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b002      	add	sp, #8
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	46c0      	nop			@ (mov r8, r8)
 8005b7c:	40000400 	.word	0x40000400

08005b80 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	0011      	movs	r1, r2
 8005b90:	0018      	movs	r0, r3
 8005b92:	f003 fe8b 	bl	80098ac <HIDS_Init>
}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b002      	add	sp, #8
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005ba2:	f003 fea5 	bl	80098f0 <HIDS_StartMeasurement>
}
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0011      	movs	r1, r2
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f003 ff73 	bl	8009aa8 <HIDS_GetMeasurementValues>
 8005bc2:	0003      	movs	r3, r0
}
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005bd0:	f003 ff0e 	bl	80099f0 <HIDS_DeviceConnected>
 8005bd4:	0003      	movs	r3, r0
}
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005be0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005be2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c54 <MX_I2C1_Init+0x78>)
 8005be4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005be6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005be8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <MX_I2C1_Init+0x7c>)
 8005bea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005bec:	4b18      	ldr	r3, [pc, #96]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bf2:	4b17      	ldr	r3, [pc, #92]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bf8:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005bfe:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c04:	4b12      	ldr	r3, [pc, #72]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c0a:	4b11      	ldr	r3, [pc, #68]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c10:	4b0f      	ldr	r3, [pc, #60]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c16:	4b0e      	ldr	r3, [pc, #56]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f005 fc47 	bl	800b4ac <HAL_I2C_Init>
 8005c1e:	1e03      	subs	r3, r0, #0
 8005c20:	d001      	beq.n	8005c26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005c22:	f000 fb5d 	bl	80062e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005c26:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c28:	2100      	movs	r1, #0
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f007 fbb6 	bl	800d39c <HAL_I2CEx_ConfigAnalogFilter>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d001      	beq.n	8005c38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005c34:	f000 fb54 	bl	80062e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005c38:	4b05      	ldr	r3, [pc, #20]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f007 fbf9 	bl	800d434 <HAL_I2CEx_ConfigDigitalFilter>
 8005c42:	1e03      	subs	r3, r0, #0
 8005c44:	d001      	beq.n	8005c4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005c46:	f000 fb4b 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c4a:	46c0      	nop			@ (mov r8, r8)
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20000c70 	.word	0x20000c70
 8005c54:	40005400 	.word	0x40005400
 8005c58:	00503d58 	.word	0x00503d58

08005c5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005c60:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c62:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd4 <MX_I2C2_Init+0x78>)
 8005c64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005c66:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c68:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd8 <MX_I2C2_Init+0x7c>)
 8005c6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005c6c:	4b18      	ldr	r3, [pc, #96]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c72:	4b17      	ldr	r3, [pc, #92]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c78:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005c7e:	4b14      	ldr	r3, [pc, #80]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c84:	4b12      	ldr	r3, [pc, #72]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c8a:	4b11      	ldr	r3, [pc, #68]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c90:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c96:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f005 fc07 	bl	800b4ac <HAL_I2C_Init>
 8005c9e:	1e03      	subs	r3, r0, #0
 8005ca0:	d001      	beq.n	8005ca6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005ca2:	f000 fb1d 	bl	80062e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005ca8:	2100      	movs	r1, #0
 8005caa:	0018      	movs	r0, r3
 8005cac:	f007 fb76 	bl	800d39c <HAL_I2CEx_ConfigAnalogFilter>
 8005cb0:	1e03      	subs	r3, r0, #0
 8005cb2:	d001      	beq.n	8005cb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005cb4:	f000 fb14 	bl	80062e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005cb8:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005cba:	2100      	movs	r1, #0
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f007 fbb9 	bl	800d434 <HAL_I2CEx_ConfigDigitalFilter>
 8005cc2:	1e03      	subs	r3, r0, #0
 8005cc4:	d001      	beq.n	8005cca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005cc6:	f000 fb0b 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000cc4 	.word	0x20000cc4
 8005cd4:	40005800 	.word	0x40005800
 8005cd8:	00503d58 	.word	0x00503d58

08005cdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005cdc:	b590      	push	{r4, r7, lr}
 8005cde:	b08b      	sub	sp, #44	@ 0x2c
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce4:	2414      	movs	r4, #20
 8005ce6:	193b      	adds	r3, r7, r4
 8005ce8:	0018      	movs	r0, r3
 8005cea:	2314      	movs	r3, #20
 8005cec:	001a      	movs	r2, r3
 8005cee:	2100      	movs	r1, #0
 8005cf0:	f012 f88e 	bl	8017e10 <memset>
  if(i2cHandle->Instance==I2C1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8005e70 <HAL_I2C_MspInit+0x194>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d000      	beq.n	8005d00 <HAL_I2C_MspInit+0x24>
 8005cfe:	e083      	b.n	8005e08 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d00:	4b5c      	ldr	r3, [pc, #368]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d04:	4b5b      	ldr	r3, [pc, #364]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d06:	2102      	movs	r1, #2
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d0c:	4b59      	ldr	r3, [pc, #356]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	2202      	movs	r2, #2
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d18:	0021      	movs	r1, r4
 8005d1a:	187b      	adds	r3, r7, r1
 8005d1c:	22c0      	movs	r2, #192	@ 0xc0
 8005d1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d20:	187b      	adds	r3, r7, r1
 8005d22:	2212      	movs	r2, #18
 8005d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d26:	187b      	adds	r3, r7, r1
 8005d28:	2200      	movs	r2, #0
 8005d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	2203      	movs	r2, #3
 8005d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005d32:	187b      	adds	r3, r7, r1
 8005d34:	2201      	movs	r2, #1
 8005d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8005e78 <HAL_I2C_MspInit+0x19c>)
 8005d3c:	0019      	movs	r1, r3
 8005d3e:	0010      	movs	r0, r2
 8005d40:	f005 f91a 	bl	800af78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d44:	4b4b      	ldr	r3, [pc, #300]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d48:	4b4a      	ldr	r3, [pc, #296]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d4a:	2180      	movs	r1, #128	@ 0x80
 8005d4c:	0389      	lsls	r1, r1, #14
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8005d52:	4b4a      	ldr	r3, [pc, #296]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d54:	4a4a      	ldr	r2, [pc, #296]	@ (8005e80 <HAL_I2C_MspInit+0x1a4>)
 8005d56:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005d58:	4b48      	ldr	r3, [pc, #288]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d5a:	2206      	movs	r2, #6
 8005d5c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d5e:	4b47      	ldr	r3, [pc, #284]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d64:	4b45      	ldr	r3, [pc, #276]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d6a:	4b44      	ldr	r3, [pc, #272]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d6c:	2280      	movs	r2, #128	@ 0x80
 8005d6e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d70:	4b42      	ldr	r3, [pc, #264]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d76:	4b41      	ldr	r3, [pc, #260]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d82:	4b3e      	ldr	r3, [pc, #248]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005d88:	4b3c      	ldr	r3, [pc, #240]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f004 fc7a 	bl	800a684 <HAL_DMA_Init>
 8005d90:	1e03      	subs	r3, r0, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005d94:	f000 faa4 	bl	80062e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a38      	ldr	r2, [pc, #224]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d9e:	4b37      	ldr	r3, [pc, #220]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005da4:	4b37      	ldr	r3, [pc, #220]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005da6:	4a38      	ldr	r2, [pc, #224]	@ (8005e88 <HAL_I2C_MspInit+0x1ac>)
 8005da8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8005daa:	4b36      	ldr	r3, [pc, #216]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dac:	2206      	movs	r2, #6
 8005dae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005db0:	4b34      	ldr	r3, [pc, #208]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005db2:	2210      	movs	r2, #16
 8005db4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005db6:	4b33      	ldr	r3, [pc, #204]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005dbc:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dbe:	2280      	movs	r2, #128	@ 0x80
 8005dc0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dc2:	4b30      	ldr	r3, [pc, #192]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005dce:	4b2d      	ldr	r3, [pc, #180]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005dda:	4b2a      	ldr	r3, [pc, #168]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f004 fc51 	bl	800a684 <HAL_DMA_Init>
 8005de2:	1e03      	subs	r3, r0, #0
 8005de4:	d001      	beq.n	8005dea <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8005de6:	f000 fa7b 	bl	80062e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a25      	ldr	r2, [pc, #148]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dee:	639a      	str	r2, [r3, #56]	@ 0x38
 8005df0:	4b24      	ldr	r3, [pc, #144]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005df6:	2200      	movs	r2, #0
 8005df8:	2100      	movs	r1, #0
 8005dfa:	2017      	movs	r0, #23
 8005dfc:	f004 fc10 	bl	800a620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005e00:	2017      	movs	r0, #23
 8005e02:	f004 fc22 	bl	800a64a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005e06:	e02e      	b.n	8005e66 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005e8c <HAL_I2C_MspInit+0x1b0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d129      	bne.n	8005e66 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e12:	4b18      	ldr	r3, [pc, #96]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e16:	4b17      	ldr	r3, [pc, #92]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e18:	2102      	movs	r1, #2
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005e1e:	4b15      	ldr	r3, [pc, #84]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e22:	2202      	movs	r2, #2
 8005e24:	4013      	ands	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005e2a:	2114      	movs	r1, #20
 8005e2c:	187b      	adds	r3, r7, r1
 8005e2e:	22c0      	movs	r2, #192	@ 0xc0
 8005e30:	0112      	lsls	r2, r2, #4
 8005e32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	2212      	movs	r2, #18
 8005e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e40:	187b      	adds	r3, r7, r1
 8005e42:	2203      	movs	r2, #3
 8005e44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005e46:	187b      	adds	r3, r7, r1
 8005e48:	2206      	movs	r2, #6
 8005e4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e78 <HAL_I2C_MspInit+0x19c>)
 8005e50:	0019      	movs	r1, r3
 8005e52:	0010      	movs	r0, r2
 8005e54:	f005 f890 	bl	800af78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005e58:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e5e:	2180      	movs	r1, #128	@ 0x80
 8005e60:	03c9      	lsls	r1, r1, #15
 8005e62:	430a      	orrs	r2, r1
 8005e64:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b00b      	add	sp, #44	@ 0x2c
 8005e6c:	bd90      	pop	{r4, r7, pc}
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	40005400 	.word	0x40005400
 8005e74:	40021000 	.word	0x40021000
 8005e78:	50000400 	.word	0x50000400
 8005e7c:	20000d18 	.word	0x20000d18
 8005e80:	40020030 	.word	0x40020030
 8005e84:	20000d60 	.word	0x20000d60
 8005e88:	4002001c 	.word	0x4002001c
 8005e8c:	40005800 	.word	0x40005800

08005e90 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005e94:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005e96:	4a11      	ldr	r2, [pc, #68]	@ (8005edc <MX_I2S2_Init+0x4c>)
 8005e98:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005e9c:	22c0      	movs	r2, #192	@ 0xc0
 8005e9e:	0092      	lsls	r2, r2, #2
 8005ea0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005eaa:	2205      	movs	r2, #5
 8005eac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005eae:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005eb4:	4b08      	ldr	r3, [pc, #32]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005eb6:	22fa      	movs	r2, #250	@ 0xfa
 8005eb8:	0152      	lsls	r2, r2, #5
 8005eba:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005ec2:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f007 fb01 	bl	800d4cc <HAL_I2S_Init>
 8005eca:	1e03      	subs	r3, r0, #0
 8005ecc:	d001      	beq.n	8005ed2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8005ece:	f000 fa07 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000da8 	.word	0x20000da8
 8005edc:	40003800 	.word	0x40003800

08005ee0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b089      	sub	sp, #36	@ 0x24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee8:	240c      	movs	r4, #12
 8005eea:	193b      	adds	r3, r7, r4
 8005eec:	0018      	movs	r0, r3
 8005eee:	2314      	movs	r3, #20
 8005ef0:	001a      	movs	r2, r3
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	f011 ff8c 	bl	8017e10 <memset>
  if(i2sHandle->Instance==SPI2)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb4 <HAL_I2S_MspInit+0xd4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d154      	bne.n	8005fac <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005f02:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f06:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f08:	2180      	movs	r1, #128	@ 0x80
 8005f0a:	01c9      	lsls	r1, r1, #7
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f10:	4b29      	ldr	r3, [pc, #164]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f14:	4b28      	ldr	r3, [pc, #160]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f16:	2102      	movs	r1, #2
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005f1c:	4b26      	ldr	r3, [pc, #152]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	2202      	movs	r2, #2
 8005f22:	4013      	ands	r3, r2
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8005f28:	193b      	adds	r3, r7, r4
 8005f2a:	22b0      	movs	r2, #176	@ 0xb0
 8005f2c:	0212      	lsls	r2, r2, #8
 8005f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f30:	0021      	movs	r1, r4
 8005f32:	187b      	adds	r3, r7, r1
 8005f34:	2202      	movs	r2, #2
 8005f36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f38:	187b      	adds	r3, r7, r1
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	2200      	movs	r2, #0
 8005f42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	2200      	movs	r2, #0
 8005f48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f4a:	187b      	adds	r3, r7, r1
 8005f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fbc <HAL_I2S_MspInit+0xdc>)
 8005f4e:	0019      	movs	r1, r3
 8005f50:	0010      	movs	r0, r2
 8005f52:	f005 f811 	bl	800af78 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005f56:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f58:	4a1a      	ldr	r2, [pc, #104]	@ (8005fc4 <HAL_I2S_MspInit+0xe4>)
 8005f5a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8005f5c:	4b18      	ldr	r3, [pc, #96]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f5e:	2202      	movs	r2, #2
 8005f60:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f62:	4b17      	ldr	r3, [pc, #92]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f68:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f6e:	4b14      	ldr	r3, [pc, #80]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f70:	2280      	movs	r2, #128	@ 0x80
 8005f72:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f74:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f76:	2280      	movs	r2, #128	@ 0x80
 8005f78:	0052      	lsls	r2, r2, #1
 8005f7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f7c:	4b10      	ldr	r3, [pc, #64]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f7e:	2280      	movs	r2, #128	@ 0x80
 8005f80:	00d2      	lsls	r2, r2, #3
 8005f82:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005f84:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f86:	2220      	movs	r2, #32
 8005f88:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005f90:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f92:	0018      	movs	r0, r3
 8005f94:	f004 fb76 	bl	800a684 <HAL_DMA_Init>
 8005f98:	1e03      	subs	r3, r0, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8005f9c:	f000 f9a0 	bl	80062e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a07      	ldr	r2, [pc, #28]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fa6:	4b06      	ldr	r3, [pc, #24]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005fac:	46c0      	nop			@ (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b009      	add	sp, #36	@ 0x24
 8005fb2:	bd90      	pop	{r4, r7, pc}
 8005fb4:	40003800 	.word	0x40003800
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	50000400 	.word	0x50000400
 8005fc0:	20000de4 	.word	0x20000de4
 8005fc4:	40020044 	.word	0x40020044

08005fc8 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006008 <HAL_I2S_MspDeInit+0x40>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d111      	bne.n	8005ffe <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005fda:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <HAL_I2S_MspDeInit+0x44>)
 8005fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fde:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <HAL_I2S_MspDeInit+0x44>)
 8005fe0:	490b      	ldr	r1, [pc, #44]	@ (8006010 <HAL_I2S_MspDeInit+0x48>)
 8005fe2:	400a      	ands	r2, r1
 8005fe4:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8005fe6:	23b0      	movs	r3, #176	@ 0xb0
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	4a0a      	ldr	r2, [pc, #40]	@ (8006014 <HAL_I2S_MspDeInit+0x4c>)
 8005fec:	0019      	movs	r1, r3
 8005fee:	0010      	movs	r0, r2
 8005ff0:	f005 f940 	bl	800b274 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f004 fbbb 	bl	800a774 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	46bd      	mov	sp, r7
 8006002:	b002      	add	sp, #8
 8006004:	bd80      	pop	{r7, pc}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	40003800 	.word	0x40003800
 800600c:	40021000 	.word	0x40021000
 8006010:	ffffbfff 	.word	0xffffbfff
 8006014:	50000400 	.word	0x50000400

08006018 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  testDone = true;
 800601c:	4b35      	ldr	r3, [pc, #212]	@ (80060f4 <SetTestDone+0xdc>)
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 8006022:	23fa      	movs	r3, #250	@ 0xfa
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	0018      	movs	r0, r3
 8006028:	f003 fe8e 	bl	8009d48 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800602c:	4b32      	ldr	r3, [pc, #200]	@ (80060f8 <SetTestDone+0xe0>)
 800602e:	2201      	movs	r2, #1
 8006030:	2101      	movs	r1, #1
 8006032:	0018      	movs	r0, r3
 8006034:	f005 fa1d 	bl	800b472 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006038:	2380      	movs	r3, #128	@ 0x80
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	482e      	ldr	r0, [pc, #184]	@ (80060f8 <SetTestDone+0xe0>)
 800603e:	2201      	movs	r2, #1
 8006040:	0019      	movs	r1, r3
 8006042:	f005 fa16 	bl	800b472 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006046:	2380      	movs	r3, #128	@ 0x80
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	482b      	ldr	r0, [pc, #172]	@ (80060f8 <SetTestDone+0xe0>)
 800604c:	2200      	movs	r2, #0
 800604e:	0019      	movs	r1, r3
 8006050:	f005 fa0f 	bl	800b472 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	05db      	lsls	r3, r3, #23
 8006058:	22fa      	movs	r2, #250	@ 0xfa
 800605a:	0112      	lsls	r2, r2, #4
 800605c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800605e:	2380      	movs	r3, #128	@ 0x80
 8006060:	05db      	lsls	r3, r3, #23
 8006062:	22fa      	movs	r2, #250	@ 0xfa
 8006064:	0112      	lsls	r2, r2, #4
 8006066:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 8006068:	2380      	movs	r3, #128	@ 0x80
 800606a:	05db      	lsls	r3, r3, #23
 800606c:	2200      	movs	r2, #0
 800606e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8006070:	4b22      	ldr	r3, [pc, #136]	@ (80060fc <SetTestDone+0xe4>)
 8006072:	22fa      	movs	r2, #250	@ 0xfa
 8006074:	0112      	lsls	r2, r2, #4
 8006076:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006078:	4b20      	ldr	r3, [pc, #128]	@ (80060fc <SetTestDone+0xe4>)
 800607a:	22fa      	movs	r2, #250	@ 0xfa
 800607c:	0112      	lsls	r2, r2, #4
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 8006080:	4b1e      	ldr	r3, [pc, #120]	@ (80060fc <SetTestDone+0xe4>)
 8006082:	2200      	movs	r2, #0
 8006084:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 8006086:	23fa      	movs	r3, #250	@ 0xfa
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	0018      	movs	r0, r3
 800608c:	f003 fe5c 	bl	8009d48 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006090:	4b19      	ldr	r3, [pc, #100]	@ (80060f8 <SetTestDone+0xe0>)
 8006092:	2201      	movs	r2, #1
 8006094:	2101      	movs	r1, #1
 8006096:	0018      	movs	r0, r3
 8006098:	f005 f9eb 	bl	800b472 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800609c:	2380      	movs	r3, #128	@ 0x80
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4815      	ldr	r0, [pc, #84]	@ (80060f8 <SetTestDone+0xe0>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	0019      	movs	r1, r3
 80060a6:	f005 f9e4 	bl	800b472 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80060aa:	2380      	movs	r3, #128	@ 0x80
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4812      	ldr	r0, [pc, #72]	@ (80060f8 <SetTestDone+0xe0>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	0019      	movs	r1, r3
 80060b4:	f005 f9dd 	bl	800b472 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 80060b8:	2380      	movs	r3, #128	@ 0x80
 80060ba:	05db      	lsls	r3, r3, #23
 80060bc:	22fa      	movs	r2, #250	@ 0xfa
 80060be:	0112      	lsls	r2, r2, #4
 80060c0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80060c2:	2380      	movs	r3, #128	@ 0x80
 80060c4:	05db      	lsls	r3, r3, #23
 80060c6:	22fa      	movs	r2, #250	@ 0xfa
 80060c8:	0112      	lsls	r2, r2, #4
 80060ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80060cc:	2380      	movs	r3, #128	@ 0x80
 80060ce:	05db      	lsls	r3, r3, #23
 80060d0:	22fa      	movs	r2, #250	@ 0xfa
 80060d2:	0112      	lsls	r2, r2, #4
 80060d4:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 80060d6:	4b09      	ldr	r3, [pc, #36]	@ (80060fc <SetTestDone+0xe4>)
 80060d8:	22fa      	movs	r2, #250	@ 0xfa
 80060da:	0112      	lsls	r2, r2, #4
 80060dc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80060de:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <SetTestDone+0xe4>)
 80060e0:	22fa      	movs	r2, #250	@ 0xfa
 80060e2:	0112      	lsls	r2, r2, #4
 80060e4:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80060e6:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <SetTestDone+0xe4>)
 80060e8:	22fa      	movs	r2, #250	@ 0xfa
 80060ea:	0112      	lsls	r2, r2, #4
 80060ec:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000e2c 	.word	0x20000e2c
 80060f8:	50000400 	.word	0x50000400
 80060fc:	40000400 	.word	0x40000400

08006100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006104:	f003 fdb0 	bl	8009c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006108:	f000 f864 	bl	80061d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800610c:	f7ff fbd4 	bl	80058b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006110:	f7ff fb48 	bl	80057a4 <MX_DMA_Init>
  MX_I2C1_Init();
 8006114:	f7ff fd62 	bl	8005bdc <MX_I2C1_Init>
  MX_I2S2_Init();
 8006118:	f7ff feba 	bl	8005e90 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800611c:	f003 f884 	bl	8009228 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8006120:	f7ff fd9c 	bl	8005c5c <MX_I2C2_Init>
  MX_TIM2_Init();
 8006124:	f002 fecc 	bl	8008ec0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006128:	f002 ff3e 	bl	8008fa8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800612c:	f003 f8b0 	bl	8009290 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8006130:	f7ff fa86 	bl	8005640 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8006134:	f010 faf2 	bl	801671c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8006138:	f001 f87e 	bl	8007238 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800613c:	f003 f83e 	bl	80091bc <MX_LPUART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8006140:	4a1c      	ldr	r2, [pc, #112]	@ (80061b4 <main+0xb4>)
 8006142:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <main+0xb8>)
 8006144:	0011      	movs	r1, r2
 8006146:	0018      	movs	r0, r3
 8006148:	f7ff fccc 	bl	8005ae4 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 800614c:	f7ff fa68 	bl	8005620 <UserButton_Pressed>
 8006150:	1e03      	subs	r3, r0, #0
 8006152:	d004      	beq.n	800615e <main+0x5e>
    EnableESPProg();
 8006154:	f010 fbb2 	bl	80168bc <EnableESPProg>
    ESP_Programming = true;
 8006158:	4b18      	ldr	r3, [pc, #96]	@ (80061bc <main+0xbc>)
 800615a:	2201      	movs	r2, #1
 800615c:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 800615e:	2003      	movs	r0, #3
 8006160:	f003 fac8 	bl	80096f4 <SetVerboseLevel>
  BinaryReleaseInfo();
 8006164:	f003 fade 	bl	8009724 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8006168:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <main+0xc0>)
 800616a:	4a16      	ldr	r2, [pc, #88]	@ (80061c4 <main+0xc4>)
 800616c:	4916      	ldr	r1, [pc, #88]	@ (80061c8 <main+0xc8>)
 800616e:	4817      	ldr	r0, [pc, #92]	@ (80061cc <main+0xcc>)
 8006170:	f7ff fb3e 	bl	80057f0 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming){
 8006174:	4b16      	ldr	r3, [pc, #88]	@ (80061d0 <main+0xd0>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <main+0x92>
 800617c:	4b0f      	ldr	r3, [pc, #60]	@ (80061bc <main+0xbc>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2201      	movs	r2, #1
 8006182:	4053      	eors	r3, r2
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <main+0x92>
      UpkeepGadget();
 800618a:	f7ff fb5e 	bl	800584a <UpkeepGadget>
      ESP_Upkeep();
 800618e:	f7fe fca9 	bl	8004ae4 <ESP_Upkeep>
    }
    if(!testDone && !ESP_Programming){
 8006192:	4b0f      	ldr	r3, [pc, #60]	@ (80061d0 <main+0xd0>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	4053      	eors	r3, r2
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0e9      	beq.n	8006174 <main+0x74>
 80061a0:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <main+0xbc>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2201      	movs	r2, #1
 80061a6:	4053      	eors	r3, r2
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0e2      	beq.n	8006174 <main+0x74>
      Gadget_Test();
 80061ae:	f7ff fb45 	bl	800583c <Gadget_Test>
    if(testDone && !ESP_Programming){
 80061b2:	e7df      	b.n	8006174 <main+0x74>
 80061b4:	200027fc 	.word	0x200027fc
 80061b8:	200027bc 	.word	0x200027bc
 80061bc:	20000e2d 	.word	0x20000e2d
 80061c0:	20000c14 	.word	0x20000c14
 80061c4:	200029ac 	.word	0x200029ac
 80061c8:	20000da8 	.word	0x20000da8
 80061cc:	20000c70 	.word	0x20000c70
 80061d0:	20000e2c 	.word	0x20000e2c

080061d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b09d      	sub	sp, #116	@ 0x74
 80061d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061da:	2438      	movs	r4, #56	@ 0x38
 80061dc:	193b      	adds	r3, r7, r4
 80061de:	0018      	movs	r0, r3
 80061e0:	2338      	movs	r3, #56	@ 0x38
 80061e2:	001a      	movs	r2, r3
 80061e4:	2100      	movs	r1, #0
 80061e6:	f011 fe13 	bl	8017e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061ea:	2324      	movs	r3, #36	@ 0x24
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	0018      	movs	r0, r3
 80061f0:	2314      	movs	r3, #20
 80061f2:	001a      	movs	r2, r3
 80061f4:	2100      	movs	r1, #0
 80061f6:	f011 fe0b 	bl	8017e10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80061fa:	003b      	movs	r3, r7
 80061fc:	0018      	movs	r0, r3
 80061fe:	2324      	movs	r3, #36	@ 0x24
 8006200:	001a      	movs	r2, r3
 8006202:	2100      	movs	r1, #0
 8006204:	f011 fe04 	bl	8017e10 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006208:	4b32      	ldr	r3, [pc, #200]	@ (80062d4 <SystemClock_Config+0x100>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a32      	ldr	r2, [pc, #200]	@ (80062d8 <SystemClock_Config+0x104>)
 800620e:	401a      	ands	r2, r3
 8006210:	4b30      	ldr	r3, [pc, #192]	@ (80062d4 <SystemClock_Config+0x100>)
 8006212:	2180      	movs	r1, #128	@ 0x80
 8006214:	0109      	lsls	r1, r1, #4
 8006216:	430a      	orrs	r2, r1
 8006218:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800621a:	f009 faf7 	bl	800f80c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800621e:	4b2f      	ldr	r3, [pc, #188]	@ (80062dc <SystemClock_Config+0x108>)
 8006220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006222:	4b2e      	ldr	r3, [pc, #184]	@ (80062dc <SystemClock_Config+0x108>)
 8006224:	492c      	ldr	r1, [pc, #176]	@ (80062d8 <SystemClock_Config+0x104>)
 8006226:	400a      	ands	r2, r1
 8006228:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800622a:	193b      	adds	r3, r7, r4
 800622c:	2226      	movs	r2, #38	@ 0x26
 800622e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006230:	193b      	adds	r3, r7, r4
 8006232:	2280      	movs	r2, #128	@ 0x80
 8006234:	0052      	lsls	r2, r2, #1
 8006236:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006238:	0021      	movs	r1, r4
 800623a:	187b      	adds	r3, r7, r1
 800623c:	2201      	movs	r2, #1
 800623e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006240:	187b      	adds	r3, r7, r1
 8006242:	2210      	movs	r2, #16
 8006244:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006246:	187b      	adds	r3, r7, r1
 8006248:	2201      	movs	r2, #1
 800624a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800624c:	187b      	adds	r3, r7, r1
 800624e:	2200      	movs	r2, #0
 8006250:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006252:	187b      	adds	r3, r7, r1
 8006254:	0018      	movs	r0, r3
 8006256:	f009 fae7 	bl	800f828 <HAL_RCC_OscConfig>
 800625a:	1e03      	subs	r3, r0, #0
 800625c:	d001      	beq.n	8006262 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800625e:	f000 f83f 	bl	80062e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006262:	2124      	movs	r1, #36	@ 0x24
 8006264:	187b      	adds	r3, r7, r1
 8006266:	220f      	movs	r2, #15
 8006268:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800626a:	187b      	adds	r3, r7, r1
 800626c:	2201      	movs	r2, #1
 800626e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006270:	187b      	adds	r3, r7, r1
 8006272:	2200      	movs	r2, #0
 8006274:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006276:	187b      	adds	r3, r7, r1
 8006278:	2200      	movs	r2, #0
 800627a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800627c:	187b      	adds	r3, r7, r1
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006282:	187b      	adds	r3, r7, r1
 8006284:	2100      	movs	r1, #0
 8006286:	0018      	movs	r0, r3
 8006288:	f009 fea2 	bl	800ffd0 <HAL_RCC_ClockConfig>
 800628c:	1e03      	subs	r3, r0, #0
 800628e:	d001      	beq.n	8006294 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006290:	f000 f826 	bl	80062e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8006294:	003b      	movs	r3, r7
 8006296:	226d      	movs	r2, #109	@ 0x6d
 8006298:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800629a:	003b      	movs	r3, r7
 800629c:	2200      	movs	r2, #0
 800629e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80062a0:	003b      	movs	r3, r7
 80062a2:	2200      	movs	r2, #0
 80062a4:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80062a6:	003b      	movs	r3, r7
 80062a8:	2200      	movs	r2, #0
 80062aa:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80062ac:	003b      	movs	r3, r7
 80062ae:	2280      	movs	r2, #128	@ 0x80
 80062b0:	0252      	lsls	r2, r2, #9
 80062b2:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80062b4:	003b      	movs	r3, r7
 80062b6:	2280      	movs	r2, #128	@ 0x80
 80062b8:	04d2      	lsls	r2, r2, #19
 80062ba:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80062bc:	003b      	movs	r3, r7
 80062be:	0018      	movs	r0, r3
 80062c0:	f00a f8aa 	bl	8010418 <HAL_RCCEx_PeriphCLKConfig>
 80062c4:	1e03      	subs	r3, r0, #0
 80062c6:	d001      	beq.n	80062cc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80062c8:	f000 f80a 	bl	80062e0 <Error_Handler>
  }
}
 80062cc:	46c0      	nop			@ (mov r8, r8)
 80062ce:	46bd      	mov	sp, r7
 80062d0:	b01d      	add	sp, #116	@ 0x74
 80062d2:	bd90      	pop	{r4, r7, pc}
 80062d4:	40007000 	.word	0x40007000
 80062d8:	ffffe7ff 	.word	0xffffe7ff
 80062dc:	40021000 	.word	0x40021000

080062e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062e4:	b672      	cpsid	i
}
 80062e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80062e8:	46c0      	nop			@ (mov r8, r8)
 80062ea:	e7fd      	b.n	80062e8 <Error_Handler+0x8>

080062ec <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80062f0:	f7ff fc55 	bl	8005b9e <HT_StartMeasurement>
}
 80062f4:	46c0      	nop			@ (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8006300:	4a04      	ldr	r2, [pc, #16]	@ (8006314 <HT_IsMeasurementDoneWrapper+0x18>)
 8006302:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <HT_IsMeasurementDoneWrapper+0x1c>)
 8006304:	0011      	movs	r1, r2
 8006306:	0018      	movs	r0, r3
 8006308:	f7ff fc50 	bl	8005bac <HT_GetMeasurementValues>
 800630c:	0003      	movs	r3, r0
}
 800630e:	0018      	movs	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	20000e34 	.word	0x20000e34
 8006318:	20000e30 	.word	0x20000e30

0800631c <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8006320:	f7ff faad 	bl	800587e <Gas_StartMeasurement>
}
 8006324:	46c0      	nop			@ (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8006330:	4b03      	ldr	r3, [pc, #12]	@ (8006340 <VOC_IsMeasurementDoneWrapper+0x14>)
 8006332:	0018      	movs	r0, r3
 8006334:	f7ff faaa 	bl	800588c <Gas_GetMeasurementValues>
 8006338:	0003      	movs	r3, r0
}
 800633a:	0018      	movs	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000e38 	.word	0x20000e38

08006344 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
}
 8006348:	46c0      	nop			@ (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800634e:	b580      	push	{r7, lr}
 8006350:	af00      	add	r7, sp, #0
  return true;
 8006352:	2301      	movs	r3, #1
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 800635a:	b580      	push	{r7, lr}
 800635c:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 800635e:	23fa      	movs	r3, #250	@ 0xfa
 8006360:	015b      	lsls	r3, r3, #5
 8006362:	2180      	movs	r1, #128	@ 0x80
 8006364:	0018      	movs	r0, r3
 8006366:	f000 fbbb 	bl	8006ae0 <MIC_Start>
}
 800636a:	46c0      	nop			@ (mov r8, r8)
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8006374:	f000 fe84 	bl	8007080 <MIC_MeasurementDone>
 8006378:	0003      	movs	r3, r0
}
 800637a:	0018      	movs	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <Meas_TestStart>:
void Meas_TestStart(){
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8006384:	f7ff ffe9 	bl	800635a <MIC_StartMeasurementWrapper>
}
 8006388:	46c0      	nop			@ (mov r8, r8)
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 800638e:	b580      	push	{r7, lr}
 8006390:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8006392:	f000 fe99 	bl	80070c8 <MIC_TestMeasurementDone>
 8006396:	0003      	movs	r3, r0
}
 8006398:	0018      	movs	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <testInit>:
void testInit(){
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 80063a4:	4b07      	ldr	r3, [pc, #28]	@ (80063c4 <testInit+0x24>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 80063aa:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <testInit+0x24>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 80063b0:	4b04      	ldr	r3, [pc, #16]	@ (80063c4 <testInit+0x24>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 80063b6:	4b03      	ldr	r3, [pc, #12]	@ (80063c4 <testInit+0x24>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	705a      	strb	r2, [r3, #1]
}
 80063bc:	46c0      	nop			@ (mov r8, r8)
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	20000e74 	.word	0x20000e74

080063c8 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 80063c8:	b5b0      	push	{r4, r5, r7, lr}
 80063ca:	b092      	sub	sp, #72	@ 0x48
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 80063d4:	4b74      	ldr	r3, [pc, #464]	@ (80065a8 <Meas_Init+0x1e0>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	701a      	strb	r2, [r3, #0]
  testInit();
 80063da:	f7ff ffe1 	bl	80063a0 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80063de:	4b73      	ldr	r3, [pc, #460]	@ (80065ac <Meas_Init+0x1e4>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <Meas_Init+0x26>
 80063e6:	4b71      	ldr	r3, [pc, #452]	@ (80065ac <Meas_Init+0x1e4>)
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d072      	beq.n	80064d4 <Meas_Init+0x10c>
    I2CSensors_Init(sensorI2C);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7fe fde1 	bl	8004fb8 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80063f6:	f7ff fbe9 	bl	8005bcc <HT_DeviceConnected>
 80063fa:	0003      	movs	r3, r0
 80063fc:	001a      	movs	r2, r3
 80063fe:	2301      	movs	r3, #1
 8006400:	4053      	eors	r3, r2
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00c      	beq.n	8006422 <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 8006408:	4a69      	ldr	r2, [pc, #420]	@ (80065b0 <Meas_Init+0x1e8>)
 800640a:	4b6a      	ldr	r3, [pc, #424]	@ (80065b4 <Meas_Init+0x1ec>)
 800640c:	0019      	movs	r1, r3
 800640e:	2001      	movs	r0, #1
 8006410:	f003 f8f4 	bl	80095fc <CreateLine>
       MeasTest.HT_Tested = false;
 8006414:	4b68      	ldr	r3, [pc, #416]	@ (80065b8 <Meas_Init+0x1f0>)
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 800641a:	4b64      	ldr	r3, [pc, #400]	@ (80065ac <Meas_Init+0x1e4>)
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e008      	b.n	8006434 <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 8006422:	4b65      	ldr	r3, [pc, #404]	@ (80065b8 <Meas_Init+0x1f0>)
 8006424:	2201      	movs	r2, #1
 8006426:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8006428:	4a64      	ldr	r2, [pc, #400]	@ (80065bc <Meas_Init+0x1f4>)
 800642a:	4b65      	ldr	r3, [pc, #404]	@ (80065c0 <Meas_Init+0x1f8>)
 800642c:	0019      	movs	r1, r3
 800642e:	2003      	movs	r0, #3
 8006430:	f003 f8e4 	bl	80095fc <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8006434:	f7ff fa37 	bl	80058a6 <Gas_DeviceConnected>
 8006438:	0003      	movs	r3, r0
 800643a:	001a      	movs	r2, r3
 800643c:	2301      	movs	r3, #1
 800643e:	4053      	eors	r3, r2
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 8006446:	4b5c      	ldr	r3, [pc, #368]	@ (80065b8 <Meas_Init+0x1f0>)
 8006448:	2200      	movs	r2, #0
 800644a:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 800644c:	4a5d      	ldr	r2, [pc, #372]	@ (80065c4 <Meas_Init+0x1fc>)
 800644e:	4b59      	ldr	r3, [pc, #356]	@ (80065b4 <Meas_Init+0x1ec>)
 8006450:	0019      	movs	r1, r3
 8006452:	2001      	movs	r0, #1
 8006454:	f003 f8d2 	bl	80095fc <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8006458:	4b54      	ldr	r3, [pc, #336]	@ (80065ac <Meas_Init+0x1e4>)
 800645a:	2200      	movs	r2, #0
 800645c:	705a      	strb	r2, [r3, #1]
 800645e:	e008      	b.n	8006472 <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 8006460:	4b55      	ldr	r3, [pc, #340]	@ (80065b8 <Meas_Init+0x1f0>)
 8006462:	2201      	movs	r2, #1
 8006464:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8006466:	4a58      	ldr	r2, [pc, #352]	@ (80065c8 <Meas_Init+0x200>)
 8006468:	4b55      	ldr	r3, [pc, #340]	@ (80065c0 <Meas_Init+0x1f8>)
 800646a:	0019      	movs	r1, r3
 800646c:	2003      	movs	r0, #3
 800646e:	f003 f8c5 	bl	80095fc <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8006472:	4b51      	ldr	r3, [pc, #324]	@ (80065b8 <Meas_Init+0x1f0>)
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d018      	beq.n	80064ac <Meas_Init+0xe4>
 800647a:	4b4f      	ldr	r3, [pc, #316]	@ (80065b8 <Meas_Init+0x1f0>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d014      	beq.n	80064ac <Meas_Init+0xe4>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006482:	4b52      	ldr	r3, [pc, #328]	@ (80065cc <Meas_Init+0x204>)
 8006484:	2201      	movs	r2, #1
 8006486:	2101      	movs	r1, #1
 8006488:	0018      	movs	r0, r3
 800648a:	f004 fff2 	bl	800b472 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 800648e:	2380      	movs	r3, #128	@ 0x80
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	484e      	ldr	r0, [pc, #312]	@ (80065cc <Meas_Init+0x204>)
 8006494:	2200      	movs	r2, #0
 8006496:	0019      	movs	r1, r3
 8006498:	f004 ffeb 	bl	800b472 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800649c:	2380      	movs	r3, #128	@ 0x80
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	484a      	ldr	r0, [pc, #296]	@ (80065cc <Meas_Init+0x204>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	0019      	movs	r1, r3
 80064a6:	f004 ffe4 	bl	800b472 <HAL_GPIO_WritePin>
 80064aa:	e013      	b.n	80064d4 <Meas_Init+0x10c>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80064ac:	4b47      	ldr	r3, [pc, #284]	@ (80065cc <Meas_Init+0x204>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	2101      	movs	r1, #1
 80064b2:	0018      	movs	r0, r3
 80064b4:	f004 ffdd 	bl	800b472 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80064b8:	2380      	movs	r3, #128	@ 0x80
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	4843      	ldr	r0, [pc, #268]	@ (80065cc <Meas_Init+0x204>)
 80064be:	2201      	movs	r2, #1
 80064c0:	0019      	movs	r1, r3
 80064c2:	f004 ffd6 	bl	800b472 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80064c6:	2380      	movs	r3, #128	@ 0x80
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4840      	ldr	r0, [pc, #256]	@ (80065cc <Meas_Init+0x204>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	0019      	movs	r1, r3
 80064d0:	f004 ffcf 	bl	800b472 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80064d4:	4b35      	ldr	r3, [pc, #212]	@ (80065ac <Meas_Init+0x1e4>)
 80064d6:	78db      	ldrb	r3, [r3, #3]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <Meas_Init+0x120>
    MIC_Init(micI2s);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	0018      	movs	r0, r3
 80064e0:	f000 fa98 	bl	8006a14 <MIC_Init>
    Meas_TestStart();
 80064e4:	f7ff ff4c 	bl	8006380 <Meas_TestStart>
  }
  uint8_t offset = 0;
 80064e8:	2547      	movs	r5, #71	@ 0x47
 80064ea:	197b      	adds	r3, r7, r5
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80064f0:	197b      	adds	r3, r7, r5
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	197a      	adds	r2, r7, r5
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	7011      	strb	r1, [r2, #0]
 80064fa:	4a2c      	ldr	r2, [pc, #176]	@ (80065ac <Meas_Init+0x1e4>)
 80064fc:	7814      	ldrb	r4, [r2, #0]
 80064fe:	4a34      	ldr	r2, [pc, #208]	@ (80065d0 <Meas_Init+0x208>)
 8006500:	0119      	lsls	r1, r3, #4
 8006502:	4834      	ldr	r0, [pc, #208]	@ (80065d4 <Meas_Init+0x20c>)
 8006504:	5088      	str	r0, [r1, r2]
 8006506:	4932      	ldr	r1, [pc, #200]	@ (80065d0 <Meas_Init+0x208>)
 8006508:	011a      	lsls	r2, r3, #4
 800650a:	188a      	adds	r2, r1, r2
 800650c:	3204      	adds	r2, #4
 800650e:	4932      	ldr	r1, [pc, #200]	@ (80065d8 <Meas_Init+0x210>)
 8006510:	6011      	str	r1, [r2, #0]
 8006512:	492f      	ldr	r1, [pc, #188]	@ (80065d0 <Meas_Init+0x208>)
 8006514:	011a      	lsls	r2, r3, #4
 8006516:	188a      	adds	r2, r1, r2
 8006518:	3208      	adds	r2, #8
 800651a:	4930      	ldr	r1, [pc, #192]	@ (80065dc <Meas_Init+0x214>)
 800651c:	6011      	str	r1, [r2, #0]
 800651e:	4a2c      	ldr	r2, [pc, #176]	@ (80065d0 <Meas_Init+0x208>)
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	18d3      	adds	r3, r2, r3
 8006524:	330c      	adds	r3, #12
 8006526:	1c22      	adds	r2, r4, #0
 8006528:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 800652a:	197b      	adds	r3, r7, r5
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	197a      	adds	r2, r7, r5
 8006530:	1c59      	adds	r1, r3, #1
 8006532:	7011      	strb	r1, [r2, #0]
 8006534:	4a1d      	ldr	r2, [pc, #116]	@ (80065ac <Meas_Init+0x1e4>)
 8006536:	7854      	ldrb	r4, [r2, #1]
 8006538:	4a25      	ldr	r2, [pc, #148]	@ (80065d0 <Meas_Init+0x208>)
 800653a:	0119      	lsls	r1, r3, #4
 800653c:	4828      	ldr	r0, [pc, #160]	@ (80065e0 <Meas_Init+0x218>)
 800653e:	5088      	str	r0, [r1, r2]
 8006540:	4923      	ldr	r1, [pc, #140]	@ (80065d0 <Meas_Init+0x208>)
 8006542:	011a      	lsls	r2, r3, #4
 8006544:	188a      	adds	r2, r1, r2
 8006546:	3204      	adds	r2, #4
 8006548:	4926      	ldr	r1, [pc, #152]	@ (80065e4 <Meas_Init+0x21c>)
 800654a:	6011      	str	r1, [r2, #0]
 800654c:	4920      	ldr	r1, [pc, #128]	@ (80065d0 <Meas_Init+0x208>)
 800654e:	011a      	lsls	r2, r3, #4
 8006550:	188a      	adds	r2, r1, r2
 8006552:	3208      	adds	r2, #8
 8006554:	4924      	ldr	r1, [pc, #144]	@ (80065e8 <Meas_Init+0x220>)
 8006556:	6011      	str	r1, [r2, #0]
 8006558:	4a1d      	ldr	r2, [pc, #116]	@ (80065d0 <Meas_Init+0x208>)
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	18d3      	adds	r3, r2, r3
 800655e:	330c      	adds	r3, #12
 8006560:	1c22      	adds	r2, r4, #0
 8006562:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8006564:	197b      	adds	r3, r7, r5
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	197a      	adds	r2, r7, r5
 800656a:	1c59      	adds	r1, r3, #1
 800656c:	7011      	strb	r1, [r2, #0]
 800656e:	4a0f      	ldr	r2, [pc, #60]	@ (80065ac <Meas_Init+0x1e4>)
 8006570:	7894      	ldrb	r4, [r2, #2]
 8006572:	4a17      	ldr	r2, [pc, #92]	@ (80065d0 <Meas_Init+0x208>)
 8006574:	0119      	lsls	r1, r3, #4
 8006576:	481d      	ldr	r0, [pc, #116]	@ (80065ec <Meas_Init+0x224>)
 8006578:	5088      	str	r0, [r1, r2]
 800657a:	4915      	ldr	r1, [pc, #84]	@ (80065d0 <Meas_Init+0x208>)
 800657c:	011a      	lsls	r2, r3, #4
 800657e:	188a      	adds	r2, r1, r2
 8006580:	3204      	adds	r2, #4
 8006582:	491b      	ldr	r1, [pc, #108]	@ (80065f0 <Meas_Init+0x228>)
 8006584:	6011      	str	r1, [r2, #0]
 8006586:	4912      	ldr	r1, [pc, #72]	@ (80065d0 <Meas_Init+0x208>)
 8006588:	011a      	lsls	r2, r3, #4
 800658a:	188a      	adds	r2, r1, r2
 800658c:	3208      	adds	r2, #8
 800658e:	4919      	ldr	r1, [pc, #100]	@ (80065f4 <Meas_Init+0x22c>)
 8006590:	6011      	str	r1, [r2, #0]
 8006592:	4a0f      	ldr	r2, [pc, #60]	@ (80065d0 <Meas_Init+0x208>)
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	18d3      	adds	r3, r2, r3
 8006598:	330c      	adds	r3, #12
 800659a:	1c22      	adds	r2, r4, #0
 800659c:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b012      	add	sp, #72	@ 0x48
 80065a4:	bdb0      	pop	{r4, r5, r7, pc}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	20000e78 	.word	0x20000e78
 80065ac:	20000e70 	.word	0x20000e70
 80065b0:	0801b11c 	.word	0x0801b11c
 80065b4:	0801b14c 	.word	0x0801b14c
 80065b8:	20000e74 	.word	0x20000e74
 80065bc:	0801b150 	.word	0x0801b150
 80065c0:	0801b17c 	.word	0x0801b17c
 80065c4:	0801b180 	.word	0x0801b180
 80065c8:	0801b19c 	.word	0x0801b19c
 80065cc:	50000400 	.word	0x50000400
 80065d0:	20000e40 	.word	0x20000e40
 80065d4:	080062ed 	.word	0x080062ed
 80065d8:	080062fd 	.word	0x080062fd
 80065dc:	20000e3c 	.word	0x20000e3c
 80065e0:	0800631d 	.word	0x0800631d
 80065e4:	0800632d 	.word	0x0800632d
 80065e8:	20000e3d 	.word	0x20000e3d
 80065ec:	08006345 	.word	0x08006345
 80065f0:	0800634f 	.word	0x0800634f
 80065f4:	20000e3e 	.word	0x20000e3e

080065f8 <StartMeasurements>:

void StartMeasurements(void) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80065fc:	4b10      	ldr	r3, [pc, #64]	@ (8006640 <StartMeasurements+0x48>)
 80065fe:	2200      	movs	r2, #0
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e015      	b.n	8006630 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006604:	4b0e      	ldr	r3, [pc, #56]	@ (8006640 <StartMeasurements+0x48>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	4a0e      	ldr	r2, [pc, #56]	@ (8006644 <StartMeasurements+0x4c>)
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	18d3      	adds	r3, r2, r3
 800660e:	330c      	adds	r3, #12
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d006      	beq.n	8006624 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <StartMeasurements+0x48>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	001a      	movs	r2, r3
 800661c:	4b09      	ldr	r3, [pc, #36]	@ (8006644 <StartMeasurements+0x4c>)
 800661e:	0112      	lsls	r2, r2, #4
 8006620:	58d3      	ldr	r3, [r2, r3]
 8006622:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006624:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <StartMeasurements+0x48>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <StartMeasurements+0x48>)
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	4b03      	ldr	r3, [pc, #12]	@ (8006640 <StartMeasurements+0x48>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d9e5      	bls.n	8006604 <StartMeasurements+0xc>
    }
  }
}
 8006638:	46c0      	nop			@ (mov r8, r8)
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000e7a 	.word	0x20000e7a
 8006644:	20000e40 	.word	0x20000e40

08006648 <Meas_Test>:

void Meas_Test(){
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 800664c:	4b27      	ldr	r3, [pc, #156]	@ (80066ec <Meas_Test+0xa4>)
 800664e:	78db      	ldrb	r3, [r3, #3]
 8006650:	2201      	movs	r2, #1
 8006652:	4053      	eors	r3, r2
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <Meas_Test+0x16>
    ESP_WakeTest();
 800665a:	f7fe f931 	bl	80048c0 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 800665e:	4b23      	ldr	r3, [pc, #140]	@ (80066ec <Meas_Test+0xa4>)
 8006660:	789b      	ldrb	r3, [r3, #2]
 8006662:	2201      	movs	r2, #1
 8006664:	4053      	eors	r3, r2
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d023      	beq.n	80066b4 <Meas_Test+0x6c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 800666c:	f7ff fe8f 	bl	800638e <MIC_IsTestMeasurementDoneWrapper>
 8006670:	1e03      	subs	r3, r0, #0
 8006672:	d011      	beq.n	8006698 <Meas_Test+0x50>
      MeasTest.MIC_Tested = true;
 8006674:	4b1d      	ldr	r3, [pc, #116]	@ (80066ec <Meas_Test+0xa4>)
 8006676:	2201      	movs	r2, #1
 8006678:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 4000;
 800667a:	2380      	movs	r3, #128	@ 0x80
 800667c:	05db      	lsls	r3, r3, #23
 800667e:	22fa      	movs	r2, #250	@ 0xfa
 8006680:	0112      	lsls	r2, r2, #4
 8006682:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	05db      	lsls	r3, r3, #23
 8006688:	2200      	movs	r2, #0
 800668a:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 800668c:	2380      	movs	r3, #128	@ 0x80
 800668e:	05db      	lsls	r3, r3, #23
 8006690:	22fa      	movs	r2, #250	@ 0xfa
 8006692:	0112      	lsls	r2, r2, #4
 8006694:	641a      	str	r2, [r3, #64]	@ 0x40
 8006696:	e00d      	b.n	80066b4 <Meas_Test+0x6c>
    }
    else{
      TIM2 -> CCR1 = 0;
 8006698:	2380      	movs	r3, #128	@ 0x80
 800669a:	05db      	lsls	r3, r3, #23
 800669c:	2200      	movs	r2, #0
 800669e:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	05db      	lsls	r3, r3, #23
 80066a4:	22fa      	movs	r2, #250	@ 0xfa
 80066a6:	0112      	lsls	r2, r2, #4
 80066a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 80066aa:	2380      	movs	r3, #128	@ 0x80
 80066ac:	05db      	lsls	r3, r3, #23
 80066ae:	22fa      	movs	r2, #250	@ 0xfa
 80066b0:	0112      	lsls	r2, r2, #4
 80066b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 80066b4:	4b0d      	ldr	r3, [pc, #52]	@ (80066ec <Meas_Test+0xa4>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d013      	beq.n	80066e4 <Meas_Test+0x9c>
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <Meas_Test+0xa4>)
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00f      	beq.n	80066e4 <Meas_Test+0x9c>
 80066c4:	4b09      	ldr	r3, [pc, #36]	@ (80066ec <Meas_Test+0xa4>)
 80066c6:	78db      	ldrb	r3, [r3, #3]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <Meas_Test+0x9c>
 80066cc:	4b07      	ldr	r3, [pc, #28]	@ (80066ec <Meas_Test+0xa4>)
 80066ce:	789b      	ldrb	r3, [r3, #2]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <Meas_Test+0x9c>
    Debug("Test completed");
 80066d4:	4a06      	ldr	r2, [pc, #24]	@ (80066f0 <Meas_Test+0xa8>)
 80066d6:	4b07      	ldr	r3, [pc, #28]	@ (80066f4 <Meas_Test+0xac>)
 80066d8:	0019      	movs	r1, r3
 80066da:	2003      	movs	r0, #3
 80066dc:	f002 ff8e 	bl	80095fc <CreateLine>
    SetTestDone();
 80066e0:	f7ff fc9a 	bl	8006018 <SetTestDone>
  }
}
 80066e4:	46c0      	nop			@ (mov r8, r8)
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	20000e74 	.word	0x20000e74
 80066f0:	0801b1b4 	.word	0x0801b1b4
 80066f4:	0801b17c 	.word	0x0801b17c

080066f8 <ResetMeasurements>:
void ResetMeasurements(void) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 80066fc:	4b0b      	ldr	r3, [pc, #44]	@ (800672c <ResetMeasurements+0x34>)
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8006702:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <ResetMeasurements+0x34>)
 8006704:	2200      	movs	r2, #0
 8006706:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006708:	4b08      	ldr	r3, [pc, #32]	@ (800672c <ResetMeasurements+0x34>)
 800670a:	2200      	movs	r2, #0
 800670c:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 800670e:	4b07      	ldr	r3, [pc, #28]	@ (800672c <ResetMeasurements+0x34>)
 8006710:	2200      	movs	r2, #0
 8006712:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006714:	4b05      	ldr	r3, [pc, #20]	@ (800672c <ResetMeasurements+0x34>)
 8006716:	2200      	movs	r2, #0
 8006718:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 800671a:	4b04      	ldr	r3, [pc, #16]	@ (800672c <ResetMeasurements+0x34>)
 800671c:	2200      	movs	r2, #0
 800671e:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8006720:	4b02      	ldr	r3, [pc, #8]	@ (800672c <ResetMeasurements+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	73da      	strb	r2, [r3, #15]
}
 8006726:	46c0      	nop			@ (mov r8, r8)
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20000e30 	.word	0x20000e30

08006730 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006734:	4b18      	ldr	r3, [pc, #96]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	e024      	b.n	8006786 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 800673c:	4b16      	ldr	r3, [pc, #88]	@ (8006798 <MeasurementsCompleted+0x68>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	4a16      	ldr	r2, [pc, #88]	@ (800679c <MeasurementsCompleted+0x6c>)
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	18d3      	adds	r3, r2, r3
 8006746:	330c      	adds	r3, #12
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d015      	beq.n	800677a <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 800674e:	4b12      	ldr	r3, [pc, #72]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	4a12      	ldr	r2, [pc, #72]	@ (800679c <MeasurementsCompleted+0x6c>)
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	18d3      	adds	r3, r2, r3
 8006758:	3304      	adds	r3, #4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4798      	blx	r3
 800675e:	1e03      	subs	r3, r0, #0
 8006760:	d009      	beq.n	8006776 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8006762:	4b0d      	ldr	r3, [pc, #52]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	4a0d      	ldr	r2, [pc, #52]	@ (800679c <MeasurementsCompleted+0x6c>)
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	18d3      	adds	r3, r2, r3
 800676c:	3308      	adds	r3, #8
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	e001      	b.n	800677a <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8006776:	2300      	movs	r3, #0
 8006778:	e00a      	b.n	8006790 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 800677a:	4b07      	ldr	r3, [pc, #28]	@ (8006798 <MeasurementsCompleted+0x68>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	3301      	adds	r3, #1
 8006780:	b2da      	uxtb	r2, r3
 8006782:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d9d6      	bls.n	800673c <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 800678e:	2301      	movs	r3, #1
}
 8006790:	0018      	movs	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	46c0      	nop			@ (mov r8, r8)
 8006798:	20000e7a 	.word	0x20000e7a
 800679c:	20000e40 	.word	0x20000e40

080067a0 <Mic_Upkeep>:

void Mic_Upkeep(){
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  switch(MicState){
 80067a4:	4b20      	ldr	r3, [pc, #128]	@ (8006828 <Mic_Upkeep+0x88>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d022      	beq.n	80067f2 <Mic_Upkeep+0x52>
 80067ac:	dc2c      	bgt.n	8006808 <Mic_Upkeep+0x68>
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d00f      	beq.n	80067d2 <Mic_Upkeep+0x32>
 80067b2:	dc29      	bgt.n	8006808 <Mic_Upkeep+0x68>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <Mic_Upkeep+0x1e>
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d004      	beq.n	80067c6 <Mic_Upkeep+0x26>
 80067bc:	e024      	b.n	8006808 <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 80067be:	4b1a      	ldr	r3, [pc, #104]	@ (8006828 <Mic_Upkeep+0x88>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
    break;
 80067c4:	e02d      	b.n	8006822 <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 80067c6:	f7ff fdc8 	bl	800635a <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80067ca:	4b17      	ldr	r3, [pc, #92]	@ (8006828 <Mic_Upkeep+0x88>)
 80067cc:	2202      	movs	r2, #2
 80067ce:	701a      	strb	r2, [r3, #0]
    break;
 80067d0:	e027      	b.n	8006822 <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 80067d2:	f7ff fdcd 	bl	8006370 <MIC_IsMeasurementDoneWrapper>
 80067d6:	1e03      	subs	r3, r0, #0
 80067d8:	d020      	beq.n	800681c <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 80067da:	4b13      	ldr	r3, [pc, #76]	@ (8006828 <Mic_Upkeep+0x88>)
 80067dc:	2203      	movs	r2, #3
 80067de:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 80067e0:	f003 faa8 	bl	8009d34 <HAL_GetTick>
 80067e4:	0003      	movs	r3, r0
 80067e6:	22fa      	movs	r2, #250	@ 0xfa
 80067e8:	0092      	lsls	r2, r2, #2
 80067ea:	189a      	adds	r2, r3, r2
 80067ec:	4b0f      	ldr	r3, [pc, #60]	@ (800682c <Mic_Upkeep+0x8c>)
 80067ee:	601a      	str	r2, [r3, #0]
    }
    break;
 80067f0:	e014      	b.n	800681c <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 80067f2:	4b0e      	ldr	r3, [pc, #56]	@ (800682c <Mic_Upkeep+0x8c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	0018      	movs	r0, r3
 80067f8:	f002 feaa 	bl	8009550 <TimestampIsReached>
 80067fc:	1e03      	subs	r3, r0, #0
 80067fe:	d00f      	beq.n	8006820 <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 8006800:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <Mic_Upkeep+0x88>)
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006806:	e00b      	b.n	8006820 <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006808:	4a09      	ldr	r2, [pc, #36]	@ (8006830 <Mic_Upkeep+0x90>)
 800680a:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <Mic_Upkeep+0x94>)
 800680c:	0019      	movs	r1, r3
 800680e:	2003      	movs	r0, #3
 8006810:	f002 fef4 	bl	80095fc <CreateLine>
    MicState = MIC_STATE_INIT;
 8006814:	4b04      	ldr	r3, [pc, #16]	@ (8006828 <Mic_Upkeep+0x88>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
    break;
 800681a:	e002      	b.n	8006822 <Mic_Upkeep+0x82>
    break;
 800681c:	46c0      	nop			@ (mov r8, r8)
 800681e:	e000      	b.n	8006822 <Mic_Upkeep+0x82>
    break;
 8006820:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000e79 	.word	0x20000e79
 800682c:	20000e80 	.word	0x20000e80
 8006830:	0801b1c4 	.word	0x0801b1c4
 8006834:	0801b17c 	.word	0x0801b17c

08006838 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8006838:	b5b0      	push	{r4, r5, r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af04      	add	r7, sp, #16
  switch(MeasState) {
 800683e:	4b3e      	ldr	r3, [pc, #248]	@ (8006938 <Meas_Upkeep+0x100>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b06      	cmp	r3, #6
 8006844:	d86d      	bhi.n	8006922 <Meas_Upkeep+0xea>
 8006846:	009a      	lsls	r2, r3, #2
 8006848:	4b3c      	ldr	r3, [pc, #240]	@ (800693c <Meas_Upkeep+0x104>)
 800684a:	18d3      	adds	r3, r2, r3
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8006850:	4a3b      	ldr	r2, [pc, #236]	@ (8006940 <Meas_Upkeep+0x108>)
 8006852:	4b3c      	ldr	r3, [pc, #240]	@ (8006944 <Meas_Upkeep+0x10c>)
 8006854:	0019      	movs	r1, r3
 8006856:	2003      	movs	r0, #3
 8006858:	f002 fed0 	bl	80095fc <CreateLine>
    break;
 800685c:	e068      	b.n	8006930 <Meas_Upkeep+0xf8>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 800685e:	f7ff ff4b 	bl	80066f8 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8006862:	4b35      	ldr	r3, [pc, #212]	@ (8006938 <Meas_Upkeep+0x100>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
    break;
 8006868:	e062      	b.n	8006930 <Meas_Upkeep+0xf8>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 800686a:	f7ff fec5 	bl	80065f8 <StartMeasurements>
    TIM2 -> CCR3 = 3000;
 800686e:	2380      	movs	r3, #128	@ 0x80
 8006870:	05db      	lsls	r3, r3, #23
 8006872:	4a35      	ldr	r2, [pc, #212]	@ (8006948 <Meas_Upkeep+0x110>)
 8006874:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8006876:	4b30      	ldr	r3, [pc, #192]	@ (8006938 <Meas_Upkeep+0x100>)
 8006878:	2202      	movs	r2, #2
 800687a:	701a      	strb	r2, [r3, #0]
   break;
 800687c:	e058      	b.n	8006930 <Meas_Upkeep+0xf8>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 800687e:	f7ff ff57 	bl	8006730 <MeasurementsCompleted>
 8006882:	1e03      	subs	r3, r0, #0
 8006884:	d051      	beq.n	800692a <Meas_Upkeep+0xf2>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8006886:	4b2c      	ldr	r3, [pc, #176]	@ (8006938 <Meas_Upkeep+0x100>)
 8006888:	2203      	movs	r2, #3
 800688a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800688c:	e04d      	b.n	800692a <Meas_Upkeep+0xf2>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 800688e:	4a2f      	ldr	r2, [pc, #188]	@ (800694c <Meas_Upkeep+0x114>)
 8006890:	4b2c      	ldr	r3, [pc, #176]	@ (8006944 <Meas_Upkeep+0x10c>)
 8006892:	0019      	movs	r1, r3
 8006894:	2003      	movs	r0, #3
 8006896:	f002 feb1 	bl	80095fc <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 800689a:	4b2d      	ldr	r3, [pc, #180]	@ (8006950 <Meas_Upkeep+0x118>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	4a2d      	ldr	r2, [pc, #180]	@ (8006954 <Meas_Upkeep+0x11c>)
 80068a0:	4928      	ldr	r1, [pc, #160]	@ (8006944 <Meas_Upkeep+0x10c>)
 80068a2:	2003      	movs	r0, #3
 80068a4:	f002 feaa 	bl	80095fc <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 80068a8:	4b29      	ldr	r3, [pc, #164]	@ (8006950 <Meas_Upkeep+0x118>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	1c18      	adds	r0, r3, #0
 80068ae:	f7fc fd57 	bl	8003360 <__aeabi_f2d>
 80068b2:	0004      	movs	r4, r0
 80068b4:	000d      	movs	r5, r1
 80068b6:	4b26      	ldr	r3, [pc, #152]	@ (8006950 <Meas_Upkeep+0x118>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	1c18      	adds	r0, r3, #0
 80068bc:	f7fc fd50 	bl	8003360 <__aeabi_f2d>
 80068c0:	0002      	movs	r2, r0
 80068c2:	000b      	movs	r3, r1
 80068c4:	4824      	ldr	r0, [pc, #144]	@ (8006958 <Meas_Upkeep+0x120>)
 80068c6:	491f      	ldr	r1, [pc, #124]	@ (8006944 <Meas_Upkeep+0x10c>)
 80068c8:	9202      	str	r2, [sp, #8]
 80068ca:	9303      	str	r3, [sp, #12]
 80068cc:	9400      	str	r4, [sp, #0]
 80068ce:	9501      	str	r5, [sp, #4]
 80068d0:	0002      	movs	r2, r0
 80068d2:	2003      	movs	r0, #3
 80068d4:	f002 fe92 	bl	80095fc <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 80068d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006950 <Meas_Upkeep+0x118>)
 80068da:	6858      	ldr	r0, [r3, #4]
 80068dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006950 <Meas_Upkeep+0x118>)
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006950 <Meas_Upkeep+0x118>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	001a      	movs	r2, r3
 80068e8:	f7fc feea 	bl	80036c0 <setMeasurement>
    TIM2 -> CCR3 = 4000;
 80068ec:	2380      	movs	r3, #128	@ 0x80
 80068ee:	05db      	lsls	r3, r3, #23
 80068f0:	22fa      	movs	r2, #250	@ 0xfa
 80068f2:	0112      	lsls	r2, r2, #4
 80068f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasStamp = HAL_GetTick() + 10000;
 80068f6:	f003 fa1d 	bl	8009d34 <HAL_GetTick>
 80068fa:	0003      	movs	r3, r0
 80068fc:	4a17      	ldr	r2, [pc, #92]	@ (800695c <Meas_Upkeep+0x124>)
 80068fe:	189a      	adds	r2, r3, r2
 8006900:	4b17      	ldr	r3, [pc, #92]	@ (8006960 <Meas_Upkeep+0x128>)
 8006902:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <Meas_Upkeep+0x100>)
 8006906:	2206      	movs	r2, #6
 8006908:	701a      	strb	r2, [r3, #0]
    break;
 800690a:	e011      	b.n	8006930 <Meas_Upkeep+0xf8>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 800690c:	4b14      	ldr	r3, [pc, #80]	@ (8006960 <Meas_Upkeep+0x128>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	0018      	movs	r0, r3
 8006912:	f002 fe1d 	bl	8009550 <TimestampIsReached>
 8006916:	1e03      	subs	r3, r0, #0
 8006918:	d009      	beq.n	800692e <Meas_Upkeep+0xf6>
      MeasState = MEAS_STATE_INIT;
 800691a:	4b07      	ldr	r3, [pc, #28]	@ (8006938 <Meas_Upkeep+0x100>)
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
    }

    break;
 8006920:	e005      	b.n	800692e <Meas_Upkeep+0xf6>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006922:	4b05      	ldr	r3, [pc, #20]	@ (8006938 <Meas_Upkeep+0x100>)
 8006924:	2200      	movs	r2, #0
 8006926:	701a      	strb	r2, [r3, #0]
    break;
 8006928:	e002      	b.n	8006930 <Meas_Upkeep+0xf8>
    break;
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	e000      	b.n	8006930 <Meas_Upkeep+0xf8>
    break;
 800692e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006930:	46c0      	nop			@ (mov r8, r8)
 8006932:	46bd      	mov	sp, r7
 8006934:	bdb0      	pop	{r4, r5, r7, pc}
 8006936:	46c0      	nop			@ (mov r8, r8)
 8006938:	20000e78 	.word	0x20000e78
 800693c:	0801b954 	.word	0x0801b954
 8006940:	0801b1e4 	.word	0x0801b1e4
 8006944:	0801b17c 	.word	0x0801b17c
 8006948:	00000bb8 	.word	0x00000bb8
 800694c:	0801b204 	.word	0x0801b204
 8006950:	20000e30 	.word	0x20000e30
 8006954:	0801b218 	.word	0x0801b218
 8006958:	0801b230 	.word	0x0801b230
 800695c:	00002710 	.word	0x00002710
 8006960:	20000e7c 	.word	0x20000e7c

08006964 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006964:	b590      	push	{r4, r7, lr}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 800696e:	240f      	movs	r4, #15
 8006970:	193b      	adds	r3, r7, r4
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8006976:	4b20      	ldr	r3, [pc, #128]	@ (80069f8 <Meas_SetEnabledSensors+0x94>)
 8006978:	1d3a      	adds	r2, r7, #4
 800697a:	6812      	ldr	r2, [r2, #0]
 800697c:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 800697e:	193b      	adds	r3, r7, r4
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	193a      	adds	r2, r7, r4
 8006984:	1c59      	adds	r1, r3, #1
 8006986:	7011      	strb	r1, [r2, #0]
 8006988:	0018      	movs	r0, r3
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	7819      	ldrb	r1, [r3, #0]
 800698e:	4a1b      	ldr	r2, [pc, #108]	@ (80069fc <Meas_SetEnabledSensors+0x98>)
 8006990:	0103      	lsls	r3, r0, #4
 8006992:	18d3      	adds	r3, r2, r3
 8006994:	330c      	adds	r3, #12
 8006996:	1c0a      	adds	r2, r1, #0
 8006998:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 800699a:	193b      	adds	r3, r7, r4
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	193a      	adds	r2, r7, r4
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	7011      	strb	r1, [r2, #0]
 80069a4:	0018      	movs	r0, r3
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	7859      	ldrb	r1, [r3, #1]
 80069aa:	4a14      	ldr	r2, [pc, #80]	@ (80069fc <Meas_SetEnabledSensors+0x98>)
 80069ac:	0103      	lsls	r3, r0, #4
 80069ae:	18d3      	adds	r3, r2, r3
 80069b0:	330c      	adds	r3, #12
 80069b2:	1c0a      	adds	r2, r1, #0
 80069b4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 80069b6:	193b      	adds	r3, r7, r4
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	193a      	adds	r2, r7, r4
 80069bc:	1c59      	adds	r1, r3, #1
 80069be:	7011      	strb	r1, [r2, #0]
 80069c0:	0018      	movs	r0, r3
 80069c2:	1d3b      	adds	r3, r7, #4
 80069c4:	7899      	ldrb	r1, [r3, #2]
 80069c6:	4a0d      	ldr	r2, [pc, #52]	@ (80069fc <Meas_SetEnabledSensors+0x98>)
 80069c8:	0103      	lsls	r3, r0, #4
 80069ca:	18d3      	adds	r3, r2, r3
 80069cc:	330c      	adds	r3, #12
 80069ce:	1c0a      	adds	r2, r1, #0
 80069d0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 80069d2:	193b      	adds	r3, r7, r4
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	193a      	adds	r2, r7, r4
 80069d8:	1c59      	adds	r1, r3, #1
 80069da:	7011      	strb	r1, [r2, #0]
 80069dc:	0018      	movs	r0, r3
 80069de:	1d3b      	adds	r3, r7, #4
 80069e0:	78d9      	ldrb	r1, [r3, #3]
 80069e2:	4a06      	ldr	r2, [pc, #24]	@ (80069fc <Meas_SetEnabledSensors+0x98>)
 80069e4:	0103      	lsls	r3, r0, #4
 80069e6:	18d3      	adds	r3, r2, r3
 80069e8:	330c      	adds	r3, #12
 80069ea:	1c0a      	adds	r2, r1, #0
 80069ec:	701a      	strb	r2, [r3, #0]
}
 80069ee:	46c0      	nop			@ (mov r8, r8)
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b005      	add	sp, #20
 80069f4:	bd90      	pop	{r4, r7, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	20000e70 	.word	0x20000e70
 80069fc:	20000e40 	.word	0x20000e40

08006a00 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006a04:	4b02      	ldr	r3, [pc, #8]	@ (8006a10 <SetESPMeasurementDone+0x10>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	70da      	strb	r2, [r3, #3]
}
 8006a0a:	46c0      	nop			@ (mov r8, r8)
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000e74 	.word	0x20000e74

08006a14 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	4b03      	ldr	r3, [pc, #12]	@ (8006a2c <MIC_Init+0x18>)
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b002      	add	sp, #8
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			@ (mov r8, r8)
 8006a2c:	20000e84 	.word	0x20000e84

08006a30 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006a38:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <UpdateSampleRate+0x3c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d00e      	beq.n	8006a62 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006a44:	4b09      	ldr	r3, [pc, #36]	@ (8006a6c <UpdateSampleRate+0x3c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f006 fe31 	bl	800d6b0 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006a4e:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <UpdateSampleRate+0x3c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006a56:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <UpdateSampleRate+0x3c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f006 fd36 	bl	800d4cc <HAL_I2S_Init>
 8006a60:	e000      	b.n	8006a64 <UpdateSampleRate+0x34>
    return;
 8006a62:	46c0      	nop			@ (mov r8, r8)
}
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b002      	add	sp, #8
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	20000e84 	.word	0x20000e84

08006a70 <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006a78:	4b18      	ldr	r3, [pc, #96]	@ (8006adc <ConvertAudio+0x6c>)
 8006a7a:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	5e9b      	ldrsh	r3, [r3, r2]
 8006a8a:	025b      	lsls	r3, r3, #9
 8006a8c:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3302      	adds	r3, #2
 8006a92:	2200      	movs	r2, #0
 8006a94:	5e9b      	ldrsh	r3, [r3, r2]
 8006a96:	11db      	asrs	r3, r3, #7
 8006a98:	05db      	lsls	r3, r3, #23
 8006a9a:	0ddb      	lsrs	r3, r3, #23
 8006a9c:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	2380      	movs	r3, #128	@ 0x80
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	4013      	ands	r3, r2
 8006aae:	d004      	beq.n	8006aba <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	22ff      	movs	r2, #255	@ 0xff
 8006ab4:	0612      	lsls	r2, r2, #24
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006abe:	68b8      	ldr	r0, [r7, #8]
 8006ac0:	f7fa fd04 	bl	80014cc <__aeabi_i2f>
 8006ac4:	1c03      	adds	r3, r0, #0
 8006ac6:	69b9      	ldr	r1, [r7, #24]
 8006ac8:	1c18      	adds	r0, r3, #0
 8006aca:	f7fa f801 	bl	8000ad0 <__aeabi_fdiv>
 8006ace:	1c03      	adds	r3, r0, #0
 8006ad0:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006ad2:	697b      	ldr	r3, [r7, #20]
}
 8006ad4:	1c18      	adds	r0, r3, #0
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b008      	add	sp, #32
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	4afffffe 	.word	0x4afffffe

08006ae0 <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006ae0:	b5b0      	push	{r4, r5, r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	000a      	movs	r2, r1
 8006aea:	1cbb      	adds	r3, r7, #2
 8006aec:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8006aee:	4b20      	ldr	r3, [pc, #128]	@ (8006b70 <MIC_Start+0x90>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006af6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b74 <MIC_Start+0x94>)
 8006af8:	4b1f      	ldr	r3, [pc, #124]	@ (8006b78 <MIC_Start+0x98>)
 8006afa:	0019      	movs	r1, r3
 8006afc:	2001      	movs	r0, #1
 8006afe:	f002 fd7d 	bl	80095fc <CreateLine>
    return;
 8006b02:	e031      	b.n	8006b68 <MIC_Start+0x88>
  }
  TIM2 -> CCR1 = 3000;
 8006b04:	2380      	movs	r3, #128	@ 0x80
 8006b06:	05db      	lsls	r3, r3, #23
 8006b08:	4a1c      	ldr	r2, [pc, #112]	@ (8006b7c <MIC_Start+0x9c>)
 8006b0a:	635a      	str	r2, [r3, #52]	@ 0x34
  Debug("In mic start");
 8006b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006b80 <MIC_Start+0xa0>)
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b84 <MIC_Start+0xa4>)
 8006b10:	0019      	movs	r1, r3
 8006b12:	2003      	movs	r0, #3
 8006b14:	f002 fd72 	bl	80095fc <CreateLine>
  UpdateSampleRate(sampleRate);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7ff ff88 	bl	8006a30 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006b20:	4b19      	ldr	r3, [pc, #100]	@ (8006b88 <MIC_Start+0xa8>)
 8006b22:	1cba      	adds	r2, r7, #2
 8006b24:	8812      	ldrh	r2, [r2, #0]
 8006b26:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006b28:	f003 f904 	bl	8009d34 <HAL_GetTick>
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	3314      	adds	r3, #20
 8006b30:	001a      	movs	r2, r3
 8006b32:	4b16      	ldr	r3, [pc, #88]	@ (8006b8c <MIC_Start+0xac>)
 8006b34:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006b36:	4b16      	ldr	r3, [pc, #88]	@ (8006b90 <MIC_Start+0xb0>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006b3c:	4b15      	ldr	r3, [pc, #84]	@ (8006b94 <MIC_Start+0xb4>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006b42:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <MIC_Start+0x90>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	250f      	movs	r5, #15
 8006b48:	197c      	adds	r4, r7, r5
 8006b4a:	2280      	movs	r2, #128	@ 0x80
 8006b4c:	00d2      	lsls	r2, r2, #3
 8006b4e:	4912      	ldr	r1, [pc, #72]	@ (8006b98 <MIC_Start+0xb8>)
 8006b50:	0018      	movs	r0, r3
 8006b52:	f006 fdd9 	bl	800d708 <HAL_I2S_Receive_DMA>
 8006b56:	0003      	movs	r3, r0
 8006b58:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006b5a:	197b      	adds	r3, r7, r5
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8006b9c <MIC_Start+0xbc>)
 8006b60:	490f      	ldr	r1, [pc, #60]	@ (8006ba0 <MIC_Start+0xc0>)
 8006b62:	2002      	movs	r0, #2
 8006b64:	f002 fd4a 	bl	80095fc <CreateLine>
}
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b004      	add	sp, #16
 8006b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b6e:	46c0      	nop			@ (mov r8, r8)
 8006b70:	20000e84 	.word	0x20000e84
 8006b74:	0801b264 	.word	0x0801b264
 8006b78:	0801b284 	.word	0x0801b284
 8006b7c:	00000bb8 	.word	0x00000bb8
 8006b80:	0801b288 	.word	0x0801b288
 8006b84:	0801b298 	.word	0x0801b298
 8006b88:	20000064 	.word	0x20000064
 8006b8c:	20001e88 	.word	0x20001e88
 8006b90:	20001e8c 	.word	0x20001e8c
 8006b94:	20001e8d 	.word	0x20001e8d
 8006b98:	20000e88 	.word	0x20000e88
 8006b9c:	0801b29c 	.word	0x0801b29c
 8006ba0:	0801b2a8 	.word	0x0801b2a8

08006ba4 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	0002      	movs	r2, r0
 8006bac:	1dbb      	adds	r3, r7, #6
 8006bae:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006bb0:	23fe      	movs	r3, #254	@ 0xfe
 8006bb2:	059b      	lsls	r3, r3, #22
 8006bb4:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	2200      	movs	r2, #0
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	e01c      	b.n	8006bfa <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006bc0:	240a      	movs	r4, #10
 8006bc2:	193b      	adds	r3, r7, r4
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	5e9a      	ldrsh	r2, [r3, r2]
 8006bc8:	4b12      	ldr	r3, [pc, #72]	@ (8006c14 <MinimalValue+0x70>)
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	58d3      	ldr	r3, [r2, r3]
 8006bce:	1c19      	adds	r1, r3, #0
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7f9 fc8f 	bl	80004f4 <__aeabi_fcmpgt>
 8006bd6:	1e03      	subs	r3, r0, #0
 8006bd8:	d006      	beq.n	8006be8 <MinimalValue+0x44>
      MinVal = sample[i];
 8006bda:	193b      	adds	r3, r7, r4
 8006bdc:	2200      	movs	r2, #0
 8006bde:	5e9a      	ldrsh	r2, [r3, r2]
 8006be0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <MinimalValue+0x70>)
 8006be2:	0092      	lsls	r2, r2, #2
 8006be4:	58d3      	ldr	r3, [r2, r3]
 8006be6:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006be8:	210a      	movs	r1, #10
 8006bea:	187b      	adds	r3, r7, r1
 8006bec:	2200      	movs	r2, #0
 8006bee:	5e9b      	ldrsh	r3, [r3, r2]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	187b      	adds	r3, r7, r1
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	230a      	movs	r3, #10
 8006bfc:	18fb      	adds	r3, r7, r3
 8006bfe:	2200      	movs	r2, #0
 8006c00:	5e9a      	ldrsh	r2, [r3, r2]
 8006c02:	1dbb      	adds	r3, r7, #6
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	dbda      	blt.n	8006bc0 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
}
 8006c0c:	1c18      	adds	r0, r3, #0
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b005      	add	sp, #20
 8006c12:	bd90      	pop	{r4, r7, pc}
 8006c14:	20001ec4 	.word	0x20001ec4

08006c18 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	0002      	movs	r2, r0
 8006c20:	1dbb      	adds	r3, r7, #6
 8006c22:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006c24:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <MaximalValue+0x70>)
 8006c26:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006c28:	230a      	movs	r3, #10
 8006c2a:	18fb      	adds	r3, r7, r3
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	801a      	strh	r2, [r3, #0]
 8006c30:	e01c      	b.n	8006c6c <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006c32:	240a      	movs	r4, #10
 8006c34:	193b      	adds	r3, r7, r4
 8006c36:	2200      	movs	r2, #0
 8006c38:	5e9a      	ldrsh	r2, [r3, r2]
 8006c3a:	4b14      	ldr	r3, [pc, #80]	@ (8006c8c <MaximalValue+0x74>)
 8006c3c:	0092      	lsls	r2, r2, #2
 8006c3e:	58d3      	ldr	r3, [r2, r3]
 8006c40:	1c19      	adds	r1, r3, #0
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7f9 fc42 	bl	80004cc <__aeabi_fcmplt>
 8006c48:	1e03      	subs	r3, r0, #0
 8006c4a:	d006      	beq.n	8006c5a <MaximalValue+0x42>
      MaxVal = sample[i];
 8006c4c:	193b      	adds	r3, r7, r4
 8006c4e:	2200      	movs	r2, #0
 8006c50:	5e9a      	ldrsh	r2, [r3, r2]
 8006c52:	4b0e      	ldr	r3, [pc, #56]	@ (8006c8c <MaximalValue+0x74>)
 8006c54:	0092      	lsls	r2, r2, #2
 8006c56:	58d3      	ldr	r3, [r2, r3]
 8006c58:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006c5a:	210a      	movs	r1, #10
 8006c5c:	187b      	adds	r3, r7, r1
 8006c5e:	2200      	movs	r2, #0
 8006c60:	5e9b      	ldrsh	r3, [r3, r2]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3301      	adds	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	187b      	adds	r3, r7, r1
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	230a      	movs	r3, #10
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	2200      	movs	r2, #0
 8006c72:	5e9a      	ldrsh	r2, [r3, r2]
 8006c74:	1dbb      	adds	r3, r7, #6
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	dbda      	blt.n	8006c32 <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
}
 8006c7e:	1c18      	adds	r0, r3, #0
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b005      	add	sp, #20
 8006c84:	bd90      	pop	{r4, r7, pc}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	bf800000 	.word	0xbf800000
 8006c8c:	20001ec4 	.word	0x20001ec4

08006c90 <MIC_Check>:
bool MIC_Check(void) {
 8006c90:	b5b0      	push	{r4, r5, r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006c96:	4a25      	ldr	r2, [pc, #148]	@ (8006d2c <MIC_Check+0x9c>)
 8006c98:	4b25      	ldr	r3, [pc, #148]	@ (8006d30 <MIC_Check+0xa0>)
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	2002      	movs	r0, #2
 8006c9e:	f002 fcad 	bl	80095fc <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006ca2:	230e      	movs	r3, #14
 8006ca4:	18fb      	adds	r3, r7, r3
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	801a      	strh	r2, [r3, #0]
 8006caa:	e016      	b.n	8006cda <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006cac:	210e      	movs	r1, #14
 8006cae:	187b      	adds	r3, r7, r1
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	005a      	lsls	r2, r3, #1
 8006cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d34 <MIC_Check+0xa4>)
 8006cba:	18d2      	adds	r2, r2, r3
 8006cbc:	000d      	movs	r5, r1
 8006cbe:	187b      	adds	r3, r7, r1
 8006cc0:	881c      	ldrh	r4, [r3, #0]
 8006cc2:	0010      	movs	r0, r2
 8006cc4:	f7ff fed4 	bl	8006a70 <ConvertAudio>
 8006cc8:	1c01      	adds	r1, r0, #0
 8006cca:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <MIC_Check+0xa8>)
 8006ccc:	00a2      	lsls	r2, r4, #2
 8006cce:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006cd0:	197b      	adds	r3, r7, r5
 8006cd2:	197a      	adds	r2, r7, r5
 8006cd4:	8812      	ldrh	r2, [r2, #0]
 8006cd6:	3201      	adds	r2, #1
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	230e      	movs	r3, #14
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	881a      	ldrh	r2, [r3, #0]
 8006ce0:	2380      	movs	r3, #128	@ 0x80
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d3e1      	bcc.n	8006cac <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006ce8:	2380      	movs	r3, #128	@ 0x80
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	0018      	movs	r0, r3
 8006cee:	f7ff ff93 	bl	8006c18 <MaximalValue>
 8006cf2:	1c03      	adds	r3, r0, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006cf6:	2380      	movs	r3, #128	@ 0x80
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7ff ff52 	bl	8006ba4 <MinimalValue>
 8006d00:	1c03      	adds	r3, r0, #0
 8006d02:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 8006d04:	2100      	movs	r1, #0
 8006d06:	68b8      	ldr	r0, [r7, #8]
 8006d08:	f7f9 fbf4 	bl	80004f4 <__aeabi_fcmpgt>
 8006d0c:	1e03      	subs	r3, r0, #0
 8006d0e:	d105      	bne.n	8006d1c <MIC_Check+0x8c>
 8006d10:	2100      	movs	r1, #0
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7f9 fbda 	bl	80004cc <__aeabi_fcmplt>
 8006d18:	1e03      	subs	r3, r0, #0
 8006d1a:	d001      	beq.n	8006d20 <MIC_Check+0x90>
    return(true);
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <MIC_Check+0x92>
  }
  return(false);
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	0018      	movs	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b004      	add	sp, #16
 8006d28:	bdb0      	pop	{r4, r5, r7, pc}
 8006d2a:	46c0      	nop			@ (mov r8, r8)
 8006d2c:	0801b2ac 	.word	0x0801b2ac
 8006d30:	0801b2a8 	.word	0x0801b2a8
 8006d34:	20000e88 	.word	0x20000e88
 8006d38:	20001ec4 	.word	0x20001ec4

08006d3c <MIC_Print>:
void MIC_Print(void) {
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
  Info("New samples");
 8006d42:	4abe      	ldr	r2, [pc, #760]	@ (800703c <MIC_Print+0x300>)
 8006d44:	4bbe      	ldr	r3, [pc, #760]	@ (8007040 <MIC_Print+0x304>)
 8006d46:	0019      	movs	r1, r3
 8006d48:	2002      	movs	r0, #2
 8006d4a:	f002 fc57 	bl	80095fc <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d4e:	1dbb      	adds	r3, r7, #6
 8006d50:	2200      	movs	r2, #0
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e014      	b.n	8006d80 <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006d56:	1dbb      	adds	r3, r7, #6
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	005a      	lsls	r2, r3, #1
 8006d60:	4bb8      	ldr	r3, [pc, #736]	@ (8007044 <MIC_Print+0x308>)
 8006d62:	18d2      	adds	r2, r2, r3
 8006d64:	1dbb      	adds	r3, r7, #6
 8006d66:	881c      	ldrh	r4, [r3, #0]
 8006d68:	0010      	movs	r0, r2
 8006d6a:	f7ff fe81 	bl	8006a70 <ConvertAudio>
 8006d6e:	1c01      	adds	r1, r0, #0
 8006d70:	4bb5      	ldr	r3, [pc, #724]	@ (8007048 <MIC_Print+0x30c>)
 8006d72:	00a2      	lsls	r2, r4, #2
 8006d74:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d76:	1dbb      	adds	r3, r7, #6
 8006d78:	1dba      	adds	r2, r7, #6
 8006d7a:	8812      	ldrh	r2, [r2, #0]
 8006d7c:	3201      	adds	r2, #1
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	1dbb      	adds	r3, r7, #6
 8006d82:	881a      	ldrh	r2, [r3, #0]
 8006d84:	2380      	movs	r3, #128	@ 0x80
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d3e4      	bcc.n	8006d56 <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 8006d8c:	f000 f9e6 	bl	800715c <MIC_GetDB>
 8006d90:	1c02      	adds	r2, r0, #0
 8006d92:	4bae      	ldr	r3, [pc, #696]	@ (800704c <MIC_Print+0x310>)
 8006d94:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 8006d96:	4bae      	ldr	r3, [pc, #696]	@ (8007050 <MIC_Print+0x314>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b09      	cmp	r3, #9
 8006d9c:	d80e      	bhi.n	8006dbc <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 8006d9e:	4bac      	ldr	r3, [pc, #688]	@ (8007050 <MIC_Print+0x314>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	001a      	movs	r2, r3
 8006da4:	4ba9      	ldr	r3, [pc, #676]	@ (800704c <MIC_Print+0x310>)
 8006da6:	6819      	ldr	r1, [r3, #0]
 8006da8:	4baa      	ldr	r3, [pc, #680]	@ (8007054 <MIC_Print+0x318>)
 8006daa:	0092      	lsls	r2, r2, #2
 8006dac:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006dae:	4ba8      	ldr	r3, [pc, #672]	@ (8007050 <MIC_Print+0x314>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	4ba6      	ldr	r3, [pc, #664]	@ (8007050 <MIC_Print+0x314>)
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	e013      	b.n	8006de4 <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 8006dbc:	4ba4      	ldr	r3, [pc, #656]	@ (8007050 <MIC_Print+0x314>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8006dc2:	4ba3      	ldr	r3, [pc, #652]	@ (8007050 <MIC_Print+0x314>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	001a      	movs	r2, r3
 8006dc8:	4ba0      	ldr	r3, [pc, #640]	@ (800704c <MIC_Print+0x310>)
 8006dca:	6819      	ldr	r1, [r3, #0]
 8006dcc:	4ba1      	ldr	r3, [pc, #644]	@ (8007054 <MIC_Print+0x318>)
 8006dce:	0092      	lsls	r2, r2, #2
 8006dd0:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006dd2:	4b9f      	ldr	r3, [pc, #636]	@ (8007050 <MIC_Print+0x314>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	4b9d      	ldr	r3, [pc, #628]	@ (8007050 <MIC_Print+0x314>)
 8006ddc:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8006dde:	4b9e      	ldr	r3, [pc, #632]	@ (8007058 <MIC_Print+0x31c>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8006de4:	4b9c      	ldr	r3, [pc, #624]	@ (8007058 <MIC_Print+0x31c>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2201      	movs	r2, #1
 8006dea:	4053      	eors	r3, r2
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <MIC_Print+0xc2>
    setMic(dBc);
 8006df2:	4b96      	ldr	r3, [pc, #600]	@ (800704c <MIC_Print+0x310>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	1c18      	adds	r0, r3, #0
 8006df8:	f7fc fc7e 	bl	80036f8 <setMic>
 8006dfc:	e02d      	b.n	8006e5a <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 8006dfe:	4b97      	ldr	r3, [pc, #604]	@ (800705c <MIC_Print+0x320>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e04:	1d7b      	adds	r3, r7, #5
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	e013      	b.n	8006e34 <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 8006e0c:	1d7b      	adds	r3, r7, #5
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	4b90      	ldr	r3, [pc, #576]	@ (8007054 <MIC_Print+0x318>)
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	58d2      	ldr	r2, [r2, r3]
 8006e16:	4b91      	ldr	r3, [pc, #580]	@ (800705c <MIC_Print+0x320>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	1c19      	adds	r1, r3, #0
 8006e1c:	1c10      	adds	r0, r2, #0
 8006e1e:	f7f9 fccd 	bl	80007bc <__aeabi_fadd>
 8006e22:	1c03      	adds	r3, r0, #0
 8006e24:	1c1a      	adds	r2, r3, #0
 8006e26:	4b8d      	ldr	r3, [pc, #564]	@ (800705c <MIC_Print+0x320>)
 8006e28:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e2a:	1d7b      	adds	r3, r7, #5
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	1d7b      	adds	r3, r7, #5
 8006e30:	3201      	adds	r2, #1
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	1d7b      	adds	r3, r7, #5
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b09      	cmp	r3, #9
 8006e3a:	d9e7      	bls.n	8006e0c <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 8006e3c:	4b87      	ldr	r3, [pc, #540]	@ (800705c <MIC_Print+0x320>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4987      	ldr	r1, [pc, #540]	@ (8007060 <MIC_Print+0x324>)
 8006e42:	1c18      	adds	r0, r3, #0
 8006e44:	f7f9 fe44 	bl	8000ad0 <__aeabi_fdiv>
 8006e48:	1c03      	adds	r3, r0, #0
 8006e4a:	1c1a      	adds	r2, r3, #0
 8006e4c:	4b83      	ldr	r3, [pc, #524]	@ (800705c <MIC_Print+0x320>)
 8006e4e:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 8006e50:	4b82      	ldr	r3, [pc, #520]	@ (800705c <MIC_Print+0x320>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	1c18      	adds	r0, r3, #0
 8006e56:	f7fc fc4f 	bl	80036f8 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8006e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800704c <MIC_Print+0x310>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4981      	ldr	r1, [pc, #516]	@ (8007064 <MIC_Print+0x328>)
 8006e60:	1c18      	adds	r0, r3, #0
 8006e62:	f7f9 fb47 	bl	80004f4 <__aeabi_fcmpgt>
 8006e66:	1e03      	subs	r3, r0, #0
 8006e68:	d013      	beq.n	8006e92 <MIC_Print+0x156>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8007068 <MIC_Print+0x32c>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2101      	movs	r1, #1
 8006e70:	0018      	movs	r0, r3
 8006e72:	f004 fafe 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006e76:	2380      	movs	r3, #128	@ 0x80
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	487b      	ldr	r0, [pc, #492]	@ (8007068 <MIC_Print+0x32c>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	0019      	movs	r1, r3
 8006e80:	f004 faf7 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006e84:	2380      	movs	r3, #128	@ 0x80
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4877      	ldr	r0, [pc, #476]	@ (8007068 <MIC_Print+0x32c>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	0019      	movs	r1, r3
 8006e8e:	f004 faf0 	bl	800b472 <HAL_GPIO_WritePin>
  }
  if(dBc < 85 && dBc >= 80){ //red
 8006e92:	4b6e      	ldr	r3, [pc, #440]	@ (800704c <MIC_Print+0x310>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4973      	ldr	r1, [pc, #460]	@ (8007064 <MIC_Print+0x328>)
 8006e98:	1c18      	adds	r0, r3, #0
 8006e9a:	f7f9 fb17 	bl	80004cc <__aeabi_fcmplt>
 8006e9e:	1e03      	subs	r3, r0, #0
 8006ea0:	d01b      	beq.n	8006eda <MIC_Print+0x19e>
 8006ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800704c <MIC_Print+0x310>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4971      	ldr	r1, [pc, #452]	@ (800706c <MIC_Print+0x330>)
 8006ea8:	1c18      	adds	r0, r3, #0
 8006eaa:	f7f9 fb2d 	bl	8000508 <__aeabi_fcmpge>
 8006eae:	1e03      	subs	r3, r0, #0
 8006eb0:	d013      	beq.n	8006eda <MIC_Print+0x19e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8007068 <MIC_Print+0x32c>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f004 fada 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006ebe:	2380      	movs	r3, #128	@ 0x80
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	4869      	ldr	r0, [pc, #420]	@ (8007068 <MIC_Print+0x32c>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	f004 fad3 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006ecc:	2380      	movs	r3, #128	@ 0x80
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4865      	ldr	r0, [pc, #404]	@ (8007068 <MIC_Print+0x32c>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	0019      	movs	r1, r3
 8006ed6:	f004 facc 	bl	800b472 <HAL_GPIO_WritePin>
  }
  if(dBc < 80 && dBc >= 75){//purple
 8006eda:	4b5c      	ldr	r3, [pc, #368]	@ (800704c <MIC_Print+0x310>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4963      	ldr	r1, [pc, #396]	@ (800706c <MIC_Print+0x330>)
 8006ee0:	1c18      	adds	r0, r3, #0
 8006ee2:	f7f9 faf3 	bl	80004cc <__aeabi_fcmplt>
 8006ee6:	1e03      	subs	r3, r0, #0
 8006ee8:	d01b      	beq.n	8006f22 <MIC_Print+0x1e6>
 8006eea:	4b58      	ldr	r3, [pc, #352]	@ (800704c <MIC_Print+0x310>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4960      	ldr	r1, [pc, #384]	@ (8007070 <MIC_Print+0x334>)
 8006ef0:	1c18      	adds	r0, r3, #0
 8006ef2:	f7f9 fb09 	bl	8000508 <__aeabi_fcmpge>
 8006ef6:	1e03      	subs	r3, r0, #0
 8006ef8:	d013      	beq.n	8006f22 <MIC_Print+0x1e6>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006efa:	4b5b      	ldr	r3, [pc, #364]	@ (8007068 <MIC_Print+0x32c>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	2101      	movs	r1, #1
 8006f00:	0018      	movs	r0, r3
 8006f02:	f004 fab6 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006f06:	2380      	movs	r3, #128	@ 0x80
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	4857      	ldr	r0, [pc, #348]	@ (8007068 <MIC_Print+0x32c>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	0019      	movs	r1, r3
 8006f10:	f004 faaf 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006f14:	2380      	movs	r3, #128	@ 0x80
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4853      	ldr	r0, [pc, #332]	@ (8007068 <MIC_Print+0x32c>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	0019      	movs	r1, r3
 8006f1e:	f004 faa8 	bl	800b472 <HAL_GPIO_WritePin>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 8006f22:	4b4a      	ldr	r3, [pc, #296]	@ (800704c <MIC_Print+0x310>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4952      	ldr	r1, [pc, #328]	@ (8007070 <MIC_Print+0x334>)
 8006f28:	1c18      	adds	r0, r3, #0
 8006f2a:	f7f9 facf 	bl	80004cc <__aeabi_fcmplt>
 8006f2e:	1e03      	subs	r3, r0, #0
 8006f30:	d01b      	beq.n	8006f6a <MIC_Print+0x22e>
 8006f32:	4b46      	ldr	r3, [pc, #280]	@ (800704c <MIC_Print+0x310>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	494f      	ldr	r1, [pc, #316]	@ (8007074 <MIC_Print+0x338>)
 8006f38:	1c18      	adds	r0, r3, #0
 8006f3a:	f7f9 fae5 	bl	8000508 <__aeabi_fcmpge>
 8006f3e:	1e03      	subs	r3, r0, #0
 8006f40:	d013      	beq.n	8006f6a <MIC_Print+0x22e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006f42:	4b49      	ldr	r3, [pc, #292]	@ (8007068 <MIC_Print+0x32c>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	2101      	movs	r1, #1
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f004 fa92 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006f4e:	2380      	movs	r3, #128	@ 0x80
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4845      	ldr	r0, [pc, #276]	@ (8007068 <MIC_Print+0x32c>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	0019      	movs	r1, r3
 8006f58:	f004 fa8b 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006f5c:	2380      	movs	r3, #128	@ 0x80
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4841      	ldr	r0, [pc, #260]	@ (8007068 <MIC_Print+0x32c>)
 8006f62:	2201      	movs	r2, #1
 8006f64:	0019      	movs	r1, r3
 8006f66:	f004 fa84 	bl	800b472 <HAL_GPIO_WritePin>
  }
  if(dBc < 70 && dBc >= 65){//Green
 8006f6a:	4b38      	ldr	r3, [pc, #224]	@ (800704c <MIC_Print+0x310>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4941      	ldr	r1, [pc, #260]	@ (8007074 <MIC_Print+0x338>)
 8006f70:	1c18      	adds	r0, r3, #0
 8006f72:	f7f9 faab 	bl	80004cc <__aeabi_fcmplt>
 8006f76:	1e03      	subs	r3, r0, #0
 8006f78:	d01b      	beq.n	8006fb2 <MIC_Print+0x276>
 8006f7a:	4b34      	ldr	r3, [pc, #208]	@ (800704c <MIC_Print+0x310>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	493e      	ldr	r1, [pc, #248]	@ (8007078 <MIC_Print+0x33c>)
 8006f80:	1c18      	adds	r0, r3, #0
 8006f82:	f7f9 fac1 	bl	8000508 <__aeabi_fcmpge>
 8006f86:	1e03      	subs	r3, r0, #0
 8006f88:	d013      	beq.n	8006fb2 <MIC_Print+0x276>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006f8a:	4b37      	ldr	r3, [pc, #220]	@ (8007068 <MIC_Print+0x32c>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2101      	movs	r1, #1
 8006f90:	0018      	movs	r0, r3
 8006f92:	f004 fa6e 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006f96:	2380      	movs	r3, #128	@ 0x80
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4833      	ldr	r0, [pc, #204]	@ (8007068 <MIC_Print+0x32c>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	0019      	movs	r1, r3
 8006fa0:	f004 fa67 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006fa4:	2380      	movs	r3, #128	@ 0x80
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	482f      	ldr	r0, [pc, #188]	@ (8007068 <MIC_Print+0x32c>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	0019      	movs	r1, r3
 8006fae:	f004 fa60 	bl	800b472 <HAL_GPIO_WritePin>
  }
  if(dBc < 65 && dBc >= 60){//blue
 8006fb2:	4b26      	ldr	r3, [pc, #152]	@ (800704c <MIC_Print+0x310>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4930      	ldr	r1, [pc, #192]	@ (8007078 <MIC_Print+0x33c>)
 8006fb8:	1c18      	adds	r0, r3, #0
 8006fba:	f7f9 fa87 	bl	80004cc <__aeabi_fcmplt>
 8006fbe:	1e03      	subs	r3, r0, #0
 8006fc0:	d01b      	beq.n	8006ffa <MIC_Print+0x2be>
 8006fc2:	4b22      	ldr	r3, [pc, #136]	@ (800704c <MIC_Print+0x310>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	492d      	ldr	r1, [pc, #180]	@ (800707c <MIC_Print+0x340>)
 8006fc8:	1c18      	adds	r0, r3, #0
 8006fca:	f7f9 fa9d 	bl	8000508 <__aeabi_fcmpge>
 8006fce:	1e03      	subs	r3, r0, #0
 8006fd0:	d013      	beq.n	8006ffa <MIC_Print+0x2be>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006fd2:	4b25      	ldr	r3, [pc, #148]	@ (8007068 <MIC_Print+0x32c>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f004 fa4a 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006fde:	2380      	movs	r3, #128	@ 0x80
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	4821      	ldr	r0, [pc, #132]	@ (8007068 <MIC_Print+0x32c>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	f004 fa43 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006fec:	2380      	movs	r3, #128	@ 0x80
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	481d      	ldr	r0, [pc, #116]	@ (8007068 <MIC_Print+0x32c>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	0019      	movs	r1, r3
 8006ff6:	f004 fa3c 	bl	800b472 <HAL_GPIO_WritePin>
  }
  if(dBc < 60){//light blue
 8006ffa:	4b14      	ldr	r3, [pc, #80]	@ (800704c <MIC_Print+0x310>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	491f      	ldr	r1, [pc, #124]	@ (800707c <MIC_Print+0x340>)
 8007000:	1c18      	adds	r0, r3, #0
 8007002:	f7f9 fa63 	bl	80004cc <__aeabi_fcmplt>
 8007006:	1e03      	subs	r3, r0, #0
 8007008:	d100      	bne.n	800700c <MIC_Print+0x2d0>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
  }


  //FFT();
}
 800700a:	e013      	b.n	8007034 <MIC_Print+0x2f8>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800700c:	4b16      	ldr	r3, [pc, #88]	@ (8007068 <MIC_Print+0x32c>)
 800700e:	2201      	movs	r2, #1
 8007010:	2101      	movs	r1, #1
 8007012:	0018      	movs	r0, r3
 8007014:	f004 fa2d 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8007018:	2380      	movs	r3, #128	@ 0x80
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	4812      	ldr	r0, [pc, #72]	@ (8007068 <MIC_Print+0x32c>)
 800701e:	2200      	movs	r2, #0
 8007020:	0019      	movs	r1, r3
 8007022:	f004 fa26 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8007026:	2380      	movs	r3, #128	@ 0x80
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	480f      	ldr	r0, [pc, #60]	@ (8007068 <MIC_Print+0x32c>)
 800702c:	2200      	movs	r2, #0
 800702e:	0019      	movs	r1, r3
 8007030:	f004 fa1f 	bl	800b472 <HAL_GPIO_WritePin>
}
 8007034:	46c0      	nop			@ (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	b003      	add	sp, #12
 800703a:	bd90      	pop	{r4, r7, pc}
 800703c:	0801b2ac 	.word	0x0801b2ac
 8007040:	0801b2a8 	.word	0x0801b2a8
 8007044:	20000e88 	.word	0x20000e88
 8007048:	20001ec4 	.word	0x20001ec4
 800704c:	20001e90 	.word	0x20001e90
 8007050:	20001ec0 	.word	0x20001ec0
 8007054:	20001e94 	.word	0x20001e94
 8007058:	20001ec1 	.word	0x20001ec1
 800705c:	20001ebc 	.word	0x20001ebc
 8007060:	41200000 	.word	0x41200000
 8007064:	42aa0000 	.word	0x42aa0000
 8007068:	50000400 	.word	0x50000400
 800706c:	42a00000 	.word	0x42a00000
 8007070:	42960000 	.word	0x42960000
 8007074:	428c0000 	.word	0x428c0000
 8007078:	42820000 	.word	0x42820000
 800707c:	42700000 	.word	0x42700000

08007080 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  if(DataReady) {
 8007084:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <MIC_MeasurementDone+0x38>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00f      	beq.n	80070ae <MIC_MeasurementDone+0x2e>
    MIC_Print();
 800708e:	f7ff fe55 	bl	8006d3c <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 8007092:	4b0a      	ldr	r3, [pc, #40]	@ (80070bc <MIC_MeasurementDone+0x3c>)
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	4a0a      	ldr	r2, [pc, #40]	@ (80070c0 <MIC_MeasurementDone+0x40>)
 8007098:	490a      	ldr	r1, [pc, #40]	@ (80070c4 <MIC_MeasurementDone+0x44>)
 800709a:	2003      	movs	r0, #3
 800709c:	f002 faae 	bl	80095fc <CreateLine>
    TIM2 -> CCR1 = 4000;
 80070a0:	2380      	movs	r3, #128	@ 0x80
 80070a2:	05db      	lsls	r3, r3, #23
 80070a4:	22fa      	movs	r2, #250	@ 0xfa
 80070a6:	0112      	lsls	r2, r2, #4
 80070a8:	635a      	str	r2, [r3, #52]	@ 0x34
    return true;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <MIC_MeasurementDone+0x30>
  }
  return false;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	0018      	movs	r0, r3
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	46c0      	nop			@ (mov r8, r8)
 80070b8:	20001e8d 	.word	0x20001e8d
 80070bc:	20000064 	.word	0x20000064
 80070c0:	0801b2b8 	.word	0x0801b2b8
 80070c4:	0801b298 	.word	0x0801b298

080070c8 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 80070c8:	b590      	push	{r4, r7, lr}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 80070ce:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <MIC_TestMeasurementDone+0x34>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <MIC_TestMeasurementDone+0x2a>
    Check = MIC_Check();
 80070d8:	1dfc      	adds	r4, r7, #7
 80070da:	f7ff fdd9 	bl	8006c90 <MIC_Check>
 80070de:	0003      	movs	r3, r0
 80070e0:	7023      	strb	r3, [r4, #0]
    TIM2 -> CCR1 = 4000;
 80070e2:	2380      	movs	r3, #128	@ 0x80
 80070e4:	05db      	lsls	r3, r3, #23
 80070e6:	22fa      	movs	r2, #250	@ 0xfa
 80070e8:	0112      	lsls	r2, r2, #4
 80070ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return Check;
 80070ec:	1dfb      	adds	r3, r7, #7
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	e000      	b.n	80070f4 <MIC_TestMeasurementDone+0x2c>
  }
  return false;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	0018      	movs	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b003      	add	sp, #12
 80070fa:	bd90      	pop	{r4, r7, pc}
 80070fc:	20001e8d 	.word	0x20001e8d

08007100 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8007108:	4b10      	ldr	r3, [pc, #64]	@ (800714c <HAL_I2S_RxCpltCallback+0x4c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d118      	bne.n	8007144 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8007112:	4b0f      	ldr	r3, [pc, #60]	@ (8007150 <HAL_I2S_RxCpltCallback+0x50>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <HAL_I2S_RxCpltCallback+0x4c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	0018      	movs	r0, r3
 8007122:	f006 fbb3 	bl	800d88c <HAL_I2S_DMAStop>
    DataReady = true;
 8007126:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <HAL_I2S_RxCpltCallback+0x54>)
 8007128:	2201      	movs	r2, #1
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e00b      	b.n	8007146 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 800712e:	4b0a      	ldr	r3, [pc, #40]	@ (8007158 <HAL_I2S_RxCpltCallback+0x58>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	0018      	movs	r0, r3
 8007134:	f002 fa0c 	bl	8009550 <TimestampIsReached>
 8007138:	1e03      	subs	r3, r0, #0
 800713a:	d004      	beq.n	8007146 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 800713c:	4b04      	ldr	r3, [pc, #16]	@ (8007150 <HAL_I2S_RxCpltCallback+0x50>)
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e000      	b.n	8007146 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8007144:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8007146:	46bd      	mov	sp, r7
 8007148:	b002      	add	sp, #8
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000e84 	.word	0x20000e84
 8007150:	20001e8c 	.word	0x20001e8c
 8007154:	20001e8d 	.word	0x20001e8d
 8007158:	20001e88 	.word	0x20001e88

0800715c <MIC_GetDB>:

float MIC_GetDB(void) {
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 8007166:	2300      	movs	r3, #0
 8007168:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 800716a:	230a      	movs	r3, #10
 800716c:	18fb      	adds	r3, r7, r3
 800716e:	2280      	movs	r2, #128	@ 0x80
 8007170:	0052      	lsls	r2, r2, #1
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	e019      	b.n	80071aa <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 8007176:	240a      	movs	r4, #10
 8007178:	193b      	adds	r3, r7, r4
 800717a:	881a      	ldrh	r2, [r3, #0]
 800717c:	4b2b      	ldr	r3, [pc, #172]	@ (800722c <MIC_GetDB+0xd0>)
 800717e:	0092      	lsls	r2, r2, #2
 8007180:	58d0      	ldr	r0, [r2, r3]
 8007182:	193b      	adds	r3, r7, r4
 8007184:	881a      	ldrh	r2, [r3, #0]
 8007186:	4b29      	ldr	r3, [pc, #164]	@ (800722c <MIC_GetDB+0xd0>)
 8007188:	0092      	lsls	r2, r2, #2
 800718a:	58d3      	ldr	r3, [r2, r3]
 800718c:	1c19      	adds	r1, r3, #0
 800718e:	f7f9 fe85 	bl	8000e9c <__aeabi_fmul>
 8007192:	1c03      	adds	r3, r0, #0
 8007194:	1c19      	adds	r1, r3, #0
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7f9 fb10 	bl	80007bc <__aeabi_fadd>
 800719c:	1c03      	adds	r3, r0, #0
 800719e:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80071a0:	193b      	adds	r3, r7, r4
 80071a2:	881a      	ldrh	r2, [r3, #0]
 80071a4:	193b      	adds	r3, r7, r4
 80071a6:	3201      	adds	r2, #1
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	230a      	movs	r3, #10
 80071ac:	18fb      	adds	r3, r7, r3
 80071ae:	881a      	ldrh	r2, [r3, #0]
 80071b0:	2380      	movs	r3, #128	@ 0x80
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d3de      	bcc.n	8007176 <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 80071b8:	2187      	movs	r1, #135	@ 0x87
 80071ba:	05c9      	lsls	r1, r1, #23
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f7f9 fc87 	bl	8000ad0 <__aeabi_fdiv>
 80071c2:	1c03      	adds	r3, r0, #0
 80071c4:	1c18      	adds	r0, r3, #0
 80071c6:	f7fc f8cb 	bl	8003360 <__aeabi_f2d>
 80071ca:	0002      	movs	r2, r0
 80071cc:	000b      	movs	r3, r1
 80071ce:	0010      	movs	r0, r2
 80071d0:	0019      	movs	r1, r3
 80071d2:	f012 ffff 	bl	801a1d4 <sqrt>
 80071d6:	0002      	movs	r2, r0
 80071d8:	000b      	movs	r3, r1
 80071da:	0010      	movs	r0, r2
 80071dc:	0019      	movs	r1, r3
 80071de:	f7fc f907 	bl	80033f0 <__aeabi_d2f>
 80071e2:	1c03      	adds	r3, r0, #0
 80071e4:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 80071e6:	6838      	ldr	r0, [r7, #0]
 80071e8:	f7fc f8ba 	bl	8003360 <__aeabi_f2d>
 80071ec:	0002      	movs	r2, r0
 80071ee:	000b      	movs	r3, r1
 80071f0:	0010      	movs	r0, r2
 80071f2:	0019      	movs	r1, r3
 80071f4:	f012 ffb8 	bl	801a168 <log10>
 80071f8:	2200      	movs	r2, #0
 80071fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <MIC_GetDB+0xd4>)
 80071fc:	f7fb f99c 	bl	8002538 <__aeabi_dmul>
 8007200:	0002      	movs	r2, r0
 8007202:	000b      	movs	r3, r1
 8007204:	0010      	movs	r0, r2
 8007206:	0019      	movs	r1, r3
 8007208:	2200      	movs	r2, #0
 800720a:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <MIC_GetDB+0xd8>)
 800720c:	f7fa f9ec 	bl	80015e8 <__aeabi_dadd>
 8007210:	0002      	movs	r2, r0
 8007212:	000b      	movs	r3, r1
 8007214:	0010      	movs	r0, r2
 8007216:	0019      	movs	r1, r3
 8007218:	f7fc f8ea 	bl	80033f0 <__aeabi_d2f>
 800721c:	1c03      	adds	r3, r0, #0
 800721e:	607b      	str	r3, [r7, #4]

    return dBValue;
 8007220:	687b      	ldr	r3, [r7, #4]
}
 8007222:	1c18      	adds	r0, r3, #0
 8007224:	46bd      	mov	sp, r7
 8007226:	b005      	add	sp, #20
 8007228:	bd90      	pop	{r4, r7, pc}
 800722a:	46c0      	nop			@ (mov r8, r8)
 800722c:	20001ec4 	.word	0x20001ec4
 8007230:	40340000 	.word	0x40340000
 8007234:	405e0000 	.word	0x405e0000

08007238 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800723c:	4b16      	ldr	r3, [pc, #88]	@ (8007298 <MX_RTC_Init+0x60>)
 800723e:	4a17      	ldr	r2, [pc, #92]	@ (800729c <MX_RTC_Init+0x64>)
 8007240:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007242:	4b15      	ldr	r3, [pc, #84]	@ (8007298 <MX_RTC_Init+0x60>)
 8007244:	2200      	movs	r2, #0
 8007246:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007248:	4b13      	ldr	r3, [pc, #76]	@ (8007298 <MX_RTC_Init+0x60>)
 800724a:	227f      	movs	r2, #127	@ 0x7f
 800724c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800724e:	4b12      	ldr	r3, [pc, #72]	@ (8007298 <MX_RTC_Init+0x60>)
 8007250:	22ff      	movs	r2, #255	@ 0xff
 8007252:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007254:	4b10      	ldr	r3, [pc, #64]	@ (8007298 <MX_RTC_Init+0x60>)
 8007256:	2200      	movs	r2, #0
 8007258:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800725a:	4b0f      	ldr	r3, [pc, #60]	@ (8007298 <MX_RTC_Init+0x60>)
 800725c:	2200      	movs	r2, #0
 800725e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007260:	4b0d      	ldr	r3, [pc, #52]	@ (8007298 <MX_RTC_Init+0x60>)
 8007262:	2200      	movs	r2, #0
 8007264:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007266:	4b0c      	ldr	r3, [pc, #48]	@ (8007298 <MX_RTC_Init+0x60>)
 8007268:	2200      	movs	r2, #0
 800726a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800726c:	4b0a      	ldr	r3, [pc, #40]	@ (8007298 <MX_RTC_Init+0x60>)
 800726e:	0018      	movs	r0, r3
 8007270:	f009 fa2e 	bl	80106d0 <HAL_RTC_Init>
 8007274:	1e03      	subs	r3, r0, #0
 8007276:	d001      	beq.n	800727c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007278:	f7ff f832 	bl	80062e0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800727c:	4b06      	ldr	r3, [pc, #24]	@ (8007298 <MX_RTC_Init+0x60>)
 800727e:	2200      	movs	r2, #0
 8007280:	2100      	movs	r1, #0
 8007282:	0018      	movs	r0, r3
 8007284:	f009 fb56 	bl	8010934 <HAL_RTCEx_SetWakeUpTimer>
 8007288:	1e03      	subs	r3, r0, #0
 800728a:	d001      	beq.n	8007290 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800728c:	f7ff f828 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007290:	46c0      	nop			@ (mov r8, r8)
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	46c0      	nop			@ (mov r8, r8)
 8007298:	200026c4 	.word	0x200026c4
 800729c:	40002800 	.word	0x40002800

080072a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a06      	ldr	r2, [pc, #24]	@ (80072c8 <HAL_RTC_MspInit+0x28>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d106      	bne.n	80072c0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80072b2:	4b06      	ldr	r3, [pc, #24]	@ (80072cc <HAL_RTC_MspInit+0x2c>)
 80072b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072b6:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <HAL_RTC_MspInit+0x2c>)
 80072b8:	2180      	movs	r1, #128	@ 0x80
 80072ba:	02c9      	lsls	r1, r1, #11
 80072bc:	430a      	orrs	r2, r1
 80072be:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80072c0:	46c0      	nop			@ (mov r8, r8)
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b002      	add	sp, #8
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40002800 	.word	0x40002800
 80072cc:	40021000 	.word	0x40021000

080072d0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d113      	bne.n	8007316 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	22fe      	movs	r2, #254	@ 0xfe
 80072f2:	0592      	lsls	r2, r2, #22
 80072f4:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4a1a      	ldr	r2, [pc, #104]	@ (8007364 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 80072fa:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007368 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8007300:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4a19      	ldr	r2, [pc, #100]	@ (800736c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8007306:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a19      	ldr	r2, [pc, #100]	@ (8007370 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800730c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a18      	ldr	r2, [pc, #96]	@ (8007374 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8007312:	61da      	str	r2, [r3, #28]
 8007314:	e011      	b.n	800733a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a17      	ldr	r2, [pc, #92]	@ (8007378 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800731a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4a17      	ldr	r2, [pc, #92]	@ (800737c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8007320:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4a16      	ldr	r2, [pc, #88]	@ (8007380 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8007326:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4a16      	ldr	r2, [pc, #88]	@ (8007384 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800732c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4a15      	ldr	r2, [pc, #84]	@ (8007388 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8007332:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4a15      	ldr	r2, [pc, #84]	@ (800738c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8007338:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4a14      	ldr	r2, [pc, #80]	@ (8007390 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800733e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4a14      	ldr	r2, [pc, #80]	@ (8007394 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007344:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4a12      	ldr	r2, [pc, #72]	@ (8007394 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800734a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4a12      	ldr	r2, [pc, #72]	@ (8007398 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8007350:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	0018      	movs	r0, r3
 8007356:	f000 f831 	bl	80073bc <GasIndexAlgorithm_reset>
}
 800735a:	46c0      	nop			@ (mov r8, r8)
 800735c:	46bd      	mov	sp, r7
 800735e:	b004      	add	sp, #16
 8007360:	bd80      	pop	{r7, pc}
 8007362:	46c0      	nop			@ (mov r8, r8)
 8007364:	00002710 	.word	0x00002710
 8007368:	44340000 	.word	0x44340000
 800736c:	46859800 	.word	0x46859800
 8007370:	46a05000 	.word	0x46a05000
 8007374:	41f00000 	.word	0x41f00000
 8007378:	42c80000 	.word	0x42c80000
 800737c:	00004e20 	.word	0x00004e20
 8007380:	43340000 	.word	0x43340000
 8007384:	4528c000 	.word	0x4528c000
 8007388:	45a32000 	.word	0x45a32000
 800738c:	43aa0000 	.word	0x43aa0000
 8007390:	43660000 	.word	0x43660000
 8007394:	41400000 	.word	0x41400000
 8007398:	42480000 	.word	0x42480000

0800739c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80073a6:	22fe      	movs	r2, #254	@ 0xfe
 80073a8:	0592      	lsls	r2, r2, #22
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	0018      	movs	r0, r3
 80073b0:	f7ff ff8e 	bl	80072d0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80073b4:	46c0      	nop			@ (mov r8, r8)
 80073b6:	46bd      	mov	sp, r7
 80073b8:	b002      	add	sp, #8
 80073ba:	bd80      	pop	{r7, pc}

080073bc <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	0018      	movs	r0, r3
 80073da:	f000 f805 	bl	80073e8 <GasIndexAlgorithm__init_instances>
}
 80073de:	46c0      	nop			@ (mov r8, r8)
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b002      	add	sp, #8
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	0018      	movs	r0, r3
 80073f4:	f000 f8e8 	bl	80075c8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 f9a6 	bl	800774c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007400:	1c04      	adds	r4, r0, #0
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	0018      	movs	r0, r3
 8007406:	f000 f9ab 	bl	8007760 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800740a:	1c02      	adds	r2, r0, #0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	1c21      	adds	r1, r4, #0
 8007410:	0018      	movs	r0, r3
 8007412:	f000 fc3b 	bl	8007c8c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d107      	bne.n	800742e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800741e:	23fe      	movs	r3, #254	@ 0xfe
 8007420:	059b      	lsls	r3, r3, #22
 8007422:	4a0a      	ldr	r2, [pc, #40]	@ (800744c <GasIndexAlgorithm__init_instances+0x64>)
 8007424:	490a      	ldr	r1, [pc, #40]	@ (8007450 <GasIndexAlgorithm__init_instances+0x68>)
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fc86 	bl	8007d38 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800742c:	e005      	b.n	800743a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800742e:	4b09      	ldr	r3, [pc, #36]	@ (8007454 <GasIndexAlgorithm__init_instances+0x6c>)
 8007430:	4a09      	ldr	r2, [pc, #36]	@ (8007458 <GasIndexAlgorithm__init_instances+0x70>)
 8007432:	490a      	ldr	r1, [pc, #40]	@ (800745c <GasIndexAlgorithm__init_instances+0x74>)
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc7f 	bl	8007d38 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	0018      	movs	r0, r3
 800743e:	f000 fd35 	bl	8007eac <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8007442:	46c0      	nop			@ (mov r8, r8)
 8007444:	46bd      	mov	sp, r7
 8007446:	b003      	add	sp, #12
 8007448:	bd90      	pop	{r4, r7, pc}
 800744a:	46c0      	nop			@ (mov r8, r8)
 800744c:	bc257a78 	.word	0xbc257a78
 8007450:	44198000 	.word	0x44198000
 8007454:	42c80000 	.word	0x42c80000
 8007458:	bbd4fdf4 	.word	0xbbd4fdf4
 800745c:	43550000 	.word	0x43550000

08007460 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8007460:	b590      	push	{r4, r7, lr}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007470:	4952      	ldr	r1, [pc, #328]	@ (80075bc <GasIndexAlgorithm_process+0x15c>)
 8007472:	1c18      	adds	r0, r3, #0
 8007474:	f7f9 f834 	bl	80004e0 <__aeabi_fcmple>
 8007478:	1e03      	subs	r3, r0, #0
 800747a:	d00c      	beq.n	8007496 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	1c19      	adds	r1, r3, #0
 8007486:	1c10      	adds	r0, r2, #0
 8007488:	f7f9 f998 	bl	80007bc <__aeabi_fadd>
 800748c:	1c03      	adds	r3, r0, #0
 800748e:	1c1a      	adds	r2, r3, #0
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	631a      	str	r2, [r3, #48]	@ 0x30
 8007494:	e080      	b.n	8007598 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	dd25      	ble.n	80074e8 <GasIndexAlgorithm_process+0x88>
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4a48      	ldr	r2, [pc, #288]	@ (80075c0 <GasIndexAlgorithm_process+0x160>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	dc21      	bgt.n	80074e8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	dc04      	bgt.n	80074b8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	3301      	adds	r3, #1
 80074b4:	60bb      	str	r3, [r7, #8]
 80074b6:	e00d      	b.n	80074d4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	4a41      	ldr	r2, [pc, #260]	@ (80075c4 <GasIndexAlgorithm_process+0x164>)
 80074be:	4694      	mov	ip, r2
 80074c0:	4463      	add	r3, ip
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	dd05      	ble.n	80074d4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4a3d      	ldr	r2, [pc, #244]	@ (80075c4 <GasIndexAlgorithm_process+0x164>)
 80074ce:	4694      	mov	ip, r2
 80074d0:	4463      	add	r3, ip
 80074d2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	0018      	movs	r0, r3
 80074de:	f7f9 fff5 	bl	80014cc <__aeabi_i2f>
 80074e2:	1c02      	adds	r2, r0, #0
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	0018      	movs	r0, r3
 80074f4:	f000 f945 	bl	8007782 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80074f8:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80074fa:	d014      	beq.n	8007526 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	1c11      	adds	r1, r2, #0
 8007504:	0018      	movs	r0, r3
 8007506:	f000 fbd1 	bl	8007cac <GasIndexAlgorithm__mox_model__process>
 800750a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	1c11      	adds	r1, r2, #0
 8007518:	0018      	movs	r0, r3
 800751a:	f000 fc25 	bl	8007d68 <GasIndexAlgorithm__sigmoid_scaled__process>
 800751e:	1c02      	adds	r2, r0, #0
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	639a      	str	r2, [r3, #56]	@ 0x38
 8007524:	e003      	b.n	800752e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	689a      	ldr	r2, [r3, #8]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1c11      	adds	r1, r2, #0
 8007536:	0018      	movs	r0, r3
 8007538:	f000 fcec 	bl	8007f14 <GasIndexAlgorithm__adaptive_lowpass__process>
 800753c:	1c02      	adds	r2, r0, #0
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007546:	21fc      	movs	r1, #252	@ 0xfc
 8007548:	0589      	lsls	r1, r1, #22
 800754a:	1c18      	adds	r0, r3, #0
 800754c:	f7f8 ffbe 	bl	80004cc <__aeabi_fcmplt>
 8007550:	1e03      	subs	r3, r0, #0
 8007552:	d003      	beq.n	800755c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	22fc      	movs	r2, #252	@ 0xfc
 8007558:	0592      	lsls	r2, r2, #22
 800755a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007560:	2100      	movs	r1, #0
 8007562:	1c18      	adds	r0, r3, #0
 8007564:	f7f8 ffc6 	bl	80004f4 <__aeabi_fcmpgt>
 8007568:	1e03      	subs	r3, r0, #0
 800756a:	d015      	beq.n	8007598 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	1c11      	adds	r1, r2, #0
 8007574:	0018      	movs	r0, r3
 8007576:	f000 fa4f 	bl	8007a18 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	0018      	movs	r0, r3
 800757e:	f000 f8e5 	bl	800774c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8007582:	1c04      	adds	r4, r0, #0
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	0018      	movs	r0, r3
 8007588:	f000 f8ea 	bl	8007760 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800758c:	1c02      	adds	r2, r0, #0
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	1c21      	adds	r1, r4, #0
 8007592:	0018      	movs	r0, r3
 8007594:	f000 fb7a 	bl	8007c8c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759c:	21fc      	movs	r1, #252	@ 0xfc
 800759e:	0589      	lsls	r1, r1, #22
 80075a0:	1c18      	adds	r0, r3, #0
 80075a2:	f7f9 f90b 	bl	80007bc <__aeabi_fadd>
 80075a6:	1c03      	adds	r3, r0, #0
 80075a8:	1c18      	adds	r0, r3, #0
 80075aa:	f7f9 ff6f 	bl	800148c <__aeabi_f2iz>
 80075ae:	0002      	movs	r2, r0
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	601a      	str	r2, [r3, #0]
    return;
 80075b4:	46c0      	nop			@ (mov r8, r8)
}
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b005      	add	sp, #20
 80075ba:	bd90      	pop	{r4, r7, pc}
 80075bc:	42340000 	.word	0x42340000
 80075c0:	0000fde7 	.word	0x0000fde7
 80075c4:	00007fff 	.word	0x00007fff

080075c8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	223c      	movs	r2, #60	@ 0x3c
 80075d4:	2100      	movs	r1, #0
 80075d6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	4952      	ldr	r1, [pc, #328]	@ (800773c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80075f2:	1c18      	adds	r0, r3, #0
 80075f4:	f7f9 fa6c 	bl	8000ad0 <__aeabi_fdiv>
 80075f8:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80075fa:	2188      	movs	r1, #136	@ 0x88
 80075fc:	05c9      	lsls	r1, r1, #23
 80075fe:	1c18      	adds	r0, r3, #0
 8007600:	f7f9 fc4c 	bl	8000e9c <__aeabi_fmul>
 8007604:	1c03      	adds	r3, r0, #0
 8007606:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	494a      	ldr	r1, [pc, #296]	@ (800773c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007612:	1c18      	adds	r0, r3, #0
 8007614:	f7f9 fa5c 	bl	8000ad0 <__aeabi_fdiv>
 8007618:	1c03      	adds	r3, r0, #0
 800761a:	1c19      	adds	r1, r3, #0
 800761c:	1c20      	adds	r0, r4, #0
 800761e:	f7f9 f8cd 	bl	80007bc <__aeabi_fadd>
 8007622:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007624:	1c19      	adds	r1, r3, #0
 8007626:	1c28      	adds	r0, r5, #0
 8007628:	f7f9 fa52 	bl	8000ad0 <__aeabi_fdiv>
 800762c:	1c03      	adds	r3, r0, #0
 800762e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4940      	ldr	r1, [pc, #256]	@ (800773c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800763a:	1c18      	adds	r0, r3, #0
 800763c:	f7f9 fa48 	bl	8000ad0 <__aeabi_fdiv>
 8007640:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007642:	2185      	movs	r1, #133	@ 0x85
 8007644:	05c9      	lsls	r1, r1, #23
 8007646:	1c18      	adds	r0, r3, #0
 8007648:	f7f9 fc28 	bl	8000e9c <__aeabi_fmul>
 800764c:	1c03      	adds	r3, r0, #0
 800764e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	4938      	ldr	r1, [pc, #224]	@ (800773c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800765a:	1c18      	adds	r0, r3, #0
 800765c:	f7f9 fa38 	bl	8000ad0 <__aeabi_fdiv>
 8007660:	1c03      	adds	r3, r0, #0
 8007662:	1c19      	adds	r1, r3, #0
 8007664:	1c20      	adds	r0, r4, #0
 8007666:	f7f9 f8a9 	bl	80007bc <__aeabi_fadd>
 800766a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800766c:	1c19      	adds	r1, r3, #0
 800766e:	1c28      	adds	r0, r5, #0
 8007670:	f7f9 fa2e 	bl	8000ad0 <__aeabi_fdiv>
 8007674:	1c03      	adds	r3, r0, #0
 8007676:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d118      	bne.n	80076b6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007688:	2188      	movs	r1, #136	@ 0x88
 800768a:	05c9      	lsls	r1, r1, #23
 800768c:	1c18      	adds	r0, r3, #0
 800768e:	f7f9 fc05 	bl	8000e9c <__aeabi_fmul>
 8007692:	1c03      	adds	r3, r0, #0
 8007694:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800769a:	4929      	ldr	r1, [pc, #164]	@ (8007740 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800769c:	1c18      	adds	r0, r3, #0
 800769e:	f7f9 f88d 	bl	80007bc <__aeabi_fadd>
 80076a2:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80076a4:	1c19      	adds	r1, r3, #0
 80076a6:	1c20      	adds	r0, r4, #0
 80076a8:	f7f9 fa12 	bl	8000ad0 <__aeabi_fdiv>
 80076ac:	1c03      	adds	r3, r0, #0
 80076ae:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80076b4:	e017      	b.n	80076e6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80076ba:	2188      	movs	r1, #136	@ 0x88
 80076bc:	05c9      	lsls	r1, r1, #23
 80076be:	1c18      	adds	r0, r3, #0
 80076c0:	f7f9 fbec 	bl	8000e9c <__aeabi_fmul>
 80076c4:	1c03      	adds	r3, r0, #0
 80076c6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80076cc:	491d      	ldr	r1, [pc, #116]	@ (8007744 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80076ce:	1c18      	adds	r0, r3, #0
 80076d0:	f7f9 f874 	bl	80007bc <__aeabi_fadd>
 80076d4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80076d6:	1c19      	adds	r1, r3, #0
 80076d8:	1c20      	adds	r0, r4, #0
 80076da:	f7f9 f9f9 	bl	8000ad0 <__aeabi_fdiv>
 80076de:	1c03      	adds	r3, r0, #0
 80076e0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80076ea:	2185      	movs	r1, #133	@ 0x85
 80076ec:	05c9      	lsls	r1, r1, #23
 80076ee:	1c18      	adds	r0, r3, #0
 80076f0:	f7f9 fbd4 	bl	8000e9c <__aeabi_fmul>
 80076f4:	1c03      	adds	r3, r0, #0
 80076f6:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4912      	ldr	r1, [pc, #72]	@ (8007748 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80076fe:	1c18      	adds	r0, r3, #0
 8007700:	f7f9 f85c 	bl	80007bc <__aeabi_fadd>
 8007704:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8007706:	1c19      	adds	r1, r3, #0
 8007708:	1c20      	adds	r0, r4, #0
 800770a:	f7f9 f9e1 	bl	8000ad0 <__aeabi_fdiv>
 800770e:	1c03      	adds	r3, r0, #0
 8007710:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8007734:	46c0      	nop			@ (mov r8, r8)
 8007736:	46bd      	mov	sp, r7
 8007738:	b002      	add	sp, #8
 800773a:	bdb0      	pop	{r4, r5, r7, pc}
 800773c:	45610000 	.word	0x45610000
 8007740:	44960000 	.word	0x44960000
 8007744:	41a00000 	.word	0x41a00000
 8007748:	451c4000 	.word	0x451c4000

0800774c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8007758:	1c18      	adds	r0, r3, #0
 800775a:	46bd      	mov	sp, r7
 800775c:	b002      	add	sp, #8
 800775e:	bd80      	pop	{r7, pc}

08007760 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8007770:	1c19      	adds	r1, r3, #0
 8007772:	1c10      	adds	r0, r2, #0
 8007774:	f7f9 f822 	bl	80007bc <__aeabi_fadd>
 8007778:	1c03      	adds	r3, r0, #0
}
 800777a:	1c18      	adds	r0, r3, #0
 800777c:	46bd      	mov	sp, r7
 800777e:	b002      	add	sp, #8
 8007780:	bd80      	pop	{r7, pc}

08007782 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	223c      	movs	r2, #60	@ 0x3c
 800778e:	5c9b      	ldrb	r3, [r3, r2]
}
 8007790:	0018      	movs	r0, r3
 8007792:	46bd      	mov	sp, r7
 8007794:	b002      	add	sp, #8
 8007796:	bd80      	pop	{r7, pc}

08007798 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8007798:	b5b0      	push	{r4, r5, r7, lr}
 800779a:	b08c      	sub	sp, #48	@ 0x30
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80077a4:	1c19      	adds	r1, r3, #0
 80077a6:	4895      	ldr	r0, [pc, #596]	@ (80079fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80077a8:	f7f9 fcb6 	bl	8001118 <__aeabi_fsub>
 80077ac:	1c03      	adds	r3, r0, #0
 80077ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077b4:	1c19      	adds	r1, r3, #0
 80077b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077b8:	f7f8 fe9c 	bl	80004f4 <__aeabi_fcmpgt>
 80077bc:	1e03      	subs	r3, r0, #0
 80077be:	d00b      	beq.n	80077d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80077c8:	1c19      	adds	r1, r3, #0
 80077ca:	1c10      	adds	r0, r2, #0
 80077cc:	f7f8 fff6 	bl	80007bc <__aeabi_fadd>
 80077d0:	1c03      	adds	r3, r0, #0
 80077d2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077dc:	1c19      	adds	r1, r3, #0
 80077de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077e0:	f7f8 fe88 	bl	80004f4 <__aeabi_fcmpgt>
 80077e4:	1e03      	subs	r3, r0, #0
 80077e6:	d00b      	beq.n	8007800 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80077f0:	1c19      	adds	r1, r3, #0
 80077f2:	1c10      	adds	r0, r2, #0
 80077f4:	f7f8 ffe2 	bl	80007bc <__aeabi_fadd>
 80077f8:	1c03      	adds	r3, r0, #0
 80077fa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6959      	ldr	r1, [r3, #20]
 8007804:	4a7e      	ldr	r2, [pc, #504]	@ (8007a00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	0018      	movs	r0, r3
 800780a:	f000 f9f1 	bl	8007bf0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	1c11      	adds	r1, r2, #0
 8007816:	0018      	movs	r0, r3
 8007818:	f000 f9fa 	bl	8007c10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800781c:	1c03      	adds	r3, r0, #0
 800781e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800782c:	1c19      	adds	r1, r3, #0
 800782e:	1c10      	adds	r0, r2, #0
 8007830:	f7f9 fc72 	bl	8001118 <__aeabi_fsub>
 8007834:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007838:	1c18      	adds	r0, r3, #0
 800783a:	f7f9 fb2f 	bl	8000e9c <__aeabi_fmul>
 800783e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007840:	1c19      	adds	r1, r3, #0
 8007842:	1c20      	adds	r0, r4, #0
 8007844:	f7f8 ffba 	bl	80007bc <__aeabi_fadd>
 8007848:	1c03      	adds	r3, r0, #0
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007854:	1c19      	adds	r1, r3, #0
 8007856:	486b      	ldr	r0, [pc, #428]	@ (8007a04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007858:	f7f9 fc5e 	bl	8001118 <__aeabi_fsub>
 800785c:	1c03      	adds	r3, r0, #0
 800785e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	1c11      	adds	r1, r2, #0
 8007868:	0018      	movs	r0, r3
 800786a:	f000 f9d1 	bl	8007c10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800786e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007870:	1c19      	adds	r1, r3, #0
 8007872:	1c28      	adds	r0, r5, #0
 8007874:	f7f9 fb12 	bl	8000e9c <__aeabi_fmul>
 8007878:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800787a:	1c19      	adds	r1, r3, #0
 800787c:	1c20      	adds	r0, r4, #0
 800787e:	f7f8 ff9d 	bl	80007bc <__aeabi_fadd>
 8007882:	1c03      	adds	r3, r0, #0
 8007884:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007886:	4a60      	ldr	r2, [pc, #384]	@ (8007a08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007888:	6a39      	ldr	r1, [r7, #32]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	0018      	movs	r0, r3
 800788e:	f000 f9af 	bl	8007bf0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	1c11      	adds	r1, r2, #0
 800789a:	0018      	movs	r0, r3
 800789c:	f000 f9b8 	bl	8007c10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80078a0:	1c03      	adds	r3, r0, #0
 80078a2:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80078a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078a6:	69f8      	ldr	r0, [r7, #28]
 80078a8:	f7f9 faf8 	bl	8000e9c <__aeabi_fmul>
 80078ac:	1c03      	adds	r3, r0, #0
 80078ae:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6999      	ldr	r1, [r3, #24]
 80078b8:	4a51      	ldr	r2, [pc, #324]	@ (8007a00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	0018      	movs	r0, r3
 80078be:	f000 f997 	bl	8007bf0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	1c11      	adds	r1, r2, #0
 80078ca:	0018      	movs	r0, r3
 80078cc:	f000 f9a0 	bl	8007c10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80078d0:	1c03      	adds	r3, r0, #0
 80078d2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80078e0:	1c19      	adds	r1, r3, #0
 80078e2:	1c10      	adds	r0, r2, #0
 80078e4:	f7f9 fc18 	bl	8001118 <__aeabi_fsub>
 80078e8:	1c03      	adds	r3, r0, #0
 80078ea:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80078ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ee:	69b8      	ldr	r0, [r7, #24]
 80078f0:	f7f9 fc12 	bl	8001118 <__aeabi_fsub>
 80078f4:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80078f6:	1c19      	adds	r1, r3, #0
 80078f8:	1c28      	adds	r0, r5, #0
 80078fa:	f7f9 facf 	bl	8000e9c <__aeabi_fmul>
 80078fe:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007900:	1c19      	adds	r1, r3, #0
 8007902:	1c20      	adds	r0, r4, #0
 8007904:	f7f8 ff5a 	bl	80007bc <__aeabi_fadd>
 8007908:	1c03      	adds	r3, r0, #0
 800790a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007914:	1c19      	adds	r1, r3, #0
 8007916:	483b      	ldr	r0, [pc, #236]	@ (8007a04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007918:	f7f9 fbfe 	bl	8001118 <__aeabi_fsub>
 800791c:	1c03      	adds	r3, r0, #0
 800791e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	1c11      	adds	r1, r2, #0
 8007928:	0018      	movs	r0, r3
 800792a:	f000 f971 	bl	8007c10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800792e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007930:	1c19      	adds	r1, r3, #0
 8007932:	1c28      	adds	r0, r5, #0
 8007934:	f7f9 fab2 	bl	8000e9c <__aeabi_fmul>
 8007938:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800793a:	1c19      	adds	r1, r3, #0
 800793c:	1c20      	adds	r0, r4, #0
 800793e:	f7f8 ff3d 	bl	80007bc <__aeabi_fadd>
 8007942:	1c03      	adds	r3, r0, #0
 8007944:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007946:	4a30      	ldr	r2, [pc, #192]	@ (8007a08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007948:	6939      	ldr	r1, [r7, #16]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	0018      	movs	r0, r3
 800794e:	f000 f94f 	bl	8007bf0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	1c11      	adds	r1, r2, #0
 800795a:	0018      	movs	r0, r3
 800795c:	f000 f958 	bl	8007c10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007960:	1c03      	adds	r3, r0, #0
 8007962:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007964:	6979      	ldr	r1, [r7, #20]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7f9 fa98 	bl	8000e9c <__aeabi_fmul>
 800796c:	1c03      	adds	r3, r0, #0
 800796e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4923      	ldr	r1, [pc, #140]	@ (8007a0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800797e:	1c18      	adds	r0, r3, #0
 8007980:	f7f9 f8a6 	bl	8000ad0 <__aeabi_fdiv>
 8007984:	1c03      	adds	r3, r0, #0
 8007986:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007988:	69f9      	ldr	r1, [r7, #28]
 800798a:	20fe      	movs	r0, #254	@ 0xfe
 800798c:	0580      	lsls	r0, r0, #22
 800798e:	f7f9 fbc3 	bl	8001118 <__aeabi_fsub>
 8007992:	1c03      	adds	r3, r0, #0
 8007994:	491e      	ldr	r1, [pc, #120]	@ (8007a10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007996:	1c18      	adds	r0, r3, #0
 8007998:	f7f9 fa80 	bl	8000e9c <__aeabi_fmul>
 800799c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800799e:	491d      	ldr	r1, [pc, #116]	@ (8007a14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 80079a0:	1c18      	adds	r0, r3, #0
 80079a2:	f7f9 fbb9 	bl	8001118 <__aeabi_fsub>
 80079a6:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80079a8:	1c19      	adds	r1, r3, #0
 80079aa:	1c28      	adds	r0, r5, #0
 80079ac:	f7f9 fa76 	bl	8000e9c <__aeabi_fmul>
 80079b0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80079b2:	1c19      	adds	r1, r3, #0
 80079b4:	1c20      	adds	r0, r4, #0
 80079b6:	f7f8 ff01 	bl	80007bc <__aeabi_fadd>
 80079ba:	1c03      	adds	r3, r0, #0
 80079bc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079c6:	2100      	movs	r1, #0
 80079c8:	1c18      	adds	r0, r3, #0
 80079ca:	f7f8 fd7f 	bl	80004cc <__aeabi_fcmplt>
 80079ce:	1e03      	subs	r3, r0, #0
 80079d0:	d002      	beq.n	80079d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80079e0:	1c19      	adds	r1, r3, #0
 80079e2:	1c10      	adds	r0, r2, #0
 80079e4:	f7f8 fd86 	bl	80004f4 <__aeabi_fcmpgt>
 80079e8:	1e03      	subs	r3, r0, #0
 80079ea:	d100      	bne.n	80079ee <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80079ec:	e002      	b.n	80079f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80079f4:	46c0      	nop			@ (mov r8, r8)
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b00c      	add	sp, #48	@ 0x30
 80079fa:	bdb0      	pop	{r4, r5, r7, pc}
 80079fc:	46fffe00 	.word	0x46fffe00
 8007a00:	3c23d70a 	.word	0x3c23d70a
 8007a04:	43ff0000 	.word	0x43ff0000
 8007a08:	3db851ec 	.word	0x3db851ec
 8007a0c:	42700000 	.word	0x42700000
 8007a10:	3fa66666 	.word	0x3fa66666
 8007a14:	3e99999a 	.word	0x3e99999a

08007a18 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	223c      	movs	r2, #60	@ 0x3c
 8007a26:	5c9b      	ldrb	r3, [r3, r2]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	4053      	eors	r3, r2
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	223c      	movs	r2, #60	@ 0x3c
 8007a36:	2101      	movs	r1, #1
 8007a38:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8007a46:	e0c8      	b.n	8007bda <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4c:	4965      	ldr	r1, [pc, #404]	@ (8007be4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007a4e:	1c18      	adds	r0, r3, #0
 8007a50:	f7f8 fd5a 	bl	8000508 <__aeabi_fcmpge>
 8007a54:	1e03      	subs	r3, r0, #0
 8007a56:	d107      	bne.n	8007a68 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007a5c:	4962      	ldr	r1, [pc, #392]	@ (8007be8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007a5e:	1c18      	adds	r0, r3, #0
 8007a60:	f7f8 fd3e 	bl	80004e0 <__aeabi_fcmple>
 8007a64:	1e03      	subs	r3, r0, #0
 8007a66:	d00e      	beq.n	8007a86 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007a70:	1c19      	adds	r1, r3, #0
 8007a72:	1c10      	adds	r0, r2, #0
 8007a74:	f7f8 fea2 	bl	80007bc <__aeabi_fadd>
 8007a78:	1c03      	adds	r3, r0, #0
 8007a7a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a8a:	1c19      	adds	r1, r3, #0
 8007a8c:	6838      	ldr	r0, [r7, #0]
 8007a8e:	f7f9 fb43 	bl	8001118 <__aeabi_fsub>
 8007a92:	1c03      	adds	r3, r0, #0
 8007a94:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f7ff fe7d 	bl	8007798 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa2:	1c19      	adds	r1, r3, #0
 8007aa4:	6838      	ldr	r0, [r7, #0]
 8007aa6:	f7f9 fb37 	bl	8001118 <__aeabi_fsub>
 8007aaa:	1c03      	adds	r3, r0, #0
 8007aac:	2185      	movs	r1, #133	@ 0x85
 8007aae:	05c9      	lsls	r1, r1, #23
 8007ab0:	1c18      	adds	r0, r3, #0
 8007ab2:	f7f9 f80d 	bl	8000ad0 <__aeabi_fdiv>
 8007ab6:	1c03      	adds	r3, r0, #0
 8007ab8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007aba:	2100      	movs	r1, #0
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7f8 fd05 	bl	80004cc <__aeabi_fcmplt>
 8007ac2:	1e03      	subs	r3, r0, #0
 8007ac4:	d008      	beq.n	8007ad8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	1c18      	adds	r0, r3, #0
 8007ace:	f7f9 fb23 	bl	8001118 <__aeabi_fsub>
 8007ad2:	1c03      	adds	r3, r0, #0
 8007ad4:	617b      	str	r3, [r7, #20]
 8007ad6:	e007      	b.n	8007ae8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007adc:	1c19      	adds	r1, r3, #0
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7f8 fe6c 	bl	80007bc <__aeabi_fadd>
 8007ae4:	1c03      	adds	r3, r0, #0
 8007ae6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007ae8:	23fe      	movs	r3, #254	@ 0xfe
 8007aea:	059b      	lsls	r3, r3, #22
 8007aec:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007aee:	493f      	ldr	r1, [pc, #252]	@ (8007bec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007af0:	6978      	ldr	r0, [r7, #20]
 8007af2:	f7f8 fcff 	bl	80004f4 <__aeabi_fcmpgt>
 8007af6:	1e03      	subs	r3, r0, #0
 8007af8:	d010      	beq.n	8007b1c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007afa:	493c      	ldr	r1, [pc, #240]	@ (8007bec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007afc:	6978      	ldr	r0, [r7, #20]
 8007afe:	f7f8 ffe7 	bl	8000ad0 <__aeabi_fdiv>
 8007b02:	1c03      	adds	r3, r0, #0
 8007b04:	1c1c      	adds	r4, r3, #0
 8007b06:	4939      	ldr	r1, [pc, #228]	@ (8007bec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007b08:	6978      	ldr	r0, [r7, #20]
 8007b0a:	f7f8 ffe1 	bl	8000ad0 <__aeabi_fdiv>
 8007b0e:	1c03      	adds	r3, r0, #0
 8007b10:	1c19      	adds	r1, r3, #0
 8007b12:	1c20      	adds	r0, r4, #0
 8007b14:	f7f9 f9c2 	bl	8000e9c <__aeabi_fmul>
 8007b18:	1c03      	adds	r3, r0, #0
 8007b1a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007b20:	1c19      	adds	r1, r3, #0
 8007b22:	2085      	movs	r0, #133	@ 0x85
 8007b24:	05c0      	lsls	r0, r0, #23
 8007b26:	f7f9 faf7 	bl	8001118 <__aeabi_fsub>
 8007b2a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007b2c:	6939      	ldr	r1, [r7, #16]
 8007b2e:	1c18      	adds	r0, r3, #0
 8007b30:	f7f9 f9b4 	bl	8000e9c <__aeabi_fmul>
 8007b34:	1c03      	adds	r3, r0, #0
 8007b36:	1c18      	adds	r0, r3, #0
 8007b38:	f012 fb9a 	bl	801a270 <sqrtf>
 8007b3c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007b46:	2185      	movs	r1, #133	@ 0x85
 8007b48:	05c9      	lsls	r1, r1, #23
 8007b4a:	6938      	ldr	r0, [r7, #16]
 8007b4c:	f7f9 f9a6 	bl	8000e9c <__aeabi_fmul>
 8007b50:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007b52:	1c19      	adds	r1, r3, #0
 8007b54:	1c28      	adds	r0, r5, #0
 8007b56:	f7f8 ffbb 	bl	8000ad0 <__aeabi_fdiv>
 8007b5a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007b5c:	1c19      	adds	r1, r3, #0
 8007b5e:	1c20      	adds	r0, r4, #0
 8007b60:	f7f9 f99c 	bl	8000e9c <__aeabi_fmul>
 8007b64:	1c03      	adds	r3, r0, #0
 8007b66:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b6c:	68f9      	ldr	r1, [r7, #12]
 8007b6e:	1c18      	adds	r0, r3, #0
 8007b70:	f7f9 f994 	bl	8000e9c <__aeabi_fmul>
 8007b74:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007b76:	6939      	ldr	r1, [r7, #16]
 8007b78:	1c18      	adds	r0, r3, #0
 8007b7a:	f7f8 ffa9 	bl	8000ad0 <__aeabi_fdiv>
 8007b7e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007b80:	68f9      	ldr	r1, [r7, #12]
 8007b82:	1c18      	adds	r0, r3, #0
 8007b84:	f7f9 f98a 	bl	8000e9c <__aeabi_fmul>
 8007b88:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007b8a:	1c19      	adds	r1, r3, #0
 8007b8c:	1c20      	adds	r0, r4, #0
 8007b8e:	f7f8 fe15 	bl	80007bc <__aeabi_fadd>
 8007b92:	1c03      	adds	r3, r0, #0
 8007b94:	1c18      	adds	r0, r3, #0
 8007b96:	f012 fb6b 	bl	801a270 <sqrtf>
 8007b9a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007b9c:	1c19      	adds	r1, r3, #0
 8007b9e:	1c30      	adds	r0, r6, #0
 8007ba0:	f7f9 f97c 	bl	8000e9c <__aeabi_fmul>
 8007ba4:	1c03      	adds	r3, r0, #0
 8007ba6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb4:	68f9      	ldr	r1, [r7, #12]
 8007bb6:	1c18      	adds	r0, r3, #0
 8007bb8:	f7f9 f970 	bl	8000e9c <__aeabi_fmul>
 8007bbc:	1c03      	adds	r3, r0, #0
 8007bbe:	2182      	movs	r1, #130	@ 0x82
 8007bc0:	05c9      	lsls	r1, r1, #23
 8007bc2:	1c18      	adds	r0, r3, #0
 8007bc4:	f7f8 ff84 	bl	8000ad0 <__aeabi_fdiv>
 8007bc8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007bca:	1c19      	adds	r1, r3, #0
 8007bcc:	1c20      	adds	r0, r4, #0
 8007bce:	f7f8 fdf5 	bl	80007bc <__aeabi_fadd>
 8007bd2:	1c03      	adds	r3, r0, #0
 8007bd4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007bda:	46c0      	nop			@ (mov r8, r8)
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	b007      	add	sp, #28
 8007be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be2:	46c0      	nop			@ (mov r8, r8)
 8007be4:	42c80000 	.word	0x42c80000
 8007be8:	c2c80000 	.word	0xc2c80000
 8007bec:	44b40000 	.word	0x44b40000

08007bf0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c08:	46c0      	nop			@ (mov r8, r8)
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b004      	add	sp, #16
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007c10:	b590      	push	{r4, r7, lr}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c22:	1c19      	adds	r1, r3, #0
 8007c24:	6838      	ldr	r0, [r7, #0]
 8007c26:	f7f9 fa77 	bl	8001118 <__aeabi_fsub>
 8007c2a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007c2c:	1c19      	adds	r1, r3, #0
 8007c2e:	1c20      	adds	r0, r4, #0
 8007c30:	f7f9 f934 	bl	8000e9c <__aeabi_fmul>
 8007c34:	1c03      	adds	r3, r0, #0
 8007c36:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007c38:	4912      	ldr	r1, [pc, #72]	@ (8007c84 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7f8 fc46 	bl	80004cc <__aeabi_fcmplt>
 8007c40:	1e03      	subs	r3, r0, #0
 8007c42:	d002      	beq.n	8007c4a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007c44:	23fe      	movs	r3, #254	@ 0xfe
 8007c46:	059b      	lsls	r3, r3, #22
 8007c48:	e018      	b.n	8007c7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007c4a:	490f      	ldr	r1, [pc, #60]	@ (8007c88 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7f8 fc51 	bl	80004f4 <__aeabi_fcmpgt>
 8007c52:	1e03      	subs	r3, r0, #0
 8007c54:	d001      	beq.n	8007c5a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e010      	b.n	8007c7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1c18      	adds	r0, r3, #0
 8007c5e:	f012 fadf 	bl	801a220 <expf>
 8007c62:	1c03      	adds	r3, r0, #0
 8007c64:	21fe      	movs	r1, #254	@ 0xfe
 8007c66:	0589      	lsls	r1, r1, #22
 8007c68:	1c18      	adds	r0, r3, #0
 8007c6a:	f7f8 fda7 	bl	80007bc <__aeabi_fadd>
 8007c6e:	1c03      	adds	r3, r0, #0
 8007c70:	1c19      	adds	r1, r3, #0
 8007c72:	20fe      	movs	r0, #254	@ 0xfe
 8007c74:	0580      	lsls	r0, r0, #22
 8007c76:	f7f8 ff2b 	bl	8000ad0 <__aeabi_fdiv>
 8007c7a:	1c03      	adds	r3, r0, #0
    }
}
 8007c7c:	1c18      	adds	r0, r3, #0
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b005      	add	sp, #20
 8007c82:	bd90      	pop	{r4, r7, pc}
 8007c84:	c2480000 	.word	0xc2480000
 8007c88:	42480000 	.word	0x42480000

08007c8c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007ca4:	46c0      	nop			@ (mov r8, r8)
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	b004      	add	sp, #16
 8007caa:	bd80      	pop	{r7, pc}

08007cac <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007cac:	b590      	push	{r4, r7, lr}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d114      	bne.n	8007ce8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cc2:	1c19      	adds	r1, r3, #0
 8007cc4:	6838      	ldr	r0, [r7, #0]
 8007cc6:	f7f9 fa27 	bl	8001118 <__aeabi_fsub>
 8007cca:	1c03      	adds	r3, r0, #0
 8007ccc:	4918      	ldr	r1, [pc, #96]	@ (8007d30 <GasIndexAlgorithm__mox_model__process+0x84>)
 8007cce:	1c18      	adds	r0, r3, #0
 8007cd0:	f7f8 fefe 	bl	8000ad0 <__aeabi_fdiv>
 8007cd4:	1c03      	adds	r3, r0, #0
 8007cd6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007cdc:	1c19      	adds	r1, r3, #0
 8007cde:	1c10      	adds	r0, r2, #0
 8007ce0:	f7f9 f8dc 	bl	8000e9c <__aeabi_fmul>
 8007ce4:	1c03      	adds	r3, r0, #0
 8007ce6:	e01f      	b.n	8007d28 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cec:	1c19      	adds	r1, r3, #0
 8007cee:	6838      	ldr	r0, [r7, #0]
 8007cf0:	f7f9 fa12 	bl	8001118 <__aeabi_fsub>
 8007cf4:	1c03      	adds	r3, r0, #0
 8007cf6:	1c1a      	adds	r2, r3, #0
 8007cf8:	2380      	movs	r3, #128	@ 0x80
 8007cfa:	061b      	lsls	r3, r3, #24
 8007cfc:	4053      	eors	r3, r2
 8007cfe:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d04:	490b      	ldr	r1, [pc, #44]	@ (8007d34 <GasIndexAlgorithm__mox_model__process+0x88>)
 8007d06:	1c18      	adds	r0, r3, #0
 8007d08:	f7f8 fd58 	bl	80007bc <__aeabi_fadd>
 8007d0c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007d0e:	1c19      	adds	r1, r3, #0
 8007d10:	1c20      	adds	r0, r4, #0
 8007d12:	f7f8 fedd 	bl	8000ad0 <__aeabi_fdiv>
 8007d16:	1c03      	adds	r3, r0, #0
 8007d18:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007d1e:	1c19      	adds	r1, r3, #0
 8007d20:	1c10      	adds	r0, r2, #0
 8007d22:	f7f9 f8bb 	bl	8000e9c <__aeabi_fmul>
 8007d26:	1c03      	adds	r3, r0, #0
    }
}
 8007d28:	1c18      	adds	r0, r3, #0
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	b003      	add	sp, #12
 8007d2e:	bd90      	pop	{r4, r7, pc}
 8007d30:	44fa0000 	.word	0x44fa0000
 8007d34:	435c0000 	.word	0x435c0000

08007d38 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2180      	movs	r1, #128	@ 0x80
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2184      	movs	r1, #132	@ 0x84
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2188      	movs	r1, #136	@ 0x88
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	505a      	str	r2, [r3, r1]
}
 8007d5e:	46c0      	nop			@ (mov r8, r8)
 8007d60:	46bd      	mov	sp, r7
 8007d62:	b004      	add	sp, #16
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8007d68:	b590      	push	{r4, r7, lr}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2280      	movs	r2, #128	@ 0x80
 8007d76:	589c      	ldr	r4, [r3, r2]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2284      	movs	r2, #132	@ 0x84
 8007d7c:	589b      	ldr	r3, [r3, r2]
 8007d7e:	1c19      	adds	r1, r3, #0
 8007d80:	6838      	ldr	r0, [r7, #0]
 8007d82:	f7f9 f9c9 	bl	8001118 <__aeabi_fsub>
 8007d86:	1c03      	adds	r3, r0, #0
 8007d88:	1c19      	adds	r1, r3, #0
 8007d8a:	1c20      	adds	r0, r4, #0
 8007d8c:	f7f9 f886 	bl	8000e9c <__aeabi_fmul>
 8007d90:	1c03      	adds	r3, r0, #0
 8007d92:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007d94:	4940      	ldr	r1, [pc, #256]	@ (8007e98 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007d96:	68b8      	ldr	r0, [r7, #8]
 8007d98:	f7f8 fb98 	bl	80004cc <__aeabi_fcmplt>
 8007d9c:	1e03      	subs	r3, r0, #0
 8007d9e:	d001      	beq.n	8007da4 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007da0:	4b3e      	ldr	r3, [pc, #248]	@ (8007e9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007da2:	e075      	b.n	8007e90 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007da4:	493e      	ldr	r1, [pc, #248]	@ (8007ea0 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007da6:	68b8      	ldr	r0, [r7, #8]
 8007da8:	f7f8 fba4 	bl	80004f4 <__aeabi_fcmpgt>
 8007dac:	1e03      	subs	r3, r0, #0
 8007dae:	d001      	beq.n	8007db4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007db0:	2300      	movs	r3, #0
 8007db2:	e06d      	b.n	8007e90 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007db4:	2100      	movs	r1, #0
 8007db6:	6838      	ldr	r0, [r7, #0]
 8007db8:	f7f8 fba6 	bl	8000508 <__aeabi_fcmpge>
 8007dbc:	1e03      	subs	r3, r0, #0
 8007dbe:	d047      	beq.n	8007e50 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2288      	movs	r2, #136	@ 0x88
 8007dc4:	589b      	ldr	r3, [r3, r2]
 8007dc6:	21fe      	movs	r1, #254	@ 0xfe
 8007dc8:	0589      	lsls	r1, r1, #22
 8007dca:	1c18      	adds	r0, r3, #0
 8007dcc:	f7f8 fb78 	bl	80004c0 <__aeabi_fcmpeq>
 8007dd0:	1e03      	subs	r3, r0, #0
 8007dd2:	d00e      	beq.n	8007df2 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	1c19      	adds	r1, r3, #0
 8007dda:	20fe      	movs	r0, #254	@ 0xfe
 8007ddc:	0580      	lsls	r0, r0, #22
 8007dde:	f7f9 f99b 	bl	8001118 <__aeabi_fsub>
 8007de2:	1c03      	adds	r3, r0, #0
 8007de4:	492f      	ldr	r1, [pc, #188]	@ (8007ea4 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8007de6:	1c18      	adds	r0, r3, #0
 8007de8:	f7f9 f858 	bl	8000e9c <__aeabi_fmul>
 8007dec:	1c03      	adds	r3, r0, #0
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e012      	b.n	8007e18 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	492c      	ldr	r1, [pc, #176]	@ (8007ea8 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007df8:	1c18      	adds	r0, r3, #0
 8007dfa:	f7f9 f84f 	bl	8000e9c <__aeabi_fmul>
 8007dfe:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8007e00:	1c19      	adds	r1, r3, #0
 8007e02:	4826      	ldr	r0, [pc, #152]	@ (8007e9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007e04:	f7f9 f988 	bl	8001118 <__aeabi_fsub>
 8007e08:	1c03      	adds	r3, r0, #0
 8007e0a:	2181      	movs	r1, #129	@ 0x81
 8007e0c:	05c9      	lsls	r1, r1, #23
 8007e0e:	1c18      	adds	r0, r3, #0
 8007e10:	f7f8 fe5e 	bl	8000ad0 <__aeabi_fdiv>
 8007e14:	1c03      	adds	r3, r0, #0
 8007e16:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007e18:	4920      	ldr	r1, [pc, #128]	@ (8007e9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7f8 fcce 	bl	80007bc <__aeabi_fadd>
 8007e20:	1c03      	adds	r3, r0, #0
 8007e22:	1c1c      	adds	r4, r3, #0
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	1c18      	adds	r0, r3, #0
 8007e28:	f012 f9fa 	bl	801a220 <expf>
 8007e2c:	1c03      	adds	r3, r0, #0
 8007e2e:	21fe      	movs	r1, #254	@ 0xfe
 8007e30:	0589      	lsls	r1, r1, #22
 8007e32:	1c18      	adds	r0, r3, #0
 8007e34:	f7f8 fcc2 	bl	80007bc <__aeabi_fadd>
 8007e38:	1c03      	adds	r3, r0, #0
 8007e3a:	1c19      	adds	r1, r3, #0
 8007e3c:	1c20      	adds	r0, r4, #0
 8007e3e:	f7f8 fe47 	bl	8000ad0 <__aeabi_fdiv>
 8007e42:	1c03      	adds	r3, r0, #0
 8007e44:	68f9      	ldr	r1, [r7, #12]
 8007e46:	1c18      	adds	r0, r3, #0
 8007e48:	f7f9 f966 	bl	8001118 <__aeabi_fsub>
 8007e4c:	1c03      	adds	r3, r0, #0
 8007e4e:	e01f      	b.n	8007e90 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2188      	movs	r1, #136	@ 0x88
 8007e58:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8007e5a:	1c19      	adds	r1, r3, #0
 8007e5c:	1c10      	adds	r0, r2, #0
 8007e5e:	f7f8 fe37 	bl	8000ad0 <__aeabi_fdiv>
 8007e62:	1c03      	adds	r3, r0, #0
 8007e64:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	1c18      	adds	r0, r3, #0
 8007e6a:	f012 f9d9 	bl	801a220 <expf>
 8007e6e:	1c03      	adds	r3, r0, #0
 8007e70:	21fe      	movs	r1, #254	@ 0xfe
 8007e72:	0589      	lsls	r1, r1, #22
 8007e74:	1c18      	adds	r0, r3, #0
 8007e76:	f7f8 fca1 	bl	80007bc <__aeabi_fadd>
 8007e7a:	1c03      	adds	r3, r0, #0
 8007e7c:	1c19      	adds	r1, r3, #0
 8007e7e:	4807      	ldr	r0, [pc, #28]	@ (8007e9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007e80:	f7f8 fe26 	bl	8000ad0 <__aeabi_fdiv>
 8007e84:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007e86:	1c19      	adds	r1, r3, #0
 8007e88:	1c20      	adds	r0, r4, #0
 8007e8a:	f7f9 f807 	bl	8000e9c <__aeabi_fmul>
 8007e8e:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007e90:	1c18      	adds	r0, r3, #0
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b005      	add	sp, #20
 8007e96:	bd90      	pop	{r4, r7, pc}
 8007e98:	c2480000 	.word	0xc2480000
 8007e9c:	43fa0000 	.word	0x43fa0000
 8007ea0:	42480000 	.word	0x42480000
 8007ea4:	3f8041ab 	.word	0x3f8041ab
 8007ea8:	40a00000 	.word	0x40a00000

08007eac <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4913      	ldr	r1, [pc, #76]	@ (8007f0c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8007ebe:	1c18      	adds	r0, r3, #0
 8007ec0:	f7f8 fc7c 	bl	80007bc <__aeabi_fadd>
 8007ec4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007ec6:	1c19      	adds	r1, r3, #0
 8007ec8:	1c20      	adds	r0, r4, #0
 8007eca:	f7f8 fe01 	bl	8000ad0 <__aeabi_fdiv>
 8007ece:	1c03      	adds	r3, r0, #0
 8007ed0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	228c      	movs	r2, #140	@ 0x8c
 8007ed6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	490b      	ldr	r1, [pc, #44]	@ (8007f10 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8007ee2:	1c18      	adds	r0, r3, #0
 8007ee4:	f7f8 fc6a 	bl	80007bc <__aeabi_fadd>
 8007ee8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007eea:	1c19      	adds	r1, r3, #0
 8007eec:	1c20      	adds	r0, r4, #0
 8007eee:	f7f8 fdef 	bl	8000ad0 <__aeabi_fdiv>
 8007ef2:	1c03      	adds	r3, r0, #0
 8007ef4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2290      	movs	r2, #144	@ 0x90
 8007efa:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2294      	movs	r2, #148	@ 0x94
 8007f00:	2100      	movs	r1, #0
 8007f02:	5499      	strb	r1, [r3, r2]
}
 8007f04:	46c0      	nop			@ (mov r8, r8)
 8007f06:	46bd      	mov	sp, r7
 8007f08:	b003      	add	sp, #12
 8007f0a:	bd90      	pop	{r4, r7, pc}
 8007f0c:	41a00000 	.word	0x41a00000
 8007f10:	43fa0000 	.word	0x43fa0000

08007f14 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2294      	movs	r2, #148	@ 0x94
 8007f22:	5c9b      	ldrb	r3, [r3, r2]
 8007f24:	2201      	movs	r2, #1
 8007f26:	4053      	eors	r3, r2
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00f      	beq.n	8007f4e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2198      	movs	r1, #152	@ 0x98
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	219c      	movs	r1, #156	@ 0x9c
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	21a0      	movs	r1, #160	@ 0xa0
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2294      	movs	r2, #148	@ 0x94
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	228c      	movs	r2, #140	@ 0x8c
 8007f52:	589b      	ldr	r3, [r3, r2]
 8007f54:	1c19      	adds	r1, r3, #0
 8007f56:	20fe      	movs	r0, #254	@ 0xfe
 8007f58:	0580      	lsls	r0, r0, #22
 8007f5a:	f7f9 f8dd 	bl	8001118 <__aeabi_fsub>
 8007f5e:	1c03      	adds	r3, r0, #0
 8007f60:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2298      	movs	r2, #152	@ 0x98
 8007f66:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007f68:	1c19      	adds	r1, r3, #0
 8007f6a:	f7f8 ff97 	bl	8000e9c <__aeabi_fmul>
 8007f6e:	1c03      	adds	r3, r0, #0
 8007f70:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	228c      	movs	r2, #140	@ 0x8c
 8007f76:	589b      	ldr	r3, [r3, r2]
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	1c18      	adds	r0, r3, #0
 8007f7c:	f7f8 ff8e 	bl	8000e9c <__aeabi_fmul>
 8007f80:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8007f82:	1c19      	adds	r1, r3, #0
 8007f84:	1c20      	adds	r0, r4, #0
 8007f86:	f7f8 fc19 	bl	80007bc <__aeabi_fadd>
 8007f8a:	1c03      	adds	r3, r0, #0
 8007f8c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2298      	movs	r2, #152	@ 0x98
 8007f92:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2290      	movs	r2, #144	@ 0x90
 8007f98:	589b      	ldr	r3, [r3, r2]
 8007f9a:	1c19      	adds	r1, r3, #0
 8007f9c:	20fe      	movs	r0, #254	@ 0xfe
 8007f9e:	0580      	lsls	r0, r0, #22
 8007fa0:	f7f9 f8ba 	bl	8001118 <__aeabi_fsub>
 8007fa4:	1c03      	adds	r3, r0, #0
 8007fa6:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	229c      	movs	r2, #156	@ 0x9c
 8007fac:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007fae:	1c19      	adds	r1, r3, #0
 8007fb0:	f7f8 ff74 	bl	8000e9c <__aeabi_fmul>
 8007fb4:	1c03      	adds	r3, r0, #0
 8007fb6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2290      	movs	r2, #144	@ 0x90
 8007fbc:	589b      	ldr	r3, [r3, r2]
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	1c18      	adds	r0, r3, #0
 8007fc2:	f7f8 ff6b 	bl	8000e9c <__aeabi_fmul>
 8007fc6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8007fc8:	1c19      	adds	r1, r3, #0
 8007fca:	1c20      	adds	r0, r4, #0
 8007fcc:	f7f8 fbf6 	bl	80007bc <__aeabi_fadd>
 8007fd0:	1c03      	adds	r3, r0, #0
 8007fd2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	229c      	movs	r2, #156	@ 0x9c
 8007fd8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2298      	movs	r2, #152	@ 0x98
 8007fde:	589a      	ldr	r2, [r3, r2]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	219c      	movs	r1, #156	@ 0x9c
 8007fe4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8007fe6:	1c19      	adds	r1, r3, #0
 8007fe8:	1c10      	adds	r0, r2, #0
 8007fea:	f7f9 f895 	bl	8001118 <__aeabi_fsub>
 8007fee:	1c03      	adds	r3, r0, #0
 8007ff0:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	6978      	ldr	r0, [r7, #20]
 8007ff6:	f7f8 fa69 	bl	80004cc <__aeabi_fcmplt>
 8007ffa:	1e03      	subs	r3, r0, #0
 8007ffc:	d004      	beq.n	8008008 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2280      	movs	r2, #128	@ 0x80
 8008002:	0612      	lsls	r2, r2, #24
 8008004:	4053      	eors	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008008:	4923      	ldr	r1, [pc, #140]	@ (8008098 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800800a:	6978      	ldr	r0, [r7, #20]
 800800c:	f7f8 ff46 	bl	8000e9c <__aeabi_fmul>
 8008010:	1c03      	adds	r3, r0, #0
 8008012:	1c18      	adds	r0, r3, #0
 8008014:	f012 f904 	bl	801a220 <expf>
 8008018:	1c03      	adds	r3, r0, #0
 800801a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800801c:	491f      	ldr	r1, [pc, #124]	@ (800809c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800801e:	6938      	ldr	r0, [r7, #16]
 8008020:	f7f8 ff3c 	bl	8000e9c <__aeabi_fmul>
 8008024:	1c03      	adds	r3, r0, #0
 8008026:	491e      	ldr	r1, [pc, #120]	@ (80080a0 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008028:	1c18      	adds	r0, r3, #0
 800802a:	f7f8 fbc7 	bl	80007bc <__aeabi_fadd>
 800802e:	1c03      	adds	r3, r0, #0
 8008030:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685c      	ldr	r4, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	68f9      	ldr	r1, [r7, #12]
 800803c:	1c18      	adds	r0, r3, #0
 800803e:	f7f8 fbbd 	bl	80007bc <__aeabi_fadd>
 8008042:	1c03      	adds	r3, r0, #0
 8008044:	1c19      	adds	r1, r3, #0
 8008046:	1c20      	adds	r0, r4, #0
 8008048:	f7f8 fd42 	bl	8000ad0 <__aeabi_fdiv>
 800804c:	1c03      	adds	r3, r0, #0
 800804e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	20fe      	movs	r0, #254	@ 0xfe
 8008054:	0580      	lsls	r0, r0, #22
 8008056:	f7f9 f85f 	bl	8001118 <__aeabi_fsub>
 800805a:	1c03      	adds	r3, r0, #0
 800805c:	1c18      	adds	r0, r3, #0
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	22a0      	movs	r2, #160	@ 0xa0
 8008062:	589b      	ldr	r3, [r3, r2]
 8008064:	1c19      	adds	r1, r3, #0
 8008066:	f7f8 ff19 	bl	8000e9c <__aeabi_fmul>
 800806a:	1c03      	adds	r3, r0, #0
 800806c:	1c1c      	adds	r4, r3, #0
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	68b8      	ldr	r0, [r7, #8]
 8008072:	f7f8 ff13 	bl	8000e9c <__aeabi_fmul>
 8008076:	1c03      	adds	r3, r0, #0
 8008078:	1c19      	adds	r1, r3, #0
 800807a:	1c20      	adds	r0, r4, #0
 800807c:	f7f8 fb9e 	bl	80007bc <__aeabi_fadd>
 8008080:	1c03      	adds	r3, r0, #0
 8008082:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	22a0      	movs	r2, #160	@ 0xa0
 8008088:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	22a0      	movs	r2, #160	@ 0xa0
 800808e:	589b      	ldr	r3, [r3, r2]
}
 8008090:	1c18      	adds	r0, r3, #0
 8008092:	46bd      	mov	sp, r7
 8008094:	b007      	add	sp, #28
 8008096:	bd90      	pop	{r4, r7, pc}
 8008098:	be4ccccd 	.word	0xbe4ccccd
 800809c:	43f00000 	.word	0x43f00000
 80080a0:	41a00000 	.word	0x41a00000

080080a4 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80080a4:	b590      	push	{r4, r7, lr}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6039      	str	r1, [r7, #0]
 80080ac:	0011      	movs	r1, r2
 80080ae:	1dfb      	adds	r3, r7, #7
 80080b0:	1c02      	adds	r2, r0, #0
 80080b2:	701a      	strb	r2, [r3, #0]
 80080b4:	1dbb      	adds	r3, r7, #6
 80080b6:	1c0a      	adds	r2, r1, #0
 80080b8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80080ba:	4b08      	ldr	r3, [pc, #32]	@ (80080dc <ReadRegister+0x38>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d008      	beq.n	80080d4 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80080c2:	4b06      	ldr	r3, [pc, #24]	@ (80080dc <ReadRegister+0x38>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	1dba      	adds	r2, r7, #6
 80080c8:	7814      	ldrb	r4, [r2, #0]
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	1dfa      	adds	r2, r7, #7
 80080ce:	7810      	ldrb	r0, [r2, #0]
 80080d0:	0022      	movs	r2, r4
 80080d2:	4798      	blx	r3
  }
}
 80080d4:	46c0      	nop			@ (mov r8, r8)
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b003      	add	sp, #12
 80080da:	bd90      	pop	{r4, r7, pc}
 80080dc:	200026e8 	.word	0x200026e8

080080e0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80080e0:	b590      	push	{r4, r7, lr}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6039      	str	r1, [r7, #0]
 80080e8:	0011      	movs	r1, r2
 80080ea:	1dfb      	adds	r3, r7, #7
 80080ec:	1c02      	adds	r2, r0, #0
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	1dbb      	adds	r3, r7, #6
 80080f2:	1c0a      	adds	r2, r1, #0
 80080f4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80080f6:	4b08      	ldr	r3, [pc, #32]	@ (8008118 <WriteRegister+0x38>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80080fe:	4b06      	ldr	r3, [pc, #24]	@ (8008118 <WriteRegister+0x38>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	1dba      	adds	r2, r7, #6
 8008104:	7814      	ldrb	r4, [r2, #0]
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	1dfa      	adds	r2, r7, #7
 800810a:	7810      	ldrb	r0, [r2, #0]
 800810c:	0022      	movs	r2, r4
 800810e:	4798      	blx	r3
  }
}
 8008110:	46c0      	nop			@ (mov r8, r8)
 8008112:	46bd      	mov	sp, r7
 8008114:	b003      	add	sp, #12
 8008116:	bd90      	pop	{r4, r7, pc}
 8008118:	200026ec 	.word	0x200026ec

0800811c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8008126:	4b07      	ldr	r3, [pc, #28]	@ (8008144 <SGP_Init+0x28>)
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800812c:	4b06      	ldr	r3, [pc, #24]	@ (8008148 <SGP_Init+0x2c>)
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8008132:	4b06      	ldr	r3, [pc, #24]	@ (800814c <SGP_Init+0x30>)
 8008134:	2100      	movs	r1, #0
 8008136:	0018      	movs	r0, r3
 8008138:	f7ff f930 	bl	800739c <GasIndexAlgorithm_init>
}
 800813c:	46c0      	nop			@ (mov r8, r8)
 800813e:	46bd      	mov	sp, r7
 8008140:	b002      	add	sp, #8
 8008142:	bd80      	pop	{r7, pc}
 8008144:	200026e8 	.word	0x200026e8
 8008148:	200026ec 	.word	0x200026ec
 800814c:	200026fc 	.word	0x200026fc

08008150 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008154:	4b13      	ldr	r3, [pc, #76]	@ (80081a4 <SGP_StartMeasurement+0x54>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00d      	beq.n	8008178 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800815c:	4b12      	ldr	r3, [pc, #72]	@ (80081a8 <SGP_StartMeasurement+0x58>)
 800815e:	2208      	movs	r2, #8
 8008160:	0019      	movs	r1, r3
 8008162:	2059      	movs	r0, #89	@ 0x59
 8008164:	f7ff ffbc 	bl	80080e0 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008168:	f001 fad4 	bl	8009714 <GetCurrentHalTicks>
 800816c:	0003      	movs	r3, r0
 800816e:	331e      	adds	r3, #30
 8008170:	001a      	movs	r2, r3
 8008172:	4b0e      	ldr	r3, [pc, #56]	@ (80081ac <SGP_StartMeasurement+0x5c>)
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	e00c      	b.n	8008192 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008178:	4b0d      	ldr	r3, [pc, #52]	@ (80081b0 <SGP_StartMeasurement+0x60>)
 800817a:	2208      	movs	r2, #8
 800817c:	0019      	movs	r1, r3
 800817e:	2059      	movs	r0, #89	@ 0x59
 8008180:	f7ff ffae 	bl	80080e0 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8008184:	f001 fac6 	bl	8009714 <GetCurrentHalTicks>
 8008188:	0003      	movs	r3, r0
 800818a:	33aa      	adds	r3, #170	@ 0xaa
 800818c:	001a      	movs	r2, r3
 800818e:	4b09      	ldr	r3, [pc, #36]	@ (80081b4 <SGP_StartMeasurement+0x64>)
 8008190:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8008192:	4b09      	ldr	r3, [pc, #36]	@ (80081b8 <SGP_StartMeasurement+0x68>)
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8008198:	4b08      	ldr	r3, [pc, #32]	@ (80081bc <SGP_StartMeasurement+0x6c>)
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
}
 800819e:	46c0      	nop			@ (mov r8, r8)
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	200027a4 	.word	0x200027a4
 80081a8:	20000078 	.word	0x20000078
 80081ac:	2000008c 	.word	0x2000008c
 80081b0:	20000070 	.word	0x20000070
 80081b4:	20000084 	.word	0x20000084
 80081b8:	200026fa 	.word	0x200026fa
 80081bc:	200026fb 	.word	0x200026fb

080081c0 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	4b04      	ldr	r3, [pc, #16]	@ (80081d8 <SGP_HeatedUp+0x18>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	0018      	movs	r0, r3
 80081ca:	f001 f9c1 	bl	8009550 <TimestampIsReached>
 80081ce:	0003      	movs	r3, r0
 80081d0:	0018      	movs	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	46c0      	nop			@ (mov r8, r8)
 80081d8:	20000084 	.word	0x20000084

080081dc <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80081e0:	4b04      	ldr	r3, [pc, #16]	@ (80081f4 <SGP_MeasurementReady+0x18>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	0018      	movs	r0, r3
 80081e6:	f001 f9b3 	bl	8009550 <TimestampIsReached>
 80081ea:	0003      	movs	r3, r0
}
 80081ec:	0018      	movs	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	46c0      	nop			@ (mov r8, r8)
 80081f4:	2000008c 	.word	0x2000008c

080081f8 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80081fc:	4b04      	ldr	r3, [pc, #16]	@ (8008210 <SGP_MeasurementDone+0x18>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	0018      	movs	r0, r3
 8008202:	f001 f9a5 	bl	8009550 <TimestampIsReached>
 8008206:	0003      	movs	r3, r0
}
 8008208:	0018      	movs	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	46c0      	nop			@ (mov r8, r8)
 8008210:	20000088 	.word	0x20000088

08008214 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008218:	4b04      	ldr	r3, [pc, #16]	@ (800822c <SGP_TurnHeaterOff+0x18>)
 800821a:	2202      	movs	r2, #2
 800821c:	0019      	movs	r1, r3
 800821e:	2059      	movs	r0, #89	@ 0x59
 8008220:	f7ff ff5e 	bl	80080e0 <WriteRegister>
}
 8008224:	46c0      	nop			@ (mov r8, r8)
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	46c0      	nop			@ (mov r8, r8)
 800822c:	20000068 	.word	0x20000068

08008230 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8008230:	b5b0      	push	{r4, r5, r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af02      	add	r7, sp, #8
 8008236:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008238:	f7ff ffc2 	bl	80081c0 <SGP_HeatedUp>
 800823c:	1e03      	subs	r3, r0, #0
 800823e:	d038      	beq.n	80082b2 <SGP_GetMeasurementValues+0x82>
 8008240:	4bd8      	ldr	r3, [pc, #864]	@ (80085a4 <SGP_GetMeasurementValues+0x374>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2201      	movs	r2, #1
 8008246:	4053      	eors	r3, r2
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d031      	beq.n	80082b2 <SGP_GetMeasurementValues+0x82>
 800824e:	4bd6      	ldr	r3, [pc, #856]	@ (80085a8 <SGP_GetMeasurementValues+0x378>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2201      	movs	r2, #1
 8008254:	4053      	eors	r3, r2
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b00      	cmp	r3, #0
 800825a:	d02a      	beq.n	80082b2 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 800825c:	4ad3      	ldr	r2, [pc, #844]	@ (80085ac <SGP_GetMeasurementValues+0x37c>)
 800825e:	4bd4      	ldr	r3, [pc, #848]	@ (80085b0 <SGP_GetMeasurementValues+0x380>)
 8008260:	0019      	movs	r1, r3
 8008262:	2003      	movs	r0, #3
 8008264:	f001 f9ca 	bl	80095fc <CreateLine>
    HeatUpIsDone = true;
 8008268:	4bce      	ldr	r3, [pc, #824]	@ (80085a4 <SGP_GetMeasurementValues+0x374>)
 800826a:	2201      	movs	r2, #1
 800826c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800826e:	4bd1      	ldr	r3, [pc, #836]	@ (80085b4 <SGP_GetMeasurementValues+0x384>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00d      	beq.n	8008292 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008276:	4bd0      	ldr	r3, [pc, #832]	@ (80085b8 <SGP_GetMeasurementValues+0x388>)
 8008278:	2208      	movs	r2, #8
 800827a:	0019      	movs	r1, r3
 800827c:	2059      	movs	r0, #89	@ 0x59
 800827e:	f7ff ff2f 	bl	80080e0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008282:	f001 fa47 	bl	8009714 <GetCurrentHalTicks>
 8008286:	0003      	movs	r3, r0
 8008288:	331e      	adds	r3, #30
 800828a:	001a      	movs	r2, r3
 800828c:	4bcb      	ldr	r3, [pc, #812]	@ (80085bc <SGP_GetMeasurementValues+0x38c>)
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e00c      	b.n	80082ac <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008292:	4bcb      	ldr	r3, [pc, #812]	@ (80085c0 <SGP_GetMeasurementValues+0x390>)
 8008294:	2208      	movs	r2, #8
 8008296:	0019      	movs	r1, r3
 8008298:	2059      	movs	r0, #89	@ 0x59
 800829a:	f7ff ff21 	bl	80080e0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800829e:	f001 fa39 	bl	8009714 <GetCurrentHalTicks>
 80082a2:	0003      	movs	r3, r0
 80082a4:	331e      	adds	r3, #30
 80082a6:	001a      	movs	r2, r3
 80082a8:	4bc4      	ldr	r3, [pc, #784]	@ (80085bc <SGP_GetMeasurementValues+0x38c>)
 80082aa:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 80082ac:	4bbe      	ldr	r3, [pc, #760]	@ (80085a8 <SGP_GetMeasurementValues+0x378>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80082b2:	4bbc      	ldr	r3, [pc, #752]	@ (80085a4 <SGP_GetMeasurementValues+0x374>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d100      	bne.n	80082bc <SGP_GetMeasurementValues+0x8c>
 80082ba:	e1b1      	b.n	8008620 <SGP_GetMeasurementValues+0x3f0>
 80082bc:	f7ff ff8e 	bl	80081dc <SGP_MeasurementReady>
 80082c0:	1e03      	subs	r3, r0, #0
 80082c2:	d100      	bne.n	80082c6 <SGP_GetMeasurementValues+0x96>
 80082c4:	e1ac      	b.n	8008620 <SGP_GetMeasurementValues+0x3f0>
 80082c6:	4bbf      	ldr	r3, [pc, #764]	@ (80085c4 <SGP_GetMeasurementValues+0x394>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2201      	movs	r2, #1
 80082cc:	4053      	eors	r3, r2
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d100      	bne.n	80082d6 <SGP_GetMeasurementValues+0xa6>
 80082d4:	e1a4      	b.n	8008620 <SGP_GetMeasurementValues+0x3f0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 80082d6:	4bbc      	ldr	r3, [pc, #752]	@ (80085c8 <SGP_GetMeasurementValues+0x398>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	3301      	adds	r3, #1
 80082dc:	4abb      	ldr	r2, [pc, #748]	@ (80085cc <SGP_GetMeasurementValues+0x39c>)
 80082de:	49b4      	ldr	r1, [pc, #720]	@ (80085b0 <SGP_GetMeasurementValues+0x380>)
 80082e0:	2003      	movs	r0, #3
 80082e2:	f001 f98b 	bl	80095fc <CreateLine>
    MeasurementIsReady = true;
 80082e6:	4bb7      	ldr	r3, [pc, #732]	@ (80085c4 <SGP_GetMeasurementValues+0x394>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 80082ec:	4bb8      	ldr	r3, [pc, #736]	@ (80085d0 <SGP_GetMeasurementValues+0x3a0>)
 80082ee:	2203      	movs	r2, #3
 80082f0:	0019      	movs	r1, r3
 80082f2:	2059      	movs	r0, #89	@ 0x59
 80082f4:	f7ff fed6 	bl	80080a4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 80082f8:	4bb5      	ldr	r3, [pc, #724]	@ (80085d0 <SGP_GetMeasurementValues+0x3a0>)
 80082fa:	2203      	movs	r2, #3
 80082fc:	2103      	movs	r1, #3
 80082fe:	0018      	movs	r0, r3
 8008300:	f000 f9f4 	bl	80086ec <CheckCRC>
 8008304:	0003      	movs	r3, r0
 8008306:	001a      	movs	r2, r3
 8008308:	2301      	movs	r3, #1
 800830a:	4053      	eors	r3, r2
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d02a      	beq.n	8008368 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8008312:	4ab0      	ldr	r2, [pc, #704]	@ (80085d4 <SGP_GetMeasurementValues+0x3a4>)
 8008314:	4bb0      	ldr	r3, [pc, #704]	@ (80085d8 <SGP_GetMeasurementValues+0x3a8>)
 8008316:	0019      	movs	r1, r3
 8008318:	2001      	movs	r0, #1
 800831a:	f001 f96f 	bl	80095fc <CreateLine>
      Info("SGP_Measure buffer structure:");
 800831e:	4aaf      	ldr	r2, [pc, #700]	@ (80085dc <SGP_GetMeasurementValues+0x3ac>)
 8008320:	4baf      	ldr	r3, [pc, #700]	@ (80085e0 <SGP_GetMeasurementValues+0x3b0>)
 8008322:	0019      	movs	r1, r3
 8008324:	2002      	movs	r0, #2
 8008326:	f001 f969 	bl	80095fc <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800832a:	230f      	movs	r3, #15
 800832c:	18fb      	adds	r3, r7, r3
 800832e:	2200      	movs	r2, #0
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	e012      	b.n	800835a <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8008334:	240f      	movs	r4, #15
 8008336:	193b      	adds	r3, r7, r4
 8008338:	7818      	ldrb	r0, [r3, #0]
 800833a:	193b      	adds	r3, r7, r4
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	4aa4      	ldr	r2, [pc, #656]	@ (80085d0 <SGP_GetMeasurementValues+0x3a0>)
 8008340:	5cd3      	ldrb	r3, [r2, r3]
 8008342:	4aa8      	ldr	r2, [pc, #672]	@ (80085e4 <SGP_GetMeasurementValues+0x3b4>)
 8008344:	499a      	ldr	r1, [pc, #616]	@ (80085b0 <SGP_GetMeasurementValues+0x380>)
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	0003      	movs	r3, r0
 800834a:	2003      	movs	r0, #3
 800834c:	f001 f956 	bl	80095fc <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008350:	193b      	adds	r3, r7, r4
 8008352:	781a      	ldrb	r2, [r3, #0]
 8008354:	193b      	adds	r3, r7, r4
 8008356:	3201      	adds	r2, #1
 8008358:	701a      	strb	r2, [r3, #0]
 800835a:	230f      	movs	r3, #15
 800835c:	18fb      	adds	r3, r7, r3
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	2b02      	cmp	r3, #2
 8008362:	d9e7      	bls.n	8008334 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8008364:	2300      	movs	r3, #0
 8008366:	e173      	b.n	8008650 <SGP_GetMeasurementValues+0x420>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8008368:	f001 f9d4 	bl	8009714 <GetCurrentHalTicks>
 800836c:	0003      	movs	r3, r0
 800836e:	22fa      	movs	r2, #250	@ 0xfa
 8008370:	0092      	lsls	r2, r2, #2
 8008372:	189a      	adds	r2, r3, r2
 8008374:	4b9c      	ldr	r3, [pc, #624]	@ (80085e8 <SGP_GetMeasurementValues+0x3b8>)
 8008376:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8008378:	f7ff ff4c 	bl	8008214 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 800837c:	4b92      	ldr	r3, [pc, #584]	@ (80085c8 <SGP_GetMeasurementValues+0x398>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	3301      	adds	r3, #1
 8008382:	b2da      	uxtb	r2, r3
 8008384:	4b90      	ldr	r3, [pc, #576]	@ (80085c8 <SGP_GetMeasurementValues+0x398>)
 8008386:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8008388:	4b8f      	ldr	r3, [pc, #572]	@ (80085c8 <SGP_GetMeasurementValues+0x398>)
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	4b97      	ldr	r3, [pc, #604]	@ (80085ec <SGP_GetMeasurementValues+0x3bc>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d200      	bcs.n	8008396 <SGP_GetMeasurementValues+0x166>
 8008394:	e144      	b.n	8008620 <SGP_GetMeasurementValues+0x3f0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8008396:	4b8e      	ldr	r3, [pc, #568]	@ (80085d0 <SGP_GetMeasurementValues+0x3a0>)
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	b21a      	sxth	r2, r3
 800839e:	4b8c      	ldr	r3, [pc, #560]	@ (80085d0 <SGP_GetMeasurementValues+0x3a0>)
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	b21b      	sxth	r3, r3
 80083a4:	4313      	orrs	r3, r2
 80083a6:	b21a      	sxth	r2, r3
 80083a8:	240c      	movs	r4, #12
 80083aa:	193b      	adds	r3, r7, r4
 80083ac:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 80083ae:	193b      	adds	r3, r7, r4
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	4a8f      	ldr	r2, [pc, #572]	@ (80085f0 <SGP_GetMeasurementValues+0x3c0>)
 80083b4:	497e      	ldr	r1, [pc, #504]	@ (80085b0 <SGP_GetMeasurementValues+0x380>)
 80083b6:	2003      	movs	r0, #3
 80083b8:	f001 f920 	bl	80095fc <CreateLine>
      int32_t tempVocIndex = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80083c0:	193b      	adds	r3, r7, r4
 80083c2:	8819      	ldrh	r1, [r3, #0]
 80083c4:	2308      	movs	r3, #8
 80083c6:	18fa      	adds	r2, r7, r3
 80083c8:	4b8a      	ldr	r3, [pc, #552]	@ (80085f4 <SGP_GetMeasurementValues+0x3c4>)
 80083ca:	0018      	movs	r0, r3
 80083cc:	f7ff f848 	bl	8007460 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4a89      	ldr	r2, [pc, #548]	@ (80085f8 <SGP_GetMeasurementValues+0x3c8>)
 80083d4:	4976      	ldr	r1, [pc, #472]	@ (80085b0 <SGP_GetMeasurementValues+0x380>)
 80083d6:	2003      	movs	r0, #3
 80083d8:	f001 f910 	bl	80095fc <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dd5d      	ble.n	80084a6 <SGP_GetMeasurementValues+0x276>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b64      	cmp	r3, #100	@ 0x64
 80083f0:	dc59      	bgt.n	80084a6 <SGP_GetMeasurementValues+0x276>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	0018      	movs	r0, r3
 80083f8:	f7fa ff60 	bl	80032bc <__aeabi_i2d>
 80083fc:	2200      	movs	r2, #0
 80083fe:	4b7f      	ldr	r3, [pc, #508]	@ (80085fc <SGP_GetMeasurementValues+0x3cc>)
 8008400:	f7f9 fc56 	bl	8001cb0 <__aeabi_ddiv>
 8008404:	0002      	movs	r2, r0
 8008406:	000b      	movs	r3, r1
 8008408:	2000      	movs	r0, #0
 800840a:	497d      	ldr	r1, [pc, #500]	@ (8008600 <SGP_GetMeasurementValues+0x3d0>)
 800840c:	f7fa fb5c 	bl	8002ac8 <__aeabi_dsub>
 8008410:	0002      	movs	r2, r0
 8008412:	000b      	movs	r3, r1
 8008414:	0014      	movs	r4, r2
 8008416:	001d      	movs	r5, r3
 8008418:	4b7a      	ldr	r3, [pc, #488]	@ (8008604 <SGP_GetMeasurementValues+0x3d4>)
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	0018      	movs	r0, r3
 800841e:	f7fa ff4d 	bl	80032bc <__aeabi_i2d>
 8008422:	0002      	movs	r2, r0
 8008424:	000b      	movs	r3, r1
 8008426:	0020      	movs	r0, r4
 8008428:	0029      	movs	r1, r5
 800842a:	f7fa f885 	bl	8002538 <__aeabi_dmul>
 800842e:	0002      	movs	r2, r0
 8008430:	000b      	movs	r3, r1
 8008432:	0010      	movs	r0, r2
 8008434:	0019      	movs	r1, r3
 8008436:	f7f8 f8d7 	bl	80005e8 <__aeabi_d2uiz>
 800843a:	0003      	movs	r3, r0
 800843c:	b29a      	uxth	r2, r3
 800843e:	4b72      	ldr	r3, [pc, #456]	@ (8008608 <SGP_GetMeasurementValues+0x3d8>)
 8008440:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	0018      	movs	r0, r3
 8008448:	f7fa ff38 	bl	80032bc <__aeabi_i2d>
 800844c:	2200      	movs	r2, #0
 800844e:	4b6b      	ldr	r3, [pc, #428]	@ (80085fc <SGP_GetMeasurementValues+0x3cc>)
 8008450:	f7f9 fc2e 	bl	8001cb0 <__aeabi_ddiv>
 8008454:	0002      	movs	r2, r0
 8008456:	000b      	movs	r3, r1
 8008458:	0014      	movs	r4, r2
 800845a:	001d      	movs	r5, r3
 800845c:	4b69      	ldr	r3, [pc, #420]	@ (8008604 <SGP_GetMeasurementValues+0x3d4>)
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	0018      	movs	r0, r3
 8008462:	f7fa ff2b 	bl	80032bc <__aeabi_i2d>
 8008466:	0002      	movs	r2, r0
 8008468:	000b      	movs	r3, r1
 800846a:	0020      	movs	r0, r4
 800846c:	0029      	movs	r1, r5
 800846e:	f7fa f863 	bl	8002538 <__aeabi_dmul>
 8008472:	0002      	movs	r2, r0
 8008474:	000b      	movs	r3, r1
 8008476:	0010      	movs	r0, r2
 8008478:	0019      	movs	r1, r3
 800847a:	f7f8 f8b5 	bl	80005e8 <__aeabi_d2uiz>
 800847e:	0003      	movs	r3, r0
 8008480:	b29a      	uxth	r2, r3
 8008482:	4b62      	ldr	r3, [pc, #392]	@ (800860c <SGP_GetMeasurementValues+0x3dc>)
 8008484:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8008486:	4b5f      	ldr	r3, [pc, #380]	@ (8008604 <SGP_GetMeasurementValues+0x3d4>)
 8008488:	881a      	ldrh	r2, [r3, #0]
 800848a:	4b61      	ldr	r3, [pc, #388]	@ (8008610 <SGP_GetMeasurementValues+0x3e0>)
 800848c:	801a      	strh	r2, [r3, #0]
      TIM3->CCR1 = Red;
 800848e:	4b60      	ldr	r3, [pc, #384]	@ (8008610 <SGP_GetMeasurementValues+0x3e0>)
 8008490:	881a      	ldrh	r2, [r3, #0]
 8008492:	4b60      	ldr	r3, [pc, #384]	@ (8008614 <SGP_GetMeasurementValues+0x3e4>)
 8008494:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3->CCR2 = Green;
 8008496:	4b5c      	ldr	r3, [pc, #368]	@ (8008608 <SGP_GetMeasurementValues+0x3d8>)
 8008498:	881a      	ldrh	r2, [r3, #0]
 800849a:	4b5e      	ldr	r3, [pc, #376]	@ (8008614 <SGP_GetMeasurementValues+0x3e4>)
 800849c:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3->CCR3 = Blue;
 800849e:	4b5b      	ldr	r3, [pc, #364]	@ (800860c <SGP_GetMeasurementValues+0x3dc>)
 80084a0:	881a      	ldrh	r2, [r3, #0]
 80084a2:	4b5c      	ldr	r3, [pc, #368]	@ (8008614 <SGP_GetMeasurementValues+0x3e4>)
 80084a4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      if(*vocIndex > 100){
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b64      	cmp	r3, #100	@ 0x64
 80084ac:	dd69      	ble.n	8008582 <SGP_GetMeasurementValues+0x352>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	0018      	movs	r0, r3
 80084b4:	f7fa ff02 	bl	80032bc <__aeabi_i2d>
 80084b8:	2200      	movs	r2, #0
 80084ba:	4b50      	ldr	r3, [pc, #320]	@ (80085fc <SGP_GetMeasurementValues+0x3cc>)
 80084bc:	f7fa fb04 	bl	8002ac8 <__aeabi_dsub>
 80084c0:	0002      	movs	r2, r0
 80084c2:	000b      	movs	r3, r1
 80084c4:	0010      	movs	r0, r2
 80084c6:	0019      	movs	r1, r3
 80084c8:	2200      	movs	r2, #0
 80084ca:	4b53      	ldr	r3, [pc, #332]	@ (8008618 <SGP_GetMeasurementValues+0x3e8>)
 80084cc:	f7f9 fbf0 	bl	8001cb0 <__aeabi_ddiv>
 80084d0:	0002      	movs	r2, r0
 80084d2:	000b      	movs	r3, r1
 80084d4:	0014      	movs	r4, r2
 80084d6:	001d      	movs	r5, r3
 80084d8:	4b4a      	ldr	r3, [pc, #296]	@ (8008604 <SGP_GetMeasurementValues+0x3d4>)
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	0018      	movs	r0, r3
 80084de:	f7fa feed 	bl	80032bc <__aeabi_i2d>
 80084e2:	0002      	movs	r2, r0
 80084e4:	000b      	movs	r3, r1
 80084e6:	0020      	movs	r0, r4
 80084e8:	0029      	movs	r1, r5
 80084ea:	f7fa f825 	bl	8002538 <__aeabi_dmul>
 80084ee:	0002      	movs	r2, r0
 80084f0:	000b      	movs	r3, r1
 80084f2:	0010      	movs	r0, r2
 80084f4:	0019      	movs	r1, r3
 80084f6:	f7f8 f877 	bl	80005e8 <__aeabi_d2uiz>
 80084fa:	0003      	movs	r3, r0
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	4b42      	ldr	r3, [pc, #264]	@ (8008608 <SGP_GetMeasurementValues+0x3d8>)
 8008500:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	0018      	movs	r0, r3
 8008508:	f7fa fed8 	bl	80032bc <__aeabi_i2d>
 800850c:	2200      	movs	r2, #0
 800850e:	4b3b      	ldr	r3, [pc, #236]	@ (80085fc <SGP_GetMeasurementValues+0x3cc>)
 8008510:	f7fa fada 	bl	8002ac8 <__aeabi_dsub>
 8008514:	0002      	movs	r2, r0
 8008516:	000b      	movs	r3, r1
 8008518:	0010      	movs	r0, r2
 800851a:	0019      	movs	r1, r3
 800851c:	2200      	movs	r2, #0
 800851e:	4b3e      	ldr	r3, [pc, #248]	@ (8008618 <SGP_GetMeasurementValues+0x3e8>)
 8008520:	f7f9 fbc6 	bl	8001cb0 <__aeabi_ddiv>
 8008524:	0002      	movs	r2, r0
 8008526:	000b      	movs	r3, r1
 8008528:	2000      	movs	r0, #0
 800852a:	4935      	ldr	r1, [pc, #212]	@ (8008600 <SGP_GetMeasurementValues+0x3d0>)
 800852c:	f7fa facc 	bl	8002ac8 <__aeabi_dsub>
 8008530:	0002      	movs	r2, r0
 8008532:	000b      	movs	r3, r1
 8008534:	0014      	movs	r4, r2
 8008536:	001d      	movs	r5, r3
 8008538:	4b32      	ldr	r3, [pc, #200]	@ (8008604 <SGP_GetMeasurementValues+0x3d4>)
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	0018      	movs	r0, r3
 800853e:	f7fa febd 	bl	80032bc <__aeabi_i2d>
 8008542:	0002      	movs	r2, r0
 8008544:	000b      	movs	r3, r1
 8008546:	0020      	movs	r0, r4
 8008548:	0029      	movs	r1, r5
 800854a:	f7f9 fff5 	bl	8002538 <__aeabi_dmul>
 800854e:	0002      	movs	r2, r0
 8008550:	000b      	movs	r3, r1
 8008552:	0010      	movs	r0, r2
 8008554:	0019      	movs	r1, r3
 8008556:	f7f8 f847 	bl	80005e8 <__aeabi_d2uiz>
 800855a:	0003      	movs	r3, r0
 800855c:	b29a      	uxth	r2, r3
 800855e:	4b2c      	ldr	r3, [pc, #176]	@ (8008610 <SGP_GetMeasurementValues+0x3e0>)
 8008560:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8008562:	4b28      	ldr	r3, [pc, #160]	@ (8008604 <SGP_GetMeasurementValues+0x3d4>)
 8008564:	881a      	ldrh	r2, [r3, #0]
 8008566:	4b29      	ldr	r3, [pc, #164]	@ (800860c <SGP_GetMeasurementValues+0x3dc>)
 8008568:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = Red;
 800856a:	4b29      	ldr	r3, [pc, #164]	@ (8008610 <SGP_GetMeasurementValues+0x3e0>)
 800856c:	881a      	ldrh	r2, [r3, #0]
 800856e:	4b29      	ldr	r3, [pc, #164]	@ (8008614 <SGP_GetMeasurementValues+0x3e4>)
 8008570:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = Green;
 8008572:	4b25      	ldr	r3, [pc, #148]	@ (8008608 <SGP_GetMeasurementValues+0x3d8>)
 8008574:	881a      	ldrh	r2, [r3, #0]
 8008576:	4b27      	ldr	r3, [pc, #156]	@ (8008614 <SGP_GetMeasurementValues+0x3e4>)
 8008578:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = Blue;
 800857a:	4b24      	ldr	r3, [pc, #144]	@ (800860c <SGP_GetMeasurementValues+0x3dc>)
 800857c:	881a      	ldrh	r2, [r3, #0]
 800857e:	4b25      	ldr	r3, [pc, #148]	@ (8008614 <SGP_GetMeasurementValues+0x3e4>)
 8008580:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      SGP_AmountOfSamplesDone = 0;
 8008582:	4b11      	ldr	r3, [pc, #68]	@ (80085c8 <SGP_GetMeasurementValues+0x398>)
 8008584:	2200      	movs	r2, #0
 8008586:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8008588:	4a24      	ldr	r2, [pc, #144]	@ (800861c <SGP_GetMeasurementValues+0x3ec>)
 800858a:	4b09      	ldr	r3, [pc, #36]	@ (80085b0 <SGP_GetMeasurementValues+0x380>)
 800858c:	0019      	movs	r1, r3
 800858e:	2003      	movs	r0, #3
 8008590:	f001 f834 	bl	80095fc <CreateLine>
      HT_MeasurementReceived = false;
 8008594:	4b07      	ldr	r3, [pc, #28]	@ (80085b4 <SGP_GetMeasurementValues+0x384>)
 8008596:	2200      	movs	r2, #0
 8008598:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800859a:	4b03      	ldr	r3, [pc, #12]	@ (80085a8 <SGP_GetMeasurementValues+0x378>)
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e055      	b.n	8008650 <SGP_GetMeasurementValues+0x420>
 80085a4:	200026fa 	.word	0x200026fa
 80085a8:	200027a5 	.word	0x200027a5
 80085ac:	0801b2e4 	.word	0x0801b2e4
 80085b0:	0801b310 	.word	0x0801b310
 80085b4:	200027a4 	.word	0x200027a4
 80085b8:	20000078 	.word	0x20000078
 80085bc:	2000008c 	.word	0x2000008c
 80085c0:	20000070 	.word	0x20000070
 80085c4:	200026fb 	.word	0x200026fb
 80085c8:	200026f9 	.word	0x200026f9
 80085cc:	0801b314 	.word	0x0801b314
 80085d0:	200026f0 	.word	0x200026f0
 80085d4:	0801b344 	.word	0x0801b344
 80085d8:	0801b368 	.word	0x0801b368
 80085dc:	0801b36c 	.word	0x0801b36c
 80085e0:	0801b38c 	.word	0x0801b38c
 80085e4:	0801b390 	.word	0x0801b390
 80085e8:	20000088 	.word	0x20000088
 80085ec:	20000080 	.word	0x20000080
 80085f0:	0801b3b0 	.word	0x0801b3b0
 80085f4:	200026fc 	.word	0x200026fc
 80085f8:	0801b3c4 	.word	0x0801b3c4
 80085fc:	40590000 	.word	0x40590000
 8008600:	3ff00000 	.word	0x3ff00000
 8008604:	20000090 	.word	0x20000090
 8008608:	200027aa 	.word	0x200027aa
 800860c:	200027a8 	.word	0x200027a8
 8008610:	200027a6 	.word	0x200027a6
 8008614:	40000400 	.word	0x40000400
 8008618:	40790000 	.word	0x40790000
 800861c:	0801b3d8 	.word	0x0801b3d8
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8008620:	f7ff fdea 	bl	80081f8 <SGP_MeasurementDone>
 8008624:	1e03      	subs	r3, r0, #0
 8008626:	d012      	beq.n	800864e <SGP_GetMeasurementValues+0x41e>
 8008628:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <SGP_GetMeasurementValues+0x428>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00e      	beq.n	800864e <SGP_GetMeasurementValues+0x41e>
 8008630:	4b0a      	ldr	r3, [pc, #40]	@ (800865c <SGP_GetMeasurementValues+0x42c>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <SGP_GetMeasurementValues+0x41e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8008638:	4a09      	ldr	r2, [pc, #36]	@ (8008660 <SGP_GetMeasurementValues+0x430>)
 800863a:	4b0a      	ldr	r3, [pc, #40]	@ (8008664 <SGP_GetMeasurementValues+0x434>)
 800863c:	0019      	movs	r1, r3
 800863e:	2003      	movs	r0, #3
 8008640:	f000 ffdc 	bl	80095fc <CreateLine>
    SGP_StartMeasurement();
 8008644:	f7ff fd84 	bl	8008150 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8008648:	4b07      	ldr	r3, [pc, #28]	@ (8008668 <SGP_GetMeasurementValues+0x438>)
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800864e:	2300      	movs	r3, #0
}
 8008650:	0018      	movs	r0, r3
 8008652:	46bd      	mov	sp, r7
 8008654:	b004      	add	sp, #16
 8008656:	bdb0      	pop	{r4, r5, r7, pc}
 8008658:	200026fa 	.word	0x200026fa
 800865c:	200026fb 	.word	0x200026fb
 8008660:	0801b3fc 	.word	0x0801b3fc
 8008664:	0801b310 	.word	0x0801b310
 8008668:	200027a5 	.word	0x200027a5

0800866c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008672:	4b1a      	ldr	r3, [pc, #104]	@ (80086dc <SGP_DeviceConnected+0x70>)
 8008674:	2202      	movs	r2, #2
 8008676:	0019      	movs	r1, r3
 8008678:	2059      	movs	r0, #89	@ 0x59
 800867a:	f7ff fd31 	bl	80080e0 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800867e:	2001      	movs	r0, #1
 8008680:	f001 fb62 	bl	8009d48 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8008684:	4b16      	ldr	r3, [pc, #88]	@ (80086e0 <SGP_DeviceConnected+0x74>)
 8008686:	2209      	movs	r2, #9
 8008688:	0019      	movs	r1, r3
 800868a:	2059      	movs	r0, #89	@ 0x59
 800868c:	f7ff fd0a 	bl	80080a4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8008690:	1dfb      	adds	r3, r7, #7
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	e011      	b.n	80086bc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8008698:	1dfb      	adds	r3, r7, #7
 800869a:	7818      	ldrb	r0, [r3, #0]
 800869c:	1dfb      	adds	r3, r7, #7
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	4a0f      	ldr	r2, [pc, #60]	@ (80086e0 <SGP_DeviceConnected+0x74>)
 80086a2:	5cd3      	ldrb	r3, [r2, r3]
 80086a4:	4a0f      	ldr	r2, [pc, #60]	@ (80086e4 <SGP_DeviceConnected+0x78>)
 80086a6:	4910      	ldr	r1, [pc, #64]	@ (80086e8 <SGP_DeviceConnected+0x7c>)
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	0003      	movs	r3, r0
 80086ac:	2002      	movs	r0, #2
 80086ae:	f000 ffa5 	bl	80095fc <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80086b2:	1dfb      	adds	r3, r7, #7
 80086b4:	781a      	ldrb	r2, [r3, #0]
 80086b6:	1dfb      	adds	r3, r7, #7
 80086b8:	3201      	adds	r2, #1
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	1dfb      	adds	r3, r7, #7
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d9e9      	bls.n	8008698 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80086c4:	4b06      	ldr	r3, [pc, #24]	@ (80086e0 <SGP_DeviceConnected+0x74>)
 80086c6:	2203      	movs	r2, #3
 80086c8:	2109      	movs	r1, #9
 80086ca:	0018      	movs	r0, r3
 80086cc:	f000 f80e 	bl	80086ec <CheckCRC>
 80086d0:	0003      	movs	r3, r0
}
 80086d2:	0018      	movs	r0, r3
 80086d4:	46bd      	mov	sp, r7
 80086d6:	b002      	add	sp, #8
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	46c0      	nop			@ (mov r8, r8)
 80086dc:	2000006c 	.word	0x2000006c
 80086e0:	200026f0 	.word	0x200026f0
 80086e4:	0801b41c 	.word	0x0801b41c
 80086e8:	0801b38c 	.word	0x0801b38c

080086ec <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80086ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ee:	b08f      	sub	sp, #60	@ 0x3c
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6278      	str	r0, [r7, #36]	@ 0x24
 80086f4:	0008      	movs	r0, r1
 80086f6:	0011      	movs	r1, r2
 80086f8:	2323      	movs	r3, #35	@ 0x23
 80086fa:	18fb      	adds	r3, r7, r3
 80086fc:	1c02      	adds	r2, r0, #0
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	2322      	movs	r3, #34	@ 0x22
 8008702:	18fb      	adds	r3, r7, r3
 8008704:	1c0a      	adds	r2, r1, #0
 8008706:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008708:	2317      	movs	r3, #23
 800870a:	2220      	movs	r2, #32
 800870c:	189b      	adds	r3, r3, r2
 800870e:	19db      	adds	r3, r3, r7
 8008710:	2200      	movs	r2, #0
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	e09f      	b.n	8008856 <CheckCRC+0x16a>
 8008716:	466b      	mov	r3, sp
 8008718:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800871a:	2322      	movs	r3, #34	@ 0x22
 800871c:	18fb      	adds	r3, r7, r3
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	001a      	movs	r2, r3
 8008722:	3a01      	subs	r2, #1
 8008724:	633a      	str	r2, [r7, #48]	@ 0x30
 8008726:	60bb      	str	r3, [r7, #8]
 8008728:	2200      	movs	r2, #0
 800872a:	60fa      	str	r2, [r7, #12]
 800872c:	68b8      	ldr	r0, [r7, #8]
 800872e:	68f9      	ldr	r1, [r7, #12]
 8008730:	0002      	movs	r2, r0
 8008732:	0f52      	lsrs	r2, r2, #29
 8008734:	000c      	movs	r4, r1
 8008736:	00e4      	lsls	r4, r4, #3
 8008738:	61fc      	str	r4, [r7, #28]
 800873a:	69fc      	ldr	r4, [r7, #28]
 800873c:	4314      	orrs	r4, r2
 800873e:	61fc      	str	r4, [r7, #28]
 8008740:	0002      	movs	r2, r0
 8008742:	00d2      	lsls	r2, r2, #3
 8008744:	61ba      	str	r2, [r7, #24]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	2200      	movs	r2, #0
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	6838      	ldr	r0, [r7, #0]
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	0002      	movs	r2, r0
 8008752:	0f52      	lsrs	r2, r2, #29
 8008754:	000c      	movs	r4, r1
 8008756:	00e4      	lsls	r4, r4, #3
 8008758:	617c      	str	r4, [r7, #20]
 800875a:	697c      	ldr	r4, [r7, #20]
 800875c:	4314      	orrs	r4, r2
 800875e:	617c      	str	r4, [r7, #20]
 8008760:	0002      	movs	r2, r0
 8008762:	00d2      	lsls	r2, r2, #3
 8008764:	613a      	str	r2, [r7, #16]
 8008766:	3307      	adds	r3, #7
 8008768:	08db      	lsrs	r3, r3, #3
 800876a:	00db      	lsls	r3, r3, #3
 800876c:	466a      	mov	r2, sp
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	469d      	mov	sp, r3
 8008772:	466b      	mov	r3, sp
 8008774:	3300      	adds	r3, #0
 8008776:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8008778:	2316      	movs	r3, #22
 800877a:	2220      	movs	r2, #32
 800877c:	189b      	adds	r3, r3, r2
 800877e:	19db      	adds	r3, r3, r7
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e01e      	b.n	80087c4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8008786:	2317      	movs	r3, #23
 8008788:	2220      	movs	r2, #32
 800878a:	189b      	adds	r3, r3, r2
 800878c:	19db      	adds	r3, r3, r7
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	2116      	movs	r1, #22
 8008792:	2320      	movs	r3, #32
 8008794:	18cb      	adds	r3, r1, r3
 8008796:	19db      	adds	r3, r3, r7
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	18d3      	adds	r3, r2, r3
 800879c:	001a      	movs	r2, r3
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	189a      	adds	r2, r3, r2
 80087a2:	0008      	movs	r0, r1
 80087a4:	2320      	movs	r3, #32
 80087a6:	18cb      	adds	r3, r1, r3
 80087a8:	19db      	adds	r3, r3, r7
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	7811      	ldrb	r1, [r2, #0]
 80087ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087b0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80087b2:	2320      	movs	r3, #32
 80087b4:	18c3      	adds	r3, r0, r3
 80087b6:	19db      	adds	r3, r3, r7
 80087b8:	781a      	ldrb	r2, [r3, #0]
 80087ba:	2320      	movs	r3, #32
 80087bc:	18c3      	adds	r3, r0, r3
 80087be:	19db      	adds	r3, r3, r7
 80087c0:	3201      	adds	r2, #1
 80087c2:	701a      	strb	r2, [r3, #0]
 80087c4:	2316      	movs	r3, #22
 80087c6:	2220      	movs	r2, #32
 80087c8:	189b      	adds	r3, r3, r2
 80087ca:	19da      	adds	r2, r3, r7
 80087cc:	2322      	movs	r3, #34	@ 0x22
 80087ce:	18fb      	adds	r3, r7, r3
 80087d0:	7812      	ldrb	r2, [r2, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d3d6      	bcc.n	8008786 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80087d8:	2417      	movs	r4, #23
 80087da:	2320      	movs	r3, #32
 80087dc:	18e3      	adds	r3, r4, r3
 80087de:	19db      	adds	r3, r3, r7
 80087e0:	781a      	ldrb	r2, [r3, #0]
 80087e2:	2322      	movs	r3, #34	@ 0x22
 80087e4:	18fb      	adds	r3, r7, r3
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	18d3      	adds	r3, r2, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ee:	18d2      	adds	r2, r2, r3
 80087f0:	250b      	movs	r5, #11
 80087f2:	2320      	movs	r3, #32
 80087f4:	18eb      	adds	r3, r5, r3
 80087f6:	19db      	adds	r3, r3, r7
 80087f8:	7812      	ldrb	r2, [r2, #0]
 80087fa:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80087fc:	2322      	movs	r3, #34	@ 0x22
 80087fe:	18fb      	adds	r3, r7, r3
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	3b01      	subs	r3, #1
 8008804:	b2da      	uxtb	r2, r3
 8008806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008808:	0011      	movs	r1, r2
 800880a:	0018      	movs	r0, r3
 800880c:	f000 f838 	bl	8008880 <CalculateCRC>
 8008810:	0003      	movs	r3, r0
 8008812:	001a      	movs	r2, r3
 8008814:	2320      	movs	r3, #32
 8008816:	18eb      	adds	r3, r5, r3
 8008818:	19db      	adds	r3, r3, r7
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	4293      	cmp	r3, r2
 800881e:	d00c      	beq.n	800883a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008820:	2320      	movs	r3, #32
 8008822:	18e3      	adds	r3, r4, r3
 8008824:	19db      	adds	r3, r3, r7
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	3301      	adds	r3, #1
 800882a:	4a13      	ldr	r2, [pc, #76]	@ (8008878 <CheckCRC+0x18c>)
 800882c:	4913      	ldr	r1, [pc, #76]	@ (800887c <CheckCRC+0x190>)
 800882e:	2001      	movs	r0, #1
 8008830:	f000 fee4 	bl	80095fc <CreateLine>
      return false;
 8008834:	2300      	movs	r3, #0
 8008836:	46b5      	mov	sp, r6
 8008838:	e019      	b.n	800886e <CheckCRC+0x182>
 800883a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800883c:	2217      	movs	r2, #23
 800883e:	2320      	movs	r3, #32
 8008840:	18d3      	adds	r3, r2, r3
 8008842:	19db      	adds	r3, r3, r7
 8008844:	2120      	movs	r1, #32
 8008846:	1852      	adds	r2, r2, r1
 8008848:	19d1      	adds	r1, r2, r7
 800884a:	2222      	movs	r2, #34	@ 0x22
 800884c:	18ba      	adds	r2, r7, r2
 800884e:	7809      	ldrb	r1, [r1, #0]
 8008850:	7812      	ldrb	r2, [r2, #0]
 8008852:	188a      	adds	r2, r1, r2
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	2317      	movs	r3, #23
 8008858:	2220      	movs	r2, #32
 800885a:	189b      	adds	r3, r3, r2
 800885c:	19da      	adds	r2, r3, r7
 800885e:	2323      	movs	r3, #35	@ 0x23
 8008860:	18fb      	adds	r3, r7, r3
 8008862:	7812      	ldrb	r2, [r2, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d200      	bcs.n	800886c <CheckCRC+0x180>
 800886a:	e754      	b.n	8008716 <CheckCRC+0x2a>
    }
  }
  return true;
 800886c:	2301      	movs	r3, #1
}
 800886e:	0018      	movs	r0, r3
 8008870:	46bd      	mov	sp, r7
 8008872:	b00f      	add	sp, #60	@ 0x3c
 8008874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008876:	46c0      	nop			@ (mov r8, r8)
 8008878:	0801b43c 	.word	0x0801b43c
 800887c:	0801b368 	.word	0x0801b368

08008880 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	000a      	movs	r2, r1
 800888a:	1cfb      	adds	r3, r7, #3
 800888c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800888e:	230f      	movs	r3, #15
 8008890:	18fb      	adds	r3, r7, r3
 8008892:	22ff      	movs	r2, #255	@ 0xff
 8008894:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008896:	230e      	movs	r3, #14
 8008898:	18fb      	adds	r3, r7, r3
 800889a:	2200      	movs	r2, #0
 800889c:	701a      	strb	r2, [r3, #0]
 800889e:	e037      	b.n	8008910 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80088a0:	230e      	movs	r3, #14
 80088a2:	18fb      	adds	r3, r7, r3
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	18d3      	adds	r3, r2, r3
 80088aa:	7819      	ldrb	r1, [r3, #0]
 80088ac:	220f      	movs	r2, #15
 80088ae:	18bb      	adds	r3, r7, r2
 80088b0:	18ba      	adds	r2, r7, r2
 80088b2:	7812      	ldrb	r2, [r2, #0]
 80088b4:	404a      	eors	r2, r1
 80088b6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80088b8:	230d      	movs	r3, #13
 80088ba:	18fb      	adds	r3, r7, r3
 80088bc:	2200      	movs	r2, #0
 80088be:	701a      	strb	r2, [r3, #0]
 80088c0:	e01b      	b.n	80088fa <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80088c2:	210f      	movs	r1, #15
 80088c4:	187b      	adds	r3, r7, r1
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	b25b      	sxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da09      	bge.n	80088e2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80088ce:	187b      	adds	r3, r7, r1
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	b25b      	sxtb	r3, r3
 80088d6:	2231      	movs	r2, #49	@ 0x31
 80088d8:	4053      	eors	r3, r2
 80088da:	b25a      	sxtb	r2, r3
 80088dc:	187b      	adds	r3, r7, r1
 80088de:	701a      	strb	r2, [r3, #0]
 80088e0:	e005      	b.n	80088ee <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80088e2:	230f      	movs	r3, #15
 80088e4:	18fa      	adds	r2, r7, r3
 80088e6:	18fb      	adds	r3, r7, r3
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	18db      	adds	r3, r3, r3
 80088ec:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80088ee:	210d      	movs	r1, #13
 80088f0:	187b      	adds	r3, r7, r1
 80088f2:	781a      	ldrb	r2, [r3, #0]
 80088f4:	187b      	adds	r3, r7, r1
 80088f6:	3201      	adds	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]
 80088fa:	230d      	movs	r3, #13
 80088fc:	18fb      	adds	r3, r7, r3
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b07      	cmp	r3, #7
 8008902:	d9de      	bls.n	80088c2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008904:	210e      	movs	r1, #14
 8008906:	187b      	adds	r3, r7, r1
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	187b      	adds	r3, r7, r1
 800890c:	3201      	adds	r2, #1
 800890e:	701a      	strb	r2, [r3, #0]
 8008910:	230e      	movs	r3, #14
 8008912:	18fa      	adds	r2, r7, r3
 8008914:	1cfb      	adds	r3, r7, #3
 8008916:	7812      	ldrb	r2, [r2, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	429a      	cmp	r2, r3
 800891c:	d3c0      	bcc.n	80088a0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800891e:	230f      	movs	r3, #15
 8008920:	18fb      	adds	r3, r7, r3
 8008922:	781b      	ldrb	r3, [r3, #0]
}
 8008924:	0018      	movs	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	b004      	add	sp, #16
 800892a:	bd80      	pop	{r7, pc}

0800892c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4936      	ldr	r1, [pc, #216]	@ (8008a14 <SGP_GetHT+0xe8>)
 800893c:	1c18      	adds	r0, r3, #0
 800893e:	f7f7 ff3d 	bl	80007bc <__aeabi_fadd>
 8008942:	1c03      	adds	r3, r0, #0
 8008944:	4934      	ldr	r1, [pc, #208]	@ (8008a18 <SGP_GetHT+0xec>)
 8008946:	1c18      	adds	r0, r3, #0
 8008948:	f7f8 f8c2 	bl	8000ad0 <__aeabi_fdiv>
 800894c:	1c03      	adds	r3, r0, #0
 800894e:	4933      	ldr	r1, [pc, #204]	@ (8008a1c <SGP_GetHT+0xf0>)
 8008950:	1c18      	adds	r0, r3, #0
 8008952:	f7f8 faa3 	bl	8000e9c <__aeabi_fmul>
 8008956:	1c03      	adds	r3, r0, #0
 8008958:	1c18      	adds	r0, r3, #0
 800895a:	f7f7 fe2d 	bl	80005b8 <__aeabi_f2uiz>
 800895e:	0003      	movs	r3, r0
 8008960:	b29a      	uxth	r2, r3
 8008962:	4b2f      	ldr	r3, [pc, #188]	@ (8008a20 <SGP_GetHT+0xf4>)
 8008964:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	492e      	ldr	r1, [pc, #184]	@ (8008a24 <SGP_GetHT+0xf8>)
 800896c:	1c18      	adds	r0, r3, #0
 800896e:	f7f8 f8af 	bl	8000ad0 <__aeabi_fdiv>
 8008972:	1c03      	adds	r3, r0, #0
 8008974:	4929      	ldr	r1, [pc, #164]	@ (8008a1c <SGP_GetHT+0xf0>)
 8008976:	1c18      	adds	r0, r3, #0
 8008978:	f7f8 fa90 	bl	8000e9c <__aeabi_fmul>
 800897c:	1c03      	adds	r3, r0, #0
 800897e:	1c18      	adds	r0, r3, #0
 8008980:	f7f7 fe1a 	bl	80005b8 <__aeabi_f2uiz>
 8008984:	0003      	movs	r3, r0
 8008986:	b29a      	uxth	r2, r3
 8008988:	4b27      	ldr	r3, [pc, #156]	@ (8008a28 <SGP_GetHT+0xfc>)
 800898a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800898c:	4b26      	ldr	r3, [pc, #152]	@ (8008a28 <SGP_GetHT+0xfc>)
 800898e:	881b      	ldrh	r3, [r3, #0]
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	b29b      	uxth	r3, r3
 8008994:	b2da      	uxtb	r2, r3
 8008996:	4b25      	ldr	r3, [pc, #148]	@ (8008a2c <SGP_GetHT+0x100>)
 8008998:	709a      	strb	r2, [r3, #2]
 800899a:	4b24      	ldr	r3, [pc, #144]	@ (8008a2c <SGP_GetHT+0x100>)
 800899c:	789a      	ldrb	r2, [r3, #2]
 800899e:	210c      	movs	r1, #12
 80089a0:	187b      	adds	r3, r7, r1
 80089a2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 80089a4:	4b20      	ldr	r3, [pc, #128]	@ (8008a28 <SGP_GetHT+0xfc>)
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	4b20      	ldr	r3, [pc, #128]	@ (8008a2c <SGP_GetHT+0x100>)
 80089ac:	70da      	strb	r2, [r3, #3]
 80089ae:	4b1f      	ldr	r3, [pc, #124]	@ (8008a2c <SGP_GetHT+0x100>)
 80089b0:	78da      	ldrb	r2, [r3, #3]
 80089b2:	187b      	adds	r3, r7, r1
 80089b4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80089b6:	187b      	adds	r3, r7, r1
 80089b8:	2102      	movs	r1, #2
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7ff ff60 	bl	8008880 <CalculateCRC>
 80089c0:	0003      	movs	r3, r0
 80089c2:	001a      	movs	r2, r3
 80089c4:	4b19      	ldr	r3, [pc, #100]	@ (8008a2c <SGP_GetHT+0x100>)
 80089c6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80089c8:	4b15      	ldr	r3, [pc, #84]	@ (8008a20 <SGP_GetHT+0xf4>)
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	4b16      	ldr	r3, [pc, #88]	@ (8008a2c <SGP_GetHT+0x100>)
 80089d4:	715a      	strb	r2, [r3, #5]
 80089d6:	4b15      	ldr	r3, [pc, #84]	@ (8008a2c <SGP_GetHT+0x100>)
 80089d8:	795a      	ldrb	r2, [r3, #5]
 80089da:	2108      	movs	r1, #8
 80089dc:	187b      	adds	r3, r7, r1
 80089de:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80089e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a20 <SGP_GetHT+0xf4>)
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	4b11      	ldr	r3, [pc, #68]	@ (8008a2c <SGP_GetHT+0x100>)
 80089e8:	719a      	strb	r2, [r3, #6]
 80089ea:	4b10      	ldr	r3, [pc, #64]	@ (8008a2c <SGP_GetHT+0x100>)
 80089ec:	799a      	ldrb	r2, [r3, #6]
 80089ee:	187b      	adds	r3, r7, r1
 80089f0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80089f2:	187b      	adds	r3, r7, r1
 80089f4:	2102      	movs	r1, #2
 80089f6:	0018      	movs	r0, r3
 80089f8:	f7ff ff42 	bl	8008880 <CalculateCRC>
 80089fc:	0003      	movs	r3, r0
 80089fe:	001a      	movs	r2, r3
 8008a00:	4b0a      	ldr	r3, [pc, #40]	@ (8008a2c <SGP_GetHT+0x100>)
 8008a02:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008a04:	4b0a      	ldr	r3, [pc, #40]	@ (8008a30 <SGP_GetHT+0x104>)
 8008a06:	2201      	movs	r2, #1
 8008a08:	701a      	strb	r2, [r3, #0]
}
 8008a0a:	46c0      	nop			@ (mov r8, r8)
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	b004      	add	sp, #16
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	46c0      	nop			@ (mov r8, r8)
 8008a14:	42340000 	.word	0x42340000
 8008a18:	432f0000 	.word	0x432f0000
 8008a1c:	477fff00 	.word	0x477fff00
 8008a20:	200027a2 	.word	0x200027a2
 8008a24:	42c80000 	.word	0x42c80000
 8008a28:	200027a0 	.word	0x200027a0
 8008a2c:	20000078 	.word	0x20000078
 8008a30:	200027a4 	.word	0x200027a4

08008a34 <batteryChargeCheck>:
bool configSet = false;
bool energyGood = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

Battery_Status batteryChargeCheck(){
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 8008a3a:	f7fc fd0b 	bl	8005454 <ReadBatteryVoltage>
 8008a3e:	1c03      	adds	r3, r0, #0
 8008a40:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 8008a42:	491f      	ldr	r1, [pc, #124]	@ (8008ac0 <batteryChargeCheck+0x8c>)
 8008a44:	6838      	ldr	r0, [r7, #0]
 8008a46:	f7f7 fd41 	bl	80004cc <__aeabi_fcmplt>
 8008a4a:	1e03      	subs	r3, r0, #0
 8008a4c:	d002      	beq.n	8008a54 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 8008a4e:	1dfb      	adds	r3, r7, #7
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 8008a54:	6838      	ldr	r0, [r7, #0]
 8008a56:	f7fa fc83 	bl	8003360 <__aeabi_f2d>
 8008a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ac4 <batteryChargeCheck+0x90>)
 8008a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac8 <batteryChargeCheck+0x94>)
 8008a5e:	f7f7 fcfb 	bl	8000458 <__aeabi_dcmplt>
 8008a62:	1e03      	subs	r3, r0, #0
 8008a64:	d008      	beq.n	8008a78 <batteryChargeCheck+0x44>
 8008a66:	4916      	ldr	r1, [pc, #88]	@ (8008ac0 <batteryChargeCheck+0x8c>)
 8008a68:	6838      	ldr	r0, [r7, #0]
 8008a6a:	f7f7 fd4d 	bl	8000508 <__aeabi_fcmpge>
 8008a6e:	1e03      	subs	r3, r0, #0
 8008a70:	d002      	beq.n	8008a78 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 8008a72:	1dfb      	adds	r3, r7, #7
 8008a74:	2202      	movs	r2, #2
 8008a76:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8008a78:	2181      	movs	r1, #129	@ 0x81
 8008a7a:	05c9      	lsls	r1, r1, #23
 8008a7c:	6838      	ldr	r0, [r7, #0]
 8008a7e:	f7f7 fd25 	bl	80004cc <__aeabi_fcmplt>
 8008a82:	1e03      	subs	r3, r0, #0
 8008a84:	d00b      	beq.n	8008a9e <batteryChargeCheck+0x6a>
 8008a86:	6838      	ldr	r0, [r7, #0]
 8008a88:	f7fa fc6a 	bl	8003360 <__aeabi_f2d>
 8008a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8008ac4 <batteryChargeCheck+0x90>)
 8008a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac8 <batteryChargeCheck+0x94>)
 8008a90:	f7f7 fd00 	bl	8000494 <__aeabi_dcmpge>
 8008a94:	1e03      	subs	r3, r0, #0
 8008a96:	d002      	beq.n	8008a9e <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8008a98:	1dfb      	adds	r3, r7, #7
 8008a9a:	2203      	movs	r2, #3
 8008a9c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8008a9e:	2181      	movs	r1, #129	@ 0x81
 8008aa0:	05c9      	lsls	r1, r1, #23
 8008aa2:	6838      	ldr	r0, [r7, #0]
 8008aa4:	f7f7 fd30 	bl	8000508 <__aeabi_fcmpge>
 8008aa8:	1e03      	subs	r3, r0, #0
 8008aaa:	d002      	beq.n	8008ab2 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8008aac:	1dfb      	adds	r3, r7, #7
 8008aae:	2204      	movs	r2, #4
 8008ab0:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8008ab2:	1dfb      	adds	r3, r7, #7
 8008ab4:	781b      	ldrb	r3, [r3, #0]
}
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	b002      	add	sp, #8
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	46c0      	nop			@ (mov r8, r8)
 8008ac0:	40600000 	.word	0x40600000
 8008ac4:	9999999a 	.word	0x9999999a
 8008ac8:	400d9999 	.word	0x400d9999

08008acc <powerCheck>:

Battery_Status powerCheck(){
 8008acc:	b590      	push	{r4, r7, lr}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
  PowerStamp = HAL_GetTick() + 10000;
 8008ad2:	f001 f92f 	bl	8009d34 <HAL_GetTick>
 8008ad6:	0003      	movs	r3, r0
 8008ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8008b08 <powerCheck+0x3c>)
 8008ada:	189a      	adds	r2, r3, r2
 8008adc:	4b0b      	ldr	r3, [pc, #44]	@ (8008b0c <powerCheck+0x40>)
 8008ade:	601a      	str	r2, [r3, #0]
  Battery_Status status;
  if(Check_USB_PowerOn()){
 8008ae0:	f7fc fd7e 	bl	80055e0 <Check_USB_PowerOn>
 8008ae4:	1e03      	subs	r3, r0, #0
 8008ae6:	d003      	beq.n	8008af0 <powerCheck+0x24>
    status = USB_PLUGGED_IN;
 8008ae8:	1dfb      	adds	r3, r7, #7
 8008aea:	2201      	movs	r2, #1
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	e004      	b.n	8008afa <powerCheck+0x2e>
  }
  else{
    status = batteryChargeCheck();
 8008af0:	1dfc      	adds	r4, r7, #7
 8008af2:	f7ff ff9f 	bl	8008a34 <batteryChargeCheck>
 8008af6:	0003      	movs	r3, r0
 8008af8:	7023      	strb	r3, [r4, #0]
  }
  return status;
 8008afa:	1dfb      	adds	r3, r7, #7
 8008afc:	781b      	ldrb	r3, [r3, #0]
}
 8008afe:	0018      	movs	r0, r3
 8008b00:	46bd      	mov	sp, r7
 8008b02:	b003      	add	sp, #12
 8008b04:	bd90      	pop	{r4, r7, pc}
 8008b06:	46c0      	nop			@ (mov r8, r8)
 8008b08:	00002710 	.word	0x00002710
 8008b0c:	200027b4 	.word	0x200027b4

08008b10 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	0002      	movs	r2, r0
 8008b18:	1dfb      	adds	r3, r7, #7
 8008b1a:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8008b1c:	1dfb      	adds	r3, r7, #7
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d105      	bne.n	8008b30 <powerDisplay+0x20>
    Debug("LEDS are okay");
 8008b24:	4a18      	ldr	r2, [pc, #96]	@ (8008b88 <powerDisplay+0x78>)
 8008b26:	4b19      	ldr	r3, [pc, #100]	@ (8008b8c <powerDisplay+0x7c>)
 8008b28:	0019      	movs	r1, r3
 8008b2a:	2003      	movs	r0, #3
 8008b2c:	f000 fd66 	bl	80095fc <CreateLine>
  }
  if(status == BATTERY_FULL){
 8008b30:	1dfb      	adds	r3, r7, #7
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d105      	bne.n	8008b44 <powerDisplay+0x34>
    Debug("Battery fully charged");
 8008b38:	4a15      	ldr	r2, [pc, #84]	@ (8008b90 <powerDisplay+0x80>)
 8008b3a:	4b14      	ldr	r3, [pc, #80]	@ (8008b8c <powerDisplay+0x7c>)
 8008b3c:	0019      	movs	r1, r3
 8008b3e:	2003      	movs	r0, #3
 8008b40:	f000 fd5c 	bl	80095fc <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8008b44:	1dfb      	adds	r3, r7, #7
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d105      	bne.n	8008b58 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8008b4c:	4a11      	ldr	r2, [pc, #68]	@ (8008b94 <powerDisplay+0x84>)
 8008b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b8c <powerDisplay+0x7c>)
 8008b50:	0019      	movs	r1, r3
 8008b52:	2003      	movs	r0, #3
 8008b54:	f000 fd52 	bl	80095fc <CreateLine>
  }
  if(status == BATTERY_LOW){
 8008b58:	1dfb      	adds	r3, r7, #7
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d105      	bne.n	8008b6c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8008b60:	4a0d      	ldr	r2, [pc, #52]	@ (8008b98 <powerDisplay+0x88>)
 8008b62:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <powerDisplay+0x7c>)
 8008b64:	0019      	movs	r1, r3
 8008b66:	2003      	movs	r0, #3
 8008b68:	f000 fd48 	bl	80095fc <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8008b6c:	1dfb      	adds	r3, r7, #7
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8008b74:	4a09      	ldr	r2, [pc, #36]	@ (8008b9c <powerDisplay+0x8c>)
 8008b76:	4b05      	ldr	r3, [pc, #20]	@ (8008b8c <powerDisplay+0x7c>)
 8008b78:	0019      	movs	r1, r3
 8008b7a:	2003      	movs	r0, #3
 8008b7c:	f000 fd3e 	bl	80095fc <CreateLine>
  }
}
 8008b80:	46c0      	nop			@ (mov r8, r8)
 8008b82:	46bd      	mov	sp, r7
 8008b84:	b002      	add	sp, #8
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	0801b4e4 	.word	0x0801b4e4
 8008b8c:	0801b4f4 	.word	0x0801b4f4
 8008b90:	0801b4f8 	.word	0x0801b4f8
 8008b94:	0801b510 	.word	0x0801b510
 8008b98:	0801b530 	.word	0x0801b530
 8008b9c:	0801b548 	.word	0x0801b548

08008ba0 <configCheck>:

void configCheck(){
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8008ba4:	f7fc fd2b 	bl	80055fe <BootButton_Pressed>
 8008ba8:	1e03      	subs	r3, r0, #0
 8008baa:	d007      	beq.n	8008bbc <configCheck+0x1c>
 8008bac:	f7fc fd38 	bl	8005620 <UserButton_Pressed>
 8008bb0:	1e03      	subs	r3, r0, #0
 8008bb2:	d003      	beq.n	8008bbc <configCheck+0x1c>
    configSet = true;
 8008bb4:	4b19      	ldr	r3, [pc, #100]	@ (8008c1c <configCheck+0x7c>)
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	e00a      	b.n	8008bd2 <configCheck+0x32>
  }
  else{
    configSet = false;
 8008bbc:	4b17      	ldr	r3, [pc, #92]	@ (8008c1c <configCheck+0x7c>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8008bc2:	f001 f8b7 	bl	8009d34 <HAL_GetTick>
 8008bc6:	0003      	movs	r3, r0
 8008bc8:	22fa      	movs	r2, #250	@ 0xfa
 8008bca:	00d2      	lsls	r2, r2, #3
 8008bcc:	189a      	adds	r2, r3, r2
 8008bce:	4b14      	ldr	r3, [pc, #80]	@ (8008c20 <configCheck+0x80>)
 8008bd0:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8008bd2:	4b12      	ldr	r3, [pc, #72]	@ (8008c1c <configCheck+0x7c>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d01c      	beq.n	8008c14 <configCheck+0x74>
 8008bda:	4b11      	ldr	r3, [pc, #68]	@ (8008c20 <configCheck+0x80>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	0018      	movs	r0, r3
 8008be0:	f000 fcb6 	bl	8009550 <TimestampIsReached>
 8008be4:	1e03      	subs	r3, r0, #0
 8008be6:	d015      	beq.n	8008c14 <configCheck+0x74>
    SetConfigMode(); //Make config mode wifi
 8008be8:	f7fa fd94 	bl	8003714 <SetConfigMode>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008bec:	4b0d      	ldr	r3, [pc, #52]	@ (8008c24 <configCheck+0x84>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f002 fc3d 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8008bf8:	2380      	movs	r3, #128	@ 0x80
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	4809      	ldr	r0, [pc, #36]	@ (8008c24 <configCheck+0x84>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	0019      	movs	r1, r3
 8008c02:	f002 fc36 	bl	800b472 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8008c06:	2380      	movs	r3, #128	@ 0x80
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4806      	ldr	r0, [pc, #24]	@ (8008c24 <configCheck+0x84>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	0019      	movs	r1, r3
 8008c10:	f002 fc2f 	bl	800b472 <HAL_GPIO_WritePin>
  }
}
 8008c14:	46c0      	nop			@ (mov r8, r8)
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	46c0      	nop			@ (mov r8, r8)
 8008c1c:	200027ac 	.word	0x200027ac
 8008c20:	200027b0 	.word	0x200027b0
 8008c24:	50000400 	.word	0x50000400

08008c28 <status_Upkeep>:
  //RTC_SetWakeUpTimer(RTC_Handler, 300000);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void status_Upkeep(){
 8008c28:	b590      	push	{r4, r7, lr}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
  Battery_Status status;
  configCheck();
 8008c2e:	f7ff ffb7 	bl	8008ba0 <configCheck>
  if(TimestampIsReached(PowerStamp)){
 8008c32:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <status_Upkeep+0x34>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	0018      	movs	r0, r3
 8008c38:	f000 fc8a 	bl	8009550 <TimestampIsReached>
 8008c3c:	1e03      	subs	r3, r0, #0
 8008c3e:	d009      	beq.n	8008c54 <status_Upkeep+0x2c>
    status = powerCheck();
 8008c40:	1dfc      	adds	r4, r7, #7
 8008c42:	f7ff ff43 	bl	8008acc <powerCheck>
 8008c46:	0003      	movs	r3, r0
 8008c48:	7023      	strb	r3, [r4, #0]
    powerDisplay(status);
 8008c4a:	1dfb      	adds	r3, r7, #7
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f7ff ff5e 	bl	8008b10 <powerDisplay>
  }
}
 8008c54:	46c0      	nop			@ (mov r8, r8)
 8008c56:	46bd      	mov	sp, r7
 8008c58:	b003      	add	sp, #12
 8008c5a:	bd90      	pop	{r4, r7, pc}
 8008c5c:	200027b4 	.word	0x200027b4

08008c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c64:	4b07      	ldr	r3, [pc, #28]	@ (8008c84 <HAL_MspInit+0x24>)
 8008c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c68:	4b06      	ldr	r3, [pc, #24]	@ (8008c84 <HAL_MspInit+0x24>)
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c70:	4b04      	ldr	r3, [pc, #16]	@ (8008c84 <HAL_MspInit+0x24>)
 8008c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c74:	4b03      	ldr	r3, [pc, #12]	@ (8008c84 <HAL_MspInit+0x24>)
 8008c76:	2180      	movs	r1, #128	@ 0x80
 8008c78:	0549      	lsls	r1, r1, #21
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c7e:	46c0      	nop			@ (mov r8, r8)
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	40021000 	.word	0x40021000

08008c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008c8c:	46c0      	nop			@ (mov r8, r8)
 8008c8e:	e7fd      	b.n	8008c8c <NMI_Handler+0x4>

08008c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c94:	46c0      	nop			@ (mov r8, r8)
 8008c96:	e7fd      	b.n	8008c94 <HardFault_Handler+0x4>

08008c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008c9c:	46c0      	nop			@ (mov r8, r8)
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ca6:	46c0      	nop			@ (mov r8, r8)
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008cb0:	f001 f82e 	bl	8009d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008cb4:	46c0      	nop			@ (mov r8, r8)
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008cc0:	4b05      	ldr	r3, [pc, #20]	@ (8008cd8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	f001 fea1 	bl	800aa0a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008cc8:	4b04      	ldr	r3, [pc, #16]	@ (8008cdc <DMA1_Channel2_3_IRQHandler+0x20>)
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f001 fe9d 	bl	800aa0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008cd0:	46c0      	nop			@ (mov r8, r8)
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	46c0      	nop			@ (mov r8, r8)
 8008cd8:	20000d60 	.word	0x20000d60
 8008cdc:	20000d18 	.word	0x20000d18

08008ce0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008ce4:	4b07      	ldr	r3, [pc, #28]	@ (8008d04 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f001 fe8f 	bl	800aa0a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f001 fe8b 	bl	800aa0a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8008cf4:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f001 fe87 	bl	800aa0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008cfc:	46c0      	nop			@ (mov r8, r8)
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	46c0      	nop			@ (mov r8, r8)
 8008d04:	20000de4 	.word	0x20000de4
 8008d08:	20002a64 	.word	0x20002a64
 8008d0c:	20002aac 	.word	0x20002aac

08008d10 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008d14:	4b03      	ldr	r3, [pc, #12]	@ (8008d24 <USART4_5_IRQHandler+0x14>)
 8008d16:	0018      	movs	r0, r3
 8008d18:	f008 fc48 	bl	80115ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8008d1c:	46c0      	nop			@ (mov r8, r8)
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	46c0      	nop			@ (mov r8, r8)
 8008d24:	200029ac 	.word	0x200029ac

08008d28 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8008d2c:	4b09      	ldr	r3, [pc, #36]	@ (8008d54 <I2C1_IRQHandler+0x2c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	23e0      	movs	r3, #224	@ 0xe0
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	4013      	ands	r3, r2
 8008d38:	d004      	beq.n	8008d44 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8008d3a:	4b06      	ldr	r3, [pc, #24]	@ (8008d54 <I2C1_IRQHandler+0x2c>)
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f002 fe71 	bl	800ba24 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8008d42:	e003      	b.n	8008d4c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008d44:	4b03      	ldr	r3, [pc, #12]	@ (8008d54 <I2C1_IRQHandler+0x2c>)
 8008d46:	0018      	movs	r0, r3
 8008d48:	f002 fe52 	bl	800b9f0 <HAL_I2C_EV_IRQHandler>
}
 8008d4c:	46c0      	nop			@ (mov r8, r8)
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	46c0      	nop			@ (mov r8, r8)
 8008d54:	20000c70 	.word	0x20000c70

08008d58 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008d5c:	4b03      	ldr	r3, [pc, #12]	@ (8008d6c <USB_IRQHandler+0x14>)
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f005 f828 	bl	800ddb4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8008d64:	46c0      	nop			@ (mov r8, r8)
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	46c0      	nop			@ (mov r8, r8)
 8008d6c:	200038b4 	.word	0x200038b4

08008d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  return 1;
 8008d74:	2301      	movs	r3, #1
}
 8008d76:	0018      	movs	r0, r3
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <_kill>:

int _kill(int pid, int sig)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008d86:	f00f f8d5 	bl	8017f34 <__errno>
 8008d8a:	0003      	movs	r3, r0
 8008d8c:	2216      	movs	r2, #22
 8008d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8008d90:	2301      	movs	r3, #1
 8008d92:	425b      	negs	r3, r3
}
 8008d94:	0018      	movs	r0, r3
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b002      	add	sp, #8
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <_exit>:

void _exit (int status)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008da4:	2301      	movs	r3, #1
 8008da6:	425a      	negs	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	0011      	movs	r1, r2
 8008dac:	0018      	movs	r0, r3
 8008dae:	f7ff ffe5 	bl	8008d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8008db2:	46c0      	nop			@ (mov r8, r8)
 8008db4:	e7fd      	b.n	8008db2 <_exit+0x16>

08008db6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	60b9      	str	r1, [r7, #8]
 8008dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	e00a      	b.n	8008dde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008dc8:	e000      	b.n	8008dcc <_read+0x16>
 8008dca:	bf00      	nop
 8008dcc:	0001      	movs	r1, r0
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	60ba      	str	r2, [r7, #8]
 8008dd4:	b2ca      	uxtb	r2, r1
 8008dd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	dbf0      	blt.n	8008dc8 <_read+0x12>
  }

  return len;
 8008de6:	687b      	ldr	r3, [r7, #4]
}
 8008de8:	0018      	movs	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	b006      	add	sp, #24
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	425b      	negs	r3, r3
}
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	b002      	add	sp, #8
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2280      	movs	r2, #128	@ 0x80
 8008e12:	0192      	lsls	r2, r2, #6
 8008e14:	605a      	str	r2, [r3, #4]
  return 0;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	0018      	movs	r0, r3
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	b002      	add	sp, #8
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <_isatty>:

int _isatty(int file)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008e28:	2301      	movs	r3, #1
}
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	b002      	add	sp, #8
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	0018      	movs	r0, r3
 8008e42:	46bd      	mov	sp, r7
 8008e44:	b004      	add	sp, #16
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e50:	4a14      	ldr	r2, [pc, #80]	@ (8008ea4 <_sbrk+0x5c>)
 8008e52:	4b15      	ldr	r3, [pc, #84]	@ (8008ea8 <_sbrk+0x60>)
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e5c:	4b13      	ldr	r3, [pc, #76]	@ (8008eac <_sbrk+0x64>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d102      	bne.n	8008e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008e64:	4b11      	ldr	r3, [pc, #68]	@ (8008eac <_sbrk+0x64>)
 8008e66:	4a12      	ldr	r2, [pc, #72]	@ (8008eb0 <_sbrk+0x68>)
 8008e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008e6a:	4b10      	ldr	r3, [pc, #64]	@ (8008eac <_sbrk+0x64>)
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	18d3      	adds	r3, r2, r3
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d207      	bcs.n	8008e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e78:	f00f f85c 	bl	8017f34 <__errno>
 8008e7c:	0003      	movs	r3, r0
 8008e7e:	220c      	movs	r2, #12
 8008e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008e82:	2301      	movs	r3, #1
 8008e84:	425b      	negs	r3, r3
 8008e86:	e009      	b.n	8008e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008e88:	4b08      	ldr	r3, [pc, #32]	@ (8008eac <_sbrk+0x64>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e8e:	4b07      	ldr	r3, [pc, #28]	@ (8008eac <_sbrk+0x64>)
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	18d2      	adds	r2, r2, r3
 8008e96:	4b05      	ldr	r3, [pc, #20]	@ (8008eac <_sbrk+0x64>)
 8008e98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
}
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	b006      	add	sp, #24
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20005000 	.word	0x20005000
 8008ea8:	00000400 	.word	0x00000400
 8008eac:	200027b8 	.word	0x200027b8
 8008eb0:	20003f18 	.word	0x20003f18

08008eb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008eb8:	46c0      	nop			@ (mov r8, r8)
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
	...

08008ec0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	18fb      	adds	r3, r7, r3
 8008eca:	0018      	movs	r0, r3
 8008ecc:	2308      	movs	r3, #8
 8008ece:	001a      	movs	r2, r3
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	f00e ff9d 	bl	8017e10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ed6:	003b      	movs	r3, r7
 8008ed8:	0018      	movs	r0, r3
 8008eda:	2310      	movs	r3, #16
 8008edc:	001a      	movs	r2, r3
 8008ede:	2100      	movs	r1, #0
 8008ee0:	f00e ff96 	bl	8017e10 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008ee6:	2280      	movs	r2, #128	@ 0x80
 8008ee8:	05d2      	lsls	r2, r2, #23
 8008eea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008eec:	4b2c      	ldr	r3, [pc, #176]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008ef8:	4b29      	ldr	r3, [pc, #164]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008efa:	4a2a      	ldr	r2, [pc, #168]	@ (8008fa4 <MX_TIM2_Init+0xe4>)
 8008efc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008efe:	4b28      	ldr	r3, [pc, #160]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f04:	4b26      	ldr	r3, [pc, #152]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008f0a:	4b25      	ldr	r3, [pc, #148]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008f0c:	0018      	movs	r0, r3
 8008f0e:	f007 fdbf 	bl	8010a90 <HAL_TIM_PWM_Init>
 8008f12:	1e03      	subs	r3, r0, #0
 8008f14:	d001      	beq.n	8008f1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8008f16:	f7fd f9e3 	bl	80062e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f1a:	2110      	movs	r1, #16
 8008f1c:	187b      	adds	r3, r7, r1
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f22:	187b      	adds	r3, r7, r1
 8008f24:	2200      	movs	r2, #0
 8008f26:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008f28:	187a      	adds	r2, r7, r1
 8008f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008f2c:	0011      	movs	r1, r2
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f008 f8cc 	bl	80110cc <HAL_TIMEx_MasterConfigSynchronization>
 8008f34:	1e03      	subs	r3, r0, #0
 8008f36:	d001      	beq.n	8008f3c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8008f38:	f7fd f9d2 	bl	80062e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f3c:	003b      	movs	r3, r7
 8008f3e:	2260      	movs	r2, #96	@ 0x60
 8008f40:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008f42:	003b      	movs	r3, r7
 8008f44:	2200      	movs	r2, #0
 8008f46:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f48:	003b      	movs	r3, r7
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f4e:	003b      	movs	r3, r7
 8008f50:	2200      	movs	r2, #0
 8008f52:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f54:	0039      	movs	r1, r7
 8008f56:	4b12      	ldr	r3, [pc, #72]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f007 fe6a 	bl	8010c34 <HAL_TIM_PWM_ConfigChannel>
 8008f60:	1e03      	subs	r3, r0, #0
 8008f62:	d001      	beq.n	8008f68 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8008f64:	f7fd f9bc 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f68:	0039      	movs	r1, r7
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008f6c:	2208      	movs	r2, #8
 8008f6e:	0018      	movs	r0, r3
 8008f70:	f007 fe60 	bl	8010c34 <HAL_TIM_PWM_ConfigChannel>
 8008f74:	1e03      	subs	r3, r0, #0
 8008f76:	d001      	beq.n	8008f7c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8008f78:	f7fd f9b2 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f7c:	0039      	movs	r1, r7
 8008f7e:	4b08      	ldr	r3, [pc, #32]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008f80:	220c      	movs	r2, #12
 8008f82:	0018      	movs	r0, r3
 8008f84:	f007 fe56 	bl	8010c34 <HAL_TIM_PWM_ConfigChannel>
 8008f88:	1e03      	subs	r3, r0, #0
 8008f8a:	d001      	beq.n	8008f90 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8008f8c:	f7fd f9a8 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008f90:	4b03      	ldr	r3, [pc, #12]	@ (8008fa0 <MX_TIM2_Init+0xe0>)
 8008f92:	0018      	movs	r0, r3
 8008f94:	f000 f8aa 	bl	80090ec <HAL_TIM_MspPostInit>

}
 8008f98:	46c0      	nop			@ (mov r8, r8)
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	b006      	add	sp, #24
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	200027bc 	.word	0x200027bc
 8008fa4:	0000ffff 	.word	0x0000ffff

08008fa8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fae:	2310      	movs	r3, #16
 8008fb0:	18fb      	adds	r3, r7, r3
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	001a      	movs	r2, r3
 8008fb8:	2100      	movs	r1, #0
 8008fba:	f00e ff29 	bl	8017e10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008fbe:	003b      	movs	r3, r7
 8008fc0:	0018      	movs	r0, r3
 8008fc2:	2310      	movs	r3, #16
 8008fc4:	001a      	movs	r2, r3
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	f00e ff22 	bl	8017e10 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008fcc:	4b32      	ldr	r3, [pc, #200]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8008fce:	4a33      	ldr	r2, [pc, #204]	@ (800909c <MX_TIM3_Init+0xf4>)
 8008fd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008fd2:	4b31      	ldr	r3, [pc, #196]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008fde:	4b2e      	ldr	r3, [pc, #184]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8008fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80090a0 <MX_TIM3_Init+0xf8>)
 8008fe2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fe4:	4b2c      	ldr	r3, [pc, #176]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fea:	4b2b      	ldr	r3, [pc, #172]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008ff0:	4b29      	ldr	r3, [pc, #164]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f007 fd4c 	bl	8010a90 <HAL_TIM_PWM_Init>
 8008ff8:	1e03      	subs	r3, r0, #0
 8008ffa:	d001      	beq.n	8009000 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8008ffc:	f7fd f970 	bl	80062e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009000:	2110      	movs	r1, #16
 8009002:	187b      	adds	r3, r7, r1
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009008:	187b      	adds	r3, r7, r1
 800900a:	2200      	movs	r2, #0
 800900c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800900e:	187a      	adds	r2, r7, r1
 8009010:	4b21      	ldr	r3, [pc, #132]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8009012:	0011      	movs	r1, r2
 8009014:	0018      	movs	r0, r3
 8009016:	f008 f859 	bl	80110cc <HAL_TIMEx_MasterConfigSynchronization>
 800901a:	1e03      	subs	r3, r0, #0
 800901c:	d001      	beq.n	8009022 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800901e:	f7fd f95f 	bl	80062e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009022:	003b      	movs	r3, r7
 8009024:	2260      	movs	r2, #96	@ 0x60
 8009026:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009028:	003b      	movs	r3, r7
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800902e:	003b      	movs	r3, r7
 8009030:	2200      	movs	r2, #0
 8009032:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009034:	003b      	movs	r3, r7
 8009036:	2200      	movs	r2, #0
 8009038:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800903a:	0039      	movs	r1, r7
 800903c:	4b16      	ldr	r3, [pc, #88]	@ (8009098 <MX_TIM3_Init+0xf0>)
 800903e:	2200      	movs	r2, #0
 8009040:	0018      	movs	r0, r3
 8009042:	f007 fdf7 	bl	8010c34 <HAL_TIM_PWM_ConfigChannel>
 8009046:	1e03      	subs	r3, r0, #0
 8009048:	d001      	beq.n	800904e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800904a:	f7fd f949 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800904e:	4b12      	ldr	r3, [pc, #72]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8009050:	2104      	movs	r1, #4
 8009052:	0018      	movs	r0, r3
 8009054:	f008 f898 	bl	8011188 <HAL_TIMEx_RemapConfig>
 8009058:	1e03      	subs	r3, r0, #0
 800905a:	d001      	beq.n	8009060 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800905c:	f7fd f940 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009060:	0039      	movs	r1, r7
 8009062:	4b0d      	ldr	r3, [pc, #52]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8009064:	2204      	movs	r2, #4
 8009066:	0018      	movs	r0, r3
 8009068:	f007 fde4 	bl	8010c34 <HAL_TIM_PWM_ConfigChannel>
 800906c:	1e03      	subs	r3, r0, #0
 800906e:	d001      	beq.n	8009074 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009070:	f7fd f936 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009074:	0039      	movs	r1, r7
 8009076:	4b08      	ldr	r3, [pc, #32]	@ (8009098 <MX_TIM3_Init+0xf0>)
 8009078:	2208      	movs	r2, #8
 800907a:	0018      	movs	r0, r3
 800907c:	f007 fdda 	bl	8010c34 <HAL_TIM_PWM_ConfigChannel>
 8009080:	1e03      	subs	r3, r0, #0
 8009082:	d001      	beq.n	8009088 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8009084:	f7fd f92c 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009088:	4b03      	ldr	r3, [pc, #12]	@ (8009098 <MX_TIM3_Init+0xf0>)
 800908a:	0018      	movs	r0, r3
 800908c:	f000 f82e 	bl	80090ec <HAL_TIM_MspPostInit>

}
 8009090:	46c0      	nop			@ (mov r8, r8)
 8009092:	46bd      	mov	sp, r7
 8009094:	b006      	add	sp, #24
 8009096:	bd80      	pop	{r7, pc}
 8009098:	200027fc 	.word	0x200027fc
 800909c:	40000400 	.word	0x40000400
 80090a0:	0000ffff 	.word	0x0000ffff

080090a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	2380      	movs	r3, #128	@ 0x80
 80090b2:	05db      	lsls	r3, r3, #23
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d106      	bne.n	80090c6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80090b8:	4b0a      	ldr	r3, [pc, #40]	@ (80090e4 <HAL_TIM_PWM_MspInit+0x40>)
 80090ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090bc:	4b09      	ldr	r3, [pc, #36]	@ (80090e4 <HAL_TIM_PWM_MspInit+0x40>)
 80090be:	2101      	movs	r1, #1
 80090c0:	430a      	orrs	r2, r1
 80090c2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80090c4:	e00a      	b.n	80090dc <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a07      	ldr	r2, [pc, #28]	@ (80090e8 <HAL_TIM_PWM_MspInit+0x44>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d105      	bne.n	80090dc <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80090d0:	4b04      	ldr	r3, [pc, #16]	@ (80090e4 <HAL_TIM_PWM_MspInit+0x40>)
 80090d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090d4:	4b03      	ldr	r3, [pc, #12]	@ (80090e4 <HAL_TIM_PWM_MspInit+0x40>)
 80090d6:	2102      	movs	r1, #2
 80090d8:	430a      	orrs	r2, r1
 80090da:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80090dc:	46c0      	nop			@ (mov r8, r8)
 80090de:	46bd      	mov	sp, r7
 80090e0:	b002      	add	sp, #8
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	40021000 	.word	0x40021000
 80090e8:	40000400 	.word	0x40000400

080090ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80090ec:	b590      	push	{r4, r7, lr}
 80090ee:	b08b      	sub	sp, #44	@ 0x2c
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090f4:	2414      	movs	r4, #20
 80090f6:	193b      	adds	r3, r7, r4
 80090f8:	0018      	movs	r0, r3
 80090fa:	2314      	movs	r3, #20
 80090fc:	001a      	movs	r2, r3
 80090fe:	2100      	movs	r1, #0
 8009100:	f00e fe86 	bl	8017e10 <memset>
  if(timHandle->Instance==TIM2)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	2380      	movs	r3, #128	@ 0x80
 800910a:	05db      	lsls	r3, r3, #23
 800910c:	429a      	cmp	r2, r3
 800910e:	d123      	bne.n	8009158 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009110:	4b27      	ldr	r3, [pc, #156]	@ (80091b0 <HAL_TIM_MspPostInit+0xc4>)
 8009112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009114:	4b26      	ldr	r3, [pc, #152]	@ (80091b0 <HAL_TIM_MspPostInit+0xc4>)
 8009116:	2101      	movs	r1, #1
 8009118:	430a      	orrs	r2, r1
 800911a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800911c:	4b24      	ldr	r3, [pc, #144]	@ (80091b0 <HAL_TIM_MspPostInit+0xc4>)
 800911e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009120:	2201      	movs	r2, #1
 8009122:	4013      	ands	r3, r2
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8009128:	0021      	movs	r1, r4
 800912a:	187b      	adds	r3, r7, r1
 800912c:	220d      	movs	r2, #13
 800912e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009130:	187b      	adds	r3, r7, r1
 8009132:	2202      	movs	r2, #2
 8009134:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009136:	187b      	adds	r3, r7, r1
 8009138:	2200      	movs	r2, #0
 800913a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800913c:	187b      	adds	r3, r7, r1
 800913e:	2200      	movs	r2, #0
 8009140:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8009142:	187b      	adds	r3, r7, r1
 8009144:	2202      	movs	r2, #2
 8009146:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009148:	187a      	adds	r2, r7, r1
 800914a:	23a0      	movs	r3, #160	@ 0xa0
 800914c:	05db      	lsls	r3, r3, #23
 800914e:	0011      	movs	r1, r2
 8009150:	0018      	movs	r0, r3
 8009152:	f001 ff11 	bl	800af78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009156:	e027      	b.n	80091a8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a15      	ldr	r2, [pc, #84]	@ (80091b4 <HAL_TIM_MspPostInit+0xc8>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d122      	bne.n	80091a8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009162:	4b13      	ldr	r3, [pc, #76]	@ (80091b0 <HAL_TIM_MspPostInit+0xc4>)
 8009164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009166:	4b12      	ldr	r3, [pc, #72]	@ (80091b0 <HAL_TIM_MspPostInit+0xc4>)
 8009168:	2104      	movs	r1, #4
 800916a:	430a      	orrs	r2, r1
 800916c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800916e:	4b10      	ldr	r3, [pc, #64]	@ (80091b0 <HAL_TIM_MspPostInit+0xc4>)
 8009170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009172:	2204      	movs	r2, #4
 8009174:	4013      	ands	r3, r2
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800917a:	2114      	movs	r1, #20
 800917c:	187b      	adds	r3, r7, r1
 800917e:	22e0      	movs	r2, #224	@ 0xe0
 8009180:	0052      	lsls	r2, r2, #1
 8009182:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009184:	187b      	adds	r3, r7, r1
 8009186:	2202      	movs	r2, #2
 8009188:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800918a:	187b      	adds	r3, r7, r1
 800918c:	2200      	movs	r2, #0
 800918e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009190:	187b      	adds	r3, r7, r1
 8009192:	2200      	movs	r2, #0
 8009194:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009196:	187b      	adds	r3, r7, r1
 8009198:	2202      	movs	r2, #2
 800919a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800919c:	187b      	adds	r3, r7, r1
 800919e:	4a06      	ldr	r2, [pc, #24]	@ (80091b8 <HAL_TIM_MspPostInit+0xcc>)
 80091a0:	0019      	movs	r1, r3
 80091a2:	0010      	movs	r0, r2
 80091a4:	f001 fee8 	bl	800af78 <HAL_GPIO_Init>
}
 80091a8:	46c0      	nop			@ (mov r8, r8)
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b00b      	add	sp, #44	@ 0x2c
 80091ae:	bd90      	pop	{r4, r7, pc}
 80091b0:	40021000 	.word	0x40021000
 80091b4:	40000400 	.word	0x40000400
 80091b8:	50000800 	.word	0x50000800

080091bc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80091c0:	4b17      	ldr	r3, [pc, #92]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091c2:	4a18      	ldr	r2, [pc, #96]	@ (8009224 <MX_LPUART1_UART_Init+0x68>)
 80091c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80091c6:	4b16      	ldr	r3, [pc, #88]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091c8:	22e1      	movs	r2, #225	@ 0xe1
 80091ca:	0252      	lsls	r2, r2, #9
 80091cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80091ce:	4b14      	ldr	r3, [pc, #80]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80091d4:	4b12      	ldr	r3, [pc, #72]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091d6:	2200      	movs	r2, #0
 80091d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80091da:	4b11      	ldr	r3, [pc, #68]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091dc:	2200      	movs	r2, #0
 80091de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80091e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091e2:	220c      	movs	r2, #12
 80091e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80091e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80091ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80091f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091f4:	2218      	movs	r2, #24
 80091f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80091f8:	4b09      	ldr	r3, [pc, #36]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 80091fa:	2280      	movs	r2, #128	@ 0x80
 80091fc:	0212      	lsls	r2, r2, #8
 80091fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8009200:	4b07      	ldr	r3, [pc, #28]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 8009202:	2280      	movs	r2, #128	@ 0x80
 8009204:	0152      	lsls	r2, r2, #5
 8009206:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009208:	4b05      	ldr	r3, [pc, #20]	@ (8009220 <MX_LPUART1_UART_Init+0x64>)
 800920a:	0018      	movs	r0, r3
 800920c:	f007 ffda 	bl	80111c4 <HAL_UART_Init>
 8009210:	1e03      	subs	r3, r0, #0
 8009212:	d001      	beq.n	8009218 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8009214:	f7fd f864 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009218:	46c0      	nop			@ (mov r8, r8)
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	46c0      	nop			@ (mov r8, r8)
 8009220:	2000283c 	.word	0x2000283c
 8009224:	40004800 	.word	0x40004800

08009228 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800922c:	4b16      	ldr	r3, [pc, #88]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 800922e:	4a17      	ldr	r2, [pc, #92]	@ (800928c <MX_USART1_UART_Init+0x64>)
 8009230:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009232:	4b15      	ldr	r3, [pc, #84]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 8009234:	22e1      	movs	r2, #225	@ 0xe1
 8009236:	0252      	lsls	r2, r2, #9
 8009238:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800923a:	4b13      	ldr	r3, [pc, #76]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 800923c:	2200      	movs	r2, #0
 800923e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009240:	4b11      	ldr	r3, [pc, #68]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 8009242:	2200      	movs	r2, #0
 8009244:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009246:	4b10      	ldr	r3, [pc, #64]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 8009248:	2200      	movs	r2, #0
 800924a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800924c:	4b0e      	ldr	r3, [pc, #56]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 800924e:	220c      	movs	r2, #12
 8009250:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009252:	4b0d      	ldr	r3, [pc, #52]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 8009254:	2200      	movs	r2, #0
 8009256:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009258:	4b0b      	ldr	r3, [pc, #44]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 800925a:	2200      	movs	r2, #0
 800925c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800925e:	4b0a      	ldr	r3, [pc, #40]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 8009260:	2200      	movs	r2, #0
 8009262:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8009264:	4b08      	ldr	r3, [pc, #32]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 8009266:	2208      	movs	r2, #8
 8009268:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800926a:	4b07      	ldr	r3, [pc, #28]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 800926c:	2280      	movs	r2, #128	@ 0x80
 800926e:	0212      	lsls	r2, r2, #8
 8009270:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009272:	4b05      	ldr	r3, [pc, #20]	@ (8009288 <MX_USART1_UART_Init+0x60>)
 8009274:	0018      	movs	r0, r3
 8009276:	f007 ffa5 	bl	80111c4 <HAL_UART_Init>
 800927a:	1e03      	subs	r3, r0, #0
 800927c:	d001      	beq.n	8009282 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800927e:	f7fd f82f 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009282:	46c0      	nop			@ (mov r8, r8)
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	200028f4 	.word	0x200028f4
 800928c:	40013800 	.word	0x40013800

08009290 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8009294:	4b14      	ldr	r3, [pc, #80]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 8009296:	4a15      	ldr	r2, [pc, #84]	@ (80092ec <MX_USART4_UART_Init+0x5c>)
 8009298:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800929a:	4b13      	ldr	r3, [pc, #76]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 800929c:	22e1      	movs	r2, #225	@ 0xe1
 800929e:	0252      	lsls	r2, r2, #9
 80092a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80092a2:	4b11      	ldr	r3, [pc, #68]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80092a8:	4b0f      	ldr	r3, [pc, #60]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80092ae:	4b0e      	ldr	r3, [pc, #56]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80092b4:	4b0c      	ldr	r3, [pc, #48]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 80092b6:	220c      	movs	r2, #12
 80092b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092ba:	4b0b      	ldr	r3, [pc, #44]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 80092bc:	2200      	movs	r2, #0
 80092be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80092c0:	4b09      	ldr	r3, [pc, #36]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80092c6:	4b08      	ldr	r3, [pc, #32]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80092cc:	4b06      	ldr	r3, [pc, #24]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80092d2:	4b05      	ldr	r3, [pc, #20]	@ (80092e8 <MX_USART4_UART_Init+0x58>)
 80092d4:	0018      	movs	r0, r3
 80092d6:	f007 ff75 	bl	80111c4 <HAL_UART_Init>
 80092da:	1e03      	subs	r3, r0, #0
 80092dc:	d001      	beq.n	80092e2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80092de:	f7fc ffff 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80092e2:	46c0      	nop			@ (mov r8, r8)
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	200029ac 	.word	0x200029ac
 80092ec:	40004c00 	.word	0x40004c00

080092f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80092f0:	b590      	push	{r4, r7, lr}
 80092f2:	b08d      	sub	sp, #52	@ 0x34
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092f8:	241c      	movs	r4, #28
 80092fa:	193b      	adds	r3, r7, r4
 80092fc:	0018      	movs	r0, r3
 80092fe:	2314      	movs	r3, #20
 8009300:	001a      	movs	r2, r3
 8009302:	2100      	movs	r1, #0
 8009304:	f00e fd84 	bl	8017e10 <memset>
  if(uartHandle->Instance==LPUART1)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a87      	ldr	r2, [pc, #540]	@ (800952c <HAL_UART_MspInit+0x23c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d129      	bne.n	8009366 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8009312:	4b87      	ldr	r3, [pc, #540]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009316:	4b86      	ldr	r3, [pc, #536]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009318:	2180      	movs	r1, #128	@ 0x80
 800931a:	02c9      	lsls	r1, r1, #11
 800931c:	430a      	orrs	r2, r1
 800931e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009320:	4b83      	ldr	r3, [pc, #524]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009324:	4b82      	ldr	r3, [pc, #520]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009326:	2104      	movs	r1, #4
 8009328:	430a      	orrs	r2, r1
 800932a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800932c:	4b80      	ldr	r3, [pc, #512]	@ (8009530 <HAL_UART_MspInit+0x240>)
 800932e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009330:	2204      	movs	r2, #4
 8009332:	4013      	ands	r3, r2
 8009334:	61bb      	str	r3, [r7, #24]
 8009336:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009338:	0021      	movs	r1, r4
 800933a:	187b      	adds	r3, r7, r1
 800933c:	2203      	movs	r2, #3
 800933e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009340:	187b      	adds	r3, r7, r1
 8009342:	2202      	movs	r2, #2
 8009344:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009346:	187b      	adds	r3, r7, r1
 8009348:	2200      	movs	r2, #0
 800934a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800934c:	187b      	adds	r3, r7, r1
 800934e:	2203      	movs	r2, #3
 8009350:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8009352:	187b      	adds	r3, r7, r1
 8009354:	2206      	movs	r2, #6
 8009356:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009358:	187b      	adds	r3, r7, r1
 800935a:	4a76      	ldr	r2, [pc, #472]	@ (8009534 <HAL_UART_MspInit+0x244>)
 800935c:	0019      	movs	r1, r3
 800935e:	0010      	movs	r0, r2
 8009360:	f001 fe0a 	bl	800af78 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8009364:	e0dd      	b.n	8009522 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a73      	ldr	r2, [pc, #460]	@ (8009538 <HAL_UART_MspInit+0x248>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d12b      	bne.n	80093c8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8009370:	4b6f      	ldr	r3, [pc, #444]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009374:	4b6e      	ldr	r3, [pc, #440]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009376:	2180      	movs	r1, #128	@ 0x80
 8009378:	01c9      	lsls	r1, r1, #7
 800937a:	430a      	orrs	r2, r1
 800937c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800937e:	4b6c      	ldr	r3, [pc, #432]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009382:	4b6b      	ldr	r3, [pc, #428]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009384:	2101      	movs	r1, #1
 8009386:	430a      	orrs	r2, r1
 8009388:	62da      	str	r2, [r3, #44]	@ 0x2c
 800938a:	4b69      	ldr	r3, [pc, #420]	@ (8009530 <HAL_UART_MspInit+0x240>)
 800938c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938e:	2201      	movs	r2, #1
 8009390:	4013      	ands	r3, r2
 8009392:	617b      	str	r3, [r7, #20]
 8009394:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009396:	211c      	movs	r1, #28
 8009398:	187b      	adds	r3, r7, r1
 800939a:	22c0      	movs	r2, #192	@ 0xc0
 800939c:	00d2      	lsls	r2, r2, #3
 800939e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093a0:	187b      	adds	r3, r7, r1
 80093a2:	2202      	movs	r2, #2
 80093a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a6:	187b      	adds	r3, r7, r1
 80093a8:	2200      	movs	r2, #0
 80093aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093ac:	187b      	adds	r3, r7, r1
 80093ae:	2203      	movs	r2, #3
 80093b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80093b2:	187b      	adds	r3, r7, r1
 80093b4:	2204      	movs	r2, #4
 80093b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093b8:	187a      	adds	r2, r7, r1
 80093ba:	23a0      	movs	r3, #160	@ 0xa0
 80093bc:	05db      	lsls	r3, r3, #23
 80093be:	0011      	movs	r1, r2
 80093c0:	0018      	movs	r0, r3
 80093c2:	f001 fdd9 	bl	800af78 <HAL_GPIO_Init>
}
 80093c6:	e0ac      	b.n	8009522 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a5b      	ldr	r2, [pc, #364]	@ (800953c <HAL_UART_MspInit+0x24c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d000      	beq.n	80093d4 <HAL_UART_MspInit+0xe4>
 80093d2:	e0a6      	b.n	8009522 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 80093d4:	4b56      	ldr	r3, [pc, #344]	@ (8009530 <HAL_UART_MspInit+0x240>)
 80093d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093d8:	4b55      	ldr	r3, [pc, #340]	@ (8009530 <HAL_UART_MspInit+0x240>)
 80093da:	2180      	movs	r1, #128	@ 0x80
 80093dc:	0309      	lsls	r1, r1, #12
 80093de:	430a      	orrs	r2, r1
 80093e0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093e2:	4b53      	ldr	r3, [pc, #332]	@ (8009530 <HAL_UART_MspInit+0x240>)
 80093e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e6:	4b52      	ldr	r3, [pc, #328]	@ (8009530 <HAL_UART_MspInit+0x240>)
 80093e8:	2101      	movs	r1, #1
 80093ea:	430a      	orrs	r2, r1
 80093ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093ee:	4b50      	ldr	r3, [pc, #320]	@ (8009530 <HAL_UART_MspInit+0x240>)
 80093f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f2:	2201      	movs	r2, #1
 80093f4:	4013      	ands	r3, r2
 80093f6:	613b      	str	r3, [r7, #16]
 80093f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093fa:	4b4d      	ldr	r3, [pc, #308]	@ (8009530 <HAL_UART_MspInit+0x240>)
 80093fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fe:	4b4c      	ldr	r3, [pc, #304]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009400:	2104      	movs	r1, #4
 8009402:	430a      	orrs	r2, r1
 8009404:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009406:	4b4a      	ldr	r3, [pc, #296]	@ (8009530 <HAL_UART_MspInit+0x240>)
 8009408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940a:	2204      	movs	r2, #4
 800940c:	4013      	ands	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009412:	241c      	movs	r4, #28
 8009414:	193b      	adds	r3, r7, r4
 8009416:	2202      	movs	r2, #2
 8009418:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800941a:	193b      	adds	r3, r7, r4
 800941c:	2202      	movs	r2, #2
 800941e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009420:	193b      	adds	r3, r7, r4
 8009422:	2200      	movs	r2, #0
 8009424:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009426:	193b      	adds	r3, r7, r4
 8009428:	2203      	movs	r2, #3
 800942a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800942c:	193b      	adds	r3, r7, r4
 800942e:	2206      	movs	r2, #6
 8009430:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009432:	193a      	adds	r2, r7, r4
 8009434:	23a0      	movs	r3, #160	@ 0xa0
 8009436:	05db      	lsls	r3, r3, #23
 8009438:	0011      	movs	r1, r2
 800943a:	0018      	movs	r0, r3
 800943c:	f001 fd9c 	bl	800af78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009440:	0021      	movs	r1, r4
 8009442:	187b      	adds	r3, r7, r1
 8009444:	2280      	movs	r2, #128	@ 0x80
 8009446:	00d2      	lsls	r2, r2, #3
 8009448:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800944a:	187b      	adds	r3, r7, r1
 800944c:	2202      	movs	r2, #2
 800944e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009450:	187b      	adds	r3, r7, r1
 8009452:	2200      	movs	r2, #0
 8009454:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009456:	187b      	adds	r3, r7, r1
 8009458:	2203      	movs	r2, #3
 800945a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800945c:	187b      	adds	r3, r7, r1
 800945e:	2206      	movs	r2, #6
 8009460:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009462:	187b      	adds	r3, r7, r1
 8009464:	4a33      	ldr	r2, [pc, #204]	@ (8009534 <HAL_UART_MspInit+0x244>)
 8009466:	0019      	movs	r1, r3
 8009468:	0010      	movs	r0, r2
 800946a:	f001 fd85 	bl	800af78 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800946e:	4b34      	ldr	r3, [pc, #208]	@ (8009540 <HAL_UART_MspInit+0x250>)
 8009470:	4a34      	ldr	r2, [pc, #208]	@ (8009544 <HAL_UART_MspInit+0x254>)
 8009472:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8009474:	4b32      	ldr	r3, [pc, #200]	@ (8009540 <HAL_UART_MspInit+0x250>)
 8009476:	220c      	movs	r2, #12
 8009478:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800947a:	4b31      	ldr	r3, [pc, #196]	@ (8009540 <HAL_UART_MspInit+0x250>)
 800947c:	2200      	movs	r2, #0
 800947e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009480:	4b2f      	ldr	r3, [pc, #188]	@ (8009540 <HAL_UART_MspInit+0x250>)
 8009482:	2200      	movs	r2, #0
 8009484:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009486:	4b2e      	ldr	r3, [pc, #184]	@ (8009540 <HAL_UART_MspInit+0x250>)
 8009488:	2280      	movs	r2, #128	@ 0x80
 800948a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800948c:	4b2c      	ldr	r3, [pc, #176]	@ (8009540 <HAL_UART_MspInit+0x250>)
 800948e:	2200      	movs	r2, #0
 8009490:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009492:	4b2b      	ldr	r3, [pc, #172]	@ (8009540 <HAL_UART_MspInit+0x250>)
 8009494:	2200      	movs	r2, #0
 8009496:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8009498:	4b29      	ldr	r3, [pc, #164]	@ (8009540 <HAL_UART_MspInit+0x250>)
 800949a:	2220      	movs	r2, #32
 800949c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800949e:	4b28      	ldr	r3, [pc, #160]	@ (8009540 <HAL_UART_MspInit+0x250>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80094a4:	4b26      	ldr	r3, [pc, #152]	@ (8009540 <HAL_UART_MspInit+0x250>)
 80094a6:	0018      	movs	r0, r3
 80094a8:	f001 f8ec 	bl	800a684 <HAL_DMA_Init>
 80094ac:	1e03      	subs	r3, r0, #0
 80094ae:	d001      	beq.n	80094b4 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 80094b0:	f7fc ff16 	bl	80062e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a22      	ldr	r2, [pc, #136]	@ (8009540 <HAL_UART_MspInit+0x250>)
 80094b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80094ba:	4b21      	ldr	r3, [pc, #132]	@ (8009540 <HAL_UART_MspInit+0x250>)
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80094c0:	4b21      	ldr	r3, [pc, #132]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094c2:	4a22      	ldr	r2, [pc, #136]	@ (800954c <HAL_UART_MspInit+0x25c>)
 80094c4:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 80094c6:	4b20      	ldr	r3, [pc, #128]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094c8:	220c      	movs	r2, #12
 80094ca:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80094cc:	4b1e      	ldr	r3, [pc, #120]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094ce:	2210      	movs	r2, #16
 80094d0:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80094d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80094d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094da:	2280      	movs	r2, #128	@ 0x80
 80094dc:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80094de:	4b1a      	ldr	r3, [pc, #104]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80094e4:	4b18      	ldr	r3, [pc, #96]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80094ea:	4b17      	ldr	r3, [pc, #92]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80094f0:	4b15      	ldr	r3, [pc, #84]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80094f6:	4b14      	ldr	r3, [pc, #80]	@ (8009548 <HAL_UART_MspInit+0x258>)
 80094f8:	0018      	movs	r0, r3
 80094fa:	f001 f8c3 	bl	800a684 <HAL_DMA_Init>
 80094fe:	1e03      	subs	r3, r0, #0
 8009500:	d001      	beq.n	8009506 <HAL_UART_MspInit+0x216>
      Error_Handler();
 8009502:	f7fc feed 	bl	80062e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a0f      	ldr	r2, [pc, #60]	@ (8009548 <HAL_UART_MspInit+0x258>)
 800950a:	671a      	str	r2, [r3, #112]	@ 0x70
 800950c:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <HAL_UART_MspInit+0x258>)
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8009512:	2200      	movs	r2, #0
 8009514:	2100      	movs	r1, #0
 8009516:	200e      	movs	r0, #14
 8009518:	f001 f882 	bl	800a620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800951c:	200e      	movs	r0, #14
 800951e:	f001 f894 	bl	800a64a <HAL_NVIC_EnableIRQ>
}
 8009522:	46c0      	nop			@ (mov r8, r8)
 8009524:	46bd      	mov	sp, r7
 8009526:	b00d      	add	sp, #52	@ 0x34
 8009528:	bd90      	pop	{r4, r7, pc}
 800952a:	46c0      	nop			@ (mov r8, r8)
 800952c:	40004800 	.word	0x40004800
 8009530:	40021000 	.word	0x40021000
 8009534:	50000800 	.word	0x50000800
 8009538:	40013800 	.word	0x40013800
 800953c:	40004c00 	.word	0x40004c00
 8009540:	20002a64 	.word	0x20002a64
 8009544:	4002006c 	.word	0x4002006c
 8009548:	20002aac 	.word	0x20002aac
 800954c:	40020080 	.word	0x40020080

08009550 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8009558:	f000 fbec 	bl	8009d34 <HAL_GetTick>
 800955c:	0003      	movs	r3, r0
 800955e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8009560:	4b1c      	ldr	r3, [pc, #112]	@ (80095d4 <TimestampIsReached+0x84>)
 8009562:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	429a      	cmp	r2, r3
 800956a:	d307      	bcc.n	800957c <TimestampIsReached+0x2c>
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	429a      	cmp	r2, r3
 8009576:	d901      	bls.n	800957c <TimestampIsReached+0x2c>
 8009578:	2201      	movs	r2, #1
 800957a:	e000      	b.n	800957e <TimestampIsReached+0x2e>
 800957c:	2200      	movs	r2, #0
 800957e:	230f      	movs	r3, #15
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	701a      	strb	r2, [r3, #0]
 8009584:	781a      	ldrb	r2, [r3, #0]
 8009586:	2101      	movs	r1, #1
 8009588:	400a      	ands	r2, r1
 800958a:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d207      	bcs.n	80095a4 <TimestampIsReached+0x54>
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	429a      	cmp	r2, r3
 800959e:	d201      	bcs.n	80095a4 <TimestampIsReached+0x54>
 80095a0:	2201      	movs	r2, #1
 80095a2:	e000      	b.n	80095a6 <TimestampIsReached+0x56>
 80095a4:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 80095a6:	200e      	movs	r0, #14
 80095a8:	183b      	adds	r3, r7, r0
 80095aa:	701a      	strb	r2, [r3, #0]
 80095ac:	781a      	ldrb	r2, [r3, #0]
 80095ae:	2101      	movs	r1, #1
 80095b0:	400a      	ands	r2, r1
 80095b2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 80095b4:	230f      	movs	r3, #15
 80095b6:	18fb      	adds	r3, r7, r3
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d103      	bne.n	80095c6 <TimestampIsReached+0x76>
 80095be:	183b      	adds	r3, r7, r0
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e000      	b.n	80095cc <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	0018      	movs	r0, r3
 80095ce:	46bd      	mov	sp, r7
 80095d0:	b006      	add	sp, #24
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	7fffffff 	.word	0x7fffffff

080095d8 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80095e0:	f000 fba8 	bl	8009d34 <HAL_GetTick>
 80095e4:	0002      	movs	r2, r0
 80095e6:	4904      	ldr	r1, [pc, #16]	@ (80095f8 <AddTimestamp+0x20>)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	0018      	movs	r0, r3
 80095ec:	f00e fb6c 	bl	8017cc8 <siprintf>
}
 80095f0:	46c0      	nop			@ (mov r8, r8)
 80095f2:	46bd      	mov	sp, r7
 80095f4:	b002      	add	sp, #8
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	0801b56c 	.word	0x0801b56c

080095fc <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80095fc:	b40c      	push	{r2, r3}
 80095fe:	b5b0      	push	{r4, r5, r7, lr}
 8009600:	4c2b      	ldr	r4, [pc, #172]	@ (80096b0 <CreateLine+0xb4>)
 8009602:	44a5      	add	sp, r4
 8009604:	af00      	add	r7, sp, #0
 8009606:	0002      	movs	r2, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	4b2a      	ldr	r3, [pc, #168]	@ (80096b4 <CreateLine+0xb8>)
 800960c:	2182      	movs	r1, #130	@ 0x82
 800960e:	00c9      	lsls	r1, r1, #3
 8009610:	185b      	adds	r3, r3, r1
 8009612:	19db      	adds	r3, r3, r7
 8009614:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8009616:	4b28      	ldr	r3, [pc, #160]	@ (80096b8 <CreateLine+0xbc>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	4a26      	ldr	r2, [pc, #152]	@ (80096b4 <CreateLine+0xb8>)
 800961c:	1852      	adds	r2, r2, r1
 800961e:	19d2      	adds	r2, r2, r7
 8009620:	7812      	ldrb	r2, [r2, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d83b      	bhi.n	800969e <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	4924      	ldr	r1, [pc, #144]	@ (80096bc <CreateLine+0xc0>)
 800962a:	240c      	movs	r4, #12
 800962c:	193b      	adds	r3, r7, r4
 800962e:	0018      	movs	r0, r3
 8009630:	f00e fb4a 	bl	8017cc8 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8009634:	4b20      	ldr	r3, [pc, #128]	@ (80096b8 <CreateLine+0xbc>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d909      	bls.n	8009650 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800963c:	193b      	adds	r3, r7, r4
 800963e:	0018      	movs	r0, r3
 8009640:	f7f6 fd62 	bl	8000108 <strlen>
 8009644:	0002      	movs	r2, r0
 8009646:	193b      	adds	r3, r7, r4
 8009648:	189b      	adds	r3, r3, r2
 800964a:	0018      	movs	r0, r3
 800964c:	f7ff ffc4 	bl	80095d8 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8009650:	240c      	movs	r4, #12
 8009652:	193b      	adds	r3, r7, r4
 8009654:	0018      	movs	r0, r3
 8009656:	f7f6 fd57 	bl	8000108 <strlen>
 800965a:	0003      	movs	r3, r0
 800965c:	4918      	ldr	r1, [pc, #96]	@ (80096c0 <CreateLine+0xc4>)
 800965e:	187a      	adds	r2, r7, r1
 8009660:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8009662:	4b18      	ldr	r3, [pc, #96]	@ (80096c4 <CreateLine+0xc8>)
 8009664:	2508      	movs	r5, #8
 8009666:	195b      	adds	r3, r3, r5
 8009668:	19db      	adds	r3, r3, r7
 800966a:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800966c:	193a      	adds	r2, r7, r4
 800966e:	187b      	adds	r3, r7, r1
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	18d0      	adds	r0, r2, r3
 8009674:	187b      	adds	r3, r7, r1
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2280      	movs	r2, #128	@ 0x80
 800967a:	00d2      	lsls	r2, r2, #3
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	0019      	movs	r1, r3
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2283      	movs	r2, #131	@ 0x83
 8009684:	00d2      	lsls	r2, r2, #3
 8009686:	1952      	adds	r2, r2, r5
 8009688:	19d2      	adds	r2, r2, r7
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	f00e fbb4 	bl	8017df8 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8009690:	193a      	adds	r2, r7, r4
 8009692:	4b0d      	ldr	r3, [pc, #52]	@ (80096c8 <CreateLine+0xcc>)
 8009694:	0011      	movs	r1, r2
 8009696:	0018      	movs	r0, r3
 8009698:	f00e fb06 	bl	8017ca8 <iprintf>
 800969c:	e000      	b.n	80096a0 <CreateLine+0xa4>
    return;
 800969e:	46c0      	nop			@ (mov r8, r8)
}
 80096a0:	46bd      	mov	sp, r7
 80096a2:	2382      	movs	r3, #130	@ 0x82
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	449d      	add	sp, r3
 80096a8:	bcb0      	pop	{r4, r5, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	b002      	add	sp, #8
 80096ae:	4718      	bx	r3
 80096b0:	fffffbf0 	.word	0xfffffbf0
 80096b4:	fffffbf7 	.word	0xfffffbf7
 80096b8:	20000098 	.word	0x20000098
 80096bc:	0801b578 	.word	0x0801b578
 80096c0:	0000040c 	.word	0x0000040c
 80096c4:	0000041c 	.word	0x0000041c
 80096c8:	0801b57c 	.word	0x0801b57c

080096cc <_write>:

int _write(int fd, const void *buf, size_t count) {
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	4804      	ldr	r0, [pc, #16]	@ (80096f0 <_write+0x24>)
 80096e0:	2364      	movs	r3, #100	@ 0x64
 80096e2:	f007 fdd5 	bl	8011290 <HAL_UART_Transmit>
  return count;
 80096e6:	687b      	ldr	r3, [r7, #4]
}
 80096e8:	0018      	movs	r0, r3
 80096ea:	46bd      	mov	sp, r7
 80096ec:	b004      	add	sp, #16
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	200028f4 	.word	0x200028f4

080096f4 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	0002      	movs	r2, r0
 80096fc:	1dfb      	adds	r3, r7, #7
 80096fe:	701a      	strb	r2, [r3, #0]
 8009700:	4b03      	ldr	r3, [pc, #12]	@ (8009710 <SetVerboseLevel+0x1c>)
 8009702:	1dfa      	adds	r2, r7, #7
 8009704:	7812      	ldrb	r2, [r2, #0]
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	46c0      	nop			@ (mov r8, r8)
 800970a:	46bd      	mov	sp, r7
 800970c:	b002      	add	sp, #8
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000098 	.word	0x20000098

08009714 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009718:	f000 fb0c 	bl	8009d34 <HAL_GetTick>
 800971c:	0003      	movs	r3, r0
}
 800971e:	0018      	movs	r0, r3
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800972a:	4a0f      	ldr	r2, [pc, #60]	@ (8009768 <BinaryReleaseInfo+0x44>)
 800972c:	4b0f      	ldr	r3, [pc, #60]	@ (800976c <BinaryReleaseInfo+0x48>)
 800972e:	0019      	movs	r1, r3
 8009730:	2002      	movs	r0, #2
 8009732:	f7ff ff63 	bl	80095fc <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8009736:	480e      	ldr	r0, [pc, #56]	@ (8009770 <BinaryReleaseInfo+0x4c>)
 8009738:	4a0e      	ldr	r2, [pc, #56]	@ (8009774 <BinaryReleaseInfo+0x50>)
 800973a:	490c      	ldr	r1, [pc, #48]	@ (800976c <BinaryReleaseInfo+0x48>)
 800973c:	4b0e      	ldr	r3, [pc, #56]	@ (8009778 <BinaryReleaseInfo+0x54>)
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	0003      	movs	r3, r0
 8009742:	2002      	movs	r0, #2
 8009744:	f7ff ff5a 	bl	80095fc <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8009748:	4a0c      	ldr	r2, [pc, #48]	@ (800977c <BinaryReleaseInfo+0x58>)
 800974a:	4b08      	ldr	r3, [pc, #32]	@ (800976c <BinaryReleaseInfo+0x48>)
 800974c:	0019      	movs	r1, r3
 800974e:	2002      	movs	r0, #2
 8009750:	f7ff ff54 	bl	80095fc <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8009754:	4b0a      	ldr	r3, [pc, #40]	@ (8009780 <BinaryReleaseInfo+0x5c>)
 8009756:	4a0b      	ldr	r2, [pc, #44]	@ (8009784 <BinaryReleaseInfo+0x60>)
 8009758:	4904      	ldr	r1, [pc, #16]	@ (800976c <BinaryReleaseInfo+0x48>)
 800975a:	2002      	movs	r0, #2
 800975c:	f7ff ff4e 	bl	80095fc <CreateLine>
}
 8009760:	46c0      	nop			@ (mov r8, r8)
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	46c0      	nop			@ (mov r8, r8)
 8009768:	0801b584 	.word	0x0801b584
 800976c:	0801b5b0 	.word	0x0801b5b0
 8009770:	0801b5b4 	.word	0x0801b5b4
 8009774:	0801b5c0 	.word	0x0801b5c0
 8009778:	0801b5d4 	.word	0x0801b5d4
 800977c:	0801b5e0 	.word	0x0801b5e0
 8009780:	0801b5ec 	.word	0x0801b5ec
 8009784:	0801b5f4 	.word	0x0801b5f4

08009788 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009788:	b590      	push	{r4, r7, lr}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6039      	str	r1, [r7, #0]
 8009790:	0011      	movs	r1, r2
 8009792:	1dfb      	adds	r3, r7, #7
 8009794:	1c02      	adds	r2, r0, #0
 8009796:	701a      	strb	r2, [r3, #0]
 8009798:	1dbb      	adds	r3, r7, #6
 800979a:	1c0a      	adds	r2, r1, #0
 800979c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800979e:	4b08      	ldr	r3, [pc, #32]	@ (80097c0 <ReadRegister+0x38>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d008      	beq.n	80097b8 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 80097a6:	4b06      	ldr	r3, [pc, #24]	@ (80097c0 <ReadRegister+0x38>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	1dba      	adds	r2, r7, #6
 80097ac:	7814      	ldrb	r4, [r2, #0]
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	1dfa      	adds	r2, r7, #7
 80097b2:	7810      	ldrb	r0, [r2, #0]
 80097b4:	0022      	movs	r2, r4
 80097b6:	4798      	blx	r3
	}
}
 80097b8:	46c0      	nop			@ (mov r8, r8)
 80097ba:	46bd      	mov	sp, r7
 80097bc:	b003      	add	sp, #12
 80097be:	bd90      	pop	{r4, r7, pc}
 80097c0:	20002af4 	.word	0x20002af4

080097c4 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6039      	str	r1, [r7, #0]
 80097cc:	0011      	movs	r1, r2
 80097ce:	1dfb      	adds	r3, r7, #7
 80097d0:	1c02      	adds	r2, r0, #0
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	1dbb      	adds	r3, r7, #6
 80097d6:	1c0a      	adds	r2, r1, #0
 80097d8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80097da:	4b08      	ldr	r3, [pc, #32]	@ (80097fc <WriteRegister+0x38>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d008      	beq.n	80097f4 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80097e2:	4b06      	ldr	r3, [pc, #24]	@ (80097fc <WriteRegister+0x38>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	1dba      	adds	r2, r7, #6
 80097e8:	7814      	ldrb	r4, [r2, #0]
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	1dfa      	adds	r2, r7, #7
 80097ee:	7810      	ldrb	r0, [r2, #0]
 80097f0:	0022      	movs	r2, r4
 80097f2:	4798      	blx	r3
  }
}
 80097f4:	46c0      	nop			@ (mov r8, r8)
 80097f6:	46bd      	mov	sp, r7
 80097f8:	b003      	add	sp, #12
 80097fa:	bd90      	pop	{r4, r7, pc}
 80097fc:	20002af8 	.word	0x20002af8

08009800 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	000a      	movs	r2, r1
 800980a:	1cfb      	adds	r3, r7, #3
 800980c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800980e:	230f      	movs	r3, #15
 8009810:	18fb      	adds	r3, r7, r3
 8009812:	22ff      	movs	r2, #255	@ 0xff
 8009814:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009816:	230e      	movs	r3, #14
 8009818:	18fb      	adds	r3, r7, r3
 800981a:	2200      	movs	r2, #0
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	e037      	b.n	8009890 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009820:	230e      	movs	r3, #14
 8009822:	18fb      	adds	r3, r7, r3
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	18d3      	adds	r3, r2, r3
 800982a:	7819      	ldrb	r1, [r3, #0]
 800982c:	220f      	movs	r2, #15
 800982e:	18bb      	adds	r3, r7, r2
 8009830:	18ba      	adds	r2, r7, r2
 8009832:	7812      	ldrb	r2, [r2, #0]
 8009834:	404a      	eors	r2, r1
 8009836:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009838:	230d      	movs	r3, #13
 800983a:	18fb      	adds	r3, r7, r3
 800983c:	2200      	movs	r2, #0
 800983e:	701a      	strb	r2, [r3, #0]
 8009840:	e01b      	b.n	800987a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8009842:	210f      	movs	r1, #15
 8009844:	187b      	adds	r3, r7, r1
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	b25b      	sxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	da09      	bge.n	8009862 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800984e:	187b      	adds	r3, r7, r1
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	b25b      	sxtb	r3, r3
 8009856:	2231      	movs	r2, #49	@ 0x31
 8009858:	4053      	eors	r3, r2
 800985a:	b25a      	sxtb	r2, r3
 800985c:	187b      	adds	r3, r7, r1
 800985e:	701a      	strb	r2, [r3, #0]
 8009860:	e005      	b.n	800986e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8009862:	230f      	movs	r3, #15
 8009864:	18fa      	adds	r2, r7, r3
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	18db      	adds	r3, r3, r3
 800986c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800986e:	210d      	movs	r1, #13
 8009870:	187b      	adds	r3, r7, r1
 8009872:	781a      	ldrb	r2, [r3, #0]
 8009874:	187b      	adds	r3, r7, r1
 8009876:	3201      	adds	r2, #1
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	230d      	movs	r3, #13
 800987c:	18fb      	adds	r3, r7, r3
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b07      	cmp	r3, #7
 8009882:	d9de      	bls.n	8009842 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009884:	210e      	movs	r1, #14
 8009886:	187b      	adds	r3, r7, r1
 8009888:	781a      	ldrb	r2, [r3, #0]
 800988a:	187b      	adds	r3, r7, r1
 800988c:	3201      	adds	r2, #1
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	230e      	movs	r3, #14
 8009892:	18fa      	adds	r2, r7, r3
 8009894:	1cfb      	adds	r3, r7, #3
 8009896:	7812      	ldrb	r2, [r2, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d3c0      	bcc.n	8009820 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800989e:	230f      	movs	r3, #15
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	781b      	ldrb	r3, [r3, #0]
}
 80098a4:	0018      	movs	r0, r3
 80098a6:	46bd      	mov	sp, r7
 80098a8:	b004      	add	sp, #16
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 80098b6:	4b0a      	ldr	r3, [pc, #40]	@ (80098e0 <HIDS_Init+0x34>)
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 80098bc:	4b09      	ldr	r3, [pc, #36]	@ (80098e4 <HIDS_Init+0x38>)
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 80098c2:	4b09      	ldr	r3, [pc, #36]	@ (80098e8 <HIDS_Init+0x3c>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	0018      	movs	r0, r3
 80098c8:	f000 f8d0 	bl	8009a6c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 80098cc:	4b07      	ldr	r3, [pc, #28]	@ (80098ec <HIDS_Init+0x40>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	0018      	movs	r0, r3
 80098d2:	f000 f82b 	bl	800992c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 80098d6:	46c0      	nop			@ (mov r8, r8)
 80098d8:	46bd      	mov	sp, r7
 80098da:	b002      	add	sp, #8
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	46c0      	nop			@ (mov r8, r8)
 80098e0:	20002af4 	.word	0x20002af4
 80098e4:	20002af8 	.word	0x20002af8
 80098e8:	2000009a 	.word	0x2000009a
 80098ec:	20000099 	.word	0x20000099

080098f0 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 80098f4:	f7ff ff0e 	bl	8009714 <GetCurrentHalTicks>
 80098f8:	0002      	movs	r2, r0
 80098fa:	4b08      	ldr	r3, [pc, #32]	@ (800991c <HIDS_StartMeasurement+0x2c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	18d2      	adds	r2, r2, r3
 8009900:	4b07      	ldr	r3, [pc, #28]	@ (8009920 <HIDS_StartMeasurement+0x30>)
 8009902:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8009904:	4b07      	ldr	r3, [pc, #28]	@ (8009924 <HIDS_StartMeasurement+0x34>)
 8009906:	2201      	movs	r2, #1
 8009908:	0019      	movs	r1, r3
 800990a:	2044      	movs	r0, #68	@ 0x44
 800990c:	f7ff ff5a 	bl	80097c4 <WriteRegister>
  MeasurementDone = false;
 8009910:	4b05      	ldr	r3, [pc, #20]	@ (8009928 <HIDS_StartMeasurement+0x38>)
 8009912:	2200      	movs	r2, #0
 8009914:	701a      	strb	r2, [r3, #0]
}
 8009916:	46c0      	nop			@ (mov r8, r8)
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	200000a0 	.word	0x200000a0
 8009920:	2000009c 	.word	0x2000009c
 8009924:	2000009a 	.word	0x2000009a
 8009928:	20002b0a 	.word	0x20002b0a

0800992c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	0002      	movs	r2, r0
 8009934:	1dfb      	adds	r3, r7, #7
 8009936:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8009938:	4b03      	ldr	r3, [pc, #12]	@ (8009948 <HIDS_SetHeaterMode+0x1c>)
 800993a:	1dfa      	adds	r2, r7, #7
 800993c:	7812      	ldrb	r2, [r2, #0]
 800993e:	701a      	strb	r2, [r3, #0]
}
 8009940:	46c0      	nop			@ (mov r8, r8)
 8009942:	46bd      	mov	sp, r7
 8009944:	b002      	add	sp, #8
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20000099 	.word	0x20000099

0800994c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	781a      	ldrb	r2, [r3, #0]
 8009958:	210c      	movs	r1, #12
 800995a:	187b      	adds	r3, r7, r1
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	785a      	ldrb	r2, [r3, #1]
 8009962:	187b      	adds	r3, r7, r1
 8009964:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8009966:	240f      	movs	r4, #15
 8009968:	193b      	adds	r3, r7, r4
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	7892      	ldrb	r2, [r2, #2]
 800996e:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8009970:	187b      	adds	r3, r7, r1
 8009972:	2102      	movs	r1, #2
 8009974:	0018      	movs	r0, r3
 8009976:	f7ff ff43 	bl	8009800 <CalculateCRC>
 800997a:	0003      	movs	r3, r0
 800997c:	001a      	movs	r2, r3
 800997e:	193b      	adds	r3, r7, r4
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	4293      	cmp	r3, r2
 8009984:	d007      	beq.n	8009996 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8009986:	4a17      	ldr	r2, [pc, #92]	@ (80099e4 <CheckCRC+0x98>)
 8009988:	4b17      	ldr	r3, [pc, #92]	@ (80099e8 <CheckCRC+0x9c>)
 800998a:	0019      	movs	r1, r3
 800998c:	2001      	movs	r0, #1
 800998e:	f7ff fe35 	bl	80095fc <CreateLine>
		return false;
 8009992:	2300      	movs	r3, #0
 8009994:	e021      	b.n	80099da <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	78da      	ldrb	r2, [r3, #3]
 800999a:	2108      	movs	r1, #8
 800999c:	187b      	adds	r3, r7, r1
 800999e:	701a      	strb	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	791a      	ldrb	r2, [r3, #4]
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 80099a8:	240e      	movs	r4, #14
 80099aa:	193b      	adds	r3, r7, r4
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	7952      	ldrb	r2, [r2, #5]
 80099b0:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 80099b2:	187b      	adds	r3, r7, r1
 80099b4:	2102      	movs	r1, #2
 80099b6:	0018      	movs	r0, r3
 80099b8:	f7ff ff22 	bl	8009800 <CalculateCRC>
 80099bc:	0003      	movs	r3, r0
 80099be:	001a      	movs	r2, r3
 80099c0:	193b      	adds	r3, r7, r4
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d007      	beq.n	80099d8 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 80099c8:	4a08      	ldr	r2, [pc, #32]	@ (80099ec <CheckCRC+0xa0>)
 80099ca:	4b07      	ldr	r3, [pc, #28]	@ (80099e8 <CheckCRC+0x9c>)
 80099cc:	0019      	movs	r1, r3
 80099ce:	2001      	movs	r0, #1
 80099d0:	f7ff fe14 	bl	80095fc <CreateLine>
		return false;
 80099d4:	2300      	movs	r3, #0
 80099d6:	e000      	b.n	80099da <CheckCRC+0x8e>
	}
	return true;
 80099d8:	2301      	movs	r3, #1
}
 80099da:	0018      	movs	r0, r3
 80099dc:	46bd      	mov	sp, r7
 80099de:	b005      	add	sp, #20
 80099e0:	bd90      	pop	{r4, r7, pc}
 80099e2:	46c0      	nop			@ (mov r8, r8)
 80099e4:	0801b630 	.word	0x0801b630
 80099e8:	0801b658 	.word	0x0801b658
 80099ec:	0801b65c 	.word	0x0801b65c

080099f0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80099f6:	1dbb      	adds	r3, r7, #6
 80099f8:	2289      	movs	r2, #137	@ 0x89
 80099fa:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80099fc:	1dbb      	adds	r3, r7, #6
 80099fe:	2201      	movs	r2, #1
 8009a00:	0019      	movs	r1, r3
 8009a02:	2044      	movs	r0, #68	@ 0x44
 8009a04:	f7ff fede 	bl	80097c4 <WriteRegister>
	HAL_Delay(30);
 8009a08:	201e      	movs	r0, #30
 8009a0a:	f000 f99d 	bl	8009d48 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8009a0e:	4b14      	ldr	r3, [pc, #80]	@ (8009a60 <HIDS_DeviceConnected+0x70>)
 8009a10:	2206      	movs	r2, #6
 8009a12:	0019      	movs	r1, r3
 8009a14:	2044      	movs	r0, #68	@ 0x44
 8009a16:	f7ff feb7 	bl	8009788 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009a1a:	1dfb      	adds	r3, r7, #7
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	e011      	b.n	8009a46 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8009a22:	1dfb      	adds	r3, r7, #7
 8009a24:	7818      	ldrb	r0, [r3, #0]
 8009a26:	1dfb      	adds	r3, r7, #7
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8009a60 <HIDS_DeviceConnected+0x70>)
 8009a2c:	5cd3      	ldrb	r3, [r2, r3]
 8009a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8009a64 <HIDS_DeviceConnected+0x74>)
 8009a30:	490d      	ldr	r1, [pc, #52]	@ (8009a68 <HIDS_DeviceConnected+0x78>)
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	0003      	movs	r3, r0
 8009a36:	2002      	movs	r0, #2
 8009a38:	f7ff fde0 	bl	80095fc <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009a3c:	1dfb      	adds	r3, r7, #7
 8009a3e:	781a      	ldrb	r2, [r3, #0]
 8009a40:	1dfb      	adds	r3, r7, #7
 8009a42:	3201      	adds	r2, #1
 8009a44:	701a      	strb	r2, [r3, #0]
 8009a46:	1dfb      	adds	r3, r7, #7
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d9e9      	bls.n	8009a22 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8009a4e:	4b04      	ldr	r3, [pc, #16]	@ (8009a60 <HIDS_DeviceConnected+0x70>)
 8009a50:	0018      	movs	r0, r3
 8009a52:	f7ff ff7b 	bl	800994c <CheckCRC>
 8009a56:	0003      	movs	r3, r0
}
 8009a58:	0018      	movs	r0, r3
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	b002      	add	sp, #8
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	20002afc 	.word	0x20002afc
 8009a64:	0801b688 	.word	0x0801b688
 8009a68:	0801b62c 	.word	0x0801b62c

08009a6c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	0002      	movs	r2, r0
 8009a74:	1dfb      	adds	r3, r7, #7
 8009a76:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8009a78:	4b03      	ldr	r3, [pc, #12]	@ (8009a88 <HIDS_SetMeasurementMode+0x1c>)
 8009a7a:	1dfa      	adds	r2, r7, #7
 8009a7c:	7812      	ldrb	r2, [r2, #0]
 8009a7e:	701a      	strb	r2, [r3, #0]
}
 8009a80:	46c0      	nop			@ (mov r8, r8)
 8009a82:	46bd      	mov	sp, r7
 8009a84:	b002      	add	sp, #8
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	2000009a 	.word	0x2000009a

08009a8c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8009a90:	4b04      	ldr	r3, [pc, #16]	@ (8009aa4 <HIDS_MeasurementReady+0x18>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	0018      	movs	r0, r3
 8009a96:	f7ff fd5b 	bl	8009550 <TimestampIsReached>
 8009a9a:	0003      	movs	r3, r0
}
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	46c0      	nop			@ (mov r8, r8)
 8009aa4:	2000009c 	.word	0x2000009c

08009aa8 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af02      	add	r7, sp, #8
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8009ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8009bec <HIDS_GetMeasurementValues+0x144>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <HIDS_GetMeasurementValues+0x16>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e092      	b.n	8009be4 <HIDS_GetMeasurementValues+0x13c>
  if(!HIDS_MeasurementReady()) return false;
 8009abe:	f7ff ffe5 	bl	8009a8c <HIDS_MeasurementReady>
 8009ac2:	0003      	movs	r3, r0
 8009ac4:	001a      	movs	r2, r3
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	4053      	eors	r3, r2
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <HIDS_GetMeasurementValues+0x2c>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	e087      	b.n	8009be4 <HIDS_GetMeasurementValues+0x13c>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8009ad4:	4b46      	ldr	r3, [pc, #280]	@ (8009bf0 <HIDS_GetMeasurementValues+0x148>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	4b46      	ldr	r3, [pc, #280]	@ (8009bf4 <HIDS_GetMeasurementValues+0x14c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	0019      	movs	r1, r3
 8009ade:	0010      	movs	r0, r2
 8009ae0:	f7f6 fb2e 	bl	8000140 <__udivsi3>
 8009ae4:	0003      	movs	r3, r0
 8009ae6:	613b      	str	r3, [r7, #16]
  float currentTemperature;
  float currentHumidity;
  //static float temperatures[HIDS_MAX_MEASUREMENTS];
  //static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8009ae8:	4b43      	ldr	r3, [pc, #268]	@ (8009bf8 <HIDS_GetMeasurementValues+0x150>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	1c58      	adds	r0, r3, #1
 8009aee:	4a43      	ldr	r2, [pc, #268]	@ (8009bfc <HIDS_GetMeasurementValues+0x154>)
 8009af0:	4943      	ldr	r1, [pc, #268]	@ (8009c00 <HIDS_GetMeasurementValues+0x158>)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	0003      	movs	r3, r0
 8009af8:	2003      	movs	r0, #3
 8009afa:	f7ff fd7f 	bl	80095fc <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8009afe:	4b41      	ldr	r3, [pc, #260]	@ (8009c04 <HIDS_GetMeasurementValues+0x15c>)
 8009b00:	2206      	movs	r2, #6
 8009b02:	0019      	movs	r1, r3
 8009b04:	2044      	movs	r0, #68	@ 0x44
 8009b06:	f7ff fe3f 	bl	8009788 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8009b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c04 <HIDS_GetMeasurementValues+0x15c>)
 8009b0c:	0018      	movs	r0, r3
 8009b0e:	f7ff ff1d 	bl	800994c <CheckCRC>
 8009b12:	0003      	movs	r3, r0
 8009b14:	001a      	movs	r2, r3
 8009b16:	2301      	movs	r3, #1
 8009b18:	4053      	eors	r3, r2
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d011      	beq.n	8009b44 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8009b20:	2317      	movs	r3, #23
 8009b22:	18fb      	adds	r3, r7, r3
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]
 8009b28:	e005      	b.n	8009b36 <HIDS_GetMeasurementValues+0x8e>
 8009b2a:	2117      	movs	r1, #23
 8009b2c:	187b      	adds	r3, r7, r1
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	187b      	adds	r3, r7, r1
 8009b32:	3201      	adds	r2, #1
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	2317      	movs	r3, #23
 8009b38:	18fb      	adds	r3, r7, r3
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b05      	cmp	r3, #5
 8009b3e:	d9f4      	bls.n	8009b2a <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8009b40:	2300      	movs	r3, #0
 8009b42:	e04f      	b.n	8009be4 <HIDS_GetMeasurementValues+0x13c>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8009b44:	4b2f      	ldr	r3, [pc, #188]	@ (8009c04 <HIDS_GetMeasurementValues+0x15c>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	021b      	lsls	r3, r3, #8
 8009b4a:	22af      	movs	r2, #175	@ 0xaf
 8009b4c:	4353      	muls	r3, r2
 8009b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8009c04 <HIDS_GetMeasurementValues+0x15c>)
 8009b50:	7852      	ldrb	r2, [r2, #1]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	0018      	movs	r0, r3
 8009b56:	f7f9 fbb1 	bl	80032bc <__aeabi_i2d>
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8009c08 <HIDS_GetMeasurementValues+0x160>)
 8009b5e:	f7f8 f8a7 	bl	8001cb0 <__aeabi_ddiv>
 8009b62:	0002      	movs	r2, r0
 8009b64:	000b      	movs	r3, r1
 8009b66:	0010      	movs	r0, r2
 8009b68:	0019      	movs	r1, r3
 8009b6a:	f7f9 fc41 	bl	80033f0 <__aeabi_d2f>
 8009b6e:	1c03      	adds	r3, r0, #0
 8009b70:	60fb      	str	r3, [r7, #12]
	currentTemperature += -45;
 8009b72:	4926      	ldr	r1, [pc, #152]	@ (8009c0c <HIDS_GetMeasurementValues+0x164>)
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7f7 facf 	bl	8001118 <__aeabi_fsub>
 8009b7a:	1c03      	adds	r3, r0, #0
 8009b7c:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8009b7e:	4b21      	ldr	r3, [pc, #132]	@ (8009c04 <HIDS_GetMeasurementValues+0x15c>)
 8009b80:	78db      	ldrb	r3, [r3, #3]
 8009b82:	021b      	lsls	r3, r3, #8
 8009b84:	4a1f      	ldr	r2, [pc, #124]	@ (8009c04 <HIDS_GetMeasurementValues+0x15c>)
 8009b86:	7912      	ldrb	r2, [r2, #4]
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	0013      	movs	r3, r2
 8009b8c:	015b      	lsls	r3, r3, #5
 8009b8e:	1a9b      	subs	r3, r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	189b      	adds	r3, r3, r2
 8009b94:	0018      	movs	r0, r3
 8009b96:	f7f9 fb91 	bl	80032bc <__aeabi_i2d>
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8009c08 <HIDS_GetMeasurementValues+0x160>)
 8009b9e:	f7f8 f887 	bl	8001cb0 <__aeabi_ddiv>
 8009ba2:	0002      	movs	r2, r0
 8009ba4:	000b      	movs	r3, r1
 8009ba6:	0010      	movs	r0, r2
 8009ba8:	0019      	movs	r1, r3
 8009baa:	f7f9 fc21 	bl	80033f0 <__aeabi_d2f>
 8009bae:	1c03      	adds	r3, r0, #0
 8009bb0:	60bb      	str	r3, [r7, #8]
	currentHumidity += -6;
 8009bb2:	4917      	ldr	r1, [pc, #92]	@ (8009c10 <HIDS_GetMeasurementValues+0x168>)
 8009bb4:	68b8      	ldr	r0, [r7, #8]
 8009bb6:	f7f7 faaf 	bl	8001118 <__aeabi_fsub>
 8009bba:	1c03      	adds	r3, r0, #0
 8009bbc:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	0011      	movs	r1, r2
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	f7fe feab 	bl	800892c <SGP_GetHT>

   measurements = 0;
 8009bd6:	4b08      	ldr	r3, [pc, #32]	@ (8009bf8 <HIDS_GetMeasurementValues+0x150>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 8009bdc:	4b03      	ldr	r3, [pc, #12]	@ (8009bec <HIDS_GetMeasurementValues+0x144>)
 8009bde:	2201      	movs	r2, #1
 8009be0:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
   return true;
 8009be2:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.
	//HIDS_StartMeasurement();
	//return false;
}
 8009be4:	0018      	movs	r0, r3
 8009be6:	46bd      	mov	sp, r7
 8009be8:	b006      	add	sp, #24
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20002b0a 	.word	0x20002b0a
 8009bf0:	200000a4 	.word	0x200000a4
 8009bf4:	200000a0 	.word	0x200000a0
 8009bf8:	20002b0c 	.word	0x20002b0c
 8009bfc:	0801b6a8 	.word	0x0801b6a8
 8009c00:	0801b6d4 	.word	0x0801b6d4
 8009c04:	20002b04 	.word	0x20002b04
 8009c08:	40efffe0 	.word	0x40efffe0
 8009c0c:	42340000 	.word	0x42340000
 8009c10:	40c00000 	.word	0x40c00000

08009c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009c14:	480d      	ldr	r0, [pc, #52]	@ (8009c4c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009c16:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009c18:	f7ff f94c 	bl	8008eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009c1c:	480c      	ldr	r0, [pc, #48]	@ (8009c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8009c1e:	490d      	ldr	r1, [pc, #52]	@ (8009c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009c20:	4a0d      	ldr	r2, [pc, #52]	@ (8009c58 <LoopForever+0xe>)
  movs r3, #0
 8009c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c24:	e002      	b.n	8009c2c <LoopCopyDataInit>

08009c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c2a:	3304      	adds	r3, #4

08009c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c30:	d3f9      	bcc.n	8009c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c32:	4a0a      	ldr	r2, [pc, #40]	@ (8009c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8009c34:	4c0a      	ldr	r4, [pc, #40]	@ (8009c60 <LoopForever+0x16>)
  movs r3, #0
 8009c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c38:	e001      	b.n	8009c3e <LoopFillZerobss>

08009c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c3c:	3204      	adds	r2, #4

08009c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c40:	d3fb      	bcc.n	8009c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009c42:	f00e f97d 	bl	8017f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c46:	f7fc fa5b 	bl	8006100 <main>

08009c4a <LoopForever>:

LoopForever:
    b LoopForever
 8009c4a:	e7fe      	b.n	8009c4a <LoopForever>
   ldr   r0, =_estack
 8009c4c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8009c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c54:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8009c58:	0801be68 	.word	0x0801be68
  ldr r2, =_sbss
 8009c5c:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8009c60:	20003f14 	.word	0x20003f14

08009c64 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c64:	e7fe      	b.n	8009c64 <ADC1_COMP_IRQHandler>
	...

08009c68 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009c6e:	1dfb      	adds	r3, r7, #7
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009c74:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca4 <HAL_Init+0x3c>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca4 <HAL_Init+0x3c>)
 8009c7a:	2140      	movs	r1, #64	@ 0x40
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009c80:	2003      	movs	r0, #3
 8009c82:	f000 f811 	bl	8009ca8 <HAL_InitTick>
 8009c86:	1e03      	subs	r3, r0, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8009c8a:	1dfb      	adds	r3, r7, #7
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	e001      	b.n	8009c96 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009c92:	f7fe ffe5 	bl	8008c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009c96:	1dfb      	adds	r3, r7, #7
 8009c98:	781b      	ldrb	r3, [r3, #0]
}
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	b002      	add	sp, #8
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	46c0      	nop			@ (mov r8, r8)
 8009ca4:	40022000 	.word	0x40022000

08009ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009ca8:	b590      	push	{r4, r7, lr}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009cb0:	4b14      	ldr	r3, [pc, #80]	@ (8009d04 <HAL_InitTick+0x5c>)
 8009cb2:	681c      	ldr	r4, [r3, #0]
 8009cb4:	4b14      	ldr	r3, [pc, #80]	@ (8009d08 <HAL_InitTick+0x60>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	0019      	movs	r1, r3
 8009cba:	23fa      	movs	r3, #250	@ 0xfa
 8009cbc:	0098      	lsls	r0, r3, #2
 8009cbe:	f7f6 fa3f 	bl	8000140 <__udivsi3>
 8009cc2:	0003      	movs	r3, r0
 8009cc4:	0019      	movs	r1, r3
 8009cc6:	0020      	movs	r0, r4
 8009cc8:	f7f6 fa3a 	bl	8000140 <__udivsi3>
 8009ccc:	0003      	movs	r3, r0
 8009cce:	0018      	movs	r0, r3
 8009cd0:	f000 fccb 	bl	800a66a <HAL_SYSTICK_Config>
 8009cd4:	1e03      	subs	r3, r0, #0
 8009cd6:	d001      	beq.n	8009cdc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e00f      	b.n	8009cfc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d80b      	bhi.n	8009cfa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	425b      	negs	r3, r3
 8009ce8:	2200      	movs	r2, #0
 8009cea:	0018      	movs	r0, r3
 8009cec:	f000 fc98 	bl	800a620 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009cf0:	4b06      	ldr	r3, [pc, #24]	@ (8009d0c <HAL_InitTick+0x64>)
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e000      	b.n	8009cfc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
}
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	b003      	add	sp, #12
 8009d02:	bd90      	pop	{r4, r7, pc}
 8009d04:	20000094 	.word	0x20000094
 8009d08:	200000ac 	.word	0x200000ac
 8009d0c:	200000a8 	.word	0x200000a8

08009d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d14:	4b05      	ldr	r3, [pc, #20]	@ (8009d2c <HAL_IncTick+0x1c>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	001a      	movs	r2, r3
 8009d1a:	4b05      	ldr	r3, [pc, #20]	@ (8009d30 <HAL_IncTick+0x20>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	18d2      	adds	r2, r2, r3
 8009d20:	4b03      	ldr	r3, [pc, #12]	@ (8009d30 <HAL_IncTick+0x20>)
 8009d22:	601a      	str	r2, [r3, #0]
}
 8009d24:	46c0      	nop			@ (mov r8, r8)
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	46c0      	nop			@ (mov r8, r8)
 8009d2c:	200000ac 	.word	0x200000ac
 8009d30:	20002b10 	.word	0x20002b10

08009d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	af00      	add	r7, sp, #0
  return uwTick;
 8009d38:	4b02      	ldr	r3, [pc, #8]	@ (8009d44 <HAL_GetTick+0x10>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
}
 8009d3c:	0018      	movs	r0, r3
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	46c0      	nop			@ (mov r8, r8)
 8009d44:	20002b10 	.word	0x20002b10

08009d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d50:	f7ff fff0 	bl	8009d34 <HAL_GetTick>
 8009d54:	0003      	movs	r3, r0
 8009d56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	d005      	beq.n	8009d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d62:	4b0a      	ldr	r3, [pc, #40]	@ (8009d8c <HAL_Delay+0x44>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	001a      	movs	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	189b      	adds	r3, r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d6e:	46c0      	nop			@ (mov r8, r8)
 8009d70:	f7ff ffe0 	bl	8009d34 <HAL_GetTick>
 8009d74:	0002      	movs	r2, r0
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d8f7      	bhi.n	8009d70 <HAL_Delay+0x28>
  {
  }
}
 8009d80:	46c0      	nop			@ (mov r8, r8)
 8009d82:	46c0      	nop			@ (mov r8, r8)
 8009d84:	46bd      	mov	sp, r7
 8009d86:	b004      	add	sp, #16
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	46c0      	nop			@ (mov r8, r8)
 8009d8c:	200000ac 	.word	0x200000ac

08009d90 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8009d94:	4b02      	ldr	r3, [pc, #8]	@ (8009da0 <HAL_GetUIDw0+0x10>)
 8009d96:	681b      	ldr	r3, [r3, #0]
}
 8009d98:	0018      	movs	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	46c0      	nop			@ (mov r8, r8)
 8009da0:	1ff80050 	.word	0x1ff80050

08009da4 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8009da8:	4b02      	ldr	r3, [pc, #8]	@ (8009db4 <HAL_GetUIDw1+0x10>)
 8009daa:	681b      	ldr	r3, [r3, #0]
}
 8009dac:	0018      	movs	r0, r3
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	46c0      	nop			@ (mov r8, r8)
 8009db4:	1ff80054 	.word	0x1ff80054

08009db8 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8009dbc:	4b02      	ldr	r3, [pc, #8]	@ (8009dc8 <HAL_GetUIDw2+0x10>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
}
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	46c0      	nop			@ (mov r8, r8)
 8009dc8:	1ff80064 	.word	0x1ff80064

08009dcc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e159      	b.n	800a092 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10a      	bne.n	8009dfc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2250      	movs	r2, #80	@ 0x50
 8009df0:	2100      	movs	r1, #0
 8009df2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	0018      	movs	r0, r3
 8009df8:	f7fb fc96 	bl	8005728 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e00:	2210      	movs	r2, #16
 8009e02:	4013      	ands	r3, r2
 8009e04:	2b10      	cmp	r3, #16
 8009e06:	d005      	beq.n	8009e14 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	2204      	movs	r2, #4
 8009e10:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009e12:	d00b      	beq.n	8009e2c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e18:	2210      	movs	r2, #16
 8009e1a:	431a      	orrs	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2250      	movs	r2, #80	@ 0x50
 8009e24:	2100      	movs	r1, #0
 8009e26:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e132      	b.n	800a092 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e30:	4a9a      	ldr	r2, [pc, #616]	@ (800a09c <HAL_ADC_Init+0x2d0>)
 8009e32:	4013      	ands	r3, r2
 8009e34:	2202      	movs	r2, #2
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2203      	movs	r2, #3
 8009e44:	4013      	ands	r3, r2
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d108      	bne.n	8009e5c <HAL_ADC_Init+0x90>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2201      	movs	r2, #1
 8009e52:	4013      	ands	r3, r2
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d101      	bne.n	8009e5c <HAL_ADC_Init+0x90>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e000      	b.n	8009e5e <HAL_ADC_Init+0x92>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d149      	bne.n	8009ef6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	23c0      	movs	r3, #192	@ 0xc0
 8009e68:	061b      	lsls	r3, r3, #24
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d00b      	beq.n	8009e86 <HAL_ADC_Init+0xba>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	2380      	movs	r3, #128	@ 0x80
 8009e74:	05db      	lsls	r3, r3, #23
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d005      	beq.n	8009e86 <HAL_ADC_Init+0xba>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	2380      	movs	r3, #128	@ 0x80
 8009e80:	061b      	lsls	r3, r3, #24
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d111      	bne.n	8009eaa <HAL_ADC_Init+0xde>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	691a      	ldr	r2, [r3, #16]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	0092      	lsls	r2, r2, #2
 8009e92:	0892      	lsrs	r2, r2, #2
 8009e94:	611a      	str	r2, [r3, #16]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6919      	ldr	r1, [r3, #16]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	611a      	str	r2, [r3, #16]
 8009ea8:	e014      	b.n	8009ed4 <HAL_ADC_Init+0x108>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	691a      	ldr	r2, [r3, #16]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	0092      	lsls	r2, r2, #2
 8009eb6:	0892      	lsrs	r2, r2, #2
 8009eb8:	611a      	str	r2, [r3, #16]
 8009eba:	4b79      	ldr	r3, [pc, #484]	@ (800a0a0 <HAL_ADC_Init+0x2d4>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	4b78      	ldr	r3, [pc, #480]	@ (800a0a0 <HAL_ADC_Init+0x2d4>)
 8009ec0:	4978      	ldr	r1, [pc, #480]	@ (800a0a4 <HAL_ADC_Init+0x2d8>)
 8009ec2:	400a      	ands	r2, r1
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	4b76      	ldr	r3, [pc, #472]	@ (800a0a0 <HAL_ADC_Init+0x2d4>)
 8009ec8:	6819      	ldr	r1, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	4b74      	ldr	r3, [pc, #464]	@ (800a0a0 <HAL_ADC_Init+0x2d4>)
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2118      	movs	r1, #24
 8009ee0:	438a      	bics	r2, r1
 8009ee2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68d9      	ldr	r1, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8009ef6:	4b6a      	ldr	r3, [pc, #424]	@ (800a0a0 <HAL_ADC_Init+0x2d4>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	4b69      	ldr	r3, [pc, #420]	@ (800a0a0 <HAL_ADC_Init+0x2d4>)
 8009efc:	496a      	ldr	r1, [pc, #424]	@ (800a0a8 <HAL_ADC_Init+0x2dc>)
 8009efe:	400a      	ands	r2, r1
 8009f00:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8009f02:	4b67      	ldr	r3, [pc, #412]	@ (800a0a0 <HAL_ADC_Init+0x2d4>)
 8009f04:	6819      	ldr	r1, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0a:	065a      	lsls	r2, r3, #25
 8009f0c:	4b64      	ldr	r3, [pc, #400]	@ (800a0a0 <HAL_ADC_Init+0x2d4>)
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	2380      	movs	r3, #128	@ 0x80
 8009f1a:	055b      	lsls	r3, r3, #21
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	d108      	bne.n	8009f32 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689a      	ldr	r2, [r3, #8]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2180      	movs	r1, #128	@ 0x80
 8009f2c:	0549      	lsls	r1, r1, #21
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68da      	ldr	r2, [r3, #12]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	495b      	ldr	r1, [pc, #364]	@ (800a0ac <HAL_ADC_Init+0x2e0>)
 8009f3e:	400a      	ands	r2, r1
 8009f40:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68d9      	ldr	r1, [r3, #12]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d101      	bne.n	8009f58 <HAL_ADC_Init+0x18c>
 8009f54:	2304      	movs	r3, #4
 8009f56:	e000      	b.n	8009f5a <HAL_ADC_Init+0x18e>
 8009f58:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009f5a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2020      	movs	r0, #32
 8009f60:	5c1b      	ldrb	r3, [r3, r0]
 8009f62:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009f64:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	202c      	movs	r0, #44	@ 0x2c
 8009f6a:	5c1b      	ldrb	r3, [r3, r0]
 8009f6c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009f6e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009f74:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8009f7c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009f84:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f92:	23c2      	movs	r3, #194	@ 0xc2
 8009f94:	33ff      	adds	r3, #255	@ 0xff
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d00b      	beq.n	8009fb2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68d9      	ldr	r1, [r3, #12]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009fa8:	431a      	orrs	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2221      	movs	r2, #33	@ 0x21
 8009fb6:	5c9b      	ldrb	r3, [r3, r2]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d11a      	bne.n	8009ff2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	5c9b      	ldrb	r3, [r3, r2]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d109      	bne.n	8009fda <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2180      	movs	r1, #128	@ 0x80
 8009fd2:	0249      	lsls	r1, r1, #9
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	60da      	str	r2, [r3, #12]
 8009fd8:	e00b      	b.n	8009ff2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fde:	2220      	movs	r2, #32
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fea:	2201      	movs	r2, #1
 8009fec:	431a      	orrs	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d11f      	bne.n	800a03a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	691a      	ldr	r2, [r3, #16]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	492a      	ldr	r1, [pc, #168]	@ (800a0b0 <HAL_ADC_Init+0x2e4>)
 800a006:	400a      	ands	r2, r1
 800a008:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6919      	ldr	r1, [r3, #16]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a018:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800a01e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2101      	movs	r1, #1
 800a034:	430a      	orrs	r2, r1
 800a036:	611a      	str	r2, [r3, #16]
 800a038:	e00e      	b.n	800a058 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	2201      	movs	r2, #1
 800a042:	4013      	ands	r3, r2
 800a044:	2b01      	cmp	r3, #1
 800a046:	d107      	bne.n	800a058 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	691a      	ldr	r2, [r3, #16]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2101      	movs	r1, #1
 800a054:	438a      	bics	r2, r1
 800a056:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	695a      	ldr	r2, [r3, #20]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2107      	movs	r1, #7
 800a064:	438a      	bics	r2, r1
 800a066:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6959      	ldr	r1, [r3, #20]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a084:	2203      	movs	r2, #3
 800a086:	4393      	bics	r3, r2
 800a088:	2201      	movs	r2, #1
 800a08a:	431a      	orrs	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	0018      	movs	r0, r3
 800a094:	46bd      	mov	sp, r7
 800a096:	b002      	add	sp, #8
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	46c0      	nop			@ (mov r8, r8)
 800a09c:	fffffefd 	.word	0xfffffefd
 800a0a0:	40012708 	.word	0x40012708
 800a0a4:	ffc3ffff 	.word	0xffc3ffff
 800a0a8:	fdffffff 	.word	0xfdffffff
 800a0ac:	fffe0219 	.word	0xfffe0219
 800a0b0:	fffffc03 	.word	0xfffffc03

0800a0b4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a0bc:	230f      	movs	r3, #15
 800a0be:	18fb      	adds	r3, r7, r3
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	2204      	movs	r2, #4
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	d138      	bne.n	800a142 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2250      	movs	r2, #80	@ 0x50
 800a0d4:	5c9b      	ldrb	r3, [r3, r2]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d101      	bne.n	800a0de <HAL_ADC_Start+0x2a>
 800a0da:	2302      	movs	r3, #2
 800a0dc:	e038      	b.n	800a150 <HAL_ADC_Start+0x9c>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2250      	movs	r2, #80	@ 0x50
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d007      	beq.n	800a0fe <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800a0ee:	230f      	movs	r3, #15
 800a0f0:	18fc      	adds	r4, r7, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	f000 f95f 	bl	800a3b8 <ADC_Enable>
 800a0fa:	0003      	movs	r3, r0
 800a0fc:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a0fe:	230f      	movs	r3, #15
 800a100:	18fb      	adds	r3, r7, r3
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d120      	bne.n	800a14a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a10c:	4a12      	ldr	r2, [pc, #72]	@ (800a158 <HAL_ADC_Start+0xa4>)
 800a10e:	4013      	ands	r3, r2
 800a110:	2280      	movs	r2, #128	@ 0x80
 800a112:	0052      	lsls	r2, r2, #1
 800a114:	431a      	orrs	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2250      	movs	r2, #80	@ 0x50
 800a124:	2100      	movs	r1, #0
 800a126:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	221c      	movs	r2, #28
 800a12e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689a      	ldr	r2, [r3, #8]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2104      	movs	r1, #4
 800a13c:	430a      	orrs	r2, r1
 800a13e:	609a      	str	r2, [r3, #8]
 800a140:	e003      	b.n	800a14a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a142:	230f      	movs	r3, #15
 800a144:	18fb      	adds	r3, r7, r3
 800a146:	2202      	movs	r2, #2
 800a148:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a14a:	230f      	movs	r3, #15
 800a14c:	18fb      	adds	r3, r7, r3
 800a14e:	781b      	ldrb	r3, [r3, #0]
}
 800a150:	0018      	movs	r0, r3
 800a152:	46bd      	mov	sp, r7
 800a154:	b005      	add	sp, #20
 800a156:	bd90      	pop	{r4, r7, pc}
 800a158:	fffff0fe 	.word	0xfffff0fe

0800a15c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800a16a:	2300      	movs	r3, #0
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	2b08      	cmp	r3, #8
 800a174:	d102      	bne.n	800a17c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800a176:	2308      	movs	r3, #8
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	e014      	b.n	800a1a6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	4013      	ands	r3, r2
 800a186:	2b01      	cmp	r3, #1
 800a188:	d10b      	bne.n	800a1a2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a18e:	2220      	movs	r2, #32
 800a190:	431a      	orrs	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2250      	movs	r2, #80	@ 0x50
 800a19a:	2100      	movs	r1, #0
 800a19c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e072      	b.n	800a288 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a1a6:	f7ff fdc5 	bl	8009d34 <HAL_GetTick>
 800a1aa:	0003      	movs	r3, r0
 800a1ac:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a1ae:	e01f      	b.n	800a1f0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	d01c      	beq.n	800a1f0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d007      	beq.n	800a1cc <HAL_ADC_PollForConversion+0x70>
 800a1bc:	f7ff fdba 	bl	8009d34 <HAL_GetTick>
 800a1c0:	0002      	movs	r2, r0
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d211      	bcs.n	800a1f0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	d10b      	bne.n	800a1f0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1dc:	2204      	movs	r2, #4
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2250      	movs	r2, #80	@ 0x50
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e04b      	b.n	800a288 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	d0d9      	beq.n	800a1b0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a200:	2280      	movs	r2, #128	@ 0x80
 800a202:	0092      	lsls	r2, r2, #2
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68da      	ldr	r2, [r3, #12]
 800a210:	23c0      	movs	r3, #192	@ 0xc0
 800a212:	011b      	lsls	r3, r3, #4
 800a214:	4013      	ands	r3, r2
 800a216:	d12e      	bne.n	800a276 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2220      	movs	r2, #32
 800a21c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d129      	bne.n	800a276 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2208      	movs	r2, #8
 800a22a:	4013      	ands	r3, r2
 800a22c:	2b08      	cmp	r3, #8
 800a22e:	d122      	bne.n	800a276 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	2204      	movs	r2, #4
 800a238:	4013      	ands	r3, r2
 800a23a:	d110      	bne.n	800a25e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	210c      	movs	r1, #12
 800a248:	438a      	bics	r2, r1
 800a24a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a250:	4a0f      	ldr	r2, [pc, #60]	@ (800a290 <HAL_ADC_PollForConversion+0x134>)
 800a252:	4013      	ands	r3, r2
 800a254:	2201      	movs	r2, #1
 800a256:	431a      	orrs	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a25c:	e00b      	b.n	800a276 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a262:	2220      	movs	r2, #32
 800a264:	431a      	orrs	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a26e:	2201      	movs	r2, #1
 800a270:	431a      	orrs	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	220c      	movs	r2, #12
 800a284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	0018      	movs	r0, r3
 800a28a:	46bd      	mov	sp, r7
 800a28c:	b004      	add	sp, #16
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	fffffefe 	.word	0xfffffefe

0800a294 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	b002      	add	sp, #8
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2250      	movs	r2, #80	@ 0x50
 800a2ba:	5c9b      	ldrb	r3, [r3, r2]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d101      	bne.n	800a2c4 <HAL_ADC_ConfigChannel+0x18>
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e06c      	b.n	800a39e <HAL_ADC_ConfigChannel+0xf2>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2250      	movs	r2, #80	@ 0x50
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	2204      	movs	r2, #4
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	d00b      	beq.n	800a2f0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2dc:	2220      	movs	r2, #32
 800a2de:	431a      	orrs	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2250      	movs	r2, #80	@ 0x50
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e056      	b.n	800a39e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	4a2c      	ldr	r2, [pc, #176]	@ (800a3a8 <HAL_ADC_ConfigChannel+0xfc>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d028      	beq.n	800a34c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	035b      	lsls	r3, r3, #13
 800a306:	0b5a      	lsrs	r2, r3, #13
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	430a      	orrs	r2, r1
 800a30e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	2380      	movs	r3, #128	@ 0x80
 800a316:	02db      	lsls	r3, r3, #11
 800a318:	4013      	ands	r3, r2
 800a31a:	d009      	beq.n	800a330 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800a31c:	4b23      	ldr	r3, [pc, #140]	@ (800a3ac <HAL_ADC_ConfigChannel+0x100>)
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	4b22      	ldr	r3, [pc, #136]	@ (800a3ac <HAL_ADC_ConfigChannel+0x100>)
 800a322:	2180      	movs	r1, #128	@ 0x80
 800a324:	0409      	lsls	r1, r1, #16
 800a326:	430a      	orrs	r2, r1
 800a328:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800a32a:	200a      	movs	r0, #10
 800a32c:	f000 f8ac 	bl	800a488 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	2380      	movs	r3, #128	@ 0x80
 800a336:	029b      	lsls	r3, r3, #10
 800a338:	4013      	ands	r3, r2
 800a33a:	d02b      	beq.n	800a394 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800a33c:	4b1b      	ldr	r3, [pc, #108]	@ (800a3ac <HAL_ADC_ConfigChannel+0x100>)
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	4b1a      	ldr	r3, [pc, #104]	@ (800a3ac <HAL_ADC_ConfigChannel+0x100>)
 800a342:	2180      	movs	r1, #128	@ 0x80
 800a344:	03c9      	lsls	r1, r1, #15
 800a346:	430a      	orrs	r2, r1
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	e023      	b.n	800a394 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	035b      	lsls	r3, r3, #13
 800a358:	0b5b      	lsrs	r3, r3, #13
 800a35a:	43d9      	mvns	r1, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	400a      	ands	r2, r1
 800a362:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	2380      	movs	r3, #128	@ 0x80
 800a36a:	02db      	lsls	r3, r3, #11
 800a36c:	4013      	ands	r3, r2
 800a36e:	d005      	beq.n	800a37c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800a370:	4b0e      	ldr	r3, [pc, #56]	@ (800a3ac <HAL_ADC_ConfigChannel+0x100>)
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ac <HAL_ADC_ConfigChannel+0x100>)
 800a376:	490e      	ldr	r1, [pc, #56]	@ (800a3b0 <HAL_ADC_ConfigChannel+0x104>)
 800a378:	400a      	ands	r2, r1
 800a37a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	2380      	movs	r3, #128	@ 0x80
 800a382:	029b      	lsls	r3, r3, #10
 800a384:	4013      	ands	r3, r2
 800a386:	d005      	beq.n	800a394 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800a388:	4b08      	ldr	r3, [pc, #32]	@ (800a3ac <HAL_ADC_ConfigChannel+0x100>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	4b07      	ldr	r3, [pc, #28]	@ (800a3ac <HAL_ADC_ConfigChannel+0x100>)
 800a38e:	4909      	ldr	r1, [pc, #36]	@ (800a3b4 <HAL_ADC_ConfigChannel+0x108>)
 800a390:	400a      	ands	r2, r1
 800a392:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2250      	movs	r2, #80	@ 0x50
 800a398:	2100      	movs	r1, #0
 800a39a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	0018      	movs	r0, r3
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	b002      	add	sp, #8
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	46c0      	nop			@ (mov r8, r8)
 800a3a8:	00001001 	.word	0x00001001
 800a3ac:	40012708 	.word	0x40012708
 800a3b0:	ff7fffff 	.word	0xff7fffff
 800a3b4:	ffbfffff 	.word	0xffbfffff

0800a3b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d108      	bne.n	800a3e4 <ADC_Enable+0x2c>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d101      	bne.n	800a3e4 <ADC_Enable+0x2c>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e000      	b.n	800a3e6 <ADC_Enable+0x2e>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d146      	bne.n	800a478 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	4a24      	ldr	r2, [pc, #144]	@ (800a484 <ADC_Enable+0xcc>)
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	d00d      	beq.n	800a412 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3fa:	2210      	movs	r2, #16
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a406:	2201      	movs	r2, #1
 800a408:	431a      	orrs	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e033      	b.n	800a47a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689a      	ldr	r2, [r3, #8]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2101      	movs	r1, #1
 800a41e:	430a      	orrs	r2, r1
 800a420:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800a422:	2001      	movs	r0, #1
 800a424:	f000 f830 	bl	800a488 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800a428:	f7ff fc84 	bl	8009d34 <HAL_GetTick>
 800a42c:	0003      	movs	r3, r0
 800a42e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a430:	e01b      	b.n	800a46a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a432:	f7ff fc7f 	bl	8009d34 <HAL_GetTick>
 800a436:	0002      	movs	r2, r0
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	2b0a      	cmp	r3, #10
 800a43e:	d914      	bls.n	800a46a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2201      	movs	r2, #1
 800a448:	4013      	ands	r3, r2
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d00d      	beq.n	800a46a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a452:	2210      	movs	r2, #16
 800a454:	431a      	orrs	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a45e:	2201      	movs	r2, #1
 800a460:	431a      	orrs	r2, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e007      	b.n	800a47a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2201      	movs	r2, #1
 800a472:	4013      	ands	r3, r2
 800a474:	2b01      	cmp	r3, #1
 800a476:	d1dc      	bne.n	800a432 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	0018      	movs	r0, r3
 800a47c:	46bd      	mov	sp, r7
 800a47e:	b004      	add	sp, #16
 800a480:	bd80      	pop	{r7, pc}
 800a482:	46c0      	nop			@ (mov r8, r8)
 800a484:	80000017 	.word	0x80000017

0800a488 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800a490:	4b0b      	ldr	r3, [pc, #44]	@ (800a4c0 <ADC_DelayMicroSecond+0x38>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	490b      	ldr	r1, [pc, #44]	@ (800a4c4 <ADC_DelayMicroSecond+0x3c>)
 800a496:	0018      	movs	r0, r3
 800a498:	f7f5 fe52 	bl	8000140 <__udivsi3>
 800a49c:	0003      	movs	r3, r0
 800a49e:	001a      	movs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4353      	muls	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800a4a6:	e002      	b.n	800a4ae <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f9      	bne.n	800a4a8 <ADC_DelayMicroSecond+0x20>
  }
}
 800a4b4:	46c0      	nop			@ (mov r8, r8)
 800a4b6:	46c0      	nop			@ (mov r8, r8)
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	b004      	add	sp, #16
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	46c0      	nop			@ (mov r8, r8)
 800a4c0:	20000094 	.word	0x20000094
 800a4c4:	000f4240 	.word	0x000f4240

0800a4c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	0002      	movs	r2, r0
 800a4d0:	1dfb      	adds	r3, r7, #7
 800a4d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a4d4:	1dfb      	adds	r3, r7, #7
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4da:	d809      	bhi.n	800a4f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4dc:	1dfb      	adds	r3, r7, #7
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	001a      	movs	r2, r3
 800a4e2:	231f      	movs	r3, #31
 800a4e4:	401a      	ands	r2, r3
 800a4e6:	4b04      	ldr	r3, [pc, #16]	@ (800a4f8 <__NVIC_EnableIRQ+0x30>)
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	4091      	lsls	r1, r2
 800a4ec:	000a      	movs	r2, r1
 800a4ee:	601a      	str	r2, [r3, #0]
  }
}
 800a4f0:	46c0      	nop			@ (mov r8, r8)
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	b002      	add	sp, #8
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	e000e100 	.word	0xe000e100

0800a4fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4fc:	b590      	push	{r4, r7, lr}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	0002      	movs	r2, r0
 800a504:	6039      	str	r1, [r7, #0]
 800a506:	1dfb      	adds	r3, r7, #7
 800a508:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a50a:	1dfb      	adds	r3, r7, #7
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a510:	d828      	bhi.n	800a564 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a512:	4a2f      	ldr	r2, [pc, #188]	@ (800a5d0 <__NVIC_SetPriority+0xd4>)
 800a514:	1dfb      	adds	r3, r7, #7
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	b25b      	sxtb	r3, r3
 800a51a:	089b      	lsrs	r3, r3, #2
 800a51c:	33c0      	adds	r3, #192	@ 0xc0
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	589b      	ldr	r3, [r3, r2]
 800a522:	1dfa      	adds	r2, r7, #7
 800a524:	7812      	ldrb	r2, [r2, #0]
 800a526:	0011      	movs	r1, r2
 800a528:	2203      	movs	r2, #3
 800a52a:	400a      	ands	r2, r1
 800a52c:	00d2      	lsls	r2, r2, #3
 800a52e:	21ff      	movs	r1, #255	@ 0xff
 800a530:	4091      	lsls	r1, r2
 800a532:	000a      	movs	r2, r1
 800a534:	43d2      	mvns	r2, r2
 800a536:	401a      	ands	r2, r3
 800a538:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	019b      	lsls	r3, r3, #6
 800a53e:	22ff      	movs	r2, #255	@ 0xff
 800a540:	401a      	ands	r2, r3
 800a542:	1dfb      	adds	r3, r7, #7
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	0018      	movs	r0, r3
 800a548:	2303      	movs	r3, #3
 800a54a:	4003      	ands	r3, r0
 800a54c:	00db      	lsls	r3, r3, #3
 800a54e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a550:	481f      	ldr	r0, [pc, #124]	@ (800a5d0 <__NVIC_SetPriority+0xd4>)
 800a552:	1dfb      	adds	r3, r7, #7
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	b25b      	sxtb	r3, r3
 800a558:	089b      	lsrs	r3, r3, #2
 800a55a:	430a      	orrs	r2, r1
 800a55c:	33c0      	adds	r3, #192	@ 0xc0
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800a562:	e031      	b.n	800a5c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a564:	4a1b      	ldr	r2, [pc, #108]	@ (800a5d4 <__NVIC_SetPriority+0xd8>)
 800a566:	1dfb      	adds	r3, r7, #7
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	0019      	movs	r1, r3
 800a56c:	230f      	movs	r3, #15
 800a56e:	400b      	ands	r3, r1
 800a570:	3b08      	subs	r3, #8
 800a572:	089b      	lsrs	r3, r3, #2
 800a574:	3306      	adds	r3, #6
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	18d3      	adds	r3, r2, r3
 800a57a:	3304      	adds	r3, #4
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	1dfa      	adds	r2, r7, #7
 800a580:	7812      	ldrb	r2, [r2, #0]
 800a582:	0011      	movs	r1, r2
 800a584:	2203      	movs	r2, #3
 800a586:	400a      	ands	r2, r1
 800a588:	00d2      	lsls	r2, r2, #3
 800a58a:	21ff      	movs	r1, #255	@ 0xff
 800a58c:	4091      	lsls	r1, r2
 800a58e:	000a      	movs	r2, r1
 800a590:	43d2      	mvns	r2, r2
 800a592:	401a      	ands	r2, r3
 800a594:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	019b      	lsls	r3, r3, #6
 800a59a:	22ff      	movs	r2, #255	@ 0xff
 800a59c:	401a      	ands	r2, r3
 800a59e:	1dfb      	adds	r3, r7, #7
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	0018      	movs	r0, r3
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	4003      	ands	r3, r0
 800a5a8:	00db      	lsls	r3, r3, #3
 800a5aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a5ac:	4809      	ldr	r0, [pc, #36]	@ (800a5d4 <__NVIC_SetPriority+0xd8>)
 800a5ae:	1dfb      	adds	r3, r7, #7
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	001c      	movs	r4, r3
 800a5b4:	230f      	movs	r3, #15
 800a5b6:	4023      	ands	r3, r4
 800a5b8:	3b08      	subs	r3, #8
 800a5ba:	089b      	lsrs	r3, r3, #2
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	3306      	adds	r3, #6
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	18c3      	adds	r3, r0, r3
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	601a      	str	r2, [r3, #0]
}
 800a5c8:	46c0      	nop			@ (mov r8, r8)
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	b003      	add	sp, #12
 800a5ce:	bd90      	pop	{r4, r7, pc}
 800a5d0:	e000e100 	.word	0xe000e100
 800a5d4:	e000ed00 	.word	0xe000ed00

0800a5d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	1e5a      	subs	r2, r3, #1
 800a5e4:	2380      	movs	r3, #128	@ 0x80
 800a5e6:	045b      	lsls	r3, r3, #17
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d301      	bcc.n	800a5f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e010      	b.n	800a612 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a61c <SysTick_Config+0x44>)
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	3a01      	subs	r2, #1
 800a5f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	425b      	negs	r3, r3
 800a5fc:	2103      	movs	r1, #3
 800a5fe:	0018      	movs	r0, r3
 800a600:	f7ff ff7c 	bl	800a4fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a604:	4b05      	ldr	r3, [pc, #20]	@ (800a61c <SysTick_Config+0x44>)
 800a606:	2200      	movs	r2, #0
 800a608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a60a:	4b04      	ldr	r3, [pc, #16]	@ (800a61c <SysTick_Config+0x44>)
 800a60c:	2207      	movs	r2, #7
 800a60e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a610:	2300      	movs	r3, #0
}
 800a612:	0018      	movs	r0, r3
 800a614:	46bd      	mov	sp, r7
 800a616:	b002      	add	sp, #8
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	46c0      	nop			@ (mov r8, r8)
 800a61c:	e000e010 	.word	0xe000e010

0800a620 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	60b9      	str	r1, [r7, #8]
 800a628:	607a      	str	r2, [r7, #4]
 800a62a:	210f      	movs	r1, #15
 800a62c:	187b      	adds	r3, r7, r1
 800a62e:	1c02      	adds	r2, r0, #0
 800a630:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	187b      	adds	r3, r7, r1
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	b25b      	sxtb	r3, r3
 800a63a:	0011      	movs	r1, r2
 800a63c:	0018      	movs	r0, r3
 800a63e:	f7ff ff5d 	bl	800a4fc <__NVIC_SetPriority>
}
 800a642:	46c0      	nop			@ (mov r8, r8)
 800a644:	46bd      	mov	sp, r7
 800a646:	b004      	add	sp, #16
 800a648:	bd80      	pop	{r7, pc}

0800a64a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	0002      	movs	r2, r0
 800a652:	1dfb      	adds	r3, r7, #7
 800a654:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a656:	1dfb      	adds	r3, r7, #7
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	b25b      	sxtb	r3, r3
 800a65c:	0018      	movs	r0, r3
 800a65e:	f7ff ff33 	bl	800a4c8 <__NVIC_EnableIRQ>
}
 800a662:	46c0      	nop			@ (mov r8, r8)
 800a664:	46bd      	mov	sp, r7
 800a666:	b002      	add	sp, #8
 800a668:	bd80      	pop	{r7, pc}

0800a66a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b082      	sub	sp, #8
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	0018      	movs	r0, r3
 800a676:	f7ff ffaf 	bl	800a5d8 <SysTick_Config>
 800a67a:	0003      	movs	r3, r0
}
 800a67c:	0018      	movs	r0, r3
 800a67e:	46bd      	mov	sp, r7
 800a680:	b002      	add	sp, #8
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e061      	b.n	800a75a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a32      	ldr	r2, [pc, #200]	@ (800a764 <HAL_DMA_Init+0xe0>)
 800a69c:	4694      	mov	ip, r2
 800a69e:	4463      	add	r3, ip
 800a6a0:	2114      	movs	r1, #20
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	f7f5 fd4c 	bl	8000140 <__udivsi3>
 800a6a8:	0003      	movs	r3, r0
 800a6aa:	009a      	lsls	r2, r3, #2
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a2d      	ldr	r2, [pc, #180]	@ (800a768 <HAL_DMA_Init+0xe4>)
 800a6b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2225      	movs	r2, #37	@ 0x25
 800a6ba:	2102      	movs	r1, #2
 800a6bc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	4a28      	ldr	r2, [pc, #160]	@ (800a76c <HAL_DMA_Init+0xe8>)
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a6d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a1b      	ldr	r3, [r3, #32]
 800a6f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	689a      	ldr	r2, [r3, #8]
 800a708:	2380      	movs	r3, #128	@ 0x80
 800a70a:	01db      	lsls	r3, r3, #7
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d018      	beq.n	800a742 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a710:	4b17      	ldr	r3, [pc, #92]	@ (800a770 <HAL_DMA_Init+0xec>)
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a718:	211c      	movs	r1, #28
 800a71a:	400b      	ands	r3, r1
 800a71c:	210f      	movs	r1, #15
 800a71e:	4099      	lsls	r1, r3
 800a720:	000b      	movs	r3, r1
 800a722:	43d9      	mvns	r1, r3
 800a724:	4b12      	ldr	r3, [pc, #72]	@ (800a770 <HAL_DMA_Init+0xec>)
 800a726:	400a      	ands	r2, r1
 800a728:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a72a:	4b11      	ldr	r3, [pc, #68]	@ (800a770 <HAL_DMA_Init+0xec>)
 800a72c:	6819      	ldr	r1, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a736:	201c      	movs	r0, #28
 800a738:	4003      	ands	r3, r0
 800a73a:	409a      	lsls	r2, r3
 800a73c:	4b0c      	ldr	r3, [pc, #48]	@ (800a770 <HAL_DMA_Init+0xec>)
 800a73e:	430a      	orrs	r2, r1
 800a740:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2225      	movs	r2, #37	@ 0x25
 800a74c:	2101      	movs	r1, #1
 800a74e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2224      	movs	r2, #36	@ 0x24
 800a754:	2100      	movs	r1, #0
 800a756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	0018      	movs	r0, r3
 800a75c:	46bd      	mov	sp, r7
 800a75e:	b004      	add	sp, #16
 800a760:	bd80      	pop	{r7, pc}
 800a762:	46c0      	nop			@ (mov r8, r8)
 800a764:	bffdfff8 	.word	0xbffdfff8
 800a768:	40020000 	.word	0x40020000
 800a76c:	ffff800f 	.word	0xffff800f
 800a770:	400200a8 	.word	0x400200a8

0800a774 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e04a      	b.n	800a81c <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2101      	movs	r1, #1
 800a792:	438a      	bics	r2, r1
 800a794:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a22      	ldr	r2, [pc, #136]	@ (800a824 <HAL_DMA_DeInit+0xb0>)
 800a79c:	4694      	mov	ip, r2
 800a79e:	4463      	add	r3, ip
 800a7a0:	2114      	movs	r1, #20
 800a7a2:	0018      	movs	r0, r3
 800a7a4:	f7f5 fccc 	bl	8000140 <__udivsi3>
 800a7a8:	0003      	movs	r3, r0
 800a7aa:	009a      	lsls	r2, r3, #2
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a1d      	ldr	r2, [pc, #116]	@ (800a828 <HAL_DMA_DeInit+0xb4>)
 800a7b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7c2:	221c      	movs	r2, #28
 800a7c4:	401a      	ands	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	4091      	lsls	r1, r2
 800a7ce:	000a      	movs	r2, r1
 800a7d0:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a7d2:	4b16      	ldr	r3, [pc, #88]	@ (800a82c <HAL_DMA_DeInit+0xb8>)
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7da:	211c      	movs	r1, #28
 800a7dc:	400b      	ands	r3, r1
 800a7de:	210f      	movs	r1, #15
 800a7e0:	4099      	lsls	r1, r3
 800a7e2:	000b      	movs	r3, r1
 800a7e4:	43d9      	mvns	r1, r3
 800a7e6:	4b11      	ldr	r3, [pc, #68]	@ (800a82c <HAL_DMA_DeInit+0xb8>)
 800a7e8:	400a      	ands	r2, r1
 800a7ea:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2225      	movs	r2, #37	@ 0x25
 800a80e:	2100      	movs	r1, #0
 800a810:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2224      	movs	r2, #36	@ 0x24
 800a816:	2100      	movs	r1, #0
 800a818:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	0018      	movs	r0, r3
 800a81e:	46bd      	mov	sp, r7
 800a820:	b002      	add	sp, #8
 800a822:	bd80      	pop	{r7, pc}
 800a824:	bffdfff8 	.word	0xbffdfff8
 800a828:	40020000 	.word	0x40020000
 800a82c:	400200a8 	.word	0x400200a8

0800a830 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a83e:	2317      	movs	r3, #23
 800a840:	18fb      	adds	r3, r7, r3
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2224      	movs	r2, #36	@ 0x24
 800a84a:	5c9b      	ldrb	r3, [r3, r2]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d101      	bne.n	800a854 <HAL_DMA_Start_IT+0x24>
 800a850:	2302      	movs	r3, #2
 800a852:	e04f      	b.n	800a8f4 <HAL_DMA_Start_IT+0xc4>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2224      	movs	r2, #36	@ 0x24
 800a858:	2101      	movs	r1, #1
 800a85a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2225      	movs	r2, #37	@ 0x25
 800a860:	5c9b      	ldrb	r3, [r3, r2]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b01      	cmp	r3, #1
 800a866:	d13a      	bne.n	800a8de <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2225      	movs	r2, #37	@ 0x25
 800a86c:	2102      	movs	r1, #2
 800a86e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2101      	movs	r1, #1
 800a882:	438a      	bics	r2, r1
 800a884:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	68b9      	ldr	r1, [r7, #8]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f976 	bl	800ab7e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a896:	2b00      	cmp	r3, #0
 800a898:	d008      	beq.n	800a8ac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	210e      	movs	r1, #14
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	e00f      	b.n	800a8cc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2104      	movs	r1, #4
 800a8b8:	438a      	bics	r2, r1
 800a8ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	210a      	movs	r1, #10
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	e007      	b.n	800a8ee <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2224      	movs	r2, #36	@ 0x24
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a8e6:	2317      	movs	r3, #23
 800a8e8:	18fb      	adds	r3, r7, r3
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a8ee:	2317      	movs	r3, #23
 800a8f0:	18fb      	adds	r3, r7, r3
 800a8f2:	781b      	ldrb	r3, [r3, #0]
}
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	b006      	add	sp, #24
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a904:	230f      	movs	r3, #15
 800a906:	18fb      	adds	r3, r7, r3
 800a908:	2200      	movs	r2, #0
 800a90a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2225      	movs	r2, #37	@ 0x25
 800a910:	5c9b      	ldrb	r3, [r3, r2]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b02      	cmp	r3, #2
 800a916:	d008      	beq.n	800a92a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2204      	movs	r2, #4
 800a91c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2224      	movs	r2, #36	@ 0x24
 800a922:	2100      	movs	r1, #0
 800a924:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e024      	b.n	800a974 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	210e      	movs	r1, #14
 800a936:	438a      	bics	r2, r1
 800a938:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2101      	movs	r1, #1
 800a946:	438a      	bics	r2, r1
 800a948:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a94e:	221c      	movs	r2, #28
 800a950:	401a      	ands	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a956:	2101      	movs	r1, #1
 800a958:	4091      	lsls	r1, r2
 800a95a:	000a      	movs	r2, r1
 800a95c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2225      	movs	r2, #37	@ 0x25
 800a962:	2101      	movs	r1, #1
 800a964:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2224      	movs	r2, #36	@ 0x24
 800a96a:	2100      	movs	r1, #0
 800a96c:	5499      	strb	r1, [r3, r2]

    return status;
 800a96e:	230f      	movs	r3, #15
 800a970:	18fb      	adds	r3, r7, r3
 800a972:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a974:	0018      	movs	r0, r3
 800a976:	46bd      	mov	sp, r7
 800a978:	b004      	add	sp, #16
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a984:	210f      	movs	r1, #15
 800a986:	187b      	adds	r3, r7, r1
 800a988:	2200      	movs	r2, #0
 800a98a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2225      	movs	r2, #37	@ 0x25
 800a990:	5c9b      	ldrb	r3, [r3, r2]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b02      	cmp	r3, #2
 800a996:	d006      	beq.n	800a9a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2204      	movs	r2, #4
 800a99c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a99e:	187b      	adds	r3, r7, r1
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	701a      	strb	r2, [r3, #0]
 800a9a4:	e02a      	b.n	800a9fc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	210e      	movs	r1, #14
 800a9b2:	438a      	bics	r2, r1
 800a9b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2101      	movs	r1, #1
 800a9c2:	438a      	bics	r2, r1
 800a9c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ca:	221c      	movs	r2, #28
 800a9cc:	401a      	ands	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d2:	2101      	movs	r1, #1
 800a9d4:	4091      	lsls	r1, r2
 800a9d6:	000a      	movs	r2, r1
 800a9d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2225      	movs	r2, #37	@ 0x25
 800a9de:	2101      	movs	r1, #1
 800a9e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2224      	movs	r2, #36	@ 0x24
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d004      	beq.n	800a9fc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	0010      	movs	r0, r2
 800a9fa:	4798      	blx	r3
    }
  }
  return status;
 800a9fc:	230f      	movs	r3, #15
 800a9fe:	18fb      	adds	r3, r7, r3
 800aa00:	781b      	ldrb	r3, [r3, #0]
}
 800aa02:	0018      	movs	r0, r3
 800aa04:	46bd      	mov	sp, r7
 800aa06:	b004      	add	sp, #16
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b084      	sub	sp, #16
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa26:	221c      	movs	r2, #28
 800aa28:	4013      	ands	r3, r2
 800aa2a:	2204      	movs	r2, #4
 800aa2c:	409a      	lsls	r2, r3
 800aa2e:	0013      	movs	r3, r2
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4013      	ands	r3, r2
 800aa34:	d026      	beq.n	800aa84 <HAL_DMA_IRQHandler+0x7a>
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2204      	movs	r2, #4
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	d022      	beq.n	800aa84 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2220      	movs	r2, #32
 800aa46:	4013      	ands	r3, r2
 800aa48:	d107      	bne.n	800aa5a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2104      	movs	r1, #4
 800aa56:	438a      	bics	r2, r1
 800aa58:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa5e:	221c      	movs	r2, #28
 800aa60:	401a      	ands	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa66:	2104      	movs	r1, #4
 800aa68:	4091      	lsls	r1, r2
 800aa6a:	000a      	movs	r2, r1
 800aa6c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d100      	bne.n	800aa78 <HAL_DMA_IRQHandler+0x6e>
 800aa76:	e071      	b.n	800ab5c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	0010      	movs	r0, r2
 800aa80:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800aa82:	e06b      	b.n	800ab5c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa88:	221c      	movs	r2, #28
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	409a      	lsls	r2, r3
 800aa90:	0013      	movs	r3, r2
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	4013      	ands	r3, r2
 800aa96:	d02d      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0xea>
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	d029      	beq.n	800aaf4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	d10b      	bne.n	800aac4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	210a      	movs	r1, #10
 800aab8:	438a      	bics	r2, r1
 800aaba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2225      	movs	r2, #37	@ 0x25
 800aac0:	2101      	movs	r1, #1
 800aac2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac8:	221c      	movs	r2, #28
 800aaca:	401a      	ands	r2, r3
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad0:	2102      	movs	r1, #2
 800aad2:	4091      	lsls	r1, r2
 800aad4:	000a      	movs	r2, r1
 800aad6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2224      	movs	r2, #36	@ 0x24
 800aadc:	2100      	movs	r1, #0
 800aade:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d039      	beq.n	800ab5c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	0010      	movs	r0, r2
 800aaf0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800aaf2:	e033      	b.n	800ab5c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaf8:	221c      	movs	r2, #28
 800aafa:	4013      	ands	r3, r2
 800aafc:	2208      	movs	r2, #8
 800aafe:	409a      	lsls	r2, r3
 800ab00:	0013      	movs	r3, r2
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	4013      	ands	r3, r2
 800ab06:	d02a      	beq.n	800ab5e <HAL_DMA_IRQHandler+0x154>
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2208      	movs	r2, #8
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	d026      	beq.n	800ab5e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	210e      	movs	r1, #14
 800ab1c:	438a      	bics	r2, r1
 800ab1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab24:	221c      	movs	r2, #28
 800ab26:	401a      	ands	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	4091      	lsls	r1, r2
 800ab30:	000a      	movs	r2, r1
 800ab32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2225      	movs	r2, #37	@ 0x25
 800ab3e:	2101      	movs	r1, #1
 800ab40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2224      	movs	r2, #36	@ 0x24
 800ab46:	2100      	movs	r1, #0
 800ab48:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d005      	beq.n	800ab5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	0010      	movs	r0, r2
 800ab5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ab5c:	46c0      	nop			@ (mov r8, r8)
 800ab5e:	46c0      	nop			@ (mov r8, r8)
}
 800ab60:	46bd      	mov	sp, r7
 800ab62:	b004      	add	sp, #16
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2225      	movs	r2, #37	@ 0x25
 800ab72:	5c9b      	ldrb	r3, [r3, r2]
 800ab74:	b2db      	uxtb	r3, r3
}
 800ab76:	0018      	movs	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	b002      	add	sp, #8
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	60b9      	str	r1, [r7, #8]
 800ab88:	607a      	str	r2, [r7, #4]
 800ab8a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab90:	221c      	movs	r2, #28
 800ab92:	401a      	ands	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab98:	2101      	movs	r1, #1
 800ab9a:	4091      	lsls	r1, r2
 800ab9c:	000a      	movs	r2, r1
 800ab9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b10      	cmp	r3, #16
 800abae:	d108      	bne.n	800abc2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800abc0:	e007      	b.n	800abd2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	60da      	str	r2, [r3, #12]
}
 800abd2:	46c0      	nop			@ (mov r8, r8)
 800abd4:	46bd      	mov	sp, r7
 800abd6:	b004      	add	sp, #16
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800abe4:	f7ff f8a6 	bl	8009d34 <HAL_GetTick>
 800abe8:	0003      	movs	r3, r0
 800abea:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800abec:	e00f      	b.n	800ac0e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3301      	adds	r3, #1
 800abf2:	d00c      	beq.n	800ac0e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d007      	beq.n	800ac0a <FLASH_WaitForLastOperation+0x2e>
 800abfa:	f7ff f89b 	bl	8009d34 <HAL_GetTick>
 800abfe:	0002      	movs	r2, r0
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d201      	bcs.n	800ac0e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e052      	b.n	800acb4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ac0e:	4b2b      	ldr	r3, [pc, #172]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac10:	699b      	ldr	r3, [r3, #24]
 800ac12:	2201      	movs	r2, #1
 800ac14:	4013      	ands	r3, r2
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d0e9      	beq.n	800abee <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ac1a:	4b28      	ldr	r3, [pc, #160]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	2202      	movs	r2, #2
 800ac20:	4013      	ands	r3, r2
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d102      	bne.n	800ac2c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ac26:	4b25      	ldr	r3, [pc, #148]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac28:	2202      	movs	r2, #2
 800ac2a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ac2c:	4b23      	ldr	r3, [pc, #140]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac2e:	699a      	ldr	r2, [r3, #24]
 800ac30:	2380      	movs	r3, #128	@ 0x80
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	401a      	ands	r2, r3
 800ac36:	2380      	movs	r3, #128	@ 0x80
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d035      	beq.n	800acaa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ac3e:	4b1f      	ldr	r3, [pc, #124]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac40:	699a      	ldr	r2, [r3, #24]
 800ac42:	2380      	movs	r3, #128	@ 0x80
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ac48:	2380      	movs	r3, #128	@ 0x80
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d02c      	beq.n	800acaa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ac50:	4b1a      	ldr	r3, [pc, #104]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac52:	699a      	ldr	r2, [r3, #24]
 800ac54:	2380      	movs	r3, #128	@ 0x80
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ac5a:	2380      	movs	r3, #128	@ 0x80
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d023      	beq.n	800acaa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ac62:	4b16      	ldr	r3, [pc, #88]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac64:	699a      	ldr	r2, [r3, #24]
 800ac66:	2380      	movs	r3, #128	@ 0x80
 800ac68:	011b      	lsls	r3, r3, #4
 800ac6a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ac6c:	2380      	movs	r3, #128	@ 0x80
 800ac6e:	011b      	lsls	r3, r3, #4
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d01a      	beq.n	800acaa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ac74:	4b11      	ldr	r3, [pc, #68]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac76:	699a      	ldr	r2, [r3, #24]
 800ac78:	2380      	movs	r3, #128	@ 0x80
 800ac7a:	019b      	lsls	r3, r3, #6
 800ac7c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ac7e:	2380      	movs	r3, #128	@ 0x80
 800ac80:	019b      	lsls	r3, r3, #6
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d011      	beq.n	800acaa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ac86:	4b0d      	ldr	r3, [pc, #52]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac88:	699a      	ldr	r2, [r3, #24]
 800ac8a:	2380      	movs	r3, #128	@ 0x80
 800ac8c:	029b      	lsls	r3, r3, #10
 800ac8e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ac90:	2380      	movs	r3, #128	@ 0x80
 800ac92:	029b      	lsls	r3, r3, #10
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d008      	beq.n	800acaa <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800ac98:	4b08      	ldr	r3, [pc, #32]	@ (800acbc <FLASH_WaitForLastOperation+0xe0>)
 800ac9a:	699a      	ldr	r2, [r3, #24]
 800ac9c:	2380      	movs	r3, #128	@ 0x80
 800ac9e:	025b      	lsls	r3, r3, #9
 800aca0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800aca2:	2380      	movs	r3, #128	@ 0x80
 800aca4:	025b      	lsls	r3, r3, #9
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d103      	bne.n	800acb2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800acaa:	f000 f809 	bl	800acc0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e000      	b.n	800acb4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	0018      	movs	r0, r3
 800acb6:	46bd      	mov	sp, r7
 800acb8:	b004      	add	sp, #16
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	40022000 	.word	0x40022000

0800acc0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800acca:	4b49      	ldr	r3, [pc, #292]	@ (800adf0 <FLASH_SetErrorCode+0x130>)
 800accc:	699a      	ldr	r2, [r3, #24]
 800acce:	2380      	movs	r3, #128	@ 0x80
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	401a      	ands	r2, r3
 800acd4:	2380      	movs	r3, #128	@ 0x80
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	429a      	cmp	r2, r3
 800acda:	d10a      	bne.n	800acf2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800acdc:	4b45      	ldr	r3, [pc, #276]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	2202      	movs	r2, #2
 800ace2:	431a      	orrs	r2, r3
 800ace4:	4b43      	ldr	r3, [pc, #268]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ace6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2280      	movs	r2, #128	@ 0x80
 800acec:	0052      	lsls	r2, r2, #1
 800acee:	4313      	orrs	r3, r2
 800acf0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800acf2:	4b3f      	ldr	r3, [pc, #252]	@ (800adf0 <FLASH_SetErrorCode+0x130>)
 800acf4:	699a      	ldr	r2, [r3, #24]
 800acf6:	2380      	movs	r3, #128	@ 0x80
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	401a      	ands	r2, r3
 800acfc:	2380      	movs	r3, #128	@ 0x80
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d10a      	bne.n	800ad1a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ad04:	4b3b      	ldr	r3, [pc, #236]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ad06:	695b      	ldr	r3, [r3, #20]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	431a      	orrs	r2, r3
 800ad0c:	4b39      	ldr	r3, [pc, #228]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ad0e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2280      	movs	r2, #128	@ 0x80
 800ad14:	0092      	lsls	r2, r2, #2
 800ad16:	4313      	orrs	r3, r2
 800ad18:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800ad1a:	4b35      	ldr	r3, [pc, #212]	@ (800adf0 <FLASH_SetErrorCode+0x130>)
 800ad1c:	699a      	ldr	r2, [r3, #24]
 800ad1e:	2380      	movs	r3, #128	@ 0x80
 800ad20:	00db      	lsls	r3, r3, #3
 800ad22:	401a      	ands	r2, r3
 800ad24:	2380      	movs	r3, #128	@ 0x80
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d10a      	bne.n	800ad42 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800ad2c:	4b31      	ldr	r3, [pc, #196]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	2208      	movs	r2, #8
 800ad32:	431a      	orrs	r2, r3
 800ad34:	4b2f      	ldr	r3, [pc, #188]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ad36:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2280      	movs	r2, #128	@ 0x80
 800ad3c:	00d2      	lsls	r2, r2, #3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800ad42:	4b2b      	ldr	r3, [pc, #172]	@ (800adf0 <FLASH_SetErrorCode+0x130>)
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	2380      	movs	r3, #128	@ 0x80
 800ad48:	011b      	lsls	r3, r3, #4
 800ad4a:	401a      	ands	r2, r3
 800ad4c:	2380      	movs	r3, #128	@ 0x80
 800ad4e:	011b      	lsls	r3, r3, #4
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d10a      	bne.n	800ad6a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800ad54:	4b27      	ldr	r3, [pc, #156]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	2204      	movs	r2, #4
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	4b25      	ldr	r3, [pc, #148]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ad5e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2280      	movs	r2, #128	@ 0x80
 800ad64:	0112      	lsls	r2, r2, #4
 800ad66:	4313      	orrs	r3, r2
 800ad68:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800ad6a:	4b21      	ldr	r3, [pc, #132]	@ (800adf0 <FLASH_SetErrorCode+0x130>)
 800ad6c:	699a      	ldr	r2, [r3, #24]
 800ad6e:	2380      	movs	r3, #128	@ 0x80
 800ad70:	019b      	lsls	r3, r3, #6
 800ad72:	401a      	ands	r2, r3
 800ad74:	2380      	movs	r3, #128	@ 0x80
 800ad76:	019b      	lsls	r3, r3, #6
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d10a      	bne.n	800ad92 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ad7c:	4b1d      	ldr	r3, [pc, #116]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	2210      	movs	r2, #16
 800ad82:	431a      	orrs	r2, r3
 800ad84:	4b1b      	ldr	r3, [pc, #108]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ad86:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2280      	movs	r2, #128	@ 0x80
 800ad8c:	0192      	lsls	r2, r2, #6
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800ad92:	4b17      	ldr	r3, [pc, #92]	@ (800adf0 <FLASH_SetErrorCode+0x130>)
 800ad94:	699a      	ldr	r2, [r3, #24]
 800ad96:	2380      	movs	r3, #128	@ 0x80
 800ad98:	029b      	lsls	r3, r3, #10
 800ad9a:	401a      	ands	r2, r3
 800ad9c:	2380      	movs	r3, #128	@ 0x80
 800ad9e:	029b      	lsls	r3, r3, #10
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d109      	bne.n	800adb8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800ada4:	4b13      	ldr	r3, [pc, #76]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	2220      	movs	r2, #32
 800adaa:	431a      	orrs	r2, r3
 800adac:	4b11      	ldr	r3, [pc, #68]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800adae:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2220      	movs	r2, #32
 800adb4:	4313      	orrs	r3, r2
 800adb6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800adb8:	4b0d      	ldr	r3, [pc, #52]	@ (800adf0 <FLASH_SetErrorCode+0x130>)
 800adba:	699a      	ldr	r2, [r3, #24]
 800adbc:	2380      	movs	r3, #128	@ 0x80
 800adbe:	025b      	lsls	r3, r3, #9
 800adc0:	401a      	ands	r2, r3
 800adc2:	2380      	movs	r3, #128	@ 0x80
 800adc4:	025b      	lsls	r3, r3, #9
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d10a      	bne.n	800ade0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800adca:	4b0a      	ldr	r3, [pc, #40]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800adcc:	695b      	ldr	r3, [r3, #20]
 800adce:	2240      	movs	r2, #64	@ 0x40
 800add0:	431a      	orrs	r2, r3
 800add2:	4b08      	ldr	r3, [pc, #32]	@ (800adf4 <FLASH_SetErrorCode+0x134>)
 800add4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2280      	movs	r2, #128	@ 0x80
 800adda:	0252      	lsls	r2, r2, #9
 800addc:	4313      	orrs	r3, r2
 800adde:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ade0:	4b03      	ldr	r3, [pc, #12]	@ (800adf0 <FLASH_SetErrorCode+0x130>)
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	619a      	str	r2, [r3, #24]
}  
 800ade6:	46c0      	nop			@ (mov r8, r8)
 800ade8:	46bd      	mov	sp, r7
 800adea:	b002      	add	sp, #8
 800adec:	bd80      	pop	{r7, pc}
 800adee:	46c0      	nop			@ (mov r8, r8)
 800adf0:	40022000 	.word	0x40022000
 800adf4:	20002b14 	.word	0x20002b14

0800adf8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800adfe:	4b12      	ldr	r3, [pc, #72]	@ (800ae48 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	4013      	ands	r3, r2
 800ae06:	d019      	beq.n	800ae3c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae08:	f3ef 8310 	mrs	r3, PRIMASK
 800ae0c:	607b      	str	r3, [r7, #4]
  return(result);
 800ae0e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800ae10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae12:	b672      	cpsid	i
}
 800ae14:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800ae16:	4b0c      	ldr	r3, [pc, #48]	@ (800ae48 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae18:	4a0c      	ldr	r2, [pc, #48]	@ (800ae4c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800ae1a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800ae1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae48 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae1e:	4a0c      	ldr	r2, [pc, #48]	@ (800ae50 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800ae20:	60da      	str	r2, [r3, #12]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	f383 8810 	msr	PRIMASK, r3
}
 800ae2c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ae2e:	4b06      	ldr	r3, [pc, #24]	@ (800ae48 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	4013      	ands	r3, r2
 800ae36:	d001      	beq.n	800ae3c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e000      	b.n	800ae3e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	0018      	movs	r0, r3
 800ae40:	46bd      	mov	sp, r7
 800ae42:	b004      	add	sp, #16
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	46c0      	nop			@ (mov r8, r8)
 800ae48:	40022000 	.word	0x40022000
 800ae4c:	89abcdef 	.word	0x89abcdef
 800ae50:	02030405 	.word	0x02030405

0800ae54 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800ae58:	4b04      	ldr	r3, [pc, #16]	@ (800ae6c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	4b03      	ldr	r3, [pc, #12]	@ (800ae6c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ae5e:	2101      	movs	r1, #1
 800ae60:	430a      	orrs	r2, r1
 800ae62:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	0018      	movs	r0, r3
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	40022000 	.word	0x40022000

0800ae70 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800ae70:	b5b0      	push	{r4, r5, r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae78:	250f      	movs	r5, #15
 800ae7a:	197b      	adds	r3, r7, r5
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ae80:	197c      	adds	r4, r7, r5
 800ae82:	4b0f      	ldr	r3, [pc, #60]	@ (800aec0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ae84:	0018      	movs	r0, r3
 800ae86:	f7ff fea9 	bl	800abdc <FLASH_WaitForLastOperation>
 800ae8a:	0003      	movs	r3, r0
 800ae8c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ae8e:	0029      	movs	r1, r5
 800ae90:	187b      	adds	r3, r7, r1
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10c      	bne.n	800aeb2 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ae98:	4b0a      	ldr	r3, [pc, #40]	@ (800aec4 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800aea4:	187c      	adds	r4, r7, r1
 800aea6:	4b06      	ldr	r3, [pc, #24]	@ (800aec0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800aea8:	0018      	movs	r0, r3
 800aeaa:	f7ff fe97 	bl	800abdc <FLASH_WaitForLastOperation>
 800aeae:	0003      	movs	r3, r0
 800aeb0:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800aeb2:	230f      	movs	r3, #15
 800aeb4:	18fb      	adds	r3, r7, r3
 800aeb6:	781b      	ldrb	r3, [r3, #0]
}  
 800aeb8:	0018      	movs	r0, r3
 800aeba:	46bd      	mov	sp, r7
 800aebc:	b004      	add	sp, #16
 800aebe:	bdb0      	pop	{r4, r5, r7, pc}
 800aec0:	0000c350 	.word	0x0000c350
 800aec4:	20002b14 	.word	0x20002b14

0800aec8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800aec8:	b5b0      	push	{r4, r5, r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aed4:	2317      	movs	r3, #23
 800aed6:	18fb      	adds	r3, r7, r3
 800aed8:	2201      	movs	r2, #1
 800aeda:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aedc:	4b24      	ldr	r3, [pc, #144]	@ (800af70 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800aede:	7c1b      	ldrb	r3, [r3, #16]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e03e      	b.n	800af66 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800aee8:	4b21      	ldr	r3, [pc, #132]	@ (800af70 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800aeea:	2201      	movs	r2, #1
 800aeec:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800aeee:	2517      	movs	r5, #23
 800aef0:	197c      	adds	r4, r7, r5
 800aef2:	4b20      	ldr	r3, [pc, #128]	@ (800af74 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800aef4:	0018      	movs	r0, r3
 800aef6:	f7ff fe71 	bl	800abdc <FLASH_WaitForLastOperation>
 800aefa:	0003      	movs	r3, r0
 800aefc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800aefe:	197b      	adds	r3, r7, r5
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d129      	bne.n	800af5a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800af06:	4b1a      	ldr	r3, [pc, #104]	@ (800af70 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800af08:	2200      	movs	r2, #0
 800af0a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d103      	bne.n	800af1a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	e013      	b.n	800af42 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d104      	bne.n	800af2a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	b292      	uxth	r2, r2
 800af26:	801a      	strh	r2, [r3, #0]
 800af28:	e00b      	b.n	800af42 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d104      	bne.n	800af3a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	b2d2      	uxtb	r2, r2
 800af36:	701a      	strb	r2, [r3, #0]
 800af38:	e003      	b.n	800af42 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800af3a:	2317      	movs	r3, #23
 800af3c:	18fb      	adds	r3, r7, r3
 800af3e:	2201      	movs	r2, #1
 800af40:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800af42:	2217      	movs	r2, #23
 800af44:	18bb      	adds	r3, r7, r2
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d106      	bne.n	800af5a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800af4c:	18bc      	adds	r4, r7, r2
 800af4e:	4b09      	ldr	r3, [pc, #36]	@ (800af74 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800af50:	0018      	movs	r0, r3
 800af52:	f7ff fe43 	bl	800abdc <FLASH_WaitForLastOperation>
 800af56:	0003      	movs	r3, r0
 800af58:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800af5a:	4b05      	ldr	r3, [pc, #20]	@ (800af70 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	741a      	strb	r2, [r3, #16]

  return status;
 800af60:	2317      	movs	r3, #23
 800af62:	18fb      	adds	r3, r7, r3
 800af64:	781b      	ldrb	r3, [r3, #0]
}
 800af66:	0018      	movs	r0, r3
 800af68:	46bd      	mov	sp, r7
 800af6a:	b006      	add	sp, #24
 800af6c:	bdb0      	pop	{r4, r5, r7, pc}
 800af6e:	46c0      	nop			@ (mov r8, r8)
 800af70:	20002b14 	.word	0x20002b14
 800af74:	0000c350 	.word	0x0000c350

0800af78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800af82:	2300      	movs	r3, #0
 800af84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800af8e:	e155      	b.n	800b23c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2101      	movs	r1, #1
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	4091      	lsls	r1, r2
 800af9a:	000a      	movs	r2, r1
 800af9c:	4013      	ands	r3, r2
 800af9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d100      	bne.n	800afa8 <HAL_GPIO_Init+0x30>
 800afa6:	e146      	b.n	800b236 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	2203      	movs	r2, #3
 800afae:	4013      	ands	r3, r2
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d005      	beq.n	800afc0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	2203      	movs	r2, #3
 800afba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d130      	bne.n	800b022 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	2203      	movs	r2, #3
 800afcc:	409a      	lsls	r2, r3
 800afce:	0013      	movs	r3, r2
 800afd0:	43da      	mvns	r2, r3
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	4013      	ands	r3, r2
 800afd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	68da      	ldr	r2, [r3, #12]
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	409a      	lsls	r2, r3
 800afe2:	0013      	movs	r3, r2
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aff6:	2201      	movs	r2, #1
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	409a      	lsls	r2, r3
 800affc:	0013      	movs	r3, r2
 800affe:	43da      	mvns	r2, r3
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	4013      	ands	r3, r2
 800b004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	091b      	lsrs	r3, r3, #4
 800b00c:	2201      	movs	r2, #1
 800b00e:	401a      	ands	r2, r3
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	409a      	lsls	r2, r3
 800b014:	0013      	movs	r3, r2
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	4313      	orrs	r3, r2
 800b01a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	2203      	movs	r2, #3
 800b028:	4013      	ands	r3, r2
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d017      	beq.n	800b05e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	2203      	movs	r2, #3
 800b03a:	409a      	lsls	r2, r3
 800b03c:	0013      	movs	r3, r2
 800b03e:	43da      	mvns	r2, r3
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	4013      	ands	r3, r2
 800b044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	689a      	ldr	r2, [r3, #8]
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	005b      	lsls	r3, r3, #1
 800b04e:	409a      	lsls	r2, r3
 800b050:	0013      	movs	r3, r2
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	4313      	orrs	r3, r2
 800b056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	2203      	movs	r2, #3
 800b064:	4013      	ands	r3, r2
 800b066:	2b02      	cmp	r3, #2
 800b068:	d123      	bne.n	800b0b2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	08da      	lsrs	r2, r3, #3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3208      	adds	r2, #8
 800b072:	0092      	lsls	r2, r2, #2
 800b074:	58d3      	ldr	r3, [r2, r3]
 800b076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2207      	movs	r2, #7
 800b07c:	4013      	ands	r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	220f      	movs	r2, #15
 800b082:	409a      	lsls	r2, r3
 800b084:	0013      	movs	r3, r2
 800b086:	43da      	mvns	r2, r3
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	4013      	ands	r3, r2
 800b08c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	2107      	movs	r1, #7
 800b096:	400b      	ands	r3, r1
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	409a      	lsls	r2, r3
 800b09c:	0013      	movs	r3, r2
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	08da      	lsrs	r2, r3, #3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3208      	adds	r2, #8
 800b0ac:	0092      	lsls	r2, r2, #2
 800b0ae:	6939      	ldr	r1, [r7, #16]
 800b0b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	2203      	movs	r2, #3
 800b0be:	409a      	lsls	r2, r3
 800b0c0:	0013      	movs	r3, r2
 800b0c2:	43da      	mvns	r2, r3
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	2203      	movs	r2, #3
 800b0d0:	401a      	ands	r2, r3
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	409a      	lsls	r2, r3
 800b0d8:	0013      	movs	r3, r2
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685a      	ldr	r2, [r3, #4]
 800b0ea:	23c0      	movs	r3, #192	@ 0xc0
 800b0ec:	029b      	lsls	r3, r3, #10
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	d100      	bne.n	800b0f4 <HAL_GPIO_Init+0x17c>
 800b0f2:	e0a0      	b.n	800b236 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0f4:	4b57      	ldr	r3, [pc, #348]	@ (800b254 <HAL_GPIO_Init+0x2dc>)
 800b0f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0f8:	4b56      	ldr	r3, [pc, #344]	@ (800b254 <HAL_GPIO_Init+0x2dc>)
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800b100:	4a55      	ldr	r2, [pc, #340]	@ (800b258 <HAL_GPIO_Init+0x2e0>)
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	089b      	lsrs	r3, r3, #2
 800b106:	3302      	adds	r3, #2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	589b      	ldr	r3, [r3, r2]
 800b10c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	2203      	movs	r2, #3
 800b112:	4013      	ands	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	220f      	movs	r2, #15
 800b118:	409a      	lsls	r2, r3
 800b11a:	0013      	movs	r3, r2
 800b11c:	43da      	mvns	r2, r3
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	4013      	ands	r3, r2
 800b122:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	23a0      	movs	r3, #160	@ 0xa0
 800b128:	05db      	lsls	r3, r3, #23
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d01f      	beq.n	800b16e <HAL_GPIO_Init+0x1f6>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a4a      	ldr	r2, [pc, #296]	@ (800b25c <HAL_GPIO_Init+0x2e4>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d019      	beq.n	800b16a <HAL_GPIO_Init+0x1f2>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a49      	ldr	r2, [pc, #292]	@ (800b260 <HAL_GPIO_Init+0x2e8>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d013      	beq.n	800b166 <HAL_GPIO_Init+0x1ee>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a48      	ldr	r2, [pc, #288]	@ (800b264 <HAL_GPIO_Init+0x2ec>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d00d      	beq.n	800b162 <HAL_GPIO_Init+0x1ea>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a47      	ldr	r2, [pc, #284]	@ (800b268 <HAL_GPIO_Init+0x2f0>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d007      	beq.n	800b15e <HAL_GPIO_Init+0x1e6>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a46      	ldr	r2, [pc, #280]	@ (800b26c <HAL_GPIO_Init+0x2f4>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d101      	bne.n	800b15a <HAL_GPIO_Init+0x1e2>
 800b156:	2305      	movs	r3, #5
 800b158:	e00a      	b.n	800b170 <HAL_GPIO_Init+0x1f8>
 800b15a:	2306      	movs	r3, #6
 800b15c:	e008      	b.n	800b170 <HAL_GPIO_Init+0x1f8>
 800b15e:	2304      	movs	r3, #4
 800b160:	e006      	b.n	800b170 <HAL_GPIO_Init+0x1f8>
 800b162:	2303      	movs	r3, #3
 800b164:	e004      	b.n	800b170 <HAL_GPIO_Init+0x1f8>
 800b166:	2302      	movs	r3, #2
 800b168:	e002      	b.n	800b170 <HAL_GPIO_Init+0x1f8>
 800b16a:	2301      	movs	r3, #1
 800b16c:	e000      	b.n	800b170 <HAL_GPIO_Init+0x1f8>
 800b16e:	2300      	movs	r3, #0
 800b170:	697a      	ldr	r2, [r7, #20]
 800b172:	2103      	movs	r1, #3
 800b174:	400a      	ands	r2, r1
 800b176:	0092      	lsls	r2, r2, #2
 800b178:	4093      	lsls	r3, r2
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b180:	4935      	ldr	r1, [pc, #212]	@ (800b258 <HAL_GPIO_Init+0x2e0>)
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	089b      	lsrs	r3, r3, #2
 800b186:	3302      	adds	r3, #2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b18e:	4b38      	ldr	r3, [pc, #224]	@ (800b270 <HAL_GPIO_Init+0x2f8>)
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	43da      	mvns	r2, r3
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	4013      	ands	r3, r2
 800b19c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	2380      	movs	r3, #128	@ 0x80
 800b1a4:	035b      	lsls	r3, r3, #13
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	d003      	beq.n	800b1b2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b1b2:	4b2f      	ldr	r3, [pc, #188]	@ (800b270 <HAL_GPIO_Init+0x2f8>)
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b1b8:	4b2d      	ldr	r3, [pc, #180]	@ (800b270 <HAL_GPIO_Init+0x2f8>)
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	43da      	mvns	r2, r3
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	685a      	ldr	r2, [r3, #4]
 800b1cc:	2380      	movs	r3, #128	@ 0x80
 800b1ce:	039b      	lsls	r3, r3, #14
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	d003      	beq.n	800b1dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b1dc:	4b24      	ldr	r3, [pc, #144]	@ (800b270 <HAL_GPIO_Init+0x2f8>)
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800b1e2:	4b23      	ldr	r3, [pc, #140]	@ (800b270 <HAL_GPIO_Init+0x2f8>)
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	43da      	mvns	r2, r3
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	685a      	ldr	r2, [r3, #4]
 800b1f6:	2380      	movs	r3, #128	@ 0x80
 800b1f8:	029b      	lsls	r3, r3, #10
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	d003      	beq.n	800b206 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4313      	orrs	r3, r2
 800b204:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b206:	4b1a      	ldr	r3, [pc, #104]	@ (800b270 <HAL_GPIO_Init+0x2f8>)
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b20c:	4b18      	ldr	r3, [pc, #96]	@ (800b270 <HAL_GPIO_Init+0x2f8>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	43da      	mvns	r2, r3
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	4013      	ands	r3, r2
 800b21a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	685a      	ldr	r2, [r3, #4]
 800b220:	2380      	movs	r3, #128	@ 0x80
 800b222:	025b      	lsls	r3, r3, #9
 800b224:	4013      	ands	r3, r2
 800b226:	d003      	beq.n	800b230 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b230:	4b0f      	ldr	r3, [pc, #60]	@ (800b270 <HAL_GPIO_Init+0x2f8>)
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	3301      	adds	r3, #1
 800b23a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	40da      	lsrs	r2, r3
 800b244:	1e13      	subs	r3, r2, #0
 800b246:	d000      	beq.n	800b24a <HAL_GPIO_Init+0x2d2>
 800b248:	e6a2      	b.n	800af90 <HAL_GPIO_Init+0x18>
  }
}
 800b24a:	46c0      	nop			@ (mov r8, r8)
 800b24c:	46c0      	nop			@ (mov r8, r8)
 800b24e:	46bd      	mov	sp, r7
 800b250:	b006      	add	sp, #24
 800b252:	bd80      	pop	{r7, pc}
 800b254:	40021000 	.word	0x40021000
 800b258:	40010000 	.word	0x40010000
 800b25c:	50000400 	.word	0x50000400
 800b260:	50000800 	.word	0x50000800
 800b264:	50000c00 	.word	0x50000c00
 800b268:	50001000 	.word	0x50001000
 800b26c:	50001c00 	.word	0x50001c00
 800b270:	40010400 	.word	0x40010400

0800b274 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b27e:	2300      	movs	r3, #0
 800b280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b282:	2300      	movs	r3, #0
 800b284:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800b286:	2300      	movs	r3, #0
 800b288:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b28a:	e0bc      	b.n	800b406 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b28c:	2201      	movs	r2, #1
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	409a      	lsls	r2, r3
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	4013      	ands	r3, r2
 800b296:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d100      	bne.n	800b2a0 <HAL_GPIO_DeInit+0x2c>
 800b29e:	e0af      	b.n	800b400 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800b2a0:	4a5e      	ldr	r2, [pc, #376]	@ (800b41c <HAL_GPIO_DeInit+0x1a8>)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	089b      	lsrs	r3, r3, #2
 800b2a6:	3302      	adds	r3, #2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	589b      	ldr	r3, [r3, r2]
 800b2ac:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2203      	movs	r2, #3
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	220f      	movs	r2, #15
 800b2b8:	409a      	lsls	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	4013      	ands	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	23a0      	movs	r3, #160	@ 0xa0
 800b2c4:	05db      	lsls	r3, r3, #23
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d01f      	beq.n	800b30a <HAL_GPIO_DeInit+0x96>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a54      	ldr	r2, [pc, #336]	@ (800b420 <HAL_GPIO_DeInit+0x1ac>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d019      	beq.n	800b306 <HAL_GPIO_DeInit+0x92>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a53      	ldr	r2, [pc, #332]	@ (800b424 <HAL_GPIO_DeInit+0x1b0>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d013      	beq.n	800b302 <HAL_GPIO_DeInit+0x8e>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a52      	ldr	r2, [pc, #328]	@ (800b428 <HAL_GPIO_DeInit+0x1b4>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d00d      	beq.n	800b2fe <HAL_GPIO_DeInit+0x8a>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a51      	ldr	r2, [pc, #324]	@ (800b42c <HAL_GPIO_DeInit+0x1b8>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d007      	beq.n	800b2fa <HAL_GPIO_DeInit+0x86>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a50      	ldr	r2, [pc, #320]	@ (800b430 <HAL_GPIO_DeInit+0x1bc>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d101      	bne.n	800b2f6 <HAL_GPIO_DeInit+0x82>
 800b2f2:	2305      	movs	r3, #5
 800b2f4:	e00a      	b.n	800b30c <HAL_GPIO_DeInit+0x98>
 800b2f6:	2306      	movs	r3, #6
 800b2f8:	e008      	b.n	800b30c <HAL_GPIO_DeInit+0x98>
 800b2fa:	2304      	movs	r3, #4
 800b2fc:	e006      	b.n	800b30c <HAL_GPIO_DeInit+0x98>
 800b2fe:	2303      	movs	r3, #3
 800b300:	e004      	b.n	800b30c <HAL_GPIO_DeInit+0x98>
 800b302:	2302      	movs	r3, #2
 800b304:	e002      	b.n	800b30c <HAL_GPIO_DeInit+0x98>
 800b306:	2301      	movs	r3, #1
 800b308:	e000      	b.n	800b30c <HAL_GPIO_DeInit+0x98>
 800b30a:	2300      	movs	r3, #0
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	2103      	movs	r1, #3
 800b310:	400a      	ands	r2, r1
 800b312:	0092      	lsls	r2, r2, #2
 800b314:	4093      	lsls	r3, r2
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d132      	bne.n	800b382 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b31c:	4b45      	ldr	r3, [pc, #276]	@ (800b434 <HAL_GPIO_DeInit+0x1c0>)
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	43d9      	mvns	r1, r3
 800b324:	4b43      	ldr	r3, [pc, #268]	@ (800b434 <HAL_GPIO_DeInit+0x1c0>)
 800b326:	400a      	ands	r2, r1
 800b328:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b32a:	4b42      	ldr	r3, [pc, #264]	@ (800b434 <HAL_GPIO_DeInit+0x1c0>)
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	43d9      	mvns	r1, r3
 800b332:	4b40      	ldr	r3, [pc, #256]	@ (800b434 <HAL_GPIO_DeInit+0x1c0>)
 800b334:	400a      	ands	r2, r1
 800b336:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b338:	4b3e      	ldr	r3, [pc, #248]	@ (800b434 <HAL_GPIO_DeInit+0x1c0>)
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	43d9      	mvns	r1, r3
 800b340:	4b3c      	ldr	r3, [pc, #240]	@ (800b434 <HAL_GPIO_DeInit+0x1c0>)
 800b342:	400a      	ands	r2, r1
 800b344:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b346:	4b3b      	ldr	r3, [pc, #236]	@ (800b434 <HAL_GPIO_DeInit+0x1c0>)
 800b348:	689a      	ldr	r2, [r3, #8]
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	43d9      	mvns	r1, r3
 800b34e:	4b39      	ldr	r3, [pc, #228]	@ (800b434 <HAL_GPIO_DeInit+0x1c0>)
 800b350:	400a      	ands	r2, r1
 800b352:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2203      	movs	r2, #3
 800b358:	4013      	ands	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	220f      	movs	r2, #15
 800b35e:	409a      	lsls	r2, r3
 800b360:	0013      	movs	r3, r2
 800b362:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b364:	4a2d      	ldr	r2, [pc, #180]	@ (800b41c <HAL_GPIO_DeInit+0x1a8>)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	089b      	lsrs	r3, r3, #2
 800b36a:	3302      	adds	r3, #2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	589a      	ldr	r2, [r3, r2]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	43d9      	mvns	r1, r3
 800b374:	4829      	ldr	r0, [pc, #164]	@ (800b41c <HAL_GPIO_DeInit+0x1a8>)
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	089b      	lsrs	r3, r3, #2
 800b37a:	400a      	ands	r2, r1
 800b37c:	3302      	adds	r3, #2
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	005b      	lsls	r3, r3, #1
 800b38a:	2103      	movs	r1, #3
 800b38c:	4099      	lsls	r1, r3
 800b38e:	000b      	movs	r3, r1
 800b390:	431a      	orrs	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	08da      	lsrs	r2, r3, #3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	3208      	adds	r2, #8
 800b39e:	0092      	lsls	r2, r2, #2
 800b3a0:	58d3      	ldr	r3, [r2, r3]
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	2107      	movs	r1, #7
 800b3a6:	400a      	ands	r2, r1
 800b3a8:	0092      	lsls	r2, r2, #2
 800b3aa:	210f      	movs	r1, #15
 800b3ac:	4091      	lsls	r1, r2
 800b3ae:	000a      	movs	r2, r1
 800b3b0:	43d1      	mvns	r1, r2
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	08d2      	lsrs	r2, r2, #3
 800b3b6:	4019      	ands	r1, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3208      	adds	r2, #8
 800b3bc:	0092      	lsls	r2, r2, #2
 800b3be:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	0052      	lsls	r2, r2, #1
 800b3c8:	2103      	movs	r1, #3
 800b3ca:	4091      	lsls	r1, r2
 800b3cc:	000a      	movs	r2, r1
 800b3ce:	43d2      	mvns	r2, r2
 800b3d0:	401a      	ands	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	2101      	movs	r1, #1
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	4091      	lsls	r1, r2
 800b3e0:	000a      	movs	r2, r1
 800b3e2:	43d2      	mvns	r2, r2
 800b3e4:	401a      	ands	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	0052      	lsls	r2, r2, #1
 800b3f2:	2103      	movs	r1, #3
 800b3f4:	4091      	lsls	r1, r2
 800b3f6:	000a      	movs	r2, r1
 800b3f8:	43d2      	mvns	r2, r2
 800b3fa:	401a      	ands	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	609a      	str	r2, [r3, #8]
    }
    position++;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	3301      	adds	r3, #1
 800b404:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	40da      	lsrs	r2, r3
 800b40c:	1e13      	subs	r3, r2, #0
 800b40e:	d000      	beq.n	800b412 <HAL_GPIO_DeInit+0x19e>
 800b410:	e73c      	b.n	800b28c <HAL_GPIO_DeInit+0x18>
  }
}
 800b412:	46c0      	nop			@ (mov r8, r8)
 800b414:	46c0      	nop			@ (mov r8, r8)
 800b416:	46bd      	mov	sp, r7
 800b418:	b006      	add	sp, #24
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	40010000 	.word	0x40010000
 800b420:	50000400 	.word	0x50000400
 800b424:	50000800 	.word	0x50000800
 800b428:	50000c00 	.word	0x50000c00
 800b42c:	50001000 	.word	0x50001000
 800b430:	50001c00 	.word	0x50001c00
 800b434:	40010400 	.word	0x40010400

0800b438 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	000a      	movs	r2, r1
 800b442:	1cbb      	adds	r3, r7, #2
 800b444:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	1cba      	adds	r2, r7, #2
 800b44c:	8812      	ldrh	r2, [r2, #0]
 800b44e:	4013      	ands	r3, r2
 800b450:	d004      	beq.n	800b45c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b452:	230f      	movs	r3, #15
 800b454:	18fb      	adds	r3, r7, r3
 800b456:	2201      	movs	r2, #1
 800b458:	701a      	strb	r2, [r3, #0]
 800b45a:	e003      	b.n	800b464 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b45c:	230f      	movs	r3, #15
 800b45e:	18fb      	adds	r3, r7, r3
 800b460:	2200      	movs	r2, #0
 800b462:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b464:	230f      	movs	r3, #15
 800b466:	18fb      	adds	r3, r7, r3
 800b468:	781b      	ldrb	r3, [r3, #0]
}
 800b46a:	0018      	movs	r0, r3
 800b46c:	46bd      	mov	sp, r7
 800b46e:	b004      	add	sp, #16
 800b470:	bd80      	pop	{r7, pc}

0800b472 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b082      	sub	sp, #8
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	0008      	movs	r0, r1
 800b47c:	0011      	movs	r1, r2
 800b47e:	1cbb      	adds	r3, r7, #2
 800b480:	1c02      	adds	r2, r0, #0
 800b482:	801a      	strh	r2, [r3, #0]
 800b484:	1c7b      	adds	r3, r7, #1
 800b486:	1c0a      	adds	r2, r1, #0
 800b488:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b48a:	1c7b      	adds	r3, r7, #1
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d004      	beq.n	800b49c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b492:	1cbb      	adds	r3, r7, #2
 800b494:	881a      	ldrh	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800b49a:	e003      	b.n	800b4a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800b49c:	1cbb      	adds	r3, r7, #2
 800b49e:	881a      	ldrh	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b4a4:	46c0      	nop			@ (mov r8, r8)
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	b002      	add	sp, #8
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e082      	b.n	800b5c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2241      	movs	r2, #65	@ 0x41
 800b4c2:	5c9b      	ldrb	r3, [r3, r2]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d107      	bne.n	800b4da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2240      	movs	r2, #64	@ 0x40
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f7fa fc01 	bl	8005cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2241      	movs	r2, #65	@ 0x41
 800b4de:	2124      	movs	r1, #36	@ 0x24
 800b4e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	438a      	bics	r2, r1
 800b4f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4934      	ldr	r1, [pc, #208]	@ (800b5cc <HAL_I2C_Init+0x120>)
 800b4fc:	400a      	ands	r2, r1
 800b4fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	689a      	ldr	r2, [r3, #8]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4931      	ldr	r1, [pc, #196]	@ (800b5d0 <HAL_I2C_Init+0x124>)
 800b50c:	400a      	ands	r2, r1
 800b50e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d108      	bne.n	800b52a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	689a      	ldr	r2, [r3, #8]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2180      	movs	r1, #128	@ 0x80
 800b522:	0209      	lsls	r1, r1, #8
 800b524:	430a      	orrs	r2, r1
 800b526:	609a      	str	r2, [r3, #8]
 800b528:	e007      	b.n	800b53a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	689a      	ldr	r2, [r3, #8]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2184      	movs	r1, #132	@ 0x84
 800b534:	0209      	lsls	r1, r1, #8
 800b536:	430a      	orrs	r2, r1
 800b538:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d104      	bne.n	800b54c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2280      	movs	r2, #128	@ 0x80
 800b548:	0112      	lsls	r2, r2, #4
 800b54a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	491f      	ldr	r1, [pc, #124]	@ (800b5d4 <HAL_I2C_Init+0x128>)
 800b558:	430a      	orrs	r2, r1
 800b55a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68da      	ldr	r2, [r3, #12]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	491a      	ldr	r1, [pc, #104]	@ (800b5d0 <HAL_I2C_Init+0x124>)
 800b568:	400a      	ands	r2, r1
 800b56a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	691a      	ldr	r2, [r3, #16]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	431a      	orrs	r2, r3
 800b576:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	69d9      	ldr	r1, [r3, #28]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a1a      	ldr	r2, [r3, #32]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2241      	movs	r2, #65	@ 0x41
 800b5b0:	2120      	movs	r1, #32
 800b5b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2242      	movs	r2, #66	@ 0x42
 800b5be:	2100      	movs	r1, #0
 800b5c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	0018      	movs	r0, r3
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	b002      	add	sp, #8
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	f0ffffff 	.word	0xf0ffffff
 800b5d0:	ffff7fff 	.word	0xffff7fff
 800b5d4:	02008000 	.word	0x02008000

0800b5d8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b5d8:	b5b0      	push	{r4, r5, r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af02      	add	r7, sp, #8
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	0008      	movs	r0, r1
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	0019      	movs	r1, r3
 800b5e6:	230a      	movs	r3, #10
 800b5e8:	18fb      	adds	r3, r7, r3
 800b5ea:	1c02      	adds	r2, r0, #0
 800b5ec:	801a      	strh	r2, [r3, #0]
 800b5ee:	2308      	movs	r3, #8
 800b5f0:	18fb      	adds	r3, r7, r3
 800b5f2:	1c0a      	adds	r2, r1, #0
 800b5f4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2241      	movs	r2, #65	@ 0x41
 800b5fa:	5c9b      	ldrb	r3, [r3, r2]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b20      	cmp	r3, #32
 800b600:	d000      	beq.n	800b604 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800b602:	e0dd      	b.n	800b7c0 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	699a      	ldr	r2, [r3, #24]
 800b60a:	2380      	movs	r3, #128	@ 0x80
 800b60c:	021b      	lsls	r3, r3, #8
 800b60e:	401a      	ands	r2, r3
 800b610:	2380      	movs	r3, #128	@ 0x80
 800b612:	021b      	lsls	r3, r3, #8
 800b614:	429a      	cmp	r2, r3
 800b616:	d101      	bne.n	800b61c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800b618:	2302      	movs	r3, #2
 800b61a:	e0d2      	b.n	800b7c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2240      	movs	r2, #64	@ 0x40
 800b620:	5c9b      	ldrb	r3, [r3, r2]
 800b622:	2b01      	cmp	r3, #1
 800b624:	d101      	bne.n	800b62a <HAL_I2C_Master_Transmit_DMA+0x52>
 800b626:	2302      	movs	r3, #2
 800b628:	e0cb      	b.n	800b7c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2240      	movs	r2, #64	@ 0x40
 800b62e:	2101      	movs	r1, #1
 800b630:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2241      	movs	r2, #65	@ 0x41
 800b636:	2121      	movs	r1, #33	@ 0x21
 800b638:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2242      	movs	r2, #66	@ 0x42
 800b63e:	2110      	movs	r1, #16
 800b640:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2208      	movs	r2, #8
 800b652:	18ba      	adds	r2, r7, r2
 800b654:	8812      	ldrh	r2, [r2, #0]
 800b656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4a5c      	ldr	r2, [pc, #368]	@ (800b7cc <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800b65c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	4a5b      	ldr	r2, [pc, #364]	@ (800b7d0 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800b662:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b668:	b29b      	uxth	r3, r3
 800b66a:	2bff      	cmp	r3, #255	@ 0xff
 800b66c:	d906      	bls.n	800b67c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	22ff      	movs	r2, #255	@ 0xff
 800b672:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b674:	2380      	movs	r3, #128	@ 0x80
 800b676:	045b      	lsls	r3, r3, #17
 800b678:	617b      	str	r3, [r7, #20]
 800b67a:	e007      	b.n	800b68c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b680:	b29a      	uxth	r2, r3
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b686:	2380      	movs	r3, #128	@ 0x80
 800b688:	049b      	lsls	r3, r3, #18
 800b68a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b690:	2b00      	cmp	r3, #0
 800b692:	d100      	bne.n	800b696 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800b694:	e078      	b.n	800b788 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d023      	beq.n	800b6e6 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6a2:	4a4c      	ldr	r2, [pc, #304]	@ (800b7d4 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800b6a4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6aa:	4a4b      	ldr	r2, [pc, #300]	@ (800b7d8 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800b6ac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b6c2:	6879      	ldr	r1, [r7, #4]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3328      	adds	r3, #40	@ 0x28
 800b6ca:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b6d0:	2513      	movs	r5, #19
 800b6d2:	197c      	adds	r4, r7, r5
 800b6d4:	f7ff f8ac 	bl	800a830 <HAL_DMA_Start_IT>
 800b6d8:	0003      	movs	r3, r0
 800b6da:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b6dc:	197b      	adds	r3, r7, r5
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d13d      	bne.n	800b760 <HAL_I2C_Master_Transmit_DMA+0x188>
 800b6e4:	e013      	b.n	800b70e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2241      	movs	r2, #65	@ 0x41
 800b6ea:	2120      	movs	r1, #32
 800b6ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2242      	movs	r2, #66	@ 0x42
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6fa:	2280      	movs	r2, #128	@ 0x80
 800b6fc:	431a      	orrs	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2240      	movs	r2, #64	@ 0x40
 800b706:	2100      	movs	r1, #0
 800b708:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e059      	b.n	800b7c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b712:	b2da      	uxtb	r2, r3
 800b714:	697c      	ldr	r4, [r7, #20]
 800b716:	230a      	movs	r3, #10
 800b718:	18fb      	adds	r3, r7, r3
 800b71a:	8819      	ldrh	r1, [r3, #0]
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	4b2f      	ldr	r3, [pc, #188]	@ (800b7dc <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	0023      	movs	r3, r4
 800b724:	f001 fd0e 	bl	800d144 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b732:	1ad3      	subs	r3, r2, r3
 800b734:	b29a      	uxth	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2240      	movs	r2, #64	@ 0x40
 800b73e:	2100      	movs	r1, #0
 800b740:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2110      	movs	r1, #16
 800b746:	0018      	movs	r0, r3
 800b748:	f001 fd36 	bl	800d1b8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2180      	movs	r1, #128	@ 0x80
 800b758:	01c9      	lsls	r1, r1, #7
 800b75a:	430a      	orrs	r2, r1
 800b75c:	601a      	str	r2, [r3, #0]
 800b75e:	e02d      	b.n	800b7bc <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2241      	movs	r2, #65	@ 0x41
 800b764:	2120      	movs	r1, #32
 800b766:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2242      	movs	r2, #66	@ 0x42
 800b76c:	2100      	movs	r1, #0
 800b76e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b774:	2210      	movs	r2, #16
 800b776:	431a      	orrs	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2240      	movs	r2, #64	@ 0x40
 800b780:	2100      	movs	r1, #0
 800b782:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	e01c      	b.n	800b7c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	4a15      	ldr	r2, [pc, #84]	@ (800b7e0 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800b78c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b792:	b2da      	uxtb	r2, r3
 800b794:	2380      	movs	r3, #128	@ 0x80
 800b796:	049c      	lsls	r4, r3, #18
 800b798:	230a      	movs	r3, #10
 800b79a:	18fb      	adds	r3, r7, r3
 800b79c:	8819      	ldrh	r1, [r3, #0]
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	4b0e      	ldr	r3, [pc, #56]	@ (800b7dc <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	0023      	movs	r3, r4
 800b7a6:	f001 fccd 	bl	800d144 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2240      	movs	r2, #64	@ 0x40
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	0018      	movs	r0, r3
 800b7b8:	f001 fcfe 	bl	800d1b8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e000      	b.n	800b7c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b7c0:	2302      	movs	r3, #2
  }
}
 800b7c2:	0018      	movs	r0, r3
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	b006      	add	sp, #24
 800b7c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b7ca:	46c0      	nop			@ (mov r8, r8)
 800b7cc:	ffff0000 	.word	0xffff0000
 800b7d0:	0800bfdd 	.word	0x0800bfdd
 800b7d4:	0800cf95 	.word	0x0800cf95
 800b7d8:	0800d0d5 	.word	0x0800d0d5
 800b7dc:	80002000 	.word	0x80002000
 800b7e0:	0800bb89 	.word	0x0800bb89

0800b7e4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b7e4:	b5b0      	push	{r4, r5, r7, lr}
 800b7e6:	b088      	sub	sp, #32
 800b7e8:	af02      	add	r7, sp, #8
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	0008      	movs	r0, r1
 800b7ee:	607a      	str	r2, [r7, #4]
 800b7f0:	0019      	movs	r1, r3
 800b7f2:	230a      	movs	r3, #10
 800b7f4:	18fb      	adds	r3, r7, r3
 800b7f6:	1c02      	adds	r2, r0, #0
 800b7f8:	801a      	strh	r2, [r3, #0]
 800b7fa:	2308      	movs	r3, #8
 800b7fc:	18fb      	adds	r3, r7, r3
 800b7fe:	1c0a      	adds	r2, r1, #0
 800b800:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2241      	movs	r2, #65	@ 0x41
 800b806:	5c9b      	ldrb	r3, [r3, r2]
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b20      	cmp	r3, #32
 800b80c:	d000      	beq.n	800b810 <HAL_I2C_Master_Receive_DMA+0x2c>
 800b80e:	e0dd      	b.n	800b9cc <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	699a      	ldr	r2, [r3, #24]
 800b816:	2380      	movs	r3, #128	@ 0x80
 800b818:	021b      	lsls	r3, r3, #8
 800b81a:	401a      	ands	r2, r3
 800b81c:	2380      	movs	r3, #128	@ 0x80
 800b81e:	021b      	lsls	r3, r3, #8
 800b820:	429a      	cmp	r2, r3
 800b822:	d101      	bne.n	800b828 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800b824:	2302      	movs	r3, #2
 800b826:	e0d2      	b.n	800b9ce <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2240      	movs	r2, #64	@ 0x40
 800b82c:	5c9b      	ldrb	r3, [r3, r2]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d101      	bne.n	800b836 <HAL_I2C_Master_Receive_DMA+0x52>
 800b832:	2302      	movs	r3, #2
 800b834:	e0cb      	b.n	800b9ce <HAL_I2C_Master_Receive_DMA+0x1ea>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2240      	movs	r2, #64	@ 0x40
 800b83a:	2101      	movs	r1, #1
 800b83c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2241      	movs	r2, #65	@ 0x41
 800b842:	2122      	movs	r1, #34	@ 0x22
 800b844:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2242      	movs	r2, #66	@ 0x42
 800b84a:	2110      	movs	r1, #16
 800b84c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2208      	movs	r2, #8
 800b85e:	18ba      	adds	r2, r7, r2
 800b860:	8812      	ldrh	r2, [r2, #0]
 800b862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	4a5c      	ldr	r2, [pc, #368]	@ (800b9d8 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800b868:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	4a5b      	ldr	r2, [pc, #364]	@ (800b9dc <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800b86e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b874:	b29b      	uxth	r3, r3
 800b876:	2bff      	cmp	r3, #255	@ 0xff
 800b878:	d906      	bls.n	800b888 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	22ff      	movs	r2, #255	@ 0xff
 800b87e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b880:	2380      	movs	r3, #128	@ 0x80
 800b882:	045b      	lsls	r3, r3, #17
 800b884:	617b      	str	r3, [r7, #20]
 800b886:	e007      	b.n	800b898 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b892:	2380      	movs	r3, #128	@ 0x80
 800b894:	049b      	lsls	r3, r3, #18
 800b896:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d100      	bne.n	800b8a2 <HAL_I2C_Master_Receive_DMA+0xbe>
 800b8a0:	e078      	b.n	800b994 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d023      	beq.n	800b8f2 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8ae:	4a4c      	ldr	r2, [pc, #304]	@ (800b9e0 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800b8b0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8b6:	4a4b      	ldr	r2, [pc, #300]	@ (800b9e4 <HAL_I2C_Master_Receive_DMA+0x200>)
 800b8b8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8be:	2200      	movs	r2, #0
 800b8c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	3324      	adds	r3, #36	@ 0x24
 800b8d4:	0019      	movs	r1, r3
 800b8d6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b8dc:	2513      	movs	r5, #19
 800b8de:	197c      	adds	r4, r7, r5
 800b8e0:	f7fe ffa6 	bl	800a830 <HAL_DMA_Start_IT>
 800b8e4:	0003      	movs	r3, r0
 800b8e6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b8e8:	197b      	adds	r3, r7, r5
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d13d      	bne.n	800b96c <HAL_I2C_Master_Receive_DMA+0x188>
 800b8f0:	e013      	b.n	800b91a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2241      	movs	r2, #65	@ 0x41
 800b8f6:	2120      	movs	r1, #32
 800b8f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2242      	movs	r2, #66	@ 0x42
 800b8fe:	2100      	movs	r1, #0
 800b900:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b906:	2280      	movs	r2, #128	@ 0x80
 800b908:	431a      	orrs	r2, r3
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2240      	movs	r2, #64	@ 0x40
 800b912:	2100      	movs	r1, #0
 800b914:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e059      	b.n	800b9ce <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	697c      	ldr	r4, [r7, #20]
 800b922:	230a      	movs	r3, #10
 800b924:	18fb      	adds	r3, r7, r3
 800b926:	8819      	ldrh	r1, [r3, #0]
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	4b2f      	ldr	r3, [pc, #188]	@ (800b9e8 <HAL_I2C_Master_Receive_DMA+0x204>)
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	0023      	movs	r3, r4
 800b930:	f001 fc08 	bl	800d144 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b938:	b29a      	uxth	r2, r3
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	b29a      	uxth	r2, r3
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2240      	movs	r2, #64	@ 0x40
 800b94a:	2100      	movs	r1, #0
 800b94c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2110      	movs	r1, #16
 800b952:	0018      	movs	r0, r3
 800b954:	f001 fc30 	bl	800d1b8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2180      	movs	r1, #128	@ 0x80
 800b964:	0209      	lsls	r1, r1, #8
 800b966:	430a      	orrs	r2, r1
 800b968:	601a      	str	r2, [r3, #0]
 800b96a:	e02d      	b.n	800b9c8 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2241      	movs	r2, #65	@ 0x41
 800b970:	2120      	movs	r1, #32
 800b972:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2242      	movs	r2, #66	@ 0x42
 800b978:	2100      	movs	r1, #0
 800b97a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b980:	2210      	movs	r2, #16
 800b982:	431a      	orrs	r2, r3
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2240      	movs	r2, #64	@ 0x40
 800b98c:	2100      	movs	r1, #0
 800b98e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e01c      	b.n	800b9ce <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	4a15      	ldr	r2, [pc, #84]	@ (800b9ec <HAL_I2C_Master_Receive_DMA+0x208>)
 800b998:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	2380      	movs	r3, #128	@ 0x80
 800b9a2:	049c      	lsls	r4, r3, #18
 800b9a4:	230a      	movs	r3, #10
 800b9a6:	18fb      	adds	r3, r7, r3
 800b9a8:	8819      	ldrh	r1, [r3, #0]
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b9e8 <HAL_I2C_Master_Receive_DMA+0x204>)
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	0023      	movs	r3, r4
 800b9b2:	f001 fbc7 	bl	800d144 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2240      	movs	r2, #64	@ 0x40
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	0018      	movs	r0, r3
 800b9c4:	f001 fbf8 	bl	800d1b8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	e000      	b.n	800b9ce <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b9cc:	2302      	movs	r3, #2
  }
}
 800b9ce:	0018      	movs	r0, r3
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	b006      	add	sp, #24
 800b9d4:	bdb0      	pop	{r4, r5, r7, pc}
 800b9d6:	46c0      	nop			@ (mov r8, r8)
 800b9d8:	ffff0000 	.word	0xffff0000
 800b9dc:	0800bfdd 	.word	0x0800bfdd
 800b9e0:	0800d035 	.word	0x0800d035
 800b9e4:	0800d0d5 	.word	0x0800d0d5
 800b9e8:	80002400 	.word	0x80002400
 800b9ec:	0800bb89 	.word	0x0800bb89

0800b9f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d005      	beq.n	800ba1c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	68f9      	ldr	r1, [r7, #12]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	4798      	blx	r3
  }
}
 800ba1c:	46c0      	nop			@ (mov r8, r8)
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	b004      	add	sp, #16
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	2380      	movs	r3, #128	@ 0x80
 800ba40:	005b      	lsls	r3, r3, #1
 800ba42:	4013      	ands	r3, r2
 800ba44:	d00e      	beq.n	800ba64 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	2280      	movs	r2, #128	@ 0x80
 800ba4a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ba4c:	d00a      	beq.n	800ba64 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba52:	2201      	movs	r2, #1
 800ba54:	431a      	orrs	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2280      	movs	r2, #128	@ 0x80
 800ba60:	0052      	lsls	r2, r2, #1
 800ba62:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	2380      	movs	r3, #128	@ 0x80
 800ba68:	00db      	lsls	r3, r3, #3
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	d00e      	beq.n	800ba8c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2280      	movs	r2, #128	@ 0x80
 800ba72:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ba74:	d00a      	beq.n	800ba8c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba7a:	2208      	movs	r2, #8
 800ba7c:	431a      	orrs	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2280      	movs	r2, #128	@ 0x80
 800ba88:	00d2      	lsls	r2, r2, #3
 800ba8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	2380      	movs	r3, #128	@ 0x80
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4013      	ands	r3, r2
 800ba94:	d00e      	beq.n	800bab4 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	2280      	movs	r2, #128	@ 0x80
 800ba9a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ba9c:	d00a      	beq.n	800bab4 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baa2:	2202      	movs	r2, #2
 800baa4:	431a      	orrs	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2280      	movs	r2, #128	@ 0x80
 800bab0:	0092      	lsls	r2, r2, #2
 800bab2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bab8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	220b      	movs	r2, #11
 800babe:	4013      	ands	r3, r2
 800bac0:	d005      	beq.n	800bace <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	0011      	movs	r1, r2
 800bac8:	0018      	movs	r0, r3
 800baca:	f001 f915 	bl	800ccf8 <I2C_ITError>
  }
}
 800bace:	46c0      	nop			@ (mov r8, r8)
 800bad0:	46bd      	mov	sp, r7
 800bad2:	b006      	add	sp, #24
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b082      	sub	sp, #8
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bade:	46c0      	nop			@ (mov r8, r8)
 800bae0:	46bd      	mov	sp, r7
 800bae2:	b002      	add	sp, #8
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800baee:	46c0      	nop			@ (mov r8, r8)
 800baf0:	46bd      	mov	sp, r7
 800baf2:	b002      	add	sp, #8
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b082      	sub	sp, #8
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bafe:	46c0      	nop			@ (mov r8, r8)
 800bb00:	46bd      	mov	sp, r7
 800bb02:	b002      	add	sp, #8
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b082      	sub	sp, #8
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bb0e:	46c0      	nop			@ (mov r8, r8)
 800bb10:	46bd      	mov	sp, r7
 800bb12:	b002      	add	sp, #8
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	0008      	movs	r0, r1
 800bb20:	0011      	movs	r1, r2
 800bb22:	1cfb      	adds	r3, r7, #3
 800bb24:	1c02      	adds	r2, r0, #0
 800bb26:	701a      	strb	r2, [r3, #0]
 800bb28:	003b      	movs	r3, r7
 800bb2a:	1c0a      	adds	r2, r1, #0
 800bb2c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bb2e:	46c0      	nop			@ (mov r8, r8)
 800bb30:	46bd      	mov	sp, r7
 800bb32:	b002      	add	sp, #8
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb36:	b580      	push	{r7, lr}
 800bb38:	b082      	sub	sp, #8
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bb3e:	46c0      	nop			@ (mov r8, r8)
 800bb40:	46bd      	mov	sp, r7
 800bb42:	b002      	add	sp, #8
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b082      	sub	sp, #8
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bb4e:	46c0      	nop			@ (mov r8, r8)
 800bb50:	46bd      	mov	sp, r7
 800bb52:	b002      	add	sp, #8
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b082      	sub	sp, #8
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bb5e:	46c0      	nop			@ (mov r8, r8)
 800bb60:	46bd      	mov	sp, r7
 800bb62:	b002      	add	sp, #8
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bb6e:	46c0      	nop			@ (mov r8, r8)
 800bb70:	46bd      	mov	sp, r7
 800bb72:	b002      	add	sp, #8
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bb7e:	46c0      	nop			@ (mov r8, r8)
 800bb80:	46bd      	mov	sp, r7
 800bb82:	b002      	add	sp, #8
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bb88:	b590      	push	{r4, r7, lr}
 800bb8a:	b089      	sub	sp, #36	@ 0x24
 800bb8c:	af02      	add	r7, sp, #8
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2240      	movs	r2, #64	@ 0x40
 800bb9c:	5c9b      	ldrb	r3, [r3, r2]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d101      	bne.n	800bba6 <I2C_Master_ISR_IT+0x1e>
 800bba2:	2302      	movs	r3, #2
 800bba4:	e113      	b.n	800bdce <I2C_Master_ISR_IT+0x246>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2240      	movs	r2, #64	@ 0x40
 800bbaa:	2101      	movs	r1, #1
 800bbac:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	2210      	movs	r2, #16
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	d012      	beq.n	800bbdc <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2210      	movs	r2, #16
 800bbba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bbbc:	d00e      	beq.n	800bbdc <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2210      	movs	r2, #16
 800bbc4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbca:	2204      	movs	r2, #4
 800bbcc:	431a      	orrs	r2, r3
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	f001 f9ba 	bl	800cf4e <I2C_Flush_TXDR>
 800bbda:	e0e5      	b.n	800bda8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	2204      	movs	r2, #4
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	d021      	beq.n	800bc28 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2204      	movs	r2, #4
 800bbe8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bbea:	d01d      	beq.n	800bc28 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	2204      	movs	r2, #4
 800bbf0:	4393      	bics	r3, r2
 800bbf2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbfe:	b2d2      	uxtb	r2, r2
 800bc00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc10:	3b01      	subs	r3, #1
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc26:	e0bf      	b.n	800bda8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	d01c      	beq.n	800bc6a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2202      	movs	r2, #2
 800bc34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc36:	d018      	beq.n	800bc6a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3c:	781a      	ldrb	r2, [r3, #0]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc52:	3b01      	subs	r3, #1
 800bc54:	b29a      	uxth	r2, r3
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	3b01      	subs	r3, #1
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc68:	e09e      	b.n	800bda8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2280      	movs	r2, #128	@ 0x80
 800bc6e:	4013      	ands	r3, r2
 800bc70:	d100      	bne.n	800bc74 <I2C_Master_ISR_IT+0xec>
 800bc72:	e069      	b.n	800bd48 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2240      	movs	r2, #64	@ 0x40
 800bc78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc7a:	d065      	beq.n	800bd48 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d04a      	beq.n	800bd1c <I2C_Master_ISR_IT+0x194>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d146      	bne.n	800bd1c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	2112      	movs	r1, #18
 800bc98:	187b      	adds	r3, r7, r1
 800bc9a:	0592      	lsls	r2, r2, #22
 800bc9c:	0d92      	lsrs	r2, r2, #22
 800bc9e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	2bff      	cmp	r3, #255	@ 0xff
 800bca8:	d910      	bls.n	800bccc <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	22ff      	movs	r2, #255	@ 0xff
 800bcae:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	2380      	movs	r3, #128	@ 0x80
 800bcb8:	045c      	lsls	r4, r3, #17
 800bcba:	187b      	adds	r3, r7, r1
 800bcbc:	8819      	ldrh	r1, [r3, #0]
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	0023      	movs	r3, r4
 800bcc6:	f001 fa3d 	bl	800d144 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcca:	e03c      	b.n	800bd46 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcda:	4a3f      	ldr	r2, [pc, #252]	@ (800bdd8 <I2C_Master_ISR_IT+0x250>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d00e      	beq.n	800bcfe <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bce4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bcea:	2312      	movs	r3, #18
 800bcec:	18fb      	adds	r3, r7, r3
 800bcee:	8819      	ldrh	r1, [r3, #0]
 800bcf0:	68f8      	ldr	r0, [r7, #12]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	0023      	movs	r3, r4
 800bcf8:	f001 fa24 	bl	800d144 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcfc:	e023      	b.n	800bd46 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	2380      	movs	r3, #128	@ 0x80
 800bd06:	049c      	lsls	r4, r3, #18
 800bd08:	2312      	movs	r3, #18
 800bd0a:	18fb      	adds	r3, r7, r3
 800bd0c:	8819      	ldrh	r1, [r3, #0]
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	2300      	movs	r3, #0
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	0023      	movs	r3, r4
 800bd16:	f001 fa15 	bl	800d144 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd1a:	e014      	b.n	800bd46 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	2380      	movs	r3, #128	@ 0x80
 800bd24:	049b      	lsls	r3, r3, #18
 800bd26:	401a      	ands	r2, r3
 800bd28:	2380      	movs	r3, #128	@ 0x80
 800bd2a:	049b      	lsls	r3, r3, #18
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d004      	beq.n	800bd3a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	0018      	movs	r0, r3
 800bd34:	f000 fcf4 	bl	800c720 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd38:	e036      	b.n	800bda8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2140      	movs	r1, #64	@ 0x40
 800bd3e:	0018      	movs	r0, r3
 800bd40:	f000 ffda 	bl	800ccf8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd44:	e030      	b.n	800bda8 <I2C_Master_ISR_IT+0x220>
 800bd46:	e02f      	b.n	800bda8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2240      	movs	r2, #64	@ 0x40
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	d02b      	beq.n	800bda8 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2240      	movs	r2, #64	@ 0x40
 800bd54:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bd56:	d027      	beq.n	800bda8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d11d      	bne.n	800bd9e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	2380      	movs	r3, #128	@ 0x80
 800bd6a:	049b      	lsls	r3, r3, #18
 800bd6c:	401a      	ands	r2, r3
 800bd6e:	2380      	movs	r3, #128	@ 0x80
 800bd70:	049b      	lsls	r3, r3, #18
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d018      	beq.n	800bda8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd7a:	4a17      	ldr	r2, [pc, #92]	@ (800bdd8 <I2C_Master_ISR_IT+0x250>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d109      	bne.n	800bd94 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	685a      	ldr	r2, [r3, #4]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2180      	movs	r1, #128	@ 0x80
 800bd8c:	01c9      	lsls	r1, r1, #7
 800bd8e:	430a      	orrs	r2, r1
 800bd90:	605a      	str	r2, [r3, #4]
 800bd92:	e009      	b.n	800bda8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	0018      	movs	r0, r3
 800bd98:	f000 fcc2 	bl	800c720 <I2C_ITMasterSeqCplt>
 800bd9c:	e004      	b.n	800bda8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2140      	movs	r1, #64	@ 0x40
 800bda2:	0018      	movs	r0, r3
 800bda4:	f000 ffa8 	bl	800ccf8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	2220      	movs	r2, #32
 800bdac:	4013      	ands	r3, r2
 800bdae:	d009      	beq.n	800bdc4 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2220      	movs	r2, #32
 800bdb4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bdb6:	d005      	beq.n	800bdc4 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	0011      	movs	r1, r2
 800bdbe:	0018      	movs	r0, r3
 800bdc0:	f000 fd54 	bl	800c86c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2240      	movs	r2, #64	@ 0x40
 800bdc8:	2100      	movs	r1, #0
 800bdca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	0018      	movs	r0, r3
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	b007      	add	sp, #28
 800bdd4:	bd90      	pop	{r4, r7, pc}
 800bdd6:	46c0      	nop			@ (mov r8, r8)
 800bdd8:	ffff0000 	.word	0xffff0000

0800bddc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b086      	sub	sp, #24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2240      	movs	r2, #64	@ 0x40
 800bdf6:	5c9b      	ldrb	r3, [r3, r2]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d101      	bne.n	800be00 <I2C_Slave_ISR_IT+0x24>
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	e0e6      	b.n	800bfce <I2C_Slave_ISR_IT+0x1f2>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2240      	movs	r2, #64	@ 0x40
 800be04:	2101      	movs	r1, #1
 800be06:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	2220      	movs	r2, #32
 800be0c:	4013      	ands	r3, r2
 800be0e:	d009      	beq.n	800be24 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2220      	movs	r2, #32
 800be14:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800be16:	d005      	beq.n	800be24 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	0011      	movs	r1, r2
 800be1e:	0018      	movs	r0, r3
 800be20:	f000 fdf2 	bl	800ca08 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	2210      	movs	r2, #16
 800be28:	4013      	ands	r3, r2
 800be2a:	d052      	beq.n	800bed2 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2210      	movs	r2, #16
 800be30:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be32:	d04e      	beq.n	800bed2 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d12d      	bne.n	800be9a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2241      	movs	r2, #65	@ 0x41
 800be42:	5c9b      	ldrb	r3, [r3, r2]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b28      	cmp	r3, #40	@ 0x28
 800be48:	d10b      	bne.n	800be62 <I2C_Slave_ISR_IT+0x86>
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	2380      	movs	r3, #128	@ 0x80
 800be4e:	049b      	lsls	r3, r3, #18
 800be50:	429a      	cmp	r2, r3
 800be52:	d106      	bne.n	800be62 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	0011      	movs	r1, r2
 800be5a:	0018      	movs	r0, r3
 800be5c:	f000 fef4 	bl	800cc48 <I2C_ITListenCplt>
 800be60:	e036      	b.n	800bed0 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2241      	movs	r2, #65	@ 0x41
 800be66:	5c9b      	ldrb	r3, [r3, r2]
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b29      	cmp	r3, #41	@ 0x29
 800be6c:	d110      	bne.n	800be90 <I2C_Slave_ISR_IT+0xb4>
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	4a59      	ldr	r2, [pc, #356]	@ (800bfd8 <I2C_Slave_ISR_IT+0x1fc>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d00c      	beq.n	800be90 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2210      	movs	r2, #16
 800be7c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	0018      	movs	r0, r3
 800be82:	f001 f864 	bl	800cf4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	0018      	movs	r0, r3
 800be8a:	f000 fc8b 	bl	800c7a4 <I2C_ITSlaveSeqCplt>
 800be8e:	e01f      	b.n	800bed0 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2210      	movs	r2, #16
 800be96:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800be98:	e091      	b.n	800bfbe <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2210      	movs	r2, #16
 800bea0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bea6:	2204      	movs	r2, #4
 800bea8:	431a      	orrs	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d005      	beq.n	800bec0 <I2C_Slave_ISR_IT+0xe4>
 800beb4:	697a      	ldr	r2, [r7, #20]
 800beb6:	2380      	movs	r3, #128	@ 0x80
 800beb8:	045b      	lsls	r3, r3, #17
 800beba:	429a      	cmp	r2, r3
 800bebc:	d000      	beq.n	800bec0 <I2C_Slave_ISR_IT+0xe4>
 800bebe:	e07e      	b.n	800bfbe <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	0011      	movs	r1, r2
 800bec8:	0018      	movs	r0, r3
 800beca:	f000 ff15 	bl	800ccf8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bece:	e076      	b.n	800bfbe <I2C_Slave_ISR_IT+0x1e2>
 800bed0:	e075      	b.n	800bfbe <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	2204      	movs	r2, #4
 800bed6:	4013      	ands	r3, r2
 800bed8:	d02f      	beq.n	800bf3a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2204      	movs	r2, #4
 800bede:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bee0:	d02b      	beq.n	800bf3a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d018      	beq.n	800bf1e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bef6:	b2d2      	uxtb	r2, r2
 800bef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	3b01      	subs	r3, #1
 800bf18:	b29a      	uxth	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d14c      	bne.n	800bfc2 <I2C_Slave_ISR_IT+0x1e6>
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	4a2b      	ldr	r2, [pc, #172]	@ (800bfd8 <I2C_Slave_ISR_IT+0x1fc>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d048      	beq.n	800bfc2 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	0018      	movs	r0, r3
 800bf34:	f000 fc36 	bl	800c7a4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bf38:	e043      	b.n	800bfc2 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	2208      	movs	r2, #8
 800bf3e:	4013      	ands	r3, r2
 800bf40:	d00a      	beq.n	800bf58 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2208      	movs	r2, #8
 800bf46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bf48:	d006      	beq.n	800bf58 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bf4a:	693a      	ldr	r2, [r7, #16]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	0011      	movs	r1, r2
 800bf50:	0018      	movs	r0, r3
 800bf52:	f000 fb41 	bl	800c5d8 <I2C_ITAddrCplt>
 800bf56:	e035      	b.n	800bfc4 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	d031      	beq.n	800bfc4 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2202      	movs	r2, #2
 800bf64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf66:	d02d      	beq.n	800bfc4 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d018      	beq.n	800bfa4 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf76:	781a      	ldrb	r2, [r3, #0]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	b29a      	uxth	r2, r3
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bfa2:	e00f      	b.n	800bfc4 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	2380      	movs	r3, #128	@ 0x80
 800bfa8:	045b      	lsls	r3, r3, #17
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d002      	beq.n	800bfb4 <I2C_Slave_ISR_IT+0x1d8>
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d107      	bne.n	800bfc4 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	0018      	movs	r0, r3
 800bfb8:	f000 fbf4 	bl	800c7a4 <I2C_ITSlaveSeqCplt>
 800bfbc:	e002      	b.n	800bfc4 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800bfbe:	46c0      	nop			@ (mov r8, r8)
 800bfc0:	e000      	b.n	800bfc4 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800bfc2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2240      	movs	r2, #64	@ 0x40
 800bfc8:	2100      	movs	r1, #0
 800bfca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	0018      	movs	r0, r3
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	b006      	add	sp, #24
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	46c0      	nop			@ (mov r8, r8)
 800bfd8:	ffff0000 	.word	0xffff0000

0800bfdc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bfdc:	b590      	push	{r4, r7, lr}
 800bfde:	b089      	sub	sp, #36	@ 0x24
 800bfe0:	af02      	add	r7, sp, #8
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2240      	movs	r2, #64	@ 0x40
 800bfec:	5c9b      	ldrb	r3, [r3, r2]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d101      	bne.n	800bff6 <I2C_Master_ISR_DMA+0x1a>
 800bff2:	2302      	movs	r3, #2
 800bff4:	e0e7      	b.n	800c1c6 <I2C_Master_ISR_DMA+0x1ea>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2240      	movs	r2, #64	@ 0x40
 800bffa:	2101      	movs	r1, #1
 800bffc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	2210      	movs	r2, #16
 800c002:	4013      	ands	r3, r2
 800c004:	d017      	beq.n	800c036 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2210      	movs	r2, #16
 800c00a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c00c:	d013      	beq.n	800c036 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2210      	movs	r2, #16
 800c014:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c01a:	2204      	movs	r2, #4
 800c01c:	431a      	orrs	r2, r3
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2120      	movs	r1, #32
 800c026:	0018      	movs	r0, r3
 800c028:	f001 f8c6 	bl	800d1b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	0018      	movs	r0, r3
 800c030:	f000 ff8d 	bl	800cf4e <I2C_Flush_TXDR>
 800c034:	e0c2      	b.n	800c1bc <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2280      	movs	r2, #128	@ 0x80
 800c03a:	4013      	ands	r3, r2
 800c03c:	d100      	bne.n	800c040 <I2C_Master_ISR_DMA+0x64>
 800c03e:	e07c      	b.n	800c13a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2240      	movs	r2, #64	@ 0x40
 800c044:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c046:	d100      	bne.n	800c04a <I2C_Master_ISR_DMA+0x6e>
 800c048:	e077      	b.n	800c13a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2140      	movs	r1, #64	@ 0x40
 800c056:	438a      	bics	r2, r1
 800c058:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c05e:	b29b      	uxth	r3, r3
 800c060:	2b00      	cmp	r3, #0
 800c062:	d055      	beq.n	800c110 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685b      	ldr	r3, [r3, #4]
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	2312      	movs	r3, #18
 800c06e:	18fb      	adds	r3, r7, r3
 800c070:	0592      	lsls	r2, r2, #22
 800c072:	0d92      	lsrs	r2, r2, #22
 800c074:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	2bff      	cmp	r3, #255	@ 0xff
 800c07e:	d906      	bls.n	800c08e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	22ff      	movs	r2, #255	@ 0xff
 800c084:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800c086:	2380      	movs	r3, #128	@ 0x80
 800c088:	045b      	lsls	r3, r3, #17
 800c08a:	617b      	str	r3, [r7, #20]
 800c08c:	e010      	b.n	800c0b0 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c092:	b29a      	uxth	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c09c:	4a4c      	ldr	r2, [pc, #304]	@ (800c1d0 <I2C_Master_ISR_DMA+0x1f4>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d003      	beq.n	800c0aa <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a6:	617b      	str	r3, [r7, #20]
 800c0a8:	e002      	b.n	800c0b0 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c0aa:	2380      	movs	r3, #128	@ 0x80
 800c0ac:	049b      	lsls	r3, r3, #18
 800c0ae:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	697c      	ldr	r4, [r7, #20]
 800c0b8:	2312      	movs	r3, #18
 800c0ba:	18fb      	adds	r3, r7, r3
 800c0bc:	8819      	ldrh	r1, [r3, #0]
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	0023      	movs	r3, r4
 800c0c6:	f001 f83d 	bl	800d144 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2241      	movs	r2, #65	@ 0x41
 800c0e0:	5c9b      	ldrb	r3, [r3, r2]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b22      	cmp	r3, #34	@ 0x22
 800c0e6:	d109      	bne.n	800c0fc <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2180      	movs	r1, #128	@ 0x80
 800c0f4:	0209      	lsls	r1, r1, #8
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c0fa:	e05f      	b.n	800c1bc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2180      	movs	r1, #128	@ 0x80
 800c108:	01c9      	lsls	r1, r1, #7
 800c10a:	430a      	orrs	r2, r1
 800c10c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c10e:	e055      	b.n	800c1bc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	685a      	ldr	r2, [r3, #4]
 800c116:	2380      	movs	r3, #128	@ 0x80
 800c118:	049b      	lsls	r3, r3, #18
 800c11a:	401a      	ands	r2, r3
 800c11c:	2380      	movs	r3, #128	@ 0x80
 800c11e:	049b      	lsls	r3, r3, #18
 800c120:	429a      	cmp	r2, r3
 800c122:	d004      	beq.n	800c12e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	0018      	movs	r0, r3
 800c128:	f000 fafa 	bl	800c720 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c12c:	e046      	b.n	800c1bc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2140      	movs	r1, #64	@ 0x40
 800c132:	0018      	movs	r0, r3
 800c134:	f000 fde0 	bl	800ccf8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c138:	e040      	b.n	800c1bc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2240      	movs	r2, #64	@ 0x40
 800c13e:	4013      	ands	r3, r2
 800c140:	d02c      	beq.n	800c19c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2240      	movs	r2, #64	@ 0x40
 800c146:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c148:	d028      	beq.n	800c19c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c14e:	b29b      	uxth	r3, r3
 800c150:	2b00      	cmp	r3, #0
 800c152:	d11d      	bne.n	800c190 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	685a      	ldr	r2, [r3, #4]
 800c15a:	2380      	movs	r3, #128	@ 0x80
 800c15c:	049b      	lsls	r3, r3, #18
 800c15e:	401a      	ands	r2, r3
 800c160:	2380      	movs	r3, #128	@ 0x80
 800c162:	049b      	lsls	r3, r3, #18
 800c164:	429a      	cmp	r2, r3
 800c166:	d028      	beq.n	800c1ba <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c16c:	4a18      	ldr	r2, [pc, #96]	@ (800c1d0 <I2C_Master_ISR_DMA+0x1f4>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d109      	bne.n	800c186 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	685a      	ldr	r2, [r3, #4]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2180      	movs	r1, #128	@ 0x80
 800c17e:	01c9      	lsls	r1, r1, #7
 800c180:	430a      	orrs	r2, r1
 800c182:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c184:	e019      	b.n	800c1ba <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	0018      	movs	r0, r3
 800c18a:	f000 fac9 	bl	800c720 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c18e:	e014      	b.n	800c1ba <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2140      	movs	r1, #64	@ 0x40
 800c194:	0018      	movs	r0, r3
 800c196:	f000 fdaf 	bl	800ccf8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c19a:	e00e      	b.n	800c1ba <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2220      	movs	r2, #32
 800c1a0:	4013      	ands	r3, r2
 800c1a2:	d00b      	beq.n	800c1bc <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c1aa:	d007      	beq.n	800c1bc <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	0011      	movs	r1, r2
 800c1b2:	0018      	movs	r0, r3
 800c1b4:	f000 fb5a 	bl	800c86c <I2C_ITMasterCplt>
 800c1b8:	e000      	b.n	800c1bc <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800c1ba:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2240      	movs	r2, #64	@ 0x40
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	0018      	movs	r0, r3
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	b007      	add	sp, #28
 800c1cc:	bd90      	pop	{r4, r7, pc}
 800c1ce:	46c0      	nop			@ (mov r8, r8)
 800c1d0:	ffff0000 	.word	0xffff0000

0800c1d4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c1d4:	b590      	push	{r4, r7, lr}
 800c1d6:	b089      	sub	sp, #36	@ 0x24
 800c1d8:	af02      	add	r7, sp, #8
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c1e0:	4b88      	ldr	r3, [pc, #544]	@ (800c404 <I2C_Mem_ISR_DMA+0x230>)
 800c1e2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2240      	movs	r2, #64	@ 0x40
 800c1e8:	5c9b      	ldrb	r3, [r3, r2]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d101      	bne.n	800c1f2 <I2C_Mem_ISR_DMA+0x1e>
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	e104      	b.n	800c3fc <I2C_Mem_ISR_DMA+0x228>
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2240      	movs	r2, #64	@ 0x40
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	2210      	movs	r2, #16
 800c1fe:	4013      	ands	r3, r2
 800c200:	d017      	beq.n	800c232 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2210      	movs	r2, #16
 800c206:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c208:	d013      	beq.n	800c232 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2210      	movs	r2, #16
 800c210:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c216:	2204      	movs	r2, #4
 800c218:	431a      	orrs	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2120      	movs	r1, #32
 800c222:	0018      	movs	r0, r3
 800c224:	f000 ffc8 	bl	800d1b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	0018      	movs	r0, r3
 800c22c:	f000 fe8f 	bl	800cf4e <I2C_Flush_TXDR>
 800c230:	e0df      	b.n	800c3f2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2202      	movs	r2, #2
 800c236:	4013      	ands	r3, r2
 800c238:	d00d      	beq.n	800c256 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2202      	movs	r2, #2
 800c23e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c240:	d009      	beq.n	800c256 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c24a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2201      	movs	r2, #1
 800c250:	4252      	negs	r2, r2
 800c252:	651a      	str	r2, [r3, #80]	@ 0x50
 800c254:	e0cd      	b.n	800c3f2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2280      	movs	r2, #128	@ 0x80
 800c25a:	4013      	ands	r3, r2
 800c25c:	d05e      	beq.n	800c31c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2240      	movs	r2, #64	@ 0x40
 800c262:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c264:	d05a      	beq.n	800c31c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2110      	movs	r1, #16
 800c26a:	0018      	movs	r0, r3
 800c26c:	f000 ffa4 	bl	800d1b8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c274:	b29b      	uxth	r3, r3
 800c276:	2b00      	cmp	r3, #0
 800c278:	d04a      	beq.n	800c310 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c27e:	b29b      	uxth	r3, r3
 800c280:	2bff      	cmp	r3, #255	@ 0xff
 800c282:	d910      	bls.n	800c2a6 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	22ff      	movs	r2, #255	@ 0xff
 800c288:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c28e:	b299      	uxth	r1, r3
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c294:	b2da      	uxtb	r2, r3
 800c296:	2380      	movs	r3, #128	@ 0x80
 800c298:	045b      	lsls	r3, r3, #17
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	2400      	movs	r4, #0
 800c29e:	9400      	str	r4, [sp, #0]
 800c2a0:	f000 ff50 	bl	800d144 <I2C_TransferConfig>
 800c2a4:	e011      	b.n	800c2ca <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2b4:	b299      	uxth	r1, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	2380      	movs	r3, #128	@ 0x80
 800c2be:	049b      	lsls	r3, r3, #18
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	2400      	movs	r4, #0
 800c2c4:	9400      	str	r4, [sp, #0]
 800c2c6:	f000 ff3d 	bl	800d144 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2241      	movs	r2, #65	@ 0x41
 800c2e0:	5c9b      	ldrb	r3, [r3, r2]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b22      	cmp	r3, #34	@ 0x22
 800c2e6:	d109      	bne.n	800c2fc <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2180      	movs	r1, #128	@ 0x80
 800c2f4:	0209      	lsls	r1, r1, #8
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c2fa:	e07a      	b.n	800c3f2 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2180      	movs	r1, #128	@ 0x80
 800c308:	01c9      	lsls	r1, r1, #7
 800c30a:	430a      	orrs	r2, r1
 800c30c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c30e:	e070      	b.n	800c3f2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2140      	movs	r1, #64	@ 0x40
 800c314:	0018      	movs	r0, r3
 800c316:	f000 fcef 	bl	800ccf8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c31a:	e06a      	b.n	800c3f2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2240      	movs	r2, #64	@ 0x40
 800c320:	4013      	ands	r3, r2
 800c322:	d058      	beq.n	800c3d6 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2240      	movs	r2, #64	@ 0x40
 800c328:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c32a:	d054      	beq.n	800c3d6 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2241      	movs	r2, #65	@ 0x41
 800c330:	5c9b      	ldrb	r3, [r3, r2]
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b22      	cmp	r3, #34	@ 0x22
 800c336:	d101      	bne.n	800c33c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800c338:	4b33      	ldr	r3, [pc, #204]	@ (800c408 <I2C_Mem_ISR_DMA+0x234>)
 800c33a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c340:	b29b      	uxth	r3, r3
 800c342:	2bff      	cmp	r3, #255	@ 0xff
 800c344:	d911      	bls.n	800c36a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	22ff      	movs	r2, #255	@ 0xff
 800c34a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c350:	b299      	uxth	r1, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c356:	b2da      	uxtb	r2, r3
 800c358:	2380      	movs	r3, #128	@ 0x80
 800c35a:	045c      	lsls	r4, r3, #17
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	0023      	movs	r3, r4
 800c364:	f000 feee 	bl	800d144 <I2C_TransferConfig>
 800c368:	e012      	b.n	800c390 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c36e:	b29a      	uxth	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c378:	b299      	uxth	r1, r3
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c37e:	b2da      	uxtb	r2, r3
 800c380:	2380      	movs	r3, #128	@ 0x80
 800c382:	049c      	lsls	r4, r3, #18
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	9300      	str	r3, [sp, #0]
 800c38a:	0023      	movs	r3, r4
 800c38c:	f000 feda 	bl	800d144 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c394:	b29a      	uxth	r2, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2241      	movs	r2, #65	@ 0x41
 800c3a6:	5c9b      	ldrb	r3, [r3, r2]
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b22      	cmp	r3, #34	@ 0x22
 800c3ac:	d109      	bne.n	800c3c2 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2180      	movs	r1, #128	@ 0x80
 800c3ba:	0209      	lsls	r1, r1, #8
 800c3bc:	430a      	orrs	r2, r1
 800c3be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c3c0:	e017      	b.n	800c3f2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2180      	movs	r1, #128	@ 0x80
 800c3ce:	01c9      	lsls	r1, r1, #7
 800c3d0:	430a      	orrs	r2, r1
 800c3d2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c3d4:	e00d      	b.n	800c3f2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2220      	movs	r2, #32
 800c3da:	4013      	ands	r3, r2
 800c3dc:	d009      	beq.n	800c3f2 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3e4:	d005      	beq.n	800c3f2 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	0011      	movs	r1, r2
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f000 fa3d 	bl	800c86c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2240      	movs	r2, #64	@ 0x40
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	0018      	movs	r0, r3
 800c3fe:	46bd      	mov	sp, r7
 800c400:	b007      	add	sp, #28
 800c402:	bd90      	pop	{r4, r7, pc}
 800c404:	80002000 	.word	0x80002000
 800c408:	80002400 	.word	0x80002400

0800c40c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b088      	sub	sp, #32
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c41c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c41e:	2300      	movs	r3, #0
 800c420:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2240      	movs	r2, #64	@ 0x40
 800c426:	5c9b      	ldrb	r3, [r3, r2]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d101      	bne.n	800c430 <I2C_Slave_ISR_DMA+0x24>
 800c42c:	2302      	movs	r3, #2
 800c42e:	e0cd      	b.n	800c5cc <I2C_Slave_ISR_DMA+0x1c0>
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2240      	movs	r2, #64	@ 0x40
 800c434:	2101      	movs	r1, #1
 800c436:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2220      	movs	r2, #32
 800c43c:	4013      	ands	r3, r2
 800c43e:	d009      	beq.n	800c454 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2220      	movs	r2, #32
 800c444:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c446:	d005      	beq.n	800c454 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	0011      	movs	r1, r2
 800c44e:	0018      	movs	r0, r3
 800c450:	f000 fada 	bl	800ca08 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2210      	movs	r2, #16
 800c458:	4013      	ands	r3, r2
 800c45a:	d100      	bne.n	800c45e <I2C_Slave_ISR_DMA+0x52>
 800c45c:	e0a3      	b.n	800c5a6 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2210      	movs	r2, #16
 800c462:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c464:	d100      	bne.n	800c468 <I2C_Slave_ISR_DMA+0x5c>
 800c466:	e09e      	b.n	800c5a6 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	2380      	movs	r3, #128	@ 0x80
 800c46c:	01db      	lsls	r3, r3, #7
 800c46e:	4013      	ands	r3, r2
 800c470:	d105      	bne.n	800c47e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	2380      	movs	r3, #128	@ 0x80
 800c476:	021b      	lsls	r3, r3, #8
 800c478:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c47a:	d100      	bne.n	800c47e <I2C_Slave_ISR_DMA+0x72>
 800c47c:	e08c      	b.n	800c598 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00c      	beq.n	800c4a0 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	2380      	movs	r3, #128	@ 0x80
 800c48a:	021b      	lsls	r3, r3, #8
 800c48c:	4013      	ands	r3, r2
 800c48e:	d007      	beq.n	800c4a0 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d101      	bne.n	800c4a0 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800c49c:	2301      	movs	r3, #1
 800c49e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00c      	beq.n	800c4c2 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	2380      	movs	r3, #128	@ 0x80
 800c4ac:	01db      	lsls	r3, r3, #7
 800c4ae:	4013      	ands	r3, r2
 800c4b0:	d007      	beq.n	800c4c2 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d12d      	bne.n	800c524 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2241      	movs	r2, #65	@ 0x41
 800c4cc:	5c9b      	ldrb	r3, [r3, r2]
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b28      	cmp	r3, #40	@ 0x28
 800c4d2:	d10b      	bne.n	800c4ec <I2C_Slave_ISR_DMA+0xe0>
 800c4d4:	69ba      	ldr	r2, [r7, #24]
 800c4d6:	2380      	movs	r3, #128	@ 0x80
 800c4d8:	049b      	lsls	r3, r3, #18
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d106      	bne.n	800c4ec <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	0011      	movs	r1, r2
 800c4e4:	0018      	movs	r0, r3
 800c4e6:	f000 fbaf 	bl	800cc48 <I2C_ITListenCplt>
 800c4ea:	e054      	b.n	800c596 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2241      	movs	r2, #65	@ 0x41
 800c4f0:	5c9b      	ldrb	r3, [r3, r2]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b29      	cmp	r3, #41	@ 0x29
 800c4f6:	d110      	bne.n	800c51a <I2C_Slave_ISR_DMA+0x10e>
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	4a36      	ldr	r2, [pc, #216]	@ (800c5d4 <I2C_Slave_ISR_DMA+0x1c8>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d00c      	beq.n	800c51a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2210      	movs	r2, #16
 800c506:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	0018      	movs	r0, r3
 800c50c:	f000 fd1f 	bl	800cf4e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	0018      	movs	r0, r3
 800c514:	f000 f946 	bl	800c7a4 <I2C_ITSlaveSeqCplt>
 800c518:	e03d      	b.n	800c596 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2210      	movs	r2, #16
 800c520:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c522:	e03e      	b.n	800c5a2 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2210      	movs	r2, #16
 800c52a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c530:	2204      	movs	r2, #4
 800c532:	431a      	orrs	r2, r3
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c538:	2317      	movs	r3, #23
 800c53a:	18fb      	adds	r3, r7, r3
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	2141      	movs	r1, #65	@ 0x41
 800c540:	5c52      	ldrb	r2, [r2, r1]
 800c542:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d004      	beq.n	800c554 <I2C_Slave_ISR_DMA+0x148>
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	2380      	movs	r3, #128	@ 0x80
 800c54e:	045b      	lsls	r3, r3, #17
 800c550:	429a      	cmp	r2, r3
 800c552:	d126      	bne.n	800c5a2 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c554:	2217      	movs	r2, #23
 800c556:	18bb      	adds	r3, r7, r2
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	2b21      	cmp	r3, #33	@ 0x21
 800c55c:	d003      	beq.n	800c566 <I2C_Slave_ISR_DMA+0x15a>
 800c55e:	18bb      	adds	r3, r7, r2
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b29      	cmp	r3, #41	@ 0x29
 800c564:	d103      	bne.n	800c56e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2221      	movs	r2, #33	@ 0x21
 800c56a:	631a      	str	r2, [r3, #48]	@ 0x30
 800c56c:	e00b      	b.n	800c586 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c56e:	2217      	movs	r2, #23
 800c570:	18bb      	adds	r3, r7, r2
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b22      	cmp	r3, #34	@ 0x22
 800c576:	d003      	beq.n	800c580 <I2C_Slave_ISR_DMA+0x174>
 800c578:	18bb      	adds	r3, r7, r2
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c57e:	d102      	bne.n	800c586 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2222      	movs	r2, #34	@ 0x22
 800c584:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	0011      	movs	r1, r2
 800c58e:	0018      	movs	r0, r3
 800c590:	f000 fbb2 	bl	800ccf8 <I2C_ITError>
      if (treatdmanack == 1U)
 800c594:	e005      	b.n	800c5a2 <I2C_Slave_ISR_DMA+0x196>
 800c596:	e004      	b.n	800c5a2 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2210      	movs	r2, #16
 800c59e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c5a0:	e00f      	b.n	800c5c2 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800c5a2:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c5a4:	e00d      	b.n	800c5c2 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2208      	movs	r2, #8
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	d009      	beq.n	800c5c2 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2208      	movs	r2, #8
 800c5b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5b4:	d005      	beq.n	800c5c2 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	0011      	movs	r1, r2
 800c5bc:	0018      	movs	r0, r3
 800c5be:	f000 f80b 	bl	800c5d8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2240      	movs	r2, #64	@ 0x40
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	0018      	movs	r0, r3
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	b008      	add	sp, #32
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	ffff0000 	.word	0xffff0000

0800c5d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c5d8:	b5b0      	push	{r4, r5, r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2241      	movs	r2, #65	@ 0x41
 800c5e6:	5c9b      	ldrb	r3, [r3, r2]
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	001a      	movs	r2, r3
 800c5ec:	2328      	movs	r3, #40	@ 0x28
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	2b28      	cmp	r3, #40	@ 0x28
 800c5f2:	d000      	beq.n	800c5f6 <I2C_ITAddrCplt+0x1e>
 800c5f4:	e088      	b.n	800c708 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	0c1b      	lsrs	r3, r3, #16
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	250f      	movs	r5, #15
 800c602:	197b      	adds	r3, r7, r5
 800c604:	2101      	movs	r1, #1
 800c606:	400a      	ands	r2, r1
 800c608:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	0c1b      	lsrs	r3, r3, #16
 800c612:	b29a      	uxth	r2, r3
 800c614:	200c      	movs	r0, #12
 800c616:	183b      	adds	r3, r7, r0
 800c618:	21fe      	movs	r1, #254	@ 0xfe
 800c61a:	400a      	ands	r2, r1
 800c61c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	b29a      	uxth	r2, r3
 800c626:	240a      	movs	r4, #10
 800c628:	193b      	adds	r3, r7, r4
 800c62a:	0592      	lsls	r2, r2, #22
 800c62c:	0d92      	lsrs	r2, r2, #22
 800c62e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	b29a      	uxth	r2, r3
 800c638:	2308      	movs	r3, #8
 800c63a:	18fb      	adds	r3, r7, r3
 800c63c:	21fe      	movs	r1, #254	@ 0xfe
 800c63e:	400a      	ands	r2, r1
 800c640:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	2b02      	cmp	r3, #2
 800c648:	d148      	bne.n	800c6dc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c64a:	0021      	movs	r1, r4
 800c64c:	187b      	adds	r3, r7, r1
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	09db      	lsrs	r3, r3, #7
 800c652:	b29a      	uxth	r2, r3
 800c654:	183b      	adds	r3, r7, r0
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	4053      	eors	r3, r2
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	001a      	movs	r2, r3
 800c65e:	2306      	movs	r3, #6
 800c660:	4013      	ands	r3, r2
 800c662:	d120      	bne.n	800c6a6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800c664:	183b      	adds	r3, r7, r0
 800c666:	187a      	adds	r2, r7, r1
 800c668:	8812      	ldrh	r2, [r2, #0]
 800c66a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c670:	1c5a      	adds	r2, r3, #1
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d14c      	bne.n	800c718 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2208      	movs	r2, #8
 800c68a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2240      	movs	r2, #64	@ 0x40
 800c690:	2100      	movs	r1, #0
 800c692:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c694:	183b      	adds	r3, r7, r0
 800c696:	881a      	ldrh	r2, [r3, #0]
 800c698:	197b      	adds	r3, r7, r5
 800c69a:	7819      	ldrb	r1, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	0018      	movs	r0, r3
 800c6a0:	f7ff fa39 	bl	800bb16 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c6a4:	e038      	b.n	800c718 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800c6a6:	240c      	movs	r4, #12
 800c6a8:	193b      	adds	r3, r7, r4
 800c6aa:	2208      	movs	r2, #8
 800c6ac:	18ba      	adds	r2, r7, r2
 800c6ae:	8812      	ldrh	r2, [r2, #0]
 800c6b0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6b2:	2380      	movs	r3, #128	@ 0x80
 800c6b4:	021a      	lsls	r2, r3, #8
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	0011      	movs	r1, r2
 800c6ba:	0018      	movs	r0, r3
 800c6bc:	f000 fe0a 	bl	800d2d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2240      	movs	r2, #64	@ 0x40
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6c8:	193b      	adds	r3, r7, r4
 800c6ca:	881a      	ldrh	r2, [r3, #0]
 800c6cc:	230f      	movs	r3, #15
 800c6ce:	18fb      	adds	r3, r7, r3
 800c6d0:	7819      	ldrb	r1, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	0018      	movs	r0, r3
 800c6d6:	f7ff fa1e 	bl	800bb16 <HAL_I2C_AddrCallback>
}
 800c6da:	e01d      	b.n	800c718 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6dc:	2380      	movs	r3, #128	@ 0x80
 800c6de:	021a      	lsls	r2, r3, #8
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	0011      	movs	r1, r2
 800c6e4:	0018      	movs	r0, r3
 800c6e6:	f000 fdf5 	bl	800d2d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2240      	movs	r2, #64	@ 0x40
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6f2:	230c      	movs	r3, #12
 800c6f4:	18fb      	adds	r3, r7, r3
 800c6f6:	881a      	ldrh	r2, [r3, #0]
 800c6f8:	230f      	movs	r3, #15
 800c6fa:	18fb      	adds	r3, r7, r3
 800c6fc:	7819      	ldrb	r1, [r3, #0]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	0018      	movs	r0, r3
 800c702:	f7ff fa08 	bl	800bb16 <HAL_I2C_AddrCallback>
}
 800c706:	e007      	b.n	800c718 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2208      	movs	r2, #8
 800c70e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2240      	movs	r2, #64	@ 0x40
 800c714:	2100      	movs	r1, #0
 800c716:	5499      	strb	r1, [r3, r2]
}
 800c718:	46c0      	nop			@ (mov r8, r8)
 800c71a:	46bd      	mov	sp, r7
 800c71c:	b004      	add	sp, #16
 800c71e:	bdb0      	pop	{r4, r5, r7, pc}

0800c720 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2242      	movs	r2, #66	@ 0x42
 800c72c:	2100      	movs	r1, #0
 800c72e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2241      	movs	r2, #65	@ 0x41
 800c734:	5c9b      	ldrb	r3, [r3, r2]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b21      	cmp	r3, #33	@ 0x21
 800c73a:	d117      	bne.n	800c76c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2241      	movs	r2, #65	@ 0x41
 800c740:	2120      	movs	r1, #32
 800c742:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2211      	movs	r2, #17
 800c748:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2101      	movs	r1, #1
 800c754:	0018      	movs	r0, r3
 800c756:	f000 fdbd 	bl	800d2d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2240      	movs	r2, #64	@ 0x40
 800c75e:	2100      	movs	r1, #0
 800c760:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	0018      	movs	r0, r3
 800c766:	f7ff f9b6 	bl	800bad6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c76a:	e016      	b.n	800c79a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2241      	movs	r2, #65	@ 0x41
 800c770:	2120      	movs	r1, #32
 800c772:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2212      	movs	r2, #18
 800c778:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2102      	movs	r1, #2
 800c784:	0018      	movs	r0, r3
 800c786:	f000 fda5 	bl	800d2d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2240      	movs	r2, #64	@ 0x40
 800c78e:	2100      	movs	r1, #0
 800c790:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	0018      	movs	r0, r3
 800c796:	f7ff f9a6 	bl	800bae6 <HAL_I2C_MasterRxCpltCallback>
}
 800c79a:	46c0      	nop			@ (mov r8, r8)
 800c79c:	46bd      	mov	sp, r7
 800c79e:	b002      	add	sp, #8
 800c7a0:	bd80      	pop	{r7, pc}
	...

0800c7a4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2242      	movs	r2, #66	@ 0x42
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	2380      	movs	r3, #128	@ 0x80
 800c7c0:	01db      	lsls	r3, r3, #7
 800c7c2:	4013      	ands	r3, r2
 800c7c4:	d008      	beq.n	800c7d8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4924      	ldr	r1, [pc, #144]	@ (800c864 <I2C_ITSlaveSeqCplt+0xc0>)
 800c7d2:	400a      	ands	r2, r1
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	e00c      	b.n	800c7f2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	2380      	movs	r3, #128	@ 0x80
 800c7dc:	021b      	lsls	r3, r3, #8
 800c7de:	4013      	ands	r3, r2
 800c7e0:	d007      	beq.n	800c7f2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	491e      	ldr	r1, [pc, #120]	@ (800c868 <I2C_ITSlaveSeqCplt+0xc4>)
 800c7ee:	400a      	ands	r2, r1
 800c7f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2241      	movs	r2, #65	@ 0x41
 800c7f6:	5c9b      	ldrb	r3, [r3, r2]
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	2b29      	cmp	r3, #41	@ 0x29
 800c7fc:	d114      	bne.n	800c828 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2241      	movs	r2, #65	@ 0x41
 800c802:	2128      	movs	r1, #40	@ 0x28
 800c804:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2221      	movs	r2, #33	@ 0x21
 800c80a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2101      	movs	r1, #1
 800c810:	0018      	movs	r0, r3
 800c812:	f000 fd5f 	bl	800d2d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2240      	movs	r2, #64	@ 0x40
 800c81a:	2100      	movs	r1, #0
 800c81c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	0018      	movs	r0, r3
 800c822:	f7ff f968 	bl	800baf6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c826:	e019      	b.n	800c85c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2241      	movs	r2, #65	@ 0x41
 800c82c:	5c9b      	ldrb	r3, [r3, r2]
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	2b2a      	cmp	r3, #42	@ 0x2a
 800c832:	d113      	bne.n	800c85c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2241      	movs	r2, #65	@ 0x41
 800c838:	2128      	movs	r1, #40	@ 0x28
 800c83a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2222      	movs	r2, #34	@ 0x22
 800c840:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2102      	movs	r1, #2
 800c846:	0018      	movs	r0, r3
 800c848:	f000 fd44 	bl	800d2d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2240      	movs	r2, #64	@ 0x40
 800c850:	2100      	movs	r1, #0
 800c852:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	0018      	movs	r0, r3
 800c858:	f7ff f955 	bl	800bb06 <HAL_I2C_SlaveRxCpltCallback>
}
 800c85c:	46c0      	nop			@ (mov r8, r8)
 800c85e:	46bd      	mov	sp, r7
 800c860:	b004      	add	sp, #16
 800c862:	bd80      	pop	{r7, pc}
 800c864:	ffffbfff 	.word	0xffffbfff
 800c868:	ffff7fff 	.word	0xffff7fff

0800c86c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b086      	sub	sp, #24
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2220      	movs	r2, #32
 800c880:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2241      	movs	r2, #65	@ 0x41
 800c886:	5c9b      	ldrb	r3, [r3, r2]
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b21      	cmp	r3, #33	@ 0x21
 800c88c:	d108      	bne.n	800c8a0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2101      	movs	r1, #1
 800c892:	0018      	movs	r0, r3
 800c894:	f000 fd1e 	bl	800d2d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2211      	movs	r2, #17
 800c89c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c89e:	e00d      	b.n	800c8bc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2241      	movs	r2, #65	@ 0x41
 800c8a4:	5c9b      	ldrb	r3, [r3, r2]
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b22      	cmp	r3, #34	@ 0x22
 800c8aa:	d107      	bne.n	800c8bc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2102      	movs	r1, #2
 800c8b0:	0018      	movs	r0, r3
 800c8b2:	f000 fd0f 	bl	800d2d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2212      	movs	r2, #18
 800c8ba:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	494e      	ldr	r1, [pc, #312]	@ (800ca00 <I2C_ITMasterCplt+0x194>)
 800c8c8:	400a      	ands	r2, r1
 800c8ca:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a4b      	ldr	r2, [pc, #300]	@ (800ca04 <I2C_ITMasterCplt+0x198>)
 800c8d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2210      	movs	r2, #16
 800c8dc:	4013      	ands	r3, r2
 800c8de:	d009      	beq.n	800c8f4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2210      	movs	r2, #16
 800c8e6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8ec:	2204      	movs	r2, #4
 800c8ee:	431a      	orrs	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2241      	movs	r2, #65	@ 0x41
 800c8f8:	5c9b      	ldrb	r3, [r3, r2]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	2b60      	cmp	r3, #96	@ 0x60
 800c8fe:	d109      	bne.n	800c914 <I2C_ITMasterCplt+0xa8>
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	2204      	movs	r2, #4
 800c904:	4013      	ands	r3, r2
 800c906:	d005      	beq.n	800c914 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c912:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	0018      	movs	r0, r3
 800c918:	f000 fb19 	bl	800cf4e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c920:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2241      	movs	r2, #65	@ 0x41
 800c926:	5c9b      	ldrb	r3, [r3, r2]
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b60      	cmp	r3, #96	@ 0x60
 800c92c:	d002      	beq.n	800c934 <I2C_ITMasterCplt+0xc8>
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d007      	beq.n	800c944 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	0011      	movs	r1, r2
 800c93c:	0018      	movs	r0, r3
 800c93e:	f000 f9db 	bl	800ccf8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c942:	e058      	b.n	800c9f6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2241      	movs	r2, #65	@ 0x41
 800c948:	5c9b      	ldrb	r3, [r3, r2]
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	2b21      	cmp	r3, #33	@ 0x21
 800c94e:	d126      	bne.n	800c99e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2241      	movs	r2, #65	@ 0x41
 800c954:	2120      	movs	r1, #32
 800c956:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2242      	movs	r2, #66	@ 0x42
 800c962:	5c9b      	ldrb	r3, [r3, r2]
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b40      	cmp	r3, #64	@ 0x40
 800c968:	d10c      	bne.n	800c984 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2242      	movs	r2, #66	@ 0x42
 800c96e:	2100      	movs	r1, #0
 800c970:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2240      	movs	r2, #64	@ 0x40
 800c976:	2100      	movs	r1, #0
 800c978:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	0018      	movs	r0, r3
 800c97e:	f7ff f8e2 	bl	800bb46 <HAL_I2C_MemTxCpltCallback>
}
 800c982:	e038      	b.n	800c9f6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2242      	movs	r2, #66	@ 0x42
 800c988:	2100      	movs	r1, #0
 800c98a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2240      	movs	r2, #64	@ 0x40
 800c990:	2100      	movs	r1, #0
 800c992:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	0018      	movs	r0, r3
 800c998:	f7ff f89d 	bl	800bad6 <HAL_I2C_MasterTxCpltCallback>
}
 800c99c:	e02b      	b.n	800c9f6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2241      	movs	r2, #65	@ 0x41
 800c9a2:	5c9b      	ldrb	r3, [r3, r2]
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	2b22      	cmp	r3, #34	@ 0x22
 800c9a8:	d125      	bne.n	800c9f6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2241      	movs	r2, #65	@ 0x41
 800c9ae:	2120      	movs	r1, #32
 800c9b0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2242      	movs	r2, #66	@ 0x42
 800c9bc:	5c9b      	ldrb	r3, [r3, r2]
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b40      	cmp	r3, #64	@ 0x40
 800c9c2:	d10c      	bne.n	800c9de <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2242      	movs	r2, #66	@ 0x42
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2240      	movs	r2, #64	@ 0x40
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	0018      	movs	r0, r3
 800c9d8:	f7ff f8bd 	bl	800bb56 <HAL_I2C_MemRxCpltCallback>
}
 800c9dc:	e00b      	b.n	800c9f6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2242      	movs	r2, #66	@ 0x42
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2240      	movs	r2, #64	@ 0x40
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	0018      	movs	r0, r3
 800c9f2:	f7ff f878 	bl	800bae6 <HAL_I2C_MasterRxCpltCallback>
}
 800c9f6:	46c0      	nop			@ (mov r8, r8)
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	b006      	add	sp, #24
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	46c0      	nop			@ (mov r8, r8)
 800ca00:	fe00e800 	.word	0xfe00e800
 800ca04:	ffff0000 	.word	0xffff0000

0800ca08 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b086      	sub	sp, #24
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ca1e:	200f      	movs	r0, #15
 800ca20:	183b      	adds	r3, r7, r0
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	2141      	movs	r1, #65	@ 0x41
 800ca26:	5c52      	ldrb	r2, [r2, r1]
 800ca28:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2220      	movs	r2, #32
 800ca30:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ca32:	183b      	adds	r3, r7, r0
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	2b21      	cmp	r3, #33	@ 0x21
 800ca38:	d003      	beq.n	800ca42 <I2C_ITSlaveCplt+0x3a>
 800ca3a:	183b      	adds	r3, r7, r0
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b29      	cmp	r3, #41	@ 0x29
 800ca40:	d109      	bne.n	800ca56 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ca42:	4a7b      	ldr	r2, [pc, #492]	@ (800cc30 <I2C_ITSlaveCplt+0x228>)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	0011      	movs	r1, r2
 800ca48:	0018      	movs	r0, r3
 800ca4a:	f000 fc43 	bl	800d2d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2221      	movs	r2, #33	@ 0x21
 800ca52:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca54:	e011      	b.n	800ca7a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ca56:	220f      	movs	r2, #15
 800ca58:	18bb      	adds	r3, r7, r2
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b22      	cmp	r3, #34	@ 0x22
 800ca5e:	d003      	beq.n	800ca68 <I2C_ITSlaveCplt+0x60>
 800ca60:	18bb      	adds	r3, r7, r2
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca66:	d108      	bne.n	800ca7a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ca68:	4a72      	ldr	r2, [pc, #456]	@ (800cc34 <I2C_ITSlaveCplt+0x22c>)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	0011      	movs	r1, r2
 800ca6e:	0018      	movs	r0, r3
 800ca70:	f000 fc30 	bl	800d2d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2222      	movs	r2, #34	@ 0x22
 800ca78:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2180      	movs	r1, #128	@ 0x80
 800ca86:	0209      	lsls	r1, r1, #8
 800ca88:	430a      	orrs	r2, r1
 800ca8a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4968      	ldr	r1, [pc, #416]	@ (800cc38 <I2C_ITSlaveCplt+0x230>)
 800ca98:	400a      	ands	r2, r1
 800ca9a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	0018      	movs	r0, r3
 800caa0:	f000 fa55 	bl	800cf4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	2380      	movs	r3, #128	@ 0x80
 800caa8:	01db      	lsls	r3, r3, #7
 800caaa:	4013      	ands	r3, r2
 800caac:	d013      	beq.n	800cad6 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4960      	ldr	r1, [pc, #384]	@ (800cc3c <I2C_ITSlaveCplt+0x234>)
 800caba:	400a      	ands	r2, r1
 800cabc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d01f      	beq.n	800cb06 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	b29a      	uxth	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cad4:	e017      	b.n	800cb06 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	2380      	movs	r3, #128	@ 0x80
 800cada:	021b      	lsls	r3, r3, #8
 800cadc:	4013      	ands	r3, r2
 800cade:	d012      	beq.n	800cb06 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4955      	ldr	r1, [pc, #340]	@ (800cc40 <I2C_ITSlaveCplt+0x238>)
 800caec:	400a      	ands	r2, r1
 800caee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d006      	beq.n	800cb06 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	2204      	movs	r2, #4
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	d020      	beq.n	800cb50 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	2204      	movs	r2, #4
 800cb12:	4393      	bics	r3, r2
 800cb14:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb20:	b2d2      	uxtb	r2, r2
 800cb22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb28:	1c5a      	adds	r2, r3, #1
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d00c      	beq.n	800cb50 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d005      	beq.n	800cb66 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb5e:	2204      	movs	r2, #4
 800cb60:	431a      	orrs	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2242      	movs	r2, #66	@ 0x42
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d013      	beq.n	800cba4 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	0011      	movs	r1, r2
 800cb84:	0018      	movs	r0, r3
 800cb86:	f000 f8b7 	bl	800ccf8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2241      	movs	r2, #65	@ 0x41
 800cb8e:	5c9b      	ldrb	r3, [r3, r2]
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b28      	cmp	r3, #40	@ 0x28
 800cb94:	d147      	bne.n	800cc26 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	0011      	movs	r1, r2
 800cb9c:	0018      	movs	r0, r3
 800cb9e:	f000 f853 	bl	800cc48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cba2:	e040      	b.n	800cc26 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cba8:	4a26      	ldr	r2, [pc, #152]	@ (800cc44 <I2C_ITSlaveCplt+0x23c>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d016      	beq.n	800cbdc <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	0018      	movs	r0, r3
 800cbb2:	f7ff fdf7 	bl	800c7a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a22      	ldr	r2, [pc, #136]	@ (800cc44 <I2C_ITSlaveCplt+0x23c>)
 800cbba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2241      	movs	r2, #65	@ 0x41
 800cbc0:	2120      	movs	r1, #32
 800cbc2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2240      	movs	r2, #64	@ 0x40
 800cbce:	2100      	movs	r1, #0
 800cbd0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	0018      	movs	r0, r3
 800cbd6:	f7fe ffae 	bl	800bb36 <HAL_I2C_ListenCpltCallback>
}
 800cbda:	e024      	b.n	800cc26 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2241      	movs	r2, #65	@ 0x41
 800cbe0:	5c9b      	ldrb	r3, [r3, r2]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	2b22      	cmp	r3, #34	@ 0x22
 800cbe6:	d10f      	bne.n	800cc08 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2241      	movs	r2, #65	@ 0x41
 800cbec:	2120      	movs	r1, #32
 800cbee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2240      	movs	r2, #64	@ 0x40
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	0018      	movs	r0, r3
 800cc02:	f7fe ff80 	bl	800bb06 <HAL_I2C_SlaveRxCpltCallback>
}
 800cc06:	e00e      	b.n	800cc26 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2241      	movs	r2, #65	@ 0x41
 800cc0c:	2120      	movs	r1, #32
 800cc0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2200      	movs	r2, #0
 800cc14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2240      	movs	r2, #64	@ 0x40
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	0018      	movs	r0, r3
 800cc22:	f7fe ff68 	bl	800baf6 <HAL_I2C_SlaveTxCpltCallback>
}
 800cc26:	46c0      	nop			@ (mov r8, r8)
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	b006      	add	sp, #24
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	46c0      	nop			@ (mov r8, r8)
 800cc30:	00008001 	.word	0x00008001
 800cc34:	00008002 	.word	0x00008002
 800cc38:	fe00e800 	.word	0xfe00e800
 800cc3c:	ffffbfff 	.word	0xffffbfff
 800cc40:	ffff7fff 	.word	0xffff7fff
 800cc44:	ffff0000 	.word	0xffff0000

0800cc48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4a26      	ldr	r2, [pc, #152]	@ (800ccf0 <I2C_ITListenCplt+0xa8>)
 800cc56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2241      	movs	r2, #65	@ 0x41
 800cc62:	2120      	movs	r1, #32
 800cc64:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2242      	movs	r2, #66	@ 0x42
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2204      	movs	r2, #4
 800cc78:	4013      	ands	r3, r2
 800cc7a:	d022      	beq.n	800ccc2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc86:	b2d2      	uxtb	r2, r2
 800cc88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d012      	beq.n	800ccc2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cca0:	3b01      	subs	r3, #1
 800cca2:	b29a      	uxth	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccba:	2204      	movs	r2, #4
 800ccbc:	431a      	orrs	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ccc2:	4a0c      	ldr	r2, [pc, #48]	@ (800ccf4 <I2C_ITListenCplt+0xac>)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	0011      	movs	r1, r2
 800ccc8:	0018      	movs	r0, r3
 800ccca:	f000 fb03 	bl	800d2d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2210      	movs	r2, #16
 800ccd4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2240      	movs	r2, #64	@ 0x40
 800ccda:	2100      	movs	r1, #0
 800ccdc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	0018      	movs	r0, r3
 800cce2:	f7fe ff28 	bl	800bb36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cce6:	46c0      	nop			@ (mov r8, r8)
 800cce8:	46bd      	mov	sp, r7
 800ccea:	b002      	add	sp, #8
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	46c0      	nop			@ (mov r8, r8)
 800ccf0:	ffff0000 	.word	0xffff0000
 800ccf4:	00008003 	.word	0x00008003

0800ccf8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cd02:	200f      	movs	r0, #15
 800cd04:	183b      	adds	r3, r7, r0
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	2141      	movs	r1, #65	@ 0x41
 800cd0a:	5c52      	ldrb	r2, [r2, r1]
 800cd0c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2242      	movs	r2, #66	@ 0x42
 800cd12:	2100      	movs	r1, #0
 800cd14:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4a72      	ldr	r2, [pc, #456]	@ (800cee4 <I2C_ITError+0x1ec>)
 800cd1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	431a      	orrs	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cd2e:	183b      	adds	r3, r7, r0
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b28      	cmp	r3, #40	@ 0x28
 800cd34:	d007      	beq.n	800cd46 <I2C_ITError+0x4e>
 800cd36:	183b      	adds	r3, r7, r0
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b29      	cmp	r3, #41	@ 0x29
 800cd3c:	d003      	beq.n	800cd46 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cd3e:	183b      	adds	r3, r7, r0
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd44:	d10c      	bne.n	800cd60 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2103      	movs	r1, #3
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	f000 fac2 	bl	800d2d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2241      	movs	r2, #65	@ 0x41
 800cd54:	2128      	movs	r1, #40	@ 0x28
 800cd56:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a63      	ldr	r2, [pc, #396]	@ (800cee8 <I2C_ITError+0x1f0>)
 800cd5c:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd5e:	e032      	b.n	800cdc6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd60:	4a62      	ldr	r2, [pc, #392]	@ (800ceec <I2C_ITError+0x1f4>)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	0011      	movs	r1, r2
 800cd66:	0018      	movs	r0, r3
 800cd68:	f000 fab4 	bl	800d2d4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	0018      	movs	r0, r3
 800cd70:	f000 f8ed 	bl	800cf4e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2241      	movs	r2, #65	@ 0x41
 800cd78:	5c9b      	ldrb	r3, [r3, r2]
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b60      	cmp	r3, #96	@ 0x60
 800cd7e:	d01f      	beq.n	800cdc0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2241      	movs	r2, #65	@ 0x41
 800cd84:	2120      	movs	r1, #32
 800cd86:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	2220      	movs	r2, #32
 800cd90:	4013      	ands	r3, r2
 800cd92:	2b20      	cmp	r3, #32
 800cd94:	d114      	bne.n	800cdc0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	699b      	ldr	r3, [r3, #24]
 800cd9c:	2210      	movs	r2, #16
 800cd9e:	4013      	ands	r3, r2
 800cda0:	2b10      	cmp	r3, #16
 800cda2:	d109      	bne.n	800cdb8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2210      	movs	r2, #16
 800cdaa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdb0:	2204      	movs	r2, #4
 800cdb2:	431a      	orrs	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d03b      	beq.n	800ce4c <I2C_ITError+0x154>
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2b11      	cmp	r3, #17
 800cdd8:	d002      	beq.n	800cde0 <I2C_ITError+0xe8>
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2b21      	cmp	r3, #33	@ 0x21
 800cdde:	d135      	bne.n	800ce4c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	2380      	movs	r3, #128	@ 0x80
 800cde8:	01db      	lsls	r3, r3, #7
 800cdea:	401a      	ands	r2, r3
 800cdec:	2380      	movs	r3, #128	@ 0x80
 800cdee:	01db      	lsls	r3, r3, #7
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d107      	bne.n	800ce04 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	493c      	ldr	r1, [pc, #240]	@ (800cef0 <I2C_ITError+0x1f8>)
 800ce00:	400a      	ands	r2, r1
 800ce02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce08:	0018      	movs	r0, r3
 800ce0a:	f7fd feac 	bl	800ab66 <HAL_DMA_GetState>
 800ce0e:	0003      	movs	r3, r0
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d016      	beq.n	800ce42 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce18:	4a36      	ldr	r2, [pc, #216]	@ (800cef4 <I2C_ITError+0x1fc>)
 800ce1a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2240      	movs	r2, #64	@ 0x40
 800ce20:	2100      	movs	r1, #0
 800ce22:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce28:	0018      	movs	r0, r3
 800ce2a:	f7fd fda7 	bl	800a97c <HAL_DMA_Abort_IT>
 800ce2e:	1e03      	subs	r3, r0, #0
 800ce30:	d051      	beq.n	800ced6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce40:	e049      	b.n	800ced6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	0018      	movs	r0, r3
 800ce46:	f000 f859 	bl	800cefc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce4a:	e044      	b.n	800ced6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d03b      	beq.n	800cecc <I2C_ITError+0x1d4>
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	2b12      	cmp	r3, #18
 800ce58:	d002      	beq.n	800ce60 <I2C_ITError+0x168>
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	2b22      	cmp	r3, #34	@ 0x22
 800ce5e:	d135      	bne.n	800cecc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	2380      	movs	r3, #128	@ 0x80
 800ce68:	021b      	lsls	r3, r3, #8
 800ce6a:	401a      	ands	r2, r3
 800ce6c:	2380      	movs	r3, #128	@ 0x80
 800ce6e:	021b      	lsls	r3, r3, #8
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d107      	bne.n	800ce84 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	491e      	ldr	r1, [pc, #120]	@ (800cef8 <I2C_ITError+0x200>)
 800ce80:	400a      	ands	r2, r1
 800ce82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce88:	0018      	movs	r0, r3
 800ce8a:	f7fd fe6c 	bl	800ab66 <HAL_DMA_GetState>
 800ce8e:	0003      	movs	r3, r0
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d016      	beq.n	800cec2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce98:	4a16      	ldr	r2, [pc, #88]	@ (800cef4 <I2C_ITError+0x1fc>)
 800ce9a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2240      	movs	r2, #64	@ 0x40
 800cea0:	2100      	movs	r1, #0
 800cea2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cea8:	0018      	movs	r0, r3
 800ceaa:	f7fd fd67 	bl	800a97c <HAL_DMA_Abort_IT>
 800ceae:	1e03      	subs	r3, r0, #0
 800ceb0:	d013      	beq.n	800ceda <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ceb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cebc:	0018      	movs	r0, r3
 800cebe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cec0:	e00b      	b.n	800ceda <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	0018      	movs	r0, r3
 800cec6:	f000 f819 	bl	800cefc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ceca:	e006      	b.n	800ceda <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	0018      	movs	r0, r3
 800ced0:	f000 f814 	bl	800cefc <I2C_TreatErrorCallback>
  }
}
 800ced4:	e002      	b.n	800cedc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ced6:	46c0      	nop			@ (mov r8, r8)
 800ced8:	e000      	b.n	800cedc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ceda:	46c0      	nop			@ (mov r8, r8)
}
 800cedc:	46c0      	nop			@ (mov r8, r8)
 800cede:	46bd      	mov	sp, r7
 800cee0:	b004      	add	sp, #16
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	ffff0000 	.word	0xffff0000
 800cee8:	0800bddd 	.word	0x0800bddd
 800ceec:	00008003 	.word	0x00008003
 800cef0:	ffffbfff 	.word	0xffffbfff
 800cef4:	0800d107 	.word	0x0800d107
 800cef8:	ffff7fff 	.word	0xffff7fff

0800cefc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2241      	movs	r2, #65	@ 0x41
 800cf08:	5c9b      	ldrb	r3, [r3, r2]
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	2b60      	cmp	r3, #96	@ 0x60
 800cf0e:	d10f      	bne.n	800cf30 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2241      	movs	r2, #65	@ 0x41
 800cf14:	2120      	movs	r1, #32
 800cf16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2240      	movs	r2, #64	@ 0x40
 800cf22:	2100      	movs	r1, #0
 800cf24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	0018      	movs	r0, r3
 800cf2a:	f7fe fe24 	bl	800bb76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf2e:	e00a      	b.n	800cf46 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2240      	movs	r2, #64	@ 0x40
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	0018      	movs	r0, r3
 800cf42:	f7fe fe10 	bl	800bb66 <HAL_I2C_ErrorCallback>
}
 800cf46:	46c0      	nop			@ (mov r8, r8)
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	b002      	add	sp, #8
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b082      	sub	sp, #8
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	699b      	ldr	r3, [r3, #24]
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	4013      	ands	r3, r2
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d103      	bne.n	800cf6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	2201      	movs	r2, #1
 800cf74:	4013      	ands	r3, r2
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d007      	beq.n	800cf8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	699a      	ldr	r2, [r3, #24]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2101      	movs	r1, #1
 800cf86:	430a      	orrs	r2, r1
 800cf88:	619a      	str	r2, [r3, #24]
  }
}
 800cf8a:	46c0      	nop			@ (mov r8, r8)
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	b002      	add	sp, #8
 800cf90:	bd80      	pop	{r7, pc}
	...

0800cf94 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfa0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	681a      	ldr	r2, [r3, #0]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4920      	ldr	r1, [pc, #128]	@ (800d030 <I2C_DMAMasterTransmitCplt+0x9c>)
 800cfae:	400a      	ands	r2, r1
 800cfb0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d105      	bne.n	800cfc8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2120      	movs	r1, #32
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	f000 f8f9 	bl	800d1b8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800cfc6:	e02e      	b.n	800d026 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cfd0:	189a      	adds	r2, r3, r2
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	2bff      	cmp	r3, #255	@ 0xff
 800cfde:	d903      	bls.n	800cfe8 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	22ff      	movs	r2, #255	@ 0xff
 800cfe4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800cfe6:	e004      	b.n	800cff2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffa:	0019      	movs	r1, r3
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3328      	adds	r3, #40	@ 0x28
 800d002:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d008:	f7fd fc12 	bl	800a830 <HAL_DMA_Start_IT>
 800d00c:	1e03      	subs	r3, r0, #0
 800d00e:	d005      	beq.n	800d01c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2110      	movs	r1, #16
 800d014:	0018      	movs	r0, r3
 800d016:	f7ff fe6f 	bl	800ccf8 <I2C_ITError>
}
 800d01a:	e004      	b.n	800d026 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2140      	movs	r1, #64	@ 0x40
 800d020:	0018      	movs	r0, r3
 800d022:	f000 f8c9 	bl	800d1b8 <I2C_Enable_IRQ>
}
 800d026:	46c0      	nop			@ (mov r8, r8)
 800d028:	46bd      	mov	sp, r7
 800d02a:	b004      	add	sp, #16
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	46c0      	nop			@ (mov r8, r8)
 800d030:	ffffbfff 	.word	0xffffbfff

0800d034 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d040:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4920      	ldr	r1, [pc, #128]	@ (800d0d0 <I2C_DMAMasterReceiveCplt+0x9c>)
 800d04e:	400a      	ands	r2, r1
 800d050:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d056:	b29b      	uxth	r3, r3
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d105      	bne.n	800d068 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2120      	movs	r1, #32
 800d060:	0018      	movs	r0, r3
 800d062:	f000 f8a9 	bl	800d1b8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d066:	e02e      	b.n	800d0c6 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d070:	189a      	adds	r2, r3, r2
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	2bff      	cmp	r3, #255	@ 0xff
 800d07e:	d903      	bls.n	800d088 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	22ff      	movs	r2, #255	@ 0xff
 800d084:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d086:	e004      	b.n	800d092 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	3324      	adds	r3, #36	@ 0x24
 800d09c:	0019      	movs	r1, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0a2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d0a8:	f7fd fbc2 	bl	800a830 <HAL_DMA_Start_IT>
 800d0ac:	1e03      	subs	r3, r0, #0
 800d0ae:	d005      	beq.n	800d0bc <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2110      	movs	r1, #16
 800d0b4:	0018      	movs	r0, r3
 800d0b6:	f7ff fe1f 	bl	800ccf8 <I2C_ITError>
}
 800d0ba:	e004      	b.n	800d0c6 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2140      	movs	r1, #64	@ 0x40
 800d0c0:	0018      	movs	r0, r3
 800d0c2:	f000 f879 	bl	800d1b8 <I2C_Enable_IRQ>
}
 800d0c6:	46c0      	nop			@ (mov r8, r8)
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	b004      	add	sp, #16
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	46c0      	nop			@ (mov r8, r8)
 800d0d0:	ffff7fff 	.word	0xffff7fff

0800d0d4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0e0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	685a      	ldr	r2, [r3, #4]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2180      	movs	r1, #128	@ 0x80
 800d0ee:	0209      	lsls	r1, r1, #8
 800d0f0:	430a      	orrs	r2, r1
 800d0f2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2110      	movs	r1, #16
 800d0f8:	0018      	movs	r0, r3
 800d0fa:	f7ff fdfd 	bl	800ccf8 <I2C_ITError>
}
 800d0fe:	46c0      	nop			@ (mov r8, r8)
 800d100:	46bd      	mov	sp, r7
 800d102:	b004      	add	sp, #16
 800d104:	bd80      	pop	{r7, pc}

0800d106 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b084      	sub	sp, #16
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d112:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d003      	beq.n	800d124 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d120:	2200      	movs	r2, #0
 800d122:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d003      	beq.n	800d134 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d130:	2200      	movs	r2, #0
 800d132:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	0018      	movs	r0, r3
 800d138:	f7ff fee0 	bl	800cefc <I2C_TreatErrorCallback>
}
 800d13c:	46c0      	nop			@ (mov r8, r8)
 800d13e:	46bd      	mov	sp, r7
 800d140:	b004      	add	sp, #16
 800d142:	bd80      	pop	{r7, pc}

0800d144 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d144:	b590      	push	{r4, r7, lr}
 800d146:	b087      	sub	sp, #28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	0008      	movs	r0, r1
 800d14e:	0011      	movs	r1, r2
 800d150:	607b      	str	r3, [r7, #4]
 800d152:	240a      	movs	r4, #10
 800d154:	193b      	adds	r3, r7, r4
 800d156:	1c02      	adds	r2, r0, #0
 800d158:	801a      	strh	r2, [r3, #0]
 800d15a:	2009      	movs	r0, #9
 800d15c:	183b      	adds	r3, r7, r0
 800d15e:	1c0a      	adds	r2, r1, #0
 800d160:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d162:	193b      	adds	r3, r7, r4
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	059b      	lsls	r3, r3, #22
 800d168:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d16a:	183b      	adds	r3, r7, r0
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	0419      	lsls	r1, r3, #16
 800d170:	23ff      	movs	r3, #255	@ 0xff
 800d172:	041b      	lsls	r3, r3, #16
 800d174:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d176:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17e:	4313      	orrs	r3, r2
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	085b      	lsrs	r3, r3, #1
 800d184:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d18e:	0d51      	lsrs	r1, r2, #21
 800d190:	2280      	movs	r2, #128	@ 0x80
 800d192:	00d2      	lsls	r2, r2, #3
 800d194:	400a      	ands	r2, r1
 800d196:	4907      	ldr	r1, [pc, #28]	@ (800d1b4 <I2C_TransferConfig+0x70>)
 800d198:	430a      	orrs	r2, r1
 800d19a:	43d2      	mvns	r2, r2
 800d19c:	401a      	ands	r2, r3
 800d19e:	0011      	movs	r1, r2
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	697a      	ldr	r2, [r7, #20]
 800d1a6:	430a      	orrs	r2, r1
 800d1a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d1aa:	46c0      	nop			@ (mov r8, r8)
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	b007      	add	sp, #28
 800d1b0:	bd90      	pop	{r4, r7, pc}
 800d1b2:	46c0      	nop			@ (mov r8, r8)
 800d1b4:	03ff63ff 	.word	0x03ff63ff

0800d1b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	000a      	movs	r2, r1
 800d1c2:	1cbb      	adds	r3, r7, #2
 800d1c4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1ce:	4b3e      	ldr	r3, [pc, #248]	@ (800d2c8 <I2C_Enable_IRQ+0x110>)
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d035      	beq.n	800d240 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d1d8:	4b3c      	ldr	r3, [pc, #240]	@ (800d2cc <I2C_Enable_IRQ+0x114>)
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d030      	beq.n	800d240 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d1e2:	4b3b      	ldr	r3, [pc, #236]	@ (800d2d0 <I2C_Enable_IRQ+0x118>)
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d02b      	beq.n	800d240 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d1e8:	1cbb      	adds	r3, r7, #2
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	5e9b      	ldrsh	r3, [r3, r2]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	da03      	bge.n	800d1fa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	22b8      	movs	r2, #184	@ 0xb8
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d1fa:	1cbb      	adds	r3, r7, #2
 800d1fc:	881b      	ldrh	r3, [r3, #0]
 800d1fe:	2201      	movs	r2, #1
 800d200:	4013      	ands	r3, r2
 800d202:	d003      	beq.n	800d20c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	22f2      	movs	r2, #242	@ 0xf2
 800d208:	4313      	orrs	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d20c:	1cbb      	adds	r3, r7, #2
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	2202      	movs	r2, #2
 800d212:	4013      	ands	r3, r2
 800d214:	d003      	beq.n	800d21e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	22f4      	movs	r2, #244	@ 0xf4
 800d21a:	4313      	orrs	r3, r2
 800d21c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d21e:	1cbb      	adds	r3, r7, #2
 800d220:	881b      	ldrh	r3, [r3, #0]
 800d222:	2b10      	cmp	r3, #16
 800d224:	d103      	bne.n	800d22e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2290      	movs	r2, #144	@ 0x90
 800d22a:	4313      	orrs	r3, r2
 800d22c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d22e:	1cbb      	adds	r3, r7, #2
 800d230:	881b      	ldrh	r3, [r3, #0]
 800d232:	2b20      	cmp	r3, #32
 800d234:	d13c      	bne.n	800d2b0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2220      	movs	r2, #32
 800d23a:	4313      	orrs	r3, r2
 800d23c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d23e:	e037      	b.n	800d2b0 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d240:	1cbb      	adds	r3, r7, #2
 800d242:	2200      	movs	r2, #0
 800d244:	5e9b      	ldrsh	r3, [r3, r2]
 800d246:	2b00      	cmp	r3, #0
 800d248:	da03      	bge.n	800d252 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	22b8      	movs	r2, #184	@ 0xb8
 800d24e:	4313      	orrs	r3, r2
 800d250:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d252:	1cbb      	adds	r3, r7, #2
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	2201      	movs	r2, #1
 800d258:	4013      	ands	r3, r2
 800d25a:	d003      	beq.n	800d264 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	22f2      	movs	r2, #242	@ 0xf2
 800d260:	4313      	orrs	r3, r2
 800d262:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d264:	1cbb      	adds	r3, r7, #2
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	2202      	movs	r2, #2
 800d26a:	4013      	ands	r3, r2
 800d26c:	d003      	beq.n	800d276 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	22f4      	movs	r2, #244	@ 0xf4
 800d272:	4313      	orrs	r3, r2
 800d274:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d276:	1cbb      	adds	r3, r7, #2
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	2b10      	cmp	r3, #16
 800d27c:	d103      	bne.n	800d286 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2290      	movs	r2, #144	@ 0x90
 800d282:	4313      	orrs	r3, r2
 800d284:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d286:	1cbb      	adds	r3, r7, #2
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	2b20      	cmp	r3, #32
 800d28c:	d103      	bne.n	800d296 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2260      	movs	r2, #96	@ 0x60
 800d292:	4313      	orrs	r3, r2
 800d294:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d29a:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d0 <I2C_Enable_IRQ+0x118>)
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d007      	beq.n	800d2b0 <I2C_Enable_IRQ+0xf8>
 800d2a0:	1cbb      	adds	r3, r7, #2
 800d2a2:	881b      	ldrh	r3, [r3, #0]
 800d2a4:	2b40      	cmp	r3, #64	@ 0x40
 800d2a6:	d103      	bne.n	800d2b0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2240      	movs	r2, #64	@ 0x40
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6819      	ldr	r1, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	601a      	str	r2, [r3, #0]
}
 800d2c0:	46c0      	nop			@ (mov r8, r8)
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	b004      	add	sp, #16
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	0800bfdd 	.word	0x0800bfdd
 800d2cc:	0800c40d 	.word	0x0800c40d
 800d2d0:	0800c1d5 	.word	0x0800c1d5

0800d2d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	000a      	movs	r2, r1
 800d2de:	1cbb      	adds	r3, r7, #2
 800d2e0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d2e6:	1cbb      	adds	r3, r7, #2
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	4013      	ands	r3, r2
 800d2ee:	d010      	beq.n	800d312 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2242      	movs	r2, #66	@ 0x42
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2241      	movs	r2, #65	@ 0x41
 800d2fc:	5c9b      	ldrb	r3, [r3, r2]
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	001a      	movs	r2, r3
 800d302:	2328      	movs	r3, #40	@ 0x28
 800d304:	4013      	ands	r3, r2
 800d306:	2b28      	cmp	r3, #40	@ 0x28
 800d308:	d003      	beq.n	800d312 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	22b0      	movs	r2, #176	@ 0xb0
 800d30e:	4313      	orrs	r3, r2
 800d310:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d312:	1cbb      	adds	r3, r7, #2
 800d314:	881b      	ldrh	r3, [r3, #0]
 800d316:	2202      	movs	r2, #2
 800d318:	4013      	ands	r3, r2
 800d31a:	d010      	beq.n	800d33e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2244      	movs	r2, #68	@ 0x44
 800d320:	4313      	orrs	r3, r2
 800d322:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2241      	movs	r2, #65	@ 0x41
 800d328:	5c9b      	ldrb	r3, [r3, r2]
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	001a      	movs	r2, r3
 800d32e:	2328      	movs	r3, #40	@ 0x28
 800d330:	4013      	ands	r3, r2
 800d332:	2b28      	cmp	r3, #40	@ 0x28
 800d334:	d003      	beq.n	800d33e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	22b0      	movs	r2, #176	@ 0xb0
 800d33a:	4313      	orrs	r3, r2
 800d33c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d33e:	1cbb      	adds	r3, r7, #2
 800d340:	2200      	movs	r2, #0
 800d342:	5e9b      	ldrsh	r3, [r3, r2]
 800d344:	2b00      	cmp	r3, #0
 800d346:	da03      	bge.n	800d350 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	22b8      	movs	r2, #184	@ 0xb8
 800d34c:	4313      	orrs	r3, r2
 800d34e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d350:	1cbb      	adds	r3, r7, #2
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	2b10      	cmp	r3, #16
 800d356:	d103      	bne.n	800d360 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2290      	movs	r2, #144	@ 0x90
 800d35c:	4313      	orrs	r3, r2
 800d35e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d360:	1cbb      	adds	r3, r7, #2
 800d362:	881b      	ldrh	r3, [r3, #0]
 800d364:	2b20      	cmp	r3, #32
 800d366:	d103      	bne.n	800d370 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2220      	movs	r2, #32
 800d36c:	4313      	orrs	r3, r2
 800d36e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d370:	1cbb      	adds	r3, r7, #2
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	2b40      	cmp	r3, #64	@ 0x40
 800d376:	d103      	bne.n	800d380 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2240      	movs	r2, #64	@ 0x40
 800d37c:	4313      	orrs	r3, r2
 800d37e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	43d9      	mvns	r1, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	400a      	ands	r2, r1
 800d390:	601a      	str	r2, [r3, #0]
}
 800d392:	46c0      	nop			@ (mov r8, r8)
 800d394:	46bd      	mov	sp, r7
 800d396:	b004      	add	sp, #16
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2241      	movs	r2, #65	@ 0x41
 800d3aa:	5c9b      	ldrb	r3, [r3, r2]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2b20      	cmp	r3, #32
 800d3b0:	d138      	bne.n	800d424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2240      	movs	r2, #64	@ 0x40
 800d3b6:	5c9b      	ldrb	r3, [r3, r2]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d101      	bne.n	800d3c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d3bc:	2302      	movs	r3, #2
 800d3be:	e032      	b.n	800d426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2240      	movs	r2, #64	@ 0x40
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2241      	movs	r2, #65	@ 0x41
 800d3cc:	2124      	movs	r1, #36	@ 0x24
 800d3ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2101      	movs	r1, #1
 800d3dc:	438a      	bics	r2, r1
 800d3de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4911      	ldr	r1, [pc, #68]	@ (800d430 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d3ec:	400a      	ands	r2, r1
 800d3ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	6819      	ldr	r1, [r3, #0]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	430a      	orrs	r2, r1
 800d3fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2101      	movs	r1, #1
 800d40c:	430a      	orrs	r2, r1
 800d40e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2241      	movs	r2, #65	@ 0x41
 800d414:	2120      	movs	r1, #32
 800d416:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2240      	movs	r2, #64	@ 0x40
 800d41c:	2100      	movs	r1, #0
 800d41e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	e000      	b.n	800d426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d424:	2302      	movs	r3, #2
  }
}
 800d426:	0018      	movs	r0, r3
 800d428:	46bd      	mov	sp, r7
 800d42a:	b002      	add	sp, #8
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	46c0      	nop			@ (mov r8, r8)
 800d430:	ffffefff 	.word	0xffffefff

0800d434 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2241      	movs	r2, #65	@ 0x41
 800d442:	5c9b      	ldrb	r3, [r3, r2]
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b20      	cmp	r3, #32
 800d448:	d139      	bne.n	800d4be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2240      	movs	r2, #64	@ 0x40
 800d44e:	5c9b      	ldrb	r3, [r3, r2]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d101      	bne.n	800d458 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d454:	2302      	movs	r3, #2
 800d456:	e033      	b.n	800d4c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2240      	movs	r2, #64	@ 0x40
 800d45c:	2101      	movs	r1, #1
 800d45e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2241      	movs	r2, #65	@ 0x41
 800d464:	2124      	movs	r1, #36	@ 0x24
 800d466:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2101      	movs	r1, #1
 800d474:	438a      	bics	r2, r1
 800d476:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4a11      	ldr	r2, [pc, #68]	@ (800d4c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d484:	4013      	ands	r3, r2
 800d486:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	021b      	lsls	r3, r3, #8
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	4313      	orrs	r3, r2
 800d490:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2101      	movs	r1, #1
 800d4a6:	430a      	orrs	r2, r1
 800d4a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2241      	movs	r2, #65	@ 0x41
 800d4ae:	2120      	movs	r1, #32
 800d4b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2240      	movs	r2, #64	@ 0x40
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	e000      	b.n	800d4c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d4be:	2302      	movs	r3, #2
  }
}
 800d4c0:	0018      	movs	r0, r3
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	b004      	add	sp, #16
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	fffff0ff 	.word	0xfffff0ff

0800d4cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b088      	sub	sp, #32
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d101      	bne.n	800d4de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e0e1      	b.n	800d6a2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2235      	movs	r2, #53	@ 0x35
 800d4e2:	5c9b      	ldrb	r3, [r3, r2]
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d107      	bne.n	800d4fa <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2234      	movs	r2, #52	@ 0x34
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	0018      	movs	r0, r3
 800d4f6:	f7f8 fcf3 	bl	8005ee0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2235      	movs	r2, #53	@ 0x35
 800d4fe:	2102      	movs	r1, #2
 800d500:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	69da      	ldr	r2, [r3, #28]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4967      	ldr	r1, [pc, #412]	@ (800d6ac <HAL_I2S_Init+0x1e0>)
 800d50e:	400a      	ands	r2, r1
 800d510:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2202      	movs	r2, #2
 800d518:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	695b      	ldr	r3, [r3, #20]
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d073      	beq.n	800d60a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d102      	bne.n	800d530 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800d52a:	2310      	movs	r3, #16
 800d52c:	617b      	str	r3, [r7, #20]
 800d52e:	e001      	b.n	800d534 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800d530:	2320      	movs	r3, #32
 800d532:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	2b20      	cmp	r3, #32
 800d53a:	d802      	bhi.n	800d542 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800d542:	f002 fe8d 	bl	8010260 <HAL_RCC_GetSysClockFreq>
 800d546:	0003      	movs	r3, r0
 800d548:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	691a      	ldr	r2, [r3, #16]
 800d54e:	2380      	movs	r3, #128	@ 0x80
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	429a      	cmp	r2, r3
 800d554:	d131      	bne.n	800d5ba <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d016      	beq.n	800d58c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	0019      	movs	r1, r3
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f7f2 fdeb 	bl	8000140 <__udivsi3>
 800d56a:	0003      	movs	r3, r0
 800d56c:	001a      	movs	r2, r3
 800d56e:	0013      	movs	r3, r2
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	189b      	adds	r3, r3, r2
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	001a      	movs	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	0019      	movs	r1, r3
 800d57e:	0010      	movs	r0, r2
 800d580:	f7f2 fdde 	bl	8000140 <__udivsi3>
 800d584:	0003      	movs	r3, r0
 800d586:	3305      	adds	r3, #5
 800d588:	613b      	str	r3, [r7, #16]
 800d58a:	e02a      	b.n	800d5e2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	00db      	lsls	r3, r3, #3
 800d590:	0019      	movs	r1, r3
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f7f2 fdd4 	bl	8000140 <__udivsi3>
 800d598:	0003      	movs	r3, r0
 800d59a:	001a      	movs	r2, r3
 800d59c:	0013      	movs	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	189b      	adds	r3, r3, r2
 800d5a2:	005b      	lsls	r3, r3, #1
 800d5a4:	001a      	movs	r2, r3
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	695b      	ldr	r3, [r3, #20]
 800d5aa:	0019      	movs	r1, r3
 800d5ac:	0010      	movs	r0, r2
 800d5ae:	f7f2 fdc7 	bl	8000140 <__udivsi3>
 800d5b2:	0003      	movs	r3, r0
 800d5b4:	3305      	adds	r3, #5
 800d5b6:	613b      	str	r3, [r7, #16]
 800d5b8:	e013      	b.n	800d5e2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d5ba:	6979      	ldr	r1, [r7, #20]
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f7f2 fdbf 	bl	8000140 <__udivsi3>
 800d5c2:	0003      	movs	r3, r0
 800d5c4:	001a      	movs	r2, r3
 800d5c6:	0013      	movs	r3, r2
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	189b      	adds	r3, r3, r2
 800d5cc:	005b      	lsls	r3, r3, #1
 800d5ce:	001a      	movs	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	695b      	ldr	r3, [r3, #20]
 800d5d4:	0019      	movs	r1, r3
 800d5d6:	0010      	movs	r0, r2
 800d5d8:	f7f2 fdb2 	bl	8000140 <__udivsi3>
 800d5dc:	0003      	movs	r3, r0
 800d5de:	3305      	adds	r3, #5
 800d5e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	210a      	movs	r1, #10
 800d5e6:	0018      	movs	r0, r3
 800d5e8:	f7f2 fdaa 	bl	8000140 <__udivsi3>
 800d5ec:	0003      	movs	r3, r0
 800d5ee:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	085b      	lsrs	r3, r3, #1
 800d600:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800d602:	69bb      	ldr	r3, [r7, #24]
 800d604:	021b      	lsls	r3, r3, #8
 800d606:	61bb      	str	r3, [r7, #24]
 800d608:	e003      	b.n	800d612 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800d60a:	2302      	movs	r3, #2
 800d60c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800d60e:	2300      	movs	r3, #0
 800d610:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d902      	bls.n	800d61e <HAL_I2S_Init+0x152>
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	2bff      	cmp	r3, #255	@ 0xff
 800d61c:	d907      	bls.n	800d62e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d622:	2210      	movs	r2, #16
 800d624:	431a      	orrs	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	e039      	b.n	800d6a2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	691a      	ldr	r2, [r3, #16]
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	431a      	orrs	r2, r3
 800d636:	0011      	movs	r1, r2
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	69fa      	ldr	r2, [r7, #28]
 800d63e:	430a      	orrs	r2, r1
 800d640:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	69db      	ldr	r3, [r3, #28]
 800d648:	4a18      	ldr	r2, [pc, #96]	@ (800d6ac <HAL_I2S_Init+0x1e0>)
 800d64a:	401a      	ands	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6859      	ldr	r1, [r3, #4]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	4319      	orrs	r1, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	4319      	orrs	r1, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	430b      	orrs	r3, r1
 800d662:	431a      	orrs	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2180      	movs	r1, #128	@ 0x80
 800d66a:	0109      	lsls	r1, r1, #4
 800d66c:	430a      	orrs	r2, r1
 800d66e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	2b30      	cmp	r3, #48	@ 0x30
 800d676:	d003      	beq.n	800d680 <HAL_I2S_Init+0x1b4>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	2bb0      	cmp	r3, #176	@ 0xb0
 800d67e:	d108      	bne.n	800d692 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	69da      	ldr	r2, [r3, #28]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	2180      	movs	r1, #128	@ 0x80
 800d68c:	0149      	lsls	r1, r1, #5
 800d68e:	430a      	orrs	r2, r1
 800d690:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2235      	movs	r2, #53	@ 0x35
 800d69c:	2101      	movs	r1, #1
 800d69e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	0018      	movs	r0, r3
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	b008      	add	sp, #32
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	46c0      	nop			@ (mov r8, r8)
 800d6ac:	fffff040 	.word	0xfffff040

0800d6b0 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d101      	bne.n	800d6c2 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e01b      	b.n	800d6fa <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2235      	movs	r2, #53	@ 0x35
 800d6c6:	2102      	movs	r1, #2
 800d6c8:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	69da      	ldr	r2, [r3, #28]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	490b      	ldr	r1, [pc, #44]	@ (800d704 <HAL_I2S_DeInit+0x54>)
 800d6d6:	400a      	ands	r2, r1
 800d6d8:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	0018      	movs	r0, r3
 800d6de:	f7f8 fc73 	bl	8005fc8 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2235      	movs	r2, #53	@ 0x35
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2234      	movs	r2, #52	@ 0x34
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	0018      	movs	r0, r3
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	b002      	add	sp, #8
 800d700:	bd80      	pop	{r7, pc}
 800d702:	46c0      	nop			@ (mov r8, r8)
 800d704:	fffffbff 	.word	0xfffffbff

0800d708 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	1dbb      	adds	r3, r7, #6
 800d714:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d003      	beq.n	800d724 <HAL_I2S_Receive_DMA+0x1c>
 800d71c:	1dbb      	adds	r3, r7, #6
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800d724:	2301      	movs	r3, #1
 800d726:	e0a6      	b.n	800d876 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2234      	movs	r2, #52	@ 0x34
 800d72c:	5c9b      	ldrb	r3, [r3, r2]
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2b01      	cmp	r3, #1
 800d732:	d101      	bne.n	800d738 <HAL_I2S_Receive_DMA+0x30>
 800d734:	2302      	movs	r3, #2
 800d736:	e09e      	b.n	800d876 <HAL_I2S_Receive_DMA+0x16e>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2234      	movs	r2, #52	@ 0x34
 800d73c:	2101      	movs	r1, #1
 800d73e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2235      	movs	r2, #53	@ 0x35
 800d744:	5c9b      	ldrb	r3, [r3, r2]
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d005      	beq.n	800d758 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2234      	movs	r2, #52	@ 0x34
 800d750:	2100      	movs	r1, #0
 800d752:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800d754:	2302      	movs	r3, #2
 800d756:	e08e      	b.n	800d876 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2235      	movs	r2, #53	@ 0x35
 800d75c:	2104      	movs	r1, #4
 800d75e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	68ba      	ldr	r2, [r7, #8]
 800d76a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	69db      	ldr	r3, [r3, #28]
 800d772:	2207      	movs	r2, #7
 800d774:	4013      	ands	r3, r2
 800d776:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	2b03      	cmp	r3, #3
 800d77c:	d002      	beq.n	800d784 <HAL_I2S_Receive_DMA+0x7c>
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2b05      	cmp	r3, #5
 800d782:	d10c      	bne.n	800d79e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800d784:	1dbb      	adds	r3, r7, #6
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	18db      	adds	r3, r3, r3
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800d790:	1dbb      	adds	r3, r7, #6
 800d792:	881b      	ldrh	r3, [r3, #0]
 800d794:	18db      	adds	r3, r3, r3
 800d796:	b29a      	uxth	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d79c:	e007      	b.n	800d7ae <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	1dba      	adds	r2, r7, #6
 800d7a2:	8812      	ldrh	r2, [r2, #0]
 800d7a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	1dba      	adds	r2, r7, #6
 800d7aa:	8812      	ldrh	r2, [r2, #0]
 800d7ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7b2:	4a33      	ldr	r2, [pc, #204]	@ (800d880 <HAL_I2S_Receive_DMA+0x178>)
 800d7b4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ba:	4a32      	ldr	r2, [pc, #200]	@ (800d884 <HAL_I2S_Receive_DMA+0x17c>)
 800d7bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7c2:	4a31      	ldr	r2, [pc, #196]	@ (800d888 <HAL_I2S_Receive_DMA+0x180>)
 800d7c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	69da      	ldr	r2, [r3, #28]
 800d7cc:	23c0      	movs	r3, #192	@ 0xc0
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	401a      	ands	r2, r3
 800d7d2:	23c0      	movs	r3, #192	@ 0xc0
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d10a      	bne.n	800d7f0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800d7da:	2300      	movs	r3, #0
 800d7dc:	613b      	str	r3, [r7, #16]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	613b      	str	r3, [r7, #16]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	613b      	str	r3, [r7, #16]
 800d7ee:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	330c      	adds	r3, #12
 800d7fa:	0019      	movs	r1, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d800:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d806:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d808:	f7fd f812 	bl	800a830 <HAL_DMA_Start_IT>
 800d80c:	1e03      	subs	r3, r0, #0
 800d80e:	d00f      	beq.n	800d830 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d814:	2208      	movs	r2, #8
 800d816:	431a      	orrs	r2, r3
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2235      	movs	r2, #53	@ 0x35
 800d820:	2101      	movs	r1, #1
 800d822:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2234      	movs	r2, #52	@ 0x34
 800d828:	2100      	movs	r1, #0
 800d82a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e022      	b.n	800d876 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	69da      	ldr	r2, [r3, #28]
 800d836:	2380      	movs	r3, #128	@ 0x80
 800d838:	00db      	lsls	r3, r3, #3
 800d83a:	4013      	ands	r3, r2
 800d83c:	d108      	bne.n	800d850 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	69da      	ldr	r2, [r3, #28]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	2180      	movs	r1, #128	@ 0x80
 800d84a:	00c9      	lsls	r1, r1, #3
 800d84c:	430a      	orrs	r2, r1
 800d84e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	4013      	ands	r3, r2
 800d85a:	d107      	bne.n	800d86c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	685a      	ldr	r2, [r3, #4]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2101      	movs	r1, #1
 800d868:	430a      	orrs	r2, r1
 800d86a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2234      	movs	r2, #52	@ 0x34
 800d870:	2100      	movs	r1, #0
 800d872:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	0018      	movs	r0, r3
 800d878:	46bd      	mov	sp, r7
 800d87a:	b006      	add	sp, #24
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	46c0      	nop			@ (mov r8, r8)
 800d880:	0800da89 	.word	0x0800da89
 800d884:	0800da45 	.word	0x0800da45
 800d888:	0800daa7 	.word	0x0800daa7

0800d88c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d894:	2317      	movs	r3, #23
 800d896:	18fb      	adds	r3, r7, r3
 800d898:	2200      	movs	r2, #0
 800d89a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	685a      	ldr	r2, [r3, #4]
 800d8a0:	2380      	movs	r3, #128	@ 0x80
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d003      	beq.n	800d8b0 <HAL_I2S_DMAStop+0x24>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d158      	bne.n	800d962 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d010      	beq.n	800d8da <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8bc:	0018      	movs	r0, r3
 800d8be:	f7fd f81d 	bl	800a8fc <HAL_DMA_Abort>
 800d8c2:	1e03      	subs	r3, r0, #0
 800d8c4:	d009      	beq.n	800d8da <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ca:	2208      	movs	r2, #8
 800d8cc:	431a      	orrs	r2, r3
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800d8d2:	2317      	movs	r3, #23
 800d8d4:	18fb      	adds	r3, r7, r3
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	2364      	movs	r3, #100	@ 0x64
 800d8de:	2201      	movs	r2, #1
 800d8e0:	2102      	movs	r1, #2
 800d8e2:	f000 f907 	bl	800daf4 <I2S_WaitFlagStateUntilTimeout>
 800d8e6:	1e03      	subs	r3, r0, #0
 800d8e8:	d00d      	beq.n	800d906 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	431a      	orrs	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2235      	movs	r2, #53	@ 0x35
 800d8fa:	2101      	movs	r1, #1
 800d8fc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800d8fe:	2317      	movs	r3, #23
 800d900:	18fb      	adds	r3, r7, r3
 800d902:	2201      	movs	r2, #1
 800d904:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	2364      	movs	r3, #100	@ 0x64
 800d90a:	2200      	movs	r2, #0
 800d90c:	2180      	movs	r1, #128	@ 0x80
 800d90e:	f000 f8f1 	bl	800daf4 <I2S_WaitFlagStateUntilTimeout>
 800d912:	1e03      	subs	r3, r0, #0
 800d914:	d00d      	beq.n	800d932 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d91a:	2201      	movs	r2, #1
 800d91c:	431a      	orrs	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2235      	movs	r2, #53	@ 0x35
 800d926:	2101      	movs	r1, #1
 800d928:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800d92a:	2317      	movs	r3, #23
 800d92c:	18fb      	adds	r3, r7, r3
 800d92e:	2201      	movs	r2, #1
 800d930:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	69da      	ldr	r2, [r3, #28]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4938      	ldr	r1, [pc, #224]	@ (800da20 <HAL_I2S_DMAStop+0x194>)
 800d93e:	400a      	ands	r2, r1
 800d940:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800d942:	2300      	movs	r3, #0
 800d944:	613b      	str	r3, [r7, #16]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	613b      	str	r3, [r7, #16]
 800d94e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	685a      	ldr	r2, [r3, #4]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2102      	movs	r1, #2
 800d95c:	438a      	bics	r2, r1
 800d95e:	605a      	str	r2, [r3, #4]
 800d960:	e053      	b.n	800da0a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	23c0      	movs	r3, #192	@ 0xc0
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d005      	beq.n	800d97a <HAL_I2S_DMAStop+0xee>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	2380      	movs	r3, #128	@ 0x80
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	429a      	cmp	r2, r3
 800d978:	d147      	bne.n	800da0a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d010      	beq.n	800d9a4 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d986:	0018      	movs	r0, r3
 800d988:	f7fc ffb8 	bl	800a8fc <HAL_DMA_Abort>
 800d98c:	1e03      	subs	r3, r0, #0
 800d98e:	d009      	beq.n	800d9a4 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d994:	2208      	movs	r2, #8
 800d996:	431a      	orrs	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800d99c:	2317      	movs	r3, #23
 800d99e:	18fb      	adds	r3, r7, r3
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	69da      	ldr	r2, [r3, #28]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	491c      	ldr	r1, [pc, #112]	@ (800da20 <HAL_I2S_DMAStop+0x194>)
 800d9b0:	400a      	ands	r2, r1
 800d9b2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	60fb      	str	r3, [r7, #12]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	60fb      	str	r3, [r7, #12]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	60fb      	str	r3, [r7, #12]
 800d9c8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	685a      	ldr	r2, [r3, #4]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2101      	movs	r1, #1
 800d9d6:	438a      	bics	r2, r1
 800d9d8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	2380      	movs	r3, #128	@ 0x80
 800d9e0:	005b      	lsls	r3, r3, #1
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d10e      	bne.n	800da04 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ea:	2240      	movs	r2, #64	@ 0x40
 800d9ec:	431a      	orrs	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2235      	movs	r2, #53	@ 0x35
 800d9f6:	2101      	movs	r1, #1
 800d9f8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800d9fa:	2317      	movs	r3, #23
 800d9fc:	18fb      	adds	r3, r7, r3
 800d9fe:	2201      	movs	r2, #1
 800da00:	701a      	strb	r2, [r3, #0]
 800da02:	e002      	b.n	800da0a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2235      	movs	r2, #53	@ 0x35
 800da0e:	2101      	movs	r1, #1
 800da10:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800da12:	2317      	movs	r3, #23
 800da14:	18fb      	adds	r3, r7, r3
 800da16:	781b      	ldrb	r3, [r3, #0]
}
 800da18:	0018      	movs	r0, r3
 800da1a:	46bd      	mov	sp, r7
 800da1c:	b006      	add	sp, #24
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	fffffbff 	.word	0xfffffbff

0800da24 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800da2c:	46c0      	nop			@ (mov r8, r8)
 800da2e:	46bd      	mov	sp, r7
 800da30:	b002      	add	sp, #8
 800da32:	bd80      	pop	{r7, pc}

0800da34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800da3c:	46c0      	nop			@ (mov r8, r8)
 800da3e:	46bd      	mov	sp, r7
 800da40:	b002      	add	sp, #8
 800da42:	bd80      	pop	{r7, pc}

0800da44 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da50:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	69db      	ldr	r3, [r3, #28]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10e      	bne.n	800da78 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2101      	movs	r1, #1
 800da66:	438a      	bics	r2, r1
 800da68:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2200      	movs	r2, #0
 800da6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2235      	movs	r2, #53	@ 0x35
 800da74:	2101      	movs	r1, #1
 800da76:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	0018      	movs	r0, r3
 800da7c:	f7f9 fb40 	bl	8007100 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800da80:	46c0      	nop			@ (mov r8, r8)
 800da82:	46bd      	mov	sp, r7
 800da84:	b004      	add	sp, #16
 800da86:	bd80      	pop	{r7, pc}

0800da88 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da94:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	0018      	movs	r0, r3
 800da9a:	f7ff ffc3 	bl	800da24 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800da9e:	46c0      	nop			@ (mov r8, r8)
 800daa0:	46bd      	mov	sp, r7
 800daa2:	b004      	add	sp, #16
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dab2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	685a      	ldr	r2, [r3, #4]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2103      	movs	r1, #3
 800dac0:	438a      	bics	r2, r1
 800dac2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2200      	movs	r2, #0
 800dac8:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2200      	movs	r2, #0
 800dace:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2235      	movs	r2, #53	@ 0x35
 800dad4:	2101      	movs	r1, #1
 800dad6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dadc:	2208      	movs	r2, #8
 800dade:	431a      	orrs	r2, r3
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	0018      	movs	r0, r3
 800dae8:	f7ff ffa4 	bl	800da34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800daec:	46c0      	nop			@ (mov r8, r8)
 800daee:	46bd      	mov	sp, r7
 800daf0:	b004      	add	sp, #16
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b086      	sub	sp, #24
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	603b      	str	r3, [r7, #0]
 800db00:	1dfb      	adds	r3, r7, #7
 800db02:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800db04:	f7fc f916 	bl	8009d34 <HAL_GetTick>
 800db08:	0003      	movs	r3, r0
 800db0a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800db0c:	e017      	b.n	800db3e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	3301      	adds	r3, #1
 800db12:	d014      	beq.n	800db3e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800db14:	f7fc f90e 	bl	8009d34 <HAL_GetTick>
 800db18:	0002      	movs	r2, r0
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	683a      	ldr	r2, [r7, #0]
 800db20:	429a      	cmp	r2, r3
 800db22:	d902      	bls.n	800db2a <I2S_WaitFlagStateUntilTimeout+0x36>
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d109      	bne.n	800db3e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2235      	movs	r2, #53	@ 0x35
 800db2e:	2101      	movs	r1, #1
 800db30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2234      	movs	r2, #52	@ 0x34
 800db36:	2100      	movs	r1, #0
 800db38:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e00f      	b.n	800db5e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	4013      	ands	r3, r2
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	425a      	negs	r2, r3
 800db4e:	4153      	adcs	r3, r2
 800db50:	b2db      	uxtb	r3, r3
 800db52:	001a      	movs	r2, r3
 800db54:	1dfb      	adds	r3, r7, #7
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d1d8      	bne.n	800db0e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	0018      	movs	r0, r3
 800db60:	46bd      	mov	sp, r7
 800db62:	b006      	add	sp, #24
 800db64:	bd80      	pop	{r7, pc}
	...

0800db68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800db68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db6a:	b08b      	sub	sp, #44	@ 0x2c
 800db6c:	af06      	add	r7, sp, #24
 800db6e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d101      	bne.n	800db7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800db76:	2301      	movs	r3, #1
 800db78:	e0f0      	b.n	800dd5c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4a79      	ldr	r2, [pc, #484]	@ (800dd64 <HAL_PCD_Init+0x1fc>)
 800db7e:	5c9b      	ldrb	r3, [r3, r2]
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b00      	cmp	r3, #0
 800db84:	d108      	bne.n	800db98 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	23aa      	movs	r3, #170	@ 0xaa
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	2100      	movs	r1, #0
 800db8e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	0018      	movs	r0, r3
 800db94:	f009 f80c 	bl	8016bb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	4a72      	ldr	r2, [pc, #456]	@ (800dd64 <HAL_PCD_Init+0x1fc>)
 800db9c:	2103      	movs	r1, #3
 800db9e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	0018      	movs	r0, r3
 800dba6:	f004 ffbf 	bl	8012b28 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbaa:	230f      	movs	r3, #15
 800dbac:	18fb      	adds	r3, r7, r3
 800dbae:	2200      	movs	r2, #0
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	e049      	b.n	800dc48 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dbb4:	200f      	movs	r0, #15
 800dbb6:	183b      	adds	r3, r7, r0
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	6879      	ldr	r1, [r7, #4]
 800dbbc:	1c5a      	adds	r2, r3, #1
 800dbbe:	0013      	movs	r3, r2
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	189b      	adds	r3, r3, r2
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	18cb      	adds	r3, r1, r3
 800dbc8:	3301      	adds	r3, #1
 800dbca:	2201      	movs	r2, #1
 800dbcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800dbce:	183b      	adds	r3, r7, r0
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	1c5a      	adds	r2, r3, #1
 800dbd6:	0013      	movs	r3, r2
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	189b      	adds	r3, r3, r2
 800dbdc:	00db      	lsls	r3, r3, #3
 800dbde:	183a      	adds	r2, r7, r0
 800dbe0:	7812      	ldrb	r2, [r2, #0]
 800dbe2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dbe4:	183b      	adds	r3, r7, r0
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	6879      	ldr	r1, [r7, #4]
 800dbea:	1c5a      	adds	r2, r3, #1
 800dbec:	0013      	movs	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	189b      	adds	r3, r3, r2
 800dbf2:	00db      	lsls	r3, r3, #3
 800dbf4:	18cb      	adds	r3, r1, r3
 800dbf6:	3303      	adds	r3, #3
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dbfc:	183b      	adds	r3, r7, r0
 800dbfe:	781a      	ldrb	r2, [r3, #0]
 800dc00:	6879      	ldr	r1, [r7, #4]
 800dc02:	0013      	movs	r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	189b      	adds	r3, r3, r2
 800dc08:	00db      	lsls	r3, r3, #3
 800dc0a:	18cb      	adds	r3, r1, r3
 800dc0c:	3338      	adds	r3, #56	@ 0x38
 800dc0e:	2200      	movs	r2, #0
 800dc10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dc12:	183b      	adds	r3, r7, r0
 800dc14:	781a      	ldrb	r2, [r3, #0]
 800dc16:	6879      	ldr	r1, [r7, #4]
 800dc18:	0013      	movs	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	189b      	adds	r3, r3, r2
 800dc1e:	00db      	lsls	r3, r3, #3
 800dc20:	18cb      	adds	r3, r1, r3
 800dc22:	333c      	adds	r3, #60	@ 0x3c
 800dc24:	2200      	movs	r2, #0
 800dc26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dc28:	183b      	adds	r3, r7, r0
 800dc2a:	781a      	ldrb	r2, [r3, #0]
 800dc2c:	6879      	ldr	r1, [r7, #4]
 800dc2e:	0013      	movs	r3, r2
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	189b      	adds	r3, r3, r2
 800dc34:	00db      	lsls	r3, r3, #3
 800dc36:	18cb      	adds	r3, r1, r3
 800dc38:	3340      	adds	r3, #64	@ 0x40
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc3e:	183b      	adds	r3, r7, r0
 800dc40:	781a      	ldrb	r2, [r3, #0]
 800dc42:	183b      	adds	r3, r7, r0
 800dc44:	3201      	adds	r2, #1
 800dc46:	701a      	strb	r2, [r3, #0]
 800dc48:	210f      	movs	r1, #15
 800dc4a:	187b      	adds	r3, r7, r1
 800dc4c:	781a      	ldrb	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d3ae      	bcc.n	800dbb4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc56:	187b      	adds	r3, r7, r1
 800dc58:	2200      	movs	r2, #0
 800dc5a:	701a      	strb	r2, [r3, #0]
 800dc5c:	e056      	b.n	800dd0c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800dc5e:	240f      	movs	r4, #15
 800dc60:	193b      	adds	r3, r7, r4
 800dc62:	781a      	ldrb	r2, [r3, #0]
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	236a      	movs	r3, #106	@ 0x6a
 800dc68:	33ff      	adds	r3, #255	@ 0xff
 800dc6a:	0019      	movs	r1, r3
 800dc6c:	0013      	movs	r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	189b      	adds	r3, r3, r2
 800dc72:	00db      	lsls	r3, r3, #3
 800dc74:	18c3      	adds	r3, r0, r3
 800dc76:	185b      	adds	r3, r3, r1
 800dc78:	2200      	movs	r2, #0
 800dc7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dc7c:	193b      	adds	r3, r7, r4
 800dc7e:	781a      	ldrb	r2, [r3, #0]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	23b4      	movs	r3, #180	@ 0xb4
 800dc84:	0059      	lsls	r1, r3, #1
 800dc86:	0013      	movs	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	189b      	adds	r3, r3, r2
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	18c3      	adds	r3, r0, r3
 800dc90:	185b      	adds	r3, r3, r1
 800dc92:	193a      	adds	r2, r7, r4
 800dc94:	7812      	ldrb	r2, [r2, #0]
 800dc96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dc98:	193b      	adds	r3, r7, r4
 800dc9a:	781a      	ldrb	r2, [r3, #0]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	236c      	movs	r3, #108	@ 0x6c
 800dca0:	33ff      	adds	r3, #255	@ 0xff
 800dca2:	0019      	movs	r1, r3
 800dca4:	0013      	movs	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	189b      	adds	r3, r3, r2
 800dcaa:	00db      	lsls	r3, r3, #3
 800dcac:	18c3      	adds	r3, r0, r3
 800dcae:	185b      	adds	r3, r3, r1
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800dcb4:	193b      	adds	r3, r7, r4
 800dcb6:	781a      	ldrb	r2, [r3, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	23bc      	movs	r3, #188	@ 0xbc
 800dcbc:	0059      	lsls	r1, r3, #1
 800dcbe:	0013      	movs	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	189b      	adds	r3, r3, r2
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	18c3      	adds	r3, r0, r3
 800dcc8:	185b      	adds	r3, r3, r1
 800dcca:	2200      	movs	r2, #0
 800dccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dcce:	193b      	adds	r3, r7, r4
 800dcd0:	781a      	ldrb	r2, [r3, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	23be      	movs	r3, #190	@ 0xbe
 800dcd6:	0059      	lsls	r1, r3, #1
 800dcd8:	0013      	movs	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	189b      	adds	r3, r3, r2
 800dcde:	00db      	lsls	r3, r3, #3
 800dce0:	18c3      	adds	r3, r0, r3
 800dce2:	185b      	adds	r3, r3, r1
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dce8:	193b      	adds	r3, r7, r4
 800dcea:	781a      	ldrb	r2, [r3, #0]
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	23c0      	movs	r3, #192	@ 0xc0
 800dcf0:	0059      	lsls	r1, r3, #1
 800dcf2:	0013      	movs	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	189b      	adds	r3, r3, r2
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	18c3      	adds	r3, r0, r3
 800dcfc:	185b      	adds	r3, r3, r1
 800dcfe:	2200      	movs	r2, #0
 800dd00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dd02:	193b      	adds	r3, r7, r4
 800dd04:	781a      	ldrb	r2, [r3, #0]
 800dd06:	193b      	adds	r3, r7, r4
 800dd08:	3201      	adds	r2, #1
 800dd0a:	701a      	strb	r2, [r3, #0]
 800dd0c:	230f      	movs	r3, #15
 800dd0e:	18fb      	adds	r3, r7, r3
 800dd10:	781a      	ldrb	r2, [r3, #0]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d3a1      	bcc.n	800dc5e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6818      	ldr	r0, [r3, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	466a      	mov	r2, sp
 800dd22:	0011      	movs	r1, r2
 800dd24:	001a      	movs	r2, r3
 800dd26:	3210      	adds	r2, #16
 800dd28:	ca70      	ldmia	r2!, {r4, r5, r6}
 800dd2a:	c170      	stmia	r1!, {r4, r5, r6}
 800dd2c:	ca30      	ldmia	r2!, {r4, r5}
 800dd2e:	c130      	stmia	r1!, {r4, r5}
 800dd30:	6859      	ldr	r1, [r3, #4]
 800dd32:	689a      	ldr	r2, [r3, #8]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	f004 ff11 	bl	8012b5c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2224      	movs	r2, #36	@ 0x24
 800dd3e:	2100      	movs	r1, #0
 800dd40:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a07      	ldr	r2, [pc, #28]	@ (800dd64 <HAL_PCD_Init+0x1fc>)
 800dd46:	2101      	movs	r1, #1
 800dd48:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	69db      	ldr	r3, [r3, #28]
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d103      	bne.n	800dd5a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	0018      	movs	r0, r3
 800dd56:	f001 fd23 	bl	800f7a0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800dd5a:	2300      	movs	r3, #0
}
 800dd5c:	0018      	movs	r0, r3
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	b005      	add	sp, #20
 800dd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd64:	000002a9 	.word	0x000002a9

0800dd68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	23aa      	movs	r3, #170	@ 0xaa
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	5cd3      	ldrb	r3, [r2, r3]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d101      	bne.n	800dd80 <HAL_PCD_Start+0x18>
 800dd7c:	2302      	movs	r3, #2
 800dd7e:	e014      	b.n	800ddaa <HAL_PCD_Start+0x42>
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	23aa      	movs	r3, #170	@ 0xaa
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	2101      	movs	r1, #1
 800dd88:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	0018      	movs	r0, r3
 800dd90:	f004 feb4 	bl	8012afc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	0018      	movs	r0, r3
 800dd9a:	f006 feb7 	bl	8014b0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	23aa      	movs	r3, #170	@ 0xaa
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	2100      	movs	r1, #0
 800dda6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	0018      	movs	r0, r3
 800ddac:	46bd      	mov	sp, r7
 800ddae:	b002      	add	sp, #8
 800ddb0:	bd80      	pop	{r7, pc}
	...

0800ddb4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	f006 feb9 	bl	8014b38 <USB_ReadInterrupts>
 800ddc6:	0003      	movs	r3, r0
 800ddc8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800ddca:	68fa      	ldr	r2, [r7, #12]
 800ddcc:	2380      	movs	r3, #128	@ 0x80
 800ddce:	021b      	lsls	r3, r3, #8
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	d004      	beq.n	800ddde <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	0018      	movs	r0, r3
 800ddd8:	f000 fb62 	bl	800e4a0 <PCD_EP_ISR_Handler>

    return;
 800dddc:	e11d      	b.n	800e01a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	2380      	movs	r3, #128	@ 0x80
 800dde2:	00db      	lsls	r3, r3, #3
 800dde4:	4013      	ands	r3, r2
 800dde6:	d015      	beq.n	800de14 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2244      	movs	r2, #68	@ 0x44
 800ddee:	5a9b      	ldrh	r3, [r3, r2]
 800ddf0:	b29a      	uxth	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	498a      	ldr	r1, [pc, #552]	@ (800e020 <HAL_PCD_IRQHandler+0x26c>)
 800ddf8:	400a      	ands	r2, r1
 800ddfa:	b291      	uxth	r1, r2
 800ddfc:	2244      	movs	r2, #68	@ 0x44
 800ddfe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	0018      	movs	r0, r3
 800de04:	f008 ff57 	bl	8016cb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2100      	movs	r1, #0
 800de0c:	0018      	movs	r0, r3
 800de0e:	f000 f915 	bl	800e03c <HAL_PCD_SetAddress>

    return;
 800de12:	e102      	b.n	800e01a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	2380      	movs	r3, #128	@ 0x80
 800de18:	01db      	lsls	r3, r3, #7
 800de1a:	4013      	ands	r3, r2
 800de1c:	d00c      	beq.n	800de38 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2244      	movs	r2, #68	@ 0x44
 800de24:	5a9b      	ldrh	r3, [r3, r2]
 800de26:	b29a      	uxth	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	497d      	ldr	r1, [pc, #500]	@ (800e024 <HAL_PCD_IRQHandler+0x270>)
 800de2e:	400a      	ands	r2, r1
 800de30:	b291      	uxth	r1, r2
 800de32:	2244      	movs	r2, #68	@ 0x44
 800de34:	5299      	strh	r1, [r3, r2]

    return;
 800de36:	e0f0      	b.n	800e01a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	2380      	movs	r3, #128	@ 0x80
 800de3c:	019b      	lsls	r3, r3, #6
 800de3e:	4013      	ands	r3, r2
 800de40:	d00c      	beq.n	800de5c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2244      	movs	r2, #68	@ 0x44
 800de48:	5a9b      	ldrh	r3, [r3, r2]
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4975      	ldr	r1, [pc, #468]	@ (800e028 <HAL_PCD_IRQHandler+0x274>)
 800de52:	400a      	ands	r2, r1
 800de54:	b291      	uxth	r1, r2
 800de56:	2244      	movs	r2, #68	@ 0x44
 800de58:	5299      	strh	r1, [r3, r2]

    return;
 800de5a:	e0de      	b.n	800e01a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	2380      	movs	r3, #128	@ 0x80
 800de60:	015b      	lsls	r3, r3, #5
 800de62:	4013      	ands	r3, r2
 800de64:	d038      	beq.n	800ded8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2240      	movs	r2, #64	@ 0x40
 800de6c:	5a9b      	ldrh	r3, [r3, r2]
 800de6e:	b29a      	uxth	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2104      	movs	r1, #4
 800de76:	438a      	bics	r2, r1
 800de78:	b291      	uxth	r1, r2
 800de7a:	2240      	movs	r2, #64	@ 0x40
 800de7c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2240      	movs	r2, #64	@ 0x40
 800de84:	5a9b      	ldrh	r3, [r3, r2]
 800de86:	b29a      	uxth	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2108      	movs	r1, #8
 800de8e:	438a      	bics	r2, r1
 800de90:	b291      	uxth	r1, r2
 800de92:	2240      	movs	r2, #64	@ 0x40
 800de94:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	23b8      	movs	r3, #184	@ 0xb8
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	5cd3      	ldrb	r3, [r2, r3]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d109      	bne.n	800deb6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	23b8      	movs	r3, #184	@ 0xb8
 800dea6:	009b      	lsls	r3, r3, #2
 800dea8:	2100      	movs	r1, #0
 800deaa:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2100      	movs	r1, #0
 800deb0:	0018      	movs	r0, r3
 800deb2:	f001 fc9f 	bl	800f7f4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	0018      	movs	r0, r3
 800deba:	f008 ff3d 	bl	8016d38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2244      	movs	r2, #68	@ 0x44
 800dec4:	5a9b      	ldrh	r3, [r3, r2]
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4957      	ldr	r1, [pc, #348]	@ (800e02c <HAL_PCD_IRQHandler+0x278>)
 800dece:	400a      	ands	r2, r1
 800ded0:	b291      	uxth	r1, r2
 800ded2:	2244      	movs	r2, #68	@ 0x44
 800ded4:	5299      	strh	r1, [r3, r2]

    return;
 800ded6:	e0a0      	b.n	800e01a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	2380      	movs	r3, #128	@ 0x80
 800dedc:	011b      	lsls	r3, r3, #4
 800dede:	4013      	ands	r3, r2
 800dee0:	d028      	beq.n	800df34 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2240      	movs	r2, #64	@ 0x40
 800dee8:	5a9b      	ldrh	r3, [r3, r2]
 800deea:	b29a      	uxth	r2, r3
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2108      	movs	r1, #8
 800def2:	430a      	orrs	r2, r1
 800def4:	b291      	uxth	r1, r2
 800def6:	2240      	movs	r2, #64	@ 0x40
 800def8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2244      	movs	r2, #68	@ 0x44
 800df00:	5a9b      	ldrh	r3, [r3, r2]
 800df02:	b29a      	uxth	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4949      	ldr	r1, [pc, #292]	@ (800e030 <HAL_PCD_IRQHandler+0x27c>)
 800df0a:	400a      	ands	r2, r1
 800df0c:	b291      	uxth	r1, r2
 800df0e:	2244      	movs	r2, #68	@ 0x44
 800df10:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2240      	movs	r2, #64	@ 0x40
 800df18:	5a9b      	ldrh	r3, [r3, r2]
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2104      	movs	r1, #4
 800df22:	430a      	orrs	r2, r1
 800df24:	b291      	uxth	r1, r2
 800df26:	2240      	movs	r2, #64	@ 0x40
 800df28:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	0018      	movs	r0, r3
 800df2e:	f008 fee7 	bl	8016d00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800df32:	e072      	b.n	800e01a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2280      	movs	r2, #128	@ 0x80
 800df38:	4013      	ands	r3, r2
 800df3a:	d046      	beq.n	800dfca <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2244      	movs	r2, #68	@ 0x44
 800df42:	5a9b      	ldrh	r3, [r3, r2]
 800df44:	b29a      	uxth	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2180      	movs	r1, #128	@ 0x80
 800df4c:	438a      	bics	r2, r1
 800df4e:	b291      	uxth	r1, r2
 800df50:	2244      	movs	r2, #68	@ 0x44
 800df52:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	23b8      	movs	r3, #184	@ 0xb8
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	5cd3      	ldrb	r3, [r2, r3]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d12f      	bne.n	800dfc0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2240      	movs	r2, #64	@ 0x40
 800df66:	5a9b      	ldrh	r3, [r3, r2]
 800df68:	b29a      	uxth	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2104      	movs	r1, #4
 800df70:	430a      	orrs	r2, r1
 800df72:	b291      	uxth	r1, r2
 800df74:	2240      	movs	r2, #64	@ 0x40
 800df76:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2240      	movs	r2, #64	@ 0x40
 800df7e:	5a9b      	ldrh	r3, [r3, r2]
 800df80:	b29a      	uxth	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2108      	movs	r1, #8
 800df88:	430a      	orrs	r2, r1
 800df8a:	b291      	uxth	r1, r2
 800df8c:	2240      	movs	r2, #64	@ 0x40
 800df8e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	23b8      	movs	r3, #184	@ 0xb8
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	2101      	movs	r1, #1
 800df98:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2254      	movs	r2, #84	@ 0x54
 800dfa0:	5a9b      	ldrh	r3, [r3, r2]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	089b      	lsrs	r3, r3, #2
 800dfa6:	223c      	movs	r2, #60	@ 0x3c
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	0019      	movs	r1, r3
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	23b9      	movs	r3, #185	@ 0xb9
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2101      	movs	r1, #1
 800dfb8:	0018      	movs	r0, r3
 800dfba:	f001 fc1b 	bl	800f7f4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800dfbe:	e02c      	b.n	800e01a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	0018      	movs	r0, r3
 800dfc4:	f008 fe9c 	bl	8016d00 <HAL_PCD_SuspendCallback>
    return;
 800dfc8:	e027      	b.n	800e01a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800dfca:	68fa      	ldr	r2, [r7, #12]
 800dfcc:	2380      	movs	r3, #128	@ 0x80
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	4013      	ands	r3, r2
 800dfd2:	d010      	beq.n	800dff6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	2244      	movs	r2, #68	@ 0x44
 800dfda:	5a9b      	ldrh	r3, [r3, r2]
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4914      	ldr	r1, [pc, #80]	@ (800e034 <HAL_PCD_IRQHandler+0x280>)
 800dfe4:	400a      	ands	r2, r1
 800dfe6:	b291      	uxth	r1, r2
 800dfe8:	2244      	movs	r2, #68	@ 0x44
 800dfea:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	0018      	movs	r0, r3
 800dff0:	f008 fe52 	bl	8016c98 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800dff4:	e011      	b.n	800e01a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	2380      	movs	r3, #128	@ 0x80
 800dffa:	005b      	lsls	r3, r3, #1
 800dffc:	4013      	ands	r3, r2
 800dffe:	d00c      	beq.n	800e01a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2244      	movs	r2, #68	@ 0x44
 800e006:	5a9b      	ldrh	r3, [r3, r2]
 800e008:	b29a      	uxth	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	490a      	ldr	r1, [pc, #40]	@ (800e038 <HAL_PCD_IRQHandler+0x284>)
 800e010:	400a      	ands	r2, r1
 800e012:	b291      	uxth	r1, r2
 800e014:	2244      	movs	r2, #68	@ 0x44
 800e016:	5299      	strh	r1, [r3, r2]

    return;
 800e018:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e01a:	46bd      	mov	sp, r7
 800e01c:	b004      	add	sp, #16
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	fffffbff 	.word	0xfffffbff
 800e024:	ffffbfff 	.word	0xffffbfff
 800e028:	ffffdfff 	.word	0xffffdfff
 800e02c:	ffffefff 	.word	0xffffefff
 800e030:	fffff7ff 	.word	0xfffff7ff
 800e034:	fffffdff 	.word	0xfffffdff
 800e038:	fffffeff 	.word	0xfffffeff

0800e03c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	000a      	movs	r2, r1
 800e046:	1cfb      	adds	r3, r7, #3
 800e048:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	23aa      	movs	r3, #170	@ 0xaa
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	5cd3      	ldrb	r3, [r2, r3]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d101      	bne.n	800e05a <HAL_PCD_SetAddress+0x1e>
 800e056:	2302      	movs	r3, #2
 800e058:	e017      	b.n	800e08a <HAL_PCD_SetAddress+0x4e>
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	23aa      	movs	r3, #170	@ 0xaa
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	2101      	movs	r1, #1
 800e062:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	1cfa      	adds	r2, r7, #3
 800e068:	2124      	movs	r1, #36	@ 0x24
 800e06a:	7812      	ldrb	r2, [r2, #0]
 800e06c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	1cfb      	adds	r3, r7, #3
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	0019      	movs	r1, r3
 800e078:	0010      	movs	r0, r2
 800e07a:	f006 fd33 	bl	8014ae4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	23aa      	movs	r3, #170	@ 0xaa
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	2100      	movs	r1, #0
 800e086:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	0018      	movs	r0, r3
 800e08c:	46bd      	mov	sp, r7
 800e08e:	b002      	add	sp, #8
 800e090:	bd80      	pop	{r7, pc}

0800e092 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e092:	b590      	push	{r4, r7, lr}
 800e094:	b085      	sub	sp, #20
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	000c      	movs	r4, r1
 800e09c:	0010      	movs	r0, r2
 800e09e:	0019      	movs	r1, r3
 800e0a0:	1cfb      	adds	r3, r7, #3
 800e0a2:	1c22      	adds	r2, r4, #0
 800e0a4:	701a      	strb	r2, [r3, #0]
 800e0a6:	003b      	movs	r3, r7
 800e0a8:	1c02      	adds	r2, r0, #0
 800e0aa:	801a      	strh	r2, [r3, #0]
 800e0ac:	1cbb      	adds	r3, r7, #2
 800e0ae:	1c0a      	adds	r2, r1, #0
 800e0b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e0b2:	230b      	movs	r3, #11
 800e0b4:	18fb      	adds	r3, r7, r3
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e0ba:	1cfb      	adds	r3, r7, #3
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	b25b      	sxtb	r3, r3
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	da0f      	bge.n	800e0e4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e0c4:	1cfb      	adds	r3, r7, #3
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	2207      	movs	r2, #7
 800e0ca:	4013      	ands	r3, r2
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	0013      	movs	r3, r2
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	189b      	adds	r3, r3, r2
 800e0d4:	00db      	lsls	r3, r3, #3
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	18d3      	adds	r3, r2, r3
 800e0da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	705a      	strb	r2, [r3, #1]
 800e0e2:	e00f      	b.n	800e104 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e0e4:	1cfb      	adds	r3, r7, #3
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	2207      	movs	r2, #7
 800e0ea:	401a      	ands	r2, r3
 800e0ec:	0013      	movs	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	189b      	adds	r3, r3, r2
 800e0f2:	00db      	lsls	r3, r3, #3
 800e0f4:	3369      	adds	r3, #105	@ 0x69
 800e0f6:	33ff      	adds	r3, #255	@ 0xff
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	18d3      	adds	r3, r2, r3
 800e0fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2200      	movs	r2, #0
 800e102:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e104:	1cfb      	adds	r3, r7, #3
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2207      	movs	r2, #7
 800e10a:	4013      	ands	r3, r2
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e112:	003b      	movs	r3, r7
 800e114:	881a      	ldrh	r2, [r3, #0]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	1cba      	adds	r2, r7, #2
 800e11e:	7812      	ldrb	r2, [r2, #0]
 800e120:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e122:	1cbb      	adds	r3, r7, #2
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	2b02      	cmp	r3, #2
 800e128:	d102      	bne.n	800e130 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2200      	movs	r2, #0
 800e12e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	23aa      	movs	r3, #170	@ 0xaa
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	5cd3      	ldrb	r3, [r2, r3]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d101      	bne.n	800e140 <HAL_PCD_EP_Open+0xae>
 800e13c:	2302      	movs	r3, #2
 800e13e:	e013      	b.n	800e168 <HAL_PCD_EP_Open+0xd6>
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	23aa      	movs	r3, #170	@ 0xaa
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	2101      	movs	r1, #1
 800e148:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	0011      	movs	r1, r2
 800e152:	0018      	movs	r0, r3
 800e154:	f004 fd2a 	bl	8012bac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	23aa      	movs	r3, #170	@ 0xaa
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	2100      	movs	r1, #0
 800e160:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e162:	230b      	movs	r3, #11
 800e164:	18fb      	adds	r3, r7, r3
 800e166:	781b      	ldrb	r3, [r3, #0]
}
 800e168:	0018      	movs	r0, r3
 800e16a:	46bd      	mov	sp, r7
 800e16c:	b005      	add	sp, #20
 800e16e:	bd90      	pop	{r4, r7, pc}

0800e170 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	000a      	movs	r2, r1
 800e17a:	1cfb      	adds	r3, r7, #3
 800e17c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e17e:	1cfb      	adds	r3, r7, #3
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	b25b      	sxtb	r3, r3
 800e184:	2b00      	cmp	r3, #0
 800e186:	da0f      	bge.n	800e1a8 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e188:	1cfb      	adds	r3, r7, #3
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2207      	movs	r2, #7
 800e18e:	4013      	ands	r3, r2
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	0013      	movs	r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	189b      	adds	r3, r3, r2
 800e198:	00db      	lsls	r3, r3, #3
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	18d3      	adds	r3, r2, r3
 800e19e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	705a      	strb	r2, [r3, #1]
 800e1a6:	e00f      	b.n	800e1c8 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e1a8:	1cfb      	adds	r3, r7, #3
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	2207      	movs	r2, #7
 800e1ae:	401a      	ands	r2, r3
 800e1b0:	0013      	movs	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	189b      	adds	r3, r3, r2
 800e1b6:	00db      	lsls	r3, r3, #3
 800e1b8:	3369      	adds	r3, #105	@ 0x69
 800e1ba:	33ff      	adds	r3, #255	@ 0xff
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	18d3      	adds	r3, r2, r3
 800e1c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e1c8:	1cfb      	adds	r3, r7, #3
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	2207      	movs	r2, #7
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	23aa      	movs	r3, #170	@ 0xaa
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	5cd3      	ldrb	r3, [r2, r3]
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d101      	bne.n	800e1e6 <HAL_PCD_EP_Close+0x76>
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	e011      	b.n	800e20a <HAL_PCD_EP_Close+0x9a>
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	23aa      	movs	r3, #170	@ 0xaa
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	2101      	movs	r1, #1
 800e1ee:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	0011      	movs	r1, r2
 800e1f8:	0018      	movs	r0, r3
 800e1fa:	f005 f879 	bl	80132f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	23aa      	movs	r3, #170	@ 0xaa
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	2100      	movs	r1, #0
 800e206:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	0018      	movs	r0, r3
 800e20c:	46bd      	mov	sp, r7
 800e20e:	b004      	add	sp, #16
 800e210:	bd80      	pop	{r7, pc}

0800e212 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b086      	sub	sp, #24
 800e216:	af00      	add	r7, sp, #0
 800e218:	60f8      	str	r0, [r7, #12]
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	603b      	str	r3, [r7, #0]
 800e21e:	200b      	movs	r0, #11
 800e220:	183b      	adds	r3, r7, r0
 800e222:	1c0a      	adds	r2, r1, #0
 800e224:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e226:	0001      	movs	r1, r0
 800e228:	187b      	adds	r3, r7, r1
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2207      	movs	r2, #7
 800e22e:	401a      	ands	r2, r3
 800e230:	0013      	movs	r3, r2
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	189b      	adds	r3, r3, r2
 800e236:	00db      	lsls	r3, r3, #3
 800e238:	3369      	adds	r3, #105	@ 0x69
 800e23a:	33ff      	adds	r3, #255	@ 0xff
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	18d3      	adds	r3, r2, r3
 800e240:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	2200      	movs	r2, #0
 800e252:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2200      	movs	r2, #0
 800e258:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e25a:	187b      	adds	r3, r7, r1
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	2207      	movs	r2, #7
 800e260:	4013      	ands	r3, r2
 800e262:	b2da      	uxtb	r2, r3
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	697a      	ldr	r2, [r7, #20]
 800e26e:	0011      	movs	r1, r2
 800e270:	0018      	movs	r0, r3
 800e272:	f005 f9fd 	bl	8013670 <USB_EPStartXfer>

  return HAL_OK;
 800e276:	2300      	movs	r3, #0
}
 800e278:	0018      	movs	r0, r3
 800e27a:	46bd      	mov	sp, r7
 800e27c:	b006      	add	sp, #24
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	000a      	movs	r2, r1
 800e28a:	1cfb      	adds	r3, r7, #3
 800e28c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e28e:	1cfb      	adds	r3, r7, #3
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	2207      	movs	r2, #7
 800e294:	401a      	ands	r2, r3
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	23c2      	movs	r3, #194	@ 0xc2
 800e29a:	0059      	lsls	r1, r3, #1
 800e29c:	0013      	movs	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	189b      	adds	r3, r3, r2
 800e2a2:	00db      	lsls	r3, r3, #3
 800e2a4:	18c3      	adds	r3, r0, r3
 800e2a6:	185b      	adds	r3, r3, r1
 800e2a8:	681b      	ldr	r3, [r3, #0]
}
 800e2aa:	0018      	movs	r0, r3
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	b002      	add	sp, #8
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b086      	sub	sp, #24
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	60f8      	str	r0, [r7, #12]
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	603b      	str	r3, [r7, #0]
 800e2be:	200b      	movs	r0, #11
 800e2c0:	183b      	adds	r3, r7, r0
 800e2c2:	1c0a      	adds	r2, r1, #0
 800e2c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e2c6:	183b      	adds	r3, r7, r0
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	2207      	movs	r2, #7
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	0013      	movs	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	189b      	adds	r3, r3, r2
 800e2d6:	00db      	lsls	r3, r3, #3
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	18d3      	adds	r3, r2, r3
 800e2dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	683a      	ldr	r2, [r7, #0]
 800e2e8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2224      	movs	r2, #36	@ 0x24
 800e2ee:	2101      	movs	r1, #1
 800e2f0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	2201      	movs	r2, #1
 800e302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e304:	183b      	adds	r3, r7, r0
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	2207      	movs	r2, #7
 800e30a:	4013      	ands	r3, r2
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	697a      	ldr	r2, [r7, #20]
 800e318:	0011      	movs	r1, r2
 800e31a:	0018      	movs	r0, r3
 800e31c:	f005 f9a8 	bl	8013670 <USB_EPStartXfer>

  return HAL_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	0018      	movs	r0, r3
 800e324:	46bd      	mov	sp, r7
 800e326:	b006      	add	sp, #24
 800e328:	bd80      	pop	{r7, pc}

0800e32a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b084      	sub	sp, #16
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	000a      	movs	r2, r1
 800e334:	1cfb      	adds	r3, r7, #3
 800e336:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e338:	1cfb      	adds	r3, r7, #3
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	2207      	movs	r2, #7
 800e33e:	401a      	ands	r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	429a      	cmp	r2, r3
 800e346:	d901      	bls.n	800e34c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	e046      	b.n	800e3da <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e34c:	1cfb      	adds	r3, r7, #3
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	b25b      	sxtb	r3, r3
 800e352:	2b00      	cmp	r3, #0
 800e354:	da0f      	bge.n	800e376 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e356:	1cfb      	adds	r3, r7, #3
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	2207      	movs	r2, #7
 800e35c:	4013      	ands	r3, r2
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	0013      	movs	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	189b      	adds	r3, r3, r2
 800e366:	00db      	lsls	r3, r3, #3
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	18d3      	adds	r3, r2, r3
 800e36c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2201      	movs	r2, #1
 800e372:	705a      	strb	r2, [r3, #1]
 800e374:	e00d      	b.n	800e392 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e376:	1cfb      	adds	r3, r7, #3
 800e378:	781a      	ldrb	r2, [r3, #0]
 800e37a:	0013      	movs	r3, r2
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	189b      	adds	r3, r3, r2
 800e380:	00db      	lsls	r3, r3, #3
 800e382:	3369      	adds	r3, #105	@ 0x69
 800e384:	33ff      	adds	r3, #255	@ 0xff
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	18d3      	adds	r3, r2, r3
 800e38a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2200      	movs	r2, #0
 800e390:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2201      	movs	r2, #1
 800e396:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e398:	1cfb      	adds	r3, r7, #3
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2207      	movs	r2, #7
 800e39e:	4013      	ands	r3, r2
 800e3a0:	b2da      	uxtb	r2, r3
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	23aa      	movs	r3, #170	@ 0xaa
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	5cd3      	ldrb	r3, [r2, r3]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d101      	bne.n	800e3b6 <HAL_PCD_EP_SetStall+0x8c>
 800e3b2:	2302      	movs	r3, #2
 800e3b4:	e011      	b.n	800e3da <HAL_PCD_EP_SetStall+0xb0>
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	23aa      	movs	r3, #170	@ 0xaa
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	2101      	movs	r1, #1
 800e3be:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	0011      	movs	r1, r2
 800e3c8:	0018      	movs	r0, r3
 800e3ca:	f006 fa89 	bl	80148e0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	23aa      	movs	r3, #170	@ 0xaa
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	2100      	movs	r1, #0
 800e3d6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e3d8:	2300      	movs	r3, #0
}
 800e3da:	0018      	movs	r0, r3
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	b004      	add	sp, #16
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e3e2:	b580      	push	{r7, lr}
 800e3e4:	b084      	sub	sp, #16
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
 800e3ea:	000a      	movs	r2, r1
 800e3ec:	1cfb      	adds	r3, r7, #3
 800e3ee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e3f0:	1cfb      	adds	r3, r7, #3
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	220f      	movs	r2, #15
 800e3f6:	401a      	ands	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d901      	bls.n	800e404 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	e048      	b.n	800e496 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e404:	1cfb      	adds	r3, r7, #3
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	b25b      	sxtb	r3, r3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	da0f      	bge.n	800e42e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e40e:	1cfb      	adds	r3, r7, #3
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	2207      	movs	r2, #7
 800e414:	4013      	ands	r3, r2
 800e416:	1c5a      	adds	r2, r3, #1
 800e418:	0013      	movs	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	189b      	adds	r3, r3, r2
 800e41e:	00db      	lsls	r3, r3, #3
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	18d3      	adds	r3, r2, r3
 800e424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2201      	movs	r2, #1
 800e42a:	705a      	strb	r2, [r3, #1]
 800e42c:	e00f      	b.n	800e44e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e42e:	1cfb      	adds	r3, r7, #3
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	2207      	movs	r2, #7
 800e434:	401a      	ands	r2, r3
 800e436:	0013      	movs	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	189b      	adds	r3, r3, r2
 800e43c:	00db      	lsls	r3, r3, #3
 800e43e:	3369      	adds	r3, #105	@ 0x69
 800e440:	33ff      	adds	r3, #255	@ 0xff
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	18d3      	adds	r3, r2, r3
 800e446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2200      	movs	r2, #0
 800e452:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e454:	1cfb      	adds	r3, r7, #3
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	2207      	movs	r2, #7
 800e45a:	4013      	ands	r3, r2
 800e45c:	b2da      	uxtb	r2, r3
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	23aa      	movs	r3, #170	@ 0xaa
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	5cd3      	ldrb	r3, [r2, r3]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d101      	bne.n	800e472 <HAL_PCD_EP_ClrStall+0x90>
 800e46e:	2302      	movs	r3, #2
 800e470:	e011      	b.n	800e496 <HAL_PCD_EP_ClrStall+0xb4>
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	23aa      	movs	r3, #170	@ 0xaa
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	2101      	movs	r1, #1
 800e47a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	0011      	movs	r1, r2
 800e484:	0018      	movs	r0, r3
 800e486:	f006 fa7b 	bl	8014980 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	23aa      	movs	r3, #170	@ 0xaa
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	2100      	movs	r1, #0
 800e492:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	0018      	movs	r0, r3
 800e498:	46bd      	mov	sp, r7
 800e49a:	b004      	add	sp, #16
 800e49c:	bd80      	pop	{r7, pc}
	...

0800e4a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e4a0:	b5b0      	push	{r4, r5, r7, lr}
 800e4a2:	b096      	sub	sp, #88	@ 0x58
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e4a8:	f000 fbec 	bl	800ec84 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	204e      	movs	r0, #78	@ 0x4e
 800e4b2:	183b      	adds	r3, r7, r0
 800e4b4:	2144      	movs	r1, #68	@ 0x44
 800e4b6:	5a52      	ldrh	r2, [r2, r1]
 800e4b8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e4ba:	183b      	adds	r3, r7, r0
 800e4bc:	881b      	ldrh	r3, [r3, #0]
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	244d      	movs	r4, #77	@ 0x4d
 800e4c2:	193b      	adds	r3, r7, r4
 800e4c4:	210f      	movs	r1, #15
 800e4c6:	400a      	ands	r2, r1
 800e4c8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800e4ca:	193b      	adds	r3, r7, r4
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d000      	beq.n	800e4d4 <PCD_EP_ISR_Handler+0x34>
 800e4d2:	e18f      	b.n	800e7f4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e4d4:	183b      	adds	r3, r7, r0
 800e4d6:	881b      	ldrh	r3, [r3, #0]
 800e4d8:	2210      	movs	r2, #16
 800e4da:	4013      	ands	r3, r2
 800e4dc:	d155      	bne.n	800e58a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	881b      	ldrh	r3, [r3, #0]
 800e4e4:	b29a      	uxth	r2, r3
 800e4e6:	200e      	movs	r0, #14
 800e4e8:	183b      	adds	r3, r7, r0
 800e4ea:	49bb      	ldr	r1, [pc, #748]	@ (800e7d8 <PCD_EP_ISR_Handler+0x338>)
 800e4ec:	400a      	ands	r2, r1
 800e4ee:	801a      	strh	r2, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	183a      	adds	r2, r7, r0
 800e4f6:	8812      	ldrh	r2, [r2, #0]
 800e4f8:	49b8      	ldr	r1, [pc, #736]	@ (800e7dc <PCD_EP_ISR_Handler+0x33c>)
 800e4fa:	430a      	orrs	r2, r1
 800e4fc:	b292      	uxth	r2, r2
 800e4fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	3328      	adds	r3, #40	@ 0x28
 800e504:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2250      	movs	r2, #80	@ 0x50
 800e50c:	5a9b      	ldrh	r3, [r3, r2]
 800e50e:	b29b      	uxth	r3, r3
 800e510:	001a      	movs	r2, r3
 800e512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	00db      	lsls	r3, r3, #3
 800e518:	18d2      	adds	r2, r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	18d3      	adds	r3, r2, r3
 800e520:	4aaf      	ldr	r2, [pc, #700]	@ (800e7e0 <PCD_EP_ISR_Handler+0x340>)
 800e522:	4694      	mov	ip, r2
 800e524:	4463      	add	r3, ip
 800e526:	881b      	ldrh	r3, [r3, #0]
 800e528:	059b      	lsls	r3, r3, #22
 800e52a:	0d9a      	lsrs	r2, r3, #22
 800e52c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e52e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e532:	695a      	ldr	r2, [r3, #20]
 800e534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e536:	69db      	ldr	r3, [r3, #28]
 800e538:	18d2      	adds	r2, r2, r3
 800e53a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e53c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2100      	movs	r1, #0
 800e542:	0018      	movs	r0, r3
 800e544:	f008 fb8a 	bl	8016c5c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2224      	movs	r2, #36	@ 0x24
 800e54c:	5c9b      	ldrb	r3, [r3, r2]
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	2b00      	cmp	r3, #0
 800e552:	d101      	bne.n	800e558 <PCD_EP_ISR_Handler+0xb8>
 800e554:	f000 fb96 	bl	800ec84 <PCD_EP_ISR_Handler+0x7e4>
 800e558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e55a:	699b      	ldr	r3, [r3, #24]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <PCD_EP_ISR_Handler+0xc4>
 800e560:	f000 fb90 	bl	800ec84 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2224      	movs	r2, #36	@ 0x24
 800e568:	5c9b      	ldrb	r3, [r3, r2]
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	2280      	movs	r2, #128	@ 0x80
 800e56e:	4252      	negs	r2, r2
 800e570:	4313      	orrs	r3, r2
 800e572:	b2da      	uxtb	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	0011      	movs	r1, r2
 800e57a:	224c      	movs	r2, #76	@ 0x4c
 800e57c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2224      	movs	r2, #36	@ 0x24
 800e582:	2100      	movs	r1, #0
 800e584:	5499      	strb	r1, [r3, r2]
 800e586:	f000 fb7d 	bl	800ec84 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	3369      	adds	r3, #105	@ 0x69
 800e58e:	33ff      	adds	r3, #255	@ 0xff
 800e590:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	214a      	movs	r1, #74	@ 0x4a
 800e598:	187b      	adds	r3, r7, r1
 800e59a:	8812      	ldrh	r2, [r2, #0]
 800e59c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800e59e:	187b      	adds	r3, r7, r1
 800e5a0:	881a      	ldrh	r2, [r3, #0]
 800e5a2:	2380      	movs	r3, #128	@ 0x80
 800e5a4:	011b      	lsls	r3, r3, #4
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	d037      	beq.n	800e61a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2250      	movs	r2, #80	@ 0x50
 800e5b0:	5a9b      	ldrh	r3, [r3, r2]
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	001a      	movs	r2, r3
 800e5b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	00db      	lsls	r3, r3, #3
 800e5bc:	18d2      	adds	r2, r2, r3
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	18d3      	adds	r3, r2, r3
 800e5c4:	4a87      	ldr	r2, [pc, #540]	@ (800e7e4 <PCD_EP_ISR_Handler+0x344>)
 800e5c6:	4694      	mov	ip, r2
 800e5c8:	4463      	add	r3, ip
 800e5ca:	881b      	ldrh	r3, [r3, #0]
 800e5cc:	059b      	lsls	r3, r3, #22
 800e5ce:	0d9a      	lsrs	r2, r3, #22
 800e5d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6818      	ldr	r0, [r3, #0]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	22ac      	movs	r2, #172	@ 0xac
 800e5dc:	0092      	lsls	r2, r2, #2
 800e5de:	1899      	adds	r1, r3, r2
 800e5e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5e2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800e5e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5e6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	f006 fafc 	bl	8014be6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	881b      	ldrh	r3, [r3, #0]
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	2010      	movs	r0, #16
 800e5f8:	183b      	adds	r3, r7, r0
 800e5fa:	497b      	ldr	r1, [pc, #492]	@ (800e7e8 <PCD_EP_ISR_Handler+0x348>)
 800e5fc:	400a      	ands	r2, r1
 800e5fe:	801a      	strh	r2, [r3, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	183a      	adds	r2, r7, r0
 800e606:	8812      	ldrh	r2, [r2, #0]
 800e608:	2180      	movs	r1, #128	@ 0x80
 800e60a:	430a      	orrs	r2, r1
 800e60c:	b292      	uxth	r2, r2
 800e60e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	0018      	movs	r0, r3
 800e614:	f008 faec 	bl	8016bf0 <HAL_PCD_SetupStageCallback>
 800e618:	e334      	b.n	800ec84 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e61a:	234a      	movs	r3, #74	@ 0x4a
 800e61c:	18fb      	adds	r3, r7, r3
 800e61e:	2200      	movs	r2, #0
 800e620:	5e9b      	ldrsh	r3, [r3, r2]
 800e622:	2b00      	cmp	r3, #0
 800e624:	db00      	blt.n	800e628 <PCD_EP_ISR_Handler+0x188>
 800e626:	e32d      	b.n	800ec84 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	881b      	ldrh	r3, [r3, #0]
 800e62e:	b29a      	uxth	r2, r3
 800e630:	201e      	movs	r0, #30
 800e632:	183b      	adds	r3, r7, r0
 800e634:	496c      	ldr	r1, [pc, #432]	@ (800e7e8 <PCD_EP_ISR_Handler+0x348>)
 800e636:	400a      	ands	r2, r1
 800e638:	801a      	strh	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	183a      	adds	r2, r7, r0
 800e640:	8812      	ldrh	r2, [r2, #0]
 800e642:	2180      	movs	r1, #128	@ 0x80
 800e644:	430a      	orrs	r2, r1
 800e646:	b292      	uxth	r2, r2
 800e648:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2250      	movs	r2, #80	@ 0x50
 800e650:	5a9b      	ldrh	r3, [r3, r2]
 800e652:	b29b      	uxth	r3, r3
 800e654:	001a      	movs	r2, r3
 800e656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	18d2      	adds	r2, r2, r3
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	18d3      	adds	r3, r2, r3
 800e664:	4a5f      	ldr	r2, [pc, #380]	@ (800e7e4 <PCD_EP_ISR_Handler+0x344>)
 800e666:	4694      	mov	ip, r2
 800e668:	4463      	add	r3, ip
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	059b      	lsls	r3, r3, #22
 800e66e:	0d9a      	lsrs	r2, r3, #22
 800e670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e672:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800e674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e676:	69db      	ldr	r3, [r3, #28]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d01a      	beq.n	800e6b2 <PCD_EP_ISR_Handler+0x212>
 800e67c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e67e:	695b      	ldr	r3, [r3, #20]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d016      	beq.n	800e6b2 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6818      	ldr	r0, [r3, #0]
 800e688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e68a:	6959      	ldr	r1, [r3, #20]
 800e68c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e68e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800e690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e692:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e694:	b29b      	uxth	r3, r3
 800e696:	f006 faa6 	bl	8014be6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800e69a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e69c:	695a      	ldr	r2, [r3, #20]
 800e69e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6a0:	69db      	ldr	r3, [r3, #28]
 800e6a2:	18d2      	adds	r2, r2, r3
 800e6a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	0018      	movs	r0, r3
 800e6ae:	f008 fab4 	bl	8016c1a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	214a      	movs	r1, #74	@ 0x4a
 800e6b8:	187b      	adds	r3, r7, r1
 800e6ba:	8812      	ldrh	r2, [r2, #0]
 800e6bc:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800e6be:	187b      	adds	r3, r7, r1
 800e6c0:	881a      	ldrh	r2, [r3, #0]
 800e6c2:	2380      	movs	r3, #128	@ 0x80
 800e6c4:	011b      	lsls	r3, r3, #4
 800e6c6:	4013      	ands	r3, r2
 800e6c8:	d000      	beq.n	800e6cc <PCD_EP_ISR_Handler+0x22c>
 800e6ca:	e2db      	b.n	800ec84 <PCD_EP_ISR_Handler+0x7e4>
 800e6cc:	187b      	adds	r3, r7, r1
 800e6ce:	881a      	ldrh	r2, [r3, #0]
 800e6d0:	23c0      	movs	r3, #192	@ 0xc0
 800e6d2:	019b      	lsls	r3, r3, #6
 800e6d4:	401a      	ands	r2, r3
 800e6d6:	23c0      	movs	r3, #192	@ 0xc0
 800e6d8:	019b      	lsls	r3, r3, #6
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d100      	bne.n	800e6e0 <PCD_EP_ISR_Handler+0x240>
 800e6de:	e2d1      	b.n	800ec84 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	61bb      	str	r3, [r7, #24]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2250      	movs	r2, #80	@ 0x50
 800e6ec:	5a9b      	ldrh	r3, [r3, r2]
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	001a      	movs	r2, r3
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	189b      	adds	r3, r3, r2
 800e6f6:	61bb      	str	r3, [r7, #24]
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	4a3a      	ldr	r2, [pc, #232]	@ (800e7e4 <PCD_EP_ISR_Handler+0x344>)
 800e6fc:	4694      	mov	ip, r2
 800e6fe:	4463      	add	r3, ip
 800e700:	617b      	str	r3, [r7, #20]
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	881b      	ldrh	r3, [r3, #0]
 800e706:	b29b      	uxth	r3, r3
 800e708:	059b      	lsls	r3, r3, #22
 800e70a:	0d9b      	lsrs	r3, r3, #22
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	801a      	strh	r2, [r3, #0]
 800e712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e714:	691b      	ldr	r3, [r3, #16]
 800e716:	2b3e      	cmp	r3, #62	@ 0x3e
 800e718:	d91a      	bls.n	800e750 <PCD_EP_ISR_Handler+0x2b0>
 800e71a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	095b      	lsrs	r3, r3, #5
 800e720:	647b      	str	r3, [r7, #68]	@ 0x44
 800e722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	221f      	movs	r2, #31
 800e728:	4013      	ands	r3, r2
 800e72a:	d102      	bne.n	800e732 <PCD_EP_ISR_Handler+0x292>
 800e72c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e72e:	3b01      	subs	r3, #1
 800e730:	647b      	str	r3, [r7, #68]	@ 0x44
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	881b      	ldrh	r3, [r3, #0]
 800e736:	b29a      	uxth	r2, r3
 800e738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	029b      	lsls	r3, r3, #10
 800e73e:	b29b      	uxth	r3, r3
 800e740:	4313      	orrs	r3, r2
 800e742:	b29b      	uxth	r3, r3
 800e744:	4a25      	ldr	r2, [pc, #148]	@ (800e7dc <PCD_EP_ISR_Handler+0x33c>)
 800e746:	4313      	orrs	r3, r2
 800e748:	b29a      	uxth	r2, r3
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	801a      	strh	r2, [r3, #0]
 800e74e:	e023      	b.n	800e798 <PCD_EP_ISR_Handler+0x2f8>
 800e750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d108      	bne.n	800e76a <PCD_EP_ISR_Handler+0x2ca>
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	881b      	ldrh	r3, [r3, #0]
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	4a1f      	ldr	r2, [pc, #124]	@ (800e7dc <PCD_EP_ISR_Handler+0x33c>)
 800e760:	4313      	orrs	r3, r2
 800e762:	b29a      	uxth	r2, r3
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	801a      	strh	r2, [r3, #0]
 800e768:	e016      	b.n	800e798 <PCD_EP_ISR_Handler+0x2f8>
 800e76a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e76c:	691b      	ldr	r3, [r3, #16]
 800e76e:	085b      	lsrs	r3, r3, #1
 800e770:	647b      	str	r3, [r7, #68]	@ 0x44
 800e772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e774:	691b      	ldr	r3, [r3, #16]
 800e776:	2201      	movs	r2, #1
 800e778:	4013      	ands	r3, r2
 800e77a:	d002      	beq.n	800e782 <PCD_EP_ISR_Handler+0x2e2>
 800e77c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e77e:	3301      	adds	r3, #1
 800e780:	647b      	str	r3, [r7, #68]	@ 0x44
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	881b      	ldrh	r3, [r3, #0]
 800e786:	b29a      	uxth	r2, r3
 800e788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	029b      	lsls	r3, r3, #10
 800e78e:	b29b      	uxth	r3, r3
 800e790:	4313      	orrs	r3, r2
 800e792:	b29a      	uxth	r2, r3
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	881b      	ldrh	r3, [r3, #0]
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	2012      	movs	r0, #18
 800e7a2:	183b      	adds	r3, r7, r0
 800e7a4:	4911      	ldr	r1, [pc, #68]	@ (800e7ec <PCD_EP_ISR_Handler+0x34c>)
 800e7a6:	400a      	ands	r2, r1
 800e7a8:	801a      	strh	r2, [r3, #0]
 800e7aa:	183b      	adds	r3, r7, r0
 800e7ac:	183a      	adds	r2, r7, r0
 800e7ae:	8812      	ldrh	r2, [r2, #0]
 800e7b0:	2180      	movs	r1, #128	@ 0x80
 800e7b2:	0149      	lsls	r1, r1, #5
 800e7b4:	404a      	eors	r2, r1
 800e7b6:	801a      	strh	r2, [r3, #0]
 800e7b8:	183b      	adds	r3, r7, r0
 800e7ba:	183a      	adds	r2, r7, r0
 800e7bc:	8812      	ldrh	r2, [r2, #0]
 800e7be:	2180      	movs	r1, #128	@ 0x80
 800e7c0:	0189      	lsls	r1, r1, #6
 800e7c2:	404a      	eors	r2, r1
 800e7c4:	801a      	strh	r2, [r3, #0]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	183a      	adds	r2, r7, r0
 800e7cc:	8812      	ldrh	r2, [r2, #0]
 800e7ce:	4908      	ldr	r1, [pc, #32]	@ (800e7f0 <PCD_EP_ISR_Handler+0x350>)
 800e7d0:	430a      	orrs	r2, r1
 800e7d2:	b292      	uxth	r2, r2
 800e7d4:	801a      	strh	r2, [r3, #0]
 800e7d6:	e255      	b.n	800ec84 <PCD_EP_ISR_Handler+0x7e4>
 800e7d8:	ffff8f0f 	.word	0xffff8f0f
 800e7dc:	ffff8000 	.word	0xffff8000
 800e7e0:	00000402 	.word	0x00000402
 800e7e4:	00000406 	.word	0x00000406
 800e7e8:	00000f8f 	.word	0x00000f8f
 800e7ec:	ffffbf8f 	.word	0xffffbf8f
 800e7f0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	001a      	movs	r2, r3
 800e7fa:	204d      	movs	r0, #77	@ 0x4d
 800e7fc:	183b      	adds	r3, r7, r0
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	18d2      	adds	r2, r2, r3
 800e804:	214a      	movs	r1, #74	@ 0x4a
 800e806:	187b      	adds	r3, r7, r1
 800e808:	8812      	ldrh	r2, [r2, #0]
 800e80a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e80c:	187b      	adds	r3, r7, r1
 800e80e:	2200      	movs	r2, #0
 800e810:	5e9b      	ldrsh	r3, [r3, r2]
 800e812:	2b00      	cmp	r3, #0
 800e814:	db00      	blt.n	800e818 <PCD_EP_ISR_Handler+0x378>
 800e816:	e0fa      	b.n	800ea0e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	001a      	movs	r2, r3
 800e81e:	183b      	adds	r3, r7, r0
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	18d3      	adds	r3, r2, r3
 800e826:	881b      	ldrh	r3, [r3, #0]
 800e828:	b29a      	uxth	r2, r3
 800e82a:	2448      	movs	r4, #72	@ 0x48
 800e82c:	193b      	adds	r3, r7, r4
 800e82e:	49d1      	ldr	r1, [pc, #836]	@ (800eb74 <PCD_EP_ISR_Handler+0x6d4>)
 800e830:	400a      	ands	r2, r1
 800e832:	801a      	strh	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	001a      	movs	r2, r3
 800e83a:	183b      	adds	r3, r7, r0
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	18d3      	adds	r3, r2, r3
 800e842:	193a      	adds	r2, r7, r4
 800e844:	8812      	ldrh	r2, [r2, #0]
 800e846:	2180      	movs	r1, #128	@ 0x80
 800e848:	430a      	orrs	r2, r1
 800e84a:	b292      	uxth	r2, r2
 800e84c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800e84e:	183b      	adds	r3, r7, r0
 800e850:	781a      	ldrb	r2, [r3, #0]
 800e852:	0013      	movs	r3, r2
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	189b      	adds	r3, r3, r2
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	3369      	adds	r3, #105	@ 0x69
 800e85c:	33ff      	adds	r3, #255	@ 0xff
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	18d3      	adds	r3, r2, r3
 800e862:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800e864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e866:	7b1b      	ldrb	r3, [r3, #12]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d125      	bne.n	800e8b8 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	2250      	movs	r2, #80	@ 0x50
 800e872:	5a9b      	ldrh	r3, [r3, r2]
 800e874:	b29b      	uxth	r3, r3
 800e876:	001a      	movs	r2, r3
 800e878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	00db      	lsls	r3, r3, #3
 800e87e:	18d2      	adds	r2, r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	18d3      	adds	r3, r2, r3
 800e886:	4abc      	ldr	r2, [pc, #752]	@ (800eb78 <PCD_EP_ISR_Handler+0x6d8>)
 800e888:	4694      	mov	ip, r2
 800e88a:	4463      	add	r3, ip
 800e88c:	881a      	ldrh	r2, [r3, #0]
 800e88e:	2450      	movs	r4, #80	@ 0x50
 800e890:	193b      	adds	r3, r7, r4
 800e892:	0592      	lsls	r2, r2, #22
 800e894:	0d92      	lsrs	r2, r2, #22
 800e896:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800e898:	193b      	adds	r3, r7, r4
 800e89a:	881b      	ldrh	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d100      	bne.n	800e8a2 <PCD_EP_ISR_Handler+0x402>
 800e8a0:	e08d      	b.n	800e9be <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6818      	ldr	r0, [r3, #0]
 800e8a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8a8:	6959      	ldr	r1, [r3, #20]
 800e8aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8ac:	88da      	ldrh	r2, [r3, #6]
 800e8ae:	193b      	adds	r3, r7, r4
 800e8b0:	881b      	ldrh	r3, [r3, #0]
 800e8b2:	f006 f998 	bl	8014be6 <USB_ReadPMA>
 800e8b6:	e082      	b.n	800e9be <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800e8b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8ba:	78db      	ldrb	r3, [r3, #3]
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d10c      	bne.n	800e8da <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800e8c0:	2350      	movs	r3, #80	@ 0x50
 800e8c2:	18fc      	adds	r4, r7, r3
 800e8c4:	234a      	movs	r3, #74	@ 0x4a
 800e8c6:	18fb      	adds	r3, r7, r3
 800e8c8:	881a      	ldrh	r2, [r3, #0]
 800e8ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	0018      	movs	r0, r3
 800e8d0:	f000 f9ec 	bl	800ecac <HAL_PCD_EP_DB_Receive>
 800e8d4:	0003      	movs	r3, r0
 800e8d6:	8023      	strh	r3, [r4, #0]
 800e8d8:	e071      	b.n	800e9be <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	001a      	movs	r2, r3
 800e8e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	18d3      	adds	r3, r2, r3
 800e8e8:	881b      	ldrh	r3, [r3, #0]
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	2052      	movs	r0, #82	@ 0x52
 800e8ee:	183b      	adds	r3, r7, r0
 800e8f0:	49a2      	ldr	r1, [pc, #648]	@ (800eb7c <PCD_EP_ISR_Handler+0x6dc>)
 800e8f2:	400a      	ands	r2, r1
 800e8f4:	801a      	strh	r2, [r3, #0]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	001a      	movs	r2, r3
 800e8fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	18d3      	adds	r3, r2, r3
 800e904:	183a      	adds	r2, r7, r0
 800e906:	8812      	ldrh	r2, [r2, #0]
 800e908:	499d      	ldr	r1, [pc, #628]	@ (800eb80 <PCD_EP_ISR_Handler+0x6e0>)
 800e90a:	430a      	orrs	r2, r1
 800e90c:	b292      	uxth	r2, r2
 800e90e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	001a      	movs	r2, r3
 800e916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	18d3      	adds	r3, r2, r3
 800e91e:	881b      	ldrh	r3, [r3, #0]
 800e920:	b29b      	uxth	r3, r3
 800e922:	001a      	movs	r2, r3
 800e924:	2380      	movs	r3, #128	@ 0x80
 800e926:	01db      	lsls	r3, r3, #7
 800e928:	4013      	ands	r3, r2
 800e92a:	d024      	beq.n	800e976 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2250      	movs	r2, #80	@ 0x50
 800e932:	5a9b      	ldrh	r3, [r3, r2]
 800e934:	b29b      	uxth	r3, r3
 800e936:	001a      	movs	r2, r3
 800e938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	00db      	lsls	r3, r3, #3
 800e93e:	18d2      	adds	r2, r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	18d3      	adds	r3, r2, r3
 800e946:	4a8f      	ldr	r2, [pc, #572]	@ (800eb84 <PCD_EP_ISR_Handler+0x6e4>)
 800e948:	4694      	mov	ip, r2
 800e94a:	4463      	add	r3, ip
 800e94c:	881a      	ldrh	r2, [r3, #0]
 800e94e:	2450      	movs	r4, #80	@ 0x50
 800e950:	193b      	adds	r3, r7, r4
 800e952:	0592      	lsls	r2, r2, #22
 800e954:	0d92      	lsrs	r2, r2, #22
 800e956:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800e958:	193b      	adds	r3, r7, r4
 800e95a:	881b      	ldrh	r3, [r3, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d02e      	beq.n	800e9be <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6818      	ldr	r0, [r3, #0]
 800e964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e966:	6959      	ldr	r1, [r3, #20]
 800e968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e96a:	891a      	ldrh	r2, [r3, #8]
 800e96c:	193b      	adds	r3, r7, r4
 800e96e:	881b      	ldrh	r3, [r3, #0]
 800e970:	f006 f939 	bl	8014be6 <USB_ReadPMA>
 800e974:	e023      	b.n	800e9be <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2250      	movs	r2, #80	@ 0x50
 800e97c:	5a9b      	ldrh	r3, [r3, r2]
 800e97e:	b29b      	uxth	r3, r3
 800e980:	001a      	movs	r2, r3
 800e982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	00db      	lsls	r3, r3, #3
 800e988:	18d2      	adds	r2, r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	18d3      	adds	r3, r2, r3
 800e990:	4a79      	ldr	r2, [pc, #484]	@ (800eb78 <PCD_EP_ISR_Handler+0x6d8>)
 800e992:	4694      	mov	ip, r2
 800e994:	4463      	add	r3, ip
 800e996:	881a      	ldrh	r2, [r3, #0]
 800e998:	2450      	movs	r4, #80	@ 0x50
 800e99a:	193b      	adds	r3, r7, r4
 800e99c:	0592      	lsls	r2, r2, #22
 800e99e:	0d92      	lsrs	r2, r2, #22
 800e9a0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800e9a2:	193b      	adds	r3, r7, r4
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d009      	beq.n	800e9be <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6818      	ldr	r0, [r3, #0]
 800e9ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9b0:	6959      	ldr	r1, [r3, #20]
 800e9b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9b4:	895a      	ldrh	r2, [r3, #10]
 800e9b6:	193b      	adds	r3, r7, r4
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	f006 f914 	bl	8014be6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800e9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9c0:	69da      	ldr	r2, [r3, #28]
 800e9c2:	2150      	movs	r1, #80	@ 0x50
 800e9c4:	187b      	adds	r3, r7, r1
 800e9c6:	881b      	ldrh	r3, [r3, #0]
 800e9c8:	18d2      	adds	r2, r2, r3
 800e9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800e9ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9d0:	695a      	ldr	r2, [r3, #20]
 800e9d2:	187b      	adds	r3, r7, r1
 800e9d4:	881b      	ldrh	r3, [r3, #0]
 800e9d6:	18d2      	adds	r2, r2, r3
 800e9d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800e9dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d005      	beq.n	800e9f0 <PCD_EP_ISR_Handler+0x550>
 800e9e4:	187b      	adds	r3, r7, r1
 800e9e6:	881a      	ldrh	r2, [r3, #0]
 800e9e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9ea:	691b      	ldr	r3, [r3, #16]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d207      	bcs.n	800ea00 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800e9f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9f2:	781a      	ldrb	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	0011      	movs	r1, r2
 800e9f8:	0018      	movs	r0, r3
 800e9fa:	f008 f90e 	bl	8016c1a <HAL_PCD_DataOutStageCallback>
 800e9fe:	e006      	b.n	800ea0e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea06:	0011      	movs	r1, r2
 800ea08:	0018      	movs	r0, r3
 800ea0a:	f004 fe31 	bl	8013670 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ea0e:	244a      	movs	r4, #74	@ 0x4a
 800ea10:	193b      	adds	r3, r7, r4
 800ea12:	881b      	ldrh	r3, [r3, #0]
 800ea14:	2280      	movs	r2, #128	@ 0x80
 800ea16:	4013      	ands	r3, r2
 800ea18:	d100      	bne.n	800ea1c <PCD_EP_ISR_Handler+0x57c>
 800ea1a:	e133      	b.n	800ec84 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800ea1c:	204d      	movs	r0, #77	@ 0x4d
 800ea1e:	183b      	adds	r3, r7, r0
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	1c5a      	adds	r2, r3, #1
 800ea24:	0013      	movs	r3, r2
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	189b      	adds	r3, r3, r2
 800ea2a:	00db      	lsls	r3, r3, #3
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	18d3      	adds	r3, r2, r3
 800ea30:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	001a      	movs	r2, r3
 800ea38:	183b      	adds	r3, r7, r0
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	18d3      	adds	r3, r2, r3
 800ea40:	881b      	ldrh	r3, [r3, #0]
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	2542      	movs	r5, #66	@ 0x42
 800ea46:	197b      	adds	r3, r7, r5
 800ea48:	494f      	ldr	r1, [pc, #316]	@ (800eb88 <PCD_EP_ISR_Handler+0x6e8>)
 800ea4a:	400a      	ands	r2, r1
 800ea4c:	801a      	strh	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	001a      	movs	r2, r3
 800ea54:	183b      	adds	r3, r7, r0
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	18d3      	adds	r3, r2, r3
 800ea5c:	197a      	adds	r2, r7, r5
 800ea5e:	8812      	ldrh	r2, [r2, #0]
 800ea60:	494a      	ldr	r1, [pc, #296]	@ (800eb8c <PCD_EP_ISR_Handler+0x6ec>)
 800ea62:	430a      	orrs	r2, r1
 800ea64:	b292      	uxth	r2, r2
 800ea66:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ea68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea6a:	78db      	ldrb	r3, [r3, #3]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d000      	beq.n	800ea72 <PCD_EP_ISR_Handler+0x5d2>
 800ea70:	e0af      	b.n	800ebd2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800ea72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea74:	2200      	movs	r2, #0
 800ea76:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ea78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea7a:	7b1b      	ldrb	r3, [r3, #12]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d100      	bne.n	800ea82 <PCD_EP_ISR_Handler+0x5e2>
 800ea80:	e09f      	b.n	800ebc2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ea82:	193b      	adds	r3, r7, r4
 800ea84:	881b      	ldrh	r3, [r3, #0]
 800ea86:	2240      	movs	r2, #64	@ 0x40
 800ea88:	4013      	ands	r3, r2
 800ea8a:	d046      	beq.n	800eb1a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ea8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea8e:	785b      	ldrb	r3, [r3, #1]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d125      	bne.n	800eae0 <PCD_EP_ISR_Handler+0x640>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	2250      	movs	r2, #80	@ 0x50
 800eaa0:	5a9b      	ldrh	r3, [r3, r2]
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	001a      	movs	r2, r3
 800eaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa8:	189b      	adds	r3, r3, r2
 800eaaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	00da      	lsls	r2, r3, #3
 800eab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab4:	18d3      	adds	r3, r2, r3
 800eab6:	4a33      	ldr	r2, [pc, #204]	@ (800eb84 <PCD_EP_ISR_Handler+0x6e4>)
 800eab8:	4694      	mov	ip, r2
 800eaba:	4463      	add	r3, ip
 800eabc:	623b      	str	r3, [r7, #32]
 800eabe:	6a3b      	ldr	r3, [r7, #32]
 800eac0:	881b      	ldrh	r3, [r3, #0]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	059b      	lsls	r3, r3, #22
 800eac6:	0d9b      	lsrs	r3, r3, #22
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	801a      	strh	r2, [r3, #0]
 800eace:	6a3b      	ldr	r3, [r7, #32]
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	4a2d      	ldr	r2, [pc, #180]	@ (800eb8c <PCD_EP_ISR_Handler+0x6ec>)
 800ead6:	4313      	orrs	r3, r2
 800ead8:	b29a      	uxth	r2, r3
 800eada:	6a3b      	ldr	r3, [r7, #32]
 800eadc:	801a      	strh	r2, [r3, #0]
 800eade:	e070      	b.n	800ebc2 <PCD_EP_ISR_Handler+0x722>
 800eae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eae2:	785b      	ldrb	r3, [r3, #1]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d16c      	bne.n	800ebc2 <PCD_EP_ISR_Handler+0x722>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2250      	movs	r2, #80	@ 0x50
 800eaf4:	5a9b      	ldrh	r3, [r3, r2]
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	001a      	movs	r2, r3
 800eafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafc:	189b      	adds	r3, r3, r2
 800eafe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	00da      	lsls	r2, r3, #3
 800eb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb08:	18d3      	adds	r3, r2, r3
 800eb0a:	4a1e      	ldr	r2, [pc, #120]	@ (800eb84 <PCD_EP_ISR_Handler+0x6e4>)
 800eb0c:	4694      	mov	ip, r2
 800eb0e:	4463      	add	r3, ip
 800eb10:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb14:	2200      	movs	r2, #0
 800eb16:	801a      	strh	r2, [r3, #0]
 800eb18:	e053      	b.n	800ebc2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb22:	785b      	ldrb	r3, [r3, #1]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d133      	bne.n	800eb90 <PCD_EP_ISR_Handler+0x6f0>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2250      	movs	r2, #80	@ 0x50
 800eb34:	5a9b      	ldrh	r3, [r3, r2]
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	001a      	movs	r2, r3
 800eb3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb3c:	189b      	adds	r3, r3, r2
 800eb3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	00da      	lsls	r2, r3, #3
 800eb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb48:	18d3      	adds	r3, r2, r3
 800eb4a:	4a0b      	ldr	r2, [pc, #44]	@ (800eb78 <PCD_EP_ISR_Handler+0x6d8>)
 800eb4c:	4694      	mov	ip, r2
 800eb4e:	4463      	add	r3, ip
 800eb50:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	881b      	ldrh	r3, [r3, #0]
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	059b      	lsls	r3, r3, #22
 800eb5a:	0d9b      	lsrs	r3, r3, #22
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb60:	801a      	strh	r2, [r3, #0]
 800eb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb64:	881b      	ldrh	r3, [r3, #0]
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	4a08      	ldr	r2, [pc, #32]	@ (800eb8c <PCD_EP_ISR_Handler+0x6ec>)
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb70:	801a      	strh	r2, [r3, #0]
 800eb72:	e026      	b.n	800ebc2 <PCD_EP_ISR_Handler+0x722>
 800eb74:	00000f8f 	.word	0x00000f8f
 800eb78:	00000406 	.word	0x00000406
 800eb7c:	ffff8f8f 	.word	0xffff8f8f
 800eb80:	ffff80c0 	.word	0xffff80c0
 800eb84:	00000402 	.word	0x00000402
 800eb88:	ffff8f0f 	.word	0xffff8f0f
 800eb8c:	ffff8000 	.word	0xffff8000
 800eb90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb92:	785b      	ldrb	r3, [r3, #1]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d114      	bne.n	800ebc2 <PCD_EP_ISR_Handler+0x722>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2250      	movs	r2, #80	@ 0x50
 800eb9e:	5a9b      	ldrh	r3, [r3, r2]
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	001a      	movs	r2, r3
 800eba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eba6:	189b      	adds	r3, r3, r2
 800eba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	00da      	lsls	r2, r3, #3
 800ebb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebb2:	18d3      	adds	r3, r2, r3
 800ebb4:	4a3b      	ldr	r2, [pc, #236]	@ (800eca4 <PCD_EP_ISR_Handler+0x804>)
 800ebb6:	4694      	mov	ip, r2
 800ebb8:	4463      	add	r3, ip
 800ebba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ebbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ebc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebc4:	781a      	ldrb	r2, [r3, #0]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	0011      	movs	r1, r2
 800ebca:	0018      	movs	r0, r3
 800ebcc:	f008 f846 	bl	8016c5c <HAL_PCD_DataInStageCallback>
 800ebd0:	e058      	b.n	800ec84 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ebd2:	234a      	movs	r3, #74	@ 0x4a
 800ebd4:	18fb      	adds	r3, r7, r3
 800ebd6:	881a      	ldrh	r2, [r3, #0]
 800ebd8:	2380      	movs	r3, #128	@ 0x80
 800ebda:	005b      	lsls	r3, r3, #1
 800ebdc:	4013      	ands	r3, r2
 800ebde:	d149      	bne.n	800ec74 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2250      	movs	r2, #80	@ 0x50
 800ebe6:	5a9b      	ldrh	r3, [r3, r2]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	001a      	movs	r2, r3
 800ebec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	00db      	lsls	r3, r3, #3
 800ebf2:	18d2      	adds	r2, r2, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	18d3      	adds	r3, r2, r3
 800ebfa:	4a2b      	ldr	r2, [pc, #172]	@ (800eca8 <PCD_EP_ISR_Handler+0x808>)
 800ebfc:	4694      	mov	ip, r2
 800ebfe:	4463      	add	r3, ip
 800ec00:	881a      	ldrh	r2, [r3, #0]
 800ec02:	2140      	movs	r1, #64	@ 0x40
 800ec04:	187b      	adds	r3, r7, r1
 800ec06:	0592      	lsls	r2, r2, #22
 800ec08:	0d92      	lsrs	r2, r2, #22
 800ec0a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800ec0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec0e:	699a      	ldr	r2, [r3, #24]
 800ec10:	187b      	adds	r3, r7, r1
 800ec12:	881b      	ldrh	r3, [r3, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d907      	bls.n	800ec28 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800ec18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec1a:	699a      	ldr	r2, [r3, #24]
 800ec1c:	187b      	adds	r3, r7, r1
 800ec1e:	881b      	ldrh	r3, [r3, #0]
 800ec20:	1ad2      	subs	r2, r2, r3
 800ec22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec24:	619a      	str	r2, [r3, #24]
 800ec26:	e002      	b.n	800ec2e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800ec28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ec2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec30:	699b      	ldr	r3, [r3, #24]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d107      	bne.n	800ec46 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ec36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec38:	781a      	ldrb	r2, [r3, #0]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	0011      	movs	r1, r2
 800ec3e:	0018      	movs	r0, r3
 800ec40:	f008 f80c 	bl	8016c5c <HAL_PCD_DataInStageCallback>
 800ec44:	e01e      	b.n	800ec84 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ec46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec48:	695a      	ldr	r2, [r3, #20]
 800ec4a:	2140      	movs	r1, #64	@ 0x40
 800ec4c:	187b      	adds	r3, r7, r1
 800ec4e:	881b      	ldrh	r3, [r3, #0]
 800ec50:	18d2      	adds	r2, r2, r3
 800ec52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec54:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800ec56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec58:	69da      	ldr	r2, [r3, #28]
 800ec5a:	187b      	adds	r3, r7, r1
 800ec5c:	881b      	ldrh	r3, [r3, #0]
 800ec5e:	18d2      	adds	r2, r2, r3
 800ec60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec62:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec6a:	0011      	movs	r1, r2
 800ec6c:	0018      	movs	r0, r3
 800ec6e:	f004 fcff 	bl	8013670 <USB_EPStartXfer>
 800ec72:	e007      	b.n	800ec84 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ec74:	234a      	movs	r3, #74	@ 0x4a
 800ec76:	18fb      	adds	r3, r7, r3
 800ec78:	881a      	ldrh	r2, [r3, #0]
 800ec7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	0018      	movs	r0, r3
 800ec80:	f000 f930 	bl	800eee4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2244      	movs	r2, #68	@ 0x44
 800ec8a:	5a9b      	ldrh	r3, [r3, r2]
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	b21b      	sxth	r3, r3
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	da01      	bge.n	800ec98 <PCD_EP_ISR_Handler+0x7f8>
 800ec94:	f7ff fc0a 	bl	800e4ac <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	0018      	movs	r0, r3
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	b016      	add	sp, #88	@ 0x58
 800eca0:	bdb0      	pop	{r4, r5, r7, pc}
 800eca2:	46c0      	nop			@ (mov r8, r8)
 800eca4:	00000406 	.word	0x00000406
 800eca8:	00000402 	.word	0x00000402

0800ecac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ecac:	b590      	push	{r4, r7, lr}
 800ecae:	b089      	sub	sp, #36	@ 0x24
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	1dbb      	adds	r3, r7, #6
 800ecb8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ecba:	1dbb      	adds	r3, r7, #6
 800ecbc:	881a      	ldrh	r2, [r3, #0]
 800ecbe:	2380      	movs	r3, #128	@ 0x80
 800ecc0:	01db      	lsls	r3, r3, #7
 800ecc2:	4013      	ands	r3, r2
 800ecc4:	d100      	bne.n	800ecc8 <HAL_PCD_EP_DB_Receive+0x1c>
 800ecc6:	e07d      	b.n	800edc4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2250      	movs	r2, #80	@ 0x50
 800ecce:	5a9b      	ldrh	r3, [r3, r2]
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	001a      	movs	r2, r3
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	00db      	lsls	r3, r3, #3
 800ecda:	18d2      	adds	r2, r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	18d3      	adds	r3, r2, r3
 800ece2:	4a7a      	ldr	r2, [pc, #488]	@ (800eecc <HAL_PCD_EP_DB_Receive+0x220>)
 800ece4:	4694      	mov	ip, r2
 800ece6:	4463      	add	r3, ip
 800ece8:	881a      	ldrh	r2, [r3, #0]
 800ecea:	211a      	movs	r1, #26
 800ecec:	187b      	adds	r3, r7, r1
 800ecee:	0592      	lsls	r2, r2, #22
 800ecf0:	0d92      	lsrs	r2, r2, #22
 800ecf2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	699a      	ldr	r2, [r3, #24]
 800ecf8:	187b      	adds	r3, r7, r1
 800ecfa:	881b      	ldrh	r3, [r3, #0]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d307      	bcc.n	800ed10 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	699a      	ldr	r2, [r3, #24]
 800ed04:	187b      	adds	r3, r7, r1
 800ed06:	881b      	ldrh	r3, [r3, #0]
 800ed08:	1ad2      	subs	r2, r2, r3
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	619a      	str	r2, [r3, #24]
 800ed0e:	e002      	b.n	800ed16 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	2200      	movs	r2, #0
 800ed14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	699b      	ldr	r3, [r3, #24]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d121      	bne.n	800ed62 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	001a      	movs	r2, r3
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	18d3      	adds	r3, r2, r3
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	2018      	movs	r0, #24
 800ed32:	183b      	adds	r3, r7, r0
 800ed34:	4966      	ldr	r1, [pc, #408]	@ (800eed0 <HAL_PCD_EP_DB_Receive+0x224>)
 800ed36:	400a      	ands	r2, r1
 800ed38:	801a      	strh	r2, [r3, #0]
 800ed3a:	183b      	adds	r3, r7, r0
 800ed3c:	183a      	adds	r2, r7, r0
 800ed3e:	8812      	ldrh	r2, [r2, #0]
 800ed40:	2180      	movs	r1, #128	@ 0x80
 800ed42:	0189      	lsls	r1, r1, #6
 800ed44:	404a      	eors	r2, r1
 800ed46:	801a      	strh	r2, [r3, #0]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	001a      	movs	r2, r3
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	18d3      	adds	r3, r2, r3
 800ed56:	183a      	adds	r2, r7, r0
 800ed58:	8812      	ldrh	r2, [r2, #0]
 800ed5a:	495e      	ldr	r1, [pc, #376]	@ (800eed4 <HAL_PCD_EP_DB_Receive+0x228>)
 800ed5c:	430a      	orrs	r2, r1
 800ed5e:	b292      	uxth	r2, r2
 800ed60:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ed62:	1dbb      	adds	r3, r7, #6
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	2240      	movs	r2, #64	@ 0x40
 800ed68:	4013      	ands	r3, r2
 800ed6a:	d01a      	beq.n	800eda2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	001a      	movs	r2, r3
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	18d3      	adds	r3, r2, r3
 800ed7a:	881b      	ldrh	r3, [r3, #0]
 800ed7c:	b29a      	uxth	r2, r3
 800ed7e:	2016      	movs	r0, #22
 800ed80:	183b      	adds	r3, r7, r0
 800ed82:	4955      	ldr	r1, [pc, #340]	@ (800eed8 <HAL_PCD_EP_DB_Receive+0x22c>)
 800ed84:	400a      	ands	r2, r1
 800ed86:	801a      	strh	r2, [r3, #0]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	001a      	movs	r2, r3
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	18d3      	adds	r3, r2, r3
 800ed96:	183a      	adds	r2, r7, r0
 800ed98:	8812      	ldrh	r2, [r2, #0]
 800ed9a:	4950      	ldr	r1, [pc, #320]	@ (800eedc <HAL_PCD_EP_DB_Receive+0x230>)
 800ed9c:	430a      	orrs	r2, r1
 800ed9e:	b292      	uxth	r2, r2
 800eda0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800eda2:	241a      	movs	r4, #26
 800eda4:	193b      	adds	r3, r7, r4
 800eda6:	881b      	ldrh	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d100      	bne.n	800edae <HAL_PCD_EP_DB_Receive+0x102>
 800edac:	e086      	b.n	800eebc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6818      	ldr	r0, [r3, #0]
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	6959      	ldr	r1, [r3, #20]
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	891a      	ldrh	r2, [r3, #8]
 800edba:	193b      	adds	r3, r7, r4
 800edbc:	881b      	ldrh	r3, [r3, #0]
 800edbe:	f005 ff12 	bl	8014be6 <USB_ReadPMA>
 800edc2:	e07b      	b.n	800eebc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2250      	movs	r2, #80	@ 0x50
 800edca:	5a9b      	ldrh	r3, [r3, r2]
 800edcc:	b29b      	uxth	r3, r3
 800edce:	001a      	movs	r2, r3
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	00db      	lsls	r3, r3, #3
 800edd6:	18d2      	adds	r2, r2, r3
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	18d3      	adds	r3, r2, r3
 800edde:	4a40      	ldr	r2, [pc, #256]	@ (800eee0 <HAL_PCD_EP_DB_Receive+0x234>)
 800ede0:	4694      	mov	ip, r2
 800ede2:	4463      	add	r3, ip
 800ede4:	881a      	ldrh	r2, [r3, #0]
 800ede6:	211a      	movs	r1, #26
 800ede8:	187b      	adds	r3, r7, r1
 800edea:	0592      	lsls	r2, r2, #22
 800edec:	0d92      	lsrs	r2, r2, #22
 800edee:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	699a      	ldr	r2, [r3, #24]
 800edf4:	187b      	adds	r3, r7, r1
 800edf6:	881b      	ldrh	r3, [r3, #0]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d307      	bcc.n	800ee0c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	699a      	ldr	r2, [r3, #24]
 800ee00:	187b      	adds	r3, r7, r1
 800ee02:	881b      	ldrh	r3, [r3, #0]
 800ee04:	1ad2      	subs	r2, r2, r3
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	619a      	str	r2, [r3, #24]
 800ee0a:	e002      	b.n	800ee12 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d121      	bne.n	800ee5e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	001a      	movs	r2, r3
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	18d3      	adds	r3, r2, r3
 800ee28:	881b      	ldrh	r3, [r3, #0]
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	201e      	movs	r0, #30
 800ee2e:	183b      	adds	r3, r7, r0
 800ee30:	4927      	ldr	r1, [pc, #156]	@ (800eed0 <HAL_PCD_EP_DB_Receive+0x224>)
 800ee32:	400a      	ands	r2, r1
 800ee34:	801a      	strh	r2, [r3, #0]
 800ee36:	183b      	adds	r3, r7, r0
 800ee38:	183a      	adds	r2, r7, r0
 800ee3a:	8812      	ldrh	r2, [r2, #0]
 800ee3c:	2180      	movs	r1, #128	@ 0x80
 800ee3e:	0189      	lsls	r1, r1, #6
 800ee40:	404a      	eors	r2, r1
 800ee42:	801a      	strh	r2, [r3, #0]
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	001a      	movs	r2, r3
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	009b      	lsls	r3, r3, #2
 800ee50:	18d3      	adds	r3, r2, r3
 800ee52:	183a      	adds	r2, r7, r0
 800ee54:	8812      	ldrh	r2, [r2, #0]
 800ee56:	491f      	ldr	r1, [pc, #124]	@ (800eed4 <HAL_PCD_EP_DB_Receive+0x228>)
 800ee58:	430a      	orrs	r2, r1
 800ee5a:	b292      	uxth	r2, r2
 800ee5c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ee5e:	1dbb      	adds	r3, r7, #6
 800ee60:	881b      	ldrh	r3, [r3, #0]
 800ee62:	2240      	movs	r2, #64	@ 0x40
 800ee64:	4013      	ands	r3, r2
 800ee66:	d11a      	bne.n	800ee9e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	001a      	movs	r2, r3
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	18d3      	adds	r3, r2, r3
 800ee76:	881b      	ldrh	r3, [r3, #0]
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	201c      	movs	r0, #28
 800ee7c:	183b      	adds	r3, r7, r0
 800ee7e:	4916      	ldr	r1, [pc, #88]	@ (800eed8 <HAL_PCD_EP_DB_Receive+0x22c>)
 800ee80:	400a      	ands	r2, r1
 800ee82:	801a      	strh	r2, [r3, #0]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	001a      	movs	r2, r3
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	009b      	lsls	r3, r3, #2
 800ee90:	18d3      	adds	r3, r2, r3
 800ee92:	183a      	adds	r2, r7, r0
 800ee94:	8812      	ldrh	r2, [r2, #0]
 800ee96:	4911      	ldr	r1, [pc, #68]	@ (800eedc <HAL_PCD_EP_DB_Receive+0x230>)
 800ee98:	430a      	orrs	r2, r1
 800ee9a:	b292      	uxth	r2, r2
 800ee9c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800ee9e:	241a      	movs	r4, #26
 800eea0:	193b      	adds	r3, r7, r4
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d009      	beq.n	800eebc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6818      	ldr	r0, [r3, #0]
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	6959      	ldr	r1, [r3, #20]
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	895a      	ldrh	r2, [r3, #10]
 800eeb4:	193b      	adds	r3, r7, r4
 800eeb6:	881b      	ldrh	r3, [r3, #0]
 800eeb8:	f005 fe95 	bl	8014be6 <USB_ReadPMA>
    }
  }

  return count;
 800eebc:	231a      	movs	r3, #26
 800eebe:	18fb      	adds	r3, r7, r3
 800eec0:	881b      	ldrh	r3, [r3, #0]
}
 800eec2:	0018      	movs	r0, r3
 800eec4:	46bd      	mov	sp, r7
 800eec6:	b009      	add	sp, #36	@ 0x24
 800eec8:	bd90      	pop	{r4, r7, pc}
 800eeca:	46c0      	nop			@ (mov r8, r8)
 800eecc:	00000402 	.word	0x00000402
 800eed0:	ffffbf8f 	.word	0xffffbf8f
 800eed4:	ffff8080 	.word	0xffff8080
 800eed8:	ffff8f8f 	.word	0xffff8f8f
 800eedc:	ffff80c0 	.word	0xffff80c0
 800eee0:	00000406 	.word	0x00000406

0800eee4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b0a4      	sub	sp, #144	@ 0x90
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	1dbb      	adds	r3, r7, #6
 800eef0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800eef2:	1dbb      	adds	r3, r7, #6
 800eef4:	881b      	ldrh	r3, [r3, #0]
 800eef6:	2240      	movs	r2, #64	@ 0x40
 800eef8:	4013      	ands	r3, r2
 800eefa:	d100      	bne.n	800eefe <HAL_PCD_EP_DB_Transmit+0x1a>
 800eefc:	e1e4      	b.n	800f2c8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2250      	movs	r2, #80	@ 0x50
 800ef04:	5a9b      	ldrh	r3, [r3, r2]
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	001a      	movs	r2, r3
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	00db      	lsls	r3, r3, #3
 800ef10:	18d2      	adds	r2, r2, r3
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	18d3      	adds	r3, r2, r3
 800ef18:	4ad0      	ldr	r2, [pc, #832]	@ (800f25c <HAL_PCD_EP_DB_Transmit+0x378>)
 800ef1a:	4694      	mov	ip, r2
 800ef1c:	4463      	add	r3, ip
 800ef1e:	881a      	ldrh	r2, [r3, #0]
 800ef20:	2186      	movs	r1, #134	@ 0x86
 800ef22:	187b      	adds	r3, r7, r1
 800ef24:	0592      	lsls	r2, r2, #22
 800ef26:	0d92      	lsrs	r2, r2, #22
 800ef28:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	699a      	ldr	r2, [r3, #24]
 800ef2e:	187b      	adds	r3, r7, r1
 800ef30:	881b      	ldrh	r3, [r3, #0]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d907      	bls.n	800ef46 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	699a      	ldr	r2, [r3, #24]
 800ef3a:	187b      	adds	r3, r7, r1
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	1ad2      	subs	r2, r2, r3
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	619a      	str	r2, [r3, #24]
 800ef44:	e002      	b.n	800ef4c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	699b      	ldr	r3, [r3, #24]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d000      	beq.n	800ef56 <HAL_PCD_EP_DB_Transmit+0x72>
 800ef54:	e0b5      	b.n	800f0c2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	785b      	ldrb	r3, [r3, #1]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d125      	bne.n	800efaa <HAL_PCD_EP_DB_Transmit+0xc6>
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2250      	movs	r2, #80	@ 0x50
 800ef6a:	5a9b      	ldrh	r3, [r3, r2]
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	001a      	movs	r2, r3
 800ef70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef72:	189b      	adds	r3, r3, r2
 800ef74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	00da      	lsls	r2, r3, #3
 800ef7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7e:	18d3      	adds	r3, r2, r3
 800ef80:	4ab6      	ldr	r2, [pc, #728]	@ (800f25c <HAL_PCD_EP_DB_Transmit+0x378>)
 800ef82:	4694      	mov	ip, r2
 800ef84:	4463      	add	r3, ip
 800ef86:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef8a:	881b      	ldrh	r3, [r3, #0]
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	059b      	lsls	r3, r3, #22
 800ef90:	0d9b      	lsrs	r3, r3, #22
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef96:	801a      	strh	r2, [r3, #0]
 800ef98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef9a:	881b      	ldrh	r3, [r3, #0]
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	4ab0      	ldr	r2, [pc, #704]	@ (800f260 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800efa0:	4313      	orrs	r3, r2
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa6:	801a      	strh	r2, [r3, #0]
 800efa8:	e01b      	b.n	800efe2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	785b      	ldrb	r3, [r3, #1]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d117      	bne.n	800efe2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2250      	movs	r2, #80	@ 0x50
 800efbe:	5a9b      	ldrh	r3, [r3, r2]
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	001a      	movs	r2, r3
 800efc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efc6:	189b      	adds	r3, r3, r2
 800efc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	00da      	lsls	r2, r3, #3
 800efd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efd2:	18d3      	adds	r3, r2, r3
 800efd4:	4aa1      	ldr	r2, [pc, #644]	@ (800f25c <HAL_PCD_EP_DB_Transmit+0x378>)
 800efd6:	4694      	mov	ip, r2
 800efd8:	4463      	add	r3, ip
 800efda:	633b      	str	r3, [r7, #48]	@ 0x30
 800efdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efde:	2200      	movs	r2, #0
 800efe0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	785b      	ldrb	r3, [r3, #1]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d125      	bne.n	800f03c <HAL_PCD_EP_DB_Transmit+0x158>
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	61fb      	str	r3, [r7, #28]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2250      	movs	r2, #80	@ 0x50
 800effc:	5a9b      	ldrh	r3, [r3, r2]
 800effe:	b29b      	uxth	r3, r3
 800f000:	001a      	movs	r2, r3
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	189b      	adds	r3, r3, r2
 800f006:	61fb      	str	r3, [r7, #28]
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	00da      	lsls	r2, r3, #3
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	18d3      	adds	r3, r2, r3
 800f012:	4a94      	ldr	r2, [pc, #592]	@ (800f264 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f014:	4694      	mov	ip, r2
 800f016:	4463      	add	r3, ip
 800f018:	61bb      	str	r3, [r7, #24]
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	881b      	ldrh	r3, [r3, #0]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	059b      	lsls	r3, r3, #22
 800f022:	0d9b      	lsrs	r3, r3, #22
 800f024:	b29a      	uxth	r2, r3
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	801a      	strh	r2, [r3, #0]
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	881b      	ldrh	r3, [r3, #0]
 800f02e:	b29b      	uxth	r3, r3
 800f030:	4a8b      	ldr	r2, [pc, #556]	@ (800f260 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f032:	4313      	orrs	r3, r2
 800f034:	b29a      	uxth	r2, r3
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	801a      	strh	r2, [r3, #0]
 800f03a:	e018      	b.n	800f06e <HAL_PCD_EP_DB_Transmit+0x18a>
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	785b      	ldrb	r3, [r3, #1]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d114      	bne.n	800f06e <HAL_PCD_EP_DB_Transmit+0x18a>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2250      	movs	r2, #80	@ 0x50
 800f04a:	5a9b      	ldrh	r3, [r3, r2]
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	001a      	movs	r2, r3
 800f050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f052:	189b      	adds	r3, r3, r2
 800f054:	627b      	str	r3, [r7, #36]	@ 0x24
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	00da      	lsls	r2, r3, #3
 800f05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05e:	18d3      	adds	r3, r2, r3
 800f060:	4a80      	ldr	r2, [pc, #512]	@ (800f264 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f062:	4694      	mov	ip, r2
 800f064:	4463      	add	r3, ip
 800f066:	623b      	str	r3, [r7, #32]
 800f068:	6a3b      	ldr	r3, [r7, #32]
 800f06a:	2200      	movs	r2, #0
 800f06c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	781a      	ldrb	r2, [r3, #0]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	0011      	movs	r1, r2
 800f076:	0018      	movs	r0, r3
 800f078:	f007 fdf0 	bl	8016c5c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f07c:	1dbb      	adds	r3, r7, #6
 800f07e:	881a      	ldrh	r2, [r3, #0]
 800f080:	2380      	movs	r3, #128	@ 0x80
 800f082:	01db      	lsls	r3, r3, #7
 800f084:	4013      	ands	r3, r2
 800f086:	d100      	bne.n	800f08a <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f088:	e309      	b.n	800f69e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	001a      	movs	r2, r3
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	18d3      	adds	r3, r2, r3
 800f098:	881b      	ldrh	r3, [r3, #0]
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	2016      	movs	r0, #22
 800f09e:	183b      	adds	r3, r7, r0
 800f0a0:	4971      	ldr	r1, [pc, #452]	@ (800f268 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f0a2:	400a      	ands	r2, r1
 800f0a4:	801a      	strh	r2, [r3, #0]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	001a      	movs	r2, r3
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	18d3      	adds	r3, r2, r3
 800f0b4:	183a      	adds	r2, r7, r0
 800f0b6:	8812      	ldrh	r2, [r2, #0]
 800f0b8:	496c      	ldr	r1, [pc, #432]	@ (800f26c <HAL_PCD_EP_DB_Transmit+0x388>)
 800f0ba:	430a      	orrs	r2, r1
 800f0bc:	b292      	uxth	r2, r2
 800f0be:	801a      	strh	r2, [r3, #0]
 800f0c0:	e2ed      	b.n	800f69e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f0c2:	1dbb      	adds	r3, r7, #6
 800f0c4:	881a      	ldrh	r2, [r3, #0]
 800f0c6:	2380      	movs	r3, #128	@ 0x80
 800f0c8:	01db      	lsls	r3, r3, #7
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	d01a      	beq.n	800f104 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	001a      	movs	r2, r3
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	18d3      	adds	r3, r2, r3
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	208a      	movs	r0, #138	@ 0x8a
 800f0e2:	183b      	adds	r3, r7, r0
 800f0e4:	4960      	ldr	r1, [pc, #384]	@ (800f268 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f0e6:	400a      	ands	r2, r1
 800f0e8:	801a      	strh	r2, [r3, #0]
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	001a      	movs	r2, r3
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	009b      	lsls	r3, r3, #2
 800f0f6:	18d3      	adds	r3, r2, r3
 800f0f8:	183a      	adds	r2, r7, r0
 800f0fa:	8812      	ldrh	r2, [r2, #0]
 800f0fc:	495b      	ldr	r1, [pc, #364]	@ (800f26c <HAL_PCD_EP_DB_Transmit+0x388>)
 800f0fe:	430a      	orrs	r2, r1
 800f100:	b292      	uxth	r2, r2
 800f102:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	2224      	movs	r2, #36	@ 0x24
 800f108:	5c9b      	ldrb	r3, [r3, r2]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d000      	beq.n	800f110 <HAL_PCD_EP_DB_Transmit+0x22c>
 800f10e:	e2c6      	b.n	800f69e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	695a      	ldr	r2, [r3, #20]
 800f114:	2186      	movs	r1, #134	@ 0x86
 800f116:	187b      	adds	r3, r7, r1
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	18d2      	adds	r2, r2, r3
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	69da      	ldr	r2, [r3, #28]
 800f124:	187b      	adds	r3, r7, r1
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	18d2      	adds	r2, r2, r3
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	6a1a      	ldr	r2, [r3, #32]
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	691b      	ldr	r3, [r3, #16]
 800f136:	429a      	cmp	r2, r3
 800f138:	d30c      	bcc.n	800f154 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	691b      	ldr	r3, [r3, #16]
 800f13e:	218c      	movs	r1, #140	@ 0x8c
 800f140:	187a      	adds	r2, r7, r1
 800f142:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	6a1a      	ldr	r2, [r3, #32]
 800f148:	187b      	adds	r3, r7, r1
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	1ad2      	subs	r2, r2, r3
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	621a      	str	r2, [r3, #32]
 800f152:	e01a      	b.n	800f18a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	6a1b      	ldr	r3, [r3, #32]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d10a      	bne.n	800f172 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800f15c:	2386      	movs	r3, #134	@ 0x86
 800f15e:	18fb      	adds	r3, r7, r3
 800f160:	881b      	ldrh	r3, [r3, #0]
 800f162:	228c      	movs	r2, #140	@ 0x8c
 800f164:	18ba      	adds	r2, r7, r2
 800f166:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	2224      	movs	r2, #36	@ 0x24
 800f16c:	2100      	movs	r1, #0
 800f16e:	5499      	strb	r1, [r3, r2]
 800f170:	e00b      	b.n	800f18a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	2224      	movs	r2, #36	@ 0x24
 800f176:	2100      	movs	r1, #0
 800f178:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	6a1b      	ldr	r3, [r3, #32]
 800f17e:	228c      	movs	r2, #140	@ 0x8c
 800f180:	18ba      	adds	r2, r7, r2
 800f182:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2200      	movs	r2, #0
 800f188:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	785b      	ldrb	r3, [r3, #1]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d000      	beq.n	800f194 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800f192:	e06d      	b.n	800f270 <HAL_PCD_EP_DB_Transmit+0x38c>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2250      	movs	r2, #80	@ 0x50
 800f1a0:	5a9b      	ldrh	r3, [r3, r2]
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	001a      	movs	r2, r3
 800f1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1a8:	189b      	adds	r3, r3, r2
 800f1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	00da      	lsls	r2, r3, #3
 800f1b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1b4:	18d3      	adds	r3, r2, r3
 800f1b6:	4a29      	ldr	r2, [pc, #164]	@ (800f25c <HAL_PCD_EP_DB_Transmit+0x378>)
 800f1b8:	4694      	mov	ip, r2
 800f1ba:	4463      	add	r3, ip
 800f1bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c0:	881b      	ldrh	r3, [r3, #0]
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	059b      	lsls	r3, r3, #22
 800f1c6:	0d9b      	lsrs	r3, r3, #22
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1cc:	801a      	strh	r2, [r3, #0]
 800f1ce:	228c      	movs	r2, #140	@ 0x8c
 800f1d0:	18bb      	adds	r3, r7, r2
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1d6:	d91a      	bls.n	800f20e <HAL_PCD_EP_DB_Transmit+0x32a>
 800f1d8:	18bb      	adds	r3, r7, r2
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	095b      	lsrs	r3, r3, #5
 800f1de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1e0:	18bb      	adds	r3, r7, r2
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	221f      	movs	r2, #31
 800f1e6:	4013      	ands	r3, r2
 800f1e8:	d102      	bne.n	800f1f0 <HAL_PCD_EP_DB_Transmit+0x30c>
 800f1ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1ec:	3b01      	subs	r3, #1
 800f1ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f2:	881b      	ldrh	r3, [r3, #0]
 800f1f4:	b29a      	uxth	r2, r3
 800f1f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	029b      	lsls	r3, r3, #10
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	4313      	orrs	r3, r2
 800f200:	b29b      	uxth	r3, r3
 800f202:	4a17      	ldr	r2, [pc, #92]	@ (800f260 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f204:	4313      	orrs	r3, r2
 800f206:	b29a      	uxth	r2, r3
 800f208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20a:	801a      	strh	r2, [r3, #0]
 800f20c:	e04f      	b.n	800f2ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f20e:	238c      	movs	r3, #140	@ 0x8c
 800f210:	18fb      	adds	r3, r7, r3
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d108      	bne.n	800f22a <HAL_PCD_EP_DB_Transmit+0x346>
 800f218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	4a10      	ldr	r2, [pc, #64]	@ (800f260 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f220:	4313      	orrs	r3, r2
 800f222:	b29a      	uxth	r2, r3
 800f224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f226:	801a      	strh	r2, [r3, #0]
 800f228:	e041      	b.n	800f2ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f22a:	228c      	movs	r2, #140	@ 0x8c
 800f22c:	18bb      	adds	r3, r7, r2
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	085b      	lsrs	r3, r3, #1
 800f232:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f234:	18bb      	adds	r3, r7, r2
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2201      	movs	r2, #1
 800f23a:	4013      	ands	r3, r2
 800f23c:	d002      	beq.n	800f244 <HAL_PCD_EP_DB_Transmit+0x360>
 800f23e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f240:	3301      	adds	r3, #1
 800f242:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f246:	881b      	ldrh	r3, [r3, #0]
 800f248:	b29a      	uxth	r2, r3
 800f24a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	029b      	lsls	r3, r3, #10
 800f250:	b29b      	uxth	r3, r3
 800f252:	4313      	orrs	r3, r2
 800f254:	b29a      	uxth	r2, r3
 800f256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f258:	801a      	strh	r2, [r3, #0]
 800f25a:	e028      	b.n	800f2ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f25c:	00000402 	.word	0x00000402
 800f260:	ffff8000 	.word	0xffff8000
 800f264:	00000406 	.word	0x00000406
 800f268:	ffff8f8f 	.word	0xffff8f8f
 800f26c:	ffffc080 	.word	0xffffc080
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	785b      	ldrb	r3, [r3, #1]
 800f274:	2b01      	cmp	r3, #1
 800f276:	d11a      	bne.n	800f2ae <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2250      	movs	r2, #80	@ 0x50
 800f284:	5a9b      	ldrh	r3, [r3, r2]
 800f286:	b29b      	uxth	r3, r3
 800f288:	001a      	movs	r2, r3
 800f28a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f28c:	189b      	adds	r3, r3, r2
 800f28e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	00da      	lsls	r2, r3, #3
 800f296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f298:	18d3      	adds	r3, r2, r3
 800f29a:	4adb      	ldr	r2, [pc, #876]	@ (800f608 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f29c:	4694      	mov	ip, r2
 800f29e:	4463      	add	r3, ip
 800f2a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2a2:	238c      	movs	r3, #140	@ 0x8c
 800f2a4:	18fb      	adds	r3, r7, r3
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	b29a      	uxth	r2, r3
 800f2aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2ac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	6818      	ldr	r0, [r3, #0]
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	6959      	ldr	r1, [r3, #20]
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	891a      	ldrh	r2, [r3, #8]
 800f2ba:	238c      	movs	r3, #140	@ 0x8c
 800f2bc:	18fb      	adds	r3, r7, r3
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	f005 fc47 	bl	8014b54 <USB_WritePMA>
 800f2c6:	e1ea      	b.n	800f69e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2250      	movs	r2, #80	@ 0x50
 800f2ce:	5a9b      	ldrh	r3, [r3, r2]
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	001a      	movs	r2, r3
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	00db      	lsls	r3, r3, #3
 800f2da:	18d2      	adds	r2, r2, r3
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	18d3      	adds	r3, r2, r3
 800f2e2:	4aca      	ldr	r2, [pc, #808]	@ (800f60c <HAL_PCD_EP_DB_Transmit+0x728>)
 800f2e4:	4694      	mov	ip, r2
 800f2e6:	4463      	add	r3, ip
 800f2e8:	881a      	ldrh	r2, [r3, #0]
 800f2ea:	2186      	movs	r1, #134	@ 0x86
 800f2ec:	187b      	adds	r3, r7, r1
 800f2ee:	0592      	lsls	r2, r2, #22
 800f2f0:	0d92      	lsrs	r2, r2, #22
 800f2f2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	699a      	ldr	r2, [r3, #24]
 800f2f8:	187b      	adds	r3, r7, r1
 800f2fa:	881b      	ldrh	r3, [r3, #0]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d307      	bcc.n	800f310 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	699a      	ldr	r2, [r3, #24]
 800f304:	187b      	adds	r3, r7, r1
 800f306:	881b      	ldrh	r3, [r3, #0]
 800f308:	1ad2      	subs	r2, r2, r3
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	619a      	str	r2, [r3, #24]
 800f30e:	e002      	b.n	800f316 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	2200      	movs	r2, #0
 800f314:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	699b      	ldr	r3, [r3, #24]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d000      	beq.n	800f320 <HAL_PCD_EP_DB_Transmit+0x43c>
 800f31e:	e0bb      	b.n	800f498 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	785b      	ldrb	r3, [r3, #1]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d125      	bne.n	800f374 <HAL_PCD_EP_DB_Transmit+0x490>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2250      	movs	r2, #80	@ 0x50
 800f334:	5a9b      	ldrh	r3, [r3, r2]
 800f336:	b29b      	uxth	r3, r3
 800f338:	001a      	movs	r2, r3
 800f33a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f33c:	189b      	adds	r3, r3, r2
 800f33e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	00da      	lsls	r2, r3, #3
 800f346:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f348:	18d3      	adds	r3, r2, r3
 800f34a:	4aaf      	ldr	r2, [pc, #700]	@ (800f608 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f34c:	4694      	mov	ip, r2
 800f34e:	4463      	add	r3, ip
 800f350:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f354:	881b      	ldrh	r3, [r3, #0]
 800f356:	b29b      	uxth	r3, r3
 800f358:	059b      	lsls	r3, r3, #22
 800f35a:	0d9b      	lsrs	r3, r3, #22
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f360:	801a      	strh	r2, [r3, #0]
 800f362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f364:	881b      	ldrh	r3, [r3, #0]
 800f366:	b29b      	uxth	r3, r3
 800f368:	4aa9      	ldr	r2, [pc, #676]	@ (800f610 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f36a:	4313      	orrs	r3, r2
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f370:	801a      	strh	r2, [r3, #0]
 800f372:	e01b      	b.n	800f3ac <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	785b      	ldrb	r3, [r3, #1]
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d117      	bne.n	800f3ac <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	667b      	str	r3, [r7, #100]	@ 0x64
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2250      	movs	r2, #80	@ 0x50
 800f388:	5a9b      	ldrh	r3, [r3, r2]
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	001a      	movs	r2, r3
 800f38e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f390:	189b      	adds	r3, r3, r2
 800f392:	667b      	str	r3, [r7, #100]	@ 0x64
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	00da      	lsls	r2, r3, #3
 800f39a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f39c:	18d3      	adds	r3, r2, r3
 800f39e:	4a9a      	ldr	r2, [pc, #616]	@ (800f608 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f3a0:	4694      	mov	ip, r2
 800f3a2:	4463      	add	r3, ip
 800f3a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800f3a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	677b      	str	r3, [r7, #116]	@ 0x74
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	785b      	ldrb	r3, [r3, #1]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d12b      	bne.n	800f412 <HAL_PCD_EP_DB_Transmit+0x52e>
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2250      	movs	r2, #80	@ 0x50
 800f3c6:	5a9b      	ldrh	r3, [r3, r2]
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	001a      	movs	r2, r3
 800f3cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3ce:	189b      	adds	r3, r3, r2
 800f3d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	00da      	lsls	r2, r3, #3
 800f3d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3da:	18d3      	adds	r3, r2, r3
 800f3dc:	4a8b      	ldr	r2, [pc, #556]	@ (800f60c <HAL_PCD_EP_DB_Transmit+0x728>)
 800f3de:	4694      	mov	ip, r2
 800f3e0:	4463      	add	r3, ip
 800f3e2:	2180      	movs	r1, #128	@ 0x80
 800f3e4:	187a      	adds	r2, r7, r1
 800f3e6:	6013      	str	r3, [r2, #0]
 800f3e8:	187b      	adds	r3, r7, r1
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	059b      	lsls	r3, r3, #22
 800f3f2:	0d9b      	lsrs	r3, r3, #22
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	187b      	adds	r3, r7, r1
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	801a      	strh	r2, [r3, #0]
 800f3fc:	187b      	adds	r3, r7, r1
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	b29b      	uxth	r3, r3
 800f404:	4a82      	ldr	r2, [pc, #520]	@ (800f610 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f406:	4313      	orrs	r3, r2
 800f408:	b29a      	uxth	r2, r3
 800f40a:	187b      	adds	r3, r7, r1
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	801a      	strh	r2, [r3, #0]
 800f410:	e018      	b.n	800f444 <HAL_PCD_EP_DB_Transmit+0x560>
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	785b      	ldrb	r3, [r3, #1]
 800f416:	2b01      	cmp	r3, #1
 800f418:	d114      	bne.n	800f444 <HAL_PCD_EP_DB_Transmit+0x560>
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2250      	movs	r2, #80	@ 0x50
 800f420:	5a9b      	ldrh	r3, [r3, r2]
 800f422:	b29b      	uxth	r3, r3
 800f424:	001a      	movs	r2, r3
 800f426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f428:	189b      	adds	r3, r3, r2
 800f42a:	677b      	str	r3, [r7, #116]	@ 0x74
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	00da      	lsls	r2, r3, #3
 800f432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f434:	18d3      	adds	r3, r2, r3
 800f436:	4a75      	ldr	r2, [pc, #468]	@ (800f60c <HAL_PCD_EP_DB_Transmit+0x728>)
 800f438:	4694      	mov	ip, r2
 800f43a:	4463      	add	r3, ip
 800f43c:	673b      	str	r3, [r7, #112]	@ 0x70
 800f43e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f440:	2200      	movs	r2, #0
 800f442:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	781a      	ldrb	r2, [r3, #0]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	0011      	movs	r1, r2
 800f44c:	0018      	movs	r0, r3
 800f44e:	f007 fc05 	bl	8016c5c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f452:	1dbb      	adds	r3, r7, #6
 800f454:	881a      	ldrh	r2, [r3, #0]
 800f456:	2380      	movs	r3, #128	@ 0x80
 800f458:	01db      	lsls	r3, r3, #7
 800f45a:	4013      	ands	r3, r2
 800f45c:	d000      	beq.n	800f460 <HAL_PCD_EP_DB_Transmit+0x57c>
 800f45e:	e11e      	b.n	800f69e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	001a      	movs	r2, r3
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	18d3      	adds	r3, r2, r3
 800f46e:	881b      	ldrh	r3, [r3, #0]
 800f470:	b29a      	uxth	r2, r3
 800f472:	2088      	movs	r0, #136	@ 0x88
 800f474:	183b      	adds	r3, r7, r0
 800f476:	4967      	ldr	r1, [pc, #412]	@ (800f614 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f478:	400a      	ands	r2, r1
 800f47a:	801a      	strh	r2, [r3, #0]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	001a      	movs	r2, r3
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	18d3      	adds	r3, r2, r3
 800f48a:	183a      	adds	r2, r7, r0
 800f48c:	8812      	ldrh	r2, [r2, #0]
 800f48e:	4962      	ldr	r1, [pc, #392]	@ (800f618 <HAL_PCD_EP_DB_Transmit+0x734>)
 800f490:	430a      	orrs	r2, r1
 800f492:	b292      	uxth	r2, r2
 800f494:	801a      	strh	r2, [r3, #0]
 800f496:	e102      	b.n	800f69e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f498:	1dbb      	adds	r3, r7, #6
 800f49a:	881a      	ldrh	r2, [r3, #0]
 800f49c:	2380      	movs	r3, #128	@ 0x80
 800f49e:	01db      	lsls	r3, r3, #7
 800f4a0:	4013      	ands	r3, r2
 800f4a2:	d11a      	bne.n	800f4da <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	001a      	movs	r2, r3
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	18d3      	adds	r3, r2, r3
 800f4b2:	881b      	ldrh	r3, [r3, #0]
 800f4b4:	b29a      	uxth	r2, r3
 800f4b6:	204e      	movs	r0, #78	@ 0x4e
 800f4b8:	183b      	adds	r3, r7, r0
 800f4ba:	4956      	ldr	r1, [pc, #344]	@ (800f614 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f4bc:	400a      	ands	r2, r1
 800f4be:	801a      	strh	r2, [r3, #0]
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	001a      	movs	r2, r3
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	18d3      	adds	r3, r2, r3
 800f4ce:	183a      	adds	r2, r7, r0
 800f4d0:	8812      	ldrh	r2, [r2, #0]
 800f4d2:	4951      	ldr	r1, [pc, #324]	@ (800f618 <HAL_PCD_EP_DB_Transmit+0x734>)
 800f4d4:	430a      	orrs	r2, r1
 800f4d6:	b292      	uxth	r2, r2
 800f4d8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	2224      	movs	r2, #36	@ 0x24
 800f4de:	5c9b      	ldrb	r3, [r3, r2]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d000      	beq.n	800f4e6 <HAL_PCD_EP_DB_Transmit+0x602>
 800f4e4:	e0db      	b.n	800f69e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	695a      	ldr	r2, [r3, #20]
 800f4ea:	2186      	movs	r1, #134	@ 0x86
 800f4ec:	187b      	adds	r3, r7, r1
 800f4ee:	881b      	ldrh	r3, [r3, #0]
 800f4f0:	18d2      	adds	r2, r2, r3
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	69da      	ldr	r2, [r3, #28]
 800f4fa:	187b      	adds	r3, r7, r1
 800f4fc:	881b      	ldrh	r3, [r3, #0]
 800f4fe:	18d2      	adds	r2, r2, r3
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	6a1a      	ldr	r2, [r3, #32]
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	691b      	ldr	r3, [r3, #16]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d30c      	bcc.n	800f52a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	691b      	ldr	r3, [r3, #16]
 800f514:	218c      	movs	r1, #140	@ 0x8c
 800f516:	187a      	adds	r2, r7, r1
 800f518:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	6a1a      	ldr	r2, [r3, #32]
 800f51e:	187b      	adds	r3, r7, r1
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	1ad2      	subs	r2, r2, r3
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	621a      	str	r2, [r3, #32]
 800f528:	e01a      	b.n	800f560 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	6a1b      	ldr	r3, [r3, #32]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d10a      	bne.n	800f548 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800f532:	2386      	movs	r3, #134	@ 0x86
 800f534:	18fb      	adds	r3, r7, r3
 800f536:	881b      	ldrh	r3, [r3, #0]
 800f538:	228c      	movs	r2, #140	@ 0x8c
 800f53a:	18ba      	adds	r2, r7, r2
 800f53c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2224      	movs	r2, #36	@ 0x24
 800f542:	2100      	movs	r1, #0
 800f544:	5499      	strb	r1, [r3, r2]
 800f546:	e00b      	b.n	800f560 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	6a1b      	ldr	r3, [r3, #32]
 800f54c:	228c      	movs	r2, #140	@ 0x8c
 800f54e:	18ba      	adds	r2, r7, r2
 800f550:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2200      	movs	r2, #0
 800f556:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	2224      	movs	r2, #36	@ 0x24
 800f55c:	2100      	movs	r1, #0
 800f55e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	657b      	str	r3, [r7, #84]	@ 0x54
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	785b      	ldrb	r3, [r3, #1]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d000      	beq.n	800f570 <HAL_PCD_EP_DB_Transmit+0x68c>
 800f56e:	e06e      	b.n	800f64e <HAL_PCD_EP_DB_Transmit+0x76a>
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2250      	movs	r2, #80	@ 0x50
 800f57c:	5a9b      	ldrh	r3, [r3, r2]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	001a      	movs	r2, r3
 800f582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f584:	189b      	adds	r3, r3, r2
 800f586:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	00da      	lsls	r2, r3, #3
 800f58e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f590:	18d3      	adds	r3, r2, r3
 800f592:	4a1e      	ldr	r2, [pc, #120]	@ (800f60c <HAL_PCD_EP_DB_Transmit+0x728>)
 800f594:	4694      	mov	ip, r2
 800f596:	4463      	add	r3, ip
 800f598:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f59a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	059b      	lsls	r3, r3, #22
 800f5a2:	0d9b      	lsrs	r3, r3, #22
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5a8:	801a      	strh	r2, [r3, #0]
 800f5aa:	228c      	movs	r2, #140	@ 0x8c
 800f5ac:	18bb      	adds	r3, r7, r2
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b3e      	cmp	r3, #62	@ 0x3e
 800f5b2:	d91a      	bls.n	800f5ea <HAL_PCD_EP_DB_Transmit+0x706>
 800f5b4:	18bb      	adds	r3, r7, r2
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	095b      	lsrs	r3, r3, #5
 800f5ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5bc:	18bb      	adds	r3, r7, r2
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	221f      	movs	r2, #31
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	d102      	bne.n	800f5cc <HAL_PCD_EP_DB_Transmit+0x6e8>
 800f5c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f5c8:	3b01      	subs	r3, #1
 800f5ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	b29a      	uxth	r2, r3
 800f5d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	029b      	lsls	r3, r3, #10
 800f5d8:	b29b      	uxth	r3, r3
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	4a0c      	ldr	r2, [pc, #48]	@ (800f610 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5e6:	801a      	strh	r2, [r3, #0]
 800f5e8:	e04d      	b.n	800f686 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f5ea:	238c      	movs	r3, #140	@ 0x8c
 800f5ec:	18fb      	adds	r3, r7, r3
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d113      	bne.n	800f61c <HAL_PCD_EP_DB_Transmit+0x738>
 800f5f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5f6:	881b      	ldrh	r3, [r3, #0]
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	4a05      	ldr	r2, [pc, #20]	@ (800f610 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f602:	801a      	strh	r2, [r3, #0]
 800f604:	e03f      	b.n	800f686 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f606:	46c0      	nop			@ (mov r8, r8)
 800f608:	00000402 	.word	0x00000402
 800f60c:	00000406 	.word	0x00000406
 800f610:	ffff8000 	.word	0xffff8000
 800f614:	ffff8f8f 	.word	0xffff8f8f
 800f618:	ffffc080 	.word	0xffffc080
 800f61c:	228c      	movs	r2, #140	@ 0x8c
 800f61e:	18bb      	adds	r3, r7, r2
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	085b      	lsrs	r3, r3, #1
 800f624:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f626:	18bb      	adds	r3, r7, r2
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	2201      	movs	r2, #1
 800f62c:	4013      	ands	r3, r2
 800f62e:	d002      	beq.n	800f636 <HAL_PCD_EP_DB_Transmit+0x752>
 800f630:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f632:	3301      	adds	r3, #1
 800f634:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f63e:	b29b      	uxth	r3, r3
 800f640:	029b      	lsls	r3, r3, #10
 800f642:	b29b      	uxth	r3, r3
 800f644:	4313      	orrs	r3, r2
 800f646:	b29a      	uxth	r2, r3
 800f648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f64a:	801a      	strh	r2, [r3, #0]
 800f64c:	e01b      	b.n	800f686 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	785b      	ldrb	r3, [r3, #1]
 800f652:	2b01      	cmp	r3, #1
 800f654:	d117      	bne.n	800f686 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2250      	movs	r2, #80	@ 0x50
 800f65c:	5a9b      	ldrh	r3, [r3, r2]
 800f65e:	b29b      	uxth	r3, r3
 800f660:	001a      	movs	r2, r3
 800f662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f664:	189b      	adds	r3, r3, r2
 800f666:	657b      	str	r3, [r7, #84]	@ 0x54
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	00da      	lsls	r2, r3, #3
 800f66e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f670:	18d3      	adds	r3, r2, r3
 800f672:	4a21      	ldr	r2, [pc, #132]	@ (800f6f8 <HAL_PCD_EP_DB_Transmit+0x814>)
 800f674:	4694      	mov	ip, r2
 800f676:	4463      	add	r3, ip
 800f678:	653b      	str	r3, [r7, #80]	@ 0x50
 800f67a:	238c      	movs	r3, #140	@ 0x8c
 800f67c:	18fb      	adds	r3, r7, r3
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	b29a      	uxth	r2, r3
 800f682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f684:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	6959      	ldr	r1, [r3, #20]
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	895a      	ldrh	r2, [r3, #10]
 800f692:	238c      	movs	r3, #140	@ 0x8c
 800f694:	18fb      	adds	r3, r7, r3
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	b29b      	uxth	r3, r3
 800f69a:	f005 fa5b 	bl	8014b54 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	001a      	movs	r2, r3
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	18d3      	adds	r3, r2, r3
 800f6ac:	881b      	ldrh	r3, [r3, #0]
 800f6ae:	b29a      	uxth	r2, r3
 800f6b0:	2014      	movs	r0, #20
 800f6b2:	183b      	adds	r3, r7, r0
 800f6b4:	4911      	ldr	r1, [pc, #68]	@ (800f6fc <HAL_PCD_EP_DB_Transmit+0x818>)
 800f6b6:	400a      	ands	r2, r1
 800f6b8:	801a      	strh	r2, [r3, #0]
 800f6ba:	183b      	adds	r3, r7, r0
 800f6bc:	183a      	adds	r2, r7, r0
 800f6be:	8812      	ldrh	r2, [r2, #0]
 800f6c0:	2110      	movs	r1, #16
 800f6c2:	404a      	eors	r2, r1
 800f6c4:	801a      	strh	r2, [r3, #0]
 800f6c6:	183b      	adds	r3, r7, r0
 800f6c8:	183a      	adds	r2, r7, r0
 800f6ca:	8812      	ldrh	r2, [r2, #0]
 800f6cc:	2120      	movs	r1, #32
 800f6ce:	404a      	eors	r2, r1
 800f6d0:	801a      	strh	r2, [r3, #0]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	001a      	movs	r2, r3
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	18d3      	adds	r3, r2, r3
 800f6e0:	183a      	adds	r2, r7, r0
 800f6e2:	8812      	ldrh	r2, [r2, #0]
 800f6e4:	4906      	ldr	r1, [pc, #24]	@ (800f700 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800f6e6:	430a      	orrs	r2, r1
 800f6e8:	b292      	uxth	r2, r2
 800f6ea:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	0018      	movs	r0, r3
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	b024      	add	sp, #144	@ 0x90
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	46c0      	nop			@ (mov r8, r8)
 800f6f8:	00000406 	.word	0x00000406
 800f6fc:	ffff8fbf 	.word	0xffff8fbf
 800f700:	ffff8080 	.word	0xffff8080

0800f704 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800f704:	b590      	push	{r4, r7, lr}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	0008      	movs	r0, r1
 800f70e:	0011      	movs	r1, r2
 800f710:	607b      	str	r3, [r7, #4]
 800f712:	240a      	movs	r4, #10
 800f714:	193b      	adds	r3, r7, r4
 800f716:	1c02      	adds	r2, r0, #0
 800f718:	801a      	strh	r2, [r3, #0]
 800f71a:	2308      	movs	r3, #8
 800f71c:	18fb      	adds	r3, r7, r3
 800f71e:	1c0a      	adds	r2, r1, #0
 800f720:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800f722:	0021      	movs	r1, r4
 800f724:	187b      	adds	r3, r7, r1
 800f726:	881b      	ldrh	r3, [r3, #0]
 800f728:	2280      	movs	r2, #128	@ 0x80
 800f72a:	4013      	ands	r3, r2
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00c      	beq.n	800f74c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f732:	187b      	adds	r3, r7, r1
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	2207      	movs	r2, #7
 800f738:	4013      	ands	r3, r2
 800f73a:	1c5a      	adds	r2, r3, #1
 800f73c:	0013      	movs	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	189b      	adds	r3, r3, r2
 800f742:	00db      	lsls	r3, r3, #3
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	18d3      	adds	r3, r2, r3
 800f748:	617b      	str	r3, [r7, #20]
 800f74a:	e00b      	b.n	800f764 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f74c:	230a      	movs	r3, #10
 800f74e:	18fb      	adds	r3, r7, r3
 800f750:	881a      	ldrh	r2, [r3, #0]
 800f752:	0013      	movs	r3, r2
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	189b      	adds	r3, r3, r2
 800f758:	00db      	lsls	r3, r3, #3
 800f75a:	3369      	adds	r3, #105	@ 0x69
 800f75c:	33ff      	adds	r3, #255	@ 0xff
 800f75e:	68fa      	ldr	r2, [r7, #12]
 800f760:	18d3      	adds	r3, r2, r3
 800f762:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800f764:	2308      	movs	r3, #8
 800f766:	18fb      	adds	r3, r7, r3
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d107      	bne.n	800f77e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	2200      	movs	r2, #0
 800f772:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	b29a      	uxth	r2, r3
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	80da      	strh	r2, [r3, #6]
 800f77c:	e00b      	b.n	800f796 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	2201      	movs	r2, #1
 800f782:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	b29a      	uxth	r2, r3
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	0c1b      	lsrs	r3, r3, #16
 800f790:	b29a      	uxth	r2, r3
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f796:	2300      	movs	r3, #0
}
 800f798:	0018      	movs	r0, r3
 800f79a:	46bd      	mov	sp, r7
 800f79c:	b007      	add	sp, #28
 800f79e:	bd90      	pop	{r4, r7, pc}

0800f7a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800f7ae:	687a      	ldr	r2, [r7, #4]
 800f7b0:	23ba      	movs	r3, #186	@ 0xba
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	2101      	movs	r1, #1
 800f7b6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	23b8      	movs	r3, #184	@ 0xb8
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	2100      	movs	r1, #0
 800f7c0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2254      	movs	r2, #84	@ 0x54
 800f7c6:	5a9b      	ldrh	r3, [r3, r2]
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	b299      	uxth	r1, r3
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2254      	movs	r2, #84	@ 0x54
 800f7d4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2254      	movs	r2, #84	@ 0x54
 800f7da:	5a9b      	ldrh	r3, [r3, r2]
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	2202      	movs	r2, #2
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	b299      	uxth	r1, r3
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2254      	movs	r2, #84	@ 0x54
 800f7e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f7ea:	2300      	movs	r3, #0
}
 800f7ec:	0018      	movs	r0, r3
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	b004      	add	sp, #16
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	000a      	movs	r2, r1
 800f7fe:	1cfb      	adds	r3, r7, #3
 800f800:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f802:	46c0      	nop			@ (mov r8, r8)
 800f804:	46bd      	mov	sp, r7
 800f806:	b002      	add	sp, #8
 800f808:	bd80      	pop	{r7, pc}
	...

0800f80c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800f810:	4b04      	ldr	r3, [pc, #16]	@ (800f824 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	4b03      	ldr	r3, [pc, #12]	@ (800f824 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f816:	2180      	movs	r1, #128	@ 0x80
 800f818:	0049      	lsls	r1, r1, #1
 800f81a:	430a      	orrs	r2, r1
 800f81c:	601a      	str	r2, [r3, #0]
}
 800f81e:	46c0      	nop			@ (mov r8, r8)
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	40007000 	.word	0x40007000

0800f828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f828:	b5b0      	push	{r4, r5, r7, lr}
 800f82a:	b08a      	sub	sp, #40	@ 0x28
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d102      	bne.n	800f83c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f836:	2301      	movs	r3, #1
 800f838:	f000 fbbf 	bl	800ffba <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f83c:	4bc9      	ldr	r3, [pc, #804]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	220c      	movs	r2, #12
 800f842:	4013      	ands	r3, r2
 800f844:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f846:	4bc7      	ldr	r3, [pc, #796]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f848:	68da      	ldr	r2, [r3, #12]
 800f84a:	2380      	movs	r3, #128	@ 0x80
 800f84c:	025b      	lsls	r3, r3, #9
 800f84e:	4013      	ands	r3, r2
 800f850:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2201      	movs	r2, #1
 800f858:	4013      	ands	r3, r2
 800f85a:	d100      	bne.n	800f85e <HAL_RCC_OscConfig+0x36>
 800f85c:	e07e      	b.n	800f95c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	2b08      	cmp	r3, #8
 800f862:	d007      	beq.n	800f874 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	2b0c      	cmp	r3, #12
 800f868:	d112      	bne.n	800f890 <HAL_RCC_OscConfig+0x68>
 800f86a:	69ba      	ldr	r2, [r7, #24]
 800f86c:	2380      	movs	r3, #128	@ 0x80
 800f86e:	025b      	lsls	r3, r3, #9
 800f870:	429a      	cmp	r2, r3
 800f872:	d10d      	bne.n	800f890 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f874:	4bbb      	ldr	r3, [pc, #748]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	2380      	movs	r3, #128	@ 0x80
 800f87a:	029b      	lsls	r3, r3, #10
 800f87c:	4013      	ands	r3, r2
 800f87e:	d100      	bne.n	800f882 <HAL_RCC_OscConfig+0x5a>
 800f880:	e06b      	b.n	800f95a <HAL_RCC_OscConfig+0x132>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d167      	bne.n	800f95a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800f88a:	2301      	movs	r3, #1
 800f88c:	f000 fb95 	bl	800ffba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	685a      	ldr	r2, [r3, #4]
 800f894:	2380      	movs	r3, #128	@ 0x80
 800f896:	025b      	lsls	r3, r3, #9
 800f898:	429a      	cmp	r2, r3
 800f89a:	d107      	bne.n	800f8ac <HAL_RCC_OscConfig+0x84>
 800f89c:	4bb1      	ldr	r3, [pc, #708]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	4bb0      	ldr	r3, [pc, #704]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8a2:	2180      	movs	r1, #128	@ 0x80
 800f8a4:	0249      	lsls	r1, r1, #9
 800f8a6:	430a      	orrs	r2, r1
 800f8a8:	601a      	str	r2, [r3, #0]
 800f8aa:	e027      	b.n	800f8fc <HAL_RCC_OscConfig+0xd4>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685a      	ldr	r2, [r3, #4]
 800f8b0:	23a0      	movs	r3, #160	@ 0xa0
 800f8b2:	02db      	lsls	r3, r3, #11
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d10e      	bne.n	800f8d6 <HAL_RCC_OscConfig+0xae>
 800f8b8:	4baa      	ldr	r3, [pc, #680]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	4ba9      	ldr	r3, [pc, #676]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8be:	2180      	movs	r1, #128	@ 0x80
 800f8c0:	02c9      	lsls	r1, r1, #11
 800f8c2:	430a      	orrs	r2, r1
 800f8c4:	601a      	str	r2, [r3, #0]
 800f8c6:	4ba7      	ldr	r3, [pc, #668]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	4ba6      	ldr	r3, [pc, #664]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8cc:	2180      	movs	r1, #128	@ 0x80
 800f8ce:	0249      	lsls	r1, r1, #9
 800f8d0:	430a      	orrs	r2, r1
 800f8d2:	601a      	str	r2, [r3, #0]
 800f8d4:	e012      	b.n	800f8fc <HAL_RCC_OscConfig+0xd4>
 800f8d6:	4ba3      	ldr	r3, [pc, #652]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	4ba2      	ldr	r3, [pc, #648]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8dc:	49a2      	ldr	r1, [pc, #648]	@ (800fb68 <HAL_RCC_OscConfig+0x340>)
 800f8de:	400a      	ands	r2, r1
 800f8e0:	601a      	str	r2, [r3, #0]
 800f8e2:	4ba0      	ldr	r3, [pc, #640]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	2380      	movs	r3, #128	@ 0x80
 800f8e8:	025b      	lsls	r3, r3, #9
 800f8ea:	4013      	ands	r3, r2
 800f8ec:	60fb      	str	r3, [r7, #12]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	4b9c      	ldr	r3, [pc, #624]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	4b9b      	ldr	r3, [pc, #620]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f8f6:	499d      	ldr	r1, [pc, #628]	@ (800fb6c <HAL_RCC_OscConfig+0x344>)
 800f8f8:	400a      	ands	r2, r1
 800f8fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d015      	beq.n	800f930 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f904:	f7fa fa16 	bl	8009d34 <HAL_GetTick>
 800f908:	0003      	movs	r3, r0
 800f90a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f90c:	e009      	b.n	800f922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f90e:	f7fa fa11 	bl	8009d34 <HAL_GetTick>
 800f912:	0002      	movs	r2, r0
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	1ad3      	subs	r3, r2, r3
 800f918:	2b64      	cmp	r3, #100	@ 0x64
 800f91a:	d902      	bls.n	800f922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f91c:	2303      	movs	r3, #3
 800f91e:	f000 fb4c 	bl	800ffba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f922:	4b90      	ldr	r3, [pc, #576]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	2380      	movs	r3, #128	@ 0x80
 800f928:	029b      	lsls	r3, r3, #10
 800f92a:	4013      	ands	r3, r2
 800f92c:	d0ef      	beq.n	800f90e <HAL_RCC_OscConfig+0xe6>
 800f92e:	e015      	b.n	800f95c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f930:	f7fa fa00 	bl	8009d34 <HAL_GetTick>
 800f934:	0003      	movs	r3, r0
 800f936:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f938:	e008      	b.n	800f94c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f93a:	f7fa f9fb 	bl	8009d34 <HAL_GetTick>
 800f93e:	0002      	movs	r2, r0
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	2b64      	cmp	r3, #100	@ 0x64
 800f946:	d901      	bls.n	800f94c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800f948:	2303      	movs	r3, #3
 800f94a:	e336      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f94c:	4b85      	ldr	r3, [pc, #532]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	2380      	movs	r3, #128	@ 0x80
 800f952:	029b      	lsls	r3, r3, #10
 800f954:	4013      	ands	r3, r2
 800f956:	d1f0      	bne.n	800f93a <HAL_RCC_OscConfig+0x112>
 800f958:	e000      	b.n	800f95c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f95a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2202      	movs	r2, #2
 800f962:	4013      	ands	r3, r2
 800f964:	d100      	bne.n	800f968 <HAL_RCC_OscConfig+0x140>
 800f966:	e099      	b.n	800fa9c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	68db      	ldr	r3, [r3, #12]
 800f96c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800f96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f970:	2220      	movs	r2, #32
 800f972:	4013      	ands	r3, r2
 800f974:	d009      	beq.n	800f98a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800f976:	4b7b      	ldr	r3, [pc, #492]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	4b7a      	ldr	r3, [pc, #488]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f97c:	2120      	movs	r1, #32
 800f97e:	430a      	orrs	r2, r1
 800f980:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800f982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f984:	2220      	movs	r2, #32
 800f986:	4393      	bics	r3, r2
 800f988:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	2b04      	cmp	r3, #4
 800f98e:	d005      	beq.n	800f99c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	2b0c      	cmp	r3, #12
 800f994:	d13e      	bne.n	800fa14 <HAL_RCC_OscConfig+0x1ec>
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d13b      	bne.n	800fa14 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800f99c:	4b71      	ldr	r3, [pc, #452]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2204      	movs	r2, #4
 800f9a2:	4013      	ands	r3, r2
 800f9a4:	d004      	beq.n	800f9b0 <HAL_RCC_OscConfig+0x188>
 800f9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d101      	bne.n	800f9b0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e304      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f9b0:	4b6c      	ldr	r3, [pc, #432]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	4a6e      	ldr	r2, [pc, #440]	@ (800fb70 <HAL_RCC_OscConfig+0x348>)
 800f9b6:	4013      	ands	r3, r2
 800f9b8:	0019      	movs	r1, r3
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	021a      	lsls	r2, r3, #8
 800f9c0:	4b68      	ldr	r3, [pc, #416]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f9c2:	430a      	orrs	r2, r1
 800f9c4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800f9c6:	4b67      	ldr	r3, [pc, #412]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2209      	movs	r2, #9
 800f9cc:	4393      	bics	r3, r2
 800f9ce:	0019      	movs	r1, r3
 800f9d0:	4b64      	ldr	r3, [pc, #400]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f9d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9d4:	430a      	orrs	r2, r1
 800f9d6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f9d8:	f000 fc42 	bl	8010260 <HAL_RCC_GetSysClockFreq>
 800f9dc:	0001      	movs	r1, r0
 800f9de:	4b61      	ldr	r3, [pc, #388]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	091b      	lsrs	r3, r3, #4
 800f9e4:	220f      	movs	r2, #15
 800f9e6:	4013      	ands	r3, r2
 800f9e8:	4a62      	ldr	r2, [pc, #392]	@ (800fb74 <HAL_RCC_OscConfig+0x34c>)
 800f9ea:	5cd3      	ldrb	r3, [r2, r3]
 800f9ec:	000a      	movs	r2, r1
 800f9ee:	40da      	lsrs	r2, r3
 800f9f0:	4b61      	ldr	r3, [pc, #388]	@ (800fb78 <HAL_RCC_OscConfig+0x350>)
 800f9f2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800f9f4:	4b61      	ldr	r3, [pc, #388]	@ (800fb7c <HAL_RCC_OscConfig+0x354>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2513      	movs	r5, #19
 800f9fa:	197c      	adds	r4, r7, r5
 800f9fc:	0018      	movs	r0, r3
 800f9fe:	f7fa f953 	bl	8009ca8 <HAL_InitTick>
 800fa02:	0003      	movs	r3, r0
 800fa04:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800fa06:	197b      	adds	r3, r7, r5
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d046      	beq.n	800fa9c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800fa0e:	197b      	adds	r3, r7, r5
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	e2d2      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800fa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d027      	beq.n	800fa6a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800fa1a:	4b52      	ldr	r3, [pc, #328]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2209      	movs	r2, #9
 800fa20:	4393      	bics	r3, r2
 800fa22:	0019      	movs	r1, r3
 800fa24:	4b4f      	ldr	r3, [pc, #316]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fa26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa28:	430a      	orrs	r2, r1
 800fa2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa2c:	f7fa f982 	bl	8009d34 <HAL_GetTick>
 800fa30:	0003      	movs	r3, r0
 800fa32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa34:	e008      	b.n	800fa48 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fa36:	f7fa f97d 	bl	8009d34 <HAL_GetTick>
 800fa3a:	0002      	movs	r2, r0
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	d901      	bls.n	800fa48 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800fa44:	2303      	movs	r3, #3
 800fa46:	e2b8      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa48:	4b46      	ldr	r3, [pc, #280]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2204      	movs	r2, #4
 800fa4e:	4013      	ands	r3, r2
 800fa50:	d0f1      	beq.n	800fa36 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa52:	4b44      	ldr	r3, [pc, #272]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	4a46      	ldr	r2, [pc, #280]	@ (800fb70 <HAL_RCC_OscConfig+0x348>)
 800fa58:	4013      	ands	r3, r2
 800fa5a:	0019      	movs	r1, r3
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	021a      	lsls	r2, r3, #8
 800fa62:	4b40      	ldr	r3, [pc, #256]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fa64:	430a      	orrs	r2, r1
 800fa66:	605a      	str	r2, [r3, #4]
 800fa68:	e018      	b.n	800fa9c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fa6a:	4b3e      	ldr	r3, [pc, #248]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	4b3d      	ldr	r3, [pc, #244]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fa70:	2101      	movs	r1, #1
 800fa72:	438a      	bics	r2, r1
 800fa74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa76:	f7fa f95d 	bl	8009d34 <HAL_GetTick>
 800fa7a:	0003      	movs	r3, r0
 800fa7c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fa7e:	e008      	b.n	800fa92 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fa80:	f7fa f958 	bl	8009d34 <HAL_GetTick>
 800fa84:	0002      	movs	r2, r0
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	1ad3      	subs	r3, r2, r3
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d901      	bls.n	800fa92 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800fa8e:	2303      	movs	r3, #3
 800fa90:	e293      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fa92:	4b34      	ldr	r3, [pc, #208]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2204      	movs	r2, #4
 800fa98:	4013      	ands	r3, r2
 800fa9a:	d1f1      	bne.n	800fa80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2210      	movs	r2, #16
 800faa2:	4013      	ands	r3, r2
 800faa4:	d100      	bne.n	800faa8 <HAL_RCC_OscConfig+0x280>
 800faa6:	e0a2      	b.n	800fbee <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d140      	bne.n	800fb30 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800faae:	4b2d      	ldr	r3, [pc, #180]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	2380      	movs	r3, #128	@ 0x80
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	4013      	ands	r3, r2
 800fab8:	d005      	beq.n	800fac6 <HAL_RCC_OscConfig+0x29e>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	69db      	ldr	r3, [r3, #28]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d101      	bne.n	800fac6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800fac2:	2301      	movs	r3, #1
 800fac4:	e279      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fac6:	4b27      	ldr	r3, [pc, #156]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	4a2d      	ldr	r2, [pc, #180]	@ (800fb80 <HAL_RCC_OscConfig+0x358>)
 800facc:	4013      	ands	r3, r2
 800face:	0019      	movs	r1, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fad4:	4b23      	ldr	r3, [pc, #140]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fad6:	430a      	orrs	r2, r1
 800fad8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fada:	4b22      	ldr	r3, [pc, #136]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	021b      	lsls	r3, r3, #8
 800fae0:	0a19      	lsrs	r1, r3, #8
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	061a      	lsls	r2, r3, #24
 800fae8:	4b1e      	ldr	r3, [pc, #120]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800faea:	430a      	orrs	r2, r1
 800faec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faf2:	0b5b      	lsrs	r3, r3, #13
 800faf4:	3301      	adds	r3, #1
 800faf6:	2280      	movs	r2, #128	@ 0x80
 800faf8:	0212      	lsls	r2, r2, #8
 800fafa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800fafc:	4b19      	ldr	r3, [pc, #100]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	091b      	lsrs	r3, r3, #4
 800fb02:	210f      	movs	r1, #15
 800fb04:	400b      	ands	r3, r1
 800fb06:	491b      	ldr	r1, [pc, #108]	@ (800fb74 <HAL_RCC_OscConfig+0x34c>)
 800fb08:	5ccb      	ldrb	r3, [r1, r3]
 800fb0a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fb0c:	4b1a      	ldr	r3, [pc, #104]	@ (800fb78 <HAL_RCC_OscConfig+0x350>)
 800fb0e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800fb10:	4b1a      	ldr	r3, [pc, #104]	@ (800fb7c <HAL_RCC_OscConfig+0x354>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2513      	movs	r5, #19
 800fb16:	197c      	adds	r4, r7, r5
 800fb18:	0018      	movs	r0, r3
 800fb1a:	f7fa f8c5 	bl	8009ca8 <HAL_InitTick>
 800fb1e:	0003      	movs	r3, r0
 800fb20:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800fb22:	197b      	adds	r3, r7, r5
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d061      	beq.n	800fbee <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800fb2a:	197b      	adds	r3, r7, r5
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	e244      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	69db      	ldr	r3, [r3, #28]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d040      	beq.n	800fbba <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fb38:	4b0a      	ldr	r3, [pc, #40]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	4b09      	ldr	r3, [pc, #36]	@ (800fb64 <HAL_RCC_OscConfig+0x33c>)
 800fb3e:	2180      	movs	r1, #128	@ 0x80
 800fb40:	0049      	lsls	r1, r1, #1
 800fb42:	430a      	orrs	r2, r1
 800fb44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb46:	f7fa f8f5 	bl	8009d34 <HAL_GetTick>
 800fb4a:	0003      	movs	r3, r0
 800fb4c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fb4e:	e019      	b.n	800fb84 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fb50:	f7fa f8f0 	bl	8009d34 <HAL_GetTick>
 800fb54:	0002      	movs	r2, r0
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d912      	bls.n	800fb84 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800fb5e:	2303      	movs	r3, #3
 800fb60:	e22b      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
 800fb62:	46c0      	nop			@ (mov r8, r8)
 800fb64:	40021000 	.word	0x40021000
 800fb68:	fffeffff 	.word	0xfffeffff
 800fb6c:	fffbffff 	.word	0xfffbffff
 800fb70:	ffffe0ff 	.word	0xffffe0ff
 800fb74:	0801b970 	.word	0x0801b970
 800fb78:	20000094 	.word	0x20000094
 800fb7c:	200000a8 	.word	0x200000a8
 800fb80:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fb84:	4bca      	ldr	r3, [pc, #808]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	2380      	movs	r3, #128	@ 0x80
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	4013      	ands	r3, r2
 800fb8e:	d0df      	beq.n	800fb50 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fb90:	4bc7      	ldr	r3, [pc, #796]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	4ac7      	ldr	r2, [pc, #796]	@ (800feb4 <HAL_RCC_OscConfig+0x68c>)
 800fb96:	4013      	ands	r3, r2
 800fb98:	0019      	movs	r1, r3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb9e:	4bc4      	ldr	r3, [pc, #784]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fba0:	430a      	orrs	r2, r1
 800fba2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fba4:	4bc2      	ldr	r3, [pc, #776]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	021b      	lsls	r3, r3, #8
 800fbaa:	0a19      	lsrs	r1, r3, #8
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6a1b      	ldr	r3, [r3, #32]
 800fbb0:	061a      	lsls	r2, r3, #24
 800fbb2:	4bbf      	ldr	r3, [pc, #764]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fbb4:	430a      	orrs	r2, r1
 800fbb6:	605a      	str	r2, [r3, #4]
 800fbb8:	e019      	b.n	800fbee <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fbba:	4bbd      	ldr	r3, [pc, #756]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	4bbc      	ldr	r3, [pc, #752]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fbc0:	49bd      	ldr	r1, [pc, #756]	@ (800feb8 <HAL_RCC_OscConfig+0x690>)
 800fbc2:	400a      	ands	r2, r1
 800fbc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbc6:	f7fa f8b5 	bl	8009d34 <HAL_GetTick>
 800fbca:	0003      	movs	r3, r0
 800fbcc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fbce:	e008      	b.n	800fbe2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fbd0:	f7fa f8b0 	bl	8009d34 <HAL_GetTick>
 800fbd4:	0002      	movs	r2, r0
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	2b02      	cmp	r3, #2
 800fbdc:	d901      	bls.n	800fbe2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800fbde:	2303      	movs	r3, #3
 800fbe0:	e1eb      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fbe2:	4bb3      	ldr	r3, [pc, #716]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	2380      	movs	r3, #128	@ 0x80
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4013      	ands	r3, r2
 800fbec:	d1f0      	bne.n	800fbd0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2208      	movs	r2, #8
 800fbf4:	4013      	ands	r3, r2
 800fbf6:	d036      	beq.n	800fc66 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	695b      	ldr	r3, [r3, #20]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d019      	beq.n	800fc34 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fc00:	4bab      	ldr	r3, [pc, #684]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fc02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fc04:	4baa      	ldr	r3, [pc, #680]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fc06:	2101      	movs	r1, #1
 800fc08:	430a      	orrs	r2, r1
 800fc0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fc0c:	f7fa f892 	bl	8009d34 <HAL_GetTick>
 800fc10:	0003      	movs	r3, r0
 800fc12:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc14:	e008      	b.n	800fc28 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc16:	f7fa f88d 	bl	8009d34 <HAL_GetTick>
 800fc1a:	0002      	movs	r2, r0
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	1ad3      	subs	r3, r2, r3
 800fc20:	2b02      	cmp	r3, #2
 800fc22:	d901      	bls.n	800fc28 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800fc24:	2303      	movs	r3, #3
 800fc26:	e1c8      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc28:	4ba1      	ldr	r3, [pc, #644]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fc2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc2c:	2202      	movs	r2, #2
 800fc2e:	4013      	ands	r3, r2
 800fc30:	d0f1      	beq.n	800fc16 <HAL_RCC_OscConfig+0x3ee>
 800fc32:	e018      	b.n	800fc66 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fc34:	4b9e      	ldr	r3, [pc, #632]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fc36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fc38:	4b9d      	ldr	r3, [pc, #628]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fc3a:	2101      	movs	r1, #1
 800fc3c:	438a      	bics	r2, r1
 800fc3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fc40:	f7fa f878 	bl	8009d34 <HAL_GetTick>
 800fc44:	0003      	movs	r3, r0
 800fc46:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fc48:	e008      	b.n	800fc5c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc4a:	f7fa f873 	bl	8009d34 <HAL_GetTick>
 800fc4e:	0002      	movs	r2, r0
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	1ad3      	subs	r3, r2, r3
 800fc54:	2b02      	cmp	r3, #2
 800fc56:	d901      	bls.n	800fc5c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800fc58:	2303      	movs	r3, #3
 800fc5a:	e1ae      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fc5c:	4b94      	ldr	r3, [pc, #592]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fc5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc60:	2202      	movs	r2, #2
 800fc62:	4013      	ands	r3, r2
 800fc64:	d1f1      	bne.n	800fc4a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2204      	movs	r2, #4
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	d100      	bne.n	800fc72 <HAL_RCC_OscConfig+0x44a>
 800fc70:	e0ae      	b.n	800fdd0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fc72:	2023      	movs	r0, #35	@ 0x23
 800fc74:	183b      	adds	r3, r7, r0
 800fc76:	2200      	movs	r2, #0
 800fc78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fc7a:	4b8d      	ldr	r3, [pc, #564]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fc7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc7e:	2380      	movs	r3, #128	@ 0x80
 800fc80:	055b      	lsls	r3, r3, #21
 800fc82:	4013      	ands	r3, r2
 800fc84:	d109      	bne.n	800fc9a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fc86:	4b8a      	ldr	r3, [pc, #552]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fc88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc8a:	4b89      	ldr	r3, [pc, #548]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fc8c:	2180      	movs	r1, #128	@ 0x80
 800fc8e:	0549      	lsls	r1, r1, #21
 800fc90:	430a      	orrs	r2, r1
 800fc92:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800fc94:	183b      	adds	r3, r7, r0
 800fc96:	2201      	movs	r2, #1
 800fc98:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fc9a:	4b88      	ldr	r3, [pc, #544]	@ (800febc <HAL_RCC_OscConfig+0x694>)
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	2380      	movs	r3, #128	@ 0x80
 800fca0:	005b      	lsls	r3, r3, #1
 800fca2:	4013      	ands	r3, r2
 800fca4:	d11a      	bne.n	800fcdc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fca6:	4b85      	ldr	r3, [pc, #532]	@ (800febc <HAL_RCC_OscConfig+0x694>)
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	4b84      	ldr	r3, [pc, #528]	@ (800febc <HAL_RCC_OscConfig+0x694>)
 800fcac:	2180      	movs	r1, #128	@ 0x80
 800fcae:	0049      	lsls	r1, r1, #1
 800fcb0:	430a      	orrs	r2, r1
 800fcb2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fcb4:	f7fa f83e 	bl	8009d34 <HAL_GetTick>
 800fcb8:	0003      	movs	r3, r0
 800fcba:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fcbc:	e008      	b.n	800fcd0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fcbe:	f7fa f839 	bl	8009d34 <HAL_GetTick>
 800fcc2:	0002      	movs	r2, r0
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	2b64      	cmp	r3, #100	@ 0x64
 800fcca:	d901      	bls.n	800fcd0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800fccc:	2303      	movs	r3, #3
 800fcce:	e174      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fcd0:	4b7a      	ldr	r3, [pc, #488]	@ (800febc <HAL_RCC_OscConfig+0x694>)
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	2380      	movs	r3, #128	@ 0x80
 800fcd6:	005b      	lsls	r3, r3, #1
 800fcd8:	4013      	ands	r3, r2
 800fcda:	d0f0      	beq.n	800fcbe <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	689a      	ldr	r2, [r3, #8]
 800fce0:	2380      	movs	r3, #128	@ 0x80
 800fce2:	005b      	lsls	r3, r3, #1
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d107      	bne.n	800fcf8 <HAL_RCC_OscConfig+0x4d0>
 800fce8:	4b71      	ldr	r3, [pc, #452]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fcea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcec:	4b70      	ldr	r3, [pc, #448]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fcee:	2180      	movs	r1, #128	@ 0x80
 800fcf0:	0049      	lsls	r1, r1, #1
 800fcf2:	430a      	orrs	r2, r1
 800fcf4:	651a      	str	r2, [r3, #80]	@ 0x50
 800fcf6:	e031      	b.n	800fd5c <HAL_RCC_OscConfig+0x534>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	689b      	ldr	r3, [r3, #8]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d10c      	bne.n	800fd1a <HAL_RCC_OscConfig+0x4f2>
 800fd00:	4b6b      	ldr	r3, [pc, #428]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd04:	4b6a      	ldr	r3, [pc, #424]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd06:	496c      	ldr	r1, [pc, #432]	@ (800feb8 <HAL_RCC_OscConfig+0x690>)
 800fd08:	400a      	ands	r2, r1
 800fd0a:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd0c:	4b68      	ldr	r3, [pc, #416]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd10:	4b67      	ldr	r3, [pc, #412]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd12:	496b      	ldr	r1, [pc, #428]	@ (800fec0 <HAL_RCC_OscConfig+0x698>)
 800fd14:	400a      	ands	r2, r1
 800fd16:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd18:	e020      	b.n	800fd5c <HAL_RCC_OscConfig+0x534>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	689a      	ldr	r2, [r3, #8]
 800fd1e:	23a0      	movs	r3, #160	@ 0xa0
 800fd20:	00db      	lsls	r3, r3, #3
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d10e      	bne.n	800fd44 <HAL_RCC_OscConfig+0x51c>
 800fd26:	4b62      	ldr	r3, [pc, #392]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd2a:	4b61      	ldr	r3, [pc, #388]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd2c:	2180      	movs	r1, #128	@ 0x80
 800fd2e:	00c9      	lsls	r1, r1, #3
 800fd30:	430a      	orrs	r2, r1
 800fd32:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd34:	4b5e      	ldr	r3, [pc, #376]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd38:	4b5d      	ldr	r3, [pc, #372]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd3a:	2180      	movs	r1, #128	@ 0x80
 800fd3c:	0049      	lsls	r1, r1, #1
 800fd3e:	430a      	orrs	r2, r1
 800fd40:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd42:	e00b      	b.n	800fd5c <HAL_RCC_OscConfig+0x534>
 800fd44:	4b5a      	ldr	r3, [pc, #360]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd48:	4b59      	ldr	r3, [pc, #356]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd4a:	495b      	ldr	r1, [pc, #364]	@ (800feb8 <HAL_RCC_OscConfig+0x690>)
 800fd4c:	400a      	ands	r2, r1
 800fd4e:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd50:	4b57      	ldr	r3, [pc, #348]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd54:	4b56      	ldr	r3, [pc, #344]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd56:	495a      	ldr	r1, [pc, #360]	@ (800fec0 <HAL_RCC_OscConfig+0x698>)
 800fd58:	400a      	ands	r2, r1
 800fd5a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	689b      	ldr	r3, [r3, #8]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d015      	beq.n	800fd90 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd64:	f7f9 ffe6 	bl	8009d34 <HAL_GetTick>
 800fd68:	0003      	movs	r3, r0
 800fd6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fd6c:	e009      	b.n	800fd82 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd6e:	f7f9 ffe1 	bl	8009d34 <HAL_GetTick>
 800fd72:	0002      	movs	r2, r0
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	1ad3      	subs	r3, r2, r3
 800fd78:	4a52      	ldr	r2, [pc, #328]	@ (800fec4 <HAL_RCC_OscConfig+0x69c>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d901      	bls.n	800fd82 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800fd7e:	2303      	movs	r3, #3
 800fd80:	e11b      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fd82:	4b4b      	ldr	r3, [pc, #300]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fd84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd86:	2380      	movs	r3, #128	@ 0x80
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4013      	ands	r3, r2
 800fd8c:	d0ef      	beq.n	800fd6e <HAL_RCC_OscConfig+0x546>
 800fd8e:	e014      	b.n	800fdba <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd90:	f7f9 ffd0 	bl	8009d34 <HAL_GetTick>
 800fd94:	0003      	movs	r3, r0
 800fd96:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fd98:	e009      	b.n	800fdae <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd9a:	f7f9 ffcb 	bl	8009d34 <HAL_GetTick>
 800fd9e:	0002      	movs	r2, r0
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	1ad3      	subs	r3, r2, r3
 800fda4:	4a47      	ldr	r2, [pc, #284]	@ (800fec4 <HAL_RCC_OscConfig+0x69c>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d901      	bls.n	800fdae <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800fdaa:	2303      	movs	r3, #3
 800fdac:	e105      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fdae:	4b40      	ldr	r3, [pc, #256]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fdb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdb2:	2380      	movs	r3, #128	@ 0x80
 800fdb4:	009b      	lsls	r3, r3, #2
 800fdb6:	4013      	ands	r3, r2
 800fdb8:	d1ef      	bne.n	800fd9a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800fdba:	2323      	movs	r3, #35	@ 0x23
 800fdbc:	18fb      	adds	r3, r7, r3
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d105      	bne.n	800fdd0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fdc4:	4b3a      	ldr	r3, [pc, #232]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fdc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fdc8:	4b39      	ldr	r3, [pc, #228]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fdca:	493f      	ldr	r1, [pc, #252]	@ (800fec8 <HAL_RCC_OscConfig+0x6a0>)
 800fdcc:	400a      	ands	r2, r1
 800fdce:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2220      	movs	r2, #32
 800fdd6:	4013      	ands	r3, r2
 800fdd8:	d049      	beq.n	800fe6e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	699b      	ldr	r3, [r3, #24]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d026      	beq.n	800fe30 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800fde2:	4b33      	ldr	r3, [pc, #204]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fde4:	689a      	ldr	r2, [r3, #8]
 800fde6:	4b32      	ldr	r3, [pc, #200]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fde8:	2101      	movs	r1, #1
 800fdea:	430a      	orrs	r2, r1
 800fdec:	609a      	str	r2, [r3, #8]
 800fdee:	4b30      	ldr	r3, [pc, #192]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fdf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdf2:	4b2f      	ldr	r3, [pc, #188]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fdf4:	2101      	movs	r1, #1
 800fdf6:	430a      	orrs	r2, r1
 800fdf8:	635a      	str	r2, [r3, #52]	@ 0x34
 800fdfa:	4b34      	ldr	r3, [pc, #208]	@ (800fecc <HAL_RCC_OscConfig+0x6a4>)
 800fdfc:	6a1a      	ldr	r2, [r3, #32]
 800fdfe:	4b33      	ldr	r3, [pc, #204]	@ (800fecc <HAL_RCC_OscConfig+0x6a4>)
 800fe00:	2180      	movs	r1, #128	@ 0x80
 800fe02:	0189      	lsls	r1, r1, #6
 800fe04:	430a      	orrs	r2, r1
 800fe06:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe08:	f7f9 ff94 	bl	8009d34 <HAL_GetTick>
 800fe0c:	0003      	movs	r3, r0
 800fe0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fe10:	e008      	b.n	800fe24 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe12:	f7f9 ff8f 	bl	8009d34 <HAL_GetTick>
 800fe16:	0002      	movs	r2, r0
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	2b02      	cmp	r3, #2
 800fe1e:	d901      	bls.n	800fe24 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800fe20:	2303      	movs	r3, #3
 800fe22:	e0ca      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fe24:	4b22      	ldr	r3, [pc, #136]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	2202      	movs	r2, #2
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	d0f1      	beq.n	800fe12 <HAL_RCC_OscConfig+0x5ea>
 800fe2e:	e01e      	b.n	800fe6e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800fe30:	4b1f      	ldr	r3, [pc, #124]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fe32:	689a      	ldr	r2, [r3, #8]
 800fe34:	4b1e      	ldr	r3, [pc, #120]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fe36:	2101      	movs	r1, #1
 800fe38:	438a      	bics	r2, r1
 800fe3a:	609a      	str	r2, [r3, #8]
 800fe3c:	4b23      	ldr	r3, [pc, #140]	@ (800fecc <HAL_RCC_OscConfig+0x6a4>)
 800fe3e:	6a1a      	ldr	r2, [r3, #32]
 800fe40:	4b22      	ldr	r3, [pc, #136]	@ (800fecc <HAL_RCC_OscConfig+0x6a4>)
 800fe42:	4923      	ldr	r1, [pc, #140]	@ (800fed0 <HAL_RCC_OscConfig+0x6a8>)
 800fe44:	400a      	ands	r2, r1
 800fe46:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe48:	f7f9 ff74 	bl	8009d34 <HAL_GetTick>
 800fe4c:	0003      	movs	r3, r0
 800fe4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fe50:	e008      	b.n	800fe64 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe52:	f7f9 ff6f 	bl	8009d34 <HAL_GetTick>
 800fe56:	0002      	movs	r2, r0
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	2b02      	cmp	r3, #2
 800fe5e:	d901      	bls.n	800fe64 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800fe60:	2303      	movs	r3, #3
 800fe62:	e0aa      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fe64:	4b12      	ldr	r3, [pc, #72]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fe66:	689b      	ldr	r3, [r3, #8]
 800fe68:	2202      	movs	r2, #2
 800fe6a:	4013      	ands	r3, r2
 800fe6c:	d1f1      	bne.n	800fe52 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d100      	bne.n	800fe78 <HAL_RCC_OscConfig+0x650>
 800fe76:	e09f      	b.n	800ffb8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	2b0c      	cmp	r3, #12
 800fe7c:	d100      	bne.n	800fe80 <HAL_RCC_OscConfig+0x658>
 800fe7e:	e078      	b.n	800ff72 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	d159      	bne.n	800ff3c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fe88:	4b09      	ldr	r3, [pc, #36]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	4b08      	ldr	r3, [pc, #32]	@ (800feb0 <HAL_RCC_OscConfig+0x688>)
 800fe8e:	4911      	ldr	r1, [pc, #68]	@ (800fed4 <HAL_RCC_OscConfig+0x6ac>)
 800fe90:	400a      	ands	r2, r1
 800fe92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe94:	f7f9 ff4e 	bl	8009d34 <HAL_GetTick>
 800fe98:	0003      	movs	r3, r0
 800fe9a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800fe9c:	e01c      	b.n	800fed8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fe9e:	f7f9 ff49 	bl	8009d34 <HAL_GetTick>
 800fea2:	0002      	movs	r2, r0
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	1ad3      	subs	r3, r2, r3
 800fea8:	2b02      	cmp	r3, #2
 800feaa:	d915      	bls.n	800fed8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800feac:	2303      	movs	r3, #3
 800feae:	e084      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
 800feb0:	40021000 	.word	0x40021000
 800feb4:	ffff1fff 	.word	0xffff1fff
 800feb8:	fffffeff 	.word	0xfffffeff
 800febc:	40007000 	.word	0x40007000
 800fec0:	fffffbff 	.word	0xfffffbff
 800fec4:	00001388 	.word	0x00001388
 800fec8:	efffffff 	.word	0xefffffff
 800fecc:	40010000 	.word	0x40010000
 800fed0:	ffffdfff 	.word	0xffffdfff
 800fed4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800fed8:	4b3a      	ldr	r3, [pc, #232]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	2380      	movs	r3, #128	@ 0x80
 800fede:	049b      	lsls	r3, r3, #18
 800fee0:	4013      	ands	r3, r2
 800fee2:	d1dc      	bne.n	800fe9e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fee4:	4b37      	ldr	r3, [pc, #220]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	4a37      	ldr	r2, [pc, #220]	@ (800ffc8 <HAL_RCC_OscConfig+0x7a0>)
 800feea:	4013      	ands	r3, r2
 800feec:	0019      	movs	r1, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fef6:	431a      	orrs	r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fefc:	431a      	orrs	r2, r3
 800fefe:	4b31      	ldr	r3, [pc, #196]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800ff00:	430a      	orrs	r2, r1
 800ff02:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ff04:	4b2f      	ldr	r3, [pc, #188]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800ff06:	681a      	ldr	r2, [r3, #0]
 800ff08:	4b2e      	ldr	r3, [pc, #184]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800ff0a:	2180      	movs	r1, #128	@ 0x80
 800ff0c:	0449      	lsls	r1, r1, #17
 800ff0e:	430a      	orrs	r2, r1
 800ff10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff12:	f7f9 ff0f 	bl	8009d34 <HAL_GetTick>
 800ff16:	0003      	movs	r3, r0
 800ff18:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ff1a:	e008      	b.n	800ff2e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff1c:	f7f9 ff0a 	bl	8009d34 <HAL_GetTick>
 800ff20:	0002      	movs	r2, r0
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	1ad3      	subs	r3, r2, r3
 800ff26:	2b02      	cmp	r3, #2
 800ff28:	d901      	bls.n	800ff2e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800ff2a:	2303      	movs	r3, #3
 800ff2c:	e045      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ff2e:	4b25      	ldr	r3, [pc, #148]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	2380      	movs	r3, #128	@ 0x80
 800ff34:	049b      	lsls	r3, r3, #18
 800ff36:	4013      	ands	r3, r2
 800ff38:	d0f0      	beq.n	800ff1c <HAL_RCC_OscConfig+0x6f4>
 800ff3a:	e03d      	b.n	800ffb8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ff3c:	4b21      	ldr	r3, [pc, #132]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	4b20      	ldr	r3, [pc, #128]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800ff42:	4922      	ldr	r1, [pc, #136]	@ (800ffcc <HAL_RCC_OscConfig+0x7a4>)
 800ff44:	400a      	ands	r2, r1
 800ff46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff48:	f7f9 fef4 	bl	8009d34 <HAL_GetTick>
 800ff4c:	0003      	movs	r3, r0
 800ff4e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ff50:	e008      	b.n	800ff64 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff52:	f7f9 feef 	bl	8009d34 <HAL_GetTick>
 800ff56:	0002      	movs	r2, r0
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	1ad3      	subs	r3, r2, r3
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	d901      	bls.n	800ff64 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800ff60:	2303      	movs	r3, #3
 800ff62:	e02a      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ff64:	4b17      	ldr	r3, [pc, #92]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	2380      	movs	r3, #128	@ 0x80
 800ff6a:	049b      	lsls	r3, r3, #18
 800ff6c:	4013      	ands	r3, r2
 800ff6e:	d1f0      	bne.n	800ff52 <HAL_RCC_OscConfig+0x72a>
 800ff70:	e022      	b.n	800ffb8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d101      	bne.n	800ff7e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e01d      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ff7e:	4b11      	ldr	r3, [pc, #68]	@ (800ffc4 <HAL_RCC_OscConfig+0x79c>)
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff84:	69ba      	ldr	r2, [r7, #24]
 800ff86:	2380      	movs	r3, #128	@ 0x80
 800ff88:	025b      	lsls	r3, r3, #9
 800ff8a:	401a      	ands	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d10f      	bne.n	800ffb4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ff94:	69ba      	ldr	r2, [r7, #24]
 800ff96:	23f0      	movs	r3, #240	@ 0xf0
 800ff98:	039b      	lsls	r3, r3, #14
 800ff9a:	401a      	ands	r2, r3
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d107      	bne.n	800ffb4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ffa4:	69ba      	ldr	r2, [r7, #24]
 800ffa6:	23c0      	movs	r3, #192	@ 0xc0
 800ffa8:	041b      	lsls	r3, r3, #16
 800ffaa:	401a      	ands	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d001      	beq.n	800ffb8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e000      	b.n	800ffba <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800ffb8:	2300      	movs	r3, #0
}
 800ffba:	0018      	movs	r0, r3
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	b00a      	add	sp, #40	@ 0x28
 800ffc0:	bdb0      	pop	{r4, r5, r7, pc}
 800ffc2:	46c0      	nop			@ (mov r8, r8)
 800ffc4:	40021000 	.word	0x40021000
 800ffc8:	ff02ffff 	.word	0xff02ffff
 800ffcc:	feffffff 	.word	0xfeffffff

0800ffd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ffd0:	b5b0      	push	{r4, r5, r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d101      	bne.n	800ffe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e128      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ffe4:	4b96      	ldr	r3, [pc, #600]	@ (8010240 <HAL_RCC_ClockConfig+0x270>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	4013      	ands	r3, r2
 800ffec:	683a      	ldr	r2, [r7, #0]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d91e      	bls.n	8010030 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fff2:	4b93      	ldr	r3, [pc, #588]	@ (8010240 <HAL_RCC_ClockConfig+0x270>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2201      	movs	r2, #1
 800fff8:	4393      	bics	r3, r2
 800fffa:	0019      	movs	r1, r3
 800fffc:	4b90      	ldr	r3, [pc, #576]	@ (8010240 <HAL_RCC_ClockConfig+0x270>)
 800fffe:	683a      	ldr	r2, [r7, #0]
 8010000:	430a      	orrs	r2, r1
 8010002:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8010004:	f7f9 fe96 	bl	8009d34 <HAL_GetTick>
 8010008:	0003      	movs	r3, r0
 801000a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801000c:	e009      	b.n	8010022 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801000e:	f7f9 fe91 	bl	8009d34 <HAL_GetTick>
 8010012:	0002      	movs	r2, r0
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	4a8a      	ldr	r2, [pc, #552]	@ (8010244 <HAL_RCC_ClockConfig+0x274>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d901      	bls.n	8010022 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801001e:	2303      	movs	r3, #3
 8010020:	e109      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010022:	4b87      	ldr	r3, [pc, #540]	@ (8010240 <HAL_RCC_ClockConfig+0x270>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2201      	movs	r2, #1
 8010028:	4013      	ands	r3, r2
 801002a:	683a      	ldr	r2, [r7, #0]
 801002c:	429a      	cmp	r2, r3
 801002e:	d1ee      	bne.n	801000e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	2202      	movs	r2, #2
 8010036:	4013      	ands	r3, r2
 8010038:	d009      	beq.n	801004e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801003a:	4b83      	ldr	r3, [pc, #524]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	22f0      	movs	r2, #240	@ 0xf0
 8010040:	4393      	bics	r3, r2
 8010042:	0019      	movs	r1, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	689a      	ldr	r2, [r3, #8]
 8010048:	4b7f      	ldr	r3, [pc, #508]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 801004a:	430a      	orrs	r2, r1
 801004c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2201      	movs	r2, #1
 8010054:	4013      	ands	r3, r2
 8010056:	d100      	bne.n	801005a <HAL_RCC_ClockConfig+0x8a>
 8010058:	e089      	b.n	801016e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	2b02      	cmp	r3, #2
 8010060:	d107      	bne.n	8010072 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010062:	4b79      	ldr	r3, [pc, #484]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	2380      	movs	r3, #128	@ 0x80
 8010068:	029b      	lsls	r3, r3, #10
 801006a:	4013      	ands	r3, r2
 801006c:	d120      	bne.n	80100b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801006e:	2301      	movs	r3, #1
 8010070:	e0e1      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	2b03      	cmp	r3, #3
 8010078:	d107      	bne.n	801008a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801007a:	4b73      	ldr	r3, [pc, #460]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 801007c:	681a      	ldr	r2, [r3, #0]
 801007e:	2380      	movs	r3, #128	@ 0x80
 8010080:	049b      	lsls	r3, r3, #18
 8010082:	4013      	ands	r3, r2
 8010084:	d114      	bne.n	80100b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010086:	2301      	movs	r3, #1
 8010088:	e0d5      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d106      	bne.n	80100a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010092:	4b6d      	ldr	r3, [pc, #436]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	2204      	movs	r2, #4
 8010098:	4013      	ands	r3, r2
 801009a:	d109      	bne.n	80100b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801009c:	2301      	movs	r3, #1
 801009e:	e0ca      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80100a0:	4b69      	ldr	r3, [pc, #420]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	2380      	movs	r3, #128	@ 0x80
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	4013      	ands	r3, r2
 80100aa:	d101      	bne.n	80100b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80100ac:	2301      	movs	r3, #1
 80100ae:	e0c2      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80100b0:	4b65      	ldr	r3, [pc, #404]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	2203      	movs	r2, #3
 80100b6:	4393      	bics	r3, r2
 80100b8:	0019      	movs	r1, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685a      	ldr	r2, [r3, #4]
 80100be:	4b62      	ldr	r3, [pc, #392]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 80100c0:	430a      	orrs	r2, r1
 80100c2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80100c4:	f7f9 fe36 	bl	8009d34 <HAL_GetTick>
 80100c8:	0003      	movs	r3, r0
 80100ca:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	d111      	bne.n	80100f8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80100d4:	e009      	b.n	80100ea <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100d6:	f7f9 fe2d 	bl	8009d34 <HAL_GetTick>
 80100da:	0002      	movs	r2, r0
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	1ad3      	subs	r3, r2, r3
 80100e0:	4a58      	ldr	r2, [pc, #352]	@ (8010244 <HAL_RCC_ClockConfig+0x274>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d901      	bls.n	80100ea <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80100e6:	2303      	movs	r3, #3
 80100e8:	e0a5      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80100ea:	4b57      	ldr	r3, [pc, #348]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	220c      	movs	r2, #12
 80100f0:	4013      	ands	r3, r2
 80100f2:	2b08      	cmp	r3, #8
 80100f4:	d1ef      	bne.n	80100d6 <HAL_RCC_ClockConfig+0x106>
 80100f6:	e03a      	b.n	801016e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	2b03      	cmp	r3, #3
 80100fe:	d111      	bne.n	8010124 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010100:	e009      	b.n	8010116 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010102:	f7f9 fe17 	bl	8009d34 <HAL_GetTick>
 8010106:	0002      	movs	r2, r0
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	1ad3      	subs	r3, r2, r3
 801010c:	4a4d      	ldr	r2, [pc, #308]	@ (8010244 <HAL_RCC_ClockConfig+0x274>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d901      	bls.n	8010116 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8010112:	2303      	movs	r3, #3
 8010114:	e08f      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010116:	4b4c      	ldr	r3, [pc, #304]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 8010118:	68db      	ldr	r3, [r3, #12]
 801011a:	220c      	movs	r2, #12
 801011c:	4013      	ands	r3, r2
 801011e:	2b0c      	cmp	r3, #12
 8010120:	d1ef      	bne.n	8010102 <HAL_RCC_ClockConfig+0x132>
 8010122:	e024      	b.n	801016e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	2b01      	cmp	r3, #1
 801012a:	d11b      	bne.n	8010164 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801012c:	e009      	b.n	8010142 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801012e:	f7f9 fe01 	bl	8009d34 <HAL_GetTick>
 8010132:	0002      	movs	r2, r0
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	4a42      	ldr	r2, [pc, #264]	@ (8010244 <HAL_RCC_ClockConfig+0x274>)
 801013a:	4293      	cmp	r3, r2
 801013c:	d901      	bls.n	8010142 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801013e:	2303      	movs	r3, #3
 8010140:	e079      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010142:	4b41      	ldr	r3, [pc, #260]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	220c      	movs	r2, #12
 8010148:	4013      	ands	r3, r2
 801014a:	2b04      	cmp	r3, #4
 801014c:	d1ef      	bne.n	801012e <HAL_RCC_ClockConfig+0x15e>
 801014e:	e00e      	b.n	801016e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010150:	f7f9 fdf0 	bl	8009d34 <HAL_GetTick>
 8010154:	0002      	movs	r2, r0
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	1ad3      	subs	r3, r2, r3
 801015a:	4a3a      	ldr	r2, [pc, #232]	@ (8010244 <HAL_RCC_ClockConfig+0x274>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d901      	bls.n	8010164 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8010160:	2303      	movs	r3, #3
 8010162:	e068      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8010164:	4b38      	ldr	r3, [pc, #224]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	220c      	movs	r2, #12
 801016a:	4013      	ands	r3, r2
 801016c:	d1f0      	bne.n	8010150 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801016e:	4b34      	ldr	r3, [pc, #208]	@ (8010240 <HAL_RCC_ClockConfig+0x270>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	2201      	movs	r2, #1
 8010174:	4013      	ands	r3, r2
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	429a      	cmp	r2, r3
 801017a:	d21e      	bcs.n	80101ba <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801017c:	4b30      	ldr	r3, [pc, #192]	@ (8010240 <HAL_RCC_ClockConfig+0x270>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2201      	movs	r2, #1
 8010182:	4393      	bics	r3, r2
 8010184:	0019      	movs	r1, r3
 8010186:	4b2e      	ldr	r3, [pc, #184]	@ (8010240 <HAL_RCC_ClockConfig+0x270>)
 8010188:	683a      	ldr	r2, [r7, #0]
 801018a:	430a      	orrs	r2, r1
 801018c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801018e:	f7f9 fdd1 	bl	8009d34 <HAL_GetTick>
 8010192:	0003      	movs	r3, r0
 8010194:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010196:	e009      	b.n	80101ac <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010198:	f7f9 fdcc 	bl	8009d34 <HAL_GetTick>
 801019c:	0002      	movs	r2, r0
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	1ad3      	subs	r3, r2, r3
 80101a2:	4a28      	ldr	r2, [pc, #160]	@ (8010244 <HAL_RCC_ClockConfig+0x274>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d901      	bls.n	80101ac <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80101a8:	2303      	movs	r3, #3
 80101aa:	e044      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80101ac:	4b24      	ldr	r3, [pc, #144]	@ (8010240 <HAL_RCC_ClockConfig+0x270>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2201      	movs	r2, #1
 80101b2:	4013      	ands	r3, r2
 80101b4:	683a      	ldr	r2, [r7, #0]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d1ee      	bne.n	8010198 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2204      	movs	r2, #4
 80101c0:	4013      	ands	r3, r2
 80101c2:	d009      	beq.n	80101d8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80101c4:	4b20      	ldr	r3, [pc, #128]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 80101c6:	68db      	ldr	r3, [r3, #12]
 80101c8:	4a20      	ldr	r2, [pc, #128]	@ (801024c <HAL_RCC_ClockConfig+0x27c>)
 80101ca:	4013      	ands	r3, r2
 80101cc:	0019      	movs	r1, r3
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	68da      	ldr	r2, [r3, #12]
 80101d2:	4b1d      	ldr	r3, [pc, #116]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 80101d4:	430a      	orrs	r2, r1
 80101d6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	2208      	movs	r2, #8
 80101de:	4013      	ands	r3, r2
 80101e0:	d00a      	beq.n	80101f8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80101e2:	4b19      	ldr	r3, [pc, #100]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	4a1a      	ldr	r2, [pc, #104]	@ (8010250 <HAL_RCC_ClockConfig+0x280>)
 80101e8:	4013      	ands	r3, r2
 80101ea:	0019      	movs	r1, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	691b      	ldr	r3, [r3, #16]
 80101f0:	00da      	lsls	r2, r3, #3
 80101f2:	4b15      	ldr	r3, [pc, #84]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 80101f4:	430a      	orrs	r2, r1
 80101f6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80101f8:	f000 f832 	bl	8010260 <HAL_RCC_GetSysClockFreq>
 80101fc:	0001      	movs	r1, r0
 80101fe:	4b12      	ldr	r3, [pc, #72]	@ (8010248 <HAL_RCC_ClockConfig+0x278>)
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	091b      	lsrs	r3, r3, #4
 8010204:	220f      	movs	r2, #15
 8010206:	4013      	ands	r3, r2
 8010208:	4a12      	ldr	r2, [pc, #72]	@ (8010254 <HAL_RCC_ClockConfig+0x284>)
 801020a:	5cd3      	ldrb	r3, [r2, r3]
 801020c:	000a      	movs	r2, r1
 801020e:	40da      	lsrs	r2, r3
 8010210:	4b11      	ldr	r3, [pc, #68]	@ (8010258 <HAL_RCC_ClockConfig+0x288>)
 8010212:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010214:	4b11      	ldr	r3, [pc, #68]	@ (801025c <HAL_RCC_ClockConfig+0x28c>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	250b      	movs	r5, #11
 801021a:	197c      	adds	r4, r7, r5
 801021c:	0018      	movs	r0, r3
 801021e:	f7f9 fd43 	bl	8009ca8 <HAL_InitTick>
 8010222:	0003      	movs	r3, r0
 8010224:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8010226:	197b      	adds	r3, r7, r5
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d002      	beq.n	8010234 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801022e:	197b      	adds	r3, r7, r5
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	e000      	b.n	8010236 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8010234:	2300      	movs	r3, #0
}
 8010236:	0018      	movs	r0, r3
 8010238:	46bd      	mov	sp, r7
 801023a:	b004      	add	sp, #16
 801023c:	bdb0      	pop	{r4, r5, r7, pc}
 801023e:	46c0      	nop			@ (mov r8, r8)
 8010240:	40022000 	.word	0x40022000
 8010244:	00001388 	.word	0x00001388
 8010248:	40021000 	.word	0x40021000
 801024c:	fffff8ff 	.word	0xfffff8ff
 8010250:	ffffc7ff 	.word	0xffffc7ff
 8010254:	0801b970 	.word	0x0801b970
 8010258:	20000094 	.word	0x20000094
 801025c:	200000a8 	.word	0x200000a8

08010260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010260:	b5b0      	push	{r4, r5, r7, lr}
 8010262:	b08e      	sub	sp, #56	@ 0x38
 8010264:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8010266:	4b4c      	ldr	r3, [pc, #304]	@ (8010398 <HAL_RCC_GetSysClockFreq+0x138>)
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801026c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801026e:	230c      	movs	r3, #12
 8010270:	4013      	ands	r3, r2
 8010272:	2b0c      	cmp	r3, #12
 8010274:	d014      	beq.n	80102a0 <HAL_RCC_GetSysClockFreq+0x40>
 8010276:	d900      	bls.n	801027a <HAL_RCC_GetSysClockFreq+0x1a>
 8010278:	e07b      	b.n	8010372 <HAL_RCC_GetSysClockFreq+0x112>
 801027a:	2b04      	cmp	r3, #4
 801027c:	d002      	beq.n	8010284 <HAL_RCC_GetSysClockFreq+0x24>
 801027e:	2b08      	cmp	r3, #8
 8010280:	d00b      	beq.n	801029a <HAL_RCC_GetSysClockFreq+0x3a>
 8010282:	e076      	b.n	8010372 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010284:	4b44      	ldr	r3, [pc, #272]	@ (8010398 <HAL_RCC_GetSysClockFreq+0x138>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	2210      	movs	r2, #16
 801028a:	4013      	ands	r3, r2
 801028c:	d002      	beq.n	8010294 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801028e:	4b43      	ldr	r3, [pc, #268]	@ (801039c <HAL_RCC_GetSysClockFreq+0x13c>)
 8010290:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8010292:	e07c      	b.n	801038e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8010294:	4b42      	ldr	r3, [pc, #264]	@ (80103a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8010296:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010298:	e079      	b.n	801038e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801029a:	4b42      	ldr	r3, [pc, #264]	@ (80103a4 <HAL_RCC_GetSysClockFreq+0x144>)
 801029c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801029e:	e076      	b.n	801038e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80102a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a2:	0c9a      	lsrs	r2, r3, #18
 80102a4:	230f      	movs	r3, #15
 80102a6:	401a      	ands	r2, r3
 80102a8:	4b3f      	ldr	r3, [pc, #252]	@ (80103a8 <HAL_RCC_GetSysClockFreq+0x148>)
 80102aa:	5c9b      	ldrb	r3, [r3, r2]
 80102ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80102ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b0:	0d9a      	lsrs	r2, r3, #22
 80102b2:	2303      	movs	r3, #3
 80102b4:	4013      	ands	r3, r2
 80102b6:	3301      	adds	r3, #1
 80102b8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80102ba:	4b37      	ldr	r3, [pc, #220]	@ (8010398 <HAL_RCC_GetSysClockFreq+0x138>)
 80102bc:	68da      	ldr	r2, [r3, #12]
 80102be:	2380      	movs	r3, #128	@ 0x80
 80102c0:	025b      	lsls	r3, r3, #9
 80102c2:	4013      	ands	r3, r2
 80102c4:	d01a      	beq.n	80102fc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80102c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c8:	61bb      	str	r3, [r7, #24]
 80102ca:	2300      	movs	r3, #0
 80102cc:	61fb      	str	r3, [r7, #28]
 80102ce:	4a35      	ldr	r2, [pc, #212]	@ (80103a4 <HAL_RCC_GetSysClockFreq+0x144>)
 80102d0:	2300      	movs	r3, #0
 80102d2:	69b8      	ldr	r0, [r7, #24]
 80102d4:	69f9      	ldr	r1, [r7, #28]
 80102d6:	f7f0 f941 	bl	800055c <__aeabi_lmul>
 80102da:	0002      	movs	r2, r0
 80102dc:	000b      	movs	r3, r1
 80102de:	0010      	movs	r0, r2
 80102e0:	0019      	movs	r1, r3
 80102e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e4:	613b      	str	r3, [r7, #16]
 80102e6:	2300      	movs	r3, #0
 80102e8:	617b      	str	r3, [r7, #20]
 80102ea:	693a      	ldr	r2, [r7, #16]
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	f7f0 f915 	bl	800051c <__aeabi_uldivmod>
 80102f2:	0002      	movs	r2, r0
 80102f4:	000b      	movs	r3, r1
 80102f6:	0013      	movs	r3, r2
 80102f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80102fa:	e037      	b.n	801036c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80102fc:	4b26      	ldr	r3, [pc, #152]	@ (8010398 <HAL_RCC_GetSysClockFreq+0x138>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	2210      	movs	r2, #16
 8010302:	4013      	ands	r3, r2
 8010304:	d01a      	beq.n	801033c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8010306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010308:	60bb      	str	r3, [r7, #8]
 801030a:	2300      	movs	r3, #0
 801030c:	60fb      	str	r3, [r7, #12]
 801030e:	4a23      	ldr	r2, [pc, #140]	@ (801039c <HAL_RCC_GetSysClockFreq+0x13c>)
 8010310:	2300      	movs	r3, #0
 8010312:	68b8      	ldr	r0, [r7, #8]
 8010314:	68f9      	ldr	r1, [r7, #12]
 8010316:	f7f0 f921 	bl	800055c <__aeabi_lmul>
 801031a:	0002      	movs	r2, r0
 801031c:	000b      	movs	r3, r1
 801031e:	0010      	movs	r0, r2
 8010320:	0019      	movs	r1, r3
 8010322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010324:	603b      	str	r3, [r7, #0]
 8010326:	2300      	movs	r3, #0
 8010328:	607b      	str	r3, [r7, #4]
 801032a:	683a      	ldr	r2, [r7, #0]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f7f0 f8f5 	bl	800051c <__aeabi_uldivmod>
 8010332:	0002      	movs	r2, r0
 8010334:	000b      	movs	r3, r1
 8010336:	0013      	movs	r3, r2
 8010338:	637b      	str	r3, [r7, #52]	@ 0x34
 801033a:	e017      	b.n	801036c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801033c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801033e:	0018      	movs	r0, r3
 8010340:	2300      	movs	r3, #0
 8010342:	0019      	movs	r1, r3
 8010344:	4a16      	ldr	r2, [pc, #88]	@ (80103a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8010346:	2300      	movs	r3, #0
 8010348:	f7f0 f908 	bl	800055c <__aeabi_lmul>
 801034c:	0002      	movs	r2, r0
 801034e:	000b      	movs	r3, r1
 8010350:	0010      	movs	r0, r2
 8010352:	0019      	movs	r1, r3
 8010354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010356:	001c      	movs	r4, r3
 8010358:	2300      	movs	r3, #0
 801035a:	001d      	movs	r5, r3
 801035c:	0022      	movs	r2, r4
 801035e:	002b      	movs	r3, r5
 8010360:	f7f0 f8dc 	bl	800051c <__aeabi_uldivmod>
 8010364:	0002      	movs	r2, r0
 8010366:	000b      	movs	r3, r1
 8010368:	0013      	movs	r3, r2
 801036a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801036c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801036e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010370:	e00d      	b.n	801038e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8010372:	4b09      	ldr	r3, [pc, #36]	@ (8010398 <HAL_RCC_GetSysClockFreq+0x138>)
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	0b5b      	lsrs	r3, r3, #13
 8010378:	2207      	movs	r2, #7
 801037a:	4013      	ands	r3, r2
 801037c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801037e:	6a3b      	ldr	r3, [r7, #32]
 8010380:	3301      	adds	r3, #1
 8010382:	2280      	movs	r2, #128	@ 0x80
 8010384:	0212      	lsls	r2, r2, #8
 8010386:	409a      	lsls	r2, r3
 8010388:	0013      	movs	r3, r2
 801038a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801038c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801038e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8010390:	0018      	movs	r0, r3
 8010392:	46bd      	mov	sp, r7
 8010394:	b00e      	add	sp, #56	@ 0x38
 8010396:	bdb0      	pop	{r4, r5, r7, pc}
 8010398:	40021000 	.word	0x40021000
 801039c:	003d0900 	.word	0x003d0900
 80103a0:	00f42400 	.word	0x00f42400
 80103a4:	007a1200 	.word	0x007a1200
 80103a8:	0801b988 	.word	0x0801b988

080103ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80103b0:	4b02      	ldr	r3, [pc, #8]	@ (80103bc <HAL_RCC_GetHCLKFreq+0x10>)
 80103b2:	681b      	ldr	r3, [r3, #0]
}
 80103b4:	0018      	movs	r0, r3
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	46c0      	nop			@ (mov r8, r8)
 80103bc:	20000094 	.word	0x20000094

080103c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80103c4:	f7ff fff2 	bl	80103ac <HAL_RCC_GetHCLKFreq>
 80103c8:	0001      	movs	r1, r0
 80103ca:	4b06      	ldr	r3, [pc, #24]	@ (80103e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	0a1b      	lsrs	r3, r3, #8
 80103d0:	2207      	movs	r2, #7
 80103d2:	4013      	ands	r3, r2
 80103d4:	4a04      	ldr	r2, [pc, #16]	@ (80103e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80103d6:	5cd3      	ldrb	r3, [r2, r3]
 80103d8:	40d9      	lsrs	r1, r3
 80103da:	000b      	movs	r3, r1
}
 80103dc:	0018      	movs	r0, r3
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	46c0      	nop			@ (mov r8, r8)
 80103e4:	40021000 	.word	0x40021000
 80103e8:	0801b980 	.word	0x0801b980

080103ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80103f0:	f7ff ffdc 	bl	80103ac <HAL_RCC_GetHCLKFreq>
 80103f4:	0001      	movs	r1, r0
 80103f6:	4b06      	ldr	r3, [pc, #24]	@ (8010410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	0adb      	lsrs	r3, r3, #11
 80103fc:	2207      	movs	r2, #7
 80103fe:	4013      	ands	r3, r2
 8010400:	4a04      	ldr	r2, [pc, #16]	@ (8010414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010402:	5cd3      	ldrb	r3, [r2, r3]
 8010404:	40d9      	lsrs	r1, r3
 8010406:	000b      	movs	r3, r1
}
 8010408:	0018      	movs	r0, r3
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	46c0      	nop			@ (mov r8, r8)
 8010410:	40021000 	.word	0x40021000
 8010414:	0801b980 	.word	0x0801b980

08010418 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b086      	sub	sp, #24
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8010420:	2017      	movs	r0, #23
 8010422:	183b      	adds	r3, r7, r0
 8010424:	2200      	movs	r2, #0
 8010426:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2220      	movs	r2, #32
 801042e:	4013      	ands	r3, r2
 8010430:	d100      	bne.n	8010434 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8010432:	e0c7      	b.n	80105c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010434:	4b9b      	ldr	r3, [pc, #620]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010438:	2380      	movs	r3, #128	@ 0x80
 801043a:	055b      	lsls	r3, r3, #21
 801043c:	4013      	ands	r3, r2
 801043e:	d109      	bne.n	8010454 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010440:	4b98      	ldr	r3, [pc, #608]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010444:	4b97      	ldr	r3, [pc, #604]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010446:	2180      	movs	r1, #128	@ 0x80
 8010448:	0549      	lsls	r1, r1, #21
 801044a:	430a      	orrs	r2, r1
 801044c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801044e:	183b      	adds	r3, r7, r0
 8010450:	2201      	movs	r2, #1
 8010452:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010454:	4b94      	ldr	r3, [pc, #592]	@ (80106a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	2380      	movs	r3, #128	@ 0x80
 801045a:	005b      	lsls	r3, r3, #1
 801045c:	4013      	ands	r3, r2
 801045e:	d11a      	bne.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010460:	4b91      	ldr	r3, [pc, #580]	@ (80106a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	4b90      	ldr	r3, [pc, #576]	@ (80106a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010466:	2180      	movs	r1, #128	@ 0x80
 8010468:	0049      	lsls	r1, r1, #1
 801046a:	430a      	orrs	r2, r1
 801046c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801046e:	f7f9 fc61 	bl	8009d34 <HAL_GetTick>
 8010472:	0003      	movs	r3, r0
 8010474:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010476:	e008      	b.n	801048a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010478:	f7f9 fc5c 	bl	8009d34 <HAL_GetTick>
 801047c:	0002      	movs	r2, r0
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	1ad3      	subs	r3, r2, r3
 8010482:	2b64      	cmp	r3, #100	@ 0x64
 8010484:	d901      	bls.n	801048a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8010486:	2303      	movs	r3, #3
 8010488:	e107      	b.n	801069a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801048a:	4b87      	ldr	r3, [pc, #540]	@ (80106a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	2380      	movs	r3, #128	@ 0x80
 8010490:	005b      	lsls	r3, r3, #1
 8010492:	4013      	ands	r3, r2
 8010494:	d0f0      	beq.n	8010478 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8010496:	4b83      	ldr	r3, [pc, #524]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	23c0      	movs	r3, #192	@ 0xc0
 801049c:	039b      	lsls	r3, r3, #14
 801049e:	4013      	ands	r3, r2
 80104a0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	685a      	ldr	r2, [r3, #4]
 80104a6:	23c0      	movs	r3, #192	@ 0xc0
 80104a8:	039b      	lsls	r3, r3, #14
 80104aa:	4013      	ands	r3, r2
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d013      	beq.n	80104da <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	685a      	ldr	r2, [r3, #4]
 80104b6:	23c0      	movs	r3, #192	@ 0xc0
 80104b8:	029b      	lsls	r3, r3, #10
 80104ba:	401a      	ands	r2, r3
 80104bc:	23c0      	movs	r3, #192	@ 0xc0
 80104be:	029b      	lsls	r3, r3, #10
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d10a      	bne.n	80104da <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80104c4:	4b77      	ldr	r3, [pc, #476]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	2380      	movs	r3, #128	@ 0x80
 80104ca:	029b      	lsls	r3, r3, #10
 80104cc:	401a      	ands	r2, r3
 80104ce:	2380      	movs	r3, #128	@ 0x80
 80104d0:	029b      	lsls	r3, r3, #10
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d101      	bne.n	80104da <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80104d6:	2301      	movs	r3, #1
 80104d8:	e0df      	b.n	801069a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80104da:	4b72      	ldr	r3, [pc, #456]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80104dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104de:	23c0      	movs	r3, #192	@ 0xc0
 80104e0:	029b      	lsls	r3, r3, #10
 80104e2:	4013      	ands	r3, r2
 80104e4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d03b      	beq.n	8010564 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	685a      	ldr	r2, [r3, #4]
 80104f0:	23c0      	movs	r3, #192	@ 0xc0
 80104f2:	029b      	lsls	r3, r3, #10
 80104f4:	4013      	ands	r3, r2
 80104f6:	68fa      	ldr	r2, [r7, #12]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d033      	beq.n	8010564 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2220      	movs	r2, #32
 8010502:	4013      	ands	r3, r2
 8010504:	d02e      	beq.n	8010564 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8010506:	4b67      	ldr	r3, [pc, #412]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801050a:	4a68      	ldr	r2, [pc, #416]	@ (80106ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801050c:	4013      	ands	r3, r2
 801050e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8010510:	4b64      	ldr	r3, [pc, #400]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010512:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010514:	4b63      	ldr	r3, [pc, #396]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010516:	2180      	movs	r1, #128	@ 0x80
 8010518:	0309      	lsls	r1, r1, #12
 801051a:	430a      	orrs	r2, r1
 801051c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801051e:	4b61      	ldr	r3, [pc, #388]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010522:	4b60      	ldr	r3, [pc, #384]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010524:	4962      	ldr	r1, [pc, #392]	@ (80106b0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8010526:	400a      	ands	r2, r1
 8010528:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801052a:	4b5e      	ldr	r3, [pc, #376]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	2380      	movs	r3, #128	@ 0x80
 8010534:	005b      	lsls	r3, r3, #1
 8010536:	4013      	ands	r3, r2
 8010538:	d014      	beq.n	8010564 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801053a:	f7f9 fbfb 	bl	8009d34 <HAL_GetTick>
 801053e:	0003      	movs	r3, r0
 8010540:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010542:	e009      	b.n	8010558 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010544:	f7f9 fbf6 	bl	8009d34 <HAL_GetTick>
 8010548:	0002      	movs	r2, r0
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	4a59      	ldr	r2, [pc, #356]	@ (80106b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d901      	bls.n	8010558 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8010554:	2303      	movs	r3, #3
 8010556:	e0a0      	b.n	801069a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010558:	4b52      	ldr	r3, [pc, #328]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801055a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801055c:	2380      	movs	r3, #128	@ 0x80
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	4013      	ands	r3, r2
 8010562:	d0ef      	beq.n	8010544 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2220      	movs	r2, #32
 801056a:	4013      	ands	r3, r2
 801056c:	d01f      	beq.n	80105ae <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	685a      	ldr	r2, [r3, #4]
 8010572:	23c0      	movs	r3, #192	@ 0xc0
 8010574:	029b      	lsls	r3, r3, #10
 8010576:	401a      	ands	r2, r3
 8010578:	23c0      	movs	r3, #192	@ 0xc0
 801057a:	029b      	lsls	r3, r3, #10
 801057c:	429a      	cmp	r2, r3
 801057e:	d10c      	bne.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8010580:	4b48      	ldr	r3, [pc, #288]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4a4c      	ldr	r2, [pc, #304]	@ (80106b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8010586:	4013      	ands	r3, r2
 8010588:	0019      	movs	r1, r3
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	685a      	ldr	r2, [r3, #4]
 801058e:	23c0      	movs	r3, #192	@ 0xc0
 8010590:	039b      	lsls	r3, r3, #14
 8010592:	401a      	ands	r2, r3
 8010594:	4b43      	ldr	r3, [pc, #268]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010596:	430a      	orrs	r2, r1
 8010598:	601a      	str	r2, [r3, #0]
 801059a:	4b42      	ldr	r3, [pc, #264]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801059c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	685a      	ldr	r2, [r3, #4]
 80105a2:	23c0      	movs	r3, #192	@ 0xc0
 80105a4:	029b      	lsls	r3, r3, #10
 80105a6:	401a      	ands	r2, r3
 80105a8:	4b3e      	ldr	r3, [pc, #248]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105aa:	430a      	orrs	r2, r1
 80105ac:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80105ae:	2317      	movs	r3, #23
 80105b0:	18fb      	adds	r3, r7, r3
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d105      	bne.n	80105c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80105b8:	4b3a      	ldr	r3, [pc, #232]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105bc:	4b39      	ldr	r3, [pc, #228]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105be:	493f      	ldr	r1, [pc, #252]	@ (80106bc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80105c0:	400a      	ands	r2, r1
 80105c2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2201      	movs	r2, #1
 80105ca:	4013      	ands	r3, r2
 80105cc:	d009      	beq.n	80105e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80105ce:	4b35      	ldr	r3, [pc, #212]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105d2:	2203      	movs	r2, #3
 80105d4:	4393      	bics	r3, r2
 80105d6:	0019      	movs	r1, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	689a      	ldr	r2, [r3, #8]
 80105dc:	4b31      	ldr	r3, [pc, #196]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105de:	430a      	orrs	r2, r1
 80105e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	2202      	movs	r2, #2
 80105e8:	4013      	ands	r3, r2
 80105ea:	d009      	beq.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80105ec:	4b2d      	ldr	r3, [pc, #180]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105f0:	220c      	movs	r2, #12
 80105f2:	4393      	bics	r3, r2
 80105f4:	0019      	movs	r1, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68da      	ldr	r2, [r3, #12]
 80105fa:	4b2a      	ldr	r3, [pc, #168]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105fc:	430a      	orrs	r2, r1
 80105fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2204      	movs	r2, #4
 8010606:	4013      	ands	r3, r2
 8010608:	d009      	beq.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801060a:	4b26      	ldr	r3, [pc, #152]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801060e:	4a2c      	ldr	r2, [pc, #176]	@ (80106c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8010610:	4013      	ands	r3, r2
 8010612:	0019      	movs	r1, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	691a      	ldr	r2, [r3, #16]
 8010618:	4b22      	ldr	r3, [pc, #136]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801061a:	430a      	orrs	r2, r1
 801061c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	2208      	movs	r2, #8
 8010624:	4013      	ands	r3, r2
 8010626:	d009      	beq.n	801063c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010628:	4b1e      	ldr	r3, [pc, #120]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801062a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801062c:	4a25      	ldr	r2, [pc, #148]	@ (80106c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801062e:	4013      	ands	r3, r2
 8010630:	0019      	movs	r1, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	695a      	ldr	r2, [r3, #20]
 8010636:	4b1b      	ldr	r3, [pc, #108]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010638:	430a      	orrs	r2, r1
 801063a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681a      	ldr	r2, [r3, #0]
 8010640:	2380      	movs	r3, #128	@ 0x80
 8010642:	005b      	lsls	r3, r3, #1
 8010644:	4013      	ands	r3, r2
 8010646:	d009      	beq.n	801065c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010648:	4b16      	ldr	r3, [pc, #88]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801064c:	4a17      	ldr	r2, [pc, #92]	@ (80106ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801064e:	4013      	ands	r3, r2
 8010650:	0019      	movs	r1, r3
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	699a      	ldr	r2, [r3, #24]
 8010656:	4b13      	ldr	r3, [pc, #76]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010658:	430a      	orrs	r2, r1
 801065a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2240      	movs	r2, #64	@ 0x40
 8010662:	4013      	ands	r3, r2
 8010664:	d009      	beq.n	801067a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010666:	4b0f      	ldr	r3, [pc, #60]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801066a:	4a17      	ldr	r2, [pc, #92]	@ (80106c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801066c:	4013      	ands	r3, r2
 801066e:	0019      	movs	r1, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6a1a      	ldr	r2, [r3, #32]
 8010674:	4b0b      	ldr	r3, [pc, #44]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010676:	430a      	orrs	r2, r1
 8010678:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	2280      	movs	r2, #128	@ 0x80
 8010680:	4013      	ands	r3, r2
 8010682:	d009      	beq.n	8010698 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8010684:	4b07      	ldr	r3, [pc, #28]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010688:	4a10      	ldr	r2, [pc, #64]	@ (80106cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801068a:	4013      	ands	r3, r2
 801068c:	0019      	movs	r1, r3
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	69da      	ldr	r2, [r3, #28]
 8010692:	4b04      	ldr	r3, [pc, #16]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010694:	430a      	orrs	r2, r1
 8010696:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	0018      	movs	r0, r3
 801069c:	46bd      	mov	sp, r7
 801069e:	b006      	add	sp, #24
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	46c0      	nop			@ (mov r8, r8)
 80106a4:	40021000 	.word	0x40021000
 80106a8:	40007000 	.word	0x40007000
 80106ac:	fffcffff 	.word	0xfffcffff
 80106b0:	fff7ffff 	.word	0xfff7ffff
 80106b4:	00001388 	.word	0x00001388
 80106b8:	ffcfffff 	.word	0xffcfffff
 80106bc:	efffffff 	.word	0xefffffff
 80106c0:	fffff3ff 	.word	0xfffff3ff
 80106c4:	ffffcfff 	.word	0xffffcfff
 80106c8:	fbffffff 	.word	0xfbffffff
 80106cc:	fff3ffff 	.word	0xfff3ffff

080106d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80106d0:	b5b0      	push	{r4, r5, r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80106d8:	230f      	movs	r3, #15
 80106da:	18fb      	adds	r3, r7, r3
 80106dc:	2201      	movs	r2, #1
 80106de:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d101      	bne.n	80106ea <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80106e6:	2301      	movs	r3, #1
 80106e8:	e088      	b.n	80107fc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2221      	movs	r2, #33	@ 0x21
 80106ee:	5c9b      	ldrb	r3, [r3, r2]
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d107      	bne.n	8010706 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2220      	movs	r2, #32
 80106fa:	2100      	movs	r1, #0
 80106fc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	0018      	movs	r0, r3
 8010702:	f7f6 fdcd 	bl	80072a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2221      	movs	r2, #33	@ 0x21
 801070a:	2102      	movs	r1, #2
 801070c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	2210      	movs	r2, #16
 8010716:	4013      	ands	r3, r2
 8010718:	2b10      	cmp	r3, #16
 801071a:	d05f      	beq.n	80107dc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	22ca      	movs	r2, #202	@ 0xca
 8010722:	625a      	str	r2, [r3, #36]	@ 0x24
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2253      	movs	r2, #83	@ 0x53
 801072a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801072c:	250f      	movs	r5, #15
 801072e:	197c      	adds	r4, r7, r5
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	0018      	movs	r0, r3
 8010734:	f000 f890 	bl	8010858 <RTC_EnterInitMode>
 8010738:	0003      	movs	r3, r0
 801073a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801073c:	0028      	movs	r0, r5
 801073e:	183b      	adds	r3, r7, r0
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d12c      	bne.n	80107a0 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	689a      	ldr	r2, [r3, #8]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	492c      	ldr	r1, [pc, #176]	@ (8010804 <HAL_RTC_Init+0x134>)
 8010752:	400a      	ands	r2, r1
 8010754:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	6899      	ldr	r1, [r3, #8]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	685a      	ldr	r2, [r3, #4]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	691b      	ldr	r3, [r3, #16]
 8010764:	431a      	orrs	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	699b      	ldr	r3, [r3, #24]
 801076a:	431a      	orrs	r2, r3
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	430a      	orrs	r2, r1
 8010772:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	68d2      	ldr	r2, [r2, #12]
 801077c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	6919      	ldr	r1, [r3, #16]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	689b      	ldr	r3, [r3, #8]
 8010788:	041a      	lsls	r2, r3, #16
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	430a      	orrs	r2, r1
 8010790:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010792:	183c      	adds	r4, r7, r0
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	0018      	movs	r0, r3
 8010798:	f000 f8a2 	bl	80108e0 <RTC_ExitInitMode>
 801079c:	0003      	movs	r3, r0
 801079e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80107a0:	230f      	movs	r3, #15
 80107a2:	18fb      	adds	r3, r7, r3
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d113      	bne.n	80107d2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2103      	movs	r1, #3
 80107b6:	438a      	bics	r2, r1
 80107b8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	69da      	ldr	r2, [r3, #28]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	695b      	ldr	r3, [r3, #20]
 80107c8:	431a      	orrs	r2, r3
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	430a      	orrs	r2, r1
 80107d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	22ff      	movs	r2, #255	@ 0xff
 80107d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80107da:	e003      	b.n	80107e4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80107dc:	230f      	movs	r3, #15
 80107de:	18fb      	adds	r3, r7, r3
 80107e0:	2200      	movs	r2, #0
 80107e2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80107e4:	230f      	movs	r3, #15
 80107e6:	18fb      	adds	r3, r7, r3
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d103      	bne.n	80107f6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2221      	movs	r2, #33	@ 0x21
 80107f2:	2101      	movs	r1, #1
 80107f4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80107f6:	230f      	movs	r3, #15
 80107f8:	18fb      	adds	r3, r7, r3
 80107fa:	781b      	ldrb	r3, [r3, #0]
}
 80107fc:	0018      	movs	r0, r3
 80107fe:	46bd      	mov	sp, r7
 8010800:	b004      	add	sp, #16
 8010802:	bdb0      	pop	{r4, r5, r7, pc}
 8010804:	ff8fffbf 	.word	0xff8fffbf

08010808 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010810:	2300      	movs	r3, #0
 8010812:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4a0e      	ldr	r2, [pc, #56]	@ (8010854 <HAL_RTC_WaitForSynchro+0x4c>)
 801081a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801081c:	f7f9 fa8a 	bl	8009d34 <HAL_GetTick>
 8010820:	0003      	movs	r3, r0
 8010822:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010824:	e00a      	b.n	801083c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010826:	f7f9 fa85 	bl	8009d34 <HAL_GetTick>
 801082a:	0002      	movs	r2, r0
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	1ad2      	subs	r2, r2, r3
 8010830:	23fa      	movs	r3, #250	@ 0xfa
 8010832:	009b      	lsls	r3, r3, #2
 8010834:	429a      	cmp	r2, r3
 8010836:	d901      	bls.n	801083c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010838:	2303      	movs	r3, #3
 801083a:	e006      	b.n	801084a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	68db      	ldr	r3, [r3, #12]
 8010842:	2220      	movs	r2, #32
 8010844:	4013      	ands	r3, r2
 8010846:	d0ee      	beq.n	8010826 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8010848:	2300      	movs	r3, #0
}
 801084a:	0018      	movs	r0, r3
 801084c:	46bd      	mov	sp, r7
 801084e:	b004      	add	sp, #16
 8010850:	bd80      	pop	{r7, pc}
 8010852:	46c0      	nop			@ (mov r8, r8)
 8010854:	0001ff5f 	.word	0x0001ff5f

08010858 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b084      	sub	sp, #16
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010860:	2300      	movs	r3, #0
 8010862:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010864:	230f      	movs	r3, #15
 8010866:	18fb      	adds	r3, r7, r3
 8010868:	2200      	movs	r2, #0
 801086a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	2240      	movs	r2, #64	@ 0x40
 8010874:	4013      	ands	r3, r2
 8010876:	d12c      	bne.n	80108d2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	68da      	ldr	r2, [r3, #12]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	2180      	movs	r1, #128	@ 0x80
 8010884:	430a      	orrs	r2, r1
 8010886:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010888:	f7f9 fa54 	bl	8009d34 <HAL_GetTick>
 801088c:	0003      	movs	r3, r0
 801088e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010890:	e014      	b.n	80108bc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010892:	f7f9 fa4f 	bl	8009d34 <HAL_GetTick>
 8010896:	0002      	movs	r2, r0
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	1ad2      	subs	r2, r2, r3
 801089c:	200f      	movs	r0, #15
 801089e:	183b      	adds	r3, r7, r0
 80108a0:	1839      	adds	r1, r7, r0
 80108a2:	7809      	ldrb	r1, [r1, #0]
 80108a4:	7019      	strb	r1, [r3, #0]
 80108a6:	23fa      	movs	r3, #250	@ 0xfa
 80108a8:	009b      	lsls	r3, r3, #2
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d906      	bls.n	80108bc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2221      	movs	r2, #33	@ 0x21
 80108b2:	2104      	movs	r1, #4
 80108b4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80108b6:	183b      	adds	r3, r7, r0
 80108b8:	2201      	movs	r2, #1
 80108ba:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	2240      	movs	r2, #64	@ 0x40
 80108c4:	4013      	ands	r3, r2
 80108c6:	d104      	bne.n	80108d2 <RTC_EnterInitMode+0x7a>
 80108c8:	230f      	movs	r3, #15
 80108ca:	18fb      	adds	r3, r7, r3
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d1df      	bne.n	8010892 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80108d2:	230f      	movs	r3, #15
 80108d4:	18fb      	adds	r3, r7, r3
 80108d6:	781b      	ldrb	r3, [r3, #0]
}
 80108d8:	0018      	movs	r0, r3
 80108da:	46bd      	mov	sp, r7
 80108dc:	b004      	add	sp, #16
 80108de:	bd80      	pop	{r7, pc}

080108e0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80108e0:	b590      	push	{r4, r7, lr}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80108e8:	240f      	movs	r4, #15
 80108ea:	193b      	adds	r3, r7, r4
 80108ec:	2200      	movs	r2, #0
 80108ee:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	68da      	ldr	r2, [r3, #12]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	2180      	movs	r1, #128	@ 0x80
 80108fc:	438a      	bics	r2, r1
 80108fe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	689b      	ldr	r3, [r3, #8]
 8010906:	2220      	movs	r2, #32
 8010908:	4013      	ands	r3, r2
 801090a:	d10c      	bne.n	8010926 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	0018      	movs	r0, r3
 8010910:	f7ff ff7a 	bl	8010808 <HAL_RTC_WaitForSynchro>
 8010914:	1e03      	subs	r3, r0, #0
 8010916:	d006      	beq.n	8010926 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2221      	movs	r2, #33	@ 0x21
 801091c:	2104      	movs	r1, #4
 801091e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8010920:	193b      	adds	r3, r7, r4
 8010922:	2201      	movs	r2, #1
 8010924:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8010926:	230f      	movs	r3, #15
 8010928:	18fb      	adds	r3, r7, r3
 801092a:	781b      	ldrb	r3, [r3, #0]
}
 801092c:	0018      	movs	r0, r3
 801092e:	46bd      	mov	sp, r7
 8010930:	b005      	add	sp, #20
 8010932:	bd90      	pop	{r4, r7, pc}

08010934 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b086      	sub	sp, #24
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8010940:	2300      	movs	r3, #0
 8010942:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2220      	movs	r2, #32
 8010948:	5c9b      	ldrb	r3, [r3, r2]
 801094a:	2b01      	cmp	r3, #1
 801094c:	d101      	bne.n	8010952 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 801094e:	2302      	movs	r3, #2
 8010950:	e096      	b.n	8010a80 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2220      	movs	r2, #32
 8010956:	2101      	movs	r1, #1
 8010958:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2221      	movs	r2, #33	@ 0x21
 801095e:	2102      	movs	r1, #2
 8010960:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	22ca      	movs	r2, #202	@ 0xca
 8010968:	625a      	str	r2, [r3, #36]	@ 0x24
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2253      	movs	r2, #83	@ 0x53
 8010970:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	689a      	ldr	r2, [r3, #8]
 8010978:	2380      	movs	r3, #128	@ 0x80
 801097a:	00db      	lsls	r3, r3, #3
 801097c:	4013      	ands	r3, r2
 801097e:	d021      	beq.n	80109c4 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8010980:	f7f9 f9d8 	bl	8009d34 <HAL_GetTick>
 8010984:	0003      	movs	r3, r0
 8010986:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8010988:	e016      	b.n	80109b8 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801098a:	f7f9 f9d3 	bl	8009d34 <HAL_GetTick>
 801098e:	0002      	movs	r2, r0
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	1ad2      	subs	r2, r2, r3
 8010994:	23fa      	movs	r3, #250	@ 0xfa
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	429a      	cmp	r2, r3
 801099a:	d90d      	bls.n	80109b8 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	22ff      	movs	r2, #255	@ 0xff
 80109a2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2221      	movs	r2, #33	@ 0x21
 80109a8:	2103      	movs	r1, #3
 80109aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2220      	movs	r2, #32
 80109b0:	2100      	movs	r1, #0
 80109b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80109b4:	2303      	movs	r3, #3
 80109b6:	e063      	b.n	8010a80 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	2204      	movs	r2, #4
 80109c0:	4013      	ands	r3, r2
 80109c2:	d1e2      	bne.n	801098a <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	689a      	ldr	r2, [r3, #8]
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	492e      	ldr	r1, [pc, #184]	@ (8010a88 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 80109d0:	400a      	ands	r2, r1
 80109d2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	22ff      	movs	r2, #255	@ 0xff
 80109dc:	401a      	ands	r2, r3
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	492a      	ldr	r1, [pc, #168]	@ (8010a8c <HAL_RTCEx_SetWakeUpTimer+0x158>)
 80109e4:	430a      	orrs	r2, r1
 80109e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80109e8:	f7f9 f9a4 	bl	8009d34 <HAL_GetTick>
 80109ec:	0003      	movs	r3, r0
 80109ee:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80109f0:	e016      	b.n	8010a20 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80109f2:	f7f9 f99f 	bl	8009d34 <HAL_GetTick>
 80109f6:	0002      	movs	r2, r0
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	1ad2      	subs	r2, r2, r3
 80109fc:	23fa      	movs	r3, #250	@ 0xfa
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d90d      	bls.n	8010a20 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	22ff      	movs	r2, #255	@ 0xff
 8010a0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2221      	movs	r2, #33	@ 0x21
 8010a10:	2103      	movs	r1, #3
 8010a12:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2220      	movs	r2, #32
 8010a18:	2100      	movs	r1, #0
 8010a1a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8010a1c:	2303      	movs	r3, #3
 8010a1e:	e02f      	b.n	8010a80 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	68db      	ldr	r3, [r3, #12]
 8010a26:	2204      	movs	r2, #4
 8010a28:	4013      	ands	r3, r2
 8010a2a:	d0e2      	beq.n	80109f2 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	689a      	ldr	r2, [r3, #8]
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2107      	movs	r1, #7
 8010a38:	438a      	bics	r2, r1
 8010a3a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	6899      	ldr	r1, [r3, #8]
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	430a      	orrs	r2, r1
 8010a4a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	68ba      	ldr	r2, [r7, #8]
 8010a52:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	689a      	ldr	r2, [r3, #8]
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2180      	movs	r1, #128	@ 0x80
 8010a60:	00c9      	lsls	r1, r1, #3
 8010a62:	430a      	orrs	r2, r1
 8010a64:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	22ff      	movs	r2, #255	@ 0xff
 8010a6c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2221      	movs	r2, #33	@ 0x21
 8010a72:	2101      	movs	r1, #1
 8010a74:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2220      	movs	r2, #32
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010a7e:	2300      	movs	r3, #0
}
 8010a80:	0018      	movs	r0, r3
 8010a82:	46bd      	mov	sp, r7
 8010a84:	b006      	add	sp, #24
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	fffffbff 	.word	0xfffffbff
 8010a8c:	fffffb7f 	.word	0xfffffb7f

08010a90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d101      	bne.n	8010aa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	e032      	b.n	8010b08 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2239      	movs	r2, #57	@ 0x39
 8010aa6:	5c9b      	ldrb	r3, [r3, r2]
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d107      	bne.n	8010abe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2238      	movs	r2, #56	@ 0x38
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	0018      	movs	r0, r3
 8010aba:	f7f8 faf3 	bl	80090a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2239      	movs	r2, #57	@ 0x39
 8010ac2:	2102      	movs	r1, #2
 8010ac4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681a      	ldr	r2, [r3, #0]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	3304      	adds	r3, #4
 8010ace:	0019      	movs	r1, r3
 8010ad0:	0010      	movs	r0, r2
 8010ad2:	f000 f975 	bl	8010dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	223e      	movs	r2, #62	@ 0x3e
 8010ada:	2101      	movs	r1, #1
 8010adc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	223a      	movs	r2, #58	@ 0x3a
 8010ae2:	2101      	movs	r1, #1
 8010ae4:	5499      	strb	r1, [r3, r2]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	223b      	movs	r2, #59	@ 0x3b
 8010aea:	2101      	movs	r1, #1
 8010aec:	5499      	strb	r1, [r3, r2]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	223c      	movs	r2, #60	@ 0x3c
 8010af2:	2101      	movs	r1, #1
 8010af4:	5499      	strb	r1, [r3, r2]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	223d      	movs	r2, #61	@ 0x3d
 8010afa:	2101      	movs	r1, #1
 8010afc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2239      	movs	r2, #57	@ 0x39
 8010b02:	2101      	movs	r1, #1
 8010b04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010b06:	2300      	movs	r3, #0
}
 8010b08:	0018      	movs	r0, r3
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	b002      	add	sp, #8
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d108      	bne.n	8010b32 <HAL_TIM_PWM_Start+0x22>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	223a      	movs	r2, #58	@ 0x3a
 8010b24:	5c9b      	ldrb	r3, [r3, r2]
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	3b01      	subs	r3, #1
 8010b2a:	1e5a      	subs	r2, r3, #1
 8010b2c:	4193      	sbcs	r3, r2
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	e01f      	b.n	8010b72 <HAL_TIM_PWM_Start+0x62>
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	2b04      	cmp	r3, #4
 8010b36:	d108      	bne.n	8010b4a <HAL_TIM_PWM_Start+0x3a>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	223b      	movs	r2, #59	@ 0x3b
 8010b3c:	5c9b      	ldrb	r3, [r3, r2]
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	3b01      	subs	r3, #1
 8010b42:	1e5a      	subs	r2, r3, #1
 8010b44:	4193      	sbcs	r3, r2
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	e013      	b.n	8010b72 <HAL_TIM_PWM_Start+0x62>
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	2b08      	cmp	r3, #8
 8010b4e:	d108      	bne.n	8010b62 <HAL_TIM_PWM_Start+0x52>
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	223c      	movs	r2, #60	@ 0x3c
 8010b54:	5c9b      	ldrb	r3, [r3, r2]
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	3b01      	subs	r3, #1
 8010b5a:	1e5a      	subs	r2, r3, #1
 8010b5c:	4193      	sbcs	r3, r2
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	e007      	b.n	8010b72 <HAL_TIM_PWM_Start+0x62>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	223d      	movs	r2, #61	@ 0x3d
 8010b66:	5c9b      	ldrb	r3, [r3, r2]
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	3b01      	subs	r3, #1
 8010b6c:	1e5a      	subs	r2, r3, #1
 8010b6e:	4193      	sbcs	r3, r2
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d001      	beq.n	8010b7a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8010b76:	2301      	movs	r3, #1
 8010b78:	e052      	b.n	8010c20 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d104      	bne.n	8010b8a <HAL_TIM_PWM_Start+0x7a>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	223a      	movs	r2, #58	@ 0x3a
 8010b84:	2102      	movs	r1, #2
 8010b86:	5499      	strb	r1, [r3, r2]
 8010b88:	e013      	b.n	8010bb2 <HAL_TIM_PWM_Start+0xa2>
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	2b04      	cmp	r3, #4
 8010b8e:	d104      	bne.n	8010b9a <HAL_TIM_PWM_Start+0x8a>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	223b      	movs	r2, #59	@ 0x3b
 8010b94:	2102      	movs	r1, #2
 8010b96:	5499      	strb	r1, [r3, r2]
 8010b98:	e00b      	b.n	8010bb2 <HAL_TIM_PWM_Start+0xa2>
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	2b08      	cmp	r3, #8
 8010b9e:	d104      	bne.n	8010baa <HAL_TIM_PWM_Start+0x9a>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	223c      	movs	r2, #60	@ 0x3c
 8010ba4:	2102      	movs	r1, #2
 8010ba6:	5499      	strb	r1, [r3, r2]
 8010ba8:	e003      	b.n	8010bb2 <HAL_TIM_PWM_Start+0xa2>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	223d      	movs	r2, #61	@ 0x3d
 8010bae:	2102      	movs	r1, #2
 8010bb0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	6839      	ldr	r1, [r7, #0]
 8010bb8:	2201      	movs	r2, #1
 8010bba:	0018      	movs	r0, r3
 8010bbc:	f000 fa62 	bl	8011084 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	2380      	movs	r3, #128	@ 0x80
 8010bc6:	05db      	lsls	r3, r3, #23
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d00e      	beq.n	8010bea <HAL_TIM_PWM_Start+0xda>
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4a15      	ldr	r2, [pc, #84]	@ (8010c28 <HAL_TIM_PWM_Start+0x118>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d009      	beq.n	8010bea <HAL_TIM_PWM_Start+0xda>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	4a14      	ldr	r2, [pc, #80]	@ (8010c2c <HAL_TIM_PWM_Start+0x11c>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d004      	beq.n	8010bea <HAL_TIM_PWM_Start+0xda>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a12      	ldr	r2, [pc, #72]	@ (8010c30 <HAL_TIM_PWM_Start+0x120>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d111      	bne.n	8010c0e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	2207      	movs	r2, #7
 8010bf2:	4013      	ands	r3, r2
 8010bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	2b06      	cmp	r3, #6
 8010bfa:	d010      	beq.n	8010c1e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	2101      	movs	r1, #1
 8010c08:	430a      	orrs	r2, r1
 8010c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c0c:	e007      	b.n	8010c1e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	2101      	movs	r1, #1
 8010c1a:	430a      	orrs	r2, r1
 8010c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010c1e:	2300      	movs	r3, #0
}
 8010c20:	0018      	movs	r0, r3
 8010c22:	46bd      	mov	sp, r7
 8010c24:	b004      	add	sp, #16
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	40000400 	.word	0x40000400
 8010c2c:	40010800 	.word	0x40010800
 8010c30:	40011400 	.word	0x40011400

08010c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b086      	sub	sp, #24
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c40:	2317      	movs	r3, #23
 8010c42:	18fb      	adds	r3, r7, r3
 8010c44:	2200      	movs	r2, #0
 8010c46:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	2238      	movs	r2, #56	@ 0x38
 8010c4c:	5c9b      	ldrb	r3, [r3, r2]
 8010c4e:	2b01      	cmp	r3, #1
 8010c50:	d101      	bne.n	8010c56 <HAL_TIM_PWM_ConfigChannel+0x22>
 8010c52:	2302      	movs	r3, #2
 8010c54:	e0ad      	b.n	8010db2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2238      	movs	r2, #56	@ 0x38
 8010c5a:	2101      	movs	r1, #1
 8010c5c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2b0c      	cmp	r3, #12
 8010c62:	d100      	bne.n	8010c66 <HAL_TIM_PWM_ConfigChannel+0x32>
 8010c64:	e076      	b.n	8010d54 <HAL_TIM_PWM_ConfigChannel+0x120>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2b0c      	cmp	r3, #12
 8010c6a:	d900      	bls.n	8010c6e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8010c6c:	e095      	b.n	8010d9a <HAL_TIM_PWM_ConfigChannel+0x166>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2b08      	cmp	r3, #8
 8010c72:	d04e      	beq.n	8010d12 <HAL_TIM_PWM_ConfigChannel+0xde>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2b08      	cmp	r3, #8
 8010c78:	d900      	bls.n	8010c7c <HAL_TIM_PWM_ConfigChannel+0x48>
 8010c7a:	e08e      	b.n	8010d9a <HAL_TIM_PWM_ConfigChannel+0x166>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d003      	beq.n	8010c8a <HAL_TIM_PWM_ConfigChannel+0x56>
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2b04      	cmp	r3, #4
 8010c86:	d021      	beq.n	8010ccc <HAL_TIM_PWM_ConfigChannel+0x98>
 8010c88:	e087      	b.n	8010d9a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	68ba      	ldr	r2, [r7, #8]
 8010c90:	0011      	movs	r1, r2
 8010c92:	0018      	movs	r0, r3
 8010c94:	f000 f8f2 	bl	8010e7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	699a      	ldr	r2, [r3, #24]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	2108      	movs	r1, #8
 8010ca4:	430a      	orrs	r2, r1
 8010ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	699a      	ldr	r2, [r3, #24]
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2104      	movs	r1, #4
 8010cb4:	438a      	bics	r2, r1
 8010cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	6999      	ldr	r1, [r3, #24]
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	68da      	ldr	r2, [r3, #12]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	430a      	orrs	r2, r1
 8010cc8:	619a      	str	r2, [r3, #24]
      break;
 8010cca:	e06b      	b.n	8010da4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	68ba      	ldr	r2, [r7, #8]
 8010cd2:	0011      	movs	r1, r2
 8010cd4:	0018      	movs	r0, r3
 8010cd6:	f000 f90d 	bl	8010ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	699a      	ldr	r2, [r3, #24]
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	2180      	movs	r1, #128	@ 0x80
 8010ce6:	0109      	lsls	r1, r1, #4
 8010ce8:	430a      	orrs	r2, r1
 8010cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	699a      	ldr	r2, [r3, #24]
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4931      	ldr	r1, [pc, #196]	@ (8010dbc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8010cf8:	400a      	ands	r2, r1
 8010cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	6999      	ldr	r1, [r3, #24]
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	021a      	lsls	r2, r3, #8
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	430a      	orrs	r2, r1
 8010d0e:	619a      	str	r2, [r3, #24]
      break;
 8010d10:	e048      	b.n	8010da4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	68ba      	ldr	r2, [r7, #8]
 8010d18:	0011      	movs	r1, r2
 8010d1a:	0018      	movs	r0, r3
 8010d1c:	f000 f92c 	bl	8010f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	69da      	ldr	r2, [r3, #28]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2108      	movs	r1, #8
 8010d2c:	430a      	orrs	r2, r1
 8010d2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	69da      	ldr	r2, [r3, #28]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2104      	movs	r1, #4
 8010d3c:	438a      	bics	r2, r1
 8010d3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	69d9      	ldr	r1, [r3, #28]
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	68da      	ldr	r2, [r3, #12]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	430a      	orrs	r2, r1
 8010d50:	61da      	str	r2, [r3, #28]
      break;
 8010d52:	e027      	b.n	8010da4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	68ba      	ldr	r2, [r7, #8]
 8010d5a:	0011      	movs	r1, r2
 8010d5c:	0018      	movs	r0, r3
 8010d5e:	f000 f94b 	bl	8010ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	69da      	ldr	r2, [r3, #28]
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2180      	movs	r1, #128	@ 0x80
 8010d6e:	0109      	lsls	r1, r1, #4
 8010d70:	430a      	orrs	r2, r1
 8010d72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	69da      	ldr	r2, [r3, #28]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	490f      	ldr	r1, [pc, #60]	@ (8010dbc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8010d80:	400a      	ands	r2, r1
 8010d82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	69d9      	ldr	r1, [r3, #28]
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	021a      	lsls	r2, r3, #8
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	430a      	orrs	r2, r1
 8010d96:	61da      	str	r2, [r3, #28]
      break;
 8010d98:	e004      	b.n	8010da4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8010d9a:	2317      	movs	r3, #23
 8010d9c:	18fb      	adds	r3, r7, r3
 8010d9e:	2201      	movs	r2, #1
 8010da0:	701a      	strb	r2, [r3, #0]
      break;
 8010da2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	2238      	movs	r2, #56	@ 0x38
 8010da8:	2100      	movs	r1, #0
 8010daa:	5499      	strb	r1, [r3, r2]

  return status;
 8010dac:	2317      	movs	r3, #23
 8010dae:	18fb      	adds	r3, r7, r3
 8010db0:	781b      	ldrb	r3, [r3, #0]
}
 8010db2:	0018      	movs	r0, r3
 8010db4:	46bd      	mov	sp, r7
 8010db6:	b006      	add	sp, #24
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	46c0      	nop			@ (mov r8, r8)
 8010dbc:	fffffbff 	.word	0xfffffbff

08010dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	2380      	movs	r3, #128	@ 0x80
 8010dd4:	05db      	lsls	r3, r3, #23
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d00b      	beq.n	8010df2 <TIM_Base_SetConfig+0x32>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4a23      	ldr	r2, [pc, #140]	@ (8010e6c <TIM_Base_SetConfig+0xac>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d007      	beq.n	8010df2 <TIM_Base_SetConfig+0x32>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4a22      	ldr	r2, [pc, #136]	@ (8010e70 <TIM_Base_SetConfig+0xb0>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d003      	beq.n	8010df2 <TIM_Base_SetConfig+0x32>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	4a21      	ldr	r2, [pc, #132]	@ (8010e74 <TIM_Base_SetConfig+0xb4>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d108      	bne.n	8010e04 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	2270      	movs	r2, #112	@ 0x70
 8010df6:	4393      	bics	r3, r2
 8010df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	68fa      	ldr	r2, [r7, #12]
 8010e00:	4313      	orrs	r3, r2
 8010e02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	2380      	movs	r3, #128	@ 0x80
 8010e08:	05db      	lsls	r3, r3, #23
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d00b      	beq.n	8010e26 <TIM_Base_SetConfig+0x66>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	4a16      	ldr	r2, [pc, #88]	@ (8010e6c <TIM_Base_SetConfig+0xac>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d007      	beq.n	8010e26 <TIM_Base_SetConfig+0x66>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	4a15      	ldr	r2, [pc, #84]	@ (8010e70 <TIM_Base_SetConfig+0xb0>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d003      	beq.n	8010e26 <TIM_Base_SetConfig+0x66>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4a14      	ldr	r2, [pc, #80]	@ (8010e74 <TIM_Base_SetConfig+0xb4>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d108      	bne.n	8010e38 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	4a13      	ldr	r2, [pc, #76]	@ (8010e78 <TIM_Base_SetConfig+0xb8>)
 8010e2a:	4013      	ands	r3, r2
 8010e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	68fa      	ldr	r2, [r7, #12]
 8010e34:	4313      	orrs	r3, r2
 8010e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2280      	movs	r2, #128	@ 0x80
 8010e3c:	4393      	bics	r3, r2
 8010e3e:	001a      	movs	r2, r3
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	4313      	orrs	r3, r2
 8010e46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	68fa      	ldr	r2, [r7, #12]
 8010e4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	689a      	ldr	r2, [r3, #8]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2201      	movs	r2, #1
 8010e62:	615a      	str	r2, [r3, #20]
}
 8010e64:	46c0      	nop			@ (mov r8, r8)
 8010e66:	46bd      	mov	sp, r7
 8010e68:	b004      	add	sp, #16
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	40000400 	.word	0x40000400
 8010e70:	40010800 	.word	0x40010800
 8010e74:	40011400 	.word	0x40011400
 8010e78:	fffffcff 	.word	0xfffffcff

08010e7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b086      	sub	sp, #24
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6a1b      	ldr	r3, [r3, #32]
 8010e8a:	2201      	movs	r2, #1
 8010e8c:	4393      	bics	r3, r2
 8010e8e:	001a      	movs	r2, r3
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6a1b      	ldr	r3, [r3, #32]
 8010e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	2270      	movs	r2, #112	@ 0x70
 8010eaa:	4393      	bics	r3, r2
 8010eac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2203      	movs	r2, #3
 8010eb2:	4393      	bics	r3, r2
 8010eb4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	68fa      	ldr	r2, [r7, #12]
 8010ebc:	4313      	orrs	r3, r2
 8010ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	2202      	movs	r2, #2
 8010ec4:	4393      	bics	r3, r2
 8010ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	689b      	ldr	r3, [r3, #8]
 8010ecc:	697a      	ldr	r2, [r7, #20]
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	693a      	ldr	r2, [r7, #16]
 8010ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	68fa      	ldr	r2, [r7, #12]
 8010edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	685a      	ldr	r2, [r3, #4]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	697a      	ldr	r2, [r7, #20]
 8010eea:	621a      	str	r2, [r3, #32]
}
 8010eec:	46c0      	nop			@ (mov r8, r8)
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	b006      	add	sp, #24
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b086      	sub	sp, #24
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	2210      	movs	r2, #16
 8010f04:	4393      	bics	r3, r2
 8010f06:	001a      	movs	r2, r3
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6a1b      	ldr	r3, [r3, #32]
 8010f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	699b      	ldr	r3, [r3, #24]
 8010f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	4a13      	ldr	r2, [pc, #76]	@ (8010f70 <TIM_OC2_SetConfig+0x7c>)
 8010f22:	4013      	ands	r3, r2
 8010f24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	4a12      	ldr	r2, [pc, #72]	@ (8010f74 <TIM_OC2_SetConfig+0x80>)
 8010f2a:	4013      	ands	r3, r2
 8010f2c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	021b      	lsls	r3, r3, #8
 8010f34:	68fa      	ldr	r2, [r7, #12]
 8010f36:	4313      	orrs	r3, r2
 8010f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	2220      	movs	r2, #32
 8010f3e:	4393      	bics	r3, r2
 8010f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	689b      	ldr	r3, [r3, #8]
 8010f46:	011b      	lsls	r3, r3, #4
 8010f48:	697a      	ldr	r2, [r7, #20]
 8010f4a:	4313      	orrs	r3, r2
 8010f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	693a      	ldr	r2, [r7, #16]
 8010f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	685a      	ldr	r2, [r3, #4]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	697a      	ldr	r2, [r7, #20]
 8010f66:	621a      	str	r2, [r3, #32]
}
 8010f68:	46c0      	nop			@ (mov r8, r8)
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	b006      	add	sp, #24
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	ffff8fff 	.word	0xffff8fff
 8010f74:	fffffcff 	.word	0xfffffcff

08010f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6a1b      	ldr	r3, [r3, #32]
 8010f86:	4a1a      	ldr	r2, [pc, #104]	@ (8010ff0 <TIM_OC3_SetConfig+0x78>)
 8010f88:	401a      	ands	r2, r3
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6a1b      	ldr	r3, [r3, #32]
 8010f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	69db      	ldr	r3, [r3, #28]
 8010f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2270      	movs	r2, #112	@ 0x70
 8010fa4:	4393      	bics	r3, r2
 8010fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2203      	movs	r2, #3
 8010fac:	4393      	bics	r3, r2
 8010fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	68fa      	ldr	r2, [r7, #12]
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8010ff4 <TIM_OC3_SetConfig+0x7c>)
 8010fbe:	4013      	ands	r3, r2
 8010fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	021b      	lsls	r3, r3, #8
 8010fc8:	697a      	ldr	r2, [r7, #20]
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	693a      	ldr	r2, [r7, #16]
 8010fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	68fa      	ldr	r2, [r7, #12]
 8010fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	685a      	ldr	r2, [r3, #4]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	697a      	ldr	r2, [r7, #20]
 8010fe6:	621a      	str	r2, [r3, #32]
}
 8010fe8:	46c0      	nop			@ (mov r8, r8)
 8010fea:	46bd      	mov	sp, r7
 8010fec:	b006      	add	sp, #24
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	fffffeff 	.word	0xfffffeff
 8010ff4:	fffffdff 	.word	0xfffffdff

08010ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b086      	sub	sp, #24
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6a1b      	ldr	r3, [r3, #32]
 8011006:	4a1b      	ldr	r2, [pc, #108]	@ (8011074 <TIM_OC4_SetConfig+0x7c>)
 8011008:	401a      	ands	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6a1b      	ldr	r3, [r3, #32]
 8011012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	69db      	ldr	r3, [r3, #28]
 801101e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	4a15      	ldr	r2, [pc, #84]	@ (8011078 <TIM_OC4_SetConfig+0x80>)
 8011024:	4013      	ands	r3, r2
 8011026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	4a14      	ldr	r2, [pc, #80]	@ (801107c <TIM_OC4_SetConfig+0x84>)
 801102c:	4013      	ands	r3, r2
 801102e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	021b      	lsls	r3, r3, #8
 8011036:	68fa      	ldr	r2, [r7, #12]
 8011038:	4313      	orrs	r3, r2
 801103a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	4a10      	ldr	r2, [pc, #64]	@ (8011080 <TIM_OC4_SetConfig+0x88>)
 8011040:	4013      	ands	r3, r2
 8011042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	031b      	lsls	r3, r3, #12
 801104a:	697a      	ldr	r2, [r7, #20]
 801104c:	4313      	orrs	r3, r2
 801104e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	693a      	ldr	r2, [r7, #16]
 8011054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	68fa      	ldr	r2, [r7, #12]
 801105a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	685a      	ldr	r2, [r3, #4]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	697a      	ldr	r2, [r7, #20]
 8011068:	621a      	str	r2, [r3, #32]
}
 801106a:	46c0      	nop			@ (mov r8, r8)
 801106c:	46bd      	mov	sp, r7
 801106e:	b006      	add	sp, #24
 8011070:	bd80      	pop	{r7, pc}
 8011072:	46c0      	nop			@ (mov r8, r8)
 8011074:	ffffefff 	.word	0xffffefff
 8011078:	ffff8fff 	.word	0xffff8fff
 801107c:	fffffcff 	.word	0xfffffcff
 8011080:	ffffdfff 	.word	0xffffdfff

08011084 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	221f      	movs	r2, #31
 8011094:	4013      	ands	r3, r2
 8011096:	2201      	movs	r2, #1
 8011098:	409a      	lsls	r2, r3
 801109a:	0013      	movs	r3, r2
 801109c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6a1b      	ldr	r3, [r3, #32]
 80110a2:	697a      	ldr	r2, [r7, #20]
 80110a4:	43d2      	mvns	r2, r2
 80110a6:	401a      	ands	r2, r3
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6a1a      	ldr	r2, [r3, #32]
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	211f      	movs	r1, #31
 80110b4:	400b      	ands	r3, r1
 80110b6:	6879      	ldr	r1, [r7, #4]
 80110b8:	4099      	lsls	r1, r3
 80110ba:	000b      	movs	r3, r1
 80110bc:	431a      	orrs	r2, r3
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	621a      	str	r2, [r3, #32]
}
 80110c2:	46c0      	nop			@ (mov r8, r8)
 80110c4:	46bd      	mov	sp, r7
 80110c6:	b006      	add	sp, #24
 80110c8:	bd80      	pop	{r7, pc}
	...

080110cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b084      	sub	sp, #16
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2238      	movs	r2, #56	@ 0x38
 80110da:	5c9b      	ldrb	r3, [r3, r2]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d101      	bne.n	80110e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80110e0:	2302      	movs	r3, #2
 80110e2:	e047      	b.n	8011174 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2238      	movs	r2, #56	@ 0x38
 80110e8:	2101      	movs	r1, #1
 80110ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2239      	movs	r2, #57	@ 0x39
 80110f0:	2102      	movs	r1, #2
 80110f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	689b      	ldr	r3, [r3, #8]
 8011102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2270      	movs	r2, #112	@ 0x70
 8011108:	4393      	bics	r3, r2
 801110a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	4313      	orrs	r3, r2
 8011114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	68fa      	ldr	r2, [r7, #12]
 801111c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	2380      	movs	r3, #128	@ 0x80
 8011124:	05db      	lsls	r3, r3, #23
 8011126:	429a      	cmp	r2, r3
 8011128:	d00e      	beq.n	8011148 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	4a13      	ldr	r2, [pc, #76]	@ (801117c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8011130:	4293      	cmp	r3, r2
 8011132:	d009      	beq.n	8011148 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	4a11      	ldr	r2, [pc, #68]	@ (8011180 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801113a:	4293      	cmp	r3, r2
 801113c:	d004      	beq.n	8011148 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	4a10      	ldr	r2, [pc, #64]	@ (8011184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8011144:	4293      	cmp	r3, r2
 8011146:	d10c      	bne.n	8011162 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	2280      	movs	r2, #128	@ 0x80
 801114c:	4393      	bics	r3, r2
 801114e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	68ba      	ldr	r2, [r7, #8]
 8011156:	4313      	orrs	r3, r2
 8011158:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	68ba      	ldr	r2, [r7, #8]
 8011160:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2239      	movs	r2, #57	@ 0x39
 8011166:	2101      	movs	r1, #1
 8011168:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2238      	movs	r2, #56	@ 0x38
 801116e:	2100      	movs	r1, #0
 8011170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011172:	2300      	movs	r3, #0
}
 8011174:	0018      	movs	r0, r3
 8011176:	46bd      	mov	sp, r7
 8011178:	b004      	add	sp, #16
 801117a:	bd80      	pop	{r7, pc}
 801117c:	40000400 	.word	0x40000400
 8011180:	40010800 	.word	0x40010800
 8011184:	40011400 	.word	0x40011400

08011188 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2238      	movs	r2, #56	@ 0x38
 8011196:	5c9b      	ldrb	r3, [r3, r2]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d101      	bne.n	80111a0 <HAL_TIMEx_RemapConfig+0x18>
 801119c:	2302      	movs	r3, #2
 801119e:	e00c      	b.n	80111ba <HAL_TIMEx_RemapConfig+0x32>
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2238      	movs	r2, #56	@ 0x38
 80111a4:	2101      	movs	r1, #1
 80111a6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	683a      	ldr	r2, [r7, #0]
 80111ae:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2238      	movs	r2, #56	@ 0x38
 80111b4:	2100      	movs	r1, #0
 80111b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80111b8:	2300      	movs	r3, #0
}
 80111ba:	0018      	movs	r0, r3
 80111bc:	46bd      	mov	sp, r7
 80111be:	b002      	add	sp, #8
 80111c0:	bd80      	pop	{r7, pc}
	...

080111c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d101      	bne.n	80111d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80111d2:	2301      	movs	r3, #1
 80111d4:	e053      	b.n	801127e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d116      	bne.n	801120c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2278      	movs	r2, #120	@ 0x78
 80111e2:	2100      	movs	r1, #0
 80111e4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	0018      	movs	r0, r3
 80111ea:	f000 fd07 	bl	8011bfc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	22b0      	movs	r2, #176	@ 0xb0
 80111f2:	589b      	ldr	r3, [r3, r2]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d103      	bne.n	8011200 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	21b0      	movs	r1, #176	@ 0xb0
 80111fc:	4a22      	ldr	r2, [pc, #136]	@ (8011288 <HAL_UART_Init+0xc4>)
 80111fe:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	22b0      	movs	r2, #176	@ 0xb0
 8011204:	589b      	ldr	r3, [r3, r2]
 8011206:	687a      	ldr	r2, [r7, #4]
 8011208:	0010      	movs	r0, r2
 801120a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2224      	movs	r2, #36	@ 0x24
 8011210:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	681a      	ldr	r2, [r3, #0]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	2101      	movs	r1, #1
 801121e:	438a      	bics	r2, r1
 8011220:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	0018      	movs	r0, r3
 8011226:	f000 fd2d 	bl	8011c84 <UART_SetConfig>
 801122a:	0003      	movs	r3, r0
 801122c:	2b01      	cmp	r3, #1
 801122e:	d101      	bne.n	8011234 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8011230:	2301      	movs	r3, #1
 8011232:	e024      	b.n	801127e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011238:	2b00      	cmp	r3, #0
 801123a:	d003      	beq.n	8011244 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	0018      	movs	r0, r3
 8011240:	f000 ffbe 	bl	80121c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	685a      	ldr	r2, [r3, #4]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	490f      	ldr	r1, [pc, #60]	@ (801128c <HAL_UART_Init+0xc8>)
 8011250:	400a      	ands	r2, r1
 8011252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	689a      	ldr	r2, [r3, #8]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	212a      	movs	r1, #42	@ 0x2a
 8011260:	438a      	bics	r2, r1
 8011262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	681a      	ldr	r2, [r3, #0]
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2101      	movs	r1, #1
 8011270:	430a      	orrs	r2, r1
 8011272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	0018      	movs	r0, r3
 8011278:	f001 f856 	bl	8012328 <UART_CheckIdleState>
 801127c:	0003      	movs	r3, r0
}
 801127e:	0018      	movs	r0, r3
 8011280:	46bd      	mov	sp, r7
 8011282:	b002      	add	sp, #8
 8011284:	bd80      	pop	{r7, pc}
 8011286:	46c0      	nop			@ (mov r8, r8)
 8011288:	080092f1 	.word	0x080092f1
 801128c:	ffffb7ff 	.word	0xffffb7ff

08011290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b08a      	sub	sp, #40	@ 0x28
 8011294:	af02      	add	r7, sp, #8
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	603b      	str	r3, [r7, #0]
 801129c:	1dbb      	adds	r3, r7, #6
 801129e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80112a4:	2b20      	cmp	r3, #32
 80112a6:	d000      	beq.n	80112aa <HAL_UART_Transmit+0x1a>
 80112a8:	e08c      	b.n	80113c4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d003      	beq.n	80112b8 <HAL_UART_Transmit+0x28>
 80112b0:	1dbb      	adds	r3, r7, #6
 80112b2:	881b      	ldrh	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d101      	bne.n	80112bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80112b8:	2301      	movs	r3, #1
 80112ba:	e084      	b.n	80113c6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	689a      	ldr	r2, [r3, #8]
 80112c0:	2380      	movs	r3, #128	@ 0x80
 80112c2:	015b      	lsls	r3, r3, #5
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d109      	bne.n	80112dc <HAL_UART_Transmit+0x4c>
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	691b      	ldr	r3, [r3, #16]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d105      	bne.n	80112dc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	2201      	movs	r2, #1
 80112d4:	4013      	ands	r3, r2
 80112d6:	d001      	beq.n	80112dc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	e074      	b.n	80113c6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2284      	movs	r2, #132	@ 0x84
 80112e0:	2100      	movs	r1, #0
 80112e2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2221      	movs	r2, #33	@ 0x21
 80112e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80112ea:	f7f8 fd23 	bl	8009d34 <HAL_GetTick>
 80112ee:	0003      	movs	r3, r0
 80112f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	1dba      	adds	r2, r7, #6
 80112f6:	2150      	movs	r1, #80	@ 0x50
 80112f8:	8812      	ldrh	r2, [r2, #0]
 80112fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	1dba      	adds	r2, r7, #6
 8011300:	2152      	movs	r1, #82	@ 0x52
 8011302:	8812      	ldrh	r2, [r2, #0]
 8011304:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	689a      	ldr	r2, [r3, #8]
 801130a:	2380      	movs	r3, #128	@ 0x80
 801130c:	015b      	lsls	r3, r3, #5
 801130e:	429a      	cmp	r2, r3
 8011310:	d108      	bne.n	8011324 <HAL_UART_Transmit+0x94>
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	691b      	ldr	r3, [r3, #16]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d104      	bne.n	8011324 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801131a:	2300      	movs	r3, #0
 801131c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	61bb      	str	r3, [r7, #24]
 8011322:	e003      	b.n	801132c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011328:	2300      	movs	r3, #0
 801132a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801132c:	e02f      	b.n	801138e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801132e:	697a      	ldr	r2, [r7, #20]
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	9300      	str	r3, [sp, #0]
 8011336:	0013      	movs	r3, r2
 8011338:	2200      	movs	r2, #0
 801133a:	2180      	movs	r1, #128	@ 0x80
 801133c:	f001 f89c 	bl	8012478 <UART_WaitOnFlagUntilTimeout>
 8011340:	1e03      	subs	r3, r0, #0
 8011342:	d004      	beq.n	801134e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	2220      	movs	r2, #32
 8011348:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801134a:	2303      	movs	r3, #3
 801134c:	e03b      	b.n	80113c6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d10b      	bne.n	801136c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	001a      	movs	r2, r3
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	05d2      	lsls	r2, r2, #23
 8011360:	0dd2      	lsrs	r2, r2, #23
 8011362:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011364:	69bb      	ldr	r3, [r7, #24]
 8011366:	3302      	adds	r3, #2
 8011368:	61bb      	str	r3, [r7, #24]
 801136a:	e007      	b.n	801137c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	781a      	ldrb	r2, [r3, #0]
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	3301      	adds	r3, #1
 801137a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2252      	movs	r2, #82	@ 0x52
 8011380:	5a9b      	ldrh	r3, [r3, r2]
 8011382:	b29b      	uxth	r3, r3
 8011384:	3b01      	subs	r3, #1
 8011386:	b299      	uxth	r1, r3
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2252      	movs	r2, #82	@ 0x52
 801138c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2252      	movs	r2, #82	@ 0x52
 8011392:	5a9b      	ldrh	r3, [r3, r2]
 8011394:	b29b      	uxth	r3, r3
 8011396:	2b00      	cmp	r3, #0
 8011398:	d1c9      	bne.n	801132e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801139a:	697a      	ldr	r2, [r7, #20]
 801139c:	68f8      	ldr	r0, [r7, #12]
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	9300      	str	r3, [sp, #0]
 80113a2:	0013      	movs	r3, r2
 80113a4:	2200      	movs	r2, #0
 80113a6:	2140      	movs	r1, #64	@ 0x40
 80113a8:	f001 f866 	bl	8012478 <UART_WaitOnFlagUntilTimeout>
 80113ac:	1e03      	subs	r3, r0, #0
 80113ae:	d004      	beq.n	80113ba <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2220      	movs	r2, #32
 80113b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80113b6:	2303      	movs	r3, #3
 80113b8:	e005      	b.n	80113c6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2220      	movs	r2, #32
 80113be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80113c0:	2300      	movs	r3, #0
 80113c2:	e000      	b.n	80113c6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80113c4:	2302      	movs	r3, #2
  }
}
 80113c6:	0018      	movs	r0, r3
 80113c8:	46bd      	mov	sp, r7
 80113ca:	b008      	add	sp, #32
 80113cc:	bd80      	pop	{r7, pc}
	...

080113d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b088      	sub	sp, #32
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	1dbb      	adds	r3, r7, #6
 80113dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80113e2:	2b20      	cmp	r3, #32
 80113e4:	d000      	beq.n	80113e8 <HAL_UART_Transmit_DMA+0x18>
 80113e6:	e077      	b.n	80114d8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d003      	beq.n	80113f6 <HAL_UART_Transmit_DMA+0x26>
 80113ee:	1dbb      	adds	r3, r7, #6
 80113f0:	881b      	ldrh	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d101      	bne.n	80113fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80113f6:	2301      	movs	r3, #1
 80113f8:	e06f      	b.n	80114da <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	689a      	ldr	r2, [r3, #8]
 80113fe:	2380      	movs	r3, #128	@ 0x80
 8011400:	015b      	lsls	r3, r3, #5
 8011402:	429a      	cmp	r2, r3
 8011404:	d109      	bne.n	801141a <HAL_UART_Transmit_DMA+0x4a>
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	691b      	ldr	r3, [r3, #16]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d105      	bne.n	801141a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	2201      	movs	r2, #1
 8011412:	4013      	ands	r3, r2
 8011414:	d001      	beq.n	801141a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011416:	2301      	movs	r3, #1
 8011418:	e05f      	b.n	80114da <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	68ba      	ldr	r2, [r7, #8]
 801141e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	1dba      	adds	r2, r7, #6
 8011424:	2150      	movs	r1, #80	@ 0x50
 8011426:	8812      	ldrh	r2, [r2, #0]
 8011428:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	1dba      	adds	r2, r7, #6
 801142e:	2152      	movs	r1, #82	@ 0x52
 8011430:	8812      	ldrh	r2, [r2, #0]
 8011432:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2284      	movs	r2, #132	@ 0x84
 8011438:	2100      	movs	r1, #0
 801143a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2221      	movs	r2, #33	@ 0x21
 8011440:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011446:	2b00      	cmp	r3, #0
 8011448:	d027      	beq.n	801149a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801144e:	4a25      	ldr	r2, [pc, #148]	@ (80114e4 <HAL_UART_Transmit_DMA+0x114>)
 8011450:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011456:	4a24      	ldr	r2, [pc, #144]	@ (80114e8 <HAL_UART_Transmit_DMA+0x118>)
 8011458:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801145e:	4a23      	ldr	r2, [pc, #140]	@ (80114ec <HAL_UART_Transmit_DMA+0x11c>)
 8011460:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011466:	2200      	movs	r2, #0
 8011468:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011472:	0019      	movs	r1, r3
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	3328      	adds	r3, #40	@ 0x28
 801147a:	001a      	movs	r2, r3
 801147c:	1dbb      	adds	r3, r7, #6
 801147e:	881b      	ldrh	r3, [r3, #0]
 8011480:	f7f9 f9d6 	bl	800a830 <HAL_DMA_Start_IT>
 8011484:	1e03      	subs	r3, r0, #0
 8011486:	d008      	beq.n	801149a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2284      	movs	r2, #132	@ 0x84
 801148c:	2110      	movs	r1, #16
 801148e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2220      	movs	r2, #32
 8011494:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8011496:	2301      	movs	r3, #1
 8011498:	e01f      	b.n	80114da <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2240      	movs	r2, #64	@ 0x40
 80114a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114a2:	f3ef 8310 	mrs	r3, PRIMASK
 80114a6:	613b      	str	r3, [r7, #16]
  return(result);
 80114a8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80114aa:	61fb      	str	r3, [r7, #28]
 80114ac:	2301      	movs	r3, #1
 80114ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	f383 8810 	msr	PRIMASK, r3
}
 80114b6:	46c0      	nop			@ (mov r8, r8)
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	689a      	ldr	r2, [r3, #8]
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	2180      	movs	r1, #128	@ 0x80
 80114c4:	430a      	orrs	r2, r1
 80114c6:	609a      	str	r2, [r3, #8]
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	f383 8810 	msr	PRIMASK, r3
}
 80114d2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80114d4:	2300      	movs	r3, #0
 80114d6:	e000      	b.n	80114da <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80114d8:	2302      	movs	r3, #2
  }
}
 80114da:	0018      	movs	r0, r3
 80114dc:	46bd      	mov	sp, r7
 80114de:	b008      	add	sp, #32
 80114e0:	bd80      	pop	{r7, pc}
 80114e2:	46c0      	nop			@ (mov r8, r8)
 80114e4:	0801279d 	.word	0x0801279d
 80114e8:	08012839 	.word	0x08012839
 80114ec:	080129d9 	.word	0x080129d9

080114f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b088      	sub	sp, #32
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	1dbb      	adds	r3, r7, #6
 80114fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2280      	movs	r2, #128	@ 0x80
 8011502:	589b      	ldr	r3, [r3, r2]
 8011504:	2b20      	cmp	r3, #32
 8011506:	d14a      	bne.n	801159e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d003      	beq.n	8011516 <HAL_UART_Receive_DMA+0x26>
 801150e:	1dbb      	adds	r3, r7, #6
 8011510:	881b      	ldrh	r3, [r3, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d101      	bne.n	801151a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8011516:	2301      	movs	r3, #1
 8011518:	e042      	b.n	80115a0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	689a      	ldr	r2, [r3, #8]
 801151e:	2380      	movs	r3, #128	@ 0x80
 8011520:	015b      	lsls	r3, r3, #5
 8011522:	429a      	cmp	r2, r3
 8011524:	d109      	bne.n	801153a <HAL_UART_Receive_DMA+0x4a>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d105      	bne.n	801153a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	2201      	movs	r2, #1
 8011532:	4013      	ands	r3, r2
 8011534:	d001      	beq.n	801153a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011536:	2301      	movs	r3, #1
 8011538:	e032      	b.n	80115a0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2200      	movs	r2, #0
 801153e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4a18      	ldr	r2, [pc, #96]	@ (80115a8 <HAL_UART_Receive_DMA+0xb8>)
 8011546:	4293      	cmp	r3, r2
 8011548:	d020      	beq.n	801158c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	685a      	ldr	r2, [r3, #4]
 8011550:	2380      	movs	r3, #128	@ 0x80
 8011552:	041b      	lsls	r3, r3, #16
 8011554:	4013      	ands	r3, r2
 8011556:	d019      	beq.n	801158c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011558:	f3ef 8310 	mrs	r3, PRIMASK
 801155c:	613b      	str	r3, [r7, #16]
  return(result);
 801155e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011560:	61fb      	str	r3, [r7, #28]
 8011562:	2301      	movs	r3, #1
 8011564:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	f383 8810 	msr	PRIMASK, r3
}
 801156c:	46c0      	nop			@ (mov r8, r8)
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2180      	movs	r1, #128	@ 0x80
 801157a:	04c9      	lsls	r1, r1, #19
 801157c:	430a      	orrs	r2, r1
 801157e:	601a      	str	r2, [r3, #0]
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011584:	69bb      	ldr	r3, [r7, #24]
 8011586:	f383 8810 	msr	PRIMASK, r3
}
 801158a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801158c:	1dbb      	adds	r3, r7, #6
 801158e:	881a      	ldrh	r2, [r3, #0]
 8011590:	68b9      	ldr	r1, [r7, #8]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	0018      	movs	r0, r3
 8011596:	f000 ffd9 	bl	801254c <UART_Start_Receive_DMA>
 801159a:	0003      	movs	r3, r0
 801159c:	e000      	b.n	80115a0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801159e:	2302      	movs	r3, #2
  }
}
 80115a0:	0018      	movs	r0, r3
 80115a2:	46bd      	mov	sp, r7
 80115a4:	b008      	add	sp, #32
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	40004800 	.word	0x40004800

080115ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80115ac:	b590      	push	{r4, r7, lr}
 80115ae:	b0ab      	sub	sp, #172	@ 0xac
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	69db      	ldr	r3, [r3, #28]
 80115ba:	22a4      	movs	r2, #164	@ 0xa4
 80115bc:	18b9      	adds	r1, r7, r2
 80115be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	20a0      	movs	r0, #160	@ 0xa0
 80115c8:	1839      	adds	r1, r7, r0
 80115ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	689b      	ldr	r3, [r3, #8]
 80115d2:	219c      	movs	r1, #156	@ 0x9c
 80115d4:	1879      	adds	r1, r7, r1
 80115d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80115d8:	0011      	movs	r1, r2
 80115da:	18bb      	adds	r3, r7, r2
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	4a9c      	ldr	r2, [pc, #624]	@ (8011850 <HAL_UART_IRQHandler+0x2a4>)
 80115e0:	4013      	ands	r3, r2
 80115e2:	2298      	movs	r2, #152	@ 0x98
 80115e4:	18bc      	adds	r4, r7, r2
 80115e6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80115e8:	18bb      	adds	r3, r7, r2
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d114      	bne.n	801161a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80115f0:	187b      	adds	r3, r7, r1
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2220      	movs	r2, #32
 80115f6:	4013      	ands	r3, r2
 80115f8:	d00f      	beq.n	801161a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80115fa:	183b      	adds	r3, r7, r0
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	2220      	movs	r2, #32
 8011600:	4013      	ands	r3, r2
 8011602:	d00a      	beq.n	801161a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011608:	2b00      	cmp	r3, #0
 801160a:	d100      	bne.n	801160e <HAL_UART_IRQHandler+0x62>
 801160c:	e2aa      	b.n	8011b64 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011612:	687a      	ldr	r2, [r7, #4]
 8011614:	0010      	movs	r0, r2
 8011616:	4798      	blx	r3
      }
      return;
 8011618:	e2a4      	b.n	8011b64 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801161a:	2398      	movs	r3, #152	@ 0x98
 801161c:	18fb      	adds	r3, r7, r3
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d100      	bne.n	8011626 <HAL_UART_IRQHandler+0x7a>
 8011624:	e11a      	b.n	801185c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011626:	239c      	movs	r3, #156	@ 0x9c
 8011628:	18fb      	adds	r3, r7, r3
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2201      	movs	r2, #1
 801162e:	4013      	ands	r3, r2
 8011630:	d106      	bne.n	8011640 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011632:	23a0      	movs	r3, #160	@ 0xa0
 8011634:	18fb      	adds	r3, r7, r3
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4a86      	ldr	r2, [pc, #536]	@ (8011854 <HAL_UART_IRQHandler+0x2a8>)
 801163a:	4013      	ands	r3, r2
 801163c:	d100      	bne.n	8011640 <HAL_UART_IRQHandler+0x94>
 801163e:	e10d      	b.n	801185c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011640:	23a4      	movs	r3, #164	@ 0xa4
 8011642:	18fb      	adds	r3, r7, r3
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2201      	movs	r2, #1
 8011648:	4013      	ands	r3, r2
 801164a:	d012      	beq.n	8011672 <HAL_UART_IRQHandler+0xc6>
 801164c:	23a0      	movs	r3, #160	@ 0xa0
 801164e:	18fb      	adds	r3, r7, r3
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	2380      	movs	r3, #128	@ 0x80
 8011654:	005b      	lsls	r3, r3, #1
 8011656:	4013      	ands	r3, r2
 8011658:	d00b      	beq.n	8011672 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2201      	movs	r2, #1
 8011660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2284      	movs	r2, #132	@ 0x84
 8011666:	589b      	ldr	r3, [r3, r2]
 8011668:	2201      	movs	r2, #1
 801166a:	431a      	orrs	r2, r3
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2184      	movs	r1, #132	@ 0x84
 8011670:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011672:	23a4      	movs	r3, #164	@ 0xa4
 8011674:	18fb      	adds	r3, r7, r3
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2202      	movs	r2, #2
 801167a:	4013      	ands	r3, r2
 801167c:	d011      	beq.n	80116a2 <HAL_UART_IRQHandler+0xf6>
 801167e:	239c      	movs	r3, #156	@ 0x9c
 8011680:	18fb      	adds	r3, r7, r3
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	2201      	movs	r2, #1
 8011686:	4013      	ands	r3, r2
 8011688:	d00b      	beq.n	80116a2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	2202      	movs	r2, #2
 8011690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2284      	movs	r2, #132	@ 0x84
 8011696:	589b      	ldr	r3, [r3, r2]
 8011698:	2204      	movs	r2, #4
 801169a:	431a      	orrs	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2184      	movs	r1, #132	@ 0x84
 80116a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80116a2:	23a4      	movs	r3, #164	@ 0xa4
 80116a4:	18fb      	adds	r3, r7, r3
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	2204      	movs	r2, #4
 80116aa:	4013      	ands	r3, r2
 80116ac:	d011      	beq.n	80116d2 <HAL_UART_IRQHandler+0x126>
 80116ae:	239c      	movs	r3, #156	@ 0x9c
 80116b0:	18fb      	adds	r3, r7, r3
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2201      	movs	r2, #1
 80116b6:	4013      	ands	r3, r2
 80116b8:	d00b      	beq.n	80116d2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	2204      	movs	r2, #4
 80116c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2284      	movs	r2, #132	@ 0x84
 80116c6:	589b      	ldr	r3, [r3, r2]
 80116c8:	2202      	movs	r2, #2
 80116ca:	431a      	orrs	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2184      	movs	r1, #132	@ 0x84
 80116d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80116d2:	23a4      	movs	r3, #164	@ 0xa4
 80116d4:	18fb      	adds	r3, r7, r3
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	2208      	movs	r2, #8
 80116da:	4013      	ands	r3, r2
 80116dc:	d017      	beq.n	801170e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80116de:	23a0      	movs	r3, #160	@ 0xa0
 80116e0:	18fb      	adds	r3, r7, r3
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	2220      	movs	r2, #32
 80116e6:	4013      	ands	r3, r2
 80116e8:	d105      	bne.n	80116f6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80116ea:	239c      	movs	r3, #156	@ 0x9c
 80116ec:	18fb      	adds	r3, r7, r3
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	2201      	movs	r2, #1
 80116f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80116f4:	d00b      	beq.n	801170e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	2208      	movs	r2, #8
 80116fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2284      	movs	r2, #132	@ 0x84
 8011702:	589b      	ldr	r3, [r3, r2]
 8011704:	2208      	movs	r2, #8
 8011706:	431a      	orrs	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2184      	movs	r1, #132	@ 0x84
 801170c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801170e:	23a4      	movs	r3, #164	@ 0xa4
 8011710:	18fb      	adds	r3, r7, r3
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	2380      	movs	r3, #128	@ 0x80
 8011716:	011b      	lsls	r3, r3, #4
 8011718:	4013      	ands	r3, r2
 801171a:	d013      	beq.n	8011744 <HAL_UART_IRQHandler+0x198>
 801171c:	23a0      	movs	r3, #160	@ 0xa0
 801171e:	18fb      	adds	r3, r7, r3
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	2380      	movs	r3, #128	@ 0x80
 8011724:	04db      	lsls	r3, r3, #19
 8011726:	4013      	ands	r3, r2
 8011728:	d00c      	beq.n	8011744 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	2280      	movs	r2, #128	@ 0x80
 8011730:	0112      	lsls	r2, r2, #4
 8011732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2284      	movs	r2, #132	@ 0x84
 8011738:	589b      	ldr	r3, [r3, r2]
 801173a:	2220      	movs	r2, #32
 801173c:	431a      	orrs	r2, r3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2184      	movs	r1, #132	@ 0x84
 8011742:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2284      	movs	r2, #132	@ 0x84
 8011748:	589b      	ldr	r3, [r3, r2]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d100      	bne.n	8011750 <HAL_UART_IRQHandler+0x1a4>
 801174e:	e20b      	b.n	8011b68 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011750:	23a4      	movs	r3, #164	@ 0xa4
 8011752:	18fb      	adds	r3, r7, r3
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2220      	movs	r2, #32
 8011758:	4013      	ands	r3, r2
 801175a:	d00e      	beq.n	801177a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801175c:	23a0      	movs	r3, #160	@ 0xa0
 801175e:	18fb      	adds	r3, r7, r3
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2220      	movs	r2, #32
 8011764:	4013      	ands	r3, r2
 8011766:	d008      	beq.n	801177a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801176c:	2b00      	cmp	r3, #0
 801176e:	d004      	beq.n	801177a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	0010      	movs	r0, r2
 8011778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2284      	movs	r2, #132	@ 0x84
 801177e:	589b      	ldr	r3, [r3, r2]
 8011780:	2194      	movs	r1, #148	@ 0x94
 8011782:	187a      	adds	r2, r7, r1
 8011784:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	689b      	ldr	r3, [r3, #8]
 801178c:	2240      	movs	r2, #64	@ 0x40
 801178e:	4013      	ands	r3, r2
 8011790:	2b40      	cmp	r3, #64	@ 0x40
 8011792:	d004      	beq.n	801179e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011794:	187b      	adds	r3, r7, r1
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2228      	movs	r2, #40	@ 0x28
 801179a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801179c:	d04b      	beq.n	8011836 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	0018      	movs	r0, r3
 80117a2:	f000 ff97 	bl	80126d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	689b      	ldr	r3, [r3, #8]
 80117ac:	2240      	movs	r2, #64	@ 0x40
 80117ae:	4013      	ands	r3, r2
 80117b0:	2b40      	cmp	r3, #64	@ 0x40
 80117b2:	d139      	bne.n	8011828 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117b4:	f3ef 8310 	mrs	r3, PRIMASK
 80117b8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80117ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117bc:	2090      	movs	r0, #144	@ 0x90
 80117be:	183a      	adds	r2, r7, r0
 80117c0:	6013      	str	r3, [r2, #0]
 80117c2:	2301      	movs	r3, #1
 80117c4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117c8:	f383 8810 	msr	PRIMASK, r3
}
 80117cc:	46c0      	nop			@ (mov r8, r8)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	689a      	ldr	r2, [r3, #8]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2140      	movs	r1, #64	@ 0x40
 80117da:	438a      	bics	r2, r1
 80117dc:	609a      	str	r2, [r3, #8]
 80117de:	183b      	adds	r3, r7, r0
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80117e6:	f383 8810 	msr	PRIMASK, r3
}
 80117ea:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d012      	beq.n	801181a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117f8:	4a17      	ldr	r2, [pc, #92]	@ (8011858 <HAL_UART_IRQHandler+0x2ac>)
 80117fa:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011800:	0018      	movs	r0, r3
 8011802:	f7f9 f8bb 	bl	800a97c <HAL_DMA_Abort_IT>
 8011806:	1e03      	subs	r3, r0, #0
 8011808:	d020      	beq.n	801184c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801180e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011814:	0018      	movs	r0, r3
 8011816:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011818:	e018      	b.n	801184c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2298      	movs	r2, #152	@ 0x98
 801181e:	589b      	ldr	r3, [r3, r2]
 8011820:	687a      	ldr	r2, [r7, #4]
 8011822:	0010      	movs	r0, r2
 8011824:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011826:	e011      	b.n	801184c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2298      	movs	r2, #152	@ 0x98
 801182c:	589b      	ldr	r3, [r3, r2]
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	0010      	movs	r0, r2
 8011832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011834:	e00a      	b.n	801184c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2298      	movs	r2, #152	@ 0x98
 801183a:	589b      	ldr	r3, [r3, r2]
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	0010      	movs	r0, r2
 8011840:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2284      	movs	r2, #132	@ 0x84
 8011846:	2100      	movs	r1, #0
 8011848:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801184a:	e18d      	b.n	8011b68 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801184c:	46c0      	nop			@ (mov r8, r8)
    return;
 801184e:	e18b      	b.n	8011b68 <HAL_UART_IRQHandler+0x5bc>
 8011850:	0000080f 	.word	0x0000080f
 8011854:	04000120 	.word	0x04000120
 8011858:	08012a61 	.word	0x08012a61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011860:	2b01      	cmp	r3, #1
 8011862:	d000      	beq.n	8011866 <HAL_UART_IRQHandler+0x2ba>
 8011864:	e13d      	b.n	8011ae2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011866:	23a4      	movs	r3, #164	@ 0xa4
 8011868:	18fb      	adds	r3, r7, r3
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	2210      	movs	r2, #16
 801186e:	4013      	ands	r3, r2
 8011870:	d100      	bne.n	8011874 <HAL_UART_IRQHandler+0x2c8>
 8011872:	e136      	b.n	8011ae2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011874:	23a0      	movs	r3, #160	@ 0xa0
 8011876:	18fb      	adds	r3, r7, r3
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2210      	movs	r2, #16
 801187c:	4013      	ands	r3, r2
 801187e:	d100      	bne.n	8011882 <HAL_UART_IRQHandler+0x2d6>
 8011880:	e12f      	b.n	8011ae2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2210      	movs	r2, #16
 8011888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	689b      	ldr	r3, [r3, #8]
 8011890:	2240      	movs	r2, #64	@ 0x40
 8011892:	4013      	ands	r3, r2
 8011894:	2b40      	cmp	r3, #64	@ 0x40
 8011896:	d000      	beq.n	801189a <HAL_UART_IRQHandler+0x2ee>
 8011898:	e0a2      	b.n	80119e0 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	685a      	ldr	r2, [r3, #4]
 80118a2:	217e      	movs	r1, #126	@ 0x7e
 80118a4:	187b      	adds	r3, r7, r1
 80118a6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80118a8:	187b      	adds	r3, r7, r1
 80118aa:	881b      	ldrh	r3, [r3, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d100      	bne.n	80118b2 <HAL_UART_IRQHandler+0x306>
 80118b0:	e15c      	b.n	8011b6c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2258      	movs	r2, #88	@ 0x58
 80118b6:	5a9b      	ldrh	r3, [r3, r2]
 80118b8:	187a      	adds	r2, r7, r1
 80118ba:	8812      	ldrh	r2, [r2, #0]
 80118bc:	429a      	cmp	r2, r3
 80118be:	d300      	bcc.n	80118c2 <HAL_UART_IRQHandler+0x316>
 80118c0:	e154      	b.n	8011b6c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	187a      	adds	r2, r7, r1
 80118c6:	215a      	movs	r1, #90	@ 0x5a
 80118c8:	8812      	ldrh	r2, [r2, #0]
 80118ca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2220      	movs	r2, #32
 80118d6:	4013      	ands	r3, r2
 80118d8:	d16f      	bne.n	80119ba <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118da:	f3ef 8310 	mrs	r3, PRIMASK
 80118de:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80118e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80118e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80118e4:	2301      	movs	r3, #1
 80118e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118ea:	f383 8810 	msr	PRIMASK, r3
}
 80118ee:	46c0      	nop			@ (mov r8, r8)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	49a0      	ldr	r1, [pc, #640]	@ (8011b7c <HAL_UART_IRQHandler+0x5d0>)
 80118fc:	400a      	ands	r2, r1
 80118fe:	601a      	str	r2, [r3, #0]
 8011900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011902:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011906:	f383 8810 	msr	PRIMASK, r3
}
 801190a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801190c:	f3ef 8310 	mrs	r3, PRIMASK
 8011910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8011912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011914:	677b      	str	r3, [r7, #116]	@ 0x74
 8011916:	2301      	movs	r3, #1
 8011918:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801191a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801191c:	f383 8810 	msr	PRIMASK, r3
}
 8011920:	46c0      	nop			@ (mov r8, r8)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	689a      	ldr	r2, [r3, #8]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2101      	movs	r1, #1
 801192e:	438a      	bics	r2, r1
 8011930:	609a      	str	r2, [r3, #8]
 8011932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011934:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011938:	f383 8810 	msr	PRIMASK, r3
}
 801193c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801193e:	f3ef 8310 	mrs	r3, PRIMASK
 8011942:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8011944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011946:	673b      	str	r3, [r7, #112]	@ 0x70
 8011948:	2301      	movs	r3, #1
 801194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801194c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801194e:	f383 8810 	msr	PRIMASK, r3
}
 8011952:	46c0      	nop			@ (mov r8, r8)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	689a      	ldr	r2, [r3, #8]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2140      	movs	r1, #64	@ 0x40
 8011960:	438a      	bics	r2, r1
 8011962:	609a      	str	r2, [r3, #8]
 8011964:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011966:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801196a:	f383 8810 	msr	PRIMASK, r3
}
 801196e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2280      	movs	r2, #128	@ 0x80
 8011974:	2120      	movs	r1, #32
 8011976:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2200      	movs	r2, #0
 801197c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801197e:	f3ef 8310 	mrs	r3, PRIMASK
 8011982:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8011984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011986:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011988:	2301      	movs	r3, #1
 801198a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801198c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801198e:	f383 8810 	msr	PRIMASK, r3
}
 8011992:	46c0      	nop			@ (mov r8, r8)
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	2110      	movs	r1, #16
 80119a0:	438a      	bics	r2, r1
 80119a2:	601a      	str	r2, [r3, #0]
 80119a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80119a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80119a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119aa:	f383 8810 	msr	PRIMASK, r3
}
 80119ae:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119b4:	0018      	movs	r0, r3
 80119b6:	f7f8 ffa1 	bl	800a8fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2202      	movs	r2, #2
 80119be:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	22ac      	movs	r2, #172	@ 0xac
 80119c4:	589b      	ldr	r3, [r3, r2]
 80119c6:	687a      	ldr	r2, [r7, #4]
 80119c8:	2158      	movs	r1, #88	@ 0x58
 80119ca:	5a51      	ldrh	r1, [r2, r1]
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	205a      	movs	r0, #90	@ 0x5a
 80119d0:	5a12      	ldrh	r2, [r2, r0]
 80119d2:	b292      	uxth	r2, r2
 80119d4:	1a8a      	subs	r2, r1, r2
 80119d6:	b291      	uxth	r1, r2
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	0010      	movs	r0, r2
 80119dc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80119de:	e0c5      	b.n	8011b6c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2258      	movs	r2, #88	@ 0x58
 80119e4:	5a99      	ldrh	r1, [r3, r2]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	225a      	movs	r2, #90	@ 0x5a
 80119ea:	5a9b      	ldrh	r3, [r3, r2]
 80119ec:	b29a      	uxth	r2, r3
 80119ee:	208e      	movs	r0, #142	@ 0x8e
 80119f0:	183b      	adds	r3, r7, r0
 80119f2:	1a8a      	subs	r2, r1, r2
 80119f4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	225a      	movs	r2, #90	@ 0x5a
 80119fa:	5a9b      	ldrh	r3, [r3, r2]
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d100      	bne.n	8011a04 <HAL_UART_IRQHandler+0x458>
 8011a02:	e0b5      	b.n	8011b70 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8011a04:	183b      	adds	r3, r7, r0
 8011a06:	881b      	ldrh	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d100      	bne.n	8011a0e <HAL_UART_IRQHandler+0x462>
 8011a0c:	e0b0      	b.n	8011b70 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a12:	60fb      	str	r3, [r7, #12]
  return(result);
 8011a14:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011a16:	2488      	movs	r4, #136	@ 0x88
 8011a18:	193a      	adds	r2, r7, r4
 8011a1a:	6013      	str	r3, [r2, #0]
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	f383 8810 	msr	PRIMASK, r3
}
 8011a26:	46c0      	nop			@ (mov r8, r8)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	4953      	ldr	r1, [pc, #332]	@ (8011b80 <HAL_UART_IRQHandler+0x5d4>)
 8011a34:	400a      	ands	r2, r1
 8011a36:	601a      	str	r2, [r3, #0]
 8011a38:	193b      	adds	r3, r7, r4
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	f383 8810 	msr	PRIMASK, r3
}
 8011a44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a46:	f3ef 8310 	mrs	r3, PRIMASK
 8011a4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8011a4c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a4e:	2484      	movs	r4, #132	@ 0x84
 8011a50:	193a      	adds	r2, r7, r4
 8011a52:	6013      	str	r3, [r2, #0]
 8011a54:	2301      	movs	r3, #1
 8011a56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	f383 8810 	msr	PRIMASK, r3
}
 8011a5e:	46c0      	nop			@ (mov r8, r8)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	689a      	ldr	r2, [r3, #8]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2101      	movs	r1, #1
 8011a6c:	438a      	bics	r2, r1
 8011a6e:	609a      	str	r2, [r3, #8]
 8011a70:	193b      	adds	r3, r7, r4
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a76:	6a3b      	ldr	r3, [r7, #32]
 8011a78:	f383 8810 	msr	PRIMASK, r3
}
 8011a7c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2280      	movs	r2, #128	@ 0x80
 8011a82:	2120      	movs	r1, #32
 8011a84:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a92:	f3ef 8310 	mrs	r3, PRIMASK
 8011a96:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8011a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a9a:	2480      	movs	r4, #128	@ 0x80
 8011a9c:	193a      	adds	r2, r7, r4
 8011a9e:	6013      	str	r3, [r2, #0]
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aa6:	f383 8810 	msr	PRIMASK, r3
}
 8011aaa:	46c0      	nop			@ (mov r8, r8)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2110      	movs	r1, #16
 8011ab8:	438a      	bics	r2, r1
 8011aba:	601a      	str	r2, [r3, #0]
 8011abc:	193b      	adds	r3, r7, r4
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ac4:	f383 8810 	msr	PRIMASK, r3
}
 8011ac8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2202      	movs	r2, #2
 8011ace:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	22ac      	movs	r2, #172	@ 0xac
 8011ad4:	589b      	ldr	r3, [r3, r2]
 8011ad6:	183a      	adds	r2, r7, r0
 8011ad8:	8811      	ldrh	r1, [r2, #0]
 8011ada:	687a      	ldr	r2, [r7, #4]
 8011adc:	0010      	movs	r0, r2
 8011ade:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011ae0:	e046      	b.n	8011b70 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011ae2:	23a4      	movs	r3, #164	@ 0xa4
 8011ae4:	18fb      	adds	r3, r7, r3
 8011ae6:	681a      	ldr	r2, [r3, #0]
 8011ae8:	2380      	movs	r3, #128	@ 0x80
 8011aea:	035b      	lsls	r3, r3, #13
 8011aec:	4013      	ands	r3, r2
 8011aee:	d012      	beq.n	8011b16 <HAL_UART_IRQHandler+0x56a>
 8011af0:	239c      	movs	r3, #156	@ 0x9c
 8011af2:	18fb      	adds	r3, r7, r3
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	2380      	movs	r3, #128	@ 0x80
 8011af8:	03db      	lsls	r3, r3, #15
 8011afa:	4013      	ands	r3, r2
 8011afc:	d00b      	beq.n	8011b16 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	2280      	movs	r2, #128	@ 0x80
 8011b04:	0352      	lsls	r2, r2, #13
 8011b06:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	22a8      	movs	r2, #168	@ 0xa8
 8011b0c:	589b      	ldr	r3, [r3, r2]
 8011b0e:	687a      	ldr	r2, [r7, #4]
 8011b10:	0010      	movs	r0, r2
 8011b12:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011b14:	e02f      	b.n	8011b76 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011b16:	23a4      	movs	r3, #164	@ 0xa4
 8011b18:	18fb      	adds	r3, r7, r3
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2280      	movs	r2, #128	@ 0x80
 8011b1e:	4013      	ands	r3, r2
 8011b20:	d00f      	beq.n	8011b42 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011b22:	23a0      	movs	r3, #160	@ 0xa0
 8011b24:	18fb      	adds	r3, r7, r3
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2280      	movs	r2, #128	@ 0x80
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	d009      	beq.n	8011b42 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d01e      	beq.n	8011b74 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b3a:	687a      	ldr	r2, [r7, #4]
 8011b3c:	0010      	movs	r0, r2
 8011b3e:	4798      	blx	r3
    }
    return;
 8011b40:	e018      	b.n	8011b74 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011b42:	23a4      	movs	r3, #164	@ 0xa4
 8011b44:	18fb      	adds	r3, r7, r3
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	2240      	movs	r2, #64	@ 0x40
 8011b4a:	4013      	ands	r3, r2
 8011b4c:	d013      	beq.n	8011b76 <HAL_UART_IRQHandler+0x5ca>
 8011b4e:	23a0      	movs	r3, #160	@ 0xa0
 8011b50:	18fb      	adds	r3, r7, r3
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	2240      	movs	r2, #64	@ 0x40
 8011b56:	4013      	ands	r3, r2
 8011b58:	d00d      	beq.n	8011b76 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	0018      	movs	r0, r3
 8011b5e:	f000 ff98 	bl	8012a92 <UART_EndTransmit_IT>
    return;
 8011b62:	e008      	b.n	8011b76 <HAL_UART_IRQHandler+0x5ca>
      return;
 8011b64:	46c0      	nop			@ (mov r8, r8)
 8011b66:	e006      	b.n	8011b76 <HAL_UART_IRQHandler+0x5ca>
    return;
 8011b68:	46c0      	nop			@ (mov r8, r8)
 8011b6a:	e004      	b.n	8011b76 <HAL_UART_IRQHandler+0x5ca>
      return;
 8011b6c:	46c0      	nop			@ (mov r8, r8)
 8011b6e:	e002      	b.n	8011b76 <HAL_UART_IRQHandler+0x5ca>
      return;
 8011b70:	46c0      	nop			@ (mov r8, r8)
 8011b72:	e000      	b.n	8011b76 <HAL_UART_IRQHandler+0x5ca>
    return;
 8011b74:	46c0      	nop			@ (mov r8, r8)
  }

}
 8011b76:	46bd      	mov	sp, r7
 8011b78:	b02b      	add	sp, #172	@ 0xac
 8011b7a:	bd90      	pop	{r4, r7, pc}
 8011b7c:	fffffeff 	.word	0xfffffeff
 8011b80:	fffffedf 	.word	0xfffffedf

08011b84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011b8c:	46c0      	nop			@ (mov r8, r8)
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	b002      	add	sp, #8
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011b9c:	46c0      	nop			@ (mov r8, r8)
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	b002      	add	sp, #8
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011bac:	46c0      	nop			@ (mov r8, r8)
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	b002      	add	sp, #8
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8011bbc:	46c0      	nop			@ (mov r8, r8)
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	b002      	add	sp, #8
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8011bcc:	46c0      	nop			@ (mov r8, r8)
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	b002      	add	sp, #8
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8011bdc:	46c0      	nop			@ (mov r8, r8)
 8011bde:	46bd      	mov	sp, r7
 8011be0:	b002      	add	sp, #8
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	000a      	movs	r2, r1
 8011bee:	1cbb      	adds	r3, r7, #2
 8011bf0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011bf2:	46c0      	nop			@ (mov r8, r8)
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	b002      	add	sp, #8
 8011bf8:	bd80      	pop	{r7, pc}
	...

08011bfc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2188      	movs	r1, #136	@ 0x88
 8011c08:	4a14      	ldr	r2, [pc, #80]	@ (8011c5c <UART_InitCallbacksToDefault+0x60>)
 8011c0a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	218c      	movs	r1, #140	@ 0x8c
 8011c10:	4a13      	ldr	r2, [pc, #76]	@ (8011c60 <UART_InitCallbacksToDefault+0x64>)
 8011c12:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2190      	movs	r1, #144	@ 0x90
 8011c18:	4a12      	ldr	r2, [pc, #72]	@ (8011c64 <UART_InitCallbacksToDefault+0x68>)
 8011c1a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2194      	movs	r1, #148	@ 0x94
 8011c20:	4a11      	ldr	r2, [pc, #68]	@ (8011c68 <UART_InitCallbacksToDefault+0x6c>)
 8011c22:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2198      	movs	r1, #152	@ 0x98
 8011c28:	4a10      	ldr	r2, [pc, #64]	@ (8011c6c <UART_InitCallbacksToDefault+0x70>)
 8011c2a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	219c      	movs	r1, #156	@ 0x9c
 8011c30:	4a0f      	ldr	r2, [pc, #60]	@ (8011c70 <UART_InitCallbacksToDefault+0x74>)
 8011c32:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	21a0      	movs	r1, #160	@ 0xa0
 8011c38:	4a0e      	ldr	r2, [pc, #56]	@ (8011c74 <UART_InitCallbacksToDefault+0x78>)
 8011c3a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	21a4      	movs	r1, #164	@ 0xa4
 8011c40:	4a0d      	ldr	r2, [pc, #52]	@ (8011c78 <UART_InitCallbacksToDefault+0x7c>)
 8011c42:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	21a8      	movs	r1, #168	@ 0xa8
 8011c48:	4a0c      	ldr	r2, [pc, #48]	@ (8011c7c <UART_InitCallbacksToDefault+0x80>)
 8011c4a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	21ac      	movs	r1, #172	@ 0xac
 8011c50:	4a0b      	ldr	r2, [pc, #44]	@ (8011c80 <UART_InitCallbacksToDefault+0x84>)
 8011c52:	505a      	str	r2, [r3, r1]

}
 8011c54:	46c0      	nop			@ (mov r8, r8)
 8011c56:	46bd      	mov	sp, r7
 8011c58:	b002      	add	sp, #8
 8011c5a:	bd80      	pop	{r7, pc}
 8011c5c:	08011b95 	.word	0x08011b95
 8011c60:	08011b85 	.word	0x08011b85
 8011c64:	08011ba5 	.word	0x08011ba5
 8011c68:	08003839 	.word	0x08003839
 8011c6c:	08003875 	.word	0x08003875
 8011c70:	08011bb5 	.word	0x08011bb5
 8011c74:	08011bc5 	.word	0x08011bc5
 8011c78:	08011bd5 	.word	0x08011bd5
 8011c7c:	08012aed 	.word	0x08012aed
 8011c80:	08011be5 	.word	0x08011be5

08011c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011c84:	b5b0      	push	{r4, r5, r7, lr}
 8011c86:	b08e      	sub	sp, #56	@ 0x38
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011c8c:	231a      	movs	r3, #26
 8011c8e:	2218      	movs	r2, #24
 8011c90:	189b      	adds	r3, r3, r2
 8011c92:	19db      	adds	r3, r3, r7
 8011c94:	2200      	movs	r2, #0
 8011c96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011c98:	69fb      	ldr	r3, [r7, #28]
 8011c9a:	689a      	ldr	r2, [r3, #8]
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	691b      	ldr	r3, [r3, #16]
 8011ca0:	431a      	orrs	r2, r3
 8011ca2:	69fb      	ldr	r3, [r7, #28]
 8011ca4:	695b      	ldr	r3, [r3, #20]
 8011ca6:	431a      	orrs	r2, r3
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	69db      	ldr	r3, [r3, #28]
 8011cac:	4313      	orrs	r3, r2
 8011cae:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	4ac3      	ldr	r2, [pc, #780]	@ (8011fc4 <UART_SetConfig+0x340>)
 8011cb8:	4013      	ands	r3, r2
 8011cba:	0019      	movs	r1, r3
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cc2:	430a      	orrs	r2, r1
 8011cc4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011cc6:	69fb      	ldr	r3, [r7, #28]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	4abe      	ldr	r2, [pc, #760]	@ (8011fc8 <UART_SetConfig+0x344>)
 8011cce:	4013      	ands	r3, r2
 8011cd0:	0019      	movs	r1, r3
 8011cd2:	69fb      	ldr	r3, [r7, #28]
 8011cd4:	68da      	ldr	r2, [r3, #12]
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	430a      	orrs	r2, r1
 8011cdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	699b      	ldr	r3, [r3, #24]
 8011ce2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4ab8      	ldr	r2, [pc, #736]	@ (8011fcc <UART_SetConfig+0x348>)
 8011cea:	4293      	cmp	r3, r2
 8011cec:	d004      	beq.n	8011cf8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011cee:	69fb      	ldr	r3, [r7, #28]
 8011cf0:	6a1b      	ldr	r3, [r3, #32]
 8011cf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	4ab4      	ldr	r2, [pc, #720]	@ (8011fd0 <UART_SetConfig+0x34c>)
 8011d00:	4013      	ands	r3, r2
 8011d02:	0019      	movs	r1, r3
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d0a:	430a      	orrs	r2, r1
 8011d0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	4ab0      	ldr	r2, [pc, #704]	@ (8011fd4 <UART_SetConfig+0x350>)
 8011d14:	4293      	cmp	r3, r2
 8011d16:	d131      	bne.n	8011d7c <UART_SetConfig+0xf8>
 8011d18:	4baf      	ldr	r3, [pc, #700]	@ (8011fd8 <UART_SetConfig+0x354>)
 8011d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d1c:	2203      	movs	r2, #3
 8011d1e:	4013      	ands	r3, r2
 8011d20:	2b03      	cmp	r3, #3
 8011d22:	d01d      	beq.n	8011d60 <UART_SetConfig+0xdc>
 8011d24:	d823      	bhi.n	8011d6e <UART_SetConfig+0xea>
 8011d26:	2b02      	cmp	r3, #2
 8011d28:	d00c      	beq.n	8011d44 <UART_SetConfig+0xc0>
 8011d2a:	d820      	bhi.n	8011d6e <UART_SetConfig+0xea>
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <UART_SetConfig+0xb2>
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d00e      	beq.n	8011d52 <UART_SetConfig+0xce>
 8011d34:	e01b      	b.n	8011d6e <UART_SetConfig+0xea>
 8011d36:	231b      	movs	r3, #27
 8011d38:	2218      	movs	r2, #24
 8011d3a:	189b      	adds	r3, r3, r2
 8011d3c:	19db      	adds	r3, r3, r7
 8011d3e:	2201      	movs	r2, #1
 8011d40:	701a      	strb	r2, [r3, #0]
 8011d42:	e0b4      	b.n	8011eae <UART_SetConfig+0x22a>
 8011d44:	231b      	movs	r3, #27
 8011d46:	2218      	movs	r2, #24
 8011d48:	189b      	adds	r3, r3, r2
 8011d4a:	19db      	adds	r3, r3, r7
 8011d4c:	2202      	movs	r2, #2
 8011d4e:	701a      	strb	r2, [r3, #0]
 8011d50:	e0ad      	b.n	8011eae <UART_SetConfig+0x22a>
 8011d52:	231b      	movs	r3, #27
 8011d54:	2218      	movs	r2, #24
 8011d56:	189b      	adds	r3, r3, r2
 8011d58:	19db      	adds	r3, r3, r7
 8011d5a:	2204      	movs	r2, #4
 8011d5c:	701a      	strb	r2, [r3, #0]
 8011d5e:	e0a6      	b.n	8011eae <UART_SetConfig+0x22a>
 8011d60:	231b      	movs	r3, #27
 8011d62:	2218      	movs	r2, #24
 8011d64:	189b      	adds	r3, r3, r2
 8011d66:	19db      	adds	r3, r3, r7
 8011d68:	2208      	movs	r2, #8
 8011d6a:	701a      	strb	r2, [r3, #0]
 8011d6c:	e09f      	b.n	8011eae <UART_SetConfig+0x22a>
 8011d6e:	231b      	movs	r3, #27
 8011d70:	2218      	movs	r2, #24
 8011d72:	189b      	adds	r3, r3, r2
 8011d74:	19db      	adds	r3, r3, r7
 8011d76:	2210      	movs	r2, #16
 8011d78:	701a      	strb	r2, [r3, #0]
 8011d7a:	e098      	b.n	8011eae <UART_SetConfig+0x22a>
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4a96      	ldr	r2, [pc, #600]	@ (8011fdc <UART_SetConfig+0x358>)
 8011d82:	4293      	cmp	r3, r2
 8011d84:	d131      	bne.n	8011dea <UART_SetConfig+0x166>
 8011d86:	4b94      	ldr	r3, [pc, #592]	@ (8011fd8 <UART_SetConfig+0x354>)
 8011d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d8a:	220c      	movs	r2, #12
 8011d8c:	4013      	ands	r3, r2
 8011d8e:	2b0c      	cmp	r3, #12
 8011d90:	d01d      	beq.n	8011dce <UART_SetConfig+0x14a>
 8011d92:	d823      	bhi.n	8011ddc <UART_SetConfig+0x158>
 8011d94:	2b08      	cmp	r3, #8
 8011d96:	d00c      	beq.n	8011db2 <UART_SetConfig+0x12e>
 8011d98:	d820      	bhi.n	8011ddc <UART_SetConfig+0x158>
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d002      	beq.n	8011da4 <UART_SetConfig+0x120>
 8011d9e:	2b04      	cmp	r3, #4
 8011da0:	d00e      	beq.n	8011dc0 <UART_SetConfig+0x13c>
 8011da2:	e01b      	b.n	8011ddc <UART_SetConfig+0x158>
 8011da4:	231b      	movs	r3, #27
 8011da6:	2218      	movs	r2, #24
 8011da8:	189b      	adds	r3, r3, r2
 8011daa:	19db      	adds	r3, r3, r7
 8011dac:	2200      	movs	r2, #0
 8011dae:	701a      	strb	r2, [r3, #0]
 8011db0:	e07d      	b.n	8011eae <UART_SetConfig+0x22a>
 8011db2:	231b      	movs	r3, #27
 8011db4:	2218      	movs	r2, #24
 8011db6:	189b      	adds	r3, r3, r2
 8011db8:	19db      	adds	r3, r3, r7
 8011dba:	2202      	movs	r2, #2
 8011dbc:	701a      	strb	r2, [r3, #0]
 8011dbe:	e076      	b.n	8011eae <UART_SetConfig+0x22a>
 8011dc0:	231b      	movs	r3, #27
 8011dc2:	2218      	movs	r2, #24
 8011dc4:	189b      	adds	r3, r3, r2
 8011dc6:	19db      	adds	r3, r3, r7
 8011dc8:	2204      	movs	r2, #4
 8011dca:	701a      	strb	r2, [r3, #0]
 8011dcc:	e06f      	b.n	8011eae <UART_SetConfig+0x22a>
 8011dce:	231b      	movs	r3, #27
 8011dd0:	2218      	movs	r2, #24
 8011dd2:	189b      	adds	r3, r3, r2
 8011dd4:	19db      	adds	r3, r3, r7
 8011dd6:	2208      	movs	r2, #8
 8011dd8:	701a      	strb	r2, [r3, #0]
 8011dda:	e068      	b.n	8011eae <UART_SetConfig+0x22a>
 8011ddc:	231b      	movs	r3, #27
 8011dde:	2218      	movs	r2, #24
 8011de0:	189b      	adds	r3, r3, r2
 8011de2:	19db      	adds	r3, r3, r7
 8011de4:	2210      	movs	r2, #16
 8011de6:	701a      	strb	r2, [r3, #0]
 8011de8:	e061      	b.n	8011eae <UART_SetConfig+0x22a>
 8011dea:	69fb      	ldr	r3, [r7, #28]
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	4a7c      	ldr	r2, [pc, #496]	@ (8011fe0 <UART_SetConfig+0x35c>)
 8011df0:	4293      	cmp	r3, r2
 8011df2:	d106      	bne.n	8011e02 <UART_SetConfig+0x17e>
 8011df4:	231b      	movs	r3, #27
 8011df6:	2218      	movs	r2, #24
 8011df8:	189b      	adds	r3, r3, r2
 8011dfa:	19db      	adds	r3, r3, r7
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	701a      	strb	r2, [r3, #0]
 8011e00:	e055      	b.n	8011eae <UART_SetConfig+0x22a>
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	4a77      	ldr	r2, [pc, #476]	@ (8011fe4 <UART_SetConfig+0x360>)
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d106      	bne.n	8011e1a <UART_SetConfig+0x196>
 8011e0c:	231b      	movs	r3, #27
 8011e0e:	2218      	movs	r2, #24
 8011e10:	189b      	adds	r3, r3, r2
 8011e12:	19db      	adds	r3, r3, r7
 8011e14:	2200      	movs	r2, #0
 8011e16:	701a      	strb	r2, [r3, #0]
 8011e18:	e049      	b.n	8011eae <UART_SetConfig+0x22a>
 8011e1a:	69fb      	ldr	r3, [r7, #28]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	4a6b      	ldr	r2, [pc, #428]	@ (8011fcc <UART_SetConfig+0x348>)
 8011e20:	4293      	cmp	r3, r2
 8011e22:	d13e      	bne.n	8011ea2 <UART_SetConfig+0x21e>
 8011e24:	4b6c      	ldr	r3, [pc, #432]	@ (8011fd8 <UART_SetConfig+0x354>)
 8011e26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011e28:	23c0      	movs	r3, #192	@ 0xc0
 8011e2a:	011b      	lsls	r3, r3, #4
 8011e2c:	4013      	ands	r3, r2
 8011e2e:	22c0      	movs	r2, #192	@ 0xc0
 8011e30:	0112      	lsls	r2, r2, #4
 8011e32:	4293      	cmp	r3, r2
 8011e34:	d027      	beq.n	8011e86 <UART_SetConfig+0x202>
 8011e36:	22c0      	movs	r2, #192	@ 0xc0
 8011e38:	0112      	lsls	r2, r2, #4
 8011e3a:	4293      	cmp	r3, r2
 8011e3c:	d82a      	bhi.n	8011e94 <UART_SetConfig+0x210>
 8011e3e:	2280      	movs	r2, #128	@ 0x80
 8011e40:	0112      	lsls	r2, r2, #4
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d011      	beq.n	8011e6a <UART_SetConfig+0x1e6>
 8011e46:	2280      	movs	r2, #128	@ 0x80
 8011e48:	0112      	lsls	r2, r2, #4
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	d822      	bhi.n	8011e94 <UART_SetConfig+0x210>
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d004      	beq.n	8011e5c <UART_SetConfig+0x1d8>
 8011e52:	2280      	movs	r2, #128	@ 0x80
 8011e54:	00d2      	lsls	r2, r2, #3
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d00e      	beq.n	8011e78 <UART_SetConfig+0x1f4>
 8011e5a:	e01b      	b.n	8011e94 <UART_SetConfig+0x210>
 8011e5c:	231b      	movs	r3, #27
 8011e5e:	2218      	movs	r2, #24
 8011e60:	189b      	adds	r3, r3, r2
 8011e62:	19db      	adds	r3, r3, r7
 8011e64:	2200      	movs	r2, #0
 8011e66:	701a      	strb	r2, [r3, #0]
 8011e68:	e021      	b.n	8011eae <UART_SetConfig+0x22a>
 8011e6a:	231b      	movs	r3, #27
 8011e6c:	2218      	movs	r2, #24
 8011e6e:	189b      	adds	r3, r3, r2
 8011e70:	19db      	adds	r3, r3, r7
 8011e72:	2202      	movs	r2, #2
 8011e74:	701a      	strb	r2, [r3, #0]
 8011e76:	e01a      	b.n	8011eae <UART_SetConfig+0x22a>
 8011e78:	231b      	movs	r3, #27
 8011e7a:	2218      	movs	r2, #24
 8011e7c:	189b      	adds	r3, r3, r2
 8011e7e:	19db      	adds	r3, r3, r7
 8011e80:	2204      	movs	r2, #4
 8011e82:	701a      	strb	r2, [r3, #0]
 8011e84:	e013      	b.n	8011eae <UART_SetConfig+0x22a>
 8011e86:	231b      	movs	r3, #27
 8011e88:	2218      	movs	r2, #24
 8011e8a:	189b      	adds	r3, r3, r2
 8011e8c:	19db      	adds	r3, r3, r7
 8011e8e:	2208      	movs	r2, #8
 8011e90:	701a      	strb	r2, [r3, #0]
 8011e92:	e00c      	b.n	8011eae <UART_SetConfig+0x22a>
 8011e94:	231b      	movs	r3, #27
 8011e96:	2218      	movs	r2, #24
 8011e98:	189b      	adds	r3, r3, r2
 8011e9a:	19db      	adds	r3, r3, r7
 8011e9c:	2210      	movs	r2, #16
 8011e9e:	701a      	strb	r2, [r3, #0]
 8011ea0:	e005      	b.n	8011eae <UART_SetConfig+0x22a>
 8011ea2:	231b      	movs	r3, #27
 8011ea4:	2218      	movs	r2, #24
 8011ea6:	189b      	adds	r3, r3, r2
 8011ea8:	19db      	adds	r3, r3, r7
 8011eaa:	2210      	movs	r2, #16
 8011eac:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	4a46      	ldr	r2, [pc, #280]	@ (8011fcc <UART_SetConfig+0x348>)
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d000      	beq.n	8011eba <UART_SetConfig+0x236>
 8011eb8:	e09a      	b.n	8011ff0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011eba:	231b      	movs	r3, #27
 8011ebc:	2218      	movs	r2, #24
 8011ebe:	189b      	adds	r3, r3, r2
 8011ec0:	19db      	adds	r3, r3, r7
 8011ec2:	781b      	ldrb	r3, [r3, #0]
 8011ec4:	2b08      	cmp	r3, #8
 8011ec6:	d01d      	beq.n	8011f04 <UART_SetConfig+0x280>
 8011ec8:	dc20      	bgt.n	8011f0c <UART_SetConfig+0x288>
 8011eca:	2b04      	cmp	r3, #4
 8011ecc:	d015      	beq.n	8011efa <UART_SetConfig+0x276>
 8011ece:	dc1d      	bgt.n	8011f0c <UART_SetConfig+0x288>
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d002      	beq.n	8011eda <UART_SetConfig+0x256>
 8011ed4:	2b02      	cmp	r3, #2
 8011ed6:	d005      	beq.n	8011ee4 <UART_SetConfig+0x260>
 8011ed8:	e018      	b.n	8011f0c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011eda:	f7fe fa71 	bl	80103c0 <HAL_RCC_GetPCLK1Freq>
 8011ede:	0003      	movs	r3, r0
 8011ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011ee2:	e01c      	b.n	8011f1e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8011fd8 <UART_SetConfig+0x354>)
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2210      	movs	r2, #16
 8011eea:	4013      	ands	r3, r2
 8011eec:	d002      	beq.n	8011ef4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8011eee:	4b3e      	ldr	r3, [pc, #248]	@ (8011fe8 <UART_SetConfig+0x364>)
 8011ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ef2:	e014      	b.n	8011f1e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8011ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8011fec <UART_SetConfig+0x368>)
 8011ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011ef8:	e011      	b.n	8011f1e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011efa:	f7fe f9b1 	bl	8010260 <HAL_RCC_GetSysClockFreq>
 8011efe:	0003      	movs	r3, r0
 8011f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011f02:	e00c      	b.n	8011f1e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f04:	2380      	movs	r3, #128	@ 0x80
 8011f06:	021b      	lsls	r3, r3, #8
 8011f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011f0a:	e008      	b.n	8011f1e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8011f10:	231a      	movs	r3, #26
 8011f12:	2218      	movs	r2, #24
 8011f14:	189b      	adds	r3, r3, r2
 8011f16:	19db      	adds	r3, r3, r7
 8011f18:	2201      	movs	r2, #1
 8011f1a:	701a      	strb	r2, [r3, #0]
        break;
 8011f1c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d100      	bne.n	8011f26 <UART_SetConfig+0x2a2>
 8011f24:	e133      	b.n	801218e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011f26:	69fb      	ldr	r3, [r7, #28]
 8011f28:	685a      	ldr	r2, [r3, #4]
 8011f2a:	0013      	movs	r3, r2
 8011f2c:	005b      	lsls	r3, r3, #1
 8011f2e:	189b      	adds	r3, r3, r2
 8011f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d305      	bcc.n	8011f42 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d906      	bls.n	8011f50 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8011f42:	231a      	movs	r3, #26
 8011f44:	2218      	movs	r2, #24
 8011f46:	189b      	adds	r3, r3, r2
 8011f48:	19db      	adds	r3, r3, r7
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	701a      	strb	r2, [r3, #0]
 8011f4e:	e11e      	b.n	801218e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8011f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f52:	613b      	str	r3, [r7, #16]
 8011f54:	2300      	movs	r3, #0
 8011f56:	617b      	str	r3, [r7, #20]
 8011f58:	6939      	ldr	r1, [r7, #16]
 8011f5a:	697a      	ldr	r2, [r7, #20]
 8011f5c:	000b      	movs	r3, r1
 8011f5e:	0e1b      	lsrs	r3, r3, #24
 8011f60:	0010      	movs	r0, r2
 8011f62:	0205      	lsls	r5, r0, #8
 8011f64:	431d      	orrs	r5, r3
 8011f66:	000b      	movs	r3, r1
 8011f68:	021c      	lsls	r4, r3, #8
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	085b      	lsrs	r3, r3, #1
 8011f70:	60bb      	str	r3, [r7, #8]
 8011f72:	2300      	movs	r3, #0
 8011f74:	60fb      	str	r3, [r7, #12]
 8011f76:	68b8      	ldr	r0, [r7, #8]
 8011f78:	68f9      	ldr	r1, [r7, #12]
 8011f7a:	1900      	adds	r0, r0, r4
 8011f7c:	4169      	adcs	r1, r5
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	603b      	str	r3, [r7, #0]
 8011f84:	2300      	movs	r3, #0
 8011f86:	607b      	str	r3, [r7, #4]
 8011f88:	683a      	ldr	r2, [r7, #0]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f7ee fac6 	bl	800051c <__aeabi_uldivmod>
 8011f90:	0002      	movs	r2, r0
 8011f92:	000b      	movs	r3, r1
 8011f94:	0013      	movs	r3, r2
 8011f96:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f9a:	23c0      	movs	r3, #192	@ 0xc0
 8011f9c:	009b      	lsls	r3, r3, #2
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d309      	bcc.n	8011fb6 <UART_SetConfig+0x332>
 8011fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fa4:	2380      	movs	r3, #128	@ 0x80
 8011fa6:	035b      	lsls	r3, r3, #13
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d204      	bcs.n	8011fb6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fb2:	60da      	str	r2, [r3, #12]
 8011fb4:	e0eb      	b.n	801218e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8011fb6:	231a      	movs	r3, #26
 8011fb8:	2218      	movs	r2, #24
 8011fba:	189b      	adds	r3, r3, r2
 8011fbc:	19db      	adds	r3, r3, r7
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	701a      	strb	r2, [r3, #0]
 8011fc2:	e0e4      	b.n	801218e <UART_SetConfig+0x50a>
 8011fc4:	efff69f3 	.word	0xefff69f3
 8011fc8:	ffffcfff 	.word	0xffffcfff
 8011fcc:	40004800 	.word	0x40004800
 8011fd0:	fffff4ff 	.word	0xfffff4ff
 8011fd4:	40013800 	.word	0x40013800
 8011fd8:	40021000 	.word	0x40021000
 8011fdc:	40004400 	.word	0x40004400
 8011fe0:	40004c00 	.word	0x40004c00
 8011fe4:	40005000 	.word	0x40005000
 8011fe8:	003d0900 	.word	0x003d0900
 8011fec:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	69da      	ldr	r2, [r3, #28]
 8011ff4:	2380      	movs	r3, #128	@ 0x80
 8011ff6:	021b      	lsls	r3, r3, #8
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d000      	beq.n	8011ffe <UART_SetConfig+0x37a>
 8011ffc:	e070      	b.n	80120e0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8011ffe:	231b      	movs	r3, #27
 8012000:	2218      	movs	r2, #24
 8012002:	189b      	adds	r3, r3, r2
 8012004:	19db      	adds	r3, r3, r7
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	2b08      	cmp	r3, #8
 801200a:	d822      	bhi.n	8012052 <UART_SetConfig+0x3ce>
 801200c:	009a      	lsls	r2, r3, #2
 801200e:	4b67      	ldr	r3, [pc, #412]	@ (80121ac <UART_SetConfig+0x528>)
 8012010:	18d3      	adds	r3, r2, r3
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012016:	f7fe f9d3 	bl	80103c0 <HAL_RCC_GetPCLK1Freq>
 801201a:	0003      	movs	r3, r0
 801201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801201e:	e021      	b.n	8012064 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012020:	f7fe f9e4 	bl	80103ec <HAL_RCC_GetPCLK2Freq>
 8012024:	0003      	movs	r3, r0
 8012026:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012028:	e01c      	b.n	8012064 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801202a:	4b61      	ldr	r3, [pc, #388]	@ (80121b0 <UART_SetConfig+0x52c>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2210      	movs	r2, #16
 8012030:	4013      	ands	r3, r2
 8012032:	d002      	beq.n	801203a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8012034:	4b5f      	ldr	r3, [pc, #380]	@ (80121b4 <UART_SetConfig+0x530>)
 8012036:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012038:	e014      	b.n	8012064 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801203a:	4b5f      	ldr	r3, [pc, #380]	@ (80121b8 <UART_SetConfig+0x534>)
 801203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801203e:	e011      	b.n	8012064 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012040:	f7fe f90e 	bl	8010260 <HAL_RCC_GetSysClockFreq>
 8012044:	0003      	movs	r3, r0
 8012046:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012048:	e00c      	b.n	8012064 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801204a:	2380      	movs	r3, #128	@ 0x80
 801204c:	021b      	lsls	r3, r3, #8
 801204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012050:	e008      	b.n	8012064 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8012052:	2300      	movs	r3, #0
 8012054:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012056:	231a      	movs	r3, #26
 8012058:	2218      	movs	r2, #24
 801205a:	189b      	adds	r3, r3, r2
 801205c:	19db      	adds	r3, r3, r7
 801205e:	2201      	movs	r2, #1
 8012060:	701a      	strb	r2, [r3, #0]
        break;
 8012062:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012066:	2b00      	cmp	r3, #0
 8012068:	d100      	bne.n	801206c <UART_SetConfig+0x3e8>
 801206a:	e090      	b.n	801218e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801206c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801206e:	005a      	lsls	r2, r3, #1
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	085b      	lsrs	r3, r3, #1
 8012076:	18d2      	adds	r2, r2, r3
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	0019      	movs	r1, r3
 801207e:	0010      	movs	r0, r2
 8012080:	f7ee f85e 	bl	8000140 <__udivsi3>
 8012084:	0003      	movs	r3, r0
 8012086:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801208a:	2b0f      	cmp	r3, #15
 801208c:	d921      	bls.n	80120d2 <UART_SetConfig+0x44e>
 801208e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012090:	2380      	movs	r3, #128	@ 0x80
 8012092:	025b      	lsls	r3, r3, #9
 8012094:	429a      	cmp	r2, r3
 8012096:	d21c      	bcs.n	80120d2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801209a:	b29a      	uxth	r2, r3
 801209c:	200e      	movs	r0, #14
 801209e:	2418      	movs	r4, #24
 80120a0:	1903      	adds	r3, r0, r4
 80120a2:	19db      	adds	r3, r3, r7
 80120a4:	210f      	movs	r1, #15
 80120a6:	438a      	bics	r2, r1
 80120a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80120aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120ac:	085b      	lsrs	r3, r3, #1
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	2207      	movs	r2, #7
 80120b2:	4013      	ands	r3, r2
 80120b4:	b299      	uxth	r1, r3
 80120b6:	1903      	adds	r3, r0, r4
 80120b8:	19db      	adds	r3, r3, r7
 80120ba:	1902      	adds	r2, r0, r4
 80120bc:	19d2      	adds	r2, r2, r7
 80120be:	8812      	ldrh	r2, [r2, #0]
 80120c0:	430a      	orrs	r2, r1
 80120c2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	1902      	adds	r2, r0, r4
 80120ca:	19d2      	adds	r2, r2, r7
 80120cc:	8812      	ldrh	r2, [r2, #0]
 80120ce:	60da      	str	r2, [r3, #12]
 80120d0:	e05d      	b.n	801218e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80120d2:	231a      	movs	r3, #26
 80120d4:	2218      	movs	r2, #24
 80120d6:	189b      	adds	r3, r3, r2
 80120d8:	19db      	adds	r3, r3, r7
 80120da:	2201      	movs	r2, #1
 80120dc:	701a      	strb	r2, [r3, #0]
 80120de:	e056      	b.n	801218e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80120e0:	231b      	movs	r3, #27
 80120e2:	2218      	movs	r2, #24
 80120e4:	189b      	adds	r3, r3, r2
 80120e6:	19db      	adds	r3, r3, r7
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	2b08      	cmp	r3, #8
 80120ec:	d822      	bhi.n	8012134 <UART_SetConfig+0x4b0>
 80120ee:	009a      	lsls	r2, r3, #2
 80120f0:	4b32      	ldr	r3, [pc, #200]	@ (80121bc <UART_SetConfig+0x538>)
 80120f2:	18d3      	adds	r3, r2, r3
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80120f8:	f7fe f962 	bl	80103c0 <HAL_RCC_GetPCLK1Freq>
 80120fc:	0003      	movs	r3, r0
 80120fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012100:	e021      	b.n	8012146 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012102:	f7fe f973 	bl	80103ec <HAL_RCC_GetPCLK2Freq>
 8012106:	0003      	movs	r3, r0
 8012108:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801210a:	e01c      	b.n	8012146 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801210c:	4b28      	ldr	r3, [pc, #160]	@ (80121b0 <UART_SetConfig+0x52c>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	2210      	movs	r2, #16
 8012112:	4013      	ands	r3, r2
 8012114:	d002      	beq.n	801211c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8012116:	4b27      	ldr	r3, [pc, #156]	@ (80121b4 <UART_SetConfig+0x530>)
 8012118:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801211a:	e014      	b.n	8012146 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801211c:	4b26      	ldr	r3, [pc, #152]	@ (80121b8 <UART_SetConfig+0x534>)
 801211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012120:	e011      	b.n	8012146 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012122:	f7fe f89d 	bl	8010260 <HAL_RCC_GetSysClockFreq>
 8012126:	0003      	movs	r3, r0
 8012128:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801212a:	e00c      	b.n	8012146 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801212c:	2380      	movs	r3, #128	@ 0x80
 801212e:	021b      	lsls	r3, r3, #8
 8012130:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012132:	e008      	b.n	8012146 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8012134:	2300      	movs	r3, #0
 8012136:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8012138:	231a      	movs	r3, #26
 801213a:	2218      	movs	r2, #24
 801213c:	189b      	adds	r3, r3, r2
 801213e:	19db      	adds	r3, r3, r7
 8012140:	2201      	movs	r2, #1
 8012142:	701a      	strb	r2, [r3, #0]
        break;
 8012144:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8012146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012148:	2b00      	cmp	r3, #0
 801214a:	d020      	beq.n	801218e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	085a      	lsrs	r2, r3, #1
 8012152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012154:	18d2      	adds	r2, r2, r3
 8012156:	69fb      	ldr	r3, [r7, #28]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	0019      	movs	r1, r3
 801215c:	0010      	movs	r0, r2
 801215e:	f7ed ffef 	bl	8000140 <__udivsi3>
 8012162:	0003      	movs	r3, r0
 8012164:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012168:	2b0f      	cmp	r3, #15
 801216a:	d90a      	bls.n	8012182 <UART_SetConfig+0x4fe>
 801216c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801216e:	2380      	movs	r3, #128	@ 0x80
 8012170:	025b      	lsls	r3, r3, #9
 8012172:	429a      	cmp	r2, r3
 8012174:	d205      	bcs.n	8012182 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012178:	b29a      	uxth	r2, r3
 801217a:	69fb      	ldr	r3, [r7, #28]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	60da      	str	r2, [r3, #12]
 8012180:	e005      	b.n	801218e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8012182:	231a      	movs	r3, #26
 8012184:	2218      	movs	r2, #24
 8012186:	189b      	adds	r3, r3, r2
 8012188:	19db      	adds	r3, r3, r7
 801218a:	2201      	movs	r2, #1
 801218c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801218e:	69fb      	ldr	r3, [r7, #28]
 8012190:	2200      	movs	r2, #0
 8012192:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	2200      	movs	r2, #0
 8012198:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801219a:	231a      	movs	r3, #26
 801219c:	2218      	movs	r2, #24
 801219e:	189b      	adds	r3, r3, r2
 80121a0:	19db      	adds	r3, r3, r7
 80121a2:	781b      	ldrb	r3, [r3, #0]
}
 80121a4:	0018      	movs	r0, r3
 80121a6:	46bd      	mov	sp, r7
 80121a8:	b00e      	add	sp, #56	@ 0x38
 80121aa:	bdb0      	pop	{r4, r5, r7, pc}
 80121ac:	0801b994 	.word	0x0801b994
 80121b0:	40021000 	.word	0x40021000
 80121b4:	003d0900 	.word	0x003d0900
 80121b8:	00f42400 	.word	0x00f42400
 80121bc:	0801b9b8 	.word	0x0801b9b8

080121c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121cc:	2201      	movs	r2, #1
 80121ce:	4013      	ands	r3, r2
 80121d0:	d00b      	beq.n	80121ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	685b      	ldr	r3, [r3, #4]
 80121d8:	4a4a      	ldr	r2, [pc, #296]	@ (8012304 <UART_AdvFeatureConfig+0x144>)
 80121da:	4013      	ands	r3, r2
 80121dc:	0019      	movs	r1, r3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	430a      	orrs	r2, r1
 80121e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121ee:	2202      	movs	r2, #2
 80121f0:	4013      	ands	r3, r2
 80121f2:	d00b      	beq.n	801220c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	4a43      	ldr	r2, [pc, #268]	@ (8012308 <UART_AdvFeatureConfig+0x148>)
 80121fc:	4013      	ands	r3, r2
 80121fe:	0019      	movs	r1, r3
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	430a      	orrs	r2, r1
 801220a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012210:	2204      	movs	r2, #4
 8012212:	4013      	ands	r3, r2
 8012214:	d00b      	beq.n	801222e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	4a3b      	ldr	r2, [pc, #236]	@ (801230c <UART_AdvFeatureConfig+0x14c>)
 801221e:	4013      	ands	r3, r2
 8012220:	0019      	movs	r1, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	430a      	orrs	r2, r1
 801222c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012232:	2208      	movs	r2, #8
 8012234:	4013      	ands	r3, r2
 8012236:	d00b      	beq.n	8012250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	685b      	ldr	r3, [r3, #4]
 801223e:	4a34      	ldr	r2, [pc, #208]	@ (8012310 <UART_AdvFeatureConfig+0x150>)
 8012240:	4013      	ands	r3, r2
 8012242:	0019      	movs	r1, r3
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	430a      	orrs	r2, r1
 801224e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012254:	2210      	movs	r2, #16
 8012256:	4013      	ands	r3, r2
 8012258:	d00b      	beq.n	8012272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	689b      	ldr	r3, [r3, #8]
 8012260:	4a2c      	ldr	r2, [pc, #176]	@ (8012314 <UART_AdvFeatureConfig+0x154>)
 8012262:	4013      	ands	r3, r2
 8012264:	0019      	movs	r1, r3
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	430a      	orrs	r2, r1
 8012270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012276:	2220      	movs	r2, #32
 8012278:	4013      	ands	r3, r2
 801227a:	d00b      	beq.n	8012294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	689b      	ldr	r3, [r3, #8]
 8012282:	4a25      	ldr	r2, [pc, #148]	@ (8012318 <UART_AdvFeatureConfig+0x158>)
 8012284:	4013      	ands	r3, r2
 8012286:	0019      	movs	r1, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	430a      	orrs	r2, r1
 8012292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012298:	2240      	movs	r2, #64	@ 0x40
 801229a:	4013      	ands	r3, r2
 801229c:	d01d      	beq.n	80122da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	685b      	ldr	r3, [r3, #4]
 80122a4:	4a1d      	ldr	r2, [pc, #116]	@ (801231c <UART_AdvFeatureConfig+0x15c>)
 80122a6:	4013      	ands	r3, r2
 80122a8:	0019      	movs	r1, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	430a      	orrs	r2, r1
 80122b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80122ba:	2380      	movs	r3, #128	@ 0x80
 80122bc:	035b      	lsls	r3, r3, #13
 80122be:	429a      	cmp	r2, r3
 80122c0:	d10b      	bne.n	80122da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	4a15      	ldr	r2, [pc, #84]	@ (8012320 <UART_AdvFeatureConfig+0x160>)
 80122ca:	4013      	ands	r3, r2
 80122cc:	0019      	movs	r1, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	430a      	orrs	r2, r1
 80122d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122de:	2280      	movs	r2, #128	@ 0x80
 80122e0:	4013      	ands	r3, r2
 80122e2:	d00b      	beq.n	80122fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	4a0e      	ldr	r2, [pc, #56]	@ (8012324 <UART_AdvFeatureConfig+0x164>)
 80122ec:	4013      	ands	r3, r2
 80122ee:	0019      	movs	r1, r3
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	430a      	orrs	r2, r1
 80122fa:	605a      	str	r2, [r3, #4]
  }
}
 80122fc:	46c0      	nop			@ (mov r8, r8)
 80122fe:	46bd      	mov	sp, r7
 8012300:	b002      	add	sp, #8
 8012302:	bd80      	pop	{r7, pc}
 8012304:	fffdffff 	.word	0xfffdffff
 8012308:	fffeffff 	.word	0xfffeffff
 801230c:	fffbffff 	.word	0xfffbffff
 8012310:	ffff7fff 	.word	0xffff7fff
 8012314:	ffffefff 	.word	0xffffefff
 8012318:	ffffdfff 	.word	0xffffdfff
 801231c:	ffefffff 	.word	0xffefffff
 8012320:	ff9fffff 	.word	0xff9fffff
 8012324:	fff7ffff 	.word	0xfff7ffff

08012328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b092      	sub	sp, #72	@ 0x48
 801232c:	af02      	add	r7, sp, #8
 801232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2284      	movs	r2, #132	@ 0x84
 8012334:	2100      	movs	r1, #0
 8012336:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012338:	f7f7 fcfc 	bl	8009d34 <HAL_GetTick>
 801233c:	0003      	movs	r3, r0
 801233e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2208      	movs	r2, #8
 8012348:	4013      	ands	r3, r2
 801234a:	2b08      	cmp	r3, #8
 801234c:	d12c      	bne.n	80123a8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801234e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012350:	2280      	movs	r2, #128	@ 0x80
 8012352:	0391      	lsls	r1, r2, #14
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	4a46      	ldr	r2, [pc, #280]	@ (8012470 <UART_CheckIdleState+0x148>)
 8012358:	9200      	str	r2, [sp, #0]
 801235a:	2200      	movs	r2, #0
 801235c:	f000 f88c 	bl	8012478 <UART_WaitOnFlagUntilTimeout>
 8012360:	1e03      	subs	r3, r0, #0
 8012362:	d021      	beq.n	80123a8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012364:	f3ef 8310 	mrs	r3, PRIMASK
 8012368:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801236c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801236e:	2301      	movs	r3, #1
 8012370:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012374:	f383 8810 	msr	PRIMASK, r3
}
 8012378:	46c0      	nop			@ (mov r8, r8)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	681a      	ldr	r2, [r3, #0]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2180      	movs	r1, #128	@ 0x80
 8012386:	438a      	bics	r2, r1
 8012388:	601a      	str	r2, [r3, #0]
 801238a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801238e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012390:	f383 8810 	msr	PRIMASK, r3
}
 8012394:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2220      	movs	r2, #32
 801239a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2278      	movs	r2, #120	@ 0x78
 80123a0:	2100      	movs	r1, #0
 80123a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80123a4:	2303      	movs	r3, #3
 80123a6:	e05f      	b.n	8012468 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	2204      	movs	r2, #4
 80123b0:	4013      	ands	r3, r2
 80123b2:	2b04      	cmp	r3, #4
 80123b4:	d146      	bne.n	8012444 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80123b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123b8:	2280      	movs	r2, #128	@ 0x80
 80123ba:	03d1      	lsls	r1, r2, #15
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	4a2c      	ldr	r2, [pc, #176]	@ (8012470 <UART_CheckIdleState+0x148>)
 80123c0:	9200      	str	r2, [sp, #0]
 80123c2:	2200      	movs	r2, #0
 80123c4:	f000 f858 	bl	8012478 <UART_WaitOnFlagUntilTimeout>
 80123c8:	1e03      	subs	r3, r0, #0
 80123ca:	d03b      	beq.n	8012444 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123cc:	f3ef 8310 	mrs	r3, PRIMASK
 80123d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80123d2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80123d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80123d6:	2301      	movs	r3, #1
 80123d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	f383 8810 	msr	PRIMASK, r3
}
 80123e0:	46c0      	nop			@ (mov r8, r8)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	4921      	ldr	r1, [pc, #132]	@ (8012474 <UART_CheckIdleState+0x14c>)
 80123ee:	400a      	ands	r2, r1
 80123f0:	601a      	str	r2, [r3, #0]
 80123f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	f383 8810 	msr	PRIMASK, r3
}
 80123fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123fe:	f3ef 8310 	mrs	r3, PRIMASK
 8012402:	61bb      	str	r3, [r7, #24]
  return(result);
 8012404:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012406:	633b      	str	r3, [r7, #48]	@ 0x30
 8012408:	2301      	movs	r3, #1
 801240a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	f383 8810 	msr	PRIMASK, r3
}
 8012412:	46c0      	nop			@ (mov r8, r8)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	689a      	ldr	r2, [r3, #8]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	2101      	movs	r1, #1
 8012420:	438a      	bics	r2, r1
 8012422:	609a      	str	r2, [r3, #8]
 8012424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012426:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012428:	6a3b      	ldr	r3, [r7, #32]
 801242a:	f383 8810 	msr	PRIMASK, r3
}
 801242e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2280      	movs	r2, #128	@ 0x80
 8012434:	2120      	movs	r1, #32
 8012436:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2278      	movs	r2, #120	@ 0x78
 801243c:	2100      	movs	r1, #0
 801243e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012440:	2303      	movs	r3, #3
 8012442:	e011      	b.n	8012468 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2220      	movs	r2, #32
 8012448:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2280      	movs	r2, #128	@ 0x80
 801244e:	2120      	movs	r1, #32
 8012450:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2200      	movs	r2, #0
 8012456:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2278      	movs	r2, #120	@ 0x78
 8012462:	2100      	movs	r1, #0
 8012464:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012466:	2300      	movs	r3, #0
}
 8012468:	0018      	movs	r0, r3
 801246a:	46bd      	mov	sp, r7
 801246c:	b010      	add	sp, #64	@ 0x40
 801246e:	bd80      	pop	{r7, pc}
 8012470:	01ffffff 	.word	0x01ffffff
 8012474:	fffffedf 	.word	0xfffffedf

08012478 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	603b      	str	r3, [r7, #0]
 8012484:	1dfb      	adds	r3, r7, #7
 8012486:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012488:	e04b      	b.n	8012522 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	3301      	adds	r3, #1
 801248e:	d048      	beq.n	8012522 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012490:	f7f7 fc50 	bl	8009d34 <HAL_GetTick>
 8012494:	0002      	movs	r2, r0
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	1ad3      	subs	r3, r2, r3
 801249a:	69ba      	ldr	r2, [r7, #24]
 801249c:	429a      	cmp	r2, r3
 801249e:	d302      	bcc.n	80124a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d101      	bne.n	80124aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80124a6:	2303      	movs	r3, #3
 80124a8:	e04b      	b.n	8012542 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2204      	movs	r2, #4
 80124b2:	4013      	ands	r3, r2
 80124b4:	d035      	beq.n	8012522 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	69db      	ldr	r3, [r3, #28]
 80124bc:	2208      	movs	r2, #8
 80124be:	4013      	ands	r3, r2
 80124c0:	2b08      	cmp	r3, #8
 80124c2:	d111      	bne.n	80124e8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	2208      	movs	r2, #8
 80124ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	0018      	movs	r0, r3
 80124d0:	f000 f900 	bl	80126d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2284      	movs	r2, #132	@ 0x84
 80124d8:	2108      	movs	r1, #8
 80124da:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2278      	movs	r2, #120	@ 0x78
 80124e0:	2100      	movs	r1, #0
 80124e2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80124e4:	2301      	movs	r3, #1
 80124e6:	e02c      	b.n	8012542 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	69da      	ldr	r2, [r3, #28]
 80124ee:	2380      	movs	r3, #128	@ 0x80
 80124f0:	011b      	lsls	r3, r3, #4
 80124f2:	401a      	ands	r2, r3
 80124f4:	2380      	movs	r3, #128	@ 0x80
 80124f6:	011b      	lsls	r3, r3, #4
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d112      	bne.n	8012522 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2280      	movs	r2, #128	@ 0x80
 8012502:	0112      	lsls	r2, r2, #4
 8012504:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	0018      	movs	r0, r3
 801250a:	f000 f8e3 	bl	80126d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2284      	movs	r2, #132	@ 0x84
 8012512:	2120      	movs	r1, #32
 8012514:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	2278      	movs	r2, #120	@ 0x78
 801251a:	2100      	movs	r1, #0
 801251c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801251e:	2303      	movs	r3, #3
 8012520:	e00f      	b.n	8012542 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	69db      	ldr	r3, [r3, #28]
 8012528:	68ba      	ldr	r2, [r7, #8]
 801252a:	4013      	ands	r3, r2
 801252c:	68ba      	ldr	r2, [r7, #8]
 801252e:	1ad3      	subs	r3, r2, r3
 8012530:	425a      	negs	r2, r3
 8012532:	4153      	adcs	r3, r2
 8012534:	b2db      	uxtb	r3, r3
 8012536:	001a      	movs	r2, r3
 8012538:	1dfb      	adds	r3, r7, #7
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	429a      	cmp	r2, r3
 801253e:	d0a4      	beq.n	801248a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012540:	2300      	movs	r3, #0
}
 8012542:	0018      	movs	r0, r3
 8012544:	46bd      	mov	sp, r7
 8012546:	b004      	add	sp, #16
 8012548:	bd80      	pop	{r7, pc}
	...

0801254c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b090      	sub	sp, #64	@ 0x40
 8012550:	af00      	add	r7, sp, #0
 8012552:	60f8      	str	r0, [r7, #12]
 8012554:	60b9      	str	r1, [r7, #8]
 8012556:	1dbb      	adds	r3, r7, #6
 8012558:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	68ba      	ldr	r2, [r7, #8]
 801255e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	1dba      	adds	r2, r7, #6
 8012564:	2158      	movs	r1, #88	@ 0x58
 8012566:	8812      	ldrh	r2, [r2, #0]
 8012568:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2284      	movs	r2, #132	@ 0x84
 801256e:	2100      	movs	r1, #0
 8012570:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2280      	movs	r2, #128	@ 0x80
 8012576:	2122      	movs	r1, #34	@ 0x22
 8012578:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801257e:	2b00      	cmp	r3, #0
 8012580:	d028      	beq.n	80125d4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012586:	4a3e      	ldr	r2, [pc, #248]	@ (8012680 <UART_Start_Receive_DMA+0x134>)
 8012588:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801258e:	4a3d      	ldr	r2, [pc, #244]	@ (8012684 <UART_Start_Receive_DMA+0x138>)
 8012590:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012596:	4a3c      	ldr	r2, [pc, #240]	@ (8012688 <UART_Start_Receive_DMA+0x13c>)
 8012598:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801259e:	2200      	movs	r2, #0
 80125a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	3324      	adds	r3, #36	@ 0x24
 80125ac:	0019      	movs	r1, r3
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125b2:	001a      	movs	r2, r3
 80125b4:	1dbb      	adds	r3, r7, #6
 80125b6:	881b      	ldrh	r3, [r3, #0]
 80125b8:	f7f8 f93a 	bl	800a830 <HAL_DMA_Start_IT>
 80125bc:	1e03      	subs	r3, r0, #0
 80125be:	d009      	beq.n	80125d4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	2284      	movs	r2, #132	@ 0x84
 80125c4:	2110      	movs	r1, #16
 80125c6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2280      	movs	r2, #128	@ 0x80
 80125cc:	2120      	movs	r1, #32
 80125ce:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80125d0:	2301      	movs	r3, #1
 80125d2:	e050      	b.n	8012676 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	691b      	ldr	r3, [r3, #16]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d019      	beq.n	8012610 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125dc:	f3ef 8310 	mrs	r3, PRIMASK
 80125e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80125e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80125e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80125e6:	2301      	movs	r3, #1
 80125e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ec:	f383 8810 	msr	PRIMASK, r3
}
 80125f0:	46c0      	nop			@ (mov r8, r8)
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	681a      	ldr	r2, [r3, #0]
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	2180      	movs	r1, #128	@ 0x80
 80125fe:	0049      	lsls	r1, r1, #1
 8012600:	430a      	orrs	r2, r1
 8012602:	601a      	str	r2, [r3, #0]
 8012604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012606:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801260a:	f383 8810 	msr	PRIMASK, r3
}
 801260e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012610:	f3ef 8310 	mrs	r3, PRIMASK
 8012614:	613b      	str	r3, [r7, #16]
  return(result);
 8012616:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012618:	63bb      	str	r3, [r7, #56]	@ 0x38
 801261a:	2301      	movs	r3, #1
 801261c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	f383 8810 	msr	PRIMASK, r3
}
 8012624:	46c0      	nop			@ (mov r8, r8)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	689a      	ldr	r2, [r3, #8]
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	2101      	movs	r1, #1
 8012632:	430a      	orrs	r2, r1
 8012634:	609a      	str	r2, [r3, #8]
 8012636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012638:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	f383 8810 	msr	PRIMASK, r3
}
 8012640:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012642:	f3ef 8310 	mrs	r3, PRIMASK
 8012646:	61fb      	str	r3, [r7, #28]
  return(result);
 8012648:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801264a:	637b      	str	r3, [r7, #52]	@ 0x34
 801264c:	2301      	movs	r3, #1
 801264e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012650:	6a3b      	ldr	r3, [r7, #32]
 8012652:	f383 8810 	msr	PRIMASK, r3
}
 8012656:	46c0      	nop			@ (mov r8, r8)
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	689a      	ldr	r2, [r3, #8]
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2140      	movs	r1, #64	@ 0x40
 8012664:	430a      	orrs	r2, r1
 8012666:	609a      	str	r2, [r3, #8]
 8012668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801266a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801266e:	f383 8810 	msr	PRIMASK, r3
}
 8012672:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8012674:	2300      	movs	r3, #0
}
 8012676:	0018      	movs	r0, r3
 8012678:	46bd      	mov	sp, r7
 801267a:	b010      	add	sp, #64	@ 0x40
 801267c:	bd80      	pop	{r7, pc}
 801267e:	46c0      	nop			@ (mov r8, r8)
 8012680:	0801285d 	.word	0x0801285d
 8012684:	08012991 	.word	0x08012991
 8012688:	080129d9 	.word	0x080129d9

0801268c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b086      	sub	sp, #24
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012694:	f3ef 8310 	mrs	r3, PRIMASK
 8012698:	60bb      	str	r3, [r7, #8]
  return(result);
 801269a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801269c:	617b      	str	r3, [r7, #20]
 801269e:	2301      	movs	r3, #1
 80126a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	f383 8810 	msr	PRIMASK, r3
}
 80126a8:	46c0      	nop			@ (mov r8, r8)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	681a      	ldr	r2, [r3, #0]
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	21c0      	movs	r1, #192	@ 0xc0
 80126b6:	438a      	bics	r2, r1
 80126b8:	601a      	str	r2, [r3, #0]
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	f383 8810 	msr	PRIMASK, r3
}
 80126c4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2220      	movs	r2, #32
 80126ca:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80126cc:	46c0      	nop			@ (mov r8, r8)
 80126ce:	46bd      	mov	sp, r7
 80126d0:	b006      	add	sp, #24
 80126d2:	bd80      	pop	{r7, pc}

080126d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b08e      	sub	sp, #56	@ 0x38
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126dc:	f3ef 8310 	mrs	r3, PRIMASK
 80126e0:	617b      	str	r3, [r7, #20]
  return(result);
 80126e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80126e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80126e6:	2301      	movs	r3, #1
 80126e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126ea:	69bb      	ldr	r3, [r7, #24]
 80126ec:	f383 8810 	msr	PRIMASK, r3
}
 80126f0:	46c0      	nop			@ (mov r8, r8)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	681a      	ldr	r2, [r3, #0]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	4926      	ldr	r1, [pc, #152]	@ (8012798 <UART_EndRxTransfer+0xc4>)
 80126fe:	400a      	ands	r2, r1
 8012700:	601a      	str	r2, [r3, #0]
 8012702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012706:	69fb      	ldr	r3, [r7, #28]
 8012708:	f383 8810 	msr	PRIMASK, r3
}
 801270c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801270e:	f3ef 8310 	mrs	r3, PRIMASK
 8012712:	623b      	str	r3, [r7, #32]
  return(result);
 8012714:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012716:	633b      	str	r3, [r7, #48]	@ 0x30
 8012718:	2301      	movs	r3, #1
 801271a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801271e:	f383 8810 	msr	PRIMASK, r3
}
 8012722:	46c0      	nop			@ (mov r8, r8)
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	689a      	ldr	r2, [r3, #8]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2101      	movs	r1, #1
 8012730:	438a      	bics	r2, r1
 8012732:	609a      	str	r2, [r3, #8]
 8012734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012736:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801273a:	f383 8810 	msr	PRIMASK, r3
}
 801273e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012744:	2b01      	cmp	r3, #1
 8012746:	d118      	bne.n	801277a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012748:	f3ef 8310 	mrs	r3, PRIMASK
 801274c:	60bb      	str	r3, [r7, #8]
  return(result);
 801274e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012752:	2301      	movs	r3, #1
 8012754:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	f383 8810 	msr	PRIMASK, r3
}
 801275c:	46c0      	nop			@ (mov r8, r8)
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	681a      	ldr	r2, [r3, #0]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	2110      	movs	r1, #16
 801276a:	438a      	bics	r2, r1
 801276c:	601a      	str	r2, [r3, #0]
 801276e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012770:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	f383 8810 	msr	PRIMASK, r3
}
 8012778:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2280      	movs	r2, #128	@ 0x80
 801277e:	2120      	movs	r1, #32
 8012780:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2200      	movs	r2, #0
 8012786:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2200      	movs	r2, #0
 801278c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801278e:	46c0      	nop			@ (mov r8, r8)
 8012790:	46bd      	mov	sp, r7
 8012792:	b00e      	add	sp, #56	@ 0x38
 8012794:	bd80      	pop	{r7, pc}
 8012796:	46c0      	nop			@ (mov r8, r8)
 8012798:	fffffedf 	.word	0xfffffedf

0801279c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b08c      	sub	sp, #48	@ 0x30
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	2220      	movs	r2, #32
 80127b2:	4013      	ands	r3, r2
 80127b4:	d135      	bne.n	8012822 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80127b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127b8:	2252      	movs	r2, #82	@ 0x52
 80127ba:	2100      	movs	r1, #0
 80127bc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127be:	f3ef 8310 	mrs	r3, PRIMASK
 80127c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80127c4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80127c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80127c8:	2301      	movs	r3, #1
 80127ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	f383 8810 	msr	PRIMASK, r3
}
 80127d2:	46c0      	nop			@ (mov r8, r8)
 80127d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	689a      	ldr	r2, [r3, #8]
 80127da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	2180      	movs	r1, #128	@ 0x80
 80127e0:	438a      	bics	r2, r1
 80127e2:	609a      	str	r2, [r3, #8]
 80127e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	f383 8810 	msr	PRIMASK, r3
}
 80127ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127f0:	f3ef 8310 	mrs	r3, PRIMASK
 80127f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80127f6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80127f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80127fa:	2301      	movs	r3, #1
 80127fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	f383 8810 	msr	PRIMASK, r3
}
 8012804:	46c0      	nop			@ (mov r8, r8)
 8012806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2140      	movs	r1, #64	@ 0x40
 8012812:	430a      	orrs	r2, r1
 8012814:	601a      	str	r2, [r3, #0]
 8012816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012818:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801281a:	6a3b      	ldr	r3, [r7, #32]
 801281c:	f383 8810 	msr	PRIMASK, r3
}
 8012820:	e006      	b.n	8012830 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8012822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012824:	228c      	movs	r2, #140	@ 0x8c
 8012826:	589b      	ldr	r3, [r3, r2]
 8012828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801282a:	0010      	movs	r0, r2
 801282c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801282e:	46c0      	nop			@ (mov r8, r8)
 8012830:	46c0      	nop			@ (mov r8, r8)
 8012832:	46bd      	mov	sp, r7
 8012834:	b00c      	add	sp, #48	@ 0x30
 8012836:	bd80      	pop	{r7, pc}

08012838 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012844:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2288      	movs	r2, #136	@ 0x88
 801284a:	589b      	ldr	r3, [r3, r2]
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	0010      	movs	r0, r2
 8012850:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012852:	46c0      	nop			@ (mov r8, r8)
 8012854:	46bd      	mov	sp, r7
 8012856:	b004      	add	sp, #16
 8012858:	bd80      	pop	{r7, pc}
	...

0801285c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b094      	sub	sp, #80	@ 0x50
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012868:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2220      	movs	r2, #32
 8012872:	4013      	ands	r3, r2
 8012874:	d16f      	bne.n	8012956 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8012876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012878:	225a      	movs	r2, #90	@ 0x5a
 801287a:	2100      	movs	r1, #0
 801287c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801287e:	f3ef 8310 	mrs	r3, PRIMASK
 8012882:	61bb      	str	r3, [r7, #24]
  return(result);
 8012884:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012888:	2301      	movs	r3, #1
 801288a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801288c:	69fb      	ldr	r3, [r7, #28]
 801288e:	f383 8810 	msr	PRIMASK, r3
}
 8012892:	46c0      	nop			@ (mov r8, r8)
 8012894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	493b      	ldr	r1, [pc, #236]	@ (801298c <UART_DMAReceiveCplt+0x130>)
 80128a0:	400a      	ands	r2, r1
 80128a2:	601a      	str	r2, [r3, #0]
 80128a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80128a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128a8:	6a3b      	ldr	r3, [r7, #32]
 80128aa:	f383 8810 	msr	PRIMASK, r3
}
 80128ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128b0:	f3ef 8310 	mrs	r3, PRIMASK
 80128b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80128b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80128ba:	2301      	movs	r3, #1
 80128bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128c0:	f383 8810 	msr	PRIMASK, r3
}
 80128c4:	46c0      	nop			@ (mov r8, r8)
 80128c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	689a      	ldr	r2, [r3, #8]
 80128cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2101      	movs	r1, #1
 80128d2:	438a      	bics	r2, r1
 80128d4:	609a      	str	r2, [r3, #8]
 80128d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128dc:	f383 8810 	msr	PRIMASK, r3
}
 80128e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128e2:	f3ef 8310 	mrs	r3, PRIMASK
 80128e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80128e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80128ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80128ec:	2301      	movs	r3, #1
 80128ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128f2:	f383 8810 	msr	PRIMASK, r3
}
 80128f6:	46c0      	nop			@ (mov r8, r8)
 80128f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	689a      	ldr	r2, [r3, #8]
 80128fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	2140      	movs	r1, #64	@ 0x40
 8012904:	438a      	bics	r2, r1
 8012906:	609a      	str	r2, [r3, #8]
 8012908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801290a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801290c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801290e:	f383 8810 	msr	PRIMASK, r3
}
 8012912:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012916:	2280      	movs	r2, #128	@ 0x80
 8012918:	2120      	movs	r1, #32
 801291a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801291c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801291e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012920:	2b01      	cmp	r3, #1
 8012922:	d118      	bne.n	8012956 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012924:	f3ef 8310 	mrs	r3, PRIMASK
 8012928:	60fb      	str	r3, [r7, #12]
  return(result);
 801292a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801292c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801292e:	2301      	movs	r3, #1
 8012930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	f383 8810 	msr	PRIMASK, r3
}
 8012938:	46c0      	nop			@ (mov r8, r8)
 801293a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	681a      	ldr	r2, [r3, #0]
 8012940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2110      	movs	r1, #16
 8012946:	438a      	bics	r2, r1
 8012948:	601a      	str	r2, [r3, #0]
 801294a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801294c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	f383 8810 	msr	PRIMASK, r3
}
 8012954:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012958:	2200      	movs	r2, #0
 801295a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801295c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801295e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012960:	2b01      	cmp	r3, #1
 8012962:	d109      	bne.n	8012978 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8012964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012966:	22ac      	movs	r2, #172	@ 0xac
 8012968:	589b      	ldr	r3, [r3, r2]
 801296a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801296c:	2158      	movs	r1, #88	@ 0x58
 801296e:	5a51      	ldrh	r1, [r2, r1]
 8012970:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012972:	0010      	movs	r0, r2
 8012974:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012976:	e005      	b.n	8012984 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8012978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801297a:	2294      	movs	r2, #148	@ 0x94
 801297c:	589b      	ldr	r3, [r3, r2]
 801297e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012980:	0010      	movs	r0, r2
 8012982:	4798      	blx	r3
}
 8012984:	46c0      	nop			@ (mov r8, r8)
 8012986:	46bd      	mov	sp, r7
 8012988:	b014      	add	sp, #80	@ 0x50
 801298a:	bd80      	pop	{r7, pc}
 801298c:	fffffeff 	.word	0xfffffeff

08012990 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801299c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	2201      	movs	r2, #1
 80129a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80129a8:	2b01      	cmp	r3, #1
 80129aa:	d10b      	bne.n	80129c4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	22ac      	movs	r2, #172	@ 0xac
 80129b0:	589b      	ldr	r3, [r3, r2]
 80129b2:	68fa      	ldr	r2, [r7, #12]
 80129b4:	2158      	movs	r1, #88	@ 0x58
 80129b6:	5a52      	ldrh	r2, [r2, r1]
 80129b8:	0852      	lsrs	r2, r2, #1
 80129ba:	b291      	uxth	r1, r2
 80129bc:	68fa      	ldr	r2, [r7, #12]
 80129be:	0010      	movs	r0, r2
 80129c0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80129c2:	e005      	b.n	80129d0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	2290      	movs	r2, #144	@ 0x90
 80129c8:	589b      	ldr	r3, [r3, r2]
 80129ca:	68fa      	ldr	r2, [r7, #12]
 80129cc:	0010      	movs	r0, r2
 80129ce:	4798      	blx	r3
}
 80129d0:	46c0      	nop			@ (mov r8, r8)
 80129d2:	46bd      	mov	sp, r7
 80129d4:	b004      	add	sp, #16
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b086      	sub	sp, #24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80129ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	2280      	movs	r2, #128	@ 0x80
 80129f0:	589b      	ldr	r3, [r3, r2]
 80129f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	689b      	ldr	r3, [r3, #8]
 80129fa:	2280      	movs	r2, #128	@ 0x80
 80129fc:	4013      	ands	r3, r2
 80129fe:	2b80      	cmp	r3, #128	@ 0x80
 8012a00:	d10a      	bne.n	8012a18 <UART_DMAError+0x40>
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	2b21      	cmp	r3, #33	@ 0x21
 8012a06:	d107      	bne.n	8012a18 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	2252      	movs	r2, #82	@ 0x52
 8012a0c:	2100      	movs	r1, #0
 8012a0e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	0018      	movs	r0, r3
 8012a14:	f7ff fe3a 	bl	801268c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	689b      	ldr	r3, [r3, #8]
 8012a1e:	2240      	movs	r2, #64	@ 0x40
 8012a20:	4013      	ands	r3, r2
 8012a22:	2b40      	cmp	r3, #64	@ 0x40
 8012a24:	d10a      	bne.n	8012a3c <UART_DMAError+0x64>
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2b22      	cmp	r3, #34	@ 0x22
 8012a2a:	d107      	bne.n	8012a3c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	225a      	movs	r2, #90	@ 0x5a
 8012a30:	2100      	movs	r1, #0
 8012a32:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	0018      	movs	r0, r3
 8012a38:	f7ff fe4c 	bl	80126d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	2284      	movs	r2, #132	@ 0x84
 8012a40:	589b      	ldr	r3, [r3, r2]
 8012a42:	2210      	movs	r2, #16
 8012a44:	431a      	orrs	r2, r3
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	2184      	movs	r1, #132	@ 0x84
 8012a4a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	2298      	movs	r2, #152	@ 0x98
 8012a50:	589b      	ldr	r3, [r3, r2]
 8012a52:	697a      	ldr	r2, [r7, #20]
 8012a54:	0010      	movs	r0, r2
 8012a56:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012a58:	46c0      	nop			@ (mov r8, r8)
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	b006      	add	sp, #24
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	225a      	movs	r2, #90	@ 0x5a
 8012a72:	2100      	movs	r1, #0
 8012a74:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2252      	movs	r2, #82	@ 0x52
 8012a7a:	2100      	movs	r1, #0
 8012a7c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2298      	movs	r2, #152	@ 0x98
 8012a82:	589b      	ldr	r3, [r3, r2]
 8012a84:	68fa      	ldr	r2, [r7, #12]
 8012a86:	0010      	movs	r0, r2
 8012a88:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012a8a:	46c0      	nop			@ (mov r8, r8)
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	b004      	add	sp, #16
 8012a90:	bd80      	pop	{r7, pc}

08012a92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012a92:	b580      	push	{r7, lr}
 8012a94:	b086      	sub	sp, #24
 8012a96:	af00      	add	r7, sp, #0
 8012a98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8012a9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012aa0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012aa2:	617b      	str	r3, [r7, #20]
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	f383 8810 	msr	PRIMASK, r3
}
 8012aae:	46c0      	nop			@ (mov r8, r8)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2140      	movs	r1, #64	@ 0x40
 8012abc:	438a      	bics	r2, r1
 8012abe:	601a      	str	r2, [r3, #0]
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	f383 8810 	msr	PRIMASK, r3
}
 8012aca:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2220      	movs	r2, #32
 8012ad0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	228c      	movs	r2, #140	@ 0x8c
 8012adc:	589b      	ldr	r3, [r3, r2]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	0010      	movs	r0, r2
 8012ae2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012ae4:	46c0      	nop			@ (mov r8, r8)
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	b006      	add	sp, #24
 8012aea:	bd80      	pop	{r7, pc}

08012aec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012af4:	46c0      	nop			@ (mov r8, r8)
 8012af6:	46bd      	mov	sp, r7
 8012af8:	b002      	add	sp, #8
 8012afa:	bd80      	pop	{r7, pc}

08012afc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2244      	movs	r2, #68	@ 0x44
 8012b08:	2100      	movs	r1, #0
 8012b0a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012b0c:	4b05      	ldr	r3, [pc, #20]	@ (8012b24 <USB_EnableGlobalInt+0x28>)
 8012b0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	b299      	uxth	r1, r3
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2240      	movs	r2, #64	@ 0x40
 8012b18:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012b1a:	2300      	movs	r3, #0
}
 8012b1c:	0018      	movs	r0, r3
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	b004      	add	sp, #16
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	0000bf80 	.word	0x0000bf80

08012b28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012b30:	4b09      	ldr	r3, [pc, #36]	@ (8012b58 <USB_DisableGlobalInt+0x30>)
 8012b32:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2240      	movs	r2, #64	@ 0x40
 8012b38:	5a9b      	ldrh	r3, [r3, r2]
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	68fa      	ldr	r2, [r7, #12]
 8012b3e:	b292      	uxth	r2, r2
 8012b40:	43d2      	mvns	r2, r2
 8012b42:	b292      	uxth	r2, r2
 8012b44:	4013      	ands	r3, r2
 8012b46:	b299      	uxth	r1, r3
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2240      	movs	r2, #64	@ 0x40
 8012b4c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012b4e:	2300      	movs	r3, #0
}
 8012b50:	0018      	movs	r0, r3
 8012b52:	46bd      	mov	sp, r7
 8012b54:	b004      	add	sp, #16
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	0000bf80 	.word	0x0000bf80

08012b5c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012b5c:	b084      	sub	sp, #16
 8012b5e:	b590      	push	{r4, r7, lr}
 8012b60:	b083      	sub	sp, #12
 8012b62:	af00      	add	r7, sp, #0
 8012b64:	6078      	str	r0, [r7, #4]
 8012b66:	2004      	movs	r0, #4
 8012b68:	2410      	movs	r4, #16
 8012b6a:	1900      	adds	r0, r0, r4
 8012b6c:	2408      	movs	r4, #8
 8012b6e:	46a4      	mov	ip, r4
 8012b70:	44bc      	add	ip, r7
 8012b72:	4460      	add	r0, ip
 8012b74:	6001      	str	r1, [r0, #0]
 8012b76:	6042      	str	r2, [r0, #4]
 8012b78:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2240      	movs	r2, #64	@ 0x40
 8012b7e:	2101      	movs	r1, #1
 8012b80:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2240      	movs	r2, #64	@ 0x40
 8012b86:	2100      	movs	r1, #0
 8012b88:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2244      	movs	r2, #68	@ 0x44
 8012b8e:	2100      	movs	r1, #0
 8012b90:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2250      	movs	r2, #80	@ 0x50
 8012b96:	2100      	movs	r1, #0
 8012b98:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012b9a:	2300      	movs	r3, #0
}
 8012b9c:	0018      	movs	r0, r3
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	b003      	add	sp, #12
 8012ba2:	bc90      	pop	{r4, r7}
 8012ba4:	bc08      	pop	{r3}
 8012ba6:	b004      	add	sp, #16
 8012ba8:	4718      	bx	r3
	...

08012bac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b09c      	sub	sp, #112	@ 0x70
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012bb6:	236f      	movs	r3, #111	@ 0x6f
 8012bb8:	18fb      	adds	r3, r7, r3
 8012bba:	2200      	movs	r2, #0
 8012bbc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	009b      	lsls	r3, r3, #2
 8012bc6:	18d3      	adds	r3, r2, r3
 8012bc8:	881b      	ldrh	r3, [r3, #0]
 8012bca:	b29a      	uxth	r2, r3
 8012bcc:	236c      	movs	r3, #108	@ 0x6c
 8012bce:	18fb      	adds	r3, r7, r3
 8012bd0:	49a3      	ldr	r1, [pc, #652]	@ (8012e60 <USB_ActivateEndpoint+0x2b4>)
 8012bd2:	400a      	ands	r2, r1
 8012bd4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	78db      	ldrb	r3, [r3, #3]
 8012bda:	2b03      	cmp	r3, #3
 8012bdc:	d017      	beq.n	8012c0e <USB_ActivateEndpoint+0x62>
 8012bde:	dc28      	bgt.n	8012c32 <USB_ActivateEndpoint+0x86>
 8012be0:	2b02      	cmp	r3, #2
 8012be2:	d00e      	beq.n	8012c02 <USB_ActivateEndpoint+0x56>
 8012be4:	dc25      	bgt.n	8012c32 <USB_ActivateEndpoint+0x86>
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d002      	beq.n	8012bf0 <USB_ActivateEndpoint+0x44>
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d018      	beq.n	8012c20 <USB_ActivateEndpoint+0x74>
 8012bee:	e020      	b.n	8012c32 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012bf0:	226c      	movs	r2, #108	@ 0x6c
 8012bf2:	18bb      	adds	r3, r7, r2
 8012bf4:	18ba      	adds	r2, r7, r2
 8012bf6:	8812      	ldrh	r2, [r2, #0]
 8012bf8:	2180      	movs	r1, #128	@ 0x80
 8012bfa:	0089      	lsls	r1, r1, #2
 8012bfc:	430a      	orrs	r2, r1
 8012bfe:	801a      	strh	r2, [r3, #0]
      break;
 8012c00:	e01c      	b.n	8012c3c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8012c02:	226c      	movs	r2, #108	@ 0x6c
 8012c04:	18bb      	adds	r3, r7, r2
 8012c06:	18ba      	adds	r2, r7, r2
 8012c08:	8812      	ldrh	r2, [r2, #0]
 8012c0a:	801a      	strh	r2, [r3, #0]
      break;
 8012c0c:	e016      	b.n	8012c3c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012c0e:	226c      	movs	r2, #108	@ 0x6c
 8012c10:	18bb      	adds	r3, r7, r2
 8012c12:	18ba      	adds	r2, r7, r2
 8012c14:	8812      	ldrh	r2, [r2, #0]
 8012c16:	21c0      	movs	r1, #192	@ 0xc0
 8012c18:	00c9      	lsls	r1, r1, #3
 8012c1a:	430a      	orrs	r2, r1
 8012c1c:	801a      	strh	r2, [r3, #0]
      break;
 8012c1e:	e00d      	b.n	8012c3c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012c20:	226c      	movs	r2, #108	@ 0x6c
 8012c22:	18bb      	adds	r3, r7, r2
 8012c24:	18ba      	adds	r2, r7, r2
 8012c26:	8812      	ldrh	r2, [r2, #0]
 8012c28:	2180      	movs	r1, #128	@ 0x80
 8012c2a:	00c9      	lsls	r1, r1, #3
 8012c2c:	430a      	orrs	r2, r1
 8012c2e:	801a      	strh	r2, [r3, #0]
      break;
 8012c30:	e004      	b.n	8012c3c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8012c32:	236f      	movs	r3, #111	@ 0x6f
 8012c34:	18fb      	adds	r3, r7, r3
 8012c36:	2201      	movs	r2, #1
 8012c38:	701a      	strb	r2, [r3, #0]
      break;
 8012c3a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012c3c:	687a      	ldr	r2, [r7, #4]
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	009b      	lsls	r3, r3, #2
 8012c44:	18d3      	adds	r3, r2, r3
 8012c46:	226c      	movs	r2, #108	@ 0x6c
 8012c48:	18ba      	adds	r2, r7, r2
 8012c4a:	8812      	ldrh	r2, [r2, #0]
 8012c4c:	4985      	ldr	r1, [pc, #532]	@ (8012e64 <USB_ActivateEndpoint+0x2b8>)
 8012c4e:	430a      	orrs	r2, r1
 8012c50:	b292      	uxth	r2, r2
 8012c52:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8012c54:	687a      	ldr	r2, [r7, #4]
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	009b      	lsls	r3, r3, #2
 8012c5c:	18d3      	adds	r3, r2, r3
 8012c5e:	881b      	ldrh	r3, [r3, #0]
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	b21b      	sxth	r3, r3
 8012c64:	4a80      	ldr	r2, [pc, #512]	@ (8012e68 <USB_ActivateEndpoint+0x2bc>)
 8012c66:	4013      	ands	r3, r2
 8012c68:	b21a      	sxth	r2, r3
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	781b      	ldrb	r3, [r3, #0]
 8012c6e:	b21b      	sxth	r3, r3
 8012c70:	4313      	orrs	r3, r2
 8012c72:	b21a      	sxth	r2, r3
 8012c74:	2166      	movs	r1, #102	@ 0x66
 8012c76:	187b      	adds	r3, r7, r1
 8012c78:	801a      	strh	r2, [r3, #0]
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	009b      	lsls	r3, r3, #2
 8012c82:	18d3      	adds	r3, r2, r3
 8012c84:	187a      	adds	r2, r7, r1
 8012c86:	8812      	ldrh	r2, [r2, #0]
 8012c88:	4976      	ldr	r1, [pc, #472]	@ (8012e64 <USB_ActivateEndpoint+0x2b8>)
 8012c8a:	430a      	orrs	r2, r1
 8012c8c:	b292      	uxth	r2, r2
 8012c8e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	7b1b      	ldrb	r3, [r3, #12]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d000      	beq.n	8012c9a <USB_ActivateEndpoint+0xee>
 8012c98:	e178      	b.n	8012f8c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	785b      	ldrb	r3, [r3, #1]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d100      	bne.n	8012ca4 <USB_ActivateEndpoint+0xf8>
 8012ca2:	e07a      	b.n	8012d9a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	61bb      	str	r3, [r7, #24]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2250      	movs	r2, #80	@ 0x50
 8012cac:	5a9b      	ldrh	r3, [r3, r2]
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	001a      	movs	r2, r3
 8012cb2:	69bb      	ldr	r3, [r7, #24]
 8012cb4:	189b      	adds	r3, r3, r2
 8012cb6:	61bb      	str	r3, [r7, #24]
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	00da      	lsls	r2, r3, #3
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	18d3      	adds	r3, r2, r3
 8012cc2:	2280      	movs	r2, #128	@ 0x80
 8012cc4:	00d2      	lsls	r2, r2, #3
 8012cc6:	4694      	mov	ip, r2
 8012cc8:	4463      	add	r3, ip
 8012cca:	617b      	str	r3, [r7, #20]
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	88db      	ldrh	r3, [r3, #6]
 8012cd0:	085b      	lsrs	r3, r3, #1
 8012cd2:	b29b      	uxth	r3, r3
 8012cd4:	18db      	adds	r3, r3, r3
 8012cd6:	b29a      	uxth	r2, r3
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	18d2      	adds	r2, r2, r3
 8012ce6:	2112      	movs	r1, #18
 8012ce8:	187b      	adds	r3, r7, r1
 8012cea:	8812      	ldrh	r2, [r2, #0]
 8012cec:	801a      	strh	r2, [r3, #0]
 8012cee:	187b      	adds	r3, r7, r1
 8012cf0:	881b      	ldrh	r3, [r3, #0]
 8012cf2:	2240      	movs	r2, #64	@ 0x40
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	d016      	beq.n	8012d26 <USB_ActivateEndpoint+0x17a>
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	18d3      	adds	r3, r2, r3
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	b29a      	uxth	r2, r3
 8012d06:	2010      	movs	r0, #16
 8012d08:	183b      	adds	r3, r7, r0
 8012d0a:	4957      	ldr	r1, [pc, #348]	@ (8012e68 <USB_ActivateEndpoint+0x2bc>)
 8012d0c:	400a      	ands	r2, r1
 8012d0e:	801a      	strh	r2, [r3, #0]
 8012d10:	687a      	ldr	r2, [r7, #4]
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	009b      	lsls	r3, r3, #2
 8012d18:	18d3      	adds	r3, r2, r3
 8012d1a:	183a      	adds	r2, r7, r0
 8012d1c:	8812      	ldrh	r2, [r2, #0]
 8012d1e:	4953      	ldr	r1, [pc, #332]	@ (8012e6c <USB_ActivateEndpoint+0x2c0>)
 8012d20:	430a      	orrs	r2, r1
 8012d22:	b292      	uxth	r2, r2
 8012d24:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	78db      	ldrb	r3, [r3, #3]
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d01d      	beq.n	8012d6a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	009b      	lsls	r3, r3, #2
 8012d36:	18d3      	adds	r3, r2, r3
 8012d38:	881b      	ldrh	r3, [r3, #0]
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	200c      	movs	r0, #12
 8012d3e:	183b      	adds	r3, r7, r0
 8012d40:	494b      	ldr	r1, [pc, #300]	@ (8012e70 <USB_ActivateEndpoint+0x2c4>)
 8012d42:	400a      	ands	r2, r1
 8012d44:	801a      	strh	r2, [r3, #0]
 8012d46:	183b      	adds	r3, r7, r0
 8012d48:	183a      	adds	r2, r7, r0
 8012d4a:	8812      	ldrh	r2, [r2, #0]
 8012d4c:	2120      	movs	r1, #32
 8012d4e:	404a      	eors	r2, r1
 8012d50:	801a      	strh	r2, [r3, #0]
 8012d52:	687a      	ldr	r2, [r7, #4]
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	18d3      	adds	r3, r2, r3
 8012d5c:	183a      	adds	r2, r7, r0
 8012d5e:	8812      	ldrh	r2, [r2, #0]
 8012d60:	4940      	ldr	r1, [pc, #256]	@ (8012e64 <USB_ActivateEndpoint+0x2b8>)
 8012d62:	430a      	orrs	r2, r1
 8012d64:	b292      	uxth	r2, r2
 8012d66:	801a      	strh	r2, [r3, #0]
 8012d68:	e2b4      	b.n	80132d4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	18d3      	adds	r3, r2, r3
 8012d74:	881b      	ldrh	r3, [r3, #0]
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	200e      	movs	r0, #14
 8012d7a:	183b      	adds	r3, r7, r0
 8012d7c:	493c      	ldr	r1, [pc, #240]	@ (8012e70 <USB_ActivateEndpoint+0x2c4>)
 8012d7e:	400a      	ands	r2, r1
 8012d80:	801a      	strh	r2, [r3, #0]
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	009b      	lsls	r3, r3, #2
 8012d8a:	18d3      	adds	r3, r2, r3
 8012d8c:	183a      	adds	r2, r7, r0
 8012d8e:	8812      	ldrh	r2, [r2, #0]
 8012d90:	4934      	ldr	r1, [pc, #208]	@ (8012e64 <USB_ActivateEndpoint+0x2b8>)
 8012d92:	430a      	orrs	r2, r1
 8012d94:	b292      	uxth	r2, r2
 8012d96:	801a      	strh	r2, [r3, #0]
 8012d98:	e29c      	b.n	80132d4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2250      	movs	r2, #80	@ 0x50
 8012da2:	5a9b      	ldrh	r3, [r3, r2]
 8012da4:	b29b      	uxth	r3, r3
 8012da6:	001a      	movs	r2, r3
 8012da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012daa:	189b      	adds	r3, r3, r2
 8012dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	781b      	ldrb	r3, [r3, #0]
 8012db2:	00da      	lsls	r2, r3, #3
 8012db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012db6:	18d3      	adds	r3, r2, r3
 8012db8:	4a2e      	ldr	r2, [pc, #184]	@ (8012e74 <USB_ActivateEndpoint+0x2c8>)
 8012dba:	4694      	mov	ip, r2
 8012dbc:	4463      	add	r3, ip
 8012dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	88db      	ldrh	r3, [r3, #6]
 8012dc4:	085b      	lsrs	r3, r3, #1
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	18db      	adds	r3, r3, r3
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dce:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2250      	movs	r2, #80	@ 0x50
 8012dd8:	5a9b      	ldrh	r3, [r3, r2]
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	001a      	movs	r2, r3
 8012dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012de0:	189b      	adds	r3, r3, r2
 8012de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	00da      	lsls	r2, r3, #3
 8012dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dec:	18d3      	adds	r3, r2, r3
 8012dee:	4a22      	ldr	r2, [pc, #136]	@ (8012e78 <USB_ActivateEndpoint+0x2cc>)
 8012df0:	4694      	mov	ip, r2
 8012df2:	4463      	add	r3, ip
 8012df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012df8:	881b      	ldrh	r3, [r3, #0]
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	059b      	lsls	r3, r3, #22
 8012dfe:	0d9b      	lsrs	r3, r3, #22
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e04:	801a      	strh	r2, [r3, #0]
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	691b      	ldr	r3, [r3, #16]
 8012e0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8012e0c:	d91a      	bls.n	8012e44 <USB_ActivateEndpoint+0x298>
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	691b      	ldr	r3, [r3, #16]
 8012e12:	095b      	lsrs	r3, r3, #5
 8012e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	691b      	ldr	r3, [r3, #16]
 8012e1a:	221f      	movs	r2, #31
 8012e1c:	4013      	ands	r3, r2
 8012e1e:	d102      	bne.n	8012e26 <USB_ActivateEndpoint+0x27a>
 8012e20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012e22:	3b01      	subs	r3, #1
 8012e24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	b29a      	uxth	r2, r3
 8012e2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	029b      	lsls	r3, r3, #10
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	4313      	orrs	r3, r2
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	4a10      	ldr	r2, [pc, #64]	@ (8012e7c <USB_ActivateEndpoint+0x2d0>)
 8012e3a:	4313      	orrs	r3, r2
 8012e3c:	b29a      	uxth	r2, r3
 8012e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e40:	801a      	strh	r2, [r3, #0]
 8012e42:	e034      	b.n	8012eae <USB_ActivateEndpoint+0x302>
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	691b      	ldr	r3, [r3, #16]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d119      	bne.n	8012e80 <USB_ActivateEndpoint+0x2d4>
 8012e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4e:	881b      	ldrh	r3, [r3, #0]
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	4a0a      	ldr	r2, [pc, #40]	@ (8012e7c <USB_ActivateEndpoint+0x2d0>)
 8012e54:	4313      	orrs	r3, r2
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e5a:	801a      	strh	r2, [r3, #0]
 8012e5c:	e027      	b.n	8012eae <USB_ActivateEndpoint+0x302>
 8012e5e:	46c0      	nop			@ (mov r8, r8)
 8012e60:	ffff898f 	.word	0xffff898f
 8012e64:	ffff8080 	.word	0xffff8080
 8012e68:	ffff8f8f 	.word	0xffff8f8f
 8012e6c:	ffff80c0 	.word	0xffff80c0
 8012e70:	ffff8fbf 	.word	0xffff8fbf
 8012e74:	00000404 	.word	0x00000404
 8012e78:	00000406 	.word	0x00000406
 8012e7c:	ffff8000 	.word	0xffff8000
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	691b      	ldr	r3, [r3, #16]
 8012e84:	085b      	lsrs	r3, r3, #1
 8012e86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	691b      	ldr	r3, [r3, #16]
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	4013      	ands	r3, r2
 8012e90:	d002      	beq.n	8012e98 <USB_ActivateEndpoint+0x2ec>
 8012e92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012e94:	3301      	adds	r3, #1
 8012e96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	b29a      	uxth	r2, r3
 8012e9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	029b      	lsls	r3, r3, #10
 8012ea4:	b29b      	uxth	r3, r3
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	b29a      	uxth	r2, r3
 8012eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012eae:	687a      	ldr	r2, [r7, #4]
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	781b      	ldrb	r3, [r3, #0]
 8012eb4:	009b      	lsls	r3, r3, #2
 8012eb6:	18d2      	adds	r2, r2, r3
 8012eb8:	2122      	movs	r1, #34	@ 0x22
 8012eba:	187b      	adds	r3, r7, r1
 8012ebc:	8812      	ldrh	r2, [r2, #0]
 8012ebe:	801a      	strh	r2, [r3, #0]
 8012ec0:	187b      	adds	r3, r7, r1
 8012ec2:	881a      	ldrh	r2, [r3, #0]
 8012ec4:	2380      	movs	r3, #128	@ 0x80
 8012ec6:	01db      	lsls	r3, r3, #7
 8012ec8:	4013      	ands	r3, r2
 8012eca:	d016      	beq.n	8012efa <USB_ActivateEndpoint+0x34e>
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	18d3      	adds	r3, r2, r3
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	b29a      	uxth	r2, r3
 8012eda:	2020      	movs	r0, #32
 8012edc:	183b      	adds	r3, r7, r0
 8012ede:	49dd      	ldr	r1, [pc, #884]	@ (8013254 <USB_ActivateEndpoint+0x6a8>)
 8012ee0:	400a      	ands	r2, r1
 8012ee2:	801a      	strh	r2, [r3, #0]
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	18d3      	adds	r3, r2, r3
 8012eee:	183a      	adds	r2, r7, r0
 8012ef0:	8812      	ldrh	r2, [r2, #0]
 8012ef2:	49d9      	ldr	r1, [pc, #868]	@ (8013258 <USB_ActivateEndpoint+0x6ac>)
 8012ef4:	430a      	orrs	r2, r1
 8012ef6:	b292      	uxth	r2, r2
 8012ef8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d125      	bne.n	8012f4e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	009b      	lsls	r3, r3, #2
 8012f0a:	18d3      	adds	r3, r2, r3
 8012f0c:	881b      	ldrh	r3, [r3, #0]
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	201c      	movs	r0, #28
 8012f12:	183b      	adds	r3, r7, r0
 8012f14:	49d1      	ldr	r1, [pc, #836]	@ (801325c <USB_ActivateEndpoint+0x6b0>)
 8012f16:	400a      	ands	r2, r1
 8012f18:	801a      	strh	r2, [r3, #0]
 8012f1a:	183b      	adds	r3, r7, r0
 8012f1c:	183a      	adds	r2, r7, r0
 8012f1e:	8812      	ldrh	r2, [r2, #0]
 8012f20:	2180      	movs	r1, #128	@ 0x80
 8012f22:	0149      	lsls	r1, r1, #5
 8012f24:	404a      	eors	r2, r1
 8012f26:	801a      	strh	r2, [r3, #0]
 8012f28:	183b      	adds	r3, r7, r0
 8012f2a:	183a      	adds	r2, r7, r0
 8012f2c:	8812      	ldrh	r2, [r2, #0]
 8012f2e:	2180      	movs	r1, #128	@ 0x80
 8012f30:	0189      	lsls	r1, r1, #6
 8012f32:	404a      	eors	r2, r1
 8012f34:	801a      	strh	r2, [r3, #0]
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	18d3      	adds	r3, r2, r3
 8012f40:	183a      	adds	r2, r7, r0
 8012f42:	8812      	ldrh	r2, [r2, #0]
 8012f44:	49c6      	ldr	r1, [pc, #792]	@ (8013260 <USB_ActivateEndpoint+0x6b4>)
 8012f46:	430a      	orrs	r2, r1
 8012f48:	b292      	uxth	r2, r2
 8012f4a:	801a      	strh	r2, [r3, #0]
 8012f4c:	e1c2      	b.n	80132d4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	009b      	lsls	r3, r3, #2
 8012f56:	18d3      	adds	r3, r2, r3
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	b29a      	uxth	r2, r3
 8012f5c:	201e      	movs	r0, #30
 8012f5e:	183b      	adds	r3, r7, r0
 8012f60:	49be      	ldr	r1, [pc, #760]	@ (801325c <USB_ActivateEndpoint+0x6b0>)
 8012f62:	400a      	ands	r2, r1
 8012f64:	801a      	strh	r2, [r3, #0]
 8012f66:	183b      	adds	r3, r7, r0
 8012f68:	183a      	adds	r2, r7, r0
 8012f6a:	8812      	ldrh	r2, [r2, #0]
 8012f6c:	2180      	movs	r1, #128	@ 0x80
 8012f6e:	0189      	lsls	r1, r1, #6
 8012f70:	404a      	eors	r2, r1
 8012f72:	801a      	strh	r2, [r3, #0]
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	683b      	ldr	r3, [r7, #0]
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	009b      	lsls	r3, r3, #2
 8012f7c:	18d3      	adds	r3, r2, r3
 8012f7e:	183a      	adds	r2, r7, r0
 8012f80:	8812      	ldrh	r2, [r2, #0]
 8012f82:	49b7      	ldr	r1, [pc, #732]	@ (8013260 <USB_ActivateEndpoint+0x6b4>)
 8012f84:	430a      	orrs	r2, r1
 8012f86:	b292      	uxth	r2, r2
 8012f88:	801a      	strh	r2, [r3, #0]
 8012f8a:	e1a3      	b.n	80132d4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	78db      	ldrb	r3, [r3, #3]
 8012f90:	2b02      	cmp	r3, #2
 8012f92:	d117      	bne.n	8012fc4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012f94:	687a      	ldr	r2, [r7, #4]
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	009b      	lsls	r3, r3, #2
 8012f9c:	18d3      	adds	r3, r2, r3
 8012f9e:	881b      	ldrh	r3, [r3, #0]
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	2062      	movs	r0, #98	@ 0x62
 8012fa4:	183b      	adds	r3, r7, r0
 8012fa6:	49ab      	ldr	r1, [pc, #684]	@ (8013254 <USB_ActivateEndpoint+0x6a8>)
 8012fa8:	400a      	ands	r2, r1
 8012faa:	801a      	strh	r2, [r3, #0]
 8012fac:	687a      	ldr	r2, [r7, #4]
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	009b      	lsls	r3, r3, #2
 8012fb4:	18d3      	adds	r3, r2, r3
 8012fb6:	183a      	adds	r2, r7, r0
 8012fb8:	8812      	ldrh	r2, [r2, #0]
 8012fba:	49aa      	ldr	r1, [pc, #680]	@ (8013264 <USB_ActivateEndpoint+0x6b8>)
 8012fbc:	430a      	orrs	r2, r1
 8012fbe:	b292      	uxth	r2, r2
 8012fc0:	801a      	strh	r2, [r3, #0]
 8012fc2:	e016      	b.n	8012ff2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8012fc4:	687a      	ldr	r2, [r7, #4]
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	009b      	lsls	r3, r3, #2
 8012fcc:	18d3      	adds	r3, r2, r3
 8012fce:	881b      	ldrh	r3, [r3, #0]
 8012fd0:	b29a      	uxth	r2, r3
 8012fd2:	2064      	movs	r0, #100	@ 0x64
 8012fd4:	183b      	adds	r3, r7, r0
 8012fd6:	49a4      	ldr	r1, [pc, #656]	@ (8013268 <USB_ActivateEndpoint+0x6bc>)
 8012fd8:	400a      	ands	r2, r1
 8012fda:	801a      	strh	r2, [r3, #0]
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	009b      	lsls	r3, r3, #2
 8012fe4:	18d3      	adds	r3, r2, r3
 8012fe6:	183a      	adds	r2, r7, r0
 8012fe8:	8812      	ldrh	r2, [r2, #0]
 8012fea:	499d      	ldr	r1, [pc, #628]	@ (8013260 <USB_ActivateEndpoint+0x6b4>)
 8012fec:	430a      	orrs	r2, r1
 8012fee:	b292      	uxth	r2, r2
 8012ff0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2250      	movs	r2, #80	@ 0x50
 8012ffa:	5a9b      	ldrh	r3, [r3, r2]
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	001a      	movs	r2, r3
 8013000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013002:	189b      	adds	r3, r3, r2
 8013004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	00da      	lsls	r2, r3, #3
 801300c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801300e:	18d3      	adds	r3, r2, r3
 8013010:	2280      	movs	r2, #128	@ 0x80
 8013012:	00d2      	lsls	r2, r2, #3
 8013014:	4694      	mov	ip, r2
 8013016:	4463      	add	r3, ip
 8013018:	65bb      	str	r3, [r7, #88]	@ 0x58
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	891b      	ldrh	r3, [r3, #8]
 801301e:	085b      	lsrs	r3, r3, #1
 8013020:	b29b      	uxth	r3, r3
 8013022:	18db      	adds	r3, r3, r3
 8013024:	b29a      	uxth	r2, r3
 8013026:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013028:	801a      	strh	r2, [r3, #0]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	657b      	str	r3, [r7, #84]	@ 0x54
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2250      	movs	r2, #80	@ 0x50
 8013032:	5a9b      	ldrh	r3, [r3, r2]
 8013034:	b29b      	uxth	r3, r3
 8013036:	001a      	movs	r2, r3
 8013038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801303a:	189b      	adds	r3, r3, r2
 801303c:	657b      	str	r3, [r7, #84]	@ 0x54
 801303e:	683b      	ldr	r3, [r7, #0]
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	00da      	lsls	r2, r3, #3
 8013044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013046:	18d3      	adds	r3, r2, r3
 8013048:	4a88      	ldr	r2, [pc, #544]	@ (801326c <USB_ActivateEndpoint+0x6c0>)
 801304a:	4694      	mov	ip, r2
 801304c:	4463      	add	r3, ip
 801304e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	895b      	ldrh	r3, [r3, #10]
 8013054:	085b      	lsrs	r3, r3, #1
 8013056:	b29b      	uxth	r3, r3
 8013058:	18db      	adds	r3, r3, r3
 801305a:	b29a      	uxth	r2, r3
 801305c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801305e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	785b      	ldrb	r3, [r3, #1]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d000      	beq.n	801306a <USB_ActivateEndpoint+0x4be>
 8013068:	e087      	b.n	801317a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801306a:	687a      	ldr	r2, [r7, #4]
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	18d2      	adds	r2, r2, r3
 8013074:	2140      	movs	r1, #64	@ 0x40
 8013076:	187b      	adds	r3, r7, r1
 8013078:	8812      	ldrh	r2, [r2, #0]
 801307a:	801a      	strh	r2, [r3, #0]
 801307c:	187b      	adds	r3, r7, r1
 801307e:	881a      	ldrh	r2, [r3, #0]
 8013080:	2380      	movs	r3, #128	@ 0x80
 8013082:	01db      	lsls	r3, r3, #7
 8013084:	4013      	ands	r3, r2
 8013086:	d016      	beq.n	80130b6 <USB_ActivateEndpoint+0x50a>
 8013088:	687a      	ldr	r2, [r7, #4]
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	18d3      	adds	r3, r2, r3
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	b29a      	uxth	r2, r3
 8013096:	203e      	movs	r0, #62	@ 0x3e
 8013098:	183b      	adds	r3, r7, r0
 801309a:	496e      	ldr	r1, [pc, #440]	@ (8013254 <USB_ActivateEndpoint+0x6a8>)
 801309c:	400a      	ands	r2, r1
 801309e:	801a      	strh	r2, [r3, #0]
 80130a0:	687a      	ldr	r2, [r7, #4]
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	009b      	lsls	r3, r3, #2
 80130a8:	18d3      	adds	r3, r2, r3
 80130aa:	183a      	adds	r2, r7, r0
 80130ac:	8812      	ldrh	r2, [r2, #0]
 80130ae:	496a      	ldr	r1, [pc, #424]	@ (8013258 <USB_ActivateEndpoint+0x6ac>)
 80130b0:	430a      	orrs	r2, r1
 80130b2:	b292      	uxth	r2, r2
 80130b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	009b      	lsls	r3, r3, #2
 80130be:	18d2      	adds	r2, r2, r3
 80130c0:	213c      	movs	r1, #60	@ 0x3c
 80130c2:	187b      	adds	r3, r7, r1
 80130c4:	8812      	ldrh	r2, [r2, #0]
 80130c6:	801a      	strh	r2, [r3, #0]
 80130c8:	187b      	adds	r3, r7, r1
 80130ca:	881b      	ldrh	r3, [r3, #0]
 80130cc:	2240      	movs	r2, #64	@ 0x40
 80130ce:	4013      	ands	r3, r2
 80130d0:	d016      	beq.n	8013100 <USB_ActivateEndpoint+0x554>
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	18d3      	adds	r3, r2, r3
 80130dc:	881b      	ldrh	r3, [r3, #0]
 80130de:	b29a      	uxth	r2, r3
 80130e0:	203a      	movs	r0, #58	@ 0x3a
 80130e2:	183b      	adds	r3, r7, r0
 80130e4:	495b      	ldr	r1, [pc, #364]	@ (8013254 <USB_ActivateEndpoint+0x6a8>)
 80130e6:	400a      	ands	r2, r1
 80130e8:	801a      	strh	r2, [r3, #0]
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	18d3      	adds	r3, r2, r3
 80130f4:	183a      	adds	r2, r7, r0
 80130f6:	8812      	ldrh	r2, [r2, #0]
 80130f8:	495d      	ldr	r1, [pc, #372]	@ (8013270 <USB_ActivateEndpoint+0x6c4>)
 80130fa:	430a      	orrs	r2, r1
 80130fc:	b292      	uxth	r2, r2
 80130fe:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013100:	687a      	ldr	r2, [r7, #4]
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	009b      	lsls	r3, r3, #2
 8013108:	18d3      	adds	r3, r2, r3
 801310a:	881b      	ldrh	r3, [r3, #0]
 801310c:	b29a      	uxth	r2, r3
 801310e:	2038      	movs	r0, #56	@ 0x38
 8013110:	183b      	adds	r3, r7, r0
 8013112:	4952      	ldr	r1, [pc, #328]	@ (801325c <USB_ActivateEndpoint+0x6b0>)
 8013114:	400a      	ands	r2, r1
 8013116:	801a      	strh	r2, [r3, #0]
 8013118:	183b      	adds	r3, r7, r0
 801311a:	183a      	adds	r2, r7, r0
 801311c:	8812      	ldrh	r2, [r2, #0]
 801311e:	2180      	movs	r1, #128	@ 0x80
 8013120:	0149      	lsls	r1, r1, #5
 8013122:	404a      	eors	r2, r1
 8013124:	801a      	strh	r2, [r3, #0]
 8013126:	183b      	adds	r3, r7, r0
 8013128:	183a      	adds	r2, r7, r0
 801312a:	8812      	ldrh	r2, [r2, #0]
 801312c:	2180      	movs	r1, #128	@ 0x80
 801312e:	0189      	lsls	r1, r1, #6
 8013130:	404a      	eors	r2, r1
 8013132:	801a      	strh	r2, [r3, #0]
 8013134:	687a      	ldr	r2, [r7, #4]
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	009b      	lsls	r3, r3, #2
 801313c:	18d3      	adds	r3, r2, r3
 801313e:	183a      	adds	r2, r7, r0
 8013140:	8812      	ldrh	r2, [r2, #0]
 8013142:	4947      	ldr	r1, [pc, #284]	@ (8013260 <USB_ActivateEndpoint+0x6b4>)
 8013144:	430a      	orrs	r2, r1
 8013146:	b292      	uxth	r2, r2
 8013148:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	009b      	lsls	r3, r3, #2
 8013152:	18d3      	adds	r3, r2, r3
 8013154:	881b      	ldrh	r3, [r3, #0]
 8013156:	b29a      	uxth	r2, r3
 8013158:	2036      	movs	r0, #54	@ 0x36
 801315a:	183b      	adds	r3, r7, r0
 801315c:	4945      	ldr	r1, [pc, #276]	@ (8013274 <USB_ActivateEndpoint+0x6c8>)
 801315e:	400a      	ands	r2, r1
 8013160:	801a      	strh	r2, [r3, #0]
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	781b      	ldrb	r3, [r3, #0]
 8013168:	009b      	lsls	r3, r3, #2
 801316a:	18d3      	adds	r3, r2, r3
 801316c:	183a      	adds	r2, r7, r0
 801316e:	8812      	ldrh	r2, [r2, #0]
 8013170:	493b      	ldr	r1, [pc, #236]	@ (8013260 <USB_ActivateEndpoint+0x6b4>)
 8013172:	430a      	orrs	r2, r1
 8013174:	b292      	uxth	r2, r2
 8013176:	801a      	strh	r2, [r3, #0]
 8013178:	e0ac      	b.n	80132d4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801317a:	687a      	ldr	r2, [r7, #4]
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	009b      	lsls	r3, r3, #2
 8013182:	18d2      	adds	r2, r2, r3
 8013184:	214e      	movs	r1, #78	@ 0x4e
 8013186:	187b      	adds	r3, r7, r1
 8013188:	8812      	ldrh	r2, [r2, #0]
 801318a:	801a      	strh	r2, [r3, #0]
 801318c:	187b      	adds	r3, r7, r1
 801318e:	881a      	ldrh	r2, [r3, #0]
 8013190:	2380      	movs	r3, #128	@ 0x80
 8013192:	01db      	lsls	r3, r3, #7
 8013194:	4013      	ands	r3, r2
 8013196:	d016      	beq.n	80131c6 <USB_ActivateEndpoint+0x61a>
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	009b      	lsls	r3, r3, #2
 80131a0:	18d3      	adds	r3, r2, r3
 80131a2:	881b      	ldrh	r3, [r3, #0]
 80131a4:	b29a      	uxth	r2, r3
 80131a6:	204c      	movs	r0, #76	@ 0x4c
 80131a8:	183b      	adds	r3, r7, r0
 80131aa:	492a      	ldr	r1, [pc, #168]	@ (8013254 <USB_ActivateEndpoint+0x6a8>)
 80131ac:	400a      	ands	r2, r1
 80131ae:	801a      	strh	r2, [r3, #0]
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	009b      	lsls	r3, r3, #2
 80131b8:	18d3      	adds	r3, r2, r3
 80131ba:	183a      	adds	r2, r7, r0
 80131bc:	8812      	ldrh	r2, [r2, #0]
 80131be:	4926      	ldr	r1, [pc, #152]	@ (8013258 <USB_ActivateEndpoint+0x6ac>)
 80131c0:	430a      	orrs	r2, r1
 80131c2:	b292      	uxth	r2, r2
 80131c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80131c6:	687a      	ldr	r2, [r7, #4]
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	009b      	lsls	r3, r3, #2
 80131ce:	18d2      	adds	r2, r2, r3
 80131d0:	214a      	movs	r1, #74	@ 0x4a
 80131d2:	187b      	adds	r3, r7, r1
 80131d4:	8812      	ldrh	r2, [r2, #0]
 80131d6:	801a      	strh	r2, [r3, #0]
 80131d8:	187b      	adds	r3, r7, r1
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	2240      	movs	r2, #64	@ 0x40
 80131de:	4013      	ands	r3, r2
 80131e0:	d016      	beq.n	8013210 <USB_ActivateEndpoint+0x664>
 80131e2:	687a      	ldr	r2, [r7, #4]
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	781b      	ldrb	r3, [r3, #0]
 80131e8:	009b      	lsls	r3, r3, #2
 80131ea:	18d3      	adds	r3, r2, r3
 80131ec:	881b      	ldrh	r3, [r3, #0]
 80131ee:	b29a      	uxth	r2, r3
 80131f0:	2048      	movs	r0, #72	@ 0x48
 80131f2:	183b      	adds	r3, r7, r0
 80131f4:	4917      	ldr	r1, [pc, #92]	@ (8013254 <USB_ActivateEndpoint+0x6a8>)
 80131f6:	400a      	ands	r2, r1
 80131f8:	801a      	strh	r2, [r3, #0]
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	009b      	lsls	r3, r3, #2
 8013202:	18d3      	adds	r3, r2, r3
 8013204:	183a      	adds	r2, r7, r0
 8013206:	8812      	ldrh	r2, [r2, #0]
 8013208:	4919      	ldr	r1, [pc, #100]	@ (8013270 <USB_ActivateEndpoint+0x6c4>)
 801320a:	430a      	orrs	r2, r1
 801320c:	b292      	uxth	r2, r2
 801320e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	78db      	ldrb	r3, [r3, #3]
 8013214:	2b01      	cmp	r3, #1
 8013216:	d02f      	beq.n	8013278 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013218:	687a      	ldr	r2, [r7, #4]
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	18d3      	adds	r3, r2, r3
 8013222:	881b      	ldrh	r3, [r3, #0]
 8013224:	b29a      	uxth	r2, r3
 8013226:	2044      	movs	r0, #68	@ 0x44
 8013228:	183b      	adds	r3, r7, r0
 801322a:	4912      	ldr	r1, [pc, #72]	@ (8013274 <USB_ActivateEndpoint+0x6c8>)
 801322c:	400a      	ands	r2, r1
 801322e:	801a      	strh	r2, [r3, #0]
 8013230:	183b      	adds	r3, r7, r0
 8013232:	183a      	adds	r2, r7, r0
 8013234:	8812      	ldrh	r2, [r2, #0]
 8013236:	2120      	movs	r1, #32
 8013238:	404a      	eors	r2, r1
 801323a:	801a      	strh	r2, [r3, #0]
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	009b      	lsls	r3, r3, #2
 8013244:	18d3      	adds	r3, r2, r3
 8013246:	183a      	adds	r2, r7, r0
 8013248:	8812      	ldrh	r2, [r2, #0]
 801324a:	4905      	ldr	r1, [pc, #20]	@ (8013260 <USB_ActivateEndpoint+0x6b4>)
 801324c:	430a      	orrs	r2, r1
 801324e:	b292      	uxth	r2, r2
 8013250:	801a      	strh	r2, [r3, #0]
 8013252:	e028      	b.n	80132a6 <USB_ActivateEndpoint+0x6fa>
 8013254:	ffff8f8f 	.word	0xffff8f8f
 8013258:	ffffc080 	.word	0xffffc080
 801325c:	ffffbf8f 	.word	0xffffbf8f
 8013260:	ffff8080 	.word	0xffff8080
 8013264:	ffff8180 	.word	0xffff8180
 8013268:	ffff8e8f 	.word	0xffff8e8f
 801326c:	00000404 	.word	0x00000404
 8013270:	ffff80c0 	.word	0xffff80c0
 8013274:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	18d3      	adds	r3, r2, r3
 8013282:	881b      	ldrh	r3, [r3, #0]
 8013284:	b29a      	uxth	r2, r3
 8013286:	2046      	movs	r0, #70	@ 0x46
 8013288:	183b      	adds	r3, r7, r0
 801328a:	4916      	ldr	r1, [pc, #88]	@ (80132e4 <USB_ActivateEndpoint+0x738>)
 801328c:	400a      	ands	r2, r1
 801328e:	801a      	strh	r2, [r3, #0]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	009b      	lsls	r3, r3, #2
 8013298:	18d3      	adds	r3, r2, r3
 801329a:	183a      	adds	r2, r7, r0
 801329c:	8812      	ldrh	r2, [r2, #0]
 801329e:	4912      	ldr	r1, [pc, #72]	@ (80132e8 <USB_ActivateEndpoint+0x73c>)
 80132a0:	430a      	orrs	r2, r1
 80132a2:	b292      	uxth	r2, r2
 80132a4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	009b      	lsls	r3, r3, #2
 80132ae:	18d3      	adds	r3, r2, r3
 80132b0:	881b      	ldrh	r3, [r3, #0]
 80132b2:	b29a      	uxth	r2, r3
 80132b4:	2042      	movs	r0, #66	@ 0x42
 80132b6:	183b      	adds	r3, r7, r0
 80132b8:	490c      	ldr	r1, [pc, #48]	@ (80132ec <USB_ActivateEndpoint+0x740>)
 80132ba:	400a      	ands	r2, r1
 80132bc:	801a      	strh	r2, [r3, #0]
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	009b      	lsls	r3, r3, #2
 80132c6:	18d3      	adds	r3, r2, r3
 80132c8:	183a      	adds	r2, r7, r0
 80132ca:	8812      	ldrh	r2, [r2, #0]
 80132cc:	4906      	ldr	r1, [pc, #24]	@ (80132e8 <USB_ActivateEndpoint+0x73c>)
 80132ce:	430a      	orrs	r2, r1
 80132d0:	b292      	uxth	r2, r2
 80132d2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80132d4:	236f      	movs	r3, #111	@ 0x6f
 80132d6:	18fb      	adds	r3, r7, r3
 80132d8:	781b      	ldrb	r3, [r3, #0]
}
 80132da:	0018      	movs	r0, r3
 80132dc:	46bd      	mov	sp, r7
 80132de:	b01c      	add	sp, #112	@ 0x70
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	46c0      	nop			@ (mov r8, r8)
 80132e4:	ffff8fbf 	.word	0xffff8fbf
 80132e8:	ffff8080 	.word	0xffff8080
 80132ec:	ffffbf8f 	.word	0xffffbf8f

080132f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b08c      	sub	sp, #48	@ 0x30
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
 80132f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	7b1b      	ldrb	r3, [r3, #12]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d000      	beq.n	8013304 <USB_DeactivateEndpoint+0x14>
 8013302:	e07e      	b.n	8013402 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	785b      	ldrb	r3, [r3, #1]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d03c      	beq.n	8013386 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801330c:	687a      	ldr	r2, [r7, #4]
 801330e:	683b      	ldr	r3, [r7, #0]
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	009b      	lsls	r3, r3, #2
 8013314:	18d2      	adds	r2, r2, r3
 8013316:	210c      	movs	r1, #12
 8013318:	187b      	adds	r3, r7, r1
 801331a:	8812      	ldrh	r2, [r2, #0]
 801331c:	801a      	strh	r2, [r3, #0]
 801331e:	187b      	adds	r3, r7, r1
 8013320:	881b      	ldrh	r3, [r3, #0]
 8013322:	2240      	movs	r2, #64	@ 0x40
 8013324:	4013      	ands	r3, r2
 8013326:	d016      	beq.n	8013356 <USB_DeactivateEndpoint+0x66>
 8013328:	687a      	ldr	r2, [r7, #4]
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	18d3      	adds	r3, r2, r3
 8013332:	881b      	ldrh	r3, [r3, #0]
 8013334:	b29a      	uxth	r2, r3
 8013336:	200a      	movs	r0, #10
 8013338:	183b      	adds	r3, r7, r0
 801333a:	49c7      	ldr	r1, [pc, #796]	@ (8013658 <USB_DeactivateEndpoint+0x368>)
 801333c:	400a      	ands	r2, r1
 801333e:	801a      	strh	r2, [r3, #0]
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	009b      	lsls	r3, r3, #2
 8013348:	18d3      	adds	r3, r2, r3
 801334a:	183a      	adds	r2, r7, r0
 801334c:	8812      	ldrh	r2, [r2, #0]
 801334e:	49c3      	ldr	r1, [pc, #780]	@ (801365c <USB_DeactivateEndpoint+0x36c>)
 8013350:	430a      	orrs	r2, r1
 8013352:	b292      	uxth	r2, r2
 8013354:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	009b      	lsls	r3, r3, #2
 801335e:	18d3      	adds	r3, r2, r3
 8013360:	881b      	ldrh	r3, [r3, #0]
 8013362:	b29a      	uxth	r2, r3
 8013364:	2008      	movs	r0, #8
 8013366:	183b      	adds	r3, r7, r0
 8013368:	49bd      	ldr	r1, [pc, #756]	@ (8013660 <USB_DeactivateEndpoint+0x370>)
 801336a:	400a      	ands	r2, r1
 801336c:	801a      	strh	r2, [r3, #0]
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	009b      	lsls	r3, r3, #2
 8013376:	18d3      	adds	r3, r2, r3
 8013378:	183a      	adds	r2, r7, r0
 801337a:	8812      	ldrh	r2, [r2, #0]
 801337c:	49b9      	ldr	r1, [pc, #740]	@ (8013664 <USB_DeactivateEndpoint+0x374>)
 801337e:	430a      	orrs	r2, r1
 8013380:	b292      	uxth	r2, r2
 8013382:	801a      	strh	r2, [r3, #0]
 8013384:	e163      	b.n	801364e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	009b      	lsls	r3, r3, #2
 801338e:	18d2      	adds	r2, r2, r3
 8013390:	2112      	movs	r1, #18
 8013392:	187b      	adds	r3, r7, r1
 8013394:	8812      	ldrh	r2, [r2, #0]
 8013396:	801a      	strh	r2, [r3, #0]
 8013398:	187b      	adds	r3, r7, r1
 801339a:	881a      	ldrh	r2, [r3, #0]
 801339c:	2380      	movs	r3, #128	@ 0x80
 801339e:	01db      	lsls	r3, r3, #7
 80133a0:	4013      	ands	r3, r2
 80133a2:	d016      	beq.n	80133d2 <USB_DeactivateEndpoint+0xe2>
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	781b      	ldrb	r3, [r3, #0]
 80133aa:	009b      	lsls	r3, r3, #2
 80133ac:	18d3      	adds	r3, r2, r3
 80133ae:	881b      	ldrh	r3, [r3, #0]
 80133b0:	b29a      	uxth	r2, r3
 80133b2:	2010      	movs	r0, #16
 80133b4:	183b      	adds	r3, r7, r0
 80133b6:	49a8      	ldr	r1, [pc, #672]	@ (8013658 <USB_DeactivateEndpoint+0x368>)
 80133b8:	400a      	ands	r2, r1
 80133ba:	801a      	strh	r2, [r3, #0]
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	009b      	lsls	r3, r3, #2
 80133c4:	18d3      	adds	r3, r2, r3
 80133c6:	183a      	adds	r2, r7, r0
 80133c8:	8812      	ldrh	r2, [r2, #0]
 80133ca:	49a7      	ldr	r1, [pc, #668]	@ (8013668 <USB_DeactivateEndpoint+0x378>)
 80133cc:	430a      	orrs	r2, r1
 80133ce:	b292      	uxth	r2, r2
 80133d0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	009b      	lsls	r3, r3, #2
 80133da:	18d3      	adds	r3, r2, r3
 80133dc:	881b      	ldrh	r3, [r3, #0]
 80133de:	b29a      	uxth	r2, r3
 80133e0:	200e      	movs	r0, #14
 80133e2:	183b      	adds	r3, r7, r0
 80133e4:	49a1      	ldr	r1, [pc, #644]	@ (801366c <USB_DeactivateEndpoint+0x37c>)
 80133e6:	400a      	ands	r2, r1
 80133e8:	801a      	strh	r2, [r3, #0]
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	18d3      	adds	r3, r2, r3
 80133f4:	183a      	adds	r2, r7, r0
 80133f6:	8812      	ldrh	r2, [r2, #0]
 80133f8:	499a      	ldr	r1, [pc, #616]	@ (8013664 <USB_DeactivateEndpoint+0x374>)
 80133fa:	430a      	orrs	r2, r1
 80133fc:	b292      	uxth	r2, r2
 80133fe:	801a      	strh	r2, [r3, #0]
 8013400:	e125      	b.n	801364e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	785b      	ldrb	r3, [r3, #1]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d000      	beq.n	801340c <USB_DeactivateEndpoint+0x11c>
 801340a:	e090      	b.n	801352e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801340c:	687a      	ldr	r2, [r7, #4]
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	009b      	lsls	r3, r3, #2
 8013414:	18d2      	adds	r2, r2, r3
 8013416:	2120      	movs	r1, #32
 8013418:	187b      	adds	r3, r7, r1
 801341a:	8812      	ldrh	r2, [r2, #0]
 801341c:	801a      	strh	r2, [r3, #0]
 801341e:	187b      	adds	r3, r7, r1
 8013420:	881a      	ldrh	r2, [r3, #0]
 8013422:	2380      	movs	r3, #128	@ 0x80
 8013424:	01db      	lsls	r3, r3, #7
 8013426:	4013      	ands	r3, r2
 8013428:	d016      	beq.n	8013458 <USB_DeactivateEndpoint+0x168>
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	009b      	lsls	r3, r3, #2
 8013432:	18d3      	adds	r3, r2, r3
 8013434:	881b      	ldrh	r3, [r3, #0]
 8013436:	b29a      	uxth	r2, r3
 8013438:	201e      	movs	r0, #30
 801343a:	183b      	adds	r3, r7, r0
 801343c:	4986      	ldr	r1, [pc, #536]	@ (8013658 <USB_DeactivateEndpoint+0x368>)
 801343e:	400a      	ands	r2, r1
 8013440:	801a      	strh	r2, [r3, #0]
 8013442:	687a      	ldr	r2, [r7, #4]
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	18d3      	adds	r3, r2, r3
 801344c:	183a      	adds	r2, r7, r0
 801344e:	8812      	ldrh	r2, [r2, #0]
 8013450:	4985      	ldr	r1, [pc, #532]	@ (8013668 <USB_DeactivateEndpoint+0x378>)
 8013452:	430a      	orrs	r2, r1
 8013454:	b292      	uxth	r2, r2
 8013456:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	781b      	ldrb	r3, [r3, #0]
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	18d2      	adds	r2, r2, r3
 8013462:	211c      	movs	r1, #28
 8013464:	187b      	adds	r3, r7, r1
 8013466:	8812      	ldrh	r2, [r2, #0]
 8013468:	801a      	strh	r2, [r3, #0]
 801346a:	187b      	adds	r3, r7, r1
 801346c:	881b      	ldrh	r3, [r3, #0]
 801346e:	2240      	movs	r2, #64	@ 0x40
 8013470:	4013      	ands	r3, r2
 8013472:	d016      	beq.n	80134a2 <USB_DeactivateEndpoint+0x1b2>
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	009b      	lsls	r3, r3, #2
 801347c:	18d3      	adds	r3, r2, r3
 801347e:	881b      	ldrh	r3, [r3, #0]
 8013480:	b29a      	uxth	r2, r3
 8013482:	201a      	movs	r0, #26
 8013484:	183b      	adds	r3, r7, r0
 8013486:	4974      	ldr	r1, [pc, #464]	@ (8013658 <USB_DeactivateEndpoint+0x368>)
 8013488:	400a      	ands	r2, r1
 801348a:	801a      	strh	r2, [r3, #0]
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	18d3      	adds	r3, r2, r3
 8013496:	183a      	adds	r2, r7, r0
 8013498:	8812      	ldrh	r2, [r2, #0]
 801349a:	4970      	ldr	r1, [pc, #448]	@ (801365c <USB_DeactivateEndpoint+0x36c>)
 801349c:	430a      	orrs	r2, r1
 801349e:	b292      	uxth	r2, r2
 80134a0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	18d3      	adds	r3, r2, r3
 80134ac:	881b      	ldrh	r3, [r3, #0]
 80134ae:	b29a      	uxth	r2, r3
 80134b0:	2018      	movs	r0, #24
 80134b2:	183b      	adds	r3, r7, r0
 80134b4:	4968      	ldr	r1, [pc, #416]	@ (8013658 <USB_DeactivateEndpoint+0x368>)
 80134b6:	400a      	ands	r2, r1
 80134b8:	801a      	strh	r2, [r3, #0]
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	18d3      	adds	r3, r2, r3
 80134c4:	183a      	adds	r2, r7, r0
 80134c6:	8812      	ldrh	r2, [r2, #0]
 80134c8:	4964      	ldr	r1, [pc, #400]	@ (801365c <USB_DeactivateEndpoint+0x36c>)
 80134ca:	430a      	orrs	r2, r1
 80134cc:	b292      	uxth	r2, r2
 80134ce:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80134d0:	687a      	ldr	r2, [r7, #4]
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	009b      	lsls	r3, r3, #2
 80134d8:	18d3      	adds	r3, r2, r3
 80134da:	881b      	ldrh	r3, [r3, #0]
 80134dc:	b29a      	uxth	r2, r3
 80134de:	2016      	movs	r0, #22
 80134e0:	183b      	adds	r3, r7, r0
 80134e2:	4962      	ldr	r1, [pc, #392]	@ (801366c <USB_DeactivateEndpoint+0x37c>)
 80134e4:	400a      	ands	r2, r1
 80134e6:	801a      	strh	r2, [r3, #0]
 80134e8:	687a      	ldr	r2, [r7, #4]
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	781b      	ldrb	r3, [r3, #0]
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	18d3      	adds	r3, r2, r3
 80134f2:	183a      	adds	r2, r7, r0
 80134f4:	8812      	ldrh	r2, [r2, #0]
 80134f6:	495b      	ldr	r1, [pc, #364]	@ (8013664 <USB_DeactivateEndpoint+0x374>)
 80134f8:	430a      	orrs	r2, r1
 80134fa:	b292      	uxth	r2, r2
 80134fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	009b      	lsls	r3, r3, #2
 8013506:	18d3      	adds	r3, r2, r3
 8013508:	881b      	ldrh	r3, [r3, #0]
 801350a:	b29a      	uxth	r2, r3
 801350c:	2014      	movs	r0, #20
 801350e:	183b      	adds	r3, r7, r0
 8013510:	4953      	ldr	r1, [pc, #332]	@ (8013660 <USB_DeactivateEndpoint+0x370>)
 8013512:	400a      	ands	r2, r1
 8013514:	801a      	strh	r2, [r3, #0]
 8013516:	687a      	ldr	r2, [r7, #4]
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	009b      	lsls	r3, r3, #2
 801351e:	18d3      	adds	r3, r2, r3
 8013520:	183a      	adds	r2, r7, r0
 8013522:	8812      	ldrh	r2, [r2, #0]
 8013524:	494f      	ldr	r1, [pc, #316]	@ (8013664 <USB_DeactivateEndpoint+0x374>)
 8013526:	430a      	orrs	r2, r1
 8013528:	b292      	uxth	r2, r2
 801352a:	801a      	strh	r2, [r3, #0]
 801352c:	e08f      	b.n	801364e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	009b      	lsls	r3, r3, #2
 8013536:	18d2      	adds	r2, r2, r3
 8013538:	212e      	movs	r1, #46	@ 0x2e
 801353a:	187b      	adds	r3, r7, r1
 801353c:	8812      	ldrh	r2, [r2, #0]
 801353e:	801a      	strh	r2, [r3, #0]
 8013540:	187b      	adds	r3, r7, r1
 8013542:	881a      	ldrh	r2, [r3, #0]
 8013544:	2380      	movs	r3, #128	@ 0x80
 8013546:	01db      	lsls	r3, r3, #7
 8013548:	4013      	ands	r3, r2
 801354a:	d016      	beq.n	801357a <USB_DeactivateEndpoint+0x28a>
 801354c:	687a      	ldr	r2, [r7, #4]
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	009b      	lsls	r3, r3, #2
 8013554:	18d3      	adds	r3, r2, r3
 8013556:	881b      	ldrh	r3, [r3, #0]
 8013558:	b29a      	uxth	r2, r3
 801355a:	202c      	movs	r0, #44	@ 0x2c
 801355c:	183b      	adds	r3, r7, r0
 801355e:	493e      	ldr	r1, [pc, #248]	@ (8013658 <USB_DeactivateEndpoint+0x368>)
 8013560:	400a      	ands	r2, r1
 8013562:	801a      	strh	r2, [r3, #0]
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	009b      	lsls	r3, r3, #2
 801356c:	18d3      	adds	r3, r2, r3
 801356e:	183a      	adds	r2, r7, r0
 8013570:	8812      	ldrh	r2, [r2, #0]
 8013572:	493d      	ldr	r1, [pc, #244]	@ (8013668 <USB_DeactivateEndpoint+0x378>)
 8013574:	430a      	orrs	r2, r1
 8013576:	b292      	uxth	r2, r2
 8013578:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801357a:	687a      	ldr	r2, [r7, #4]
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	781b      	ldrb	r3, [r3, #0]
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	18d2      	adds	r2, r2, r3
 8013584:	212a      	movs	r1, #42	@ 0x2a
 8013586:	187b      	adds	r3, r7, r1
 8013588:	8812      	ldrh	r2, [r2, #0]
 801358a:	801a      	strh	r2, [r3, #0]
 801358c:	187b      	adds	r3, r7, r1
 801358e:	881b      	ldrh	r3, [r3, #0]
 8013590:	2240      	movs	r2, #64	@ 0x40
 8013592:	4013      	ands	r3, r2
 8013594:	d016      	beq.n	80135c4 <USB_DeactivateEndpoint+0x2d4>
 8013596:	687a      	ldr	r2, [r7, #4]
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	18d3      	adds	r3, r2, r3
 80135a0:	881b      	ldrh	r3, [r3, #0]
 80135a2:	b29a      	uxth	r2, r3
 80135a4:	2028      	movs	r0, #40	@ 0x28
 80135a6:	183b      	adds	r3, r7, r0
 80135a8:	492b      	ldr	r1, [pc, #172]	@ (8013658 <USB_DeactivateEndpoint+0x368>)
 80135aa:	400a      	ands	r2, r1
 80135ac:	801a      	strh	r2, [r3, #0]
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	18d3      	adds	r3, r2, r3
 80135b8:	183a      	adds	r2, r7, r0
 80135ba:	8812      	ldrh	r2, [r2, #0]
 80135bc:	4927      	ldr	r1, [pc, #156]	@ (801365c <USB_DeactivateEndpoint+0x36c>)
 80135be:	430a      	orrs	r2, r1
 80135c0:	b292      	uxth	r2, r2
 80135c2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80135c4:	687a      	ldr	r2, [r7, #4]
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	18d3      	adds	r3, r2, r3
 80135ce:	881b      	ldrh	r3, [r3, #0]
 80135d0:	b29a      	uxth	r2, r3
 80135d2:	2026      	movs	r0, #38	@ 0x26
 80135d4:	183b      	adds	r3, r7, r0
 80135d6:	4920      	ldr	r1, [pc, #128]	@ (8013658 <USB_DeactivateEndpoint+0x368>)
 80135d8:	400a      	ands	r2, r1
 80135da:	801a      	strh	r2, [r3, #0]
 80135dc:	687a      	ldr	r2, [r7, #4]
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	781b      	ldrb	r3, [r3, #0]
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	18d3      	adds	r3, r2, r3
 80135e6:	183a      	adds	r2, r7, r0
 80135e8:	8812      	ldrh	r2, [r2, #0]
 80135ea:	491f      	ldr	r1, [pc, #124]	@ (8013668 <USB_DeactivateEndpoint+0x378>)
 80135ec:	430a      	orrs	r2, r1
 80135ee:	b292      	uxth	r2, r2
 80135f0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	18d3      	adds	r3, r2, r3
 80135fc:	881b      	ldrh	r3, [r3, #0]
 80135fe:	b29a      	uxth	r2, r3
 8013600:	2024      	movs	r0, #36	@ 0x24
 8013602:	183b      	adds	r3, r7, r0
 8013604:	4916      	ldr	r1, [pc, #88]	@ (8013660 <USB_DeactivateEndpoint+0x370>)
 8013606:	400a      	ands	r2, r1
 8013608:	801a      	strh	r2, [r3, #0]
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	009b      	lsls	r3, r3, #2
 8013612:	18d3      	adds	r3, r2, r3
 8013614:	183a      	adds	r2, r7, r0
 8013616:	8812      	ldrh	r2, [r2, #0]
 8013618:	4912      	ldr	r1, [pc, #72]	@ (8013664 <USB_DeactivateEndpoint+0x374>)
 801361a:	430a      	orrs	r2, r1
 801361c:	b292      	uxth	r2, r2
 801361e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013620:	687a      	ldr	r2, [r7, #4]
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	18d3      	adds	r3, r2, r3
 801362a:	881b      	ldrh	r3, [r3, #0]
 801362c:	b29a      	uxth	r2, r3
 801362e:	2022      	movs	r0, #34	@ 0x22
 8013630:	183b      	adds	r3, r7, r0
 8013632:	490e      	ldr	r1, [pc, #56]	@ (801366c <USB_DeactivateEndpoint+0x37c>)
 8013634:	400a      	ands	r2, r1
 8013636:	801a      	strh	r2, [r3, #0]
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	009b      	lsls	r3, r3, #2
 8013640:	18d3      	adds	r3, r2, r3
 8013642:	183a      	adds	r2, r7, r0
 8013644:	8812      	ldrh	r2, [r2, #0]
 8013646:	4907      	ldr	r1, [pc, #28]	@ (8013664 <USB_DeactivateEndpoint+0x374>)
 8013648:	430a      	orrs	r2, r1
 801364a:	b292      	uxth	r2, r2
 801364c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801364e:	2300      	movs	r3, #0
}
 8013650:	0018      	movs	r0, r3
 8013652:	46bd      	mov	sp, r7
 8013654:	b00c      	add	sp, #48	@ 0x30
 8013656:	bd80      	pop	{r7, pc}
 8013658:	ffff8f8f 	.word	0xffff8f8f
 801365c:	ffff80c0 	.word	0xffff80c0
 8013660:	ffff8fbf 	.word	0xffff8fbf
 8013664:	ffff8080 	.word	0xffff8080
 8013668:	ffffc080 	.word	0xffffc080
 801366c:	ffffbf8f 	.word	0xffffbf8f

08013670 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013670:	b590      	push	{r4, r7, lr}
 8013672:	b0c3      	sub	sp, #268	@ 0x10c
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	785b      	ldrb	r3, [r3, #1]
 801367e:	2b01      	cmp	r3, #1
 8013680:	d001      	beq.n	8013686 <USB_EPStartXfer+0x16>
 8013682:	f000 fd2d 	bl	80140e0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	699a      	ldr	r2, [r3, #24]
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	691b      	ldr	r3, [r3, #16]
 801368e:	429a      	cmp	r2, r3
 8013690:	d905      	bls.n	801369e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	691b      	ldr	r3, [r3, #16]
 8013696:	1d7a      	adds	r2, r7, #5
 8013698:	32ff      	adds	r2, #255	@ 0xff
 801369a:	6013      	str	r3, [r2, #0]
 801369c:	e004      	b.n	80136a8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	699b      	ldr	r3, [r3, #24]
 80136a2:	1d7a      	adds	r2, r7, #5
 80136a4:	32ff      	adds	r2, #255	@ 0xff
 80136a6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	7b1b      	ldrb	r3, [r3, #12]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d125      	bne.n	80136fc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	6959      	ldr	r1, [r3, #20]
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	88da      	ldrh	r2, [r3, #6]
 80136b8:	1d7b      	adds	r3, r7, #5
 80136ba:	33ff      	adds	r3, #255	@ 0xff
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	b29b      	uxth	r3, r3
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f001 fa47 	bl	8014b54 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	613b      	str	r3, [r7, #16]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2250      	movs	r2, #80	@ 0x50
 80136ce:	5a9b      	ldrh	r3, [r3, r2]
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	001a      	movs	r2, r3
 80136d4:	693b      	ldr	r3, [r7, #16]
 80136d6:	189b      	adds	r3, r3, r2
 80136d8:	613b      	str	r3, [r7, #16]
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	00da      	lsls	r2, r3, #3
 80136e0:	693b      	ldr	r3, [r7, #16]
 80136e2:	18d3      	adds	r3, r2, r3
 80136e4:	4ad7      	ldr	r2, [pc, #860]	@ (8013a44 <USB_EPStartXfer+0x3d4>)
 80136e6:	4694      	mov	ip, r2
 80136e8:	4463      	add	r3, ip
 80136ea:	60fb      	str	r3, [r7, #12]
 80136ec:	1d7b      	adds	r3, r7, #5
 80136ee:	33ff      	adds	r3, #255	@ 0xff
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	801a      	strh	r2, [r3, #0]
 80136f8:	f000 fccd 	bl	8014096 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	78db      	ldrb	r3, [r3, #3]
 8013700:	2b02      	cmp	r3, #2
 8013702:	d000      	beq.n	8013706 <USB_EPStartXfer+0x96>
 8013704:	e362      	b.n	8013dcc <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	6a1a      	ldr	r2, [r3, #32]
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	691b      	ldr	r3, [r3, #16]
 801370e:	429a      	cmp	r2, r3
 8013710:	d800      	bhi.n	8013714 <USB_EPStartXfer+0xa4>
 8013712:	e309      	b.n	8013d28 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	009b      	lsls	r3, r3, #2
 801371c:	18d3      	adds	r3, r2, r3
 801371e:	881b      	ldrh	r3, [r3, #0]
 8013720:	b29a      	uxth	r2, r3
 8013722:	2056      	movs	r0, #86	@ 0x56
 8013724:	183b      	adds	r3, r7, r0
 8013726:	49c8      	ldr	r1, [pc, #800]	@ (8013a48 <USB_EPStartXfer+0x3d8>)
 8013728:	400a      	ands	r2, r1
 801372a:	801a      	strh	r2, [r3, #0]
 801372c:	687a      	ldr	r2, [r7, #4]
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	18d3      	adds	r3, r2, r3
 8013736:	183a      	adds	r2, r7, r0
 8013738:	8812      	ldrh	r2, [r2, #0]
 801373a:	49c4      	ldr	r1, [pc, #784]	@ (8013a4c <USB_EPStartXfer+0x3dc>)
 801373c:	430a      	orrs	r2, r1
 801373e:	b292      	uxth	r2, r2
 8013740:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	6a1a      	ldr	r2, [r3, #32]
 8013746:	1d7b      	adds	r3, r7, #5
 8013748:	33ff      	adds	r3, #255	@ 0xff
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	1ad2      	subs	r2, r2, r3
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	18d3      	adds	r3, r2, r3
 801375c:	881b      	ldrh	r3, [r3, #0]
 801375e:	b29b      	uxth	r3, r3
 8013760:	001a      	movs	r2, r3
 8013762:	2340      	movs	r3, #64	@ 0x40
 8013764:	4013      	ands	r3, r2
 8013766:	d100      	bne.n	801376a <USB_EPStartXfer+0xfa>
 8013768:	e176      	b.n	8013a58 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	633b      	str	r3, [r7, #48]	@ 0x30
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	785b      	ldrb	r3, [r3, #1]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d000      	beq.n	8013778 <USB_EPStartXfer+0x108>
 8013776:	e074      	b.n	8013862 <USB_EPStartXfer+0x1f2>
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2250      	movs	r2, #80	@ 0x50
 8013780:	5a9b      	ldrh	r3, [r3, r2]
 8013782:	b29b      	uxth	r3, r3
 8013784:	001a      	movs	r2, r3
 8013786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013788:	189b      	adds	r3, r3, r2
 801378a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	00da      	lsls	r2, r3, #3
 8013792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013794:	18d3      	adds	r3, r2, r3
 8013796:	4aae      	ldr	r2, [pc, #696]	@ (8013a50 <USB_EPStartXfer+0x3e0>)
 8013798:	4694      	mov	ip, r2
 801379a:	4463      	add	r3, ip
 801379c:	627b      	str	r3, [r7, #36]	@ 0x24
 801379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a0:	881b      	ldrh	r3, [r3, #0]
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	059b      	lsls	r3, r3, #22
 80137a6:	0d9b      	lsrs	r3, r3, #22
 80137a8:	b29a      	uxth	r2, r3
 80137aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ac:	801a      	strh	r2, [r3, #0]
 80137ae:	1d7b      	adds	r3, r7, #5
 80137b0:	33ff      	adds	r3, #255	@ 0xff
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80137b6:	d924      	bls.n	8013802 <USB_EPStartXfer+0x192>
 80137b8:	1d7b      	adds	r3, r7, #5
 80137ba:	33ff      	adds	r3, #255	@ 0xff
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	095b      	lsrs	r3, r3, #5
 80137c0:	1c7a      	adds	r2, r7, #1
 80137c2:	32ff      	adds	r2, #255	@ 0xff
 80137c4:	6013      	str	r3, [r2, #0]
 80137c6:	1d7b      	adds	r3, r7, #5
 80137c8:	33ff      	adds	r3, #255	@ 0xff
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	221f      	movs	r2, #31
 80137ce:	4013      	ands	r3, r2
 80137d0:	d106      	bne.n	80137e0 <USB_EPStartXfer+0x170>
 80137d2:	1c7b      	adds	r3, r7, #1
 80137d4:	33ff      	adds	r3, #255	@ 0xff
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	3b01      	subs	r3, #1
 80137da:	1c7a      	adds	r2, r7, #1
 80137dc:	32ff      	adds	r2, #255	@ 0xff
 80137de:	6013      	str	r3, [r2, #0]
 80137e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137e2:	881b      	ldrh	r3, [r3, #0]
 80137e4:	b29a      	uxth	r2, r3
 80137e6:	1c7b      	adds	r3, r7, #1
 80137e8:	33ff      	adds	r3, #255	@ 0xff
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	b29b      	uxth	r3, r3
 80137ee:	029b      	lsls	r3, r3, #10
 80137f0:	b29b      	uxth	r3, r3
 80137f2:	4313      	orrs	r3, r2
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	4a97      	ldr	r2, [pc, #604]	@ (8013a54 <USB_EPStartXfer+0x3e4>)
 80137f8:	4313      	orrs	r3, r2
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137fe:	801a      	strh	r2, [r3, #0]
 8013800:	e04a      	b.n	8013898 <USB_EPStartXfer+0x228>
 8013802:	1d7b      	adds	r3, r7, #5
 8013804:	33ff      	adds	r3, #255	@ 0xff
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d108      	bne.n	801381e <USB_EPStartXfer+0x1ae>
 801380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801380e:	881b      	ldrh	r3, [r3, #0]
 8013810:	b29b      	uxth	r3, r3
 8013812:	4a90      	ldr	r2, [pc, #576]	@ (8013a54 <USB_EPStartXfer+0x3e4>)
 8013814:	4313      	orrs	r3, r2
 8013816:	b29a      	uxth	r2, r3
 8013818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801381a:	801a      	strh	r2, [r3, #0]
 801381c:	e03c      	b.n	8013898 <USB_EPStartXfer+0x228>
 801381e:	1d7b      	adds	r3, r7, #5
 8013820:	33ff      	adds	r3, #255	@ 0xff
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	085b      	lsrs	r3, r3, #1
 8013826:	1c7a      	adds	r2, r7, #1
 8013828:	32ff      	adds	r2, #255	@ 0xff
 801382a:	6013      	str	r3, [r2, #0]
 801382c:	1d7b      	adds	r3, r7, #5
 801382e:	33ff      	adds	r3, #255	@ 0xff
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	2201      	movs	r2, #1
 8013834:	4013      	ands	r3, r2
 8013836:	d006      	beq.n	8013846 <USB_EPStartXfer+0x1d6>
 8013838:	1c7b      	adds	r3, r7, #1
 801383a:	33ff      	adds	r3, #255	@ 0xff
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	3301      	adds	r3, #1
 8013840:	1c7a      	adds	r2, r7, #1
 8013842:	32ff      	adds	r2, #255	@ 0xff
 8013844:	6013      	str	r3, [r2, #0]
 8013846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013848:	881b      	ldrh	r3, [r3, #0]
 801384a:	b29a      	uxth	r2, r3
 801384c:	1c7b      	adds	r3, r7, #1
 801384e:	33ff      	adds	r3, #255	@ 0xff
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	b29b      	uxth	r3, r3
 8013854:	029b      	lsls	r3, r3, #10
 8013856:	b29b      	uxth	r3, r3
 8013858:	4313      	orrs	r3, r2
 801385a:	b29a      	uxth	r2, r3
 801385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801385e:	801a      	strh	r2, [r3, #0]
 8013860:	e01a      	b.n	8013898 <USB_EPStartXfer+0x228>
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	785b      	ldrb	r3, [r3, #1]
 8013866:	2b01      	cmp	r3, #1
 8013868:	d116      	bne.n	8013898 <USB_EPStartXfer+0x228>
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2250      	movs	r2, #80	@ 0x50
 801386e:	5a9b      	ldrh	r3, [r3, r2]
 8013870:	b29b      	uxth	r3, r3
 8013872:	001a      	movs	r2, r3
 8013874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013876:	189b      	adds	r3, r3, r2
 8013878:	633b      	str	r3, [r7, #48]	@ 0x30
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	781b      	ldrb	r3, [r3, #0]
 801387e:	00da      	lsls	r2, r3, #3
 8013880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013882:	18d3      	adds	r3, r2, r3
 8013884:	4a72      	ldr	r2, [pc, #456]	@ (8013a50 <USB_EPStartXfer+0x3e0>)
 8013886:	4694      	mov	ip, r2
 8013888:	4463      	add	r3, ip
 801388a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801388c:	1d7b      	adds	r3, r7, #5
 801388e:	33ff      	adds	r3, #255	@ 0xff
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	b29a      	uxth	r2, r3
 8013894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013896:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013898:	2076      	movs	r0, #118	@ 0x76
 801389a:	183b      	adds	r3, r7, r0
 801389c:	683a      	ldr	r2, [r7, #0]
 801389e:	8952      	ldrh	r2, [r2, #10]
 80138a0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	6959      	ldr	r1, [r3, #20]
 80138a6:	1d7b      	adds	r3, r7, #5
 80138a8:	33ff      	adds	r3, #255	@ 0xff
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	b29c      	uxth	r4, r3
 80138ae:	183b      	adds	r3, r7, r0
 80138b0:	881a      	ldrh	r2, [r3, #0]
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	0023      	movs	r3, r4
 80138b6:	f001 f94d 	bl	8014b54 <USB_WritePMA>
            ep->xfer_buff += len;
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	695a      	ldr	r2, [r3, #20]
 80138be:	1d7b      	adds	r3, r7, #5
 80138c0:	33ff      	adds	r3, #255	@ 0xff
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	18d2      	adds	r2, r2, r3
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	6a1a      	ldr	r2, [r3, #32]
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	691b      	ldr	r3, [r3, #16]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d908      	bls.n	80138e8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	6a1a      	ldr	r2, [r3, #32]
 80138da:	1d7b      	adds	r3, r7, #5
 80138dc:	33ff      	adds	r3, #255	@ 0xff
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	1ad2      	subs	r2, r2, r3
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	621a      	str	r2, [r3, #32]
 80138e6:	e007      	b.n	80138f8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	6a1b      	ldr	r3, [r3, #32]
 80138ec:	1d7a      	adds	r2, r7, #5
 80138ee:	32ff      	adds	r2, #255	@ 0xff
 80138f0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	2200      	movs	r2, #0
 80138f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	785b      	ldrb	r3, [r3, #1]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d000      	beq.n	8013902 <USB_EPStartXfer+0x292>
 8013900:	e070      	b.n	80139e4 <USB_EPStartXfer+0x374>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	61bb      	str	r3, [r7, #24]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2250      	movs	r2, #80	@ 0x50
 801390a:	5a9b      	ldrh	r3, [r3, r2]
 801390c:	b29b      	uxth	r3, r3
 801390e:	001a      	movs	r2, r3
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	189b      	adds	r3, r3, r2
 8013914:	61bb      	str	r3, [r7, #24]
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	00da      	lsls	r2, r3, #3
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	18d3      	adds	r3, r2, r3
 8013920:	4a48      	ldr	r2, [pc, #288]	@ (8013a44 <USB_EPStartXfer+0x3d4>)
 8013922:	4694      	mov	ip, r2
 8013924:	4463      	add	r3, ip
 8013926:	617b      	str	r3, [r7, #20]
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	b29b      	uxth	r3, r3
 801392e:	059b      	lsls	r3, r3, #22
 8013930:	0d9b      	lsrs	r3, r3, #22
 8013932:	b29a      	uxth	r2, r3
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	801a      	strh	r2, [r3, #0]
 8013938:	1d7b      	adds	r3, r7, #5
 801393a:	33ff      	adds	r3, #255	@ 0xff
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013940:	d922      	bls.n	8013988 <USB_EPStartXfer+0x318>
 8013942:	1d7b      	adds	r3, r7, #5
 8013944:	33ff      	adds	r3, #255	@ 0xff
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	095b      	lsrs	r3, r3, #5
 801394a:	21fc      	movs	r1, #252	@ 0xfc
 801394c:	187a      	adds	r2, r7, r1
 801394e:	6013      	str	r3, [r2, #0]
 8013950:	1d7b      	adds	r3, r7, #5
 8013952:	33ff      	adds	r3, #255	@ 0xff
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	221f      	movs	r2, #31
 8013958:	4013      	ands	r3, r2
 801395a:	d104      	bne.n	8013966 <USB_EPStartXfer+0x2f6>
 801395c:	187b      	adds	r3, r7, r1
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	3b01      	subs	r3, #1
 8013962:	187a      	adds	r2, r7, r1
 8013964:	6013      	str	r3, [r2, #0]
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	881b      	ldrh	r3, [r3, #0]
 801396a:	b29a      	uxth	r2, r3
 801396c:	23fc      	movs	r3, #252	@ 0xfc
 801396e:	18fb      	adds	r3, r7, r3
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	b29b      	uxth	r3, r3
 8013974:	029b      	lsls	r3, r3, #10
 8013976:	b29b      	uxth	r3, r3
 8013978:	4313      	orrs	r3, r2
 801397a:	b29b      	uxth	r3, r3
 801397c:	4a35      	ldr	r2, [pc, #212]	@ (8013a54 <USB_EPStartXfer+0x3e4>)
 801397e:	4313      	orrs	r3, r2
 8013980:	b29a      	uxth	r2, r3
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	801a      	strh	r2, [r3, #0]
 8013986:	e04a      	b.n	8013a1e <USB_EPStartXfer+0x3ae>
 8013988:	1d7b      	adds	r3, r7, #5
 801398a:	33ff      	adds	r3, #255	@ 0xff
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d108      	bne.n	80139a4 <USB_EPStartXfer+0x334>
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	881b      	ldrh	r3, [r3, #0]
 8013996:	b29b      	uxth	r3, r3
 8013998:	4a2e      	ldr	r2, [pc, #184]	@ (8013a54 <USB_EPStartXfer+0x3e4>)
 801399a:	4313      	orrs	r3, r2
 801399c:	b29a      	uxth	r2, r3
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	801a      	strh	r2, [r3, #0]
 80139a2:	e03c      	b.n	8013a1e <USB_EPStartXfer+0x3ae>
 80139a4:	1d7b      	adds	r3, r7, #5
 80139a6:	33ff      	adds	r3, #255	@ 0xff
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	085b      	lsrs	r3, r3, #1
 80139ac:	21fc      	movs	r1, #252	@ 0xfc
 80139ae:	187a      	adds	r2, r7, r1
 80139b0:	6013      	str	r3, [r2, #0]
 80139b2:	1d7b      	adds	r3, r7, #5
 80139b4:	33ff      	adds	r3, #255	@ 0xff
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	2201      	movs	r2, #1
 80139ba:	4013      	ands	r3, r2
 80139bc:	d004      	beq.n	80139c8 <USB_EPStartXfer+0x358>
 80139be:	187b      	adds	r3, r7, r1
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	3301      	adds	r3, #1
 80139c4:	187a      	adds	r2, r7, r1
 80139c6:	6013      	str	r3, [r2, #0]
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	881b      	ldrh	r3, [r3, #0]
 80139cc:	b29a      	uxth	r2, r3
 80139ce:	23fc      	movs	r3, #252	@ 0xfc
 80139d0:	18fb      	adds	r3, r7, r3
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	b29b      	uxth	r3, r3
 80139d6:	029b      	lsls	r3, r3, #10
 80139d8:	b29b      	uxth	r3, r3
 80139da:	4313      	orrs	r3, r2
 80139dc:	b29a      	uxth	r2, r3
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	801a      	strh	r2, [r3, #0]
 80139e2:	e01c      	b.n	8013a1e <USB_EPStartXfer+0x3ae>
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	785b      	ldrb	r3, [r3, #1]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d118      	bne.n	8013a1e <USB_EPStartXfer+0x3ae>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	623b      	str	r3, [r7, #32]
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2250      	movs	r2, #80	@ 0x50
 80139f4:	5a9b      	ldrh	r3, [r3, r2]
 80139f6:	b29b      	uxth	r3, r3
 80139f8:	001a      	movs	r2, r3
 80139fa:	6a3b      	ldr	r3, [r7, #32]
 80139fc:	189b      	adds	r3, r3, r2
 80139fe:	623b      	str	r3, [r7, #32]
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	781b      	ldrb	r3, [r3, #0]
 8013a04:	00da      	lsls	r2, r3, #3
 8013a06:	6a3b      	ldr	r3, [r7, #32]
 8013a08:	18d3      	adds	r3, r2, r3
 8013a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8013a44 <USB_EPStartXfer+0x3d4>)
 8013a0c:	4694      	mov	ip, r2
 8013a0e:	4463      	add	r3, ip
 8013a10:	61fb      	str	r3, [r7, #28]
 8013a12:	1d7b      	adds	r3, r7, #5
 8013a14:	33ff      	adds	r3, #255	@ 0xff
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	b29a      	uxth	r2, r3
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013a1e:	2076      	movs	r0, #118	@ 0x76
 8013a20:	183b      	adds	r3, r7, r0
 8013a22:	683a      	ldr	r2, [r7, #0]
 8013a24:	8912      	ldrh	r2, [r2, #8]
 8013a26:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	6959      	ldr	r1, [r3, #20]
 8013a2c:	1d7b      	adds	r3, r7, #5
 8013a2e:	33ff      	adds	r3, #255	@ 0xff
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	b29c      	uxth	r4, r3
 8013a34:	183b      	adds	r3, r7, r0
 8013a36:	881a      	ldrh	r2, [r3, #0]
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	0023      	movs	r3, r4
 8013a3c:	f001 f88a 	bl	8014b54 <USB_WritePMA>
 8013a40:	e329      	b.n	8014096 <USB_EPStartXfer+0xa26>
 8013a42:	46c0      	nop			@ (mov r8, r8)
 8013a44:	00000402 	.word	0x00000402
 8013a48:	ffff8f8f 	.word	0xffff8f8f
 8013a4c:	ffff8180 	.word	0xffff8180
 8013a50:	00000406 	.word	0x00000406
 8013a54:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	785b      	ldrb	r3, [r3, #1]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d000      	beq.n	8013a62 <USB_EPStartXfer+0x3f2>
 8013a60:	e070      	b.n	8013b44 <USB_EPStartXfer+0x4d4>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2250      	movs	r2, #80	@ 0x50
 8013a6a:	5a9b      	ldrh	r3, [r3, r2]
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	001a      	movs	r2, r3
 8013a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a72:	189b      	adds	r3, r3, r2
 8013a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	781b      	ldrb	r3, [r3, #0]
 8013a7a:	00da      	lsls	r2, r3, #3
 8013a7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a7e:	18d3      	adds	r3, r2, r3
 8013a80:	4acd      	ldr	r2, [pc, #820]	@ (8013db8 <USB_EPStartXfer+0x748>)
 8013a82:	4694      	mov	ip, r2
 8013a84:	4463      	add	r3, ip
 8013a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8013a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a8a:	881b      	ldrh	r3, [r3, #0]
 8013a8c:	b29b      	uxth	r3, r3
 8013a8e:	059b      	lsls	r3, r3, #22
 8013a90:	0d9b      	lsrs	r3, r3, #22
 8013a92:	b29a      	uxth	r2, r3
 8013a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a96:	801a      	strh	r2, [r3, #0]
 8013a98:	1d7b      	adds	r3, r7, #5
 8013a9a:	33ff      	adds	r3, #255	@ 0xff
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013aa0:	d922      	bls.n	8013ae8 <USB_EPStartXfer+0x478>
 8013aa2:	1d7b      	adds	r3, r7, #5
 8013aa4:	33ff      	adds	r3, #255	@ 0xff
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	095b      	lsrs	r3, r3, #5
 8013aaa:	21f8      	movs	r1, #248	@ 0xf8
 8013aac:	187a      	adds	r2, r7, r1
 8013aae:	6013      	str	r3, [r2, #0]
 8013ab0:	1d7b      	adds	r3, r7, #5
 8013ab2:	33ff      	adds	r3, #255	@ 0xff
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	221f      	movs	r2, #31
 8013ab8:	4013      	ands	r3, r2
 8013aba:	d104      	bne.n	8013ac6 <USB_EPStartXfer+0x456>
 8013abc:	187b      	adds	r3, r7, r1
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	3b01      	subs	r3, #1
 8013ac2:	187a      	adds	r2, r7, r1
 8013ac4:	6013      	str	r3, [r2, #0]
 8013ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ac8:	881b      	ldrh	r3, [r3, #0]
 8013aca:	b29a      	uxth	r2, r3
 8013acc:	23f8      	movs	r3, #248	@ 0xf8
 8013ace:	18fb      	adds	r3, r7, r3
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	b29b      	uxth	r3, r3
 8013ad4:	029b      	lsls	r3, r3, #10
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	4313      	orrs	r3, r2
 8013ada:	b29b      	uxth	r3, r3
 8013adc:	4ab7      	ldr	r2, [pc, #732]	@ (8013dbc <USB_EPStartXfer+0x74c>)
 8013ade:	4313      	orrs	r3, r2
 8013ae0:	b29a      	uxth	r2, r3
 8013ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ae4:	801a      	strh	r2, [r3, #0]
 8013ae6:	e04a      	b.n	8013b7e <USB_EPStartXfer+0x50e>
 8013ae8:	1d7b      	adds	r3, r7, #5
 8013aea:	33ff      	adds	r3, #255	@ 0xff
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d108      	bne.n	8013b04 <USB_EPStartXfer+0x494>
 8013af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	4ab0      	ldr	r2, [pc, #704]	@ (8013dbc <USB_EPStartXfer+0x74c>)
 8013afa:	4313      	orrs	r3, r2
 8013afc:	b29a      	uxth	r2, r3
 8013afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b00:	801a      	strh	r2, [r3, #0]
 8013b02:	e03c      	b.n	8013b7e <USB_EPStartXfer+0x50e>
 8013b04:	1d7b      	adds	r3, r7, #5
 8013b06:	33ff      	adds	r3, #255	@ 0xff
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	085b      	lsrs	r3, r3, #1
 8013b0c:	21f8      	movs	r1, #248	@ 0xf8
 8013b0e:	187a      	adds	r2, r7, r1
 8013b10:	6013      	str	r3, [r2, #0]
 8013b12:	1d7b      	adds	r3, r7, #5
 8013b14:	33ff      	adds	r3, #255	@ 0xff
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2201      	movs	r2, #1
 8013b1a:	4013      	ands	r3, r2
 8013b1c:	d004      	beq.n	8013b28 <USB_EPStartXfer+0x4b8>
 8013b1e:	187b      	adds	r3, r7, r1
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	3301      	adds	r3, #1
 8013b24:	187a      	adds	r2, r7, r1
 8013b26:	6013      	str	r3, [r2, #0]
 8013b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b2a:	881b      	ldrh	r3, [r3, #0]
 8013b2c:	b29a      	uxth	r2, r3
 8013b2e:	23f8      	movs	r3, #248	@ 0xf8
 8013b30:	18fb      	adds	r3, r7, r3
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	029b      	lsls	r3, r3, #10
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	b29a      	uxth	r2, r3
 8013b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b40:	801a      	strh	r2, [r3, #0]
 8013b42:	e01c      	b.n	8013b7e <USB_EPStartXfer+0x50e>
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	785b      	ldrb	r3, [r3, #1]
 8013b48:	2b01      	cmp	r3, #1
 8013b4a:	d118      	bne.n	8013b7e <USB_EPStartXfer+0x50e>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2250      	movs	r2, #80	@ 0x50
 8013b54:	5a9b      	ldrh	r3, [r3, r2]
 8013b56:	b29b      	uxth	r3, r3
 8013b58:	001a      	movs	r2, r3
 8013b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b5c:	189b      	adds	r3, r3, r2
 8013b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	00da      	lsls	r2, r3, #3
 8013b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b68:	18d3      	adds	r3, r2, r3
 8013b6a:	4a93      	ldr	r2, [pc, #588]	@ (8013db8 <USB_EPStartXfer+0x748>)
 8013b6c:	4694      	mov	ip, r2
 8013b6e:	4463      	add	r3, ip
 8013b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013b72:	1d7b      	adds	r3, r7, #5
 8013b74:	33ff      	adds	r3, #255	@ 0xff
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	b29a      	uxth	r2, r3
 8013b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013b7e:	2076      	movs	r0, #118	@ 0x76
 8013b80:	183b      	adds	r3, r7, r0
 8013b82:	683a      	ldr	r2, [r7, #0]
 8013b84:	8912      	ldrh	r2, [r2, #8]
 8013b86:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	6959      	ldr	r1, [r3, #20]
 8013b8c:	1d7b      	adds	r3, r7, #5
 8013b8e:	33ff      	adds	r3, #255	@ 0xff
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	b29c      	uxth	r4, r3
 8013b94:	183b      	adds	r3, r7, r0
 8013b96:	881a      	ldrh	r2, [r3, #0]
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	0023      	movs	r3, r4
 8013b9c:	f000 ffda 	bl	8014b54 <USB_WritePMA>
            ep->xfer_buff += len;
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	695a      	ldr	r2, [r3, #20]
 8013ba4:	1d7b      	adds	r3, r7, #5
 8013ba6:	33ff      	adds	r3, #255	@ 0xff
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	18d2      	adds	r2, r2, r3
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	6a1a      	ldr	r2, [r3, #32]
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	691b      	ldr	r3, [r3, #16]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d908      	bls.n	8013bce <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	6a1a      	ldr	r2, [r3, #32]
 8013bc0:	1d7b      	adds	r3, r7, #5
 8013bc2:	33ff      	adds	r3, #255	@ 0xff
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	1ad2      	subs	r2, r2, r3
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	621a      	str	r2, [r3, #32]
 8013bcc:	e007      	b.n	8013bde <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	6a1b      	ldr	r3, [r3, #32]
 8013bd2:	1d7a      	adds	r2, r7, #5
 8013bd4:	32ff      	adds	r2, #255	@ 0xff
 8013bd6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	643b      	str	r3, [r7, #64]	@ 0x40
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	785b      	ldrb	r3, [r3, #1]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d000      	beq.n	8013bec <USB_EPStartXfer+0x57c>
 8013bea:	e070      	b.n	8013cce <USB_EPStartXfer+0x65e>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2250      	movs	r2, #80	@ 0x50
 8013bf4:	5a9b      	ldrh	r3, [r3, r2]
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	001a      	movs	r2, r3
 8013bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bfc:	189b      	adds	r3, r3, r2
 8013bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	00da      	lsls	r2, r3, #3
 8013c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c08:	18d3      	adds	r3, r2, r3
 8013c0a:	4a6d      	ldr	r2, [pc, #436]	@ (8013dc0 <USB_EPStartXfer+0x750>)
 8013c0c:	4694      	mov	ip, r2
 8013c0e:	4463      	add	r3, ip
 8013c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c14:	881b      	ldrh	r3, [r3, #0]
 8013c16:	b29b      	uxth	r3, r3
 8013c18:	059b      	lsls	r3, r3, #22
 8013c1a:	0d9b      	lsrs	r3, r3, #22
 8013c1c:	b29a      	uxth	r2, r3
 8013c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c20:	801a      	strh	r2, [r3, #0]
 8013c22:	1d7b      	adds	r3, r7, #5
 8013c24:	33ff      	adds	r3, #255	@ 0xff
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	2b3e      	cmp	r3, #62	@ 0x3e
 8013c2a:	d922      	bls.n	8013c72 <USB_EPStartXfer+0x602>
 8013c2c:	1d7b      	adds	r3, r7, #5
 8013c2e:	33ff      	adds	r3, #255	@ 0xff
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	095b      	lsrs	r3, r3, #5
 8013c34:	21f4      	movs	r1, #244	@ 0xf4
 8013c36:	187a      	adds	r2, r7, r1
 8013c38:	6013      	str	r3, [r2, #0]
 8013c3a:	1d7b      	adds	r3, r7, #5
 8013c3c:	33ff      	adds	r3, #255	@ 0xff
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	221f      	movs	r2, #31
 8013c42:	4013      	ands	r3, r2
 8013c44:	d104      	bne.n	8013c50 <USB_EPStartXfer+0x5e0>
 8013c46:	187b      	adds	r3, r7, r1
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	3b01      	subs	r3, #1
 8013c4c:	187a      	adds	r2, r7, r1
 8013c4e:	6013      	str	r3, [r2, #0]
 8013c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c52:	881b      	ldrh	r3, [r3, #0]
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	23f4      	movs	r3, #244	@ 0xf4
 8013c58:	18fb      	adds	r3, r7, r3
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	b29b      	uxth	r3, r3
 8013c5e:	029b      	lsls	r3, r3, #10
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	4313      	orrs	r3, r2
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	4a55      	ldr	r2, [pc, #340]	@ (8013dbc <USB_EPStartXfer+0x74c>)
 8013c68:	4313      	orrs	r3, r2
 8013c6a:	b29a      	uxth	r2, r3
 8013c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c6e:	801a      	strh	r2, [r3, #0]
 8013c70:	e048      	b.n	8013d04 <USB_EPStartXfer+0x694>
 8013c72:	1d7b      	adds	r3, r7, #5
 8013c74:	33ff      	adds	r3, #255	@ 0xff
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d108      	bne.n	8013c8e <USB_EPStartXfer+0x61e>
 8013c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c7e:	881b      	ldrh	r3, [r3, #0]
 8013c80:	b29b      	uxth	r3, r3
 8013c82:	4a4e      	ldr	r2, [pc, #312]	@ (8013dbc <USB_EPStartXfer+0x74c>)
 8013c84:	4313      	orrs	r3, r2
 8013c86:	b29a      	uxth	r2, r3
 8013c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c8a:	801a      	strh	r2, [r3, #0]
 8013c8c:	e03a      	b.n	8013d04 <USB_EPStartXfer+0x694>
 8013c8e:	1d7b      	adds	r3, r7, #5
 8013c90:	33ff      	adds	r3, #255	@ 0xff
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	085b      	lsrs	r3, r3, #1
 8013c96:	21f4      	movs	r1, #244	@ 0xf4
 8013c98:	187a      	adds	r2, r7, r1
 8013c9a:	6013      	str	r3, [r2, #0]
 8013c9c:	1d7b      	adds	r3, r7, #5
 8013c9e:	33ff      	adds	r3, #255	@ 0xff
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	2201      	movs	r2, #1
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	d004      	beq.n	8013cb2 <USB_EPStartXfer+0x642>
 8013ca8:	187b      	adds	r3, r7, r1
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	3301      	adds	r3, #1
 8013cae:	187a      	adds	r2, r7, r1
 8013cb0:	6013      	str	r3, [r2, #0]
 8013cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cb4:	881b      	ldrh	r3, [r3, #0]
 8013cb6:	b29a      	uxth	r2, r3
 8013cb8:	23f4      	movs	r3, #244	@ 0xf4
 8013cba:	18fb      	adds	r3, r7, r3
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	b29b      	uxth	r3, r3
 8013cc0:	029b      	lsls	r3, r3, #10
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	4313      	orrs	r3, r2
 8013cc6:	b29a      	uxth	r2, r3
 8013cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cca:	801a      	strh	r2, [r3, #0]
 8013ccc:	e01a      	b.n	8013d04 <USB_EPStartXfer+0x694>
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	785b      	ldrb	r3, [r3, #1]
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	d116      	bne.n	8013d04 <USB_EPStartXfer+0x694>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2250      	movs	r2, #80	@ 0x50
 8013cda:	5a9b      	ldrh	r3, [r3, r2]
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	001a      	movs	r2, r3
 8013ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ce2:	189b      	adds	r3, r3, r2
 8013ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	781b      	ldrb	r3, [r3, #0]
 8013cea:	00da      	lsls	r2, r3, #3
 8013cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013cee:	18d3      	adds	r3, r2, r3
 8013cf0:	4a33      	ldr	r2, [pc, #204]	@ (8013dc0 <USB_EPStartXfer+0x750>)
 8013cf2:	4694      	mov	ip, r2
 8013cf4:	4463      	add	r3, ip
 8013cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013cf8:	1d7b      	adds	r3, r7, #5
 8013cfa:	33ff      	adds	r3, #255	@ 0xff
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	b29a      	uxth	r2, r3
 8013d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013d04:	2076      	movs	r0, #118	@ 0x76
 8013d06:	183b      	adds	r3, r7, r0
 8013d08:	683a      	ldr	r2, [r7, #0]
 8013d0a:	8952      	ldrh	r2, [r2, #10]
 8013d0c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	6959      	ldr	r1, [r3, #20]
 8013d12:	1d7b      	adds	r3, r7, #5
 8013d14:	33ff      	adds	r3, #255	@ 0xff
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	b29c      	uxth	r4, r3
 8013d1a:	183b      	adds	r3, r7, r0
 8013d1c:	881a      	ldrh	r2, [r3, #0]
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	0023      	movs	r3, r4
 8013d22:	f000 ff17 	bl	8014b54 <USB_WritePMA>
 8013d26:	e1b6      	b.n	8014096 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	6a1b      	ldr	r3, [r3, #32]
 8013d2c:	1d7a      	adds	r2, r7, #5
 8013d2e:	32ff      	adds	r2, #255	@ 0xff
 8013d30:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013d32:	687a      	ldr	r2, [r7, #4]
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	009b      	lsls	r3, r3, #2
 8013d3a:	18d3      	adds	r3, r2, r3
 8013d3c:	881b      	ldrh	r3, [r3, #0]
 8013d3e:	b29a      	uxth	r2, r3
 8013d40:	2062      	movs	r0, #98	@ 0x62
 8013d42:	183b      	adds	r3, r7, r0
 8013d44:	491f      	ldr	r1, [pc, #124]	@ (8013dc4 <USB_EPStartXfer+0x754>)
 8013d46:	400a      	ands	r2, r1
 8013d48:	801a      	strh	r2, [r3, #0]
 8013d4a:	687a      	ldr	r2, [r7, #4]
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	009b      	lsls	r3, r3, #2
 8013d52:	18d3      	adds	r3, r2, r3
 8013d54:	183a      	adds	r2, r7, r0
 8013d56:	8812      	ldrh	r2, [r2, #0]
 8013d58:	491b      	ldr	r1, [pc, #108]	@ (8013dc8 <USB_EPStartXfer+0x758>)
 8013d5a:	430a      	orrs	r2, r1
 8013d5c:	b292      	uxth	r2, r2
 8013d5e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2250      	movs	r2, #80	@ 0x50
 8013d68:	5a9b      	ldrh	r3, [r3, r2]
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	001a      	movs	r2, r3
 8013d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d70:	189b      	adds	r3, r3, r2
 8013d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	781b      	ldrb	r3, [r3, #0]
 8013d78:	00da      	lsls	r2, r3, #3
 8013d7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d7c:	18d3      	adds	r3, r2, r3
 8013d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8013db8 <USB_EPStartXfer+0x748>)
 8013d80:	4694      	mov	ip, r2
 8013d82:	4463      	add	r3, ip
 8013d84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013d86:	1d7b      	adds	r3, r7, #5
 8013d88:	33ff      	adds	r3, #255	@ 0xff
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	b29a      	uxth	r2, r3
 8013d8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013d92:	2076      	movs	r0, #118	@ 0x76
 8013d94:	183b      	adds	r3, r7, r0
 8013d96:	683a      	ldr	r2, [r7, #0]
 8013d98:	8912      	ldrh	r2, [r2, #8]
 8013d9a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	6959      	ldr	r1, [r3, #20]
 8013da0:	1d7b      	adds	r3, r7, #5
 8013da2:	33ff      	adds	r3, #255	@ 0xff
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	b29c      	uxth	r4, r3
 8013da8:	183b      	adds	r3, r7, r0
 8013daa:	881a      	ldrh	r2, [r3, #0]
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	0023      	movs	r3, r4
 8013db0:	f000 fed0 	bl	8014b54 <USB_WritePMA>
 8013db4:	e16f      	b.n	8014096 <USB_EPStartXfer+0xa26>
 8013db6:	46c0      	nop			@ (mov r8, r8)
 8013db8:	00000402 	.word	0x00000402
 8013dbc:	ffff8000 	.word	0xffff8000
 8013dc0:	00000406 	.word	0x00000406
 8013dc4:	ffff8e8f 	.word	0xffff8e8f
 8013dc8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	6a1a      	ldr	r2, [r3, #32]
 8013dd0:	1d7b      	adds	r3, r7, #5
 8013dd2:	33ff      	adds	r3, #255	@ 0xff
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	1ad2      	subs	r2, r2, r3
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	009b      	lsls	r3, r3, #2
 8013de4:	18d3      	adds	r3, r2, r3
 8013de6:	881b      	ldrh	r3, [r3, #0]
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	001a      	movs	r2, r3
 8013dec:	2340      	movs	r3, #64	@ 0x40
 8013dee:	4013      	ands	r3, r2
 8013df0:	d100      	bne.n	8013df4 <USB_EPStartXfer+0x784>
 8013df2:	e0a4      	b.n	8013f3e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	673b      	str	r3, [r7, #112]	@ 0x70
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	785b      	ldrb	r3, [r3, #1]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d000      	beq.n	8013e02 <USB_EPStartXfer+0x792>
 8013e00:	e070      	b.n	8013ee4 <USB_EPStartXfer+0x874>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2250      	movs	r2, #80	@ 0x50
 8013e0a:	5a9b      	ldrh	r3, [r3, r2]
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	001a      	movs	r2, r3
 8013e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e12:	189b      	adds	r3, r3, r2
 8013e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	00da      	lsls	r2, r3, #3
 8013e1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e1e:	18d3      	adds	r3, r2, r3
 8013e20:	4abc      	ldr	r2, [pc, #752]	@ (8014114 <USB_EPStartXfer+0xaa4>)
 8013e22:	4694      	mov	ip, r2
 8013e24:	4463      	add	r3, ip
 8013e26:	667b      	str	r3, [r7, #100]	@ 0x64
 8013e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	b29b      	uxth	r3, r3
 8013e2e:	059b      	lsls	r3, r3, #22
 8013e30:	0d9b      	lsrs	r3, r3, #22
 8013e32:	b29a      	uxth	r2, r3
 8013e34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e36:	801a      	strh	r2, [r3, #0]
 8013e38:	1d7b      	adds	r3, r7, #5
 8013e3a:	33ff      	adds	r3, #255	@ 0xff
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013e40:	d922      	bls.n	8013e88 <USB_EPStartXfer+0x818>
 8013e42:	1d7b      	adds	r3, r7, #5
 8013e44:	33ff      	adds	r3, #255	@ 0xff
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	095b      	lsrs	r3, r3, #5
 8013e4a:	21f0      	movs	r1, #240	@ 0xf0
 8013e4c:	187a      	adds	r2, r7, r1
 8013e4e:	6013      	str	r3, [r2, #0]
 8013e50:	1d7b      	adds	r3, r7, #5
 8013e52:	33ff      	adds	r3, #255	@ 0xff
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	221f      	movs	r2, #31
 8013e58:	4013      	ands	r3, r2
 8013e5a:	d104      	bne.n	8013e66 <USB_EPStartXfer+0x7f6>
 8013e5c:	187b      	adds	r3, r7, r1
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	3b01      	subs	r3, #1
 8013e62:	187a      	adds	r2, r7, r1
 8013e64:	6013      	str	r3, [r2, #0]
 8013e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e68:	881b      	ldrh	r3, [r3, #0]
 8013e6a:	b29a      	uxth	r2, r3
 8013e6c:	23f0      	movs	r3, #240	@ 0xf0
 8013e6e:	18fb      	adds	r3, r7, r3
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	029b      	lsls	r3, r3, #10
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	4313      	orrs	r3, r2
 8013e7a:	b29b      	uxth	r3, r3
 8013e7c:	4aa6      	ldr	r2, [pc, #664]	@ (8014118 <USB_EPStartXfer+0xaa8>)
 8013e7e:	4313      	orrs	r3, r2
 8013e80:	b29a      	uxth	r2, r3
 8013e82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e84:	801a      	strh	r2, [r3, #0]
 8013e86:	e048      	b.n	8013f1a <USB_EPStartXfer+0x8aa>
 8013e88:	1d7b      	adds	r3, r7, #5
 8013e8a:	33ff      	adds	r3, #255	@ 0xff
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d108      	bne.n	8013ea4 <USB_EPStartXfer+0x834>
 8013e92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013e94:	881b      	ldrh	r3, [r3, #0]
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	4a9f      	ldr	r2, [pc, #636]	@ (8014118 <USB_EPStartXfer+0xaa8>)
 8013e9a:	4313      	orrs	r3, r2
 8013e9c:	b29a      	uxth	r2, r3
 8013e9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ea0:	801a      	strh	r2, [r3, #0]
 8013ea2:	e03a      	b.n	8013f1a <USB_EPStartXfer+0x8aa>
 8013ea4:	1d7b      	adds	r3, r7, #5
 8013ea6:	33ff      	adds	r3, #255	@ 0xff
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	085b      	lsrs	r3, r3, #1
 8013eac:	21f0      	movs	r1, #240	@ 0xf0
 8013eae:	187a      	adds	r2, r7, r1
 8013eb0:	6013      	str	r3, [r2, #0]
 8013eb2:	1d7b      	adds	r3, r7, #5
 8013eb4:	33ff      	adds	r3, #255	@ 0xff
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	2201      	movs	r2, #1
 8013eba:	4013      	ands	r3, r2
 8013ebc:	d004      	beq.n	8013ec8 <USB_EPStartXfer+0x858>
 8013ebe:	187b      	adds	r3, r7, r1
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	3301      	adds	r3, #1
 8013ec4:	187a      	adds	r2, r7, r1
 8013ec6:	6013      	str	r3, [r2, #0]
 8013ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013eca:	881b      	ldrh	r3, [r3, #0]
 8013ecc:	b29a      	uxth	r2, r3
 8013ece:	23f0      	movs	r3, #240	@ 0xf0
 8013ed0:	18fb      	adds	r3, r7, r3
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	b29b      	uxth	r3, r3
 8013ed6:	029b      	lsls	r3, r3, #10
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	4313      	orrs	r3, r2
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ee0:	801a      	strh	r2, [r3, #0]
 8013ee2:	e01a      	b.n	8013f1a <USB_EPStartXfer+0x8aa>
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	785b      	ldrb	r3, [r3, #1]
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	d116      	bne.n	8013f1a <USB_EPStartXfer+0x8aa>
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2250      	movs	r2, #80	@ 0x50
 8013ef0:	5a9b      	ldrh	r3, [r3, r2]
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	001a      	movs	r2, r3
 8013ef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013ef8:	189b      	adds	r3, r3, r2
 8013efa:	673b      	str	r3, [r7, #112]	@ 0x70
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	00da      	lsls	r2, r3, #3
 8013f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013f04:	18d3      	adds	r3, r2, r3
 8013f06:	4a83      	ldr	r2, [pc, #524]	@ (8014114 <USB_EPStartXfer+0xaa4>)
 8013f08:	4694      	mov	ip, r2
 8013f0a:	4463      	add	r3, ip
 8013f0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013f0e:	1d7b      	adds	r3, r7, #5
 8013f10:	33ff      	adds	r3, #255	@ 0xff
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	b29a      	uxth	r2, r3
 8013f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013f18:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8013f1a:	2076      	movs	r0, #118	@ 0x76
 8013f1c:	183b      	adds	r3, r7, r0
 8013f1e:	683a      	ldr	r2, [r7, #0]
 8013f20:	8952      	ldrh	r2, [r2, #10]
 8013f22:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	6959      	ldr	r1, [r3, #20]
 8013f28:	1d7b      	adds	r3, r7, #5
 8013f2a:	33ff      	adds	r3, #255	@ 0xff
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	b29c      	uxth	r4, r3
 8013f30:	183b      	adds	r3, r7, r0
 8013f32:	881a      	ldrh	r2, [r3, #0]
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	0023      	movs	r3, r4
 8013f38:	f000 fe0c 	bl	8014b54 <USB_WritePMA>
 8013f3c:	e0ab      	b.n	8014096 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	785b      	ldrb	r3, [r3, #1]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d000      	beq.n	8013f48 <USB_EPStartXfer+0x8d8>
 8013f46:	e070      	b.n	801402a <USB_EPStartXfer+0x9ba>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2250      	movs	r2, #80	@ 0x50
 8013f50:	5a9b      	ldrh	r3, [r3, r2]
 8013f52:	b29b      	uxth	r3, r3
 8013f54:	001a      	movs	r2, r3
 8013f56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f58:	189b      	adds	r3, r3, r2
 8013f5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	00da      	lsls	r2, r3, #3
 8013f62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f64:	18d3      	adds	r3, r2, r3
 8013f66:	4a6d      	ldr	r2, [pc, #436]	@ (801411c <USB_EPStartXfer+0xaac>)
 8013f68:	4694      	mov	ip, r2
 8013f6a:	4463      	add	r3, ip
 8013f6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013f6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f70:	881b      	ldrh	r3, [r3, #0]
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	059b      	lsls	r3, r3, #22
 8013f76:	0d9b      	lsrs	r3, r3, #22
 8013f78:	b29a      	uxth	r2, r3
 8013f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f7c:	801a      	strh	r2, [r3, #0]
 8013f7e:	1d7b      	adds	r3, r7, #5
 8013f80:	33ff      	adds	r3, #255	@ 0xff
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	2b3e      	cmp	r3, #62	@ 0x3e
 8013f86:	d922      	bls.n	8013fce <USB_EPStartXfer+0x95e>
 8013f88:	1d7b      	adds	r3, r7, #5
 8013f8a:	33ff      	adds	r3, #255	@ 0xff
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	095b      	lsrs	r3, r3, #5
 8013f90:	21ec      	movs	r1, #236	@ 0xec
 8013f92:	187a      	adds	r2, r7, r1
 8013f94:	6013      	str	r3, [r2, #0]
 8013f96:	1d7b      	adds	r3, r7, #5
 8013f98:	33ff      	adds	r3, #255	@ 0xff
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	221f      	movs	r2, #31
 8013f9e:	4013      	ands	r3, r2
 8013fa0:	d104      	bne.n	8013fac <USB_EPStartXfer+0x93c>
 8013fa2:	187b      	adds	r3, r7, r1
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	3b01      	subs	r3, #1
 8013fa8:	187a      	adds	r2, r7, r1
 8013faa:	6013      	str	r3, [r2, #0]
 8013fac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013fae:	881b      	ldrh	r3, [r3, #0]
 8013fb0:	b29a      	uxth	r2, r3
 8013fb2:	23ec      	movs	r3, #236	@ 0xec
 8013fb4:	18fb      	adds	r3, r7, r3
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	029b      	lsls	r3, r3, #10
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	4313      	orrs	r3, r2
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	4a55      	ldr	r2, [pc, #340]	@ (8014118 <USB_EPStartXfer+0xaa8>)
 8013fc4:	4313      	orrs	r3, r2
 8013fc6:	b29a      	uxth	r2, r3
 8013fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013fca:	801a      	strh	r2, [r3, #0]
 8013fcc:	e052      	b.n	8014074 <USB_EPStartXfer+0xa04>
 8013fce:	1d7b      	adds	r3, r7, #5
 8013fd0:	33ff      	adds	r3, #255	@ 0xff
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d108      	bne.n	8013fea <USB_EPStartXfer+0x97a>
 8013fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013fda:	881b      	ldrh	r3, [r3, #0]
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	4a4e      	ldr	r2, [pc, #312]	@ (8014118 <USB_EPStartXfer+0xaa8>)
 8013fe0:	4313      	orrs	r3, r2
 8013fe2:	b29a      	uxth	r2, r3
 8013fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013fe6:	801a      	strh	r2, [r3, #0]
 8013fe8:	e044      	b.n	8014074 <USB_EPStartXfer+0xa04>
 8013fea:	1d7b      	adds	r3, r7, #5
 8013fec:	33ff      	adds	r3, #255	@ 0xff
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	085b      	lsrs	r3, r3, #1
 8013ff2:	21ec      	movs	r1, #236	@ 0xec
 8013ff4:	187a      	adds	r2, r7, r1
 8013ff6:	6013      	str	r3, [r2, #0]
 8013ff8:	1d7b      	adds	r3, r7, #5
 8013ffa:	33ff      	adds	r3, #255	@ 0xff
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	2201      	movs	r2, #1
 8014000:	4013      	ands	r3, r2
 8014002:	d004      	beq.n	801400e <USB_EPStartXfer+0x99e>
 8014004:	187b      	adds	r3, r7, r1
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	3301      	adds	r3, #1
 801400a:	187a      	adds	r2, r7, r1
 801400c:	6013      	str	r3, [r2, #0]
 801400e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014010:	881b      	ldrh	r3, [r3, #0]
 8014012:	b29a      	uxth	r2, r3
 8014014:	23ec      	movs	r3, #236	@ 0xec
 8014016:	18fb      	adds	r3, r7, r3
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	b29b      	uxth	r3, r3
 801401c:	029b      	lsls	r3, r3, #10
 801401e:	b29b      	uxth	r3, r3
 8014020:	4313      	orrs	r3, r2
 8014022:	b29a      	uxth	r2, r3
 8014024:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014026:	801a      	strh	r2, [r3, #0]
 8014028:	e024      	b.n	8014074 <USB_EPStartXfer+0xa04>
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	785b      	ldrb	r3, [r3, #1]
 801402e:	2b01      	cmp	r3, #1
 8014030:	d120      	bne.n	8014074 <USB_EPStartXfer+0xa04>
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2184      	movs	r1, #132	@ 0x84
 8014036:	187a      	adds	r2, r7, r1
 8014038:	6013      	str	r3, [r2, #0]
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2250      	movs	r2, #80	@ 0x50
 801403e:	5a9b      	ldrh	r3, [r3, r2]
 8014040:	b29b      	uxth	r3, r3
 8014042:	001a      	movs	r2, r3
 8014044:	187b      	adds	r3, r7, r1
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	189b      	adds	r3, r3, r2
 801404a:	187a      	adds	r2, r7, r1
 801404c:	6013      	str	r3, [r2, #0]
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	781b      	ldrb	r3, [r3, #0]
 8014052:	00da      	lsls	r2, r3, #3
 8014054:	187b      	adds	r3, r7, r1
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	18d3      	adds	r3, r2, r3
 801405a:	4a30      	ldr	r2, [pc, #192]	@ (801411c <USB_EPStartXfer+0xaac>)
 801405c:	4694      	mov	ip, r2
 801405e:	4463      	add	r3, ip
 8014060:	2180      	movs	r1, #128	@ 0x80
 8014062:	187a      	adds	r2, r7, r1
 8014064:	6013      	str	r3, [r2, #0]
 8014066:	1d7b      	adds	r3, r7, #5
 8014068:	33ff      	adds	r3, #255	@ 0xff
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	b29a      	uxth	r2, r3
 801406e:	187b      	adds	r3, r7, r1
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014074:	2076      	movs	r0, #118	@ 0x76
 8014076:	183b      	adds	r3, r7, r0
 8014078:	683a      	ldr	r2, [r7, #0]
 801407a:	8912      	ldrh	r2, [r2, #8]
 801407c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	6959      	ldr	r1, [r3, #20]
 8014082:	1d7b      	adds	r3, r7, #5
 8014084:	33ff      	adds	r3, #255	@ 0xff
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	b29c      	uxth	r4, r3
 801408a:	183b      	adds	r3, r7, r0
 801408c:	881a      	ldrh	r2, [r3, #0]
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	0023      	movs	r3, r4
 8014092:	f000 fd5f 	bl	8014b54 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	009b      	lsls	r3, r3, #2
 801409e:	18d3      	adds	r3, r2, r3
 80140a0:	881b      	ldrh	r3, [r3, #0]
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	200a      	movs	r0, #10
 80140a6:	183b      	adds	r3, r7, r0
 80140a8:	491d      	ldr	r1, [pc, #116]	@ (8014120 <USB_EPStartXfer+0xab0>)
 80140aa:	400a      	ands	r2, r1
 80140ac:	801a      	strh	r2, [r3, #0]
 80140ae:	183b      	adds	r3, r7, r0
 80140b0:	183a      	adds	r2, r7, r0
 80140b2:	8812      	ldrh	r2, [r2, #0]
 80140b4:	2110      	movs	r1, #16
 80140b6:	404a      	eors	r2, r1
 80140b8:	801a      	strh	r2, [r3, #0]
 80140ba:	183b      	adds	r3, r7, r0
 80140bc:	183a      	adds	r2, r7, r0
 80140be:	8812      	ldrh	r2, [r2, #0]
 80140c0:	2120      	movs	r1, #32
 80140c2:	404a      	eors	r2, r1
 80140c4:	801a      	strh	r2, [r3, #0]
 80140c6:	687a      	ldr	r2, [r7, #4]
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	009b      	lsls	r3, r3, #2
 80140ce:	18d3      	adds	r3, r2, r3
 80140d0:	183a      	adds	r2, r7, r0
 80140d2:	8812      	ldrh	r2, [r2, #0]
 80140d4:	4913      	ldr	r1, [pc, #76]	@ (8014124 <USB_EPStartXfer+0xab4>)
 80140d6:	430a      	orrs	r2, r1
 80140d8:	b292      	uxth	r2, r2
 80140da:	801a      	strh	r2, [r3, #0]
 80140dc:	f000 fbf4 	bl	80148c8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	7b1b      	ldrb	r3, [r3, #12]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d000      	beq.n	80140ea <USB_EPStartXfer+0xa7a>
 80140e8:	e0a9      	b.n	801423e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	699a      	ldr	r2, [r3, #24]
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	691b      	ldr	r3, [r3, #16]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d918      	bls.n	8014128 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	691b      	ldr	r3, [r3, #16]
 80140fa:	1d7a      	adds	r2, r7, #5
 80140fc:	32ff      	adds	r2, #255	@ 0xff
 80140fe:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	699a      	ldr	r2, [r3, #24]
 8014104:	1d7b      	adds	r3, r7, #5
 8014106:	33ff      	adds	r3, #255	@ 0xff
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	1ad2      	subs	r2, r2, r3
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	619a      	str	r2, [r3, #24]
 8014110:	e012      	b.n	8014138 <USB_EPStartXfer+0xac8>
 8014112:	46c0      	nop			@ (mov r8, r8)
 8014114:	00000406 	.word	0x00000406
 8014118:	ffff8000 	.word	0xffff8000
 801411c:	00000402 	.word	0x00000402
 8014120:	ffff8fbf 	.word	0xffff8fbf
 8014124:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	699b      	ldr	r3, [r3, #24]
 801412c:	1d7a      	adds	r2, r7, #5
 801412e:	32ff      	adds	r2, #255	@ 0xff
 8014130:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	2200      	movs	r2, #0
 8014136:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2190      	movs	r1, #144	@ 0x90
 801413c:	187a      	adds	r2, r7, r1
 801413e:	6013      	str	r3, [r2, #0]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2250      	movs	r2, #80	@ 0x50
 8014144:	5a9b      	ldrh	r3, [r3, r2]
 8014146:	b29b      	uxth	r3, r3
 8014148:	001a      	movs	r2, r3
 801414a:	187b      	adds	r3, r7, r1
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	189b      	adds	r3, r3, r2
 8014150:	187a      	adds	r2, r7, r1
 8014152:	6013      	str	r3, [r2, #0]
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	00da      	lsls	r2, r3, #3
 801415a:	187b      	adds	r3, r7, r1
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	18d3      	adds	r3, r2, r3
 8014160:	4acf      	ldr	r2, [pc, #828]	@ (80144a0 <USB_EPStartXfer+0xe30>)
 8014162:	4694      	mov	ip, r2
 8014164:	4463      	add	r3, ip
 8014166:	218c      	movs	r1, #140	@ 0x8c
 8014168:	187a      	adds	r2, r7, r1
 801416a:	6013      	str	r3, [r2, #0]
 801416c:	187b      	adds	r3, r7, r1
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	b29b      	uxth	r3, r3
 8014174:	059b      	lsls	r3, r3, #22
 8014176:	0d9b      	lsrs	r3, r3, #22
 8014178:	b29a      	uxth	r2, r3
 801417a:	187b      	adds	r3, r7, r1
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	801a      	strh	r2, [r3, #0]
 8014180:	1d7b      	adds	r3, r7, #5
 8014182:	33ff      	adds	r3, #255	@ 0xff
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2b3e      	cmp	r3, #62	@ 0x3e
 8014188:	d925      	bls.n	80141d6 <USB_EPStartXfer+0xb66>
 801418a:	1d7b      	adds	r3, r7, #5
 801418c:	33ff      	adds	r3, #255	@ 0xff
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	095b      	lsrs	r3, r3, #5
 8014192:	21e8      	movs	r1, #232	@ 0xe8
 8014194:	187a      	adds	r2, r7, r1
 8014196:	6013      	str	r3, [r2, #0]
 8014198:	1d7b      	adds	r3, r7, #5
 801419a:	33ff      	adds	r3, #255	@ 0xff
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	221f      	movs	r2, #31
 80141a0:	4013      	ands	r3, r2
 80141a2:	d104      	bne.n	80141ae <USB_EPStartXfer+0xb3e>
 80141a4:	187b      	adds	r3, r7, r1
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	3b01      	subs	r3, #1
 80141aa:	187a      	adds	r2, r7, r1
 80141ac:	6013      	str	r3, [r2, #0]
 80141ae:	218c      	movs	r1, #140	@ 0x8c
 80141b0:	187b      	adds	r3, r7, r1
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	881b      	ldrh	r3, [r3, #0]
 80141b6:	b29a      	uxth	r2, r3
 80141b8:	23e8      	movs	r3, #232	@ 0xe8
 80141ba:	18fb      	adds	r3, r7, r3
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	b29b      	uxth	r3, r3
 80141c0:	029b      	lsls	r3, r3, #10
 80141c2:	b29b      	uxth	r3, r3
 80141c4:	4313      	orrs	r3, r2
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	4ab6      	ldr	r2, [pc, #728]	@ (80144a4 <USB_EPStartXfer+0xe34>)
 80141ca:	4313      	orrs	r3, r2
 80141cc:	b29a      	uxth	r2, r3
 80141ce:	187b      	adds	r3, r7, r1
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	801a      	strh	r2, [r3, #0]
 80141d4:	e353      	b.n	801487e <USB_EPStartXfer+0x120e>
 80141d6:	1d7b      	adds	r3, r7, #5
 80141d8:	33ff      	adds	r3, #255	@ 0xff
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d10b      	bne.n	80141f8 <USB_EPStartXfer+0xb88>
 80141e0:	218c      	movs	r1, #140	@ 0x8c
 80141e2:	187b      	adds	r3, r7, r1
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	881b      	ldrh	r3, [r3, #0]
 80141e8:	b29b      	uxth	r3, r3
 80141ea:	4aae      	ldr	r2, [pc, #696]	@ (80144a4 <USB_EPStartXfer+0xe34>)
 80141ec:	4313      	orrs	r3, r2
 80141ee:	b29a      	uxth	r2, r3
 80141f0:	187b      	adds	r3, r7, r1
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	801a      	strh	r2, [r3, #0]
 80141f6:	e342      	b.n	801487e <USB_EPStartXfer+0x120e>
 80141f8:	1d7b      	adds	r3, r7, #5
 80141fa:	33ff      	adds	r3, #255	@ 0xff
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	085b      	lsrs	r3, r3, #1
 8014200:	21e8      	movs	r1, #232	@ 0xe8
 8014202:	187a      	adds	r2, r7, r1
 8014204:	6013      	str	r3, [r2, #0]
 8014206:	1d7b      	adds	r3, r7, #5
 8014208:	33ff      	adds	r3, #255	@ 0xff
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	2201      	movs	r2, #1
 801420e:	4013      	ands	r3, r2
 8014210:	d004      	beq.n	801421c <USB_EPStartXfer+0xbac>
 8014212:	187b      	adds	r3, r7, r1
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	3301      	adds	r3, #1
 8014218:	187a      	adds	r2, r7, r1
 801421a:	6013      	str	r3, [r2, #0]
 801421c:	218c      	movs	r1, #140	@ 0x8c
 801421e:	187b      	adds	r3, r7, r1
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	881b      	ldrh	r3, [r3, #0]
 8014224:	b29a      	uxth	r2, r3
 8014226:	23e8      	movs	r3, #232	@ 0xe8
 8014228:	18fb      	adds	r3, r7, r3
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	b29b      	uxth	r3, r3
 801422e:	029b      	lsls	r3, r3, #10
 8014230:	b29b      	uxth	r3, r3
 8014232:	4313      	orrs	r3, r2
 8014234:	b29a      	uxth	r2, r3
 8014236:	187b      	adds	r3, r7, r1
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	801a      	strh	r2, [r3, #0]
 801423c:	e31f      	b.n	801487e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	78db      	ldrb	r3, [r3, #3]
 8014242:	2b02      	cmp	r3, #2
 8014244:	d000      	beq.n	8014248 <USB_EPStartXfer+0xbd8>
 8014246:	e191      	b.n	801456c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	785b      	ldrb	r3, [r3, #1]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d000      	beq.n	8014252 <USB_EPStartXfer+0xbe2>
 8014250:	e07c      	b.n	801434c <USB_EPStartXfer+0xcdc>
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	21ac      	movs	r1, #172	@ 0xac
 8014256:	187a      	adds	r2, r7, r1
 8014258:	6013      	str	r3, [r2, #0]
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	2250      	movs	r2, #80	@ 0x50
 801425e:	5a9b      	ldrh	r3, [r3, r2]
 8014260:	b29b      	uxth	r3, r3
 8014262:	001a      	movs	r2, r3
 8014264:	187b      	adds	r3, r7, r1
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	189b      	adds	r3, r3, r2
 801426a:	187a      	adds	r2, r7, r1
 801426c:	6013      	str	r3, [r2, #0]
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	00da      	lsls	r2, r3, #3
 8014274:	187b      	adds	r3, r7, r1
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	18d3      	adds	r3, r2, r3
 801427a:	4a8b      	ldr	r2, [pc, #556]	@ (80144a8 <USB_EPStartXfer+0xe38>)
 801427c:	4694      	mov	ip, r2
 801427e:	4463      	add	r3, ip
 8014280:	21a8      	movs	r1, #168	@ 0xa8
 8014282:	187a      	adds	r2, r7, r1
 8014284:	6013      	str	r3, [r2, #0]
 8014286:	187b      	adds	r3, r7, r1
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	881b      	ldrh	r3, [r3, #0]
 801428c:	b29b      	uxth	r3, r3
 801428e:	059b      	lsls	r3, r3, #22
 8014290:	0d9b      	lsrs	r3, r3, #22
 8014292:	b29a      	uxth	r2, r3
 8014294:	187b      	adds	r3, r7, r1
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	801a      	strh	r2, [r3, #0]
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	691b      	ldr	r3, [r3, #16]
 801429e:	2b3e      	cmp	r3, #62	@ 0x3e
 80142a0:	d923      	bls.n	80142ea <USB_EPStartXfer+0xc7a>
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	691b      	ldr	r3, [r3, #16]
 80142a6:	095b      	lsrs	r3, r3, #5
 80142a8:	21e4      	movs	r1, #228	@ 0xe4
 80142aa:	187a      	adds	r2, r7, r1
 80142ac:	6013      	str	r3, [r2, #0]
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	691b      	ldr	r3, [r3, #16]
 80142b2:	221f      	movs	r2, #31
 80142b4:	4013      	ands	r3, r2
 80142b6:	d104      	bne.n	80142c2 <USB_EPStartXfer+0xc52>
 80142b8:	187b      	adds	r3, r7, r1
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	3b01      	subs	r3, #1
 80142be:	187a      	adds	r2, r7, r1
 80142c0:	6013      	str	r3, [r2, #0]
 80142c2:	21a8      	movs	r1, #168	@ 0xa8
 80142c4:	187b      	adds	r3, r7, r1
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	881b      	ldrh	r3, [r3, #0]
 80142ca:	b29a      	uxth	r2, r3
 80142cc:	23e4      	movs	r3, #228	@ 0xe4
 80142ce:	18fb      	adds	r3, r7, r3
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	b29b      	uxth	r3, r3
 80142d4:	029b      	lsls	r3, r3, #10
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	4313      	orrs	r3, r2
 80142da:	b29b      	uxth	r3, r3
 80142dc:	4a71      	ldr	r2, [pc, #452]	@ (80144a4 <USB_EPStartXfer+0xe34>)
 80142de:	4313      	orrs	r3, r2
 80142e0:	b29a      	uxth	r2, r3
 80142e2:	187b      	adds	r3, r7, r1
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	801a      	strh	r2, [r3, #0]
 80142e8:	e054      	b.n	8014394 <USB_EPStartXfer+0xd24>
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	691b      	ldr	r3, [r3, #16]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d10b      	bne.n	801430a <USB_EPStartXfer+0xc9a>
 80142f2:	21a8      	movs	r1, #168	@ 0xa8
 80142f4:	187b      	adds	r3, r7, r1
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	881b      	ldrh	r3, [r3, #0]
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	4a69      	ldr	r2, [pc, #420]	@ (80144a4 <USB_EPStartXfer+0xe34>)
 80142fe:	4313      	orrs	r3, r2
 8014300:	b29a      	uxth	r2, r3
 8014302:	187b      	adds	r3, r7, r1
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	801a      	strh	r2, [r3, #0]
 8014308:	e044      	b.n	8014394 <USB_EPStartXfer+0xd24>
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	691b      	ldr	r3, [r3, #16]
 801430e:	085b      	lsrs	r3, r3, #1
 8014310:	21e4      	movs	r1, #228	@ 0xe4
 8014312:	187a      	adds	r2, r7, r1
 8014314:	6013      	str	r3, [r2, #0]
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	691b      	ldr	r3, [r3, #16]
 801431a:	2201      	movs	r2, #1
 801431c:	4013      	ands	r3, r2
 801431e:	d004      	beq.n	801432a <USB_EPStartXfer+0xcba>
 8014320:	187b      	adds	r3, r7, r1
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	3301      	adds	r3, #1
 8014326:	187a      	adds	r2, r7, r1
 8014328:	6013      	str	r3, [r2, #0]
 801432a:	21a8      	movs	r1, #168	@ 0xa8
 801432c:	187b      	adds	r3, r7, r1
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	881b      	ldrh	r3, [r3, #0]
 8014332:	b29a      	uxth	r2, r3
 8014334:	23e4      	movs	r3, #228	@ 0xe4
 8014336:	18fb      	adds	r3, r7, r3
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	b29b      	uxth	r3, r3
 801433c:	029b      	lsls	r3, r3, #10
 801433e:	b29b      	uxth	r3, r3
 8014340:	4313      	orrs	r3, r2
 8014342:	b29a      	uxth	r2, r3
 8014344:	187b      	adds	r3, r7, r1
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	801a      	strh	r2, [r3, #0]
 801434a:	e023      	b.n	8014394 <USB_EPStartXfer+0xd24>
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	785b      	ldrb	r3, [r3, #1]
 8014350:	2b01      	cmp	r3, #1
 8014352:	d11f      	bne.n	8014394 <USB_EPStartXfer+0xd24>
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	21b4      	movs	r1, #180	@ 0xb4
 8014358:	187a      	adds	r2, r7, r1
 801435a:	6013      	str	r3, [r2, #0]
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2250      	movs	r2, #80	@ 0x50
 8014360:	5a9b      	ldrh	r3, [r3, r2]
 8014362:	b29b      	uxth	r3, r3
 8014364:	001a      	movs	r2, r3
 8014366:	187b      	adds	r3, r7, r1
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	189b      	adds	r3, r3, r2
 801436c:	187a      	adds	r2, r7, r1
 801436e:	6013      	str	r3, [r2, #0]
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	00da      	lsls	r2, r3, #3
 8014376:	187b      	adds	r3, r7, r1
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	18d3      	adds	r3, r2, r3
 801437c:	4a4a      	ldr	r2, [pc, #296]	@ (80144a8 <USB_EPStartXfer+0xe38>)
 801437e:	4694      	mov	ip, r2
 8014380:	4463      	add	r3, ip
 8014382:	21b0      	movs	r1, #176	@ 0xb0
 8014384:	187a      	adds	r2, r7, r1
 8014386:	6013      	str	r3, [r2, #0]
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	691b      	ldr	r3, [r3, #16]
 801438c:	b29a      	uxth	r2, r3
 801438e:	187b      	adds	r3, r7, r1
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	801a      	strh	r2, [r3, #0]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	22a4      	movs	r2, #164	@ 0xa4
 8014398:	18ba      	adds	r2, r7, r2
 801439a:	6013      	str	r3, [r2, #0]
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	785b      	ldrb	r3, [r3, #1]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d000      	beq.n	80143a6 <USB_EPStartXfer+0xd36>
 80143a4:	e082      	b.n	80144ac <USB_EPStartXfer+0xe3c>
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	219c      	movs	r1, #156	@ 0x9c
 80143aa:	187a      	adds	r2, r7, r1
 80143ac:	6013      	str	r3, [r2, #0]
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2250      	movs	r2, #80	@ 0x50
 80143b2:	5a9b      	ldrh	r3, [r3, r2]
 80143b4:	b29b      	uxth	r3, r3
 80143b6:	001a      	movs	r2, r3
 80143b8:	187b      	adds	r3, r7, r1
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	189b      	adds	r3, r3, r2
 80143be:	187a      	adds	r2, r7, r1
 80143c0:	6013      	str	r3, [r2, #0]
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	00da      	lsls	r2, r3, #3
 80143c8:	187b      	adds	r3, r7, r1
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	18d3      	adds	r3, r2, r3
 80143ce:	4a34      	ldr	r2, [pc, #208]	@ (80144a0 <USB_EPStartXfer+0xe30>)
 80143d0:	4694      	mov	ip, r2
 80143d2:	4463      	add	r3, ip
 80143d4:	2198      	movs	r1, #152	@ 0x98
 80143d6:	187a      	adds	r2, r7, r1
 80143d8:	6013      	str	r3, [r2, #0]
 80143da:	187b      	adds	r3, r7, r1
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	881b      	ldrh	r3, [r3, #0]
 80143e0:	b29b      	uxth	r3, r3
 80143e2:	059b      	lsls	r3, r3, #22
 80143e4:	0d9b      	lsrs	r3, r3, #22
 80143e6:	b29a      	uxth	r2, r3
 80143e8:	187b      	adds	r3, r7, r1
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	801a      	strh	r2, [r3, #0]
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	691b      	ldr	r3, [r3, #16]
 80143f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80143f4:	d923      	bls.n	801443e <USB_EPStartXfer+0xdce>
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	095b      	lsrs	r3, r3, #5
 80143fc:	21e0      	movs	r1, #224	@ 0xe0
 80143fe:	187a      	adds	r2, r7, r1
 8014400:	6013      	str	r3, [r2, #0]
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	691b      	ldr	r3, [r3, #16]
 8014406:	221f      	movs	r2, #31
 8014408:	4013      	ands	r3, r2
 801440a:	d104      	bne.n	8014416 <USB_EPStartXfer+0xda6>
 801440c:	187b      	adds	r3, r7, r1
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	3b01      	subs	r3, #1
 8014412:	187a      	adds	r2, r7, r1
 8014414:	6013      	str	r3, [r2, #0]
 8014416:	2198      	movs	r1, #152	@ 0x98
 8014418:	187b      	adds	r3, r7, r1
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	881b      	ldrh	r3, [r3, #0]
 801441e:	b29a      	uxth	r2, r3
 8014420:	23e0      	movs	r3, #224	@ 0xe0
 8014422:	18fb      	adds	r3, r7, r3
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	b29b      	uxth	r3, r3
 8014428:	029b      	lsls	r3, r3, #10
 801442a:	b29b      	uxth	r3, r3
 801442c:	4313      	orrs	r3, r2
 801442e:	b29b      	uxth	r3, r3
 8014430:	4a1c      	ldr	r2, [pc, #112]	@ (80144a4 <USB_EPStartXfer+0xe34>)
 8014432:	4313      	orrs	r3, r2
 8014434:	b29a      	uxth	r2, r3
 8014436:	187b      	adds	r3, r7, r1
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	801a      	strh	r2, [r3, #0]
 801443c:	e057      	b.n	80144ee <USB_EPStartXfer+0xe7e>
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	691b      	ldr	r3, [r3, #16]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d10b      	bne.n	801445e <USB_EPStartXfer+0xdee>
 8014446:	2198      	movs	r1, #152	@ 0x98
 8014448:	187b      	adds	r3, r7, r1
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	881b      	ldrh	r3, [r3, #0]
 801444e:	b29b      	uxth	r3, r3
 8014450:	4a14      	ldr	r2, [pc, #80]	@ (80144a4 <USB_EPStartXfer+0xe34>)
 8014452:	4313      	orrs	r3, r2
 8014454:	b29a      	uxth	r2, r3
 8014456:	187b      	adds	r3, r7, r1
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	801a      	strh	r2, [r3, #0]
 801445c:	e047      	b.n	80144ee <USB_EPStartXfer+0xe7e>
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	691b      	ldr	r3, [r3, #16]
 8014462:	085b      	lsrs	r3, r3, #1
 8014464:	21e0      	movs	r1, #224	@ 0xe0
 8014466:	187a      	adds	r2, r7, r1
 8014468:	6013      	str	r3, [r2, #0]
 801446a:	683b      	ldr	r3, [r7, #0]
 801446c:	691b      	ldr	r3, [r3, #16]
 801446e:	2201      	movs	r2, #1
 8014470:	4013      	ands	r3, r2
 8014472:	d004      	beq.n	801447e <USB_EPStartXfer+0xe0e>
 8014474:	187b      	adds	r3, r7, r1
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	3301      	adds	r3, #1
 801447a:	187a      	adds	r2, r7, r1
 801447c:	6013      	str	r3, [r2, #0]
 801447e:	2198      	movs	r1, #152	@ 0x98
 8014480:	187b      	adds	r3, r7, r1
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	881b      	ldrh	r3, [r3, #0]
 8014486:	b29a      	uxth	r2, r3
 8014488:	23e0      	movs	r3, #224	@ 0xe0
 801448a:	18fb      	adds	r3, r7, r3
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	b29b      	uxth	r3, r3
 8014490:	029b      	lsls	r3, r3, #10
 8014492:	b29b      	uxth	r3, r3
 8014494:	4313      	orrs	r3, r2
 8014496:	b29a      	uxth	r2, r3
 8014498:	187b      	adds	r3, r7, r1
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	801a      	strh	r2, [r3, #0]
 801449e:	e026      	b.n	80144ee <USB_EPStartXfer+0xe7e>
 80144a0:	00000406 	.word	0x00000406
 80144a4:	ffff8000 	.word	0xffff8000
 80144a8:	00000402 	.word	0x00000402
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	785b      	ldrb	r3, [r3, #1]
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	d11c      	bne.n	80144ee <USB_EPStartXfer+0xe7e>
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2250      	movs	r2, #80	@ 0x50
 80144b8:	5a9b      	ldrh	r3, [r3, r2]
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	001a      	movs	r2, r3
 80144be:	21a4      	movs	r1, #164	@ 0xa4
 80144c0:	187b      	adds	r3, r7, r1
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	189b      	adds	r3, r3, r2
 80144c6:	187a      	adds	r2, r7, r1
 80144c8:	6013      	str	r3, [r2, #0]
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	00da      	lsls	r2, r3, #3
 80144d0:	187b      	adds	r3, r7, r1
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	18d3      	adds	r3, r2, r3
 80144d6:	4ad2      	ldr	r2, [pc, #840]	@ (8014820 <USB_EPStartXfer+0x11b0>)
 80144d8:	4694      	mov	ip, r2
 80144da:	4463      	add	r3, ip
 80144dc:	21a0      	movs	r1, #160	@ 0xa0
 80144de:	187a      	adds	r2, r7, r1
 80144e0:	6013      	str	r3, [r2, #0]
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	691b      	ldr	r3, [r3, #16]
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	187b      	adds	r3, r7, r1
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	69db      	ldr	r3, [r3, #28]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d100      	bne.n	80144f8 <USB_EPStartXfer+0xe88>
 80144f6:	e1c2      	b.n	801487e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80144f8:	687a      	ldr	r2, [r7, #4]
 80144fa:	683b      	ldr	r3, [r7, #0]
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	009b      	lsls	r3, r3, #2
 8014500:	18d2      	adds	r2, r2, r3
 8014502:	2196      	movs	r1, #150	@ 0x96
 8014504:	187b      	adds	r3, r7, r1
 8014506:	8812      	ldrh	r2, [r2, #0]
 8014508:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801450a:	187b      	adds	r3, r7, r1
 801450c:	881a      	ldrh	r2, [r3, #0]
 801450e:	2380      	movs	r3, #128	@ 0x80
 8014510:	01db      	lsls	r3, r3, #7
 8014512:	4013      	ands	r3, r2
 8014514:	d004      	beq.n	8014520 <USB_EPStartXfer+0xeb0>
 8014516:	187b      	adds	r3, r7, r1
 8014518:	881b      	ldrh	r3, [r3, #0]
 801451a:	2240      	movs	r2, #64	@ 0x40
 801451c:	4013      	ands	r3, r2
 801451e:	d10d      	bne.n	801453c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014520:	2196      	movs	r1, #150	@ 0x96
 8014522:	187b      	adds	r3, r7, r1
 8014524:	881a      	ldrh	r2, [r3, #0]
 8014526:	2380      	movs	r3, #128	@ 0x80
 8014528:	01db      	lsls	r3, r3, #7
 801452a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801452c:	d000      	beq.n	8014530 <USB_EPStartXfer+0xec0>
 801452e:	e1a6      	b.n	801487e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014530:	187b      	adds	r3, r7, r1
 8014532:	881b      	ldrh	r3, [r3, #0]
 8014534:	2240      	movs	r2, #64	@ 0x40
 8014536:	4013      	ands	r3, r2
 8014538:	d000      	beq.n	801453c <USB_EPStartXfer+0xecc>
 801453a:	e1a0      	b.n	801487e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	009b      	lsls	r3, r3, #2
 8014544:	18d3      	adds	r3, r2, r3
 8014546:	881b      	ldrh	r3, [r3, #0]
 8014548:	b29a      	uxth	r2, r3
 801454a:	2094      	movs	r0, #148	@ 0x94
 801454c:	183b      	adds	r3, r7, r0
 801454e:	49b5      	ldr	r1, [pc, #724]	@ (8014824 <USB_EPStartXfer+0x11b4>)
 8014550:	400a      	ands	r2, r1
 8014552:	801a      	strh	r2, [r3, #0]
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	683b      	ldr	r3, [r7, #0]
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	009b      	lsls	r3, r3, #2
 801455c:	18d3      	adds	r3, r2, r3
 801455e:	183a      	adds	r2, r7, r0
 8014560:	8812      	ldrh	r2, [r2, #0]
 8014562:	49b1      	ldr	r1, [pc, #708]	@ (8014828 <USB_EPStartXfer+0x11b8>)
 8014564:	430a      	orrs	r2, r1
 8014566:	b292      	uxth	r2, r2
 8014568:	801a      	strh	r2, [r3, #0]
 801456a:	e188      	b.n	801487e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	78db      	ldrb	r3, [r3, #3]
 8014570:	2b01      	cmp	r3, #1
 8014572:	d000      	beq.n	8014576 <USB_EPStartXfer+0xf06>
 8014574:	e181      	b.n	801487a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014576:	683b      	ldr	r3, [r7, #0]
 8014578:	699a      	ldr	r2, [r3, #24]
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	691b      	ldr	r3, [r3, #16]
 801457e:	429a      	cmp	r2, r3
 8014580:	d90d      	bls.n	801459e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	691b      	ldr	r3, [r3, #16]
 8014586:	1d7a      	adds	r2, r7, #5
 8014588:	32ff      	adds	r2, #255	@ 0xff
 801458a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	699a      	ldr	r2, [r3, #24]
 8014590:	1d7b      	adds	r3, r7, #5
 8014592:	33ff      	adds	r3, #255	@ 0xff
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	1ad2      	subs	r2, r2, r3
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	619a      	str	r2, [r3, #24]
 801459c:	e007      	b.n	80145ae <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	699b      	ldr	r3, [r3, #24]
 80145a2:	1d7a      	adds	r2, r7, #5
 80145a4:	32ff      	adds	r2, #255	@ 0xff
 80145a6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	2200      	movs	r2, #0
 80145ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80145ae:	683b      	ldr	r3, [r7, #0]
 80145b0:	785b      	ldrb	r3, [r3, #1]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d000      	beq.n	80145b8 <USB_EPStartXfer+0xf48>
 80145b6:	e082      	b.n	80146be <USB_EPStartXfer+0x104e>
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	21cc      	movs	r1, #204	@ 0xcc
 80145bc:	187a      	adds	r2, r7, r1
 80145be:	6013      	str	r3, [r2, #0]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2250      	movs	r2, #80	@ 0x50
 80145c4:	5a9b      	ldrh	r3, [r3, r2]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	001a      	movs	r2, r3
 80145ca:	187b      	adds	r3, r7, r1
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	189b      	adds	r3, r3, r2
 80145d0:	187a      	adds	r2, r7, r1
 80145d2:	6013      	str	r3, [r2, #0]
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	00da      	lsls	r2, r3, #3
 80145da:	187b      	adds	r3, r7, r1
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	18d3      	adds	r3, r2, r3
 80145e0:	4a92      	ldr	r2, [pc, #584]	@ (801482c <USB_EPStartXfer+0x11bc>)
 80145e2:	4694      	mov	ip, r2
 80145e4:	4463      	add	r3, ip
 80145e6:	21c8      	movs	r1, #200	@ 0xc8
 80145e8:	187a      	adds	r2, r7, r1
 80145ea:	6013      	str	r3, [r2, #0]
 80145ec:	187b      	adds	r3, r7, r1
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	881b      	ldrh	r3, [r3, #0]
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	059b      	lsls	r3, r3, #22
 80145f6:	0d9b      	lsrs	r3, r3, #22
 80145f8:	b29a      	uxth	r2, r3
 80145fa:	187b      	adds	r3, r7, r1
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	801a      	strh	r2, [r3, #0]
 8014600:	1d7b      	adds	r3, r7, #5
 8014602:	33ff      	adds	r3, #255	@ 0xff
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	2b3e      	cmp	r3, #62	@ 0x3e
 8014608:	d925      	bls.n	8014656 <USB_EPStartXfer+0xfe6>
 801460a:	1d7b      	adds	r3, r7, #5
 801460c:	33ff      	adds	r3, #255	@ 0xff
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	095b      	lsrs	r3, r3, #5
 8014612:	21dc      	movs	r1, #220	@ 0xdc
 8014614:	187a      	adds	r2, r7, r1
 8014616:	6013      	str	r3, [r2, #0]
 8014618:	1d7b      	adds	r3, r7, #5
 801461a:	33ff      	adds	r3, #255	@ 0xff
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	221f      	movs	r2, #31
 8014620:	4013      	ands	r3, r2
 8014622:	d104      	bne.n	801462e <USB_EPStartXfer+0xfbe>
 8014624:	187b      	adds	r3, r7, r1
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	3b01      	subs	r3, #1
 801462a:	187a      	adds	r2, r7, r1
 801462c:	6013      	str	r3, [r2, #0]
 801462e:	21c8      	movs	r1, #200	@ 0xc8
 8014630:	187b      	adds	r3, r7, r1
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	881b      	ldrh	r3, [r3, #0]
 8014636:	b29a      	uxth	r2, r3
 8014638:	23dc      	movs	r3, #220	@ 0xdc
 801463a:	18fb      	adds	r3, r7, r3
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	b29b      	uxth	r3, r3
 8014640:	029b      	lsls	r3, r3, #10
 8014642:	b29b      	uxth	r3, r3
 8014644:	4313      	orrs	r3, r2
 8014646:	b29b      	uxth	r3, r3
 8014648:	4a79      	ldr	r2, [pc, #484]	@ (8014830 <USB_EPStartXfer+0x11c0>)
 801464a:	4313      	orrs	r3, r2
 801464c:	b29a      	uxth	r2, r3
 801464e:	187b      	adds	r3, r7, r1
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	801a      	strh	r2, [r3, #0]
 8014654:	e058      	b.n	8014708 <USB_EPStartXfer+0x1098>
 8014656:	1d7b      	adds	r3, r7, #5
 8014658:	33ff      	adds	r3, #255	@ 0xff
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d10b      	bne.n	8014678 <USB_EPStartXfer+0x1008>
 8014660:	21c8      	movs	r1, #200	@ 0xc8
 8014662:	187b      	adds	r3, r7, r1
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	881b      	ldrh	r3, [r3, #0]
 8014668:	b29b      	uxth	r3, r3
 801466a:	4a71      	ldr	r2, [pc, #452]	@ (8014830 <USB_EPStartXfer+0x11c0>)
 801466c:	4313      	orrs	r3, r2
 801466e:	b29a      	uxth	r2, r3
 8014670:	187b      	adds	r3, r7, r1
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	801a      	strh	r2, [r3, #0]
 8014676:	e047      	b.n	8014708 <USB_EPStartXfer+0x1098>
 8014678:	1d7b      	adds	r3, r7, #5
 801467a:	33ff      	adds	r3, #255	@ 0xff
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	085b      	lsrs	r3, r3, #1
 8014680:	21dc      	movs	r1, #220	@ 0xdc
 8014682:	187a      	adds	r2, r7, r1
 8014684:	6013      	str	r3, [r2, #0]
 8014686:	1d7b      	adds	r3, r7, #5
 8014688:	33ff      	adds	r3, #255	@ 0xff
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2201      	movs	r2, #1
 801468e:	4013      	ands	r3, r2
 8014690:	d004      	beq.n	801469c <USB_EPStartXfer+0x102c>
 8014692:	187b      	adds	r3, r7, r1
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	3301      	adds	r3, #1
 8014698:	187a      	adds	r2, r7, r1
 801469a:	6013      	str	r3, [r2, #0]
 801469c:	21c8      	movs	r1, #200	@ 0xc8
 801469e:	187b      	adds	r3, r7, r1
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	881b      	ldrh	r3, [r3, #0]
 80146a4:	b29a      	uxth	r2, r3
 80146a6:	23dc      	movs	r3, #220	@ 0xdc
 80146a8:	18fb      	adds	r3, r7, r3
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	029b      	lsls	r3, r3, #10
 80146b0:	b29b      	uxth	r3, r3
 80146b2:	4313      	orrs	r3, r2
 80146b4:	b29a      	uxth	r2, r3
 80146b6:	187b      	adds	r3, r7, r1
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	801a      	strh	r2, [r3, #0]
 80146bc:	e024      	b.n	8014708 <USB_EPStartXfer+0x1098>
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	785b      	ldrb	r3, [r3, #1]
 80146c2:	2b01      	cmp	r3, #1
 80146c4:	d120      	bne.n	8014708 <USB_EPStartXfer+0x1098>
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	21d4      	movs	r1, #212	@ 0xd4
 80146ca:	187a      	adds	r2, r7, r1
 80146cc:	6013      	str	r3, [r2, #0]
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2250      	movs	r2, #80	@ 0x50
 80146d2:	5a9b      	ldrh	r3, [r3, r2]
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	001a      	movs	r2, r3
 80146d8:	187b      	adds	r3, r7, r1
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	189b      	adds	r3, r3, r2
 80146de:	187a      	adds	r2, r7, r1
 80146e0:	6013      	str	r3, [r2, #0]
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	00da      	lsls	r2, r3, #3
 80146e8:	187b      	adds	r3, r7, r1
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	18d3      	adds	r3, r2, r3
 80146ee:	4a4f      	ldr	r2, [pc, #316]	@ (801482c <USB_EPStartXfer+0x11bc>)
 80146f0:	4694      	mov	ip, r2
 80146f2:	4463      	add	r3, ip
 80146f4:	21d0      	movs	r1, #208	@ 0xd0
 80146f6:	187a      	adds	r2, r7, r1
 80146f8:	6013      	str	r3, [r2, #0]
 80146fa:	1d7b      	adds	r3, r7, #5
 80146fc:	33ff      	adds	r3, #255	@ 0xff
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	b29a      	uxth	r2, r3
 8014702:	187b      	adds	r3, r7, r1
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	801a      	strh	r2, [r3, #0]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	22c4      	movs	r2, #196	@ 0xc4
 801470c:	18ba      	adds	r2, r7, r2
 801470e:	6013      	str	r3, [r2, #0]
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	785b      	ldrb	r3, [r3, #1]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d000      	beq.n	801471a <USB_EPStartXfer+0x10aa>
 8014718:	e08c      	b.n	8014834 <USB_EPStartXfer+0x11c4>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	21bc      	movs	r1, #188	@ 0xbc
 801471e:	187a      	adds	r2, r7, r1
 8014720:	6013      	str	r3, [r2, #0]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2250      	movs	r2, #80	@ 0x50
 8014726:	5a9b      	ldrh	r3, [r3, r2]
 8014728:	b29b      	uxth	r3, r3
 801472a:	001a      	movs	r2, r3
 801472c:	187b      	adds	r3, r7, r1
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	189b      	adds	r3, r3, r2
 8014732:	187a      	adds	r2, r7, r1
 8014734:	6013      	str	r3, [r2, #0]
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	00da      	lsls	r2, r3, #3
 801473c:	187b      	adds	r3, r7, r1
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	18d3      	adds	r3, r2, r3
 8014742:	4a37      	ldr	r2, [pc, #220]	@ (8014820 <USB_EPStartXfer+0x11b0>)
 8014744:	4694      	mov	ip, r2
 8014746:	4463      	add	r3, ip
 8014748:	21b8      	movs	r1, #184	@ 0xb8
 801474a:	187a      	adds	r2, r7, r1
 801474c:	6013      	str	r3, [r2, #0]
 801474e:	187b      	adds	r3, r7, r1
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	881b      	ldrh	r3, [r3, #0]
 8014754:	b29b      	uxth	r3, r3
 8014756:	059b      	lsls	r3, r3, #22
 8014758:	0d9b      	lsrs	r3, r3, #22
 801475a:	b29a      	uxth	r2, r3
 801475c:	187b      	adds	r3, r7, r1
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	801a      	strh	r2, [r3, #0]
 8014762:	1d7b      	adds	r3, r7, #5
 8014764:	33ff      	adds	r3, #255	@ 0xff
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	2b3e      	cmp	r3, #62	@ 0x3e
 801476a:	d925      	bls.n	80147b8 <USB_EPStartXfer+0x1148>
 801476c:	1d7b      	adds	r3, r7, #5
 801476e:	33ff      	adds	r3, #255	@ 0xff
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	095b      	lsrs	r3, r3, #5
 8014774:	21d8      	movs	r1, #216	@ 0xd8
 8014776:	187a      	adds	r2, r7, r1
 8014778:	6013      	str	r3, [r2, #0]
 801477a:	1d7b      	adds	r3, r7, #5
 801477c:	33ff      	adds	r3, #255	@ 0xff
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	221f      	movs	r2, #31
 8014782:	4013      	ands	r3, r2
 8014784:	d104      	bne.n	8014790 <USB_EPStartXfer+0x1120>
 8014786:	187b      	adds	r3, r7, r1
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	3b01      	subs	r3, #1
 801478c:	187a      	adds	r2, r7, r1
 801478e:	6013      	str	r3, [r2, #0]
 8014790:	21b8      	movs	r1, #184	@ 0xb8
 8014792:	187b      	adds	r3, r7, r1
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	881b      	ldrh	r3, [r3, #0]
 8014798:	b29a      	uxth	r2, r3
 801479a:	23d8      	movs	r3, #216	@ 0xd8
 801479c:	18fb      	adds	r3, r7, r3
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	029b      	lsls	r3, r3, #10
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	4313      	orrs	r3, r2
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	4a21      	ldr	r2, [pc, #132]	@ (8014830 <USB_EPStartXfer+0x11c0>)
 80147ac:	4313      	orrs	r3, r2
 80147ae:	b29a      	uxth	r2, r3
 80147b0:	187b      	adds	r3, r7, r1
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	801a      	strh	r2, [r3, #0]
 80147b6:	e062      	b.n	801487e <USB_EPStartXfer+0x120e>
 80147b8:	1d7b      	adds	r3, r7, #5
 80147ba:	33ff      	adds	r3, #255	@ 0xff
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d10b      	bne.n	80147da <USB_EPStartXfer+0x116a>
 80147c2:	21b8      	movs	r1, #184	@ 0xb8
 80147c4:	187b      	adds	r3, r7, r1
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	881b      	ldrh	r3, [r3, #0]
 80147ca:	b29b      	uxth	r3, r3
 80147cc:	4a18      	ldr	r2, [pc, #96]	@ (8014830 <USB_EPStartXfer+0x11c0>)
 80147ce:	4313      	orrs	r3, r2
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	187b      	adds	r3, r7, r1
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	801a      	strh	r2, [r3, #0]
 80147d8:	e051      	b.n	801487e <USB_EPStartXfer+0x120e>
 80147da:	1d7b      	adds	r3, r7, #5
 80147dc:	33ff      	adds	r3, #255	@ 0xff
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	085b      	lsrs	r3, r3, #1
 80147e2:	21d8      	movs	r1, #216	@ 0xd8
 80147e4:	187a      	adds	r2, r7, r1
 80147e6:	6013      	str	r3, [r2, #0]
 80147e8:	1d7b      	adds	r3, r7, #5
 80147ea:	33ff      	adds	r3, #255	@ 0xff
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2201      	movs	r2, #1
 80147f0:	4013      	ands	r3, r2
 80147f2:	d004      	beq.n	80147fe <USB_EPStartXfer+0x118e>
 80147f4:	187b      	adds	r3, r7, r1
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	3301      	adds	r3, #1
 80147fa:	187a      	adds	r2, r7, r1
 80147fc:	6013      	str	r3, [r2, #0]
 80147fe:	21b8      	movs	r1, #184	@ 0xb8
 8014800:	187b      	adds	r3, r7, r1
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	881b      	ldrh	r3, [r3, #0]
 8014806:	b29a      	uxth	r2, r3
 8014808:	23d8      	movs	r3, #216	@ 0xd8
 801480a:	18fb      	adds	r3, r7, r3
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	b29b      	uxth	r3, r3
 8014810:	029b      	lsls	r3, r3, #10
 8014812:	b29b      	uxth	r3, r3
 8014814:	4313      	orrs	r3, r2
 8014816:	b29a      	uxth	r2, r3
 8014818:	187b      	adds	r3, r7, r1
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	801a      	strh	r2, [r3, #0]
 801481e:	e02e      	b.n	801487e <USB_EPStartXfer+0x120e>
 8014820:	00000406 	.word	0x00000406
 8014824:	ffff8f8f 	.word	0xffff8f8f
 8014828:	ffff80c0 	.word	0xffff80c0
 801482c:	00000402 	.word	0x00000402
 8014830:	ffff8000 	.word	0xffff8000
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	785b      	ldrb	r3, [r3, #1]
 8014838:	2b01      	cmp	r3, #1
 801483a:	d120      	bne.n	801487e <USB_EPStartXfer+0x120e>
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2250      	movs	r2, #80	@ 0x50
 8014840:	5a9b      	ldrh	r3, [r3, r2]
 8014842:	b29b      	uxth	r3, r3
 8014844:	001a      	movs	r2, r3
 8014846:	21c4      	movs	r1, #196	@ 0xc4
 8014848:	187b      	adds	r3, r7, r1
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	189b      	adds	r3, r3, r2
 801484e:	187a      	adds	r2, r7, r1
 8014850:	6013      	str	r3, [r2, #0]
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	00da      	lsls	r2, r3, #3
 8014858:	187b      	adds	r3, r7, r1
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	18d3      	adds	r3, r2, r3
 801485e:	4a1d      	ldr	r2, [pc, #116]	@ (80148d4 <USB_EPStartXfer+0x1264>)
 8014860:	4694      	mov	ip, r2
 8014862:	4463      	add	r3, ip
 8014864:	21c0      	movs	r1, #192	@ 0xc0
 8014866:	187a      	adds	r2, r7, r1
 8014868:	6013      	str	r3, [r2, #0]
 801486a:	1d7b      	adds	r3, r7, #5
 801486c:	33ff      	adds	r3, #255	@ 0xff
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	b29a      	uxth	r2, r3
 8014872:	187b      	adds	r3, r7, r1
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	801a      	strh	r2, [r3, #0]
 8014878:	e001      	b.n	801487e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801487a:	2301      	movs	r3, #1
 801487c:	e025      	b.n	80148ca <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	18d3      	adds	r3, r2, r3
 8014888:	881b      	ldrh	r3, [r3, #0]
 801488a:	b29a      	uxth	r2, r3
 801488c:	208a      	movs	r0, #138	@ 0x8a
 801488e:	183b      	adds	r3, r7, r0
 8014890:	4911      	ldr	r1, [pc, #68]	@ (80148d8 <USB_EPStartXfer+0x1268>)
 8014892:	400a      	ands	r2, r1
 8014894:	801a      	strh	r2, [r3, #0]
 8014896:	183b      	adds	r3, r7, r0
 8014898:	183a      	adds	r2, r7, r0
 801489a:	8812      	ldrh	r2, [r2, #0]
 801489c:	2180      	movs	r1, #128	@ 0x80
 801489e:	0149      	lsls	r1, r1, #5
 80148a0:	404a      	eors	r2, r1
 80148a2:	801a      	strh	r2, [r3, #0]
 80148a4:	183b      	adds	r3, r7, r0
 80148a6:	183a      	adds	r2, r7, r0
 80148a8:	8812      	ldrh	r2, [r2, #0]
 80148aa:	2180      	movs	r1, #128	@ 0x80
 80148ac:	0189      	lsls	r1, r1, #6
 80148ae:	404a      	eors	r2, r1
 80148b0:	801a      	strh	r2, [r3, #0]
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	009b      	lsls	r3, r3, #2
 80148ba:	18d3      	adds	r3, r2, r3
 80148bc:	183a      	adds	r2, r7, r0
 80148be:	8812      	ldrh	r2, [r2, #0]
 80148c0:	4906      	ldr	r1, [pc, #24]	@ (80148dc <USB_EPStartXfer+0x126c>)
 80148c2:	430a      	orrs	r2, r1
 80148c4:	b292      	uxth	r2, r2
 80148c6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80148c8:	2300      	movs	r3, #0
}
 80148ca:	0018      	movs	r0, r3
 80148cc:	46bd      	mov	sp, r7
 80148ce:	b043      	add	sp, #268	@ 0x10c
 80148d0:	bd90      	pop	{r4, r7, pc}
 80148d2:	46c0      	nop			@ (mov r8, r8)
 80148d4:	00000406 	.word	0x00000406
 80148d8:	ffffbf8f 	.word	0xffffbf8f
 80148dc:	ffff8080 	.word	0xffff8080

080148e0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	785b      	ldrb	r3, [r3, #1]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d01d      	beq.n	801492e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	009b      	lsls	r3, r3, #2
 80148fa:	18d3      	adds	r3, r2, r3
 80148fc:	881b      	ldrh	r3, [r3, #0]
 80148fe:	b29a      	uxth	r2, r3
 8014900:	200c      	movs	r0, #12
 8014902:	183b      	adds	r3, r7, r0
 8014904:	491b      	ldr	r1, [pc, #108]	@ (8014974 <USB_EPSetStall+0x94>)
 8014906:	400a      	ands	r2, r1
 8014908:	801a      	strh	r2, [r3, #0]
 801490a:	183b      	adds	r3, r7, r0
 801490c:	183a      	adds	r2, r7, r0
 801490e:	8812      	ldrh	r2, [r2, #0]
 8014910:	2110      	movs	r1, #16
 8014912:	404a      	eors	r2, r1
 8014914:	801a      	strh	r2, [r3, #0]
 8014916:	687a      	ldr	r2, [r7, #4]
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	009b      	lsls	r3, r3, #2
 801491e:	18d3      	adds	r3, r2, r3
 8014920:	183a      	adds	r2, r7, r0
 8014922:	8812      	ldrh	r2, [r2, #0]
 8014924:	4914      	ldr	r1, [pc, #80]	@ (8014978 <USB_EPSetStall+0x98>)
 8014926:	430a      	orrs	r2, r1
 8014928:	b292      	uxth	r2, r2
 801492a:	801a      	strh	r2, [r3, #0]
 801492c:	e01d      	b.n	801496a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801492e:	687a      	ldr	r2, [r7, #4]
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	781b      	ldrb	r3, [r3, #0]
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	18d3      	adds	r3, r2, r3
 8014938:	881b      	ldrh	r3, [r3, #0]
 801493a:	b29a      	uxth	r2, r3
 801493c:	200e      	movs	r0, #14
 801493e:	183b      	adds	r3, r7, r0
 8014940:	490e      	ldr	r1, [pc, #56]	@ (801497c <USB_EPSetStall+0x9c>)
 8014942:	400a      	ands	r2, r1
 8014944:	801a      	strh	r2, [r3, #0]
 8014946:	183b      	adds	r3, r7, r0
 8014948:	183a      	adds	r2, r7, r0
 801494a:	8812      	ldrh	r2, [r2, #0]
 801494c:	2180      	movs	r1, #128	@ 0x80
 801494e:	0149      	lsls	r1, r1, #5
 8014950:	404a      	eors	r2, r1
 8014952:	801a      	strh	r2, [r3, #0]
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	18d3      	adds	r3, r2, r3
 801495e:	183a      	adds	r2, r7, r0
 8014960:	8812      	ldrh	r2, [r2, #0]
 8014962:	4905      	ldr	r1, [pc, #20]	@ (8014978 <USB_EPSetStall+0x98>)
 8014964:	430a      	orrs	r2, r1
 8014966:	b292      	uxth	r2, r2
 8014968:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801496a:	2300      	movs	r3, #0
}
 801496c:	0018      	movs	r0, r3
 801496e:	46bd      	mov	sp, r7
 8014970:	b004      	add	sp, #16
 8014972:	bd80      	pop	{r7, pc}
 8014974:	ffff8fbf 	.word	0xffff8fbf
 8014978:	ffff8080 	.word	0xffff8080
 801497c:	ffffbf8f 	.word	0xffffbf8f

08014980 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b086      	sub	sp, #24
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
 8014988:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	7b1b      	ldrb	r3, [r3, #12]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d000      	beq.n	8014994 <USB_EPClearStall+0x14>
 8014992:	e095      	b.n	8014ac0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	785b      	ldrb	r3, [r3, #1]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d046      	beq.n	8014a2a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801499c:	687a      	ldr	r2, [r7, #4]
 801499e:	683b      	ldr	r3, [r7, #0]
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	009b      	lsls	r3, r3, #2
 80149a4:	18d2      	adds	r2, r2, r3
 80149a6:	2110      	movs	r1, #16
 80149a8:	187b      	adds	r3, r7, r1
 80149aa:	8812      	ldrh	r2, [r2, #0]
 80149ac:	801a      	strh	r2, [r3, #0]
 80149ae:	187b      	adds	r3, r7, r1
 80149b0:	881b      	ldrh	r3, [r3, #0]
 80149b2:	2240      	movs	r2, #64	@ 0x40
 80149b4:	4013      	ands	r3, r2
 80149b6:	d016      	beq.n	80149e6 <USB_EPClearStall+0x66>
 80149b8:	687a      	ldr	r2, [r7, #4]
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	18d3      	adds	r3, r2, r3
 80149c2:	881b      	ldrh	r3, [r3, #0]
 80149c4:	b29a      	uxth	r2, r3
 80149c6:	200e      	movs	r0, #14
 80149c8:	183b      	adds	r3, r7, r0
 80149ca:	4940      	ldr	r1, [pc, #256]	@ (8014acc <USB_EPClearStall+0x14c>)
 80149cc:	400a      	ands	r2, r1
 80149ce:	801a      	strh	r2, [r3, #0]
 80149d0:	687a      	ldr	r2, [r7, #4]
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	009b      	lsls	r3, r3, #2
 80149d8:	18d3      	adds	r3, r2, r3
 80149da:	183a      	adds	r2, r7, r0
 80149dc:	8812      	ldrh	r2, [r2, #0]
 80149de:	493c      	ldr	r1, [pc, #240]	@ (8014ad0 <USB_EPClearStall+0x150>)
 80149e0:	430a      	orrs	r2, r1
 80149e2:	b292      	uxth	r2, r2
 80149e4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	78db      	ldrb	r3, [r3, #3]
 80149ea:	2b01      	cmp	r3, #1
 80149ec:	d068      	beq.n	8014ac0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80149ee:	687a      	ldr	r2, [r7, #4]
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	009b      	lsls	r3, r3, #2
 80149f6:	18d3      	adds	r3, r2, r3
 80149f8:	881b      	ldrh	r3, [r3, #0]
 80149fa:	b29a      	uxth	r2, r3
 80149fc:	200c      	movs	r0, #12
 80149fe:	183b      	adds	r3, r7, r0
 8014a00:	4934      	ldr	r1, [pc, #208]	@ (8014ad4 <USB_EPClearStall+0x154>)
 8014a02:	400a      	ands	r2, r1
 8014a04:	801a      	strh	r2, [r3, #0]
 8014a06:	183b      	adds	r3, r7, r0
 8014a08:	183a      	adds	r2, r7, r0
 8014a0a:	8812      	ldrh	r2, [r2, #0]
 8014a0c:	2120      	movs	r1, #32
 8014a0e:	404a      	eors	r2, r1
 8014a10:	801a      	strh	r2, [r3, #0]
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	781b      	ldrb	r3, [r3, #0]
 8014a18:	009b      	lsls	r3, r3, #2
 8014a1a:	18d3      	adds	r3, r2, r3
 8014a1c:	183a      	adds	r2, r7, r0
 8014a1e:	8812      	ldrh	r2, [r2, #0]
 8014a20:	492d      	ldr	r1, [pc, #180]	@ (8014ad8 <USB_EPClearStall+0x158>)
 8014a22:	430a      	orrs	r2, r1
 8014a24:	b292      	uxth	r2, r2
 8014a26:	801a      	strh	r2, [r3, #0]
 8014a28:	e04a      	b.n	8014ac0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	18d2      	adds	r2, r2, r3
 8014a34:	2116      	movs	r1, #22
 8014a36:	187b      	adds	r3, r7, r1
 8014a38:	8812      	ldrh	r2, [r2, #0]
 8014a3a:	801a      	strh	r2, [r3, #0]
 8014a3c:	187b      	adds	r3, r7, r1
 8014a3e:	881a      	ldrh	r2, [r3, #0]
 8014a40:	2380      	movs	r3, #128	@ 0x80
 8014a42:	01db      	lsls	r3, r3, #7
 8014a44:	4013      	ands	r3, r2
 8014a46:	d016      	beq.n	8014a76 <USB_EPClearStall+0xf6>
 8014a48:	687a      	ldr	r2, [r7, #4]
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	009b      	lsls	r3, r3, #2
 8014a50:	18d3      	adds	r3, r2, r3
 8014a52:	881b      	ldrh	r3, [r3, #0]
 8014a54:	b29a      	uxth	r2, r3
 8014a56:	2014      	movs	r0, #20
 8014a58:	183b      	adds	r3, r7, r0
 8014a5a:	491c      	ldr	r1, [pc, #112]	@ (8014acc <USB_EPClearStall+0x14c>)
 8014a5c:	400a      	ands	r2, r1
 8014a5e:	801a      	strh	r2, [r3, #0]
 8014a60:	687a      	ldr	r2, [r7, #4]
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	781b      	ldrb	r3, [r3, #0]
 8014a66:	009b      	lsls	r3, r3, #2
 8014a68:	18d3      	adds	r3, r2, r3
 8014a6a:	183a      	adds	r2, r7, r0
 8014a6c:	8812      	ldrh	r2, [r2, #0]
 8014a6e:	491b      	ldr	r1, [pc, #108]	@ (8014adc <USB_EPClearStall+0x15c>)
 8014a70:	430a      	orrs	r2, r1
 8014a72:	b292      	uxth	r2, r2
 8014a74:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014a76:	687a      	ldr	r2, [r7, #4]
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	781b      	ldrb	r3, [r3, #0]
 8014a7c:	009b      	lsls	r3, r3, #2
 8014a7e:	18d3      	adds	r3, r2, r3
 8014a80:	881b      	ldrh	r3, [r3, #0]
 8014a82:	b29a      	uxth	r2, r3
 8014a84:	2012      	movs	r0, #18
 8014a86:	183b      	adds	r3, r7, r0
 8014a88:	4915      	ldr	r1, [pc, #84]	@ (8014ae0 <USB_EPClearStall+0x160>)
 8014a8a:	400a      	ands	r2, r1
 8014a8c:	801a      	strh	r2, [r3, #0]
 8014a8e:	183b      	adds	r3, r7, r0
 8014a90:	183a      	adds	r2, r7, r0
 8014a92:	8812      	ldrh	r2, [r2, #0]
 8014a94:	2180      	movs	r1, #128	@ 0x80
 8014a96:	0149      	lsls	r1, r1, #5
 8014a98:	404a      	eors	r2, r1
 8014a9a:	801a      	strh	r2, [r3, #0]
 8014a9c:	183b      	adds	r3, r7, r0
 8014a9e:	183a      	adds	r2, r7, r0
 8014aa0:	8812      	ldrh	r2, [r2, #0]
 8014aa2:	2180      	movs	r1, #128	@ 0x80
 8014aa4:	0189      	lsls	r1, r1, #6
 8014aa6:	404a      	eors	r2, r1
 8014aa8:	801a      	strh	r2, [r3, #0]
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	18d3      	adds	r3, r2, r3
 8014ab4:	183a      	adds	r2, r7, r0
 8014ab6:	8812      	ldrh	r2, [r2, #0]
 8014ab8:	4907      	ldr	r1, [pc, #28]	@ (8014ad8 <USB_EPClearStall+0x158>)
 8014aba:	430a      	orrs	r2, r1
 8014abc:	b292      	uxth	r2, r2
 8014abe:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8014ac0:	2300      	movs	r3, #0
}
 8014ac2:	0018      	movs	r0, r3
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	b006      	add	sp, #24
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	46c0      	nop			@ (mov r8, r8)
 8014acc:	ffff8f8f 	.word	0xffff8f8f
 8014ad0:	ffff80c0 	.word	0xffff80c0
 8014ad4:	ffff8fbf 	.word	0xffff8fbf
 8014ad8:	ffff8080 	.word	0xffff8080
 8014adc:	ffffc080 	.word	0xffffc080
 8014ae0:	ffffbf8f 	.word	0xffffbf8f

08014ae4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	000a      	movs	r2, r1
 8014aee:	1cfb      	adds	r3, r7, #3
 8014af0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8014af2:	1cfb      	adds	r3, r7, #3
 8014af4:	781b      	ldrb	r3, [r3, #0]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d103      	bne.n	8014b02 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	224c      	movs	r2, #76	@ 0x4c
 8014afe:	2180      	movs	r1, #128	@ 0x80
 8014b00:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8014b02:	2300      	movs	r3, #0
}
 8014b04:	0018      	movs	r0, r3
 8014b06:	46bd      	mov	sp, r7
 8014b08:	b002      	add	sp, #8
 8014b0a:	bd80      	pop	{r7, pc}

08014b0c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2258      	movs	r2, #88	@ 0x58
 8014b18:	5a9b      	ldrh	r3, [r3, r2]
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	4a05      	ldr	r2, [pc, #20]	@ (8014b34 <USB_DevConnect+0x28>)
 8014b1e:	4313      	orrs	r3, r2
 8014b20:	b299      	uxth	r1, r3
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2258      	movs	r2, #88	@ 0x58
 8014b26:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014b28:	2300      	movs	r3, #0
}
 8014b2a:	0018      	movs	r0, r3
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	b002      	add	sp, #8
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	46c0      	nop			@ (mov r8, r8)
 8014b34:	ffff8000 	.word	0xffff8000

08014b38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b084      	sub	sp, #16
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2244      	movs	r2, #68	@ 0x44
 8014b44:	5a9b      	ldrh	r3, [r3, r2]
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
}
 8014b4c:	0018      	movs	r0, r3
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	b004      	add	sp, #16
 8014b52:	bd80      	pop	{r7, pc}

08014b54 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b08a      	sub	sp, #40	@ 0x28
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	60f8      	str	r0, [r7, #12]
 8014b5c:	60b9      	str	r1, [r7, #8]
 8014b5e:	0019      	movs	r1, r3
 8014b60:	1dbb      	adds	r3, r7, #6
 8014b62:	801a      	strh	r2, [r3, #0]
 8014b64:	1d3b      	adds	r3, r7, #4
 8014b66:	1c0a      	adds	r2, r1, #0
 8014b68:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8014b6a:	1d3b      	adds	r3, r7, #4
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	3301      	adds	r3, #1
 8014b70:	085b      	lsrs	r3, r3, #1
 8014b72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014b7c:	1dbb      	adds	r3, r7, #6
 8014b7e:	881a      	ldrh	r2, [r3, #0]
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	18d3      	adds	r3, r2, r3
 8014b84:	2280      	movs	r2, #128	@ 0x80
 8014b86:	00d2      	lsls	r2, r2, #3
 8014b88:	4694      	mov	ip, r2
 8014b8a:	4463      	add	r3, ip
 8014b8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b92:	e020      	b.n	8014bd6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	781a      	ldrb	r2, [r3, #0]
 8014b98:	2112      	movs	r1, #18
 8014b9a:	187b      	adds	r3, r7, r1
 8014b9c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8014b9e:	69fb      	ldr	r3, [r7, #28]
 8014ba0:	3301      	adds	r3, #1
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	021b      	lsls	r3, r3, #8
 8014ba6:	b21a      	sxth	r2, r3
 8014ba8:	187b      	adds	r3, r7, r1
 8014baa:	2000      	movs	r0, #0
 8014bac:	5e1b      	ldrsh	r3, [r3, r0]
 8014bae:	4313      	orrs	r3, r2
 8014bb0:	b21a      	sxth	r2, r3
 8014bb2:	187b      	adds	r3, r7, r1
 8014bb4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8014bb6:	6a3b      	ldr	r3, [r7, #32]
 8014bb8:	187a      	adds	r2, r7, r1
 8014bba:	8812      	ldrh	r2, [r2, #0]
 8014bbc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8014bbe:	6a3b      	ldr	r3, [r7, #32]
 8014bc0:	3302      	adds	r3, #2
 8014bc2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8014bc4:	69fb      	ldr	r3, [r7, #28]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8014bca:	69fb      	ldr	r3, [r7, #28]
 8014bcc:	3301      	adds	r3, #1
 8014bce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bd2:	3b01      	subs	r3, #1
 8014bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d1db      	bne.n	8014b94 <USB_WritePMA+0x40>
  }
}
 8014bdc:	46c0      	nop			@ (mov r8, r8)
 8014bde:	46c0      	nop			@ (mov r8, r8)
 8014be0:	46bd      	mov	sp, r7
 8014be2:	b00a      	add	sp, #40	@ 0x28
 8014be4:	bd80      	pop	{r7, pc}

08014be6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014be6:	b580      	push	{r7, lr}
 8014be8:	b08a      	sub	sp, #40	@ 0x28
 8014bea:	af00      	add	r7, sp, #0
 8014bec:	60f8      	str	r0, [r7, #12]
 8014bee:	60b9      	str	r1, [r7, #8]
 8014bf0:	0019      	movs	r1, r3
 8014bf2:	1dbb      	adds	r3, r7, #6
 8014bf4:	801a      	strh	r2, [r3, #0]
 8014bf6:	1d3b      	adds	r3, r7, #4
 8014bf8:	1c0a      	adds	r2, r1, #0
 8014bfa:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8014bfc:	1d3b      	adds	r3, r7, #4
 8014bfe:	881b      	ldrh	r3, [r3, #0]
 8014c00:	085b      	lsrs	r3, r3, #1
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014c0e:	1dbb      	adds	r3, r7, #6
 8014c10:	881a      	ldrh	r2, [r3, #0]
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	18d3      	adds	r3, r2, r3
 8014c16:	2280      	movs	r2, #128	@ 0x80
 8014c18:	00d2      	lsls	r2, r2, #3
 8014c1a:	4694      	mov	ip, r2
 8014c1c:	4463      	add	r3, ip
 8014c1e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014c20:	69bb      	ldr	r3, [r7, #24]
 8014c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c24:	e018      	b.n	8014c58 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8014c26:	6a3b      	ldr	r3, [r7, #32]
 8014c28:	881b      	ldrh	r3, [r3, #0]
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8014c2e:	6a3b      	ldr	r3, [r7, #32]
 8014c30:	3302      	adds	r3, #2
 8014c32:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014c34:	693b      	ldr	r3, [r7, #16]
 8014c36:	b2da      	uxtb	r2, r3
 8014c38:	69fb      	ldr	r3, [r7, #28]
 8014c3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014c3c:	69fb      	ldr	r3, [r7, #28]
 8014c3e:	3301      	adds	r3, #1
 8014c40:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8014c42:	693b      	ldr	r3, [r7, #16]
 8014c44:	0a1b      	lsrs	r3, r3, #8
 8014c46:	b2da      	uxtb	r2, r3
 8014c48:	69fb      	ldr	r3, [r7, #28]
 8014c4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014c4c:	69fb      	ldr	r3, [r7, #28]
 8014c4e:	3301      	adds	r3, #1
 8014c50:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c54:	3b01      	subs	r3, #1
 8014c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d1e3      	bne.n	8014c26 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8014c5e:	1d3b      	adds	r3, r7, #4
 8014c60:	881b      	ldrh	r3, [r3, #0]
 8014c62:	2201      	movs	r2, #1
 8014c64:	4013      	ands	r3, r2
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d007      	beq.n	8014c7c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8014c6c:	6a3b      	ldr	r3, [r7, #32]
 8014c6e:	881b      	ldrh	r3, [r3, #0]
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	b2da      	uxtb	r2, r3
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	701a      	strb	r2, [r3, #0]
  }
}
 8014c7c:	46c0      	nop			@ (mov r8, r8)
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	b00a      	add	sp, #40	@ 0x28
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b084      	sub	sp, #16
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	000a      	movs	r2, r1
 8014c8e:	1cfb      	adds	r3, r7, #3
 8014c90:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014c92:	230f      	movs	r3, #15
 8014c94:	18fb      	adds	r3, r7, r3
 8014c96:	2200      	movs	r2, #0
 8014c98:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	7c1b      	ldrb	r3, [r3, #16]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d116      	bne.n	8014cd0 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014ca2:	2380      	movs	r3, #128	@ 0x80
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	2202      	movs	r2, #2
 8014caa:	2181      	movs	r1, #129	@ 0x81
 8014cac:	f002 f8eb 	bl	8016e86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014cb6:	2380      	movs	r3, #128	@ 0x80
 8014cb8:	009b      	lsls	r3, r3, #2
 8014cba:	6878      	ldr	r0, [r7, #4]
 8014cbc:	2202      	movs	r2, #2
 8014cbe:	2101      	movs	r1, #1
 8014cc0:	f002 f8e1 	bl	8016e86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014cc4:	687a      	ldr	r2, [r7, #4]
 8014cc6:	23b6      	movs	r3, #182	@ 0xb6
 8014cc8:	005b      	lsls	r3, r3, #1
 8014cca:	2101      	movs	r1, #1
 8014ccc:	50d1      	str	r1, [r2, r3]
 8014cce:	e013      	b.n	8014cf8 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	2340      	movs	r3, #64	@ 0x40
 8014cd4:	2202      	movs	r2, #2
 8014cd6:	2181      	movs	r1, #129	@ 0x81
 8014cd8:	f002 f8d5 	bl	8016e86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2201      	movs	r2, #1
 8014ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	2340      	movs	r3, #64	@ 0x40
 8014ce6:	2202      	movs	r2, #2
 8014ce8:	2101      	movs	r1, #1
 8014cea:	f002 f8cc 	bl	8016e86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	23b6      	movs	r3, #182	@ 0xb6
 8014cf2:	005b      	lsls	r3, r3, #1
 8014cf4:	2101      	movs	r1, #1
 8014cf6:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	2308      	movs	r3, #8
 8014cfc:	2203      	movs	r2, #3
 8014cfe:	2182      	movs	r1, #130	@ 0x82
 8014d00:	f002 f8c1 	bl	8016e86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2201      	movs	r2, #1
 8014d08:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014d0a:	2387      	movs	r3, #135	@ 0x87
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	0018      	movs	r0, r3
 8014d10:	f002 fa52 	bl	80171b8 <USBD_static_malloc>
 8014d14:	0001      	movs	r1, r0
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	23ae      	movs	r3, #174	@ 0xae
 8014d1a:	009b      	lsls	r3, r3, #2
 8014d1c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	23ae      	movs	r3, #174	@ 0xae
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	58d3      	ldr	r3, [r2, r3]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d104      	bne.n	8014d34 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8014d2a:	230f      	movs	r3, #15
 8014d2c:	18fb      	adds	r3, r7, r3
 8014d2e:	2201      	movs	r2, #1
 8014d30:	701a      	strb	r2, [r3, #0]
 8014d32:	e02c      	b.n	8014d8e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	23ae      	movs	r3, #174	@ 0xae
 8014d38:	009b      	lsls	r3, r3, #2
 8014d3a:	58d3      	ldr	r3, [r2, r3]
 8014d3c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014d3e:	687a      	ldr	r2, [r7, #4]
 8014d40:	23af      	movs	r3, #175	@ 0xaf
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	58d3      	ldr	r3, [r2, r3]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8014d4a:	68ba      	ldr	r2, [r7, #8]
 8014d4c:	2385      	movs	r3, #133	@ 0x85
 8014d4e:	009b      	lsls	r3, r3, #2
 8014d50:	2100      	movs	r1, #0
 8014d52:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8014d54:	68ba      	ldr	r2, [r7, #8]
 8014d56:	2386      	movs	r3, #134	@ 0x86
 8014d58:	009b      	lsls	r3, r3, #2
 8014d5a:	2100      	movs	r1, #0
 8014d5c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	7c1b      	ldrb	r3, [r3, #16]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d10a      	bne.n	8014d7c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014d66:	68ba      	ldr	r2, [r7, #8]
 8014d68:	2381      	movs	r3, #129	@ 0x81
 8014d6a:	009b      	lsls	r3, r3, #2
 8014d6c:	58d2      	ldr	r2, [r2, r3]
 8014d6e:	2380      	movs	r3, #128	@ 0x80
 8014d70:	009b      	lsls	r3, r3, #2
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	2101      	movs	r1, #1
 8014d76:	f002 f9d1 	bl	801711c <USBD_LL_PrepareReceive>
 8014d7a:	e008      	b.n	8014d8e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014d7c:	68ba      	ldr	r2, [r7, #8]
 8014d7e:	2381      	movs	r3, #129	@ 0x81
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	58d2      	ldr	r2, [r2, r3]
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	2340      	movs	r3, #64	@ 0x40
 8014d88:	2101      	movs	r1, #1
 8014d8a:	f002 f9c7 	bl	801711c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8014d8e:	230f      	movs	r3, #15
 8014d90:	18fb      	adds	r3, r7, r3
 8014d92:	781b      	ldrb	r3, [r3, #0]
}
 8014d94:	0018      	movs	r0, r3
 8014d96:	46bd      	mov	sp, r7
 8014d98:	b004      	add	sp, #16
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b084      	sub	sp, #16
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	000a      	movs	r2, r1
 8014da6:	1cfb      	adds	r3, r7, #3
 8014da8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014daa:	230f      	movs	r3, #15
 8014dac:	18fb      	adds	r3, r7, r3
 8014dae:	2200      	movs	r2, #0
 8014db0:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2181      	movs	r1, #129	@ 0x81
 8014db6:	0018      	movs	r0, r3
 8014db8:	f002 f89c 	bl	8016ef4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2101      	movs	r1, #1
 8014dc6:	0018      	movs	r0, r3
 8014dc8:	f002 f894 	bl	8016ef4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	23b6      	movs	r3, #182	@ 0xb6
 8014dd0:	005b      	lsls	r3, r3, #1
 8014dd2:	2100      	movs	r1, #0
 8014dd4:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2182      	movs	r1, #130	@ 0x82
 8014dda:	0018      	movs	r0, r3
 8014ddc:	f002 f88a 	bl	8016ef4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	2200      	movs	r2, #0
 8014de4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014de6:	687a      	ldr	r2, [r7, #4]
 8014de8:	23ae      	movs	r3, #174	@ 0xae
 8014dea:	009b      	lsls	r3, r3, #2
 8014dec:	58d3      	ldr	r3, [r2, r3]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d011      	beq.n	8014e16 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	23af      	movs	r3, #175	@ 0xaf
 8014df6:	009b      	lsls	r3, r3, #2
 8014df8:	58d3      	ldr	r3, [r2, r3]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	23ae      	movs	r3, #174	@ 0xae
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	58d3      	ldr	r3, [r2, r3]
 8014e06:	0018      	movs	r0, r3
 8014e08:	f002 f9e2 	bl	80171d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	23ae      	movs	r3, #174	@ 0xae
 8014e10:	009b      	lsls	r3, r3, #2
 8014e12:	2100      	movs	r1, #0
 8014e14:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8014e16:	230f      	movs	r3, #15
 8014e18:	18fb      	adds	r3, r7, r3
 8014e1a:	781b      	ldrb	r3, [r3, #0]
}
 8014e1c:	0018      	movs	r0, r3
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	b004      	add	sp, #16
 8014e22:	bd80      	pop	{r7, pc}

08014e24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b086      	sub	sp, #24
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014e2e:	687a      	ldr	r2, [r7, #4]
 8014e30:	23ae      	movs	r3, #174	@ 0xae
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	58d3      	ldr	r3, [r2, r3]
 8014e36:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8014e38:	230f      	movs	r3, #15
 8014e3a:	18fb      	adds	r3, r7, r3
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8014e40:	230c      	movs	r3, #12
 8014e42:	18fb      	adds	r3, r7, r3
 8014e44:	2200      	movs	r2, #0
 8014e46:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8014e48:	2317      	movs	r3, #23
 8014e4a:	18fb      	adds	r3, r7, r3
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	001a      	movs	r2, r3
 8014e56:	2360      	movs	r3, #96	@ 0x60
 8014e58:	4013      	ands	r3, r2
 8014e5a:	d03d      	beq.n	8014ed8 <USBD_CDC_Setup+0xb4>
 8014e5c:	2b20      	cmp	r3, #32
 8014e5e:	d000      	beq.n	8014e62 <USBD_CDC_Setup+0x3e>
 8014e60:	e094      	b.n	8014f8c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	88db      	ldrh	r3, [r3, #6]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d02b      	beq.n	8014ec2 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	781b      	ldrb	r3, [r3, #0]
 8014e6e:	b25b      	sxtb	r3, r3
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	da12      	bge.n	8014e9a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014e74:	687a      	ldr	r2, [r7, #4]
 8014e76:	23af      	movs	r3, #175	@ 0xaf
 8014e78:	009b      	lsls	r3, r3, #2
 8014e7a:	58d3      	ldr	r3, [r2, r3]
 8014e7c:	689b      	ldr	r3, [r3, #8]
 8014e7e:	683a      	ldr	r2, [r7, #0]
 8014e80:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8014e82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014e84:	683a      	ldr	r2, [r7, #0]
 8014e86:	88d2      	ldrh	r2, [r2, #6]
 8014e88:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014e8a:	6939      	ldr	r1, [r7, #16]
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	88da      	ldrh	r2, [r3, #6]
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	0018      	movs	r0, r3
 8014e94:	f001 fbaf 	bl	80165f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8014e98:	e083      	b.n	8014fa2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	7859      	ldrb	r1, [r3, #1]
 8014e9e:	693a      	ldr	r2, [r7, #16]
 8014ea0:	2380      	movs	r3, #128	@ 0x80
 8014ea2:	009b      	lsls	r3, r3, #2
 8014ea4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	88db      	ldrh	r3, [r3, #6]
 8014eaa:	b2d9      	uxtb	r1, r3
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	4a40      	ldr	r2, [pc, #256]	@ (8014fb0 <USBD_CDC_Setup+0x18c>)
 8014eb0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014eb2:	6939      	ldr	r1, [r7, #16]
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	88da      	ldrh	r2, [r3, #6]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	0018      	movs	r0, r3
 8014ebc:	f001 fbce 	bl	801665c <USBD_CtlPrepareRx>
      break;
 8014ec0:	e06f      	b.n	8014fa2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014ec2:	687a      	ldr	r2, [r7, #4]
 8014ec4:	23af      	movs	r3, #175	@ 0xaf
 8014ec6:	009b      	lsls	r3, r3, #2
 8014ec8:	58d3      	ldr	r3, [r2, r3]
 8014eca:	689b      	ldr	r3, [r3, #8]
 8014ecc:	683a      	ldr	r2, [r7, #0]
 8014ece:	7850      	ldrb	r0, [r2, #1]
 8014ed0:	6839      	ldr	r1, [r7, #0]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	4798      	blx	r3
      break;
 8014ed6:	e064      	b.n	8014fa2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	785b      	ldrb	r3, [r3, #1]
 8014edc:	2b0b      	cmp	r3, #11
 8014ede:	d037      	beq.n	8014f50 <USBD_CDC_Setup+0x12c>
 8014ee0:	dc47      	bgt.n	8014f72 <USBD_CDC_Setup+0x14e>
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d002      	beq.n	8014eec <USBD_CDC_Setup+0xc8>
 8014ee6:	2b0a      	cmp	r3, #10
 8014ee8:	d019      	beq.n	8014f1e <USBD_CDC_Setup+0xfa>
 8014eea:	e042      	b.n	8014f72 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014eec:	687a      	ldr	r2, [r7, #4]
 8014eee:	23a7      	movs	r3, #167	@ 0xa7
 8014ef0:	009b      	lsls	r3, r3, #2
 8014ef2:	5cd3      	ldrb	r3, [r2, r3]
 8014ef4:	2b03      	cmp	r3, #3
 8014ef6:	d107      	bne.n	8014f08 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8014ef8:	230c      	movs	r3, #12
 8014efa:	18f9      	adds	r1, r7, r3
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2202      	movs	r2, #2
 8014f00:	0018      	movs	r0, r3
 8014f02:	f001 fb78 	bl	80165f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f06:	e040      	b.n	8014f8a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8014f08:	683a      	ldr	r2, [r7, #0]
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	0011      	movs	r1, r2
 8014f0e:	0018      	movs	r0, r3
 8014f10:	f001 faf3 	bl	80164fa <USBD_CtlError>
            ret = USBD_FAIL;
 8014f14:	2317      	movs	r3, #23
 8014f16:	18fb      	adds	r3, r7, r3
 8014f18:	2202      	movs	r2, #2
 8014f1a:	701a      	strb	r2, [r3, #0]
          break;
 8014f1c:	e035      	b.n	8014f8a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f1e:	687a      	ldr	r2, [r7, #4]
 8014f20:	23a7      	movs	r3, #167	@ 0xa7
 8014f22:	009b      	lsls	r3, r3, #2
 8014f24:	5cd3      	ldrb	r3, [r2, r3]
 8014f26:	2b03      	cmp	r3, #3
 8014f28:	d107      	bne.n	8014f3a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8014f2a:	230f      	movs	r3, #15
 8014f2c:	18f9      	adds	r1, r7, r3
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2201      	movs	r2, #1
 8014f32:	0018      	movs	r0, r3
 8014f34:	f001 fb5f 	bl	80165f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f38:	e027      	b.n	8014f8a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8014f3a:	683a      	ldr	r2, [r7, #0]
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	0011      	movs	r1, r2
 8014f40:	0018      	movs	r0, r3
 8014f42:	f001 fada 	bl	80164fa <USBD_CtlError>
            ret = USBD_FAIL;
 8014f46:	2317      	movs	r3, #23
 8014f48:	18fb      	adds	r3, r7, r3
 8014f4a:	2202      	movs	r2, #2
 8014f4c:	701a      	strb	r2, [r3, #0]
          break;
 8014f4e:	e01c      	b.n	8014f8a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014f50:	687a      	ldr	r2, [r7, #4]
 8014f52:	23a7      	movs	r3, #167	@ 0xa7
 8014f54:	009b      	lsls	r3, r3, #2
 8014f56:	5cd3      	ldrb	r3, [r2, r3]
 8014f58:	2b03      	cmp	r3, #3
 8014f5a:	d015      	beq.n	8014f88 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8014f5c:	683a      	ldr	r2, [r7, #0]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	0011      	movs	r1, r2
 8014f62:	0018      	movs	r0, r3
 8014f64:	f001 fac9 	bl	80164fa <USBD_CtlError>
            ret = USBD_FAIL;
 8014f68:	2317      	movs	r3, #23
 8014f6a:	18fb      	adds	r3, r7, r3
 8014f6c:	2202      	movs	r2, #2
 8014f6e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8014f70:	e00a      	b.n	8014f88 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8014f72:	683a      	ldr	r2, [r7, #0]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	0011      	movs	r1, r2
 8014f78:	0018      	movs	r0, r3
 8014f7a:	f001 fabe 	bl	80164fa <USBD_CtlError>
          ret = USBD_FAIL;
 8014f7e:	2317      	movs	r3, #23
 8014f80:	18fb      	adds	r3, r7, r3
 8014f82:	2202      	movs	r2, #2
 8014f84:	701a      	strb	r2, [r3, #0]
          break;
 8014f86:	e000      	b.n	8014f8a <USBD_CDC_Setup+0x166>
          break;
 8014f88:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014f8a:	e00a      	b.n	8014fa2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8014f8c:	683a      	ldr	r2, [r7, #0]
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	0011      	movs	r1, r2
 8014f92:	0018      	movs	r0, r3
 8014f94:	f001 fab1 	bl	80164fa <USBD_CtlError>
      ret = USBD_FAIL;
 8014f98:	2317      	movs	r3, #23
 8014f9a:	18fb      	adds	r3, r7, r3
 8014f9c:	2202      	movs	r2, #2
 8014f9e:	701a      	strb	r2, [r3, #0]
      break;
 8014fa0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014fa2:	2317      	movs	r3, #23
 8014fa4:	18fb      	adds	r3, r7, r3
 8014fa6:	781b      	ldrb	r3, [r3, #0]
}
 8014fa8:	0018      	movs	r0, r3
 8014faa:	46bd      	mov	sp, r7
 8014fac:	b006      	add	sp, #24
 8014fae:	bd80      	pop	{r7, pc}
 8014fb0:	00000201 	.word	0x00000201

08014fb4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
 8014fbc:	000a      	movs	r2, r1
 8014fbe:	1cfb      	adds	r3, r7, #3
 8014fc0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	23ae      	movs	r3, #174	@ 0xae
 8014fc6:	009b      	lsls	r3, r3, #2
 8014fc8:	58d3      	ldr	r3, [r2, r3]
 8014fca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	23b0      	movs	r3, #176	@ 0xb0
 8014fd0:	009b      	lsls	r3, r3, #2
 8014fd2:	58d3      	ldr	r3, [r2, r3]
 8014fd4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8014fd6:	687a      	ldr	r2, [r7, #4]
 8014fd8:	23ae      	movs	r3, #174	@ 0xae
 8014fda:	009b      	lsls	r3, r3, #2
 8014fdc:	58d3      	ldr	r3, [r2, r3]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d03e      	beq.n	8015060 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014fe2:	1cfb      	adds	r3, r7, #3
 8014fe4:	781a      	ldrb	r2, [r3, #0]
 8014fe6:	6879      	ldr	r1, [r7, #4]
 8014fe8:	0013      	movs	r3, r2
 8014fea:	009b      	lsls	r3, r3, #2
 8014fec:	189b      	adds	r3, r3, r2
 8014fee:	009b      	lsls	r3, r3, #2
 8014ff0:	18cb      	adds	r3, r1, r3
 8014ff2:	331c      	adds	r3, #28
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d02b      	beq.n	8015052 <USBD_CDC_DataIn+0x9e>
 8014ffa:	1cfb      	adds	r3, r7, #3
 8014ffc:	781a      	ldrb	r2, [r3, #0]
 8014ffe:	6879      	ldr	r1, [r7, #4]
 8015000:	0013      	movs	r3, r2
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	189b      	adds	r3, r3, r2
 8015006:	009b      	lsls	r3, r3, #2
 8015008:	18cb      	adds	r3, r1, r3
 801500a:	331c      	adds	r3, #28
 801500c:	6818      	ldr	r0, [r3, #0]
 801500e:	1cfb      	adds	r3, r7, #3
 8015010:	781a      	ldrb	r2, [r3, #0]
 8015012:	68b9      	ldr	r1, [r7, #8]
 8015014:	0013      	movs	r3, r2
 8015016:	009b      	lsls	r3, r3, #2
 8015018:	189b      	adds	r3, r3, r2
 801501a:	00db      	lsls	r3, r3, #3
 801501c:	18cb      	adds	r3, r1, r3
 801501e:	3338      	adds	r3, #56	@ 0x38
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	0019      	movs	r1, r3
 8015024:	f7eb f912 	bl	800024c <__aeabi_uidivmod>
 8015028:	1e0b      	subs	r3, r1, #0
 801502a:	d112      	bne.n	8015052 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801502c:	1cfb      	adds	r3, r7, #3
 801502e:	781a      	ldrb	r2, [r3, #0]
 8015030:	6879      	ldr	r1, [r7, #4]
 8015032:	0013      	movs	r3, r2
 8015034:	009b      	lsls	r3, r3, #2
 8015036:	189b      	adds	r3, r3, r2
 8015038:	009b      	lsls	r3, r3, #2
 801503a:	18cb      	adds	r3, r1, r3
 801503c:	331c      	adds	r3, #28
 801503e:	2200      	movs	r2, #0
 8015040:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015042:	1cfb      	adds	r3, r7, #3
 8015044:	7819      	ldrb	r1, [r3, #0]
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	2300      	movs	r3, #0
 801504a:	2200      	movs	r2, #0
 801504c:	f002 f82f 	bl	80170ae <USBD_LL_Transmit>
 8015050:	e004      	b.n	801505c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8015052:	68fa      	ldr	r2, [r7, #12]
 8015054:	2385      	movs	r3, #133	@ 0x85
 8015056:	009b      	lsls	r3, r3, #2
 8015058:	2100      	movs	r1, #0
 801505a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801505c:	2300      	movs	r3, #0
 801505e:	e000      	b.n	8015062 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8015060:	2302      	movs	r3, #2
  }
}
 8015062:	0018      	movs	r0, r3
 8015064:	46bd      	mov	sp, r7
 8015066:	b004      	add	sp, #16
 8015068:	bd80      	pop	{r7, pc}

0801506a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801506a:	b580      	push	{r7, lr}
 801506c:	b084      	sub	sp, #16
 801506e:	af00      	add	r7, sp, #0
 8015070:	6078      	str	r0, [r7, #4]
 8015072:	000a      	movs	r2, r1
 8015074:	1cfb      	adds	r3, r7, #3
 8015076:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015078:	687a      	ldr	r2, [r7, #4]
 801507a:	23ae      	movs	r3, #174	@ 0xae
 801507c:	009b      	lsls	r3, r3, #2
 801507e:	58d3      	ldr	r3, [r2, r3]
 8015080:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015082:	1cfb      	adds	r3, r7, #3
 8015084:	781a      	ldrb	r2, [r3, #0]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	0011      	movs	r1, r2
 801508a:	0018      	movs	r0, r3
 801508c:	f002 f87d 	bl	801718a <USBD_LL_GetRxDataSize>
 8015090:	0001      	movs	r1, r0
 8015092:	68fa      	ldr	r2, [r7, #12]
 8015094:	2383      	movs	r3, #131	@ 0x83
 8015096:	009b      	lsls	r3, r3, #2
 8015098:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801509a:	687a      	ldr	r2, [r7, #4]
 801509c:	23ae      	movs	r3, #174	@ 0xae
 801509e:	009b      	lsls	r3, r3, #2
 80150a0:	58d3      	ldr	r3, [r2, r3]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d011      	beq.n	80150ca <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80150a6:	687a      	ldr	r2, [r7, #4]
 80150a8:	23af      	movs	r3, #175	@ 0xaf
 80150aa:	009b      	lsls	r3, r3, #2
 80150ac:	58d3      	ldr	r3, [r2, r3]
 80150ae:	68da      	ldr	r2, [r3, #12]
 80150b0:	68f9      	ldr	r1, [r7, #12]
 80150b2:	2381      	movs	r3, #129	@ 0x81
 80150b4:	009b      	lsls	r3, r3, #2
 80150b6:	58c8      	ldr	r0, [r1, r3]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	2183      	movs	r1, #131	@ 0x83
 80150bc:	0089      	lsls	r1, r1, #2
 80150be:	468c      	mov	ip, r1
 80150c0:	4463      	add	r3, ip
 80150c2:	0019      	movs	r1, r3
 80150c4:	4790      	blx	r2

    return USBD_OK;
 80150c6:	2300      	movs	r3, #0
 80150c8:	e000      	b.n	80150cc <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80150ca:	2302      	movs	r3, #2
  }
}
 80150cc:	0018      	movs	r0, r3
 80150ce:	46bd      	mov	sp, r7
 80150d0:	b004      	add	sp, #16
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80150d4:	b590      	push	{r4, r7, lr}
 80150d6:	b085      	sub	sp, #20
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	23ae      	movs	r3, #174	@ 0xae
 80150e0:	009b      	lsls	r3, r3, #2
 80150e2:	58d3      	ldr	r3, [r2, r3]
 80150e4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80150e6:	687a      	ldr	r2, [r7, #4]
 80150e8:	23af      	movs	r3, #175	@ 0xaf
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	58d3      	ldr	r3, [r2, r3]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d018      	beq.n	8015124 <USBD_CDC_EP0_RxReady+0x50>
 80150f2:	68fa      	ldr	r2, [r7, #12]
 80150f4:	2380      	movs	r3, #128	@ 0x80
 80150f6:	009b      	lsls	r3, r3, #2
 80150f8:	5cd3      	ldrb	r3, [r2, r3]
 80150fa:	2bff      	cmp	r3, #255	@ 0xff
 80150fc:	d012      	beq.n	8015124 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80150fe:	687a      	ldr	r2, [r7, #4]
 8015100:	23af      	movs	r3, #175	@ 0xaf
 8015102:	009b      	lsls	r3, r3, #2
 8015104:	58d3      	ldr	r3, [r2, r3]
 8015106:	689b      	ldr	r3, [r3, #8]
 8015108:	68f9      	ldr	r1, [r7, #12]
 801510a:	2280      	movs	r2, #128	@ 0x80
 801510c:	0092      	lsls	r2, r2, #2
 801510e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8015110:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8015112:	68fa      	ldr	r2, [r7, #12]
 8015114:	4c06      	ldr	r4, [pc, #24]	@ (8015130 <USBD_CDC_EP0_RxReady+0x5c>)
 8015116:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015118:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801511a:	68fa      	ldr	r2, [r7, #12]
 801511c:	2380      	movs	r3, #128	@ 0x80
 801511e:	009b      	lsls	r3, r3, #2
 8015120:	21ff      	movs	r1, #255	@ 0xff
 8015122:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8015124:	2300      	movs	r3, #0
}
 8015126:	0018      	movs	r0, r3
 8015128:	46bd      	mov	sp, r7
 801512a:	b005      	add	sp, #20
 801512c:	bd90      	pop	{r4, r7, pc}
 801512e:	46c0      	nop			@ (mov r8, r8)
 8015130:	00000201 	.word	0x00000201

08015134 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2243      	movs	r2, #67	@ 0x43
 8015140:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8015142:	4b02      	ldr	r3, [pc, #8]	@ (801514c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8015144:	0018      	movs	r0, r3
 8015146:	46bd      	mov	sp, r7
 8015148:	b002      	add	sp, #8
 801514a:	bd80      	pop	{r7, pc}
 801514c:	20000138 	.word	0x20000138

08015150 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b082      	sub	sp, #8
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2243      	movs	r2, #67	@ 0x43
 801515c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801515e:	4b02      	ldr	r3, [pc, #8]	@ (8015168 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8015160:	0018      	movs	r0, r3
 8015162:	46bd      	mov	sp, r7
 8015164:	b002      	add	sp, #8
 8015166:	bd80      	pop	{r7, pc}
 8015168:	200000f4 	.word	0x200000f4

0801516c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2243      	movs	r2, #67	@ 0x43
 8015178:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801517a:	4b02      	ldr	r3, [pc, #8]	@ (8015184 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801517c:	0018      	movs	r0, r3
 801517e:	46bd      	mov	sp, r7
 8015180:	b002      	add	sp, #8
 8015182:	bd80      	pop	{r7, pc}
 8015184:	2000017c 	.word	0x2000017c

08015188 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	220a      	movs	r2, #10
 8015194:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8015196:	4b02      	ldr	r3, [pc, #8]	@ (80151a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8015198:	0018      	movs	r0, r3
 801519a:	46bd      	mov	sp, r7
 801519c:	b002      	add	sp, #8
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	200000b0 	.word	0x200000b0

080151a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b084      	sub	sp, #16
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80151ae:	200f      	movs	r0, #15
 80151b0:	183b      	adds	r3, r7, r0
 80151b2:	2202      	movs	r2, #2
 80151b4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d007      	beq.n	80151cc <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80151bc:	687a      	ldr	r2, [r7, #4]
 80151be:	23af      	movs	r3, #175	@ 0xaf
 80151c0:	009b      	lsls	r3, r3, #2
 80151c2:	6839      	ldr	r1, [r7, #0]
 80151c4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 80151c6:	183b      	adds	r3, r7, r0
 80151c8:	2200      	movs	r2, #0
 80151ca:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80151cc:	230f      	movs	r3, #15
 80151ce:	18fb      	adds	r3, r7, r3
 80151d0:	781b      	ldrb	r3, [r3, #0]
}
 80151d2:	0018      	movs	r0, r3
 80151d4:	46bd      	mov	sp, r7
 80151d6:	b004      	add	sp, #16
 80151d8:	bd80      	pop	{r7, pc}

080151da <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80151da:	b580      	push	{r7, lr}
 80151dc:	b086      	sub	sp, #24
 80151de:	af00      	add	r7, sp, #0
 80151e0:	60f8      	str	r0, [r7, #12]
 80151e2:	60b9      	str	r1, [r7, #8]
 80151e4:	1dbb      	adds	r3, r7, #6
 80151e6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80151e8:	68fa      	ldr	r2, [r7, #12]
 80151ea:	23ae      	movs	r3, #174	@ 0xae
 80151ec:	009b      	lsls	r3, r3, #2
 80151ee:	58d3      	ldr	r3, [r2, r3]
 80151f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80151f2:	697a      	ldr	r2, [r7, #20]
 80151f4:	2382      	movs	r3, #130	@ 0x82
 80151f6:	009b      	lsls	r3, r3, #2
 80151f8:	68b9      	ldr	r1, [r7, #8]
 80151fa:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80151fc:	1dbb      	adds	r3, r7, #6
 80151fe:	8819      	ldrh	r1, [r3, #0]
 8015200:	697a      	ldr	r2, [r7, #20]
 8015202:	2384      	movs	r3, #132	@ 0x84
 8015204:	009b      	lsls	r3, r3, #2
 8015206:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8015208:	2300      	movs	r3, #0
}
 801520a:	0018      	movs	r0, r3
 801520c:	46bd      	mov	sp, r7
 801520e:	b006      	add	sp, #24
 8015210:	bd80      	pop	{r7, pc}

08015212 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8015212:	b580      	push	{r7, lr}
 8015214:	b084      	sub	sp, #16
 8015216:	af00      	add	r7, sp, #0
 8015218:	6078      	str	r0, [r7, #4]
 801521a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801521c:	687a      	ldr	r2, [r7, #4]
 801521e:	23ae      	movs	r3, #174	@ 0xae
 8015220:	009b      	lsls	r3, r3, #2
 8015222:	58d3      	ldr	r3, [r2, r3]
 8015224:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	2381      	movs	r3, #129	@ 0x81
 801522a:	009b      	lsls	r3, r3, #2
 801522c:	6839      	ldr	r1, [r7, #0]
 801522e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8015230:	2300      	movs	r3, #0
}
 8015232:	0018      	movs	r0, r3
 8015234:	46bd      	mov	sp, r7
 8015236:	b004      	add	sp, #16
 8015238:	bd80      	pop	{r7, pc}

0801523a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801523a:	b580      	push	{r7, lr}
 801523c:	b084      	sub	sp, #16
 801523e:	af00      	add	r7, sp, #0
 8015240:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015242:	687a      	ldr	r2, [r7, #4]
 8015244:	23ae      	movs	r3, #174	@ 0xae
 8015246:	009b      	lsls	r3, r3, #2
 8015248:	58d3      	ldr	r3, [r2, r3]
 801524a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	23ae      	movs	r3, #174	@ 0xae
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	58d3      	ldr	r3, [r2, r3]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d022      	beq.n	801529e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8015258:	68fa      	ldr	r2, [r7, #12]
 801525a:	2385      	movs	r3, #133	@ 0x85
 801525c:	009b      	lsls	r3, r3, #2
 801525e:	58d3      	ldr	r3, [r2, r3]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d11a      	bne.n	801529a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	2385      	movs	r3, #133	@ 0x85
 8015268:	009b      	lsls	r3, r3, #2
 801526a:	2101      	movs	r1, #1
 801526c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801526e:	68fa      	ldr	r2, [r7, #12]
 8015270:	2384      	movs	r3, #132	@ 0x84
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	58d2      	ldr	r2, [r2, r3]
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801527a:	68fa      	ldr	r2, [r7, #12]
 801527c:	2382      	movs	r3, #130	@ 0x82
 801527e:	009b      	lsls	r3, r3, #2
 8015280:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8015282:	68fa      	ldr	r2, [r7, #12]
 8015284:	2384      	movs	r3, #132	@ 0x84
 8015286:	009b      	lsls	r3, r3, #2
 8015288:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801528a:	b29b      	uxth	r3, r3
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	000a      	movs	r2, r1
 8015290:	2181      	movs	r1, #129	@ 0x81
 8015292:	f001 ff0c 	bl	80170ae <USBD_LL_Transmit>

      return USBD_OK;
 8015296:	2300      	movs	r3, #0
 8015298:	e002      	b.n	80152a0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801529a:	2301      	movs	r3, #1
 801529c:	e000      	b.n	80152a0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801529e:	2302      	movs	r3, #2
  }
}
 80152a0:	0018      	movs	r0, r3
 80152a2:	46bd      	mov	sp, r7
 80152a4:	b004      	add	sp, #16
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	23ae      	movs	r3, #174	@ 0xae
 80152b4:	009b      	lsls	r3, r3, #2
 80152b6:	58d3      	ldr	r3, [r2, r3]
 80152b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	23ae      	movs	r3, #174	@ 0xae
 80152be:	009b      	lsls	r3, r3, #2
 80152c0:	58d3      	ldr	r3, [r2, r3]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d019      	beq.n	80152fa <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	7c1b      	ldrb	r3, [r3, #16]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d10a      	bne.n	80152e4 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80152ce:	68fa      	ldr	r2, [r7, #12]
 80152d0:	2381      	movs	r3, #129	@ 0x81
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	58d2      	ldr	r2, [r2, r3]
 80152d6:	2380      	movs	r3, #128	@ 0x80
 80152d8:	009b      	lsls	r3, r3, #2
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	2101      	movs	r1, #1
 80152de:	f001 ff1d 	bl	801711c <USBD_LL_PrepareReceive>
 80152e2:	e008      	b.n	80152f6 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80152e4:	68fa      	ldr	r2, [r7, #12]
 80152e6:	2381      	movs	r3, #129	@ 0x81
 80152e8:	009b      	lsls	r3, r3, #2
 80152ea:	58d2      	ldr	r2, [r2, r3]
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	2340      	movs	r3, #64	@ 0x40
 80152f0:	2101      	movs	r1, #1
 80152f2:	f001 ff13 	bl	801711c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80152f6:	2300      	movs	r3, #0
 80152f8:	e000      	b.n	80152fc <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 80152fa:	2302      	movs	r3, #2
  }
}
 80152fc:	0018      	movs	r0, r3
 80152fe:	46bd      	mov	sp, r7
 8015300:	b004      	add	sp, #16
 8015302:	bd80      	pop	{r7, pc}

08015304 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b084      	sub	sp, #16
 8015308:	af00      	add	r7, sp, #0
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	60b9      	str	r1, [r7, #8]
 801530e:	1dfb      	adds	r3, r7, #7
 8015310:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d101      	bne.n	801531c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015318:	2302      	movs	r3, #2
 801531a:	e020      	b.n	801535e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801531c:	68fa      	ldr	r2, [r7, #12]
 801531e:	23ad      	movs	r3, #173	@ 0xad
 8015320:	009b      	lsls	r3, r3, #2
 8015322:	58d3      	ldr	r3, [r2, r3]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d004      	beq.n	8015332 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8015328:	68fa      	ldr	r2, [r7, #12]
 801532a:	23ad      	movs	r3, #173	@ 0xad
 801532c:	009b      	lsls	r3, r3, #2
 801532e:	2100      	movs	r1, #0
 8015330:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015332:	68bb      	ldr	r3, [r7, #8]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d004      	beq.n	8015342 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015338:	68fa      	ldr	r2, [r7, #12]
 801533a:	23ac      	movs	r3, #172	@ 0xac
 801533c:	009b      	lsls	r3, r3, #2
 801533e:	68b9      	ldr	r1, [r7, #8]
 8015340:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015342:	68fa      	ldr	r2, [r7, #12]
 8015344:	23a7      	movs	r3, #167	@ 0xa7
 8015346:	009b      	lsls	r3, r3, #2
 8015348:	2101      	movs	r1, #1
 801534a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	1dfa      	adds	r2, r7, #7
 8015350:	7812      	ldrb	r2, [r2, #0]
 8015352:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	0018      	movs	r0, r3
 8015358:	f001 fd0c 	bl	8016d74 <USBD_LL_Init>

  return USBD_OK;
 801535c:	2300      	movs	r3, #0
}
 801535e:	0018      	movs	r0, r3
 8015360:	46bd      	mov	sp, r7
 8015362:	b004      	add	sp, #16
 8015364:	bd80      	pop	{r7, pc}

08015366 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015366:	b580      	push	{r7, lr}
 8015368:	b084      	sub	sp, #16
 801536a:	af00      	add	r7, sp, #0
 801536c:	6078      	str	r0, [r7, #4]
 801536e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8015370:	200f      	movs	r0, #15
 8015372:	183b      	adds	r3, r7, r0
 8015374:	2200      	movs	r2, #0
 8015376:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d008      	beq.n	8015390 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801537e:	687a      	ldr	r2, [r7, #4]
 8015380:	23ad      	movs	r3, #173	@ 0xad
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	6839      	ldr	r1, [r7, #0]
 8015386:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8015388:	183b      	adds	r3, r7, r0
 801538a:	2200      	movs	r2, #0
 801538c:	701a      	strb	r2, [r3, #0]
 801538e:	e003      	b.n	8015398 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8015390:	230f      	movs	r3, #15
 8015392:	18fb      	adds	r3, r7, r3
 8015394:	2202      	movs	r2, #2
 8015396:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8015398:	230f      	movs	r3, #15
 801539a:	18fb      	adds	r3, r7, r3
 801539c:	781b      	ldrb	r3, [r3, #0]
}
 801539e:	0018      	movs	r0, r3
 80153a0:	46bd      	mov	sp, r7
 80153a2:	b004      	add	sp, #16
 80153a4:	bd80      	pop	{r7, pc}

080153a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80153a6:	b580      	push	{r7, lr}
 80153a8:	b082      	sub	sp, #8
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	0018      	movs	r0, r3
 80153b2:	f001 fd43 	bl	8016e3c <USBD_LL_Start>

  return USBD_OK;
 80153b6:	2300      	movs	r3, #0
}
 80153b8:	0018      	movs	r0, r3
 80153ba:	46bd      	mov	sp, r7
 80153bc:	b002      	add	sp, #8
 80153be:	bd80      	pop	{r7, pc}

080153c0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80153c8:	2300      	movs	r3, #0
}
 80153ca:	0018      	movs	r0, r3
 80153cc:	46bd      	mov	sp, r7
 80153ce:	b002      	add	sp, #8
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80153d2:	b590      	push	{r4, r7, lr}
 80153d4:	b085      	sub	sp, #20
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
 80153da:	000a      	movs	r2, r1
 80153dc:	1cfb      	adds	r3, r7, #3
 80153de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80153e0:	240f      	movs	r4, #15
 80153e2:	193b      	adds	r3, r7, r4
 80153e4:	2202      	movs	r2, #2
 80153e6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80153e8:	687a      	ldr	r2, [r7, #4]
 80153ea:	23ad      	movs	r3, #173	@ 0xad
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	58d3      	ldr	r3, [r2, r3]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d00e      	beq.n	8015412 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	23ad      	movs	r3, #173	@ 0xad
 80153f8:	009b      	lsls	r3, r3, #2
 80153fa:	58d3      	ldr	r3, [r2, r3]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	1cfa      	adds	r2, r7, #3
 8015400:	7811      	ldrb	r1, [r2, #0]
 8015402:	687a      	ldr	r2, [r7, #4]
 8015404:	0010      	movs	r0, r2
 8015406:	4798      	blx	r3
 8015408:	1e03      	subs	r3, r0, #0
 801540a:	d102      	bne.n	8015412 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801540c:	193b      	adds	r3, r7, r4
 801540e:	2200      	movs	r2, #0
 8015410:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8015412:	230f      	movs	r3, #15
 8015414:	18fb      	adds	r3, r7, r3
 8015416:	781b      	ldrb	r3, [r3, #0]
}
 8015418:	0018      	movs	r0, r3
 801541a:	46bd      	mov	sp, r7
 801541c:	b005      	add	sp, #20
 801541e:	bd90      	pop	{r4, r7, pc}

08015420 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	000a      	movs	r2, r1
 801542a:	1cfb      	adds	r3, r7, #3
 801542c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	23ad      	movs	r3, #173	@ 0xad
 8015432:	009b      	lsls	r3, r3, #2
 8015434:	58d3      	ldr	r3, [r2, r3]
 8015436:	685b      	ldr	r3, [r3, #4]
 8015438:	1cfa      	adds	r2, r7, #3
 801543a:	7811      	ldrb	r1, [r2, #0]
 801543c:	687a      	ldr	r2, [r7, #4]
 801543e:	0010      	movs	r0, r2
 8015440:	4798      	blx	r3

  return USBD_OK;
 8015442:	2300      	movs	r3, #0
}
 8015444:	0018      	movs	r0, r3
 8015446:	46bd      	mov	sp, r7
 8015448:	b002      	add	sp, #8
 801544a:	bd80      	pop	{r7, pc}

0801544c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b082      	sub	sp, #8
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	22aa      	movs	r2, #170	@ 0xaa
 801545a:	0092      	lsls	r2, r2, #2
 801545c:	4694      	mov	ip, r2
 801545e:	4463      	add	r3, ip
 8015460:	683a      	ldr	r2, [r7, #0]
 8015462:	0011      	movs	r1, r2
 8015464:	0018      	movs	r0, r3
 8015466:	f001 f810 	bl	801648a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	23a5      	movs	r3, #165	@ 0xa5
 801546e:	009b      	lsls	r3, r3, #2
 8015470:	2101      	movs	r1, #1
 8015472:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	4a23      	ldr	r2, [pc, #140]	@ (8015504 <USBD_LL_SetupStage+0xb8>)
 8015478:	5a9b      	ldrh	r3, [r3, r2]
 801547a:	0019      	movs	r1, r3
 801547c:	687a      	ldr	r2, [r7, #4]
 801547e:	23a6      	movs	r3, #166	@ 0xa6
 8015480:	009b      	lsls	r3, r3, #2
 8015482:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	23aa      	movs	r3, #170	@ 0xaa
 8015488:	009b      	lsls	r3, r3, #2
 801548a:	5cd3      	ldrb	r3, [r2, r3]
 801548c:	001a      	movs	r2, r3
 801548e:	231f      	movs	r3, #31
 8015490:	4013      	ands	r3, r2
 8015492:	2b02      	cmp	r3, #2
 8015494:	d019      	beq.n	80154ca <USBD_LL_SetupStage+0x7e>
 8015496:	d822      	bhi.n	80154de <USBD_LL_SetupStage+0x92>
 8015498:	2b00      	cmp	r3, #0
 801549a:	d002      	beq.n	80154a2 <USBD_LL_SetupStage+0x56>
 801549c:	2b01      	cmp	r3, #1
 801549e:	d00a      	beq.n	80154b6 <USBD_LL_SetupStage+0x6a>
 80154a0:	e01d      	b.n	80154de <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	22aa      	movs	r2, #170	@ 0xaa
 80154a6:	0092      	lsls	r2, r2, #2
 80154a8:	189a      	adds	r2, r3, r2
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	0011      	movs	r1, r2
 80154ae:	0018      	movs	r0, r3
 80154b0:	f000 fa10 	bl	80158d4 <USBD_StdDevReq>
      break;
 80154b4:	e020      	b.n	80154f8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	22aa      	movs	r2, #170	@ 0xaa
 80154ba:	0092      	lsls	r2, r2, #2
 80154bc:	189a      	adds	r2, r3, r2
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	0011      	movs	r1, r2
 80154c2:	0018      	movs	r0, r3
 80154c4:	f000 fa78 	bl	80159b8 <USBD_StdItfReq>
      break;
 80154c8:	e016      	b.n	80154f8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	22aa      	movs	r2, #170	@ 0xaa
 80154ce:	0092      	lsls	r2, r2, #2
 80154d0:	189a      	adds	r2, r3, r2
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	0011      	movs	r1, r2
 80154d6:	0018      	movs	r0, r3
 80154d8:	f000 fac5 	bl	8015a66 <USBD_StdEPReq>
      break;
 80154dc:	e00c      	b.n	80154f8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80154de:	687a      	ldr	r2, [r7, #4]
 80154e0:	23aa      	movs	r3, #170	@ 0xaa
 80154e2:	009b      	lsls	r3, r3, #2
 80154e4:	5cd3      	ldrb	r3, [r2, r3]
 80154e6:	227f      	movs	r2, #127	@ 0x7f
 80154e8:	4393      	bics	r3, r2
 80154ea:	b2da      	uxtb	r2, r3
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	0011      	movs	r1, r2
 80154f0:	0018      	movs	r0, r3
 80154f2:	f001 fd2a 	bl	8016f4a <USBD_LL_StallEP>
      break;
 80154f6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80154f8:	2300      	movs	r3, #0
}
 80154fa:	0018      	movs	r0, r3
 80154fc:	46bd      	mov	sp, r7
 80154fe:	b002      	add	sp, #8
 8015500:	bd80      	pop	{r7, pc}
 8015502:	46c0      	nop			@ (mov r8, r8)
 8015504:	000002ae 	.word	0x000002ae

08015508 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b086      	sub	sp, #24
 801550c:	af00      	add	r7, sp, #0
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	607a      	str	r2, [r7, #4]
 8015512:	200b      	movs	r0, #11
 8015514:	183b      	adds	r3, r7, r0
 8015516:	1c0a      	adds	r2, r1, #0
 8015518:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801551a:	183b      	adds	r3, r7, r0
 801551c:	781b      	ldrb	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d154      	bne.n	80155cc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	3355      	adds	r3, #85	@ 0x55
 8015526:	33ff      	adds	r3, #255	@ 0xff
 8015528:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801552a:	68fa      	ldr	r2, [r7, #12]
 801552c:	23a5      	movs	r3, #165	@ 0xa5
 801552e:	009b      	lsls	r3, r3, #2
 8015530:	58d3      	ldr	r3, [r2, r3]
 8015532:	2b03      	cmp	r3, #3
 8015534:	d139      	bne.n	80155aa <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	68da      	ldr	r2, [r3, #12]
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	691b      	ldr	r3, [r3, #16]
 801553e:	429a      	cmp	r2, r3
 8015540:	d919      	bls.n	8015576 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	68da      	ldr	r2, [r3, #12]
 8015546:	697b      	ldr	r3, [r7, #20]
 8015548:	691b      	ldr	r3, [r3, #16]
 801554a:	1ad2      	subs	r2, r2, r3
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	68da      	ldr	r2, [r3, #12]
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015558:	429a      	cmp	r2, r3
 801555a:	d203      	bcs.n	8015564 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8015560:	b29b      	uxth	r3, r3
 8015562:	e002      	b.n	801556a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015568:	b29b      	uxth	r3, r3
 801556a:	6879      	ldr	r1, [r7, #4]
 801556c:	68f8      	ldr	r0, [r7, #12]
 801556e:	001a      	movs	r2, r3
 8015570:	f001 f898 	bl	80166a4 <USBD_CtlContinueRx>
 8015574:	e045      	b.n	8015602 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015576:	68fa      	ldr	r2, [r7, #12]
 8015578:	23ad      	movs	r3, #173	@ 0xad
 801557a:	009b      	lsls	r3, r3, #2
 801557c:	58d3      	ldr	r3, [r2, r3]
 801557e:	691b      	ldr	r3, [r3, #16]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d00d      	beq.n	80155a0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015584:	68fa      	ldr	r2, [r7, #12]
 8015586:	23a7      	movs	r3, #167	@ 0xa7
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801558c:	2b03      	cmp	r3, #3
 801558e:	d107      	bne.n	80155a0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015590:	68fa      	ldr	r2, [r7, #12]
 8015592:	23ad      	movs	r3, #173	@ 0xad
 8015594:	009b      	lsls	r3, r3, #2
 8015596:	58d3      	ldr	r3, [r2, r3]
 8015598:	691b      	ldr	r3, [r3, #16]
 801559a:	68fa      	ldr	r2, [r7, #12]
 801559c:	0010      	movs	r0, r2
 801559e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	0018      	movs	r0, r3
 80155a4:	f001 f891 	bl	80166ca <USBD_CtlSendStatus>
 80155a8:	e02b      	b.n	8015602 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80155aa:	68fa      	ldr	r2, [r7, #12]
 80155ac:	23a5      	movs	r3, #165	@ 0xa5
 80155ae:	009b      	lsls	r3, r3, #2
 80155b0:	58d3      	ldr	r3, [r2, r3]
 80155b2:	2b05      	cmp	r3, #5
 80155b4:	d125      	bne.n	8015602 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80155b6:	68fa      	ldr	r2, [r7, #12]
 80155b8:	23a5      	movs	r3, #165	@ 0xa5
 80155ba:	009b      	lsls	r3, r3, #2
 80155bc:	2100      	movs	r1, #0
 80155be:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	2100      	movs	r1, #0
 80155c4:	0018      	movs	r0, r3
 80155c6:	f001 fcc0 	bl	8016f4a <USBD_LL_StallEP>
 80155ca:	e01a      	b.n	8015602 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80155cc:	68fa      	ldr	r2, [r7, #12]
 80155ce:	23ad      	movs	r3, #173	@ 0xad
 80155d0:	009b      	lsls	r3, r3, #2
 80155d2:	58d3      	ldr	r3, [r2, r3]
 80155d4:	699b      	ldr	r3, [r3, #24]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d011      	beq.n	80155fe <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	23a7      	movs	r3, #167	@ 0xa7
 80155de:	009b      	lsls	r3, r3, #2
 80155e0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80155e2:	2b03      	cmp	r3, #3
 80155e4:	d10b      	bne.n	80155fe <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80155e6:	68fa      	ldr	r2, [r7, #12]
 80155e8:	23ad      	movs	r3, #173	@ 0xad
 80155ea:	009b      	lsls	r3, r3, #2
 80155ec:	58d3      	ldr	r3, [r2, r3]
 80155ee:	699b      	ldr	r3, [r3, #24]
 80155f0:	220b      	movs	r2, #11
 80155f2:	18ba      	adds	r2, r7, r2
 80155f4:	7811      	ldrb	r1, [r2, #0]
 80155f6:	68fa      	ldr	r2, [r7, #12]
 80155f8:	0010      	movs	r0, r2
 80155fa:	4798      	blx	r3
 80155fc:	e001      	b.n	8015602 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80155fe:	2302      	movs	r3, #2
 8015600:	e000      	b.n	8015604 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8015602:	2300      	movs	r3, #0
}
 8015604:	0018      	movs	r0, r3
 8015606:	46bd      	mov	sp, r7
 8015608:	b006      	add	sp, #24
 801560a:	bd80      	pop	{r7, pc}

0801560c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b086      	sub	sp, #24
 8015610:	af00      	add	r7, sp, #0
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	607a      	str	r2, [r7, #4]
 8015616:	200b      	movs	r0, #11
 8015618:	183b      	adds	r3, r7, r0
 801561a:	1c0a      	adds	r2, r1, #0
 801561c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801561e:	183b      	adds	r3, r7, r0
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d000      	beq.n	8015628 <USBD_LL_DataInStage+0x1c>
 8015626:	e08e      	b.n	8015746 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	3314      	adds	r3, #20
 801562c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801562e:	68fa      	ldr	r2, [r7, #12]
 8015630:	23a5      	movs	r3, #165	@ 0xa5
 8015632:	009b      	lsls	r3, r3, #2
 8015634:	58d3      	ldr	r3, [r2, r3]
 8015636:	2b02      	cmp	r3, #2
 8015638:	d164      	bne.n	8015704 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	68da      	ldr	r2, [r3, #12]
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	691b      	ldr	r3, [r3, #16]
 8015642:	429a      	cmp	r2, r3
 8015644:	d915      	bls.n	8015672 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	68da      	ldr	r2, [r3, #12]
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	691b      	ldr	r3, [r3, #16]
 801564e:	1ad2      	subs	r2, r2, r3
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	68db      	ldr	r3, [r3, #12]
 8015658:	b29a      	uxth	r2, r3
 801565a:	6879      	ldr	r1, [r7, #4]
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	0018      	movs	r0, r3
 8015660:	f000 ffe9 	bl	8016636 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015664:	68f8      	ldr	r0, [r7, #12]
 8015666:	2300      	movs	r3, #0
 8015668:	2200      	movs	r2, #0
 801566a:	2100      	movs	r1, #0
 801566c:	f001 fd56 	bl	801711c <USBD_LL_PrepareReceive>
 8015670:	e059      	b.n	8015726 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015672:	697b      	ldr	r3, [r7, #20]
 8015674:	689a      	ldr	r2, [r3, #8]
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	691b      	ldr	r3, [r3, #16]
 801567a:	0019      	movs	r1, r3
 801567c:	0010      	movs	r0, r2
 801567e:	f7ea fde5 	bl	800024c <__aeabi_uidivmod>
 8015682:	1e0b      	subs	r3, r1, #0
 8015684:	d11f      	bne.n	80156c6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	689a      	ldr	r2, [r3, #8]
 801568a:	697b      	ldr	r3, [r7, #20]
 801568c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801568e:	429a      	cmp	r2, r3
 8015690:	d319      	bcc.n	80156c6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8015692:	697b      	ldr	r3, [r7, #20]
 8015694:	689a      	ldr	r2, [r3, #8]
 8015696:	68f9      	ldr	r1, [r7, #12]
 8015698:	23a6      	movs	r3, #166	@ 0xa6
 801569a:	009b      	lsls	r3, r3, #2
 801569c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801569e:	429a      	cmp	r2, r3
 80156a0:	d211      	bcs.n	80156c6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	2200      	movs	r2, #0
 80156a6:	2100      	movs	r1, #0
 80156a8:	0018      	movs	r0, r3
 80156aa:	f000 ffc4 	bl	8016636 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80156ae:	68fa      	ldr	r2, [r7, #12]
 80156b0:	23a6      	movs	r3, #166	@ 0xa6
 80156b2:	009b      	lsls	r3, r3, #2
 80156b4:	2100      	movs	r1, #0
 80156b6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156b8:	68f8      	ldr	r0, [r7, #12]
 80156ba:	2300      	movs	r3, #0
 80156bc:	2200      	movs	r2, #0
 80156be:	2100      	movs	r1, #0
 80156c0:	f001 fd2c 	bl	801711c <USBD_LL_PrepareReceive>
 80156c4:	e02f      	b.n	8015726 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80156c6:	68fa      	ldr	r2, [r7, #12]
 80156c8:	23ad      	movs	r3, #173	@ 0xad
 80156ca:	009b      	lsls	r3, r3, #2
 80156cc:	58d3      	ldr	r3, [r2, r3]
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d00d      	beq.n	80156f0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80156d4:	68fa      	ldr	r2, [r7, #12]
 80156d6:	23a7      	movs	r3, #167	@ 0xa7
 80156d8:	009b      	lsls	r3, r3, #2
 80156da:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80156dc:	2b03      	cmp	r3, #3
 80156de:	d107      	bne.n	80156f0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80156e0:	68fa      	ldr	r2, [r7, #12]
 80156e2:	23ad      	movs	r3, #173	@ 0xad
 80156e4:	009b      	lsls	r3, r3, #2
 80156e6:	58d3      	ldr	r3, [r2, r3]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	68fa      	ldr	r2, [r7, #12]
 80156ec:	0010      	movs	r0, r2
 80156ee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	2180      	movs	r1, #128	@ 0x80
 80156f4:	0018      	movs	r0, r3
 80156f6:	f001 fc28 	bl	8016f4a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	0018      	movs	r0, r3
 80156fe:	f000 fff8 	bl	80166f2 <USBD_CtlReceiveStatus>
 8015702:	e010      	b.n	8015726 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015704:	68fa      	ldr	r2, [r7, #12]
 8015706:	23a5      	movs	r3, #165	@ 0xa5
 8015708:	009b      	lsls	r3, r3, #2
 801570a:	58d3      	ldr	r3, [r2, r3]
 801570c:	2b04      	cmp	r3, #4
 801570e:	d005      	beq.n	801571c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8015710:	68fa      	ldr	r2, [r7, #12]
 8015712:	23a5      	movs	r3, #165	@ 0xa5
 8015714:	009b      	lsls	r3, r3, #2
 8015716:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015718:	2b00      	cmp	r3, #0
 801571a:	d104      	bne.n	8015726 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2180      	movs	r1, #128	@ 0x80
 8015720:	0018      	movs	r0, r3
 8015722:	f001 fc12 	bl	8016f4a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8015726:	68fa      	ldr	r2, [r7, #12]
 8015728:	23a8      	movs	r3, #168	@ 0xa8
 801572a:	009b      	lsls	r3, r3, #2
 801572c:	5cd3      	ldrb	r3, [r2, r3]
 801572e:	2b01      	cmp	r3, #1
 8015730:	d124      	bne.n	801577c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	0018      	movs	r0, r3
 8015736:	f7ff fe43 	bl	80153c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801573a:	68fa      	ldr	r2, [r7, #12]
 801573c:	23a8      	movs	r3, #168	@ 0xa8
 801573e:	009b      	lsls	r3, r3, #2
 8015740:	2100      	movs	r1, #0
 8015742:	54d1      	strb	r1, [r2, r3]
 8015744:	e01a      	b.n	801577c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015746:	68fa      	ldr	r2, [r7, #12]
 8015748:	23ad      	movs	r3, #173	@ 0xad
 801574a:	009b      	lsls	r3, r3, #2
 801574c:	58d3      	ldr	r3, [r2, r3]
 801574e:	695b      	ldr	r3, [r3, #20]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d011      	beq.n	8015778 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015754:	68fa      	ldr	r2, [r7, #12]
 8015756:	23a7      	movs	r3, #167	@ 0xa7
 8015758:	009b      	lsls	r3, r3, #2
 801575a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801575c:	2b03      	cmp	r3, #3
 801575e:	d10b      	bne.n	8015778 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8015760:	68fa      	ldr	r2, [r7, #12]
 8015762:	23ad      	movs	r3, #173	@ 0xad
 8015764:	009b      	lsls	r3, r3, #2
 8015766:	58d3      	ldr	r3, [r2, r3]
 8015768:	695b      	ldr	r3, [r3, #20]
 801576a:	220b      	movs	r2, #11
 801576c:	18ba      	adds	r2, r7, r2
 801576e:	7811      	ldrb	r1, [r2, #0]
 8015770:	68fa      	ldr	r2, [r7, #12]
 8015772:	0010      	movs	r0, r2
 8015774:	4798      	blx	r3
 8015776:	e001      	b.n	801577c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015778:	2302      	movs	r3, #2
 801577a:	e000      	b.n	801577e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801577c:	2300      	movs	r3, #0
}
 801577e:	0018      	movs	r0, r3
 8015780:	46bd      	mov	sp, r7
 8015782:	b006      	add	sp, #24
 8015784:	bd80      	pop	{r7, pc}

08015786 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015786:	b580      	push	{r7, lr}
 8015788:	b082      	sub	sp, #8
 801578a:	af00      	add	r7, sp, #0
 801578c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	2340      	movs	r3, #64	@ 0x40
 8015792:	2200      	movs	r2, #0
 8015794:	2100      	movs	r1, #0
 8015796:	f001 fb76 	bl	8016e86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	23ac      	movs	r3, #172	@ 0xac
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	2101      	movs	r1, #1
 80157a2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80157a4:	687a      	ldr	r2, [r7, #4]
 80157a6:	23b2      	movs	r3, #178	@ 0xb2
 80157a8:	005b      	lsls	r3, r3, #1
 80157aa:	2140      	movs	r1, #64	@ 0x40
 80157ac:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	2340      	movs	r3, #64	@ 0x40
 80157b2:	2200      	movs	r2, #0
 80157b4:	2180      	movs	r1, #128	@ 0x80
 80157b6:	f001 fb66 	bl	8016e86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	2201      	movs	r2, #1
 80157be:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2240      	movs	r2, #64	@ 0x40
 80157c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	23a7      	movs	r3, #167	@ 0xa7
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	2101      	movs	r1, #1
 80157ce:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80157d0:	687a      	ldr	r2, [r7, #4]
 80157d2:	23a5      	movs	r3, #165	@ 0xa5
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	2100      	movs	r1, #0
 80157d8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2200      	movs	r2, #0
 80157de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80157e0:	687a      	ldr	r2, [r7, #4]
 80157e2:	23a9      	movs	r3, #169	@ 0xa9
 80157e4:	009b      	lsls	r3, r3, #2
 80157e6:	2100      	movs	r1, #0
 80157e8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80157ea:	687a      	ldr	r2, [r7, #4]
 80157ec:	23ae      	movs	r3, #174	@ 0xae
 80157ee:	009b      	lsls	r3, r3, #2
 80157f0:	58d3      	ldr	r3, [r2, r3]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d00a      	beq.n	801580c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80157f6:	687a      	ldr	r2, [r7, #4]
 80157f8:	23ad      	movs	r3, #173	@ 0xad
 80157fa:	009b      	lsls	r3, r3, #2
 80157fc:	58d3      	ldr	r3, [r2, r3]
 80157fe:	685a      	ldr	r2, [r3, #4]
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	685b      	ldr	r3, [r3, #4]
 8015804:	b2d9      	uxtb	r1, r3
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	0018      	movs	r0, r3
 801580a:	4790      	blx	r2
  }

  return USBD_OK;
 801580c:	2300      	movs	r3, #0
}
 801580e:	0018      	movs	r0, r3
 8015810:	46bd      	mov	sp, r7
 8015812:	b002      	add	sp, #8
 8015814:	bd80      	pop	{r7, pc}

08015816 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015816:	b580      	push	{r7, lr}
 8015818:	b082      	sub	sp, #8
 801581a:	af00      	add	r7, sp, #0
 801581c:	6078      	str	r0, [r7, #4]
 801581e:	000a      	movs	r2, r1
 8015820:	1cfb      	adds	r3, r7, #3
 8015822:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	1cfa      	adds	r2, r7, #3
 8015828:	7812      	ldrb	r2, [r2, #0]
 801582a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801582c:	2300      	movs	r3, #0
}
 801582e:	0018      	movs	r0, r3
 8015830:	46bd      	mov	sp, r7
 8015832:	b002      	add	sp, #8
 8015834:	bd80      	pop	{r7, pc}
	...

08015838 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b082      	sub	sp, #8
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8015840:	687a      	ldr	r2, [r7, #4]
 8015842:	23a7      	movs	r3, #167	@ 0xa7
 8015844:	009b      	lsls	r3, r3, #2
 8015846:	5cd1      	ldrb	r1, [r2, r3]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	4a06      	ldr	r2, [pc, #24]	@ (8015864 <USBD_LL_Suspend+0x2c>)
 801584c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	23a7      	movs	r3, #167	@ 0xa7
 8015852:	009b      	lsls	r3, r3, #2
 8015854:	2104      	movs	r1, #4
 8015856:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8015858:	2300      	movs	r3, #0
}
 801585a:	0018      	movs	r0, r3
 801585c:	46bd      	mov	sp, r7
 801585e:	b002      	add	sp, #8
 8015860:	bd80      	pop	{r7, pc}
 8015862:	46c0      	nop			@ (mov r8, r8)
 8015864:	0000029d 	.word	0x0000029d

08015868 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b082      	sub	sp, #8
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015870:	687a      	ldr	r2, [r7, #4]
 8015872:	23a7      	movs	r3, #167	@ 0xa7
 8015874:	009b      	lsls	r3, r3, #2
 8015876:	5cd3      	ldrb	r3, [r2, r3]
 8015878:	2b04      	cmp	r3, #4
 801587a:	d106      	bne.n	801588a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	4a05      	ldr	r2, [pc, #20]	@ (8015894 <USBD_LL_Resume+0x2c>)
 8015880:	5c99      	ldrb	r1, [r3, r2]
 8015882:	687a      	ldr	r2, [r7, #4]
 8015884:	23a7      	movs	r3, #167	@ 0xa7
 8015886:	009b      	lsls	r3, r3, #2
 8015888:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801588a:	2300      	movs	r3, #0
}
 801588c:	0018      	movs	r0, r3
 801588e:	46bd      	mov	sp, r7
 8015890:	b002      	add	sp, #8
 8015892:	bd80      	pop	{r7, pc}
 8015894:	0000029d 	.word	0x0000029d

08015898 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b082      	sub	sp, #8
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158a0:	687a      	ldr	r2, [r7, #4]
 80158a2:	23a7      	movs	r3, #167	@ 0xa7
 80158a4:	009b      	lsls	r3, r3, #2
 80158a6:	5cd3      	ldrb	r3, [r2, r3]
 80158a8:	2b03      	cmp	r3, #3
 80158aa:	d10e      	bne.n	80158ca <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	23ad      	movs	r3, #173	@ 0xad
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	58d3      	ldr	r3, [r2, r3]
 80158b4:	69db      	ldr	r3, [r3, #28]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d007      	beq.n	80158ca <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	23ad      	movs	r3, #173	@ 0xad
 80158be:	009b      	lsls	r3, r3, #2
 80158c0:	58d3      	ldr	r3, [r2, r3]
 80158c2:	69db      	ldr	r3, [r3, #28]
 80158c4:	687a      	ldr	r2, [r7, #4]
 80158c6:	0010      	movs	r0, r2
 80158c8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80158ca:	2300      	movs	r3, #0
}
 80158cc:	0018      	movs	r0, r3
 80158ce:	46bd      	mov	sp, r7
 80158d0:	b002      	add	sp, #8
 80158d2:	bd80      	pop	{r7, pc}

080158d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b084      	sub	sp, #16
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
 80158dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158de:	230f      	movs	r3, #15
 80158e0:	18fb      	adds	r3, r7, r3
 80158e2:	2200      	movs	r2, #0
 80158e4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158e6:	683b      	ldr	r3, [r7, #0]
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	001a      	movs	r2, r3
 80158ec:	2360      	movs	r3, #96	@ 0x60
 80158ee:	4013      	ands	r3, r2
 80158f0:	2b40      	cmp	r3, #64	@ 0x40
 80158f2:	d004      	beq.n	80158fe <USBD_StdDevReq+0x2a>
 80158f4:	d84f      	bhi.n	8015996 <USBD_StdDevReq+0xc2>
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d00b      	beq.n	8015912 <USBD_StdDevReq+0x3e>
 80158fa:	2b20      	cmp	r3, #32
 80158fc:	d14b      	bne.n	8015996 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80158fe:	687a      	ldr	r2, [r7, #4]
 8015900:	23ad      	movs	r3, #173	@ 0xad
 8015902:	009b      	lsls	r3, r3, #2
 8015904:	58d3      	ldr	r3, [r2, r3]
 8015906:	689b      	ldr	r3, [r3, #8]
 8015908:	6839      	ldr	r1, [r7, #0]
 801590a:	687a      	ldr	r2, [r7, #4]
 801590c:	0010      	movs	r0, r2
 801590e:	4798      	blx	r3
      break;
 8015910:	e048      	b.n	80159a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	785b      	ldrb	r3, [r3, #1]
 8015916:	2b09      	cmp	r3, #9
 8015918:	d835      	bhi.n	8015986 <USBD_StdDevReq+0xb2>
 801591a:	009a      	lsls	r2, r3, #2
 801591c:	4b25      	ldr	r3, [pc, #148]	@ (80159b4 <USBD_StdDevReq+0xe0>)
 801591e:	18d3      	adds	r3, r2, r3
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015924:	683a      	ldr	r2, [r7, #0]
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	0011      	movs	r1, r2
 801592a:	0018      	movs	r0, r3
 801592c:	f000 fa52 	bl	8015dd4 <USBD_GetDescriptor>
          break;
 8015930:	e030      	b.n	8015994 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015932:	683a      	ldr	r2, [r7, #0]
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	0011      	movs	r1, r2
 8015938:	0018      	movs	r0, r3
 801593a:	f000 fbfd 	bl	8016138 <USBD_SetAddress>
          break;
 801593e:	e029      	b.n	8015994 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8015940:	683a      	ldr	r2, [r7, #0]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	0011      	movs	r1, r2
 8015946:	0018      	movs	r0, r3
 8015948:	f000 fc4a 	bl	80161e0 <USBD_SetConfig>
          break;
 801594c:	e022      	b.n	8015994 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801594e:	683a      	ldr	r2, [r7, #0]
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	0011      	movs	r1, r2
 8015954:	0018      	movs	r0, r3
 8015956:	f000 fce7 	bl	8016328 <USBD_GetConfig>
          break;
 801595a:	e01b      	b.n	8015994 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801595c:	683a      	ldr	r2, [r7, #0]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	0011      	movs	r1, r2
 8015962:	0018      	movs	r0, r3
 8015964:	f000 fd1b 	bl	801639e <USBD_GetStatus>
          break;
 8015968:	e014      	b.n	8015994 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801596a:	683a      	ldr	r2, [r7, #0]
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	0011      	movs	r1, r2
 8015970:	0018      	movs	r0, r3
 8015972:	f000 fd4e 	bl	8016412 <USBD_SetFeature>
          break;
 8015976:	e00d      	b.n	8015994 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015978:	683a      	ldr	r2, [r7, #0]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	0011      	movs	r1, r2
 801597e:	0018      	movs	r0, r3
 8015980:	f000 fd5d 	bl	801643e <USBD_ClrFeature>
          break;
 8015984:	e006      	b.n	8015994 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015986:	683a      	ldr	r2, [r7, #0]
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	0011      	movs	r1, r2
 801598c:	0018      	movs	r0, r3
 801598e:	f000 fdb4 	bl	80164fa <USBD_CtlError>
          break;
 8015992:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015994:	e006      	b.n	80159a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8015996:	683a      	ldr	r2, [r7, #0]
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	0011      	movs	r1, r2
 801599c:	0018      	movs	r0, r3
 801599e:	f000 fdac 	bl	80164fa <USBD_CtlError>
      break;
 80159a2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80159a4:	230f      	movs	r3, #15
 80159a6:	18fb      	adds	r3, r7, r3
 80159a8:	781b      	ldrb	r3, [r3, #0]
}
 80159aa:	0018      	movs	r0, r3
 80159ac:	46bd      	mov	sp, r7
 80159ae:	b004      	add	sp, #16
 80159b0:	bd80      	pop	{r7, pc}
 80159b2:	46c0      	nop			@ (mov r8, r8)
 80159b4:	0801b9dc 	.word	0x0801b9dc

080159b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80159b8:	b5b0      	push	{r4, r5, r7, lr}
 80159ba:	b084      	sub	sp, #16
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
 80159c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80159c2:	230f      	movs	r3, #15
 80159c4:	18fb      	adds	r3, r7, r3
 80159c6:	2200      	movs	r2, #0
 80159c8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	781b      	ldrb	r3, [r3, #0]
 80159ce:	001a      	movs	r2, r3
 80159d0:	2360      	movs	r3, #96	@ 0x60
 80159d2:	4013      	ands	r3, r2
 80159d4:	2b40      	cmp	r3, #64	@ 0x40
 80159d6:	d004      	beq.n	80159e2 <USBD_StdItfReq+0x2a>
 80159d8:	d839      	bhi.n	8015a4e <USBD_StdItfReq+0x96>
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d001      	beq.n	80159e2 <USBD_StdItfReq+0x2a>
 80159de:	2b20      	cmp	r3, #32
 80159e0:	d135      	bne.n	8015a4e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80159e2:	687a      	ldr	r2, [r7, #4]
 80159e4:	23a7      	movs	r3, #167	@ 0xa7
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	5cd3      	ldrb	r3, [r2, r3]
 80159ea:	3b01      	subs	r3, #1
 80159ec:	2b02      	cmp	r3, #2
 80159ee:	d825      	bhi.n	8015a3c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	889b      	ldrh	r3, [r3, #4]
 80159f4:	b2db      	uxtb	r3, r3
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	d819      	bhi.n	8015a2e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80159fa:	687a      	ldr	r2, [r7, #4]
 80159fc:	23ad      	movs	r3, #173	@ 0xad
 80159fe:	009b      	lsls	r3, r3, #2
 8015a00:	58d3      	ldr	r3, [r2, r3]
 8015a02:	689b      	ldr	r3, [r3, #8]
 8015a04:	250f      	movs	r5, #15
 8015a06:	197c      	adds	r4, r7, r5
 8015a08:	6839      	ldr	r1, [r7, #0]
 8015a0a:	687a      	ldr	r2, [r7, #4]
 8015a0c:	0010      	movs	r0, r2
 8015a0e:	4798      	blx	r3
 8015a10:	0003      	movs	r3, r0
 8015a12:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015a14:	683b      	ldr	r3, [r7, #0]
 8015a16:	88db      	ldrh	r3, [r3, #6]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d116      	bne.n	8015a4a <USBD_StdItfReq+0x92>
 8015a1c:	197b      	adds	r3, r7, r5
 8015a1e:	781b      	ldrb	r3, [r3, #0]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d112      	bne.n	8015a4a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	0018      	movs	r0, r3
 8015a28:	f000 fe4f 	bl	80166ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015a2c:	e00d      	b.n	8015a4a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8015a2e:	683a      	ldr	r2, [r7, #0]
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	0011      	movs	r1, r2
 8015a34:	0018      	movs	r0, r3
 8015a36:	f000 fd60 	bl	80164fa <USBD_CtlError>
          break;
 8015a3a:	e006      	b.n	8015a4a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8015a3c:	683a      	ldr	r2, [r7, #0]
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	0011      	movs	r1, r2
 8015a42:	0018      	movs	r0, r3
 8015a44:	f000 fd59 	bl	80164fa <USBD_CtlError>
          break;
 8015a48:	e000      	b.n	8015a4c <USBD_StdItfReq+0x94>
          break;
 8015a4a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015a4c:	e006      	b.n	8015a5c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8015a4e:	683a      	ldr	r2, [r7, #0]
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	0011      	movs	r1, r2
 8015a54:	0018      	movs	r0, r3
 8015a56:	f000 fd50 	bl	80164fa <USBD_CtlError>
      break;
 8015a5a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015a5c:	2300      	movs	r3, #0
}
 8015a5e:	0018      	movs	r0, r3
 8015a60:	46bd      	mov	sp, r7
 8015a62:	b004      	add	sp, #16
 8015a64:	bdb0      	pop	{r4, r5, r7, pc}

08015a66 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8015a66:	b5b0      	push	{r4, r5, r7, lr}
 8015a68:	b084      	sub	sp, #16
 8015a6a:	af00      	add	r7, sp, #0
 8015a6c:	6078      	str	r0, [r7, #4]
 8015a6e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015a70:	230f      	movs	r3, #15
 8015a72:	18fb      	adds	r3, r7, r3
 8015a74:	2200      	movs	r2, #0
 8015a76:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	889a      	ldrh	r2, [r3, #4]
 8015a7c:	230e      	movs	r3, #14
 8015a7e:	18fb      	adds	r3, r7, r3
 8015a80:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	781b      	ldrb	r3, [r3, #0]
 8015a86:	001a      	movs	r2, r3
 8015a88:	2360      	movs	r3, #96	@ 0x60
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	2b40      	cmp	r3, #64	@ 0x40
 8015a8e:	d006      	beq.n	8015a9e <USBD_StdEPReq+0x38>
 8015a90:	d900      	bls.n	8015a94 <USBD_StdEPReq+0x2e>
 8015a92:	e190      	b.n	8015db6 <USBD_StdEPReq+0x350>
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d00c      	beq.n	8015ab2 <USBD_StdEPReq+0x4c>
 8015a98:	2b20      	cmp	r3, #32
 8015a9a:	d000      	beq.n	8015a9e <USBD_StdEPReq+0x38>
 8015a9c:	e18b      	b.n	8015db6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	23ad      	movs	r3, #173	@ 0xad
 8015aa2:	009b      	lsls	r3, r3, #2
 8015aa4:	58d3      	ldr	r3, [r2, r3]
 8015aa6:	689b      	ldr	r3, [r3, #8]
 8015aa8:	6839      	ldr	r1, [r7, #0]
 8015aaa:	687a      	ldr	r2, [r7, #4]
 8015aac:	0010      	movs	r0, r2
 8015aae:	4798      	blx	r3
      break;
 8015ab0:	e188      	b.n	8015dc4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	001a      	movs	r2, r3
 8015ab8:	2360      	movs	r3, #96	@ 0x60
 8015aba:	4013      	ands	r3, r2
 8015abc:	2b20      	cmp	r3, #32
 8015abe:	d10f      	bne.n	8015ae0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015ac0:	687a      	ldr	r2, [r7, #4]
 8015ac2:	23ad      	movs	r3, #173	@ 0xad
 8015ac4:	009b      	lsls	r3, r3, #2
 8015ac6:	58d3      	ldr	r3, [r2, r3]
 8015ac8:	689b      	ldr	r3, [r3, #8]
 8015aca:	250f      	movs	r5, #15
 8015acc:	197c      	adds	r4, r7, r5
 8015ace:	6839      	ldr	r1, [r7, #0]
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	0010      	movs	r0, r2
 8015ad4:	4798      	blx	r3
 8015ad6:	0003      	movs	r3, r0
 8015ad8:	7023      	strb	r3, [r4, #0]

        return ret;
 8015ada:	197b      	adds	r3, r7, r5
 8015adc:	781b      	ldrb	r3, [r3, #0]
 8015ade:	e174      	b.n	8015dca <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	785b      	ldrb	r3, [r3, #1]
 8015ae4:	2b03      	cmp	r3, #3
 8015ae6:	d007      	beq.n	8015af8 <USBD_StdEPReq+0x92>
 8015ae8:	dd00      	ble.n	8015aec <USBD_StdEPReq+0x86>
 8015aea:	e15c      	b.n	8015da6 <USBD_StdEPReq+0x340>
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d100      	bne.n	8015af2 <USBD_StdEPReq+0x8c>
 8015af0:	e092      	b.n	8015c18 <USBD_StdEPReq+0x1b2>
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d04b      	beq.n	8015b8e <USBD_StdEPReq+0x128>
 8015af6:	e156      	b.n	8015da6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015af8:	687a      	ldr	r2, [r7, #4]
 8015afa:	23a7      	movs	r3, #167	@ 0xa7
 8015afc:	009b      	lsls	r3, r3, #2
 8015afe:	5cd3      	ldrb	r3, [r2, r3]
 8015b00:	2b02      	cmp	r3, #2
 8015b02:	d002      	beq.n	8015b0a <USBD_StdEPReq+0xa4>
 8015b04:	2b03      	cmp	r3, #3
 8015b06:	d01d      	beq.n	8015b44 <USBD_StdEPReq+0xde>
 8015b08:	e039      	b.n	8015b7e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b0a:	220e      	movs	r2, #14
 8015b0c:	18bb      	adds	r3, r7, r2
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d010      	beq.n	8015b36 <USBD_StdEPReq+0xd0>
 8015b14:	18bb      	adds	r3, r7, r2
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	2b80      	cmp	r3, #128	@ 0x80
 8015b1a:	d00c      	beq.n	8015b36 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015b1c:	18bb      	adds	r3, r7, r2
 8015b1e:	781a      	ldrb	r2, [r3, #0]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	0011      	movs	r1, r2
 8015b24:	0018      	movs	r0, r3
 8015b26:	f001 fa10 	bl	8016f4a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	2180      	movs	r1, #128	@ 0x80
 8015b2e:	0018      	movs	r0, r3
 8015b30:	f001 fa0b 	bl	8016f4a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b34:	e02a      	b.n	8015b8c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8015b36:	683a      	ldr	r2, [r7, #0]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	0011      	movs	r1, r2
 8015b3c:	0018      	movs	r0, r3
 8015b3e:	f000 fcdc 	bl	80164fa <USBD_CtlError>
              break;
 8015b42:	e023      	b.n	8015b8c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	885b      	ldrh	r3, [r3, #2]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d113      	bne.n	8015b74 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8015b4c:	220e      	movs	r2, #14
 8015b4e:	18bb      	adds	r3, r7, r2
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d00e      	beq.n	8015b74 <USBD_StdEPReq+0x10e>
 8015b56:	18bb      	adds	r3, r7, r2
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	2b80      	cmp	r3, #128	@ 0x80
 8015b5c:	d00a      	beq.n	8015b74 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015b5e:	683b      	ldr	r3, [r7, #0]
 8015b60:	88db      	ldrh	r3, [r3, #6]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d106      	bne.n	8015b74 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8015b66:	18bb      	adds	r3, r7, r2
 8015b68:	781a      	ldrb	r2, [r3, #0]
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	0011      	movs	r1, r2
 8015b6e:	0018      	movs	r0, r3
 8015b70:	f001 f9eb 	bl	8016f4a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	0018      	movs	r0, r3
 8015b78:	f000 fda7 	bl	80166ca <USBD_CtlSendStatus>

              break;
 8015b7c:	e006      	b.n	8015b8c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8015b7e:	683a      	ldr	r2, [r7, #0]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	0011      	movs	r1, r2
 8015b84:	0018      	movs	r0, r3
 8015b86:	f000 fcb8 	bl	80164fa <USBD_CtlError>
              break;
 8015b8a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015b8c:	e112      	b.n	8015db4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015b8e:	687a      	ldr	r2, [r7, #4]
 8015b90:	23a7      	movs	r3, #167	@ 0xa7
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	5cd3      	ldrb	r3, [r2, r3]
 8015b96:	2b02      	cmp	r3, #2
 8015b98:	d002      	beq.n	8015ba0 <USBD_StdEPReq+0x13a>
 8015b9a:	2b03      	cmp	r3, #3
 8015b9c:	d01d      	beq.n	8015bda <USBD_StdEPReq+0x174>
 8015b9e:	e032      	b.n	8015c06 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ba0:	220e      	movs	r2, #14
 8015ba2:	18bb      	adds	r3, r7, r2
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d010      	beq.n	8015bcc <USBD_StdEPReq+0x166>
 8015baa:	18bb      	adds	r3, r7, r2
 8015bac:	781b      	ldrb	r3, [r3, #0]
 8015bae:	2b80      	cmp	r3, #128	@ 0x80
 8015bb0:	d00c      	beq.n	8015bcc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015bb2:	18bb      	adds	r3, r7, r2
 8015bb4:	781a      	ldrb	r2, [r3, #0]
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	0011      	movs	r1, r2
 8015bba:	0018      	movs	r0, r3
 8015bbc:	f001 f9c5 	bl	8016f4a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	2180      	movs	r1, #128	@ 0x80
 8015bc4:	0018      	movs	r0, r3
 8015bc6:	f001 f9c0 	bl	8016f4a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015bca:	e024      	b.n	8015c16 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8015bcc:	683a      	ldr	r2, [r7, #0]
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	0011      	movs	r1, r2
 8015bd2:	0018      	movs	r0, r3
 8015bd4:	f000 fc91 	bl	80164fa <USBD_CtlError>
              break;
 8015bd8:	e01d      	b.n	8015c16 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015bda:	683b      	ldr	r3, [r7, #0]
 8015bdc:	885b      	ldrh	r3, [r3, #2]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d118      	bne.n	8015c14 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015be2:	210e      	movs	r1, #14
 8015be4:	187b      	adds	r3, r7, r1
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	227f      	movs	r2, #127	@ 0x7f
 8015bea:	4013      	ands	r3, r2
 8015bec:	d006      	beq.n	8015bfc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8015bee:	187b      	adds	r3, r7, r1
 8015bf0:	781a      	ldrb	r2, [r3, #0]
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	0011      	movs	r1, r2
 8015bf6:	0018      	movs	r0, r3
 8015bf8:	f001 f9d2 	bl	8016fa0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	0018      	movs	r0, r3
 8015c00:	f000 fd63 	bl	80166ca <USBD_CtlSendStatus>
              }
              break;
 8015c04:	e006      	b.n	8015c14 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8015c06:	683a      	ldr	r2, [r7, #0]
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	0011      	movs	r1, r2
 8015c0c:	0018      	movs	r0, r3
 8015c0e:	f000 fc74 	bl	80164fa <USBD_CtlError>
              break;
 8015c12:	e000      	b.n	8015c16 <USBD_StdEPReq+0x1b0>
              break;
 8015c14:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015c16:	e0cd      	b.n	8015db4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015c18:	687a      	ldr	r2, [r7, #4]
 8015c1a:	23a7      	movs	r3, #167	@ 0xa7
 8015c1c:	009b      	lsls	r3, r3, #2
 8015c1e:	5cd3      	ldrb	r3, [r2, r3]
 8015c20:	2b02      	cmp	r3, #2
 8015c22:	d002      	beq.n	8015c2a <USBD_StdEPReq+0x1c4>
 8015c24:	2b03      	cmp	r3, #3
 8015c26:	d03c      	beq.n	8015ca2 <USBD_StdEPReq+0x23c>
 8015c28:	e0b5      	b.n	8015d96 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c2a:	220e      	movs	r2, #14
 8015c2c:	18bb      	adds	r3, r7, r2
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d00a      	beq.n	8015c4a <USBD_StdEPReq+0x1e4>
 8015c34:	18bb      	adds	r3, r7, r2
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	2b80      	cmp	r3, #128	@ 0x80
 8015c3a:	d006      	beq.n	8015c4a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8015c3c:	683a      	ldr	r2, [r7, #0]
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	0011      	movs	r1, r2
 8015c42:	0018      	movs	r0, r3
 8015c44:	f000 fc59 	bl	80164fa <USBD_CtlError>
                break;
 8015c48:	e0ac      	b.n	8015da4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c4a:	220e      	movs	r2, #14
 8015c4c:	18bb      	adds	r3, r7, r2
 8015c4e:	781b      	ldrb	r3, [r3, #0]
 8015c50:	b25b      	sxtb	r3, r3
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	da0c      	bge.n	8015c70 <USBD_StdEPReq+0x20a>
 8015c56:	18bb      	adds	r3, r7, r2
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	227f      	movs	r2, #127	@ 0x7f
 8015c5c:	401a      	ands	r2, r3
 8015c5e:	0013      	movs	r3, r2
 8015c60:	009b      	lsls	r3, r3, #2
 8015c62:	189b      	adds	r3, r3, r2
 8015c64:	009b      	lsls	r3, r3, #2
 8015c66:	3310      	adds	r3, #16
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	18d3      	adds	r3, r2, r3
 8015c6c:	3304      	adds	r3, #4
 8015c6e:	e00d      	b.n	8015c8c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c70:	230e      	movs	r3, #14
 8015c72:	18fb      	adds	r3, r7, r3
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	227f      	movs	r2, #127	@ 0x7f
 8015c78:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c7a:	0013      	movs	r3, r2
 8015c7c:	009b      	lsls	r3, r3, #2
 8015c7e:	189b      	adds	r3, r3, r2
 8015c80:	009b      	lsls	r3, r3, #2
 8015c82:	3351      	adds	r3, #81	@ 0x51
 8015c84:	33ff      	adds	r3, #255	@ 0xff
 8015c86:	687a      	ldr	r2, [r7, #4]
 8015c88:	18d3      	adds	r3, r2, r3
 8015c8a:	3304      	adds	r3, #4
 8015c8c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015c8e:	68bb      	ldr	r3, [r7, #8]
 8015c90:	2200      	movs	r2, #0
 8015c92:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015c94:	68b9      	ldr	r1, [r7, #8]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2202      	movs	r2, #2
 8015c9a:	0018      	movs	r0, r3
 8015c9c:	f000 fcab 	bl	80165f6 <USBD_CtlSendData>
              break;
 8015ca0:	e080      	b.n	8015da4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015ca2:	220e      	movs	r2, #14
 8015ca4:	18bb      	adds	r3, r7, r2
 8015ca6:	781b      	ldrb	r3, [r3, #0]
 8015ca8:	b25b      	sxtb	r3, r3
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	da14      	bge.n	8015cd8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015cae:	18bb      	adds	r3, r7, r2
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	220f      	movs	r2, #15
 8015cb4:	401a      	ands	r2, r3
 8015cb6:	6879      	ldr	r1, [r7, #4]
 8015cb8:	0013      	movs	r3, r2
 8015cba:	009b      	lsls	r3, r3, #2
 8015cbc:	189b      	adds	r3, r3, r2
 8015cbe:	009b      	lsls	r3, r3, #2
 8015cc0:	18cb      	adds	r3, r1, r3
 8015cc2:	3318      	adds	r3, #24
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d11e      	bne.n	8015d08 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015cca:	683a      	ldr	r2, [r7, #0]
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	0011      	movs	r1, r2
 8015cd0:	0018      	movs	r0, r3
 8015cd2:	f000 fc12 	bl	80164fa <USBD_CtlError>
                  break;
 8015cd6:	e065      	b.n	8015da4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015cd8:	230e      	movs	r3, #14
 8015cda:	18fb      	adds	r3, r7, r3
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	220f      	movs	r2, #15
 8015ce0:	401a      	ands	r2, r3
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	23ac      	movs	r3, #172	@ 0xac
 8015ce6:	0059      	lsls	r1, r3, #1
 8015ce8:	0013      	movs	r3, r2
 8015cea:	009b      	lsls	r3, r3, #2
 8015cec:	189b      	adds	r3, r3, r2
 8015cee:	009b      	lsls	r3, r3, #2
 8015cf0:	18c3      	adds	r3, r0, r3
 8015cf2:	185b      	adds	r3, r3, r1
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d106      	bne.n	8015d08 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015cfa:	683a      	ldr	r2, [r7, #0]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	0011      	movs	r1, r2
 8015d00:	0018      	movs	r0, r3
 8015d02:	f000 fbfa 	bl	80164fa <USBD_CtlError>
                  break;
 8015d06:	e04d      	b.n	8015da4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d08:	220e      	movs	r2, #14
 8015d0a:	18bb      	adds	r3, r7, r2
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	b25b      	sxtb	r3, r3
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	da0c      	bge.n	8015d2e <USBD_StdEPReq+0x2c8>
 8015d14:	18bb      	adds	r3, r7, r2
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	227f      	movs	r2, #127	@ 0x7f
 8015d1a:	401a      	ands	r2, r3
 8015d1c:	0013      	movs	r3, r2
 8015d1e:	009b      	lsls	r3, r3, #2
 8015d20:	189b      	adds	r3, r3, r2
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	3310      	adds	r3, #16
 8015d26:	687a      	ldr	r2, [r7, #4]
 8015d28:	18d3      	adds	r3, r2, r3
 8015d2a:	3304      	adds	r3, #4
 8015d2c:	e00d      	b.n	8015d4a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015d2e:	230e      	movs	r3, #14
 8015d30:	18fb      	adds	r3, r7, r3
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	227f      	movs	r2, #127	@ 0x7f
 8015d36:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d38:	0013      	movs	r3, r2
 8015d3a:	009b      	lsls	r3, r3, #2
 8015d3c:	189b      	adds	r3, r3, r2
 8015d3e:	009b      	lsls	r3, r3, #2
 8015d40:	3351      	adds	r3, #81	@ 0x51
 8015d42:	33ff      	adds	r3, #255	@ 0xff
 8015d44:	687a      	ldr	r2, [r7, #4]
 8015d46:	18d3      	adds	r3, r2, r3
 8015d48:	3304      	adds	r3, #4
 8015d4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015d4c:	220e      	movs	r2, #14
 8015d4e:	18bb      	adds	r3, r7, r2
 8015d50:	781b      	ldrb	r3, [r3, #0]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d003      	beq.n	8015d5e <USBD_StdEPReq+0x2f8>
 8015d56:	18bb      	adds	r3, r7, r2
 8015d58:	781b      	ldrb	r3, [r3, #0]
 8015d5a:	2b80      	cmp	r3, #128	@ 0x80
 8015d5c:	d103      	bne.n	8015d66 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8015d5e:	68bb      	ldr	r3, [r7, #8]
 8015d60:	2200      	movs	r2, #0
 8015d62:	601a      	str	r2, [r3, #0]
 8015d64:	e010      	b.n	8015d88 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8015d66:	230e      	movs	r3, #14
 8015d68:	18fb      	adds	r3, r7, r3
 8015d6a:	781a      	ldrb	r2, [r3, #0]
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	0011      	movs	r1, r2
 8015d70:	0018      	movs	r0, r3
 8015d72:	f001 f940 	bl	8016ff6 <USBD_LL_IsStallEP>
 8015d76:	1e03      	subs	r3, r0, #0
 8015d78:	d003      	beq.n	8015d82 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	2201      	movs	r2, #1
 8015d7e:	601a      	str	r2, [r3, #0]
 8015d80:	e002      	b.n	8015d88 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8015d82:	68bb      	ldr	r3, [r7, #8]
 8015d84:	2200      	movs	r2, #0
 8015d86:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015d88:	68b9      	ldr	r1, [r7, #8]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	2202      	movs	r2, #2
 8015d8e:	0018      	movs	r0, r3
 8015d90:	f000 fc31 	bl	80165f6 <USBD_CtlSendData>
              break;
 8015d94:	e006      	b.n	8015da4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8015d96:	683a      	ldr	r2, [r7, #0]
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	0011      	movs	r1, r2
 8015d9c:	0018      	movs	r0, r3
 8015d9e:	f000 fbac 	bl	80164fa <USBD_CtlError>
              break;
 8015da2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015da4:	e006      	b.n	8015db4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8015da6:	683a      	ldr	r2, [r7, #0]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	0011      	movs	r1, r2
 8015dac:	0018      	movs	r0, r3
 8015dae:	f000 fba4 	bl	80164fa <USBD_CtlError>
          break;
 8015db2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015db4:	e006      	b.n	8015dc4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8015db6:	683a      	ldr	r2, [r7, #0]
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	0011      	movs	r1, r2
 8015dbc:	0018      	movs	r0, r3
 8015dbe:	f000 fb9c 	bl	80164fa <USBD_CtlError>
      break;
 8015dc2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015dc4:	230f      	movs	r3, #15
 8015dc6:	18fb      	adds	r3, r7, r3
 8015dc8:	781b      	ldrb	r3, [r3, #0]
}
 8015dca:	0018      	movs	r0, r3
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	b004      	add	sp, #16
 8015dd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015dd4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b084      	sub	sp, #16
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015dde:	2308      	movs	r3, #8
 8015de0:	18fb      	adds	r3, r7, r3
 8015de2:	2200      	movs	r2, #0
 8015de4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8015de6:	2300      	movs	r3, #0
 8015de8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015dea:	230b      	movs	r3, #11
 8015dec:	18fb      	adds	r3, r7, r3
 8015dee:	2200      	movs	r2, #0
 8015df0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	885b      	ldrh	r3, [r3, #2]
 8015df6:	0a1b      	lsrs	r3, r3, #8
 8015df8:	b29b      	uxth	r3, r3
 8015dfa:	2b07      	cmp	r3, #7
 8015dfc:	d900      	bls.n	8015e00 <USBD_GetDescriptor+0x2c>
 8015dfe:	e159      	b.n	80160b4 <USBD_GetDescriptor+0x2e0>
 8015e00:	009a      	lsls	r2, r3, #2
 8015e02:	4bcb      	ldr	r3, [pc, #812]	@ (8016130 <USBD_GetDescriptor+0x35c>)
 8015e04:	18d3      	adds	r3, r2, r3
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015e0a:	687a      	ldr	r2, [r7, #4]
 8015e0c:	23ac      	movs	r3, #172	@ 0xac
 8015e0e:	009b      	lsls	r3, r3, #2
 8015e10:	58d3      	ldr	r3, [r2, r3]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	687a      	ldr	r2, [r7, #4]
 8015e16:	7c12      	ldrb	r2, [r2, #16]
 8015e18:	2108      	movs	r1, #8
 8015e1a:	1879      	adds	r1, r7, r1
 8015e1c:	0010      	movs	r0, r2
 8015e1e:	4798      	blx	r3
 8015e20:	0003      	movs	r3, r0
 8015e22:	60fb      	str	r3, [r7, #12]
      break;
 8015e24:	e153      	b.n	80160ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	7c1b      	ldrb	r3, [r3, #16]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d10f      	bne.n	8015e4e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015e2e:	687a      	ldr	r2, [r7, #4]
 8015e30:	23ad      	movs	r3, #173	@ 0xad
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	58d3      	ldr	r3, [r2, r3]
 8015e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e38:	2208      	movs	r2, #8
 8015e3a:	18ba      	adds	r2, r7, r2
 8015e3c:	0010      	movs	r0, r2
 8015e3e:	4798      	blx	r3
 8015e40:	0003      	movs	r3, r0
 8015e42:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	3301      	adds	r3, #1
 8015e48:	2202      	movs	r2, #2
 8015e4a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015e4c:	e13f      	b.n	80160ce <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015e4e:	687a      	ldr	r2, [r7, #4]
 8015e50:	23ad      	movs	r3, #173	@ 0xad
 8015e52:	009b      	lsls	r3, r3, #2
 8015e54:	58d3      	ldr	r3, [r2, r3]
 8015e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e58:	2208      	movs	r2, #8
 8015e5a:	18ba      	adds	r2, r7, r2
 8015e5c:	0010      	movs	r0, r2
 8015e5e:	4798      	blx	r3
 8015e60:	0003      	movs	r3, r0
 8015e62:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	3301      	adds	r3, #1
 8015e68:	2202      	movs	r2, #2
 8015e6a:	701a      	strb	r2, [r3, #0]
      break;
 8015e6c:	e12f      	b.n	80160ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	885b      	ldrh	r3, [r3, #2]
 8015e72:	b2db      	uxtb	r3, r3
 8015e74:	2b05      	cmp	r3, #5
 8015e76:	d900      	bls.n	8015e7a <USBD_GetDescriptor+0xa6>
 8015e78:	e0d0      	b.n	801601c <USBD_GetDescriptor+0x248>
 8015e7a:	009a      	lsls	r2, r3, #2
 8015e7c:	4bad      	ldr	r3, [pc, #692]	@ (8016134 <USBD_GetDescriptor+0x360>)
 8015e7e:	18d3      	adds	r3, r2, r3
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015e84:	687a      	ldr	r2, [r7, #4]
 8015e86:	23ac      	movs	r3, #172	@ 0xac
 8015e88:	009b      	lsls	r3, r3, #2
 8015e8a:	58d3      	ldr	r3, [r2, r3]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d00d      	beq.n	8015eae <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015e92:	687a      	ldr	r2, [r7, #4]
 8015e94:	23ac      	movs	r3, #172	@ 0xac
 8015e96:	009b      	lsls	r3, r3, #2
 8015e98:	58d3      	ldr	r3, [r2, r3]
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	687a      	ldr	r2, [r7, #4]
 8015e9e:	7c12      	ldrb	r2, [r2, #16]
 8015ea0:	2108      	movs	r1, #8
 8015ea2:	1879      	adds	r1, r7, r1
 8015ea4:	0010      	movs	r0, r2
 8015ea6:	4798      	blx	r3
 8015ea8:	0003      	movs	r3, r0
 8015eaa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eac:	e0c3      	b.n	8016036 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015eae:	683a      	ldr	r2, [r7, #0]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	0011      	movs	r1, r2
 8015eb4:	0018      	movs	r0, r3
 8015eb6:	f000 fb20 	bl	80164fa <USBD_CtlError>
            err++;
 8015eba:	210b      	movs	r1, #11
 8015ebc:	187b      	adds	r3, r7, r1
 8015ebe:	781a      	ldrb	r2, [r3, #0]
 8015ec0:	187b      	adds	r3, r7, r1
 8015ec2:	3201      	adds	r2, #1
 8015ec4:	701a      	strb	r2, [r3, #0]
          break;
 8015ec6:	e0b6      	b.n	8016036 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015ec8:	687a      	ldr	r2, [r7, #4]
 8015eca:	23ac      	movs	r3, #172	@ 0xac
 8015ecc:	009b      	lsls	r3, r3, #2
 8015ece:	58d3      	ldr	r3, [r2, r3]
 8015ed0:	689b      	ldr	r3, [r3, #8]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d00d      	beq.n	8015ef2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015ed6:	687a      	ldr	r2, [r7, #4]
 8015ed8:	23ac      	movs	r3, #172	@ 0xac
 8015eda:	009b      	lsls	r3, r3, #2
 8015edc:	58d3      	ldr	r3, [r2, r3]
 8015ede:	689b      	ldr	r3, [r3, #8]
 8015ee0:	687a      	ldr	r2, [r7, #4]
 8015ee2:	7c12      	ldrb	r2, [r2, #16]
 8015ee4:	2108      	movs	r1, #8
 8015ee6:	1879      	adds	r1, r7, r1
 8015ee8:	0010      	movs	r0, r2
 8015eea:	4798      	blx	r3
 8015eec:	0003      	movs	r3, r0
 8015eee:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ef0:	e0a1      	b.n	8016036 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015ef2:	683a      	ldr	r2, [r7, #0]
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	0011      	movs	r1, r2
 8015ef8:	0018      	movs	r0, r3
 8015efa:	f000 fafe 	bl	80164fa <USBD_CtlError>
            err++;
 8015efe:	210b      	movs	r1, #11
 8015f00:	187b      	adds	r3, r7, r1
 8015f02:	781a      	ldrb	r2, [r3, #0]
 8015f04:	187b      	adds	r3, r7, r1
 8015f06:	3201      	adds	r2, #1
 8015f08:	701a      	strb	r2, [r3, #0]
          break;
 8015f0a:	e094      	b.n	8016036 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	23ac      	movs	r3, #172	@ 0xac
 8015f10:	009b      	lsls	r3, r3, #2
 8015f12:	58d3      	ldr	r3, [r2, r3]
 8015f14:	68db      	ldr	r3, [r3, #12]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d00d      	beq.n	8015f36 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015f1a:	687a      	ldr	r2, [r7, #4]
 8015f1c:	23ac      	movs	r3, #172	@ 0xac
 8015f1e:	009b      	lsls	r3, r3, #2
 8015f20:	58d3      	ldr	r3, [r2, r3]
 8015f22:	68db      	ldr	r3, [r3, #12]
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	7c12      	ldrb	r2, [r2, #16]
 8015f28:	2108      	movs	r1, #8
 8015f2a:	1879      	adds	r1, r7, r1
 8015f2c:	0010      	movs	r0, r2
 8015f2e:	4798      	blx	r3
 8015f30:	0003      	movs	r3, r0
 8015f32:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f34:	e07f      	b.n	8016036 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015f36:	683a      	ldr	r2, [r7, #0]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	0011      	movs	r1, r2
 8015f3c:	0018      	movs	r0, r3
 8015f3e:	f000 fadc 	bl	80164fa <USBD_CtlError>
            err++;
 8015f42:	210b      	movs	r1, #11
 8015f44:	187b      	adds	r3, r7, r1
 8015f46:	781a      	ldrb	r2, [r3, #0]
 8015f48:	187b      	adds	r3, r7, r1
 8015f4a:	3201      	adds	r2, #1
 8015f4c:	701a      	strb	r2, [r3, #0]
          break;
 8015f4e:	e072      	b.n	8016036 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015f50:	687a      	ldr	r2, [r7, #4]
 8015f52:	23ac      	movs	r3, #172	@ 0xac
 8015f54:	009b      	lsls	r3, r3, #2
 8015f56:	58d3      	ldr	r3, [r2, r3]
 8015f58:	691b      	ldr	r3, [r3, #16]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d00d      	beq.n	8015f7a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	23ac      	movs	r3, #172	@ 0xac
 8015f62:	009b      	lsls	r3, r3, #2
 8015f64:	58d3      	ldr	r3, [r2, r3]
 8015f66:	691b      	ldr	r3, [r3, #16]
 8015f68:	687a      	ldr	r2, [r7, #4]
 8015f6a:	7c12      	ldrb	r2, [r2, #16]
 8015f6c:	2108      	movs	r1, #8
 8015f6e:	1879      	adds	r1, r7, r1
 8015f70:	0010      	movs	r0, r2
 8015f72:	4798      	blx	r3
 8015f74:	0003      	movs	r3, r0
 8015f76:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f78:	e05d      	b.n	8016036 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015f7a:	683a      	ldr	r2, [r7, #0]
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	0011      	movs	r1, r2
 8015f80:	0018      	movs	r0, r3
 8015f82:	f000 faba 	bl	80164fa <USBD_CtlError>
            err++;
 8015f86:	210b      	movs	r1, #11
 8015f88:	187b      	adds	r3, r7, r1
 8015f8a:	781a      	ldrb	r2, [r3, #0]
 8015f8c:	187b      	adds	r3, r7, r1
 8015f8e:	3201      	adds	r2, #1
 8015f90:	701a      	strb	r2, [r3, #0]
          break;
 8015f92:	e050      	b.n	8016036 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	23ac      	movs	r3, #172	@ 0xac
 8015f98:	009b      	lsls	r3, r3, #2
 8015f9a:	58d3      	ldr	r3, [r2, r3]
 8015f9c:	695b      	ldr	r3, [r3, #20]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d00d      	beq.n	8015fbe <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015fa2:	687a      	ldr	r2, [r7, #4]
 8015fa4:	23ac      	movs	r3, #172	@ 0xac
 8015fa6:	009b      	lsls	r3, r3, #2
 8015fa8:	58d3      	ldr	r3, [r2, r3]
 8015faa:	695b      	ldr	r3, [r3, #20]
 8015fac:	687a      	ldr	r2, [r7, #4]
 8015fae:	7c12      	ldrb	r2, [r2, #16]
 8015fb0:	2108      	movs	r1, #8
 8015fb2:	1879      	adds	r1, r7, r1
 8015fb4:	0010      	movs	r0, r2
 8015fb6:	4798      	blx	r3
 8015fb8:	0003      	movs	r3, r0
 8015fba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015fbc:	e03b      	b.n	8016036 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015fbe:	683a      	ldr	r2, [r7, #0]
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	0011      	movs	r1, r2
 8015fc4:	0018      	movs	r0, r3
 8015fc6:	f000 fa98 	bl	80164fa <USBD_CtlError>
            err++;
 8015fca:	210b      	movs	r1, #11
 8015fcc:	187b      	adds	r3, r7, r1
 8015fce:	781a      	ldrb	r2, [r3, #0]
 8015fd0:	187b      	adds	r3, r7, r1
 8015fd2:	3201      	adds	r2, #1
 8015fd4:	701a      	strb	r2, [r3, #0]
          break;
 8015fd6:	e02e      	b.n	8016036 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	23ac      	movs	r3, #172	@ 0xac
 8015fdc:	009b      	lsls	r3, r3, #2
 8015fde:	58d3      	ldr	r3, [r2, r3]
 8015fe0:	699b      	ldr	r3, [r3, #24]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d00d      	beq.n	8016002 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	23ac      	movs	r3, #172	@ 0xac
 8015fea:	009b      	lsls	r3, r3, #2
 8015fec:	58d3      	ldr	r3, [r2, r3]
 8015fee:	699b      	ldr	r3, [r3, #24]
 8015ff0:	687a      	ldr	r2, [r7, #4]
 8015ff2:	7c12      	ldrb	r2, [r2, #16]
 8015ff4:	2108      	movs	r1, #8
 8015ff6:	1879      	adds	r1, r7, r1
 8015ff8:	0010      	movs	r0, r2
 8015ffa:	4798      	blx	r3
 8015ffc:	0003      	movs	r3, r0
 8015ffe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016000:	e019      	b.n	8016036 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016002:	683a      	ldr	r2, [r7, #0]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	0011      	movs	r1, r2
 8016008:	0018      	movs	r0, r3
 801600a:	f000 fa76 	bl	80164fa <USBD_CtlError>
            err++;
 801600e:	210b      	movs	r1, #11
 8016010:	187b      	adds	r3, r7, r1
 8016012:	781a      	ldrb	r2, [r3, #0]
 8016014:	187b      	adds	r3, r7, r1
 8016016:	3201      	adds	r2, #1
 8016018:	701a      	strb	r2, [r3, #0]
          break;
 801601a:	e00c      	b.n	8016036 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801601c:	683a      	ldr	r2, [r7, #0]
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	0011      	movs	r1, r2
 8016022:	0018      	movs	r0, r3
 8016024:	f000 fa69 	bl	80164fa <USBD_CtlError>
          err++;
 8016028:	210b      	movs	r1, #11
 801602a:	187b      	adds	r3, r7, r1
 801602c:	781a      	ldrb	r2, [r3, #0]
 801602e:	187b      	adds	r3, r7, r1
 8016030:	3201      	adds	r2, #1
 8016032:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8016034:	e04b      	b.n	80160ce <USBD_GetDescriptor+0x2fa>
 8016036:	e04a      	b.n	80160ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	7c1b      	ldrb	r3, [r3, #16]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d10b      	bne.n	8016058 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016040:	687a      	ldr	r2, [r7, #4]
 8016042:	23ad      	movs	r3, #173	@ 0xad
 8016044:	009b      	lsls	r3, r3, #2
 8016046:	58d3      	ldr	r3, [r2, r3]
 8016048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801604a:	2208      	movs	r2, #8
 801604c:	18ba      	adds	r2, r7, r2
 801604e:	0010      	movs	r0, r2
 8016050:	4798      	blx	r3
 8016052:	0003      	movs	r3, r0
 8016054:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016056:	e03a      	b.n	80160ce <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8016058:	683a      	ldr	r2, [r7, #0]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	0011      	movs	r1, r2
 801605e:	0018      	movs	r0, r3
 8016060:	f000 fa4b 	bl	80164fa <USBD_CtlError>
        err++;
 8016064:	210b      	movs	r1, #11
 8016066:	187b      	adds	r3, r7, r1
 8016068:	781a      	ldrb	r2, [r3, #0]
 801606a:	187b      	adds	r3, r7, r1
 801606c:	3201      	adds	r2, #1
 801606e:	701a      	strb	r2, [r3, #0]
      break;
 8016070:	e02d      	b.n	80160ce <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	7c1b      	ldrb	r3, [r3, #16]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d10f      	bne.n	801609a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801607a:	687a      	ldr	r2, [r7, #4]
 801607c:	23ad      	movs	r3, #173	@ 0xad
 801607e:	009b      	lsls	r3, r3, #2
 8016080:	58d3      	ldr	r3, [r2, r3]
 8016082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016084:	2208      	movs	r2, #8
 8016086:	18ba      	adds	r2, r7, r2
 8016088:	0010      	movs	r0, r2
 801608a:	4798      	blx	r3
 801608c:	0003      	movs	r3, r0
 801608e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	3301      	adds	r3, #1
 8016094:	2207      	movs	r2, #7
 8016096:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016098:	e019      	b.n	80160ce <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801609a:	683a      	ldr	r2, [r7, #0]
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	0011      	movs	r1, r2
 80160a0:	0018      	movs	r0, r3
 80160a2:	f000 fa2a 	bl	80164fa <USBD_CtlError>
        err++;
 80160a6:	210b      	movs	r1, #11
 80160a8:	187b      	adds	r3, r7, r1
 80160aa:	781a      	ldrb	r2, [r3, #0]
 80160ac:	187b      	adds	r3, r7, r1
 80160ae:	3201      	adds	r2, #1
 80160b0:	701a      	strb	r2, [r3, #0]
      break;
 80160b2:	e00c      	b.n	80160ce <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80160b4:	683a      	ldr	r2, [r7, #0]
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	0011      	movs	r1, r2
 80160ba:	0018      	movs	r0, r3
 80160bc:	f000 fa1d 	bl	80164fa <USBD_CtlError>
      err++;
 80160c0:	210b      	movs	r1, #11
 80160c2:	187b      	adds	r3, r7, r1
 80160c4:	781a      	ldrb	r2, [r3, #0]
 80160c6:	187b      	adds	r3, r7, r1
 80160c8:	3201      	adds	r2, #1
 80160ca:	701a      	strb	r2, [r3, #0]
      break;
 80160cc:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80160ce:	230b      	movs	r3, #11
 80160d0:	18fb      	adds	r3, r7, r3
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d127      	bne.n	8016128 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80160d8:	2108      	movs	r1, #8
 80160da:	187b      	adds	r3, r7, r1
 80160dc:	881b      	ldrh	r3, [r3, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d019      	beq.n	8016116 <USBD_GetDescriptor+0x342>
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	88db      	ldrh	r3, [r3, #6]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d015      	beq.n	8016116 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	88da      	ldrh	r2, [r3, #6]
 80160ee:	187b      	adds	r3, r7, r1
 80160f0:	881b      	ldrh	r3, [r3, #0]
 80160f2:	1c18      	adds	r0, r3, #0
 80160f4:	1c11      	adds	r1, r2, #0
 80160f6:	b28a      	uxth	r2, r1
 80160f8:	b283      	uxth	r3, r0
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d900      	bls.n	8016100 <USBD_GetDescriptor+0x32c>
 80160fe:	1c01      	adds	r1, r0, #0
 8016100:	b28a      	uxth	r2, r1
 8016102:	2108      	movs	r1, #8
 8016104:	187b      	adds	r3, r7, r1
 8016106:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016108:	187b      	adds	r3, r7, r1
 801610a:	881a      	ldrh	r2, [r3, #0]
 801610c:	68f9      	ldr	r1, [r7, #12]
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	0018      	movs	r0, r3
 8016112:	f000 fa70 	bl	80165f6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	88db      	ldrh	r3, [r3, #6]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d105      	bne.n	801612a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	0018      	movs	r0, r3
 8016122:	f000 fad2 	bl	80166ca <USBD_CtlSendStatus>
 8016126:	e000      	b.n	801612a <USBD_GetDescriptor+0x356>
    return;
 8016128:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801612a:	46bd      	mov	sp, r7
 801612c:	b004      	add	sp, #16
 801612e:	bd80      	pop	{r7, pc}
 8016130:	0801ba04 	.word	0x0801ba04
 8016134:	0801ba24 	.word	0x0801ba24

08016138 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016138:	b590      	push	{r4, r7, lr}
 801613a:	b085      	sub	sp, #20
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016142:	683b      	ldr	r3, [r7, #0]
 8016144:	889b      	ldrh	r3, [r3, #4]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d13d      	bne.n	80161c6 <USBD_SetAddress+0x8e>
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	88db      	ldrh	r3, [r3, #6]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d139      	bne.n	80161c6 <USBD_SetAddress+0x8e>
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	885b      	ldrh	r3, [r3, #2]
 8016156:	2b7f      	cmp	r3, #127	@ 0x7f
 8016158:	d835      	bhi.n	80161c6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	885b      	ldrh	r3, [r3, #2]
 801615e:	b2da      	uxtb	r2, r3
 8016160:	230f      	movs	r3, #15
 8016162:	18fb      	adds	r3, r7, r3
 8016164:	217f      	movs	r1, #127	@ 0x7f
 8016166:	400a      	ands	r2, r1
 8016168:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	23a7      	movs	r3, #167	@ 0xa7
 801616e:	009b      	lsls	r3, r3, #2
 8016170:	5cd3      	ldrb	r3, [r2, r3]
 8016172:	2b03      	cmp	r3, #3
 8016174:	d106      	bne.n	8016184 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8016176:	683a      	ldr	r2, [r7, #0]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	0011      	movs	r1, r2
 801617c:	0018      	movs	r0, r3
 801617e:	f000 f9bc 	bl	80164fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016182:	e027      	b.n	80161d4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	240f      	movs	r4, #15
 8016188:	193a      	adds	r2, r7, r4
 801618a:	4914      	ldr	r1, [pc, #80]	@ (80161dc <USBD_SetAddress+0xa4>)
 801618c:	7812      	ldrb	r2, [r2, #0]
 801618e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016190:	193b      	adds	r3, r7, r4
 8016192:	781a      	ldrb	r2, [r3, #0]
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	0011      	movs	r1, r2
 8016198:	0018      	movs	r0, r3
 801619a:	f000 ff5d 	bl	8017058 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	0018      	movs	r0, r3
 80161a2:	f000 fa92 	bl	80166ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80161a6:	193b      	adds	r3, r7, r4
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d005      	beq.n	80161ba <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80161ae:	687a      	ldr	r2, [r7, #4]
 80161b0:	23a7      	movs	r3, #167	@ 0xa7
 80161b2:	009b      	lsls	r3, r3, #2
 80161b4:	2102      	movs	r1, #2
 80161b6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161b8:	e00c      	b.n	80161d4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80161ba:	687a      	ldr	r2, [r7, #4]
 80161bc:	23a7      	movs	r3, #167	@ 0xa7
 80161be:	009b      	lsls	r3, r3, #2
 80161c0:	2101      	movs	r1, #1
 80161c2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161c4:	e006      	b.n	80161d4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80161c6:	683a      	ldr	r2, [r7, #0]
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	0011      	movs	r1, r2
 80161cc:	0018      	movs	r0, r3
 80161ce:	f000 f994 	bl	80164fa <USBD_CtlError>
  }
}
 80161d2:	46c0      	nop			@ (mov r8, r8)
 80161d4:	46c0      	nop			@ (mov r8, r8)
 80161d6:	46bd      	mov	sp, r7
 80161d8:	b005      	add	sp, #20
 80161da:	bd90      	pop	{r4, r7, pc}
 80161dc:	0000029e 	.word	0x0000029e

080161e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b082      	sub	sp, #8
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	885b      	ldrh	r3, [r3, #2]
 80161ee:	b2da      	uxtb	r2, r3
 80161f0:	4b4c      	ldr	r3, [pc, #304]	@ (8016324 <USBD_SetConfig+0x144>)
 80161f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80161f4:	4b4b      	ldr	r3, [pc, #300]	@ (8016324 <USBD_SetConfig+0x144>)
 80161f6:	781b      	ldrb	r3, [r3, #0]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d906      	bls.n	801620a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80161fc:	683a      	ldr	r2, [r7, #0]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	0011      	movs	r1, r2
 8016202:	0018      	movs	r0, r3
 8016204:	f000 f979 	bl	80164fa <USBD_CtlError>
 8016208:	e088      	b.n	801631c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801620a:	687a      	ldr	r2, [r7, #4]
 801620c:	23a7      	movs	r3, #167	@ 0xa7
 801620e:	009b      	lsls	r3, r3, #2
 8016210:	5cd3      	ldrb	r3, [r2, r3]
 8016212:	2b02      	cmp	r3, #2
 8016214:	d002      	beq.n	801621c <USBD_SetConfig+0x3c>
 8016216:	2b03      	cmp	r3, #3
 8016218:	d029      	beq.n	801626e <USBD_SetConfig+0x8e>
 801621a:	e071      	b.n	8016300 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801621c:	4b41      	ldr	r3, [pc, #260]	@ (8016324 <USBD_SetConfig+0x144>)
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d01f      	beq.n	8016264 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8016224:	4b3f      	ldr	r3, [pc, #252]	@ (8016324 <USBD_SetConfig+0x144>)
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	001a      	movs	r2, r3
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801622e:	687a      	ldr	r2, [r7, #4]
 8016230:	23a7      	movs	r3, #167	@ 0xa7
 8016232:	009b      	lsls	r3, r3, #2
 8016234:	2103      	movs	r1, #3
 8016236:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8016238:	4b3a      	ldr	r3, [pc, #232]	@ (8016324 <USBD_SetConfig+0x144>)
 801623a:	781a      	ldrb	r2, [r3, #0]
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	0011      	movs	r1, r2
 8016240:	0018      	movs	r0, r3
 8016242:	f7ff f8c6 	bl	80153d2 <USBD_SetClassConfig>
 8016246:	0003      	movs	r3, r0
 8016248:	2b02      	cmp	r3, #2
 801624a:	d106      	bne.n	801625a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801624c:	683a      	ldr	r2, [r7, #0]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	0011      	movs	r1, r2
 8016252:	0018      	movs	r0, r3
 8016254:	f000 f951 	bl	80164fa <USBD_CtlError>
            return;
 8016258:	e060      	b.n	801631c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	0018      	movs	r0, r3
 801625e:	f000 fa34 	bl	80166ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8016262:	e05b      	b.n	801631c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	0018      	movs	r0, r3
 8016268:	f000 fa2f 	bl	80166ca <USBD_CtlSendStatus>
        break;
 801626c:	e056      	b.n	801631c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801626e:	4b2d      	ldr	r3, [pc, #180]	@ (8016324 <USBD_SetConfig+0x144>)
 8016270:	781b      	ldrb	r3, [r3, #0]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d115      	bne.n	80162a2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016276:	687a      	ldr	r2, [r7, #4]
 8016278:	23a7      	movs	r3, #167	@ 0xa7
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	2102      	movs	r1, #2
 801627e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8016280:	4b28      	ldr	r3, [pc, #160]	@ (8016324 <USBD_SetConfig+0x144>)
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	001a      	movs	r2, r3
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801628a:	4b26      	ldr	r3, [pc, #152]	@ (8016324 <USBD_SetConfig+0x144>)
 801628c:	781a      	ldrb	r2, [r3, #0]
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	0011      	movs	r1, r2
 8016292:	0018      	movs	r0, r3
 8016294:	f7ff f8c4 	bl	8015420 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	0018      	movs	r0, r3
 801629c:	f000 fa15 	bl	80166ca <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80162a0:	e03c      	b.n	801631c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80162a2:	4b20      	ldr	r3, [pc, #128]	@ (8016324 <USBD_SetConfig+0x144>)
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	001a      	movs	r2, r3
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	685b      	ldr	r3, [r3, #4]
 80162ac:	429a      	cmp	r2, r3
 80162ae:	d022      	beq.n	80162f6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	685b      	ldr	r3, [r3, #4]
 80162b4:	b2da      	uxtb	r2, r3
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	0011      	movs	r1, r2
 80162ba:	0018      	movs	r0, r3
 80162bc:	f7ff f8b0 	bl	8015420 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80162c0:	4b18      	ldr	r3, [pc, #96]	@ (8016324 <USBD_SetConfig+0x144>)
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	001a      	movs	r2, r3
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80162ca:	4b16      	ldr	r3, [pc, #88]	@ (8016324 <USBD_SetConfig+0x144>)
 80162cc:	781a      	ldrb	r2, [r3, #0]
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	0011      	movs	r1, r2
 80162d2:	0018      	movs	r0, r3
 80162d4:	f7ff f87d 	bl	80153d2 <USBD_SetClassConfig>
 80162d8:	0003      	movs	r3, r0
 80162da:	2b02      	cmp	r3, #2
 80162dc:	d106      	bne.n	80162ec <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80162de:	683a      	ldr	r2, [r7, #0]
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	0011      	movs	r1, r2
 80162e4:	0018      	movs	r0, r3
 80162e6:	f000 f908 	bl	80164fa <USBD_CtlError>
            return;
 80162ea:	e017      	b.n	801631c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	0018      	movs	r0, r3
 80162f0:	f000 f9eb 	bl	80166ca <USBD_CtlSendStatus>
        break;
 80162f4:	e012      	b.n	801631c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	0018      	movs	r0, r3
 80162fa:	f000 f9e6 	bl	80166ca <USBD_CtlSendStatus>
        break;
 80162fe:	e00d      	b.n	801631c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8016300:	683a      	ldr	r2, [r7, #0]
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	0011      	movs	r1, r2
 8016306:	0018      	movs	r0, r3
 8016308:	f000 f8f7 	bl	80164fa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801630c:	4b05      	ldr	r3, [pc, #20]	@ (8016324 <USBD_SetConfig+0x144>)
 801630e:	781a      	ldrb	r2, [r3, #0]
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	0011      	movs	r1, r2
 8016314:	0018      	movs	r0, r3
 8016316:	f7ff f883 	bl	8015420 <USBD_ClrClassConfig>
        break;
 801631a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801631c:	46bd      	mov	sp, r7
 801631e:	b002      	add	sp, #8
 8016320:	bd80      	pop	{r7, pc}
 8016322:	46c0      	nop			@ (mov r8, r8)
 8016324:	20002b2c 	.word	0x20002b2c

08016328 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b082      	sub	sp, #8
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
 8016330:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	88db      	ldrh	r3, [r3, #6]
 8016336:	2b01      	cmp	r3, #1
 8016338:	d006      	beq.n	8016348 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801633a:	683a      	ldr	r2, [r7, #0]
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	0011      	movs	r1, r2
 8016340:	0018      	movs	r0, r3
 8016342:	f000 f8da 	bl	80164fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016346:	e026      	b.n	8016396 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8016348:	687a      	ldr	r2, [r7, #4]
 801634a:	23a7      	movs	r3, #167	@ 0xa7
 801634c:	009b      	lsls	r3, r3, #2
 801634e:	5cd3      	ldrb	r3, [r2, r3]
 8016350:	2b02      	cmp	r3, #2
 8016352:	dc02      	bgt.n	801635a <USBD_GetConfig+0x32>
 8016354:	2b00      	cmp	r3, #0
 8016356:	dc03      	bgt.n	8016360 <USBD_GetConfig+0x38>
 8016358:	e016      	b.n	8016388 <USBD_GetConfig+0x60>
 801635a:	2b03      	cmp	r3, #3
 801635c:	d00c      	beq.n	8016378 <USBD_GetConfig+0x50>
 801635e:	e013      	b.n	8016388 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2200      	movs	r2, #0
 8016364:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	3308      	adds	r3, #8
 801636a:	0019      	movs	r1, r3
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2201      	movs	r2, #1
 8016370:	0018      	movs	r0, r3
 8016372:	f000 f940 	bl	80165f6 <USBD_CtlSendData>
        break;
 8016376:	e00e      	b.n	8016396 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	1d19      	adds	r1, r3, #4
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2201      	movs	r2, #1
 8016380:	0018      	movs	r0, r3
 8016382:	f000 f938 	bl	80165f6 <USBD_CtlSendData>
        break;
 8016386:	e006      	b.n	8016396 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8016388:	683a      	ldr	r2, [r7, #0]
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	0011      	movs	r1, r2
 801638e:	0018      	movs	r0, r3
 8016390:	f000 f8b3 	bl	80164fa <USBD_CtlError>
        break;
 8016394:	46c0      	nop			@ (mov r8, r8)
}
 8016396:	46c0      	nop			@ (mov r8, r8)
 8016398:	46bd      	mov	sp, r7
 801639a:	b002      	add	sp, #8
 801639c:	bd80      	pop	{r7, pc}

0801639e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801639e:	b580      	push	{r7, lr}
 80163a0:	b082      	sub	sp, #8
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	6078      	str	r0, [r7, #4]
 80163a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80163a8:	687a      	ldr	r2, [r7, #4]
 80163aa:	23a7      	movs	r3, #167	@ 0xa7
 80163ac:	009b      	lsls	r3, r3, #2
 80163ae:	5cd3      	ldrb	r3, [r2, r3]
 80163b0:	3b01      	subs	r3, #1
 80163b2:	2b02      	cmp	r3, #2
 80163b4:	d822      	bhi.n	80163fc <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80163b6:	683b      	ldr	r3, [r7, #0]
 80163b8:	88db      	ldrh	r3, [r3, #6]
 80163ba:	2b02      	cmp	r3, #2
 80163bc:	d006      	beq.n	80163cc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80163be:	683a      	ldr	r2, [r7, #0]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	0011      	movs	r1, r2
 80163c4:	0018      	movs	r0, r3
 80163c6:	f000 f898 	bl	80164fa <USBD_CtlError>
        break;
 80163ca:	e01e      	b.n	801640a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2201      	movs	r2, #1
 80163d0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80163d2:	687a      	ldr	r2, [r7, #4]
 80163d4:	23a9      	movs	r3, #169	@ 0xa9
 80163d6:	009b      	lsls	r3, r3, #2
 80163d8:	58d3      	ldr	r3, [r2, r3]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d005      	beq.n	80163ea <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	68db      	ldr	r3, [r3, #12]
 80163e2:	2202      	movs	r2, #2
 80163e4:	431a      	orrs	r2, r3
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	330c      	adds	r3, #12
 80163ee:	0019      	movs	r1, r3
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2202      	movs	r2, #2
 80163f4:	0018      	movs	r0, r3
 80163f6:	f000 f8fe 	bl	80165f6 <USBD_CtlSendData>
      break;
 80163fa:	e006      	b.n	801640a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80163fc:	683a      	ldr	r2, [r7, #0]
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	0011      	movs	r1, r2
 8016402:	0018      	movs	r0, r3
 8016404:	f000 f879 	bl	80164fa <USBD_CtlError>
      break;
 8016408:	46c0      	nop			@ (mov r8, r8)
  }
}
 801640a:	46c0      	nop			@ (mov r8, r8)
 801640c:	46bd      	mov	sp, r7
 801640e:	b002      	add	sp, #8
 8016410:	bd80      	pop	{r7, pc}

08016412 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016412:	b580      	push	{r7, lr}
 8016414:	b082      	sub	sp, #8
 8016416:	af00      	add	r7, sp, #0
 8016418:	6078      	str	r0, [r7, #4]
 801641a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	885b      	ldrh	r3, [r3, #2]
 8016420:	2b01      	cmp	r3, #1
 8016422:	d108      	bne.n	8016436 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8016424:	687a      	ldr	r2, [r7, #4]
 8016426:	23a9      	movs	r3, #169	@ 0xa9
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	2101      	movs	r1, #1
 801642c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	0018      	movs	r0, r3
 8016432:	f000 f94a 	bl	80166ca <USBD_CtlSendStatus>
  }
}
 8016436:	46c0      	nop			@ (mov r8, r8)
 8016438:	46bd      	mov	sp, r7
 801643a:	b002      	add	sp, #8
 801643c:	bd80      	pop	{r7, pc}

0801643e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801643e:	b580      	push	{r7, lr}
 8016440:	b082      	sub	sp, #8
 8016442:	af00      	add	r7, sp, #0
 8016444:	6078      	str	r0, [r7, #4]
 8016446:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016448:	687a      	ldr	r2, [r7, #4]
 801644a:	23a7      	movs	r3, #167	@ 0xa7
 801644c:	009b      	lsls	r3, r3, #2
 801644e:	5cd3      	ldrb	r3, [r2, r3]
 8016450:	3b01      	subs	r3, #1
 8016452:	2b02      	cmp	r3, #2
 8016454:	d80d      	bhi.n	8016472 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	885b      	ldrh	r3, [r3, #2]
 801645a:	2b01      	cmp	r3, #1
 801645c:	d110      	bne.n	8016480 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801645e:	687a      	ldr	r2, [r7, #4]
 8016460:	23a9      	movs	r3, #169	@ 0xa9
 8016462:	009b      	lsls	r3, r3, #2
 8016464:	2100      	movs	r1, #0
 8016466:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	0018      	movs	r0, r3
 801646c:	f000 f92d 	bl	80166ca <USBD_CtlSendStatus>
      }
      break;
 8016470:	e006      	b.n	8016480 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8016472:	683a      	ldr	r2, [r7, #0]
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	0011      	movs	r1, r2
 8016478:	0018      	movs	r0, r3
 801647a:	f000 f83e 	bl	80164fa <USBD_CtlError>
      break;
 801647e:	e000      	b.n	8016482 <USBD_ClrFeature+0x44>
      break;
 8016480:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016482:	46c0      	nop			@ (mov r8, r8)
 8016484:	46bd      	mov	sp, r7
 8016486:	b002      	add	sp, #8
 8016488:	bd80      	pop	{r7, pc}

0801648a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801648a:	b580      	push	{r7, lr}
 801648c:	b082      	sub	sp, #8
 801648e:	af00      	add	r7, sp, #0
 8016490:	6078      	str	r0, [r7, #4]
 8016492:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	781a      	ldrb	r2, [r3, #0]
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	785a      	ldrb	r2, [r3, #1]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	3302      	adds	r3, #2
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	001a      	movs	r2, r3
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	3303      	adds	r3, #3
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	021b      	lsls	r3, r3, #8
 80164b4:	b29b      	uxth	r3, r3
 80164b6:	18d3      	adds	r3, r2, r3
 80164b8:	b29a      	uxth	r2, r3
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80164be:	683b      	ldr	r3, [r7, #0]
 80164c0:	3304      	adds	r3, #4
 80164c2:	781b      	ldrb	r3, [r3, #0]
 80164c4:	001a      	movs	r2, r3
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	3305      	adds	r3, #5
 80164ca:	781b      	ldrb	r3, [r3, #0]
 80164cc:	021b      	lsls	r3, r3, #8
 80164ce:	b29b      	uxth	r3, r3
 80164d0:	18d3      	adds	r3, r2, r3
 80164d2:	b29a      	uxth	r2, r3
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	3306      	adds	r3, #6
 80164dc:	781b      	ldrb	r3, [r3, #0]
 80164de:	001a      	movs	r2, r3
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	3307      	adds	r3, #7
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	021b      	lsls	r3, r3, #8
 80164e8:	b29b      	uxth	r3, r3
 80164ea:	18d3      	adds	r3, r2, r3
 80164ec:	b29a      	uxth	r2, r3
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	80da      	strh	r2, [r3, #6]

}
 80164f2:	46c0      	nop			@ (mov r8, r8)
 80164f4:	46bd      	mov	sp, r7
 80164f6:	b002      	add	sp, #8
 80164f8:	bd80      	pop	{r7, pc}

080164fa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80164fa:	b580      	push	{r7, lr}
 80164fc:	b082      	sub	sp, #8
 80164fe:	af00      	add	r7, sp, #0
 8016500:	6078      	str	r0, [r7, #4]
 8016502:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	2180      	movs	r1, #128	@ 0x80
 8016508:	0018      	movs	r0, r3
 801650a:	f000 fd1e 	bl	8016f4a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	2100      	movs	r1, #0
 8016512:	0018      	movs	r0, r3
 8016514:	f000 fd19 	bl	8016f4a <USBD_LL_StallEP>
}
 8016518:	46c0      	nop			@ (mov r8, r8)
 801651a:	46bd      	mov	sp, r7
 801651c:	b002      	add	sp, #8
 801651e:	bd80      	pop	{r7, pc}

08016520 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016520:	b590      	push	{r4, r7, lr}
 8016522:	b087      	sub	sp, #28
 8016524:	af00      	add	r7, sp, #0
 8016526:	60f8      	str	r0, [r7, #12]
 8016528:	60b9      	str	r1, [r7, #8]
 801652a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801652c:	2417      	movs	r4, #23
 801652e:	193b      	adds	r3, r7, r4
 8016530:	2200      	movs	r2, #0
 8016532:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d03c      	beq.n	80165b4 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	0018      	movs	r0, r3
 801653e:	f000 f83d 	bl	80165bc <USBD_GetLen>
 8016542:	0003      	movs	r3, r0
 8016544:	3301      	adds	r3, #1
 8016546:	b29b      	uxth	r3, r3
 8016548:	18db      	adds	r3, r3, r3
 801654a:	b29a      	uxth	r2, r3
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8016550:	193b      	adds	r3, r7, r4
 8016552:	781b      	ldrb	r3, [r3, #0]
 8016554:	193a      	adds	r2, r7, r4
 8016556:	1c59      	adds	r1, r3, #1
 8016558:	7011      	strb	r1, [r2, #0]
 801655a:	001a      	movs	r2, r3
 801655c:	68bb      	ldr	r3, [r7, #8]
 801655e:	189b      	adds	r3, r3, r2
 8016560:	687a      	ldr	r2, [r7, #4]
 8016562:	7812      	ldrb	r2, [r2, #0]
 8016564:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8016566:	193b      	adds	r3, r7, r4
 8016568:	781b      	ldrb	r3, [r3, #0]
 801656a:	193a      	adds	r2, r7, r4
 801656c:	1c59      	adds	r1, r3, #1
 801656e:	7011      	strb	r1, [r2, #0]
 8016570:	001a      	movs	r2, r3
 8016572:	68bb      	ldr	r3, [r7, #8]
 8016574:	189b      	adds	r3, r3, r2
 8016576:	2203      	movs	r2, #3
 8016578:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801657a:	e017      	b.n	80165ac <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	1c5a      	adds	r2, r3, #1
 8016580:	60fa      	str	r2, [r7, #12]
 8016582:	2417      	movs	r4, #23
 8016584:	193a      	adds	r2, r7, r4
 8016586:	7812      	ldrb	r2, [r2, #0]
 8016588:	1939      	adds	r1, r7, r4
 801658a:	1c50      	adds	r0, r2, #1
 801658c:	7008      	strb	r0, [r1, #0]
 801658e:	0011      	movs	r1, r2
 8016590:	68ba      	ldr	r2, [r7, #8]
 8016592:	1852      	adds	r2, r2, r1
 8016594:	781b      	ldrb	r3, [r3, #0]
 8016596:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8016598:	193b      	adds	r3, r7, r4
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	193a      	adds	r2, r7, r4
 801659e:	1c59      	adds	r1, r3, #1
 80165a0:	7011      	strb	r1, [r2, #0]
 80165a2:	001a      	movs	r2, r3
 80165a4:	68bb      	ldr	r3, [r7, #8]
 80165a6:	189b      	adds	r3, r3, r2
 80165a8:	2200      	movs	r2, #0
 80165aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	781b      	ldrb	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d1e3      	bne.n	801657c <USBD_GetString+0x5c>
    }
  }
}
 80165b4:	46c0      	nop			@ (mov r8, r8)
 80165b6:	46bd      	mov	sp, r7
 80165b8:	b007      	add	sp, #28
 80165ba:	bd90      	pop	{r4, r7, pc}

080165bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	b084      	sub	sp, #16
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80165c4:	230f      	movs	r3, #15
 80165c6:	18fb      	adds	r3, r7, r3
 80165c8:	2200      	movs	r2, #0
 80165ca:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80165cc:	e008      	b.n	80165e0 <USBD_GetLen+0x24>
  {
    len++;
 80165ce:	210f      	movs	r1, #15
 80165d0:	187b      	adds	r3, r7, r1
 80165d2:	781a      	ldrb	r2, [r3, #0]
 80165d4:	187b      	adds	r3, r7, r1
 80165d6:	3201      	adds	r2, #1
 80165d8:	701a      	strb	r2, [r3, #0]
    buf++;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	3301      	adds	r3, #1
 80165de:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	781b      	ldrb	r3, [r3, #0]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d1f2      	bne.n	80165ce <USBD_GetLen+0x12>
  }

  return len;
 80165e8:	230f      	movs	r3, #15
 80165ea:	18fb      	adds	r3, r7, r3
 80165ec:	781b      	ldrb	r3, [r3, #0]
}
 80165ee:	0018      	movs	r0, r3
 80165f0:	46bd      	mov	sp, r7
 80165f2:	b004      	add	sp, #16
 80165f4:	bd80      	pop	{r7, pc}

080165f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80165f6:	b580      	push	{r7, lr}
 80165f8:	b084      	sub	sp, #16
 80165fa:	af00      	add	r7, sp, #0
 80165fc:	60f8      	str	r0, [r7, #12]
 80165fe:	60b9      	str	r1, [r7, #8]
 8016600:	1dbb      	adds	r3, r7, #6
 8016602:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016604:	68fa      	ldr	r2, [r7, #12]
 8016606:	23a5      	movs	r3, #165	@ 0xa5
 8016608:	009b      	lsls	r3, r3, #2
 801660a:	2102      	movs	r1, #2
 801660c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801660e:	1dbb      	adds	r3, r7, #6
 8016610:	881a      	ldrh	r2, [r3, #0]
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8016616:	1dbb      	adds	r3, r7, #6
 8016618:	881a      	ldrh	r2, [r3, #0]
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801661e:	1dbb      	adds	r3, r7, #6
 8016620:	881b      	ldrh	r3, [r3, #0]
 8016622:	68ba      	ldr	r2, [r7, #8]
 8016624:	68f8      	ldr	r0, [r7, #12]
 8016626:	2100      	movs	r1, #0
 8016628:	f000 fd41 	bl	80170ae <USBD_LL_Transmit>

  return USBD_OK;
 801662c:	2300      	movs	r3, #0
}
 801662e:	0018      	movs	r0, r3
 8016630:	46bd      	mov	sp, r7
 8016632:	b004      	add	sp, #16
 8016634:	bd80      	pop	{r7, pc}

08016636 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8016636:	b580      	push	{r7, lr}
 8016638:	b084      	sub	sp, #16
 801663a:	af00      	add	r7, sp, #0
 801663c:	60f8      	str	r0, [r7, #12]
 801663e:	60b9      	str	r1, [r7, #8]
 8016640:	1dbb      	adds	r3, r7, #6
 8016642:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016644:	1dbb      	adds	r3, r7, #6
 8016646:	881b      	ldrh	r3, [r3, #0]
 8016648:	68ba      	ldr	r2, [r7, #8]
 801664a:	68f8      	ldr	r0, [r7, #12]
 801664c:	2100      	movs	r1, #0
 801664e:	f000 fd2e 	bl	80170ae <USBD_LL_Transmit>

  return USBD_OK;
 8016652:	2300      	movs	r3, #0
}
 8016654:	0018      	movs	r0, r3
 8016656:	46bd      	mov	sp, r7
 8016658:	b004      	add	sp, #16
 801665a:	bd80      	pop	{r7, pc}

0801665c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b084      	sub	sp, #16
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	1dbb      	adds	r3, r7, #6
 8016668:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801666a:	68fa      	ldr	r2, [r7, #12]
 801666c:	23a5      	movs	r3, #165	@ 0xa5
 801666e:	009b      	lsls	r3, r3, #2
 8016670:	2103      	movs	r1, #3
 8016672:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8016674:	1dbb      	adds	r3, r7, #6
 8016676:	8819      	ldrh	r1, [r3, #0]
 8016678:	68fa      	ldr	r2, [r7, #12]
 801667a:	23ae      	movs	r3, #174	@ 0xae
 801667c:	005b      	lsls	r3, r3, #1
 801667e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8016680:	1dbb      	adds	r3, r7, #6
 8016682:	8819      	ldrh	r1, [r3, #0]
 8016684:	68fa      	ldr	r2, [r7, #12]
 8016686:	23b0      	movs	r3, #176	@ 0xb0
 8016688:	005b      	lsls	r3, r3, #1
 801668a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801668c:	1dbb      	adds	r3, r7, #6
 801668e:	881b      	ldrh	r3, [r3, #0]
 8016690:	68ba      	ldr	r2, [r7, #8]
 8016692:	68f8      	ldr	r0, [r7, #12]
 8016694:	2100      	movs	r1, #0
 8016696:	f000 fd41 	bl	801711c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801669a:	2300      	movs	r3, #0
}
 801669c:	0018      	movs	r0, r3
 801669e:	46bd      	mov	sp, r7
 80166a0:	b004      	add	sp, #16
 80166a2:	bd80      	pop	{r7, pc}

080166a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b084      	sub	sp, #16
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	60f8      	str	r0, [r7, #12]
 80166ac:	60b9      	str	r1, [r7, #8]
 80166ae:	1dbb      	adds	r3, r7, #6
 80166b0:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80166b2:	1dbb      	adds	r3, r7, #6
 80166b4:	881b      	ldrh	r3, [r3, #0]
 80166b6:	68ba      	ldr	r2, [r7, #8]
 80166b8:	68f8      	ldr	r0, [r7, #12]
 80166ba:	2100      	movs	r1, #0
 80166bc:	f000 fd2e 	bl	801711c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80166c0:	2300      	movs	r3, #0
}
 80166c2:	0018      	movs	r0, r3
 80166c4:	46bd      	mov	sp, r7
 80166c6:	b004      	add	sp, #16
 80166c8:	bd80      	pop	{r7, pc}

080166ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80166ca:	b580      	push	{r7, lr}
 80166cc:	b082      	sub	sp, #8
 80166ce:	af00      	add	r7, sp, #0
 80166d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80166d2:	687a      	ldr	r2, [r7, #4]
 80166d4:	23a5      	movs	r3, #165	@ 0xa5
 80166d6:	009b      	lsls	r3, r3, #2
 80166d8:	2104      	movs	r1, #4
 80166da:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	2300      	movs	r3, #0
 80166e0:	2200      	movs	r2, #0
 80166e2:	2100      	movs	r1, #0
 80166e4:	f000 fce3 	bl	80170ae <USBD_LL_Transmit>

  return USBD_OK;
 80166e8:	2300      	movs	r3, #0
}
 80166ea:	0018      	movs	r0, r3
 80166ec:	46bd      	mov	sp, r7
 80166ee:	b002      	add	sp, #8
 80166f0:	bd80      	pop	{r7, pc}

080166f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80166f2:	b580      	push	{r7, lr}
 80166f4:	b082      	sub	sp, #8
 80166f6:	af00      	add	r7, sp, #0
 80166f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	23a5      	movs	r3, #165	@ 0xa5
 80166fe:	009b      	lsls	r3, r3, #2
 8016700:	2105      	movs	r1, #5
 8016702:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016704:	6878      	ldr	r0, [r7, #4]
 8016706:	2300      	movs	r3, #0
 8016708:	2200      	movs	r2, #0
 801670a:	2100      	movs	r1, #0
 801670c:	f000 fd06 	bl	801711c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016710:	2300      	movs	r3, #0
}
 8016712:	0018      	movs	r0, r3
 8016714:	46bd      	mov	sp, r7
 8016716:	b002      	add	sp, #8
 8016718:	bd80      	pop	{r7, pc}
	...

0801671c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016720:	4914      	ldr	r1, [pc, #80]	@ (8016774 <MX_USB_DEVICE_Init+0x58>)
 8016722:	4b15      	ldr	r3, [pc, #84]	@ (8016778 <MX_USB_DEVICE_Init+0x5c>)
 8016724:	2200      	movs	r2, #0
 8016726:	0018      	movs	r0, r3
 8016728:	f7fe fdec 	bl	8015304 <USBD_Init>
 801672c:	1e03      	subs	r3, r0, #0
 801672e:	d001      	beq.n	8016734 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016730:	f7ef fdd6 	bl	80062e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016734:	4a11      	ldr	r2, [pc, #68]	@ (801677c <MX_USB_DEVICE_Init+0x60>)
 8016736:	4b10      	ldr	r3, [pc, #64]	@ (8016778 <MX_USB_DEVICE_Init+0x5c>)
 8016738:	0011      	movs	r1, r2
 801673a:	0018      	movs	r0, r3
 801673c:	f7fe fe13 	bl	8015366 <USBD_RegisterClass>
 8016740:	1e03      	subs	r3, r0, #0
 8016742:	d001      	beq.n	8016748 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8016744:	f7ef fdcc 	bl	80062e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016748:	4a0d      	ldr	r2, [pc, #52]	@ (8016780 <MX_USB_DEVICE_Init+0x64>)
 801674a:	4b0b      	ldr	r3, [pc, #44]	@ (8016778 <MX_USB_DEVICE_Init+0x5c>)
 801674c:	0011      	movs	r1, r2
 801674e:	0018      	movs	r0, r3
 8016750:	f7fe fd28 	bl	80151a4 <USBD_CDC_RegisterInterface>
 8016754:	1e03      	subs	r3, r0, #0
 8016756:	d001      	beq.n	801675c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8016758:	f7ef fdc2 	bl	80062e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801675c:	4b06      	ldr	r3, [pc, #24]	@ (8016778 <MX_USB_DEVICE_Init+0x5c>)
 801675e:	0018      	movs	r0, r3
 8016760:	f7fe fe21 	bl	80153a6 <USBD_Start>
 8016764:	1e03      	subs	r3, r0, #0
 8016766:	d001      	beq.n	801676c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8016768:	f7ef fdba 	bl	80062e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801676c:	46c0      	nop			@ (mov r8, r8)
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
 8016772:	46c0      	nop			@ (mov r8, r8)
 8016774:	200001d0 	.word	0x200001d0
 8016778:	20002b30 	.word	0x20002b30
 801677c:	200000bc 	.word	0x200000bc
 8016780:	200001c0 	.word	0x200001c0

08016784 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016788:	4907      	ldr	r1, [pc, #28]	@ (80167a8 <CDC_Init_FS+0x24>)
 801678a:	4b08      	ldr	r3, [pc, #32]	@ (80167ac <CDC_Init_FS+0x28>)
 801678c:	2200      	movs	r2, #0
 801678e:	0018      	movs	r0, r3
 8016790:	f7fe fd23 	bl	80151da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016794:	4a06      	ldr	r2, [pc, #24]	@ (80167b0 <CDC_Init_FS+0x2c>)
 8016796:	4b05      	ldr	r3, [pc, #20]	@ (80167ac <CDC_Init_FS+0x28>)
 8016798:	0011      	movs	r1, r2
 801679a:	0018      	movs	r0, r3
 801679c:	f7fe fd39 	bl	8015212 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80167a0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80167a2:	0018      	movs	r0, r3
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	200032b4 	.word	0x200032b4
 80167ac:	20002b30 	.word	0x20002b30
 80167b0:	20002eb4 	.word	0x20002eb4

080167b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80167b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80167ba:	0018      	movs	r0, r3
 80167bc:	46bd      	mov	sp, r7
 80167be:	bd80      	pop	{r7, pc}

080167c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b082      	sub	sp, #8
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6039      	str	r1, [r7, #0]
 80167c8:	0011      	movs	r1, r2
 80167ca:	1dfb      	adds	r3, r7, #7
 80167cc:	1c02      	adds	r2, r0, #0
 80167ce:	701a      	strb	r2, [r3, #0]
 80167d0:	1d3b      	adds	r3, r7, #4
 80167d2:	1c0a      	adds	r2, r1, #0
 80167d4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80167d6:	1dfb      	adds	r3, r7, #7
 80167d8:	781b      	ldrb	r3, [r3, #0]
 80167da:	2b23      	cmp	r3, #35	@ 0x23
 80167dc:	d804      	bhi.n	80167e8 <CDC_Control_FS+0x28>
 80167de:	009a      	lsls	r2, r3, #2
 80167e0:	4b04      	ldr	r3, [pc, #16]	@ (80167f4 <CDC_Control_FS+0x34>)
 80167e2:	18d3      	adds	r3, r2, r3
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80167e8:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80167ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80167ec:	0018      	movs	r0, r3
 80167ee:	46bd      	mov	sp, r7
 80167f0:	b002      	add	sp, #8
 80167f2:	bd80      	pop	{r7, pc}
 80167f4:	0801ba3c 	.word	0x0801ba3c

080167f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8016802:	4b12      	ldr	r3, [pc, #72]	@ (801684c <CDC_Receive_FS+0x54>)
 8016804:	781b      	ldrb	r3, [r3, #0]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d013      	beq.n	8016832 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801680a:	683b      	ldr	r3, [r7, #0]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	b29a      	uxth	r2, r3
 8016810:	2301      	movs	r3, #1
 8016812:	425b      	negs	r3, r3
 8016814:	6879      	ldr	r1, [r7, #4]
 8016816:	480e      	ldr	r0, [pc, #56]	@ (8016850 <CDC_Receive_FS+0x58>)
 8016818:	f7fa fd3a 	bl	8011290 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801681c:	687a      	ldr	r2, [r7, #4]
 801681e:	4b0d      	ldr	r3, [pc, #52]	@ (8016854 <CDC_Receive_FS+0x5c>)
 8016820:	0011      	movs	r1, r2
 8016822:	0018      	movs	r0, r3
 8016824:	f7fe fcf5 	bl	8015212 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016828:	4b0a      	ldr	r3, [pc, #40]	@ (8016854 <CDC_Receive_FS+0x5c>)
 801682a:	0018      	movs	r0, r3
 801682c:	f7fe fd3c 	bl	80152a8 <USBD_CDC_ReceivePacket>
 8016830:	e006      	b.n	8016840 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8016832:	683b      	ldr	r3, [r7, #0]
 8016834:	681a      	ldr	r2, [r3, #0]
 8016836:	4b08      	ldr	r3, [pc, #32]	@ (8016858 <CDC_Receive_FS+0x60>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	18d2      	adds	r2, r2, r3
 801683c:	4b06      	ldr	r3, [pc, #24]	@ (8016858 <CDC_Receive_FS+0x60>)
 801683e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8016840:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016842:	0018      	movs	r0, r3
 8016844:	46bd      	mov	sp, r7
 8016846:	b002      	add	sp, #8
 8016848:	bd80      	pop	{r7, pc}
 801684a:	46c0      	nop			@ (mov r8, r8)
 801684c:	20002df4 	.word	0x20002df4
 8016850:	20002df8 	.word	0x20002df8
 8016854:	20002b30 	.word	0x20002b30
 8016858:	20002eb0 	.word	0x20002eb0

0801685c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801685c:	b5b0      	push	{r4, r5, r7, lr}
 801685e:	b084      	sub	sp, #16
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	000a      	movs	r2, r1
 8016866:	1cbb      	adds	r3, r7, #2
 8016868:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801686a:	230f      	movs	r3, #15
 801686c:	18fb      	adds	r3, r7, r3
 801686e:	2200      	movs	r2, #0
 8016870:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016872:	4a11      	ldr	r2, [pc, #68]	@ (80168b8 <CDC_Transmit_FS+0x5c>)
 8016874:	23ae      	movs	r3, #174	@ 0xae
 8016876:	009b      	lsls	r3, r3, #2
 8016878:	58d3      	ldr	r3, [r2, r3]
 801687a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801687c:	68ba      	ldr	r2, [r7, #8]
 801687e:	2385      	movs	r3, #133	@ 0x85
 8016880:	009b      	lsls	r3, r3, #2
 8016882:	58d3      	ldr	r3, [r2, r3]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d001      	beq.n	801688c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8016888:	2301      	movs	r3, #1
 801688a:	e010      	b.n	80168ae <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801688c:	1cbb      	adds	r3, r7, #2
 801688e:	881a      	ldrh	r2, [r3, #0]
 8016890:	6879      	ldr	r1, [r7, #4]
 8016892:	4b09      	ldr	r3, [pc, #36]	@ (80168b8 <CDC_Transmit_FS+0x5c>)
 8016894:	0018      	movs	r0, r3
 8016896:	f7fe fca0 	bl	80151da <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801689a:	250f      	movs	r5, #15
 801689c:	197c      	adds	r4, r7, r5
 801689e:	4b06      	ldr	r3, [pc, #24]	@ (80168b8 <CDC_Transmit_FS+0x5c>)
 80168a0:	0018      	movs	r0, r3
 80168a2:	f7fe fcca 	bl	801523a <USBD_CDC_TransmitPacket>
 80168a6:	0003      	movs	r3, r0
 80168a8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80168aa:	197b      	adds	r3, r7, r5
 80168ac:	781b      	ldrb	r3, [r3, #0]
}
 80168ae:	0018      	movs	r0, r3
 80168b0:	46bd      	mov	sp, r7
 80168b2:	b004      	add	sp, #16
 80168b4:	bdb0      	pop	{r4, r5, r7, pc}
 80168b6:	46c0      	nop			@ (mov r8, r8)
 80168b8:	20002b30 	.word	0x20002b30

080168bc <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80168bc:	b580      	push	{r7, lr}
 80168be:	af00      	add	r7, sp, #0
  ESPProg = true;
 80168c0:	4b02      	ldr	r3, [pc, #8]	@ (80168cc <EnableESPProg+0x10>)
 80168c2:	2201      	movs	r2, #1
 80168c4:	701a      	strb	r2, [r3, #0]
}
 80168c6:	46c0      	nop			@ (mov r8, r8)
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}
 80168cc:	20002df4 	.word	0x20002df4

080168d0 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80168d4:	4b01      	ldr	r3, [pc, #4]	@ (80168dc <GetUsbRxPointer+0xc>)
}
 80168d6:	0018      	movs	r0, r3
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}
 80168dc:	20002eb4 	.word	0x20002eb4

080168e0 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80168e4:	4b07      	ldr	r3, [pc, #28]	@ (8016904 <ResetUsbRxDataSize+0x24>)
 80168e6:	2200      	movs	r2, #0
 80168e8:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80168ea:	4a07      	ldr	r2, [pc, #28]	@ (8016908 <ResetUsbRxDataSize+0x28>)
 80168ec:	4b07      	ldr	r3, [pc, #28]	@ (801690c <ResetUsbRxDataSize+0x2c>)
 80168ee:	0011      	movs	r1, r2
 80168f0:	0018      	movs	r0, r3
 80168f2:	f7fe fc8e 	bl	8015212 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80168f6:	4b05      	ldr	r3, [pc, #20]	@ (801690c <ResetUsbRxDataSize+0x2c>)
 80168f8:	0018      	movs	r0, r3
 80168fa:	f7fe fcd5 	bl	80152a8 <USBD_CDC_ReceivePacket>
}
 80168fe:	46c0      	nop			@ (mov r8, r8)
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}
 8016904:	20002eb0 	.word	0x20002eb0
 8016908:	20002eb4 	.word	0x20002eb4
 801690c:	20002b30 	.word	0x20002b30

08016910 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8016910:	b580      	push	{r7, lr}
 8016912:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8016914:	4b02      	ldr	r3, [pc, #8]	@ (8016920 <GetUsbRxDataSize+0x10>)
 8016916:	681b      	ldr	r3, [r3, #0]
}
 8016918:	0018      	movs	r0, r3
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	46c0      	nop			@ (mov r8, r8)
 8016920:	20002eb0 	.word	0x20002eb0

08016924 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801692c:	687a      	ldr	r2, [r7, #4]
 801692e:	4b07      	ldr	r3, [pc, #28]	@ (801694c <GetUsbRxNextChunk+0x28>)
 8016930:	18d2      	adds	r2, r2, r3
 8016932:	4b07      	ldr	r3, [pc, #28]	@ (8016950 <GetUsbRxNextChunk+0x2c>)
 8016934:	0011      	movs	r1, r2
 8016936:	0018      	movs	r0, r3
 8016938:	f7fe fc6b 	bl	8015212 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801693c:	4b04      	ldr	r3, [pc, #16]	@ (8016950 <GetUsbRxNextChunk+0x2c>)
 801693e:	0018      	movs	r0, r3
 8016940:	f7fe fcb2 	bl	80152a8 <USBD_CDC_ReceivePacket>
}
 8016944:	46c0      	nop			@ (mov r8, r8)
 8016946:	46bd      	mov	sp, r7
 8016948:	b002      	add	sp, #8
 801694a:	bd80      	pop	{r7, pc}
 801694c:	20002eb4 	.word	0x20002eb4
 8016950:	20002b30 	.word	0x20002b30

08016954 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
 801695a:	0002      	movs	r2, r0
 801695c:	6039      	str	r1, [r7, #0]
 801695e:	1dfb      	adds	r3, r7, #7
 8016960:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016962:	683b      	ldr	r3, [r7, #0]
 8016964:	2212      	movs	r2, #18
 8016966:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016968:	4b02      	ldr	r3, [pc, #8]	@ (8016974 <USBD_FS_DeviceDescriptor+0x20>)
}
 801696a:	0018      	movs	r0, r3
 801696c:	46bd      	mov	sp, r7
 801696e:	b002      	add	sp, #8
 8016970:	bd80      	pop	{r7, pc}
 8016972:	46c0      	nop			@ (mov r8, r8)
 8016974:	200001ec 	.word	0x200001ec

08016978 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b082      	sub	sp, #8
 801697c:	af00      	add	r7, sp, #0
 801697e:	0002      	movs	r2, r0
 8016980:	6039      	str	r1, [r7, #0]
 8016982:	1dfb      	adds	r3, r7, #7
 8016984:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	2204      	movs	r2, #4
 801698a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801698c:	4b02      	ldr	r3, [pc, #8]	@ (8016998 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801698e:	0018      	movs	r0, r3
 8016990:	46bd      	mov	sp, r7
 8016992:	b002      	add	sp, #8
 8016994:	bd80      	pop	{r7, pc}
 8016996:	46c0      	nop			@ (mov r8, r8)
 8016998:	20000200 	.word	0x20000200

0801699c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	0002      	movs	r2, r0
 80169a4:	6039      	str	r1, [r7, #0]
 80169a6:	1dfb      	adds	r3, r7, #7
 80169a8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80169aa:	1dfb      	adds	r3, r7, #7
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d106      	bne.n	80169c0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80169b2:	683a      	ldr	r2, [r7, #0]
 80169b4:	4908      	ldr	r1, [pc, #32]	@ (80169d8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80169b6:	4b09      	ldr	r3, [pc, #36]	@ (80169dc <USBD_FS_ProductStrDescriptor+0x40>)
 80169b8:	0018      	movs	r0, r3
 80169ba:	f7ff fdb1 	bl	8016520 <USBD_GetString>
 80169be:	e005      	b.n	80169cc <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80169c0:	683a      	ldr	r2, [r7, #0]
 80169c2:	4905      	ldr	r1, [pc, #20]	@ (80169d8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80169c4:	4b05      	ldr	r3, [pc, #20]	@ (80169dc <USBD_FS_ProductStrDescriptor+0x40>)
 80169c6:	0018      	movs	r0, r3
 80169c8:	f7ff fdaa 	bl	8016520 <USBD_GetString>
  }
  return USBD_StrDesc;
 80169cc:	4b02      	ldr	r3, [pc, #8]	@ (80169d8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80169ce:	0018      	movs	r0, r3
 80169d0:	46bd      	mov	sp, r7
 80169d2:	b002      	add	sp, #8
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	46c0      	nop			@ (mov r8, r8)
 80169d8:	200036b4 	.word	0x200036b4
 80169dc:	0801b6d8 	.word	0x0801b6d8

080169e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b082      	sub	sp, #8
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	0002      	movs	r2, r0
 80169e8:	6039      	str	r1, [r7, #0]
 80169ea:	1dfb      	adds	r3, r7, #7
 80169ec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80169ee:	683a      	ldr	r2, [r7, #0]
 80169f0:	4904      	ldr	r1, [pc, #16]	@ (8016a04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80169f2:	4b05      	ldr	r3, [pc, #20]	@ (8016a08 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80169f4:	0018      	movs	r0, r3
 80169f6:	f7ff fd93 	bl	8016520 <USBD_GetString>
  return USBD_StrDesc;
 80169fa:	4b02      	ldr	r3, [pc, #8]	@ (8016a04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80169fc:	0018      	movs	r0, r3
 80169fe:	46bd      	mov	sp, r7
 8016a00:	b002      	add	sp, #8
 8016a02:	bd80      	pop	{r7, pc}
 8016a04:	200036b4 	.word	0x200036b4
 8016a08:	0801b6f0 	.word	0x0801b6f0

08016a0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	0002      	movs	r2, r0
 8016a14:	6039      	str	r1, [r7, #0]
 8016a16:	1dfb      	adds	r3, r7, #7
 8016a18:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	221a      	movs	r2, #26
 8016a1e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016a20:	f000 f84c 	bl	8016abc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016a24:	4b02      	ldr	r3, [pc, #8]	@ (8016a30 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8016a26:	0018      	movs	r0, r3
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	b002      	add	sp, #8
 8016a2c:	bd80      	pop	{r7, pc}
 8016a2e:	46c0      	nop			@ (mov r8, r8)
 8016a30:	20000204 	.word	0x20000204

08016a34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b082      	sub	sp, #8
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	0002      	movs	r2, r0
 8016a3c:	6039      	str	r1, [r7, #0]
 8016a3e:	1dfb      	adds	r3, r7, #7
 8016a40:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8016a42:	1dfb      	adds	r3, r7, #7
 8016a44:	781b      	ldrb	r3, [r3, #0]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d106      	bne.n	8016a58 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016a4a:	683a      	ldr	r2, [r7, #0]
 8016a4c:	4908      	ldr	r1, [pc, #32]	@ (8016a70 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8016a4e:	4b09      	ldr	r3, [pc, #36]	@ (8016a74 <USBD_FS_ConfigStrDescriptor+0x40>)
 8016a50:	0018      	movs	r0, r3
 8016a52:	f7ff fd65 	bl	8016520 <USBD_GetString>
 8016a56:	e005      	b.n	8016a64 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016a58:	683a      	ldr	r2, [r7, #0]
 8016a5a:	4905      	ldr	r1, [pc, #20]	@ (8016a70 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8016a5c:	4b05      	ldr	r3, [pc, #20]	@ (8016a74 <USBD_FS_ConfigStrDescriptor+0x40>)
 8016a5e:	0018      	movs	r0, r3
 8016a60:	f7ff fd5e 	bl	8016520 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016a64:	4b02      	ldr	r3, [pc, #8]	@ (8016a70 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8016a66:	0018      	movs	r0, r3
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	b002      	add	sp, #8
 8016a6c:	bd80      	pop	{r7, pc}
 8016a6e:	46c0      	nop			@ (mov r8, r8)
 8016a70:	200036b4 	.word	0x200036b4
 8016a74:	0801b704 	.word	0x0801b704

08016a78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b082      	sub	sp, #8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	0002      	movs	r2, r0
 8016a80:	6039      	str	r1, [r7, #0]
 8016a82:	1dfb      	adds	r3, r7, #7
 8016a84:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8016a86:	1dfb      	adds	r3, r7, #7
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d106      	bne.n	8016a9c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016a8e:	683a      	ldr	r2, [r7, #0]
 8016a90:	4908      	ldr	r1, [pc, #32]	@ (8016ab4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016a92:	4b09      	ldr	r3, [pc, #36]	@ (8016ab8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016a94:	0018      	movs	r0, r3
 8016a96:	f7ff fd43 	bl	8016520 <USBD_GetString>
 8016a9a:	e005      	b.n	8016aa8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016a9c:	683a      	ldr	r2, [r7, #0]
 8016a9e:	4905      	ldr	r1, [pc, #20]	@ (8016ab4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016aa0:	4b05      	ldr	r3, [pc, #20]	@ (8016ab8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016aa2:	0018      	movs	r0, r3
 8016aa4:	f7ff fd3c 	bl	8016520 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016aa8:	4b02      	ldr	r3, [pc, #8]	@ (8016ab4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8016aaa:	0018      	movs	r0, r3
 8016aac:	46bd      	mov	sp, r7
 8016aae:	b002      	add	sp, #8
 8016ab0:	bd80      	pop	{r7, pc}
 8016ab2:	46c0      	nop			@ (mov r8, r8)
 8016ab4:	200036b4 	.word	0x200036b4
 8016ab8:	0801b710 	.word	0x0801b710

08016abc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b084      	sub	sp, #16
 8016ac0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016ac2:	4b10      	ldr	r3, [pc, #64]	@ (8016b04 <Get_SerialNum+0x48>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8016b08 <Get_SerialNum+0x4c>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016ace:	4b0f      	ldr	r3, [pc, #60]	@ (8016b0c <Get_SerialNum+0x50>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016ad4:	68fa      	ldr	r2, [r7, #12]
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	18d3      	adds	r3, r2, r3
 8016ada:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d00b      	beq.n	8016afa <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016ae2:	490b      	ldr	r1, [pc, #44]	@ (8016b10 <Get_SerialNum+0x54>)
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	2208      	movs	r2, #8
 8016ae8:	0018      	movs	r0, r3
 8016aea:	f000 f815 	bl	8016b18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016aee:	4909      	ldr	r1, [pc, #36]	@ (8016b14 <Get_SerialNum+0x58>)
 8016af0:	68bb      	ldr	r3, [r7, #8]
 8016af2:	2204      	movs	r2, #4
 8016af4:	0018      	movs	r0, r3
 8016af6:	f000 f80f 	bl	8016b18 <IntToUnicode>
  }
}
 8016afa:	46c0      	nop			@ (mov r8, r8)
 8016afc:	46bd      	mov	sp, r7
 8016afe:	b004      	add	sp, #16
 8016b00:	bd80      	pop	{r7, pc}
 8016b02:	46c0      	nop			@ (mov r8, r8)
 8016b04:	1ff80050 	.word	0x1ff80050
 8016b08:	1ff80054 	.word	0x1ff80054
 8016b0c:	1ff80058 	.word	0x1ff80058
 8016b10:	20000206 	.word	0x20000206
 8016b14:	20000216 	.word	0x20000216

08016b18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b086      	sub	sp, #24
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	60f8      	str	r0, [r7, #12]
 8016b20:	60b9      	str	r1, [r7, #8]
 8016b22:	1dfb      	adds	r3, r7, #7
 8016b24:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8016b26:	2117      	movs	r1, #23
 8016b28:	187b      	adds	r3, r7, r1
 8016b2a:	2200      	movs	r2, #0
 8016b2c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8016b2e:	187b      	adds	r3, r7, r1
 8016b30:	2200      	movs	r2, #0
 8016b32:	701a      	strb	r2, [r3, #0]
 8016b34:	e02f      	b.n	8016b96 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	0f1b      	lsrs	r3, r3, #28
 8016b3a:	2b09      	cmp	r3, #9
 8016b3c:	d80d      	bhi.n	8016b5a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	0f1b      	lsrs	r3, r3, #28
 8016b42:	b2da      	uxtb	r2, r3
 8016b44:	2317      	movs	r3, #23
 8016b46:	18fb      	adds	r3, r7, r3
 8016b48:	781b      	ldrb	r3, [r3, #0]
 8016b4a:	005b      	lsls	r3, r3, #1
 8016b4c:	0019      	movs	r1, r3
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	185b      	adds	r3, r3, r1
 8016b52:	3230      	adds	r2, #48	@ 0x30
 8016b54:	b2d2      	uxtb	r2, r2
 8016b56:	701a      	strb	r2, [r3, #0]
 8016b58:	e00c      	b.n	8016b74 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	0f1b      	lsrs	r3, r3, #28
 8016b5e:	b2da      	uxtb	r2, r3
 8016b60:	2317      	movs	r3, #23
 8016b62:	18fb      	adds	r3, r7, r3
 8016b64:	781b      	ldrb	r3, [r3, #0]
 8016b66:	005b      	lsls	r3, r3, #1
 8016b68:	0019      	movs	r1, r3
 8016b6a:	68bb      	ldr	r3, [r7, #8]
 8016b6c:	185b      	adds	r3, r3, r1
 8016b6e:	3237      	adds	r2, #55	@ 0x37
 8016b70:	b2d2      	uxtb	r2, r2
 8016b72:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	011b      	lsls	r3, r3, #4
 8016b78:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016b7a:	2117      	movs	r1, #23
 8016b7c:	187b      	adds	r3, r7, r1
 8016b7e:	781b      	ldrb	r3, [r3, #0]
 8016b80:	005b      	lsls	r3, r3, #1
 8016b82:	3301      	adds	r3, #1
 8016b84:	68ba      	ldr	r2, [r7, #8]
 8016b86:	18d3      	adds	r3, r2, r3
 8016b88:	2200      	movs	r2, #0
 8016b8a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016b8c:	187b      	adds	r3, r7, r1
 8016b8e:	781a      	ldrb	r2, [r3, #0]
 8016b90:	187b      	adds	r3, r7, r1
 8016b92:	3201      	adds	r2, #1
 8016b94:	701a      	strb	r2, [r3, #0]
 8016b96:	2317      	movs	r3, #23
 8016b98:	18fa      	adds	r2, r7, r3
 8016b9a:	1dfb      	adds	r3, r7, #7
 8016b9c:	7812      	ldrb	r2, [r2, #0]
 8016b9e:	781b      	ldrb	r3, [r3, #0]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d3c8      	bcc.n	8016b36 <IntToUnicode+0x1e>
  }
}
 8016ba4:	46c0      	nop			@ (mov r8, r8)
 8016ba6:	46c0      	nop			@ (mov r8, r8)
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	b006      	add	sp, #24
 8016bac:	bd80      	pop	{r7, pc}
	...

08016bb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b082      	sub	sp, #8
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8016be8 <HAL_PCD_MspInit+0x38>)
 8016bbe:	4293      	cmp	r3, r2
 8016bc0:	d10e      	bne.n	8016be0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8016bec <HAL_PCD_MspInit+0x3c>)
 8016bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016bc6:	4b09      	ldr	r3, [pc, #36]	@ (8016bec <HAL_PCD_MspInit+0x3c>)
 8016bc8:	2180      	movs	r1, #128	@ 0x80
 8016bca:	0409      	lsls	r1, r1, #16
 8016bcc:	430a      	orrs	r2, r1
 8016bce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	2100      	movs	r1, #0
 8016bd4:	201f      	movs	r0, #31
 8016bd6:	f7f3 fd23 	bl	800a620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8016bda:	201f      	movs	r0, #31
 8016bdc:	f7f3 fd35 	bl	800a64a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016be0:	46c0      	nop			@ (mov r8, r8)
 8016be2:	46bd      	mov	sp, r7
 8016be4:	b002      	add	sp, #8
 8016be6:	bd80      	pop	{r7, pc}
 8016be8:	40005c00 	.word	0x40005c00
 8016bec:	40021000 	.word	0x40021000

08016bf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b082      	sub	sp, #8
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016bf8:	687a      	ldr	r2, [r7, #4]
 8016bfa:	23bc      	movs	r3, #188	@ 0xbc
 8016bfc:	009b      	lsls	r3, r3, #2
 8016bfe:	58d2      	ldr	r2, [r2, r3]
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	21ac      	movs	r1, #172	@ 0xac
 8016c04:	0089      	lsls	r1, r1, #2
 8016c06:	468c      	mov	ip, r1
 8016c08:	4463      	add	r3, ip
 8016c0a:	0019      	movs	r1, r3
 8016c0c:	0010      	movs	r0, r2
 8016c0e:	f7fe fc1d 	bl	801544c <USBD_LL_SetupStage>
}
 8016c12:	46c0      	nop			@ (mov r8, r8)
 8016c14:	46bd      	mov	sp, r7
 8016c16:	b002      	add	sp, #8
 8016c18:	bd80      	pop	{r7, pc}

08016c1a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c1a:	b590      	push	{r4, r7, lr}
 8016c1c:	b083      	sub	sp, #12
 8016c1e:	af00      	add	r7, sp, #0
 8016c20:	6078      	str	r0, [r7, #4]
 8016c22:	000a      	movs	r2, r1
 8016c24:	1cfb      	adds	r3, r7, #3
 8016c26:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016c28:	687a      	ldr	r2, [r7, #4]
 8016c2a:	23bc      	movs	r3, #188	@ 0xbc
 8016c2c:	009b      	lsls	r3, r3, #2
 8016c2e:	58d4      	ldr	r4, [r2, r3]
 8016c30:	1cfb      	adds	r3, r7, #3
 8016c32:	781a      	ldrb	r2, [r3, #0]
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	23be      	movs	r3, #190	@ 0xbe
 8016c38:	0059      	lsls	r1, r3, #1
 8016c3a:	0013      	movs	r3, r2
 8016c3c:	009b      	lsls	r3, r3, #2
 8016c3e:	189b      	adds	r3, r3, r2
 8016c40:	00db      	lsls	r3, r3, #3
 8016c42:	18c3      	adds	r3, r0, r3
 8016c44:	185b      	adds	r3, r3, r1
 8016c46:	681a      	ldr	r2, [r3, #0]
 8016c48:	1cfb      	adds	r3, r7, #3
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	0019      	movs	r1, r3
 8016c4e:	0020      	movs	r0, r4
 8016c50:	f7fe fc5a 	bl	8015508 <USBD_LL_DataOutStage>
}
 8016c54:	46c0      	nop			@ (mov r8, r8)
 8016c56:	46bd      	mov	sp, r7
 8016c58:	b003      	add	sp, #12
 8016c5a:	bd90      	pop	{r4, r7, pc}

08016c5c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b082      	sub	sp, #8
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	000a      	movs	r2, r1
 8016c66:	1cfb      	adds	r3, r7, #3
 8016c68:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016c6a:	687a      	ldr	r2, [r7, #4]
 8016c6c:	23bc      	movs	r3, #188	@ 0xbc
 8016c6e:	009b      	lsls	r3, r3, #2
 8016c70:	58d0      	ldr	r0, [r2, r3]
 8016c72:	1cfb      	adds	r3, r7, #3
 8016c74:	781a      	ldrb	r2, [r3, #0]
 8016c76:	6879      	ldr	r1, [r7, #4]
 8016c78:	0013      	movs	r3, r2
 8016c7a:	009b      	lsls	r3, r3, #2
 8016c7c:	189b      	adds	r3, r3, r2
 8016c7e:	00db      	lsls	r3, r3, #3
 8016c80:	18cb      	adds	r3, r1, r3
 8016c82:	333c      	adds	r3, #60	@ 0x3c
 8016c84:	681a      	ldr	r2, [r3, #0]
 8016c86:	1cfb      	adds	r3, r7, #3
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	0019      	movs	r1, r3
 8016c8c:	f7fe fcbe 	bl	801560c <USBD_LL_DataInStage>
}
 8016c90:	46c0      	nop			@ (mov r8, r8)
 8016c92:	46bd      	mov	sp, r7
 8016c94:	b002      	add	sp, #8
 8016c96:	bd80      	pop	{r7, pc}

08016c98 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b082      	sub	sp, #8
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016ca0:	687a      	ldr	r2, [r7, #4]
 8016ca2:	23bc      	movs	r3, #188	@ 0xbc
 8016ca4:	009b      	lsls	r3, r3, #2
 8016ca6:	58d3      	ldr	r3, [r2, r3]
 8016ca8:	0018      	movs	r0, r3
 8016caa:	f7fe fdf5 	bl	8015898 <USBD_LL_SOF>
}
 8016cae:	46c0      	nop			@ (mov r8, r8)
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	b002      	add	sp, #8
 8016cb4:	bd80      	pop	{r7, pc}

08016cb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cb6:	b580      	push	{r7, lr}
 8016cb8:	b084      	sub	sp, #16
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016cbe:	230f      	movs	r3, #15
 8016cc0:	18fb      	adds	r3, r7, r3
 8016cc2:	2201      	movs	r2, #1
 8016cc4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	689b      	ldr	r3, [r3, #8]
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	d001      	beq.n	8016cd2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8016cce:	f7ef fb07 	bl	80062e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016cd2:	687a      	ldr	r2, [r7, #4]
 8016cd4:	23bc      	movs	r3, #188	@ 0xbc
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	58d2      	ldr	r2, [r2, r3]
 8016cda:	230f      	movs	r3, #15
 8016cdc:	18fb      	adds	r3, r7, r3
 8016cde:	781b      	ldrb	r3, [r3, #0]
 8016ce0:	0019      	movs	r1, r3
 8016ce2:	0010      	movs	r0, r2
 8016ce4:	f7fe fd97 	bl	8015816 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016ce8:	687a      	ldr	r2, [r7, #4]
 8016cea:	23bc      	movs	r3, #188	@ 0xbc
 8016cec:	009b      	lsls	r3, r3, #2
 8016cee:	58d3      	ldr	r3, [r2, r3]
 8016cf0:	0018      	movs	r0, r3
 8016cf2:	f7fe fd48 	bl	8015786 <USBD_LL_Reset>
}
 8016cf6:	46c0      	nop			@ (mov r8, r8)
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	b004      	add	sp, #16
 8016cfc:	bd80      	pop	{r7, pc}
	...

08016d00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d00:	b580      	push	{r7, lr}
 8016d02:	b082      	sub	sp, #8
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016d08:	687a      	ldr	r2, [r7, #4]
 8016d0a:	23bc      	movs	r3, #188	@ 0xbc
 8016d0c:	009b      	lsls	r3, r3, #2
 8016d0e:	58d3      	ldr	r3, [r2, r3]
 8016d10:	0018      	movs	r0, r3
 8016d12:	f7fe fd91 	bl	8015838 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	699b      	ldr	r3, [r3, #24]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d005      	beq.n	8016d2a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016d1e:	4b05      	ldr	r3, [pc, #20]	@ (8016d34 <HAL_PCD_SuspendCallback+0x34>)
 8016d20:	691a      	ldr	r2, [r3, #16]
 8016d22:	4b04      	ldr	r3, [pc, #16]	@ (8016d34 <HAL_PCD_SuspendCallback+0x34>)
 8016d24:	2106      	movs	r1, #6
 8016d26:	430a      	orrs	r2, r1
 8016d28:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8016d2a:	46c0      	nop			@ (mov r8, r8)
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	b002      	add	sp, #8
 8016d30:	bd80      	pop	{r7, pc}
 8016d32:	46c0      	nop			@ (mov r8, r8)
 8016d34:	e000ed00 	.word	0xe000ed00

08016d38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b082      	sub	sp, #8
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	699b      	ldr	r3, [r3, #24]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d007      	beq.n	8016d58 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016d48:	4b09      	ldr	r3, [pc, #36]	@ (8016d70 <HAL_PCD_ResumeCallback+0x38>)
 8016d4a:	691a      	ldr	r2, [r3, #16]
 8016d4c:	4b08      	ldr	r3, [pc, #32]	@ (8016d70 <HAL_PCD_ResumeCallback+0x38>)
 8016d4e:	2106      	movs	r1, #6
 8016d50:	438a      	bics	r2, r1
 8016d52:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8016d54:	f000 fa44 	bl	80171e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016d58:	687a      	ldr	r2, [r7, #4]
 8016d5a:	23bc      	movs	r3, #188	@ 0xbc
 8016d5c:	009b      	lsls	r3, r3, #2
 8016d5e:	58d3      	ldr	r3, [r2, r3]
 8016d60:	0018      	movs	r0, r3
 8016d62:	f7fe fd81 	bl	8015868 <USBD_LL_Resume>
}
 8016d66:	46c0      	nop			@ (mov r8, r8)
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	b002      	add	sp, #8
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	46c0      	nop			@ (mov r8, r8)
 8016d70:	e000ed00 	.word	0xe000ed00

08016d74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b082      	sub	sp, #8
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8016d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016d7e:	23bc      	movs	r3, #188	@ 0xbc
 8016d80:	009b      	lsls	r3, r3, #2
 8016d82:	6879      	ldr	r1, [r7, #4]
 8016d84:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8016d86:	687a      	ldr	r2, [r7, #4]
 8016d88:	23b0      	movs	r3, #176	@ 0xb0
 8016d8a:	009b      	lsls	r3, r3, #2
 8016d8c:	4929      	ldr	r1, [pc, #164]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016d8e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8016d90:	4b28      	ldr	r3, [pc, #160]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016d92:	4a29      	ldr	r2, [pc, #164]	@ (8016e38 <USBD_LL_Init+0xc4>)
 8016d94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8016d96:	4b27      	ldr	r3, [pc, #156]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016d98:	2208      	movs	r2, #8
 8016d9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016d9c:	4b25      	ldr	r3, [pc, #148]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016d9e:	2202      	movs	r2, #2
 8016da0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016da2:	4b24      	ldr	r3, [pc, #144]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016da4:	2202      	movs	r2, #2
 8016da6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016da8:	4b22      	ldr	r3, [pc, #136]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016daa:	2200      	movs	r2, #0
 8016dac:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016dae:	4b21      	ldr	r3, [pc, #132]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016db0:	2200      	movs	r2, #0
 8016db2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016db4:	4b1f      	ldr	r3, [pc, #124]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016db6:	2200      	movs	r2, #0
 8016db8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016dba:	4b1e      	ldr	r3, [pc, #120]	@ (8016e34 <USBD_LL_Init+0xc0>)
 8016dbc:	0018      	movs	r0, r3
 8016dbe:	f7f6 fed3 	bl	800db68 <HAL_PCD_Init>
 8016dc2:	1e03      	subs	r3, r0, #0
 8016dc4:	d001      	beq.n	8016dca <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8016dc6:	f7ef fa8b 	bl	80062e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016dca:	687a      	ldr	r2, [r7, #4]
 8016dcc:	23b0      	movs	r3, #176	@ 0xb0
 8016dce:	009b      	lsls	r3, r3, #2
 8016dd0:	58d0      	ldr	r0, [r2, r3]
 8016dd2:	2318      	movs	r3, #24
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	2100      	movs	r1, #0
 8016dd8:	f7f8 fc94 	bl	800f704 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	23b0      	movs	r3, #176	@ 0xb0
 8016de0:	009b      	lsls	r3, r3, #2
 8016de2:	58d0      	ldr	r0, [r2, r3]
 8016de4:	2358      	movs	r3, #88	@ 0x58
 8016de6:	2200      	movs	r2, #0
 8016de8:	2180      	movs	r1, #128	@ 0x80
 8016dea:	f7f8 fc8b 	bl	800f704 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016dee:	687a      	ldr	r2, [r7, #4]
 8016df0:	23b0      	movs	r3, #176	@ 0xb0
 8016df2:	009b      	lsls	r3, r3, #2
 8016df4:	58d0      	ldr	r0, [r2, r3]
 8016df6:	23c0      	movs	r3, #192	@ 0xc0
 8016df8:	2200      	movs	r2, #0
 8016dfa:	2181      	movs	r1, #129	@ 0x81
 8016dfc:	f7f8 fc82 	bl	800f704 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016e00:	687a      	ldr	r2, [r7, #4]
 8016e02:	23b0      	movs	r3, #176	@ 0xb0
 8016e04:	009b      	lsls	r3, r3, #2
 8016e06:	58d0      	ldr	r0, [r2, r3]
 8016e08:	2388      	movs	r3, #136	@ 0x88
 8016e0a:	005b      	lsls	r3, r3, #1
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	2101      	movs	r1, #1
 8016e10:	f7f8 fc78 	bl	800f704 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016e14:	687a      	ldr	r2, [r7, #4]
 8016e16:	23b0      	movs	r3, #176	@ 0xb0
 8016e18:	009b      	lsls	r3, r3, #2
 8016e1a:	58d0      	ldr	r0, [r2, r3]
 8016e1c:	2380      	movs	r3, #128	@ 0x80
 8016e1e:	005b      	lsls	r3, r3, #1
 8016e20:	2200      	movs	r2, #0
 8016e22:	2182      	movs	r1, #130	@ 0x82
 8016e24:	f7f8 fc6e 	bl	800f704 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016e28:	2300      	movs	r3, #0
}
 8016e2a:	0018      	movs	r0, r3
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	b002      	add	sp, #8
 8016e30:	bd80      	pop	{r7, pc}
 8016e32:	46c0      	nop			@ (mov r8, r8)
 8016e34:	200038b4 	.word	0x200038b4
 8016e38:	40005c00 	.word	0x40005c00

08016e3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e3e:	b085      	sub	sp, #20
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e44:	210f      	movs	r1, #15
 8016e46:	187b      	adds	r3, r7, r1
 8016e48:	2200      	movs	r2, #0
 8016e4a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e4c:	260e      	movs	r6, #14
 8016e4e:	19bb      	adds	r3, r7, r6
 8016e50:	2200      	movs	r2, #0
 8016e52:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016e54:	687a      	ldr	r2, [r7, #4]
 8016e56:	23b0      	movs	r3, #176	@ 0xb0
 8016e58:	009b      	lsls	r3, r3, #2
 8016e5a:	58d3      	ldr	r3, [r2, r3]
 8016e5c:	000d      	movs	r5, r1
 8016e5e:	187c      	adds	r4, r7, r1
 8016e60:	0018      	movs	r0, r3
 8016e62:	f7f6 ff81 	bl	800dd68 <HAL_PCD_Start>
 8016e66:	0003      	movs	r3, r0
 8016e68:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e6a:	19bc      	adds	r4, r7, r6
 8016e6c:	197b      	adds	r3, r7, r5
 8016e6e:	781b      	ldrb	r3, [r3, #0]
 8016e70:	0018      	movs	r0, r3
 8016e72:	f000 f9bc 	bl	80171ee <USBD_Get_USB_Status>
 8016e76:	0003      	movs	r3, r0
 8016e78:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016e7a:	19bb      	adds	r3, r7, r6
 8016e7c:	781b      	ldrb	r3, [r3, #0]
}
 8016e7e:	0018      	movs	r0, r3
 8016e80:	46bd      	mov	sp, r7
 8016e82:	b005      	add	sp, #20
 8016e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e88:	b085      	sub	sp, #20
 8016e8a:	af00      	add	r7, sp, #0
 8016e8c:	6078      	str	r0, [r7, #4]
 8016e8e:	000c      	movs	r4, r1
 8016e90:	0010      	movs	r0, r2
 8016e92:	0019      	movs	r1, r3
 8016e94:	1cfb      	adds	r3, r7, #3
 8016e96:	1c22      	adds	r2, r4, #0
 8016e98:	701a      	strb	r2, [r3, #0]
 8016e9a:	1cbb      	adds	r3, r7, #2
 8016e9c:	1c02      	adds	r2, r0, #0
 8016e9e:	701a      	strb	r2, [r3, #0]
 8016ea0:	003b      	movs	r3, r7
 8016ea2:	1c0a      	adds	r2, r1, #0
 8016ea4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ea6:	260f      	movs	r6, #15
 8016ea8:	19bb      	adds	r3, r7, r6
 8016eaa:	2200      	movs	r2, #0
 8016eac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016eae:	250e      	movs	r5, #14
 8016eb0:	197b      	adds	r3, r7, r5
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016eb6:	687a      	ldr	r2, [r7, #4]
 8016eb8:	23b0      	movs	r3, #176	@ 0xb0
 8016eba:	009b      	lsls	r3, r3, #2
 8016ebc:	58d0      	ldr	r0, [r2, r3]
 8016ebe:	19bc      	adds	r4, r7, r6
 8016ec0:	1cbb      	adds	r3, r7, #2
 8016ec2:	781d      	ldrb	r5, [r3, #0]
 8016ec4:	003b      	movs	r3, r7
 8016ec6:	881a      	ldrh	r2, [r3, #0]
 8016ec8:	1cfb      	adds	r3, r7, #3
 8016eca:	7819      	ldrb	r1, [r3, #0]
 8016ecc:	002b      	movs	r3, r5
 8016ece:	f7f7 f8e0 	bl	800e092 <HAL_PCD_EP_Open>
 8016ed2:	0003      	movs	r3, r0
 8016ed4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ed6:	250e      	movs	r5, #14
 8016ed8:	197c      	adds	r4, r7, r5
 8016eda:	19bb      	adds	r3, r7, r6
 8016edc:	781b      	ldrb	r3, [r3, #0]
 8016ede:	0018      	movs	r0, r3
 8016ee0:	f000 f985 	bl	80171ee <USBD_Get_USB_Status>
 8016ee4:	0003      	movs	r3, r0
 8016ee6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016ee8:	197b      	adds	r3, r7, r5
 8016eea:	781b      	ldrb	r3, [r3, #0]
}
 8016eec:	0018      	movs	r0, r3
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	b005      	add	sp, #20
 8016ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ef4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ef6:	b085      	sub	sp, #20
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	000a      	movs	r2, r1
 8016efe:	1cfb      	adds	r3, r7, #3
 8016f00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f02:	210f      	movs	r1, #15
 8016f04:	187b      	adds	r3, r7, r1
 8016f06:	2200      	movs	r2, #0
 8016f08:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f0a:	260e      	movs	r6, #14
 8016f0c:	19bb      	adds	r3, r7, r6
 8016f0e:	2200      	movs	r2, #0
 8016f10:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016f12:	687a      	ldr	r2, [r7, #4]
 8016f14:	23b0      	movs	r3, #176	@ 0xb0
 8016f16:	009b      	lsls	r3, r3, #2
 8016f18:	58d2      	ldr	r2, [r2, r3]
 8016f1a:	000d      	movs	r5, r1
 8016f1c:	187c      	adds	r4, r7, r1
 8016f1e:	1cfb      	adds	r3, r7, #3
 8016f20:	781b      	ldrb	r3, [r3, #0]
 8016f22:	0019      	movs	r1, r3
 8016f24:	0010      	movs	r0, r2
 8016f26:	f7f7 f923 	bl	800e170 <HAL_PCD_EP_Close>
 8016f2a:	0003      	movs	r3, r0
 8016f2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f2e:	19bc      	adds	r4, r7, r6
 8016f30:	197b      	adds	r3, r7, r5
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	0018      	movs	r0, r3
 8016f36:	f000 f95a 	bl	80171ee <USBD_Get_USB_Status>
 8016f3a:	0003      	movs	r3, r0
 8016f3c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016f3e:	19bb      	adds	r3, r7, r6
 8016f40:	781b      	ldrb	r3, [r3, #0]
}
 8016f42:	0018      	movs	r0, r3
 8016f44:	46bd      	mov	sp, r7
 8016f46:	b005      	add	sp, #20
 8016f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f4a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f4c:	b085      	sub	sp, #20
 8016f4e:	af00      	add	r7, sp, #0
 8016f50:	6078      	str	r0, [r7, #4]
 8016f52:	000a      	movs	r2, r1
 8016f54:	1cfb      	adds	r3, r7, #3
 8016f56:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f58:	210f      	movs	r1, #15
 8016f5a:	187b      	adds	r3, r7, r1
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f60:	260e      	movs	r6, #14
 8016f62:	19bb      	adds	r3, r7, r6
 8016f64:	2200      	movs	r2, #0
 8016f66:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016f68:	687a      	ldr	r2, [r7, #4]
 8016f6a:	23b0      	movs	r3, #176	@ 0xb0
 8016f6c:	009b      	lsls	r3, r3, #2
 8016f6e:	58d2      	ldr	r2, [r2, r3]
 8016f70:	000d      	movs	r5, r1
 8016f72:	187c      	adds	r4, r7, r1
 8016f74:	1cfb      	adds	r3, r7, #3
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	0019      	movs	r1, r3
 8016f7a:	0010      	movs	r0, r2
 8016f7c:	f7f7 f9d5 	bl	800e32a <HAL_PCD_EP_SetStall>
 8016f80:	0003      	movs	r3, r0
 8016f82:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f84:	19bc      	adds	r4, r7, r6
 8016f86:	197b      	adds	r3, r7, r5
 8016f88:	781b      	ldrb	r3, [r3, #0]
 8016f8a:	0018      	movs	r0, r3
 8016f8c:	f000 f92f 	bl	80171ee <USBD_Get_USB_Status>
 8016f90:	0003      	movs	r3, r0
 8016f92:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016f94:	19bb      	adds	r3, r7, r6
 8016f96:	781b      	ldrb	r3, [r3, #0]
}
 8016f98:	0018      	movs	r0, r3
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	b005      	add	sp, #20
 8016f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016fa0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fa2:	b085      	sub	sp, #20
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	000a      	movs	r2, r1
 8016faa:	1cfb      	adds	r3, r7, #3
 8016fac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fae:	210f      	movs	r1, #15
 8016fb0:	187b      	adds	r3, r7, r1
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fb6:	260e      	movs	r6, #14
 8016fb8:	19bb      	adds	r3, r7, r6
 8016fba:	2200      	movs	r2, #0
 8016fbc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016fbe:	687a      	ldr	r2, [r7, #4]
 8016fc0:	23b0      	movs	r3, #176	@ 0xb0
 8016fc2:	009b      	lsls	r3, r3, #2
 8016fc4:	58d2      	ldr	r2, [r2, r3]
 8016fc6:	000d      	movs	r5, r1
 8016fc8:	187c      	adds	r4, r7, r1
 8016fca:	1cfb      	adds	r3, r7, #3
 8016fcc:	781b      	ldrb	r3, [r3, #0]
 8016fce:	0019      	movs	r1, r3
 8016fd0:	0010      	movs	r0, r2
 8016fd2:	f7f7 fa06 	bl	800e3e2 <HAL_PCD_EP_ClrStall>
 8016fd6:	0003      	movs	r3, r0
 8016fd8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fda:	19bc      	adds	r4, r7, r6
 8016fdc:	197b      	adds	r3, r7, r5
 8016fde:	781b      	ldrb	r3, [r3, #0]
 8016fe0:	0018      	movs	r0, r3
 8016fe2:	f000 f904 	bl	80171ee <USBD_Get_USB_Status>
 8016fe6:	0003      	movs	r3, r0
 8016fe8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016fea:	19bb      	adds	r3, r7, r6
 8016fec:	781b      	ldrb	r3, [r3, #0]
}
 8016fee:	0018      	movs	r0, r3
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	b005      	add	sp, #20
 8016ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ff6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ff6:	b580      	push	{r7, lr}
 8016ff8:	b084      	sub	sp, #16
 8016ffa:	af00      	add	r7, sp, #0
 8016ffc:	6078      	str	r0, [r7, #4]
 8016ffe:	000a      	movs	r2, r1
 8017000:	1cfb      	adds	r3, r7, #3
 8017002:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017004:	687a      	ldr	r2, [r7, #4]
 8017006:	23b0      	movs	r3, #176	@ 0xb0
 8017008:	009b      	lsls	r3, r3, #2
 801700a:	58d3      	ldr	r3, [r2, r3]
 801700c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801700e:	1cfb      	adds	r3, r7, #3
 8017010:	781b      	ldrb	r3, [r3, #0]
 8017012:	b25b      	sxtb	r3, r3
 8017014:	2b00      	cmp	r3, #0
 8017016:	da0d      	bge.n	8017034 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017018:	1cfb      	adds	r3, r7, #3
 801701a:	781b      	ldrb	r3, [r3, #0]
 801701c:	227f      	movs	r2, #127	@ 0x7f
 801701e:	4013      	ands	r3, r2
 8017020:	68f9      	ldr	r1, [r7, #12]
 8017022:	1c5a      	adds	r2, r3, #1
 8017024:	0013      	movs	r3, r2
 8017026:	009b      	lsls	r3, r3, #2
 8017028:	189b      	adds	r3, r3, r2
 801702a:	00db      	lsls	r3, r3, #3
 801702c:	18cb      	adds	r3, r1, r3
 801702e:	3302      	adds	r3, #2
 8017030:	781b      	ldrb	r3, [r3, #0]
 8017032:	e00d      	b.n	8017050 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017034:	1cfb      	adds	r3, r7, #3
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	227f      	movs	r2, #127	@ 0x7f
 801703a:	401a      	ands	r2, r3
 801703c:	68f8      	ldr	r0, [r7, #12]
 801703e:	23b5      	movs	r3, #181	@ 0xb5
 8017040:	0059      	lsls	r1, r3, #1
 8017042:	0013      	movs	r3, r2
 8017044:	009b      	lsls	r3, r3, #2
 8017046:	189b      	adds	r3, r3, r2
 8017048:	00db      	lsls	r3, r3, #3
 801704a:	18c3      	adds	r3, r0, r3
 801704c:	185b      	adds	r3, r3, r1
 801704e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017050:	0018      	movs	r0, r3
 8017052:	46bd      	mov	sp, r7
 8017054:	b004      	add	sp, #16
 8017056:	bd80      	pop	{r7, pc}

08017058 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801705a:	b085      	sub	sp, #20
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
 8017060:	000a      	movs	r2, r1
 8017062:	1cfb      	adds	r3, r7, #3
 8017064:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017066:	210f      	movs	r1, #15
 8017068:	187b      	adds	r3, r7, r1
 801706a:	2200      	movs	r2, #0
 801706c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801706e:	260e      	movs	r6, #14
 8017070:	19bb      	adds	r3, r7, r6
 8017072:	2200      	movs	r2, #0
 8017074:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017076:	687a      	ldr	r2, [r7, #4]
 8017078:	23b0      	movs	r3, #176	@ 0xb0
 801707a:	009b      	lsls	r3, r3, #2
 801707c:	58d2      	ldr	r2, [r2, r3]
 801707e:	000d      	movs	r5, r1
 8017080:	187c      	adds	r4, r7, r1
 8017082:	1cfb      	adds	r3, r7, #3
 8017084:	781b      	ldrb	r3, [r3, #0]
 8017086:	0019      	movs	r1, r3
 8017088:	0010      	movs	r0, r2
 801708a:	f7f6 ffd7 	bl	800e03c <HAL_PCD_SetAddress>
 801708e:	0003      	movs	r3, r0
 8017090:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017092:	19bc      	adds	r4, r7, r6
 8017094:	197b      	adds	r3, r7, r5
 8017096:	781b      	ldrb	r3, [r3, #0]
 8017098:	0018      	movs	r0, r3
 801709a:	f000 f8a8 	bl	80171ee <USBD_Get_USB_Status>
 801709e:	0003      	movs	r3, r0
 80170a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80170a2:	19bb      	adds	r3, r7, r6
 80170a4:	781b      	ldrb	r3, [r3, #0]
}
 80170a6:	0018      	movs	r0, r3
 80170a8:	46bd      	mov	sp, r7
 80170aa:	b005      	add	sp, #20
 80170ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80170ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170b0:	b087      	sub	sp, #28
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	60f8      	str	r0, [r7, #12]
 80170b6:	0008      	movs	r0, r1
 80170b8:	607a      	str	r2, [r7, #4]
 80170ba:	0019      	movs	r1, r3
 80170bc:	230b      	movs	r3, #11
 80170be:	18fb      	adds	r3, r7, r3
 80170c0:	1c02      	adds	r2, r0, #0
 80170c2:	701a      	strb	r2, [r3, #0]
 80170c4:	2408      	movs	r4, #8
 80170c6:	193b      	adds	r3, r7, r4
 80170c8:	1c0a      	adds	r2, r1, #0
 80170ca:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80170cc:	2117      	movs	r1, #23
 80170ce:	187b      	adds	r3, r7, r1
 80170d0:	2200      	movs	r2, #0
 80170d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80170d4:	2516      	movs	r5, #22
 80170d6:	197b      	adds	r3, r7, r5
 80170d8:	2200      	movs	r2, #0
 80170da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80170dc:	68fa      	ldr	r2, [r7, #12]
 80170de:	23b0      	movs	r3, #176	@ 0xb0
 80170e0:	009b      	lsls	r3, r3, #2
 80170e2:	58d0      	ldr	r0, [r2, r3]
 80170e4:	193b      	adds	r3, r7, r4
 80170e6:	881d      	ldrh	r5, [r3, #0]
 80170e8:	000e      	movs	r6, r1
 80170ea:	187c      	adds	r4, r7, r1
 80170ec:	687a      	ldr	r2, [r7, #4]
 80170ee:	230b      	movs	r3, #11
 80170f0:	18fb      	adds	r3, r7, r3
 80170f2:	7819      	ldrb	r1, [r3, #0]
 80170f4:	002b      	movs	r3, r5
 80170f6:	f7f7 f8dc 	bl	800e2b2 <HAL_PCD_EP_Transmit>
 80170fa:	0003      	movs	r3, r0
 80170fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80170fe:	2516      	movs	r5, #22
 8017100:	197c      	adds	r4, r7, r5
 8017102:	19bb      	adds	r3, r7, r6
 8017104:	781b      	ldrb	r3, [r3, #0]
 8017106:	0018      	movs	r0, r3
 8017108:	f000 f871 	bl	80171ee <USBD_Get_USB_Status>
 801710c:	0003      	movs	r3, r0
 801710e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017110:	197b      	adds	r3, r7, r5
 8017112:	781b      	ldrb	r3, [r3, #0]
}
 8017114:	0018      	movs	r0, r3
 8017116:	46bd      	mov	sp, r7
 8017118:	b007      	add	sp, #28
 801711a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801711c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801711c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801711e:	b087      	sub	sp, #28
 8017120:	af00      	add	r7, sp, #0
 8017122:	60f8      	str	r0, [r7, #12]
 8017124:	0008      	movs	r0, r1
 8017126:	607a      	str	r2, [r7, #4]
 8017128:	0019      	movs	r1, r3
 801712a:	230b      	movs	r3, #11
 801712c:	18fb      	adds	r3, r7, r3
 801712e:	1c02      	adds	r2, r0, #0
 8017130:	701a      	strb	r2, [r3, #0]
 8017132:	2408      	movs	r4, #8
 8017134:	193b      	adds	r3, r7, r4
 8017136:	1c0a      	adds	r2, r1, #0
 8017138:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801713a:	2117      	movs	r1, #23
 801713c:	187b      	adds	r3, r7, r1
 801713e:	2200      	movs	r2, #0
 8017140:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017142:	2516      	movs	r5, #22
 8017144:	197b      	adds	r3, r7, r5
 8017146:	2200      	movs	r2, #0
 8017148:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801714a:	68fa      	ldr	r2, [r7, #12]
 801714c:	23b0      	movs	r3, #176	@ 0xb0
 801714e:	009b      	lsls	r3, r3, #2
 8017150:	58d0      	ldr	r0, [r2, r3]
 8017152:	193b      	adds	r3, r7, r4
 8017154:	881d      	ldrh	r5, [r3, #0]
 8017156:	000e      	movs	r6, r1
 8017158:	187c      	adds	r4, r7, r1
 801715a:	687a      	ldr	r2, [r7, #4]
 801715c:	230b      	movs	r3, #11
 801715e:	18fb      	adds	r3, r7, r3
 8017160:	7819      	ldrb	r1, [r3, #0]
 8017162:	002b      	movs	r3, r5
 8017164:	f7f7 f855 	bl	800e212 <HAL_PCD_EP_Receive>
 8017168:	0003      	movs	r3, r0
 801716a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801716c:	2516      	movs	r5, #22
 801716e:	197c      	adds	r4, r7, r5
 8017170:	19bb      	adds	r3, r7, r6
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	0018      	movs	r0, r3
 8017176:	f000 f83a 	bl	80171ee <USBD_Get_USB_Status>
 801717a:	0003      	movs	r3, r0
 801717c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801717e:	197b      	adds	r3, r7, r5
 8017180:	781b      	ldrb	r3, [r3, #0]
}
 8017182:	0018      	movs	r0, r3
 8017184:	46bd      	mov	sp, r7
 8017186:	b007      	add	sp, #28
 8017188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801718a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801718a:	b580      	push	{r7, lr}
 801718c:	b082      	sub	sp, #8
 801718e:	af00      	add	r7, sp, #0
 8017190:	6078      	str	r0, [r7, #4]
 8017192:	000a      	movs	r2, r1
 8017194:	1cfb      	adds	r3, r7, #3
 8017196:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017198:	687a      	ldr	r2, [r7, #4]
 801719a:	23b0      	movs	r3, #176	@ 0xb0
 801719c:	009b      	lsls	r3, r3, #2
 801719e:	58d2      	ldr	r2, [r2, r3]
 80171a0:	1cfb      	adds	r3, r7, #3
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	0019      	movs	r1, r3
 80171a6:	0010      	movs	r0, r2
 80171a8:	f7f7 f86a 	bl	800e280 <HAL_PCD_EP_GetRxCount>
 80171ac:	0003      	movs	r3, r0
}
 80171ae:	0018      	movs	r0, r3
 80171b0:	46bd      	mov	sp, r7
 80171b2:	b002      	add	sp, #8
 80171b4:	bd80      	pop	{r7, pc}
	...

080171b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b082      	sub	sp, #8
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80171c0:	4b02      	ldr	r3, [pc, #8]	@ (80171cc <USBD_static_malloc+0x14>)
}
 80171c2:	0018      	movs	r0, r3
 80171c4:	46bd      	mov	sp, r7
 80171c6:	b002      	add	sp, #8
 80171c8:	bd80      	pop	{r7, pc}
 80171ca:	46c0      	nop			@ (mov r8, r8)
 80171cc:	20003ba8 	.word	0x20003ba8

080171d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b082      	sub	sp, #8
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]

}
 80171d8:	46c0      	nop			@ (mov r8, r8)
 80171da:	46bd      	mov	sp, r7
 80171dc:	b002      	add	sp, #8
 80171de:	bd80      	pop	{r7, pc}

080171e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80171e4:	f7ee fff6 	bl	80061d4 <SystemClock_Config>
}
 80171e8:	46c0      	nop			@ (mov r8, r8)
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}

080171ee <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80171ee:	b580      	push	{r7, lr}
 80171f0:	b084      	sub	sp, #16
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	0002      	movs	r2, r0
 80171f6:	1dfb      	adds	r3, r7, #7
 80171f8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171fa:	230f      	movs	r3, #15
 80171fc:	18fb      	adds	r3, r7, r3
 80171fe:	2200      	movs	r2, #0
 8017200:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8017202:	1dfb      	adds	r3, r7, #7
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	2b03      	cmp	r3, #3
 8017208:	d017      	beq.n	801723a <USBD_Get_USB_Status+0x4c>
 801720a:	dc1b      	bgt.n	8017244 <USBD_Get_USB_Status+0x56>
 801720c:	2b02      	cmp	r3, #2
 801720e:	d00f      	beq.n	8017230 <USBD_Get_USB_Status+0x42>
 8017210:	dc18      	bgt.n	8017244 <USBD_Get_USB_Status+0x56>
 8017212:	2b00      	cmp	r3, #0
 8017214:	d002      	beq.n	801721c <USBD_Get_USB_Status+0x2e>
 8017216:	2b01      	cmp	r3, #1
 8017218:	d005      	beq.n	8017226 <USBD_Get_USB_Status+0x38>
 801721a:	e013      	b.n	8017244 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801721c:	230f      	movs	r3, #15
 801721e:	18fb      	adds	r3, r7, r3
 8017220:	2200      	movs	r2, #0
 8017222:	701a      	strb	r2, [r3, #0]
    break;
 8017224:	e013      	b.n	801724e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017226:	230f      	movs	r3, #15
 8017228:	18fb      	adds	r3, r7, r3
 801722a:	2202      	movs	r2, #2
 801722c:	701a      	strb	r2, [r3, #0]
    break;
 801722e:	e00e      	b.n	801724e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017230:	230f      	movs	r3, #15
 8017232:	18fb      	adds	r3, r7, r3
 8017234:	2201      	movs	r2, #1
 8017236:	701a      	strb	r2, [r3, #0]
    break;
 8017238:	e009      	b.n	801724e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801723a:	230f      	movs	r3, #15
 801723c:	18fb      	adds	r3, r7, r3
 801723e:	2202      	movs	r2, #2
 8017240:	701a      	strb	r2, [r3, #0]
    break;
 8017242:	e004      	b.n	801724e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8017244:	230f      	movs	r3, #15
 8017246:	18fb      	adds	r3, r7, r3
 8017248:	2202      	movs	r2, #2
 801724a:	701a      	strb	r2, [r3, #0]
    break;
 801724c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801724e:	230f      	movs	r3, #15
 8017250:	18fb      	adds	r3, r7, r3
 8017252:	781b      	ldrb	r3, [r3, #0]
}
 8017254:	0018      	movs	r0, r3
 8017256:	46bd      	mov	sp, r7
 8017258:	b004      	add	sp, #16
 801725a:	bd80      	pop	{r7, pc}

0801725c <__cvt>:
 801725c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801725e:	001f      	movs	r7, r3
 8017260:	2300      	movs	r3, #0
 8017262:	0016      	movs	r6, r2
 8017264:	b08b      	sub	sp, #44	@ 0x2c
 8017266:	429f      	cmp	r7, r3
 8017268:	da04      	bge.n	8017274 <__cvt+0x18>
 801726a:	2180      	movs	r1, #128	@ 0x80
 801726c:	0609      	lsls	r1, r1, #24
 801726e:	187b      	adds	r3, r7, r1
 8017270:	001f      	movs	r7, r3
 8017272:	232d      	movs	r3, #45	@ 0x2d
 8017274:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017276:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8017278:	7013      	strb	r3, [r2, #0]
 801727a:	2320      	movs	r3, #32
 801727c:	2203      	movs	r2, #3
 801727e:	439d      	bics	r5, r3
 8017280:	2d46      	cmp	r5, #70	@ 0x46
 8017282:	d007      	beq.n	8017294 <__cvt+0x38>
 8017284:	002b      	movs	r3, r5
 8017286:	3b45      	subs	r3, #69	@ 0x45
 8017288:	4259      	negs	r1, r3
 801728a:	414b      	adcs	r3, r1
 801728c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801728e:	3a01      	subs	r2, #1
 8017290:	18cb      	adds	r3, r1, r3
 8017292:	9310      	str	r3, [sp, #64]	@ 0x40
 8017294:	ab09      	add	r3, sp, #36	@ 0x24
 8017296:	9304      	str	r3, [sp, #16]
 8017298:	ab08      	add	r3, sp, #32
 801729a:	9303      	str	r3, [sp, #12]
 801729c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801729e:	9200      	str	r2, [sp, #0]
 80172a0:	9302      	str	r3, [sp, #8]
 80172a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80172a4:	0032      	movs	r2, r6
 80172a6:	9301      	str	r3, [sp, #4]
 80172a8:	003b      	movs	r3, r7
 80172aa:	f000 ff13 	bl	80180d4 <_dtoa_r>
 80172ae:	0004      	movs	r4, r0
 80172b0:	2d47      	cmp	r5, #71	@ 0x47
 80172b2:	d11b      	bne.n	80172ec <__cvt+0x90>
 80172b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80172b6:	07db      	lsls	r3, r3, #31
 80172b8:	d511      	bpl.n	80172de <__cvt+0x82>
 80172ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80172bc:	18c3      	adds	r3, r0, r3
 80172be:	9307      	str	r3, [sp, #28]
 80172c0:	2200      	movs	r2, #0
 80172c2:	2300      	movs	r3, #0
 80172c4:	0030      	movs	r0, r6
 80172c6:	0039      	movs	r1, r7
 80172c8:	f7e9 f8c0 	bl	800044c <__aeabi_dcmpeq>
 80172cc:	2800      	cmp	r0, #0
 80172ce:	d001      	beq.n	80172d4 <__cvt+0x78>
 80172d0:	9b07      	ldr	r3, [sp, #28]
 80172d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80172d4:	2230      	movs	r2, #48	@ 0x30
 80172d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172d8:	9907      	ldr	r1, [sp, #28]
 80172da:	428b      	cmp	r3, r1
 80172dc:	d320      	bcc.n	8017320 <__cvt+0xc4>
 80172de:	0020      	movs	r0, r4
 80172e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80172e4:	1b1b      	subs	r3, r3, r4
 80172e6:	6013      	str	r3, [r2, #0]
 80172e8:	b00b      	add	sp, #44	@ 0x2c
 80172ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80172ee:	18c3      	adds	r3, r0, r3
 80172f0:	9307      	str	r3, [sp, #28]
 80172f2:	2d46      	cmp	r5, #70	@ 0x46
 80172f4:	d1e4      	bne.n	80172c0 <__cvt+0x64>
 80172f6:	7803      	ldrb	r3, [r0, #0]
 80172f8:	2b30      	cmp	r3, #48	@ 0x30
 80172fa:	d10c      	bne.n	8017316 <__cvt+0xba>
 80172fc:	2200      	movs	r2, #0
 80172fe:	2300      	movs	r3, #0
 8017300:	0030      	movs	r0, r6
 8017302:	0039      	movs	r1, r7
 8017304:	f7e9 f8a2 	bl	800044c <__aeabi_dcmpeq>
 8017308:	2800      	cmp	r0, #0
 801730a:	d104      	bne.n	8017316 <__cvt+0xba>
 801730c:	2301      	movs	r3, #1
 801730e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017310:	1a9b      	subs	r3, r3, r2
 8017312:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017314:	6013      	str	r3, [r2, #0]
 8017316:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017318:	9a07      	ldr	r2, [sp, #28]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	18d3      	adds	r3, r2, r3
 801731e:	e7ce      	b.n	80172be <__cvt+0x62>
 8017320:	1c59      	adds	r1, r3, #1
 8017322:	9109      	str	r1, [sp, #36]	@ 0x24
 8017324:	701a      	strb	r2, [r3, #0]
 8017326:	e7d6      	b.n	80172d6 <__cvt+0x7a>

08017328 <__exponent>:
 8017328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801732a:	232b      	movs	r3, #43	@ 0x2b
 801732c:	0005      	movs	r5, r0
 801732e:	000c      	movs	r4, r1
 8017330:	b085      	sub	sp, #20
 8017332:	7002      	strb	r2, [r0, #0]
 8017334:	2900      	cmp	r1, #0
 8017336:	da01      	bge.n	801733c <__exponent+0x14>
 8017338:	424c      	negs	r4, r1
 801733a:	3302      	adds	r3, #2
 801733c:	706b      	strb	r3, [r5, #1]
 801733e:	2c09      	cmp	r4, #9
 8017340:	dd2c      	ble.n	801739c <__exponent+0x74>
 8017342:	ab02      	add	r3, sp, #8
 8017344:	1dde      	adds	r6, r3, #7
 8017346:	0020      	movs	r0, r4
 8017348:	210a      	movs	r1, #10
 801734a:	f7e9 f869 	bl	8000420 <__aeabi_idivmod>
 801734e:	0037      	movs	r7, r6
 8017350:	3130      	adds	r1, #48	@ 0x30
 8017352:	3e01      	subs	r6, #1
 8017354:	0020      	movs	r0, r4
 8017356:	7031      	strb	r1, [r6, #0]
 8017358:	210a      	movs	r1, #10
 801735a:	9401      	str	r4, [sp, #4]
 801735c:	f7e8 ff7a 	bl	8000254 <__divsi3>
 8017360:	9b01      	ldr	r3, [sp, #4]
 8017362:	0004      	movs	r4, r0
 8017364:	2b63      	cmp	r3, #99	@ 0x63
 8017366:	dcee      	bgt.n	8017346 <__exponent+0x1e>
 8017368:	1eba      	subs	r2, r7, #2
 801736a:	1ca8      	adds	r0, r5, #2
 801736c:	0001      	movs	r1, r0
 801736e:	0013      	movs	r3, r2
 8017370:	3430      	adds	r4, #48	@ 0x30
 8017372:	7014      	strb	r4, [r2, #0]
 8017374:	ac02      	add	r4, sp, #8
 8017376:	3407      	adds	r4, #7
 8017378:	429c      	cmp	r4, r3
 801737a:	d80a      	bhi.n	8017392 <__exponent+0x6a>
 801737c:	2300      	movs	r3, #0
 801737e:	42a2      	cmp	r2, r4
 8017380:	d803      	bhi.n	801738a <__exponent+0x62>
 8017382:	3309      	adds	r3, #9
 8017384:	aa02      	add	r2, sp, #8
 8017386:	189b      	adds	r3, r3, r2
 8017388:	1bdb      	subs	r3, r3, r7
 801738a:	18c0      	adds	r0, r0, r3
 801738c:	1b40      	subs	r0, r0, r5
 801738e:	b005      	add	sp, #20
 8017390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017392:	781c      	ldrb	r4, [r3, #0]
 8017394:	3301      	adds	r3, #1
 8017396:	700c      	strb	r4, [r1, #0]
 8017398:	3101      	adds	r1, #1
 801739a:	e7eb      	b.n	8017374 <__exponent+0x4c>
 801739c:	2330      	movs	r3, #48	@ 0x30
 801739e:	18e4      	adds	r4, r4, r3
 80173a0:	70ab      	strb	r3, [r5, #2]
 80173a2:	1d28      	adds	r0, r5, #4
 80173a4:	70ec      	strb	r4, [r5, #3]
 80173a6:	e7f1      	b.n	801738c <__exponent+0x64>

080173a8 <_printf_float>:
 80173a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173aa:	b097      	sub	sp, #92	@ 0x5c
 80173ac:	000d      	movs	r5, r1
 80173ae:	920a      	str	r2, [sp, #40]	@ 0x28
 80173b0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80173b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80173b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80173b6:	f000 fd6b 	bl	8017e90 <_localeconv_r>
 80173ba:	6803      	ldr	r3, [r0, #0]
 80173bc:	0018      	movs	r0, r3
 80173be:	930d      	str	r3, [sp, #52]	@ 0x34
 80173c0:	f7e8 fea2 	bl	8000108 <strlen>
 80173c4:	2300      	movs	r3, #0
 80173c6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80173c8:	9314      	str	r3, [sp, #80]	@ 0x50
 80173ca:	7e2b      	ldrb	r3, [r5, #24]
 80173cc:	2207      	movs	r2, #7
 80173ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80173d0:	682b      	ldr	r3, [r5, #0]
 80173d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80173d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80173d6:	6823      	ldr	r3, [r4, #0]
 80173d8:	05c9      	lsls	r1, r1, #23
 80173da:	d545      	bpl.n	8017468 <_printf_float+0xc0>
 80173dc:	189b      	adds	r3, r3, r2
 80173de:	4393      	bics	r3, r2
 80173e0:	001a      	movs	r2, r3
 80173e2:	3208      	adds	r2, #8
 80173e4:	6022      	str	r2, [r4, #0]
 80173e6:	2201      	movs	r2, #1
 80173e8:	681e      	ldr	r6, [r3, #0]
 80173ea:	685f      	ldr	r7, [r3, #4]
 80173ec:	007b      	lsls	r3, r7, #1
 80173ee:	085b      	lsrs	r3, r3, #1
 80173f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80173f2:	9610      	str	r6, [sp, #64]	@ 0x40
 80173f4:	64ae      	str	r6, [r5, #72]	@ 0x48
 80173f6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80173f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80173fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80173fc:	4ba7      	ldr	r3, [pc, #668]	@ (801769c <_printf_float+0x2f4>)
 80173fe:	4252      	negs	r2, r2
 8017400:	f7eb fefe 	bl	8003200 <__aeabi_dcmpun>
 8017404:	2800      	cmp	r0, #0
 8017406:	d131      	bne.n	801746c <_printf_float+0xc4>
 8017408:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801740a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801740c:	2201      	movs	r2, #1
 801740e:	4ba3      	ldr	r3, [pc, #652]	@ (801769c <_printf_float+0x2f4>)
 8017410:	4252      	negs	r2, r2
 8017412:	f7e9 f82b 	bl	800046c <__aeabi_dcmple>
 8017416:	2800      	cmp	r0, #0
 8017418:	d128      	bne.n	801746c <_printf_float+0xc4>
 801741a:	2200      	movs	r2, #0
 801741c:	2300      	movs	r3, #0
 801741e:	0030      	movs	r0, r6
 8017420:	0039      	movs	r1, r7
 8017422:	f7e9 f819 	bl	8000458 <__aeabi_dcmplt>
 8017426:	2800      	cmp	r0, #0
 8017428:	d003      	beq.n	8017432 <_printf_float+0x8a>
 801742a:	002b      	movs	r3, r5
 801742c:	222d      	movs	r2, #45	@ 0x2d
 801742e:	3343      	adds	r3, #67	@ 0x43
 8017430:	701a      	strb	r2, [r3, #0]
 8017432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017434:	4f9a      	ldr	r7, [pc, #616]	@ (80176a0 <_printf_float+0x2f8>)
 8017436:	2b47      	cmp	r3, #71	@ 0x47
 8017438:	d900      	bls.n	801743c <_printf_float+0x94>
 801743a:	4f9a      	ldr	r7, [pc, #616]	@ (80176a4 <_printf_float+0x2fc>)
 801743c:	2303      	movs	r3, #3
 801743e:	2400      	movs	r4, #0
 8017440:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017442:	612b      	str	r3, [r5, #16]
 8017444:	3301      	adds	r3, #1
 8017446:	439a      	bics	r2, r3
 8017448:	602a      	str	r2, [r5, #0]
 801744a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801744c:	0029      	movs	r1, r5
 801744e:	9300      	str	r3, [sp, #0]
 8017450:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017454:	aa15      	add	r2, sp, #84	@ 0x54
 8017456:	f000 f9e5 	bl	8017824 <_printf_common>
 801745a:	3001      	adds	r0, #1
 801745c:	d000      	beq.n	8017460 <_printf_float+0xb8>
 801745e:	e09f      	b.n	80175a0 <_printf_float+0x1f8>
 8017460:	2001      	movs	r0, #1
 8017462:	4240      	negs	r0, r0
 8017464:	b017      	add	sp, #92	@ 0x5c
 8017466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017468:	3307      	adds	r3, #7
 801746a:	e7b8      	b.n	80173de <_printf_float+0x36>
 801746c:	0032      	movs	r2, r6
 801746e:	003b      	movs	r3, r7
 8017470:	0030      	movs	r0, r6
 8017472:	0039      	movs	r1, r7
 8017474:	f7eb fec4 	bl	8003200 <__aeabi_dcmpun>
 8017478:	2800      	cmp	r0, #0
 801747a:	d00b      	beq.n	8017494 <_printf_float+0xec>
 801747c:	2f00      	cmp	r7, #0
 801747e:	da03      	bge.n	8017488 <_printf_float+0xe0>
 8017480:	002b      	movs	r3, r5
 8017482:	222d      	movs	r2, #45	@ 0x2d
 8017484:	3343      	adds	r3, #67	@ 0x43
 8017486:	701a      	strb	r2, [r3, #0]
 8017488:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801748a:	4f87      	ldr	r7, [pc, #540]	@ (80176a8 <_printf_float+0x300>)
 801748c:	2b47      	cmp	r3, #71	@ 0x47
 801748e:	d9d5      	bls.n	801743c <_printf_float+0x94>
 8017490:	4f86      	ldr	r7, [pc, #536]	@ (80176ac <_printf_float+0x304>)
 8017492:	e7d3      	b.n	801743c <_printf_float+0x94>
 8017494:	2220      	movs	r2, #32
 8017496:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017498:	686b      	ldr	r3, [r5, #4]
 801749a:	4394      	bics	r4, r2
 801749c:	1c5a      	adds	r2, r3, #1
 801749e:	d146      	bne.n	801752e <_printf_float+0x186>
 80174a0:	3307      	adds	r3, #7
 80174a2:	606b      	str	r3, [r5, #4]
 80174a4:	2380      	movs	r3, #128	@ 0x80
 80174a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80174a8:	00db      	lsls	r3, r3, #3
 80174aa:	4313      	orrs	r3, r2
 80174ac:	2200      	movs	r2, #0
 80174ae:	602b      	str	r3, [r5, #0]
 80174b0:	9206      	str	r2, [sp, #24]
 80174b2:	aa14      	add	r2, sp, #80	@ 0x50
 80174b4:	9205      	str	r2, [sp, #20]
 80174b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80174b8:	a90a      	add	r1, sp, #40	@ 0x28
 80174ba:	9204      	str	r2, [sp, #16]
 80174bc:	aa13      	add	r2, sp, #76	@ 0x4c
 80174be:	9203      	str	r2, [sp, #12]
 80174c0:	2223      	movs	r2, #35	@ 0x23
 80174c2:	1852      	adds	r2, r2, r1
 80174c4:	9202      	str	r2, [sp, #8]
 80174c6:	9301      	str	r3, [sp, #4]
 80174c8:	686b      	ldr	r3, [r5, #4]
 80174ca:	0032      	movs	r2, r6
 80174cc:	9300      	str	r3, [sp, #0]
 80174ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174d0:	003b      	movs	r3, r7
 80174d2:	f7ff fec3 	bl	801725c <__cvt>
 80174d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80174d8:	0007      	movs	r7, r0
 80174da:	2c47      	cmp	r4, #71	@ 0x47
 80174dc:	d12d      	bne.n	801753a <_printf_float+0x192>
 80174de:	1cd3      	adds	r3, r2, #3
 80174e0:	db02      	blt.n	80174e8 <_printf_float+0x140>
 80174e2:	686b      	ldr	r3, [r5, #4]
 80174e4:	429a      	cmp	r2, r3
 80174e6:	dd48      	ble.n	801757a <_printf_float+0x1d2>
 80174e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80174ec:	3b02      	subs	r3, #2
 80174ee:	b2db      	uxtb	r3, r3
 80174f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80174f2:	0028      	movs	r0, r5
 80174f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80174f6:	3901      	subs	r1, #1
 80174f8:	3050      	adds	r0, #80	@ 0x50
 80174fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80174fc:	f7ff ff14 	bl	8017328 <__exponent>
 8017500:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017502:	0004      	movs	r4, r0
 8017504:	1813      	adds	r3, r2, r0
 8017506:	612b      	str	r3, [r5, #16]
 8017508:	2a01      	cmp	r2, #1
 801750a:	dc02      	bgt.n	8017512 <_printf_float+0x16a>
 801750c:	682a      	ldr	r2, [r5, #0]
 801750e:	07d2      	lsls	r2, r2, #31
 8017510:	d501      	bpl.n	8017516 <_printf_float+0x16e>
 8017512:	3301      	adds	r3, #1
 8017514:	612b      	str	r3, [r5, #16]
 8017516:	2323      	movs	r3, #35	@ 0x23
 8017518:	aa0a      	add	r2, sp, #40	@ 0x28
 801751a:	189b      	adds	r3, r3, r2
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d100      	bne.n	8017524 <_printf_float+0x17c>
 8017522:	e792      	b.n	801744a <_printf_float+0xa2>
 8017524:	002b      	movs	r3, r5
 8017526:	222d      	movs	r2, #45	@ 0x2d
 8017528:	3343      	adds	r3, #67	@ 0x43
 801752a:	701a      	strb	r2, [r3, #0]
 801752c:	e78d      	b.n	801744a <_printf_float+0xa2>
 801752e:	2c47      	cmp	r4, #71	@ 0x47
 8017530:	d1b8      	bne.n	80174a4 <_printf_float+0xfc>
 8017532:	2b00      	cmp	r3, #0
 8017534:	d1b6      	bne.n	80174a4 <_printf_float+0xfc>
 8017536:	3301      	adds	r3, #1
 8017538:	e7b3      	b.n	80174a2 <_printf_float+0xfa>
 801753a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801753c:	0011      	movs	r1, r2
 801753e:	2b65      	cmp	r3, #101	@ 0x65
 8017540:	d9d7      	bls.n	80174f2 <_printf_float+0x14a>
 8017542:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017544:	2b66      	cmp	r3, #102	@ 0x66
 8017546:	d11a      	bne.n	801757e <_printf_float+0x1d6>
 8017548:	686b      	ldr	r3, [r5, #4]
 801754a:	2a00      	cmp	r2, #0
 801754c:	dd09      	ble.n	8017562 <_printf_float+0x1ba>
 801754e:	612a      	str	r2, [r5, #16]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d102      	bne.n	801755a <_printf_float+0x1b2>
 8017554:	6829      	ldr	r1, [r5, #0]
 8017556:	07c9      	lsls	r1, r1, #31
 8017558:	d50b      	bpl.n	8017572 <_printf_float+0x1ca>
 801755a:	3301      	adds	r3, #1
 801755c:	189b      	adds	r3, r3, r2
 801755e:	612b      	str	r3, [r5, #16]
 8017560:	e007      	b.n	8017572 <_printf_float+0x1ca>
 8017562:	2b00      	cmp	r3, #0
 8017564:	d103      	bne.n	801756e <_printf_float+0x1c6>
 8017566:	2201      	movs	r2, #1
 8017568:	6829      	ldr	r1, [r5, #0]
 801756a:	4211      	tst	r1, r2
 801756c:	d000      	beq.n	8017570 <_printf_float+0x1c8>
 801756e:	1c9a      	adds	r2, r3, #2
 8017570:	612a      	str	r2, [r5, #16]
 8017572:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017574:	2400      	movs	r4, #0
 8017576:	65ab      	str	r3, [r5, #88]	@ 0x58
 8017578:	e7cd      	b.n	8017516 <_printf_float+0x16e>
 801757a:	2367      	movs	r3, #103	@ 0x67
 801757c:	930c      	str	r3, [sp, #48]	@ 0x30
 801757e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017580:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017582:	4299      	cmp	r1, r3
 8017584:	db06      	blt.n	8017594 <_printf_float+0x1ec>
 8017586:	682b      	ldr	r3, [r5, #0]
 8017588:	6129      	str	r1, [r5, #16]
 801758a:	07db      	lsls	r3, r3, #31
 801758c:	d5f1      	bpl.n	8017572 <_printf_float+0x1ca>
 801758e:	3101      	adds	r1, #1
 8017590:	6129      	str	r1, [r5, #16]
 8017592:	e7ee      	b.n	8017572 <_printf_float+0x1ca>
 8017594:	2201      	movs	r2, #1
 8017596:	2900      	cmp	r1, #0
 8017598:	dce0      	bgt.n	801755c <_printf_float+0x1b4>
 801759a:	1892      	adds	r2, r2, r2
 801759c:	1a52      	subs	r2, r2, r1
 801759e:	e7dd      	b.n	801755c <_printf_float+0x1b4>
 80175a0:	682a      	ldr	r2, [r5, #0]
 80175a2:	0553      	lsls	r3, r2, #21
 80175a4:	d408      	bmi.n	80175b8 <_printf_float+0x210>
 80175a6:	692b      	ldr	r3, [r5, #16]
 80175a8:	003a      	movs	r2, r7
 80175aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80175b0:	47a0      	blx	r4
 80175b2:	3001      	adds	r0, #1
 80175b4:	d129      	bne.n	801760a <_printf_float+0x262>
 80175b6:	e753      	b.n	8017460 <_printf_float+0xb8>
 80175b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175ba:	2b65      	cmp	r3, #101	@ 0x65
 80175bc:	d800      	bhi.n	80175c0 <_printf_float+0x218>
 80175be:	e0da      	b.n	8017776 <_printf_float+0x3ce>
 80175c0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80175c2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80175c4:	2200      	movs	r2, #0
 80175c6:	2300      	movs	r3, #0
 80175c8:	f7e8 ff40 	bl	800044c <__aeabi_dcmpeq>
 80175cc:	2800      	cmp	r0, #0
 80175ce:	d033      	beq.n	8017638 <_printf_float+0x290>
 80175d0:	2301      	movs	r3, #1
 80175d2:	4a37      	ldr	r2, [pc, #220]	@ (80176b0 <_printf_float+0x308>)
 80175d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175d8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80175da:	47a0      	blx	r4
 80175dc:	3001      	adds	r0, #1
 80175de:	d100      	bne.n	80175e2 <_printf_float+0x23a>
 80175e0:	e73e      	b.n	8017460 <_printf_float+0xb8>
 80175e2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80175e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80175e6:	42b3      	cmp	r3, r6
 80175e8:	db02      	blt.n	80175f0 <_printf_float+0x248>
 80175ea:	682b      	ldr	r3, [r5, #0]
 80175ec:	07db      	lsls	r3, r3, #31
 80175ee:	d50c      	bpl.n	801760a <_printf_float+0x262>
 80175f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80175f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80175f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175fa:	47a0      	blx	r4
 80175fc:	2400      	movs	r4, #0
 80175fe:	3001      	adds	r0, #1
 8017600:	d100      	bne.n	8017604 <_printf_float+0x25c>
 8017602:	e72d      	b.n	8017460 <_printf_float+0xb8>
 8017604:	1e73      	subs	r3, r6, #1
 8017606:	42a3      	cmp	r3, r4
 8017608:	dc0a      	bgt.n	8017620 <_printf_float+0x278>
 801760a:	682b      	ldr	r3, [r5, #0]
 801760c:	079b      	lsls	r3, r3, #30
 801760e:	d500      	bpl.n	8017612 <_printf_float+0x26a>
 8017610:	e105      	b.n	801781e <_printf_float+0x476>
 8017612:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017614:	68e8      	ldr	r0, [r5, #12]
 8017616:	4298      	cmp	r0, r3
 8017618:	db00      	blt.n	801761c <_printf_float+0x274>
 801761a:	e723      	b.n	8017464 <_printf_float+0xbc>
 801761c:	0018      	movs	r0, r3
 801761e:	e721      	b.n	8017464 <_printf_float+0xbc>
 8017620:	002a      	movs	r2, r5
 8017622:	2301      	movs	r3, #1
 8017624:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017628:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801762a:	321a      	adds	r2, #26
 801762c:	47b8      	blx	r7
 801762e:	3001      	adds	r0, #1
 8017630:	d100      	bne.n	8017634 <_printf_float+0x28c>
 8017632:	e715      	b.n	8017460 <_printf_float+0xb8>
 8017634:	3401      	adds	r4, #1
 8017636:	e7e5      	b.n	8017604 <_printf_float+0x25c>
 8017638:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801763a:	2b00      	cmp	r3, #0
 801763c:	dc3a      	bgt.n	80176b4 <_printf_float+0x30c>
 801763e:	2301      	movs	r3, #1
 8017640:	4a1b      	ldr	r2, [pc, #108]	@ (80176b0 <_printf_float+0x308>)
 8017642:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017644:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017646:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017648:	47a0      	blx	r4
 801764a:	3001      	adds	r0, #1
 801764c:	d100      	bne.n	8017650 <_printf_float+0x2a8>
 801764e:	e707      	b.n	8017460 <_printf_float+0xb8>
 8017650:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017652:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017654:	4333      	orrs	r3, r6
 8017656:	d102      	bne.n	801765e <_printf_float+0x2b6>
 8017658:	682b      	ldr	r3, [r5, #0]
 801765a:	07db      	lsls	r3, r3, #31
 801765c:	d5d5      	bpl.n	801760a <_printf_float+0x262>
 801765e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017660:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017662:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017664:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017666:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017668:	47a0      	blx	r4
 801766a:	2300      	movs	r3, #0
 801766c:	3001      	adds	r0, #1
 801766e:	d100      	bne.n	8017672 <_printf_float+0x2ca>
 8017670:	e6f6      	b.n	8017460 <_printf_float+0xb8>
 8017672:	930c      	str	r3, [sp, #48]	@ 0x30
 8017674:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017676:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017678:	425b      	negs	r3, r3
 801767a:	4293      	cmp	r3, r2
 801767c:	dc01      	bgt.n	8017682 <_printf_float+0x2da>
 801767e:	0033      	movs	r3, r6
 8017680:	e792      	b.n	80175a8 <_printf_float+0x200>
 8017682:	002a      	movs	r2, r5
 8017684:	2301      	movs	r3, #1
 8017686:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017688:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801768a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801768c:	321a      	adds	r2, #26
 801768e:	47a0      	blx	r4
 8017690:	3001      	adds	r0, #1
 8017692:	d100      	bne.n	8017696 <_printf_float+0x2ee>
 8017694:	e6e4      	b.n	8017460 <_printf_float+0xb8>
 8017696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017698:	3301      	adds	r3, #1
 801769a:	e7ea      	b.n	8017672 <_printf_float+0x2ca>
 801769c:	7fefffff 	.word	0x7fefffff
 80176a0:	0801bacc 	.word	0x0801bacc
 80176a4:	0801bad0 	.word	0x0801bad0
 80176a8:	0801bad4 	.word	0x0801bad4
 80176ac:	0801bad8 	.word	0x0801bad8
 80176b0:	0801badc 	.word	0x0801badc
 80176b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80176b6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80176b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80176ba:	429e      	cmp	r6, r3
 80176bc:	dd00      	ble.n	80176c0 <_printf_float+0x318>
 80176be:	001e      	movs	r6, r3
 80176c0:	2e00      	cmp	r6, #0
 80176c2:	dc31      	bgt.n	8017728 <_printf_float+0x380>
 80176c4:	43f3      	mvns	r3, r6
 80176c6:	2400      	movs	r4, #0
 80176c8:	17db      	asrs	r3, r3, #31
 80176ca:	4033      	ands	r3, r6
 80176cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80176ce:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80176d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80176d2:	1af3      	subs	r3, r6, r3
 80176d4:	42a3      	cmp	r3, r4
 80176d6:	dc30      	bgt.n	801773a <_printf_float+0x392>
 80176d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80176da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80176dc:	429a      	cmp	r2, r3
 80176de:	dc38      	bgt.n	8017752 <_printf_float+0x3aa>
 80176e0:	682b      	ldr	r3, [r5, #0]
 80176e2:	07db      	lsls	r3, r3, #31
 80176e4:	d435      	bmi.n	8017752 <_printf_float+0x3aa>
 80176e6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80176e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80176ec:	1b9b      	subs	r3, r3, r6
 80176ee:	1b14      	subs	r4, r2, r4
 80176f0:	429c      	cmp	r4, r3
 80176f2:	dd00      	ble.n	80176f6 <_printf_float+0x34e>
 80176f4:	001c      	movs	r4, r3
 80176f6:	2c00      	cmp	r4, #0
 80176f8:	dc34      	bgt.n	8017764 <_printf_float+0x3bc>
 80176fa:	43e3      	mvns	r3, r4
 80176fc:	2600      	movs	r6, #0
 80176fe:	17db      	asrs	r3, r3, #31
 8017700:	401c      	ands	r4, r3
 8017702:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017704:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017706:	1ad3      	subs	r3, r2, r3
 8017708:	1b1b      	subs	r3, r3, r4
 801770a:	42b3      	cmp	r3, r6
 801770c:	dc00      	bgt.n	8017710 <_printf_float+0x368>
 801770e:	e77c      	b.n	801760a <_printf_float+0x262>
 8017710:	002a      	movs	r2, r5
 8017712:	2301      	movs	r3, #1
 8017714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017718:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801771a:	321a      	adds	r2, #26
 801771c:	47b8      	blx	r7
 801771e:	3001      	adds	r0, #1
 8017720:	d100      	bne.n	8017724 <_printf_float+0x37c>
 8017722:	e69d      	b.n	8017460 <_printf_float+0xb8>
 8017724:	3601      	adds	r6, #1
 8017726:	e7ec      	b.n	8017702 <_printf_float+0x35a>
 8017728:	0033      	movs	r3, r6
 801772a:	003a      	movs	r2, r7
 801772c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801772e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017730:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017732:	47a0      	blx	r4
 8017734:	3001      	adds	r0, #1
 8017736:	d1c5      	bne.n	80176c4 <_printf_float+0x31c>
 8017738:	e692      	b.n	8017460 <_printf_float+0xb8>
 801773a:	002a      	movs	r2, r5
 801773c:	2301      	movs	r3, #1
 801773e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017740:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017742:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017744:	321a      	adds	r2, #26
 8017746:	47b0      	blx	r6
 8017748:	3001      	adds	r0, #1
 801774a:	d100      	bne.n	801774e <_printf_float+0x3a6>
 801774c:	e688      	b.n	8017460 <_printf_float+0xb8>
 801774e:	3401      	adds	r4, #1
 8017750:	e7bd      	b.n	80176ce <_printf_float+0x326>
 8017752:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017754:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017756:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017758:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801775a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801775c:	47a0      	blx	r4
 801775e:	3001      	adds	r0, #1
 8017760:	d1c1      	bne.n	80176e6 <_printf_float+0x33e>
 8017762:	e67d      	b.n	8017460 <_printf_float+0xb8>
 8017764:	19ba      	adds	r2, r7, r6
 8017766:	0023      	movs	r3, r4
 8017768:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801776a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801776c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801776e:	47b0      	blx	r6
 8017770:	3001      	adds	r0, #1
 8017772:	d1c2      	bne.n	80176fa <_printf_float+0x352>
 8017774:	e674      	b.n	8017460 <_printf_float+0xb8>
 8017776:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017778:	930c      	str	r3, [sp, #48]	@ 0x30
 801777a:	2b01      	cmp	r3, #1
 801777c:	dc02      	bgt.n	8017784 <_printf_float+0x3dc>
 801777e:	2301      	movs	r3, #1
 8017780:	421a      	tst	r2, r3
 8017782:	d039      	beq.n	80177f8 <_printf_float+0x450>
 8017784:	2301      	movs	r3, #1
 8017786:	003a      	movs	r2, r7
 8017788:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801778a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801778c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801778e:	47b0      	blx	r6
 8017790:	3001      	adds	r0, #1
 8017792:	d100      	bne.n	8017796 <_printf_float+0x3ee>
 8017794:	e664      	b.n	8017460 <_printf_float+0xb8>
 8017796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017798:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801779a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801779c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801779e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80177a0:	47b0      	blx	r6
 80177a2:	3001      	adds	r0, #1
 80177a4:	d100      	bne.n	80177a8 <_printf_float+0x400>
 80177a6:	e65b      	b.n	8017460 <_printf_float+0xb8>
 80177a8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80177aa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80177ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177ae:	2200      	movs	r2, #0
 80177b0:	3b01      	subs	r3, #1
 80177b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80177b4:	2300      	movs	r3, #0
 80177b6:	f7e8 fe49 	bl	800044c <__aeabi_dcmpeq>
 80177ba:	2800      	cmp	r0, #0
 80177bc:	d11a      	bne.n	80177f4 <_printf_float+0x44c>
 80177be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177c0:	1c7a      	adds	r2, r7, #1
 80177c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80177c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177c6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80177c8:	47b0      	blx	r6
 80177ca:	3001      	adds	r0, #1
 80177cc:	d10e      	bne.n	80177ec <_printf_float+0x444>
 80177ce:	e647      	b.n	8017460 <_printf_float+0xb8>
 80177d0:	002a      	movs	r2, r5
 80177d2:	2301      	movs	r3, #1
 80177d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80177d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80177da:	321a      	adds	r2, #26
 80177dc:	47b8      	blx	r7
 80177de:	3001      	adds	r0, #1
 80177e0:	d100      	bne.n	80177e4 <_printf_float+0x43c>
 80177e2:	e63d      	b.n	8017460 <_printf_float+0xb8>
 80177e4:	3601      	adds	r6, #1
 80177e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177e8:	429e      	cmp	r6, r3
 80177ea:	dbf1      	blt.n	80177d0 <_printf_float+0x428>
 80177ec:	002a      	movs	r2, r5
 80177ee:	0023      	movs	r3, r4
 80177f0:	3250      	adds	r2, #80	@ 0x50
 80177f2:	e6da      	b.n	80175aa <_printf_float+0x202>
 80177f4:	2600      	movs	r6, #0
 80177f6:	e7f6      	b.n	80177e6 <_printf_float+0x43e>
 80177f8:	003a      	movs	r2, r7
 80177fa:	e7e2      	b.n	80177c2 <_printf_float+0x41a>
 80177fc:	002a      	movs	r2, r5
 80177fe:	2301      	movs	r3, #1
 8017800:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017804:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017806:	3219      	adds	r2, #25
 8017808:	47b0      	blx	r6
 801780a:	3001      	adds	r0, #1
 801780c:	d100      	bne.n	8017810 <_printf_float+0x468>
 801780e:	e627      	b.n	8017460 <_printf_float+0xb8>
 8017810:	3401      	adds	r4, #1
 8017812:	68eb      	ldr	r3, [r5, #12]
 8017814:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017816:	1a9b      	subs	r3, r3, r2
 8017818:	42a3      	cmp	r3, r4
 801781a:	dcef      	bgt.n	80177fc <_printf_float+0x454>
 801781c:	e6f9      	b.n	8017612 <_printf_float+0x26a>
 801781e:	2400      	movs	r4, #0
 8017820:	e7f7      	b.n	8017812 <_printf_float+0x46a>
 8017822:	46c0      	nop			@ (mov r8, r8)

08017824 <_printf_common>:
 8017824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017826:	0016      	movs	r6, r2
 8017828:	9301      	str	r3, [sp, #4]
 801782a:	688a      	ldr	r2, [r1, #8]
 801782c:	690b      	ldr	r3, [r1, #16]
 801782e:	000c      	movs	r4, r1
 8017830:	9000      	str	r0, [sp, #0]
 8017832:	4293      	cmp	r3, r2
 8017834:	da00      	bge.n	8017838 <_printf_common+0x14>
 8017836:	0013      	movs	r3, r2
 8017838:	0022      	movs	r2, r4
 801783a:	6033      	str	r3, [r6, #0]
 801783c:	3243      	adds	r2, #67	@ 0x43
 801783e:	7812      	ldrb	r2, [r2, #0]
 8017840:	2a00      	cmp	r2, #0
 8017842:	d001      	beq.n	8017848 <_printf_common+0x24>
 8017844:	3301      	adds	r3, #1
 8017846:	6033      	str	r3, [r6, #0]
 8017848:	6823      	ldr	r3, [r4, #0]
 801784a:	069b      	lsls	r3, r3, #26
 801784c:	d502      	bpl.n	8017854 <_printf_common+0x30>
 801784e:	6833      	ldr	r3, [r6, #0]
 8017850:	3302      	adds	r3, #2
 8017852:	6033      	str	r3, [r6, #0]
 8017854:	6822      	ldr	r2, [r4, #0]
 8017856:	2306      	movs	r3, #6
 8017858:	0015      	movs	r5, r2
 801785a:	401d      	ands	r5, r3
 801785c:	421a      	tst	r2, r3
 801785e:	d027      	beq.n	80178b0 <_printf_common+0x8c>
 8017860:	0023      	movs	r3, r4
 8017862:	3343      	adds	r3, #67	@ 0x43
 8017864:	781b      	ldrb	r3, [r3, #0]
 8017866:	1e5a      	subs	r2, r3, #1
 8017868:	4193      	sbcs	r3, r2
 801786a:	6822      	ldr	r2, [r4, #0]
 801786c:	0692      	lsls	r2, r2, #26
 801786e:	d430      	bmi.n	80178d2 <_printf_common+0xae>
 8017870:	0022      	movs	r2, r4
 8017872:	9901      	ldr	r1, [sp, #4]
 8017874:	9800      	ldr	r0, [sp, #0]
 8017876:	9d08      	ldr	r5, [sp, #32]
 8017878:	3243      	adds	r2, #67	@ 0x43
 801787a:	47a8      	blx	r5
 801787c:	3001      	adds	r0, #1
 801787e:	d025      	beq.n	80178cc <_printf_common+0xa8>
 8017880:	2206      	movs	r2, #6
 8017882:	6823      	ldr	r3, [r4, #0]
 8017884:	2500      	movs	r5, #0
 8017886:	4013      	ands	r3, r2
 8017888:	2b04      	cmp	r3, #4
 801788a:	d105      	bne.n	8017898 <_printf_common+0x74>
 801788c:	6833      	ldr	r3, [r6, #0]
 801788e:	68e5      	ldr	r5, [r4, #12]
 8017890:	1aed      	subs	r5, r5, r3
 8017892:	43eb      	mvns	r3, r5
 8017894:	17db      	asrs	r3, r3, #31
 8017896:	401d      	ands	r5, r3
 8017898:	68a3      	ldr	r3, [r4, #8]
 801789a:	6922      	ldr	r2, [r4, #16]
 801789c:	4293      	cmp	r3, r2
 801789e:	dd01      	ble.n	80178a4 <_printf_common+0x80>
 80178a0:	1a9b      	subs	r3, r3, r2
 80178a2:	18ed      	adds	r5, r5, r3
 80178a4:	2600      	movs	r6, #0
 80178a6:	42b5      	cmp	r5, r6
 80178a8:	d120      	bne.n	80178ec <_printf_common+0xc8>
 80178aa:	2000      	movs	r0, #0
 80178ac:	e010      	b.n	80178d0 <_printf_common+0xac>
 80178ae:	3501      	adds	r5, #1
 80178b0:	68e3      	ldr	r3, [r4, #12]
 80178b2:	6832      	ldr	r2, [r6, #0]
 80178b4:	1a9b      	subs	r3, r3, r2
 80178b6:	42ab      	cmp	r3, r5
 80178b8:	ddd2      	ble.n	8017860 <_printf_common+0x3c>
 80178ba:	0022      	movs	r2, r4
 80178bc:	2301      	movs	r3, #1
 80178be:	9901      	ldr	r1, [sp, #4]
 80178c0:	9800      	ldr	r0, [sp, #0]
 80178c2:	9f08      	ldr	r7, [sp, #32]
 80178c4:	3219      	adds	r2, #25
 80178c6:	47b8      	blx	r7
 80178c8:	3001      	adds	r0, #1
 80178ca:	d1f0      	bne.n	80178ae <_printf_common+0x8a>
 80178cc:	2001      	movs	r0, #1
 80178ce:	4240      	negs	r0, r0
 80178d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80178d2:	2030      	movs	r0, #48	@ 0x30
 80178d4:	18e1      	adds	r1, r4, r3
 80178d6:	3143      	adds	r1, #67	@ 0x43
 80178d8:	7008      	strb	r0, [r1, #0]
 80178da:	0021      	movs	r1, r4
 80178dc:	1c5a      	adds	r2, r3, #1
 80178de:	3145      	adds	r1, #69	@ 0x45
 80178e0:	7809      	ldrb	r1, [r1, #0]
 80178e2:	18a2      	adds	r2, r4, r2
 80178e4:	3243      	adds	r2, #67	@ 0x43
 80178e6:	3302      	adds	r3, #2
 80178e8:	7011      	strb	r1, [r2, #0]
 80178ea:	e7c1      	b.n	8017870 <_printf_common+0x4c>
 80178ec:	0022      	movs	r2, r4
 80178ee:	2301      	movs	r3, #1
 80178f0:	9901      	ldr	r1, [sp, #4]
 80178f2:	9800      	ldr	r0, [sp, #0]
 80178f4:	9f08      	ldr	r7, [sp, #32]
 80178f6:	321a      	adds	r2, #26
 80178f8:	47b8      	blx	r7
 80178fa:	3001      	adds	r0, #1
 80178fc:	d0e6      	beq.n	80178cc <_printf_common+0xa8>
 80178fe:	3601      	adds	r6, #1
 8017900:	e7d1      	b.n	80178a6 <_printf_common+0x82>
	...

08017904 <_printf_i>:
 8017904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017906:	b08b      	sub	sp, #44	@ 0x2c
 8017908:	9206      	str	r2, [sp, #24]
 801790a:	000a      	movs	r2, r1
 801790c:	3243      	adds	r2, #67	@ 0x43
 801790e:	9307      	str	r3, [sp, #28]
 8017910:	9005      	str	r0, [sp, #20]
 8017912:	9203      	str	r2, [sp, #12]
 8017914:	7e0a      	ldrb	r2, [r1, #24]
 8017916:	000c      	movs	r4, r1
 8017918:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801791a:	2a78      	cmp	r2, #120	@ 0x78
 801791c:	d809      	bhi.n	8017932 <_printf_i+0x2e>
 801791e:	2a62      	cmp	r2, #98	@ 0x62
 8017920:	d80b      	bhi.n	801793a <_printf_i+0x36>
 8017922:	2a00      	cmp	r2, #0
 8017924:	d100      	bne.n	8017928 <_printf_i+0x24>
 8017926:	e0bc      	b.n	8017aa2 <_printf_i+0x19e>
 8017928:	497b      	ldr	r1, [pc, #492]	@ (8017b18 <_printf_i+0x214>)
 801792a:	9104      	str	r1, [sp, #16]
 801792c:	2a58      	cmp	r2, #88	@ 0x58
 801792e:	d100      	bne.n	8017932 <_printf_i+0x2e>
 8017930:	e090      	b.n	8017a54 <_printf_i+0x150>
 8017932:	0025      	movs	r5, r4
 8017934:	3542      	adds	r5, #66	@ 0x42
 8017936:	702a      	strb	r2, [r5, #0]
 8017938:	e022      	b.n	8017980 <_printf_i+0x7c>
 801793a:	0010      	movs	r0, r2
 801793c:	3863      	subs	r0, #99	@ 0x63
 801793e:	2815      	cmp	r0, #21
 8017940:	d8f7      	bhi.n	8017932 <_printf_i+0x2e>
 8017942:	f7e8 fbf3 	bl	800012c <__gnu_thumb1_case_shi>
 8017946:	0016      	.short	0x0016
 8017948:	fff6001f 	.word	0xfff6001f
 801794c:	fff6fff6 	.word	0xfff6fff6
 8017950:	001ffff6 	.word	0x001ffff6
 8017954:	fff6fff6 	.word	0xfff6fff6
 8017958:	fff6fff6 	.word	0xfff6fff6
 801795c:	003600a1 	.word	0x003600a1
 8017960:	fff60080 	.word	0xfff60080
 8017964:	00b2fff6 	.word	0x00b2fff6
 8017968:	0036fff6 	.word	0x0036fff6
 801796c:	fff6fff6 	.word	0xfff6fff6
 8017970:	0084      	.short	0x0084
 8017972:	0025      	movs	r5, r4
 8017974:	681a      	ldr	r2, [r3, #0]
 8017976:	3542      	adds	r5, #66	@ 0x42
 8017978:	1d11      	adds	r1, r2, #4
 801797a:	6019      	str	r1, [r3, #0]
 801797c:	6813      	ldr	r3, [r2, #0]
 801797e:	702b      	strb	r3, [r5, #0]
 8017980:	2301      	movs	r3, #1
 8017982:	e0a0      	b.n	8017ac6 <_printf_i+0x1c2>
 8017984:	6818      	ldr	r0, [r3, #0]
 8017986:	6809      	ldr	r1, [r1, #0]
 8017988:	1d02      	adds	r2, r0, #4
 801798a:	060d      	lsls	r5, r1, #24
 801798c:	d50b      	bpl.n	80179a6 <_printf_i+0xa2>
 801798e:	6806      	ldr	r6, [r0, #0]
 8017990:	601a      	str	r2, [r3, #0]
 8017992:	2e00      	cmp	r6, #0
 8017994:	da03      	bge.n	801799e <_printf_i+0x9a>
 8017996:	232d      	movs	r3, #45	@ 0x2d
 8017998:	9a03      	ldr	r2, [sp, #12]
 801799a:	4276      	negs	r6, r6
 801799c:	7013      	strb	r3, [r2, #0]
 801799e:	4b5e      	ldr	r3, [pc, #376]	@ (8017b18 <_printf_i+0x214>)
 80179a0:	270a      	movs	r7, #10
 80179a2:	9304      	str	r3, [sp, #16]
 80179a4:	e018      	b.n	80179d8 <_printf_i+0xd4>
 80179a6:	6806      	ldr	r6, [r0, #0]
 80179a8:	601a      	str	r2, [r3, #0]
 80179aa:	0649      	lsls	r1, r1, #25
 80179ac:	d5f1      	bpl.n	8017992 <_printf_i+0x8e>
 80179ae:	b236      	sxth	r6, r6
 80179b0:	e7ef      	b.n	8017992 <_printf_i+0x8e>
 80179b2:	6808      	ldr	r0, [r1, #0]
 80179b4:	6819      	ldr	r1, [r3, #0]
 80179b6:	c940      	ldmia	r1!, {r6}
 80179b8:	0605      	lsls	r5, r0, #24
 80179ba:	d402      	bmi.n	80179c2 <_printf_i+0xbe>
 80179bc:	0640      	lsls	r0, r0, #25
 80179be:	d500      	bpl.n	80179c2 <_printf_i+0xbe>
 80179c0:	b2b6      	uxth	r6, r6
 80179c2:	6019      	str	r1, [r3, #0]
 80179c4:	4b54      	ldr	r3, [pc, #336]	@ (8017b18 <_printf_i+0x214>)
 80179c6:	270a      	movs	r7, #10
 80179c8:	9304      	str	r3, [sp, #16]
 80179ca:	2a6f      	cmp	r2, #111	@ 0x6f
 80179cc:	d100      	bne.n	80179d0 <_printf_i+0xcc>
 80179ce:	3f02      	subs	r7, #2
 80179d0:	0023      	movs	r3, r4
 80179d2:	2200      	movs	r2, #0
 80179d4:	3343      	adds	r3, #67	@ 0x43
 80179d6:	701a      	strb	r2, [r3, #0]
 80179d8:	6863      	ldr	r3, [r4, #4]
 80179da:	60a3      	str	r3, [r4, #8]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	db03      	blt.n	80179e8 <_printf_i+0xe4>
 80179e0:	2104      	movs	r1, #4
 80179e2:	6822      	ldr	r2, [r4, #0]
 80179e4:	438a      	bics	r2, r1
 80179e6:	6022      	str	r2, [r4, #0]
 80179e8:	2e00      	cmp	r6, #0
 80179ea:	d102      	bne.n	80179f2 <_printf_i+0xee>
 80179ec:	9d03      	ldr	r5, [sp, #12]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d00c      	beq.n	8017a0c <_printf_i+0x108>
 80179f2:	9d03      	ldr	r5, [sp, #12]
 80179f4:	0030      	movs	r0, r6
 80179f6:	0039      	movs	r1, r7
 80179f8:	f7e8 fc28 	bl	800024c <__aeabi_uidivmod>
 80179fc:	9b04      	ldr	r3, [sp, #16]
 80179fe:	3d01      	subs	r5, #1
 8017a00:	5c5b      	ldrb	r3, [r3, r1]
 8017a02:	702b      	strb	r3, [r5, #0]
 8017a04:	0033      	movs	r3, r6
 8017a06:	0006      	movs	r6, r0
 8017a08:	429f      	cmp	r7, r3
 8017a0a:	d9f3      	bls.n	80179f4 <_printf_i+0xf0>
 8017a0c:	2f08      	cmp	r7, #8
 8017a0e:	d109      	bne.n	8017a24 <_printf_i+0x120>
 8017a10:	6823      	ldr	r3, [r4, #0]
 8017a12:	07db      	lsls	r3, r3, #31
 8017a14:	d506      	bpl.n	8017a24 <_printf_i+0x120>
 8017a16:	6862      	ldr	r2, [r4, #4]
 8017a18:	6923      	ldr	r3, [r4, #16]
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	dc02      	bgt.n	8017a24 <_printf_i+0x120>
 8017a1e:	2330      	movs	r3, #48	@ 0x30
 8017a20:	3d01      	subs	r5, #1
 8017a22:	702b      	strb	r3, [r5, #0]
 8017a24:	9b03      	ldr	r3, [sp, #12]
 8017a26:	1b5b      	subs	r3, r3, r5
 8017a28:	6123      	str	r3, [r4, #16]
 8017a2a:	9b07      	ldr	r3, [sp, #28]
 8017a2c:	0021      	movs	r1, r4
 8017a2e:	9300      	str	r3, [sp, #0]
 8017a30:	9805      	ldr	r0, [sp, #20]
 8017a32:	9b06      	ldr	r3, [sp, #24]
 8017a34:	aa09      	add	r2, sp, #36	@ 0x24
 8017a36:	f7ff fef5 	bl	8017824 <_printf_common>
 8017a3a:	3001      	adds	r0, #1
 8017a3c:	d148      	bne.n	8017ad0 <_printf_i+0x1cc>
 8017a3e:	2001      	movs	r0, #1
 8017a40:	4240      	negs	r0, r0
 8017a42:	b00b      	add	sp, #44	@ 0x2c
 8017a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a46:	2220      	movs	r2, #32
 8017a48:	6809      	ldr	r1, [r1, #0]
 8017a4a:	430a      	orrs	r2, r1
 8017a4c:	6022      	str	r2, [r4, #0]
 8017a4e:	2278      	movs	r2, #120	@ 0x78
 8017a50:	4932      	ldr	r1, [pc, #200]	@ (8017b1c <_printf_i+0x218>)
 8017a52:	9104      	str	r1, [sp, #16]
 8017a54:	0021      	movs	r1, r4
 8017a56:	3145      	adds	r1, #69	@ 0x45
 8017a58:	700a      	strb	r2, [r1, #0]
 8017a5a:	6819      	ldr	r1, [r3, #0]
 8017a5c:	6822      	ldr	r2, [r4, #0]
 8017a5e:	c940      	ldmia	r1!, {r6}
 8017a60:	0610      	lsls	r0, r2, #24
 8017a62:	d402      	bmi.n	8017a6a <_printf_i+0x166>
 8017a64:	0650      	lsls	r0, r2, #25
 8017a66:	d500      	bpl.n	8017a6a <_printf_i+0x166>
 8017a68:	b2b6      	uxth	r6, r6
 8017a6a:	6019      	str	r1, [r3, #0]
 8017a6c:	07d3      	lsls	r3, r2, #31
 8017a6e:	d502      	bpl.n	8017a76 <_printf_i+0x172>
 8017a70:	2320      	movs	r3, #32
 8017a72:	4313      	orrs	r3, r2
 8017a74:	6023      	str	r3, [r4, #0]
 8017a76:	2e00      	cmp	r6, #0
 8017a78:	d001      	beq.n	8017a7e <_printf_i+0x17a>
 8017a7a:	2710      	movs	r7, #16
 8017a7c:	e7a8      	b.n	80179d0 <_printf_i+0xcc>
 8017a7e:	2220      	movs	r2, #32
 8017a80:	6823      	ldr	r3, [r4, #0]
 8017a82:	4393      	bics	r3, r2
 8017a84:	6023      	str	r3, [r4, #0]
 8017a86:	e7f8      	b.n	8017a7a <_printf_i+0x176>
 8017a88:	681a      	ldr	r2, [r3, #0]
 8017a8a:	680d      	ldr	r5, [r1, #0]
 8017a8c:	1d10      	adds	r0, r2, #4
 8017a8e:	6949      	ldr	r1, [r1, #20]
 8017a90:	6018      	str	r0, [r3, #0]
 8017a92:	6813      	ldr	r3, [r2, #0]
 8017a94:	062e      	lsls	r6, r5, #24
 8017a96:	d501      	bpl.n	8017a9c <_printf_i+0x198>
 8017a98:	6019      	str	r1, [r3, #0]
 8017a9a:	e002      	b.n	8017aa2 <_printf_i+0x19e>
 8017a9c:	066d      	lsls	r5, r5, #25
 8017a9e:	d5fb      	bpl.n	8017a98 <_printf_i+0x194>
 8017aa0:	8019      	strh	r1, [r3, #0]
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	9d03      	ldr	r5, [sp, #12]
 8017aa6:	6123      	str	r3, [r4, #16]
 8017aa8:	e7bf      	b.n	8017a2a <_printf_i+0x126>
 8017aaa:	681a      	ldr	r2, [r3, #0]
 8017aac:	1d11      	adds	r1, r2, #4
 8017aae:	6019      	str	r1, [r3, #0]
 8017ab0:	6815      	ldr	r5, [r2, #0]
 8017ab2:	2100      	movs	r1, #0
 8017ab4:	0028      	movs	r0, r5
 8017ab6:	6862      	ldr	r2, [r4, #4]
 8017ab8:	f000 fa69 	bl	8017f8e <memchr>
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d001      	beq.n	8017ac4 <_printf_i+0x1c0>
 8017ac0:	1b40      	subs	r0, r0, r5
 8017ac2:	6060      	str	r0, [r4, #4]
 8017ac4:	6863      	ldr	r3, [r4, #4]
 8017ac6:	6123      	str	r3, [r4, #16]
 8017ac8:	2300      	movs	r3, #0
 8017aca:	9a03      	ldr	r2, [sp, #12]
 8017acc:	7013      	strb	r3, [r2, #0]
 8017ace:	e7ac      	b.n	8017a2a <_printf_i+0x126>
 8017ad0:	002a      	movs	r2, r5
 8017ad2:	6923      	ldr	r3, [r4, #16]
 8017ad4:	9906      	ldr	r1, [sp, #24]
 8017ad6:	9805      	ldr	r0, [sp, #20]
 8017ad8:	9d07      	ldr	r5, [sp, #28]
 8017ada:	47a8      	blx	r5
 8017adc:	3001      	adds	r0, #1
 8017ade:	d0ae      	beq.n	8017a3e <_printf_i+0x13a>
 8017ae0:	6823      	ldr	r3, [r4, #0]
 8017ae2:	079b      	lsls	r3, r3, #30
 8017ae4:	d415      	bmi.n	8017b12 <_printf_i+0x20e>
 8017ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ae8:	68e0      	ldr	r0, [r4, #12]
 8017aea:	4298      	cmp	r0, r3
 8017aec:	daa9      	bge.n	8017a42 <_printf_i+0x13e>
 8017aee:	0018      	movs	r0, r3
 8017af0:	e7a7      	b.n	8017a42 <_printf_i+0x13e>
 8017af2:	0022      	movs	r2, r4
 8017af4:	2301      	movs	r3, #1
 8017af6:	9906      	ldr	r1, [sp, #24]
 8017af8:	9805      	ldr	r0, [sp, #20]
 8017afa:	9e07      	ldr	r6, [sp, #28]
 8017afc:	3219      	adds	r2, #25
 8017afe:	47b0      	blx	r6
 8017b00:	3001      	adds	r0, #1
 8017b02:	d09c      	beq.n	8017a3e <_printf_i+0x13a>
 8017b04:	3501      	adds	r5, #1
 8017b06:	68e3      	ldr	r3, [r4, #12]
 8017b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b0a:	1a9b      	subs	r3, r3, r2
 8017b0c:	42ab      	cmp	r3, r5
 8017b0e:	dcf0      	bgt.n	8017af2 <_printf_i+0x1ee>
 8017b10:	e7e9      	b.n	8017ae6 <_printf_i+0x1e2>
 8017b12:	2500      	movs	r5, #0
 8017b14:	e7f7      	b.n	8017b06 <_printf_i+0x202>
 8017b16:	46c0      	nop			@ (mov r8, r8)
 8017b18:	0801bade 	.word	0x0801bade
 8017b1c:	0801baef 	.word	0x0801baef

08017b20 <std>:
 8017b20:	2300      	movs	r3, #0
 8017b22:	b510      	push	{r4, lr}
 8017b24:	0004      	movs	r4, r0
 8017b26:	6003      	str	r3, [r0, #0]
 8017b28:	6043      	str	r3, [r0, #4]
 8017b2a:	6083      	str	r3, [r0, #8]
 8017b2c:	8181      	strh	r1, [r0, #12]
 8017b2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017b30:	81c2      	strh	r2, [r0, #14]
 8017b32:	6103      	str	r3, [r0, #16]
 8017b34:	6143      	str	r3, [r0, #20]
 8017b36:	6183      	str	r3, [r0, #24]
 8017b38:	0019      	movs	r1, r3
 8017b3a:	2208      	movs	r2, #8
 8017b3c:	305c      	adds	r0, #92	@ 0x5c
 8017b3e:	f000 f967 	bl	8017e10 <memset>
 8017b42:	4b0b      	ldr	r3, [pc, #44]	@ (8017b70 <std+0x50>)
 8017b44:	6224      	str	r4, [r4, #32]
 8017b46:	6263      	str	r3, [r4, #36]	@ 0x24
 8017b48:	4b0a      	ldr	r3, [pc, #40]	@ (8017b74 <std+0x54>)
 8017b4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8017b78 <std+0x58>)
 8017b4e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017b50:	4b0a      	ldr	r3, [pc, #40]	@ (8017b7c <std+0x5c>)
 8017b52:	6323      	str	r3, [r4, #48]	@ 0x30
 8017b54:	4b0a      	ldr	r3, [pc, #40]	@ (8017b80 <std+0x60>)
 8017b56:	429c      	cmp	r4, r3
 8017b58:	d005      	beq.n	8017b66 <std+0x46>
 8017b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8017b84 <std+0x64>)
 8017b5c:	429c      	cmp	r4, r3
 8017b5e:	d002      	beq.n	8017b66 <std+0x46>
 8017b60:	4b09      	ldr	r3, [pc, #36]	@ (8017b88 <std+0x68>)
 8017b62:	429c      	cmp	r4, r3
 8017b64:	d103      	bne.n	8017b6e <std+0x4e>
 8017b66:	0020      	movs	r0, r4
 8017b68:	3058      	adds	r0, #88	@ 0x58
 8017b6a:	f000 fa0d 	bl	8017f88 <__retarget_lock_init_recursive>
 8017b6e:	bd10      	pop	{r4, pc}
 8017b70:	08017d09 	.word	0x08017d09
 8017b74:	08017d31 	.word	0x08017d31
 8017b78:	08017d69 	.word	0x08017d69
 8017b7c:	08017d95 	.word	0x08017d95
 8017b80:	20003dc8 	.word	0x20003dc8
 8017b84:	20003e30 	.word	0x20003e30
 8017b88:	20003e98 	.word	0x20003e98

08017b8c <stdio_exit_handler>:
 8017b8c:	b510      	push	{r4, lr}
 8017b8e:	4a03      	ldr	r2, [pc, #12]	@ (8017b9c <stdio_exit_handler+0x10>)
 8017b90:	4903      	ldr	r1, [pc, #12]	@ (8017ba0 <stdio_exit_handler+0x14>)
 8017b92:	4804      	ldr	r0, [pc, #16]	@ (8017ba4 <stdio_exit_handler+0x18>)
 8017b94:	f000 f86c 	bl	8017c70 <_fwalk_sglue>
 8017b98:	bd10      	pop	{r4, pc}
 8017b9a:	46c0      	nop			@ (mov r8, r8)
 8017b9c:	20000220 	.word	0x20000220
 8017ba0:	08019c61 	.word	0x08019c61
 8017ba4:	20000230 	.word	0x20000230

08017ba8 <cleanup_stdio>:
 8017ba8:	6841      	ldr	r1, [r0, #4]
 8017baa:	4b0b      	ldr	r3, [pc, #44]	@ (8017bd8 <cleanup_stdio+0x30>)
 8017bac:	b510      	push	{r4, lr}
 8017bae:	0004      	movs	r4, r0
 8017bb0:	4299      	cmp	r1, r3
 8017bb2:	d001      	beq.n	8017bb8 <cleanup_stdio+0x10>
 8017bb4:	f002 f854 	bl	8019c60 <_fflush_r>
 8017bb8:	68a1      	ldr	r1, [r4, #8]
 8017bba:	4b08      	ldr	r3, [pc, #32]	@ (8017bdc <cleanup_stdio+0x34>)
 8017bbc:	4299      	cmp	r1, r3
 8017bbe:	d002      	beq.n	8017bc6 <cleanup_stdio+0x1e>
 8017bc0:	0020      	movs	r0, r4
 8017bc2:	f002 f84d 	bl	8019c60 <_fflush_r>
 8017bc6:	68e1      	ldr	r1, [r4, #12]
 8017bc8:	4b05      	ldr	r3, [pc, #20]	@ (8017be0 <cleanup_stdio+0x38>)
 8017bca:	4299      	cmp	r1, r3
 8017bcc:	d002      	beq.n	8017bd4 <cleanup_stdio+0x2c>
 8017bce:	0020      	movs	r0, r4
 8017bd0:	f002 f846 	bl	8019c60 <_fflush_r>
 8017bd4:	bd10      	pop	{r4, pc}
 8017bd6:	46c0      	nop			@ (mov r8, r8)
 8017bd8:	20003dc8 	.word	0x20003dc8
 8017bdc:	20003e30 	.word	0x20003e30
 8017be0:	20003e98 	.word	0x20003e98

08017be4 <global_stdio_init.part.0>:
 8017be4:	b510      	push	{r4, lr}
 8017be6:	4b09      	ldr	r3, [pc, #36]	@ (8017c0c <global_stdio_init.part.0+0x28>)
 8017be8:	4a09      	ldr	r2, [pc, #36]	@ (8017c10 <global_stdio_init.part.0+0x2c>)
 8017bea:	2104      	movs	r1, #4
 8017bec:	601a      	str	r2, [r3, #0]
 8017bee:	4809      	ldr	r0, [pc, #36]	@ (8017c14 <global_stdio_init.part.0+0x30>)
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	f7ff ff95 	bl	8017b20 <std>
 8017bf6:	2201      	movs	r2, #1
 8017bf8:	2109      	movs	r1, #9
 8017bfa:	4807      	ldr	r0, [pc, #28]	@ (8017c18 <global_stdio_init.part.0+0x34>)
 8017bfc:	f7ff ff90 	bl	8017b20 <std>
 8017c00:	2202      	movs	r2, #2
 8017c02:	2112      	movs	r1, #18
 8017c04:	4805      	ldr	r0, [pc, #20]	@ (8017c1c <global_stdio_init.part.0+0x38>)
 8017c06:	f7ff ff8b 	bl	8017b20 <std>
 8017c0a:	bd10      	pop	{r4, pc}
 8017c0c:	20003f00 	.word	0x20003f00
 8017c10:	08017b8d 	.word	0x08017b8d
 8017c14:	20003dc8 	.word	0x20003dc8
 8017c18:	20003e30 	.word	0x20003e30
 8017c1c:	20003e98 	.word	0x20003e98

08017c20 <__sfp_lock_acquire>:
 8017c20:	b510      	push	{r4, lr}
 8017c22:	4802      	ldr	r0, [pc, #8]	@ (8017c2c <__sfp_lock_acquire+0xc>)
 8017c24:	f000 f9b1 	bl	8017f8a <__retarget_lock_acquire_recursive>
 8017c28:	bd10      	pop	{r4, pc}
 8017c2a:	46c0      	nop			@ (mov r8, r8)
 8017c2c:	20003f09 	.word	0x20003f09

08017c30 <__sfp_lock_release>:
 8017c30:	b510      	push	{r4, lr}
 8017c32:	4802      	ldr	r0, [pc, #8]	@ (8017c3c <__sfp_lock_release+0xc>)
 8017c34:	f000 f9aa 	bl	8017f8c <__retarget_lock_release_recursive>
 8017c38:	bd10      	pop	{r4, pc}
 8017c3a:	46c0      	nop			@ (mov r8, r8)
 8017c3c:	20003f09 	.word	0x20003f09

08017c40 <__sinit>:
 8017c40:	b510      	push	{r4, lr}
 8017c42:	0004      	movs	r4, r0
 8017c44:	f7ff ffec 	bl	8017c20 <__sfp_lock_acquire>
 8017c48:	6a23      	ldr	r3, [r4, #32]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d002      	beq.n	8017c54 <__sinit+0x14>
 8017c4e:	f7ff ffef 	bl	8017c30 <__sfp_lock_release>
 8017c52:	bd10      	pop	{r4, pc}
 8017c54:	4b04      	ldr	r3, [pc, #16]	@ (8017c68 <__sinit+0x28>)
 8017c56:	6223      	str	r3, [r4, #32]
 8017c58:	4b04      	ldr	r3, [pc, #16]	@ (8017c6c <__sinit+0x2c>)
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d1f6      	bne.n	8017c4e <__sinit+0xe>
 8017c60:	f7ff ffc0 	bl	8017be4 <global_stdio_init.part.0>
 8017c64:	e7f3      	b.n	8017c4e <__sinit+0xe>
 8017c66:	46c0      	nop			@ (mov r8, r8)
 8017c68:	08017ba9 	.word	0x08017ba9
 8017c6c:	20003f00 	.word	0x20003f00

08017c70 <_fwalk_sglue>:
 8017c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c72:	0014      	movs	r4, r2
 8017c74:	2600      	movs	r6, #0
 8017c76:	9000      	str	r0, [sp, #0]
 8017c78:	9101      	str	r1, [sp, #4]
 8017c7a:	68a5      	ldr	r5, [r4, #8]
 8017c7c:	6867      	ldr	r7, [r4, #4]
 8017c7e:	3f01      	subs	r7, #1
 8017c80:	d504      	bpl.n	8017c8c <_fwalk_sglue+0x1c>
 8017c82:	6824      	ldr	r4, [r4, #0]
 8017c84:	2c00      	cmp	r4, #0
 8017c86:	d1f8      	bne.n	8017c7a <_fwalk_sglue+0xa>
 8017c88:	0030      	movs	r0, r6
 8017c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017c8c:	89ab      	ldrh	r3, [r5, #12]
 8017c8e:	2b01      	cmp	r3, #1
 8017c90:	d908      	bls.n	8017ca4 <_fwalk_sglue+0x34>
 8017c92:	220e      	movs	r2, #14
 8017c94:	5eab      	ldrsh	r3, [r5, r2]
 8017c96:	3301      	adds	r3, #1
 8017c98:	d004      	beq.n	8017ca4 <_fwalk_sglue+0x34>
 8017c9a:	0029      	movs	r1, r5
 8017c9c:	9800      	ldr	r0, [sp, #0]
 8017c9e:	9b01      	ldr	r3, [sp, #4]
 8017ca0:	4798      	blx	r3
 8017ca2:	4306      	orrs	r6, r0
 8017ca4:	3568      	adds	r5, #104	@ 0x68
 8017ca6:	e7ea      	b.n	8017c7e <_fwalk_sglue+0xe>

08017ca8 <iprintf>:
 8017ca8:	b40f      	push	{r0, r1, r2, r3}
 8017caa:	b507      	push	{r0, r1, r2, lr}
 8017cac:	4905      	ldr	r1, [pc, #20]	@ (8017cc4 <iprintf+0x1c>)
 8017cae:	ab04      	add	r3, sp, #16
 8017cb0:	6808      	ldr	r0, [r1, #0]
 8017cb2:	cb04      	ldmia	r3!, {r2}
 8017cb4:	6881      	ldr	r1, [r0, #8]
 8017cb6:	9301      	str	r3, [sp, #4]
 8017cb8:	f001 fe30 	bl	801991c <_vfiprintf_r>
 8017cbc:	b003      	add	sp, #12
 8017cbe:	bc08      	pop	{r3}
 8017cc0:	b004      	add	sp, #16
 8017cc2:	4718      	bx	r3
 8017cc4:	2000022c 	.word	0x2000022c

08017cc8 <siprintf>:
 8017cc8:	b40e      	push	{r1, r2, r3}
 8017cca:	b500      	push	{lr}
 8017ccc:	490b      	ldr	r1, [pc, #44]	@ (8017cfc <siprintf+0x34>)
 8017cce:	b09c      	sub	sp, #112	@ 0x70
 8017cd0:	ab1d      	add	r3, sp, #116	@ 0x74
 8017cd2:	9002      	str	r0, [sp, #8]
 8017cd4:	9006      	str	r0, [sp, #24]
 8017cd6:	9107      	str	r1, [sp, #28]
 8017cd8:	9104      	str	r1, [sp, #16]
 8017cda:	4809      	ldr	r0, [pc, #36]	@ (8017d00 <siprintf+0x38>)
 8017cdc:	4909      	ldr	r1, [pc, #36]	@ (8017d04 <siprintf+0x3c>)
 8017cde:	cb04      	ldmia	r3!, {r2}
 8017ce0:	9105      	str	r1, [sp, #20]
 8017ce2:	6800      	ldr	r0, [r0, #0]
 8017ce4:	a902      	add	r1, sp, #8
 8017ce6:	9301      	str	r3, [sp, #4]
 8017ce8:	f001 fcf2 	bl	80196d0 <_svfiprintf_r>
 8017cec:	2200      	movs	r2, #0
 8017cee:	9b02      	ldr	r3, [sp, #8]
 8017cf0:	701a      	strb	r2, [r3, #0]
 8017cf2:	b01c      	add	sp, #112	@ 0x70
 8017cf4:	bc08      	pop	{r3}
 8017cf6:	b003      	add	sp, #12
 8017cf8:	4718      	bx	r3
 8017cfa:	46c0      	nop			@ (mov r8, r8)
 8017cfc:	7fffffff 	.word	0x7fffffff
 8017d00:	2000022c 	.word	0x2000022c
 8017d04:	ffff0208 	.word	0xffff0208

08017d08 <__sread>:
 8017d08:	b570      	push	{r4, r5, r6, lr}
 8017d0a:	000c      	movs	r4, r1
 8017d0c:	250e      	movs	r5, #14
 8017d0e:	5f49      	ldrsh	r1, [r1, r5]
 8017d10:	f000 f8e8 	bl	8017ee4 <_read_r>
 8017d14:	2800      	cmp	r0, #0
 8017d16:	db03      	blt.n	8017d20 <__sread+0x18>
 8017d18:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017d1a:	181b      	adds	r3, r3, r0
 8017d1c:	6563      	str	r3, [r4, #84]	@ 0x54
 8017d1e:	bd70      	pop	{r4, r5, r6, pc}
 8017d20:	89a3      	ldrh	r3, [r4, #12]
 8017d22:	4a02      	ldr	r2, [pc, #8]	@ (8017d2c <__sread+0x24>)
 8017d24:	4013      	ands	r3, r2
 8017d26:	81a3      	strh	r3, [r4, #12]
 8017d28:	e7f9      	b.n	8017d1e <__sread+0x16>
 8017d2a:	46c0      	nop			@ (mov r8, r8)
 8017d2c:	ffffefff 	.word	0xffffefff

08017d30 <__swrite>:
 8017d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d32:	001f      	movs	r7, r3
 8017d34:	898b      	ldrh	r3, [r1, #12]
 8017d36:	0005      	movs	r5, r0
 8017d38:	000c      	movs	r4, r1
 8017d3a:	0016      	movs	r6, r2
 8017d3c:	05db      	lsls	r3, r3, #23
 8017d3e:	d505      	bpl.n	8017d4c <__swrite+0x1c>
 8017d40:	230e      	movs	r3, #14
 8017d42:	5ec9      	ldrsh	r1, [r1, r3]
 8017d44:	2200      	movs	r2, #0
 8017d46:	2302      	movs	r3, #2
 8017d48:	f000 f8b8 	bl	8017ebc <_lseek_r>
 8017d4c:	89a3      	ldrh	r3, [r4, #12]
 8017d4e:	4a05      	ldr	r2, [pc, #20]	@ (8017d64 <__swrite+0x34>)
 8017d50:	0028      	movs	r0, r5
 8017d52:	4013      	ands	r3, r2
 8017d54:	81a3      	strh	r3, [r4, #12]
 8017d56:	0032      	movs	r2, r6
 8017d58:	230e      	movs	r3, #14
 8017d5a:	5ee1      	ldrsh	r1, [r4, r3]
 8017d5c:	003b      	movs	r3, r7
 8017d5e:	f000 f8d5 	bl	8017f0c <_write_r>
 8017d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d64:	ffffefff 	.word	0xffffefff

08017d68 <__sseek>:
 8017d68:	b570      	push	{r4, r5, r6, lr}
 8017d6a:	000c      	movs	r4, r1
 8017d6c:	250e      	movs	r5, #14
 8017d6e:	5f49      	ldrsh	r1, [r1, r5]
 8017d70:	f000 f8a4 	bl	8017ebc <_lseek_r>
 8017d74:	89a3      	ldrh	r3, [r4, #12]
 8017d76:	1c42      	adds	r2, r0, #1
 8017d78:	d103      	bne.n	8017d82 <__sseek+0x1a>
 8017d7a:	4a05      	ldr	r2, [pc, #20]	@ (8017d90 <__sseek+0x28>)
 8017d7c:	4013      	ands	r3, r2
 8017d7e:	81a3      	strh	r3, [r4, #12]
 8017d80:	bd70      	pop	{r4, r5, r6, pc}
 8017d82:	2280      	movs	r2, #128	@ 0x80
 8017d84:	0152      	lsls	r2, r2, #5
 8017d86:	4313      	orrs	r3, r2
 8017d88:	81a3      	strh	r3, [r4, #12]
 8017d8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8017d8c:	e7f8      	b.n	8017d80 <__sseek+0x18>
 8017d8e:	46c0      	nop			@ (mov r8, r8)
 8017d90:	ffffefff 	.word	0xffffefff

08017d94 <__sclose>:
 8017d94:	b510      	push	{r4, lr}
 8017d96:	230e      	movs	r3, #14
 8017d98:	5ec9      	ldrsh	r1, [r1, r3]
 8017d9a:	f000 f87d 	bl	8017e98 <_close_r>
 8017d9e:	bd10      	pop	{r4, pc}

08017da0 <_vsniprintf_r>:
 8017da0:	b530      	push	{r4, r5, lr}
 8017da2:	0014      	movs	r4, r2
 8017da4:	0005      	movs	r5, r0
 8017da6:	001a      	movs	r2, r3
 8017da8:	b09b      	sub	sp, #108	@ 0x6c
 8017daa:	2c00      	cmp	r4, #0
 8017dac:	da05      	bge.n	8017dba <_vsniprintf_r+0x1a>
 8017dae:	238b      	movs	r3, #139	@ 0x8b
 8017db0:	6003      	str	r3, [r0, #0]
 8017db2:	2001      	movs	r0, #1
 8017db4:	4240      	negs	r0, r0
 8017db6:	b01b      	add	sp, #108	@ 0x6c
 8017db8:	bd30      	pop	{r4, r5, pc}
 8017dba:	2382      	movs	r3, #130	@ 0x82
 8017dbc:	4668      	mov	r0, sp
 8017dbe:	009b      	lsls	r3, r3, #2
 8017dc0:	8183      	strh	r3, [r0, #12]
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	9100      	str	r1, [sp, #0]
 8017dc6:	9104      	str	r1, [sp, #16]
 8017dc8:	429c      	cmp	r4, r3
 8017dca:	d000      	beq.n	8017dce <_vsniprintf_r+0x2e>
 8017dcc:	1e63      	subs	r3, r4, #1
 8017dce:	9302      	str	r3, [sp, #8]
 8017dd0:	9305      	str	r3, [sp, #20]
 8017dd2:	2301      	movs	r3, #1
 8017dd4:	4669      	mov	r1, sp
 8017dd6:	425b      	negs	r3, r3
 8017dd8:	81cb      	strh	r3, [r1, #14]
 8017dda:	0028      	movs	r0, r5
 8017ddc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017dde:	f001 fc77 	bl	80196d0 <_svfiprintf_r>
 8017de2:	1c43      	adds	r3, r0, #1
 8017de4:	da01      	bge.n	8017dea <_vsniprintf_r+0x4a>
 8017de6:	238b      	movs	r3, #139	@ 0x8b
 8017de8:	602b      	str	r3, [r5, #0]
 8017dea:	2c00      	cmp	r4, #0
 8017dec:	d0e3      	beq.n	8017db6 <_vsniprintf_r+0x16>
 8017dee:	2200      	movs	r2, #0
 8017df0:	9b00      	ldr	r3, [sp, #0]
 8017df2:	701a      	strb	r2, [r3, #0]
 8017df4:	e7df      	b.n	8017db6 <_vsniprintf_r+0x16>
	...

08017df8 <vsniprintf>:
 8017df8:	b513      	push	{r0, r1, r4, lr}
 8017dfa:	4c04      	ldr	r4, [pc, #16]	@ (8017e0c <vsniprintf+0x14>)
 8017dfc:	9300      	str	r3, [sp, #0]
 8017dfe:	0013      	movs	r3, r2
 8017e00:	000a      	movs	r2, r1
 8017e02:	0001      	movs	r1, r0
 8017e04:	6820      	ldr	r0, [r4, #0]
 8017e06:	f7ff ffcb 	bl	8017da0 <_vsniprintf_r>
 8017e0a:	bd16      	pop	{r1, r2, r4, pc}
 8017e0c:	2000022c 	.word	0x2000022c

08017e10 <memset>:
 8017e10:	0003      	movs	r3, r0
 8017e12:	1882      	adds	r2, r0, r2
 8017e14:	4293      	cmp	r3, r2
 8017e16:	d100      	bne.n	8017e1a <memset+0xa>
 8017e18:	4770      	bx	lr
 8017e1a:	7019      	strb	r1, [r3, #0]
 8017e1c:	3301      	adds	r3, #1
 8017e1e:	e7f9      	b.n	8017e14 <memset+0x4>

08017e20 <strchr>:
 8017e20:	b2c9      	uxtb	r1, r1
 8017e22:	7803      	ldrb	r3, [r0, #0]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d004      	beq.n	8017e32 <strchr+0x12>
 8017e28:	428b      	cmp	r3, r1
 8017e2a:	d100      	bne.n	8017e2e <strchr+0xe>
 8017e2c:	4770      	bx	lr
 8017e2e:	3001      	adds	r0, #1
 8017e30:	e7f7      	b.n	8017e22 <strchr+0x2>
 8017e32:	424b      	negs	r3, r1
 8017e34:	4159      	adcs	r1, r3
 8017e36:	4249      	negs	r1, r1
 8017e38:	4008      	ands	r0, r1
 8017e3a:	e7f7      	b.n	8017e2c <strchr+0xc>

08017e3c <strncpy>:
 8017e3c:	0003      	movs	r3, r0
 8017e3e:	b530      	push	{r4, r5, lr}
 8017e40:	001d      	movs	r5, r3
 8017e42:	2a00      	cmp	r2, #0
 8017e44:	d006      	beq.n	8017e54 <strncpy+0x18>
 8017e46:	780c      	ldrb	r4, [r1, #0]
 8017e48:	3a01      	subs	r2, #1
 8017e4a:	3301      	adds	r3, #1
 8017e4c:	702c      	strb	r4, [r5, #0]
 8017e4e:	3101      	adds	r1, #1
 8017e50:	2c00      	cmp	r4, #0
 8017e52:	d1f5      	bne.n	8017e40 <strncpy+0x4>
 8017e54:	2100      	movs	r1, #0
 8017e56:	189a      	adds	r2, r3, r2
 8017e58:	4293      	cmp	r3, r2
 8017e5a:	d100      	bne.n	8017e5e <strncpy+0x22>
 8017e5c:	bd30      	pop	{r4, r5, pc}
 8017e5e:	7019      	strb	r1, [r3, #0]
 8017e60:	3301      	adds	r3, #1
 8017e62:	e7f9      	b.n	8017e58 <strncpy+0x1c>

08017e64 <strstr>:
 8017e64:	780a      	ldrb	r2, [r1, #0]
 8017e66:	b530      	push	{r4, r5, lr}
 8017e68:	2a00      	cmp	r2, #0
 8017e6a:	d10c      	bne.n	8017e86 <strstr+0x22>
 8017e6c:	bd30      	pop	{r4, r5, pc}
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	d108      	bne.n	8017e84 <strstr+0x20>
 8017e72:	2301      	movs	r3, #1
 8017e74:	5ccc      	ldrb	r4, [r1, r3]
 8017e76:	2c00      	cmp	r4, #0
 8017e78:	d0f8      	beq.n	8017e6c <strstr+0x8>
 8017e7a:	5cc5      	ldrb	r5, [r0, r3]
 8017e7c:	42a5      	cmp	r5, r4
 8017e7e:	d101      	bne.n	8017e84 <strstr+0x20>
 8017e80:	3301      	adds	r3, #1
 8017e82:	e7f7      	b.n	8017e74 <strstr+0x10>
 8017e84:	3001      	adds	r0, #1
 8017e86:	7803      	ldrb	r3, [r0, #0]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d1f0      	bne.n	8017e6e <strstr+0xa>
 8017e8c:	0018      	movs	r0, r3
 8017e8e:	e7ed      	b.n	8017e6c <strstr+0x8>

08017e90 <_localeconv_r>:
 8017e90:	4800      	ldr	r0, [pc, #0]	@ (8017e94 <_localeconv_r+0x4>)
 8017e92:	4770      	bx	lr
 8017e94:	2000036c 	.word	0x2000036c

08017e98 <_close_r>:
 8017e98:	2300      	movs	r3, #0
 8017e9a:	b570      	push	{r4, r5, r6, lr}
 8017e9c:	4d06      	ldr	r5, [pc, #24]	@ (8017eb8 <_close_r+0x20>)
 8017e9e:	0004      	movs	r4, r0
 8017ea0:	0008      	movs	r0, r1
 8017ea2:	602b      	str	r3, [r5, #0]
 8017ea4:	f7f0 ffa4 	bl	8008df0 <_close>
 8017ea8:	1c43      	adds	r3, r0, #1
 8017eaa:	d103      	bne.n	8017eb4 <_close_r+0x1c>
 8017eac:	682b      	ldr	r3, [r5, #0]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d000      	beq.n	8017eb4 <_close_r+0x1c>
 8017eb2:	6023      	str	r3, [r4, #0]
 8017eb4:	bd70      	pop	{r4, r5, r6, pc}
 8017eb6:	46c0      	nop			@ (mov r8, r8)
 8017eb8:	20003f04 	.word	0x20003f04

08017ebc <_lseek_r>:
 8017ebc:	b570      	push	{r4, r5, r6, lr}
 8017ebe:	0004      	movs	r4, r0
 8017ec0:	0008      	movs	r0, r1
 8017ec2:	0011      	movs	r1, r2
 8017ec4:	001a      	movs	r2, r3
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	4d05      	ldr	r5, [pc, #20]	@ (8017ee0 <_lseek_r+0x24>)
 8017eca:	602b      	str	r3, [r5, #0]
 8017ecc:	f7f0 ffb1 	bl	8008e32 <_lseek>
 8017ed0:	1c43      	adds	r3, r0, #1
 8017ed2:	d103      	bne.n	8017edc <_lseek_r+0x20>
 8017ed4:	682b      	ldr	r3, [r5, #0]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d000      	beq.n	8017edc <_lseek_r+0x20>
 8017eda:	6023      	str	r3, [r4, #0]
 8017edc:	bd70      	pop	{r4, r5, r6, pc}
 8017ede:	46c0      	nop			@ (mov r8, r8)
 8017ee0:	20003f04 	.word	0x20003f04

08017ee4 <_read_r>:
 8017ee4:	b570      	push	{r4, r5, r6, lr}
 8017ee6:	0004      	movs	r4, r0
 8017ee8:	0008      	movs	r0, r1
 8017eea:	0011      	movs	r1, r2
 8017eec:	001a      	movs	r2, r3
 8017eee:	2300      	movs	r3, #0
 8017ef0:	4d05      	ldr	r5, [pc, #20]	@ (8017f08 <_read_r+0x24>)
 8017ef2:	602b      	str	r3, [r5, #0]
 8017ef4:	f7f0 ff5f 	bl	8008db6 <_read>
 8017ef8:	1c43      	adds	r3, r0, #1
 8017efa:	d103      	bne.n	8017f04 <_read_r+0x20>
 8017efc:	682b      	ldr	r3, [r5, #0]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d000      	beq.n	8017f04 <_read_r+0x20>
 8017f02:	6023      	str	r3, [r4, #0]
 8017f04:	bd70      	pop	{r4, r5, r6, pc}
 8017f06:	46c0      	nop			@ (mov r8, r8)
 8017f08:	20003f04 	.word	0x20003f04

08017f0c <_write_r>:
 8017f0c:	b570      	push	{r4, r5, r6, lr}
 8017f0e:	0004      	movs	r4, r0
 8017f10:	0008      	movs	r0, r1
 8017f12:	0011      	movs	r1, r2
 8017f14:	001a      	movs	r2, r3
 8017f16:	2300      	movs	r3, #0
 8017f18:	4d05      	ldr	r5, [pc, #20]	@ (8017f30 <_write_r+0x24>)
 8017f1a:	602b      	str	r3, [r5, #0]
 8017f1c:	f7f1 fbd6 	bl	80096cc <_write>
 8017f20:	1c43      	adds	r3, r0, #1
 8017f22:	d103      	bne.n	8017f2c <_write_r+0x20>
 8017f24:	682b      	ldr	r3, [r5, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d000      	beq.n	8017f2c <_write_r+0x20>
 8017f2a:	6023      	str	r3, [r4, #0]
 8017f2c:	bd70      	pop	{r4, r5, r6, pc}
 8017f2e:	46c0      	nop			@ (mov r8, r8)
 8017f30:	20003f04 	.word	0x20003f04

08017f34 <__errno>:
 8017f34:	4b01      	ldr	r3, [pc, #4]	@ (8017f3c <__errno+0x8>)
 8017f36:	6818      	ldr	r0, [r3, #0]
 8017f38:	4770      	bx	lr
 8017f3a:	46c0      	nop			@ (mov r8, r8)
 8017f3c:	2000022c 	.word	0x2000022c

08017f40 <__libc_init_array>:
 8017f40:	b570      	push	{r4, r5, r6, lr}
 8017f42:	2600      	movs	r6, #0
 8017f44:	4c0c      	ldr	r4, [pc, #48]	@ (8017f78 <__libc_init_array+0x38>)
 8017f46:	4d0d      	ldr	r5, [pc, #52]	@ (8017f7c <__libc_init_array+0x3c>)
 8017f48:	1b64      	subs	r4, r4, r5
 8017f4a:	10a4      	asrs	r4, r4, #2
 8017f4c:	42a6      	cmp	r6, r4
 8017f4e:	d109      	bne.n	8017f64 <__libc_init_array+0x24>
 8017f50:	2600      	movs	r6, #0
 8017f52:	f002 fe57 	bl	801ac04 <_init>
 8017f56:	4c0a      	ldr	r4, [pc, #40]	@ (8017f80 <__libc_init_array+0x40>)
 8017f58:	4d0a      	ldr	r5, [pc, #40]	@ (8017f84 <__libc_init_array+0x44>)
 8017f5a:	1b64      	subs	r4, r4, r5
 8017f5c:	10a4      	asrs	r4, r4, #2
 8017f5e:	42a6      	cmp	r6, r4
 8017f60:	d105      	bne.n	8017f6e <__libc_init_array+0x2e>
 8017f62:	bd70      	pop	{r4, r5, r6, pc}
 8017f64:	00b3      	lsls	r3, r6, #2
 8017f66:	58eb      	ldr	r3, [r5, r3]
 8017f68:	4798      	blx	r3
 8017f6a:	3601      	adds	r6, #1
 8017f6c:	e7ee      	b.n	8017f4c <__libc_init_array+0xc>
 8017f6e:	00b3      	lsls	r3, r6, #2
 8017f70:	58eb      	ldr	r3, [r5, r3]
 8017f72:	4798      	blx	r3
 8017f74:	3601      	adds	r6, #1
 8017f76:	e7f2      	b.n	8017f5e <__libc_init_array+0x1e>
 8017f78:	0801be60 	.word	0x0801be60
 8017f7c:	0801be60 	.word	0x0801be60
 8017f80:	0801be64 	.word	0x0801be64
 8017f84:	0801be60 	.word	0x0801be60

08017f88 <__retarget_lock_init_recursive>:
 8017f88:	4770      	bx	lr

08017f8a <__retarget_lock_acquire_recursive>:
 8017f8a:	4770      	bx	lr

08017f8c <__retarget_lock_release_recursive>:
 8017f8c:	4770      	bx	lr

08017f8e <memchr>:
 8017f8e:	b2c9      	uxtb	r1, r1
 8017f90:	1882      	adds	r2, r0, r2
 8017f92:	4290      	cmp	r0, r2
 8017f94:	d101      	bne.n	8017f9a <memchr+0xc>
 8017f96:	2000      	movs	r0, #0
 8017f98:	4770      	bx	lr
 8017f9a:	7803      	ldrb	r3, [r0, #0]
 8017f9c:	428b      	cmp	r3, r1
 8017f9e:	d0fb      	beq.n	8017f98 <memchr+0xa>
 8017fa0:	3001      	adds	r0, #1
 8017fa2:	e7f6      	b.n	8017f92 <memchr+0x4>

08017fa4 <memcpy>:
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	b510      	push	{r4, lr}
 8017fa8:	429a      	cmp	r2, r3
 8017faa:	d100      	bne.n	8017fae <memcpy+0xa>
 8017fac:	bd10      	pop	{r4, pc}
 8017fae:	5ccc      	ldrb	r4, [r1, r3]
 8017fb0:	54c4      	strb	r4, [r0, r3]
 8017fb2:	3301      	adds	r3, #1
 8017fb4:	e7f8      	b.n	8017fa8 <memcpy+0x4>

08017fb6 <quorem>:
 8017fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fb8:	6902      	ldr	r2, [r0, #16]
 8017fba:	690f      	ldr	r7, [r1, #16]
 8017fbc:	b087      	sub	sp, #28
 8017fbe:	0006      	movs	r6, r0
 8017fc0:	000b      	movs	r3, r1
 8017fc2:	2000      	movs	r0, #0
 8017fc4:	9102      	str	r1, [sp, #8]
 8017fc6:	42ba      	cmp	r2, r7
 8017fc8:	db6d      	blt.n	80180a6 <quorem+0xf0>
 8017fca:	3f01      	subs	r7, #1
 8017fcc:	00bc      	lsls	r4, r7, #2
 8017fce:	3314      	adds	r3, #20
 8017fd0:	9305      	str	r3, [sp, #20]
 8017fd2:	191b      	adds	r3, r3, r4
 8017fd4:	9303      	str	r3, [sp, #12]
 8017fd6:	0033      	movs	r3, r6
 8017fd8:	3314      	adds	r3, #20
 8017fda:	191c      	adds	r4, r3, r4
 8017fdc:	9301      	str	r3, [sp, #4]
 8017fde:	6823      	ldr	r3, [r4, #0]
 8017fe0:	9304      	str	r3, [sp, #16]
 8017fe2:	9b03      	ldr	r3, [sp, #12]
 8017fe4:	9804      	ldr	r0, [sp, #16]
 8017fe6:	681d      	ldr	r5, [r3, #0]
 8017fe8:	3501      	adds	r5, #1
 8017fea:	0029      	movs	r1, r5
 8017fec:	f7e8 f8a8 	bl	8000140 <__udivsi3>
 8017ff0:	9b04      	ldr	r3, [sp, #16]
 8017ff2:	9000      	str	r0, [sp, #0]
 8017ff4:	42ab      	cmp	r3, r5
 8017ff6:	d32b      	bcc.n	8018050 <quorem+0x9a>
 8017ff8:	9b05      	ldr	r3, [sp, #20]
 8017ffa:	9d01      	ldr	r5, [sp, #4]
 8017ffc:	469c      	mov	ip, r3
 8017ffe:	2300      	movs	r3, #0
 8018000:	9305      	str	r3, [sp, #20]
 8018002:	9304      	str	r3, [sp, #16]
 8018004:	4662      	mov	r2, ip
 8018006:	ca08      	ldmia	r2!, {r3}
 8018008:	6828      	ldr	r0, [r5, #0]
 801800a:	4694      	mov	ip, r2
 801800c:	9a00      	ldr	r2, [sp, #0]
 801800e:	b299      	uxth	r1, r3
 8018010:	4351      	muls	r1, r2
 8018012:	9a05      	ldr	r2, [sp, #20]
 8018014:	0c1b      	lsrs	r3, r3, #16
 8018016:	1889      	adds	r1, r1, r2
 8018018:	9a00      	ldr	r2, [sp, #0]
 801801a:	4353      	muls	r3, r2
 801801c:	0c0a      	lsrs	r2, r1, #16
 801801e:	189b      	adds	r3, r3, r2
 8018020:	0c1a      	lsrs	r2, r3, #16
 8018022:	b289      	uxth	r1, r1
 8018024:	9205      	str	r2, [sp, #20]
 8018026:	b282      	uxth	r2, r0
 8018028:	1a52      	subs	r2, r2, r1
 801802a:	9904      	ldr	r1, [sp, #16]
 801802c:	0c00      	lsrs	r0, r0, #16
 801802e:	1852      	adds	r2, r2, r1
 8018030:	b29b      	uxth	r3, r3
 8018032:	1411      	asrs	r1, r2, #16
 8018034:	1ac3      	subs	r3, r0, r3
 8018036:	185b      	adds	r3, r3, r1
 8018038:	1419      	asrs	r1, r3, #16
 801803a:	b292      	uxth	r2, r2
 801803c:	041b      	lsls	r3, r3, #16
 801803e:	431a      	orrs	r2, r3
 8018040:	9b03      	ldr	r3, [sp, #12]
 8018042:	9104      	str	r1, [sp, #16]
 8018044:	c504      	stmia	r5!, {r2}
 8018046:	4563      	cmp	r3, ip
 8018048:	d2dc      	bcs.n	8018004 <quorem+0x4e>
 801804a:	6823      	ldr	r3, [r4, #0]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d030      	beq.n	80180b2 <quorem+0xfc>
 8018050:	0030      	movs	r0, r6
 8018052:	9902      	ldr	r1, [sp, #8]
 8018054:	f001 f9c6 	bl	80193e4 <__mcmp>
 8018058:	2800      	cmp	r0, #0
 801805a:	db23      	blt.n	80180a4 <quorem+0xee>
 801805c:	0034      	movs	r4, r6
 801805e:	2500      	movs	r5, #0
 8018060:	9902      	ldr	r1, [sp, #8]
 8018062:	3414      	adds	r4, #20
 8018064:	3114      	adds	r1, #20
 8018066:	6823      	ldr	r3, [r4, #0]
 8018068:	c901      	ldmia	r1!, {r0}
 801806a:	9302      	str	r3, [sp, #8]
 801806c:	466b      	mov	r3, sp
 801806e:	891b      	ldrh	r3, [r3, #8]
 8018070:	b282      	uxth	r2, r0
 8018072:	1a9a      	subs	r2, r3, r2
 8018074:	9b02      	ldr	r3, [sp, #8]
 8018076:	1952      	adds	r2, r2, r5
 8018078:	0c00      	lsrs	r0, r0, #16
 801807a:	0c1b      	lsrs	r3, r3, #16
 801807c:	1a1b      	subs	r3, r3, r0
 801807e:	1410      	asrs	r0, r2, #16
 8018080:	181b      	adds	r3, r3, r0
 8018082:	141d      	asrs	r5, r3, #16
 8018084:	b292      	uxth	r2, r2
 8018086:	041b      	lsls	r3, r3, #16
 8018088:	431a      	orrs	r2, r3
 801808a:	9b03      	ldr	r3, [sp, #12]
 801808c:	c404      	stmia	r4!, {r2}
 801808e:	428b      	cmp	r3, r1
 8018090:	d2e9      	bcs.n	8018066 <quorem+0xb0>
 8018092:	9a01      	ldr	r2, [sp, #4]
 8018094:	00bb      	lsls	r3, r7, #2
 8018096:	18d3      	adds	r3, r2, r3
 8018098:	681a      	ldr	r2, [r3, #0]
 801809a:	2a00      	cmp	r2, #0
 801809c:	d013      	beq.n	80180c6 <quorem+0x110>
 801809e:	9b00      	ldr	r3, [sp, #0]
 80180a0:	3301      	adds	r3, #1
 80180a2:	9300      	str	r3, [sp, #0]
 80180a4:	9800      	ldr	r0, [sp, #0]
 80180a6:	b007      	add	sp, #28
 80180a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180aa:	6823      	ldr	r3, [r4, #0]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d104      	bne.n	80180ba <quorem+0x104>
 80180b0:	3f01      	subs	r7, #1
 80180b2:	9b01      	ldr	r3, [sp, #4]
 80180b4:	3c04      	subs	r4, #4
 80180b6:	42a3      	cmp	r3, r4
 80180b8:	d3f7      	bcc.n	80180aa <quorem+0xf4>
 80180ba:	6137      	str	r7, [r6, #16]
 80180bc:	e7c8      	b.n	8018050 <quorem+0x9a>
 80180be:	681a      	ldr	r2, [r3, #0]
 80180c0:	2a00      	cmp	r2, #0
 80180c2:	d104      	bne.n	80180ce <quorem+0x118>
 80180c4:	3f01      	subs	r7, #1
 80180c6:	9a01      	ldr	r2, [sp, #4]
 80180c8:	3b04      	subs	r3, #4
 80180ca:	429a      	cmp	r2, r3
 80180cc:	d3f7      	bcc.n	80180be <quorem+0x108>
 80180ce:	6137      	str	r7, [r6, #16]
 80180d0:	e7e5      	b.n	801809e <quorem+0xe8>
	...

080180d4 <_dtoa_r>:
 80180d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180d6:	0014      	movs	r4, r2
 80180d8:	001d      	movs	r5, r3
 80180da:	69c6      	ldr	r6, [r0, #28]
 80180dc:	b09d      	sub	sp, #116	@ 0x74
 80180de:	940a      	str	r4, [sp, #40]	@ 0x28
 80180e0:	950b      	str	r5, [sp, #44]	@ 0x2c
 80180e2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80180e4:	9003      	str	r0, [sp, #12]
 80180e6:	2e00      	cmp	r6, #0
 80180e8:	d10f      	bne.n	801810a <_dtoa_r+0x36>
 80180ea:	2010      	movs	r0, #16
 80180ec:	f000 fe30 	bl	8018d50 <malloc>
 80180f0:	9b03      	ldr	r3, [sp, #12]
 80180f2:	1e02      	subs	r2, r0, #0
 80180f4:	61d8      	str	r0, [r3, #28]
 80180f6:	d104      	bne.n	8018102 <_dtoa_r+0x2e>
 80180f8:	21ef      	movs	r1, #239	@ 0xef
 80180fa:	4bc7      	ldr	r3, [pc, #796]	@ (8018418 <_dtoa_r+0x344>)
 80180fc:	48c7      	ldr	r0, [pc, #796]	@ (801841c <_dtoa_r+0x348>)
 80180fe:	f001 fea1 	bl	8019e44 <__assert_func>
 8018102:	6046      	str	r6, [r0, #4]
 8018104:	6086      	str	r6, [r0, #8]
 8018106:	6006      	str	r6, [r0, #0]
 8018108:	60c6      	str	r6, [r0, #12]
 801810a:	9b03      	ldr	r3, [sp, #12]
 801810c:	69db      	ldr	r3, [r3, #28]
 801810e:	6819      	ldr	r1, [r3, #0]
 8018110:	2900      	cmp	r1, #0
 8018112:	d00b      	beq.n	801812c <_dtoa_r+0x58>
 8018114:	685a      	ldr	r2, [r3, #4]
 8018116:	2301      	movs	r3, #1
 8018118:	4093      	lsls	r3, r2
 801811a:	604a      	str	r2, [r1, #4]
 801811c:	608b      	str	r3, [r1, #8]
 801811e:	9803      	ldr	r0, [sp, #12]
 8018120:	f000 ff16 	bl	8018f50 <_Bfree>
 8018124:	2200      	movs	r2, #0
 8018126:	9b03      	ldr	r3, [sp, #12]
 8018128:	69db      	ldr	r3, [r3, #28]
 801812a:	601a      	str	r2, [r3, #0]
 801812c:	2d00      	cmp	r5, #0
 801812e:	da1e      	bge.n	801816e <_dtoa_r+0x9a>
 8018130:	2301      	movs	r3, #1
 8018132:	603b      	str	r3, [r7, #0]
 8018134:	006b      	lsls	r3, r5, #1
 8018136:	085b      	lsrs	r3, r3, #1
 8018138:	930b      	str	r3, [sp, #44]	@ 0x2c
 801813a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801813c:	4bb8      	ldr	r3, [pc, #736]	@ (8018420 <_dtoa_r+0x34c>)
 801813e:	4ab8      	ldr	r2, [pc, #736]	@ (8018420 <_dtoa_r+0x34c>)
 8018140:	403b      	ands	r3, r7
 8018142:	4293      	cmp	r3, r2
 8018144:	d116      	bne.n	8018174 <_dtoa_r+0xa0>
 8018146:	4bb7      	ldr	r3, [pc, #732]	@ (8018424 <_dtoa_r+0x350>)
 8018148:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801814a:	6013      	str	r3, [r2, #0]
 801814c:	033b      	lsls	r3, r7, #12
 801814e:	0b1b      	lsrs	r3, r3, #12
 8018150:	4323      	orrs	r3, r4
 8018152:	d101      	bne.n	8018158 <_dtoa_r+0x84>
 8018154:	f000 fd83 	bl	8018c5e <_dtoa_r+0xb8a>
 8018158:	4bb3      	ldr	r3, [pc, #716]	@ (8018428 <_dtoa_r+0x354>)
 801815a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801815c:	9308      	str	r3, [sp, #32]
 801815e:	2a00      	cmp	r2, #0
 8018160:	d002      	beq.n	8018168 <_dtoa_r+0x94>
 8018162:	4bb2      	ldr	r3, [pc, #712]	@ (801842c <_dtoa_r+0x358>)
 8018164:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018166:	6013      	str	r3, [r2, #0]
 8018168:	9808      	ldr	r0, [sp, #32]
 801816a:	b01d      	add	sp, #116	@ 0x74
 801816c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801816e:	2300      	movs	r3, #0
 8018170:	603b      	str	r3, [r7, #0]
 8018172:	e7e2      	b.n	801813a <_dtoa_r+0x66>
 8018174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018178:	9212      	str	r2, [sp, #72]	@ 0x48
 801817a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801817c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801817e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018180:	2200      	movs	r2, #0
 8018182:	2300      	movs	r3, #0
 8018184:	f7e8 f962 	bl	800044c <__aeabi_dcmpeq>
 8018188:	1e06      	subs	r6, r0, #0
 801818a:	d00b      	beq.n	80181a4 <_dtoa_r+0xd0>
 801818c:	2301      	movs	r3, #1
 801818e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018190:	6013      	str	r3, [r2, #0]
 8018192:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018194:	2b00      	cmp	r3, #0
 8018196:	d002      	beq.n	801819e <_dtoa_r+0xca>
 8018198:	4ba5      	ldr	r3, [pc, #660]	@ (8018430 <_dtoa_r+0x35c>)
 801819a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801819c:	6013      	str	r3, [r2, #0]
 801819e:	4ba5      	ldr	r3, [pc, #660]	@ (8018434 <_dtoa_r+0x360>)
 80181a0:	9308      	str	r3, [sp, #32]
 80181a2:	e7e1      	b.n	8018168 <_dtoa_r+0x94>
 80181a4:	ab1a      	add	r3, sp, #104	@ 0x68
 80181a6:	9301      	str	r3, [sp, #4]
 80181a8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80181aa:	9300      	str	r3, [sp, #0]
 80181ac:	9803      	ldr	r0, [sp, #12]
 80181ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80181b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80181b2:	f001 f9cd 	bl	8019550 <__d2b>
 80181b6:	007a      	lsls	r2, r7, #1
 80181b8:	9005      	str	r0, [sp, #20]
 80181ba:	0d52      	lsrs	r2, r2, #21
 80181bc:	d100      	bne.n	80181c0 <_dtoa_r+0xec>
 80181be:	e07b      	b.n	80182b8 <_dtoa_r+0x1e4>
 80181c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80181c2:	9618      	str	r6, [sp, #96]	@ 0x60
 80181c4:	0319      	lsls	r1, r3, #12
 80181c6:	4b9c      	ldr	r3, [pc, #624]	@ (8018438 <_dtoa_r+0x364>)
 80181c8:	0b09      	lsrs	r1, r1, #12
 80181ca:	430b      	orrs	r3, r1
 80181cc:	499b      	ldr	r1, [pc, #620]	@ (801843c <_dtoa_r+0x368>)
 80181ce:	1857      	adds	r7, r2, r1
 80181d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80181d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80181d4:	0019      	movs	r1, r3
 80181d6:	2200      	movs	r2, #0
 80181d8:	4b99      	ldr	r3, [pc, #612]	@ (8018440 <_dtoa_r+0x36c>)
 80181da:	f7ea fc75 	bl	8002ac8 <__aeabi_dsub>
 80181de:	4a99      	ldr	r2, [pc, #612]	@ (8018444 <_dtoa_r+0x370>)
 80181e0:	4b99      	ldr	r3, [pc, #612]	@ (8018448 <_dtoa_r+0x374>)
 80181e2:	f7ea f9a9 	bl	8002538 <__aeabi_dmul>
 80181e6:	4a99      	ldr	r2, [pc, #612]	@ (801844c <_dtoa_r+0x378>)
 80181e8:	4b99      	ldr	r3, [pc, #612]	@ (8018450 <_dtoa_r+0x37c>)
 80181ea:	f7e9 f9fd 	bl	80015e8 <__aeabi_dadd>
 80181ee:	0004      	movs	r4, r0
 80181f0:	0038      	movs	r0, r7
 80181f2:	000d      	movs	r5, r1
 80181f4:	f7eb f862 	bl	80032bc <__aeabi_i2d>
 80181f8:	4a96      	ldr	r2, [pc, #600]	@ (8018454 <_dtoa_r+0x380>)
 80181fa:	4b97      	ldr	r3, [pc, #604]	@ (8018458 <_dtoa_r+0x384>)
 80181fc:	f7ea f99c 	bl	8002538 <__aeabi_dmul>
 8018200:	0002      	movs	r2, r0
 8018202:	000b      	movs	r3, r1
 8018204:	0020      	movs	r0, r4
 8018206:	0029      	movs	r1, r5
 8018208:	f7e9 f9ee 	bl	80015e8 <__aeabi_dadd>
 801820c:	0004      	movs	r4, r0
 801820e:	000d      	movs	r5, r1
 8018210:	f7eb f818 	bl	8003244 <__aeabi_d2iz>
 8018214:	2200      	movs	r2, #0
 8018216:	9004      	str	r0, [sp, #16]
 8018218:	2300      	movs	r3, #0
 801821a:	0020      	movs	r0, r4
 801821c:	0029      	movs	r1, r5
 801821e:	f7e8 f91b 	bl	8000458 <__aeabi_dcmplt>
 8018222:	2800      	cmp	r0, #0
 8018224:	d00b      	beq.n	801823e <_dtoa_r+0x16a>
 8018226:	9804      	ldr	r0, [sp, #16]
 8018228:	f7eb f848 	bl	80032bc <__aeabi_i2d>
 801822c:	002b      	movs	r3, r5
 801822e:	0022      	movs	r2, r4
 8018230:	f7e8 f90c 	bl	800044c <__aeabi_dcmpeq>
 8018234:	4243      	negs	r3, r0
 8018236:	4158      	adcs	r0, r3
 8018238:	9b04      	ldr	r3, [sp, #16]
 801823a:	1a1b      	subs	r3, r3, r0
 801823c:	9304      	str	r3, [sp, #16]
 801823e:	2301      	movs	r3, #1
 8018240:	9315      	str	r3, [sp, #84]	@ 0x54
 8018242:	9b04      	ldr	r3, [sp, #16]
 8018244:	2b16      	cmp	r3, #22
 8018246:	d810      	bhi.n	801826a <_dtoa_r+0x196>
 8018248:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801824a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801824c:	9a04      	ldr	r2, [sp, #16]
 801824e:	4b83      	ldr	r3, [pc, #524]	@ (801845c <_dtoa_r+0x388>)
 8018250:	00d2      	lsls	r2, r2, #3
 8018252:	189b      	adds	r3, r3, r2
 8018254:	681a      	ldr	r2, [r3, #0]
 8018256:	685b      	ldr	r3, [r3, #4]
 8018258:	f7e8 f8fe 	bl	8000458 <__aeabi_dcmplt>
 801825c:	2800      	cmp	r0, #0
 801825e:	d047      	beq.n	80182f0 <_dtoa_r+0x21c>
 8018260:	9b04      	ldr	r3, [sp, #16]
 8018262:	3b01      	subs	r3, #1
 8018264:	9304      	str	r3, [sp, #16]
 8018266:	2300      	movs	r3, #0
 8018268:	9315      	str	r3, [sp, #84]	@ 0x54
 801826a:	2200      	movs	r2, #0
 801826c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801826e:	9206      	str	r2, [sp, #24]
 8018270:	1bdb      	subs	r3, r3, r7
 8018272:	1e5a      	subs	r2, r3, #1
 8018274:	d53e      	bpl.n	80182f4 <_dtoa_r+0x220>
 8018276:	2201      	movs	r2, #1
 8018278:	1ad3      	subs	r3, r2, r3
 801827a:	9306      	str	r3, [sp, #24]
 801827c:	2300      	movs	r3, #0
 801827e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018280:	9b04      	ldr	r3, [sp, #16]
 8018282:	2b00      	cmp	r3, #0
 8018284:	db38      	blt.n	80182f8 <_dtoa_r+0x224>
 8018286:	9a04      	ldr	r2, [sp, #16]
 8018288:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801828a:	4694      	mov	ip, r2
 801828c:	4463      	add	r3, ip
 801828e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018290:	2300      	movs	r3, #0
 8018292:	9214      	str	r2, [sp, #80]	@ 0x50
 8018294:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018296:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018298:	2401      	movs	r4, #1
 801829a:	2b09      	cmp	r3, #9
 801829c:	d867      	bhi.n	801836e <_dtoa_r+0x29a>
 801829e:	2b05      	cmp	r3, #5
 80182a0:	dd02      	ble.n	80182a8 <_dtoa_r+0x1d4>
 80182a2:	2400      	movs	r4, #0
 80182a4:	3b04      	subs	r3, #4
 80182a6:	9322      	str	r3, [sp, #136]	@ 0x88
 80182a8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80182aa:	1e98      	subs	r0, r3, #2
 80182ac:	2803      	cmp	r0, #3
 80182ae:	d867      	bhi.n	8018380 <_dtoa_r+0x2ac>
 80182b0:	f7e7 ff32 	bl	8000118 <__gnu_thumb1_case_uqi>
 80182b4:	5b383a2b 	.word	0x5b383a2b
 80182b8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80182ba:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80182bc:	18f6      	adds	r6, r6, r3
 80182be:	4b68      	ldr	r3, [pc, #416]	@ (8018460 <_dtoa_r+0x38c>)
 80182c0:	18f2      	adds	r2, r6, r3
 80182c2:	2a20      	cmp	r2, #32
 80182c4:	dd0f      	ble.n	80182e6 <_dtoa_r+0x212>
 80182c6:	2340      	movs	r3, #64	@ 0x40
 80182c8:	1a9b      	subs	r3, r3, r2
 80182ca:	409f      	lsls	r7, r3
 80182cc:	4b65      	ldr	r3, [pc, #404]	@ (8018464 <_dtoa_r+0x390>)
 80182ce:	0038      	movs	r0, r7
 80182d0:	18f3      	adds	r3, r6, r3
 80182d2:	40dc      	lsrs	r4, r3
 80182d4:	4320      	orrs	r0, r4
 80182d6:	f7eb f81f 	bl	8003318 <__aeabi_ui2d>
 80182da:	2201      	movs	r2, #1
 80182dc:	4b62      	ldr	r3, [pc, #392]	@ (8018468 <_dtoa_r+0x394>)
 80182de:	1e77      	subs	r7, r6, #1
 80182e0:	18cb      	adds	r3, r1, r3
 80182e2:	9218      	str	r2, [sp, #96]	@ 0x60
 80182e4:	e776      	b.n	80181d4 <_dtoa_r+0x100>
 80182e6:	2320      	movs	r3, #32
 80182e8:	0020      	movs	r0, r4
 80182ea:	1a9b      	subs	r3, r3, r2
 80182ec:	4098      	lsls	r0, r3
 80182ee:	e7f2      	b.n	80182d6 <_dtoa_r+0x202>
 80182f0:	9015      	str	r0, [sp, #84]	@ 0x54
 80182f2:	e7ba      	b.n	801826a <_dtoa_r+0x196>
 80182f4:	920d      	str	r2, [sp, #52]	@ 0x34
 80182f6:	e7c3      	b.n	8018280 <_dtoa_r+0x1ac>
 80182f8:	9b06      	ldr	r3, [sp, #24]
 80182fa:	9a04      	ldr	r2, [sp, #16]
 80182fc:	1a9b      	subs	r3, r3, r2
 80182fe:	9306      	str	r3, [sp, #24]
 8018300:	4253      	negs	r3, r2
 8018302:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018304:	2300      	movs	r3, #0
 8018306:	9314      	str	r3, [sp, #80]	@ 0x50
 8018308:	e7c5      	b.n	8018296 <_dtoa_r+0x1c2>
 801830a:	2300      	movs	r3, #0
 801830c:	9310      	str	r3, [sp, #64]	@ 0x40
 801830e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018310:	930e      	str	r3, [sp, #56]	@ 0x38
 8018312:	9309      	str	r3, [sp, #36]	@ 0x24
 8018314:	2b00      	cmp	r3, #0
 8018316:	dc13      	bgt.n	8018340 <_dtoa_r+0x26c>
 8018318:	2301      	movs	r3, #1
 801831a:	001a      	movs	r2, r3
 801831c:	930e      	str	r3, [sp, #56]	@ 0x38
 801831e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018320:	9223      	str	r2, [sp, #140]	@ 0x8c
 8018322:	e00d      	b.n	8018340 <_dtoa_r+0x26c>
 8018324:	2301      	movs	r3, #1
 8018326:	e7f1      	b.n	801830c <_dtoa_r+0x238>
 8018328:	2300      	movs	r3, #0
 801832a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801832c:	9310      	str	r3, [sp, #64]	@ 0x40
 801832e:	4694      	mov	ip, r2
 8018330:	9b04      	ldr	r3, [sp, #16]
 8018332:	4463      	add	r3, ip
 8018334:	930e      	str	r3, [sp, #56]	@ 0x38
 8018336:	3301      	adds	r3, #1
 8018338:	9309      	str	r3, [sp, #36]	@ 0x24
 801833a:	2b00      	cmp	r3, #0
 801833c:	dc00      	bgt.n	8018340 <_dtoa_r+0x26c>
 801833e:	2301      	movs	r3, #1
 8018340:	9a03      	ldr	r2, [sp, #12]
 8018342:	2100      	movs	r1, #0
 8018344:	69d0      	ldr	r0, [r2, #28]
 8018346:	2204      	movs	r2, #4
 8018348:	0015      	movs	r5, r2
 801834a:	3514      	adds	r5, #20
 801834c:	429d      	cmp	r5, r3
 801834e:	d91b      	bls.n	8018388 <_dtoa_r+0x2b4>
 8018350:	6041      	str	r1, [r0, #4]
 8018352:	9803      	ldr	r0, [sp, #12]
 8018354:	f000 fdb8 	bl	8018ec8 <_Balloc>
 8018358:	9008      	str	r0, [sp, #32]
 801835a:	2800      	cmp	r0, #0
 801835c:	d117      	bne.n	801838e <_dtoa_r+0x2ba>
 801835e:	21b0      	movs	r1, #176	@ 0xb0
 8018360:	4b42      	ldr	r3, [pc, #264]	@ (801846c <_dtoa_r+0x398>)
 8018362:	482e      	ldr	r0, [pc, #184]	@ (801841c <_dtoa_r+0x348>)
 8018364:	9a08      	ldr	r2, [sp, #32]
 8018366:	31ff      	adds	r1, #255	@ 0xff
 8018368:	e6c9      	b.n	80180fe <_dtoa_r+0x2a>
 801836a:	2301      	movs	r3, #1
 801836c:	e7dd      	b.n	801832a <_dtoa_r+0x256>
 801836e:	2300      	movs	r3, #0
 8018370:	9410      	str	r4, [sp, #64]	@ 0x40
 8018372:	9322      	str	r3, [sp, #136]	@ 0x88
 8018374:	3b01      	subs	r3, #1
 8018376:	930e      	str	r3, [sp, #56]	@ 0x38
 8018378:	9309      	str	r3, [sp, #36]	@ 0x24
 801837a:	2200      	movs	r2, #0
 801837c:	3313      	adds	r3, #19
 801837e:	e7cf      	b.n	8018320 <_dtoa_r+0x24c>
 8018380:	2301      	movs	r3, #1
 8018382:	9310      	str	r3, [sp, #64]	@ 0x40
 8018384:	3b02      	subs	r3, #2
 8018386:	e7f6      	b.n	8018376 <_dtoa_r+0x2a2>
 8018388:	3101      	adds	r1, #1
 801838a:	0052      	lsls	r2, r2, #1
 801838c:	e7dc      	b.n	8018348 <_dtoa_r+0x274>
 801838e:	9b03      	ldr	r3, [sp, #12]
 8018390:	9a08      	ldr	r2, [sp, #32]
 8018392:	69db      	ldr	r3, [r3, #28]
 8018394:	601a      	str	r2, [r3, #0]
 8018396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018398:	2b0e      	cmp	r3, #14
 801839a:	d900      	bls.n	801839e <_dtoa_r+0x2ca>
 801839c:	e0d9      	b.n	8018552 <_dtoa_r+0x47e>
 801839e:	2c00      	cmp	r4, #0
 80183a0:	d100      	bne.n	80183a4 <_dtoa_r+0x2d0>
 80183a2:	e0d6      	b.n	8018552 <_dtoa_r+0x47e>
 80183a4:	9b04      	ldr	r3, [sp, #16]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	dd64      	ble.n	8018474 <_dtoa_r+0x3a0>
 80183aa:	210f      	movs	r1, #15
 80183ac:	9a04      	ldr	r2, [sp, #16]
 80183ae:	4b2b      	ldr	r3, [pc, #172]	@ (801845c <_dtoa_r+0x388>)
 80183b0:	400a      	ands	r2, r1
 80183b2:	00d2      	lsls	r2, r2, #3
 80183b4:	189b      	adds	r3, r3, r2
 80183b6:	681e      	ldr	r6, [r3, #0]
 80183b8:	685f      	ldr	r7, [r3, #4]
 80183ba:	9b04      	ldr	r3, [sp, #16]
 80183bc:	2402      	movs	r4, #2
 80183be:	111d      	asrs	r5, r3, #4
 80183c0:	05db      	lsls	r3, r3, #23
 80183c2:	d50a      	bpl.n	80183da <_dtoa_r+0x306>
 80183c4:	4b2a      	ldr	r3, [pc, #168]	@ (8018470 <_dtoa_r+0x39c>)
 80183c6:	400d      	ands	r5, r1
 80183c8:	6a1a      	ldr	r2, [r3, #32]
 80183ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183cc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80183ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80183d0:	f7e9 fc6e 	bl	8001cb0 <__aeabi_ddiv>
 80183d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80183d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80183d8:	3401      	adds	r4, #1
 80183da:	4b25      	ldr	r3, [pc, #148]	@ (8018470 <_dtoa_r+0x39c>)
 80183dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80183de:	2d00      	cmp	r5, #0
 80183e0:	d108      	bne.n	80183f4 <_dtoa_r+0x320>
 80183e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80183e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80183e6:	0032      	movs	r2, r6
 80183e8:	003b      	movs	r3, r7
 80183ea:	f7e9 fc61 	bl	8001cb0 <__aeabi_ddiv>
 80183ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80183f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80183f2:	e05a      	b.n	80184aa <_dtoa_r+0x3d6>
 80183f4:	2301      	movs	r3, #1
 80183f6:	421d      	tst	r5, r3
 80183f8:	d009      	beq.n	801840e <_dtoa_r+0x33a>
 80183fa:	18e4      	adds	r4, r4, r3
 80183fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80183fe:	0030      	movs	r0, r6
 8018400:	681a      	ldr	r2, [r3, #0]
 8018402:	685b      	ldr	r3, [r3, #4]
 8018404:	0039      	movs	r1, r7
 8018406:	f7ea f897 	bl	8002538 <__aeabi_dmul>
 801840a:	0006      	movs	r6, r0
 801840c:	000f      	movs	r7, r1
 801840e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018410:	106d      	asrs	r5, r5, #1
 8018412:	3308      	adds	r3, #8
 8018414:	e7e2      	b.n	80183dc <_dtoa_r+0x308>
 8018416:	46c0      	nop			@ (mov r8, r8)
 8018418:	0801bb0d 	.word	0x0801bb0d
 801841c:	0801bb24 	.word	0x0801bb24
 8018420:	7ff00000 	.word	0x7ff00000
 8018424:	0000270f 	.word	0x0000270f
 8018428:	0801bb09 	.word	0x0801bb09
 801842c:	0801bb0c 	.word	0x0801bb0c
 8018430:	0801badd 	.word	0x0801badd
 8018434:	0801badc 	.word	0x0801badc
 8018438:	3ff00000 	.word	0x3ff00000
 801843c:	fffffc01 	.word	0xfffffc01
 8018440:	3ff80000 	.word	0x3ff80000
 8018444:	636f4361 	.word	0x636f4361
 8018448:	3fd287a7 	.word	0x3fd287a7
 801844c:	8b60c8b3 	.word	0x8b60c8b3
 8018450:	3fc68a28 	.word	0x3fc68a28
 8018454:	509f79fb 	.word	0x509f79fb
 8018458:	3fd34413 	.word	0x3fd34413
 801845c:	0801bc20 	.word	0x0801bc20
 8018460:	00000432 	.word	0x00000432
 8018464:	00000412 	.word	0x00000412
 8018468:	fe100000 	.word	0xfe100000
 801846c:	0801bb7c 	.word	0x0801bb7c
 8018470:	0801bbf8 	.word	0x0801bbf8
 8018474:	9b04      	ldr	r3, [sp, #16]
 8018476:	2402      	movs	r4, #2
 8018478:	2b00      	cmp	r3, #0
 801847a:	d016      	beq.n	80184aa <_dtoa_r+0x3d6>
 801847c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801847e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018480:	220f      	movs	r2, #15
 8018482:	425d      	negs	r5, r3
 8018484:	402a      	ands	r2, r5
 8018486:	4bd7      	ldr	r3, [pc, #860]	@ (80187e4 <_dtoa_r+0x710>)
 8018488:	00d2      	lsls	r2, r2, #3
 801848a:	189b      	adds	r3, r3, r2
 801848c:	681a      	ldr	r2, [r3, #0]
 801848e:	685b      	ldr	r3, [r3, #4]
 8018490:	f7ea f852 	bl	8002538 <__aeabi_dmul>
 8018494:	2701      	movs	r7, #1
 8018496:	2300      	movs	r3, #0
 8018498:	900a      	str	r0, [sp, #40]	@ 0x28
 801849a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801849c:	4ed2      	ldr	r6, [pc, #840]	@ (80187e8 <_dtoa_r+0x714>)
 801849e:	112d      	asrs	r5, r5, #4
 80184a0:	2d00      	cmp	r5, #0
 80184a2:	d000      	beq.n	80184a6 <_dtoa_r+0x3d2>
 80184a4:	e0ba      	b.n	801861c <_dtoa_r+0x548>
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d1a1      	bne.n	80183ee <_dtoa_r+0x31a>
 80184aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80184ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80184ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d100      	bne.n	80184b6 <_dtoa_r+0x3e2>
 80184b4:	e0bd      	b.n	8018632 <_dtoa_r+0x55e>
 80184b6:	2200      	movs	r2, #0
 80184b8:	0030      	movs	r0, r6
 80184ba:	0039      	movs	r1, r7
 80184bc:	4bcb      	ldr	r3, [pc, #812]	@ (80187ec <_dtoa_r+0x718>)
 80184be:	f7e7 ffcb 	bl	8000458 <__aeabi_dcmplt>
 80184c2:	2800      	cmp	r0, #0
 80184c4:	d100      	bne.n	80184c8 <_dtoa_r+0x3f4>
 80184c6:	e0b4      	b.n	8018632 <_dtoa_r+0x55e>
 80184c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d100      	bne.n	80184d0 <_dtoa_r+0x3fc>
 80184ce:	e0b0      	b.n	8018632 <_dtoa_r+0x55e>
 80184d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	dd39      	ble.n	801854a <_dtoa_r+0x476>
 80184d6:	9b04      	ldr	r3, [sp, #16]
 80184d8:	2200      	movs	r2, #0
 80184da:	3b01      	subs	r3, #1
 80184dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80184de:	0030      	movs	r0, r6
 80184e0:	4bc3      	ldr	r3, [pc, #780]	@ (80187f0 <_dtoa_r+0x71c>)
 80184e2:	0039      	movs	r1, r7
 80184e4:	f7ea f828 	bl	8002538 <__aeabi_dmul>
 80184e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80184ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 80184ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80184ee:	3401      	adds	r4, #1
 80184f0:	0020      	movs	r0, r4
 80184f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80184f4:	f7ea fee2 	bl	80032bc <__aeabi_i2d>
 80184f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80184fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80184fc:	f7ea f81c 	bl	8002538 <__aeabi_dmul>
 8018500:	4bbc      	ldr	r3, [pc, #752]	@ (80187f4 <_dtoa_r+0x720>)
 8018502:	2200      	movs	r2, #0
 8018504:	f7e9 f870 	bl	80015e8 <__aeabi_dadd>
 8018508:	4bbb      	ldr	r3, [pc, #748]	@ (80187f8 <_dtoa_r+0x724>)
 801850a:	0006      	movs	r6, r0
 801850c:	18cf      	adds	r7, r1, r3
 801850e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018510:	2b00      	cmp	r3, #0
 8018512:	d000      	beq.n	8018516 <_dtoa_r+0x442>
 8018514:	e091      	b.n	801863a <_dtoa_r+0x566>
 8018516:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018518:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801851a:	2200      	movs	r2, #0
 801851c:	4bb7      	ldr	r3, [pc, #732]	@ (80187fc <_dtoa_r+0x728>)
 801851e:	f7ea fad3 	bl	8002ac8 <__aeabi_dsub>
 8018522:	0032      	movs	r2, r6
 8018524:	003b      	movs	r3, r7
 8018526:	0004      	movs	r4, r0
 8018528:	000d      	movs	r5, r1
 801852a:	f7e7 ffa9 	bl	8000480 <__aeabi_dcmpgt>
 801852e:	2800      	cmp	r0, #0
 8018530:	d000      	beq.n	8018534 <_dtoa_r+0x460>
 8018532:	e29d      	b.n	8018a70 <_dtoa_r+0x99c>
 8018534:	2180      	movs	r1, #128	@ 0x80
 8018536:	0609      	lsls	r1, r1, #24
 8018538:	187b      	adds	r3, r7, r1
 801853a:	0032      	movs	r2, r6
 801853c:	0020      	movs	r0, r4
 801853e:	0029      	movs	r1, r5
 8018540:	f7e7 ff8a 	bl	8000458 <__aeabi_dcmplt>
 8018544:	2800      	cmp	r0, #0
 8018546:	d000      	beq.n	801854a <_dtoa_r+0x476>
 8018548:	e130      	b.n	80187ac <_dtoa_r+0x6d8>
 801854a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801854c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801854e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018550:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018552:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018554:	2b00      	cmp	r3, #0
 8018556:	da00      	bge.n	801855a <_dtoa_r+0x486>
 8018558:	e177      	b.n	801884a <_dtoa_r+0x776>
 801855a:	9a04      	ldr	r2, [sp, #16]
 801855c:	2a0e      	cmp	r2, #14
 801855e:	dd00      	ble.n	8018562 <_dtoa_r+0x48e>
 8018560:	e173      	b.n	801884a <_dtoa_r+0x776>
 8018562:	4ba0      	ldr	r3, [pc, #640]	@ (80187e4 <_dtoa_r+0x710>)
 8018564:	00d2      	lsls	r2, r2, #3
 8018566:	189b      	adds	r3, r3, r2
 8018568:	685c      	ldr	r4, [r3, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	9306      	str	r3, [sp, #24]
 801856e:	9407      	str	r4, [sp, #28]
 8018570:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018572:	2b00      	cmp	r3, #0
 8018574:	da03      	bge.n	801857e <_dtoa_r+0x4aa>
 8018576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018578:	2b00      	cmp	r3, #0
 801857a:	dc00      	bgt.n	801857e <_dtoa_r+0x4aa>
 801857c:	e106      	b.n	801878c <_dtoa_r+0x6b8>
 801857e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018580:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018584:	9d08      	ldr	r5, [sp, #32]
 8018586:	3b01      	subs	r3, #1
 8018588:	195b      	adds	r3, r3, r5
 801858a:	930a      	str	r3, [sp, #40]	@ 0x28
 801858c:	9a06      	ldr	r2, [sp, #24]
 801858e:	9b07      	ldr	r3, [sp, #28]
 8018590:	0030      	movs	r0, r6
 8018592:	0039      	movs	r1, r7
 8018594:	f7e9 fb8c 	bl	8001cb0 <__aeabi_ddiv>
 8018598:	f7ea fe54 	bl	8003244 <__aeabi_d2iz>
 801859c:	9009      	str	r0, [sp, #36]	@ 0x24
 801859e:	f7ea fe8d 	bl	80032bc <__aeabi_i2d>
 80185a2:	9a06      	ldr	r2, [sp, #24]
 80185a4:	9b07      	ldr	r3, [sp, #28]
 80185a6:	f7e9 ffc7 	bl	8002538 <__aeabi_dmul>
 80185aa:	0002      	movs	r2, r0
 80185ac:	000b      	movs	r3, r1
 80185ae:	0030      	movs	r0, r6
 80185b0:	0039      	movs	r1, r7
 80185b2:	f7ea fa89 	bl	8002ac8 <__aeabi_dsub>
 80185b6:	002b      	movs	r3, r5
 80185b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80185ba:	3501      	adds	r5, #1
 80185bc:	3230      	adds	r2, #48	@ 0x30
 80185be:	701a      	strb	r2, [r3, #0]
 80185c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80185c2:	002c      	movs	r4, r5
 80185c4:	429a      	cmp	r2, r3
 80185c6:	d000      	beq.n	80185ca <_dtoa_r+0x4f6>
 80185c8:	e131      	b.n	801882e <_dtoa_r+0x75a>
 80185ca:	0002      	movs	r2, r0
 80185cc:	000b      	movs	r3, r1
 80185ce:	f7e9 f80b 	bl	80015e8 <__aeabi_dadd>
 80185d2:	9a06      	ldr	r2, [sp, #24]
 80185d4:	9b07      	ldr	r3, [sp, #28]
 80185d6:	0006      	movs	r6, r0
 80185d8:	000f      	movs	r7, r1
 80185da:	f7e7 ff51 	bl	8000480 <__aeabi_dcmpgt>
 80185de:	2800      	cmp	r0, #0
 80185e0:	d000      	beq.n	80185e4 <_dtoa_r+0x510>
 80185e2:	e10f      	b.n	8018804 <_dtoa_r+0x730>
 80185e4:	9a06      	ldr	r2, [sp, #24]
 80185e6:	9b07      	ldr	r3, [sp, #28]
 80185e8:	0030      	movs	r0, r6
 80185ea:	0039      	movs	r1, r7
 80185ec:	f7e7 ff2e 	bl	800044c <__aeabi_dcmpeq>
 80185f0:	2800      	cmp	r0, #0
 80185f2:	d003      	beq.n	80185fc <_dtoa_r+0x528>
 80185f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185f6:	07dd      	lsls	r5, r3, #31
 80185f8:	d500      	bpl.n	80185fc <_dtoa_r+0x528>
 80185fa:	e103      	b.n	8018804 <_dtoa_r+0x730>
 80185fc:	9905      	ldr	r1, [sp, #20]
 80185fe:	9803      	ldr	r0, [sp, #12]
 8018600:	f000 fca6 	bl	8018f50 <_Bfree>
 8018604:	2300      	movs	r3, #0
 8018606:	7023      	strb	r3, [r4, #0]
 8018608:	9b04      	ldr	r3, [sp, #16]
 801860a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801860c:	3301      	adds	r3, #1
 801860e:	6013      	str	r3, [r2, #0]
 8018610:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018612:	2b00      	cmp	r3, #0
 8018614:	d100      	bne.n	8018618 <_dtoa_r+0x544>
 8018616:	e5a7      	b.n	8018168 <_dtoa_r+0x94>
 8018618:	601c      	str	r4, [r3, #0]
 801861a:	e5a5      	b.n	8018168 <_dtoa_r+0x94>
 801861c:	423d      	tst	r5, r7
 801861e:	d005      	beq.n	801862c <_dtoa_r+0x558>
 8018620:	6832      	ldr	r2, [r6, #0]
 8018622:	6873      	ldr	r3, [r6, #4]
 8018624:	f7e9 ff88 	bl	8002538 <__aeabi_dmul>
 8018628:	003b      	movs	r3, r7
 801862a:	3401      	adds	r4, #1
 801862c:	106d      	asrs	r5, r5, #1
 801862e:	3608      	adds	r6, #8
 8018630:	e736      	b.n	80184a0 <_dtoa_r+0x3cc>
 8018632:	9b04      	ldr	r3, [sp, #16]
 8018634:	930c      	str	r3, [sp, #48]	@ 0x30
 8018636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018638:	e75a      	b.n	80184f0 <_dtoa_r+0x41c>
 801863a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801863c:	4b69      	ldr	r3, [pc, #420]	@ (80187e4 <_dtoa_r+0x710>)
 801863e:	3a01      	subs	r2, #1
 8018640:	00d2      	lsls	r2, r2, #3
 8018642:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018644:	189b      	adds	r3, r3, r2
 8018646:	681a      	ldr	r2, [r3, #0]
 8018648:	685b      	ldr	r3, [r3, #4]
 801864a:	2900      	cmp	r1, #0
 801864c:	d04c      	beq.n	80186e8 <_dtoa_r+0x614>
 801864e:	2000      	movs	r0, #0
 8018650:	496b      	ldr	r1, [pc, #428]	@ (8018800 <_dtoa_r+0x72c>)
 8018652:	f7e9 fb2d 	bl	8001cb0 <__aeabi_ddiv>
 8018656:	0032      	movs	r2, r6
 8018658:	003b      	movs	r3, r7
 801865a:	f7ea fa35 	bl	8002ac8 <__aeabi_dsub>
 801865e:	9a08      	ldr	r2, [sp, #32]
 8018660:	0006      	movs	r6, r0
 8018662:	4694      	mov	ip, r2
 8018664:	000f      	movs	r7, r1
 8018666:	9b08      	ldr	r3, [sp, #32]
 8018668:	9316      	str	r3, [sp, #88]	@ 0x58
 801866a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801866c:	4463      	add	r3, ip
 801866e:	9311      	str	r3, [sp, #68]	@ 0x44
 8018670:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018672:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018674:	f7ea fde6 	bl	8003244 <__aeabi_d2iz>
 8018678:	0005      	movs	r5, r0
 801867a:	f7ea fe1f 	bl	80032bc <__aeabi_i2d>
 801867e:	0002      	movs	r2, r0
 8018680:	000b      	movs	r3, r1
 8018682:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018684:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018686:	f7ea fa1f 	bl	8002ac8 <__aeabi_dsub>
 801868a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801868c:	3530      	adds	r5, #48	@ 0x30
 801868e:	1c5c      	adds	r4, r3, #1
 8018690:	701d      	strb	r5, [r3, #0]
 8018692:	0032      	movs	r2, r6
 8018694:	003b      	movs	r3, r7
 8018696:	900a      	str	r0, [sp, #40]	@ 0x28
 8018698:	910b      	str	r1, [sp, #44]	@ 0x2c
 801869a:	f7e7 fedd 	bl	8000458 <__aeabi_dcmplt>
 801869e:	2800      	cmp	r0, #0
 80186a0:	d16a      	bne.n	8018778 <_dtoa_r+0x6a4>
 80186a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80186a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80186a6:	2000      	movs	r0, #0
 80186a8:	4950      	ldr	r1, [pc, #320]	@ (80187ec <_dtoa_r+0x718>)
 80186aa:	f7ea fa0d 	bl	8002ac8 <__aeabi_dsub>
 80186ae:	0032      	movs	r2, r6
 80186b0:	003b      	movs	r3, r7
 80186b2:	f7e7 fed1 	bl	8000458 <__aeabi_dcmplt>
 80186b6:	2800      	cmp	r0, #0
 80186b8:	d000      	beq.n	80186bc <_dtoa_r+0x5e8>
 80186ba:	e0a5      	b.n	8018808 <_dtoa_r+0x734>
 80186bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80186be:	42a3      	cmp	r3, r4
 80186c0:	d100      	bne.n	80186c4 <_dtoa_r+0x5f0>
 80186c2:	e742      	b.n	801854a <_dtoa_r+0x476>
 80186c4:	2200      	movs	r2, #0
 80186c6:	0030      	movs	r0, r6
 80186c8:	0039      	movs	r1, r7
 80186ca:	4b49      	ldr	r3, [pc, #292]	@ (80187f0 <_dtoa_r+0x71c>)
 80186cc:	f7e9 ff34 	bl	8002538 <__aeabi_dmul>
 80186d0:	2200      	movs	r2, #0
 80186d2:	0006      	movs	r6, r0
 80186d4:	000f      	movs	r7, r1
 80186d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80186d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80186da:	4b45      	ldr	r3, [pc, #276]	@ (80187f0 <_dtoa_r+0x71c>)
 80186dc:	f7e9 ff2c 	bl	8002538 <__aeabi_dmul>
 80186e0:	9416      	str	r4, [sp, #88]	@ 0x58
 80186e2:	900a      	str	r0, [sp, #40]	@ 0x28
 80186e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80186e6:	e7c3      	b.n	8018670 <_dtoa_r+0x59c>
 80186e8:	0030      	movs	r0, r6
 80186ea:	0039      	movs	r1, r7
 80186ec:	f7e9 ff24 	bl	8002538 <__aeabi_dmul>
 80186f0:	9d08      	ldr	r5, [sp, #32]
 80186f2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80186f4:	002b      	movs	r3, r5
 80186f6:	4694      	mov	ip, r2
 80186f8:	9016      	str	r0, [sp, #88]	@ 0x58
 80186fa:	9117      	str	r1, [sp, #92]	@ 0x5c
 80186fc:	4463      	add	r3, ip
 80186fe:	9319      	str	r3, [sp, #100]	@ 0x64
 8018700:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018702:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018704:	f7ea fd9e 	bl	8003244 <__aeabi_d2iz>
 8018708:	0004      	movs	r4, r0
 801870a:	f7ea fdd7 	bl	80032bc <__aeabi_i2d>
 801870e:	000b      	movs	r3, r1
 8018710:	0002      	movs	r2, r0
 8018712:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018714:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018716:	f7ea f9d7 	bl	8002ac8 <__aeabi_dsub>
 801871a:	3430      	adds	r4, #48	@ 0x30
 801871c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801871e:	702c      	strb	r4, [r5, #0]
 8018720:	3501      	adds	r5, #1
 8018722:	0006      	movs	r6, r0
 8018724:	000f      	movs	r7, r1
 8018726:	42ab      	cmp	r3, r5
 8018728:	d129      	bne.n	801877e <_dtoa_r+0x6aa>
 801872a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801872c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801872e:	9b08      	ldr	r3, [sp, #32]
 8018730:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018732:	469c      	mov	ip, r3
 8018734:	2200      	movs	r2, #0
 8018736:	4b32      	ldr	r3, [pc, #200]	@ (8018800 <_dtoa_r+0x72c>)
 8018738:	4464      	add	r4, ip
 801873a:	f7e8 ff55 	bl	80015e8 <__aeabi_dadd>
 801873e:	0002      	movs	r2, r0
 8018740:	000b      	movs	r3, r1
 8018742:	0030      	movs	r0, r6
 8018744:	0039      	movs	r1, r7
 8018746:	f7e7 fe9b 	bl	8000480 <__aeabi_dcmpgt>
 801874a:	2800      	cmp	r0, #0
 801874c:	d15c      	bne.n	8018808 <_dtoa_r+0x734>
 801874e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018750:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018752:	2000      	movs	r0, #0
 8018754:	492a      	ldr	r1, [pc, #168]	@ (8018800 <_dtoa_r+0x72c>)
 8018756:	f7ea f9b7 	bl	8002ac8 <__aeabi_dsub>
 801875a:	0002      	movs	r2, r0
 801875c:	000b      	movs	r3, r1
 801875e:	0030      	movs	r0, r6
 8018760:	0039      	movs	r1, r7
 8018762:	f7e7 fe79 	bl	8000458 <__aeabi_dcmplt>
 8018766:	2800      	cmp	r0, #0
 8018768:	d100      	bne.n	801876c <_dtoa_r+0x698>
 801876a:	e6ee      	b.n	801854a <_dtoa_r+0x476>
 801876c:	0023      	movs	r3, r4
 801876e:	3c01      	subs	r4, #1
 8018770:	7822      	ldrb	r2, [r4, #0]
 8018772:	2a30      	cmp	r2, #48	@ 0x30
 8018774:	d0fa      	beq.n	801876c <_dtoa_r+0x698>
 8018776:	001c      	movs	r4, r3
 8018778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801877a:	9304      	str	r3, [sp, #16]
 801877c:	e73e      	b.n	80185fc <_dtoa_r+0x528>
 801877e:	2200      	movs	r2, #0
 8018780:	4b1b      	ldr	r3, [pc, #108]	@ (80187f0 <_dtoa_r+0x71c>)
 8018782:	f7e9 fed9 	bl	8002538 <__aeabi_dmul>
 8018786:	900a      	str	r0, [sp, #40]	@ 0x28
 8018788:	910b      	str	r1, [sp, #44]	@ 0x2c
 801878a:	e7b9      	b.n	8018700 <_dtoa_r+0x62c>
 801878c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801878e:	2b00      	cmp	r3, #0
 8018790:	d10c      	bne.n	80187ac <_dtoa_r+0x6d8>
 8018792:	9806      	ldr	r0, [sp, #24]
 8018794:	9907      	ldr	r1, [sp, #28]
 8018796:	2200      	movs	r2, #0
 8018798:	4b18      	ldr	r3, [pc, #96]	@ (80187fc <_dtoa_r+0x728>)
 801879a:	f7e9 fecd 	bl	8002538 <__aeabi_dmul>
 801879e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80187a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80187a2:	f7e7 fe77 	bl	8000494 <__aeabi_dcmpge>
 80187a6:	2800      	cmp	r0, #0
 80187a8:	d100      	bne.n	80187ac <_dtoa_r+0x6d8>
 80187aa:	e164      	b.n	8018a76 <_dtoa_r+0x9a2>
 80187ac:	2600      	movs	r6, #0
 80187ae:	0037      	movs	r7, r6
 80187b0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80187b2:	9c08      	ldr	r4, [sp, #32]
 80187b4:	43db      	mvns	r3, r3
 80187b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80187b8:	2300      	movs	r3, #0
 80187ba:	9304      	str	r3, [sp, #16]
 80187bc:	0031      	movs	r1, r6
 80187be:	9803      	ldr	r0, [sp, #12]
 80187c0:	f000 fbc6 	bl	8018f50 <_Bfree>
 80187c4:	2f00      	cmp	r7, #0
 80187c6:	d0d7      	beq.n	8018778 <_dtoa_r+0x6a4>
 80187c8:	9b04      	ldr	r3, [sp, #16]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d005      	beq.n	80187da <_dtoa_r+0x706>
 80187ce:	42bb      	cmp	r3, r7
 80187d0:	d003      	beq.n	80187da <_dtoa_r+0x706>
 80187d2:	0019      	movs	r1, r3
 80187d4:	9803      	ldr	r0, [sp, #12]
 80187d6:	f000 fbbb 	bl	8018f50 <_Bfree>
 80187da:	0039      	movs	r1, r7
 80187dc:	9803      	ldr	r0, [sp, #12]
 80187de:	f000 fbb7 	bl	8018f50 <_Bfree>
 80187e2:	e7c9      	b.n	8018778 <_dtoa_r+0x6a4>
 80187e4:	0801bc20 	.word	0x0801bc20
 80187e8:	0801bbf8 	.word	0x0801bbf8
 80187ec:	3ff00000 	.word	0x3ff00000
 80187f0:	40240000 	.word	0x40240000
 80187f4:	401c0000 	.word	0x401c0000
 80187f8:	fcc00000 	.word	0xfcc00000
 80187fc:	40140000 	.word	0x40140000
 8018800:	3fe00000 	.word	0x3fe00000
 8018804:	9b04      	ldr	r3, [sp, #16]
 8018806:	930c      	str	r3, [sp, #48]	@ 0x30
 8018808:	0023      	movs	r3, r4
 801880a:	001c      	movs	r4, r3
 801880c:	3b01      	subs	r3, #1
 801880e:	781a      	ldrb	r2, [r3, #0]
 8018810:	2a39      	cmp	r2, #57	@ 0x39
 8018812:	d108      	bne.n	8018826 <_dtoa_r+0x752>
 8018814:	9a08      	ldr	r2, [sp, #32]
 8018816:	429a      	cmp	r2, r3
 8018818:	d1f7      	bne.n	801880a <_dtoa_r+0x736>
 801881a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801881c:	9908      	ldr	r1, [sp, #32]
 801881e:	3201      	adds	r2, #1
 8018820:	920c      	str	r2, [sp, #48]	@ 0x30
 8018822:	2230      	movs	r2, #48	@ 0x30
 8018824:	700a      	strb	r2, [r1, #0]
 8018826:	781a      	ldrb	r2, [r3, #0]
 8018828:	3201      	adds	r2, #1
 801882a:	701a      	strb	r2, [r3, #0]
 801882c:	e7a4      	b.n	8018778 <_dtoa_r+0x6a4>
 801882e:	2200      	movs	r2, #0
 8018830:	4bc6      	ldr	r3, [pc, #792]	@ (8018b4c <_dtoa_r+0xa78>)
 8018832:	f7e9 fe81 	bl	8002538 <__aeabi_dmul>
 8018836:	2200      	movs	r2, #0
 8018838:	2300      	movs	r3, #0
 801883a:	0006      	movs	r6, r0
 801883c:	000f      	movs	r7, r1
 801883e:	f7e7 fe05 	bl	800044c <__aeabi_dcmpeq>
 8018842:	2800      	cmp	r0, #0
 8018844:	d100      	bne.n	8018848 <_dtoa_r+0x774>
 8018846:	e6a1      	b.n	801858c <_dtoa_r+0x4b8>
 8018848:	e6d8      	b.n	80185fc <_dtoa_r+0x528>
 801884a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801884c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801884e:	9c06      	ldr	r4, [sp, #24]
 8018850:	2f00      	cmp	r7, #0
 8018852:	d014      	beq.n	801887e <_dtoa_r+0x7aa>
 8018854:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018856:	2a01      	cmp	r2, #1
 8018858:	dd00      	ble.n	801885c <_dtoa_r+0x788>
 801885a:	e0c8      	b.n	80189ee <_dtoa_r+0x91a>
 801885c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801885e:	2a00      	cmp	r2, #0
 8018860:	d100      	bne.n	8018864 <_dtoa_r+0x790>
 8018862:	e0be      	b.n	80189e2 <_dtoa_r+0x90e>
 8018864:	4aba      	ldr	r2, [pc, #744]	@ (8018b50 <_dtoa_r+0xa7c>)
 8018866:	189b      	adds	r3, r3, r2
 8018868:	9a06      	ldr	r2, [sp, #24]
 801886a:	2101      	movs	r1, #1
 801886c:	18d2      	adds	r2, r2, r3
 801886e:	9206      	str	r2, [sp, #24]
 8018870:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018872:	9803      	ldr	r0, [sp, #12]
 8018874:	18d3      	adds	r3, r2, r3
 8018876:	930d      	str	r3, [sp, #52]	@ 0x34
 8018878:	f000 fc22 	bl	80190c0 <__i2b>
 801887c:	0007      	movs	r7, r0
 801887e:	2c00      	cmp	r4, #0
 8018880:	d00e      	beq.n	80188a0 <_dtoa_r+0x7cc>
 8018882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018884:	2b00      	cmp	r3, #0
 8018886:	dd0b      	ble.n	80188a0 <_dtoa_r+0x7cc>
 8018888:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801888a:	0023      	movs	r3, r4
 801888c:	4294      	cmp	r4, r2
 801888e:	dd00      	ble.n	8018892 <_dtoa_r+0x7be>
 8018890:	0013      	movs	r3, r2
 8018892:	9a06      	ldr	r2, [sp, #24]
 8018894:	1ae4      	subs	r4, r4, r3
 8018896:	1ad2      	subs	r2, r2, r3
 8018898:	9206      	str	r2, [sp, #24]
 801889a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801889c:	1ad3      	subs	r3, r2, r3
 801889e:	930d      	str	r3, [sp, #52]	@ 0x34
 80188a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d01f      	beq.n	80188e6 <_dtoa_r+0x812>
 80188a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d100      	bne.n	80188ae <_dtoa_r+0x7da>
 80188ac:	e0b5      	b.n	8018a1a <_dtoa_r+0x946>
 80188ae:	2d00      	cmp	r5, #0
 80188b0:	d010      	beq.n	80188d4 <_dtoa_r+0x800>
 80188b2:	0039      	movs	r1, r7
 80188b4:	002a      	movs	r2, r5
 80188b6:	9803      	ldr	r0, [sp, #12]
 80188b8:	f000 fccc 	bl	8019254 <__pow5mult>
 80188bc:	9a05      	ldr	r2, [sp, #20]
 80188be:	0001      	movs	r1, r0
 80188c0:	0007      	movs	r7, r0
 80188c2:	9803      	ldr	r0, [sp, #12]
 80188c4:	f000 fc14 	bl	80190f0 <__multiply>
 80188c8:	0006      	movs	r6, r0
 80188ca:	9905      	ldr	r1, [sp, #20]
 80188cc:	9803      	ldr	r0, [sp, #12]
 80188ce:	f000 fb3f 	bl	8018f50 <_Bfree>
 80188d2:	9605      	str	r6, [sp, #20]
 80188d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80188d6:	1b5a      	subs	r2, r3, r5
 80188d8:	42ab      	cmp	r3, r5
 80188da:	d004      	beq.n	80188e6 <_dtoa_r+0x812>
 80188dc:	9905      	ldr	r1, [sp, #20]
 80188de:	9803      	ldr	r0, [sp, #12]
 80188e0:	f000 fcb8 	bl	8019254 <__pow5mult>
 80188e4:	9005      	str	r0, [sp, #20]
 80188e6:	2101      	movs	r1, #1
 80188e8:	9803      	ldr	r0, [sp, #12]
 80188ea:	f000 fbe9 	bl	80190c0 <__i2b>
 80188ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80188f0:	0006      	movs	r6, r0
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d100      	bne.n	80188f8 <_dtoa_r+0x824>
 80188f6:	e1bc      	b.n	8018c72 <_dtoa_r+0xb9e>
 80188f8:	001a      	movs	r2, r3
 80188fa:	0001      	movs	r1, r0
 80188fc:	9803      	ldr	r0, [sp, #12]
 80188fe:	f000 fca9 	bl	8019254 <__pow5mult>
 8018902:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018904:	0006      	movs	r6, r0
 8018906:	2500      	movs	r5, #0
 8018908:	2b01      	cmp	r3, #1
 801890a:	dc16      	bgt.n	801893a <_dtoa_r+0x866>
 801890c:	2500      	movs	r5, #0
 801890e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018910:	42ab      	cmp	r3, r5
 8018912:	d10e      	bne.n	8018932 <_dtoa_r+0x85e>
 8018914:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018916:	031b      	lsls	r3, r3, #12
 8018918:	42ab      	cmp	r3, r5
 801891a:	d10a      	bne.n	8018932 <_dtoa_r+0x85e>
 801891c:	4b8d      	ldr	r3, [pc, #564]	@ (8018b54 <_dtoa_r+0xa80>)
 801891e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018920:	4213      	tst	r3, r2
 8018922:	d006      	beq.n	8018932 <_dtoa_r+0x85e>
 8018924:	9b06      	ldr	r3, [sp, #24]
 8018926:	3501      	adds	r5, #1
 8018928:	3301      	adds	r3, #1
 801892a:	9306      	str	r3, [sp, #24]
 801892c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801892e:	3301      	adds	r3, #1
 8018930:	930d      	str	r3, [sp, #52]	@ 0x34
 8018932:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018934:	2001      	movs	r0, #1
 8018936:	2b00      	cmp	r3, #0
 8018938:	d008      	beq.n	801894c <_dtoa_r+0x878>
 801893a:	6933      	ldr	r3, [r6, #16]
 801893c:	3303      	adds	r3, #3
 801893e:	009b      	lsls	r3, r3, #2
 8018940:	18f3      	adds	r3, r6, r3
 8018942:	6858      	ldr	r0, [r3, #4]
 8018944:	f000 fb6c 	bl	8019020 <__hi0bits>
 8018948:	2320      	movs	r3, #32
 801894a:	1a18      	subs	r0, r3, r0
 801894c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801894e:	1818      	adds	r0, r3, r0
 8018950:	0002      	movs	r2, r0
 8018952:	231f      	movs	r3, #31
 8018954:	401a      	ands	r2, r3
 8018956:	4218      	tst	r0, r3
 8018958:	d065      	beq.n	8018a26 <_dtoa_r+0x952>
 801895a:	3301      	adds	r3, #1
 801895c:	1a9b      	subs	r3, r3, r2
 801895e:	2b04      	cmp	r3, #4
 8018960:	dd5d      	ble.n	8018a1e <_dtoa_r+0x94a>
 8018962:	231c      	movs	r3, #28
 8018964:	1a9b      	subs	r3, r3, r2
 8018966:	9a06      	ldr	r2, [sp, #24]
 8018968:	18e4      	adds	r4, r4, r3
 801896a:	18d2      	adds	r2, r2, r3
 801896c:	9206      	str	r2, [sp, #24]
 801896e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018970:	18d3      	adds	r3, r2, r3
 8018972:	930d      	str	r3, [sp, #52]	@ 0x34
 8018974:	9b06      	ldr	r3, [sp, #24]
 8018976:	2b00      	cmp	r3, #0
 8018978:	dd05      	ble.n	8018986 <_dtoa_r+0x8b2>
 801897a:	001a      	movs	r2, r3
 801897c:	9905      	ldr	r1, [sp, #20]
 801897e:	9803      	ldr	r0, [sp, #12]
 8018980:	f000 fcc4 	bl	801930c <__lshift>
 8018984:	9005      	str	r0, [sp, #20]
 8018986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018988:	2b00      	cmp	r3, #0
 801898a:	dd05      	ble.n	8018998 <_dtoa_r+0x8c4>
 801898c:	0031      	movs	r1, r6
 801898e:	001a      	movs	r2, r3
 8018990:	9803      	ldr	r0, [sp, #12]
 8018992:	f000 fcbb 	bl	801930c <__lshift>
 8018996:	0006      	movs	r6, r0
 8018998:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801899a:	2b00      	cmp	r3, #0
 801899c:	d045      	beq.n	8018a2a <_dtoa_r+0x956>
 801899e:	0031      	movs	r1, r6
 80189a0:	9805      	ldr	r0, [sp, #20]
 80189a2:	f000 fd1f 	bl	80193e4 <__mcmp>
 80189a6:	2800      	cmp	r0, #0
 80189a8:	da3f      	bge.n	8018a2a <_dtoa_r+0x956>
 80189aa:	9b04      	ldr	r3, [sp, #16]
 80189ac:	220a      	movs	r2, #10
 80189ae:	3b01      	subs	r3, #1
 80189b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80189b2:	9905      	ldr	r1, [sp, #20]
 80189b4:	2300      	movs	r3, #0
 80189b6:	9803      	ldr	r0, [sp, #12]
 80189b8:	f000 faee 	bl	8018f98 <__multadd>
 80189bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80189be:	9005      	str	r0, [sp, #20]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d100      	bne.n	80189c6 <_dtoa_r+0x8f2>
 80189c4:	e15c      	b.n	8018c80 <_dtoa_r+0xbac>
 80189c6:	2300      	movs	r3, #0
 80189c8:	0039      	movs	r1, r7
 80189ca:	220a      	movs	r2, #10
 80189cc:	9803      	ldr	r0, [sp, #12]
 80189ce:	f000 fae3 	bl	8018f98 <__multadd>
 80189d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80189d4:	0007      	movs	r7, r0
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	dc55      	bgt.n	8018a86 <_dtoa_r+0x9b2>
 80189da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80189dc:	2b02      	cmp	r3, #2
 80189de:	dc2d      	bgt.n	8018a3c <_dtoa_r+0x968>
 80189e0:	e051      	b.n	8018a86 <_dtoa_r+0x9b2>
 80189e2:	2336      	movs	r3, #54	@ 0x36
 80189e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80189e6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80189e8:	9c06      	ldr	r4, [sp, #24]
 80189ea:	1a9b      	subs	r3, r3, r2
 80189ec:	e73c      	b.n	8018868 <_dtoa_r+0x794>
 80189ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189f0:	1e5d      	subs	r5, r3, #1
 80189f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80189f4:	42ab      	cmp	r3, r5
 80189f6:	db08      	blt.n	8018a0a <_dtoa_r+0x936>
 80189f8:	1b5d      	subs	r5, r3, r5
 80189fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189fc:	9c06      	ldr	r4, [sp, #24]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	db00      	blt.n	8018a04 <_dtoa_r+0x930>
 8018a02:	e731      	b.n	8018868 <_dtoa_r+0x794>
 8018a04:	1ae4      	subs	r4, r4, r3
 8018a06:	2300      	movs	r3, #0
 8018a08:	e72e      	b.n	8018868 <_dtoa_r+0x794>
 8018a0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a0c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018a0e:	1aeb      	subs	r3, r5, r3
 8018a10:	18d3      	adds	r3, r2, r3
 8018a12:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018a14:	9314      	str	r3, [sp, #80]	@ 0x50
 8018a16:	2500      	movs	r5, #0
 8018a18:	e7ef      	b.n	80189fa <_dtoa_r+0x926>
 8018a1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018a1c:	e75e      	b.n	80188dc <_dtoa_r+0x808>
 8018a1e:	2b04      	cmp	r3, #4
 8018a20:	d0a8      	beq.n	8018974 <_dtoa_r+0x8a0>
 8018a22:	331c      	adds	r3, #28
 8018a24:	e79f      	b.n	8018966 <_dtoa_r+0x892>
 8018a26:	0013      	movs	r3, r2
 8018a28:	e7fb      	b.n	8018a22 <_dtoa_r+0x94e>
 8018a2a:	9b04      	ldr	r3, [sp, #16]
 8018a2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8018a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a30:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	dc23      	bgt.n	8018a7e <_dtoa_r+0x9aa>
 8018a36:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018a38:	2b02      	cmp	r3, #2
 8018a3a:	dd20      	ble.n	8018a7e <_dtoa_r+0x9aa>
 8018a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d000      	beq.n	8018a44 <_dtoa_r+0x970>
 8018a42:	e6b5      	b.n	80187b0 <_dtoa_r+0x6dc>
 8018a44:	0031      	movs	r1, r6
 8018a46:	2205      	movs	r2, #5
 8018a48:	9803      	ldr	r0, [sp, #12]
 8018a4a:	f000 faa5 	bl	8018f98 <__multadd>
 8018a4e:	0006      	movs	r6, r0
 8018a50:	0001      	movs	r1, r0
 8018a52:	9805      	ldr	r0, [sp, #20]
 8018a54:	f000 fcc6 	bl	80193e4 <__mcmp>
 8018a58:	2800      	cmp	r0, #0
 8018a5a:	dc00      	bgt.n	8018a5e <_dtoa_r+0x98a>
 8018a5c:	e6a8      	b.n	80187b0 <_dtoa_r+0x6dc>
 8018a5e:	9b08      	ldr	r3, [sp, #32]
 8018a60:	9a08      	ldr	r2, [sp, #32]
 8018a62:	1c5c      	adds	r4, r3, #1
 8018a64:	2331      	movs	r3, #49	@ 0x31
 8018a66:	7013      	strb	r3, [r2, #0]
 8018a68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a6a:	3301      	adds	r3, #1
 8018a6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8018a6e:	e6a3      	b.n	80187b8 <_dtoa_r+0x6e4>
 8018a70:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018a72:	0037      	movs	r7, r6
 8018a74:	e7f3      	b.n	8018a5e <_dtoa_r+0x98a>
 8018a76:	9b04      	ldr	r3, [sp, #16]
 8018a78:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8018a7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8018a7c:	e7f9      	b.n	8018a72 <_dtoa_r+0x99e>
 8018a7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d100      	bne.n	8018a86 <_dtoa_r+0x9b2>
 8018a84:	e100      	b.n	8018c88 <_dtoa_r+0xbb4>
 8018a86:	2c00      	cmp	r4, #0
 8018a88:	dd05      	ble.n	8018a96 <_dtoa_r+0x9c2>
 8018a8a:	0039      	movs	r1, r7
 8018a8c:	0022      	movs	r2, r4
 8018a8e:	9803      	ldr	r0, [sp, #12]
 8018a90:	f000 fc3c 	bl	801930c <__lshift>
 8018a94:	0007      	movs	r7, r0
 8018a96:	0038      	movs	r0, r7
 8018a98:	2d00      	cmp	r5, #0
 8018a9a:	d018      	beq.n	8018ace <_dtoa_r+0x9fa>
 8018a9c:	6879      	ldr	r1, [r7, #4]
 8018a9e:	9803      	ldr	r0, [sp, #12]
 8018aa0:	f000 fa12 	bl	8018ec8 <_Balloc>
 8018aa4:	1e04      	subs	r4, r0, #0
 8018aa6:	d105      	bne.n	8018ab4 <_dtoa_r+0x9e0>
 8018aa8:	0022      	movs	r2, r4
 8018aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8018b58 <_dtoa_r+0xa84>)
 8018aac:	482b      	ldr	r0, [pc, #172]	@ (8018b5c <_dtoa_r+0xa88>)
 8018aae:	492c      	ldr	r1, [pc, #176]	@ (8018b60 <_dtoa_r+0xa8c>)
 8018ab0:	f7ff fb25 	bl	80180fe <_dtoa_r+0x2a>
 8018ab4:	0039      	movs	r1, r7
 8018ab6:	693a      	ldr	r2, [r7, #16]
 8018ab8:	310c      	adds	r1, #12
 8018aba:	3202      	adds	r2, #2
 8018abc:	0092      	lsls	r2, r2, #2
 8018abe:	300c      	adds	r0, #12
 8018ac0:	f7ff fa70 	bl	8017fa4 <memcpy>
 8018ac4:	2201      	movs	r2, #1
 8018ac6:	0021      	movs	r1, r4
 8018ac8:	9803      	ldr	r0, [sp, #12]
 8018aca:	f000 fc1f 	bl	801930c <__lshift>
 8018ace:	9b08      	ldr	r3, [sp, #32]
 8018ad0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018ad2:	9306      	str	r3, [sp, #24]
 8018ad4:	3b01      	subs	r3, #1
 8018ad6:	189b      	adds	r3, r3, r2
 8018ad8:	2201      	movs	r2, #1
 8018ada:	9704      	str	r7, [sp, #16]
 8018adc:	0007      	movs	r7, r0
 8018ade:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018ae2:	4013      	ands	r3, r2
 8018ae4:	930e      	str	r3, [sp, #56]	@ 0x38
 8018ae6:	0031      	movs	r1, r6
 8018ae8:	9805      	ldr	r0, [sp, #20]
 8018aea:	f7ff fa64 	bl	8017fb6 <quorem>
 8018aee:	9904      	ldr	r1, [sp, #16]
 8018af0:	0005      	movs	r5, r0
 8018af2:	900a      	str	r0, [sp, #40]	@ 0x28
 8018af4:	9805      	ldr	r0, [sp, #20]
 8018af6:	f000 fc75 	bl	80193e4 <__mcmp>
 8018afa:	003a      	movs	r2, r7
 8018afc:	900d      	str	r0, [sp, #52]	@ 0x34
 8018afe:	0031      	movs	r1, r6
 8018b00:	9803      	ldr	r0, [sp, #12]
 8018b02:	f000 fc8b 	bl	801941c <__mdiff>
 8018b06:	2201      	movs	r2, #1
 8018b08:	68c3      	ldr	r3, [r0, #12]
 8018b0a:	0004      	movs	r4, r0
 8018b0c:	3530      	adds	r5, #48	@ 0x30
 8018b0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d104      	bne.n	8018b1e <_dtoa_r+0xa4a>
 8018b14:	0001      	movs	r1, r0
 8018b16:	9805      	ldr	r0, [sp, #20]
 8018b18:	f000 fc64 	bl	80193e4 <__mcmp>
 8018b1c:	9009      	str	r0, [sp, #36]	@ 0x24
 8018b1e:	0021      	movs	r1, r4
 8018b20:	9803      	ldr	r0, [sp, #12]
 8018b22:	f000 fa15 	bl	8018f50 <_Bfree>
 8018b26:	9b06      	ldr	r3, [sp, #24]
 8018b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b2a:	1c5c      	adds	r4, r3, #1
 8018b2c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018b2e:	4313      	orrs	r3, r2
 8018b30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b32:	4313      	orrs	r3, r2
 8018b34:	d116      	bne.n	8018b64 <_dtoa_r+0xa90>
 8018b36:	2d39      	cmp	r5, #57	@ 0x39
 8018b38:	d02f      	beq.n	8018b9a <_dtoa_r+0xac6>
 8018b3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	dd01      	ble.n	8018b44 <_dtoa_r+0xa70>
 8018b40:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018b42:	3531      	adds	r5, #49	@ 0x31
 8018b44:	9b06      	ldr	r3, [sp, #24]
 8018b46:	701d      	strb	r5, [r3, #0]
 8018b48:	e638      	b.n	80187bc <_dtoa_r+0x6e8>
 8018b4a:	46c0      	nop			@ (mov r8, r8)
 8018b4c:	40240000 	.word	0x40240000
 8018b50:	00000433 	.word	0x00000433
 8018b54:	7ff00000 	.word	0x7ff00000
 8018b58:	0801bb7c 	.word	0x0801bb7c
 8018b5c:	0801bb24 	.word	0x0801bb24
 8018b60:	000002ef 	.word	0x000002ef
 8018b64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	db04      	blt.n	8018b74 <_dtoa_r+0xaa0>
 8018b6a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018b6c:	4313      	orrs	r3, r2
 8018b6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b70:	4313      	orrs	r3, r2
 8018b72:	d11e      	bne.n	8018bb2 <_dtoa_r+0xade>
 8018b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	dde4      	ble.n	8018b44 <_dtoa_r+0xa70>
 8018b7a:	9905      	ldr	r1, [sp, #20]
 8018b7c:	2201      	movs	r2, #1
 8018b7e:	9803      	ldr	r0, [sp, #12]
 8018b80:	f000 fbc4 	bl	801930c <__lshift>
 8018b84:	0031      	movs	r1, r6
 8018b86:	9005      	str	r0, [sp, #20]
 8018b88:	f000 fc2c 	bl	80193e4 <__mcmp>
 8018b8c:	2800      	cmp	r0, #0
 8018b8e:	dc02      	bgt.n	8018b96 <_dtoa_r+0xac2>
 8018b90:	d1d8      	bne.n	8018b44 <_dtoa_r+0xa70>
 8018b92:	07eb      	lsls	r3, r5, #31
 8018b94:	d5d6      	bpl.n	8018b44 <_dtoa_r+0xa70>
 8018b96:	2d39      	cmp	r5, #57	@ 0x39
 8018b98:	d1d2      	bne.n	8018b40 <_dtoa_r+0xa6c>
 8018b9a:	2339      	movs	r3, #57	@ 0x39
 8018b9c:	9a06      	ldr	r2, [sp, #24]
 8018b9e:	7013      	strb	r3, [r2, #0]
 8018ba0:	0023      	movs	r3, r4
 8018ba2:	001c      	movs	r4, r3
 8018ba4:	3b01      	subs	r3, #1
 8018ba6:	781a      	ldrb	r2, [r3, #0]
 8018ba8:	2a39      	cmp	r2, #57	@ 0x39
 8018baa:	d04f      	beq.n	8018c4c <_dtoa_r+0xb78>
 8018bac:	3201      	adds	r2, #1
 8018bae:	701a      	strb	r2, [r3, #0]
 8018bb0:	e604      	b.n	80187bc <_dtoa_r+0x6e8>
 8018bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	dd03      	ble.n	8018bc0 <_dtoa_r+0xaec>
 8018bb8:	2d39      	cmp	r5, #57	@ 0x39
 8018bba:	d0ee      	beq.n	8018b9a <_dtoa_r+0xac6>
 8018bbc:	3501      	adds	r5, #1
 8018bbe:	e7c1      	b.n	8018b44 <_dtoa_r+0xa70>
 8018bc0:	9b06      	ldr	r3, [sp, #24]
 8018bc2:	9a06      	ldr	r2, [sp, #24]
 8018bc4:	701d      	strb	r5, [r3, #0]
 8018bc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018bc8:	4293      	cmp	r3, r2
 8018bca:	d02a      	beq.n	8018c22 <_dtoa_r+0xb4e>
 8018bcc:	2300      	movs	r3, #0
 8018bce:	220a      	movs	r2, #10
 8018bd0:	9905      	ldr	r1, [sp, #20]
 8018bd2:	9803      	ldr	r0, [sp, #12]
 8018bd4:	f000 f9e0 	bl	8018f98 <__multadd>
 8018bd8:	9b04      	ldr	r3, [sp, #16]
 8018bda:	9005      	str	r0, [sp, #20]
 8018bdc:	42bb      	cmp	r3, r7
 8018bde:	d109      	bne.n	8018bf4 <_dtoa_r+0xb20>
 8018be0:	2300      	movs	r3, #0
 8018be2:	220a      	movs	r2, #10
 8018be4:	9904      	ldr	r1, [sp, #16]
 8018be6:	9803      	ldr	r0, [sp, #12]
 8018be8:	f000 f9d6 	bl	8018f98 <__multadd>
 8018bec:	9004      	str	r0, [sp, #16]
 8018bee:	0007      	movs	r7, r0
 8018bf0:	9406      	str	r4, [sp, #24]
 8018bf2:	e778      	b.n	8018ae6 <_dtoa_r+0xa12>
 8018bf4:	9904      	ldr	r1, [sp, #16]
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	220a      	movs	r2, #10
 8018bfa:	9803      	ldr	r0, [sp, #12]
 8018bfc:	f000 f9cc 	bl	8018f98 <__multadd>
 8018c00:	2300      	movs	r3, #0
 8018c02:	9004      	str	r0, [sp, #16]
 8018c04:	220a      	movs	r2, #10
 8018c06:	0039      	movs	r1, r7
 8018c08:	9803      	ldr	r0, [sp, #12]
 8018c0a:	f000 f9c5 	bl	8018f98 <__multadd>
 8018c0e:	e7ee      	b.n	8018bee <_dtoa_r+0xb1a>
 8018c10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c12:	2401      	movs	r4, #1
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	dd00      	ble.n	8018c1a <_dtoa_r+0xb46>
 8018c18:	001c      	movs	r4, r3
 8018c1a:	9b08      	ldr	r3, [sp, #32]
 8018c1c:	191c      	adds	r4, r3, r4
 8018c1e:	2300      	movs	r3, #0
 8018c20:	9304      	str	r3, [sp, #16]
 8018c22:	9905      	ldr	r1, [sp, #20]
 8018c24:	2201      	movs	r2, #1
 8018c26:	9803      	ldr	r0, [sp, #12]
 8018c28:	f000 fb70 	bl	801930c <__lshift>
 8018c2c:	0031      	movs	r1, r6
 8018c2e:	9005      	str	r0, [sp, #20]
 8018c30:	f000 fbd8 	bl	80193e4 <__mcmp>
 8018c34:	2800      	cmp	r0, #0
 8018c36:	dcb3      	bgt.n	8018ba0 <_dtoa_r+0xacc>
 8018c38:	d101      	bne.n	8018c3e <_dtoa_r+0xb6a>
 8018c3a:	07ed      	lsls	r5, r5, #31
 8018c3c:	d4b0      	bmi.n	8018ba0 <_dtoa_r+0xacc>
 8018c3e:	0023      	movs	r3, r4
 8018c40:	001c      	movs	r4, r3
 8018c42:	3b01      	subs	r3, #1
 8018c44:	781a      	ldrb	r2, [r3, #0]
 8018c46:	2a30      	cmp	r2, #48	@ 0x30
 8018c48:	d0fa      	beq.n	8018c40 <_dtoa_r+0xb6c>
 8018c4a:	e5b7      	b.n	80187bc <_dtoa_r+0x6e8>
 8018c4c:	9a08      	ldr	r2, [sp, #32]
 8018c4e:	429a      	cmp	r2, r3
 8018c50:	d1a7      	bne.n	8018ba2 <_dtoa_r+0xace>
 8018c52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c54:	3301      	adds	r3, #1
 8018c56:	930c      	str	r3, [sp, #48]	@ 0x30
 8018c58:	2331      	movs	r3, #49	@ 0x31
 8018c5a:	7013      	strb	r3, [r2, #0]
 8018c5c:	e5ae      	b.n	80187bc <_dtoa_r+0x6e8>
 8018c5e:	4b15      	ldr	r3, [pc, #84]	@ (8018cb4 <_dtoa_r+0xbe0>)
 8018c60:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018c62:	9308      	str	r3, [sp, #32]
 8018c64:	4b14      	ldr	r3, [pc, #80]	@ (8018cb8 <_dtoa_r+0xbe4>)
 8018c66:	2a00      	cmp	r2, #0
 8018c68:	d001      	beq.n	8018c6e <_dtoa_r+0xb9a>
 8018c6a:	f7ff fa7b 	bl	8018164 <_dtoa_r+0x90>
 8018c6e:	f7ff fa7b 	bl	8018168 <_dtoa_r+0x94>
 8018c72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018c74:	2b01      	cmp	r3, #1
 8018c76:	dc00      	bgt.n	8018c7a <_dtoa_r+0xba6>
 8018c78:	e648      	b.n	801890c <_dtoa_r+0x838>
 8018c7a:	2001      	movs	r0, #1
 8018c7c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8018c7e:	e665      	b.n	801894c <_dtoa_r+0x878>
 8018c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	dc00      	bgt.n	8018c88 <_dtoa_r+0xbb4>
 8018c86:	e6d6      	b.n	8018a36 <_dtoa_r+0x962>
 8018c88:	2400      	movs	r4, #0
 8018c8a:	0031      	movs	r1, r6
 8018c8c:	9805      	ldr	r0, [sp, #20]
 8018c8e:	f7ff f992 	bl	8017fb6 <quorem>
 8018c92:	9b08      	ldr	r3, [sp, #32]
 8018c94:	3030      	adds	r0, #48	@ 0x30
 8018c96:	5518      	strb	r0, [r3, r4]
 8018c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c9a:	3401      	adds	r4, #1
 8018c9c:	0005      	movs	r5, r0
 8018c9e:	429c      	cmp	r4, r3
 8018ca0:	dab6      	bge.n	8018c10 <_dtoa_r+0xb3c>
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	220a      	movs	r2, #10
 8018ca6:	9905      	ldr	r1, [sp, #20]
 8018ca8:	9803      	ldr	r0, [sp, #12]
 8018caa:	f000 f975 	bl	8018f98 <__multadd>
 8018cae:	9005      	str	r0, [sp, #20]
 8018cb0:	e7eb      	b.n	8018c8a <_dtoa_r+0xbb6>
 8018cb2:	46c0      	nop			@ (mov r8, r8)
 8018cb4:	0801bb00 	.word	0x0801bb00
 8018cb8:	0801bb08 	.word	0x0801bb08

08018cbc <_free_r>:
 8018cbc:	b570      	push	{r4, r5, r6, lr}
 8018cbe:	0005      	movs	r5, r0
 8018cc0:	1e0c      	subs	r4, r1, #0
 8018cc2:	d010      	beq.n	8018ce6 <_free_r+0x2a>
 8018cc4:	3c04      	subs	r4, #4
 8018cc6:	6823      	ldr	r3, [r4, #0]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	da00      	bge.n	8018cce <_free_r+0x12>
 8018ccc:	18e4      	adds	r4, r4, r3
 8018cce:	0028      	movs	r0, r5
 8018cd0:	f000 f8ea 	bl	8018ea8 <__malloc_lock>
 8018cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8018d4c <_free_r+0x90>)
 8018cd6:	6813      	ldr	r3, [r2, #0]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d105      	bne.n	8018ce8 <_free_r+0x2c>
 8018cdc:	6063      	str	r3, [r4, #4]
 8018cde:	6014      	str	r4, [r2, #0]
 8018ce0:	0028      	movs	r0, r5
 8018ce2:	f000 f8e9 	bl	8018eb8 <__malloc_unlock>
 8018ce6:	bd70      	pop	{r4, r5, r6, pc}
 8018ce8:	42a3      	cmp	r3, r4
 8018cea:	d908      	bls.n	8018cfe <_free_r+0x42>
 8018cec:	6820      	ldr	r0, [r4, #0]
 8018cee:	1821      	adds	r1, r4, r0
 8018cf0:	428b      	cmp	r3, r1
 8018cf2:	d1f3      	bne.n	8018cdc <_free_r+0x20>
 8018cf4:	6819      	ldr	r1, [r3, #0]
 8018cf6:	685b      	ldr	r3, [r3, #4]
 8018cf8:	1809      	adds	r1, r1, r0
 8018cfa:	6021      	str	r1, [r4, #0]
 8018cfc:	e7ee      	b.n	8018cdc <_free_r+0x20>
 8018cfe:	001a      	movs	r2, r3
 8018d00:	685b      	ldr	r3, [r3, #4]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d001      	beq.n	8018d0a <_free_r+0x4e>
 8018d06:	42a3      	cmp	r3, r4
 8018d08:	d9f9      	bls.n	8018cfe <_free_r+0x42>
 8018d0a:	6811      	ldr	r1, [r2, #0]
 8018d0c:	1850      	adds	r0, r2, r1
 8018d0e:	42a0      	cmp	r0, r4
 8018d10:	d10b      	bne.n	8018d2a <_free_r+0x6e>
 8018d12:	6820      	ldr	r0, [r4, #0]
 8018d14:	1809      	adds	r1, r1, r0
 8018d16:	1850      	adds	r0, r2, r1
 8018d18:	6011      	str	r1, [r2, #0]
 8018d1a:	4283      	cmp	r3, r0
 8018d1c:	d1e0      	bne.n	8018ce0 <_free_r+0x24>
 8018d1e:	6818      	ldr	r0, [r3, #0]
 8018d20:	685b      	ldr	r3, [r3, #4]
 8018d22:	1841      	adds	r1, r0, r1
 8018d24:	6011      	str	r1, [r2, #0]
 8018d26:	6053      	str	r3, [r2, #4]
 8018d28:	e7da      	b.n	8018ce0 <_free_r+0x24>
 8018d2a:	42a0      	cmp	r0, r4
 8018d2c:	d902      	bls.n	8018d34 <_free_r+0x78>
 8018d2e:	230c      	movs	r3, #12
 8018d30:	602b      	str	r3, [r5, #0]
 8018d32:	e7d5      	b.n	8018ce0 <_free_r+0x24>
 8018d34:	6820      	ldr	r0, [r4, #0]
 8018d36:	1821      	adds	r1, r4, r0
 8018d38:	428b      	cmp	r3, r1
 8018d3a:	d103      	bne.n	8018d44 <_free_r+0x88>
 8018d3c:	6819      	ldr	r1, [r3, #0]
 8018d3e:	685b      	ldr	r3, [r3, #4]
 8018d40:	1809      	adds	r1, r1, r0
 8018d42:	6021      	str	r1, [r4, #0]
 8018d44:	6063      	str	r3, [r4, #4]
 8018d46:	6054      	str	r4, [r2, #4]
 8018d48:	e7ca      	b.n	8018ce0 <_free_r+0x24>
 8018d4a:	46c0      	nop			@ (mov r8, r8)
 8018d4c:	20003f10 	.word	0x20003f10

08018d50 <malloc>:
 8018d50:	b510      	push	{r4, lr}
 8018d52:	4b03      	ldr	r3, [pc, #12]	@ (8018d60 <malloc+0x10>)
 8018d54:	0001      	movs	r1, r0
 8018d56:	6818      	ldr	r0, [r3, #0]
 8018d58:	f000 f826 	bl	8018da8 <_malloc_r>
 8018d5c:	bd10      	pop	{r4, pc}
 8018d5e:	46c0      	nop			@ (mov r8, r8)
 8018d60:	2000022c 	.word	0x2000022c

08018d64 <sbrk_aligned>:
 8018d64:	b570      	push	{r4, r5, r6, lr}
 8018d66:	4e0f      	ldr	r6, [pc, #60]	@ (8018da4 <sbrk_aligned+0x40>)
 8018d68:	000d      	movs	r5, r1
 8018d6a:	6831      	ldr	r1, [r6, #0]
 8018d6c:	0004      	movs	r4, r0
 8018d6e:	2900      	cmp	r1, #0
 8018d70:	d102      	bne.n	8018d78 <sbrk_aligned+0x14>
 8018d72:	f001 f855 	bl	8019e20 <_sbrk_r>
 8018d76:	6030      	str	r0, [r6, #0]
 8018d78:	0029      	movs	r1, r5
 8018d7a:	0020      	movs	r0, r4
 8018d7c:	f001 f850 	bl	8019e20 <_sbrk_r>
 8018d80:	1c43      	adds	r3, r0, #1
 8018d82:	d103      	bne.n	8018d8c <sbrk_aligned+0x28>
 8018d84:	2501      	movs	r5, #1
 8018d86:	426d      	negs	r5, r5
 8018d88:	0028      	movs	r0, r5
 8018d8a:	bd70      	pop	{r4, r5, r6, pc}
 8018d8c:	2303      	movs	r3, #3
 8018d8e:	1cc5      	adds	r5, r0, #3
 8018d90:	439d      	bics	r5, r3
 8018d92:	42a8      	cmp	r0, r5
 8018d94:	d0f8      	beq.n	8018d88 <sbrk_aligned+0x24>
 8018d96:	1a29      	subs	r1, r5, r0
 8018d98:	0020      	movs	r0, r4
 8018d9a:	f001 f841 	bl	8019e20 <_sbrk_r>
 8018d9e:	3001      	adds	r0, #1
 8018da0:	d1f2      	bne.n	8018d88 <sbrk_aligned+0x24>
 8018da2:	e7ef      	b.n	8018d84 <sbrk_aligned+0x20>
 8018da4:	20003f0c 	.word	0x20003f0c

08018da8 <_malloc_r>:
 8018da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018daa:	2203      	movs	r2, #3
 8018dac:	1ccb      	adds	r3, r1, #3
 8018dae:	4393      	bics	r3, r2
 8018db0:	3308      	adds	r3, #8
 8018db2:	0005      	movs	r5, r0
 8018db4:	001f      	movs	r7, r3
 8018db6:	2b0c      	cmp	r3, #12
 8018db8:	d234      	bcs.n	8018e24 <_malloc_r+0x7c>
 8018dba:	270c      	movs	r7, #12
 8018dbc:	42b9      	cmp	r1, r7
 8018dbe:	d833      	bhi.n	8018e28 <_malloc_r+0x80>
 8018dc0:	0028      	movs	r0, r5
 8018dc2:	f000 f871 	bl	8018ea8 <__malloc_lock>
 8018dc6:	4e37      	ldr	r6, [pc, #220]	@ (8018ea4 <_malloc_r+0xfc>)
 8018dc8:	6833      	ldr	r3, [r6, #0]
 8018dca:	001c      	movs	r4, r3
 8018dcc:	2c00      	cmp	r4, #0
 8018dce:	d12f      	bne.n	8018e30 <_malloc_r+0x88>
 8018dd0:	0039      	movs	r1, r7
 8018dd2:	0028      	movs	r0, r5
 8018dd4:	f7ff ffc6 	bl	8018d64 <sbrk_aligned>
 8018dd8:	0004      	movs	r4, r0
 8018dda:	1c43      	adds	r3, r0, #1
 8018ddc:	d15f      	bne.n	8018e9e <_malloc_r+0xf6>
 8018dde:	6834      	ldr	r4, [r6, #0]
 8018de0:	9400      	str	r4, [sp, #0]
 8018de2:	9b00      	ldr	r3, [sp, #0]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d14a      	bne.n	8018e7e <_malloc_r+0xd6>
 8018de8:	2c00      	cmp	r4, #0
 8018dea:	d052      	beq.n	8018e92 <_malloc_r+0xea>
 8018dec:	6823      	ldr	r3, [r4, #0]
 8018dee:	0028      	movs	r0, r5
 8018df0:	18e3      	adds	r3, r4, r3
 8018df2:	9900      	ldr	r1, [sp, #0]
 8018df4:	9301      	str	r3, [sp, #4]
 8018df6:	f001 f813 	bl	8019e20 <_sbrk_r>
 8018dfa:	9b01      	ldr	r3, [sp, #4]
 8018dfc:	4283      	cmp	r3, r0
 8018dfe:	d148      	bne.n	8018e92 <_malloc_r+0xea>
 8018e00:	6823      	ldr	r3, [r4, #0]
 8018e02:	0028      	movs	r0, r5
 8018e04:	1aff      	subs	r7, r7, r3
 8018e06:	0039      	movs	r1, r7
 8018e08:	f7ff ffac 	bl	8018d64 <sbrk_aligned>
 8018e0c:	3001      	adds	r0, #1
 8018e0e:	d040      	beq.n	8018e92 <_malloc_r+0xea>
 8018e10:	6823      	ldr	r3, [r4, #0]
 8018e12:	19db      	adds	r3, r3, r7
 8018e14:	6023      	str	r3, [r4, #0]
 8018e16:	6833      	ldr	r3, [r6, #0]
 8018e18:	685a      	ldr	r2, [r3, #4]
 8018e1a:	2a00      	cmp	r2, #0
 8018e1c:	d133      	bne.n	8018e86 <_malloc_r+0xde>
 8018e1e:	9b00      	ldr	r3, [sp, #0]
 8018e20:	6033      	str	r3, [r6, #0]
 8018e22:	e019      	b.n	8018e58 <_malloc_r+0xb0>
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	dac9      	bge.n	8018dbc <_malloc_r+0x14>
 8018e28:	230c      	movs	r3, #12
 8018e2a:	602b      	str	r3, [r5, #0]
 8018e2c:	2000      	movs	r0, #0
 8018e2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018e30:	6821      	ldr	r1, [r4, #0]
 8018e32:	1bc9      	subs	r1, r1, r7
 8018e34:	d420      	bmi.n	8018e78 <_malloc_r+0xd0>
 8018e36:	290b      	cmp	r1, #11
 8018e38:	d90a      	bls.n	8018e50 <_malloc_r+0xa8>
 8018e3a:	19e2      	adds	r2, r4, r7
 8018e3c:	6027      	str	r7, [r4, #0]
 8018e3e:	42a3      	cmp	r3, r4
 8018e40:	d104      	bne.n	8018e4c <_malloc_r+0xa4>
 8018e42:	6032      	str	r2, [r6, #0]
 8018e44:	6863      	ldr	r3, [r4, #4]
 8018e46:	6011      	str	r1, [r2, #0]
 8018e48:	6053      	str	r3, [r2, #4]
 8018e4a:	e005      	b.n	8018e58 <_malloc_r+0xb0>
 8018e4c:	605a      	str	r2, [r3, #4]
 8018e4e:	e7f9      	b.n	8018e44 <_malloc_r+0x9c>
 8018e50:	6862      	ldr	r2, [r4, #4]
 8018e52:	42a3      	cmp	r3, r4
 8018e54:	d10e      	bne.n	8018e74 <_malloc_r+0xcc>
 8018e56:	6032      	str	r2, [r6, #0]
 8018e58:	0028      	movs	r0, r5
 8018e5a:	f000 f82d 	bl	8018eb8 <__malloc_unlock>
 8018e5e:	0020      	movs	r0, r4
 8018e60:	2207      	movs	r2, #7
 8018e62:	300b      	adds	r0, #11
 8018e64:	1d23      	adds	r3, r4, #4
 8018e66:	4390      	bics	r0, r2
 8018e68:	1ac2      	subs	r2, r0, r3
 8018e6a:	4298      	cmp	r0, r3
 8018e6c:	d0df      	beq.n	8018e2e <_malloc_r+0x86>
 8018e6e:	1a1b      	subs	r3, r3, r0
 8018e70:	50a3      	str	r3, [r4, r2]
 8018e72:	e7dc      	b.n	8018e2e <_malloc_r+0x86>
 8018e74:	605a      	str	r2, [r3, #4]
 8018e76:	e7ef      	b.n	8018e58 <_malloc_r+0xb0>
 8018e78:	0023      	movs	r3, r4
 8018e7a:	6864      	ldr	r4, [r4, #4]
 8018e7c:	e7a6      	b.n	8018dcc <_malloc_r+0x24>
 8018e7e:	9c00      	ldr	r4, [sp, #0]
 8018e80:	6863      	ldr	r3, [r4, #4]
 8018e82:	9300      	str	r3, [sp, #0]
 8018e84:	e7ad      	b.n	8018de2 <_malloc_r+0x3a>
 8018e86:	001a      	movs	r2, r3
 8018e88:	685b      	ldr	r3, [r3, #4]
 8018e8a:	42a3      	cmp	r3, r4
 8018e8c:	d1fb      	bne.n	8018e86 <_malloc_r+0xde>
 8018e8e:	2300      	movs	r3, #0
 8018e90:	e7da      	b.n	8018e48 <_malloc_r+0xa0>
 8018e92:	230c      	movs	r3, #12
 8018e94:	0028      	movs	r0, r5
 8018e96:	602b      	str	r3, [r5, #0]
 8018e98:	f000 f80e 	bl	8018eb8 <__malloc_unlock>
 8018e9c:	e7c6      	b.n	8018e2c <_malloc_r+0x84>
 8018e9e:	6007      	str	r7, [r0, #0]
 8018ea0:	e7da      	b.n	8018e58 <_malloc_r+0xb0>
 8018ea2:	46c0      	nop			@ (mov r8, r8)
 8018ea4:	20003f10 	.word	0x20003f10

08018ea8 <__malloc_lock>:
 8018ea8:	b510      	push	{r4, lr}
 8018eaa:	4802      	ldr	r0, [pc, #8]	@ (8018eb4 <__malloc_lock+0xc>)
 8018eac:	f7ff f86d 	bl	8017f8a <__retarget_lock_acquire_recursive>
 8018eb0:	bd10      	pop	{r4, pc}
 8018eb2:	46c0      	nop			@ (mov r8, r8)
 8018eb4:	20003f08 	.word	0x20003f08

08018eb8 <__malloc_unlock>:
 8018eb8:	b510      	push	{r4, lr}
 8018eba:	4802      	ldr	r0, [pc, #8]	@ (8018ec4 <__malloc_unlock+0xc>)
 8018ebc:	f7ff f866 	bl	8017f8c <__retarget_lock_release_recursive>
 8018ec0:	bd10      	pop	{r4, pc}
 8018ec2:	46c0      	nop			@ (mov r8, r8)
 8018ec4:	20003f08 	.word	0x20003f08

08018ec8 <_Balloc>:
 8018ec8:	b570      	push	{r4, r5, r6, lr}
 8018eca:	69c5      	ldr	r5, [r0, #28]
 8018ecc:	0006      	movs	r6, r0
 8018ece:	000c      	movs	r4, r1
 8018ed0:	2d00      	cmp	r5, #0
 8018ed2:	d10e      	bne.n	8018ef2 <_Balloc+0x2a>
 8018ed4:	2010      	movs	r0, #16
 8018ed6:	f7ff ff3b 	bl	8018d50 <malloc>
 8018eda:	1e02      	subs	r2, r0, #0
 8018edc:	61f0      	str	r0, [r6, #28]
 8018ede:	d104      	bne.n	8018eea <_Balloc+0x22>
 8018ee0:	216b      	movs	r1, #107	@ 0x6b
 8018ee2:	4b19      	ldr	r3, [pc, #100]	@ (8018f48 <_Balloc+0x80>)
 8018ee4:	4819      	ldr	r0, [pc, #100]	@ (8018f4c <_Balloc+0x84>)
 8018ee6:	f000 ffad 	bl	8019e44 <__assert_func>
 8018eea:	6045      	str	r5, [r0, #4]
 8018eec:	6085      	str	r5, [r0, #8]
 8018eee:	6005      	str	r5, [r0, #0]
 8018ef0:	60c5      	str	r5, [r0, #12]
 8018ef2:	69f5      	ldr	r5, [r6, #28]
 8018ef4:	68eb      	ldr	r3, [r5, #12]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d013      	beq.n	8018f22 <_Balloc+0x5a>
 8018efa:	69f3      	ldr	r3, [r6, #28]
 8018efc:	00a2      	lsls	r2, r4, #2
 8018efe:	68db      	ldr	r3, [r3, #12]
 8018f00:	189b      	adds	r3, r3, r2
 8018f02:	6818      	ldr	r0, [r3, #0]
 8018f04:	2800      	cmp	r0, #0
 8018f06:	d118      	bne.n	8018f3a <_Balloc+0x72>
 8018f08:	2101      	movs	r1, #1
 8018f0a:	000d      	movs	r5, r1
 8018f0c:	40a5      	lsls	r5, r4
 8018f0e:	1d6a      	adds	r2, r5, #5
 8018f10:	0030      	movs	r0, r6
 8018f12:	0092      	lsls	r2, r2, #2
 8018f14:	f000 ffb4 	bl	8019e80 <_calloc_r>
 8018f18:	2800      	cmp	r0, #0
 8018f1a:	d00c      	beq.n	8018f36 <_Balloc+0x6e>
 8018f1c:	6044      	str	r4, [r0, #4]
 8018f1e:	6085      	str	r5, [r0, #8]
 8018f20:	e00d      	b.n	8018f3e <_Balloc+0x76>
 8018f22:	2221      	movs	r2, #33	@ 0x21
 8018f24:	2104      	movs	r1, #4
 8018f26:	0030      	movs	r0, r6
 8018f28:	f000 ffaa 	bl	8019e80 <_calloc_r>
 8018f2c:	69f3      	ldr	r3, [r6, #28]
 8018f2e:	60e8      	str	r0, [r5, #12]
 8018f30:	68db      	ldr	r3, [r3, #12]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d1e1      	bne.n	8018efa <_Balloc+0x32>
 8018f36:	2000      	movs	r0, #0
 8018f38:	bd70      	pop	{r4, r5, r6, pc}
 8018f3a:	6802      	ldr	r2, [r0, #0]
 8018f3c:	601a      	str	r2, [r3, #0]
 8018f3e:	2300      	movs	r3, #0
 8018f40:	6103      	str	r3, [r0, #16]
 8018f42:	60c3      	str	r3, [r0, #12]
 8018f44:	e7f8      	b.n	8018f38 <_Balloc+0x70>
 8018f46:	46c0      	nop			@ (mov r8, r8)
 8018f48:	0801bb0d 	.word	0x0801bb0d
 8018f4c:	0801bb8d 	.word	0x0801bb8d

08018f50 <_Bfree>:
 8018f50:	b570      	push	{r4, r5, r6, lr}
 8018f52:	69c6      	ldr	r6, [r0, #28]
 8018f54:	0005      	movs	r5, r0
 8018f56:	000c      	movs	r4, r1
 8018f58:	2e00      	cmp	r6, #0
 8018f5a:	d10e      	bne.n	8018f7a <_Bfree+0x2a>
 8018f5c:	2010      	movs	r0, #16
 8018f5e:	f7ff fef7 	bl	8018d50 <malloc>
 8018f62:	1e02      	subs	r2, r0, #0
 8018f64:	61e8      	str	r0, [r5, #28]
 8018f66:	d104      	bne.n	8018f72 <_Bfree+0x22>
 8018f68:	218f      	movs	r1, #143	@ 0x8f
 8018f6a:	4b09      	ldr	r3, [pc, #36]	@ (8018f90 <_Bfree+0x40>)
 8018f6c:	4809      	ldr	r0, [pc, #36]	@ (8018f94 <_Bfree+0x44>)
 8018f6e:	f000 ff69 	bl	8019e44 <__assert_func>
 8018f72:	6046      	str	r6, [r0, #4]
 8018f74:	6086      	str	r6, [r0, #8]
 8018f76:	6006      	str	r6, [r0, #0]
 8018f78:	60c6      	str	r6, [r0, #12]
 8018f7a:	2c00      	cmp	r4, #0
 8018f7c:	d007      	beq.n	8018f8e <_Bfree+0x3e>
 8018f7e:	69eb      	ldr	r3, [r5, #28]
 8018f80:	6862      	ldr	r2, [r4, #4]
 8018f82:	68db      	ldr	r3, [r3, #12]
 8018f84:	0092      	lsls	r2, r2, #2
 8018f86:	189b      	adds	r3, r3, r2
 8018f88:	681a      	ldr	r2, [r3, #0]
 8018f8a:	6022      	str	r2, [r4, #0]
 8018f8c:	601c      	str	r4, [r3, #0]
 8018f8e:	bd70      	pop	{r4, r5, r6, pc}
 8018f90:	0801bb0d 	.word	0x0801bb0d
 8018f94:	0801bb8d 	.word	0x0801bb8d

08018f98 <__multadd>:
 8018f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f9a:	000f      	movs	r7, r1
 8018f9c:	9001      	str	r0, [sp, #4]
 8018f9e:	000c      	movs	r4, r1
 8018fa0:	001e      	movs	r6, r3
 8018fa2:	2000      	movs	r0, #0
 8018fa4:	690d      	ldr	r5, [r1, #16]
 8018fa6:	3714      	adds	r7, #20
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	3001      	adds	r0, #1
 8018fac:	b299      	uxth	r1, r3
 8018fae:	4351      	muls	r1, r2
 8018fb0:	0c1b      	lsrs	r3, r3, #16
 8018fb2:	4353      	muls	r3, r2
 8018fb4:	1989      	adds	r1, r1, r6
 8018fb6:	0c0e      	lsrs	r6, r1, #16
 8018fb8:	199b      	adds	r3, r3, r6
 8018fba:	0c1e      	lsrs	r6, r3, #16
 8018fbc:	b289      	uxth	r1, r1
 8018fbe:	041b      	lsls	r3, r3, #16
 8018fc0:	185b      	adds	r3, r3, r1
 8018fc2:	c708      	stmia	r7!, {r3}
 8018fc4:	4285      	cmp	r5, r0
 8018fc6:	dcef      	bgt.n	8018fa8 <__multadd+0x10>
 8018fc8:	2e00      	cmp	r6, #0
 8018fca:	d022      	beq.n	8019012 <__multadd+0x7a>
 8018fcc:	68a3      	ldr	r3, [r4, #8]
 8018fce:	42ab      	cmp	r3, r5
 8018fd0:	dc19      	bgt.n	8019006 <__multadd+0x6e>
 8018fd2:	6861      	ldr	r1, [r4, #4]
 8018fd4:	9801      	ldr	r0, [sp, #4]
 8018fd6:	3101      	adds	r1, #1
 8018fd8:	f7ff ff76 	bl	8018ec8 <_Balloc>
 8018fdc:	1e07      	subs	r7, r0, #0
 8018fde:	d105      	bne.n	8018fec <__multadd+0x54>
 8018fe0:	003a      	movs	r2, r7
 8018fe2:	21ba      	movs	r1, #186	@ 0xba
 8018fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8019018 <__multadd+0x80>)
 8018fe6:	480d      	ldr	r0, [pc, #52]	@ (801901c <__multadd+0x84>)
 8018fe8:	f000 ff2c 	bl	8019e44 <__assert_func>
 8018fec:	0021      	movs	r1, r4
 8018fee:	6922      	ldr	r2, [r4, #16]
 8018ff0:	310c      	adds	r1, #12
 8018ff2:	3202      	adds	r2, #2
 8018ff4:	0092      	lsls	r2, r2, #2
 8018ff6:	300c      	adds	r0, #12
 8018ff8:	f7fe ffd4 	bl	8017fa4 <memcpy>
 8018ffc:	0021      	movs	r1, r4
 8018ffe:	9801      	ldr	r0, [sp, #4]
 8019000:	f7ff ffa6 	bl	8018f50 <_Bfree>
 8019004:	003c      	movs	r4, r7
 8019006:	1d2b      	adds	r3, r5, #4
 8019008:	009b      	lsls	r3, r3, #2
 801900a:	18e3      	adds	r3, r4, r3
 801900c:	3501      	adds	r5, #1
 801900e:	605e      	str	r6, [r3, #4]
 8019010:	6125      	str	r5, [r4, #16]
 8019012:	0020      	movs	r0, r4
 8019014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019016:	46c0      	nop			@ (mov r8, r8)
 8019018:	0801bb7c 	.word	0x0801bb7c
 801901c:	0801bb8d 	.word	0x0801bb8d

08019020 <__hi0bits>:
 8019020:	2280      	movs	r2, #128	@ 0x80
 8019022:	0003      	movs	r3, r0
 8019024:	0252      	lsls	r2, r2, #9
 8019026:	2000      	movs	r0, #0
 8019028:	4293      	cmp	r3, r2
 801902a:	d201      	bcs.n	8019030 <__hi0bits+0x10>
 801902c:	041b      	lsls	r3, r3, #16
 801902e:	3010      	adds	r0, #16
 8019030:	2280      	movs	r2, #128	@ 0x80
 8019032:	0452      	lsls	r2, r2, #17
 8019034:	4293      	cmp	r3, r2
 8019036:	d201      	bcs.n	801903c <__hi0bits+0x1c>
 8019038:	3008      	adds	r0, #8
 801903a:	021b      	lsls	r3, r3, #8
 801903c:	2280      	movs	r2, #128	@ 0x80
 801903e:	0552      	lsls	r2, r2, #21
 8019040:	4293      	cmp	r3, r2
 8019042:	d201      	bcs.n	8019048 <__hi0bits+0x28>
 8019044:	3004      	adds	r0, #4
 8019046:	011b      	lsls	r3, r3, #4
 8019048:	2280      	movs	r2, #128	@ 0x80
 801904a:	05d2      	lsls	r2, r2, #23
 801904c:	4293      	cmp	r3, r2
 801904e:	d201      	bcs.n	8019054 <__hi0bits+0x34>
 8019050:	3002      	adds	r0, #2
 8019052:	009b      	lsls	r3, r3, #2
 8019054:	2b00      	cmp	r3, #0
 8019056:	db03      	blt.n	8019060 <__hi0bits+0x40>
 8019058:	3001      	adds	r0, #1
 801905a:	4213      	tst	r3, r2
 801905c:	d100      	bne.n	8019060 <__hi0bits+0x40>
 801905e:	2020      	movs	r0, #32
 8019060:	4770      	bx	lr

08019062 <__lo0bits>:
 8019062:	6803      	ldr	r3, [r0, #0]
 8019064:	0001      	movs	r1, r0
 8019066:	2207      	movs	r2, #7
 8019068:	0018      	movs	r0, r3
 801906a:	4010      	ands	r0, r2
 801906c:	4213      	tst	r3, r2
 801906e:	d00d      	beq.n	801908c <__lo0bits+0x2a>
 8019070:	3a06      	subs	r2, #6
 8019072:	2000      	movs	r0, #0
 8019074:	4213      	tst	r3, r2
 8019076:	d105      	bne.n	8019084 <__lo0bits+0x22>
 8019078:	3002      	adds	r0, #2
 801907a:	4203      	tst	r3, r0
 801907c:	d003      	beq.n	8019086 <__lo0bits+0x24>
 801907e:	40d3      	lsrs	r3, r2
 8019080:	0010      	movs	r0, r2
 8019082:	600b      	str	r3, [r1, #0]
 8019084:	4770      	bx	lr
 8019086:	089b      	lsrs	r3, r3, #2
 8019088:	600b      	str	r3, [r1, #0]
 801908a:	e7fb      	b.n	8019084 <__lo0bits+0x22>
 801908c:	b29a      	uxth	r2, r3
 801908e:	2a00      	cmp	r2, #0
 8019090:	d101      	bne.n	8019096 <__lo0bits+0x34>
 8019092:	2010      	movs	r0, #16
 8019094:	0c1b      	lsrs	r3, r3, #16
 8019096:	b2da      	uxtb	r2, r3
 8019098:	2a00      	cmp	r2, #0
 801909a:	d101      	bne.n	80190a0 <__lo0bits+0x3e>
 801909c:	3008      	adds	r0, #8
 801909e:	0a1b      	lsrs	r3, r3, #8
 80190a0:	071a      	lsls	r2, r3, #28
 80190a2:	d101      	bne.n	80190a8 <__lo0bits+0x46>
 80190a4:	3004      	adds	r0, #4
 80190a6:	091b      	lsrs	r3, r3, #4
 80190a8:	079a      	lsls	r2, r3, #30
 80190aa:	d101      	bne.n	80190b0 <__lo0bits+0x4e>
 80190ac:	3002      	adds	r0, #2
 80190ae:	089b      	lsrs	r3, r3, #2
 80190b0:	07da      	lsls	r2, r3, #31
 80190b2:	d4e9      	bmi.n	8019088 <__lo0bits+0x26>
 80190b4:	3001      	adds	r0, #1
 80190b6:	085b      	lsrs	r3, r3, #1
 80190b8:	d1e6      	bne.n	8019088 <__lo0bits+0x26>
 80190ba:	2020      	movs	r0, #32
 80190bc:	e7e2      	b.n	8019084 <__lo0bits+0x22>
	...

080190c0 <__i2b>:
 80190c0:	b510      	push	{r4, lr}
 80190c2:	000c      	movs	r4, r1
 80190c4:	2101      	movs	r1, #1
 80190c6:	f7ff feff 	bl	8018ec8 <_Balloc>
 80190ca:	2800      	cmp	r0, #0
 80190cc:	d107      	bne.n	80190de <__i2b+0x1e>
 80190ce:	2146      	movs	r1, #70	@ 0x46
 80190d0:	4c05      	ldr	r4, [pc, #20]	@ (80190e8 <__i2b+0x28>)
 80190d2:	0002      	movs	r2, r0
 80190d4:	4b05      	ldr	r3, [pc, #20]	@ (80190ec <__i2b+0x2c>)
 80190d6:	0020      	movs	r0, r4
 80190d8:	31ff      	adds	r1, #255	@ 0xff
 80190da:	f000 feb3 	bl	8019e44 <__assert_func>
 80190de:	2301      	movs	r3, #1
 80190e0:	6144      	str	r4, [r0, #20]
 80190e2:	6103      	str	r3, [r0, #16]
 80190e4:	bd10      	pop	{r4, pc}
 80190e6:	46c0      	nop			@ (mov r8, r8)
 80190e8:	0801bb8d 	.word	0x0801bb8d
 80190ec:	0801bb7c 	.word	0x0801bb7c

080190f0 <__multiply>:
 80190f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190f2:	0014      	movs	r4, r2
 80190f4:	690a      	ldr	r2, [r1, #16]
 80190f6:	6923      	ldr	r3, [r4, #16]
 80190f8:	000d      	movs	r5, r1
 80190fa:	b08b      	sub	sp, #44	@ 0x2c
 80190fc:	429a      	cmp	r2, r3
 80190fe:	db02      	blt.n	8019106 <__multiply+0x16>
 8019100:	0023      	movs	r3, r4
 8019102:	000c      	movs	r4, r1
 8019104:	001d      	movs	r5, r3
 8019106:	6927      	ldr	r7, [r4, #16]
 8019108:	692e      	ldr	r6, [r5, #16]
 801910a:	6861      	ldr	r1, [r4, #4]
 801910c:	19bb      	adds	r3, r7, r6
 801910e:	9303      	str	r3, [sp, #12]
 8019110:	68a3      	ldr	r3, [r4, #8]
 8019112:	19ba      	adds	r2, r7, r6
 8019114:	4293      	cmp	r3, r2
 8019116:	da00      	bge.n	801911a <__multiply+0x2a>
 8019118:	3101      	adds	r1, #1
 801911a:	f7ff fed5 	bl	8018ec8 <_Balloc>
 801911e:	9002      	str	r0, [sp, #8]
 8019120:	2800      	cmp	r0, #0
 8019122:	d106      	bne.n	8019132 <__multiply+0x42>
 8019124:	21b1      	movs	r1, #177	@ 0xb1
 8019126:	4b49      	ldr	r3, [pc, #292]	@ (801924c <__multiply+0x15c>)
 8019128:	4849      	ldr	r0, [pc, #292]	@ (8019250 <__multiply+0x160>)
 801912a:	9a02      	ldr	r2, [sp, #8]
 801912c:	0049      	lsls	r1, r1, #1
 801912e:	f000 fe89 	bl	8019e44 <__assert_func>
 8019132:	9b02      	ldr	r3, [sp, #8]
 8019134:	2200      	movs	r2, #0
 8019136:	3314      	adds	r3, #20
 8019138:	469c      	mov	ip, r3
 801913a:	19bb      	adds	r3, r7, r6
 801913c:	009b      	lsls	r3, r3, #2
 801913e:	4463      	add	r3, ip
 8019140:	9304      	str	r3, [sp, #16]
 8019142:	4663      	mov	r3, ip
 8019144:	9904      	ldr	r1, [sp, #16]
 8019146:	428b      	cmp	r3, r1
 8019148:	d32a      	bcc.n	80191a0 <__multiply+0xb0>
 801914a:	0023      	movs	r3, r4
 801914c:	00bf      	lsls	r7, r7, #2
 801914e:	3314      	adds	r3, #20
 8019150:	3514      	adds	r5, #20
 8019152:	9308      	str	r3, [sp, #32]
 8019154:	00b6      	lsls	r6, r6, #2
 8019156:	19db      	adds	r3, r3, r7
 8019158:	9305      	str	r3, [sp, #20]
 801915a:	19ab      	adds	r3, r5, r6
 801915c:	9309      	str	r3, [sp, #36]	@ 0x24
 801915e:	2304      	movs	r3, #4
 8019160:	9306      	str	r3, [sp, #24]
 8019162:	0023      	movs	r3, r4
 8019164:	9a05      	ldr	r2, [sp, #20]
 8019166:	3315      	adds	r3, #21
 8019168:	9501      	str	r5, [sp, #4]
 801916a:	429a      	cmp	r2, r3
 801916c:	d305      	bcc.n	801917a <__multiply+0x8a>
 801916e:	1b13      	subs	r3, r2, r4
 8019170:	3b15      	subs	r3, #21
 8019172:	089b      	lsrs	r3, r3, #2
 8019174:	3301      	adds	r3, #1
 8019176:	009b      	lsls	r3, r3, #2
 8019178:	9306      	str	r3, [sp, #24]
 801917a:	9b01      	ldr	r3, [sp, #4]
 801917c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801917e:	4293      	cmp	r3, r2
 8019180:	d310      	bcc.n	80191a4 <__multiply+0xb4>
 8019182:	9b03      	ldr	r3, [sp, #12]
 8019184:	2b00      	cmp	r3, #0
 8019186:	dd05      	ble.n	8019194 <__multiply+0xa4>
 8019188:	9b04      	ldr	r3, [sp, #16]
 801918a:	3b04      	subs	r3, #4
 801918c:	9304      	str	r3, [sp, #16]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d056      	beq.n	8019242 <__multiply+0x152>
 8019194:	9b02      	ldr	r3, [sp, #8]
 8019196:	9a03      	ldr	r2, [sp, #12]
 8019198:	0018      	movs	r0, r3
 801919a:	611a      	str	r2, [r3, #16]
 801919c:	b00b      	add	sp, #44	@ 0x2c
 801919e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191a0:	c304      	stmia	r3!, {r2}
 80191a2:	e7cf      	b.n	8019144 <__multiply+0x54>
 80191a4:	9b01      	ldr	r3, [sp, #4]
 80191a6:	6818      	ldr	r0, [r3, #0]
 80191a8:	b280      	uxth	r0, r0
 80191aa:	2800      	cmp	r0, #0
 80191ac:	d01e      	beq.n	80191ec <__multiply+0xfc>
 80191ae:	4667      	mov	r7, ip
 80191b0:	2500      	movs	r5, #0
 80191b2:	9e08      	ldr	r6, [sp, #32]
 80191b4:	ce02      	ldmia	r6!, {r1}
 80191b6:	683b      	ldr	r3, [r7, #0]
 80191b8:	9307      	str	r3, [sp, #28]
 80191ba:	b28b      	uxth	r3, r1
 80191bc:	4343      	muls	r3, r0
 80191be:	001a      	movs	r2, r3
 80191c0:	466b      	mov	r3, sp
 80191c2:	0c09      	lsrs	r1, r1, #16
 80191c4:	8b9b      	ldrh	r3, [r3, #28]
 80191c6:	4341      	muls	r1, r0
 80191c8:	18d3      	adds	r3, r2, r3
 80191ca:	9a07      	ldr	r2, [sp, #28]
 80191cc:	195b      	adds	r3, r3, r5
 80191ce:	0c12      	lsrs	r2, r2, #16
 80191d0:	1889      	adds	r1, r1, r2
 80191d2:	0c1a      	lsrs	r2, r3, #16
 80191d4:	188a      	adds	r2, r1, r2
 80191d6:	b29b      	uxth	r3, r3
 80191d8:	0c15      	lsrs	r5, r2, #16
 80191da:	0412      	lsls	r2, r2, #16
 80191dc:	431a      	orrs	r2, r3
 80191de:	9b05      	ldr	r3, [sp, #20]
 80191e0:	c704      	stmia	r7!, {r2}
 80191e2:	42b3      	cmp	r3, r6
 80191e4:	d8e6      	bhi.n	80191b4 <__multiply+0xc4>
 80191e6:	4663      	mov	r3, ip
 80191e8:	9a06      	ldr	r2, [sp, #24]
 80191ea:	509d      	str	r5, [r3, r2]
 80191ec:	9b01      	ldr	r3, [sp, #4]
 80191ee:	6818      	ldr	r0, [r3, #0]
 80191f0:	0c00      	lsrs	r0, r0, #16
 80191f2:	d020      	beq.n	8019236 <__multiply+0x146>
 80191f4:	4663      	mov	r3, ip
 80191f6:	0025      	movs	r5, r4
 80191f8:	4661      	mov	r1, ip
 80191fa:	2700      	movs	r7, #0
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	3514      	adds	r5, #20
 8019200:	682a      	ldr	r2, [r5, #0]
 8019202:	680e      	ldr	r6, [r1, #0]
 8019204:	b292      	uxth	r2, r2
 8019206:	4342      	muls	r2, r0
 8019208:	0c36      	lsrs	r6, r6, #16
 801920a:	1992      	adds	r2, r2, r6
 801920c:	19d2      	adds	r2, r2, r7
 801920e:	0416      	lsls	r6, r2, #16
 8019210:	b29b      	uxth	r3, r3
 8019212:	431e      	orrs	r6, r3
 8019214:	600e      	str	r6, [r1, #0]
 8019216:	cd40      	ldmia	r5!, {r6}
 8019218:	684b      	ldr	r3, [r1, #4]
 801921a:	0c36      	lsrs	r6, r6, #16
 801921c:	4346      	muls	r6, r0
 801921e:	b29b      	uxth	r3, r3
 8019220:	0c12      	lsrs	r2, r2, #16
 8019222:	18f3      	adds	r3, r6, r3
 8019224:	189b      	adds	r3, r3, r2
 8019226:	9a05      	ldr	r2, [sp, #20]
 8019228:	0c1f      	lsrs	r7, r3, #16
 801922a:	3104      	adds	r1, #4
 801922c:	42aa      	cmp	r2, r5
 801922e:	d8e7      	bhi.n	8019200 <__multiply+0x110>
 8019230:	4662      	mov	r2, ip
 8019232:	9906      	ldr	r1, [sp, #24]
 8019234:	5053      	str	r3, [r2, r1]
 8019236:	9b01      	ldr	r3, [sp, #4]
 8019238:	3304      	adds	r3, #4
 801923a:	9301      	str	r3, [sp, #4]
 801923c:	2304      	movs	r3, #4
 801923e:	449c      	add	ip, r3
 8019240:	e79b      	b.n	801917a <__multiply+0x8a>
 8019242:	9b03      	ldr	r3, [sp, #12]
 8019244:	3b01      	subs	r3, #1
 8019246:	9303      	str	r3, [sp, #12]
 8019248:	e79b      	b.n	8019182 <__multiply+0x92>
 801924a:	46c0      	nop			@ (mov r8, r8)
 801924c:	0801bb7c 	.word	0x0801bb7c
 8019250:	0801bb8d 	.word	0x0801bb8d

08019254 <__pow5mult>:
 8019254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019256:	2303      	movs	r3, #3
 8019258:	0015      	movs	r5, r2
 801925a:	0007      	movs	r7, r0
 801925c:	000e      	movs	r6, r1
 801925e:	401a      	ands	r2, r3
 8019260:	421d      	tst	r5, r3
 8019262:	d008      	beq.n	8019276 <__pow5mult+0x22>
 8019264:	4925      	ldr	r1, [pc, #148]	@ (80192fc <__pow5mult+0xa8>)
 8019266:	3a01      	subs	r2, #1
 8019268:	0092      	lsls	r2, r2, #2
 801926a:	5852      	ldr	r2, [r2, r1]
 801926c:	2300      	movs	r3, #0
 801926e:	0031      	movs	r1, r6
 8019270:	f7ff fe92 	bl	8018f98 <__multadd>
 8019274:	0006      	movs	r6, r0
 8019276:	10ad      	asrs	r5, r5, #2
 8019278:	d03d      	beq.n	80192f6 <__pow5mult+0xa2>
 801927a:	69fc      	ldr	r4, [r7, #28]
 801927c:	2c00      	cmp	r4, #0
 801927e:	d10f      	bne.n	80192a0 <__pow5mult+0x4c>
 8019280:	2010      	movs	r0, #16
 8019282:	f7ff fd65 	bl	8018d50 <malloc>
 8019286:	1e02      	subs	r2, r0, #0
 8019288:	61f8      	str	r0, [r7, #28]
 801928a:	d105      	bne.n	8019298 <__pow5mult+0x44>
 801928c:	21b4      	movs	r1, #180	@ 0xb4
 801928e:	4b1c      	ldr	r3, [pc, #112]	@ (8019300 <__pow5mult+0xac>)
 8019290:	481c      	ldr	r0, [pc, #112]	@ (8019304 <__pow5mult+0xb0>)
 8019292:	31ff      	adds	r1, #255	@ 0xff
 8019294:	f000 fdd6 	bl	8019e44 <__assert_func>
 8019298:	6044      	str	r4, [r0, #4]
 801929a:	6084      	str	r4, [r0, #8]
 801929c:	6004      	str	r4, [r0, #0]
 801929e:	60c4      	str	r4, [r0, #12]
 80192a0:	69fb      	ldr	r3, [r7, #28]
 80192a2:	689c      	ldr	r4, [r3, #8]
 80192a4:	9301      	str	r3, [sp, #4]
 80192a6:	2c00      	cmp	r4, #0
 80192a8:	d108      	bne.n	80192bc <__pow5mult+0x68>
 80192aa:	0038      	movs	r0, r7
 80192ac:	4916      	ldr	r1, [pc, #88]	@ (8019308 <__pow5mult+0xb4>)
 80192ae:	f7ff ff07 	bl	80190c0 <__i2b>
 80192b2:	9b01      	ldr	r3, [sp, #4]
 80192b4:	0004      	movs	r4, r0
 80192b6:	6098      	str	r0, [r3, #8]
 80192b8:	2300      	movs	r3, #0
 80192ba:	6003      	str	r3, [r0, #0]
 80192bc:	2301      	movs	r3, #1
 80192be:	421d      	tst	r5, r3
 80192c0:	d00a      	beq.n	80192d8 <__pow5mult+0x84>
 80192c2:	0031      	movs	r1, r6
 80192c4:	0022      	movs	r2, r4
 80192c6:	0038      	movs	r0, r7
 80192c8:	f7ff ff12 	bl	80190f0 <__multiply>
 80192cc:	0031      	movs	r1, r6
 80192ce:	9001      	str	r0, [sp, #4]
 80192d0:	0038      	movs	r0, r7
 80192d2:	f7ff fe3d 	bl	8018f50 <_Bfree>
 80192d6:	9e01      	ldr	r6, [sp, #4]
 80192d8:	106d      	asrs	r5, r5, #1
 80192da:	d00c      	beq.n	80192f6 <__pow5mult+0xa2>
 80192dc:	6820      	ldr	r0, [r4, #0]
 80192de:	2800      	cmp	r0, #0
 80192e0:	d107      	bne.n	80192f2 <__pow5mult+0x9e>
 80192e2:	0022      	movs	r2, r4
 80192e4:	0021      	movs	r1, r4
 80192e6:	0038      	movs	r0, r7
 80192e8:	f7ff ff02 	bl	80190f0 <__multiply>
 80192ec:	2300      	movs	r3, #0
 80192ee:	6020      	str	r0, [r4, #0]
 80192f0:	6003      	str	r3, [r0, #0]
 80192f2:	0004      	movs	r4, r0
 80192f4:	e7e2      	b.n	80192bc <__pow5mult+0x68>
 80192f6:	0030      	movs	r0, r6
 80192f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80192fa:	46c0      	nop			@ (mov r8, r8)
 80192fc:	0801bbe8 	.word	0x0801bbe8
 8019300:	0801bb0d 	.word	0x0801bb0d
 8019304:	0801bb8d 	.word	0x0801bb8d
 8019308:	00000271 	.word	0x00000271

0801930c <__lshift>:
 801930c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801930e:	000c      	movs	r4, r1
 8019310:	0016      	movs	r6, r2
 8019312:	6923      	ldr	r3, [r4, #16]
 8019314:	1157      	asrs	r7, r2, #5
 8019316:	b085      	sub	sp, #20
 8019318:	18fb      	adds	r3, r7, r3
 801931a:	9301      	str	r3, [sp, #4]
 801931c:	3301      	adds	r3, #1
 801931e:	9300      	str	r3, [sp, #0]
 8019320:	6849      	ldr	r1, [r1, #4]
 8019322:	68a3      	ldr	r3, [r4, #8]
 8019324:	9002      	str	r0, [sp, #8]
 8019326:	9a00      	ldr	r2, [sp, #0]
 8019328:	4293      	cmp	r3, r2
 801932a:	db10      	blt.n	801934e <__lshift+0x42>
 801932c:	9802      	ldr	r0, [sp, #8]
 801932e:	f7ff fdcb 	bl	8018ec8 <_Balloc>
 8019332:	2300      	movs	r3, #0
 8019334:	0001      	movs	r1, r0
 8019336:	0005      	movs	r5, r0
 8019338:	001a      	movs	r2, r3
 801933a:	3114      	adds	r1, #20
 801933c:	4298      	cmp	r0, r3
 801933e:	d10c      	bne.n	801935a <__lshift+0x4e>
 8019340:	21ef      	movs	r1, #239	@ 0xef
 8019342:	002a      	movs	r2, r5
 8019344:	4b25      	ldr	r3, [pc, #148]	@ (80193dc <__lshift+0xd0>)
 8019346:	4826      	ldr	r0, [pc, #152]	@ (80193e0 <__lshift+0xd4>)
 8019348:	0049      	lsls	r1, r1, #1
 801934a:	f000 fd7b 	bl	8019e44 <__assert_func>
 801934e:	3101      	adds	r1, #1
 8019350:	005b      	lsls	r3, r3, #1
 8019352:	e7e8      	b.n	8019326 <__lshift+0x1a>
 8019354:	0098      	lsls	r0, r3, #2
 8019356:	500a      	str	r2, [r1, r0]
 8019358:	3301      	adds	r3, #1
 801935a:	42bb      	cmp	r3, r7
 801935c:	dbfa      	blt.n	8019354 <__lshift+0x48>
 801935e:	43fb      	mvns	r3, r7
 8019360:	17db      	asrs	r3, r3, #31
 8019362:	401f      	ands	r7, r3
 8019364:	00bf      	lsls	r7, r7, #2
 8019366:	0023      	movs	r3, r4
 8019368:	201f      	movs	r0, #31
 801936a:	19c9      	adds	r1, r1, r7
 801936c:	0037      	movs	r7, r6
 801936e:	6922      	ldr	r2, [r4, #16]
 8019370:	3314      	adds	r3, #20
 8019372:	0092      	lsls	r2, r2, #2
 8019374:	189a      	adds	r2, r3, r2
 8019376:	4007      	ands	r7, r0
 8019378:	4206      	tst	r6, r0
 801937a:	d029      	beq.n	80193d0 <__lshift+0xc4>
 801937c:	3001      	adds	r0, #1
 801937e:	1bc0      	subs	r0, r0, r7
 8019380:	9003      	str	r0, [sp, #12]
 8019382:	468c      	mov	ip, r1
 8019384:	2000      	movs	r0, #0
 8019386:	681e      	ldr	r6, [r3, #0]
 8019388:	40be      	lsls	r6, r7
 801938a:	4306      	orrs	r6, r0
 801938c:	4660      	mov	r0, ip
 801938e:	c040      	stmia	r0!, {r6}
 8019390:	4684      	mov	ip, r0
 8019392:	9e03      	ldr	r6, [sp, #12]
 8019394:	cb01      	ldmia	r3!, {r0}
 8019396:	40f0      	lsrs	r0, r6
 8019398:	429a      	cmp	r2, r3
 801939a:	d8f4      	bhi.n	8019386 <__lshift+0x7a>
 801939c:	0026      	movs	r6, r4
 801939e:	3615      	adds	r6, #21
 80193a0:	2304      	movs	r3, #4
 80193a2:	42b2      	cmp	r2, r6
 80193a4:	d304      	bcc.n	80193b0 <__lshift+0xa4>
 80193a6:	1b13      	subs	r3, r2, r4
 80193a8:	3b15      	subs	r3, #21
 80193aa:	089b      	lsrs	r3, r3, #2
 80193ac:	3301      	adds	r3, #1
 80193ae:	009b      	lsls	r3, r3, #2
 80193b0:	50c8      	str	r0, [r1, r3]
 80193b2:	2800      	cmp	r0, #0
 80193b4:	d002      	beq.n	80193bc <__lshift+0xb0>
 80193b6:	9b01      	ldr	r3, [sp, #4]
 80193b8:	3302      	adds	r3, #2
 80193ba:	9300      	str	r3, [sp, #0]
 80193bc:	9b00      	ldr	r3, [sp, #0]
 80193be:	9802      	ldr	r0, [sp, #8]
 80193c0:	3b01      	subs	r3, #1
 80193c2:	0021      	movs	r1, r4
 80193c4:	612b      	str	r3, [r5, #16]
 80193c6:	f7ff fdc3 	bl	8018f50 <_Bfree>
 80193ca:	0028      	movs	r0, r5
 80193cc:	b005      	add	sp, #20
 80193ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193d0:	cb01      	ldmia	r3!, {r0}
 80193d2:	c101      	stmia	r1!, {r0}
 80193d4:	429a      	cmp	r2, r3
 80193d6:	d8fb      	bhi.n	80193d0 <__lshift+0xc4>
 80193d8:	e7f0      	b.n	80193bc <__lshift+0xb0>
 80193da:	46c0      	nop			@ (mov r8, r8)
 80193dc:	0801bb7c 	.word	0x0801bb7c
 80193e0:	0801bb8d 	.word	0x0801bb8d

080193e4 <__mcmp>:
 80193e4:	b530      	push	{r4, r5, lr}
 80193e6:	690b      	ldr	r3, [r1, #16]
 80193e8:	6904      	ldr	r4, [r0, #16]
 80193ea:	0002      	movs	r2, r0
 80193ec:	1ae0      	subs	r0, r4, r3
 80193ee:	429c      	cmp	r4, r3
 80193f0:	d10f      	bne.n	8019412 <__mcmp+0x2e>
 80193f2:	3214      	adds	r2, #20
 80193f4:	009b      	lsls	r3, r3, #2
 80193f6:	3114      	adds	r1, #20
 80193f8:	0014      	movs	r4, r2
 80193fa:	18c9      	adds	r1, r1, r3
 80193fc:	18d2      	adds	r2, r2, r3
 80193fe:	3a04      	subs	r2, #4
 8019400:	3904      	subs	r1, #4
 8019402:	6815      	ldr	r5, [r2, #0]
 8019404:	680b      	ldr	r3, [r1, #0]
 8019406:	429d      	cmp	r5, r3
 8019408:	d004      	beq.n	8019414 <__mcmp+0x30>
 801940a:	2001      	movs	r0, #1
 801940c:	429d      	cmp	r5, r3
 801940e:	d200      	bcs.n	8019412 <__mcmp+0x2e>
 8019410:	3802      	subs	r0, #2
 8019412:	bd30      	pop	{r4, r5, pc}
 8019414:	4294      	cmp	r4, r2
 8019416:	d3f2      	bcc.n	80193fe <__mcmp+0x1a>
 8019418:	e7fb      	b.n	8019412 <__mcmp+0x2e>
	...

0801941c <__mdiff>:
 801941c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801941e:	000c      	movs	r4, r1
 8019420:	b087      	sub	sp, #28
 8019422:	9000      	str	r0, [sp, #0]
 8019424:	0011      	movs	r1, r2
 8019426:	0020      	movs	r0, r4
 8019428:	0017      	movs	r7, r2
 801942a:	f7ff ffdb 	bl	80193e4 <__mcmp>
 801942e:	1e05      	subs	r5, r0, #0
 8019430:	d110      	bne.n	8019454 <__mdiff+0x38>
 8019432:	0001      	movs	r1, r0
 8019434:	9800      	ldr	r0, [sp, #0]
 8019436:	f7ff fd47 	bl	8018ec8 <_Balloc>
 801943a:	1e02      	subs	r2, r0, #0
 801943c:	d104      	bne.n	8019448 <__mdiff+0x2c>
 801943e:	4b40      	ldr	r3, [pc, #256]	@ (8019540 <__mdiff+0x124>)
 8019440:	4840      	ldr	r0, [pc, #256]	@ (8019544 <__mdiff+0x128>)
 8019442:	4941      	ldr	r1, [pc, #260]	@ (8019548 <__mdiff+0x12c>)
 8019444:	f000 fcfe 	bl	8019e44 <__assert_func>
 8019448:	2301      	movs	r3, #1
 801944a:	6145      	str	r5, [r0, #20]
 801944c:	6103      	str	r3, [r0, #16]
 801944e:	0010      	movs	r0, r2
 8019450:	b007      	add	sp, #28
 8019452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019454:	2600      	movs	r6, #0
 8019456:	42b0      	cmp	r0, r6
 8019458:	da03      	bge.n	8019462 <__mdiff+0x46>
 801945a:	0023      	movs	r3, r4
 801945c:	003c      	movs	r4, r7
 801945e:	001f      	movs	r7, r3
 8019460:	3601      	adds	r6, #1
 8019462:	6861      	ldr	r1, [r4, #4]
 8019464:	9800      	ldr	r0, [sp, #0]
 8019466:	f7ff fd2f 	bl	8018ec8 <_Balloc>
 801946a:	1e02      	subs	r2, r0, #0
 801946c:	d103      	bne.n	8019476 <__mdiff+0x5a>
 801946e:	4b34      	ldr	r3, [pc, #208]	@ (8019540 <__mdiff+0x124>)
 8019470:	4834      	ldr	r0, [pc, #208]	@ (8019544 <__mdiff+0x128>)
 8019472:	4936      	ldr	r1, [pc, #216]	@ (801954c <__mdiff+0x130>)
 8019474:	e7e6      	b.n	8019444 <__mdiff+0x28>
 8019476:	6923      	ldr	r3, [r4, #16]
 8019478:	3414      	adds	r4, #20
 801947a:	9300      	str	r3, [sp, #0]
 801947c:	009b      	lsls	r3, r3, #2
 801947e:	18e3      	adds	r3, r4, r3
 8019480:	0021      	movs	r1, r4
 8019482:	9401      	str	r4, [sp, #4]
 8019484:	003c      	movs	r4, r7
 8019486:	9302      	str	r3, [sp, #8]
 8019488:	693b      	ldr	r3, [r7, #16]
 801948a:	3414      	adds	r4, #20
 801948c:	009b      	lsls	r3, r3, #2
 801948e:	18e3      	adds	r3, r4, r3
 8019490:	9303      	str	r3, [sp, #12]
 8019492:	0003      	movs	r3, r0
 8019494:	60c6      	str	r6, [r0, #12]
 8019496:	468c      	mov	ip, r1
 8019498:	2000      	movs	r0, #0
 801949a:	3314      	adds	r3, #20
 801949c:	9304      	str	r3, [sp, #16]
 801949e:	9305      	str	r3, [sp, #20]
 80194a0:	4663      	mov	r3, ip
 80194a2:	cb20      	ldmia	r3!, {r5}
 80194a4:	b2a9      	uxth	r1, r5
 80194a6:	000e      	movs	r6, r1
 80194a8:	469c      	mov	ip, r3
 80194aa:	cc08      	ldmia	r4!, {r3}
 80194ac:	0c2d      	lsrs	r5, r5, #16
 80194ae:	b299      	uxth	r1, r3
 80194b0:	1a71      	subs	r1, r6, r1
 80194b2:	1809      	adds	r1, r1, r0
 80194b4:	0c1b      	lsrs	r3, r3, #16
 80194b6:	1408      	asrs	r0, r1, #16
 80194b8:	1aeb      	subs	r3, r5, r3
 80194ba:	181b      	adds	r3, r3, r0
 80194bc:	1418      	asrs	r0, r3, #16
 80194be:	b289      	uxth	r1, r1
 80194c0:	041b      	lsls	r3, r3, #16
 80194c2:	4319      	orrs	r1, r3
 80194c4:	9b05      	ldr	r3, [sp, #20]
 80194c6:	c302      	stmia	r3!, {r1}
 80194c8:	9305      	str	r3, [sp, #20]
 80194ca:	9b03      	ldr	r3, [sp, #12]
 80194cc:	42a3      	cmp	r3, r4
 80194ce:	d8e7      	bhi.n	80194a0 <__mdiff+0x84>
 80194d0:	0039      	movs	r1, r7
 80194d2:	9c03      	ldr	r4, [sp, #12]
 80194d4:	3115      	adds	r1, #21
 80194d6:	2304      	movs	r3, #4
 80194d8:	428c      	cmp	r4, r1
 80194da:	d304      	bcc.n	80194e6 <__mdiff+0xca>
 80194dc:	1be3      	subs	r3, r4, r7
 80194de:	3b15      	subs	r3, #21
 80194e0:	089b      	lsrs	r3, r3, #2
 80194e2:	3301      	adds	r3, #1
 80194e4:	009b      	lsls	r3, r3, #2
 80194e6:	9901      	ldr	r1, [sp, #4]
 80194e8:	18cd      	adds	r5, r1, r3
 80194ea:	9904      	ldr	r1, [sp, #16]
 80194ec:	002e      	movs	r6, r5
 80194ee:	18cb      	adds	r3, r1, r3
 80194f0:	001f      	movs	r7, r3
 80194f2:	9902      	ldr	r1, [sp, #8]
 80194f4:	428e      	cmp	r6, r1
 80194f6:	d311      	bcc.n	801951c <__mdiff+0x100>
 80194f8:	9c02      	ldr	r4, [sp, #8]
 80194fa:	1ee9      	subs	r1, r5, #3
 80194fc:	2000      	movs	r0, #0
 80194fe:	428c      	cmp	r4, r1
 8019500:	d304      	bcc.n	801950c <__mdiff+0xf0>
 8019502:	0021      	movs	r1, r4
 8019504:	3103      	adds	r1, #3
 8019506:	1b49      	subs	r1, r1, r5
 8019508:	0889      	lsrs	r1, r1, #2
 801950a:	0088      	lsls	r0, r1, #2
 801950c:	181b      	adds	r3, r3, r0
 801950e:	3b04      	subs	r3, #4
 8019510:	6819      	ldr	r1, [r3, #0]
 8019512:	2900      	cmp	r1, #0
 8019514:	d010      	beq.n	8019538 <__mdiff+0x11c>
 8019516:	9b00      	ldr	r3, [sp, #0]
 8019518:	6113      	str	r3, [r2, #16]
 801951a:	e798      	b.n	801944e <__mdiff+0x32>
 801951c:	4684      	mov	ip, r0
 801951e:	ce02      	ldmia	r6!, {r1}
 8019520:	b288      	uxth	r0, r1
 8019522:	4460      	add	r0, ip
 8019524:	1400      	asrs	r0, r0, #16
 8019526:	0c0c      	lsrs	r4, r1, #16
 8019528:	1904      	adds	r4, r0, r4
 801952a:	4461      	add	r1, ip
 801952c:	1420      	asrs	r0, r4, #16
 801952e:	b289      	uxth	r1, r1
 8019530:	0424      	lsls	r4, r4, #16
 8019532:	4321      	orrs	r1, r4
 8019534:	c702      	stmia	r7!, {r1}
 8019536:	e7dc      	b.n	80194f2 <__mdiff+0xd6>
 8019538:	9900      	ldr	r1, [sp, #0]
 801953a:	3901      	subs	r1, #1
 801953c:	9100      	str	r1, [sp, #0]
 801953e:	e7e6      	b.n	801950e <__mdiff+0xf2>
 8019540:	0801bb7c 	.word	0x0801bb7c
 8019544:	0801bb8d 	.word	0x0801bb8d
 8019548:	00000237 	.word	0x00000237
 801954c:	00000245 	.word	0x00000245

08019550 <__d2b>:
 8019550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019552:	2101      	movs	r1, #1
 8019554:	0016      	movs	r6, r2
 8019556:	001f      	movs	r7, r3
 8019558:	f7ff fcb6 	bl	8018ec8 <_Balloc>
 801955c:	1e04      	subs	r4, r0, #0
 801955e:	d105      	bne.n	801956c <__d2b+0x1c>
 8019560:	0022      	movs	r2, r4
 8019562:	4b25      	ldr	r3, [pc, #148]	@ (80195f8 <__d2b+0xa8>)
 8019564:	4825      	ldr	r0, [pc, #148]	@ (80195fc <__d2b+0xac>)
 8019566:	4926      	ldr	r1, [pc, #152]	@ (8019600 <__d2b+0xb0>)
 8019568:	f000 fc6c 	bl	8019e44 <__assert_func>
 801956c:	033b      	lsls	r3, r7, #12
 801956e:	007d      	lsls	r5, r7, #1
 8019570:	0b1b      	lsrs	r3, r3, #12
 8019572:	0d6d      	lsrs	r5, r5, #21
 8019574:	d002      	beq.n	801957c <__d2b+0x2c>
 8019576:	2280      	movs	r2, #128	@ 0x80
 8019578:	0352      	lsls	r2, r2, #13
 801957a:	4313      	orrs	r3, r2
 801957c:	9301      	str	r3, [sp, #4]
 801957e:	2e00      	cmp	r6, #0
 8019580:	d025      	beq.n	80195ce <__d2b+0x7e>
 8019582:	4668      	mov	r0, sp
 8019584:	9600      	str	r6, [sp, #0]
 8019586:	f7ff fd6c 	bl	8019062 <__lo0bits>
 801958a:	9b01      	ldr	r3, [sp, #4]
 801958c:	9900      	ldr	r1, [sp, #0]
 801958e:	2800      	cmp	r0, #0
 8019590:	d01b      	beq.n	80195ca <__d2b+0x7a>
 8019592:	2220      	movs	r2, #32
 8019594:	001e      	movs	r6, r3
 8019596:	1a12      	subs	r2, r2, r0
 8019598:	4096      	lsls	r6, r2
 801959a:	0032      	movs	r2, r6
 801959c:	40c3      	lsrs	r3, r0
 801959e:	430a      	orrs	r2, r1
 80195a0:	6162      	str	r2, [r4, #20]
 80195a2:	9301      	str	r3, [sp, #4]
 80195a4:	9e01      	ldr	r6, [sp, #4]
 80195a6:	61a6      	str	r6, [r4, #24]
 80195a8:	1e73      	subs	r3, r6, #1
 80195aa:	419e      	sbcs	r6, r3
 80195ac:	3601      	adds	r6, #1
 80195ae:	6126      	str	r6, [r4, #16]
 80195b0:	2d00      	cmp	r5, #0
 80195b2:	d014      	beq.n	80195de <__d2b+0x8e>
 80195b4:	2635      	movs	r6, #53	@ 0x35
 80195b6:	4b13      	ldr	r3, [pc, #76]	@ (8019604 <__d2b+0xb4>)
 80195b8:	18ed      	adds	r5, r5, r3
 80195ba:	9b08      	ldr	r3, [sp, #32]
 80195bc:	182d      	adds	r5, r5, r0
 80195be:	601d      	str	r5, [r3, #0]
 80195c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80195c2:	1a36      	subs	r6, r6, r0
 80195c4:	601e      	str	r6, [r3, #0]
 80195c6:	0020      	movs	r0, r4
 80195c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80195ca:	6161      	str	r1, [r4, #20]
 80195cc:	e7ea      	b.n	80195a4 <__d2b+0x54>
 80195ce:	a801      	add	r0, sp, #4
 80195d0:	f7ff fd47 	bl	8019062 <__lo0bits>
 80195d4:	9b01      	ldr	r3, [sp, #4]
 80195d6:	2601      	movs	r6, #1
 80195d8:	6163      	str	r3, [r4, #20]
 80195da:	3020      	adds	r0, #32
 80195dc:	e7e7      	b.n	80195ae <__d2b+0x5e>
 80195de:	4b0a      	ldr	r3, [pc, #40]	@ (8019608 <__d2b+0xb8>)
 80195e0:	18c0      	adds	r0, r0, r3
 80195e2:	9b08      	ldr	r3, [sp, #32]
 80195e4:	6018      	str	r0, [r3, #0]
 80195e6:	4b09      	ldr	r3, [pc, #36]	@ (801960c <__d2b+0xbc>)
 80195e8:	18f3      	adds	r3, r6, r3
 80195ea:	009b      	lsls	r3, r3, #2
 80195ec:	18e3      	adds	r3, r4, r3
 80195ee:	6958      	ldr	r0, [r3, #20]
 80195f0:	f7ff fd16 	bl	8019020 <__hi0bits>
 80195f4:	0176      	lsls	r6, r6, #5
 80195f6:	e7e3      	b.n	80195c0 <__d2b+0x70>
 80195f8:	0801bb7c 	.word	0x0801bb7c
 80195fc:	0801bb8d 	.word	0x0801bb8d
 8019600:	0000030f 	.word	0x0000030f
 8019604:	fffffbcd 	.word	0xfffffbcd
 8019608:	fffffbce 	.word	0xfffffbce
 801960c:	3fffffff 	.word	0x3fffffff

08019610 <__ssputs_r>:
 8019610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019612:	688e      	ldr	r6, [r1, #8]
 8019614:	b085      	sub	sp, #20
 8019616:	001f      	movs	r7, r3
 8019618:	000c      	movs	r4, r1
 801961a:	680b      	ldr	r3, [r1, #0]
 801961c:	9002      	str	r0, [sp, #8]
 801961e:	9203      	str	r2, [sp, #12]
 8019620:	42be      	cmp	r6, r7
 8019622:	d830      	bhi.n	8019686 <__ssputs_r+0x76>
 8019624:	210c      	movs	r1, #12
 8019626:	5e62      	ldrsh	r2, [r4, r1]
 8019628:	2190      	movs	r1, #144	@ 0x90
 801962a:	00c9      	lsls	r1, r1, #3
 801962c:	420a      	tst	r2, r1
 801962e:	d028      	beq.n	8019682 <__ssputs_r+0x72>
 8019630:	2003      	movs	r0, #3
 8019632:	6921      	ldr	r1, [r4, #16]
 8019634:	1a5b      	subs	r3, r3, r1
 8019636:	9301      	str	r3, [sp, #4]
 8019638:	6963      	ldr	r3, [r4, #20]
 801963a:	4343      	muls	r3, r0
 801963c:	9801      	ldr	r0, [sp, #4]
 801963e:	0fdd      	lsrs	r5, r3, #31
 8019640:	18ed      	adds	r5, r5, r3
 8019642:	1c7b      	adds	r3, r7, #1
 8019644:	181b      	adds	r3, r3, r0
 8019646:	106d      	asrs	r5, r5, #1
 8019648:	42ab      	cmp	r3, r5
 801964a:	d900      	bls.n	801964e <__ssputs_r+0x3e>
 801964c:	001d      	movs	r5, r3
 801964e:	0552      	lsls	r2, r2, #21
 8019650:	d528      	bpl.n	80196a4 <__ssputs_r+0x94>
 8019652:	0029      	movs	r1, r5
 8019654:	9802      	ldr	r0, [sp, #8]
 8019656:	f7ff fba7 	bl	8018da8 <_malloc_r>
 801965a:	1e06      	subs	r6, r0, #0
 801965c:	d02c      	beq.n	80196b8 <__ssputs_r+0xa8>
 801965e:	9a01      	ldr	r2, [sp, #4]
 8019660:	6921      	ldr	r1, [r4, #16]
 8019662:	f7fe fc9f 	bl	8017fa4 <memcpy>
 8019666:	89a2      	ldrh	r2, [r4, #12]
 8019668:	4b18      	ldr	r3, [pc, #96]	@ (80196cc <__ssputs_r+0xbc>)
 801966a:	401a      	ands	r2, r3
 801966c:	2380      	movs	r3, #128	@ 0x80
 801966e:	4313      	orrs	r3, r2
 8019670:	81a3      	strh	r3, [r4, #12]
 8019672:	9b01      	ldr	r3, [sp, #4]
 8019674:	6126      	str	r6, [r4, #16]
 8019676:	18f6      	adds	r6, r6, r3
 8019678:	6026      	str	r6, [r4, #0]
 801967a:	003e      	movs	r6, r7
 801967c:	6165      	str	r5, [r4, #20]
 801967e:	1aed      	subs	r5, r5, r3
 8019680:	60a5      	str	r5, [r4, #8]
 8019682:	42be      	cmp	r6, r7
 8019684:	d900      	bls.n	8019688 <__ssputs_r+0x78>
 8019686:	003e      	movs	r6, r7
 8019688:	0032      	movs	r2, r6
 801968a:	9903      	ldr	r1, [sp, #12]
 801968c:	6820      	ldr	r0, [r4, #0]
 801968e:	f000 fbb3 	bl	8019df8 <memmove>
 8019692:	2000      	movs	r0, #0
 8019694:	68a3      	ldr	r3, [r4, #8]
 8019696:	1b9b      	subs	r3, r3, r6
 8019698:	60a3      	str	r3, [r4, #8]
 801969a:	6823      	ldr	r3, [r4, #0]
 801969c:	199b      	adds	r3, r3, r6
 801969e:	6023      	str	r3, [r4, #0]
 80196a0:	b005      	add	sp, #20
 80196a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196a4:	002a      	movs	r2, r5
 80196a6:	9802      	ldr	r0, [sp, #8]
 80196a8:	f000 fc29 	bl	8019efe <_realloc_r>
 80196ac:	1e06      	subs	r6, r0, #0
 80196ae:	d1e0      	bne.n	8019672 <__ssputs_r+0x62>
 80196b0:	6921      	ldr	r1, [r4, #16]
 80196b2:	9802      	ldr	r0, [sp, #8]
 80196b4:	f7ff fb02 	bl	8018cbc <_free_r>
 80196b8:	230c      	movs	r3, #12
 80196ba:	2001      	movs	r0, #1
 80196bc:	9a02      	ldr	r2, [sp, #8]
 80196be:	4240      	negs	r0, r0
 80196c0:	6013      	str	r3, [r2, #0]
 80196c2:	89a2      	ldrh	r2, [r4, #12]
 80196c4:	3334      	adds	r3, #52	@ 0x34
 80196c6:	4313      	orrs	r3, r2
 80196c8:	81a3      	strh	r3, [r4, #12]
 80196ca:	e7e9      	b.n	80196a0 <__ssputs_r+0x90>
 80196cc:	fffffb7f 	.word	0xfffffb7f

080196d0 <_svfiprintf_r>:
 80196d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196d2:	b0a1      	sub	sp, #132	@ 0x84
 80196d4:	9003      	str	r0, [sp, #12]
 80196d6:	001d      	movs	r5, r3
 80196d8:	898b      	ldrh	r3, [r1, #12]
 80196da:	000f      	movs	r7, r1
 80196dc:	0016      	movs	r6, r2
 80196de:	061b      	lsls	r3, r3, #24
 80196e0:	d511      	bpl.n	8019706 <_svfiprintf_r+0x36>
 80196e2:	690b      	ldr	r3, [r1, #16]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d10e      	bne.n	8019706 <_svfiprintf_r+0x36>
 80196e8:	2140      	movs	r1, #64	@ 0x40
 80196ea:	f7ff fb5d 	bl	8018da8 <_malloc_r>
 80196ee:	6038      	str	r0, [r7, #0]
 80196f0:	6138      	str	r0, [r7, #16]
 80196f2:	2800      	cmp	r0, #0
 80196f4:	d105      	bne.n	8019702 <_svfiprintf_r+0x32>
 80196f6:	230c      	movs	r3, #12
 80196f8:	9a03      	ldr	r2, [sp, #12]
 80196fa:	6013      	str	r3, [r2, #0]
 80196fc:	2001      	movs	r0, #1
 80196fe:	4240      	negs	r0, r0
 8019700:	e0cf      	b.n	80198a2 <_svfiprintf_r+0x1d2>
 8019702:	2340      	movs	r3, #64	@ 0x40
 8019704:	617b      	str	r3, [r7, #20]
 8019706:	2300      	movs	r3, #0
 8019708:	ac08      	add	r4, sp, #32
 801970a:	6163      	str	r3, [r4, #20]
 801970c:	3320      	adds	r3, #32
 801970e:	7663      	strb	r3, [r4, #25]
 8019710:	3310      	adds	r3, #16
 8019712:	76a3      	strb	r3, [r4, #26]
 8019714:	9507      	str	r5, [sp, #28]
 8019716:	0035      	movs	r5, r6
 8019718:	782b      	ldrb	r3, [r5, #0]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d001      	beq.n	8019722 <_svfiprintf_r+0x52>
 801971e:	2b25      	cmp	r3, #37	@ 0x25
 8019720:	d148      	bne.n	80197b4 <_svfiprintf_r+0xe4>
 8019722:	1bab      	subs	r3, r5, r6
 8019724:	9305      	str	r3, [sp, #20]
 8019726:	42b5      	cmp	r5, r6
 8019728:	d00b      	beq.n	8019742 <_svfiprintf_r+0x72>
 801972a:	0032      	movs	r2, r6
 801972c:	0039      	movs	r1, r7
 801972e:	9803      	ldr	r0, [sp, #12]
 8019730:	f7ff ff6e 	bl	8019610 <__ssputs_r>
 8019734:	3001      	adds	r0, #1
 8019736:	d100      	bne.n	801973a <_svfiprintf_r+0x6a>
 8019738:	e0ae      	b.n	8019898 <_svfiprintf_r+0x1c8>
 801973a:	6963      	ldr	r3, [r4, #20]
 801973c:	9a05      	ldr	r2, [sp, #20]
 801973e:	189b      	adds	r3, r3, r2
 8019740:	6163      	str	r3, [r4, #20]
 8019742:	782b      	ldrb	r3, [r5, #0]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d100      	bne.n	801974a <_svfiprintf_r+0x7a>
 8019748:	e0a6      	b.n	8019898 <_svfiprintf_r+0x1c8>
 801974a:	2201      	movs	r2, #1
 801974c:	2300      	movs	r3, #0
 801974e:	4252      	negs	r2, r2
 8019750:	6062      	str	r2, [r4, #4]
 8019752:	a904      	add	r1, sp, #16
 8019754:	3254      	adds	r2, #84	@ 0x54
 8019756:	1852      	adds	r2, r2, r1
 8019758:	1c6e      	adds	r6, r5, #1
 801975a:	6023      	str	r3, [r4, #0]
 801975c:	60e3      	str	r3, [r4, #12]
 801975e:	60a3      	str	r3, [r4, #8]
 8019760:	7013      	strb	r3, [r2, #0]
 8019762:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019764:	4b54      	ldr	r3, [pc, #336]	@ (80198b8 <_svfiprintf_r+0x1e8>)
 8019766:	2205      	movs	r2, #5
 8019768:	0018      	movs	r0, r3
 801976a:	7831      	ldrb	r1, [r6, #0]
 801976c:	9305      	str	r3, [sp, #20]
 801976e:	f7fe fc0e 	bl	8017f8e <memchr>
 8019772:	1c75      	adds	r5, r6, #1
 8019774:	2800      	cmp	r0, #0
 8019776:	d11f      	bne.n	80197b8 <_svfiprintf_r+0xe8>
 8019778:	6822      	ldr	r2, [r4, #0]
 801977a:	06d3      	lsls	r3, r2, #27
 801977c:	d504      	bpl.n	8019788 <_svfiprintf_r+0xb8>
 801977e:	2353      	movs	r3, #83	@ 0x53
 8019780:	a904      	add	r1, sp, #16
 8019782:	185b      	adds	r3, r3, r1
 8019784:	2120      	movs	r1, #32
 8019786:	7019      	strb	r1, [r3, #0]
 8019788:	0713      	lsls	r3, r2, #28
 801978a:	d504      	bpl.n	8019796 <_svfiprintf_r+0xc6>
 801978c:	2353      	movs	r3, #83	@ 0x53
 801978e:	a904      	add	r1, sp, #16
 8019790:	185b      	adds	r3, r3, r1
 8019792:	212b      	movs	r1, #43	@ 0x2b
 8019794:	7019      	strb	r1, [r3, #0]
 8019796:	7833      	ldrb	r3, [r6, #0]
 8019798:	2b2a      	cmp	r3, #42	@ 0x2a
 801979a:	d016      	beq.n	80197ca <_svfiprintf_r+0xfa>
 801979c:	0035      	movs	r5, r6
 801979e:	2100      	movs	r1, #0
 80197a0:	200a      	movs	r0, #10
 80197a2:	68e3      	ldr	r3, [r4, #12]
 80197a4:	782a      	ldrb	r2, [r5, #0]
 80197a6:	1c6e      	adds	r6, r5, #1
 80197a8:	3a30      	subs	r2, #48	@ 0x30
 80197aa:	2a09      	cmp	r2, #9
 80197ac:	d950      	bls.n	8019850 <_svfiprintf_r+0x180>
 80197ae:	2900      	cmp	r1, #0
 80197b0:	d111      	bne.n	80197d6 <_svfiprintf_r+0x106>
 80197b2:	e017      	b.n	80197e4 <_svfiprintf_r+0x114>
 80197b4:	3501      	adds	r5, #1
 80197b6:	e7af      	b.n	8019718 <_svfiprintf_r+0x48>
 80197b8:	9b05      	ldr	r3, [sp, #20]
 80197ba:	6822      	ldr	r2, [r4, #0]
 80197bc:	1ac0      	subs	r0, r0, r3
 80197be:	2301      	movs	r3, #1
 80197c0:	4083      	lsls	r3, r0
 80197c2:	4313      	orrs	r3, r2
 80197c4:	002e      	movs	r6, r5
 80197c6:	6023      	str	r3, [r4, #0]
 80197c8:	e7cc      	b.n	8019764 <_svfiprintf_r+0x94>
 80197ca:	9b07      	ldr	r3, [sp, #28]
 80197cc:	1d19      	adds	r1, r3, #4
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	9107      	str	r1, [sp, #28]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	db01      	blt.n	80197da <_svfiprintf_r+0x10a>
 80197d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80197d8:	e004      	b.n	80197e4 <_svfiprintf_r+0x114>
 80197da:	425b      	negs	r3, r3
 80197dc:	60e3      	str	r3, [r4, #12]
 80197de:	2302      	movs	r3, #2
 80197e0:	4313      	orrs	r3, r2
 80197e2:	6023      	str	r3, [r4, #0]
 80197e4:	782b      	ldrb	r3, [r5, #0]
 80197e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80197e8:	d10c      	bne.n	8019804 <_svfiprintf_r+0x134>
 80197ea:	786b      	ldrb	r3, [r5, #1]
 80197ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80197ee:	d134      	bne.n	801985a <_svfiprintf_r+0x18a>
 80197f0:	9b07      	ldr	r3, [sp, #28]
 80197f2:	3502      	adds	r5, #2
 80197f4:	1d1a      	adds	r2, r3, #4
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	9207      	str	r2, [sp, #28]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	da01      	bge.n	8019802 <_svfiprintf_r+0x132>
 80197fe:	2301      	movs	r3, #1
 8019800:	425b      	negs	r3, r3
 8019802:	9309      	str	r3, [sp, #36]	@ 0x24
 8019804:	4e2d      	ldr	r6, [pc, #180]	@ (80198bc <_svfiprintf_r+0x1ec>)
 8019806:	2203      	movs	r2, #3
 8019808:	0030      	movs	r0, r6
 801980a:	7829      	ldrb	r1, [r5, #0]
 801980c:	f7fe fbbf 	bl	8017f8e <memchr>
 8019810:	2800      	cmp	r0, #0
 8019812:	d006      	beq.n	8019822 <_svfiprintf_r+0x152>
 8019814:	2340      	movs	r3, #64	@ 0x40
 8019816:	1b80      	subs	r0, r0, r6
 8019818:	4083      	lsls	r3, r0
 801981a:	6822      	ldr	r2, [r4, #0]
 801981c:	3501      	adds	r5, #1
 801981e:	4313      	orrs	r3, r2
 8019820:	6023      	str	r3, [r4, #0]
 8019822:	7829      	ldrb	r1, [r5, #0]
 8019824:	2206      	movs	r2, #6
 8019826:	4826      	ldr	r0, [pc, #152]	@ (80198c0 <_svfiprintf_r+0x1f0>)
 8019828:	1c6e      	adds	r6, r5, #1
 801982a:	7621      	strb	r1, [r4, #24]
 801982c:	f7fe fbaf 	bl	8017f8e <memchr>
 8019830:	2800      	cmp	r0, #0
 8019832:	d038      	beq.n	80198a6 <_svfiprintf_r+0x1d6>
 8019834:	4b23      	ldr	r3, [pc, #140]	@ (80198c4 <_svfiprintf_r+0x1f4>)
 8019836:	2b00      	cmp	r3, #0
 8019838:	d122      	bne.n	8019880 <_svfiprintf_r+0x1b0>
 801983a:	2207      	movs	r2, #7
 801983c:	9b07      	ldr	r3, [sp, #28]
 801983e:	3307      	adds	r3, #7
 8019840:	4393      	bics	r3, r2
 8019842:	3308      	adds	r3, #8
 8019844:	9307      	str	r3, [sp, #28]
 8019846:	6963      	ldr	r3, [r4, #20]
 8019848:	9a04      	ldr	r2, [sp, #16]
 801984a:	189b      	adds	r3, r3, r2
 801984c:	6163      	str	r3, [r4, #20]
 801984e:	e762      	b.n	8019716 <_svfiprintf_r+0x46>
 8019850:	4343      	muls	r3, r0
 8019852:	0035      	movs	r5, r6
 8019854:	2101      	movs	r1, #1
 8019856:	189b      	adds	r3, r3, r2
 8019858:	e7a4      	b.n	80197a4 <_svfiprintf_r+0xd4>
 801985a:	2300      	movs	r3, #0
 801985c:	200a      	movs	r0, #10
 801985e:	0019      	movs	r1, r3
 8019860:	3501      	adds	r5, #1
 8019862:	6063      	str	r3, [r4, #4]
 8019864:	782a      	ldrb	r2, [r5, #0]
 8019866:	1c6e      	adds	r6, r5, #1
 8019868:	3a30      	subs	r2, #48	@ 0x30
 801986a:	2a09      	cmp	r2, #9
 801986c:	d903      	bls.n	8019876 <_svfiprintf_r+0x1a6>
 801986e:	2b00      	cmp	r3, #0
 8019870:	d0c8      	beq.n	8019804 <_svfiprintf_r+0x134>
 8019872:	9109      	str	r1, [sp, #36]	@ 0x24
 8019874:	e7c6      	b.n	8019804 <_svfiprintf_r+0x134>
 8019876:	4341      	muls	r1, r0
 8019878:	0035      	movs	r5, r6
 801987a:	2301      	movs	r3, #1
 801987c:	1889      	adds	r1, r1, r2
 801987e:	e7f1      	b.n	8019864 <_svfiprintf_r+0x194>
 8019880:	aa07      	add	r2, sp, #28
 8019882:	9200      	str	r2, [sp, #0]
 8019884:	0021      	movs	r1, r4
 8019886:	003a      	movs	r2, r7
 8019888:	4b0f      	ldr	r3, [pc, #60]	@ (80198c8 <_svfiprintf_r+0x1f8>)
 801988a:	9803      	ldr	r0, [sp, #12]
 801988c:	f7fd fd8c 	bl	80173a8 <_printf_float>
 8019890:	9004      	str	r0, [sp, #16]
 8019892:	9b04      	ldr	r3, [sp, #16]
 8019894:	3301      	adds	r3, #1
 8019896:	d1d6      	bne.n	8019846 <_svfiprintf_r+0x176>
 8019898:	89bb      	ldrh	r3, [r7, #12]
 801989a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801989c:	065b      	lsls	r3, r3, #25
 801989e:	d500      	bpl.n	80198a2 <_svfiprintf_r+0x1d2>
 80198a0:	e72c      	b.n	80196fc <_svfiprintf_r+0x2c>
 80198a2:	b021      	add	sp, #132	@ 0x84
 80198a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198a6:	aa07      	add	r2, sp, #28
 80198a8:	9200      	str	r2, [sp, #0]
 80198aa:	0021      	movs	r1, r4
 80198ac:	003a      	movs	r2, r7
 80198ae:	4b06      	ldr	r3, [pc, #24]	@ (80198c8 <_svfiprintf_r+0x1f8>)
 80198b0:	9803      	ldr	r0, [sp, #12]
 80198b2:	f7fe f827 	bl	8017904 <_printf_i>
 80198b6:	e7eb      	b.n	8019890 <_svfiprintf_r+0x1c0>
 80198b8:	0801bce8 	.word	0x0801bce8
 80198bc:	0801bcee 	.word	0x0801bcee
 80198c0:	0801bcf2 	.word	0x0801bcf2
 80198c4:	080173a9 	.word	0x080173a9
 80198c8:	08019611 	.word	0x08019611

080198cc <__sfputc_r>:
 80198cc:	6893      	ldr	r3, [r2, #8]
 80198ce:	b510      	push	{r4, lr}
 80198d0:	3b01      	subs	r3, #1
 80198d2:	6093      	str	r3, [r2, #8]
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	da04      	bge.n	80198e2 <__sfputc_r+0x16>
 80198d8:	6994      	ldr	r4, [r2, #24]
 80198da:	42a3      	cmp	r3, r4
 80198dc:	db07      	blt.n	80198ee <__sfputc_r+0x22>
 80198de:	290a      	cmp	r1, #10
 80198e0:	d005      	beq.n	80198ee <__sfputc_r+0x22>
 80198e2:	6813      	ldr	r3, [r2, #0]
 80198e4:	1c58      	adds	r0, r3, #1
 80198e6:	6010      	str	r0, [r2, #0]
 80198e8:	7019      	strb	r1, [r3, #0]
 80198ea:	0008      	movs	r0, r1
 80198ec:	bd10      	pop	{r4, pc}
 80198ee:	f000 f9e2 	bl	8019cb6 <__swbuf_r>
 80198f2:	0001      	movs	r1, r0
 80198f4:	e7f9      	b.n	80198ea <__sfputc_r+0x1e>

080198f6 <__sfputs_r>:
 80198f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198f8:	0006      	movs	r6, r0
 80198fa:	000f      	movs	r7, r1
 80198fc:	0014      	movs	r4, r2
 80198fe:	18d5      	adds	r5, r2, r3
 8019900:	42ac      	cmp	r4, r5
 8019902:	d101      	bne.n	8019908 <__sfputs_r+0x12>
 8019904:	2000      	movs	r0, #0
 8019906:	e007      	b.n	8019918 <__sfputs_r+0x22>
 8019908:	7821      	ldrb	r1, [r4, #0]
 801990a:	003a      	movs	r2, r7
 801990c:	0030      	movs	r0, r6
 801990e:	f7ff ffdd 	bl	80198cc <__sfputc_r>
 8019912:	3401      	adds	r4, #1
 8019914:	1c43      	adds	r3, r0, #1
 8019916:	d1f3      	bne.n	8019900 <__sfputs_r+0xa>
 8019918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801991c <_vfiprintf_r>:
 801991c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801991e:	b0a1      	sub	sp, #132	@ 0x84
 8019920:	000f      	movs	r7, r1
 8019922:	0015      	movs	r5, r2
 8019924:	001e      	movs	r6, r3
 8019926:	9003      	str	r0, [sp, #12]
 8019928:	2800      	cmp	r0, #0
 801992a:	d004      	beq.n	8019936 <_vfiprintf_r+0x1a>
 801992c:	6a03      	ldr	r3, [r0, #32]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d101      	bne.n	8019936 <_vfiprintf_r+0x1a>
 8019932:	f7fe f985 	bl	8017c40 <__sinit>
 8019936:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019938:	07db      	lsls	r3, r3, #31
 801993a:	d405      	bmi.n	8019948 <_vfiprintf_r+0x2c>
 801993c:	89bb      	ldrh	r3, [r7, #12]
 801993e:	059b      	lsls	r3, r3, #22
 8019940:	d402      	bmi.n	8019948 <_vfiprintf_r+0x2c>
 8019942:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019944:	f7fe fb21 	bl	8017f8a <__retarget_lock_acquire_recursive>
 8019948:	89bb      	ldrh	r3, [r7, #12]
 801994a:	071b      	lsls	r3, r3, #28
 801994c:	d502      	bpl.n	8019954 <_vfiprintf_r+0x38>
 801994e:	693b      	ldr	r3, [r7, #16]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d113      	bne.n	801997c <_vfiprintf_r+0x60>
 8019954:	0039      	movs	r1, r7
 8019956:	9803      	ldr	r0, [sp, #12]
 8019958:	f000 f9f0 	bl	8019d3c <__swsetup_r>
 801995c:	2800      	cmp	r0, #0
 801995e:	d00d      	beq.n	801997c <_vfiprintf_r+0x60>
 8019960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019962:	07db      	lsls	r3, r3, #31
 8019964:	d503      	bpl.n	801996e <_vfiprintf_r+0x52>
 8019966:	2001      	movs	r0, #1
 8019968:	4240      	negs	r0, r0
 801996a:	b021      	add	sp, #132	@ 0x84
 801996c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801996e:	89bb      	ldrh	r3, [r7, #12]
 8019970:	059b      	lsls	r3, r3, #22
 8019972:	d4f8      	bmi.n	8019966 <_vfiprintf_r+0x4a>
 8019974:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019976:	f7fe fb09 	bl	8017f8c <__retarget_lock_release_recursive>
 801997a:	e7f4      	b.n	8019966 <_vfiprintf_r+0x4a>
 801997c:	2300      	movs	r3, #0
 801997e:	ac08      	add	r4, sp, #32
 8019980:	6163      	str	r3, [r4, #20]
 8019982:	3320      	adds	r3, #32
 8019984:	7663      	strb	r3, [r4, #25]
 8019986:	3310      	adds	r3, #16
 8019988:	76a3      	strb	r3, [r4, #26]
 801998a:	9607      	str	r6, [sp, #28]
 801998c:	002e      	movs	r6, r5
 801998e:	7833      	ldrb	r3, [r6, #0]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d001      	beq.n	8019998 <_vfiprintf_r+0x7c>
 8019994:	2b25      	cmp	r3, #37	@ 0x25
 8019996:	d148      	bne.n	8019a2a <_vfiprintf_r+0x10e>
 8019998:	1b73      	subs	r3, r6, r5
 801999a:	9305      	str	r3, [sp, #20]
 801999c:	42ae      	cmp	r6, r5
 801999e:	d00b      	beq.n	80199b8 <_vfiprintf_r+0x9c>
 80199a0:	002a      	movs	r2, r5
 80199a2:	0039      	movs	r1, r7
 80199a4:	9803      	ldr	r0, [sp, #12]
 80199a6:	f7ff ffa6 	bl	80198f6 <__sfputs_r>
 80199aa:	3001      	adds	r0, #1
 80199ac:	d100      	bne.n	80199b0 <_vfiprintf_r+0x94>
 80199ae:	e0ae      	b.n	8019b0e <_vfiprintf_r+0x1f2>
 80199b0:	6963      	ldr	r3, [r4, #20]
 80199b2:	9a05      	ldr	r2, [sp, #20]
 80199b4:	189b      	adds	r3, r3, r2
 80199b6:	6163      	str	r3, [r4, #20]
 80199b8:	7833      	ldrb	r3, [r6, #0]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d100      	bne.n	80199c0 <_vfiprintf_r+0xa4>
 80199be:	e0a6      	b.n	8019b0e <_vfiprintf_r+0x1f2>
 80199c0:	2201      	movs	r2, #1
 80199c2:	2300      	movs	r3, #0
 80199c4:	4252      	negs	r2, r2
 80199c6:	6062      	str	r2, [r4, #4]
 80199c8:	a904      	add	r1, sp, #16
 80199ca:	3254      	adds	r2, #84	@ 0x54
 80199cc:	1852      	adds	r2, r2, r1
 80199ce:	1c75      	adds	r5, r6, #1
 80199d0:	6023      	str	r3, [r4, #0]
 80199d2:	60e3      	str	r3, [r4, #12]
 80199d4:	60a3      	str	r3, [r4, #8]
 80199d6:	7013      	strb	r3, [r2, #0]
 80199d8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80199da:	4b59      	ldr	r3, [pc, #356]	@ (8019b40 <_vfiprintf_r+0x224>)
 80199dc:	2205      	movs	r2, #5
 80199de:	0018      	movs	r0, r3
 80199e0:	7829      	ldrb	r1, [r5, #0]
 80199e2:	9305      	str	r3, [sp, #20]
 80199e4:	f7fe fad3 	bl	8017f8e <memchr>
 80199e8:	1c6e      	adds	r6, r5, #1
 80199ea:	2800      	cmp	r0, #0
 80199ec:	d11f      	bne.n	8019a2e <_vfiprintf_r+0x112>
 80199ee:	6822      	ldr	r2, [r4, #0]
 80199f0:	06d3      	lsls	r3, r2, #27
 80199f2:	d504      	bpl.n	80199fe <_vfiprintf_r+0xe2>
 80199f4:	2353      	movs	r3, #83	@ 0x53
 80199f6:	a904      	add	r1, sp, #16
 80199f8:	185b      	adds	r3, r3, r1
 80199fa:	2120      	movs	r1, #32
 80199fc:	7019      	strb	r1, [r3, #0]
 80199fe:	0713      	lsls	r3, r2, #28
 8019a00:	d504      	bpl.n	8019a0c <_vfiprintf_r+0xf0>
 8019a02:	2353      	movs	r3, #83	@ 0x53
 8019a04:	a904      	add	r1, sp, #16
 8019a06:	185b      	adds	r3, r3, r1
 8019a08:	212b      	movs	r1, #43	@ 0x2b
 8019a0a:	7019      	strb	r1, [r3, #0]
 8019a0c:	782b      	ldrb	r3, [r5, #0]
 8019a0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019a10:	d016      	beq.n	8019a40 <_vfiprintf_r+0x124>
 8019a12:	002e      	movs	r6, r5
 8019a14:	2100      	movs	r1, #0
 8019a16:	200a      	movs	r0, #10
 8019a18:	68e3      	ldr	r3, [r4, #12]
 8019a1a:	7832      	ldrb	r2, [r6, #0]
 8019a1c:	1c75      	adds	r5, r6, #1
 8019a1e:	3a30      	subs	r2, #48	@ 0x30
 8019a20:	2a09      	cmp	r2, #9
 8019a22:	d950      	bls.n	8019ac6 <_vfiprintf_r+0x1aa>
 8019a24:	2900      	cmp	r1, #0
 8019a26:	d111      	bne.n	8019a4c <_vfiprintf_r+0x130>
 8019a28:	e017      	b.n	8019a5a <_vfiprintf_r+0x13e>
 8019a2a:	3601      	adds	r6, #1
 8019a2c:	e7af      	b.n	801998e <_vfiprintf_r+0x72>
 8019a2e:	9b05      	ldr	r3, [sp, #20]
 8019a30:	6822      	ldr	r2, [r4, #0]
 8019a32:	1ac0      	subs	r0, r0, r3
 8019a34:	2301      	movs	r3, #1
 8019a36:	4083      	lsls	r3, r0
 8019a38:	4313      	orrs	r3, r2
 8019a3a:	0035      	movs	r5, r6
 8019a3c:	6023      	str	r3, [r4, #0]
 8019a3e:	e7cc      	b.n	80199da <_vfiprintf_r+0xbe>
 8019a40:	9b07      	ldr	r3, [sp, #28]
 8019a42:	1d19      	adds	r1, r3, #4
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	9107      	str	r1, [sp, #28]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	db01      	blt.n	8019a50 <_vfiprintf_r+0x134>
 8019a4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019a4e:	e004      	b.n	8019a5a <_vfiprintf_r+0x13e>
 8019a50:	425b      	negs	r3, r3
 8019a52:	60e3      	str	r3, [r4, #12]
 8019a54:	2302      	movs	r3, #2
 8019a56:	4313      	orrs	r3, r2
 8019a58:	6023      	str	r3, [r4, #0]
 8019a5a:	7833      	ldrb	r3, [r6, #0]
 8019a5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8019a5e:	d10c      	bne.n	8019a7a <_vfiprintf_r+0x15e>
 8019a60:	7873      	ldrb	r3, [r6, #1]
 8019a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8019a64:	d134      	bne.n	8019ad0 <_vfiprintf_r+0x1b4>
 8019a66:	9b07      	ldr	r3, [sp, #28]
 8019a68:	3602      	adds	r6, #2
 8019a6a:	1d1a      	adds	r2, r3, #4
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	9207      	str	r2, [sp, #28]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	da01      	bge.n	8019a78 <_vfiprintf_r+0x15c>
 8019a74:	2301      	movs	r3, #1
 8019a76:	425b      	negs	r3, r3
 8019a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a7a:	4d32      	ldr	r5, [pc, #200]	@ (8019b44 <_vfiprintf_r+0x228>)
 8019a7c:	2203      	movs	r2, #3
 8019a7e:	0028      	movs	r0, r5
 8019a80:	7831      	ldrb	r1, [r6, #0]
 8019a82:	f7fe fa84 	bl	8017f8e <memchr>
 8019a86:	2800      	cmp	r0, #0
 8019a88:	d006      	beq.n	8019a98 <_vfiprintf_r+0x17c>
 8019a8a:	2340      	movs	r3, #64	@ 0x40
 8019a8c:	1b40      	subs	r0, r0, r5
 8019a8e:	4083      	lsls	r3, r0
 8019a90:	6822      	ldr	r2, [r4, #0]
 8019a92:	3601      	adds	r6, #1
 8019a94:	4313      	orrs	r3, r2
 8019a96:	6023      	str	r3, [r4, #0]
 8019a98:	7831      	ldrb	r1, [r6, #0]
 8019a9a:	2206      	movs	r2, #6
 8019a9c:	482a      	ldr	r0, [pc, #168]	@ (8019b48 <_vfiprintf_r+0x22c>)
 8019a9e:	1c75      	adds	r5, r6, #1
 8019aa0:	7621      	strb	r1, [r4, #24]
 8019aa2:	f7fe fa74 	bl	8017f8e <memchr>
 8019aa6:	2800      	cmp	r0, #0
 8019aa8:	d040      	beq.n	8019b2c <_vfiprintf_r+0x210>
 8019aaa:	4b28      	ldr	r3, [pc, #160]	@ (8019b4c <_vfiprintf_r+0x230>)
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d122      	bne.n	8019af6 <_vfiprintf_r+0x1da>
 8019ab0:	2207      	movs	r2, #7
 8019ab2:	9b07      	ldr	r3, [sp, #28]
 8019ab4:	3307      	adds	r3, #7
 8019ab6:	4393      	bics	r3, r2
 8019ab8:	3308      	adds	r3, #8
 8019aba:	9307      	str	r3, [sp, #28]
 8019abc:	6963      	ldr	r3, [r4, #20]
 8019abe:	9a04      	ldr	r2, [sp, #16]
 8019ac0:	189b      	adds	r3, r3, r2
 8019ac2:	6163      	str	r3, [r4, #20]
 8019ac4:	e762      	b.n	801998c <_vfiprintf_r+0x70>
 8019ac6:	4343      	muls	r3, r0
 8019ac8:	002e      	movs	r6, r5
 8019aca:	2101      	movs	r1, #1
 8019acc:	189b      	adds	r3, r3, r2
 8019ace:	e7a4      	b.n	8019a1a <_vfiprintf_r+0xfe>
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	200a      	movs	r0, #10
 8019ad4:	0019      	movs	r1, r3
 8019ad6:	3601      	adds	r6, #1
 8019ad8:	6063      	str	r3, [r4, #4]
 8019ada:	7832      	ldrb	r2, [r6, #0]
 8019adc:	1c75      	adds	r5, r6, #1
 8019ade:	3a30      	subs	r2, #48	@ 0x30
 8019ae0:	2a09      	cmp	r2, #9
 8019ae2:	d903      	bls.n	8019aec <_vfiprintf_r+0x1d0>
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d0c8      	beq.n	8019a7a <_vfiprintf_r+0x15e>
 8019ae8:	9109      	str	r1, [sp, #36]	@ 0x24
 8019aea:	e7c6      	b.n	8019a7a <_vfiprintf_r+0x15e>
 8019aec:	4341      	muls	r1, r0
 8019aee:	002e      	movs	r6, r5
 8019af0:	2301      	movs	r3, #1
 8019af2:	1889      	adds	r1, r1, r2
 8019af4:	e7f1      	b.n	8019ada <_vfiprintf_r+0x1be>
 8019af6:	aa07      	add	r2, sp, #28
 8019af8:	9200      	str	r2, [sp, #0]
 8019afa:	0021      	movs	r1, r4
 8019afc:	003a      	movs	r2, r7
 8019afe:	4b14      	ldr	r3, [pc, #80]	@ (8019b50 <_vfiprintf_r+0x234>)
 8019b00:	9803      	ldr	r0, [sp, #12]
 8019b02:	f7fd fc51 	bl	80173a8 <_printf_float>
 8019b06:	9004      	str	r0, [sp, #16]
 8019b08:	9b04      	ldr	r3, [sp, #16]
 8019b0a:	3301      	adds	r3, #1
 8019b0c:	d1d6      	bne.n	8019abc <_vfiprintf_r+0x1a0>
 8019b0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019b10:	07db      	lsls	r3, r3, #31
 8019b12:	d405      	bmi.n	8019b20 <_vfiprintf_r+0x204>
 8019b14:	89bb      	ldrh	r3, [r7, #12]
 8019b16:	059b      	lsls	r3, r3, #22
 8019b18:	d402      	bmi.n	8019b20 <_vfiprintf_r+0x204>
 8019b1a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019b1c:	f7fe fa36 	bl	8017f8c <__retarget_lock_release_recursive>
 8019b20:	89bb      	ldrh	r3, [r7, #12]
 8019b22:	065b      	lsls	r3, r3, #25
 8019b24:	d500      	bpl.n	8019b28 <_vfiprintf_r+0x20c>
 8019b26:	e71e      	b.n	8019966 <_vfiprintf_r+0x4a>
 8019b28:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019b2a:	e71e      	b.n	801996a <_vfiprintf_r+0x4e>
 8019b2c:	aa07      	add	r2, sp, #28
 8019b2e:	9200      	str	r2, [sp, #0]
 8019b30:	0021      	movs	r1, r4
 8019b32:	003a      	movs	r2, r7
 8019b34:	4b06      	ldr	r3, [pc, #24]	@ (8019b50 <_vfiprintf_r+0x234>)
 8019b36:	9803      	ldr	r0, [sp, #12]
 8019b38:	f7fd fee4 	bl	8017904 <_printf_i>
 8019b3c:	e7e3      	b.n	8019b06 <_vfiprintf_r+0x1ea>
 8019b3e:	46c0      	nop			@ (mov r8, r8)
 8019b40:	0801bce8 	.word	0x0801bce8
 8019b44:	0801bcee 	.word	0x0801bcee
 8019b48:	0801bcf2 	.word	0x0801bcf2
 8019b4c:	080173a9 	.word	0x080173a9
 8019b50:	080198f7 	.word	0x080198f7

08019b54 <__sflush_r>:
 8019b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019b56:	220c      	movs	r2, #12
 8019b58:	5e8b      	ldrsh	r3, [r1, r2]
 8019b5a:	0005      	movs	r5, r0
 8019b5c:	000c      	movs	r4, r1
 8019b5e:	071a      	lsls	r2, r3, #28
 8019b60:	d456      	bmi.n	8019c10 <__sflush_r+0xbc>
 8019b62:	684a      	ldr	r2, [r1, #4]
 8019b64:	2a00      	cmp	r2, #0
 8019b66:	dc02      	bgt.n	8019b6e <__sflush_r+0x1a>
 8019b68:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8019b6a:	2a00      	cmp	r2, #0
 8019b6c:	dd4e      	ble.n	8019c0c <__sflush_r+0xb8>
 8019b6e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019b70:	2f00      	cmp	r7, #0
 8019b72:	d04b      	beq.n	8019c0c <__sflush_r+0xb8>
 8019b74:	2200      	movs	r2, #0
 8019b76:	2080      	movs	r0, #128	@ 0x80
 8019b78:	682e      	ldr	r6, [r5, #0]
 8019b7a:	602a      	str	r2, [r5, #0]
 8019b7c:	001a      	movs	r2, r3
 8019b7e:	0140      	lsls	r0, r0, #5
 8019b80:	6a21      	ldr	r1, [r4, #32]
 8019b82:	4002      	ands	r2, r0
 8019b84:	4203      	tst	r3, r0
 8019b86:	d033      	beq.n	8019bf0 <__sflush_r+0x9c>
 8019b88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019b8a:	89a3      	ldrh	r3, [r4, #12]
 8019b8c:	075b      	lsls	r3, r3, #29
 8019b8e:	d506      	bpl.n	8019b9e <__sflush_r+0x4a>
 8019b90:	6863      	ldr	r3, [r4, #4]
 8019b92:	1ad2      	subs	r2, r2, r3
 8019b94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d001      	beq.n	8019b9e <__sflush_r+0x4a>
 8019b9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019b9c:	1ad2      	subs	r2, r2, r3
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	0028      	movs	r0, r5
 8019ba2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019ba4:	6a21      	ldr	r1, [r4, #32]
 8019ba6:	47b8      	blx	r7
 8019ba8:	89a2      	ldrh	r2, [r4, #12]
 8019baa:	1c43      	adds	r3, r0, #1
 8019bac:	d106      	bne.n	8019bbc <__sflush_r+0x68>
 8019bae:	6829      	ldr	r1, [r5, #0]
 8019bb0:	291d      	cmp	r1, #29
 8019bb2:	d846      	bhi.n	8019c42 <__sflush_r+0xee>
 8019bb4:	4b29      	ldr	r3, [pc, #164]	@ (8019c5c <__sflush_r+0x108>)
 8019bb6:	410b      	asrs	r3, r1
 8019bb8:	07db      	lsls	r3, r3, #31
 8019bba:	d442      	bmi.n	8019c42 <__sflush_r+0xee>
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	6063      	str	r3, [r4, #4]
 8019bc0:	6923      	ldr	r3, [r4, #16]
 8019bc2:	6023      	str	r3, [r4, #0]
 8019bc4:	04d2      	lsls	r2, r2, #19
 8019bc6:	d505      	bpl.n	8019bd4 <__sflush_r+0x80>
 8019bc8:	1c43      	adds	r3, r0, #1
 8019bca:	d102      	bne.n	8019bd2 <__sflush_r+0x7e>
 8019bcc:	682b      	ldr	r3, [r5, #0]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d100      	bne.n	8019bd4 <__sflush_r+0x80>
 8019bd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8019bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019bd6:	602e      	str	r6, [r5, #0]
 8019bd8:	2900      	cmp	r1, #0
 8019bda:	d017      	beq.n	8019c0c <__sflush_r+0xb8>
 8019bdc:	0023      	movs	r3, r4
 8019bde:	3344      	adds	r3, #68	@ 0x44
 8019be0:	4299      	cmp	r1, r3
 8019be2:	d002      	beq.n	8019bea <__sflush_r+0x96>
 8019be4:	0028      	movs	r0, r5
 8019be6:	f7ff f869 	bl	8018cbc <_free_r>
 8019bea:	2300      	movs	r3, #0
 8019bec:	6363      	str	r3, [r4, #52]	@ 0x34
 8019bee:	e00d      	b.n	8019c0c <__sflush_r+0xb8>
 8019bf0:	2301      	movs	r3, #1
 8019bf2:	0028      	movs	r0, r5
 8019bf4:	47b8      	blx	r7
 8019bf6:	0002      	movs	r2, r0
 8019bf8:	1c43      	adds	r3, r0, #1
 8019bfa:	d1c6      	bne.n	8019b8a <__sflush_r+0x36>
 8019bfc:	682b      	ldr	r3, [r5, #0]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d0c3      	beq.n	8019b8a <__sflush_r+0x36>
 8019c02:	2b1d      	cmp	r3, #29
 8019c04:	d001      	beq.n	8019c0a <__sflush_r+0xb6>
 8019c06:	2b16      	cmp	r3, #22
 8019c08:	d11a      	bne.n	8019c40 <__sflush_r+0xec>
 8019c0a:	602e      	str	r6, [r5, #0]
 8019c0c:	2000      	movs	r0, #0
 8019c0e:	e01e      	b.n	8019c4e <__sflush_r+0xfa>
 8019c10:	690e      	ldr	r6, [r1, #16]
 8019c12:	2e00      	cmp	r6, #0
 8019c14:	d0fa      	beq.n	8019c0c <__sflush_r+0xb8>
 8019c16:	680f      	ldr	r7, [r1, #0]
 8019c18:	600e      	str	r6, [r1, #0]
 8019c1a:	1bba      	subs	r2, r7, r6
 8019c1c:	9201      	str	r2, [sp, #4]
 8019c1e:	2200      	movs	r2, #0
 8019c20:	079b      	lsls	r3, r3, #30
 8019c22:	d100      	bne.n	8019c26 <__sflush_r+0xd2>
 8019c24:	694a      	ldr	r2, [r1, #20]
 8019c26:	60a2      	str	r2, [r4, #8]
 8019c28:	9b01      	ldr	r3, [sp, #4]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	ddee      	ble.n	8019c0c <__sflush_r+0xb8>
 8019c2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019c30:	0032      	movs	r2, r6
 8019c32:	001f      	movs	r7, r3
 8019c34:	0028      	movs	r0, r5
 8019c36:	9b01      	ldr	r3, [sp, #4]
 8019c38:	6a21      	ldr	r1, [r4, #32]
 8019c3a:	47b8      	blx	r7
 8019c3c:	2800      	cmp	r0, #0
 8019c3e:	dc07      	bgt.n	8019c50 <__sflush_r+0xfc>
 8019c40:	89a2      	ldrh	r2, [r4, #12]
 8019c42:	2340      	movs	r3, #64	@ 0x40
 8019c44:	2001      	movs	r0, #1
 8019c46:	4313      	orrs	r3, r2
 8019c48:	b21b      	sxth	r3, r3
 8019c4a:	81a3      	strh	r3, [r4, #12]
 8019c4c:	4240      	negs	r0, r0
 8019c4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019c50:	9b01      	ldr	r3, [sp, #4]
 8019c52:	1836      	adds	r6, r6, r0
 8019c54:	1a1b      	subs	r3, r3, r0
 8019c56:	9301      	str	r3, [sp, #4]
 8019c58:	e7e6      	b.n	8019c28 <__sflush_r+0xd4>
 8019c5a:	46c0      	nop			@ (mov r8, r8)
 8019c5c:	dfbffffe 	.word	0xdfbffffe

08019c60 <_fflush_r>:
 8019c60:	690b      	ldr	r3, [r1, #16]
 8019c62:	b570      	push	{r4, r5, r6, lr}
 8019c64:	0005      	movs	r5, r0
 8019c66:	000c      	movs	r4, r1
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d102      	bne.n	8019c72 <_fflush_r+0x12>
 8019c6c:	2500      	movs	r5, #0
 8019c6e:	0028      	movs	r0, r5
 8019c70:	bd70      	pop	{r4, r5, r6, pc}
 8019c72:	2800      	cmp	r0, #0
 8019c74:	d004      	beq.n	8019c80 <_fflush_r+0x20>
 8019c76:	6a03      	ldr	r3, [r0, #32]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d101      	bne.n	8019c80 <_fflush_r+0x20>
 8019c7c:	f7fd ffe0 	bl	8017c40 <__sinit>
 8019c80:	220c      	movs	r2, #12
 8019c82:	5ea3      	ldrsh	r3, [r4, r2]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d0f1      	beq.n	8019c6c <_fflush_r+0xc>
 8019c88:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019c8a:	07d2      	lsls	r2, r2, #31
 8019c8c:	d404      	bmi.n	8019c98 <_fflush_r+0x38>
 8019c8e:	059b      	lsls	r3, r3, #22
 8019c90:	d402      	bmi.n	8019c98 <_fflush_r+0x38>
 8019c92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019c94:	f7fe f979 	bl	8017f8a <__retarget_lock_acquire_recursive>
 8019c98:	0028      	movs	r0, r5
 8019c9a:	0021      	movs	r1, r4
 8019c9c:	f7ff ff5a 	bl	8019b54 <__sflush_r>
 8019ca0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019ca2:	0005      	movs	r5, r0
 8019ca4:	07db      	lsls	r3, r3, #31
 8019ca6:	d4e2      	bmi.n	8019c6e <_fflush_r+0xe>
 8019ca8:	89a3      	ldrh	r3, [r4, #12]
 8019caa:	059b      	lsls	r3, r3, #22
 8019cac:	d4df      	bmi.n	8019c6e <_fflush_r+0xe>
 8019cae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019cb0:	f7fe f96c 	bl	8017f8c <__retarget_lock_release_recursive>
 8019cb4:	e7db      	b.n	8019c6e <_fflush_r+0xe>

08019cb6 <__swbuf_r>:
 8019cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cb8:	0006      	movs	r6, r0
 8019cba:	000d      	movs	r5, r1
 8019cbc:	0014      	movs	r4, r2
 8019cbe:	2800      	cmp	r0, #0
 8019cc0:	d004      	beq.n	8019ccc <__swbuf_r+0x16>
 8019cc2:	6a03      	ldr	r3, [r0, #32]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	d101      	bne.n	8019ccc <__swbuf_r+0x16>
 8019cc8:	f7fd ffba 	bl	8017c40 <__sinit>
 8019ccc:	69a3      	ldr	r3, [r4, #24]
 8019cce:	60a3      	str	r3, [r4, #8]
 8019cd0:	89a3      	ldrh	r3, [r4, #12]
 8019cd2:	071b      	lsls	r3, r3, #28
 8019cd4:	d502      	bpl.n	8019cdc <__swbuf_r+0x26>
 8019cd6:	6923      	ldr	r3, [r4, #16]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d109      	bne.n	8019cf0 <__swbuf_r+0x3a>
 8019cdc:	0021      	movs	r1, r4
 8019cde:	0030      	movs	r0, r6
 8019ce0:	f000 f82c 	bl	8019d3c <__swsetup_r>
 8019ce4:	2800      	cmp	r0, #0
 8019ce6:	d003      	beq.n	8019cf0 <__swbuf_r+0x3a>
 8019ce8:	2501      	movs	r5, #1
 8019cea:	426d      	negs	r5, r5
 8019cec:	0028      	movs	r0, r5
 8019cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cf0:	6923      	ldr	r3, [r4, #16]
 8019cf2:	6820      	ldr	r0, [r4, #0]
 8019cf4:	b2ef      	uxtb	r7, r5
 8019cf6:	1ac0      	subs	r0, r0, r3
 8019cf8:	6963      	ldr	r3, [r4, #20]
 8019cfa:	b2ed      	uxtb	r5, r5
 8019cfc:	4283      	cmp	r3, r0
 8019cfe:	dc05      	bgt.n	8019d0c <__swbuf_r+0x56>
 8019d00:	0021      	movs	r1, r4
 8019d02:	0030      	movs	r0, r6
 8019d04:	f7ff ffac 	bl	8019c60 <_fflush_r>
 8019d08:	2800      	cmp	r0, #0
 8019d0a:	d1ed      	bne.n	8019ce8 <__swbuf_r+0x32>
 8019d0c:	68a3      	ldr	r3, [r4, #8]
 8019d0e:	3001      	adds	r0, #1
 8019d10:	3b01      	subs	r3, #1
 8019d12:	60a3      	str	r3, [r4, #8]
 8019d14:	6823      	ldr	r3, [r4, #0]
 8019d16:	1c5a      	adds	r2, r3, #1
 8019d18:	6022      	str	r2, [r4, #0]
 8019d1a:	701f      	strb	r7, [r3, #0]
 8019d1c:	6963      	ldr	r3, [r4, #20]
 8019d1e:	4283      	cmp	r3, r0
 8019d20:	d004      	beq.n	8019d2c <__swbuf_r+0x76>
 8019d22:	89a3      	ldrh	r3, [r4, #12]
 8019d24:	07db      	lsls	r3, r3, #31
 8019d26:	d5e1      	bpl.n	8019cec <__swbuf_r+0x36>
 8019d28:	2d0a      	cmp	r5, #10
 8019d2a:	d1df      	bne.n	8019cec <__swbuf_r+0x36>
 8019d2c:	0021      	movs	r1, r4
 8019d2e:	0030      	movs	r0, r6
 8019d30:	f7ff ff96 	bl	8019c60 <_fflush_r>
 8019d34:	2800      	cmp	r0, #0
 8019d36:	d0d9      	beq.n	8019cec <__swbuf_r+0x36>
 8019d38:	e7d6      	b.n	8019ce8 <__swbuf_r+0x32>
	...

08019d3c <__swsetup_r>:
 8019d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8019df4 <__swsetup_r+0xb8>)
 8019d3e:	b570      	push	{r4, r5, r6, lr}
 8019d40:	0005      	movs	r5, r0
 8019d42:	6818      	ldr	r0, [r3, #0]
 8019d44:	000c      	movs	r4, r1
 8019d46:	2800      	cmp	r0, #0
 8019d48:	d004      	beq.n	8019d54 <__swsetup_r+0x18>
 8019d4a:	6a03      	ldr	r3, [r0, #32]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d101      	bne.n	8019d54 <__swsetup_r+0x18>
 8019d50:	f7fd ff76 	bl	8017c40 <__sinit>
 8019d54:	230c      	movs	r3, #12
 8019d56:	5ee2      	ldrsh	r2, [r4, r3]
 8019d58:	0713      	lsls	r3, r2, #28
 8019d5a:	d423      	bmi.n	8019da4 <__swsetup_r+0x68>
 8019d5c:	06d3      	lsls	r3, r2, #27
 8019d5e:	d407      	bmi.n	8019d70 <__swsetup_r+0x34>
 8019d60:	2309      	movs	r3, #9
 8019d62:	602b      	str	r3, [r5, #0]
 8019d64:	2340      	movs	r3, #64	@ 0x40
 8019d66:	2001      	movs	r0, #1
 8019d68:	4313      	orrs	r3, r2
 8019d6a:	81a3      	strh	r3, [r4, #12]
 8019d6c:	4240      	negs	r0, r0
 8019d6e:	e03a      	b.n	8019de6 <__swsetup_r+0xaa>
 8019d70:	0752      	lsls	r2, r2, #29
 8019d72:	d513      	bpl.n	8019d9c <__swsetup_r+0x60>
 8019d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019d76:	2900      	cmp	r1, #0
 8019d78:	d008      	beq.n	8019d8c <__swsetup_r+0x50>
 8019d7a:	0023      	movs	r3, r4
 8019d7c:	3344      	adds	r3, #68	@ 0x44
 8019d7e:	4299      	cmp	r1, r3
 8019d80:	d002      	beq.n	8019d88 <__swsetup_r+0x4c>
 8019d82:	0028      	movs	r0, r5
 8019d84:	f7fe ff9a 	bl	8018cbc <_free_r>
 8019d88:	2300      	movs	r3, #0
 8019d8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8019d8c:	2224      	movs	r2, #36	@ 0x24
 8019d8e:	89a3      	ldrh	r3, [r4, #12]
 8019d90:	4393      	bics	r3, r2
 8019d92:	81a3      	strh	r3, [r4, #12]
 8019d94:	2300      	movs	r3, #0
 8019d96:	6063      	str	r3, [r4, #4]
 8019d98:	6923      	ldr	r3, [r4, #16]
 8019d9a:	6023      	str	r3, [r4, #0]
 8019d9c:	2308      	movs	r3, #8
 8019d9e:	89a2      	ldrh	r2, [r4, #12]
 8019da0:	4313      	orrs	r3, r2
 8019da2:	81a3      	strh	r3, [r4, #12]
 8019da4:	6923      	ldr	r3, [r4, #16]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d10b      	bne.n	8019dc2 <__swsetup_r+0x86>
 8019daa:	21a0      	movs	r1, #160	@ 0xa0
 8019dac:	2280      	movs	r2, #128	@ 0x80
 8019dae:	89a3      	ldrh	r3, [r4, #12]
 8019db0:	0089      	lsls	r1, r1, #2
 8019db2:	0092      	lsls	r2, r2, #2
 8019db4:	400b      	ands	r3, r1
 8019db6:	4293      	cmp	r3, r2
 8019db8:	d003      	beq.n	8019dc2 <__swsetup_r+0x86>
 8019dba:	0021      	movs	r1, r4
 8019dbc:	0028      	movs	r0, r5
 8019dbe:	f000 f915 	bl	8019fec <__smakebuf_r>
 8019dc2:	230c      	movs	r3, #12
 8019dc4:	5ee2      	ldrsh	r2, [r4, r3]
 8019dc6:	2101      	movs	r1, #1
 8019dc8:	0013      	movs	r3, r2
 8019dca:	400b      	ands	r3, r1
 8019dcc:	420a      	tst	r2, r1
 8019dce:	d00b      	beq.n	8019de8 <__swsetup_r+0xac>
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	60a3      	str	r3, [r4, #8]
 8019dd4:	6963      	ldr	r3, [r4, #20]
 8019dd6:	425b      	negs	r3, r3
 8019dd8:	61a3      	str	r3, [r4, #24]
 8019dda:	2000      	movs	r0, #0
 8019ddc:	6923      	ldr	r3, [r4, #16]
 8019dde:	4283      	cmp	r3, r0
 8019de0:	d101      	bne.n	8019de6 <__swsetup_r+0xaa>
 8019de2:	0613      	lsls	r3, r2, #24
 8019de4:	d4be      	bmi.n	8019d64 <__swsetup_r+0x28>
 8019de6:	bd70      	pop	{r4, r5, r6, pc}
 8019de8:	0791      	lsls	r1, r2, #30
 8019dea:	d400      	bmi.n	8019dee <__swsetup_r+0xb2>
 8019dec:	6963      	ldr	r3, [r4, #20]
 8019dee:	60a3      	str	r3, [r4, #8]
 8019df0:	e7f3      	b.n	8019dda <__swsetup_r+0x9e>
 8019df2:	46c0      	nop			@ (mov r8, r8)
 8019df4:	2000022c 	.word	0x2000022c

08019df8 <memmove>:
 8019df8:	b510      	push	{r4, lr}
 8019dfa:	4288      	cmp	r0, r1
 8019dfc:	d806      	bhi.n	8019e0c <memmove+0x14>
 8019dfe:	2300      	movs	r3, #0
 8019e00:	429a      	cmp	r2, r3
 8019e02:	d008      	beq.n	8019e16 <memmove+0x1e>
 8019e04:	5ccc      	ldrb	r4, [r1, r3]
 8019e06:	54c4      	strb	r4, [r0, r3]
 8019e08:	3301      	adds	r3, #1
 8019e0a:	e7f9      	b.n	8019e00 <memmove+0x8>
 8019e0c:	188b      	adds	r3, r1, r2
 8019e0e:	4298      	cmp	r0, r3
 8019e10:	d2f5      	bcs.n	8019dfe <memmove+0x6>
 8019e12:	3a01      	subs	r2, #1
 8019e14:	d200      	bcs.n	8019e18 <memmove+0x20>
 8019e16:	bd10      	pop	{r4, pc}
 8019e18:	5c8b      	ldrb	r3, [r1, r2]
 8019e1a:	5483      	strb	r3, [r0, r2]
 8019e1c:	e7f9      	b.n	8019e12 <memmove+0x1a>
	...

08019e20 <_sbrk_r>:
 8019e20:	2300      	movs	r3, #0
 8019e22:	b570      	push	{r4, r5, r6, lr}
 8019e24:	4d06      	ldr	r5, [pc, #24]	@ (8019e40 <_sbrk_r+0x20>)
 8019e26:	0004      	movs	r4, r0
 8019e28:	0008      	movs	r0, r1
 8019e2a:	602b      	str	r3, [r5, #0]
 8019e2c:	f7ef f80c 	bl	8008e48 <_sbrk>
 8019e30:	1c43      	adds	r3, r0, #1
 8019e32:	d103      	bne.n	8019e3c <_sbrk_r+0x1c>
 8019e34:	682b      	ldr	r3, [r5, #0]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d000      	beq.n	8019e3c <_sbrk_r+0x1c>
 8019e3a:	6023      	str	r3, [r4, #0]
 8019e3c:	bd70      	pop	{r4, r5, r6, pc}
 8019e3e:	46c0      	nop			@ (mov r8, r8)
 8019e40:	20003f04 	.word	0x20003f04

08019e44 <__assert_func>:
 8019e44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019e46:	0014      	movs	r4, r2
 8019e48:	001a      	movs	r2, r3
 8019e4a:	4b09      	ldr	r3, [pc, #36]	@ (8019e70 <__assert_func+0x2c>)
 8019e4c:	0005      	movs	r5, r0
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	000e      	movs	r6, r1
 8019e52:	68d8      	ldr	r0, [r3, #12]
 8019e54:	4b07      	ldr	r3, [pc, #28]	@ (8019e74 <__assert_func+0x30>)
 8019e56:	2c00      	cmp	r4, #0
 8019e58:	d101      	bne.n	8019e5e <__assert_func+0x1a>
 8019e5a:	4b07      	ldr	r3, [pc, #28]	@ (8019e78 <__assert_func+0x34>)
 8019e5c:	001c      	movs	r4, r3
 8019e5e:	4907      	ldr	r1, [pc, #28]	@ (8019e7c <__assert_func+0x38>)
 8019e60:	9301      	str	r3, [sp, #4]
 8019e62:	9402      	str	r4, [sp, #8]
 8019e64:	002b      	movs	r3, r5
 8019e66:	9600      	str	r6, [sp, #0]
 8019e68:	f000 f886 	bl	8019f78 <fiprintf>
 8019e6c:	f000 f924 	bl	801a0b8 <abort>
 8019e70:	2000022c 	.word	0x2000022c
 8019e74:	0801bd03 	.word	0x0801bd03
 8019e78:	0801bd3e 	.word	0x0801bd3e
 8019e7c:	0801bd10 	.word	0x0801bd10

08019e80 <_calloc_r>:
 8019e80:	b570      	push	{r4, r5, r6, lr}
 8019e82:	0c0b      	lsrs	r3, r1, #16
 8019e84:	0c15      	lsrs	r5, r2, #16
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d11e      	bne.n	8019ec8 <_calloc_r+0x48>
 8019e8a:	2d00      	cmp	r5, #0
 8019e8c:	d10c      	bne.n	8019ea8 <_calloc_r+0x28>
 8019e8e:	b289      	uxth	r1, r1
 8019e90:	b294      	uxth	r4, r2
 8019e92:	434c      	muls	r4, r1
 8019e94:	0021      	movs	r1, r4
 8019e96:	f7fe ff87 	bl	8018da8 <_malloc_r>
 8019e9a:	1e05      	subs	r5, r0, #0
 8019e9c:	d01a      	beq.n	8019ed4 <_calloc_r+0x54>
 8019e9e:	0022      	movs	r2, r4
 8019ea0:	2100      	movs	r1, #0
 8019ea2:	f7fd ffb5 	bl	8017e10 <memset>
 8019ea6:	e016      	b.n	8019ed6 <_calloc_r+0x56>
 8019ea8:	1c2b      	adds	r3, r5, #0
 8019eaa:	1c0c      	adds	r4, r1, #0
 8019eac:	b289      	uxth	r1, r1
 8019eae:	b292      	uxth	r2, r2
 8019eb0:	434a      	muls	r2, r1
 8019eb2:	b29b      	uxth	r3, r3
 8019eb4:	b2a1      	uxth	r1, r4
 8019eb6:	4359      	muls	r1, r3
 8019eb8:	0c14      	lsrs	r4, r2, #16
 8019eba:	190c      	adds	r4, r1, r4
 8019ebc:	0c23      	lsrs	r3, r4, #16
 8019ebe:	d107      	bne.n	8019ed0 <_calloc_r+0x50>
 8019ec0:	0424      	lsls	r4, r4, #16
 8019ec2:	b292      	uxth	r2, r2
 8019ec4:	4314      	orrs	r4, r2
 8019ec6:	e7e5      	b.n	8019e94 <_calloc_r+0x14>
 8019ec8:	2d00      	cmp	r5, #0
 8019eca:	d101      	bne.n	8019ed0 <_calloc_r+0x50>
 8019ecc:	1c14      	adds	r4, r2, #0
 8019ece:	e7ed      	b.n	8019eac <_calloc_r+0x2c>
 8019ed0:	230c      	movs	r3, #12
 8019ed2:	6003      	str	r3, [r0, #0]
 8019ed4:	2500      	movs	r5, #0
 8019ed6:	0028      	movs	r0, r5
 8019ed8:	bd70      	pop	{r4, r5, r6, pc}

08019eda <__ascii_mbtowc>:
 8019eda:	b082      	sub	sp, #8
 8019edc:	2900      	cmp	r1, #0
 8019ede:	d100      	bne.n	8019ee2 <__ascii_mbtowc+0x8>
 8019ee0:	a901      	add	r1, sp, #4
 8019ee2:	1e10      	subs	r0, r2, #0
 8019ee4:	d006      	beq.n	8019ef4 <__ascii_mbtowc+0x1a>
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d006      	beq.n	8019ef8 <__ascii_mbtowc+0x1e>
 8019eea:	7813      	ldrb	r3, [r2, #0]
 8019eec:	600b      	str	r3, [r1, #0]
 8019eee:	7810      	ldrb	r0, [r2, #0]
 8019ef0:	1e43      	subs	r3, r0, #1
 8019ef2:	4198      	sbcs	r0, r3
 8019ef4:	b002      	add	sp, #8
 8019ef6:	4770      	bx	lr
 8019ef8:	2002      	movs	r0, #2
 8019efa:	4240      	negs	r0, r0
 8019efc:	e7fa      	b.n	8019ef4 <__ascii_mbtowc+0x1a>

08019efe <_realloc_r>:
 8019efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f00:	0006      	movs	r6, r0
 8019f02:	000c      	movs	r4, r1
 8019f04:	0015      	movs	r5, r2
 8019f06:	2900      	cmp	r1, #0
 8019f08:	d105      	bne.n	8019f16 <_realloc_r+0x18>
 8019f0a:	0011      	movs	r1, r2
 8019f0c:	f7fe ff4c 	bl	8018da8 <_malloc_r>
 8019f10:	0004      	movs	r4, r0
 8019f12:	0020      	movs	r0, r4
 8019f14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019f16:	2a00      	cmp	r2, #0
 8019f18:	d103      	bne.n	8019f22 <_realloc_r+0x24>
 8019f1a:	f7fe fecf 	bl	8018cbc <_free_r>
 8019f1e:	2400      	movs	r4, #0
 8019f20:	e7f7      	b.n	8019f12 <_realloc_r+0x14>
 8019f22:	f000 f8d0 	bl	801a0c6 <_malloc_usable_size_r>
 8019f26:	0007      	movs	r7, r0
 8019f28:	4285      	cmp	r5, r0
 8019f2a:	d802      	bhi.n	8019f32 <_realloc_r+0x34>
 8019f2c:	0843      	lsrs	r3, r0, #1
 8019f2e:	42ab      	cmp	r3, r5
 8019f30:	d3ef      	bcc.n	8019f12 <_realloc_r+0x14>
 8019f32:	0029      	movs	r1, r5
 8019f34:	0030      	movs	r0, r6
 8019f36:	f7fe ff37 	bl	8018da8 <_malloc_r>
 8019f3a:	9001      	str	r0, [sp, #4]
 8019f3c:	2800      	cmp	r0, #0
 8019f3e:	d0ee      	beq.n	8019f1e <_realloc_r+0x20>
 8019f40:	002a      	movs	r2, r5
 8019f42:	42bd      	cmp	r5, r7
 8019f44:	d900      	bls.n	8019f48 <_realloc_r+0x4a>
 8019f46:	003a      	movs	r2, r7
 8019f48:	0021      	movs	r1, r4
 8019f4a:	9801      	ldr	r0, [sp, #4]
 8019f4c:	f7fe f82a 	bl	8017fa4 <memcpy>
 8019f50:	0021      	movs	r1, r4
 8019f52:	0030      	movs	r0, r6
 8019f54:	f7fe feb2 	bl	8018cbc <_free_r>
 8019f58:	9c01      	ldr	r4, [sp, #4]
 8019f5a:	e7da      	b.n	8019f12 <_realloc_r+0x14>

08019f5c <__ascii_wctomb>:
 8019f5c:	0003      	movs	r3, r0
 8019f5e:	1e08      	subs	r0, r1, #0
 8019f60:	d005      	beq.n	8019f6e <__ascii_wctomb+0x12>
 8019f62:	2aff      	cmp	r2, #255	@ 0xff
 8019f64:	d904      	bls.n	8019f70 <__ascii_wctomb+0x14>
 8019f66:	228a      	movs	r2, #138	@ 0x8a
 8019f68:	2001      	movs	r0, #1
 8019f6a:	601a      	str	r2, [r3, #0]
 8019f6c:	4240      	negs	r0, r0
 8019f6e:	4770      	bx	lr
 8019f70:	2001      	movs	r0, #1
 8019f72:	700a      	strb	r2, [r1, #0]
 8019f74:	e7fb      	b.n	8019f6e <__ascii_wctomb+0x12>
	...

08019f78 <fiprintf>:
 8019f78:	b40e      	push	{r1, r2, r3}
 8019f7a:	b517      	push	{r0, r1, r2, r4, lr}
 8019f7c:	4c05      	ldr	r4, [pc, #20]	@ (8019f94 <fiprintf+0x1c>)
 8019f7e:	ab05      	add	r3, sp, #20
 8019f80:	cb04      	ldmia	r3!, {r2}
 8019f82:	0001      	movs	r1, r0
 8019f84:	6820      	ldr	r0, [r4, #0]
 8019f86:	9301      	str	r3, [sp, #4]
 8019f88:	f7ff fcc8 	bl	801991c <_vfiprintf_r>
 8019f8c:	bc1e      	pop	{r1, r2, r3, r4}
 8019f8e:	bc08      	pop	{r3}
 8019f90:	b003      	add	sp, #12
 8019f92:	4718      	bx	r3
 8019f94:	2000022c 	.word	0x2000022c

08019f98 <__swhatbuf_r>:
 8019f98:	b570      	push	{r4, r5, r6, lr}
 8019f9a:	000e      	movs	r6, r1
 8019f9c:	001d      	movs	r5, r3
 8019f9e:	230e      	movs	r3, #14
 8019fa0:	5ec9      	ldrsh	r1, [r1, r3]
 8019fa2:	0014      	movs	r4, r2
 8019fa4:	b096      	sub	sp, #88	@ 0x58
 8019fa6:	2900      	cmp	r1, #0
 8019fa8:	da0c      	bge.n	8019fc4 <__swhatbuf_r+0x2c>
 8019faa:	89b2      	ldrh	r2, [r6, #12]
 8019fac:	2380      	movs	r3, #128	@ 0x80
 8019fae:	0011      	movs	r1, r2
 8019fb0:	4019      	ands	r1, r3
 8019fb2:	421a      	tst	r2, r3
 8019fb4:	d114      	bne.n	8019fe0 <__swhatbuf_r+0x48>
 8019fb6:	2380      	movs	r3, #128	@ 0x80
 8019fb8:	00db      	lsls	r3, r3, #3
 8019fba:	2000      	movs	r0, #0
 8019fbc:	6029      	str	r1, [r5, #0]
 8019fbe:	6023      	str	r3, [r4, #0]
 8019fc0:	b016      	add	sp, #88	@ 0x58
 8019fc2:	bd70      	pop	{r4, r5, r6, pc}
 8019fc4:	466a      	mov	r2, sp
 8019fc6:	f000 f853 	bl	801a070 <_fstat_r>
 8019fca:	2800      	cmp	r0, #0
 8019fcc:	dbed      	blt.n	8019faa <__swhatbuf_r+0x12>
 8019fce:	23f0      	movs	r3, #240	@ 0xf0
 8019fd0:	9901      	ldr	r1, [sp, #4]
 8019fd2:	021b      	lsls	r3, r3, #8
 8019fd4:	4019      	ands	r1, r3
 8019fd6:	4b04      	ldr	r3, [pc, #16]	@ (8019fe8 <__swhatbuf_r+0x50>)
 8019fd8:	18c9      	adds	r1, r1, r3
 8019fda:	424b      	negs	r3, r1
 8019fdc:	4159      	adcs	r1, r3
 8019fde:	e7ea      	b.n	8019fb6 <__swhatbuf_r+0x1e>
 8019fe0:	2100      	movs	r1, #0
 8019fe2:	2340      	movs	r3, #64	@ 0x40
 8019fe4:	e7e9      	b.n	8019fba <__swhatbuf_r+0x22>
 8019fe6:	46c0      	nop			@ (mov r8, r8)
 8019fe8:	ffffe000 	.word	0xffffe000

08019fec <__smakebuf_r>:
 8019fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fee:	2602      	movs	r6, #2
 8019ff0:	898b      	ldrh	r3, [r1, #12]
 8019ff2:	0005      	movs	r5, r0
 8019ff4:	000c      	movs	r4, r1
 8019ff6:	b085      	sub	sp, #20
 8019ff8:	4233      	tst	r3, r6
 8019ffa:	d007      	beq.n	801a00c <__smakebuf_r+0x20>
 8019ffc:	0023      	movs	r3, r4
 8019ffe:	3347      	adds	r3, #71	@ 0x47
 801a000:	6023      	str	r3, [r4, #0]
 801a002:	6123      	str	r3, [r4, #16]
 801a004:	2301      	movs	r3, #1
 801a006:	6163      	str	r3, [r4, #20]
 801a008:	b005      	add	sp, #20
 801a00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a00c:	ab03      	add	r3, sp, #12
 801a00e:	aa02      	add	r2, sp, #8
 801a010:	f7ff ffc2 	bl	8019f98 <__swhatbuf_r>
 801a014:	9f02      	ldr	r7, [sp, #8]
 801a016:	9001      	str	r0, [sp, #4]
 801a018:	0039      	movs	r1, r7
 801a01a:	0028      	movs	r0, r5
 801a01c:	f7fe fec4 	bl	8018da8 <_malloc_r>
 801a020:	2800      	cmp	r0, #0
 801a022:	d108      	bne.n	801a036 <__smakebuf_r+0x4a>
 801a024:	220c      	movs	r2, #12
 801a026:	5ea3      	ldrsh	r3, [r4, r2]
 801a028:	059a      	lsls	r2, r3, #22
 801a02a:	d4ed      	bmi.n	801a008 <__smakebuf_r+0x1c>
 801a02c:	2203      	movs	r2, #3
 801a02e:	4393      	bics	r3, r2
 801a030:	431e      	orrs	r6, r3
 801a032:	81a6      	strh	r6, [r4, #12]
 801a034:	e7e2      	b.n	8019ffc <__smakebuf_r+0x10>
 801a036:	2380      	movs	r3, #128	@ 0x80
 801a038:	89a2      	ldrh	r2, [r4, #12]
 801a03a:	6020      	str	r0, [r4, #0]
 801a03c:	4313      	orrs	r3, r2
 801a03e:	81a3      	strh	r3, [r4, #12]
 801a040:	9b03      	ldr	r3, [sp, #12]
 801a042:	6120      	str	r0, [r4, #16]
 801a044:	6167      	str	r7, [r4, #20]
 801a046:	2b00      	cmp	r3, #0
 801a048:	d00c      	beq.n	801a064 <__smakebuf_r+0x78>
 801a04a:	0028      	movs	r0, r5
 801a04c:	230e      	movs	r3, #14
 801a04e:	5ee1      	ldrsh	r1, [r4, r3]
 801a050:	f000 f820 	bl	801a094 <_isatty_r>
 801a054:	2800      	cmp	r0, #0
 801a056:	d005      	beq.n	801a064 <__smakebuf_r+0x78>
 801a058:	2303      	movs	r3, #3
 801a05a:	89a2      	ldrh	r2, [r4, #12]
 801a05c:	439a      	bics	r2, r3
 801a05e:	3b02      	subs	r3, #2
 801a060:	4313      	orrs	r3, r2
 801a062:	81a3      	strh	r3, [r4, #12]
 801a064:	89a3      	ldrh	r3, [r4, #12]
 801a066:	9a01      	ldr	r2, [sp, #4]
 801a068:	4313      	orrs	r3, r2
 801a06a:	81a3      	strh	r3, [r4, #12]
 801a06c:	e7cc      	b.n	801a008 <__smakebuf_r+0x1c>
	...

0801a070 <_fstat_r>:
 801a070:	2300      	movs	r3, #0
 801a072:	b570      	push	{r4, r5, r6, lr}
 801a074:	4d06      	ldr	r5, [pc, #24]	@ (801a090 <_fstat_r+0x20>)
 801a076:	0004      	movs	r4, r0
 801a078:	0008      	movs	r0, r1
 801a07a:	0011      	movs	r1, r2
 801a07c:	602b      	str	r3, [r5, #0]
 801a07e:	f7ee fec1 	bl	8008e04 <_fstat>
 801a082:	1c43      	adds	r3, r0, #1
 801a084:	d103      	bne.n	801a08e <_fstat_r+0x1e>
 801a086:	682b      	ldr	r3, [r5, #0]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d000      	beq.n	801a08e <_fstat_r+0x1e>
 801a08c:	6023      	str	r3, [r4, #0]
 801a08e:	bd70      	pop	{r4, r5, r6, pc}
 801a090:	20003f04 	.word	0x20003f04

0801a094 <_isatty_r>:
 801a094:	2300      	movs	r3, #0
 801a096:	b570      	push	{r4, r5, r6, lr}
 801a098:	4d06      	ldr	r5, [pc, #24]	@ (801a0b4 <_isatty_r+0x20>)
 801a09a:	0004      	movs	r4, r0
 801a09c:	0008      	movs	r0, r1
 801a09e:	602b      	str	r3, [r5, #0]
 801a0a0:	f7ee febe 	bl	8008e20 <_isatty>
 801a0a4:	1c43      	adds	r3, r0, #1
 801a0a6:	d103      	bne.n	801a0b0 <_isatty_r+0x1c>
 801a0a8:	682b      	ldr	r3, [r5, #0]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d000      	beq.n	801a0b0 <_isatty_r+0x1c>
 801a0ae:	6023      	str	r3, [r4, #0]
 801a0b0:	bd70      	pop	{r4, r5, r6, pc}
 801a0b2:	46c0      	nop			@ (mov r8, r8)
 801a0b4:	20003f04 	.word	0x20003f04

0801a0b8 <abort>:
 801a0b8:	2006      	movs	r0, #6
 801a0ba:	b510      	push	{r4, lr}
 801a0bc:	f000 f834 	bl	801a128 <raise>
 801a0c0:	2001      	movs	r0, #1
 801a0c2:	f7ee fe6b 	bl	8008d9c <_exit>

0801a0c6 <_malloc_usable_size_r>:
 801a0c6:	1f0b      	subs	r3, r1, #4
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	1f18      	subs	r0, r3, #4
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	da01      	bge.n	801a0d4 <_malloc_usable_size_r+0xe>
 801a0d0:	580b      	ldr	r3, [r1, r0]
 801a0d2:	18c0      	adds	r0, r0, r3
 801a0d4:	4770      	bx	lr

0801a0d6 <_raise_r>:
 801a0d6:	b570      	push	{r4, r5, r6, lr}
 801a0d8:	0004      	movs	r4, r0
 801a0da:	000d      	movs	r5, r1
 801a0dc:	291f      	cmp	r1, #31
 801a0de:	d904      	bls.n	801a0ea <_raise_r+0x14>
 801a0e0:	2316      	movs	r3, #22
 801a0e2:	6003      	str	r3, [r0, #0]
 801a0e4:	2001      	movs	r0, #1
 801a0e6:	4240      	negs	r0, r0
 801a0e8:	bd70      	pop	{r4, r5, r6, pc}
 801a0ea:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d004      	beq.n	801a0fa <_raise_r+0x24>
 801a0f0:	008a      	lsls	r2, r1, #2
 801a0f2:	189b      	adds	r3, r3, r2
 801a0f4:	681a      	ldr	r2, [r3, #0]
 801a0f6:	2a00      	cmp	r2, #0
 801a0f8:	d108      	bne.n	801a10c <_raise_r+0x36>
 801a0fa:	0020      	movs	r0, r4
 801a0fc:	f000 f830 	bl	801a160 <_getpid_r>
 801a100:	002a      	movs	r2, r5
 801a102:	0001      	movs	r1, r0
 801a104:	0020      	movs	r0, r4
 801a106:	f000 f819 	bl	801a13c <_kill_r>
 801a10a:	e7ed      	b.n	801a0e8 <_raise_r+0x12>
 801a10c:	2a01      	cmp	r2, #1
 801a10e:	d009      	beq.n	801a124 <_raise_r+0x4e>
 801a110:	1c51      	adds	r1, r2, #1
 801a112:	d103      	bne.n	801a11c <_raise_r+0x46>
 801a114:	2316      	movs	r3, #22
 801a116:	6003      	str	r3, [r0, #0]
 801a118:	2001      	movs	r0, #1
 801a11a:	e7e5      	b.n	801a0e8 <_raise_r+0x12>
 801a11c:	2100      	movs	r1, #0
 801a11e:	0028      	movs	r0, r5
 801a120:	6019      	str	r1, [r3, #0]
 801a122:	4790      	blx	r2
 801a124:	2000      	movs	r0, #0
 801a126:	e7df      	b.n	801a0e8 <_raise_r+0x12>

0801a128 <raise>:
 801a128:	b510      	push	{r4, lr}
 801a12a:	4b03      	ldr	r3, [pc, #12]	@ (801a138 <raise+0x10>)
 801a12c:	0001      	movs	r1, r0
 801a12e:	6818      	ldr	r0, [r3, #0]
 801a130:	f7ff ffd1 	bl	801a0d6 <_raise_r>
 801a134:	bd10      	pop	{r4, pc}
 801a136:	46c0      	nop			@ (mov r8, r8)
 801a138:	2000022c 	.word	0x2000022c

0801a13c <_kill_r>:
 801a13c:	2300      	movs	r3, #0
 801a13e:	b570      	push	{r4, r5, r6, lr}
 801a140:	4d06      	ldr	r5, [pc, #24]	@ (801a15c <_kill_r+0x20>)
 801a142:	0004      	movs	r4, r0
 801a144:	0008      	movs	r0, r1
 801a146:	0011      	movs	r1, r2
 801a148:	602b      	str	r3, [r5, #0]
 801a14a:	f7ee fe17 	bl	8008d7c <_kill>
 801a14e:	1c43      	adds	r3, r0, #1
 801a150:	d103      	bne.n	801a15a <_kill_r+0x1e>
 801a152:	682b      	ldr	r3, [r5, #0]
 801a154:	2b00      	cmp	r3, #0
 801a156:	d000      	beq.n	801a15a <_kill_r+0x1e>
 801a158:	6023      	str	r3, [r4, #0]
 801a15a:	bd70      	pop	{r4, r5, r6, pc}
 801a15c:	20003f04 	.word	0x20003f04

0801a160 <_getpid_r>:
 801a160:	b510      	push	{r4, lr}
 801a162:	f7ee fe05 	bl	8008d70 <_getpid>
 801a166:	bd10      	pop	{r4, pc}

0801a168 <log10>:
 801a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a16a:	0004      	movs	r4, r0
 801a16c:	000d      	movs	r5, r1
 801a16e:	f000 fa0b 	bl	801a588 <__ieee754_log10>
 801a172:	0022      	movs	r2, r4
 801a174:	0006      	movs	r6, r0
 801a176:	000f      	movs	r7, r1
 801a178:	002b      	movs	r3, r5
 801a17a:	0020      	movs	r0, r4
 801a17c:	0029      	movs	r1, r5
 801a17e:	f7e9 f83f 	bl	8003200 <__aeabi_dcmpun>
 801a182:	2800      	cmp	r0, #0
 801a184:	d115      	bne.n	801a1b2 <log10+0x4a>
 801a186:	2200      	movs	r2, #0
 801a188:	2300      	movs	r3, #0
 801a18a:	0020      	movs	r0, r4
 801a18c:	0029      	movs	r1, r5
 801a18e:	f7e6 f96d 	bl	800046c <__aeabi_dcmple>
 801a192:	2800      	cmp	r0, #0
 801a194:	d00d      	beq.n	801a1b2 <log10+0x4a>
 801a196:	2200      	movs	r2, #0
 801a198:	2300      	movs	r3, #0
 801a19a:	0020      	movs	r0, r4
 801a19c:	0029      	movs	r1, r5
 801a19e:	f7e6 f955 	bl	800044c <__aeabi_dcmpeq>
 801a1a2:	2800      	cmp	r0, #0
 801a1a4:	d008      	beq.n	801a1b8 <log10+0x50>
 801a1a6:	f7fd fec5 	bl	8017f34 <__errno>
 801a1aa:	2322      	movs	r3, #34	@ 0x22
 801a1ac:	2600      	movs	r6, #0
 801a1ae:	4f07      	ldr	r7, [pc, #28]	@ (801a1cc <log10+0x64>)
 801a1b0:	6003      	str	r3, [r0, #0]
 801a1b2:	0030      	movs	r0, r6
 801a1b4:	0039      	movs	r1, r7
 801a1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1b8:	f7fd febc 	bl	8017f34 <__errno>
 801a1bc:	2321      	movs	r3, #33	@ 0x21
 801a1be:	6003      	str	r3, [r0, #0]
 801a1c0:	4803      	ldr	r0, [pc, #12]	@ (801a1d0 <log10+0x68>)
 801a1c2:	f000 f871 	bl	801a2a8 <nan>
 801a1c6:	0006      	movs	r6, r0
 801a1c8:	000f      	movs	r7, r1
 801a1ca:	e7f2      	b.n	801a1b2 <log10+0x4a>
 801a1cc:	fff00000 	.word	0xfff00000
 801a1d0:	0801bd3e 	.word	0x0801bd3e

0801a1d4 <sqrt>:
 801a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1d6:	0004      	movs	r4, r0
 801a1d8:	000d      	movs	r5, r1
 801a1da:	f000 f875 	bl	801a2c8 <__ieee754_sqrt>
 801a1de:	0022      	movs	r2, r4
 801a1e0:	0006      	movs	r6, r0
 801a1e2:	000f      	movs	r7, r1
 801a1e4:	002b      	movs	r3, r5
 801a1e6:	0020      	movs	r0, r4
 801a1e8:	0029      	movs	r1, r5
 801a1ea:	f7e9 f809 	bl	8003200 <__aeabi_dcmpun>
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	d113      	bne.n	801a21a <sqrt+0x46>
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	0020      	movs	r0, r4
 801a1f8:	0029      	movs	r1, r5
 801a1fa:	f7e6 f92d 	bl	8000458 <__aeabi_dcmplt>
 801a1fe:	2800      	cmp	r0, #0
 801a200:	d00b      	beq.n	801a21a <sqrt+0x46>
 801a202:	f7fd fe97 	bl	8017f34 <__errno>
 801a206:	2321      	movs	r3, #33	@ 0x21
 801a208:	2200      	movs	r2, #0
 801a20a:	6003      	str	r3, [r0, #0]
 801a20c:	2300      	movs	r3, #0
 801a20e:	0010      	movs	r0, r2
 801a210:	0019      	movs	r1, r3
 801a212:	f7e7 fd4d 	bl	8001cb0 <__aeabi_ddiv>
 801a216:	0006      	movs	r6, r0
 801a218:	000f      	movs	r7, r1
 801a21a:	0030      	movs	r0, r6
 801a21c:	0039      	movs	r1, r7
 801a21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a220 <expf>:
 801a220:	b570      	push	{r4, r5, r6, lr}
 801a222:	1c04      	adds	r4, r0, #0
 801a224:	f000 fa2a 	bl	801a67c <__ieee754_expf>
 801a228:	1c05      	adds	r5, r0, #0
 801a22a:	1c20      	adds	r0, r4, #0
 801a22c:	f000 f842 	bl	801a2b4 <finitef>
 801a230:	2800      	cmp	r0, #0
 801a232:	d00b      	beq.n	801a24c <expf+0x2c>
 801a234:	490c      	ldr	r1, [pc, #48]	@ (801a268 <expf+0x48>)
 801a236:	1c20      	adds	r0, r4, #0
 801a238:	f7e6 f95c 	bl	80004f4 <__aeabi_fcmpgt>
 801a23c:	2800      	cmp	r0, #0
 801a23e:	d007      	beq.n	801a250 <expf+0x30>
 801a240:	f7fd fe78 	bl	8017f34 <__errno>
 801a244:	25ff      	movs	r5, #255	@ 0xff
 801a246:	2322      	movs	r3, #34	@ 0x22
 801a248:	05ed      	lsls	r5, r5, #23
 801a24a:	6003      	str	r3, [r0, #0]
 801a24c:	1c28      	adds	r0, r5, #0
 801a24e:	bd70      	pop	{r4, r5, r6, pc}
 801a250:	4906      	ldr	r1, [pc, #24]	@ (801a26c <expf+0x4c>)
 801a252:	1c20      	adds	r0, r4, #0
 801a254:	f7e6 f93a 	bl	80004cc <__aeabi_fcmplt>
 801a258:	2800      	cmp	r0, #0
 801a25a:	d0f7      	beq.n	801a24c <expf+0x2c>
 801a25c:	f7fd fe6a 	bl	8017f34 <__errno>
 801a260:	2322      	movs	r3, #34	@ 0x22
 801a262:	2500      	movs	r5, #0
 801a264:	6003      	str	r3, [r0, #0]
 801a266:	e7f1      	b.n	801a24c <expf+0x2c>
 801a268:	42b17217 	.word	0x42b17217
 801a26c:	c2cff1b5 	.word	0xc2cff1b5

0801a270 <sqrtf>:
 801a270:	b570      	push	{r4, r5, r6, lr}
 801a272:	1c05      	adds	r5, r0, #0
 801a274:	f000 f910 	bl	801a498 <__ieee754_sqrtf>
 801a278:	1c29      	adds	r1, r5, #0
 801a27a:	1c04      	adds	r4, r0, #0
 801a27c:	1c28      	adds	r0, r5, #0
 801a27e:	f7e7 f8ef 	bl	8001460 <__aeabi_fcmpun>
 801a282:	2800      	cmp	r0, #0
 801a284:	d10e      	bne.n	801a2a4 <sqrtf+0x34>
 801a286:	2100      	movs	r1, #0
 801a288:	1c28      	adds	r0, r5, #0
 801a28a:	f7e6 f91f 	bl	80004cc <__aeabi_fcmplt>
 801a28e:	2800      	cmp	r0, #0
 801a290:	d008      	beq.n	801a2a4 <sqrtf+0x34>
 801a292:	f7fd fe4f 	bl	8017f34 <__errno>
 801a296:	2321      	movs	r3, #33	@ 0x21
 801a298:	2100      	movs	r1, #0
 801a29a:	6003      	str	r3, [r0, #0]
 801a29c:	1c08      	adds	r0, r1, #0
 801a29e:	f7e6 fc17 	bl	8000ad0 <__aeabi_fdiv>
 801a2a2:	1c04      	adds	r4, r0, #0
 801a2a4:	1c20      	adds	r0, r4, #0
 801a2a6:	bd70      	pop	{r4, r5, r6, pc}

0801a2a8 <nan>:
 801a2a8:	2000      	movs	r0, #0
 801a2aa:	4901      	ldr	r1, [pc, #4]	@ (801a2b0 <nan+0x8>)
 801a2ac:	4770      	bx	lr
 801a2ae:	46c0      	nop			@ (mov r8, r8)
 801a2b0:	7ff80000 	.word	0x7ff80000

0801a2b4 <finitef>:
 801a2b4:	22ff      	movs	r2, #255	@ 0xff
 801a2b6:	0043      	lsls	r3, r0, #1
 801a2b8:	085b      	lsrs	r3, r3, #1
 801a2ba:	2001      	movs	r0, #1
 801a2bc:	05d2      	lsls	r2, r2, #23
 801a2be:	4293      	cmp	r3, r2
 801a2c0:	db00      	blt.n	801a2c4 <finitef+0x10>
 801a2c2:	2000      	movs	r0, #0
 801a2c4:	4770      	bx	lr
	...

0801a2c8 <__ieee754_sqrt>:
 801a2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2ca:	000a      	movs	r2, r1
 801a2cc:	000d      	movs	r5, r1
 801a2ce:	496d      	ldr	r1, [pc, #436]	@ (801a484 <__ieee754_sqrt+0x1bc>)
 801a2d0:	0004      	movs	r4, r0
 801a2d2:	0003      	movs	r3, r0
 801a2d4:	0008      	movs	r0, r1
 801a2d6:	b087      	sub	sp, #28
 801a2d8:	4028      	ands	r0, r5
 801a2da:	4288      	cmp	r0, r1
 801a2dc:	d111      	bne.n	801a302 <__ieee754_sqrt+0x3a>
 801a2de:	0022      	movs	r2, r4
 801a2e0:	002b      	movs	r3, r5
 801a2e2:	0020      	movs	r0, r4
 801a2e4:	0029      	movs	r1, r5
 801a2e6:	f7e8 f927 	bl	8002538 <__aeabi_dmul>
 801a2ea:	0002      	movs	r2, r0
 801a2ec:	000b      	movs	r3, r1
 801a2ee:	0020      	movs	r0, r4
 801a2f0:	0029      	movs	r1, r5
 801a2f2:	f7e7 f979 	bl	80015e8 <__aeabi_dadd>
 801a2f6:	0004      	movs	r4, r0
 801a2f8:	000d      	movs	r5, r1
 801a2fa:	0020      	movs	r0, r4
 801a2fc:	0029      	movs	r1, r5
 801a2fe:	b007      	add	sp, #28
 801a300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a302:	2d00      	cmp	r5, #0
 801a304:	dc11      	bgt.n	801a32a <__ieee754_sqrt+0x62>
 801a306:	0069      	lsls	r1, r5, #1
 801a308:	0849      	lsrs	r1, r1, #1
 801a30a:	4321      	orrs	r1, r4
 801a30c:	d0f5      	beq.n	801a2fa <__ieee754_sqrt+0x32>
 801a30e:	2000      	movs	r0, #0
 801a310:	4285      	cmp	r5, r0
 801a312:	d010      	beq.n	801a336 <__ieee754_sqrt+0x6e>
 801a314:	0022      	movs	r2, r4
 801a316:	002b      	movs	r3, r5
 801a318:	0020      	movs	r0, r4
 801a31a:	0029      	movs	r1, r5
 801a31c:	f7e8 fbd4 	bl	8002ac8 <__aeabi_dsub>
 801a320:	0002      	movs	r2, r0
 801a322:	000b      	movs	r3, r1
 801a324:	f7e7 fcc4 	bl	8001cb0 <__aeabi_ddiv>
 801a328:	e7e5      	b.n	801a2f6 <__ieee754_sqrt+0x2e>
 801a32a:	1528      	asrs	r0, r5, #20
 801a32c:	d115      	bne.n	801a35a <__ieee754_sqrt+0x92>
 801a32e:	2480      	movs	r4, #128	@ 0x80
 801a330:	2100      	movs	r1, #0
 801a332:	0364      	lsls	r4, r4, #13
 801a334:	e007      	b.n	801a346 <__ieee754_sqrt+0x7e>
 801a336:	0ada      	lsrs	r2, r3, #11
 801a338:	3815      	subs	r0, #21
 801a33a:	055b      	lsls	r3, r3, #21
 801a33c:	2a00      	cmp	r2, #0
 801a33e:	d0fa      	beq.n	801a336 <__ieee754_sqrt+0x6e>
 801a340:	e7f5      	b.n	801a32e <__ieee754_sqrt+0x66>
 801a342:	0052      	lsls	r2, r2, #1
 801a344:	3101      	adds	r1, #1
 801a346:	4222      	tst	r2, r4
 801a348:	d0fb      	beq.n	801a342 <__ieee754_sqrt+0x7a>
 801a34a:	1e4c      	subs	r4, r1, #1
 801a34c:	1b00      	subs	r0, r0, r4
 801a34e:	2420      	movs	r4, #32
 801a350:	001d      	movs	r5, r3
 801a352:	1a64      	subs	r4, r4, r1
 801a354:	40e5      	lsrs	r5, r4
 801a356:	408b      	lsls	r3, r1
 801a358:	432a      	orrs	r2, r5
 801a35a:	494b      	ldr	r1, [pc, #300]	@ (801a488 <__ieee754_sqrt+0x1c0>)
 801a35c:	0312      	lsls	r2, r2, #12
 801a35e:	1844      	adds	r4, r0, r1
 801a360:	2180      	movs	r1, #128	@ 0x80
 801a362:	0b12      	lsrs	r2, r2, #12
 801a364:	0349      	lsls	r1, r1, #13
 801a366:	4311      	orrs	r1, r2
 801a368:	07c0      	lsls	r0, r0, #31
 801a36a:	d403      	bmi.n	801a374 <__ieee754_sqrt+0xac>
 801a36c:	0fda      	lsrs	r2, r3, #31
 801a36e:	0049      	lsls	r1, r1, #1
 801a370:	1851      	adds	r1, r2, r1
 801a372:	005b      	lsls	r3, r3, #1
 801a374:	2500      	movs	r5, #0
 801a376:	1062      	asrs	r2, r4, #1
 801a378:	0049      	lsls	r1, r1, #1
 801a37a:	2480      	movs	r4, #128	@ 0x80
 801a37c:	9205      	str	r2, [sp, #20]
 801a37e:	0fda      	lsrs	r2, r3, #31
 801a380:	1852      	adds	r2, r2, r1
 801a382:	2016      	movs	r0, #22
 801a384:	0029      	movs	r1, r5
 801a386:	005b      	lsls	r3, r3, #1
 801a388:	03a4      	lsls	r4, r4, #14
 801a38a:	190e      	adds	r6, r1, r4
 801a38c:	4296      	cmp	r6, r2
 801a38e:	dc02      	bgt.n	801a396 <__ieee754_sqrt+0xce>
 801a390:	1931      	adds	r1, r6, r4
 801a392:	1b92      	subs	r2, r2, r6
 801a394:	192d      	adds	r5, r5, r4
 801a396:	0fde      	lsrs	r6, r3, #31
 801a398:	0052      	lsls	r2, r2, #1
 801a39a:	3801      	subs	r0, #1
 801a39c:	1992      	adds	r2, r2, r6
 801a39e:	005b      	lsls	r3, r3, #1
 801a3a0:	0864      	lsrs	r4, r4, #1
 801a3a2:	2800      	cmp	r0, #0
 801a3a4:	d1f1      	bne.n	801a38a <__ieee754_sqrt+0xc2>
 801a3a6:	2620      	movs	r6, #32
 801a3a8:	2780      	movs	r7, #128	@ 0x80
 801a3aa:	0004      	movs	r4, r0
 801a3ac:	9604      	str	r6, [sp, #16]
 801a3ae:	063f      	lsls	r7, r7, #24
 801a3b0:	19c6      	adds	r6, r0, r7
 801a3b2:	46b4      	mov	ip, r6
 801a3b4:	4291      	cmp	r1, r2
 801a3b6:	db02      	blt.n	801a3be <__ieee754_sqrt+0xf6>
 801a3b8:	d114      	bne.n	801a3e4 <__ieee754_sqrt+0x11c>
 801a3ba:	429e      	cmp	r6, r3
 801a3bc:	d812      	bhi.n	801a3e4 <__ieee754_sqrt+0x11c>
 801a3be:	4660      	mov	r0, ip
 801a3c0:	4666      	mov	r6, ip
 801a3c2:	19c0      	adds	r0, r0, r7
 801a3c4:	9100      	str	r1, [sp, #0]
 801a3c6:	2e00      	cmp	r6, #0
 801a3c8:	da03      	bge.n	801a3d2 <__ieee754_sqrt+0x10a>
 801a3ca:	43c6      	mvns	r6, r0
 801a3cc:	0ff6      	lsrs	r6, r6, #31
 801a3ce:	198e      	adds	r6, r1, r6
 801a3d0:	9600      	str	r6, [sp, #0]
 801a3d2:	1a52      	subs	r2, r2, r1
 801a3d4:	4563      	cmp	r3, ip
 801a3d6:	4189      	sbcs	r1, r1
 801a3d8:	4249      	negs	r1, r1
 801a3da:	1a52      	subs	r2, r2, r1
 801a3dc:	4661      	mov	r1, ip
 801a3de:	1a5b      	subs	r3, r3, r1
 801a3e0:	9900      	ldr	r1, [sp, #0]
 801a3e2:	19e4      	adds	r4, r4, r7
 801a3e4:	0fde      	lsrs	r6, r3, #31
 801a3e6:	0052      	lsls	r2, r2, #1
 801a3e8:	1992      	adds	r2, r2, r6
 801a3ea:	9e04      	ldr	r6, [sp, #16]
 801a3ec:	005b      	lsls	r3, r3, #1
 801a3ee:	3e01      	subs	r6, #1
 801a3f0:	087f      	lsrs	r7, r7, #1
 801a3f2:	9604      	str	r6, [sp, #16]
 801a3f4:	2e00      	cmp	r6, #0
 801a3f6:	d1db      	bne.n	801a3b0 <__ieee754_sqrt+0xe8>
 801a3f8:	431a      	orrs	r2, r3
 801a3fa:	d01f      	beq.n	801a43c <__ieee754_sqrt+0x174>
 801a3fc:	4e23      	ldr	r6, [pc, #140]	@ (801a48c <__ieee754_sqrt+0x1c4>)
 801a3fe:	4f24      	ldr	r7, [pc, #144]	@ (801a490 <__ieee754_sqrt+0x1c8>)
 801a400:	6830      	ldr	r0, [r6, #0]
 801a402:	6871      	ldr	r1, [r6, #4]
 801a404:	683a      	ldr	r2, [r7, #0]
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	9200      	str	r2, [sp, #0]
 801a40a:	9301      	str	r3, [sp, #4]
 801a40c:	6832      	ldr	r2, [r6, #0]
 801a40e:	6873      	ldr	r3, [r6, #4]
 801a410:	9202      	str	r2, [sp, #8]
 801a412:	9303      	str	r3, [sp, #12]
 801a414:	9a00      	ldr	r2, [sp, #0]
 801a416:	9b01      	ldr	r3, [sp, #4]
 801a418:	f7e8 fb56 	bl	8002ac8 <__aeabi_dsub>
 801a41c:	0002      	movs	r2, r0
 801a41e:	000b      	movs	r3, r1
 801a420:	9802      	ldr	r0, [sp, #8]
 801a422:	9903      	ldr	r1, [sp, #12]
 801a424:	f7e6 f822 	bl	800046c <__aeabi_dcmple>
 801a428:	2800      	cmp	r0, #0
 801a42a:	d007      	beq.n	801a43c <__ieee754_sqrt+0x174>
 801a42c:	6830      	ldr	r0, [r6, #0]
 801a42e:	6871      	ldr	r1, [r6, #4]
 801a430:	683a      	ldr	r2, [r7, #0]
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	1c67      	adds	r7, r4, #1
 801a436:	d10f      	bne.n	801a458 <__ieee754_sqrt+0x190>
 801a438:	9c04      	ldr	r4, [sp, #16]
 801a43a:	3501      	adds	r5, #1
 801a43c:	4b15      	ldr	r3, [pc, #84]	@ (801a494 <__ieee754_sqrt+0x1cc>)
 801a43e:	106a      	asrs	r2, r5, #1
 801a440:	18d2      	adds	r2, r2, r3
 801a442:	0863      	lsrs	r3, r4, #1
 801a444:	07ed      	lsls	r5, r5, #31
 801a446:	d502      	bpl.n	801a44e <__ieee754_sqrt+0x186>
 801a448:	2180      	movs	r1, #128	@ 0x80
 801a44a:	0609      	lsls	r1, r1, #24
 801a44c:	430b      	orrs	r3, r1
 801a44e:	9905      	ldr	r1, [sp, #20]
 801a450:	001c      	movs	r4, r3
 801a452:	0509      	lsls	r1, r1, #20
 801a454:	188d      	adds	r5, r1, r2
 801a456:	e750      	b.n	801a2fa <__ieee754_sqrt+0x32>
 801a458:	f7e7 f8c6 	bl	80015e8 <__aeabi_dadd>
 801a45c:	6877      	ldr	r7, [r6, #4]
 801a45e:	6836      	ldr	r6, [r6, #0]
 801a460:	0002      	movs	r2, r0
 801a462:	000b      	movs	r3, r1
 801a464:	0030      	movs	r0, r6
 801a466:	0039      	movs	r1, r7
 801a468:	f7e5 fff6 	bl	8000458 <__aeabi_dcmplt>
 801a46c:	2800      	cmp	r0, #0
 801a46e:	d004      	beq.n	801a47a <__ieee754_sqrt+0x1b2>
 801a470:	3402      	adds	r4, #2
 801a472:	4263      	negs	r3, r4
 801a474:	4163      	adcs	r3, r4
 801a476:	18ed      	adds	r5, r5, r3
 801a478:	e7e0      	b.n	801a43c <__ieee754_sqrt+0x174>
 801a47a:	2301      	movs	r3, #1
 801a47c:	3401      	adds	r4, #1
 801a47e:	439c      	bics	r4, r3
 801a480:	e7dc      	b.n	801a43c <__ieee754_sqrt+0x174>
 801a482:	46c0      	nop			@ (mov r8, r8)
 801a484:	7ff00000 	.word	0x7ff00000
 801a488:	fffffc01 	.word	0xfffffc01
 801a48c:	200003f0 	.word	0x200003f0
 801a490:	200003e8 	.word	0x200003e8
 801a494:	3fe00000 	.word	0x3fe00000

0801a498 <__ieee754_sqrtf>:
 801a498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a49a:	0003      	movs	r3, r0
 801a49c:	0042      	lsls	r2, r0, #1
 801a49e:	1c04      	adds	r4, r0, #0
 801a4a0:	20ff      	movs	r0, #255	@ 0xff
 801a4a2:	0852      	lsrs	r2, r2, #1
 801a4a4:	05c0      	lsls	r0, r0, #23
 801a4a6:	4282      	cmp	r2, r0
 801a4a8:	d30a      	bcc.n	801a4c0 <__ieee754_sqrtf+0x28>
 801a4aa:	1c21      	adds	r1, r4, #0
 801a4ac:	1c20      	adds	r0, r4, #0
 801a4ae:	f7e6 fcf5 	bl	8000e9c <__aeabi_fmul>
 801a4b2:	1c01      	adds	r1, r0, #0
 801a4b4:	1c20      	adds	r0, r4, #0
 801a4b6:	f7e6 f981 	bl	80007bc <__aeabi_fadd>
 801a4ba:	1c04      	adds	r4, r0, #0
 801a4bc:	1c20      	adds	r0, r4, #0
 801a4be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a4c0:	2a00      	cmp	r2, #0
 801a4c2:	d0fb      	beq.n	801a4bc <__ieee754_sqrtf+0x24>
 801a4c4:	2c00      	cmp	r4, #0
 801a4c6:	da07      	bge.n	801a4d8 <__ieee754_sqrtf+0x40>
 801a4c8:	1c21      	adds	r1, r4, #0
 801a4ca:	1c20      	adds	r0, r4, #0
 801a4cc:	f7e6 fe24 	bl	8001118 <__aeabi_fsub>
 801a4d0:	1c01      	adds	r1, r0, #0
 801a4d2:	f7e6 fafd 	bl	8000ad0 <__aeabi_fdiv>
 801a4d6:	e7f0      	b.n	801a4ba <__ieee754_sqrtf+0x22>
 801a4d8:	0022      	movs	r2, r4
 801a4da:	15e1      	asrs	r1, r4, #23
 801a4dc:	4002      	ands	r2, r0
 801a4de:	4204      	tst	r4, r0
 801a4e0:	d046      	beq.n	801a570 <__ieee754_sqrtf+0xd8>
 801a4e2:	2280      	movs	r2, #128	@ 0x80
 801a4e4:	000f      	movs	r7, r1
 801a4e6:	025b      	lsls	r3, r3, #9
 801a4e8:	0a5b      	lsrs	r3, r3, #9
 801a4ea:	0412      	lsls	r2, r2, #16
 801a4ec:	3f7f      	subs	r7, #127	@ 0x7f
 801a4ee:	4313      	orrs	r3, r2
 801a4f0:	07c9      	lsls	r1, r1, #31
 801a4f2:	d400      	bmi.n	801a4f6 <__ieee754_sqrtf+0x5e>
 801a4f4:	005b      	lsls	r3, r3, #1
 801a4f6:	2400      	movs	r4, #0
 801a4f8:	2180      	movs	r1, #128	@ 0x80
 801a4fa:	2019      	movs	r0, #25
 801a4fc:	0026      	movs	r6, r4
 801a4fe:	107f      	asrs	r7, r7, #1
 801a500:	005b      	lsls	r3, r3, #1
 801a502:	0449      	lsls	r1, r1, #17
 801a504:	1875      	adds	r5, r6, r1
 801a506:	001a      	movs	r2, r3
 801a508:	429d      	cmp	r5, r3
 801a50a:	dc02      	bgt.n	801a512 <__ieee754_sqrtf+0x7a>
 801a50c:	186e      	adds	r6, r5, r1
 801a50e:	1b5a      	subs	r2, r3, r5
 801a510:	1864      	adds	r4, r4, r1
 801a512:	3801      	subs	r0, #1
 801a514:	0053      	lsls	r3, r2, #1
 801a516:	0849      	lsrs	r1, r1, #1
 801a518:	2800      	cmp	r0, #0
 801a51a:	d1f3      	bne.n	801a504 <__ieee754_sqrtf+0x6c>
 801a51c:	2a00      	cmp	r2, #0
 801a51e:	d019      	beq.n	801a554 <__ieee754_sqrtf+0xbc>
 801a520:	4d17      	ldr	r5, [pc, #92]	@ (801a580 <__ieee754_sqrtf+0xe8>)
 801a522:	4e18      	ldr	r6, [pc, #96]	@ (801a584 <__ieee754_sqrtf+0xec>)
 801a524:	6828      	ldr	r0, [r5, #0]
 801a526:	6831      	ldr	r1, [r6, #0]
 801a528:	682b      	ldr	r3, [r5, #0]
 801a52a:	9301      	str	r3, [sp, #4]
 801a52c:	f7e6 fdf4 	bl	8001118 <__aeabi_fsub>
 801a530:	1c01      	adds	r1, r0, #0
 801a532:	9801      	ldr	r0, [sp, #4]
 801a534:	f7e5 ffd4 	bl	80004e0 <__aeabi_fcmple>
 801a538:	2800      	cmp	r0, #0
 801a53a:	d00b      	beq.n	801a554 <__ieee754_sqrtf+0xbc>
 801a53c:	6828      	ldr	r0, [r5, #0]
 801a53e:	6831      	ldr	r1, [r6, #0]
 801a540:	f7e6 f93c 	bl	80007bc <__aeabi_fadd>
 801a544:	682d      	ldr	r5, [r5, #0]
 801a546:	1c01      	adds	r1, r0, #0
 801a548:	1c28      	adds	r0, r5, #0
 801a54a:	f7e5 ffbf 	bl	80004cc <__aeabi_fcmplt>
 801a54e:	2800      	cmp	r0, #0
 801a550:	d011      	beq.n	801a576 <__ieee754_sqrtf+0xde>
 801a552:	3402      	adds	r4, #2
 801a554:	23fc      	movs	r3, #252	@ 0xfc
 801a556:	1064      	asrs	r4, r4, #1
 801a558:	059b      	lsls	r3, r3, #22
 801a55a:	18e3      	adds	r3, r4, r3
 801a55c:	05fc      	lsls	r4, r7, #23
 801a55e:	18e4      	adds	r4, r4, r3
 801a560:	e7ac      	b.n	801a4bc <__ieee754_sqrtf+0x24>
 801a562:	005b      	lsls	r3, r3, #1
 801a564:	3201      	adds	r2, #1
 801a566:	4203      	tst	r3, r0
 801a568:	d0fb      	beq.n	801a562 <__ieee754_sqrtf+0xca>
 801a56a:	3a01      	subs	r2, #1
 801a56c:	1a89      	subs	r1, r1, r2
 801a56e:	e7b8      	b.n	801a4e2 <__ieee754_sqrtf+0x4a>
 801a570:	2080      	movs	r0, #128	@ 0x80
 801a572:	0400      	lsls	r0, r0, #16
 801a574:	e7f7      	b.n	801a566 <__ieee754_sqrtf+0xce>
 801a576:	2301      	movs	r3, #1
 801a578:	3401      	adds	r4, #1
 801a57a:	439c      	bics	r4, r3
 801a57c:	e7ea      	b.n	801a554 <__ieee754_sqrtf+0xbc>
 801a57e:	46c0      	nop			@ (mov r8, r8)
 801a580:	200003fc 	.word	0x200003fc
 801a584:	200003f8 	.word	0x200003f8

0801a588 <__ieee754_log10>:
 801a588:	2280      	movs	r2, #128	@ 0x80
 801a58a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a58c:	000b      	movs	r3, r1
 801a58e:	0004      	movs	r4, r0
 801a590:	000d      	movs	r5, r1
 801a592:	b085      	sub	sp, #20
 801a594:	0352      	lsls	r2, r2, #13
 801a596:	4291      	cmp	r1, r2
 801a598:	da26      	bge.n	801a5e8 <__ieee754_log10+0x60>
 801a59a:	004a      	lsls	r2, r1, #1
 801a59c:	0852      	lsrs	r2, r2, #1
 801a59e:	4302      	orrs	r2, r0
 801a5a0:	d107      	bne.n	801a5b2 <__ieee754_log10+0x2a>
 801a5a2:	2200      	movs	r2, #0
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	2000      	movs	r0, #0
 801a5a8:	4929      	ldr	r1, [pc, #164]	@ (801a650 <__ieee754_log10+0xc8>)
 801a5aa:	f7e7 fb81 	bl	8001cb0 <__aeabi_ddiv>
 801a5ae:	b005      	add	sp, #20
 801a5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5b2:	2900      	cmp	r1, #0
 801a5b4:	da05      	bge.n	801a5c2 <__ieee754_log10+0x3a>
 801a5b6:	0002      	movs	r2, r0
 801a5b8:	f7e8 fa86 	bl	8002ac8 <__aeabi_dsub>
 801a5bc:	2200      	movs	r2, #0
 801a5be:	2300      	movs	r3, #0
 801a5c0:	e7f3      	b.n	801a5aa <__ieee754_log10+0x22>
 801a5c2:	2200      	movs	r2, #0
 801a5c4:	4b23      	ldr	r3, [pc, #140]	@ (801a654 <__ieee754_log10+0xcc>)
 801a5c6:	f7e7 ffb7 	bl	8002538 <__aeabi_dmul>
 801a5ca:	2236      	movs	r2, #54	@ 0x36
 801a5cc:	0004      	movs	r4, r0
 801a5ce:	000d      	movs	r5, r1
 801a5d0:	000b      	movs	r3, r1
 801a5d2:	4252      	negs	r2, r2
 801a5d4:	4920      	ldr	r1, [pc, #128]	@ (801a658 <__ieee754_log10+0xd0>)
 801a5d6:	428b      	cmp	r3, r1
 801a5d8:	dd08      	ble.n	801a5ec <__ieee754_log10+0x64>
 801a5da:	0022      	movs	r2, r4
 801a5dc:	002b      	movs	r3, r5
 801a5de:	0020      	movs	r0, r4
 801a5e0:	0029      	movs	r1, r5
 801a5e2:	f7e7 f801 	bl	80015e8 <__aeabi_dadd>
 801a5e6:	e7e2      	b.n	801a5ae <__ieee754_log10+0x26>
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	e7f3      	b.n	801a5d4 <__ieee754_log10+0x4c>
 801a5ec:	491b      	ldr	r1, [pc, #108]	@ (801a65c <__ieee754_log10+0xd4>)
 801a5ee:	1518      	asrs	r0, r3, #20
 801a5f0:	1840      	adds	r0, r0, r1
 801a5f2:	1880      	adds	r0, r0, r2
 801a5f4:	0fc2      	lsrs	r2, r0, #31
 801a5f6:	031b      	lsls	r3, r3, #12
 801a5f8:	0b1b      	lsrs	r3, r3, #12
 801a5fa:	1880      	adds	r0, r0, r2
 801a5fc:	9203      	str	r2, [sp, #12]
 801a5fe:	9300      	str	r3, [sp, #0]
 801a600:	f7e8 fe5c 	bl	80032bc <__aeabi_i2d>
 801a604:	9a03      	ldr	r2, [sp, #12]
 801a606:	4b16      	ldr	r3, [pc, #88]	@ (801a660 <__ieee754_log10+0xd8>)
 801a608:	0006      	movs	r6, r0
 801a60a:	1a9b      	subs	r3, r3, r2
 801a60c:	9a00      	ldr	r2, [sp, #0]
 801a60e:	051b      	lsls	r3, r3, #20
 801a610:	431a      	orrs	r2, r3
 801a612:	0015      	movs	r5, r2
 801a614:	4b13      	ldr	r3, [pc, #76]	@ (801a664 <__ieee754_log10+0xdc>)
 801a616:	4a14      	ldr	r2, [pc, #80]	@ (801a668 <__ieee754_log10+0xe0>)
 801a618:	000f      	movs	r7, r1
 801a61a:	f7e7 ff8d 	bl	8002538 <__aeabi_dmul>
 801a61e:	9000      	str	r0, [sp, #0]
 801a620:	9101      	str	r1, [sp, #4]
 801a622:	0020      	movs	r0, r4
 801a624:	0029      	movs	r1, r5
 801a626:	f000 f93b 	bl	801a8a0 <__ieee754_log>
 801a62a:	4a10      	ldr	r2, [pc, #64]	@ (801a66c <__ieee754_log10+0xe4>)
 801a62c:	4b10      	ldr	r3, [pc, #64]	@ (801a670 <__ieee754_log10+0xe8>)
 801a62e:	f7e7 ff83 	bl	8002538 <__aeabi_dmul>
 801a632:	9a00      	ldr	r2, [sp, #0]
 801a634:	9b01      	ldr	r3, [sp, #4]
 801a636:	f7e6 ffd7 	bl	80015e8 <__aeabi_dadd>
 801a63a:	4a0e      	ldr	r2, [pc, #56]	@ (801a674 <__ieee754_log10+0xec>)
 801a63c:	4b0e      	ldr	r3, [pc, #56]	@ (801a678 <__ieee754_log10+0xf0>)
 801a63e:	0004      	movs	r4, r0
 801a640:	000d      	movs	r5, r1
 801a642:	0030      	movs	r0, r6
 801a644:	0039      	movs	r1, r7
 801a646:	f7e7 ff77 	bl	8002538 <__aeabi_dmul>
 801a64a:	0002      	movs	r2, r0
 801a64c:	000b      	movs	r3, r1
 801a64e:	e7c6      	b.n	801a5de <__ieee754_log10+0x56>
 801a650:	c3500000 	.word	0xc3500000
 801a654:	43500000 	.word	0x43500000
 801a658:	7fefffff 	.word	0x7fefffff
 801a65c:	fffffc01 	.word	0xfffffc01
 801a660:	000003ff 	.word	0x000003ff
 801a664:	3d59fef3 	.word	0x3d59fef3
 801a668:	11f12b36 	.word	0x11f12b36
 801a66c:	1526e50e 	.word	0x1526e50e
 801a670:	3fdbcb7b 	.word	0x3fdbcb7b
 801a674:	509f6000 	.word	0x509f6000
 801a678:	3fd34413 	.word	0x3fd34413

0801a67c <__ieee754_expf>:
 801a67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a67e:	21ff      	movs	r1, #255	@ 0xff
 801a680:	0043      	lsls	r3, r0, #1
 801a682:	1c04      	adds	r4, r0, #0
 801a684:	085b      	lsrs	r3, r3, #1
 801a686:	05c9      	lsls	r1, r1, #23
 801a688:	428b      	cmp	r3, r1
 801a68a:	d904      	bls.n	801a696 <__ieee754_expf+0x1a>
 801a68c:	1c01      	adds	r1, r0, #0
 801a68e:	1c20      	adds	r0, r4, #0
 801a690:	f7e6 f894 	bl	80007bc <__aeabi_fadd>
 801a694:	e00d      	b.n	801a6b2 <__ieee754_expf+0x36>
 801a696:	0fc6      	lsrs	r6, r0, #31
 801a698:	428b      	cmp	r3, r1
 801a69a:	d104      	bne.n	801a6a6 <__ieee754_expf+0x2a>
 801a69c:	2e00      	cmp	r6, #0
 801a69e:	d000      	beq.n	801a6a2 <__ieee754_expf+0x26>
 801a6a0:	e0ba      	b.n	801a818 <__ieee754_expf+0x19c>
 801a6a2:	1c20      	adds	r0, r4, #0
 801a6a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a6a6:	495d      	ldr	r1, [pc, #372]	@ (801a81c <__ieee754_expf+0x1a0>)
 801a6a8:	4288      	cmp	r0, r1
 801a6aa:	dd04      	ble.n	801a6b6 <__ieee754_expf+0x3a>
 801a6ac:	2000      	movs	r0, #0
 801a6ae:	f000 f8f1 	bl	801a894 <__math_oflowf>
 801a6b2:	1c04      	adds	r4, r0, #0
 801a6b4:	e7f5      	b.n	801a6a2 <__ieee754_expf+0x26>
 801a6b6:	2800      	cmp	r0, #0
 801a6b8:	da06      	bge.n	801a6c8 <__ieee754_expf+0x4c>
 801a6ba:	4a59      	ldr	r2, [pc, #356]	@ (801a820 <__ieee754_expf+0x1a4>)
 801a6bc:	4293      	cmp	r3, r2
 801a6be:	d903      	bls.n	801a6c8 <__ieee754_expf+0x4c>
 801a6c0:	2000      	movs	r0, #0
 801a6c2:	f000 f8e1 	bl	801a888 <__math_uflowf>
 801a6c6:	e7f4      	b.n	801a6b2 <__ieee754_expf+0x36>
 801a6c8:	4a56      	ldr	r2, [pc, #344]	@ (801a824 <__ieee754_expf+0x1a8>)
 801a6ca:	4293      	cmp	r3, r2
 801a6cc:	d96e      	bls.n	801a7ac <__ieee754_expf+0x130>
 801a6ce:	4a56      	ldr	r2, [pc, #344]	@ (801a828 <__ieee754_expf+0x1ac>)
 801a6d0:	00b5      	lsls	r5, r6, #2
 801a6d2:	4293      	cmp	r3, r2
 801a6d4:	d84e      	bhi.n	801a774 <__ieee754_expf+0xf8>
 801a6d6:	4b55      	ldr	r3, [pc, #340]	@ (801a82c <__ieee754_expf+0x1b0>)
 801a6d8:	1c20      	adds	r0, r4, #0
 801a6da:	5959      	ldr	r1, [r3, r5]
 801a6dc:	f7e6 fd1c 	bl	8001118 <__aeabi_fsub>
 801a6e0:	4b53      	ldr	r3, [pc, #332]	@ (801a830 <__ieee754_expf+0x1b4>)
 801a6e2:	1c07      	adds	r7, r0, #0
 801a6e4:	595b      	ldr	r3, [r3, r5]
 801a6e6:	2501      	movs	r5, #1
 801a6e8:	1bad      	subs	r5, r5, r6
 801a6ea:	9300      	str	r3, [sp, #0]
 801a6ec:	1bad      	subs	r5, r5, r6
 801a6ee:	9900      	ldr	r1, [sp, #0]
 801a6f0:	1c38      	adds	r0, r7, #0
 801a6f2:	f7e6 fd11 	bl	8001118 <__aeabi_fsub>
 801a6f6:	1c04      	adds	r4, r0, #0
 801a6f8:	1c21      	adds	r1, r4, #0
 801a6fa:	1c20      	adds	r0, r4, #0
 801a6fc:	f7e6 fbce 	bl	8000e9c <__aeabi_fmul>
 801a700:	494c      	ldr	r1, [pc, #304]	@ (801a834 <__ieee754_expf+0x1b8>)
 801a702:	1c06      	adds	r6, r0, #0
 801a704:	f7e6 fbca 	bl	8000e9c <__aeabi_fmul>
 801a708:	494b      	ldr	r1, [pc, #300]	@ (801a838 <__ieee754_expf+0x1bc>)
 801a70a:	f7e6 fd05 	bl	8001118 <__aeabi_fsub>
 801a70e:	1c31      	adds	r1, r6, #0
 801a710:	f7e6 fbc4 	bl	8000e9c <__aeabi_fmul>
 801a714:	4949      	ldr	r1, [pc, #292]	@ (801a83c <__ieee754_expf+0x1c0>)
 801a716:	f7e6 f851 	bl	80007bc <__aeabi_fadd>
 801a71a:	1c31      	adds	r1, r6, #0
 801a71c:	f7e6 fbbe 	bl	8000e9c <__aeabi_fmul>
 801a720:	4947      	ldr	r1, [pc, #284]	@ (801a840 <__ieee754_expf+0x1c4>)
 801a722:	f7e6 fcf9 	bl	8001118 <__aeabi_fsub>
 801a726:	1c31      	adds	r1, r6, #0
 801a728:	f7e6 fbb8 	bl	8000e9c <__aeabi_fmul>
 801a72c:	4945      	ldr	r1, [pc, #276]	@ (801a844 <__ieee754_expf+0x1c8>)
 801a72e:	f7e6 f845 	bl	80007bc <__aeabi_fadd>
 801a732:	1c31      	adds	r1, r6, #0
 801a734:	f7e6 fbb2 	bl	8000e9c <__aeabi_fmul>
 801a738:	1c01      	adds	r1, r0, #0
 801a73a:	1c20      	adds	r0, r4, #0
 801a73c:	f7e6 fcec 	bl	8001118 <__aeabi_fsub>
 801a740:	1c01      	adds	r1, r0, #0
 801a742:	1c06      	adds	r6, r0, #0
 801a744:	1c20      	adds	r0, r4, #0
 801a746:	f7e6 fba9 	bl	8000e9c <__aeabi_fmul>
 801a74a:	9001      	str	r0, [sp, #4]
 801a74c:	2d00      	cmp	r5, #0
 801a74e:	d140      	bne.n	801a7d2 <__ieee754_expf+0x156>
 801a750:	2180      	movs	r1, #128	@ 0x80
 801a752:	1c30      	adds	r0, r6, #0
 801a754:	05c9      	lsls	r1, r1, #23
 801a756:	f7e6 fcdf 	bl	8001118 <__aeabi_fsub>
 801a75a:	1c01      	adds	r1, r0, #0
 801a75c:	9801      	ldr	r0, [sp, #4]
 801a75e:	f7e6 f9b7 	bl	8000ad0 <__aeabi_fdiv>
 801a762:	1c21      	adds	r1, r4, #0
 801a764:	f7e6 fcd8 	bl	8001118 <__aeabi_fsub>
 801a768:	1c01      	adds	r1, r0, #0
 801a76a:	20fe      	movs	r0, #254	@ 0xfe
 801a76c:	0580      	lsls	r0, r0, #22
 801a76e:	f7e6 fcd3 	bl	8001118 <__aeabi_fsub>
 801a772:	e79e      	b.n	801a6b2 <__ieee754_expf+0x36>
 801a774:	4934      	ldr	r1, [pc, #208]	@ (801a848 <__ieee754_expf+0x1cc>)
 801a776:	1c20      	adds	r0, r4, #0
 801a778:	f7e6 fb90 	bl	8000e9c <__aeabi_fmul>
 801a77c:	4b33      	ldr	r3, [pc, #204]	@ (801a84c <__ieee754_expf+0x1d0>)
 801a77e:	5959      	ldr	r1, [r3, r5]
 801a780:	f7e6 f81c 	bl	80007bc <__aeabi_fadd>
 801a784:	f7e6 fe82 	bl	800148c <__aeabi_f2iz>
 801a788:	0005      	movs	r5, r0
 801a78a:	f7e6 fe9f 	bl	80014cc <__aeabi_i2f>
 801a78e:	4930      	ldr	r1, [pc, #192]	@ (801a850 <__ieee754_expf+0x1d4>)
 801a790:	1c06      	adds	r6, r0, #0
 801a792:	f7e6 fb83 	bl	8000e9c <__aeabi_fmul>
 801a796:	1c01      	adds	r1, r0, #0
 801a798:	1c20      	adds	r0, r4, #0
 801a79a:	f7e6 fcbd 	bl	8001118 <__aeabi_fsub>
 801a79e:	492d      	ldr	r1, [pc, #180]	@ (801a854 <__ieee754_expf+0x1d8>)
 801a7a0:	1c07      	adds	r7, r0, #0
 801a7a2:	1c30      	adds	r0, r6, #0
 801a7a4:	f7e6 fb7a 	bl	8000e9c <__aeabi_fmul>
 801a7a8:	9000      	str	r0, [sp, #0]
 801a7aa:	e7a0      	b.n	801a6ee <__ieee754_expf+0x72>
 801a7ac:	22d0      	movs	r2, #208	@ 0xd0
 801a7ae:	0592      	lsls	r2, r2, #22
 801a7b0:	4293      	cmp	r3, r2
 801a7b2:	d20c      	bcs.n	801a7ce <__ieee754_expf+0x152>
 801a7b4:	4928      	ldr	r1, [pc, #160]	@ (801a858 <__ieee754_expf+0x1dc>)
 801a7b6:	1c20      	adds	r0, r4, #0
 801a7b8:	f7e6 f800 	bl	80007bc <__aeabi_fadd>
 801a7bc:	21fe      	movs	r1, #254	@ 0xfe
 801a7be:	0589      	lsls	r1, r1, #22
 801a7c0:	f7e5 fe98 	bl	80004f4 <__aeabi_fcmpgt>
 801a7c4:	1e05      	subs	r5, r0, #0
 801a7c6:	d097      	beq.n	801a6f8 <__ieee754_expf+0x7c>
 801a7c8:	21fe      	movs	r1, #254	@ 0xfe
 801a7ca:	0589      	lsls	r1, r1, #22
 801a7cc:	e75f      	b.n	801a68e <__ieee754_expf+0x12>
 801a7ce:	2500      	movs	r5, #0
 801a7d0:	e792      	b.n	801a6f8 <__ieee754_expf+0x7c>
 801a7d2:	2080      	movs	r0, #128	@ 0x80
 801a7d4:	1c31      	adds	r1, r6, #0
 801a7d6:	05c0      	lsls	r0, r0, #23
 801a7d8:	f7e6 fc9e 	bl	8001118 <__aeabi_fsub>
 801a7dc:	1c01      	adds	r1, r0, #0
 801a7de:	9801      	ldr	r0, [sp, #4]
 801a7e0:	f7e6 f976 	bl	8000ad0 <__aeabi_fdiv>
 801a7e4:	1c01      	adds	r1, r0, #0
 801a7e6:	9800      	ldr	r0, [sp, #0]
 801a7e8:	f7e6 fc96 	bl	8001118 <__aeabi_fsub>
 801a7ec:	1c39      	adds	r1, r7, #0
 801a7ee:	f7e6 fc93 	bl	8001118 <__aeabi_fsub>
 801a7f2:	1c01      	adds	r1, r0, #0
 801a7f4:	20fe      	movs	r0, #254	@ 0xfe
 801a7f6:	0580      	lsls	r0, r0, #22
 801a7f8:	f7e6 fc8e 	bl	8001118 <__aeabi_fsub>
 801a7fc:	002b      	movs	r3, r5
 801a7fe:	337d      	adds	r3, #125	@ 0x7d
 801a800:	db02      	blt.n	801a808 <__ieee754_expf+0x18c>
 801a802:	05ec      	lsls	r4, r5, #23
 801a804:	1824      	adds	r4, r4, r0
 801a806:	e74c      	b.n	801a6a2 <__ieee754_expf+0x26>
 801a808:	21d8      	movs	r1, #216	@ 0xd8
 801a80a:	3564      	adds	r5, #100	@ 0x64
 801a80c:	05ed      	lsls	r5, r5, #23
 801a80e:	1828      	adds	r0, r5, r0
 801a810:	0509      	lsls	r1, r1, #20
 801a812:	f7e6 fb43 	bl	8000e9c <__aeabi_fmul>
 801a816:	e74c      	b.n	801a6b2 <__ieee754_expf+0x36>
 801a818:	2400      	movs	r4, #0
 801a81a:	e742      	b.n	801a6a2 <__ieee754_expf+0x26>
 801a81c:	42b17217 	.word	0x42b17217
 801a820:	42cff1b5 	.word	0x42cff1b5
 801a824:	3eb17218 	.word	0x3eb17218
 801a828:	3f851591 	.word	0x3f851591
 801a82c:	0801be48 	.word	0x0801be48
 801a830:	0801be40 	.word	0x0801be40
 801a834:	3331bb4c 	.word	0x3331bb4c
 801a838:	35ddea0e 	.word	0x35ddea0e
 801a83c:	388ab355 	.word	0x388ab355
 801a840:	3b360b61 	.word	0x3b360b61
 801a844:	3e2aaaab 	.word	0x3e2aaaab
 801a848:	3fb8aa3b 	.word	0x3fb8aa3b
 801a84c:	0801be50 	.word	0x0801be50
 801a850:	3f317180 	.word	0x3f317180
 801a854:	3717f7d1 	.word	0x3717f7d1
 801a858:	7149f2ca 	.word	0x7149f2ca

0801a85c <with_errnof>:
 801a85c:	b570      	push	{r4, r5, r6, lr}
 801a85e:	000d      	movs	r5, r1
 801a860:	1c04      	adds	r4, r0, #0
 801a862:	f7fd fb67 	bl	8017f34 <__errno>
 801a866:	6005      	str	r5, [r0, #0]
 801a868:	1c20      	adds	r0, r4, #0
 801a86a:	bd70      	pop	{r4, r5, r6, pc}

0801a86c <xflowf>:
 801a86c:	b510      	push	{r4, lr}
 801a86e:	1c0b      	adds	r3, r1, #0
 801a870:	2800      	cmp	r0, #0
 801a872:	d002      	beq.n	801a87a <xflowf+0xe>
 801a874:	2380      	movs	r3, #128	@ 0x80
 801a876:	061b      	lsls	r3, r3, #24
 801a878:	18cb      	adds	r3, r1, r3
 801a87a:	1c18      	adds	r0, r3, #0
 801a87c:	f7e6 fb0e 	bl	8000e9c <__aeabi_fmul>
 801a880:	2122      	movs	r1, #34	@ 0x22
 801a882:	f7ff ffeb 	bl	801a85c <with_errnof>
 801a886:	bd10      	pop	{r4, pc}

0801a888 <__math_uflowf>:
 801a888:	2180      	movs	r1, #128	@ 0x80
 801a88a:	b510      	push	{r4, lr}
 801a88c:	0549      	lsls	r1, r1, #21
 801a88e:	f7ff ffed 	bl	801a86c <xflowf>
 801a892:	bd10      	pop	{r4, pc}

0801a894 <__math_oflowf>:
 801a894:	21e0      	movs	r1, #224	@ 0xe0
 801a896:	b510      	push	{r4, lr}
 801a898:	05c9      	lsls	r1, r1, #23
 801a89a:	f7ff ffe7 	bl	801a86c <xflowf>
 801a89e:	bd10      	pop	{r4, pc}

0801a8a0 <__ieee754_log>:
 801a8a0:	2380      	movs	r3, #128	@ 0x80
 801a8a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8a4:	035b      	lsls	r3, r3, #13
 801a8a6:	000e      	movs	r6, r1
 801a8a8:	b08d      	sub	sp, #52	@ 0x34
 801a8aa:	4299      	cmp	r1, r3
 801a8ac:	da23      	bge.n	801a8f6 <__ieee754_log+0x56>
 801a8ae:	004b      	lsls	r3, r1, #1
 801a8b0:	085b      	lsrs	r3, r3, #1
 801a8b2:	4303      	orrs	r3, r0
 801a8b4:	d107      	bne.n	801a8c6 <__ieee754_log+0x26>
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	2000      	movs	r0, #0
 801a8bc:	49b4      	ldr	r1, [pc, #720]	@ (801ab90 <__ieee754_log+0x2f0>)
 801a8be:	f7e7 f9f7 	bl	8001cb0 <__aeabi_ddiv>
 801a8c2:	b00d      	add	sp, #52	@ 0x34
 801a8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a8c6:	2900      	cmp	r1, #0
 801a8c8:	da06      	bge.n	801a8d8 <__ieee754_log+0x38>
 801a8ca:	0002      	movs	r2, r0
 801a8cc:	000b      	movs	r3, r1
 801a8ce:	f7e8 f8fb 	bl	8002ac8 <__aeabi_dsub>
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	e7f2      	b.n	801a8be <__ieee754_log+0x1e>
 801a8d8:	4bae      	ldr	r3, [pc, #696]	@ (801ab94 <__ieee754_log+0x2f4>)
 801a8da:	2200      	movs	r2, #0
 801a8dc:	f7e7 fe2c 	bl	8002538 <__aeabi_dmul>
 801a8e0:	2336      	movs	r3, #54	@ 0x36
 801a8e2:	000e      	movs	r6, r1
 801a8e4:	425b      	negs	r3, r3
 801a8e6:	4aac      	ldr	r2, [pc, #688]	@ (801ab98 <__ieee754_log+0x2f8>)
 801a8e8:	4296      	cmp	r6, r2
 801a8ea:	dd06      	ble.n	801a8fa <__ieee754_log+0x5a>
 801a8ec:	0002      	movs	r2, r0
 801a8ee:	000b      	movs	r3, r1
 801a8f0:	f7e6 fe7a 	bl	80015e8 <__aeabi_dadd>
 801a8f4:	e7e5      	b.n	801a8c2 <__ieee754_log+0x22>
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	e7f5      	b.n	801a8e6 <__ieee754_log+0x46>
 801a8fa:	4ca8      	ldr	r4, [pc, #672]	@ (801ab9c <__ieee754_log+0x2fc>)
 801a8fc:	1532      	asrs	r2, r6, #20
 801a8fe:	1912      	adds	r2, r2, r4
 801a900:	0336      	lsls	r6, r6, #12
 801a902:	4ca7      	ldr	r4, [pc, #668]	@ (801aba0 <__ieee754_log+0x300>)
 801a904:	18d2      	adds	r2, r2, r3
 801a906:	0b33      	lsrs	r3, r6, #12
 801a908:	9302      	str	r3, [sp, #8]
 801a90a:	191b      	adds	r3, r3, r4
 801a90c:	2480      	movs	r4, #128	@ 0x80
 801a90e:	0364      	lsls	r4, r4, #13
 801a910:	4023      	ands	r3, r4
 801a912:	4ca4      	ldr	r4, [pc, #656]	@ (801aba4 <__ieee754_log+0x304>)
 801a914:	9d02      	ldr	r5, [sp, #8]
 801a916:	405c      	eors	r4, r3
 801a918:	151b      	asrs	r3, r3, #20
 801a91a:	189b      	adds	r3, r3, r2
 801a91c:	4325      	orrs	r5, r4
 801a91e:	2200      	movs	r2, #0
 801a920:	9300      	str	r3, [sp, #0]
 801a922:	0029      	movs	r1, r5
 801a924:	4b9f      	ldr	r3, [pc, #636]	@ (801aba4 <__ieee754_log+0x304>)
 801a926:	f7e8 f8cf 	bl	8002ac8 <__aeabi_dsub>
 801a92a:	9b02      	ldr	r3, [sp, #8]
 801a92c:	0006      	movs	r6, r0
 801a92e:	3302      	adds	r3, #2
 801a930:	031b      	lsls	r3, r3, #12
 801a932:	000f      	movs	r7, r1
 801a934:	2200      	movs	r2, #0
 801a936:	0b1b      	lsrs	r3, r3, #12
 801a938:	2b02      	cmp	r3, #2
 801a93a:	dc64      	bgt.n	801aa06 <__ieee754_log+0x166>
 801a93c:	2300      	movs	r3, #0
 801a93e:	f7e5 fd85 	bl	800044c <__aeabi_dcmpeq>
 801a942:	2800      	cmp	r0, #0
 801a944:	d019      	beq.n	801a97a <__ieee754_log+0xda>
 801a946:	9b00      	ldr	r3, [sp, #0]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d100      	bne.n	801a94e <__ieee754_log+0xae>
 801a94c:	e11c      	b.n	801ab88 <__ieee754_log+0x2e8>
 801a94e:	0018      	movs	r0, r3
 801a950:	f7e8 fcb4 	bl	80032bc <__aeabi_i2d>
 801a954:	4a94      	ldr	r2, [pc, #592]	@ (801aba8 <__ieee754_log+0x308>)
 801a956:	4b95      	ldr	r3, [pc, #596]	@ (801abac <__ieee754_log+0x30c>)
 801a958:	0004      	movs	r4, r0
 801a95a:	000d      	movs	r5, r1
 801a95c:	f7e7 fdec 	bl	8002538 <__aeabi_dmul>
 801a960:	4a93      	ldr	r2, [pc, #588]	@ (801abb0 <__ieee754_log+0x310>)
 801a962:	0006      	movs	r6, r0
 801a964:	000f      	movs	r7, r1
 801a966:	4b93      	ldr	r3, [pc, #588]	@ (801abb4 <__ieee754_log+0x314>)
 801a968:	0020      	movs	r0, r4
 801a96a:	0029      	movs	r1, r5
 801a96c:	f7e7 fde4 	bl	8002538 <__aeabi_dmul>
 801a970:	0002      	movs	r2, r0
 801a972:	000b      	movs	r3, r1
 801a974:	0030      	movs	r0, r6
 801a976:	0039      	movs	r1, r7
 801a978:	e7ba      	b.n	801a8f0 <__ieee754_log+0x50>
 801a97a:	4a8f      	ldr	r2, [pc, #572]	@ (801abb8 <__ieee754_log+0x318>)
 801a97c:	4b8f      	ldr	r3, [pc, #572]	@ (801abbc <__ieee754_log+0x31c>)
 801a97e:	0030      	movs	r0, r6
 801a980:	0039      	movs	r1, r7
 801a982:	f7e7 fdd9 	bl	8002538 <__aeabi_dmul>
 801a986:	0002      	movs	r2, r0
 801a988:	000b      	movs	r3, r1
 801a98a:	2000      	movs	r0, #0
 801a98c:	498c      	ldr	r1, [pc, #560]	@ (801abc0 <__ieee754_log+0x320>)
 801a98e:	f7e8 f89b 	bl	8002ac8 <__aeabi_dsub>
 801a992:	0032      	movs	r2, r6
 801a994:	0004      	movs	r4, r0
 801a996:	000d      	movs	r5, r1
 801a998:	003b      	movs	r3, r7
 801a99a:	0030      	movs	r0, r6
 801a99c:	0039      	movs	r1, r7
 801a99e:	f7e7 fdcb 	bl	8002538 <__aeabi_dmul>
 801a9a2:	000b      	movs	r3, r1
 801a9a4:	0002      	movs	r2, r0
 801a9a6:	0029      	movs	r1, r5
 801a9a8:	0020      	movs	r0, r4
 801a9aa:	f7e7 fdc5 	bl	8002538 <__aeabi_dmul>
 801a9ae:	9b00      	ldr	r3, [sp, #0]
 801a9b0:	9002      	str	r0, [sp, #8]
 801a9b2:	9103      	str	r1, [sp, #12]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d106      	bne.n	801a9c6 <__ieee754_log+0x126>
 801a9b8:	0002      	movs	r2, r0
 801a9ba:	000b      	movs	r3, r1
 801a9bc:	0030      	movs	r0, r6
 801a9be:	0039      	movs	r1, r7
 801a9c0:	f7e8 f882 	bl	8002ac8 <__aeabi_dsub>
 801a9c4:	e77d      	b.n	801a8c2 <__ieee754_log+0x22>
 801a9c6:	9800      	ldr	r0, [sp, #0]
 801a9c8:	f7e8 fc78 	bl	80032bc <__aeabi_i2d>
 801a9cc:	4a76      	ldr	r2, [pc, #472]	@ (801aba8 <__ieee754_log+0x308>)
 801a9ce:	4b77      	ldr	r3, [pc, #476]	@ (801abac <__ieee754_log+0x30c>)
 801a9d0:	0004      	movs	r4, r0
 801a9d2:	000d      	movs	r5, r1
 801a9d4:	f7e7 fdb0 	bl	8002538 <__aeabi_dmul>
 801a9d8:	4a75      	ldr	r2, [pc, #468]	@ (801abb0 <__ieee754_log+0x310>)
 801a9da:	9000      	str	r0, [sp, #0]
 801a9dc:	9101      	str	r1, [sp, #4]
 801a9de:	4b75      	ldr	r3, [pc, #468]	@ (801abb4 <__ieee754_log+0x314>)
 801a9e0:	0020      	movs	r0, r4
 801a9e2:	0029      	movs	r1, r5
 801a9e4:	f7e7 fda8 	bl	8002538 <__aeabi_dmul>
 801a9e8:	0002      	movs	r2, r0
 801a9ea:	000b      	movs	r3, r1
 801a9ec:	9802      	ldr	r0, [sp, #8]
 801a9ee:	9903      	ldr	r1, [sp, #12]
 801a9f0:	f7e8 f86a 	bl	8002ac8 <__aeabi_dsub>
 801a9f4:	0032      	movs	r2, r6
 801a9f6:	003b      	movs	r3, r7
 801a9f8:	f7e8 f866 	bl	8002ac8 <__aeabi_dsub>
 801a9fc:	0002      	movs	r2, r0
 801a9fe:	000b      	movs	r3, r1
 801aa00:	9800      	ldr	r0, [sp, #0]
 801aa02:	9901      	ldr	r1, [sp, #4]
 801aa04:	e7dc      	b.n	801a9c0 <__ieee754_log+0x120>
 801aa06:	2380      	movs	r3, #128	@ 0x80
 801aa08:	05db      	lsls	r3, r3, #23
 801aa0a:	f7e6 fded 	bl	80015e8 <__aeabi_dadd>
 801aa0e:	0002      	movs	r2, r0
 801aa10:	000b      	movs	r3, r1
 801aa12:	0030      	movs	r0, r6
 801aa14:	0039      	movs	r1, r7
 801aa16:	f7e7 f94b 	bl	8001cb0 <__aeabi_ddiv>
 801aa1a:	9004      	str	r0, [sp, #16]
 801aa1c:	9105      	str	r1, [sp, #20]
 801aa1e:	9800      	ldr	r0, [sp, #0]
 801aa20:	f7e8 fc4c 	bl	80032bc <__aeabi_i2d>
 801aa24:	9a04      	ldr	r2, [sp, #16]
 801aa26:	9b05      	ldr	r3, [sp, #20]
 801aa28:	9006      	str	r0, [sp, #24]
 801aa2a:	9107      	str	r1, [sp, #28]
 801aa2c:	0010      	movs	r0, r2
 801aa2e:	0019      	movs	r1, r3
 801aa30:	f7e7 fd82 	bl	8002538 <__aeabi_dmul>
 801aa34:	4a63      	ldr	r2, [pc, #396]	@ (801abc4 <__ieee754_log+0x324>)
 801aa36:	9b02      	ldr	r3, [sp, #8]
 801aa38:	4694      	mov	ip, r2
 801aa3a:	4463      	add	r3, ip
 801aa3c:	0002      	movs	r2, r0
 801aa3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aa40:	000b      	movs	r3, r1
 801aa42:	9008      	str	r0, [sp, #32]
 801aa44:	9109      	str	r1, [sp, #36]	@ 0x24
 801aa46:	f7e7 fd77 	bl	8002538 <__aeabi_dmul>
 801aa4a:	0004      	movs	r4, r0
 801aa4c:	000d      	movs	r5, r1
 801aa4e:	4a5e      	ldr	r2, [pc, #376]	@ (801abc8 <__ieee754_log+0x328>)
 801aa50:	4b5e      	ldr	r3, [pc, #376]	@ (801abcc <__ieee754_log+0x32c>)
 801aa52:	f7e7 fd71 	bl	8002538 <__aeabi_dmul>
 801aa56:	4a5e      	ldr	r2, [pc, #376]	@ (801abd0 <__ieee754_log+0x330>)
 801aa58:	4b5e      	ldr	r3, [pc, #376]	@ (801abd4 <__ieee754_log+0x334>)
 801aa5a:	f7e6 fdc5 	bl	80015e8 <__aeabi_dadd>
 801aa5e:	0022      	movs	r2, r4
 801aa60:	002b      	movs	r3, r5
 801aa62:	f7e7 fd69 	bl	8002538 <__aeabi_dmul>
 801aa66:	4a5c      	ldr	r2, [pc, #368]	@ (801abd8 <__ieee754_log+0x338>)
 801aa68:	4b5c      	ldr	r3, [pc, #368]	@ (801abdc <__ieee754_log+0x33c>)
 801aa6a:	f7e6 fdbd 	bl	80015e8 <__aeabi_dadd>
 801aa6e:	0022      	movs	r2, r4
 801aa70:	002b      	movs	r3, r5
 801aa72:	f7e7 fd61 	bl	8002538 <__aeabi_dmul>
 801aa76:	4a5a      	ldr	r2, [pc, #360]	@ (801abe0 <__ieee754_log+0x340>)
 801aa78:	4b5a      	ldr	r3, [pc, #360]	@ (801abe4 <__ieee754_log+0x344>)
 801aa7a:	f7e6 fdb5 	bl	80015e8 <__aeabi_dadd>
 801aa7e:	9a08      	ldr	r2, [sp, #32]
 801aa80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa82:	f7e7 fd59 	bl	8002538 <__aeabi_dmul>
 801aa86:	4a58      	ldr	r2, [pc, #352]	@ (801abe8 <__ieee754_log+0x348>)
 801aa88:	9008      	str	r0, [sp, #32]
 801aa8a:	9109      	str	r1, [sp, #36]	@ 0x24
 801aa8c:	4b57      	ldr	r3, [pc, #348]	@ (801abec <__ieee754_log+0x34c>)
 801aa8e:	0020      	movs	r0, r4
 801aa90:	0029      	movs	r1, r5
 801aa92:	f7e7 fd51 	bl	8002538 <__aeabi_dmul>
 801aa96:	4a56      	ldr	r2, [pc, #344]	@ (801abf0 <__ieee754_log+0x350>)
 801aa98:	4b56      	ldr	r3, [pc, #344]	@ (801abf4 <__ieee754_log+0x354>)
 801aa9a:	f7e6 fda5 	bl	80015e8 <__aeabi_dadd>
 801aa9e:	0022      	movs	r2, r4
 801aaa0:	002b      	movs	r3, r5
 801aaa2:	f7e7 fd49 	bl	8002538 <__aeabi_dmul>
 801aaa6:	4a54      	ldr	r2, [pc, #336]	@ (801abf8 <__ieee754_log+0x358>)
 801aaa8:	4b54      	ldr	r3, [pc, #336]	@ (801abfc <__ieee754_log+0x35c>)
 801aaaa:	f7e6 fd9d 	bl	80015e8 <__aeabi_dadd>
 801aaae:	0022      	movs	r2, r4
 801aab0:	002b      	movs	r3, r5
 801aab2:	f7e7 fd41 	bl	8002538 <__aeabi_dmul>
 801aab6:	0002      	movs	r2, r0
 801aab8:	000b      	movs	r3, r1
 801aaba:	9808      	ldr	r0, [sp, #32]
 801aabc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aabe:	f7e6 fd93 	bl	80015e8 <__aeabi_dadd>
 801aac2:	9a02      	ldr	r2, [sp, #8]
 801aac4:	4b4e      	ldr	r3, [pc, #312]	@ (801ac00 <__ieee754_log+0x360>)
 801aac6:	0004      	movs	r4, r0
 801aac8:	1a9b      	subs	r3, r3, r2
 801aaca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801aacc:	000d      	movs	r5, r1
 801aace:	4313      	orrs	r3, r2
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	dd34      	ble.n	801ab3e <__ieee754_log+0x29e>
 801aad4:	2200      	movs	r2, #0
 801aad6:	4b3a      	ldr	r3, [pc, #232]	@ (801abc0 <__ieee754_log+0x320>)
 801aad8:	0030      	movs	r0, r6
 801aada:	0039      	movs	r1, r7
 801aadc:	f7e7 fd2c 	bl	8002538 <__aeabi_dmul>
 801aae0:	0032      	movs	r2, r6
 801aae2:	003b      	movs	r3, r7
 801aae4:	f7e7 fd28 	bl	8002538 <__aeabi_dmul>
 801aae8:	0002      	movs	r2, r0
 801aaea:	000b      	movs	r3, r1
 801aaec:	9002      	str	r0, [sp, #8]
 801aaee:	9103      	str	r1, [sp, #12]
 801aaf0:	0020      	movs	r0, r4
 801aaf2:	0029      	movs	r1, r5
 801aaf4:	f7e6 fd78 	bl	80015e8 <__aeabi_dadd>
 801aaf8:	9a04      	ldr	r2, [sp, #16]
 801aafa:	9b05      	ldr	r3, [sp, #20]
 801aafc:	f7e7 fd1c 	bl	8002538 <__aeabi_dmul>
 801ab00:	9b00      	ldr	r3, [sp, #0]
 801ab02:	0004      	movs	r4, r0
 801ab04:	000d      	movs	r5, r1
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d106      	bne.n	801ab18 <__ieee754_log+0x278>
 801ab0a:	0002      	movs	r2, r0
 801ab0c:	000b      	movs	r3, r1
 801ab0e:	9802      	ldr	r0, [sp, #8]
 801ab10:	9903      	ldr	r1, [sp, #12]
 801ab12:	f7e7 ffd9 	bl	8002ac8 <__aeabi_dsub>
 801ab16:	e74f      	b.n	801a9b8 <__ieee754_log+0x118>
 801ab18:	4a23      	ldr	r2, [pc, #140]	@ (801aba8 <__ieee754_log+0x308>)
 801ab1a:	4b24      	ldr	r3, [pc, #144]	@ (801abac <__ieee754_log+0x30c>)
 801ab1c:	9806      	ldr	r0, [sp, #24]
 801ab1e:	9907      	ldr	r1, [sp, #28]
 801ab20:	f7e7 fd0a 	bl	8002538 <__aeabi_dmul>
 801ab24:	4a22      	ldr	r2, [pc, #136]	@ (801abb0 <__ieee754_log+0x310>)
 801ab26:	9000      	str	r0, [sp, #0]
 801ab28:	9101      	str	r1, [sp, #4]
 801ab2a:	9806      	ldr	r0, [sp, #24]
 801ab2c:	9907      	ldr	r1, [sp, #28]
 801ab2e:	4b21      	ldr	r3, [pc, #132]	@ (801abb4 <__ieee754_log+0x314>)
 801ab30:	f7e7 fd02 	bl	8002538 <__aeabi_dmul>
 801ab34:	0022      	movs	r2, r4
 801ab36:	002b      	movs	r3, r5
 801ab38:	f7e6 fd56 	bl	80015e8 <__aeabi_dadd>
 801ab3c:	e754      	b.n	801a9e8 <__ieee754_log+0x148>
 801ab3e:	0002      	movs	r2, r0
 801ab40:	000b      	movs	r3, r1
 801ab42:	0030      	movs	r0, r6
 801ab44:	0039      	movs	r1, r7
 801ab46:	f7e7 ffbf 	bl	8002ac8 <__aeabi_dsub>
 801ab4a:	9a04      	ldr	r2, [sp, #16]
 801ab4c:	9b05      	ldr	r3, [sp, #20]
 801ab4e:	f7e7 fcf3 	bl	8002538 <__aeabi_dmul>
 801ab52:	9b00      	ldr	r3, [sp, #0]
 801ab54:	0004      	movs	r4, r0
 801ab56:	000d      	movs	r5, r1
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d102      	bne.n	801ab62 <__ieee754_log+0x2c2>
 801ab5c:	0002      	movs	r2, r0
 801ab5e:	000b      	movs	r3, r1
 801ab60:	e72c      	b.n	801a9bc <__ieee754_log+0x11c>
 801ab62:	4a11      	ldr	r2, [pc, #68]	@ (801aba8 <__ieee754_log+0x308>)
 801ab64:	4b11      	ldr	r3, [pc, #68]	@ (801abac <__ieee754_log+0x30c>)
 801ab66:	9806      	ldr	r0, [sp, #24]
 801ab68:	9907      	ldr	r1, [sp, #28]
 801ab6a:	f7e7 fce5 	bl	8002538 <__aeabi_dmul>
 801ab6e:	4a10      	ldr	r2, [pc, #64]	@ (801abb0 <__ieee754_log+0x310>)
 801ab70:	9000      	str	r0, [sp, #0]
 801ab72:	9101      	str	r1, [sp, #4]
 801ab74:	9806      	ldr	r0, [sp, #24]
 801ab76:	9907      	ldr	r1, [sp, #28]
 801ab78:	4b0e      	ldr	r3, [pc, #56]	@ (801abb4 <__ieee754_log+0x314>)
 801ab7a:	f7e7 fcdd 	bl	8002538 <__aeabi_dmul>
 801ab7e:	0002      	movs	r2, r0
 801ab80:	000b      	movs	r3, r1
 801ab82:	0020      	movs	r0, r4
 801ab84:	0029      	movs	r1, r5
 801ab86:	e733      	b.n	801a9f0 <__ieee754_log+0x150>
 801ab88:	2000      	movs	r0, #0
 801ab8a:	2100      	movs	r1, #0
 801ab8c:	e699      	b.n	801a8c2 <__ieee754_log+0x22>
 801ab8e:	46c0      	nop			@ (mov r8, r8)
 801ab90:	c3500000 	.word	0xc3500000
 801ab94:	43500000 	.word	0x43500000
 801ab98:	7fefffff 	.word	0x7fefffff
 801ab9c:	fffffc01 	.word	0xfffffc01
 801aba0:	00095f64 	.word	0x00095f64
 801aba4:	3ff00000 	.word	0x3ff00000
 801aba8:	fee00000 	.word	0xfee00000
 801abac:	3fe62e42 	.word	0x3fe62e42
 801abb0:	35793c76 	.word	0x35793c76
 801abb4:	3dea39ef 	.word	0x3dea39ef
 801abb8:	55555555 	.word	0x55555555
 801abbc:	3fd55555 	.word	0x3fd55555
 801abc0:	3fe00000 	.word	0x3fe00000
 801abc4:	fff9eb86 	.word	0xfff9eb86
 801abc8:	df3e5244 	.word	0xdf3e5244
 801abcc:	3fc2f112 	.word	0x3fc2f112
 801abd0:	96cb03de 	.word	0x96cb03de
 801abd4:	3fc74664 	.word	0x3fc74664
 801abd8:	94229359 	.word	0x94229359
 801abdc:	3fd24924 	.word	0x3fd24924
 801abe0:	55555593 	.word	0x55555593
 801abe4:	3fe55555 	.word	0x3fe55555
 801abe8:	d078c69f 	.word	0xd078c69f
 801abec:	3fc39a09 	.word	0x3fc39a09
 801abf0:	1d8e78af 	.word	0x1d8e78af
 801abf4:	3fcc71c5 	.word	0x3fcc71c5
 801abf8:	9997fa04 	.word	0x9997fa04
 801abfc:	3fd99999 	.word	0x3fd99999
 801ac00:	0006b851 	.word	0x0006b851

0801ac04 <_init>:
 801ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac06:	46c0      	nop			@ (mov r8, r8)
 801ac08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac0a:	bc08      	pop	{r3}
 801ac0c:	469e      	mov	lr, r3
 801ac0e:	4770      	bx	lr

0801ac10 <_fini>:
 801ac10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac12:	46c0      	nop			@ (mov r8, r8)
 801ac14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac16:	bc08      	pop	{r3}
 801ac18:	469e      	mov	lr, r3
 801ac1a:	4770      	bx	lr
